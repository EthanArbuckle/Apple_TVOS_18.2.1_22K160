BOOL sub_181C1A7C0(uint64_t *a1, uint64_t *a2)
{
  return sub_181C1942C(*a1, *a2);
}

uint64_t NWEthernetChannel.send(content:to:vlanTag:completion:)( uint64_t a1, uint64_t a2, char **a3, uint16_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  v13 = *a3;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    v13 = sub_181C1BCA8((uint64_t)v13);
  }
  sub_181C1A868((unsigned __int8 *)v13 + 32, v7, a1, a2, a4, a5, a6);
  return swift_bridgeObjectRelease();
}

void sub_181C1A868( unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint16_t a5, uint64_t a6, uint64_t a7)
{
  v11 = *(nw_ethernet_channel **)(a2 + 16);
  swift_unknownObjectRetain();
  v12 = (void *)sub_18264E5EC();
  v14 = (dispatch_data_s *)NWCreateDispatchDataFromNSData(v12, v13);

  if (v14)
  {
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = a6;
    *(void *)(v15 + 24) = a7;
    v17[4] = sub_181BBF9F8;
    v17[5] = v15;
    v17[0] = MEMORY[0x1895F87A8];
    v17[1] = 1107296256LL;
    v17[2] = sub_181BBF440;
    v17[3] = &block_descriptor_44;
    v16 = _Block_copy(v17);
    swift_retain();
    swift_release();
    nw_ethernet_channel_send(v11, v14, a5, a1, v16);
    _Block_release(v16);
    swift_unknownObjectRelease();
  }

  else
  {
    __break(1u);
  }

uint64_t (*NWEthernetChannel.receiveHandler.getter())(uint64_t, uint64_t, __int16, uint64_t, uint64_t)
{
  v1 = *(os_unfair_lock_s **)(v0 + 24);
  uint64_t v2 = (uint64_t)&v1[4];
  v3 = v1 + 17;
  os_unfair_lock_lock(v1 + 17);
  sub_181C1AF0C(v2, &v6);
  os_unfair_lock_unlock(v3);
  if (!(void)v6) {
    return 0LL;
  }
  __int128 v5 = v6;
  *(_OWORD *)(swift_allocObject() + 16) = v5;
  return sub_181C1C5E4;
}

double sub_181C1AA28@<D0>( uint64_t a1@<X0>, void (*a2)(__int128 *__return_ptr, os_unfair_lock_s *)@<X3>, _OWORD *a3@<X8>)
{
  __int128 v5 = *(os_unfair_lock_s **)(*(void *)a1 + 24LL);
  __int128 v6 = v5 + 4;
  uint64_t v7 = v5 + 17;
  os_unfair_lock_lock(v5 + 17);
  a2(&v9, v6);
  os_unfair_lock_unlock(v7);
  double result = *(double *)&v9;
  *a3 = v9;
  return result;
}

void sub_181C1AA9C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    v4 = sub_181C1C5E4;
  }

  else
  {
    v4 = 0LL;
    uint64_t v3 = 0LL;
  }

  sub_181BC904C(v1);
  NWEthernetChannel.receiveHandler.setter((uint64_t)v4, v3);
}

void NWEthernetChannel.receiveHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 68));
  uint64_t v6 = *(void *)(v5 + 40);
  sub_181BC904C(a1);
  sub_181BD25B8(v6);
  *(void *)(v5 + 40) = a1;
  *(void *)(v5 + 48) = a2;
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 68));
  if (a1)
  {
    uint64_t v7 = *(nw_ethernet_channel **)(v2 + 16);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = a1;
    *(void *)(v8 + 24) = a2;
    v10[4] = sub_181C1C5E8;
    v10[5] = v8;
    v10[0] = MEMORY[0x1895F87A8];
    v10[1] = 1107296256LL;
    v10[2] = sub_181C1AE98;
    v10[3] = &block_descriptor_20;
    __int128 v9 = _Block_copy(v10);
    sub_181BC904C(a1);
    sub_181BC904C(a1);
    swift_unknownObjectRetain();
    swift_release();
    nw_ethernet_channel_set_receive_handler(v7, v9);
    sub_181BD25B8(a1);
    _Block_release(v9);
    swift_unknownObjectRelease();
    sub_181BD25B8(a1);
  }

  else
  {
    nw_ethernet_channel_set_receive_handler(*(nw_ethernet_channel_t *)(v2 + 16), 0LL);
  }

void *sub_181C1AC7C(void *a1, uint64_t a2, _BYTE *a3)
{
  double result = NWCreateNSDataFromDispatchData(a1);
  if (result)
  {
    uint64_t v5 = result;
    sub_18264E5F8();

    sub_181C51DC0(a3, 6LL);
    __asm { BR              X10 }
  }

  return result;
}

void sub_181C1AE98(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_181C1AF0C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = sub_181C1CACC;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v5 = 0LL;
  }

  *a2 = v6;
  a2[1] = v5;
  return sub_181BC904C(v3);
}

uint64_t (*NWEthernetChannel.receiveHandler.modify( uint64_t (**a1)(uint64_t, uint64_t, __int16, uint64_t, uint64_t)))(uint64_t *a1, char a2)
{
  a1[2] = (uint64_t (*)(uint64_t, uint64_t, __int16, uint64_t, uint64_t))v1;
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 24);
  uint64_t v4 = (uint64_t)&v3[4];
  uint64_t v5 = v3 + 17;
  os_unfair_lock_lock(v3 + 17);
  sub_181C1AF0C(v4, &v10);
  os_unfair_lock_unlock(v5);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, __int16, uint64_t, uint64_t))v10;
  if ((void)v10)
  {
    __int128 v9 = v10;
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = v9;
    uint64_t v6 = sub_181C1C5E4;
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  *a1 = v6;
  a1[1] = (uint64_t (*)(uint64_t, uint64_t, __int16, uint64_t, uint64_t))v7;
  return sub_181C1B028;
}

uint64_t sub_181C1B028(uint64_t *a1, char a2)
{
  return sub_181BD2348( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t))NWEthernetChannel.receiveHandler.setter,  (void (*)(uint64_t, uint64_t))sub_181BC904C,  (uint64_t (*)(uint64_t, uint64_t))sub_181BD25B8);
}

uint64_t NWEthernetChannel.deinit()
{
  return v0;
}

uint64_t NWEthernetChannel.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void sub_181C1B0A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

uint64_t sub_181C1B104( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20, char a21, char a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37)
{
  uint64_t v42 = v39;
  __int16 v43 = v40;
  char v44 = BYTE2(v40);
  char v45 = BYTE3(v40);
  char v46 = BYTE4(v40);
  char v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x181C1B2E8LL);
  }

  uint64_t result = memcmp(v38, &v42, BYTE6(v40));
  BOOL *v37 = (_DWORD)result == 0;
  return result;
}

uint64_t sub_181C1B30C( uint64_t a1, char a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  v50[3] = a4;
  if (a1 < 0) {
    goto LABEL_42;
  }
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = MEMORY[0x18961AFE8];
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = 15LL;
  uint64_t v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000LL) != 0 ? (uint64_t v12 = HIBYTE(a6) & 0xF) : (uint64_t v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000LL) == 0) {
      uint64_t v11 = a5 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v30 = 7LL;
    if (((a6 >> 60) & ((a5 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v30 = 11LL;
    }
    sub_181C1B7A8(v30 | (v11 << 16), v47, a2 & 1, v10);
    swift_bridgeObjectRelease();
    v13 = *(void **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_39:
    swift_release();
    return (uint64_t)v13;
  }

  uint64_t v42 = a1;
  uint64_t v43 = v10;
  unint64_t v48 = 4 * v12;
  v13 = (void *)MEMORY[0x18961AFE8];
  unint64_t v14 = 15LL;
  unint64_t v15 = 15LL;
  unint64_t v16 = 15LL;
  while (1)
  {
    v50[0] = sub_18264EBEC();
    v50[1] = v17;
    char v18 = a3(v50);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v13;
    }

    char v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0) {
      break;
    }
    unint64_t v14 = sub_18264EB5C();
LABEL_9:
    if (v48 == v14 >> 14) {
      goto LABEL_29;
    }
  }

  if (v15 >> 14 == v14 >> 14 && (a2 & 1) != 0)
  {
    unint64_t v14 = sub_18264EB5C();
    *(void *)(v47 + 16) = v14;
    unint64_t v15 = v14;
    unint64_t v16 = v14;
    goto LABEL_9;
  }

  if (v14 >> 14 < v15 >> 14) {
    goto LABEL_41;
  }
  uint64_t v20 = sub_18264EC04();
  uint64_t v44 = v21;
  uint64_t v45 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    v13 = sub_181BC4ECC(0LL, v13[2] + 1LL, 1, v13);
  }
  unint64_t v27 = v13[2];
  unint64_t v26 = v13[3];
  if (v27 >= v26 >> 1) {
    v13 = sub_181BC4ECC((void *)(v26 > 1), v27 + 1, 1, v13);
  }
  v13[2] = v27 + 1;
  v28 = &v13[4 * v27];
  v28[4] = v45;
  v28[5] = v23;
  v28[6] = v25;
  v28[7] = v44;
  *(void *)(v43 + 16) = v13;
  uint64_t v29 = sub_18264EB5C();
  unint64_t v14 = v29;
  *(void *)(v47 + 16) = v29;
  if (v13[2] != v42)
  {
    unint64_t v15 = v29;
    unint64_t v16 = v29;
    goto LABEL_9;
  }

  unint64_t v16 = v29;
  unint64_t v15 = v29;
LABEL_29:
  if (v48 == v15 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_39;
  }

  if (v48 >= v16 >> 14)
  {
    uint64_t v31 = sub_18264EC04();
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      v13 = sub_181BC4ECC(0LL, v13[2] + 1LL, 1, v13);
    }
    unint64_t v39 = v13[2];
    unint64_t v38 = v13[3];
    if (v39 >= v38 >> 1) {
      v13 = sub_181BC4ECC((void *)(v38 > 1), v39 + 1, 1, v13);
    }
    v13[2] = v39 + 1;
    uint64_t v40 = &v13[4 * v39];
    v40[4] = v31;
    v40[5] = v33;
    v40[6] = v35;
    v40[7] = v37;
    *(void *)(v43 + 16) = v13;
    goto LABEL_38;
  }

uint64_t sub_181C1B7A8(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a2 + 16) >> 14;
  int v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1) {
    return v5 ^ 1u;
  }
  if (a1 >> 14 >= v4)
  {
    uint64_t v7 = sub_18264EC04();
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    unint64_t v14 = *(void **)(a4 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v14 = sub_181BC4ECC(0LL, v14[2] + 1LL, 1, v14);
      *(void *)(a4 + 16) = v14;
    }

    unint64_t v17 = v14[2];
    unint64_t v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      unint64_t v14 = sub_181BC4ECC((void *)(v16 > 1), v17 + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }

    v14[2] = v17 + 1;
    char v18 = &v14[4 * v17];
    v18[4] = v7;
    v18[5] = v9;
    v18[6] = v11;
    v18[7] = v13;
    return v5 ^ 1u;
  }

  uint64_t result = sub_18264F318();
  __break(1u);
  return result;
}

uint64_t sub_181C1B900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  sub_181C1CB04();
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_18264EBF8();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000LL) == 0)
  {
    if ((v6 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }

  uint64_t v7 = sub_181C8B3F4();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000LL) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v9 = (unsigned __int8 *)sub_18264F228();
  }

unsigned __int8 *sub_181C1B9EC(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v14 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v15 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v16 = a3 + 55;
        }

        else
        {
          unsigned __int8 v15 = 97;
          unsigned __int8 v16 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v17 = a3 + 48;
        }
        else {
          unsigned __int8 v17 = 58;
        }
        if (result)
        {
          LOBYTE(v8) = 0;
          uint64_t v18 = result + 1;
          do
          {
            unsigned int v19 = *v18;
            if (v19 < 0x30 || v19 >= v17)
            {
              if (v19 < 0x41 || v19 >= v16)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v19 < 0x61 || v19 >= v15) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v20 = -87;
              }

              else
              {
                char v20 = -55;
              }
            }

            else
            {
              char v20 = -48;
            }

            unsigned int v8 = (v8 * a3) + (v19 + v20);
            if (((v8 >> 8) & 1) != 0) {
              goto LABEL_72;
            }
            ++v18;
            --v14;
          }

          while (v14);
LABEL_48:
          int v13 = 0;
          unsigned __int8 v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }

        goto LABEL_71;
      }

void *sub_181C1BC94(void *a1)
{
  return sub_181BC461C(0LL, a1[2], 0, a1);
}

char *sub_181C1BCA8(uint64_t a1)
{
  return sub_181BC4A78(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

void sub_181C1BCBC(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_18264F330();
    swift_bridgeObjectRelease();
  }

  JUMPOUT(0x186E0ED54LL);
}

void sub_181C1BD24(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_18264E61C();
  MEMORY[0x1895F8858](v3);
  __asm { BR              X10 }

void *sub_181C1BDA0()
{
  if (BYTE6(v0))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58AC08);
    uint64_t v4 = (void *)swift_allocObject();
    size_t v6 = _swift_stdlib_malloc_size(v4);
    v4[2] = BYTE6(v0);
    v4[3] = 2 * v6 - 64;
    sub_181BCD4AC(v2, v0);
    uint64_t v7 = sub_18264E5A4();
    sub_181BCD4F0(v2, v0);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v1);
    if (v7 != BYTE6(v0))
    {
      __break(1u);
      JUMPOUT(0x181C1BE74LL);
    }
  }

  return v4;
}

uint64_t _s7Network17NWEthernetChannelC5StateO2eeoiySbAE_AEtFZ_0(unsigned int *a1, unsigned int *a2)
{
  unsigned int v2 = *((unsigned __int8 *)a1 + 4);
  unint64_t v3 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
  unint64_t v4 = *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32);
  unsigned int v5 = v2 >> 6;
  if (v5)
  {
    if (v5 != 1) {
      __asm { BR              X10 }
    }

    if (((v4 >> 38) & 3) != 1) {
      return 0LL;
    }
    uint64_t v6 = HIDWORD(v3) & 0x3F;
    uint64_t v7 = HIDWORD(v4) & 0x3F;
    if ((_DWORD)v6)
    {
      if ((_DWORD)v6 == 1) {
        return (_DWORD)v7 == 1 && (_DWORD)v3 == *a2;
      }
      return (_DWORD)v7 == 2 && (_DWORD)v3 == *a2;
    }

    goto LABEL_20;
  }

  if (((v4 >> 38) & 3) != 0) {
    return 0LL;
  }
  LODWORD(v7) = BYTE4(v4);
  if (!HIDWORD(v3))
  {
LABEL_20:
    if (!(_DWORD)v7)
    {
      int v10 = sub_18264E958();
    }

    return 0LL;
  }

  if (HIDWORD(v3) != 1) {
    return (_DWORD)v7 == 2 && (_DWORD)v3 == *a2;
  }
  return (_DWORD)v7 == 1 && (_DWORD)v3 == *a2;
}

uint64_t sub_181C1BFB0()
{
  return swift_deallocObject();
}

uint64_t sub_181C1BFD4()
{
  if (*(void *)(v0 + 24)) {
    swift_release();
  }
  return swift_deallocObject();
}

void sub_181C1C008(uint64_t a1, nw_error *a2)
{
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t sub_181C1C02C(nw_interface **a1, uint16_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CD50);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 68) = 0;
  *(_BYTE *)(result + 20) = 0x80;
  *(_DWORD *)(result + 16) = 0;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 49) = 0u;
  *(void *)(v4 + 24) = result;
  *(_WORD *)(v4 + 32) = a2;
  *(void *)(v4 + 40) = v7;
  if (v7)
  {
    uint64_t v9 = *(void *)(a3 + 16);
    int v10 = (void *)(v9 + 16);
    char v11 = (os_unfair_lock_s *)(v9 + 24);
    swift_unknownObjectRetain();
    os_unfair_lock_lock(v11);
    sub_181C96C68(v10, &parameters);
    os_unfair_lock_unlock(v11);
    nw_ethernet_channel_t v12 = nw_ethernet_channel_create_with_parameters(a2, v7, parameters);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    *(void *)(v4 + 16) = v12;
    sub_181BC904C(0LL);
    NWEthernetChannel.stateUpdateHandler.setter(0LL, 0LL);
    return v4;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_181C1C13C(void *a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1]) {
    return 1LL;
  }
  else {
    return sub_18264F4EC() & 1;
  }
}

uint64_t sub_181C1C190( uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10 = a2;
  uint64_t v11 = result;
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000LL) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4LL << v12;
  unint64_t v14 = a2 & 0xC;
  if (v14 == 4LL << v12)
  {
    uint64_t result = sub_181C23710(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000LL) == 0)
    {
LABEL_5:
      int64_t v15 = a2 >> 16;
      if (v14 != v13) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }

  else if ((a5 & 0x1000000000000000LL) == 0)
  {
    goto LABEL_5;
  }

  unint64_t v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000LL) != 0) {
    unint64_t v16 = HIBYTE(a5) & 0xF;
  }
  if (v16 < a2 >> 16) {
    goto LABEL_104;
  }
  uint64_t result = sub_18264EBBC();
  int64_t v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    uint64_t result = sub_181C23710(v10, a4, a5);
    unint64_t v10 = result;
  }

void *sub_181C1C5E8(void *a1, uint64_t a2, _BYTE *a3)
{
  return sub_181C1AC7C(a1, a2, a3);
}

unint64_t sub_181C1C5F4()
{
  unint64_t result = qword_18C58CD58;
  if (!qword_18C58CD58)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWEthernetChannel.EthernetAddress,  &type metadata for NWEthernetChannel.EthernetAddress);
    atomic_store(result, (unint64_t *)&qword_18C58CD58);
  }

  return result;
}

double sub_181C1C638@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_181C1AA28(a1, (void (*)(__int128 *__return_ptr, os_unfair_lock_s *))sub_181C19A84, a2);
}

double sub_181C1C658@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_181C1AA28(a1, (void (*)(__int128 *__return_ptr, os_unfair_lock_s *))sub_181C1AF0C, a2);
}

uint64_t type metadata accessor for NWEthernetChannel()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWEthernetChannel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWEthernetChannel.__allocating_init(on:etherType:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of NWEthernetChannel.__allocating_init(on:etherType:parameters:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

ValueMetadata *type metadata accessor for NWEthernetChannel.State()
{
  return &type metadata for NWEthernetChannel.State;
}

ValueMetadata *type metadata accessor for NWEthernetChannel.EthernetAddress()
{
  return &type metadata for NWEthernetChannel.EthernetAddress;
}

void destroy for NWEthernetChannel.LockedState(uint64_t a1)
{
  if (*(void *)(a1 + 8)) {
    swift_release();
  }
  if (*(void *)(a1 + 24)) {
    swift_release();
  }
}

uint64_t initializeWithCopy for NWEthernetChannel.LockedState(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    swift_retain();
  }

  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }

  uint64_t v6 = *(void *)(a2 + 24);
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = v7;
    swift_retain();
  }

  else
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }

  unsigned int v8 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  id v9 = v8;
  return a1;
}

uint64_t assignWithCopy for NWEthernetChannel.LockedState(uint64_t a1, int *a2)
{
  int v4 = *a2;
  *(_BYTE *)(a1 + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)a1 = v4;
  uint64_t v5 = (_OWORD *)(a1 + 8);
  uint64_t v7 = a2 + 2;
  uint64_t v6 = *((void *)a2 + 1);
  if (*(void *)(a1 + 8))
  {
    if (v6)
    {
      uint64_t v8 = *((void *)a2 + 2);
      *(void *)(a1 + 8) = v6;
      *(void *)(a1 + 16) = v8;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }

    swift_release();
  }

  else if (v6)
  {
    uint64_t v9 = *((void *)a2 + 2);
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v9;
    swift_retain();
    goto LABEL_8;
  }

  *uint64_t v5 = *v7;
LABEL_8:
  uint64_t v10 = *((void *)a2 + 3);
  if (!*(void *)(a1 + 24))
  {
    if (v10)
    {
      uint64_t v12 = *((void *)a2 + 4);
      *(void *)(a1 + 24) = v10;
      *(void *)(a1 + 32) = v12;
      swift_retain();
      goto LABEL_15;
    }

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for NWEthernetChannel.LockedState(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  __int128 v4 = (_OWORD *)(a1 + 8);
  uint64_t v6 = (_OWORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8))
  {
    if (v5)
    {
      uint64_t v7 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v7;
      swift_release();
      goto LABEL_8;
    }

    swift_release();
  }

  else if (v5)
  {
    uint64_t v8 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v8;
    goto LABEL_8;
  }

  *__int128 v4 = *v6;
LABEL_8:
  uint64_t v9 = *(void *)(a2 + 24);
  if (!*(void *)(a1 + 24))
  {
    if (v9)
    {
      uint64_t v11 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v9;
      *(void *)(a1 + 32) = v11;
      goto LABEL_15;
    }

uint64_t getEnumTagSinglePayload for NWEthernetChannel.LockedState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NWEthernetChannel.LockedState( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 49) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 49) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NWEthernetChannel.LockedState()
{
  return &type metadata for NWEthernetChannel.LockedState;
}

uint64_t sub_181C1CA8C(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(uint64_t (**)(void *, __int16 *, uint64_t, uint64_t))(v5 + 16);
  v9[0] = a1;
  v9[1] = a2;
  __int16 v8 = a3;
  return v6(v9, &v8, a4, a5);
}

uint64_t sub_181C1CACC(void *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, void, void, uint64_t, uint64_t))(v4 + 16))(*a1, a1[1], *a2, a3, a4);
}

unint64_t sub_181C1CB04()
{
  unint64_t result = qword_18C58CDC0;
  if (!qword_18C58CDC0)
  {
    unint64_t result = MEMORY[0x186E12084](MEMORY[0x189618C60], MEMORY[0x189618C50]);
    atomic_store(result, (unint64_t *)&qword_18C58CDC0);
  }

  return result;
}

uint64_t sub_181C1CB48()
{
  return swift_deallocObject();
}

uint64_t sub_181C1CB6C()
{
  return swift_deallocObject();
}

void sub_181C1CBB4()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CDD0);
  MEMORY[0x1895F8858](v2);
  uint64_t v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A1C8);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  __int16 v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(qword_18C58C2B8);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A1F0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  id v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = v1 + OBJC_IVAR____TtC7Network7Browser_startContinuation;
  swift_beginAccess();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v16, 1LL, v12))
  {
    if (!*(void *)(v1 + 24)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v16, v12);
  sub_18264ED9C();
  uint64_t v29 = v5;
  uint64_t v24 = v6;
  unsigned int v25 = v8;
  uint64_t v26 = v4;
  sub_181C1D2AC();
  uint64_t v27 = swift_allocError();
  sub_18264E9B8();
  uint64_t v31 = v27;
  uint64_t v4 = v26;
  __int16 v8 = v25;
  uint64_t v6 = v24;
  uint64_t v5 = v29;
  sub_18264ED78();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  if (*(void *)(v1 + 24))
  {
LABEL_3:
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D6A0);
    sub_18264EE5C();
    swift_release();
  }

uint64_t sub_181C1CFD0()
{
  swift_release();
  sub_181BDA0F0(v0 + OBJC_IVAR____TtC7Network7Browser_endpoint, &qword_18C45E580);
  return v0;
}

uint64_t sub_181C1D06C()
{
  return swift_deallocClassInstance();
}

uint64_t sub_181C1D090()
{
  return type metadata accessor for Browser();
}

uint64_t type metadata accessor for Browser()
{
  uint64_t result = qword_18C58A198;
  if (!qword_18C58A198) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_181C1D0D4()
{
  if (v0 <= 0x3F)
  {
    sub_181C1D1C8(319LL, (unint64_t *)&unk_18C58A1D0, &qword_18C58A1C8);
    if (v1 <= 0x3F)
    {
      sub_181C1D214();
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }

void sub_181C1D1C8(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  if (!*a2)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    unint64_t v4 = sub_18264F09C();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }

void sub_181C1D214()
{
  if (!qword_18C45E7B0)
  {
    type metadata accessor for NWEndpoint();
    unint64_t v0 = sub_18264F09C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_18C45E7B0);
    }
  }

uint64_t sub_181C1D268(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(a2, a1, v5);
  return a2;
}

unint64_t sub_181C1D2AC()
{
  unint64_t result = qword_18C58CDD8;
  if (!qword_18C58CDD8)
  {
    uint64_t v1 = sub_18264ED9C();
    unint64_t result = MEMORY[0x186E12084](MEMORY[0x18961BCC0], v1);
    atomic_store(result, (unint64_t *)&qword_18C58CDD8);
  }

  return result;
}

uint64_t sub_181C1D2F4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 a5)
{
  uint64_t v7 = result;
  unint64_t v8 = a5;
  if (!a2)
  {
    uint64_t v9 = 0LL;
    goto LABEL_15;
  }

  uint64_t v9 = a3;
  if (!a3)
  {
LABEL_15:
    *(void *)uint64_t v7 = a4;
    *(_WORD *)(v7 + 8) = v8;
    return v9;
  }

  if ((a3 & 0x8000000000000000LL) == 0)
  {
    if (a5 == 0xFFFF)
    {
      uint64_t v9 = 0LL;
      LOWORD(v8) = -1;
    }

    else
    {
      if (*(void *)(a4 + 16) <= (unint64_t)a5)
      {
LABEL_12:
        __break(1u);
LABEL_13:
        LOWORD(v8) = -1;
        uint64_t v9 = v5;
      }

      else
      {
        uint64_t v10 = a2;
        uint64_t v5 = 1LL;
        while (1)
        {
          uint64_t v11 = a4 + 32 + (v8 << 6);
          uint64_t v12 = *(void *)(v11 + 8);
          uint64_t v13 = *(void *)(v11 + 16);
          uint64_t v14 = *(void *)(v11 + 24);
          char v15 = *(_BYTE *)(v11 + 32);
          uint64_t v16 = *(void *)(v11 + 40);
          uint64_t v17 = *(void *)(v11 + 48);
          unint64_t v8 = *(unsigned __int16 *)(v11 + 56);
          *(void *)uint64_t v10 = *(void *)v11;
          *(void *)(v10 + 8) = v12;
          *(void *)(v10 + 16) = v13;
          *(void *)(v10 + 24) = v14;
          *(_BYTE *)(v10 + 32) = v15;
          *(void *)(v10 + 40) = v16;
          *(void *)(v10 + 48) = v17;
          if (v9 == v5) {
            break;
          }
          if ((_DWORD)v8 == 0xFFFF) {
            goto LABEL_13;
          }
          ++v5;
          unint64_t v18 = *(void *)(a4 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v10 += 56LL;
          if (v18 <= v8) {
            goto LABEL_12;
          }
        }
      }

      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    goto LABEL_15;
  }

  __break(1u);
  return result;
}

unint64_t sub_181C1D414(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t result = swift_beginAccess();
  unint64_t v9 = *(void *)(*(void *)(a4 + 16) + 16LL);
  if (v9 < a1)
  {
    __break(1u);
    goto LABEL_14;
  }

  if (v9 < a3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v10 = a3 - a1;
  if (a2 >= 1)
  {
    return 0LL;
  }

  if (v10 <= 0 && v10 > a2) {
    return 0LL;
  }
LABEL_10:
  unint64_t result = a1 + a2;
  if (__OFADD__(a1, a2))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  if (result > v9) {
LABEL_16:
  }
    __break(1u);
  return result;
}

unint64_t HTTPFields.init(dictionaryLiteral:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)swift_allocObject();
  uint64_t v4 = MEMORY[0x18961AFE8];
  v3[2] = MEMORY[0x18961AFE8];
  v3[3] = sub_181C87FF8(v4);
  uint64_t v5 = (_DWORD *)swift_slowAlloc();
  v3[4] = v5;
  *uint64_t v5 = 0;
  unint64_t v6 = *(void *)(a1 + 16);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v7 = sub_181C1DF54();
    swift_release();
    uint64_t v3 = v7;
  }

  swift_beginAccess();
  if (v3[3])
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A200);
    sub_18264E9D0();
  }

  swift_endAccess();
  unsigned __int8 v32 = v3 + 2;
  swift_beginAccess();
  unint64_t v8 = (void *)v3[2];
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  v3[2] = v8;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v6 > v8[3] >> 1)
  {
    if (v8[2] <= v6) {
      int64_t v10 = v6;
    }
    else {
      int64_t v10 = v8[2];
    }
    unint64_t v8 = sub_181BC461C(isUniquelyReferenced_nonNull_native, v10, 0, v8);
  }

  *unsigned __int8 v32 = v8;
  unint64_t result = swift_endAccess();
  uint64_t v36 = *(void *)(a1 + 16);
  if (v36)
  {
    unint64_t v12 = 0LL;
    uint64_t v34 = v3;
    uint64_t v35 = a1 + 32;
    uint64_t v33 = a1;
    do
    {
      if (v12 >= *(void *)(a1 + 16))
      {
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
        return result;
      }

      uint64_t v16 = (uint64_t *)(v35 + 48 * v12);
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      uint64_t v20 = (unsigned __int8 *(*)@<X0>(unsigned __int8 *@<X0>, _DWORD *@<X8>))v16[2];
      uint64_t v19 = v16[3];
      unint64_t v21 = v16[4];
      unint64_t v22 = v16[5];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      char v23 = sub_18264EBE0();
      swift_bridgeObjectRelease();
      unint64_t result = swift_bridgeObjectRelease();
      if ((v23 & 1) != 0) {
        goto LABEL_48;
      }
      uint64_t v38 = v18;
      uint64_t v37 = v19;
      unint64_t v39 = v12 + 1;
      if ((v22 & 0x2000000000000000LL) != 0) {
        unint64_t v24 = HIBYTE(v22) & 0xF;
      }
      else {
        unint64_t v24 = v21 & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v25 = (v21 >> 59) & 1;
      if ((v22 & 0x1000000000000000LL) == 0) {
        LOBYTE(v25) = 1;
      }
      uint64_t v26 = 4LL << v25;
      unint64_t v27 = 15LL;
      do
      {
        while (1)
        {
          if (4 * v24 == v27 >> 14)
          {
            uint64_t v3 = v34;
            swift_retain();
            goto LABEL_14;
          }

          unint64_t v28 = v27 & 0xC;
          unint64_t result = v27;
          if (v28 == v26) {
            unint64_t result = sub_181C23710(v27, v21, v22);
          }
          unint64_t v29 = result >> 16;
          if (result >> 16 >= v24)
          {
            __break(1u);
LABEL_46:
            __break(1u);
            goto LABEL_47;
          }

          if ((v22 & 0x1000000000000000LL) == 0) {
            break;
          }
          unint64_t result = sub_18264EBC8();
          char v30 = result;
          if (v28 == v26) {
            goto LABEL_40;
          }
LABEL_35:
          if ((v22 & 0x1000000000000000LL) != 0) {
            goto LABEL_36;
          }
LABEL_23:
          unint64_t v27 = (v27 & 0xFFFFFFFFFFFF0000LL) + 65540;
          if (v30 < 0) {
            goto LABEL_42;
          }
        }

        if ((v22 & 0x2000000000000000LL) != 0)
        {
          unint64_t v40 = v21;
          uint64_t v41 = v22 & 0xFFFFFFFFFFFFFFLL;
          char v30 = *((_BYTE *)&v40 + v29);
          if (v28 == v26) {
            goto LABEL_40;
          }
          goto LABEL_35;
        }

        unint64_t result = (v22 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((v21 & 0x1000000000000000LL) == 0) {
          unint64_t result = sub_18264F228();
        }
        char v30 = *(_BYTE *)(result + v29);
        if (v28 != v26) {
          goto LABEL_35;
        }
LABEL_40:
        unint64_t result = sub_181C23710(v27, v21, v22);
        unint64_t v27 = result;
        if ((v22 & 0x1000000000000000LL) == 0) {
          goto LABEL_23;
        }
LABEL_36:
        if (v24 <= v27 >> 16) {
          goto LABEL_46;
        }
        unint64_t v27 = sub_18264EB98();
      }

      while ((v30 & 0x80) == 0);
LABEL_42:
      unint64_t v40 = v21;
      uint64_t v41 = v22;
      unsigned int v42 = sub_181C94200;
      uint64_t v43 = 0LL;
      unint64_t v47 = 0LL;
      unint64_t v48 = 0xE000000000000000LL;
      uint64_t v3 = v34;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C548);
      sub_181C02894((unint64_t *)&qword_18C58C550, &qword_18C58C548, MEMORY[0x189619618]);
      sub_18264EB14();
      swift_bridgeObjectRelease();
      unint64_t v21 = v47;
      unint64_t v22 = v48;
LABEL_14:
      a1 = v33;
      uint64_t v13 = sub_181C024EC(v21, v22);
      uint64_t v15 = v14;
      swift_bridgeObjectRelease();
      unint64_t v40 = v38;
      uint64_t v41 = v17;
      unsigned int v42 = v20;
      uint64_t v43 = v37;
      char v44 = 0;
      uint64_t v45 = v13;
      uint64_t v46 = v15;
      sub_181C1E17C((uint64_t *)&v40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t result = swift_release();
      ++v12;
    }

    while (v39 != v36);
  }

  swift_bridgeObjectRelease();
  unint64_t result = swift_beginAccess();
  if (*(void *)(*v32 + 16LL) > 0xFFFEuLL) {
    goto LABEL_49;
  }
  *a2 = v3;
  return result;
}

uint64_t HTTPFields.subscript.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t v3 = sub_181C1DA34();
  if (*(void *)(v3 + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = sub_181C8C01C(v2, v1);
    if ((v5 & 1) != 0) {
      unsigned __int16 v6 = *(_WORD *)(*(void *)(v3 + 56) + 4 * v4);
    }
    else {
      unsigned __int16 v6 = -1;
    }
    swift_bridgeObjectRelease();
  }

  else
  {
    unsigned __int16 v6 = -1;
  }

  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v7 = swift_bridgeObjectRetain();
  uint64_t v8 = sub_181C23934(v7, v6);
  swift_bridgeObjectRelease();
  return v8;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v4 = *v1;
  char v5 = sub_181C1DA34();
  if (!*(void *)(v5 + 16)) {
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  unsigned __int16 v6 = sub_181C8C01C(v3, v2);
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    swift_bridgeObjectRelease();
    swift_beginAccess();
    return 0LL;
  }

  uint64_t v8 = *(unsigned __int16 *)(*(void *)(v5 + 56) + 4 * v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t result = swift_beginAccess();
  if (v8 == 0xFFFF) {
    return 0LL;
  }
  if (*(void *)(*(void *)(v4 + 16) + 16LL) > v8)
  {
    if (v3 != 0x65696B6F6F63LL || v2 != 0xE600000000000000LL) {
      sub_18264F4EC();
    }
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CDE0);
    sub_181C02894(&qword_18C58CDE8, &qword_18C58CDE0, MEMORY[0x189619618]);
    sub_181BE46C4();
    int64_t v10 = sub_18264EC70();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v10;
  }

  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  unsigned __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = sub_181C1DA34();
  if (*(void *)(v3 + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = sub_181C8C01C(v1, v2);
    if ((v5 & 1) != 0) {
      unsigned __int16 v6 = *(_WORD *)(*(void *)(v3 + 56) + 4 * v4);
    }
    else {
      unsigned __int16 v6 = -1;
    }
    swift_bridgeObjectRelease();
  }

  else
  {
    unsigned __int16 v6 = -1;
  }

  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v7 = swift_bridgeObjectRetain();
  uint64_t v8 = sub_181C20124(v7, v6);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_181C1D9F8()
{
  return swift_deallocClassInstance();
}

uint64_t sub_181C1DA34()
{
  uint64_t v1 = (os_unfair_lock_s *)v0[4];
  os_unfair_lock_lock(v1);
  swift_beginAccess();
  uint64_t v2 = (void *)v0[3];
  if (v2)
  {
    swift_bridgeObjectRetain();
    os_unfair_lock_unlock(v1);
    return (uint64_t)v2;
  }

  uint64_t v37 = v0 + 3;
  lock = v1;
  swift_beginAccess();
  uint64_t v40 = *(void *)(v0[2] + 16LL);
  if (!v40)
  {
    uint64_t v35 = 0LL;
    uint64_t v36 = 0LL;
    uint64_t v2 = (void *)MEMORY[0x18961AFF0];
LABEL_30:
    void *v37 = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(lock);
    sub_181BD25B8((uint64_t)v35);
    sub_181BD25B8((uint64_t)v36);
    return (uint64_t)v2;
  }

  unint64_t v39 = v0 + 2;
  uint64_t v3 = 0LL;
  uint64_t v4 = 0LL;
  char v5 = 0LL;
  unint64_t v6 = 0LL;
  uint64_t v2 = (void *)MEMORY[0x18961AFF0];
  uint64_t v35 = sub_181C25ABC;
  uint64_t v36 = sub_181C25AD4;
  while (v6 < *(void *)(*v39 + 16LL))
  {
    uint64_t v8 = *v39 + v3 * 8;
    uint64_t v9 = *(void *)(v8 + 56);
    uint64_t v41 = (uint64_t)v5;
    uint64_t v42 = *(void *)(v8 + 48);
    swift_beginAccess();
    int64_t v10 = (void *)*v39;
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *unint64_t v39 = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      int64_t v10 = sub_181C1BC94(v10);
      *unint64_t v39 = v10;
    }

    if (v6 >= v10[2]) {
      goto LABEL_33;
    }
    LOWORD(v10[v3 + 11]) = -1;
    swift_endAccess();
    if (v2[2])
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = sub_181C8C01C(v42, v9);
      if ((v13 & 1) != 0)
      {
        unint64_t v14 = *(unsigned __int16 *)(v2[7] + 4 * v12 + 2);
        swift_bridgeObjectRelease();
        if (v6 >= 0x10000) {
          goto LABEL_37;
        }
        swift_beginAccess();
        uint64_t v15 = (void *)*v39;
        char v16 = swift_isUniquelyReferenced_nonNull_native();
        *unint64_t v39 = v15;
        if ((v16 & 1) == 0)
        {
          uint64_t v15 = sub_181C1BC94(v15);
          *unint64_t v39 = v15;
        }

        if (v15[2] <= v14) {
          goto LABEL_36;
        }
        LOWORD(v15[8 * v14 + 11]) = v6;
        swift_endAccess();
      }

      else
      {
        swift_bridgeObjectRelease();
      }
    }

    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v6;
    sub_181BD25B8((uint64_t)v4);
    if (v6 == 0x10000) {
      goto LABEL_37;
    }
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = sub_181C25ABC;
    *(void *)(v18 + 24) = v17;
    sub_181BD25B8(v41);
    char v19 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v21 = sub_181C8C01C(v42, v9);
    uint64_t v22 = v2[2];
    BOOL v23 = (v20 & 1) == 0;
    uint64_t v24 = v22 + v23;
    if (__OFADD__(v22, v23)) {
      goto LABEL_34;
    }
    char v25 = v20;
    if (v2[3] >= v24)
    {
      if ((v19 & 1) == 0) {
        sub_181C90DEC();
      }
    }

    else
    {
      sub_181C8D05C(v24, v19);
      uint64_t v26 = sub_181C8C01C(v42, v9);
      if ((v25 & 1) != (v27 & 1)) {
        goto LABEL_38;
      }
      unint64_t v21 = v26;
    }

    swift_bridgeObjectRelease();
    uint64_t v28 = swift_bridgeObjectRetain();
    if ((v25 & 1) == 0)
    {
      int v29 = (*(uint64_t (**)(uint64_t))(v18 + 16))(v28);
      v2[(v21 >> 6) + 8] |= 1LL << v21;
      char v30 = (uint64_t *)(v2[6] + 16 * v21);
      *char v30 = v42;
      v30[1] = v9;
      *(_DWORD *)(v2[7] + 4 * v21) = v29;
      uint64_t v31 = v2[2];
      BOOL v32 = __OFADD__(v31, 1LL);
      uint64_t v33 = v31 + 1;
      if (v32) {
        goto LABEL_35;
      }
      v2[2] = v33;
      swift_bridgeObjectRetain();
    }

    uint64_t v7 = v2[7];
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 4 * v21 + 2) = v6;
    swift_bridgeObjectRelease();
    v3 += 8LL;
    uint64_t v4 = sub_181C25ABC;
    char v5 = sub_181C25AD4;
    if (v40 == ++v6) {
      goto LABEL_30;
    }
  }

  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  sub_18264F318();
  __break(1u);
LABEL_38:
  uint64_t result = sub_18264F5C4();
  __break(1u);
  return result;
}

unint64_t sub_181C1DEAC(unint64_t result)
{
  if ((result & 0x8000000000000000LL) != 0 || result >= 0x10000)
  {
    uint64_t result = sub_18264F318();
    __break(1u);
  }

  return result;
}

void *sub_181C1DF54()
{
  uint64_t v1 = (void *)swift_allocObject();
  uint64_t v2 = MEMORY[0x18961AFE8];
  v1[2] = MEMORY[0x18961AFE8];
  v1[3] = sub_181C87FF8(v2);
  uint64_t v3 = (_DWORD *)swift_slowAlloc();
  v1[4] = v3;
  _DWORD *v3 = 0;
  swift_beginAccess();
  uint64_t v4 = v0[2];
  swift_beginAccess();
  v1[2] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  char v5 = (os_unfair_lock_s *)v0[4];
  os_unfair_lock_lock(v5);
  swift_beginAccess();
  uint64_t v6 = v0[3];
  swift_beginAccess();
  v1[3] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v5);
  return v1;
}

uint64_t sub_181C1E068()
{
  uint64_t result = swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = v2 + 80;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_18264EB44();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_18264F660();
      swift_bridgeObjectRetain();
      sub_18264EB44();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v4 += 64LL;
      --v3;
    }

    while (v3);
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_181C1E17C(uint64_t *a1)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v6 = a1[3];
  char v7 = *((_BYTE *)a1 + 32);
  uint64_t v8 = a1[5];
  uint64_t v39 = a1[6];
  uint64_t v40 = a1[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v9 = sub_18264EBE0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
  {
    __break(1u);
    goto LABEL_28;
  }

  uint64_t v2 = (unint64_t *)((char *)v1 + 16);
  swift_beginAccess();
  unint64_t v10 = *(void *)(*((void *)v1 + 2) + 16LL);
  if (v10 >= 0x10000) {
    goto LABEL_33;
  }
  uint64_t v3 = (uint64_t (*)())((char *)v1 + 24);
  swift_beginAccess();
  uint64_t v11 = *((void *)v1 + 3);
  if (!v11 || !*(void *)(v11 + 16)) {
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_181C8C01C(v40, v6);
  if ((v13 & 1) != 0)
  {
    unint64_t v9 = *(unsigned __int16 *)(*(void *)(v11 + 56) + 4 * v12 + 2);
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    unint64_t v14 = (void *)*v2;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v2 = (unint64_t)v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v14 = sub_181C1BC94(v14);
      *uint64_t v2 = (unint64_t)v14;
    }

    if (v14[2] > v9)
    {
      LOWORD(v14[8 * v9 + 11]) = v10;
LABEL_10:
      swift_endAccess();
      goto LABEL_11;
    }

    __break(1u);
LABEL_33:
    sub_18264F318();
    __break(1u);
    goto LABEL_34;
  }

  swift_endAccess();
  swift_bridgeObjectRelease();
LABEL_11:
  uint64_t v36 = v8;
  char v37 = v7;
  uint64_t v38 = v5;
  swift_beginAccess();
  uint64_t v1 = *(uint64_t (**)@<X0>(_DWORD *@<X8>))v3;
  if (!*(void *)v3)
  {
    uint64_t v3 = 0LL;
    goto LABEL_21;
  }

  uint64_t v16 = swift_allocObject();
  __int16 v35 = v10;
  *(_WORD *)(v16 + 16) = v10;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = sub_181C25AE8;
  *(void *)(v17 + 24) = v16;
  swift_bridgeObjectRetain();
  char v18 = swift_isUniquelyReferenced_nonNull_native();
  char v19 = *(uint64_t (**)@<X0>(_DWORD *@<X8>))v3;
  uint64_t v41 = *(uint64_t (**)@<X0>(_DWORD *@<X8>))v3;
  *(void *)uint64_t v3 = 0x8000000000000000LL;
  unint64_t v21 = sub_181C8C01C(v40, v6);
  uint64_t v22 = *((void *)v19 + 2);
  BOOL v23 = (v20 & 1) == 0;
  uint64_t v24 = v22 + v23;
  if (__OFADD__(v22, v23)) {
    goto LABEL_30;
  }
  LOBYTE(v9) = v20;
  if (*((void *)v19 + 3) >= v24)
  {
    if ((v18 & 1) == 0) {
      goto LABEL_31;
    }
    goto LABEL_18;
  }

  sub_181C8D05C(v24, v18);
  char v19 = v41;
  uint64_t v25 = sub_181C8C01C(v40, v6);
  if ((v9 & 1) != (v26 & 1))
  {
LABEL_34:
    uint64_t result = sub_18264F5C4();
    __break(1u);
    return result;
  }

  unint64_t v21 = v25;
  while (1)
  {
LABEL_18:
    *(void *)uint64_t v3 = v19;
    swift_bridgeObjectRelease();
    char v27 = *(void **)v3;
    swift_bridgeObjectRetain();
    if ((v9 & 1) == 0)
    {
      int v28 = sub_181C25AE8();
      sub_181C90838(v21, v40, v6, v28, v27);
      swift_bridgeObjectRetain();
    }

    uint64_t v29 = v27[7];
    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 4 * v21 + 2) = v35;
    swift_bridgeObjectRelease();
    uint64_t v1 = sub_181C25AD4;
    uint64_t v3 = sub_181C25AE8;
LABEL_21:
    swift_endAccess();
    swift_beginAccess();
    unint64_t v9 = *v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v30 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v2 = v9;
    if ((v30 & 1) == 0)
    {
LABEL_28:
      unint64_t v9 = (unint64_t)sub_181BC461C(0LL, *(void *)(v9 + 16) + 1LL, 1, (void *)v9);
      *uint64_t v2 = v9;
    }

    unint64_t v21 = *(void *)(v9 + 16);
    unint64_t v31 = *(void *)(v9 + 24);
    if (v21 >= v31 >> 1)
    {
      unint64_t v9 = (unint64_t)sub_181BC461C((void *)(v31 > 1), v21 + 1, 1, (void *)v9);
      *uint64_t v2 = v9;
    }

    *(void *)(v9 + 16) = v21 + 1;
    unint64_t v32 = v9 + (v21 << 6);
    *(void *)(v32 + 32) = v38;
    *(void *)(v32 + 40) = v4;
    *(void *)(v32 + 48) = v40;
    *(void *)(v32 + 56) = v6;
    *(_BYTE *)(v32 + 64) = v37;
    *(void *)(v32 + 72) = v36;
    *(void *)(v32 + 80) = v39;
    *(_WORD *)(v32 + 88) = -1;
    unint64_t v33 = *v2;
    swift_endAccess();
    unint64_t v6 = *(void *)(v33 + 16);
    sub_181BD25B8((uint64_t)v3);
    uint64_t result = sub_181BD25B8((uint64_t)v1);
    if (v6 <= 0xFFFE) {
      break;
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    sub_181C90DEC();
    char v19 = v41;
  }

  return result;
}

uint64_t sub_181C1E5F8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = v1 + 80;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_18264EB44();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_18264F660();
      swift_bridgeObjectRetain();
      sub_18264EB44();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v3 += 64LL;
      --v2;
    }

    while (v2);
    swift_bridgeObjectRelease();
  }

  return sub_18264F684();
}

uint64_t sub_181C1E71C()
{
  return sub_181C1E5F8();
}

uint64_t sub_181C1E73C()
{
  return sub_181C1E068();
}

uint64_t sub_181C1E75C()
{
  return sub_18264F684();
}

uint64_t sub_181C1E798(uint64_t *a1, uint64_t *a2)
{
  return sub_181C24B78(*a1, *a2);
}

_DWORD *HTTPFields.init()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (void *)swift_allocObject();
  uint64_t v3 = MEMORY[0x18961AFE8];
  v2[2] = MEMORY[0x18961AFE8];
  v2[3] = sub_181C87FF8(v3);
  uint64_t result = (_DWORD *)swift_slowAlloc();
  v2[4] = result;
  *uint64_t result = 0;
  *a1 = v2;
  return result;
}

uint64_t sub_181C1E9CC(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = a3[1];
  uint64_t v4 = a3[2];
  uint64_t v5 = a3[3];
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  v9[0] = *a3;
  v9[1] = v3;
  void v9[2] = v4;
  v9[3] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return HTTPFields.subscript.setter(v6, v7, v9);
}

uint64_t HTTPFields.subscript.setter(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v3 = a3[1];
  uint64_t v6 = a3[2];
  uint64_t v5 = a3[3];
  if (a2)
  {
    unint64_t v7 = a2;
    BOOL v9 = v6 == 0x65696B6F6F63LL && v5 == 0xE600000000000000LL;
    if (v9 || (sub_18264F4EC() & 1) != 0)
    {
      uint64_t v16 = a1;
      unint64_t v17 = v7;
      sub_181C251EC();
      uint64_t v10 = sub_18264EF88();
      swift_bridgeObjectRelease();
      uint64_t v11 = (void *)swift_allocObject();
      v11[2] = v4;
      v11[3] = v3;
      v11[4] = v6;
      v11[5] = v5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_181C1EE00(v10, (void (*)(void *__return_ptr, void))sub_181C25234, (uint64_t)v11, v4, v3, v6, v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return swift_bridgeObjectRelease();
    }

    else
    {
      if ((sub_181BCE7EC(a1, v7) & 1) != 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      else
      {
        uint64_t v16 = a1;
        unint64_t v17 = v7;
        char v18 = sub_181C94200;
        uint64_t v19 = 0LL;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C548);
        sub_181C02894((unint64_t *)&qword_18C58C550, &qword_18C58C548, MEMORY[0x189619618]);
        sub_18264EB14();
        swift_bridgeObjectRelease();
        a1 = 0LL;
        unint64_t v7 = 0xE000000000000000LL;
      }

      uint64_t v13 = sub_181C024EC(a1, v7);
      uint64_t v15 = v14;
      swift_bridgeObjectRelease();
      uint64_t v16 = v4;
      unint64_t v17 = v3;
      char v18 = (unsigned __int8 *(*)@<X0>(unsigned __int8 *@<X0>, _DWORD *@<X8>))v6;
      uint64_t v19 = v5;
      char v20 = 0;
      uint64_t v21 = v13;
      uint64_t v22 = v15;
      sub_181C1F248(&v16, v4, v3, v6, v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      return swift_bridgeObjectRelease_n();
    }
  }

  else
  {
    sub_181C25008(*a3, a3[1], a3[2], v5);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

uint64_t sub_181C1ECDC@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = *a1;
  uint64_t v12 = a1[1];
  uint64_t v13 = a1[2];
  uint64_t v14 = a1[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v15 = MEMORY[0x186E0E670](v11, v12, v13, v14);
  unint64_t v17 = v16;
  *(_BYTE *)(a6 + 32) = 0;
  *(void *)a6 = a2;
  *(void *)(a6 + 8) = a3;
  *(void *)(a6 + 16) = a4;
  *(void *)(a6 + 24) = a5;
  if ((sub_181BCE7EC(v15, v16) & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C548);
    sub_181C02894((unint64_t *)&qword_18C58C550, &qword_18C58C548, MEMORY[0x189619618]);
    sub_18264EB14();
    swift_bridgeObjectRelease();
    uint64_t v15 = 0LL;
    unint64_t v17 = 0xE000000000000000LL;
  }

  uint64_t v18 = sub_181C024EC(v15, v17);
  uint64_t v20 = v19;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a6 + 40) = v18;
  *(void *)(a6 + 48) = v20;
  return result;
}

uint64_t sub_181C1EE00( uint64_t a1, void (*a2)(void *__return_ptr, void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void (*v42)(void *__return_ptr, void);
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48[4];
  char v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v8 = v7;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *unint64_t v7 = sub_181C1DF54();
    swift_release();
  }

  uint64_t v12 = sub_181C1DA34();
  if (!*(void *)(v12 + 16)) {
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_181C8C01C(a6, a7);
  if ((v14 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_22:
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }

  unsigned int v15 = *(unsigned __int16 *)(*(void *)(v12 + 56) + 4 * v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v15 != 0xFFFF)
  {
    unint64_t v16 = *(void *)(a1 + 16);
    swift_bridgeObjectRetain();
    uint64_t result = swift_retain();
    unint64_t v18 = 0LL;
    uint64_t v19 = (void *)MEMORY[0x18961AFE8];
    uint64_t v42 = a2;
    unint64_t v41 = v16;
    while (1)
    {
      if (v18 == v16)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v19 = sub_181BC4FD8(0LL, v19[2] + 1LL, 1, v19);
        }
        unint64_t v21 = v19[2];
        unint64_t v20 = v19[3];
        if (v21 >= v20 >> 1) {
          uint64_t v19 = sub_181BC4FD8((void *)(v20 > 1), v21 + 1, 1, v19);
        }
        unint64_t v22 = v15;
        v19[2] = v21 + 1;
        v19[v21 + 4] = v15;
        unint64_t v18 = v16;
      }

      else
      {
        if (v18 >= v16) {
          goto LABEL_32;
        }
        uint64_t v23 = a1 + 32 + 32 * v18;
        uint64_t v24 = *(void *)(v23 + 16);
        uint64_t v25 = *(void *)(v23 + 24);
        v52 = *(_OWORD *)v23;
        v53 = v24;
        v54 = v25;
        swift_bridgeObjectRetain();
        a2(v48, &v52);
        swift_bridgeObjectRelease();
        uint64_t v26 = v48[1];
        uint64_t v27 = v48[3];
        uint64_t v46 = v48[2];
        unint64_t v47 = v48[0];
        uint64_t v45 = v49;
        uint64_t v28 = v51;
        char v44 = v50;
        uint64_t v29 = *v8;
        char v30 = (uint64_t *)(*v8 + 16LL);
        swift_beginAccess();
        unint64_t v31 = *(void **)(v29 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v29 + 16) = v31;
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_181C1BC94(v31);
          unint64_t v31 = (void *)result;
          *char v30 = result;
        }

        unint64_t v22 = v15;
        unint64_t v32 = &v31[8 * (unint64_t)v15];
        ++v18;
        v32[4] = v47;
        v32[5] = v26;
        v32[6] = v46;
        v32[7] = v27;
        *((_BYTE *)v32 + 64) = v45;
        v32[9] = v44;
        v32[10] = v28;
        swift_endAccess();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        a2 = v42;
        unint64_t v16 = v41;
      }

      uint64_t v33 = *v8;
      uint64_t result = swift_beginAccess();
      uint64_t v34 = *(void *)(v33 + 16);
      if (*(void *)(v34 + 16) <= v22) {
        break;
      }
      unsigned int v15 = *(unsigned __int16 *)(v34 + (v22 << 6) + 88);
      if (v15 == 0xFFFF) {
        goto LABEL_24;
      }
    }

    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }

uint64_t sub_181C1F248(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *uint64_t v5 = sub_181C1DF54();
    swift_release();
  }

  uint64_t v10 = sub_181C1DA34();
  if (*(void *)(v10 + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_181C8C01C(a4, a5);
    if ((v12 & 1) != 0) {
      LODWORD(v13) = *(unsigned __int16 *)(*(void *)(v10 + 56) + 4 * v11);
    }
    else {
      LODWORD(v13) = 0xFFFF;
    }
    swift_bridgeObjectRelease();
  }

  else
  {
    LODWORD(v13) = 0xFFFF;
  }

  swift_bridgeObjectRelease();
  uint64_t v14 = *a1;
  unint64_t v15 = a1[1];
  uint64_t v16 = a1[2];
  uint64_t v17 = a1[3];
  char v34 = *((_BYTE *)a1 + 32);
  uint64_t v18 = a1[5];
  uint64_t v33 = a1[6];
  if ((_DWORD)v13 == 0xFFFF)
  {
    sub_181BCEDC8((uint64_t)a1);
    a1 = (uint64_t *)MEMORY[0x18961AFE8];
    uint64_t v19 = v16;
    uint64_t v20 = v17;
    uint64_t v22 = v33;
    char v21 = v34;
    if (*(void *)(MEMORY[0x18961AFE8] + 16LL)) {
      goto LABEL_11;
    }
  }

  else
  {
    uint64_t v32 = *a1;
    uint64_t v25 = *v6;
    uint64_t v26 = *v6 + 2;
    swift_beginAccess();
    uint64_t v27 = v25[2];
    sub_181BCEDC8((uint64_t)a1);
    sub_181BCEDC8((uint64_t)a1);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    v25[2] = v27;
    if ((result & 1) == 0) {
      goto LABEL_29;
    }
    while (1)
    {
      unint64_t v28 = v13;
      if (*(void *)(v27 + 16) <= (unint64_t)v13)
      {
        __break(1u);
        return result;
      }

      unint64_t v29 = v27 + ((unint64_t)v13 << 6);
      uint64_t v27 = *(void *)(v29 + 56);
      uint64_t v13 = *(void *)(v29 + 80);
      *(void *)(v29 + 32) = v32;
      *(void *)(v29 + 40) = v15;
      *(void *)(v29 + 48) = v16;
      *(void *)(v29 + 56) = v17;
      *(_BYTE *)(v29 + 64) = v34;
      *(void *)(v29 + 72) = v18;
      *(void *)(v29 + 80) = v33;
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_181BCEE10((uint64_t)a1);
      uint64_t v26 = *v6;
      swift_beginAccess();
      uint64_t v30 = v26[2];
      if (*(void *)(v30 + 16) > v28) {
        break;
      }
LABEL_28:
      __break(1u);
LABEL_29:
      uint64_t result = (uint64_t)sub_181C1BC94((void *)v27);
      uint64_t v27 = result;
      *uint64_t v26 = result;
    }

    a1 = (uint64_t *)MEMORY[0x18961AFE8];
    uint64_t v27 = 0xFFFFLL;
    while (1)
    {
      unint64_t v28 = *(unsigned __int16 *)(v30 + (v28 << 6) + 88);
      if (v28 == 0xFFFF) {
        break;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        a1 = sub_181BC4FD8(0LL, a1[2] + 1, 1, a1);
      }
      unint64_t v15 = a1[2];
      unint64_t v31 = a1[3];
      if (v15 >= v31 >> 1) {
        a1 = sub_181BC4FD8((void *)(v31 > 1), v15 + 1, 1, a1);
      }
      a1[2] = v15 + 1;
      a1[v15 + 4] = v28;
      uint64_t v26 = *v6;
      swift_beginAccess();
      uint64_t v30 = v26[2];
      if (*(void *)(v30 + 16) <= v28) {
        goto LABEL_28;
      }
    }

    uint64_t v14 = 0LL;
    unint64_t v15 = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v20 = 0LL;
    char v21 = 0;
    uint64_t v18 = 0LL;
    uint64_t v22 = 0LL;
    if (a1[2])
    {
LABEL_11:
      swift_beginAccess();
      sub_181C20890((uint64_t)a1);
      swift_endAccess();
      swift_bridgeObjectRelease();
      uint64_t v23 = *v6;
      swift_beginAccess();
      v23[3] = 0LL;
      uint64_t result = swift_bridgeObjectRelease();
      if (!v15) {
        return result;
      }
      goto LABEL_12;
    }
  }

  uint64_t result = swift_bridgeObjectRelease();
  if (v15)
  {
LABEL_12:
    v35[0] = v14;
    v35[1] = v15;
    v35[2] = v19;
    v35[3] = v20;
    char v36 = v21;
    uint64_t v37 = v18;
    uint64_t v38 = v22;
    sub_181C1E17C(v35);
    return sub_181BCECE0(v14, v15);
  }

  return result;
}

uint64_t sub_181C1F5C4( uint64_t a1, void (*a2)(void *__return_ptr, void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void (*v39)(void *__return_ptr, void);
  uint64_t v40;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46[4];
  char v47;
  uint64_t v48;
  uint64_t v49;
  void v50[2];
  void v51[4];
  uint64_t v8 = v7;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *unint64_t v7 = sub_181C1DF54();
    swift_release();
  }

  uint64_t v12 = sub_181C1DA34();
  if (!*(void *)(v12 + 16)) {
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_181C8C01C(a6, a7);
  if ((v14 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_22:
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }

  unsigned int v15 = *(unsigned __int16 *)(*(void *)(v12 + 56) + 4 * v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v15 != 0xFFFF)
  {
    unint64_t v16 = *(void *)(a1 + 16);
    uint64_t v40 = a1 + 32;
    swift_bridgeObjectRetain();
    uint64_t result = swift_retain();
    unint64_t v18 = 0LL;
    uint64_t v19 = (void *)MEMORY[0x18961AFE8];
    uint64_t v39 = a2;
    unint64_t v38 = v16;
    while (1)
    {
      if (v18 == v16)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v19 = sub_181BC4FD8(0LL, v19[2] + 1LL, 1, v19);
        }
        unint64_t v21 = v19[2];
        unint64_t v20 = v19[3];
        if (v21 >= v20 >> 1) {
          uint64_t v19 = sub_181BC4FD8((void *)(v20 > 1), v21 + 1, 1, v19);
        }
        unint64_t v22 = v15;
        v19[2] = v21 + 1;
        v19[v21 + 4] = v15;
        unint64_t v18 = v16;
      }

      else
      {
        if (v18 >= v16) {
          goto LABEL_32;
        }
        uint64_t v23 = *(void *)(v40 + 16 * v18 + 8);
        v51[0] = *(void *)(v40 + 16 * v18);
        v51[1] = v23;
        swift_bridgeObjectRetain();
        a2(v46, v51);
        swift_bridgeObjectRelease();
        uint64_t v24 = v46[1];
        uint64_t v25 = v46[3];
        char v44 = v46[2];
        uint64_t v45 = v46[0];
        uint64_t v43 = v47;
        uint64_t v26 = v49;
        uint64_t v42 = v48;
        uint64_t v27 = *v8;
        unint64_t v28 = (uint64_t *)(*v8 + 16LL);
        swift_beginAccess();
        unint64_t v29 = *(void **)(v27 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v27 + 16) = v29;
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_181C1BC94(v29);
          unint64_t v29 = (void *)result;
          uint64_t *v28 = result;
        }

        unint64_t v22 = v15;
        uint64_t v30 = &v29[8 * (unint64_t)v15];
        ++v18;
        v30[4] = v45;
        v30[5] = v24;
        v30[6] = v44;
        v30[7] = v25;
        *((_BYTE *)v30 + 64) = v43;
        v30[9] = v42;
        v30[10] = v26;
        swift_endAccess();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        a2 = v39;
        unint64_t v16 = v38;
      }

      uint64_t v31 = *v8;
      uint64_t result = swift_beginAccess();
      uint64_t v32 = *(void *)(v31 + 16);
      if (*(void *)(v32 + 16) <= v22) {
        break;
      }
      unsigned int v15 = *(unsigned __int16 *)(v32 + (v22 << 6) + 88);
      if (v15 == 0xFFFF) {
        goto LABEL_24;
      }
    }

    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }

uint64_t sub_181C1F9FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *uint64_t v5 = sub_181C1DF54();
    swift_release();
  }

  uint64_t v9 = sub_181C1DA34();
  if (!*(void *)(v9 + 16)) {
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_181C8C01C(a4, a5);
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_22:
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }

  unint64_t v12 = *(unsigned __int16 *)(*(void *)(v9 + 56) + 4 * v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((_DWORD)v12 != 0xFFFF)
  {
    unint64_t v13 = *(void *)(a1 + 16);
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v15 = 0LL;
    unint64_t v16 = (void *)MEMORY[0x18961AFE8];
    unint64_t v39 = v13;
    while (1)
    {
      if (v15 == v13)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v16 = sub_181BC4FD8(0LL, v16[2] + 1LL, 1, v16);
        }
        unint64_t v18 = v16[2];
        unint64_t v17 = v16[3];
        if (v18 >= v17 >> 1) {
          unint64_t v16 = sub_181BC4FD8((void *)(v17 > 1), v18 + 1, 1, v16);
        }
        v16[2] = v18 + 1;
        v16[v18 + 4] = v12;
        unint64_t v15 = v13;
      }

      else
      {
        if (v15 >= v13) {
          goto LABEL_32;
        }
        uint64_t v19 = a1 + 32 + 56 * v15;
        uint64_t v20 = *(void *)(v19 + 8);
        uint64_t v21 = *(void *)(v19 + 24);
        uint64_t v43 = *(void *)(v19 + 16);
        uint64_t v44 = *(void *)v19;
        char v42 = *(_BYTE *)(v19 + 32);
        uint64_t v22 = *(void *)(v19 + 48);
        uint64_t v41 = *(void *)(v19 + 40);
        uint64_t v23 = *v6;
        uint64_t v24 = (uint64_t *)(*v6 + 16LL);
        swift_beginAccess();
        uint64_t v25 = *(void **)(v23 + 16);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v23 + 16) = v25;
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_181C1BC94(v25);
          uint64_t v25 = (void *)result;
          *uint64_t v24 = result;
        }

        if (v25[2] <= v12) {
          goto LABEL_33;
        }
        uint64_t v26 = &v25[8 * v12];
        ++v15;
        v26[4] = v44;
        v26[5] = v20;
        v26[6] = v43;
        v26[7] = v21;
        *((_BYTE *)v26 + 64) = v42;
        v26[9] = v41;
        v26[10] = v22;
        swift_endAccess();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v13 = v39;
      }

      uint64_t v27 = *v6;
      uint64_t result = swift_beginAccess();
      uint64_t v28 = *(void *)(v27 + 16);
      if (*(void *)(v28 + 16) <= v12) {
        break;
      }
      unint64_t v12 = *(unsigned __int16 *)(v28 + (v12 << 6) + 88);
      if ((_DWORD)v12 == 0xFFFF) {
        goto LABEL_24;
      }
    }

    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }

void (*HTTPFields.subscript.modify(void *a1, uint64_t *a2))(uint64_t **a1, char a2)
{
  uint64_t v5 = malloc(0x38uLL);
  *a1 = v5;
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  v5[2] = v2;
  v5[3] = v7;
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  v5[4] = v6;
  v5[5] = v8;
  v5[6] = v9;
  uint64_t v10 = *v2;
  v13[3] = v9;
  v13[4] = v10;
  v13[0] = v7;
  v13[1] = v6;
  v13[2] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *uint64_t v5 = HTTPFields.subscript.getter((uint64_t)v13);
  v5[1] = v11;
  return sub_181C1FE6C;
}

{
  uint64_t *v2;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void v12[5];
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  v5[1] = v2;
  v5[2] = v7;
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  v5[3] = v6;
  v5[4] = v8;
  v5[5] = v9;
  uint64_t v10 = *v2;
  v12[3] = v9;
  v12[4] = v10;
  v12[0] = v7;
  v12[1] = v6;
  v12[2] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *uint64_t v5 = HTTPFields.subscript.getter((uint64_t)v12);
  return sub_181C2044C;
}

{
  uint64_t *v2;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void v12[5];
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  v5[1] = v2;
  v5[2] = v7;
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  v5[3] = v6;
  v5[4] = v8;
  v5[5] = v9;
  uint64_t v10 = *v2;
  v12[3] = v9;
  v12[4] = v10;
  v12[0] = v7;
  v12[1] = v6;
  v12[2] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *uint64_t v5 = HTTPFields.subscript.getter((uint64_t)v12);
  return sub_181C206DC;
}

void sub_181C1FE6C(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = **a1;
  unint64_t v3 = (*a1)[1];
  uint64_t v6 = (*a1)[5];
  uint64_t v5 = (*a1)[6];
  uint64_t v7 = (*a1)[4];
  v8[0] = (*a1)[3];
  v8[1] = v7;
  v8[2] = v6;
  v8[3] = v5;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    HTTPFields.subscript.setter(v4, v3, v8);
    swift_bridgeObjectRelease();
  }

  else
  {
    HTTPFields.subscript.setter(v4, v3, v8);
  }

  free(v2);
}

uint64_t sub_181C1FFBC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  uint64_t v5 = a3[2];
  uint64_t v6 = a3[3];
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = v3;
  v7[3] = v4;
  v7[4] = v5;
  v7[5] = v6;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v8 = swift_bridgeObjectRetain();
  sub_181C1F5C4(v8, (void (*)(void *__return_ptr, void))sub_181C25C84, (uint64_t)v7, v3, v4, v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t HTTPFields.subscript.setter(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = v3;
  v7[3] = v4;
  v7[4] = v5;
  v7[5] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_181C1F5C4(a1, (void (*)(void *__return_ptr, void))sub_181C25244, (uint64_t)v7, v3, v4, v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  sub_181C1F9FC(a1, *a2, a2[1], a2[2], a2[3]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_181C20124(uint64_t a1, unsigned __int16 a2)
{
  int v4 = (unsigned __int16)~a2;
  uint64_t v18 = MEMORY[0x18961AFE8];
  sub_181C9D08C(0, 0LL, 0);
  uint64_t result = swift_bridgeObjectRetain();
  if (v4)
  {
    unint64_t v6 = a2;
    uint64_t v7 = a1 + 32;
    uint64_t v17 = a1 + 32;
    while (*(void *)(a1 + 16) > v6)
    {
      uint64_t v8 = v7 + (v6 << 6);
      unint64_t v9 = *(void *)(v8 + 40);
      unint64_t v10 = *(void *)(v8 + 48);
      unint64_t v6 = *(unsigned __int16 *)(v8 + 56);
      if ((sub_181BCE7EC(v9, v10) & 1) != 0)
      {
        uint64_t result = swift_bridgeObjectRetain();
      }

      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v9 = sub_181C9420C(v9, v10);
        uint64_t v11 = a1;
        unint64_t v13 = v12;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v13;
        a1 = v11;
        uint64_t v7 = v17;
      }

      unint64_t v15 = *(void *)(v18 + 16);
      unint64_t v14 = *(void *)(v18 + 24);
      if (v15 >= v14 >> 1) {
        uint64_t result = sub_181C9D08C(v14 > 1, v15 + 1, 1);
      }
      *(void *)(v18 + 16) = v15 + 1;
      uint64_t v16 = v18 + 16 * v15;
      *(void *)(v16 + 32) = v9;
      *(void *)(v16 + 40) = v10;
      if (v6 == 0xFFFF) {
        goto LABEL_2;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_2:
    swift_bridgeObjectRelease();
    return v18;
  }

  return result;
}

uint64_t sub_181C202B8@<X0>( unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v8 = *a1;
  unint64_t v7 = a1[1];
  *(_BYTE *)(a6 + 32) = 0;
  *(void *)a6 = a2;
  *(void *)(a6 + 8) = a3;
  *(void *)(a6 + 16) = a4;
  *(void *)(a6 + 24) = a5;
  if ((sub_181BCE7EC(v8, v7) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C548);
    sub_181C02894((unint64_t *)&qword_18C58C550, &qword_18C58C548, MEMORY[0x189619618]);
    sub_18264EB14();
    unint64_t v8 = 0LL;
    unint64_t v7 = 0xE000000000000000LL;
  }

  uint64_t v9 = sub_181C024EC(v8, v7);
  uint64_t v11 = v10;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a6 + 40) = v9;
  *(void *)(a6 + 48) = v11;
  return result;
}

void sub_181C2044C(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = (*a1)[4];
  uint64_t v3 = (*a1)[5];
  uint64_t v6 = (*a1)[2];
  uint64_t v5 = (*a1)[3];
  uint64_t v7 = **a1;
  if ((a2 & 1) != 0)
  {
    unint64_t v8 = (void *)swift_allocObject();
    v8[2] = v6;
    v8[3] = v5;
    uint64_t v8[4] = v4;
    v8[5] = v3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v9 = swift_bridgeObjectRetain();
    sub_181C1F5C4(v9, (void (*)(void *__return_ptr, void))sub_181C25C84, (uint64_t)v8, v6, v5, v4, v3);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v10 = (void *)swift_allocObject();
    v10[2] = v6;
    v10[3] = v5;
    v10[4] = v4;
    v10[5] = v3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_181C1F5C4(v7, (void (*)(void *__return_ptr, void))sub_181C25C84, (uint64_t)v10, v6, v5, v4, v3);
    swift_bridgeObjectRelease();
    swift_release();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  free(v2);
}

uint64_t sub_181C20588(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  uint64_t v5 = a3[2];
  uint64_t v6 = a3[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v7 = swift_bridgeObjectRetain();
  sub_181C1F9FC(v7, v3, v4, v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_181C206DC(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = (*a1)[4];
  uint64_t v3 = (*a1)[5];
  uint64_t v6 = (*a1)[2];
  uint64_t v5 = (*a1)[3];
  uint64_t v7 = **a1;
  if ((a2 & 1) != 0)
  {
    uint64_t v8 = swift_bridgeObjectRetain();
    sub_181C1F9FC(v8, v6, v5, v4, v3);
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_181C1F9FC(v7, v6, v5, v4, v3);
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  free(v2);
}

uint64_t sub_181C2078C@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2 = v1[4];
  if (v2 == 0xFFFF)
  {
    *(void *)(a1 + 48) = 0LL;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }

  else if (*(void *)(*(void *)v1 + 16LL) <= v2)
  {
    __break(1u);
  }

  else
  {
    uint64_t v3 = *(void *)v1 + (v2 << 6);
    uint64_t v5 = *(void *)(v3 + 32);
    uint64_t v4 = *(void *)(v3 + 40);
    uint64_t v6 = *(void *)(v3 + 48);
    uint64_t v7 = *(void *)(v3 + 56);
    uint64_t v8 = *(unsigned __int8 *)(v3 + 64);
    uint64_t v9 = *(void *)(v3 + 72);
    uint64_t v10 = *(void *)(v3 + 80);
    v1[4] = *(_WORD *)(v3 + 88);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v6;
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = v8;
    *(void *)(a1 + 40) = v9;
    *(void *)(a1 + 48) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }

  return result;
}

void sub_181C20830(uint64_t a1@<X8>)
{
  __int16 v2 = *(_WORD *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(_WORD *)(a1 + 8) = v2;
}

uint64_t sub_181C20844()
{
  return 0LL;
}

uint64_t sub_181C2084C()
{
  uint64_t v1 = sub_181C23934(*(void *)v0, *(_WORD *)(v0 + 8));
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_181C20884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181C1D2F4(a1, a2, a3, *(void *)v3, *(_WORD *)(v3 + 8));
}

uint64_t sub_181C20890(uint64_t result)
{
  uint64_t v2 = result;
  unint64_t v3 = *(void *)(result + 16);
  BOOL v4 = v3 == 0;
  if (v3)
  {
    uint64_t v5 = *(void *)(result + 32);
    unint64_t v6 = 1LL;
  }

  else
  {
    uint64_t v5 = 0LL;
    unint64_t v6 = 0LL;
  }

  uint64_t v7 = (void *)*v1;
  if (*(void *)(*v1 + 16))
  {
    uint64_t v32 = *(void *)(*v1 + 16);
    swift_bridgeObjectRetain();
    uint64_t v8 = v7;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v27 = v1;
    if ((result & 1) != 0)
    {
      uint64_t v9 = (uint64_t)v7;
    }

    else
    {
LABEL_51:
      uint64_t result = (uint64_t)sub_181C1BC94(v8);
      uint64_t v9 = result;
    }

    unint64_t v10 = 0LL;
    unint64_t v11 = 0LL;
    uint64_t v29 = v2 + 32;
    unint64_t v30 = v3;
    uint64_t v31 = v9 + 32;
    unint64_t v28 = v3 + 1;
    uint64_t v12 = v32;
    do
    {
      if (v11 == v12) {
        goto LABEL_44;
      }
      if (v4)
      {
        BOOL v4 = 1;
      }

      else
      {
        if (__OFADD__(v11, v10)) {
          goto LABEL_46;
        }
        if (v11 + v10 == v5)
        {
          unint64_t v13 = v10 + 1;
          if (__OFADD__(v10, 1LL)) {
            goto LABEL_50;
          }
          if (v6 != v3)
          {
            unint64_t v10 = v28 + v10 - v6;
            if (v6 <= v3) {
              unint64_t v24 = v3;
            }
            else {
              unint64_t v24 = v6;
            }
            while (v24 != v6)
            {
              unint64_t v25 = v11 + v13;
              if (__OFADD__(v11, v13)) {
                goto LABEL_42;
              }
              uint64_t v5 = *(void *)(v29 + 8 * v6);
              BOOL v4 = v25 == v5;
              if (v25 != v5)
              {
                ++v6;
                unint64_t v10 = v13;
                goto LABEL_18;
              }

              if (__OFADD__(v13, 1LL)) {
                goto LABEL_43;
              }
              ++v6;
              ++v13;
              if (v3 == v6)
              {
                uint64_t v5 = 0LL;
                unint64_t v6 = v3;
                goto LABEL_18;
              }
            }

            __break(1u);
LABEL_42:
            __break(1u);
LABEL_43:
            __break(1u);
LABEL_44:
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
            goto LABEL_51;
          }

          uint64_t v5 = 0LL;
          BOOL v4 = 1;
          ++v10;
          unint64_t v6 = v3;
        }

        else
        {
          BOOL v4 = 0;
        }
      }

uint64_t HTTPFields.contains(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v1 = *(void *)(a1 + 24);
  if (*(void *)(sub_181C1DA34() + 16))
  {
    swift_bridgeObjectRetain();
    sub_181C8C01C(v2, v1);
    char v4 = v3;
    swift_bridgeObjectRelease();
  }

  else
  {
    char v4 = 0;
  }

  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t HTTPFields.hash(into:)()
{
  uint64_t v1 = *v0;
  uint64_t result = swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v5 = v3 + 80;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_18264EB44();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_18264F660();
      swift_bridgeObjectRetain();
      sub_18264EB44();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v5 += 64LL;
      --v4;
    }

    while (v4);
    swift_release();
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t static HTTPFields.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_181C24B78(*a1, *a2);
}

uint64_t HTTPFields.hashValue.getter()
{
  uint64_t v1 = *v0;
  sub_18264F648();
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = v2 + 80;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_18264EB44();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_18264F660();
      swift_bridgeObjectRetain();
      sub_18264EB44();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v4 += 64LL;
      --v3;
    }

    while (v3);
    swift_bridgeObjectRelease();
  }

  return sub_18264F684();
}

uint64_t sub_181C20E80()
{
  uint64_t v1 = *v0;
  uint64_t result = swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = v3 + 80;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_18264EB44();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_18264F660();
      swift_bridgeObjectRetain();
      sub_18264EB44();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v5 += 64LL;
      --v4;
    }

    while (v4);
    return swift_bridgeObjectRelease();
  }

  return result;
}

Swift::Void __swiftcall HTTPFields.reserveCapacity(_:)(Swift::Int a1)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    void *v1 = sub_181C1DF54();
    swift_release();
  }

  uint64_t v3 = *v1;
  swift_beginAccess();
  if (*(void *)(v3 + 24))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A200);
    sub_18264E9D0();
  }

  swift_endAccess();
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)(*v1 + 16LL);
  swift_beginAccess();
  unint64_t v6 = *(void **)(v4 + 16);
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v4 + 16) = v6;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || a1 > v6[3] >> 1)
  {
    if (v6[2] <= a1) {
      Swift::Int v8 = a1;
    }
    else {
      Swift::Int v8 = v6[2];
    }
    unint64_t v6 = sub_181BC461C(isUniquelyReferenced_nonNull_native, v8, 0, v6);
  }

  *uint64_t v5 = v6;
  swift_endAccess();
}

uint64_t type metadata accessor for HTTPFields._Storage()
{
  return objc_opt_self();
}

uint64_t HTTPFields.startIndex.getter()
{
  return 0LL;
}

uint64_t HTTPFields.endIndex.getter()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(void *)(*(void *)(v1 + 16) + 16LL);
}

BOOL HTTPFields.isEmpty.getter()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(void *)(*(void *)(v1 + 16) + 16LL) == 0LL;
}

uint64_t HTTPFields.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (result < 0)
  {
    __break(1u);
  }

  else
  {
    unint64_t v3 = result;
    uint64_t v5 = *v2;
    uint64_t result = swift_beginAccess();
    uint64_t v6 = *(void *)(v5 + 16);
    if (*(void *)(v6 + 16) > v3)
    {
      uint64_t v7 = v6 + (v3 << 6);
      uint64_t v8 = *(void *)(v7 + 40);
      uint64_t v9 = *(void *)(v7 + 48);
      uint64_t v10 = *(void *)(v7 + 56);
      char v11 = *(_BYTE *)(v7 + 64);
      uint64_t v12 = *(void *)(v7 + 72);
      uint64_t v13 = *(void *)(v7 + 80);
      *(void *)a2 = *(void *)(v7 + 32);
      *(void *)(a2 + 8) = v8;
      *(void *)(a2 + 16) = v9;
      *(void *)(a2 + 24) = v10;
      *(_BYTE *)(a2 + 32) = v11;
      *(void *)(a2 + 40) = v12;
      *(void *)(a2 + 48) = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return swift_bridgeObjectRetain();
    }
  }

  __break(1u);
  return result;
}

double sub_181C211E4@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  double result = *(double *)&v9;
  uint64_t v4 = v10;
  uint64_t v5 = v11;
  char v6 = v12;
  uint64_t v7 = v13;
  uint64_t v8 = v14;
  *(_OWORD *)a2 = v9;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v5;
  *(_BYTE *)(a2 + 32) = v6;
  *(void *)(a2 + 40) = v7;
  *(void *)(a2 + 48) = v8;
  return result;
}

uint64_t sub_181C21240(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v3 = *a3;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  char v7 = *(_BYTE *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  v11[0] = *(void *)a1;
  v11[1] = v4;
  v11[2] = v5;
  v11[3] = v6;
  char v12 = v7;
  uint64_t v13 = v8;
  uint64_t v14 = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return HTTPFields.subscript.setter(v11, v3);
}

uint64_t HTTPFields.subscript.setter(uint64_t *a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_29;
  }

  uint64_t v9 = (uint64_t **)v3;
  unint64_t v8 = a2;
  uint64_t v11 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v4 = a1[3];
  int v29 = *((unsigned __int8 *)a1 + 32);
  uint64_t v7 = a1[5];
  uint64_t v5 = a1[6];
  unint64_t v3 = (uint64_t *)*v3;
  swift_beginAccess();
  uint64_t v12 = v3[2];
  if (*(void *)(v12 + 16) <= v8)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    uint64_t result = (uint64_t)sub_181C1BC94(v9);
    uint64_t v9 = (uint64_t **)result;
    uint64_t *v3 = result;
    goto LABEL_25;
  }

  uint64_t v27 = v11;
  uint64_t v28 = v7;
  uint64_t v7 = v8 << 6;
  uint64_t v13 = v12 + (v8 << 6);
  int v14 = *(unsigned __int8 *)(v13 + 64);
  uint64_t v15 = *(void *)(v13 + 72);
  uint64_t v16 = *(void *)(v13 + 80);
  BOOL v17 = *(void *)(v13 + 48) == v6 && *(void *)(v13 + 56) == v4;
  if ((v17 || (sub_18264F4EC() & 1) != 0) && v14 == v29)
  {
    BOOL v18 = v15 == v28 && v16 == v5;
    if (v18 || (sub_18264F4EC() & 1) != 0) {
      goto LABEL_27;
    }
  }

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *uint64_t v9 = sub_181C1DF54();
    swift_release();
  }

  unint64_t v3 = *v9;
  swift_beginAccess();
  uint64_t v19 = v3[2];
  uint64_t v10 = v27;
  if (*(void *)(v19 + 16) <= v8) {
    goto LABEL_30;
  }
  uint64_t v20 = v19 + v7;
  BOOL v21 = v6 == *(void *)(v20 + 48) && v4 == *(void *)(v20 + 56);
  if (!v21 && (sub_18264F4EC() & 1) == 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v22 = sub_18264EBE0();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v22 & 1) != 0) {
      goto LABEL_33;
    }
    unint64_t v24 = *v9;
    swift_beginAccess();
    v24[3] = 0LL;
    swift_bridgeObjectRelease();
  }

  unint64_t v25 = *v9;
  unint64_t v3 = *v9 + 2;
  swift_beginAccess();
  uint64_t v9 = (uint64_t **)v25[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  v25[2] = (uint64_t)v9;
  if ((result & 1) == 0) {
    goto LABEL_31;
  }
LABEL_25:
  if ((unint64_t)v9[2] > v8)
  {
    unint64_t v26 = (char *)v9 + v7;
    *((void *)v26 + 4) = v10;
    *((void *)v26 + 5) = v2;
    *((void *)v26 + 6) = v6;
    *((void *)v26 + 7) = v4;
    v26[64] = v29;
    *((void *)v26 + 9) = v28;
    *((void *)v26 + 10) = v5;
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_27:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

void (*HTTPFields.subscript.modify( void (**a1)(uint64_t **a1, char a2), unint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t result = (void (*)(uint64_t **, char))malloc(0x60uLL);
  *a1 = result;
  *((void *)result + 10) = a2;
  *((void *)result + 11) = v2;
  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v6 = result;
    uint64_t v7 = *v2;
    uint64_t result = (void (*)(uint64_t **, char))swift_beginAccess();
    uint64_t v8 = *(void *)(v7 + 16);
    if (*(void *)(v8 + 16) > a2)
    {
      uint64_t v9 = v8 + (a2 << 6);
      uint64_t v10 = *(void *)(v9 + 40);
      uint64_t v11 = *(void *)(v9 + 48);
      uint64_t v12 = *(void *)(v9 + 56);
      char v13 = *(_BYTE *)(v9 + 64);
      uint64_t v14 = *(void *)(v9 + 72);
      uint64_t v15 = *(void *)(v9 + 80);
      *(void *)uint64_t v6 = *(void *)(v9 + 32);
      *((void *)v6 + 1) = v10;
      *((void *)v6 + 2) = v11;
      *((void *)v6 + 3) = v12;
      *((_BYTE *)v6 + 32) = v13;
      *((void *)v6 + 5) = v14;
      *((void *)v6 + 6) = v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return sub_181C21620;
    }
  }

  __break(1u);
  return result;
}

void sub_181C21620(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = **a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  char v7 = *((_BYTE *)v2 + 32);
  uint64_t v8 = v2[5];
  uint64_t v9 = v2[6];
  unint64_t v10 = v2[10];
  v11[0] = v4;
  v11[1] = v3;
  v11[2] = v5;
  v11[3] = v6;
  char v12 = v7;
  uint64_t v13 = v8;
  uint64_t v14 = v9;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    HTTPFields.subscript.setter(v11, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    HTTPFields.subscript.setter(v11, v10);
  }

  free(v2);
}

uint64_t sub_181C216E0(uint64_t a1, int64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t *v3 = (uint64_t)sub_181C1DF54();
    swift_release();
  }

  uint64_t v8 = *v3;
  swift_beginAccess();
  if (*(void *)(*(void *)(v8 + 16) + 16LL) == a1)
  {
    __int128 v9 = *(_OWORD *)(a3 + 16);
    __int128 v41 = *(_OWORD *)a3;
    __int128 v42 = v9;
    __int128 v43 = *(_OWORD *)(a3 + 32);
    uint64_t v44 = *(void *)(a3 + 48);
    v45[0] = v41;
    v45[1] = v9;
    sub_181BCEDC8(a3);
    sub_181C25A44((uint64_t)v45);
    char v10 = sub_18264EBE0();
    sub_181C25A78((uint64_t)v45);
    if ((v10 & 1) == 0)
    {
      v39[0] = v41;
      v39[1] = v42;
      v39[2] = v43;
      uint64_t v40 = v44;
      sub_181C1E17C((uint64_t *)v39);
      return sub_181BCEE10(a3);
    }

    __break(1u);
    goto LABEL_29;
  }

  swift_beginAccess();
  *(void *)(v8 + 24) = 0LL;
  swift_bridgeObjectRelease();
  uint64_t v12 = *v4 + 16;
  swift_beginAccess();
  if (a1 < 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  uint64_t v13 = *(void **)v12;
  int64_t v14 = *(void *)(*(void *)v12 + 16LL);
  if (v14 < a2)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  uint64_t v38 = (void *)v12;
  uint64_t v15 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }

  uint64_t v16 = 1 - v15;
  if (__OFSUB__(1LL, v15))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }

  int64_t v17 = v14 + v16;
  if (__OFADD__(v14, v16))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  sub_181BCEDC8(a3);
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  void *v38 = v13;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v17 > v13[3] >> 1)
  {
    if (v14 <= v17) {
      int64_t v19 = v14 + v16;
    }
    else {
      int64_t v19 = v14;
    }
    uint64_t v13 = sub_181BC461C(isUniquelyReferenced_nonNull_native, v19, 1, v13);
    void *v38 = v13;
  }

  uint64_t v20 = (uint64_t)&v13[8 * a1 + 4];
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58AC60);
  swift_arrayDestroy();
  if (v16)
  {
    uint64_t v21 = v13[2];
    BOOL v22 = __OFSUB__(v21, a2);
    uint64_t v23 = v21 - a2;
    if (v22)
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }

    if (v23 < 0)
    {
LABEL_38:
      uint64_t result = sub_18264F360();
      __break(1u);
      return result;
    }

    unint64_t v24 = (char *)(v20 + 64);
    unint64_t v25 = (char *)&v13[8 * a2 + 4];
    size_t v26 = v23 << 6;
    uint64_t v27 = v13[2];
    BOOL v22 = __OFADD__(v27, v16);
    uint64_t v28 = v27 + v16;
    if (v22)
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }

    v13[2] = v28;
  }

  uint64_t v29 = *(void *)a3;
  uint64_t v30 = *(void *)(a3 + 8);
  uint64_t v32 = *(void *)(a3 + 16);
  uint64_t v31 = *(void *)(a3 + 24);
  char v33 = *(_BYTE *)(a3 + 32);
  uint64_t v36 = *(void *)(a3 + 48);
  uint64_t v37 = *(void *)(a3 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v34 = sub_18264EBE0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v34 & 1) != 0) {
    goto LABEL_34;
  }
  *(void *)uint64_t v20 = v29;
  *(void *)(v20 + 8) = v30;
  *(void *)(v20 + 16) = v32;
  *(void *)(v20 + 24) = v31;
  *(_BYTE *)(v20 + 32) = v33;
  *(void *)(v20 + 40) = v37;
  *(void *)(v20 + 48) = v36;
  *(_WORD *)(v20 + 56) = 0;
  sub_181BCEDC8(a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  void *v38 = v13;
  swift_endAccess();
  uint64_t v35 = *v4;
  uint64_t result = swift_beginAccess();
  if (*(void *)(*(void *)(v35 + 16) + 16LL) > 0xFFFEuLL)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  return result;
}

uint64_t HTTPFields.replaceSubrange<A>(_:with:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v32 = a2;
  uint64_t v33 = a3;
  char v34 = a1;
  uint64_t v31 = a5;
  uint64_t v8 = sub_18264F198();
  uint64_t v29 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  char v10 = (char *)v28 - v9;
  v28[1] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C58AC60);
  uint64_t v30 = sub_18264F2C4();
  uint64_t v11 = MEMORY[0x1895F8858](v30);
  uint64_t v12 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](v11);
  int64_t v14 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v28[0] = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v16 = (char *)v28 - v15;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *uint64_t v5 = sub_181C1DF54();
    swift_release();
  }

  uint64_t v17 = *v5;
  swift_beginAccess();
  if (*(void **)(*(void *)(v17 + 16) + 16LL) == v34)
  {
    char v34 = v6;
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v33, a4);
    sub_18264EC10();
    swift_getAssociatedConformanceWitness();
    sub_18264F0C0();
    uint64_t v18 = v37;
    if (!v37) {
      return (*(uint64_t (**)(char *, uint64_t))(v28[0] + 8LL))(v16, AssociatedTypeWitness);
    }
    uint64_t v19 = v36;
    uint64_t v20 = v38;
    uint64_t v21 = v39;
    char v23 = v40;
    uint64_t v22 = v41;
    uint64_t v24 = v42;
    while (1)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v25 = sub_18264EBE0();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v25 & 1) != 0) {
        break;
      }
      uint64_t v36 = v19;
      uint64_t v37 = v18;
      uint64_t v38 = v20;
      uint64_t v39 = v21;
      LOBYTE(v40) = v23;
      uint64_t v41 = v22;
      uint64_t v42 = v24;
      sub_181C1E17C(&v36);
      sub_181BCECE0(v19, v18);
      sub_18264F0C0();
      uint64_t v19 = v36;
      uint64_t v18 = v37;
      uint64_t v20 = v38;
      uint64_t v21 = v39;
      char v23 = v40;
      uint64_t v22 = v41;
      uint64_t v24 = v42;
      if (!v37) {
        return (*(uint64_t (**)(char *, uint64_t))(v28[0] + 8LL))(v16, AssociatedTypeWitness);
      }
    }

    __break(1u);
    goto LABEL_12;
  }

  swift_beginAccess();
  *(void *)(v17 + 24) = 0LL;
  swift_bridgeObjectRelease();
  sub_18264EC58();
  MEMORY[0x186E12084](MEMORY[0x189619258], v8);
  sub_18264F384();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v8);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CDF8);
  uint64_t v43 = v31;
  MEMORY[0x186E12084](MEMORY[0x189619620], v30, &v43);
  sub_18264ECF4();
  swift_endAccess();
  uint64_t v27 = *v6;
  uint64_t result = swift_beginAccess();
  if (*(void *)(*(void *)(v27 + 16) + 16LL) > 0xFFFEuLL) {
LABEL_12:
  }
    __break(1u);
  return result;
}

uint64_t sub_181C21E98@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v5 = a1[3];
  char v7 = *((_BYTE *)a1 + 32);
  uint64_t v9 = a1[5];
  uint64_t v8 = a1[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v10 = sub_18264EBE0();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    *(void *)a2 = v4;
    *(void *)(a2 + 8) = v3;
    *(void *)(a2 + 16) = v6;
    *(void *)(a2 + 24) = v5;
    *(_BYTE *)(a2 + 32) = v7;
    *(void *)(a2 + 40) = v9;
    *(void *)(a2 + 48) = v8;
    *(_WORD *)(a2 + 56) = 0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }

  return result;
}

_DWORD *sub_181C21F4C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (void *)swift_allocObject();
  uint64_t v3 = MEMORY[0x18961AFE8];
  v2[2] = MEMORY[0x18961AFE8];
  v2[3] = sub_181C87FF8(v3);
  uint64_t result = (_DWORD *)swift_slowAlloc();
  v2[4] = result;
  *uint64_t result = 0;
  *a1 = v2;
  return result;
}

uint64_t sub_181C21FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(a2, a3);
}

_DWORD *sub_181C22000@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  __int128 v3 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v3;
  v5[2] = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  return sub_181C22038((uint64_t)v5, a2, a3);
}

_DWORD *sub_181C22038@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  char v9 = *(_BYTE *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  type metadata accessor for HTTPFields._Storage();
  uint64_t v12 = (void *)swift_allocObject();
  uint64_t v13 = MEMORY[0x18961AFE8];
  v12[2] = MEMORY[0x18961AFE8];
  v12[3] = sub_181C87FF8(v13);
  uint64_t result = (_DWORD *)swift_slowAlloc();
  v12[4] = result;
  *uint64_t result = 0;
  if (!a2)
  {
    uint64_t result = (_DWORD *)sub_181BCEE10(a1);
LABEL_7:
    *a3 = v12;
    return result;
  }

  if ((a2 & 0x8000000000000000LL) == 0)
  {
    v17[0] = v6;
    v17[1] = v5;
    v17[2] = v8;
    v17[3] = v7;
    char v18 = v9;
    uint64_t v19 = v10;
    uint64_t v20 = v11;
    do
    {
      swift_beginAccess();
      uint64_t v15 = *(void *)(v12[2] + 16LL);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_181C216E0(v15, v15, (uint64_t)v17);
      sub_181BCEE10(a1);
      --a2;
    }

    while (a2);
    uint64_t result = (_DWORD *)sub_181BCEE10(a1);
    goto LABEL_7;
  }

  __break(1u);
  return result;
}

uint64_t sub_181C22170()
{
  return sub_18264EFDC();
}

uint64_t sub_181C22188(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  char v6 = *((_BYTE *)a1 + 32);
  uint64_t v8 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v9 = *v1;
  swift_beginAccess();
  uint64_t v10 = *(void *)(*(void *)(v9 + 16) + 16LL);
  v12[0] = v3;
  v12[1] = v2;
  v12[2] = v5;
  v12[3] = v4;
  char v13 = v6;
  uint64_t v14 = v8;
  uint64_t v15 = v7;
  sub_181C216E0(v10, v10, (uint64_t)v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_181C2222C()
{
  return sub_18264EFC4();
}

uint64_t sub_181C22244(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  char v6 = *((_BYTE *)a1 + 32);
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  uint64_t v9 = *a2;
  v11[0] = v2;
  v11[1] = v3;
  v11[2] = v4;
  v11[3] = v5;
  char v12 = v6;
  uint64_t v13 = v7;
  uint64_t v14 = v8;
  sub_181C216E0(v9, v9, (uint64_t)v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_181C222B0()
{
  return sub_18264EFD0();
}

uint64_t sub_181C222C8@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_181C222D0(*a1, a2);
}

uint64_t sub_181C222D0@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t result = swift_beginAccess();
  uint64_t v7 = *(void *)(v5 + 16);
  unint64_t v8 = *(void *)(v7 + 16);
  if (!v8)
  {
    __break(1u);
    goto LABEL_6;
  }

  if ((a1 & 0x8000000000000000LL) != 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if (v8 > a1)
  {
    uint64_t v9 = v7 + (a1 << 6);
    uint64_t v10 = *(void *)(v9 + 40);
    uint64_t v16 = *(void *)(v9 + 32);
    uint64_t v12 = *(void *)(v9 + 48);
    uint64_t v11 = *(void *)(v9 + 56);
    char v13 = *(_BYTE *)(v9 + 64);
    uint64_t v15 = *(void *)(v9 + 72);
    uint64_t v14 = *(void *)(v9 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = sub_181C25944(a1);
    *(void *)a2 = v16;
    *(void *)(a2 + 8) = v10;
    *(void *)(a2 + 16) = v12;
    *(void *)(a2 + 24) = v11;
    *(_BYTE *)(a2 + 32) = v13;
    *(void *)(a2 + 40) = v15;
    *(void *)(a2 + 48) = v14;
    return result;
  }

uint64_t sub_181C223A8(uint64_t *a1)
{
  return sub_181C25944(*a1);
}

double sub_181C223B4@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 48) = 0LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_181C223CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_beginAccess();
  uint64_t v5 = *(void *)(v3 + 16);
  unint64_t v6 = *(void *)(v5 + 16);
  if (!v6)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  uint64_t v7 = *(void *)(v5 + 40);
  uint64_t v8 = *(void *)(v5 + 48);
  uint64_t v9 = *(void *)(v5 + 56);
  char v10 = *(_BYTE *)(v5 + 64);
  uint64_t v11 = *(void *)(v5 + 72);
  uint64_t v12 = *(void *)(v5 + 80);
  *(void *)a1 = *(void *)(v5 + 32);
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 48) = v12;
  uint64_t result = sub_181C1D414(0LL, 1LL, v6, v3);
  if ((v13 & 1) == 0)
  {
    if ((result & 0x8000000000000000LL) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return sub_181C25944(0LL);
    }

    goto LABEL_6;
  }

unint64_t sub_181C22494(unint64_t result)
{
  if (result)
  {
    uint64_t v2 = result;
    if ((result & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else
    {
      uint64_t v3 = *v1;
      swift_beginAccess();
      uint64_t result = sub_181C1D414(0LL, v2, *(void *)(*(void *)(v3 + 16) + 16LL), v3);
      if ((v4 & 1) != 0)
      {
LABEL_9:
        __break(1u);
        return result;
      }

      if ((result & 0x8000000000000000LL) == 0) {
        return sub_181C25944(0LL);
      }
    }

    __break(1u);
    goto LABEL_9;
  }

  return result;
}

_DWORD *sub_181C22520(char a1)
{
  if ((a1 & 1) != 0)
  {
    swift_beginAccess();
    return (_DWORD *)sub_181C25944(0LL);
  }

  else
  {
    swift_release();
    type metadata accessor for HTTPFields._Storage();
    uint64_t v3 = (void *)swift_allocObject();
    uint64_t v4 = MEMORY[0x18961AFE8];
    v3[2] = MEMORY[0x18961AFE8];
    v3[3] = sub_181C87FF8(v4);
    uint64_t result = (_DWORD *)swift_slowAlloc();
    v3[4] = result;
    *uint64_t result = 0;
    void *v1 = v3;
  }

  return result;
}

uint64_t sub_181C225BC(uint64_t (*a1)(uint64_t *), uint64_t a2)
{
  uint64_t result = sub_181C23F80(a1, a2);
  if (!v3)
  {
    uint64_t v5 = result;
    uint64_t v6 = *v2;
    uint64_t result = swift_beginAccess();
    if (*(void *)(*(void *)(v6 + 16) + 16LL) < v5) {
      __break(1u);
    }
    else {
      return sub_181C25944(v5);
    }
  }

  return result;
}

uint64_t sub_181C22638(uint64_t *a1, unint64_t *a2)
{
  return HTTPFields.subscript.setter(a1, *a2);
}

void (*sub_181C22640( void (***a1)(uint64_t **a1, char a2), unint64_t *a2))(void *)
{
  uint64_t v4 = (void (**)(uint64_t **, char))malloc(0x28uLL);
  *a1 = v4;
  v4[4] = HTTPFields.subscript.modify(v4, *a2);
  return sub_181C2268C;
}

uint64_t sub_181C22690(uint64_t a1, uint64_t a2)
{
  return swift_release();
}

void (*sub_181C226C8(void *a1, uint64_t *a2))(void *)
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_181C22714(v4, *a2, a2[1]);
  return sub_181C2268C;
}

void (*sub_181C22714(void *a1, uint64_t a2, uint64_t a3))(unint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x48uLL);
  *a1 = v7;
  v7[7] = a3;
  v7[8] = v3;
  v7[6] = a2;
  uint64_t v8 = *v3;
  uint64_t result = (void (*)(unint64_t **, char))swift_beginAccess();
  if (a2 < 0 || *(void *)(*(void *)(v8 + 16) + 16LL) < a3)
  {
    __break(1u);
  }

  else
  {
    v7[1] = a3;
    v7[2] = v8;
    *uint64_t v7 = a2;
    swift_retain();
    return sub_181C227B0;
  }

  return result;
}

void sub_181C227B0(unint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = **a1;
  uint64_t v4 = (*a1)[1];
  uint64_t v5 = (*a1)[2];
  int64_t v6 = (*a1)[7];
  uint64_t v7 = (uint64_t *)(*a1)[8];
  unint64_t v8 = (*a1)[6];
  if ((a2 & 1) != 0)
  {
    swift_retain();
    sub_181C23788(v7, v8, v6, v3, v4, v5);
    swift_release();
  }

  else
  {
    sub_181C23788((uint64_t *)(*a1)[8], v8, v6, v3, v4, v5);
  }

  swift_release();
  free(v2);
}

uint64_t sub_181C22850@<X0>(uint64_t (*a1)(uint64_t *)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_181C24310(a1, a2);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

uint64_t sub_181C22878(uint64_t *a1, unint64_t *a2)
{
  return sub_181C22884(*a1, *a2);
}

uint64_t sub_181C22884(uint64_t result, unint64_t a2)
{
  if (result != a2)
  {
    unint64_t v3 = result;
    if (result < 0)
    {
      __break(1u);
    }

    else
    {
      uint64_t v5 = *v2;
      uint64_t result = swift_beginAccess();
      uint64_t v6 = *(void *)(v5 + 16);
      unint64_t v7 = *(void *)(v6 + 16);
      if (v7 > v3)
      {
        uint64_t v8 = v6 + 32;
        uint64_t v9 = v8 + (v3 << 6);
        uint64_t result = *(void *)(v9 + 8);
        uint64_t v10 = *(void *)(v9 + 16);
        uint64_t v11 = *(void *)(v9 + 24);
        char v12 = *(_BYTE *)(v9 + 32);
        uint64_t v13 = *(void *)(v9 + 40);
        uint64_t v14 = *(void *)(v9 + 48);
        v26[0] = *(void *)v9;
        v26[1] = result;
        v26[2] = v10;
        v26[3] = v11;
        char v27 = v12;
        uint64_t v28 = v13;
        uint64_t v29 = v14;
        if (v7 > a2)
        {
          uint64_t v15 = v8 + (a2 << 6);
          uint64_t v16 = *(void *)(v15 + 8);
          uint64_t v17 = *(void *)(v15 + 16);
          uint64_t v18 = *(void *)(v15 + 24);
          char v19 = *(_BYTE *)(v15 + 32);
          uint64_t v20 = *(void *)(v15 + 40);
          uint64_t v21 = *(void *)(v15 + 48);
          v22[0] = *(void *)v15;
          v22[1] = v16;
          v22[2] = v17;
          v22[3] = v18;
          char v23 = v19;
          uint64_t v24 = v20;
          uint64_t v25 = v21;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          HTTPFields.subscript.setter(v22, v3);
          return HTTPFields.subscript.setter(v26, a2);
        }

uint64_t sub_181C2299C()
{
  return sub_18264EA18();
}

uint64_t sub_181C229BC()
{
  return sub_18264EA0C();
}

uint64_t sub_181C229DC@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_beginAccess();
  *a1 = *(void *)(*(void *)(v3 + 16) + 16LL);
  return result;
}

void (*sub_181C22A24(void (***a1)(void **a1), unint64_t *a2))(void *)
{
  uint64_t v4 = (void (**)(void **))malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_181C22A70(v4, *a2);
  return sub_181C2268C;
}

void (*sub_181C22A70(void (**a1)(void **a1), unint64_t a2))(void **a1)
{
  uint64_t result = (void (*)(void **))malloc(0x50uLL);
  *a1 = result;
  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v6 = result;
    uint64_t v7 = *v2;
    uint64_t result = (void (*)(void **))swift_beginAccess();
    uint64_t v8 = *(void *)(v7 + 16);
    if (*(void *)(v8 + 16) > a2)
    {
      uint64_t v9 = v8 + (a2 << 6);
      uint64_t v10 = *(void *)(v9 + 40);
      uint64_t v11 = *(void *)(v9 + 48);
      uint64_t v12 = *(void *)(v9 + 56);
      char v13 = *(_BYTE *)(v9 + 64);
      uint64_t v14 = *(void *)(v9 + 72);
      uint64_t v15 = *(void *)(v9 + 80);
      *(void *)uint64_t v6 = *(void *)(v9 + 32);
      *((void *)v6 + 1) = v10;
      *((void *)v6 + 2) = v11;
      *((void *)v6 + 3) = v12;
      *((_BYTE *)v6 + 32) = v13;
      *((void *)v6 + 5) = v14;
      *((void *)v6 + 6) = v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return sub_181C22B24;
    }
  }

  __break(1u);
  return result;
}

void sub_181C22B24(void **a1)
{
  uint64_t v1 = *a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t sub_181C22B6C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = *v2;
  uint64_t result = swift_beginAccess();
  if (v4 < 0 || *(void *)(*(void *)(v6 + 16) + 16LL) < v5)
  {
    __break(1u);
  }

  else
  {
    a2[1] = v5;
    a2[2] = v6;
    *a2 = v4;
    return swift_retain();
  }

  return result;
}

uint64_t sub_181C22BDC@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_beginAccess();
  uint64_t v5 = *(void *)(*(void *)(v3 + 16) + 16LL);
  *a1 = 0LL;
  a1[1] = v5;
  return result;
}

BOOL sub_181C22C24()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(void *)(*(void *)(v1 + 16) + 16LL) == 0LL;
}

uint64_t *sub_181C22C6C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = a2[1];
  if (*result >= *a2)
  {
    BOOL v5 = __OFSUB__(v2, v3);
    BOOL v4 = v2 - v3 < 0;
  }

  else
  {
    BOOL v5 = 0;
    BOOL v4 = 0;
  }

  if (v4 == v5) {
    __break(1u);
  }
  return result;
}

void *sub_181C22C88(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < *result) {
    __break(1u);
  }
  return result;
}

void *sub_181C22CA4(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < result[1]) {
    __break(1u);
  }
  return result;
}

uint64_t sub_181C22CC0@<X0>(unint64_t *a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = *a1;
  uint64_t v5 = *v2;
  uint64_t result = swift_beginAccess();
  if (v4 >= *(void *)(*(void *)(v5 + 16) + 16LL)) {
    __break(1u);
  }
  else {
    *a2 = v4 + 1;
  }
  return result;
}

uint64_t sub_181C22D24(unint64_t *a1)
{
  uint64_t v3 = *v1;
  unint64_t v4 = *a1;
  uint64_t result = swift_beginAccess();
  if (v4 >= *(void *)(*(void *)(v3 + 16) + 16LL)) {
    __break(1u);
  }
  else {
    *a1 = v4 + 1;
  }
  return result;
}

void *sub_181C22D88@<X0>(void *result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4 = *result - 1LL;
  if (__OFSUB__(*result, 1LL))
  {
    __break(1u);
  }

  else
  {
    uint64_t v5 = *v2;
    uint64_t result = (void *)swift_beginAccess();
    if (v4 < *(void *)(*(void *)(v5 + 16) + 16LL))
    {
      *a2 = v4;
      return result;
    }
  }

  __break(1u);
  return result;
}

unint64_t *sub_181C22DF4(unint64_t *result)
{
  unint64_t v2 = *result - 1;
  if (__OFSUB__(*result, 1LL))
  {
    __break(1u);
  }

  else
  {
    uint64_t v3 = result;
    uint64_t v4 = *v1;
    uint64_t result = (unint64_t *)swift_beginAccess();
    if (v2 < *(void *)(*(void *)(v4 + 16) + 16LL))
    {
      unint64_t *v3 = v2;
      return result;
    }
  }

  __break(1u);
  return result;
}

void *sub_181C22E60@<X0>(void *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v5 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }

  else
  {
    uint64_t v6 = *v3;
    uint64_t result = (void *)swift_beginAccess();
    if (v5 <= *(void *)(*(void *)(v6 + 16) + 16LL))
    {
      *a3 = v5;
      return result;
    }
  }

  __break(1u);
  return result;
}

unint64_t sub_181C22ECC@<X0>( unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result = sub_181C1D414(*a1, a2, *a3, *v4);
  *(void *)a4 = result;
  *(_BYTE *)(a4 + 8) = v7 & 1;
  return result;
}

uint64_t sub_181C22F04(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  uint64_t v5 = *v2;
  uint64_t result = swift_beginAccess();
  unint64_t v7 = *(void *)(*(void *)(v5 + 16) + 16LL);
  if (v3 > v7)
  {
    __break(1u);
  }

  else if (v4 <= v7)
  {
    return v4 - v3;
  }

  __break(1u);
  return result;
}

void sub_181C22F70(void *a1@<X8>)
{
  *a1 = *v1;
  a1[1] = 0LL;
}

uint64_t sub_181C22F7C()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(void *)(*(void *)(v1 + 16) + 16LL);
}

void *sub_181C22FBC()
{
  uint64_t v1 = sub_181C8B8B0(*v0);
  swift_release();
  return v1;
}

uint64_t sub_181C22FF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181C8BC14(a1, a2, a3, *v3);
}

uint64_t HTTPFields.debugDescription.getter()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58AC60);
  uint64_t v4 = MEMORY[0x186E0E868](v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_181C23074()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58AC60);
  uint64_t v4 = MEMORY[0x186E0E868](v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t HTTPFields.encode(to:)(void *a1)
{
  uint64_t v2 = *v1;
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_18264F6F0();
  uint64_t v6 = v2;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v4, v5);
  sub_181C25280();
  sub_181C252C4();
  sub_18264F4B0();
  return __swift_destroy_boxed_opaque_existential_2((uint64_t)v4);
}

uint64_t HTTPFields.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = (void *)swift_allocObject();
  uint64_t v6 = MEMORY[0x18961AFE8];
  v5[2] = MEMORY[0x18961AFE8];
  _OWORD v5[3] = sub_181C87FF8(v6);
  unint64_t v7 = (_DWORD *)swift_slowAlloc();
  v5[4] = v7;
  *unint64_t v7 = 0;
  uint64_t v31 = v5;
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_18264F6C0();
  if (v2)
  {
    swift_release();
  }

  else
  {
    __swift_project_boxed_opaque_existential_2(v25, v26);
    uint64_t v8 = sub_18264F48C();
    if ((v9 & 1) == 0)
    {
      int64_t v10 = v8;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v11 = sub_181C1DF54();
        uint64_t v31 = v11;
        swift_release();
        uint64_t v5 = v11;
      }

      swift_beginAccess();
      if (v5[3])
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A200);
        sub_18264E9D0();
      }

      swift_endAccess();
      swift_beginAccess();
      uint64_t v12 = (void *)v5[2];
      char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
      v5[2] = v12;
      if (!(_DWORD)isUniquelyReferenced_nonNull_native || v10 > v12[3] >> 1)
      {
        if (v12[2] <= v10) {
          int64_t v14 = v10;
        }
        else {
          int64_t v14 = v12[2];
        }
        uint64_t v12 = sub_181BC461C(isUniquelyReferenced_nonNull_native, v14, 0, v12);
      }

      v5[2] = v12;
      swift_endAccess();
    }

    __swift_project_boxed_opaque_existential_2(v25, v26);
    if ((sub_18264F4A4() & 1) != 0)
    {
LABEL_19:
      __swift_destroy_boxed_opaque_existential_2((uint64_t)v25);
      *a2 = v31;
    }

    else
    {
      while (1)
      {
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v25, v26);
        sub_181C25308();
        sub_18264F498();
        unint64_t v16 = v23;
        unint64_t v15 = v24;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v17 = sub_18264EBE0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v17 & 1) != 0) {
          break;
        }
        uint64_t v18 = v31;
        swift_beginAccess();
        uint64_t v19 = *(void *)(v18[2] + 16LL);
        v27[0] = v21[0];
        v27[1] = v21[1];
        v27[2] = v21[2];
        v27[3] = v21[3];
        char v28 = v22;
        unint64_t v29 = v23;
        unint64_t v30 = v24;
        sub_181C216E0(v19, v19, (uint64_t)v27);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __swift_project_boxed_opaque_existential_2(v25, v26);
        if ((sub_18264F4A4() & 1) != 0) {
          goto LABEL_19;
        }
      }

      sub_181BCD38C((uint64_t)v25, (uint64_t)v21);
      sub_18264F168();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_18264EB74();
      if ((sub_181BCE7EC(v16, v15) & 1) != 0)
      {
        swift_bridgeObjectRetain();
      }

      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_181C9420C(v16, v15);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      sub_18264EB74();
      swift_bridgeObjectRelease();
      sub_18264EB74();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_18264EB74();
      sub_18264F204();
      swift_allocError();
      sub_18264F1E0();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_2((uint64_t)v21);
      swift_willThrow();
      swift_release();
      __swift_destroy_boxed_opaque_existential_2((uint64_t)v25);
    }
  }

  return __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
}

uint64_t sub_181C2364C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return HTTPFields.init(from:)(a1, a2);
}

uint64_t sub_181C23660(void *a1)
{
  return __swift_destroy_boxed_opaque_existential_2((uint64_t)v2);
}

uint64_t sub_181C23710(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000LL) == 0 || (a2 & 0x800000000000000LL) != 0)
  {
    uint64_t v10 = sub_18264EBD4();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000LL;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }

  else
  {
    uint64_t v5 = MEMORY[0x186E0E748](15LL, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000LL;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }

uint64_t sub_181C23788( uint64_t *a1, unint64_t a2, int64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *a1;
  uint64_t result = swift_beginAccess();
  if ((a2 & 0x8000000000000000LL) != 0 || *(void *)(*(void *)(v12 + 16) + 16LL) < a3)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  if (a2 != a3)
  {
    if (a4 == a5)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }

    if ((uint64_t)a2 >= a3)
    {
LABEL_26:
      __break(1u);
      return result;
    }

    uint64_t v14 = a6 + 16;
    uint64_t result = swift_beginAccess();
    uint64_t v15 = (a4 << 6) + 80;
    int64_t v16 = a3 - 1;
    unint64_t v17 = a4;
    while ((uint64_t)v17 < a5)
    {
      if ((a4 & 0x8000000000000000LL) != 0) {
        goto LABEL_19;
      }
      if (v17 >= *(void *)(*(void *)v14 + 16LL)) {
        goto LABEL_20;
      }
      uint64_t v18 = (void *)(*(void *)v14 + v15);
      uint64_t v19 = *(v18 - 5);
      uint64_t v20 = *(v18 - 4);
      uint64_t v21 = *(v18 - 3);
      char v22 = *((_BYTE *)v18 - 16);
      uint64_t v23 = *(v18 - 1);
      uint64_t v24 = *v18;
      v26[0] = *(v18 - 6);
      v26[1] = v19;
      v26[2] = v20;
      v26[3] = v21;
      char v27 = v22;
      uint64_t v28 = v23;
      uint64_t v29 = v24;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      HTTPFields.subscript.setter(v26, a2);
      uint64_t v25 = *a1;
      uint64_t result = swift_beginAccess();
      if (a2 >= *(void *)(*(void *)(v25 + 16) + 16LL)) {
        goto LABEL_21;
      }
      if (v17 >= *(void *)(*(void *)v14 + 16LL)) {
        goto LABEL_22;
      }
      ++v17;
      if (v16 == a2) {
        goto LABEL_15;
      }
      v15 += 64LL;
      ++a2;
      if (a5 == v17)
      {
        __break(1u);
LABEL_15:
        a4 = v17;
        goto LABEL_16;
      }
    }

    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

uint64_t sub_181C23934(uint64_t result, unsigned __int16 a2)
{
  char v3 = (void *)MEMORY[0x18961AFE8];
  if (a2 == 0xFFFF)
  {
    uint64_t v2 = 0LL;
  }

  else
  {
    unint64_t v4 = *(void *)(result + 16);
    unint64_t v5 = a2;
    uint64_t v26 = result;
    uint64_t result = swift_bridgeObjectRetain();
    if (v4 > v5)
    {
      uint64_t v2 = 0LL;
      uint64_t v6 = (uint64_t)(v3 + 4);
      unint64_t v27 = v4;
      do
      {
        uint64_t v7 = v26 + 32 + (v5 << 6);
        uint64_t v9 = *(void *)v7;
        uint64_t v8 = *(void *)(v7 + 8);
        uint64_t v11 = *(void *)(v7 + 16);
        uint64_t v10 = *(void *)(v7 + 24);
        char v29 = *(_BYTE *)(v7 + 32);
        uint64_t v12 = *(void *)(v7 + 48);
        uint64_t v28 = *(void *)(v7 + 40);
        unint64_t v5 = *(unsigned __int16 *)(v7 + 56);
        if (v2)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t result = swift_bridgeObjectRetain();
          BOOL v13 = __OFSUB__(v2--, 1LL);
          if (v13) {
            goto LABEL_31;
          }
        }

        else
        {
          unint64_t v14 = v3[3];
          int64_t v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
          if (v15 <= 1) {
            uint64_t v16 = 1LL;
          }
          else {
            uint64_t v16 = v15;
          }
          __swift_instantiateConcreteTypeFromMangledName(&qword_18C58AC90);
          unint64_t v17 = (void *)swift_allocObject();
          uint64_t v18 = (uint64_t)(_swift_stdlib_malloc_size(v17) - 32) / 56;
          v17[2] = v16;
          v17[3] = 2 * v18;
          uint64_t v19 = v17 + 4;
          uint64_t v20 = v3[3] >> 1;
          uint64_t v6 = (uint64_t)&v17[7 * v20 + 4];
          uint64_t v21 = (v18 & 0x7FFFFFFFFFFFFFFFLL) - v20;
          if (v3[2])
          {
            if (v17 != v3 || v19 >= &v3[7 * v20 + 4]) {
              memmove(v19, v3 + 4, 56 * v20);
            }
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v3[2] = 0LL;
          }

          else
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }

          uint64_t result = swift_release();
          char v3 = v17;
          unint64_t v4 = v27;
          BOOL v13 = __OFSUB__(v21, 1LL);
          uint64_t v2 = v21 - 1;
          if (v13)
          {
LABEL_31:
            __break(1u);
LABEL_32:
            __break(1u);
LABEL_33:
            __break(1u);
            return result;
          }
        }

        *(void *)uint64_t v6 = v9;
        *(void *)(v6 + 8) = v8;
        *(void *)(v6 + 16) = v11;
        *(void *)(v6 + 24) = v10;
        *(_BYTE *)(v6 + 32) = v29;
        *(void *)(v6 + 40) = v28;
        *(void *)(v6 + 48) = v12;
        if ((_DWORD)v5 == 0xFFFF) {
          goto LABEL_25;
        }
        v6 += 56LL;
      }

      while (v4 > v5);
    }

    __break(1u);
LABEL_25:
    uint64_t result = swift_bridgeObjectRelease();
  }

  unint64_t v23 = v3[3];
  if (v23 >= 2)
  {
    unint64_t v24 = v23 >> 1;
    BOOL v13 = __OFSUB__(v24, v2);
    uint64_t v25 = v24 - v2;
    if (v13) {
      goto LABEL_33;
    }
    v3[2] = v25;
  }

  return (uint64_t)v3;
}

unint64_t sub_181C23B7C()
{
  unint64_t result = sub_181C24540();
  uint64_t v1 = (void *)MEMORY[0x18961AFE8];
  if ((result & 0x100) == 0)
  {
    char v2 = result;
    size_t v3 = 0LL;
    unint64_t v4 = (_BYTE *)(MEMORY[0x18961AFE8] + 32LL);
    while (1)
    {
      if (!v3)
      {
        unint64_t v5 = v1[3];
        int64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
        if (v6 <= 1) {
          uint64_t v7 = 1LL;
        }
        else {
          uint64_t v7 = v6;
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_18C58AC08);
        uint64_t v8 = (void *)swift_allocObject();
        size_t v9 = 2 * _swift_stdlib_malloc_size(v8) - 64;
        v8[2] = v7;
        v8[3] = v9;
        unint64_t v10 = (unint64_t)(v8 + 4);
        size_t v11 = v1[3] >> 1;
        if (v1[2])
        {
          v1[2] = 0LL;
        }

        unint64_t v4 = (_BYTE *)(v10 + v11);
        size_t v3 = (v9 >> 1) - v11;
        unint64_t result = swift_release();
        uint64_t v1 = v8;
      }

      BOOL v13 = __OFSUB__(v3--, 1LL);
      if (v13) {
        break;
      }
      *v4++ = v2;
      unint64_t result = sub_181C24540();
      char v2 = result;
      if ((result & 0x100) != 0) {
        goto LABEL_21;
      }
    }

    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  size_t v3 = 0LL;
LABEL_21:
  swift_release();
  swift_release();
  swift_release();
  unint64_t result = swift_bridgeObjectRelease();
  unint64_t v14 = v1[3];
  if (v14 < 2) {
    return (unint64_t)v1;
  }
  unint64_t v15 = v14 >> 1;
  BOOL v13 = __OFSUB__(v15, v3);
  unint64_t v16 = v15 - v3;
  if (!v13)
  {
    v1[2] = v16;
    return (unint64_t)v1;
  }

uint64_t sub_181C23D48(uint64_t result, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    unint64_t result = sub_18264EB8C();
    uint64_t v2 = result;
    if (result > 0)
    {
LABEL_6:
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58AC08);
      size_t v3 = (void *)swift_allocObject();
      unint64_t result = _swift_stdlib_malloc_size(v3);
      unint64_t v4 = 2 * result - 64;
      v3[2] = v2;
      v3[3] = v4;
      goto LABEL_9;
    }
  }

  else
  {
    if ((a2 & 0x2000000000000000LL) != 0) {
      uint64_t v2 = HIBYTE(a2) & 0xF;
    }
    else {
      uint64_t v2 = result & 0xFFFFFFFFFFFFLL;
    }
    if (v2 > 0) {
      goto LABEL_6;
    }
  }

  size_t v3 = (void *)MEMORY[0x18961AFE8];
  unint64_t v4 = *(void *)(MEMORY[0x18961AFE8] + 24LL);
LABEL_9:
  if (v2 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  unint64_t v5 = v3 + 4;
  unint64_t v6 = v4 >> 1;
  if (v2)
  {
    v6 -= v2;
    swift_bridgeObjectRetain();
    swift_retain();
    while (1)
    {
      unint64_t result = sub_181C27B9C();
      if ((result & 0x100) != 0) {
        goto LABEL_42;
      }
      *v5++ = result;
      if (!--v2) {
        goto LABEL_16;
      }
    }
  }

  swift_bridgeObjectRetain();
  swift_retain();
LABEL_16:
  unint64_t result = sub_181C27B9C();
  if ((result & 0x100) == 0)
  {
    char v7 = result;
    while (1)
    {
      if (!v6)
      {
        unint64_t v8 = v3[3];
        int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
        if (v9 <= 1) {
          uint64_t v10 = 1LL;
        }
        else {
          uint64_t v10 = v9;
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_18C58AC08);
        size_t v11 = (void *)swift_allocObject();
        size_t v12 = 2 * _swift_stdlib_malloc_size(v11) - 64;
        v11[2] = v10;
        v11[3] = v12;
        unint64_t v13 = (unint64_t)(v11 + 4);
        size_t v14 = v3[3] >> 1;
        if (v3[2])
        {
          v3[2] = 0LL;
        }

        unint64_t v5 = (_BYTE *)(v13 + v14);
        unint64_t v6 = (v12 >> 1) - v14;
        unint64_t result = swift_release();
        size_t v3 = v11;
      }

      BOOL v16 = __OFSUB__(v6--, 1LL);
      if (v16) {
        break;
      }
      *v5++ = v7;
      unint64_t result = sub_181C27B9C();
      char v7 = result;
      if ((result & 0x100) != 0) {
        goto LABEL_34;
      }
    }

    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }

uint64_t sub_181C23F80(uint64_t (*a1)(uint64_t *), uint64_t a2)
{
  uint64_t v64 = a2;
  uint64_t v4 = *v2;
  unint64_t v5 = (uint64_t *)(v4 + 16);
  swift_retain();
  uint64_t result = swift_beginAccess();
  uint64_t v51 = v4;
  uint64_t v7 = *(void *)(v4 + 16);
  unint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v9 = 144LL;
    unint64_t v10 = 1LL;
    while (1)
    {
      unint64_t v11 = v10 - 1;
      if (v10 - 1 >= v8)
      {
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }

      uint64_t v12 = v7 + v9;
      uint64_t v13 = *(void *)(v12 - 104);
      uint64_t v14 = *(void *)(v12 - 96);
      uint64_t v15 = *(void *)(v12 - 88);
      char v16 = *(_BYTE *)(v12 - 80);
      uint64_t v17 = *(void *)(v12 - 72);
      uint64_t v18 = *(void *)(v12 - 64);
      uint64_t v57 = *(void *)(v12 - 112);
      uint64_t v58 = v13;
      uint64_t v59 = v14;
      uint64_t v60 = v15;
      char v61 = v16;
      uint64_t v62 = v17;
      uint64_t v63 = v18;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v19 = a1(&v57);
      if (v3)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v11;
      }

      char v20 = v19;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v20 & 1) != 0) {
        break;
      }
      uint64_t v7 = *v5;
      unint64_t v8 = *(void *)(*v5 + 16);
      if (v11 >= v8) {
        goto LABEL_27;
      }
      v9 += 64LL;
      if (v10++ == v8) {
        goto LABEL_9;
      }
    }

    uint64_t v22 = v51;
    swift_release();
    if (v11 < *(void *)(*(void *)(v51 + 16) + 16LL)) {
      goto LABEL_15;
    }
    __break(1u);
LABEL_13:
    uint64_t v22 = v51;
    while (1)
    {
      uint64_t result = swift_beginAccess();
      v9 += 64LL;
      if (v10++ >= *(void *)(*(void *)(v22 + 16) + 16LL)) {
        break;
      }
LABEL_15:
      unint64_t v24 = (uint64_t *)(v22 + 16);
      uint64_t result = swift_beginAccess();
      uint64_t v51 = v22;
      uint64_t v25 = *(void *)(v22 + 16);
      unint64_t v26 = *(void *)(v25 + 16);
      if (v10 == v26) {
        return v11;
      }
      if (v10 >= v26) {
        goto LABEL_28;
      }
      unint64_t v27 = (void *)(v25 + v9);
      uint64_t v28 = *(v27 - 5);
      uint64_t v29 = *(v27 - 4);
      uint64_t v30 = *(v27 - 3);
      char v31 = *((_BYTE *)v27 - 16);
      uint64_t v32 = *(v27 - 1);
      uint64_t v33 = *v27;
      uint64_t v57 = *(v27 - 6);
      uint64_t v58 = v28;
      uint64_t v59 = v29;
      uint64_t v60 = v30;
      char v61 = v31;
      uint64_t v62 = v32;
      uint64_t v63 = v33;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v34 = a1(&v57);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v34 & 1) != 0) {
        goto LABEL_13;
      }
      if (v10 != v11)
      {
        if ((v11 & 0x8000000000000000LL) != 0) {
          goto LABEL_31;
        }
        uint64_t v35 = *v24;
        unint64_t v36 = *(void *)(*v24 + 16);
        if (v11 >= v36) {
          goto LABEL_32;
        }
        uint64_t v37 = v35 + (v11 << 6);
        uint64_t result = *(void *)(v37 + 40);
        uint64_t v38 = *(void *)(v37 + 48);
        uint64_t v39 = *(void *)(v37 + 56);
        char v40 = *(_BYTE *)(v37 + 64);
        uint64_t v41 = *(void *)(v37 + 72);
        uint64_t v42 = *(void *)(v37 + 80);
        uint64_t v57 = *(void *)(v37 + 32);
        uint64_t v58 = result;
        uint64_t v59 = v38;
        uint64_t v60 = v39;
        char v61 = v40;
        uint64_t v62 = v41;
        uint64_t v63 = v42;
        if (v10 >= v36) {
          goto LABEL_33;
        }
        uint64_t v43 = (void *)(v35 + v9);
        uint64_t v44 = *(v43 - 5);
        uint64_t v45 = *(v43 - 4);
        uint64_t v46 = *(v43 - 3);
        char v47 = *((_BYTE *)v43 - 16);
        uint64_t v48 = *(v43 - 1);
        uint64_t v49 = *v43;
        v53[0] = *(v43 - 6);
        v53[1] = v44;
        v53[2] = v45;
        v53[3] = v46;
        char v54 = v47;
        uint64_t v55 = v48;
        uint64_t v56 = v49;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        HTTPFields.subscript.setter(v53, v11);
        HTTPFields.subscript.setter(&v57, v10);
      }

      uint64_t v22 = *v50;
      uint64_t result = swift_beginAccess();
      if (v11 >= *(void *)(*(void *)(v22 + 16) + 16LL)) {
        goto LABEL_30;
      }
      ++v11;
    }

uint64_t sub_181C24310(uint64_t (*a1)(uint64_t *), uint64_t a2)
{
  uint64_t v36 = a2;
  uint64_t v4 = *v2;
  swift_beginAccess();
  int64_t v5 = *(void *)(*(void *)(v4 + 16) + 16LL);
  if (v5)
  {
    unint64_t v27 = v2;
    unint64_t v6 = 0LL;
    while (1)
    {
      uint64_t v7 = v4 + 16;
      uint64_t result = swift_beginAccess();
      uint64_t v9 = *(void *)(v4 + 16);
      if (v6 >= *(void *)(v9 + 16))
      {
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }

      uint64_t v10 = v9 + (v6 << 6);
      uint64_t v11 = *(void *)(v10 + 40);
      uint64_t v12 = *(void *)(v10 + 48);
      uint64_t v13 = *(void *)(v10 + 56);
      char v14 = *(_BYTE *)(v10 + 64);
      uint64_t v15 = *(void *)(v10 + 72);
      uint64_t v16 = *(void *)(v10 + 80);
      uint64_t v29 = *(void *)(v10 + 32);
      uint64_t v30 = v11;
      uint64_t v31 = v12;
      uint64_t v32 = v13;
      char v33 = v14;
      uint64_t v34 = v15;
      uint64_t v35 = v16;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v17 = a1(&v29);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (v3) {
        return v6;
      }
      if ((v17 & 1) != 0) {
        break;
      }
      if (v6 >= *(void *)(*(void *)v7 + 16LL)) {
        goto LABEL_20;
      }
LABEL_14:
    }

    int64_t v18 = v5 << 6;
    do
    {
      if (--v5 >= *(void *)(*(void *)v7 + 16LL))
      {
        __break(1u);
        goto LABEL_19;
      }

      int64_t v19 = *(void *)v7 + v18;
      uint64_t v20 = *(void *)(v19 - 24);
      uint64_t v21 = *(void *)(v19 - 16);
      uint64_t v22 = *(void *)(v19 - 8);
      char v23 = *(_BYTE *)v19;
      uint64_t v24 = *(void *)(v19 + 8);
      uint64_t v25 = *(void *)(v19 + 16);
      uint64_t v29 = *(void *)(v19 - 32);
      uint64_t v30 = v20;
      uint64_t v31 = v21;
      uint64_t v32 = v22;
      char v33 = v23;
      uint64_t v34 = v24;
      uint64_t v35 = v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v26 = a1(&v29);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      v18 -= 64LL;
    }

    while ((v26 & 1) != 0);
    sub_181C22884(v6, v5);
    uint64_t v4 = *v27;
    uint64_t result = swift_beginAccess();
    if (v6 < *(void *)(*(void *)(v4 + 16) + 16LL)) {
      goto LABEL_14;
    }
LABEL_21:
    __break(1u);
  }

  else
  {
    return 0LL;
  }

  return result;
}

unint64_t sub_181C24540()
{
  void (*v2)(unint64_t *__return_ptr, char *);
  unint64_t v3;
  __int128 v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t result;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  int v16;
  unint64_t v17;
  __int128 v18;
  void (*v19)(unint64_t *__return_ptr, char *);
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v1 = v0;
  uint64_t v2 = (void (*)(unint64_t *__return_ptr, char *))(v0 + 8);
  if (*(_BYTE *)v0 != 1)
  {
    while (1)
    {
      char v17 = *(void *)(v1 + 56);
      int64_t v18 = *((_OWORD *)v2 + 1);
      uint64_t v32 = *(_OWORD *)v2;
      char v33 = v18;
      uint64_t v34 = *((_OWORD *)v2 + 2);
      if (v17 >> 14 == sub_181C24928() >> 14) {
        goto LABEL_54;
      }
      int64_t v5 = *((void *)&v32 + 1);
      unint64_t v6 = v32;
      int64_t v19 = (void (*)(unint64_t *__return_ptr, char *))v33;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      uint64_t v20 = sub_181C24928();
      swift_release();
      swift_release();
      uint64_t result = swift_bridgeObjectRelease();
      if (v17 >> 14 >= v20 >> 14)
      {
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }

      uint64_t v21 = (v6 >> 59) & 1;
      if ((v5 & 0x1000000000000000LL) == 0) {
        LOBYTE(v21) = 1;
      }
      uint64_t v22 = 4LL << v21;
      if ((v17 & 0xC) == 4LL << v21)
      {
        uint64_t result = sub_181C23710(v17, v6, v5);
        char v17 = result;
        if ((v5 & 0x1000000000000000LL) == 0)
        {
LABEL_23:
          uint64_t result = (v17 & 0xFFFFFFFFFFFF0000LL) + 65540;
          goto LABEL_24;
        }
      }

      else if ((v5 & 0x1000000000000000LL) == 0)
      {
        goto LABEL_23;
      }

      char v26 = HIBYTE(v5) & 0xF;
      if ((v5 & 0x2000000000000000LL) == 0) {
        char v26 = v6 & 0xFFFFFFFFFFFFLL;
      }
      if (v26 <= v17 >> 16)
      {
        __break(1u);
        return result;
      }

      uint64_t result = sub_18264EB98();
LABEL_24:
      *(void *)(v1 + 56) = result;
      if ((result & 0xC) == v22)
      {
        uint64_t result = sub_181C23710(result, v6, v5);
        if (result < 0x4000) {
          goto LABEL_56;
        }
      }

      else if (result < 0x4000)
      {
        goto LABEL_56;
      }

      if ((v5 & 0x1000000000000000LL) != 0)
      {
        char v23 = HIBYTE(v5) & 0xF;
        if ((v5 & 0x2000000000000000LL) == 0) {
          char v23 = v6 & 0xFFFFFFFFFFFFLL;
        }
        if (v23 < result >> 16) {
          goto LABEL_58;
        }
        uint64_t result = sub_18264EBA4();
      }

      else
      {
        uint64_t result = (result & 0xFFFFFFFFFFFF0000LL) - 65532;
      }

      if ((result & 0xC) == v22) {
        uint64_t result = sub_181C23710(result, v6, v5);
      }
      uint64_t v24 = HIBYTE(v5) & 0xF;
      if ((v5 & 0x2000000000000000LL) == 0) {
        uint64_t v24 = v6 & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v25 = result >> 16;
      if (result >> 16 >= v24) {
        goto LABEL_57;
      }
      if ((v5 & 0x1000000000000000LL) != 0)
      {
        uint64_t v15 = sub_18264EBC8();
      }

      else if ((v5 & 0x2000000000000000LL) != 0)
      {
        uint64_t v28 = v6;
        uint64_t v29 = v5 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v15 = *((_BYTE *)&v28 + v25);
      }

      else if ((v6 & 0x1000000000000000LL) != 0)
      {
        uint64_t v15 = *(_BYTE *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 0x20 + (result >> 16));
      }

      else
      {
        uint64_t v15 = *(_BYTE *)(sub_18264F228() + v25);
      }

      uint64_t v30 = v15;
      v19(&v28, &v30);
      uint64_t v16 = v28;
      uint64_t v31 = v28;
      if (((*(uint64_t (**)(char *))(v1 + 64))(&v31) & 1) == 0)
      {
        unint64_t v27 = 0;
        *(_BYTE *)uint64_t v1 = 1;
        return v16 | (v27 << 8);
      }
    }
  }

  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = *(_OWORD *)(v0 + 24);
  uint64_t v32 = *(_OWORD *)v2;
  char v33 = v4;
  uint64_t v34 = *(_OWORD *)(v0 + 40);
  if (v3 >> 14 == sub_181C24928() >> 14)
  {
LABEL_54:
    uint64_t v16 = 0;
    unint64_t v27 = 1;
    return v16 | (v27 << 8);
  }

  int64_t v5 = *((void *)&v32 + 1);
  unint64_t v6 = v32;
  uint64_t v2 = (void (*)(unint64_t *__return_ptr, char *))v33;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v7 = sub_181C24928();
  swift_release();
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 >> 14 >= v7 >> 14)
  {
LABEL_59:
    __break(1u);
LABEL_60:
    uint64_t result = sub_181C23710(result, v6, v5);
    goto LABEL_7;
  }

  uint64_t v9 = sub_181C24ED8(v3, v32, *((unint64_t *)&v32 + 1));
  *(void *)(v1 + 56) = v9;
  uint64_t result = sub_181C24F68(v9, v6, v5);
  uint64_t v10 = (v6 >> 59) & 1;
  if ((v5 & 0x1000000000000000LL) == 0) {
    LOBYTE(v10) = 1;
  }
  if ((result & 0xC) == 4LL << v10) {
    goto LABEL_60;
  }
LABEL_7:
  uint64_t v11 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000LL) == 0) {
    uint64_t v11 = v6 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v12 = result >> 16;
  if (result >> 16 >= v11)
  {
    __break(1u);
  }

  else if ((v5 & 0x1000000000000000LL) == 0)
  {
    if ((v5 & 0x2000000000000000LL) != 0)
    {
      uint64_t v28 = v6;
      uint64_t v29 = v5 & 0xFFFFFFFFFFFFFFLL;
      char v14 = *((_BYTE *)&v28 + v12);
    }

    else
    {
      if ((v6 & 0x1000000000000000LL) != 0) {
        uint64_t v13 = (v5 & 0xFFFFFFFFFFFFFFFLL) + 32;
      }
      else {
        uint64_t v13 = sub_18264F228();
      }
      char v14 = *(_BYTE *)(v13 + v12);
    }

    goto LABEL_52;
  }

  char v14 = sub_18264EBC8();
LABEL_52:
  uint64_t v31 = v14;
  v2(&v28, &v31);
  unint64_t v27 = 0;
  uint64_t v16 = v28;
  return v16 | (v27 << 8);
}

unint64_t sub_181C24928()
{
  void (*v14)(uint64_t *__return_ptr, void *);
  void v15[2];
  uint64_t v16;
  unint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  if ((v2 & 0x2000000000000000LL) != 0) {
    unint64_t v3 = HIBYTE(v2) & 0xF;
  }
  else {
    unint64_t v3 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v4 = (v1 >> 59) & 1;
  if ((v2 & 0x1000000000000000LL) == 0) {
    LODWORD(v4) = 1;
  }
  uint64_t v5 = 11LL;
  if ((_DWORD)v4) {
    uint64_t v5 = 7LL;
  }
  unint64_t v6 = v5 | (v3 << 16);
  if (!v3) {
    return v6;
  }
  uint64_t v7 = (uint64_t (*)(uint64_t *))v0[4];
  uint64_t v8 = 4LL << v4;
  char v14 = (void (*)(uint64_t *__return_ptr, void *))v0[2];
  while (1)
  {
    unint64_t result = v6;
    if ((v6 & 0xC) == v8)
    {
      unint64_t result = sub_181C23710(v6, v1, v2);
      if (result < 0x4000) {
        goto LABEL_40;
      }
    }

    else if (v6 < 0x4000)
    {
      goto LABEL_40;
    }

    if ((v2 & 0x1000000000000000LL) != 0)
    {
      if (v3 < result >> 16) {
        goto LABEL_42;
      }
      unint64_t result = sub_18264EBA4();
    }

    else
    {
      unint64_t result = (result & 0xFFFFFFFFFFFF0000LL) - 65532;
    }

    if ((result & 0xC) == v8) {
      unint64_t result = sub_181C23710(result, v1, v2);
    }
    unint64_t v10 = result >> 16;
    if (result >> 16 >= v3) {
      break;
    }
    if ((v2 & 0x1000000000000000LL) != 0)
    {
      char v12 = sub_18264EBC8();
    }

    else if ((v2 & 0x2000000000000000LL) != 0)
    {
      v15[0] = v1;
      v15[1] = v2 & 0xFFFFFFFFFFFFFFLL;
      char v12 = *((_BYTE *)v15 + v10);
    }

    else
    {
      uint64_t v11 = (v2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v1 & 0x1000000000000000LL) == 0) {
        uint64_t v11 = sub_18264F228();
      }
      char v12 = *(_BYTE *)(v11 + v10);
    }

    LOBYTE(v15[0]) = v12;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v14(&v16, v15);
    swift_release();
    swift_bridgeObjectRelease();
    char v13 = v7(&v16);
    unint64_t result = swift_release();
    if ((v13 & 1) == 0) {
      return v6;
    }
    if ((v6 & 0xC) == v8)
    {
      unint64_t result = sub_181C23710(v6, v1, v2);
      unint64_t v6 = result;
      if (result < 0x4000) {
        goto LABEL_41;
      }
    }

    else if (v6 < 0x4000)
    {
      goto LABEL_41;
    }

    if ((v2 & 0x1000000000000000LL) != 0)
    {
      if (v3 < v6 >> 16) {
        goto LABEL_43;
      }
      unint64_t v6 = sub_18264EBA4();
      if (v6 < 0x4000) {
        return v6;
      }
    }

    else
    {
      unint64_t v6 = (v6 & 0xFFFFFFFFFFFF0000LL) - 65532;
      if (v6 < 0x4000) {
        return v6;
      }
    }
  }

  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_181C24B78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_181C1DA34();
  uint64_t result = sub_181C1DA34();
  uint64_t v6 = result;
  if (*(void *)(v4 + 16) == *(void *)(result + 16))
  {
    int64_t v7 = 0LL;
    uint64_t v38 = v4 + 64;
    uint64_t v8 = 1LL << *(_BYTE *)(v4 + 32);
    uint64_t v9 = -1LL;
    if (v8 < 64) {
      uint64_t v9 = ~(-1LL << v8);
    }
    unint64_t v10 = v9 & *(void *)(v4 + 64);
    uint64_t v44 = a1 + 16;
    uint64_t v11 = a2 + 16;
    int64_t v39 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v40 = result;
    uint64_t v41 = v4;
    while (1)
    {
      if (v10)
      {
        unint64_t v12 = __clz(__rbit64(v10));
        uint64_t v13 = (v10 - 1) & v10;
        unint64_t v14 = v12 | (v7 << 6);
        if (!*(void *)(v6 + 16)) {
          goto LABEL_51;
        }
      }

      else
      {
        int64_t v15 = v7 + 1;
        if (__OFADD__(v7, 1LL)) {
          goto LABEL_56;
        }
        if (v15 >= v39)
        {
LABEL_53:
          swift_bridgeObjectRelease();
          swift_release();
          return 1LL;
        }

        unint64_t v16 = *(void *)(v38 + 8 * v15);
        ++v7;
        if (!v16)
        {
          int64_t v7 = v15 + 1;
          if (v15 + 1 >= v39) {
            goto LABEL_53;
          }
          unint64_t v16 = *(void *)(v38 + 8 * v7);
          if (!v16)
          {
            int64_t v7 = v15 + 2;
            if (v15 + 2 >= v39) {
              goto LABEL_53;
            }
            unint64_t v16 = *(void *)(v38 + 8 * v7);
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v39) {
                goto LABEL_53;
              }
              unint64_t v16 = *(void *)(v38 + 8 * v17);
              if (!v16)
              {
                while (1)
                {
                  int64_t v7 = v17 + 1;
                  if (__OFADD__(v17, 1LL)) {
                    goto LABEL_57;
                  }
                  if (v7 >= v39) {
                    goto LABEL_53;
                  }
                  unint64_t v16 = *(void *)(v38 + 8 * v7);
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }

              int64_t v7 = v17;
            }
          }
        }

unint64_t sub_181C24ED8(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000LL) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4LL << v5)
  {
    uint64_t result = sub_181C23710(result, a2, a3);
    if ((a3 & 0x1000000000000000LL) == 0) {
      return (result & 0xFFFFFFFFFFFF0000LL) + 65540;
    }
  }

  else if ((a3 & 0x1000000000000000LL) == 0)
  {
    return (result & 0xFFFFFFFFFFFF0000LL) + 65540;
  }

  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 > result >> 16) {
    return sub_18264EB98();
  }
  __break(1u);
  return result;
}

unint64_t sub_181C24F68(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000LL) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) != 4LL << v5)
  {
    if (result >= 0x4000) {
      goto LABEL_5;
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  uint64_t result = sub_181C23710(result, a2, a3);
  if (result < 0x4000) {
    goto LABEL_8;
  }
LABEL_5:
  if ((a3 & 0x1000000000000000LL) == 0) {
    return (result & 0xFFFFFFFFFFFF0000LL) - 65532;
  }
LABEL_9:
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 >= result >> 16) {
    return sub_18264EBA4();
  }
  __break(1u);
  return result;
}

uint64_t sub_181C25008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *uint64_t v4 = (uint64_t)sub_181C1DF54();
    swift_release();
  }

  uint64_t v8 = sub_181C1DA34();
  if (!*(void *)(v8 + 16)) {
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_181C8C01C(a3, a4);
  if ((v10 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_15:
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }

  unint64_t v11 = *(unsigned __int16 *)(*(void *)(v8 + 56) + 4 * v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((_DWORD)v11 != 0xFFFF)
  {
    unint64_t v12 = (void *)MEMORY[0x18961AFE8];
    while (1)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v12 = sub_181BC4FD8(0LL, v12[2] + 1LL, 1, v12);
      }
      unint64_t v14 = v12[2];
      unint64_t v13 = v12[3];
      if (v14 >= v13 >> 1) {
        unint64_t v12 = sub_181BC4FD8((void *)(v13 > 1), v14 + 1, 1, v12);
      }
      v12[2] = v14 + 1;
      v12[v14 + 4] = v11;
      uint64_t v15 = *v5;
      uint64_t result = swift_beginAccess();
      uint64_t v17 = *(void *)(v15 + 16);
      if (*(void *)(v17 + 16) <= v11) {
        break;
      }
      unint64_t v11 = *(unsigned __int16 *)(v17 + (v11 << 6) + 88);
      if ((_DWORD)v11 == 0xFFFF) {
        goto LABEL_17;
      }
    }

    __break(1u);
    return result;
  }

unint64_t sub_181C251EC()
{
  unint64_t result = qword_18C58CDF0;
  if (!qword_18C58CDF0)
  {
    unint64_t result = MEMORY[0x186E12084](MEMORY[0x189617FE0], MEMORY[0x189617FA8]);
    atomic_store(result, (unint64_t *)&qword_18C58CDF0);
  }

  return result;
}

uint64_t sub_181C25234@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_181C1ECDC(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t sub_181C25244@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_181C202B8(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

unint64_t sub_181C25280()
{
  unint64_t result = qword_18C58CE00;
  if (!qword_18C58CE00)
  {
    unint64_t result = MEMORY[0x186E12084](&protocol conformance descriptor for HTTPFields, &type metadata for HTTPFields);
    atomic_store(result, (unint64_t *)&qword_18C58CE00);
  }

  return result;
}

unint64_t sub_181C252C4()
{
  unint64_t result = qword_18C58CE08;
  if (!qword_18C58CE08)
  {
    unint64_t result = MEMORY[0x186E12084](&protocol conformance descriptor for HTTPField, &type metadata for HTTPField);
    atomic_store(result, (unint64_t *)&qword_18C58CE08);
  }

  return result;
}

unint64_t sub_181C25308()
{
  unint64_t result = qword_18C58CE10;
  if (!qword_18C58CE10)
  {
    unint64_t result = MEMORY[0x186E12084](&protocol conformance descriptor for HTTPField, &type metadata for HTTPField);
    atomic_store(result, (unint64_t *)&qword_18C58CE10);
  }

  return result;
}

unint64_t sub_181C25350()
{
  unint64_t result = qword_18C58CE18;
  if (!qword_18C58CE18)
  {
    unint64_t result = MEMORY[0x186E12084](&protocol conformance descriptor for HTTPFields, &type metadata for HTTPFields);
    atomic_store(result, (unint64_t *)&qword_18C58CE18);
  }

  return result;
}

unint64_t sub_181C25398()
{
  unint64_t result = qword_18C58CE20;
  if (!qword_18C58CE20)
  {
    unint64_t result = MEMORY[0x186E12084](&protocol conformance descriptor for HTTPFields, &type metadata for HTTPFields);
    atomic_store(result, (unint64_t *)&qword_18C58CE20);
  }

  return result;
}

uint64_t sub_181C253DC()
{
  return sub_181C256A8(&qword_18C58CE28, (uint64_t (*)(void))sub_181C25408, MEMORY[0x18961A5F0]);
}

unint64_t sub_181C25408()
{
  unint64_t result = qword_18C58CE38;
  if (!qword_18C58CE38)
  {
    unint64_t result = MEMORY[0x186E12084](&protocol conformance descriptor for HTTPFields, &type metadata for HTTPFields);
    atomic_store(result, (unint64_t *)&qword_18C58CE38);
  }

  return result;
}

unint64_t sub_181C25450()
{
  unint64_t result = qword_18C58CE40;
  if (!qword_18C58CE40)
  {
    unint64_t result = MEMORY[0x186E12084](&protocol conformance descriptor for HTTPFields, &type metadata for HTTPFields);
    atomic_store(result, (unint64_t *)&qword_18C58CE40);
  }

  return result;
}

uint64_t sub_181C25494()
{
  return sub_181C25610(&qword_18C58CE48, MEMORY[0x189618A58]);
}

uint64_t sub_181C254B8()
{
  return sub_181C256A8(&qword_18C58CE58, (uint64_t (*)(void))sub_181C254E4, MEMORY[0x18961A5E0]);
}

unint64_t sub_181C254E4()
{
  unint64_t result = qword_18C58CE60;
  if (!qword_18C58CE60)
  {
    unint64_t result = MEMORY[0x186E12084](&protocol conformance descriptor for HTTPFields, &type metadata for HTTPFields);
    atomic_store(result, (unint64_t *)&qword_18C58CE60);
  }

  return result;
}

uint64_t sub_181C25528()
{
  return sub_181C256A8(&qword_18C58CE68, (uint64_t (*)(void))sub_181C25554, MEMORY[0x18961A5D0]);
}

unint64_t sub_181C25554()
{
  unint64_t result = qword_18C58CE70;
  if (!qword_18C58CE70)
  {
    unint64_t result = MEMORY[0x186E12084](&protocol conformance descriptor for HTTPFields, &type metadata for HTTPFields);
    atomic_store(result, (unint64_t *)&qword_18C58CE70);
  }

  return result;
}

uint64_t sub_181C2559C()
{
  return sub_181C25610(&qword_18C58CE78, MEMORY[0x189618A60]);
}

uint64_t sub_181C255C0()
{
  return sub_181C02894(&qword_18C58CE80, &qword_18C58CE30, MEMORY[0x18961A5E8]);
}

uint64_t sub_181C255EC()
{
  return sub_181C25610(&qword_18C58CE88, MEMORY[0x189618A40]);
}

uint64_t sub_181C25610(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C58CE50);
    unint64_t v6 = sub_181BC64F8();
    v7[0] = MEMORY[0x189618780];
    v7[1] = v6;
    uint64_t result = MEMORY[0x186E12084](a2, v5, v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_181C2567C()
{
  return sub_181C256A8(&qword_18C58CE90, (uint64_t (*)(void))sub_181C25450, MEMORY[0x18961A5C8]);
}

uint64_t sub_181C256A8(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C58CE30);
    uint64_t v8 = a2();
    uint64_t result = MEMORY[0x186E12084](a3, v7, &v8);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_181C25710()
{
  return sub_181C02894(&qword_18C58CE98, &qword_18C58CEA0, MEMORY[0x189619678]);
}

uint64_t sub_181C2573C@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  __int128 v4 = *a2;
  uint64_t v5 = *((void *)a2 + 2);
  uint64_t v6 = *((void *)a2 + 3);
  uint64_t v12 = *a1;
  __int128 v9 = v4;
  uint64_t v10 = v5;
  uint64_t v11 = v6;
  uint64_t result = HTTPFields.subscript.getter((uint64_t)&v9);
  *a3 = result;
  a3[1] = v8;
  return result;
}

uint64_t sub_181C2578C()
{
  return 0LL;
}

uint64_t sub_181C2579C@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  return keypath_get_12Tm(a1, a2, (uint64_t (*)(__int128 *))HTTPFields.subscript.getter, a3);
}

uint64_t sub_181C257AC()
{
  return 0LL;
}

uint64_t sub_181C257BC@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  return keypath_get_12Tm(a1, a2, (uint64_t (*)(__int128 *))HTTPFields.subscript.getter, a3);
}

uint64_t keypath_get_12Tm@<X0>( uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t (*a3)(__int128 *)@<X3>, uint64_t *a4@<X8>)
{
  __int128 v5 = *a2;
  uint64_t v6 = *((void *)a2 + 2);
  uint64_t v7 = *((void *)a2 + 3);
  uint64_t v12 = *a1;
  __int128 v9 = v5;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  uint64_t result = a3(&v9);
  *a4 = result;
  return result;
}

uint64_t sub_181C25818()
{
  return 0LL;
}

uint64_t sub_181C25830()
{
  return 0LL;
}

ValueMetadata *type metadata accessor for HTTPFields()
{
  return &type metadata for HTTPFields;
}

uint64_t __swift_memcpy10_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(void *)uint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for HTTPFields.HTTPFieldSequence()
{
  return &type metadata for HTTPFields.HTTPFieldSequence;
}

unint64_t sub_181C25884()
{
  unint64_t result = qword_18C58CEA8;
  if (!qword_18C58CEA8)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_1826602CC, &type metadata for HTTPFields.HTTPFieldSequence.Iterator);
    atomic_store(result, (unint64_t *)&qword_18C58CEA8);
  }

  return result;
}

unint64_t sub_181C258CC()
{
  unint64_t result = qword_18C58CEB0;
  if (!qword_18C58CEB0)
  {
    uint64_t v1 = type metadata accessor for HTTPFields._Storage();
    unint64_t result = MEMORY[0x186E12084](&unk_1826602FC, v1);
    atomic_store(result, (unint64_t *)&qword_18C58CEB0);
  }

  return result;
}

uint64_t objectdestroyTm()
{
  return swift_deallocObject();
}

uint64_t sub_181C25944(uint64_t a1)
{
  uint64_t v2 = v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t *v1 = (uint64_t)sub_181C1DF54();
    swift_release();
  }

  uint64_t v4 = *v1;
  uint64_t result = swift_beginAccess();
  if (*(void *)(*(void *)(v4 + 16) + 16LL) != a1)
  {
    swift_beginAccess();
    *(void *)(v4 + 24) = 0LL;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    sub_181BF948C(a1);
    swift_endAccess();
    uint64_t v6 = *v2;
    uint64_t result = swift_beginAccess();
    if (*(void *)(*(void *)(v6 + 16) + 16LL) > 0xFFFEuLL) {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_181C25A44(uint64_t a1)
{
  return a1;
}

uint64_t sub_181C25A78(uint64_t a1)
{
  return a1;
}

uint64_t sub_181C25AAC()
{
  return swift_deallocObject();
}

unint64_t sub_181C25ABC()
{
  return sub_181C1DEAC(*(void *)(v0 + 16));
}

uint64_t sub_181C25AC4()
{
  return swift_deallocObject();
}

uint64_t sub_181C25AD8()
{
  return swift_deallocObject();
}

uint64_t sub_181C25AE8()
{
  return *(unsigned __int16 *)(v0 + 16);
}

uint64_t sub_181C25AF0()
{
  return swift_deallocObject();
}

uint64_t sub_181C25B00@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for HTTPFields.HTTPFieldSequence.Iterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s7Network10HTTPFieldsV17HTTPFieldSequenceVwca_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for HTTPFields.HTTPFieldSequence.Iterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  return a1;
}

uint64_t _s7Network10HTTPFieldsV17HTTPFieldSequenceVwet_0(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 10)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t sub_181C25C2C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 10) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 10) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for HTTPFields.HTTPFieldSequence.Iterator()
{
  return &type metadata for HTTPFields.HTTPFieldSequence.Iterator;
}

uint64_t sub_181C25C94()
{
  nw_protocol_definition_t v0 = nw_protocol_copy_ip_definition();
  type metadata accessor for NWProtocolDefinition();
  uint64_t v1 = (void *)swift_allocObject();
  v1[4] = v0;
  id v2 = objc_msgSend((id)swift_unknownObjectRetain(), sel_description);
  uint64_t v3 = sub_18264EA48();
  uint64_t v5 = v4;

  uint64_t result = swift_unknownObjectRelease();
  v1[2] = v3;
  v1[3] = v5;
  qword_18C58CEB8 = (uint64_t)v1;
  return result;
}

uint64_t static NWProtocolIP.definition.getter()
{
  if (qword_18C58B1A8 != -1) {
    swift_once();
  }
  return swift_retain();
}

void sub_181C25D68(char *a1)
{
}

uint64_t sub_181C25D80@<X0>(char *a1@<X8>)
{
  uint64_t result = nw_ip_options_get_version(*(void **)(v1 + 16));
  char v4 = 2 * ((_DWORD)result == 6);
  if ((_DWORD)result == 4) {
    char v4 = 1;
  }
  *a1 = v4;
  return result;
}

void (*sub_181C25DBC(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)a1 = v3;
  int version = nw_ip_options_get_version(v3);
  char v5 = 2 * (version == 6);
  if (version == 4) {
    char v5 = 1;
  }
  *(_BYTE *)(a1 + 8) = v5;
  return sub_181C25E08;
}

void sub_181C25E08(uint64_t a1)
{
}

void sub_181C25E20(uint8_t a1)
{
}

uint64_t sub_181C25E30()
{
  return nw_ip_options_get_hop_limit(*(void **)(v0 + 16));
}

void (*sub_181C25E48(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = nw_ip_options_get_hop_limit(v3);
  return sub_181C25E80;
}

void sub_181C25E80(uint64_t a1)
{
}

void sub_181C25E90(char a1)
{
}

BOOL sub_181C25EA0()
{
  return nw_ip_options_get_use_minimum_mtu(*(void **)(v0 + 16));
}

void (*sub_181C25EB8(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = nw_ip_options_get_use_minimum_mtu(v3);
  return sub_181C25EF0;
}

void sub_181C25EF0(uint64_t a1)
{
}

void sub_181C25F00(char a1)
{
}

BOOL sub_181C25F10()
{
  return nw_ip_options_get_fragmentation_value(*(void **)(v0 + 16)) == 1;
}

void (*sub_181C25F30(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = nw_ip_options_get_fragmentation_value(v3) == 1;
  return sub_181C25F70;
}

void sub_181C25F70(uint64_t a1)
{
}

void sub_181C25F80(char a1)
{
}

BOOL sub_181C25F90()
{
  return nw_ip_options_get_calculate_receive_time(*(void **)(v0 + 16));
}

void (*sub_181C25FA8(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = nw_ip_options_get_calculate_receive_time(v3);
  return sub_181C25FE0;
}

void sub_181C25FE0(uint64_t a1)
{
}

void sub_181C25FF4(unsigned __int8 *a1)
{
}

uint64_t sub_181C26000@<X0>(char *a1@<X8>)
{
  uint64_t result = nw_ip_options_get_local_address_preference(*(void **)(v1 + 16));
  char v4 = 2 * ((_DWORD)result == 2);
  if ((_DWORD)result == 1) {
    char v4 = 1;
  }
  *a1 = v4;
  return result;
}

uint64_t (*sub_181C2603C(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)a1 = v3;
  int local_address_preference = nw_ip_options_get_local_address_preference(v3);
  char v5 = 2 * (local_address_preference == 2);
  if (local_address_preference == 1) {
    char v5 = 1;
  }
  *(_BYTE *)(a1 + 8) = v5;
  return sub_181C26088;
}

uint64_t sub_181C26088(uint64_t a1, uint64_t a2)
{
  return sub_181C26330(a1, a2, (uint64_t (*)(void, void))nw_ip_options_set_local_address_preference);
}

void sub_181C26094(char a1)
{
}

BOOL sub_181C260A4()
{
  return nw_ip_options_get_disable_multicast_loopback(*(void **)(v0 + 16));
}

void (*sub_181C260BC(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = nw_ip_options_get_disable_multicast_loopback(v3);
  return sub_181C260F4;
}

void sub_181C260F4(uint64_t a1)
{
}

BOOL sub_181C26104(nw_protocol_options *a1)
{
  uint64_t v1 = nw_protocol_options_copy_definition(a1);
  id v2 = nw_protocol_copy_ip_definition();
  BOOL is_equal = nw_protocol_definition_is_equal(v1, v2);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return is_equal;
}

uint64_t NWProtocolIP.Options.deinit()
{
  return v0;
}

BOOL static NWProtocolIP.ECN.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t NWProtocolIP.ECN.hash(into:)()
{
  return sub_18264F654();
}

void sub_181C261B8(char *a1, uint64_t a2)
{
}

void sub_181C261D4(char *a1)
{
}

uint64_t sub_181C261EC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = nw_ip_metadata_get_ecn_flag(*(nw_protocol_metadata_t *)(v1 + 16));
  unsigned int v4 = 0x3010200u >> (8 * result);
  *a1 = v4;
  return result;
}

void (*sub_181C2622C(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = *(nw_protocol_metadata **)(v1 + 16);
  *(void *)a1 = v3;
  nw_ip_ecn_flag_t ecn_flag = nw_ip_metadata_get_ecn_flag(v3);
  unsigned int v5 = 0x3010200u >> (8 * ecn_flag);
  if (ecn_flag >= 4) {
    LOBYTE(v5) = 0;
  }
  *(_BYTE *)(a1 + 8) = v5;
  return sub_181C2627C;
}

void sub_181C2627C(uint64_t a1)
{
}

void sub_181C26294(unsigned __int8 *a1, uint64_t a2)
{
}

void sub_181C262A8(unsigned __int8 *a1)
{
}

uint64_t sub_181C262B4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = nw_ip_metadata_get_service_class(*(nw_protocol_metadata_t *)(v1 + 16));
  else {
    char v4 = result;
  }
  *a1 = v4;
  return result;
}

uint64_t (*sub_181C262E4(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(nw_protocol_metadata **)(v1 + 16);
  *(void *)a1 = v3;
  nw_service_class_t service_class = nw_ip_metadata_get_service_class(v3);
  else {
    char v5 = service_class;
  }
  *(_BYTE *)(a1 + 8) = v5;
  return sub_181C26324;
}

uint64_t sub_181C26324(uint64_t a1, uint64_t a2)
{
  return sub_181C26330(a1, a2, (uint64_t (*)(void, void))nw_ip_metadata_set_service_class);
}

uint64_t sub_181C26330(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void))
{
  return a3(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_181C2633C()
{
  return nw_ip_metadata_get_receive_time(*(nw_protocol_metadata_t *)(v0 + 16));
}

BOOL sub_181C26344(nw_protocol_metadata *a1)
{
  return nw_protocol_metadata_is_ip(a1);
}

uint64_t NWProtocolIP.Metadata.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = nw_ip_create_metadata();
  return v0;
}

uint64_t NWProtocolIP.Metadata.init()()
{
  *(void *)(v0 + 16) = nw_ip_create_metadata();
  return v0;
}

uint64_t NWProtocolIP.deinit()
{
  return v0;
}

uint64_t NWProtocolIP.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

unint64_t sub_181C263CC()
{
  unint64_t result = qword_18C58CEC0;
  if (!qword_18C58CEC0)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWProtocolIP.Options.Version,  &type metadata for NWProtocolIP.Options.Version);
    atomic_store(result, (unint64_t *)&qword_18C58CEC0);
  }

  return result;
}

unint64_t sub_181C26414()
{
  unint64_t result = qword_18C58CEC8;
  if (!qword_18C58CEC8)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWProtocolIP.Options.AddressPreference,  &type metadata for NWProtocolIP.Options.AddressPreference);
    atomic_store(result, (unint64_t *)&qword_18C58CEC8);
  }

  return result;
}

unint64_t sub_181C2645C()
{
  unint64_t result = qword_18C58CED0;
  if (!qword_18C58CED0)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWProtocolIP.ECN,  &type metadata for NWProtocolIP.ECN);
    atomic_store(result, (unint64_t *)&qword_18C58CED0);
  }

  return result;
}

uint64_t sub_181C264A0@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t result = nw_ip_options_get_version(*(void **)(*(void *)a1 + 16LL));
  char v4 = 2 * ((_DWORD)result == 6);
  if ((_DWORD)result == 4) {
    char v4 = 1;
  }
  *a2 = v4;
  return result;
}

void sub_181C264E0(char *a1, uint64_t a2)
{
}

uint64_t sub_181C264FC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = nw_ip_options_get_hop_limit(*(void **)(*(void *)a1 + 16LL));
  *a2 = result;
  return result;
}

void sub_181C26528(uint8_t *a1, uint64_t a2)
{
}

BOOL sub_181C2653C@<W0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = nw_ip_options_get_use_minimum_mtu(*(void **)(*(void *)a1 + 16LL));
  *a2 = result;
  return result;
}

void sub_181C26568(BOOL *a1, uint64_t a2)
{
}

uint64_t sub_181C2657C@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t result = nw_ip_options_get_fragmentation_value(*(void **)(*(void *)a1 + 16LL));
  *a2 = (_DWORD)result == 1;
  return result;
}

void sub_181C265B0(BOOL *a1, uint64_t a2)
{
}

BOOL sub_181C265C4@<W0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = nw_ip_options_get_calculate_receive_time(*(void **)(*(void *)a1 + 16LL));
  *a2 = result;
  return result;
}

void sub_181C265F0(BOOL *a1, uint64_t a2)
{
}

uint64_t sub_181C26604@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t result = nw_ip_options_get_local_address_preference(*(void **)(*(void *)a1 + 16LL));
  char v4 = 2 * ((_DWORD)result == 2);
  if ((_DWORD)result == 1) {
    char v4 = 1;
  }
  *a2 = v4;
  return result;
}

void sub_181C26644(unsigned __int8 *a1, uint64_t a2)
{
}

BOOL sub_181C26658@<W0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = nw_ip_options_get_disable_multicast_loopback(*(void **)(*(void *)a1 + 16LL));
  *a2 = result;
  return result;
}

void sub_181C26684(BOOL *a1, uint64_t a2)
{
}

uint64_t sub_181C26698@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_181C261EC(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_181C266D4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_181C262B4(&v3);
  *a1 = v3;
  return result;
}

uint64_t type metadata accessor for NWProtocolIP()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for NWProtocolIP.Options()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolIP.Options()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWProtocolIP.Options.version.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104LL))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.version.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112LL))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.version.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120LL))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.hopLimit.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128LL))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.hopLimit.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136LL))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.hopLimit.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144LL))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.useMinimumMTU.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152LL))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.useMinimumMTU.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160LL))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.useMinimumMTU.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168LL))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.disableFragmentation.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176LL))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.disableFragmentation.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184LL))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.disableFragmentation.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192LL))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.shouldCalculateReceiveTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200LL))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.shouldCalculateReceiveTime.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208LL))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.shouldCalculateReceiveTime.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216LL))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.localAddressPreference.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224LL))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.localAddressPreference.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232LL))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.localAddressPreference.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240LL))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.disableMulticastLoopback.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248LL))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.disableMulticastLoopback.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256LL))();
}

uint64_t dispatch thunk of NWProtocolIP.Options.disableMulticastLoopback.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264LL))();
}

ValueMetadata *type metadata accessor for NWProtocolIP.Options.Version()
{
  return &type metadata for NWProtocolIP.Options.Version;
}

uint64_t _s7Network12NWProtocolIPC7OptionsC7VersionOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_181C268B8 + 4 * byte_182660375[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_181C268EC + 4 * asc_182660370[v4]))();
}

uint64_t sub_181C268EC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C268F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181C268FCLL);
  }
  return result;
}

uint64_t sub_181C26908(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181C26910LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_181C26914(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C2691C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWProtocolIP.Options.AddressPreference()
{
  return &type metadata for NWProtocolIP.Options.AddressPreference;
}

uint64_t getEnumTagSinglePayload for NWProtocolIP.ECN(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

uint64_t storeEnumTagSinglePayload for NWProtocolIP.ECN(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_181C26A14 + 4 * byte_18266037F[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_181C26A48 + 4 * byte_18266037A[v4]))();
}

uint64_t sub_181C26A48(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C26A50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181C26A58LL);
  }
  return result;
}

uint64_t sub_181C26A64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181C26A6CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_181C26A70(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C26A78(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWProtocolIP.ECN()
{
  return &type metadata for NWProtocolIP.ECN;
}

uint64_t type metadata accessor for NWProtocolIP.Metadata()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolIP.Metadata()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWProtocolIP.Metadata.serviceClass.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128LL))();
}

uint64_t dispatch thunk of NWProtocolIP.Metadata.serviceClass.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136LL))();
}

uint64_t dispatch thunk of NWProtocolIP.Metadata.receiveTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152LL))();
}

uint64_t dispatch thunk of NWProtocolIP.Metadata.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t _s22RemoteCallReplyMetricsVwet(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _s22RemoteCallReplyMetricsVwst(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_BYTE *)(result + 32) = 0;
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 33) = v3;
  return result;
}

ValueMetadata *_s22RemoteCallReplyMetricsVMa()
{
  return &_s22RemoteCallReplyMetricsVN;
}

unint64_t sub_181C26B70()
{
  __int16 v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C400);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18265BE50;
  *(void *)(inited + 32) = 0xD00000000000001ALL;
  *(void *)(inited + 40) = 0x800000018272F2D0LL;
  uint64_t v4 = (uint64_t)(v0 + 1);
  uint64_t v3 = *v0;
  uint64_t v5 = MEMORY[0x189618740];
  *(void *)(inited + 72) = MEMORY[0x189618740];
  *(void *)(inited + 48) = v3;
  unint64_t v6 = sub_181C883B0(inited);
  sub_181BE625C(v4, (uint64_t)v17, &qword_18C58CF08);
  sub_181BE625C((uint64_t)v17, (uint64_t)&v18, &qword_18C58CF08);
  if ((v19 & 1) == 0)
  {
    uint64_t v15 = v5;
    *(void *)&__int128 v14 = v18;
    sub_181C275FC(&v14, v13);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v16 = v6;
    sub_181C90410(v13, 0xD00000000000001ALL, 0x800000018272F2F0LL, isUniquelyReferenced_nonNull_native);
    unint64_t v6 = v16;
    swift_bridgeObjectRelease();
  }

  sub_181BE625C((uint64_t)(v1 + 3), (uint64_t)v13, &qword_18C58CEF8);
  sub_181BE625C((uint64_t)v13, (uint64_t)&v14, &qword_18C58CEF8);
  if ((BYTE8(v14) & 1) == 0)
  {
    uint64_t v8 = v14;
    uint64_t v9 = swift_initStackObject();
    *(_OWORD *)(v9 + 16) = xmmword_18265BE50;
    *(void *)(v9 + 32) = 0xD000000000000013LL;
    *(void *)(v9 + 40) = 0x800000018272ECB0LL;
    *(void *)(v9 + 72) = MEMORY[0x18961A4C0];
    *(void *)(v9 + 48) = v8;
    unint64_t v10 = sub_181C883B0(v9);
    char v11 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v16 = v6;
    sub_181C2702C(v10, (uint64_t)sub_181C27B5C, 0LL, v11, (uint64_t)&v16);
    unint64_t v6 = v16;
    swift_bridgeObjectRelease();
  }

  return v6;
}

uint64_t sub_181C26D5C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CEF0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_181C27530();
  sub_18264F714();
  v11[0] = 0;
  sub_18264F450();
  if (!v2)
  {
    v11[0] = 1;
    sub_18264F42C();
    sub_181BE625C(v3 + 24, (uint64_t)v12, &qword_18C58CEF8);
    sub_181BE625C((uint64_t)v12, (uint64_t)v11, &qword_18C58CEF8);
    v10[15] = 2;
    sub_181C275B8();
    sub_18264F438();
  }

  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_181C26ED4()
{
  unint64_t v1 = 0x654D65746F6D6572LL;
  if (*v0 == 1) {
    unint64_t v1 = 0xD00000000000001ALL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD00000000000001ALL;
  }
}

uint64_t sub_181C26F3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_181C277B8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_181C26F60()
{
  return sub_18264F738();
}

uint64_t sub_181C26F88()
{
  return sub_18264F744();
}

double sub_181C26FB0@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    double result = *(double *)v6;
    __int128 v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_BYTE *)(a2 + 32) = v7;
  }

  return result;
}

uint64_t sub_181C26FF4(void *a1)
{
  return sub_181C26D5C(a1);
}

uint64_t sub_181C2702C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7 = -1LL << *(_BYTE *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  uint64_t v50 = a1;
  uint64_t v51 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  else {
    uint64_t v11 = -1LL;
  }
  uint64_t v52 = v8;
  uint64_t v53 = 0LL;
  uint64_t v54 = v11 & v9;
  uint64_t v55 = a2;
  uint64_t v56 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_181C27D30(&v48);
  uint64_t v12 = *((void *)&v48 + 1);
  if (!*((void *)&v48 + 1)) {
    goto LABEL_27;
  }
  uint64_t v13 = v48;
  sub_181C275FC(v49, v47);
  __int128 v14 = *(void **)a5;
  unint64_t v16 = sub_181C8C01C(v13, v12);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  char v20 = v15;
  if (v14[3] >= v19)
  {
    if ((a4 & 1) != 0)
    {
      if ((v15 & 1) != 0) {
        goto LABEL_12;
      }
    }

    else
    {
      sub_181C91FC0();
      if ((v20 & 1) != 0) {
        goto LABEL_12;
      }
    }

uint64_t sub_181C27380@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CED8);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_181C27530();
  sub_18264F6E4();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
  }
  char v20 = 0;
  uint64_t v9 = sub_18264F3E4();
  char v19 = 1;
  uint64_t v10 = sub_18264F3B4();
  int v17 = v11;
  char v18 = 2;
  sub_181C27574();
  sub_18264F3C0();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v12 = v15;
  char v13 = v16;
  uint64_t result = __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = v17 & 1;
  *(void *)(a2 + 24) = v12;
  *(_BYTE *)(a2 + 32) = v13;
  return result;
}

unint64_t sub_181C27530()
{
  unint64_t result = qword_18C58CEE0;
  if (!qword_18C58CEE0)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_1826606CC, &_s22RemoteCallReplyMetricsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_18C58CEE0);
  }

  return result;
}

unint64_t sub_181C27574()
{
  unint64_t result = qword_18C58CEE8;
  if (!qword_18C58CEE8)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182665564, &type metadata for ReplyEnvelope.Metrics);
    atomic_store(result, (unint64_t *)&qword_18C58CEE8);
  }

  return result;
}

unint64_t sub_181C275B8()
{
  unint64_t result = qword_18C58CF00;
  if (!qword_18C58CF00)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_18266553C, &type metadata for ReplyEnvelope.Metrics);
    atomic_store(result, (unint64_t *)&qword_18C58CF00);
  }

  return result;
}

_OWORD *sub_181C275FC(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_181C2760C()
{
  return swift_release();
}

uint64_t _s22RemoteCallReplyMetricsV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_181C27660 + 4 * byte_182660595[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_181C27694 + 4 * byte_182660590[v4]))();
}

uint64_t sub_181C27694(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C2769C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181C276A4LL);
  }
  return result;
}

uint64_t sub_181C276B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181C276B8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_181C276BC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C276C4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s22RemoteCallReplyMetricsV10CodingKeysOMa()
{
  return &_s22RemoteCallReplyMetricsV10CodingKeysON;
}

unint64_t sub_181C276E4()
{
  unint64_t result = qword_18C58CF10;
  if (!qword_18C58CF10)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_1826606A4, &_s22RemoteCallReplyMetricsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_18C58CF10);
  }

  return result;
}

unint64_t sub_181C2772C()
{
  unint64_t result = qword_18C58CF18;
  if (!qword_18C58CF18)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182660614, &_s22RemoteCallReplyMetricsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_18C58CF18);
  }

  return result;
}

unint64_t sub_181C27774()
{
  unint64_t result = qword_18C58CF20;
  if (!qword_18C58CF20)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_18266063C, &_s22RemoteCallReplyMetricsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_18C58CF20);
  }

  return result;
}

uint64_t sub_181C277B8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD00000000000001ALL && a2 == 0x800000018272F2D0LL || (sub_18264F4EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0xD00000000000001ALL && a2 == 0x800000018272F2F0LL || (sub_18264F4EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x654D65746F6D6572LL && a2 == 0xED00007363697274LL)
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else
  {
    char v5 = sub_18264F4EC();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_181C27924(uint64_t a1)
{
  *(_OWORD *)(v1 + 152) = 0u;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_WORD *)(v1 + 168) = 256;
  type metadata accessor for NWActivity();
  swift_allocObject();
  uint64_t v3 = NWActivity.init(domain:label:)(0x39uLL, 2uLL);
  *(void *)(v1 + 112) = v3;
  if (a1)
  {
    uint64_t v4 = *(void **)(v3 + 16);
    char v5 = *(void **)(a1 + 16);
    swift_retain();
    nw_activity_set_parent_activity(v4, v5);
    swift_release();
    swift_release();
  }

  else
  {
    nw_activity_set_parent_activity(*(void **)(v3 + 16), 0LL);
  }

  return v1;
}

unint64_t sub_181C279E4()
{
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18265E5A0;
  *(void *)(inited + 32) = 0xD000000000000015LL;
  *(void *)(inited + 40) = 0x800000018272F360LL;
  uint64_t v2 = MEMORY[0x189618740];
  *(void *)(inited + 48) = *(void *)(v0 + 120);
  *(void *)(inited + 72) = v2;
  *(void *)(inited + 80) = 0xD000000000000015LL;
  *(void *)(inited + 88) = 0x800000018272F380LL;
  uint64_t v3 = *(void *)(v0 + 128);
  *(void *)(inited + 120) = v2;
  *(void *)(inited + 96) = v3;
  unint64_t v4 = sub_181C883B0(inited);
  if ((*(_BYTE *)(v0 + 169) & 1) == 0)
  {
    char v5 = *(_BYTE *)(v0 + 168);
    uint64_t v6 = *(void *)(v0 + 160);
    char v7 = *(_DWORD *)(v0 + 152);
    __int128 v12 = *(_OWORD *)(v0 + 136);
    char v13 = v7 & 1;
    uint64_t v14 = v6;
    char v15 = v5 & 1;
    unint64_t v8 = sub_181C26B70();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v11 = v4;
    sub_181C2702C(v8, (uint64_t)sub_181C27B5C, 0LL, isUniquelyReferenced_nonNull_native, (uint64_t)&v11);
    unint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }

  return v4;
}

uint64_t sub_181C27B0C()
{
  return swift_defaultActor_deallocate();
}

uint64_t _s18RemoteCallActivityCMa()
{
  return objc_opt_self();
}

uint64_t sub_181C27B50()
{
  return v0;
}

uint64_t sub_181C27B5C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  sub_181BF9894((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

unint64_t sub_181C27B9C()
{
  void (*v16)(uint64_t *__return_ptr, void *);
  unint64_t v17;
  void v18[2];
  uint64_t v19;
  unint64_t v2 = v0[1];
  unint64_t v1 = v0[2];
  unint64_t v3 = *v0;
  if ((v2 & 0x2000000000000000LL) != 0) {
    unint64_t v4 = HIBYTE(v2) & 0xF;
  }
  else {
    unint64_t v4 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v5 = v1 >> 14;
  if (v1 >> 14 == 4 * v4)
  {
    int v6 = 0;
    return v6 | ((v5 == 4 * v4) << 8);
  }

  uint64_t v7 = (v3 >> 59) & 1;
  if ((v2 & 0x1000000000000000LL) == 0) {
    LOBYTE(v7) = 1;
  }
  if ((v0[2] & 0xC) == 4LL << v7) {
    unint64_t v1 = sub_181C23710(v1, *v0, v0[1]);
  }
  unint64_t v8 = v1 >> 16;
  if (v1 >> 16 >= v4)
  {
    __break(1u);
    goto LABEL_25;
  }

  if ((v2 & 0x1000000000000000LL) != 0)
  {
LABEL_25:
    char v10 = sub_18264EBC8();
    goto LABEL_17;
  }

  if ((v2 & 0x2000000000000000LL) != 0)
  {
    v18[0] = v3;
    v18[1] = v2 & 0xFFFFFFFFFFFFFFLL;
    char v10 = *((_BYTE *)v18 + v8);
  }

  else
  {
    if ((v3 & 0x1000000000000000LL) != 0) {
      uint64_t v9 = (v2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v9 = sub_18264F228();
    }
    char v10 = *(_BYTE *)(v9 + v8);
  }

uint64_t sub_181C27D30@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    uint64_t v11 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    sub_181BF9894(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(void *)&__int128 v23 = v13;
    *((void *)&v23 + 1) = v12;
    swift_bridgeObjectRetain();
    goto LABEL_23;
  }

  int64_t v14 = v5 + 1;
  if (__OFADD__(v5, 1LL))
  {
    __break(1u);
    return result;
  }

  int64_t v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    unint64_t v16 = *(void *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      uint64_t v9 = (v16 - 1) & v16;
      unint64_t v10 = __clz(__rbit64(v16)) + (v14 << 6);
      int64_t v7 = v14;
      goto LABEL_3;
    }

    int64_t v17 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      unint64_t v16 = *(void *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        int64_t v14 = v17;
        goto LABEL_7;
      }

      int64_t v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        unint64_t v16 = *(void *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          int64_t v14 = v5 + 3;
          goto LABEL_7;
        }

        int64_t v17 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          unint64_t v16 = *(void *)(v4 + 8 * v17);
          if (v16) {
            goto LABEL_10;
          }
          int64_t v14 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            unint64_t v16 = *(void *)(v4 + 8 * v14);
            if (v16) {
              goto LABEL_7;
            }
            int64_t v7 = v15 - 1;
            int64_t v18 = v5 + 6;
            while (v15 != v18)
            {
              unint64_t v16 = *(void *)(v4 + 8 * v18++);
              if (v16)
              {
                int64_t v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }

  uint64_t v9 = 0LL;
  memset(v24, 0, sizeof(v24));
  __int128 v23 = 0u;
LABEL_23:
  uint64_t *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  char v19 = (void (*)(_OWORD *))v1[5];
  uint64_t result = sub_181C27F04((uint64_t)&v23, (uint64_t)v22);
  if (*((void *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    v21[2] = v22[2];
    v19(v21);
    return sub_181C27F4C((uint64_t)v21);
  }

  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }

  return result;
}

uint64_t sub_181C27F04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CF28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_181C27F4C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58CF30);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t Listener1.__allocating_init(using:ready:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181C28994(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))Listener1.init(using:ready:));
}

void Listener1.init(using:ready:)()
{
  uint64_t v1 = v0 + qword_18C58CF40;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CF48);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
  uint64_t v3 = v0 + qword_18C58CF50;
  *(_BYTE *)(v3 + 4) = -4;
  *(_DWORD *)uint64_t v3 = 0;
  type metadata accessor for Connection1();
}

void *sub_181C28054()
{
  uint64_t v5 = sub_18264EE14();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = *(void *)(*v0 + 152LL);
  swift_checkMetadataState();
  *(void *)((char *)v0 + v6) = sub_18264E9AC();
  nw_parameters_t v7 = nw_parameters_copy(v1);
  swift_unknownObjectRelease();
  type metadata accessor for NWParameters();
  uint64_t v8 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A220);
  uint64_t v9 = swift_allocObject();
  *(_DWORD *)(v9 + 24) = 0;
  *(void *)(v9 + 16) = v7;
  *(void *)(v8 + 16) = v9;
  unsigned __int16 v16 = 0;
  type metadata accessor for NWListener();
  swift_allocObject();
  NWListener.init(using:on:)(v8, &v16);
  if (v2)
  {
    swift_release();
    sub_181C282B0(v3);
    uint64_t v11 = sub_18264F09C();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v4, v11);
    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
  }

  else
  {
    v0[2] = v10;
    uint64_t v12 = (void *)swift_allocObject();
    v12[2] = v0;
    v12[3] = v15;
    void v12[4] = v17;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_181BC904C((uint64_t)sub_181C282F4);
    NWListener.stateUpdateHandler.setter((uint64_t)sub_181C282F4, (uint64_t)v12);
    swift_release();
    swift_release();
    swift_retain();
    swift_retain();
    sub_181BC904C((uint64_t)sub_181C28320);
    NWListener.newConnectionHandler.setter((uint64_t)sub_181C28320, (uint64_t)v0);
    swift_release();
    swift_release();
    uint64_t v13 = qword_18C58B218;
    swift_retain();
    if (v13 != -1) {
      swift_once();
    }
    NWListener.start(queue:)((void *)qword_18C5A4A28);
    swift_release();
    swift_release();
  }

  return v0;
}

uint64_t sub_181C282B0(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CF60);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_181C282F4(unsigned int *a1)
{
  return sub_181C29510( a1,  *(void *)(v1 + 16),  *(uint64_t (**)(int *))(v1 + 24),  *(void *)(v1 + 32),  &qword_18C58CF40,  &qword_18C58CF50);
}

void sub_181C28320()
{
}

  ;
}

void Listener1.__allocating_init(for:using:)()
{
}

uint64_t sub_181C28378()
{
  return v0;
}

void Listener1.init(for:using:)()
{
  uint64_t v1 = v0 + qword_18C58CF40;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CF48);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
  uint64_t v3 = v0 + qword_18C58CF50;
  *(_BYTE *)(v3 + 4) = -4;
  *(_DWORD *)uint64_t v3 = 0;
  type metadata accessor for Connection1();
}

void sub_181C28464()
{
  uint64_t v6 = sub_18264EE14();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v4, 1LL, 1LL, v6);
  uint64_t v7 = *(void *)(*v0 + 152LL);
  swift_checkMetadataState();
  *(void *)((char *)v0 + v7) = sub_18264E9AC();
  nw_parameters_t v8 = nw_parameters_copy(v1);
  swift_unknownObjectRelease();
  type metadata accessor for NWParameters();
  uint64_t v9 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A220);
  uint64_t v10 = swift_allocObject();
  *(_DWORD *)(v10 + 24) = 0;
  *(void *)(v10 + 16) = v8;
  *(void *)(v9 + 16) = v10;
  unsigned __int16 v27 = 0;
  type metadata accessor for NWListener();
  swift_allocObject();
  NWListener.init(using:on:)(v9, &v27);
  if (v23)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_181BD6288(v2);
    sub_181C282B0(v3);
    uint64_t v12 = sub_18264F09C();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))(v4, v12);
    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
  }

  else
  {
    uint64_t v13 = v11;
    v0[2] = v11;
    if (v2) {
      uint64_t v14 = v24;
    }
    else {
      uint64_t v14 = 0LL;
    }
    uint64_t v15 = *(void *)(v5 - 72);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_181BD2FFC(v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_181BD6288(v2);
    v28[0] = 0LL;
    v28[1] = v22;
    void v28[2] = v25;
    v28[3] = v21;
    v28[4] = v26;
    v28[5] = v20;
    v28[6] = v15;
    v28[7] = v2;
    v28[8] = v14;
    __int128 v29 = xmmword_18265D180;
    __int16 v30 = 768;
    unsigned __int16 v16 = *(os_unfair_lock_s **)(v13 + 16);
    uint64_t v17 = (uint64_t)&v16[4];
    int64_t v18 = v16 + 48;
    char v31 = 0;
    os_unfair_lock_lock(v16 + 48);
    sub_181BFC510(v17, (uint64_t)v28, v13);
    os_unfair_lock_unlock(v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_181BD6288(v2);
    sub_181BE61C8(0LL, 0xF000000000000000LL);
    swift_release();
    swift_retain();
    swift_retain();
    sub_181BC904C((uint64_t)sub_181C2AAA0);
    NWListener.stateUpdateHandler.setter((uint64_t)sub_181C2AAA0, (uint64_t)v0);
    swift_release();
    swift_release();
    swift_retain();
    swift_retain();
    sub_181BC904C((uint64_t)sub_181C28320);
    NWListener.newConnectionHandler.setter((uint64_t)sub_181C28320, (uint64_t)v0);
    swift_release();
    swift_release();
    uint64_t v19 = qword_18C58B218;
    swift_retain();
    if (v19 != -1) {
      swift_once();
    }
    NWListener.start(queue:)((void *)qword_18C5A4A28);
    swift_release();
  }

void Listener1.connections.getter()
{
}

uint64_t Listener1.states.getter@<X0>(void *a1@<X8>)
{
  return swift_retain();
}

void Listener1.makeAsyncIterator()()
{
}

uint64_t sub_181C2884C()
{
  uint64_t v0 = sub_18264EDF0();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1895F8858](v0);
  uint64_t v3 = &v9[-v2];
  uint64_t v4 = sub_18264EE44();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = &v9[-v6];
  (*(void (**)(_BYTE *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x18961BD50], v0);
  sub_18264EE50();
  sub_18264EE20();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

void Listener1.deinit()
{
}

void Listener1.__deallocating_deinit()
{
}

void sub_181C28954()
{
}

uint64_t sub_181C28968()
{
  return swift_release();
}

uint64_t Listener2.__allocating_init(using:ready:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181C28994(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))Listener2.init(using:ready:));
}

uint64_t sub_181C28994(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = swift_allocObject();
  a4(a1, a2, a3);
  return v8;
}

void Listener2.init(using:ready:)()
{
  uint64_t v1 = v0 + qword_18C58CF68;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CF48);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
  uint64_t v3 = v0 + qword_18C58CF70;
  *(_BYTE *)(v3 + 4) = -4;
  *(_DWORD *)uint64_t v3 = 0;
  type metadata accessor for Connection1();
}

void *sub_181C28AA8()
{
  uint64_t v5 = sub_18264EE14();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = *(void *)(*v0 + 152LL);
  swift_checkMetadataState();
  *(void *)((char *)v0 + v6) = sub_18264E9AC();
  nw_parameters_t v7 = nw_parameters_copy(v1);
  swift_unknownObjectRelease();
  type metadata accessor for NWParameters();
  uint64_t v8 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A220);
  uint64_t v9 = swift_allocObject();
  *(_DWORD *)(v9 + 24) = 0;
  *(void *)(v9 + 16) = v7;
  *(void *)(v8 + 16) = v9;
  unsigned __int16 v16 = 0;
  type metadata accessor for NWListener();
  swift_allocObject();
  NWListener.init(using:on:)(v8, &v16);
  if (v2)
  {
    swift_release();
    sub_181C282B0(v3);
    uint64_t v11 = sub_18264F09C();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v4, v11);
    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
  }

  else
  {
    v0[2] = v10;
    uint64_t v12 = (void *)swift_allocObject();
    v12[2] = v0;
    v12[3] = v15;
    void v12[4] = v17;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_181BC904C((uint64_t)sub_181C2AB5C);
    NWListener.stateUpdateHandler.setter((uint64_t)sub_181C2AB5C, (uint64_t)v12);
    swift_release();
    swift_release();
    swift_retain();
    swift_retain();
    sub_181BC904C((uint64_t)sub_181C28320);
    NWListener.newConnectionHandler.setter((uint64_t)sub_181C28320, (uint64_t)v0);
    swift_release();
    swift_release();
    uint64_t v13 = qword_18C58B218;
    swift_retain();
    if (v13 != -1) {
      swift_once();
    }
    NWListener.start(queue:)((void *)qword_18C5A4A28);
    swift_release();
    swift_release();
  }

  return v0;
}

uint64_t Listener2.__allocating_init(for:using:)(uint64_t a1, uint64_t a2)
{
  return sub_181C29108(a1, a2, (void (*)(uint64_t, uint64_t))Listener2.init(for:using:));
}

void Listener2.init(for:using:)(uint64_t a1, uint64_t a2)
{
}

  ;
}

void Listener2.connections.getter()
{
}

uint64_t Listener2.states.getter@<X0>(void *a1@<X8>)
{
  return swift_retain();
}

void Listener2.deinit()
{
}

void Listener2.__deallocating_deinit()
{
}

void sub_181C28DA4(void (*a1)(void))
{
}

uint64_t Listener3.__allocating_init(for:ready:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181C28994(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))Listener3.init(for:ready:));
}

void Listener3.init(for:ready:)()
{
  uint64_t v1 = v0 + qword_18C58CF78;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CF48);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
  uint64_t v3 = v0 + qword_18C58CF80;
  *(_BYTE *)(v3 + 4) = -4;
  *(_DWORD *)uint64_t v3 = 0;
  type metadata accessor for Connection1();
}

void *sub_181C28E90()
{
  uint64_t v5 = sub_18264EE14();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = *(void *)(*v0 + 152LL);
  swift_checkMetadataState();
  *(void *)((char *)v0 + v6) = sub_18264E9AC();
  nw_parameters_t v7 = nw_parameters_copy(v1);
  swift_unknownObjectRelease();
  type metadata accessor for NWParameters();
  uint64_t v8 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A220);
  uint64_t v9 = swift_allocObject();
  *(_DWORD *)(v9 + 24) = 0;
  *(void *)(v9 + 16) = v7;
  *(void *)(v8 + 16) = v9;
  unsigned __int16 v16 = 0;
  type metadata accessor for NWListener();
  swift_allocObject();
  NWListener.init(using:on:)(v8, &v16);
  if (v2)
  {
    swift_release();
    sub_181C282B0(v3);
    uint64_t v11 = sub_18264F09C();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v4, v11);
    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
  }

  else
  {
    v0[2] = v10;
    uint64_t v12 = (void *)swift_allocObject();
    v12[2] = v0;
    v12[3] = v15;
    void v12[4] = v17;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_181BC904C((uint64_t)sub_181C2AC14);
    NWListener.stateUpdateHandler.setter((uint64_t)sub_181C2AC14, (uint64_t)v12);
    swift_release();
    swift_release();
    swift_retain();
    swift_retain();
    sub_181BC904C((uint64_t)sub_181C28320);
    NWListener.newConnectionHandler.setter((uint64_t)sub_181C28320, (uint64_t)v0);
    swift_release();
    swift_release();
    uint64_t v13 = qword_18C58B218;
    swift_retain();
    if (v13 != -1) {
      swift_once();
    }
    NWListener.start(queue:)((void *)qword_18C5A4A28);
    swift_release();
    swift_release();
  }

  return v0;
}

uint64_t Listener3.__allocating_init(on:for:)(uint64_t a1, uint64_t a2)
{
  return sub_181C29108(a1, a2, (void (*)(uint64_t, uint64_t))Listener3.init(on:for:));
}

uint64_t sub_181C29108(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v6 = swift_allocObject();
  a3(a1, a2);
  return v6;
}

void Listener3.init(on:for:)(uint64_t a1, uint64_t a2)
{
}

  ;
}

void Listener3.connections.getter()
{
}

uint64_t Listener3.states.getter@<X0>(void *a1@<X8>)
{
  return swift_retain();
}

void Listener3.deinit()
{
}

void Listener3.__deallocating_deinit()
{
}

uint64_t Listener4.__allocating_init(with:ready:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181C28994(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))Listener4.init(with:ready:));
}

void Listener4.init(with:ready:)()
{
  uint64_t v1 = v0 + qword_18C58CF88;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CF48);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
  uint64_t v3 = v0 + qword_18C58CF90;
  *(_BYTE *)(v3 + 4) = -4;
  *(_DWORD *)uint64_t v3 = 0;
  type metadata accessor for Connection1();
}

void *sub_181C292B4()
{
  uint64_t v5 = sub_18264EE14();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = *(void *)(*v0 + 152LL);
  swift_checkMetadataState();
  *(void *)((char *)v0 + v6) = sub_18264E9AC();
  nw_parameters_t v7 = nw_parameters_copy(v1);
  swift_unknownObjectRelease();
  type metadata accessor for NWParameters();
  uint64_t v8 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A220);
  uint64_t v9 = swift_allocObject();
  *(_DWORD *)(v9 + 24) = 0;
  *(void *)(v9 + 16) = v7;
  *(void *)(v8 + 16) = v9;
  unsigned __int16 v16 = 0;
  type metadata accessor for NWListener();
  swift_allocObject();
  NWListener.init(using:on:)(v8, &v16);
  if (v2)
  {
    swift_release();
    sub_181C282B0(v3);
    uint64_t v11 = sub_18264F09C();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v4, v11);
    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
  }

  else
  {
    v0[2] = v10;
    uint64_t v12 = (void *)swift_allocObject();
    v12[2] = v0;
    v12[3] = v15;
    void v12[4] = v17;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_181BC904C((uint64_t)sub_181C2ACF8);
    NWListener.stateUpdateHandler.setter((uint64_t)sub_181C2ACF8, (uint64_t)v12);
    swift_release();
    swift_release();
    swift_retain();
    swift_retain();
    sub_181BC904C((uint64_t)sub_181C28320);
    NWListener.newConnectionHandler.setter((uint64_t)sub_181C28320, (uint64_t)v0);
    swift_release();
    swift_release();
    uint64_t v13 = qword_18C58B218;
    swift_retain();
    if (v13 != -1) {
      swift_once();
    }
    NWListener.start(queue:)((void *)qword_18C5A4A28);
    swift_release();
    swift_release();
  }

  return v0;
}

uint64_t sub_181C29510( unsigned int *a1, uint64_t a2, uint64_t (*a3)(int *), uint64_t a4, void *a5, void *a6)
{
  uint64_t v23 = a6;
  uint64_t v25 = a4;
  uint64_t v26 = a3;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D1A8);
  uint64_t v9 = *(void *)(v24 - 8);
  MEMORY[0x1895F8858](v24);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CF60);
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CF48);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1895F8858](v15);
  int64_t v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v19 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
  uint64_t v20 = a2 + *a5;
  swift_beginAccess();
  sub_181C2B34C(v20, (uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15) == 1)
  {
    uint64_t result = sub_181C282B0((uint64_t)v14);
    uint64_t v22 = a2 + *v23;
    *(_BYTE *)(v22 + 4) = BYTE4(v19);
    *(_DWORD *)uint64_t v22 = v19;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
    char v28 = BYTE4(v19);
    int v27 = v19;
    sub_18264EDFC();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v24);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }

  if ((v19 & 0xFFFFFFFFFFLL) == 0x8000000001LL)
  {
    LOWORD(v27) = nw_listener_get_port(*(nw_listener_t *)(*(void *)(a2 + 16) + 24LL));
    return v26(&v27);
  }

  return result;
}

uint64_t Listener4.__allocating_init(for:with:)(uint64_t a1, uint64_t a2)
{
  return sub_181C29108(a1, a2, (void (*)(uint64_t, uint64_t))Listener4.init(for:with:));
}

void Listener4.init(for:with:)(uint64_t a1, uint64_t a2)
{
}

  ;
}

void sub_181C29760(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6 = v4 + *a3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CF48);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  uint64_t v8 = v4 + *a4;
  *(_BYTE *)(v8 + 4) = -4;
  *(_DWORD *)uint64_t v8 = 0;
  type metadata accessor for Connection1();
}

void *sub_181C29810()
{
  uint64_t v5 = sub_18264EE14();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = *(void *)(*v0 + 152LL);
  swift_checkMetadataState();
  *(void *)((char *)v0 + v6) = sub_18264E9AC();
  swift_unknownObjectRetain();
  BOOL host_with_numeric_port = nw_endpoint_create_host_with_numeric_port("::", v2);
  nw_parameters_set_local_endpoint(v1, (nw_endpoint_t)host_with_numeric_port);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  nw_parameters_t v8 = nw_parameters_copy(v1);
  swift_unknownObjectRelease();
  type metadata accessor for NWParameters();
  uint64_t v9 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A220);
  uint64_t v10 = swift_allocObject();
  *(_DWORD *)(v10 + 24) = 0;
  *(void *)(v10 + 16) = v8;
  *(void *)(v9 + 16) = v10;
  unsigned __int16 v17 = 0;
  type metadata accessor for NWListener();
  swift_allocObject();
  NWListener.init(using:on:)(v9, &v17);
  if (v3)
  {
    sub_181C282B0(v18);
    uint64_t v12 = sub_18264F09C();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))(v4, v12);
    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
  }

  else
  {
    v0[2] = v11;
    swift_retain();
    swift_retain();
    sub_181BC904C(v15);
    NWListener.stateUpdateHandler.setter(v15, (uint64_t)v0);
    swift_release();
    swift_release();
    swift_retain();
    swift_retain();
    sub_181BC904C(v16);
    NWListener.newConnectionHandler.setter(v16, (uint64_t)v0);
    swift_release();
    swift_release();
    uint64_t v13 = qword_18C58B218;
    swift_retain();
    if (v13 != -1) {
      swift_once();
    }
    NWListener.start(queue:)((void *)qword_18C5A4A28);
    swift_release();
  }

  return v0;
}

uint64_t sub_181C29A58(unsigned int *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D1A8);
  uint64_t v8 = *(void *)(v23 - 8);
  MEMORY[0x1895F8858](v23);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CF60);
  MEMORY[0x1895F8858](v11);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CF48);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  unsigned __int16 v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v18 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
  uint64_t v19 = a2 + *a3;
  swift_beginAccess();
  sub_181C2B34C(v19, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14) == 1)
  {
    uint64_t result = sub_181C282B0((uint64_t)v13);
    uint64_t v21 = a2 + *a4;
    *(_BYTE *)(v21 + 4) = BYTE4(v18);
    *(_DWORD *)uint64_t v21 = v18;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
    char v25 = BYTE4(v18);
    int v24 = v18;
    sub_18264EDFC();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v23);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }

  return result;
}

void sub_181C29C1C()
{
}

uint64_t sub_181C29C68()
{
  uint64_t v2 = sub_18264EDD8();
  *(void *)(v1 - 168) = *(void *)(v2 - 8);
  *(void *)(v1 - 160) = v2;
  MEMORY[0x1895F8858](v2);
  *(void *)(v1 - 176) = &v18[-v3];
  uint64_t v4 = sub_18264EE14();
  uint64_t v5 = sub_18264F09C();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](v5);
  uint64_t v9 = &v18[-v8];
  uint64_t v10 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v12 = &v18[-v11];
  swift_checkMetadataState();
  uint64_t v13 = swift_retain();
  uint64_t v14 = Connection1.__allocating_init(using:)(v13);
  uint64_t v15 = v0 + *(void *)(*(void *)v0 + 144LL);
  swift_beginAccess();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(v9, v15, v5);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v9, 1LL, v4) == 1)
  {
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
    *(void *)(v1 - 128) = v14;
    swift_beginAccess();
    sub_18264ED54();
    swift_retain();
    sub_18264ED3C();
    swift_endAccess();
    return swift_release();
  }

  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v12, v9, v4);
    *(void *)(v1 - 152) = v14;
    uint64_t v17 = *(void *)(v1 - 176);
    sub_18264EDFC();
    (*(void (**)(uint64_t, void))(*(void *)(v1 - 168) + 8LL))(v17, *(void *)(v1 - 160));
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v4);
  }

void Listener4.connections.getter()
{
}

void sub_181C29E74()
{
}

uint64_t sub_181C29EB4()
{
  return swift_retain();
}

void sub_181C29EE4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v14[2] = a4;
  v14[3] = a5;
  v14[1] = a3;
  v14[4] = a2;
  uint64_t v5 = (void *)*a2;
  uint64_t v6 = sub_18264E964();
  v14[9] = *(void *)(v6 - 8);
  v14[10] = v6;
  MEMORY[0x1895F8858](v6);
  v14[8] = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_18264E97C();
  v14[6] = *(void *)(v8 - 8);
  v14[7] = v8;
  MEMORY[0x1895F8858](v8);
  v14[5] = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = v5[11];
  uint64_t v12 = v5[12];
  uint64_t v11 = v5[13];
  uint64_t v13 = v5[14];
  v14[12] = v5[10];
  v14[13] = v10;
  v14[14] = v12;
  v14[15] = v11;
  v14[16] = v13;
  type metadata accessor for Connection1();
}

uint64_t sub_181C29FB4()
{
  uint64_t v5 = sub_18264EE14();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v19 - v7;
  if (qword_18C58B218 != -1) {
    swift_once();
  }
  *(void *)(v4 - 224) = qword_18C5A4A28;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2, v5);
  unint64_t v9 = (*(unsigned __int8 *)(v6 + 80) + 64LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = (char *)swift_allocObject();
  *((void *)v10 + 2) = v3;
  *((void *)v10 + 3) = v0;
  *((void *)v10 + 4) = swift_allocateMetadataPack();
  *((void *)v10 + 5) = v1;
  uint64_t WitnessTablePack = swift_allocateWitnessTablePack();
  uint64_t v12 = *(void *)(v4 - 192);
  *((void *)v10 + 6) = WitnessTablePack;
  *((void *)v10 + 7) = v12;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v10[v9], v8, v5);
  *(void *)(v4 - 96) = *(void *)(v4 - 208);
  *(void *)(v4 - 88) = v10;
  *(void *)(v4 - 128) = MEMORY[0x1895F87A8];
  *(void *)(v4 - 120) = 1107296256LL;
  uint64_t v13 = *(void *)(v4 - 200);
  *(void *)(v4 - 112) = sub_181C32D2C;
  *(void *)(v4 - 104) = v13;
  uint64_t v14 = _Block_copy((const void *)(v4 - 128));
  swift_retain();
  uint64_t v15 = *(void *)(v4 - 184);
  sub_18264E970();
  *(void *)(v4 - 136) = MEMORY[0x18961AFE8];
  sub_181C2B304();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C45E560);
  sub_181C18498();
  uint64_t v16 = *(void *)(v4 - 160);
  uint64_t v17 = *(void *)(v4 - 144);
  sub_18264F108();
  MEMORY[0x186E0EBEC](0LL, v15, v16, v14);
  _Block_release(v14);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 152) + 8LL))(v16, v17);
  (*(void (**)(uint64_t, void))(*(void *)(v4 - 176) + 8LL))(v15, *(void *)(v4 - 168));
  return swift_release();
}

void sub_181C2A1A0()
{
}

uint64_t sub_181C2A200(uint64_t a1)
{
  *(void *)(v4 - 176) = a1;
  uint64_t v5 = sub_18264EE14();
  uint64_t v6 = sub_18264F09C();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  uint64_t v10 = &v22[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  MEMORY[0x1895F8858](v8);
  uint64_t v12 = &v22[-v11];
  uint64_t v13 = v2 + *(void *)(v1 + 144);
  swift_beginAccess();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v12, v13, v6);
  uint64_t v14 = *(void *)(v5 - 8);
  int v15 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v5);
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v12, v6);
  if (v15 != 1) {
    return sub_18264EE08();
  }
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v14 + 16))(v10, v3, v5);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v14 + 56))(v10, 0LL, 1LL, v5);
  swift_beginAccess();
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v7 + 40))(v13, v10, v6);
  swift_endAccess();
  uint64_t v16 = (uint64_t *)(v2 + *(void *)(*(void *)v2 + 152LL));
  uint64_t v17 = swift_beginAccess();
  *(void *)(v4 - 152) = *v16;
  MEMORY[0x1895F8858](v17);
  uint64_t v18 = *(void *)(v4 - 192);
  *(void *)&v22[-48] = *(void *)(v4 - 184);
  *(void *)&v22[-40] = v18;
  uint64_t v19 = *(void *)(v4 - 208);
  *(void *)&v22[-32] = *(void *)(v4 - 200);
  *(void *)&v22[-24] = v19;
  *(void *)&v22[-16] = *(void *)(v4 - 216);
  *(void *)&v22[-8] = v3;
  uint64_t v20 = sub_18264ED54();
  swift_bridgeObjectRetain();
  MEMORY[0x186E12084](MEMORY[0x189618470], v20);
  sub_18264EC64();
  swift_bridgeObjectRelease();
  uint64_t *v16 = sub_18264ED0C();
  return swift_bridgeObjectRelease();
}

void sub_181C2A434()
{
}

uint64_t sub_181C2A474()
{
  uint64_t v2 = sub_18264EDD8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v7 - v4;
  *(void *)(v1 - 104) = *v0;
  sub_18264EE14();
  swift_retain();
  sub_18264EDFC();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t Listener4.states.getter@<X0>(void *a1@<X8>)
{
  return swift_retain();
}

uint64_t sub_181C2A53C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  v23[1] = a3;
  uint64_t v26 = a2;
  uint64_t v6 = (void *)*a2;
  uint64_t v7 = sub_18264E964();
  uint64_t v29 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_18264E97C();
  uint64_t v27 = *(void *)(v10 - 8);
  uint64_t v28 = v10;
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CF48);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  MEMORY[0x1895F8858](v13);
  uint64_t v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_18C58B218 != -1) {
    swift_once();
  }
  v23[2] = qword_18C5A4A28;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))( (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v13);
  unint64_t v17 = (*(unsigned __int8 *)(v14 + 80) + 64LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v18 = (char *)swift_allocObject();
  *((void *)v18 + 2) = v6[10];
  *((void *)v18 + 3) = v6[11];
  *((void *)v18 + 4) = swift_allocateMetadataPack();
  *((void *)v18 + 5) = v6[13];
  uint64_t WitnessTablePack = swift_allocateWitnessTablePack();
  uint64_t v20 = v26;
  *((void *)v18 + 6) = WitnessTablePack;
  *((void *)v18 + 7) = v20;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v18[v17], v16, v13);
  aBlock[4] = v24;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_181C32D2C;
  aBlock[3] = v25;
  uint64_t v21 = _Block_copy(aBlock);
  swift_retain();
  sub_18264E970();
  uint64_t v30 = MEMORY[0x18961AFE8];
  sub_181C2B304();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C45E560);
  sub_181C18498();
  sub_18264F108();
  MEMORY[0x186E0EBEC](0LL, v12, v9, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v12, v28);
  return swift_release();
}

uint64_t sub_181C2A7D8(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v26 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D1A8);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CF60);
  uint64_t v12 = MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  uint64_t v16 = (char *)&v25 - v15;
  uint64_t v17 = *a3;
  uint64_t v25 = a1;
  uint64_t v18 = a1 + v17;
  swift_beginAccess();
  sub_181C2B34C(v18, (uint64_t)v16);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CF48);
  uint64_t v20 = *(void *)(v19 - 8);
  int v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v16, 1LL, v19);
  sub_181C282B0((uint64_t)v16);
  if (v21 != 1) {
    return sub_18264EE08();
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v14, a2, v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v14, 0LL, 1LL, v19);
  swift_beginAccess();
  sub_181C2B394((uint64_t)v14, v18);
  uint64_t result = swift_endAccess();
  uint64_t v23 = (unsigned int *)(v25 + *v26);
  if (*((unsigned __int8 *)v23 + 4) >> 2 <= 0x3EuLL)
  {
    unint64_t v24 = *v23 | ((unint64_t)*((unsigned __int8 *)v23 + 4) << 32);
    int v27 = v24;
    char v28 = BYTE4(v24);
    sub_18264EDFC();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }

  return result;
}

void Listener4.deinit()
{
}

void sub_181C2A9E4(void *a1)
{
}

uint64_t sub_181C2AA40()
{
  uint64_t v2 = sub_18264F09C();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v0, v2);
  swift_bridgeObjectRelease();
  return v1;
}

void Listener4.__deallocating_deinit()
{
}

uint64_t sub_181C2AAA0(unsigned int *a1)
{
  return sub_181C29A58(a1, v1, &qword_18C58CF40, &qword_18C58CF50);
}

void sub_181C2AAC8(uint64_t a1)
{
}

  ;
}

uint64_t sub_181C2AAF8(uint64_t a1)
{
  return sub_181C2A53C(a1, v1, (uint64_t)&unk_189BAECC0, (uint64_t)sub_181C2B5A0, (uint64_t)&block_descriptor_54);
}

void sub_181C2AB28(uint64_t a1)
{
}

  ;
}

uint64_t sub_181C2AB5C(unsigned int *a1)
{
  return sub_181C29510( a1,  *(void *)(v1 + 16),  *(uint64_t (**)(int *))(v1 + 24),  *(void *)(v1 + 32),  &qword_18C58CF68,  &qword_18C58CF70);
}

uint64_t sub_181C2AB88(unsigned int *a1)
{
  return sub_181C29A58(a1, v1, &qword_18C58CF68, &qword_18C58CF70);
}

void sub_181C2ABB0(uint64_t a1)
{
}

  ;
}

uint64_t sub_181C2ABE0(uint64_t a1)
{
  return sub_181C2A53C(a1, v1, (uint64_t)&unk_189BAEBD0, (uint64_t)sub_181C2B508, (uint64_t)&block_descriptor_36);
}

uint64_t sub_181C2AC14(unsigned int *a1)
{
  return sub_181C29510( a1,  *(void *)(v1 + 16),  *(uint64_t (**)(int *))(v1 + 24),  *(void *)(v1 + 32),  &qword_18C58CF78,  &qword_18C58CF80);
}

uint64_t sub_181C2AC40(unsigned int *a1)
{
  return sub_181C29A58(a1, v1, &qword_18C58CF78, &qword_18C58CF80);
}

void sub_181C2AC68(uint64_t a1)
{
}

  ;
}

uint64_t sub_181C2AC98(uint64_t a1)
{
  return sub_181C2A53C(a1, v1, (uint64_t)&unk_189BAEB30, (uint64_t)sub_181C2B404, (uint64_t)&block_descriptor_24_0);
}

uint64_t objectdestroyTm_0()
{
  return swift_deallocObject();
}

uint64_t sub_181C2ACF8(unsigned int *a1)
{
  return sub_181C29510( a1,  *(void *)(v1 + 16),  *(uint64_t (**)(int *))(v1 + 24),  *(void *)(v1 + 32),  &qword_18C58CF88,  qword_18C58CF90);
}

uint64_t sub_181C2AD24(unsigned int *a1)
{
  return sub_181C29A58(a1, v1, &qword_18C58CF88, qword_18C58CF90);
}

void sub_181C2AD4C(uint64_t a1)
{
}

  ;
}

uint64_t sub_181C2AD7C(uint64_t a1)
{
  return sub_181C2A53C(a1, v1, (uint64_t)&unk_189BAEA90, (uint64_t)sub_181C2B2D8, (uint64_t)&block_descriptor_8);
}

void sub_181C2ADAC()
{
}

uint64_t destroy for Service(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }

  return result;
}

void *initializeWithCopy for Service(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  uint64_t v8 = a2 + 6;
  uint64_t v7 = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    uint64_t v9 = a2[7];
    a1[6] = v7;
    a1[7] = v9;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }

  else
  {
    *((_OWORD *)a1 + 3) = *v8;
  }

  return a1;
}

void *assignWithCopy for Service(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[6];
  if (!a1[6])
  {
    if (v4)
    {
      a1[6] = v4;
      a1[7] = a2[7];
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      return a1;
    }

void *assignWithTake for Service(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[6];
  if (!a1[6]) {
    goto LABEL_5;
  }
  if (!v7)
  {
    sub_181BD73AC((uint64_t)(a1 + 6));
LABEL_5:
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
    return a1;
  }

  a1[6] = v7;
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_unknownObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Service(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(sub_181C5475C(v0, v1, v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Service(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 64) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Service()
{
  return &type metadata for Service;
}

void type metadata accessor for Listener1()
{
}

uint64_t method lookup function for Listener1()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Listener1.__allocating_init(using:ready:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of Listener1.__allocating_init(for:using:)()
{
  return (*(uint64_t (**)(void))(v0 + 168))();
}

void sub_181C2B13C()
{
  if (!qword_18C58D018[0])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C58CF48);
    unint64_t v0 = sub_18264F09C();
    if (!v1) {
      atomic_store(v0, qword_18C58D018);
    }
  }

void type metadata accessor for Listener2()
{
}

uint64_t method lookup function for Listener2()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Listener2.__allocating_init(for:using:)()
{
  return (*(uint64_t (**)(void))(v0 + 168))();
}

void type metadata accessor for Listener3()
{
}

uint64_t method lookup function for Listener3()
{
  return swift_lookUpClassMethod();
}

void sub_181C2B1DC()
{
  if (v0 <= 0x3F) {
    type metadata accessor for Connection1();
  }
}

void type metadata accessor for Listener4()
{
}

uint64_t method lookup function for Listener4()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_181C2B2D8()
{
  return sub_181C2B418(&qword_18C58CF88, qword_18C58CF90);
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

unint64_t sub_181C2B304()
{
  unint64_t result = qword_18C45E550;
  if (!qword_18C45E550)
  {
    uint64_t v1 = sub_18264E964();
    unint64_t result = MEMORY[0x186E12084](MEMORY[0x18961B6B8], v1);
    atomic_store(result, (unint64_t *)&qword_18C45E550);
  }

  return result;
}

uint64_t sub_181C2B34C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CF60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_181C2B394(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CF60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

void sub_181C2B3E0()
{
}

void sub_181C2B3EC()
{
}

  ;
}

uint64_t sub_181C2B404()
{
  return sub_181C2B418(&qword_18C58CF78, &qword_18C58CF80);
}

uint64_t sub_181C2B418(uint64_t *a1, void *a2)
{
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C58CF48) - 8) + 80LL);
  return sub_181C2A7D8(*(void *)(v2 + 56), v2 + ((v5 + 64) & ~v5), a1, a2);
}

void sub_181C2B474()
{
}

void sub_181C2B4A8()
{
}

  ;
}

void sub_181C2B4E4()
{
}

  ;
}

uint64_t sub_181C2B508()
{
  return sub_181C2B418(&qword_18C58CF68, &qword_18C58CF70);
}

uint64_t objectdestroy_11Tm()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58CF48);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 64LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_181C2B5A0()
{
  return sub_181C2B418(&qword_18C58CF40, &qword_18C58CF50);
}

void objectdestroy_14Tm()
{
}

uint64_t sub_181C2B5F0()
{
  uint64_t v1 = sub_18264EE14();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 64LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t dispatch thunk of Listener2.__allocating_init(using:ready:)()
{
  return dispatch thunk of Listener1.__allocating_init(using:ready:)();
}

uint64_t dispatch thunk of Listener3.__allocating_init(for:ready:)()
{
  return dispatch thunk of Listener1.__allocating_init(using:ready:)();
}

uint64_t dispatch thunk of Listener4.__allocating_init(with:ready:)()
{
  return dispatch thunk of Listener1.__allocating_init(using:ready:)();
}

uint64_t dispatch thunk of Listener3.__allocating_init(on:for:)()
{
  return dispatch thunk of Listener2.__allocating_init(for:using:)();
}

uint64_t dispatch thunk of Listener4.__allocating_init(for:with:)()
{
  return dispatch thunk of Listener2.__allocating_init(for:using:)();
}

void static HTTPField.Name.cookie.getter(void *a1@<X8>)
{
  *a1 = 0x65696B6F6F43LL;
  a1[1] = 0xE600000000000000LL;
  a1[2] = 0x65696B6F6F63LL;
  a1[3] = 0xE600000000000000LL;
}

uint64_t static HTTPField.Name.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24)) {
    return 1LL;
  }
  else {
    return sub_18264F4EC();
  }
}

uint64_t sub_181C2B750(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000LL) != 0) {
    unint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    uint64_t v5 = (a1 >> 59) & 1;
    if ((a2 & 0x1000000000000000LL) == 0) {
      LOBYTE(v5) = 1;
    }
    uint64_t v6 = 4LL << v5;
    uint64_t v16 = a2 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    unint64_t v8 = 15LL;
    while (1)
    {
      unint64_t v9 = v8 & 0xC;
      unint64_t v10 = v8;
      if (v9 == v6) {
        unint64_t v10 = sub_181C23710(v8, a1, a2);
      }
      unint64_t v11 = v10 >> 16;
      if (v10 >> 16 >= v2)
      {
        __break(1u);
LABEL_33:
        __break(1u);
        JUMPOUT(0x181C2B944LL);
      }

      if ((a2 & 0x1000000000000000LL) != 0)
      {
        char v13 = sub_18264EBC8();
        if (v9 != v6) {
          goto LABEL_18;
        }
      }

      else if ((a2 & 0x2000000000000000LL) != 0)
      {
        v15[0] = a1;
        v15[1] = v16;
        char v13 = *((_BYTE *)v15 + v11);
        if (v9 != v6) {
          goto LABEL_18;
        }
      }

      else
      {
        uint64_t v12 = v7;
        if ((a1 & 0x1000000000000000LL) == 0) {
          uint64_t v12 = sub_18264F228();
        }
        char v13 = *(_BYTE *)(v12 + v11);
        if (v9 != v6)
        {
LABEL_18:
          if ((a2 & 0x1000000000000000LL) != 0) {
            goto LABEL_22;
          }
          goto LABEL_19;
        }
      }

      unint64_t v8 = sub_181C23710(v8, a1, a2);
      if ((a2 & 0x1000000000000000LL) != 0)
      {
LABEL_22:
        if (v2 <= v8 >> 16) {
          goto LABEL_33;
        }
        unint64_t v8 = sub_18264EB98();
        goto LABEL_24;
      }

uint64_t sub_181C2BABC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4 = a2 >> 14;
  if (a2 >> 14 == a1 >> 14) {
    return 0LL;
  }
  uint64_t v9 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v9) = 1;
  }
  uint64_t v10 = 4LL << v9;
  if ((a4 & 0x2000000000000000LL) != 0) {
    unint64_t v11 = HIBYTE(a4) & 0xF;
  }
  else {
    unint64_t v11 = a3 & 0xFFFFFFFFFFFFLL;
  }
  swift_bridgeObjectRetain();
  unint64_t v12 = a1;
  while (2)
  {
    char v13 = sub_18264F0A8();
    if ((v12 & 0xC) == v10)
    {
      unint64_t v12 = sub_181C23710(v12, a3, a4);
      if ((a4 & 0x1000000000000000LL) == 0)
      {
LABEL_11:
        unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000LL) + 65540;
        goto LABEL_15;
      }
    }

    else if ((a4 & 0x1000000000000000LL) == 0)
    {
      goto LABEL_11;
    }

    if (v11 <= v12 >> 16)
    {
      __break(1u);
      JUMPOUT(0x181C2BC3CLL);
    }

    unint64_t v12 = sub_18264EB98();
LABEL_15:
    switch(v13)
    {
      case '!':
      case '#':
      case '$':
      case '%':
      case '&':
      case '\'':
      case '*':
      case '+':
      case '-':
      case '.':
      case '^':
      case '_':
      case '|':
      case '~':
        goto LABEL_16;
      default:
        if ((v13 - 58) > 0xF5u
          || (v13 - 91) > 0xE5u
          || (v13 - 123) >= 0xE6u)
        {
LABEL_16:
          if (v4 == v12 >> 14)
          {
            uint64_t v5 = 1LL;
            goto LABEL_22;
          }

          continue;
        }

        uint64_t v5 = 0LL;
LABEL_22:
        swift_bridgeObjectRelease();
        return v5;
    }
  }

uint64_t HTTPField.Name.rawName.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HTTPField.Name.canonicalName.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

double HTTPField.Name.init(_:)@<D0>( unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v5 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v5 && (sub_181C2B750(a1, a2) & 1) != 0)
  {
    uint64_t v7 = sub_18264EAB4();
    *a3 = a1;
    a3[1] = a2;
    a3[2] = v7;
    a3[3] = v9;
  }

  else
  {
    swift_bridgeObjectRelease();
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *((_OWORD *)a3 + 1) = 0u;
  }

  return result;
}

uint64_t HTTPField.Name.init(parsed:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
LABEL_26:
    uint64_t result = swift_bridgeObjectRelease();
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return result;
  }

  uint64_t v6 = a1;
  char v7 = sub_18264EBE0();
  swift_bridgeObjectRetain();
  if ((v7 & 1) != 0)
  {
    unint64_t v8 = sub_181C2D4D4(1uLL, v6, a2);
    unint64_t v10 = v9;
    unint64_t v12 = v11;
    unint64_t v14 = v13;
    swift_bridgeObjectRelease();
  }

  else
  {
    unint64_t v8 = MEMORY[0x186E0EC4C](v6, a2);
    unint64_t v10 = v15;
    unint64_t v12 = v16;
    unint64_t v14 = v17;
  }

  if (v10 >> 14 != v8 >> 14)
  {
    uint64_t v24 = v6;
    uint64_t v25 = a3;
    uint64_t v18 = (v12 >> 59) & 1;
    if ((v14 & 0x1000000000000000LL) == 0) {
      LOBYTE(v18) = 1;
    }
    uint64_t v19 = 4LL << v18;
    if ((v14 & 0x2000000000000000LL) != 0) {
      unint64_t v20 = HIBYTE(v14) & 0xF;
    }
    else {
      unint64_t v20 = v12 & 0xFFFFFFFFFFFFLL;
    }
    swift_bridgeObjectRetain();
    unint64_t v21 = v8;
    while (2)
    {
      char v22 = sub_18264F0A8();
      if ((v21 & 0xC) == v19)
      {
        unint64_t v21 = sub_181C23710(v21, v12, v14);
        if ((v14 & 0x1000000000000000LL) == 0) {
          goto LABEL_16;
        }
      }

      else if ((v14 & 0x1000000000000000LL) == 0)
      {
LABEL_16:
        unint64_t v21 = (v21 & 0xFFFFFFFFFFFF0000LL) + 65540;
        goto LABEL_20;
      }

      if (v20 <= v21 >> 16)
      {
        __break(1u);
        JUMPOUT(0x181C2C0CCLL);
      }

      unint64_t v21 = sub_18264EB98();
LABEL_20:
      switch(v22)
      {
        case '!':
        case '#':
        case '$':
        case '%':
        case '&':
        case '\'':
        case '*':
        case '+':
        case '-':
        case '.':
        case '^':
        case '_':
        case '|':
        case '~':
          goto LABEL_21;
        default:
          if ((v22 - 58) <= 0xF5u && (v22 - 123) < 0xE6u)
          {
            swift_bridgeObjectRelease_n();
            a3 = v25;
            goto LABEL_26;
          }

uint64_t HTTPField.Name.hash(into:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t HTTPField.Name.hashValue.getter()
{
  return sub_18264F684();
}

uint64_t sub_181C2C2D0()
{
  return sub_18264F684();
}

uint64_t sub_181C2C318()
{
  return sub_18264EB44();
}

uint64_t sub_181C2C320()
{
  return sub_18264F684();
}

uint64_t sub_181C2C364(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24)) {
    return 1LL;
  }
  else {
    return sub_18264F4EC();
  }
}

uint64_t sub_181C2C398()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HTTPField.Name.playgroundDescription.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  a1[3] = MEMORY[0x189617FA8];
  *a1 = v3;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_181C2C3DC@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  a1[3] = MEMORY[0x189617FA8];
  *a1 = v3;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t HTTPField.Name.encode(to:)(void *a1)
{
  return __swift_destroy_boxed_opaque_existential_2((uint64_t)v2);
}

uint64_t HTTPField.Name.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_2(v23, v23[3]);
    uint64_t v5 = sub_18264F504();
    unint64_t v7 = v6;
    if ((sub_18264EBE0() & 1) != 0)
    {
      if (sub_18264EAB4() == v5 && v8 == v7)
      {
        swift_bridgeObjectRelease();
      }

      else
      {
        char v10 = sub_18264F4EC();
        swift_bridgeObjectRelease();
        if ((v10 & 1) == 0) {
          goto LABEL_20;
        }
      }

      swift_bridgeObjectRetain();
      unint64_t v15 = sub_181C2D4D4(1uLL, v5, v7);
      unint64_t v17 = v16;
      unint64_t v19 = v18;
      unint64_t v21 = v20;
      swift_bridgeObjectRelease();
      LOBYTE(v15) = sub_181C2BABC(v15, v17, v19, v21);
      swift_bridgeObjectRelease();
      if ((v15 & 1) == 0)
      {
LABEL_20:
        sub_18264F168();
        sub_18264EB74();
LABEL_21:
        sub_18264EB74();
        swift_bridgeObjectRelease();
        sub_18264EB74();
        sub_18264F204();
        swift_allocError();
        sub_18264F1D4();
        swift_bridgeObjectRelease();
        swift_willThrow();
        __swift_destroy_boxed_opaque_existential_2((uint64_t)v23);
        return __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
      }

      swift_bridgeObjectRetain();
      uint64_t v12 = v5;
      unint64_t v14 = v7;
    }

    else
    {
      uint64_t v11 = HIBYTE(v7) & 0xF;
      if ((v7 & 0x2000000000000000LL) == 0) {
        uint64_t v11 = v5 & 0xFFFFFFFFFFFFLL;
      }
      if (!v11 || (sub_181C2B750(v5, v7) & 1) == 0)
      {
        sub_18264F168();
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }

      uint64_t v12 = sub_18264EAB4();
      unint64_t v14 = v13;
    }

    __swift_destroy_boxed_opaque_existential_2((uint64_t)v23);
    *a2 = v5;
    a2[1] = v7;
    a2[2] = v12;
    a2[3] = v14;
  }

  return __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
}

uint64_t sub_181C2C764@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return HTTPField.Name.init(from:)(a1, a2);
}

uint64_t sub_181C2C778(void *a1)
{
  return __swift_destroy_boxed_opaque_existential_2((uint64_t)v2);
}

void static HTTPField.Name.accept.getter(void *a1@<X8>)
{
  *a1 = 0x747065636341LL;
  a1[1] = 0xE600000000000000LL;
  a1[2] = 0x747065636361LL;
  a1[3] = 0xE600000000000000LL;
}

void static HTTPField.Name.acceptEncoding.getter(void *a1@<X8>)
{
  *a1 = 0x452D747065636341LL;
  a1[1] = 0xEF676E69646F636ELL;
  a1[2] = 0x652D747065636361LL;
  a1[3] = 0xEF676E69646F636ELL;
}

void static HTTPField.Name.acceptLanguage.getter(void *a1@<X8>)
{
  *a1 = 0x4C2D747065636341LL;
  a1[1] = 0xEF65676175676E61LL;
  a1[2] = 0x6C2D747065636361LL;
  a1[3] = 0xEF65676175676E61LL;
}

void static HTTPField.Name.acceptRanges.getter(uint64_t a1@<X8>)
{
  *(_WORD *)(a1 + 14) = -4864;
  strcpy((char *)(a1 + 16), "accept-ranges");
  *(_WORD *)(a1 + 30) = -4864;
}

void static HTTPField.Name.accessControlAllowCredentials.getter(void *a1@<X8>)
{
  *a1 = 0xD000000000000020LL;
  a1[1] = 0x800000018272F460LL;
  a1[2] = 0xD000000000000020LL;
  a1[3] = 0x800000018272F490LL;
}

void static HTTPField.Name.accessControlAllowHeaders.getter(void *a1@<X8>)
{
  *a1 = 0xD00000000000001CLL;
  a1[1] = 0x800000018272F4C0LL;
  a1[2] = 0xD00000000000001CLL;
  a1[3] = 0x800000018272F4E0LL;
}

void static HTTPField.Name.accessControlAllowMethods.getter(void *a1@<X8>)
{
  *a1 = 0xD00000000000001CLL;
  a1[1] = 0x800000018272F500LL;
  a1[2] = 0xD00000000000001CLL;
  a1[3] = 0x800000018272F520LL;
}

void static HTTPField.Name.accessControlAllowOrigin.getter(void *a1@<X8>)
{
  *a1 = 0xD00000000000001BLL;
  a1[1] = 0x800000018272F540LL;
  a1[2] = 0xD00000000000001BLL;
  a1[3] = 0x800000018272F560LL;
}

void static HTTPField.Name.accessControlExposeHeaders.getter(void *a1@<X8>)
{
  *a1 = 0xD00000000000001DLL;
  a1[1] = 0x800000018272F580LL;
  a1[2] = 0xD00000000000001DLL;
  a1[3] = 0x800000018272F5A0LL;
}

void static HTTPField.Name.accessControlMaxAge.getter(void *a1@<X8>)
{
  *a1 = 0xD000000000000016LL;
  a1[1] = 0x800000018272F5C0LL;
  a1[2] = 0xD000000000000016LL;
  a1[3] = 0x800000018272F5E0LL;
}

void static HTTPField.Name.accessControlRequestHeaders.getter(void *a1@<X8>)
{
  *a1 = 0xD00000000000001ELL;
  a1[1] = 0x800000018272F600LL;
  a1[2] = 0xD00000000000001ELL;
  a1[3] = 0x800000018272F620LL;
}

void static HTTPField.Name.accessControlRequestMethod.getter(void *a1@<X8>)
{
  *a1 = 0xD00000000000001DLL;
  a1[1] = 0x800000018272F640LL;
  a1[2] = 0xD00000000000001DLL;
  a1[3] = 0x800000018272F660LL;
}

void static HTTPField.Name.age.getter(void *a1@<X8>)
{
  *a1 = 6645569LL;
  a1[1] = 0xE300000000000000LL;
  a1[2] = 6645601LL;
  a1[3] = 0xE300000000000000LL;
}

void static HTTPField.Name.allow.getter(void *a1@<X8>)
{
  *a1 = 0x776F6C6C41LL;
  a1[1] = 0xE500000000000000LL;
  a1[2] = 0x776F6C6C61LL;
  a1[3] = 0xE500000000000000LL;
}

void static HTTPField.Name.authenticationInfo.getter(void *a1@<X8>)
{
  *a1 = 0xD000000000000013LL;
  a1[1] = 0x800000018272F680LL;
  a1[2] = 0xD000000000000013LL;
  a1[3] = 0x800000018272F6A0LL;
}

void static HTTPField.Name.authorization.getter(uint64_t a1@<X8>)
{
  *(_WORD *)(a1 + 14) = -4864;
  strcpy((char *)(a1 + 16), "authorization");
  *(_WORD *)(a1 + 30) = -4864;
}

void static HTTPField.Name.cacheControl.getter(uint64_t a1@<X8>)
{
  *(_WORD *)(a1 + 14) = -4864;
  strcpy((char *)(a1 + 16), "cache-control");
  *(_WORD *)(a1 + 30) = -4864;
}

void static HTTPField.Name.connection.getter(void *a1@<X8>)
{
  *a1 = 0x697463656E6E6F43LL;
  a1[1] = 0xEA00000000006E6FLL;
  a1[2] = 0x697463656E6E6F63LL;
  a1[3] = 0xEA00000000006E6FLL;
}

void static HTTPField.Name.contentDisposition.getter(void *a1@<X8>)
{
  *a1 = 0xD000000000000013LL;
  a1[1] = 0x800000018272F6C0LL;
  a1[2] = 0xD000000000000013LL;
  a1[3] = 0x800000018272F6E0LL;
}

void static HTTPField.Name.contentEncoding.getter(void *a1@<X8>)
{
  *a1 = 0xD000000000000010LL;
  a1[1] = 0x800000018272F700LL;
  a1[2] = 0xD000000000000010LL;
  a1[3] = 0x800000018272F720LL;
}

void static HTTPField.Name.contentLanguage.getter(void *a1@<X8>)
{
  *a1 = 0xD000000000000010LL;
  a1[1] = 0x800000018272F740LL;
  a1[2] = 0xD000000000000010LL;
  a1[3] = 0x800000018272F760LL;
}

void static HTTPField.Name.contentLength.getter(char *a1@<X8>)
{
  a1[15] = -18;
  strcpy(a1 + 16, "content-length");
  a1[31] = -18;
}

void static HTTPField.Name.contentLocation.getter(void *a1@<X8>)
{
  *a1 = 0xD000000000000010LL;
  a1[1] = 0x800000018272F780LL;
  a1[2] = 0xD000000000000010LL;
  a1[3] = 0x800000018272F7A0LL;
}

void static HTTPField.Name.contentRange.getter(uint64_t a1@<X8>)
{
  *(_WORD *)(a1 + 14) = -4864;
  strcpy((char *)(a1 + 16), "content-range");
  *(_WORD *)(a1 + 30) = -4864;
}

void static HTTPField.Name.contentSecurityPolicy.getter(void *a1@<X8>)
{
  *a1 = 0xD000000000000017LL;
  a1[1] = 0x800000018272F7C0LL;
  a1[2] = 0xD000000000000017LL;
  a1[3] = 0x800000018272F7E0LL;
}

void static HTTPField.Name.contentSecurityPolicyReportOnly.getter(void *a1@<X8>)
{
  *a1 = 0xD000000000000023LL;
  a1[1] = 0x800000018272F800LL;
  a1[2] = 0xD000000000000023LL;
  a1[3] = 0x800000018272F830LL;
}

void static HTTPField.Name.contentType.getter(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
  strcpy((char *)(a1 + 16), "content-type");
  *(_BYTE *)(a1 + 29) = 0;
  *(_WORD *)(a1 + 30) = -5120;
}

void static HTTPField.Name.crossOriginResourcePolicy.getter(void *a1@<X8>)
{
  *a1 = 0xD00000000000001CLL;
  a1[1] = 0x800000018272F860LL;
  a1[2] = 0xD00000000000001CLL;
  a1[3] = 0x800000018272F880LL;
}

void static HTTPField.Name.date.getter(void *a1@<X8>)
{
  *a1 = 1702125892LL;
  a1[1] = 0xE400000000000000LL;
  a1[2] = 1702125924LL;
  a1[3] = 0xE400000000000000LL;
}

void static HTTPField.Name.earlyData.getter(void *a1@<X8>)
{
  *a1 = 0x61442D796C726145LL;
  a1[1] = 0xEA00000000006174LL;
  a1[2] = 0x61642D796C726165LL;
  a1[3] = 0xEA00000000006174LL;
}

void static HTTPField.Name.eTag.getter(void *a1@<X8>)
{
  *a1 = 1734431813LL;
  a1[1] = 0xE400000000000000LL;
  a1[2] = 1734440037LL;
  a1[3] = 0xE400000000000000LL;
}

void static HTTPField.Name.expect.getter(void *a1@<X8>)
{
  *a1 = 0x746365707845LL;
  a1[1] = 0xE600000000000000LL;
  a1[2] = 0x746365707865LL;
  a1[3] = 0xE600000000000000LL;
}

void static HTTPField.Name.expires.getter(void *a1@<X8>)
{
  *a1 = 0x73657269707845LL;
  a1[1] = 0xE700000000000000LL;
  a1[2] = 0x73657269707865LL;
  a1[3] = 0xE700000000000000LL;
}

void static HTTPField.Name.from.getter(void *a1@<X8>)
{
  *a1 = 1836020294LL;
  a1[1] = 0xE400000000000000LL;
  a1[2] = 1836020326LL;
  a1[3] = 0xE400000000000000LL;
}

void static HTTPField.Name.host.getter(void *a1@<X8>)
{
  *a1 = 1953722184LL;
  a1[1] = 0xE400000000000000LL;
  a1[2] = 1953722216LL;
  a1[3] = 0xE400000000000000LL;
}

void static HTTPField.Name.ifMatch.getter(void *a1@<X8>)
{
  *a1 = 0x686374614D2D6649LL;
  a1[1] = 0xE800000000000000LL;
  a1[2] = 0x686374616D2D6669LL;
  a1[3] = 0xE800000000000000LL;
}

void static HTTPField.Name.ifModifiedSince.getter(void *a1@<X8>)
{
  *a1 = 0xD000000000000011LL;
  a1[1] = 0x800000018272F8A0LL;
  a1[2] = 0xD000000000000011LL;
  a1[3] = 0x800000018272F8C0LL;
}

void static HTTPField.Name.ifNoneMatch.getter(uint64_t a1@<X8>)
{
  *(_WORD *)(a1 + 14) = -4864;
  strcpy((char *)(a1 + 16), "if-none-match");
  *(_WORD *)(a1 + 30) = -4864;
}

void static HTTPField.Name.ifRange.getter(void *a1@<X8>)
{
  *a1 = 0x65676E61522D6649LL;
  a1[1] = 0xE800000000000000LL;
  a1[2] = 0x65676E61722D6669LL;
  a1[3] = 0xE800000000000000LL;
}

void static HTTPField.Name.ifUnmodifiedSince.getter(void *a1@<X8>)
{
  *a1 = 0xD000000000000013LL;
  a1[1] = 0x800000018272F8E0LL;
  a1[2] = 0xD000000000000013LL;
  a1[3] = 0x800000018272F900LL;
}

void static HTTPField.Name.lastModified.getter(uint64_t a1@<X8>)
{
  *(_WORD *)(a1 + 14) = -4864;
  strcpy((char *)(a1 + 16), "last-modified");
  *(_WORD *)(a1 + 30) = -4864;
}

void static HTTPField.Name.location.getter(void *a1@<X8>)
{
  *a1 = 0x6E6F697461636F4CLL;
  a1[1] = 0xE800000000000000LL;
  a1[2] = 0x6E6F697461636F6CLL;
  a1[3] = 0xE800000000000000LL;
}

void static HTTPField.Name.maxForwards.getter(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
  strcpy((char *)(a1 + 16), "max-forwards");
  *(_BYTE *)(a1 + 29) = 0;
  *(_WORD *)(a1 + 30) = -5120;
}

void static HTTPField.Name.origin.getter(void *a1@<X8>)
{
  *a1 = 0x6E696769724FLL;
  a1[1] = 0xE600000000000000LL;
  a1[2] = 0x6E696769726FLL;
  a1[3] = 0xE600000000000000LL;
}

void static HTTPField.Name.priority.getter(void *a1@<X8>)
{
  *a1 = 0x797469726F697250LL;
  a1[1] = 0xE800000000000000LL;
  a1[2] = 0x797469726F697270LL;
  a1[3] = 0xE800000000000000LL;
}

void static HTTPField.Name.proxyAuthenticate.getter(void *a1@<X8>)
{
  *a1 = 0xD000000000000012LL;
  a1[1] = 0x800000018272F920LL;
  a1[2] = 0xD000000000000012LL;
  a1[3] = 0x800000018272F940LL;
}

void static HTTPField.Name.proxyAuthenticationInfo.getter(void *a1@<X8>)
{
  *a1 = 0xD000000000000019LL;
  a1[1] = 0x800000018272F960LL;
  a1[2] = 0xD000000000000019LL;
  a1[3] = 0x800000018272F980LL;
}

void static HTTPField.Name.proxyAuthorization.getter(void *a1@<X8>)
{
  *a1 = 0xD000000000000013LL;
  a1[1] = 0x800000018272F9A0LL;
  a1[2] = 0xD000000000000013LL;
  a1[3] = 0x800000018272F9C0LL;
}

void static HTTPField.Name.proxyStatus.getter(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
  strcpy((char *)(a1 + 16), "proxy-status");
  *(_BYTE *)(a1 + 29) = 0;
  *(_WORD *)(a1 + 30) = -5120;
}

void static HTTPField.Name.range.getter(void *a1@<X8>)
{
  *a1 = 0x65676E6152LL;
  a1[1] = 0xE500000000000000LL;
  a1[2] = 0x65676E6172LL;
  a1[3] = 0xE500000000000000LL;
}

void static HTTPField.Name.referer.getter(void *a1@<X8>)
{
  *a1 = 0x72657265666552LL;
  a1[1] = 0xE700000000000000LL;
  a1[2] = 0x72657265666572LL;
  a1[3] = 0xE700000000000000LL;
}

void static HTTPField.Name.retryAfter.getter(void *a1@<X8>)
{
  *a1 = 0x66412D7972746552LL;
  a1[1] = 0xEB00000000726574LL;
  a1[2] = 0x66612D7972746572LL;
  a1[3] = 0xEB00000000726574LL;
}

void static HTTPField.Name.secPurpose.getter(void *a1@<X8>)
{
  *a1 = 0x707275502D636553LL;
  a1[1] = 0xEB0000000065736FLL;
  a1[2] = 0x707275702D636573LL;
  a1[3] = 0xEB0000000065736FLL;
}

void static HTTPField.Name.secWebSocketAccept.getter(void *a1@<X8>)
{
  *a1 = 0xD000000000000014LL;
  a1[1] = 0x800000018272F9E0LL;
  a1[2] = 0xD000000000000014LL;
  a1[3] = 0x800000018272FA00LL;
}

void static HTTPField.Name.secWebSocketExtensions.getter(void *a1@<X8>)
{
  *a1 = 0xD000000000000018LL;
  a1[1] = 0x800000018272FA20LL;
  a1[2] = 0xD000000000000018LL;
  a1[3] = 0x800000018272FA40LL;
}

void static HTTPField.Name.secWebSocketKey.getter(void *a1@<X8>)
{
  *a1 = 0xD000000000000011LL;
  a1[1] = 0x800000018272FA60LL;
  a1[2] = 0xD000000000000011LL;
  a1[3] = 0x800000018272FA80LL;
}

void static HTTPField.Name.secWebSocketProtocol.getter(void *a1@<X8>)
{
  *a1 = 0xD000000000000016LL;
  a1[1] = 0x800000018272FAA0LL;
  a1[2] = 0xD000000000000016LL;
  a1[3] = 0x800000018272FAC0LL;
}

void static HTTPField.Name.secWebSocketVersion.getter(void *a1@<X8>)
{
  *a1 = 0xD000000000000015LL;
  a1[1] = 0x800000018272FAE0LL;
  a1[2] = 0xD000000000000015LL;
  a1[3] = 0x800000018272FB00LL;
}

void static HTTPField.Name.server.getter(void *a1@<X8>)
{
  *a1 = 0x726576726553LL;
  a1[1] = 0xE600000000000000LL;
  a1[2] = 0x726576726573LL;
  a1[3] = 0xE600000000000000LL;
}

void static HTTPField.Name.setCookie.getter(void *a1@<X8>)
{
  *a1 = 0x6B6F6F432D746553LL;
  a1[1] = 0xEA00000000006569LL;
  a1[2] = 0x6B6F6F632D746573LL;
  a1[3] = 0xEA00000000006569LL;
}

void static HTTPField.Name.strictTransportSecurity.getter(void *a1@<X8>)
{
  *a1 = 0xD000000000000019LL;
  a1[1] = 0x800000018272FB20LL;
  a1[2] = 0xD000000000000019LL;
  a1[3] = 0x800000018272FB40LL;
}

void static HTTPField.Name.te.getter(void *a1@<X8>)
{
  *a1 = 17748LL;
  a1[1] = 0xE200000000000000LL;
  a1[2] = 25972LL;
  a1[3] = 0xE200000000000000LL;
}

void static HTTPField.Name.trailer.getter(void *a1@<X8>)
{
  *a1 = 0x72656C69617254LL;
  a1[1] = 0xE700000000000000LL;
  a1[2] = 0x72656C69617274LL;
  a1[3] = 0xE700000000000000LL;
}

void static HTTPField.Name.transferEncoding.getter(void *a1@<X8>)
{
  *a1 = 0xD000000000000011LL;
  a1[1] = 0x800000018272FB60LL;
  a1[2] = 0xD000000000000011LL;
  a1[3] = 0x800000018272FB80LL;
}

void static HTTPField.Name.upgrade.getter(void *a1@<X8>)
{
  *a1 = 0x65646172677055LL;
  a1[1] = 0xE700000000000000LL;
  a1[2] = 0x65646172677075LL;
  a1[3] = 0xE700000000000000LL;
}

void static HTTPField.Name.userAgent.getter(void *a1@<X8>)
{
  *a1 = 0x6567412D72657355LL;
  a1[1] = 0xEA0000000000746ELL;
  a1[2] = 0x6567612D72657375LL;
  a1[3] = 0xEA0000000000746ELL;
}

void static HTTPField.Name.vary.getter(void *a1@<X8>)
{
  *a1 = 2037539158LL;
  a1[1] = 0xE400000000000000LL;
  a1[2] = 2037539190LL;
  a1[3] = 0xE400000000000000LL;
}

void static HTTPField.Name.via.getter(void *a1@<X8>)
{
  *a1 = 6383958LL;
  a1[1] = 0xE300000000000000LL;
  a1[2] = 6383990LL;
  a1[3] = 0xE300000000000000LL;
}

void static HTTPField.Name.wwwAuthenticate.getter(void *a1@<X8>)
{
  *a1 = 0xD000000000000010LL;
  a1[1] = 0x800000018272FBA0LL;
  a1[2] = 0xD000000000000010LL;
  a1[3] = 0x800000018272FBC0LL;
}

void static HTTPField.Name.xContentTypeOptions.getter(void *a1@<X8>)
{
  *a1 = 0xD000000000000016LL;
  a1[1] = 0x800000018272FBE0LL;
  a1[2] = 0xD000000000000016LL;
  a1[3] = 0x800000018272FC00LL;
}

unint64_t sub_181C2D4D4(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    if ((a3 & 0x2000000000000000LL) != 0) {
      uint64_t v3 = HIBYTE(a3) & 0xF;
    }
    else {
      uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v4 = 7LL;
    if (((a3 >> 60) & ((a2 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v4 = 11LL;
    }
    unint64_t v5 = v4 | (v3 << 16);
    uint64_t result = sub_18264EB68();
    if ((v6 & 1) != 0) {
      uint64_t result = v5;
    }
    if (4 * v3 >= result >> 14) {
      return sub_18264EC04();
    }
  }

  __break(1u);
  return result;
}

unint64_t sub_181C2D574()
{
  unint64_t result = qword_18C58D1B0;
  if (!qword_18C58D1B0)
  {
    unint64_t result = MEMORY[0x186E12084](&protocol conformance descriptor for HTTPField.Name, &type metadata for HTTPField.Name);
    atomic_store(result, (unint64_t *)&qword_18C58D1B0);
  }

  return result;
}

unint64_t sub_181C2D5BC()
{
  unint64_t result = qword_18C58D1B8;
  if (!qword_18C58D1B8)
  {
    unint64_t result = MEMORY[0x186E12084](&protocol conformance descriptor for HTTPField.Name, &type metadata for HTTPField.Name);
    atomic_store(result, (unint64_t *)&qword_18C58D1B8);
  }

  return result;
}

ValueMetadata *type metadata accessor for HTTPField.Name()
{
  return &type metadata for HTTPField.Name;
}

uint64_t dispatch thunk of NWActorPeer.addInterruptionHandler(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t sub_181C2D61C(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  char v15 = *((_BYTE *)a1 + 32);
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v9 = sub_18264EBE0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v2[12] + 16LL;
  if ((v9 & 1) == 0)
  {
    swift_beginAccess();
    uint64_t v12 = *(void *)(*(void *)v10 + 16LL);
    v16[0] = v4;
    v16[1] = v3;
    v16[2] = v5;
    v16[3] = v6;
    char v17 = v15;
    uint64_t v18 = v7;
    uint64_t v19 = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_181C216E0(v12, v12, (uint64_t)v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  swift_beginAccess();
  if (!*(void *)(*(void *)v10 + 16LL))
  {
    if (v5 == 0x646F6874656D3ALL && v6 == 0xE700000000000000LL || (sub_18264F4EC() & 1) != 0)
    {
      if (!v2[1])
      {
        *uint64_t v2 = v7;
        v2[1] = v8;
        return swift_bridgeObjectRetain();
      }
    }

    else if (v5 == 0x656D656863733ALL && v6 == 0xE700000000000000LL || (sub_18264F4EC() & 1) != 0)
    {
      if (!v2[3])
      {
        v2[2] = v7;
        v2[3] = v8;
        return swift_bridgeObjectRetain();
      }
    }

    else if (v5 == 0x69726F687475613ALL && v6 == 0xEA00000000007974LL || (sub_18264F4EC() & 1) != 0)
    {
      if (!v2[5])
      {
        v2[4] = v7;
        v2[5] = v8;
        return swift_bridgeObjectRetain();
      }
    }

    else if (v5 == 0x687461703ALL && v6 == 0xE500000000000000LL || (sub_18264F4EC() & 1) != 0)
    {
      if (!v2[7])
      {
        v2[6] = v7;
        v2[7] = v8;
        return swift_bridgeObjectRetain();
      }
    }

    else if (v5 == 0x6F636F746F72703ALL && v6 == 0xE90000000000006CLL || (sub_18264F4EC() & 1) != 0)
    {
      if (!v2[9])
      {
        v2[8] = v7;
        v2[9] = v8;
        return swift_bridgeObjectRetain();
      }
    }

    else
    {
      if ((v5 != 0x7375746174733ALL || v6 != 0xE700000000000000LL) && (sub_18264F4EC() & 1) == 0)
      {
        char v11 = 1;
        goto LABEL_36;
      }

      if (!v2[11])
      {
        v2[10] = v7;
        v2[11] = v8;
        return swift_bridgeObjectRetain();
      }
    }

    char v11 = 3;
    goto LABEL_36;
  }

  char v11 = 4;
LABEL_36:
  sub_181C2ECE0();
  swift_allocError();
  char *v14 = v11;
  return swift_willThrow();
}

uint64_t sub_181C2D9E4()
{
  uint64_t v1 = *(void *)(v0 + 96);
  strcpy((char *)v11, "Content-Length");
  HIBYTE(v11[1]) = -18;
  strcpy((char *)v12, "content-length");
  HIBYTE(v12[1]) = -18;
  uint64_t v13 = v1;
  uint64_t v2 = (void *)HTTPFields.subscript.getter((uint64_t)v11);
  char v3 = sub_181C2DB50(v2);
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    v11[0] = 0xD000000000000013LL;
    v11[1] = 0x800000018272F6C0LL;
    v12[0] = 0xD000000000000013LL;
    v12[1] = 0x800000018272F6E0LL;
    uint64_t v13 = v1;
    uint64_t v4 = (void *)HTTPFields.subscript.getter((uint64_t)v11);
    char v5 = sub_181C2DB50(v4);
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
    {
      strcpy((char *)v11, "Location");
      BYTE1(v11[1]) = 0;
      WORD1(v11[1]) = 0;
      HIDWORD(v11[1]) = -402653184;
      strcpy((char *)v12, "location");
      BYTE1(v12[1]) = 0;
      WORD1(v12[1]) = 0;
      HIDWORD(v12[1]) = -402653184;
      uint64_t v13 = v1;
      uint64_t v6 = (void *)HTTPFields.subscript.getter((uint64_t)v11);
      char v7 = sub_181C2DB50(v6);
      uint64_t result = swift_bridgeObjectRelease();
      if ((v7 & 1) != 0) {
        return result;
      }
      char v9 = 14;
    }

    else
    {
      char v9 = 13;
    }
  }

  else
  {
    char v9 = 12;
  }

  sub_181C2ECE0();
  swift_allocError();
  *uint64_t v10 = v9;
  return swift_willThrow();
}

uint64_t sub_181C2DB50(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return 1LL;
  }
  uint64_t v2 = v1 - 1;
  if (v1 == 1) {
    return 1LL;
  }
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  for (uint64_t i = a1 + 7; ; i += 2)
  {
    BOOL v7 = *(i - 1) == v4 && *i == v5;
    if (!v7 && (sub_18264F4EC() & 1) == 0) {
      break;
    }
    if (!--v2) {
      return 1LL;
    }
  }

  return 0LL;
}

uint64_t sub_181C2DBC8@<X0>(uint64_t a1@<X8>)
{
  unint64_t v3 = *(void *)(v1 + 8);
  if (!v3)
  {
    sub_181C2ECE0();
    swift_allocError();
    char v14 = 5;
    goto LABEL_10;
  }

  unint64_t v4 = *(void *)v1;
  uint64_t v5 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000LL) == 0) {
    uint64_t v5 = *(void *)v1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5) {
    goto LABEL_8;
  }
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v33 = *(void *)(v1 + 16);
  uint64_t v34 = *(void *)(v1 + 24);
  uint64_t v8 = *(void *)(v1 + 40);
  uint64_t v7 = *(void *)(v1 + 48);
  uint64_t v10 = *(void *)(v1 + 56);
  uint64_t v9 = *(void *)(v1 + 64);
  __int128 v35 = *(_OWORD *)(v1 + 72);
  uint64_t v12 = *(void *)(v1 + 88);
  uint64_t v11 = *(void *)(v1 + 96);
  if ((sub_181C2B750(v4, v3) & 1) == 0)
  {
LABEL_8:
    sub_181C2ECE0();
    swift_allocError();
    char v14 = 6;
    goto LABEL_10;
  }

  if (v12)
  {
    sub_181C2ECE0();
    swift_allocError();
    char v14 = 7;
LABEL_10:
    char *v13 = v14;
    return swift_willThrow();
  }

  uint64_t v16 = v7;
  uint64_t v17 = v9;
  uint64_t v18 = v6;
  uint64_t v19 = v16;
  uint64_t v20 = v17;
  swift_bridgeObjectRetain();
  sub_181C2D9E4();
  if (v2) {
    return swift_bridgeObjectRelease();
  }
  *(void *)a1 = 0x646F6874656D3ALL;
  *(void *)(a1 + 8) = 0xE700000000000000LL;
  uint64_t v21 = 0x656D656863733ALL;
  if (v34)
  {
    unint64_t v22 = 0xE700000000000000LL;
  }

  else
  {
    uint64_t v21 = 0LL;
    unint64_t v22 = 0LL;
  }

  if (v34) {
    uint64_t v23 = v33;
  }
  else {
    uint64_t v23 = 0LL;
  }
  *(void *)(a1 + 16) = 0x646F6874656D3ALL;
  *(void *)(a1 + 24) = 0xE700000000000000LL;
  uint64_t v24 = 0x69726F687475613ALL;
  *(_BYTE *)(a1 + 32) = 0;
  if (!v8) {
    uint64_t v24 = 0LL;
  }
  unint64_t v25 = 0xEA00000000007974LL;
  if (v8)
  {
    uint64_t v26 = v18;
  }

  else
  {
    unint64_t v25 = 0LL;
    uint64_t v26 = 0LL;
  }

  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v3;
  uint64_t v27 = 0x687461703ALL;
  if (!v10) {
    uint64_t v27 = 0LL;
  }
  unint64_t v28 = 0xE500000000000000LL;
  *(void *)(a1 + 56) = v21;
  *(void *)(a1 + 64) = v22;
  if (v10)
  {
    uint64_t v29 = v19;
  }

  else
  {
    unint64_t v28 = 0LL;
    uint64_t v29 = 0LL;
  }

  *(void *)(a1 + 72) = v21;
  *(void *)(a1 + 80) = v22;
  uint64_t v30 = 0x6F636F746F72703ALL;
  if (!(void)v35) {
    uint64_t v30 = 0LL;
  }
  unint64_t v31 = 0xE90000000000006CLL;
  if (!(void)v35) {
    unint64_t v31 = 0LL;
  }
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 96) = v23;
  if ((void)v35) {
    uint64_t v32 = v20;
  }
  else {
    uint64_t v32 = 0LL;
  }
  *(void *)(a1 + 104) = v34;
  *(void *)(a1 + 112) = v24;
  *(void *)(a1 + 120) = v25;
  *(void *)(a1 + 128) = v24;
  *(void *)(a1 + 136) = v25;
  *(void *)(a1 + 144) = 0LL;
  *(void *)(a1 + 152) = v26;
  *(void *)(a1 + 160) = v8;
  *(void *)(a1 + 168) = v27;
  *(void *)(a1 + 176) = v28;
  *(void *)(a1 + 184) = v27;
  *(void *)(a1 + 192) = v28;
  *(void *)(a1 + 200) = 0LL;
  *(void *)(a1 + 208) = v29;
  *(void *)(a1 + 216) = v10;
  *(void *)(a1 + 224) = v30;
  *(void *)(a1 + 232) = v31;
  *(void *)(a1 + 240) = v30;
  *(void *)(a1 + 248) = v31;
  *(void *)(a1 + 256) = 0LL;
  *(void *)(a1 + 264) = v32;
  *(void *)(a1 + 272) = v35;
  *(void *)(a1 + 280) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t sub_181C2DE84@<X0>(void *a1@<X8>)
{
  unint64_t v3 = v1[11];
  if (!v3)
  {
    sub_181C2ECE0();
    swift_allocError();
    char v13 = 8;
LABEL_14:
    char *v12 = v13;
    return swift_willThrow();
  }

  if (v1[1] || v1[3] || v1[5] || v1[7] || v1[9])
  {
    sub_181C2ECE0();
    swift_allocError();
    char v13 = 10;
    goto LABEL_14;
  }

  uint64_t v52 = a1;
  unint64_t v4 = *v1;
  uint64_t v5 = (int *(*)@<X0>(int *@<X0>, int *@<X8>))v1[2];
  unint64_t v6 = v1[4];
  unint64_t v7 = v1[6];
  unint64_t v8 = v1[8];
  unint64_t v9 = v1[10];
  unint64_t v10 = v1[12];
  swift_bridgeObjectRetain();
  if (sub_18264EB50() != 3 || (sub_181C6F6F8(v9, v3) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_181C2ECE0();
    swift_allocError();
    char v13 = 9;
    goto LABEL_14;
  }

  unint64_t v39 = v4;
  uint64_t v40 = 0LL;
  uint64_t v41 = v5;
  uint64_t v42 = 0LL;
  unint64_t v43 = v6;
  uint64_t v44 = 0LL;
  unint64_t v45 = v7;
  uint64_t v46 = 0LL;
  unint64_t v47 = v8;
  uint64_t v48 = 0LL;
  unint64_t v49 = v9;
  unint64_t v50 = v3;
  unint64_t v51 = v10;
  uint64_t result = sub_181C2D9E4();
  if (v2) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v14 = HIBYTE(v3) & 0xF;
  uint64_t v15 = v9 & 0xFFFFFFFFFFFFLL;
  if ((v3 & 0x2000000000000000LL) != 0) {
    uint64_t v16 = HIBYTE(v3) & 0xF;
  }
  else {
    uint64_t v16 = v9 & 0xFFFFFFFFFFFFLL;
  }
  if (!v16)
  {
    swift_bridgeObjectRelease();
    goto LABEL_70;
  }

  if ((v3 & 0x1000000000000000LL) != 0) {
    goto LABEL_71;
  }
  if ((v3 & 0x2000000000000000LL) != 0)
  {
    unint64_t v39 = v9;
    uint64_t v40 = v3 & 0xFFFFFFFFFFFFFFLL;
    if (v9 == 43)
    {
      if (!v14) {
        goto LABEL_75;
      }
      uint64_t v18 = (BYTE1(v9) - 48);
      if (v14 != 2)
      {
        uint64_t v18 = 10LL * (BYTE1(v9) - 48) + (BYTE2(v9) - 48);
        uint64_t v21 = v14 - 3;
        if (v21)
        {
          unint64_t v22 = (unsigned __int8 *)&v39 + 3;
          while (1)
          {
            unsigned int v23 = *v22 - 48;
            if (v23 > 9) {
              goto LABEL_45;
            }
            uint64_t v24 = 10 * v18;
            uint64_t v18 = v24 + v23;
            unint64_t v9 = 0LL;
            ++v22;
            if (!--v21) {
              goto LABEL_58;
            }
          }
        }
      }
    }

    else
    {
      if (v9 == 45)
      {
        if (v14)
        {
          if (v14 != 1 && (BYTE1(v9) - 48) <= 9u)
          {
            uint64_t v20 = (BYTE1(v9) - 48);
            if (v14 == 2)
            {
              unint64_t v9 = 0LL;
              uint64_t v18 = -v20;
              goto LABEL_58;
            }

            if ((BYTE2(v9) - 48) <= 9u)
            {
              uint64_t v18 = -10LL * (BYTE1(v9) - 48) - (BYTE2(v9) - 48);
              uint64_t v29 = v14 - 3;
              if (!v29) {
                goto LABEL_57;
              }
              __int128 v35 = (unsigned __int8 *)&v39 + 3;
              while (1)
              {
                unsigned int v36 = *v35 - 48;
                if (v36 > 9) {
                  break;
                }
                uint64_t v37 = 10 * v18;
                uint64_t v18 = v37 - v36;
                unint64_t v9 = 0LL;
                ++v35;
                if (!--v29) {
                  goto LABEL_58;
                }
              }
            }
          }

void *HTTPRequest.init(parsed:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  uint64_t v5 = (void *)swift_allocObject();
  uint64_t v6 = MEMORY[0x18961AFE8];
  v5[2] = MEMORY[0x18961AFE8];
  _OWORD v5[3] = sub_181C87FF8(v6);
  unint64_t v7 = (_DWORD *)swift_slowAlloc();
  v5[4] = v7;
  *unint64_t v7 = 0;
  uint64_t v25 = v5;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    uint64_t v17 = a2;
    unint64_t v9 = (uint64_t *)(a1 + 80);
    while (1)
    {
      uint64_t v10 = *(v9 - 1);
      uint64_t v11 = *v9;
      char v12 = *((_BYTE *)v9 - 16);
      uint64_t v13 = *(v9 - 4);
      uint64_t v14 = *(v9 - 3);
      uint64_t v15 = *(v9 - 5);
      __src[0] = *(v9 - 6);
      __src[1] = v15;
      __src[2] = v13;
      __src[3] = v14;
      LOBYTE(__src[4]) = v12;
      __src[5] = v10;
      __src[6] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_181C2D61C(__src);
      if (v2) {
        break;
      }
      v9 += 7;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!--v8)
      {
        swift_bridgeObjectRelease();
        a2 = v17;
        goto LABEL_7;
      }
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (void *)swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
LABEL_7:
    sub_181C2DBC8((uint64_t)__src);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = (void *)swift_bridgeObjectRelease();
    if (!v2) {
      return memcpy(a2, __src, 0x120uLL);
    }
  }

  return result;
}

uint64_t HTTPResponse.init(parsed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = (void *)swift_allocObject();
  uint64_t v6 = MEMORY[0x18961AFE8];
  v5[2] = MEMORY[0x18961AFE8];
  _OWORD v5[3] = sub_181C87FF8(v6);
  unint64_t v7 = (_DWORD *)swift_slowAlloc();
  v5[4] = v7;
  *unint64_t v7 = 0;
  unint64_t v47 = v5;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    uint64_t v30 = a2;
    unint64_t v9 = (void *)(a1 + 80);
    while (1)
    {
      uint64_t v10 = *(v9 - 1);
      uint64_t v11 = *v9;
      char v12 = *((_BYTE *)v9 - 16);
      uint64_t v13 = *(v9 - 4);
      uint64_t v14 = *(v9 - 3);
      uint64_t v15 = *(v9 - 5);
      uint64_t v31 = *(v9 - 6);
      *(void *)&__int128 v32 = v15;
      *((void *)&v32 + 1) = v13;
      *(void *)&__int128 v33 = v14;
      BYTE8(v33) = v12;
      *(void *)&__int128 v34 = v10;
      *((void *)&v34 + 1) = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_181C2D61C(&v31);
      if (v2) {
        break;
      }
      v9 += 7;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!--v8)
      {
        swift_bridgeObjectRelease();
        __int128 v16 = *(_OWORD *)&v46[1];
        __int128 v17 = *(_OWORD *)&v46[3];
        __int128 v18 = *(_OWORD *)&v46[5];
        __int128 v19 = *(_OWORD *)&v46[7];
        __int128 v20 = *(_OWORD *)&v46[9];
        uint64_t v21 = v46[0];
        uint64_t v22 = v46[11];
        uint64_t v5 = v47;
        a2 = v30;
        goto LABEL_7;
      }
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v22 = 0LL;
    uint64_t v21 = 0LL;
    __int128 v17 = 0uLL;
    __int128 v18 = 0uLL;
    __int128 v19 = 0uLL;
    __int128 v20 = 0uLL;
    __int128 v16 = 0uLL;
LABEL_7:
    uint64_t v31 = v21;
    __int128 v32 = v16;
    __int128 v33 = v17;
    __int128 v34 = v18;
    __int128 v35 = v19;
    __int128 v36 = v20;
    uint64_t v37 = v22;
    unint64_t v38 = v5;
    sub_181C2DE84(&v39);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v2)
    {
      uint64_t v24 = v40;
      uint64_t v25 = v41;
      char v26 = v42;
      __int128 v27 = v43;
      uint64_t v28 = v44;
      __int128 v29 = v45;
      *(_OWORD *)a2 = v39;
      *(void *)(a2 + 16) = v24;
      *(void *)(a2 + 24) = v25;
      *(_BYTE *)(a2 + 32) = v26;
      *(_OWORD *)(a2 + 40) = v27;
      *(void *)(a2 + 56) = v28;
      *(_OWORD *)(a2 + 64) = v29;
    }
  }

  return result;
}

uint64_t HTTPFields.init(parsedTrailerFields:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v44 = a2;
  type metadata accessor for HTTPFields._Storage();
  uint64_t inited = (void *)swift_initStackObject();
  uint64_t v5 = MEMORY[0x18961AFE8];
  inited[2] = MEMORY[0x18961AFE8];
  inited[3] = sub_181C87FF8(v5);
  uint64_t v6 = (_DWORD *)swift_slowAlloc();
  inited[4] = v6;
  *uint64_t v6 = 0;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  unint64_t v7 = (void *)swift_allocObject();
  void v7[2] = v5;
  v7[3] = sub_181C87FF8(v5);
  uint64_t v8 = (_DWORD *)swift_slowAlloc();
  v7[4] = v8;
  *uint64_t v8 = 0;
  __int128 v43 = v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9)
  {
    uint64_t v10 = (void *)(a1 + 80);
    while (1)
    {
      uint64_t v11 = *(v10 - 1);
      uint64_t v12 = *v10;
      char v13 = *((_BYTE *)v10 - 16);
      uint64_t v14 = *(v10 - 4);
      uint64_t v15 = *(v10 - 3);
      uint64_t v16 = *(v10 - 5);
      uint64_t v24 = *(v10 - 6);
      uint64_t v25 = v16;
      uint64_t v26 = v14;
      uint64_t v27 = v15;
      LOBYTE(v28) = v13;
      uint64_t v29 = v11;
      uint64_t v30 = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_181C2D61C(&v24);
      if (v2) {
        break;
      }
      v10 += 7;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!--v9)
      {
        swift_bridgeObjectRelease();
        uint64_t v17 = *((void *)&v37 + 1);
        uint64_t v18 = *((void *)&v38 + 1);
        uint64_t v19 = *((void *)&v39 + 1);
        uint64_t v9 = *((void *)&v40 + 1);
        uint64_t v20 = *((void *)&v41 + 1);
        uint64_t v21 = *((void *)&v42 + 1);
        unint64_t v7 = v43;
        goto LABEL_7;
      }
    }

    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v44 = (void *)*((void *)&v42 + 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  uint64_t v21 = 0LL;
  uint64_t v20 = 0LL;
  uint64_t v19 = 0LL;
  uint64_t v18 = 0LL;
  uint64_t v17 = 0LL;
LABEL_7:
  if (v17 || v18 || v19 || v9 || v20 || v21)
  {
    sub_181C2ECE0();
    swift_allocError();
    *uint64_t v22 = 11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_willThrow();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_16;
  }

  uint64_t v24 = v37;
  uint64_t v25 = 0LL;
  uint64_t v26 = v38;
  uint64_t v27 = 0LL;
  uint64_t v28 = v39;
  uint64_t v29 = 0LL;
  uint64_t v30 = v40;
  uint64_t v31 = 0LL;
  uint64_t v32 = v41;
  uint64_t v33 = 0LL;
  uint64_t v34 = v42;
  uint64_t v35 = 0LL;
  __int128 v36 = v7;
  swift_retain();
  sub_181C2D9E4();
  if (v2)
  {
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_release();
LABEL_16:
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t result = swift_release();
  *uint64_t v44 = v7;
  return result;
}

unint64_t sub_181C2ECE0()
{
  unint64_t result = qword_18C58D1C0;
  if (!qword_18C58D1C0)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182660A8C, &type metadata for HTTPParsedFields.ParsingError);
    atomic_store(result, (unint64_t *)&qword_18C58D1C0);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for HTTPParsedFields.ParsingError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF2) {
    goto LABEL_17;
  }
  if (a2 + 14 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 14) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 14;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }

uint64_t storeEnumTagSinglePayload for HTTPParsedFields.ParsingError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 14 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 14) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF2) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF1) {
    return ((uint64_t (*)(void))((char *)&loc_181C2EE00 + 4 * byte_1826609F5[v4]))();
  }
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_181C2EE34 + 4 * asc_1826609F0[v4]))();
}

uint64_t sub_181C2EE34(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C2EE3C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181C2EE44LL);
  }
  return result;
}

uint64_t sub_181C2EE50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181C2EE58LL);
  }
  *(_BYTE *)unint64_t result = a2 + 14;
  return result;
}

uint64_t sub_181C2EE5C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C2EE64(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HTTPParsedFields.ParsingError()
{
  return &type metadata for HTTPParsedFields.ParsingError;
}

unint64_t sub_181C2EE84()
{
  unint64_t result = qword_18C58D1C8;
  if (!qword_18C58D1C8)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182660A64, &type metadata for HTTPParsedFields.ParsingError);
    atomic_store(result, (unint64_t *)&qword_18C58D1C8);
  }

  return result;
}

unsigned __int8 *sub_181C2EEC8(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_181C2FBCC(a1, a2, a3);
}

unsigned __int8 *sub_181C2EEDC(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_181C2F3E4(a1, a2, a3);
}

unsigned __int8 *sub_181C2EEF0(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_181C2F698(a1, a2, a3);
}

unsigned __int8 *sub_181C2EF04(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_181C2F94C(a1, a2, a3);
}

unsigned __int8 *sub_181C2EF18(unsigned __int8 *a1, uint64_t a2, int64_t a3)
{
  return sub_181C30370(a1, a2, a3);
}

unsigned __int8 *sub_181C2EF2C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_181C1B9EC(a1, a2, a3);
}

unsigned __int8 *sub_181C2EF40(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_181C2FE48(a1, a2, a3);
}

unsigned __int8 *sub_181C2EF54(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_181C300F0(a1, a2, a3);
}

uint64_t sub_181C2EF68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181C2F000(a1, a2, a3, (uint64_t (*)(void *, uint64_t, uint64_t))sub_181C2FBCC);
}

unint64_t sub_181C2EF74()
{
  unint64_t result = qword_18C58D1D8;
  if (!qword_18C58D1D8)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C58D1D0);
    unint64_t result = MEMORY[0x186E12084](MEMORY[0x189619618], v1);
    atomic_store(result, (unint64_t *)&qword_18C58D1D8);
  }

  return result;
}

uint64_t sub_181C2EFC0(_BYTE *a1, uint64_t a2)
{
  return sub_181C6FD98(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_181C2EFDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181C2F108(a1, a2, a3, (uint64_t (*)(void *, uint64_t, uint64_t))sub_181C2F3E4);
}

uint64_t sub_181C2EFE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181C2F200(a1, a2, a3, (uint64_t (*)(void *, uint64_t, uint64_t))sub_181C2F698);
}

uint64_t sub_181C2EFF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181C2F2F4(a1, a2, a3, (uint64_t (*)(void *, uint64_t, uint64_t))sub_181C2F94C);
}

uint64_t sub_181C2F000( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, uint64_t))
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_18264EBF8();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000LL) == 0)
  {
    if ((v6 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = &v15;
    goto LABEL_7;
  }

  uint64_t v7 = sub_181C8B3F4();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000LL) != 0)
  {
    uint64_t v9 = (void *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v9 = (void *)sub_18264F228();
  }

uint64_t sub_181C2F0F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181C2F000(a1, a2, a3, (uint64_t (*)(void *, uint64_t, uint64_t))sub_181C30370);
}

uint64_t sub_181C2F0FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181C2F108(a1, a2, a3, (uint64_t (*)(void *, uint64_t, uint64_t))sub_181C1B9EC);
}

uint64_t sub_181C2F108( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, uint64_t))
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_18264EBF8();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000LL) == 0)
  {
    if ((v6 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = &v15;
    goto LABEL_7;
  }

  uint64_t v7 = sub_181C8B3F4();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000LL) != 0)
  {
    uint64_t v9 = (void *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v9 = (void *)sub_18264F228();
  }

uint64_t sub_181C2F1F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181C2F200(a1, a2, a3, (uint64_t (*)(void *, uint64_t, uint64_t))sub_181C2FE48);
}

uint64_t sub_181C2F200( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, uint64_t))
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_18264EBF8();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000LL) == 0)
  {
    if ((v6 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = &v15;
    goto LABEL_7;
  }

  uint64_t v7 = sub_181C8B3F4();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000LL) != 0)
  {
    uint64_t v9 = (void *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v9 = (void *)sub_18264F228();
  }

uint64_t sub_181C2F2E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181C2F2F4(a1, a2, a3, (uint64_t (*)(void *, uint64_t, uint64_t))sub_181C300F0);
}

uint64_t sub_181C2F2F4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, uint64_t))
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_18264EBF8();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000LL) == 0)
  {
    if ((v6 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = &v15;
    goto LABEL_7;
  }

  uint64_t v7 = sub_181C8B3F4();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000LL) != 0)
  {
    uint64_t v9 = (void *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v9 = (void *)sub_18264F228();
  }

unsigned __int8 *sub_181C2F3E4(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }

        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v19 = a3 + 48;
        }
        else {
          unsigned __int8 v19 = 58;
        }
        if (result)
        {
          LOBYTE(v8) = 0;
          uint64_t v20 = result + 1;
          do
          {
            unsigned int v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v22 = -87;
              }

              else
              {
                char v22 = -55;
              }
            }

            else
            {
              char v22 = -48;
            }

            int v23 = (char)v8 * (char)a3;
            char v24 = v23;
            int v8 = (char)v23 + (char)(v21 + v22);
            ++v20;
            --v16;
          }

          while (v16);
LABEL_48:
          int v13 = 0;
          unsigned __int8 v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }

        goto LABEL_71;
      }

unsigned __int8 *sub_181C2F698(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }

        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v19 = a3 + 48;
        }
        else {
          unsigned __int8 v19 = 58;
        }
        if (result)
        {
          LOWORD(v8) = 0;
          uint64_t v20 = result + 1;
          do
          {
            unsigned int v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                unsigned __int16 v12 = 0;
                int v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                char v22 = -87;
              }

              else
              {
                char v22 = -55;
              }
            }

            else
            {
              char v22 = -48;
            }

            int v23 = (__int16)v8 * (__int16)a3;
            __int16 v24 = v23;
            int v8 = (__int16)v23 + (v21 + v22);
            ++v20;
            --v16;
          }

          while (v16);
LABEL_48:
          int v13 = 0;
          unsigned __int16 v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }

        goto LABEL_71;
      }

unsigned __int8 *sub_181C2F94C(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }

        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v19 = a3 + 48;
        }
        else {
          unsigned __int8 v19 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          uint64_t v20 = result + 1;
          do
          {
            unsigned int v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v22 = -87;
              }

              else
              {
                char v22 = -55;
              }
            }

            else
            {
              char v22 = -48;
            }

            uint64_t v23 = (int)v8 * (uint64_t)(int)a3;
            unsigned __int8 v24 = v21 + v22;
            unsigned int v8 = v23 + v24;
            if (__OFADD__((_DWORD)v23, v24)) {
              goto LABEL_72;
            }
            ++v20;
            --v16;
          }

          while (v16);
LABEL_48:
          unsigned __int8 v13 = 0;
          unsigned int v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }

        goto LABEL_71;
      }

unsigned __int8 *sub_181C2FBCC(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }

          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }

          if (result)
          {
            uint64_t v9 = 0LL;
            for (uint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0LL;
                  }
                  char v12 = -87;
                }

                else
                {
                  char v12 = -55;
                }
              }

              else
              {
                char v12 = -48;
              }

              uint64_t v13 = v9 * a3;
              uint64_t v9 = v13 - (v11 + v12);
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }

          return 0LL;
        }

        return 0LL;
      }

      __break(1u);
      goto LABEL_65;
    }

    if (a2)
    {
      unsigned __int8 v22 = a3 + 48;
      unsigned __int8 v23 = a3 + 55;
      unsigned __int8 v24 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v22 = 58;
      }

      else
      {
        unsigned __int8 v24 = 97;
        unsigned __int8 v23 = 65;
      }

      if (result)
      {
        uint64_t v25 = 0LL;
        do
        {
          unsigned int v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24) {
                return 0LL;
              }
              char v27 = -87;
            }

            else
            {
              char v27 = -55;
            }
          }

          else
          {
            char v27 = -48;
          }

          uint64_t v28 = v25 * a3;
          uint64_t v25 = v28 + (v26 + v27);
          ++result;
          --v3;
        }

        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }

      return 0LL;
    }

    return 0LL;
  }

  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }

  uint64_t v14 = a2 - 1;
  if (a2 == 1) {
    return 0LL;
  }
  unsigned __int8 v15 = a3 + 48;
  unsigned __int8 v16 = a3 + 55;
  unsigned __int8 v17 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v15 = 58;
  }

  else
  {
    unsigned __int8 v17 = 97;
    unsigned __int8 v16 = 65;
  }

  if (!result) {
    return 0LL;
  }
  uint64_t v9 = 0LL;
  unsigned __int8 v18 = result + 1;
  do
  {
    unsigned int v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17) {
          return 0LL;
        }
        char v20 = -87;
      }

      else
      {
        char v20 = -55;
      }
    }

    else
    {
      char v20 = -48;
    }

    uint64_t v21 = v9 * a3;
    uint64_t v9 = v21 + (v19 + v20);
    ++v18;
    --v14;
  }

  while (v14);
  return (unsigned __int8 *)v9;
}

unsigned __int8 *sub_181C2FE48(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v14 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v15 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v16 = a3 + 55;
        }

        else
        {
          unsigned __int8 v15 = 97;
          unsigned __int8 v16 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v17 = a3 + 48;
        }
        else {
          unsigned __int8 v17 = 58;
        }
        if (result)
        {
          LOWORD(v8) = 0;
          unsigned __int8 v18 = result + 1;
          do
          {
            unsigned int v19 = *v18;
            if (v19 < 0x30 || v19 >= v17)
            {
              if (v19 < 0x41 || v19 >= v16)
              {
                unsigned __int16 v12 = 0;
                int v13 = 1;
                if (v19 < 0x61 || v19 >= v15) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                char v20 = -87;
              }

              else
              {
                char v20 = -55;
              }
            }

            else
            {
              char v20 = -48;
            }

            int v8 = (unsigned __int16)(v8 * a3) + (v19 + v20);
            if ((v8 & 0x10000) != 0) {
              goto LABEL_72;
            }
            ++v18;
            --v14;
          }

          while (v14);
LABEL_48:
          int v13 = 0;
          unsigned __int16 v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }

        goto LABEL_71;
      }

unsigned __int8 *sub_181C300F0(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }

        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v19 = a3 + 48;
        }
        else {
          unsigned __int8 v19 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          char v20 = result + 1;
          do
          {
            unsigned int v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v22 = -87;
              }

              else
              {
                char v22 = -55;
              }
            }

            else
            {
              char v22 = -48;
            }

            unint64_t v23 = v8 * (unint64_t)a3;
            if ((v23 & 0xFFFFFFFF00000000LL) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v24 = v21 + v22;
            unsigned int v8 = v23 + v24;
            if (__CFADD__((_DWORD)v23, v24)) {
              goto LABEL_72;
            }
            ++v20;
            --v16;
          }

          while (v16);
LABEL_48:
          unsigned __int8 v13 = 0;
          unsigned int v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }

        goto LABEL_71;
      }

unsigned __int8 *sub_181C30370(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }

          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }

          if (result)
          {
            unint64_t v9 = 0LL;
            for (uint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0LL;
                  }
                  char v12 = -87;
                }

                else
                {
                  char v12 = -55;
                }
              }

              else
              {
                char v12 = -48;
              }

              if (!is_mul_ok(v9, a3)) {
                return 0LL;
              }
              unint64_t v13 = v9 * a3;
              unsigned __int8 v14 = v11 + v12;
              BOOL v15 = v13 >= v14;
              unint64_t v9 = v13 - v14;
              if (!v15) {
                return 0LL;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }

          return 0LL;
        }

        return 0LL;
      }

      __break(1u);
      goto LABEL_66;
    }

    if (a2)
    {
      unsigned __int8 v25 = a3 + 48;
      unsigned __int8 v26 = a3 + 55;
      unsigned __int8 v27 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v25 = 58;
      }

      else
      {
        unsigned __int8 v27 = 97;
        unsigned __int8 v26 = 65;
      }

      if (result)
      {
        unint64_t v28 = 0LL;
        do
        {
          unsigned int v29 = *result;
          if (v29 < 0x30 || v29 >= v25)
          {
            if (v29 < 0x41 || v29 >= v26)
            {
              if (v29 < 0x61 || v29 >= v27) {
                return 0LL;
              }
              char v30 = -87;
            }

            else
            {
              char v30 = -55;
            }
          }

          else
          {
            char v30 = -48;
          }

          if (!is_mul_ok(v28, a3)) {
            return 0LL;
          }
          unint64_t v31 = v28 * a3;
          unsigned __int8 v32 = v29 + v30;
          BOOL v15 = __CFADD__(v31, v32);
          unint64_t v28 = v31 + v32;
          if (v15) {
            return 0LL;
          }
          ++result;
          --v3;
        }

        while (v3);
        return (unsigned __int8 *)v28;
      }

      return 0LL;
    }

    return 0LL;
  }

  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }

  uint64_t v16 = a2 - 1;
  if (a2 == 1) {
    return 0LL;
  }
  unsigned __int8 v17 = a3 + 48;
  unsigned __int8 v18 = a3 + 55;
  unsigned __int8 v19 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v17 = 58;
  }

  else
  {
    unsigned __int8 v19 = 97;
    unsigned __int8 v18 = 65;
  }

  if (!result) {
    return 0LL;
  }
  unint64_t v9 = 0LL;
  char v20 = result + 1;
  do
  {
    unsigned int v21 = *v20;
    if (v21 < 0x30 || v21 >= v17)
    {
      if (v21 < 0x41 || v21 >= v18)
      {
        if (v21 < 0x61 || v21 >= v19) {
          return 0LL;
        }
        char v22 = -87;
      }

      else
      {
        char v22 = -55;
      }
    }

    else
    {
      char v22 = -48;
    }

    if (!is_mul_ok(v9, a3)) {
      return 0LL;
    }
    unint64_t v23 = v9 * a3;
    unsigned __int8 v24 = v21 + v22;
    BOOL v15 = __CFADD__(v23, v24);
    unint64_t v9 = v23 + v24;
    if (v15) {
      return 0LL;
    }
    ++v20;
    --v16;
  }

  while (v16);
  return (unsigned __int8 *)v9;
}

uint64_t NWActivity.__allocating_init(domain:label:)(unint64_t a1, unint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  NWActivity.init(domain:label:)(a1, a2);
  return v4;
}

void NWActivity.parentActivity.setter(uint64_t a1)
{
  if (a1)
  {
    nw_activity_set_parent_activity(*(void **)(v1 + 16), *(void **)(a1 + 16));
    swift_release();
  }

  else
  {
    nw_activity_set_parent_activity(*(void **)(v1 + 16), 0LL);
  }

Swift::Void __swiftcall NWActivity.submitMetrics(_:name:)(Swift::OpaquePointer _, Swift::String name)
{
  if (sub_181C31610((uint64_t)_._rawValue))
  {
    uint64_t v3 = *(void *)(v2 + 16);
    sub_18264EACC();
    nw_activity_submit_metrics(v3);
    swift_unknownObjectRelease();
    swift_release();
  }

  else
  {
    sub_18264F324();
    __break(1u);
  }

void NWActivity.complete(reason:)(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (*(_BYTE *)(a1 + 24) == 1)
  {
    if (v4 >= (uint64_t)0xFFFFFFFF80000000LL)
    {
      if (v4 <= 0x7FFFFFFF)
      {
        unsigned __int8 v6 = *(void **)(v1 + 16);
        uint64_t v7 = sub_18264EACC();
        nw_activity_complete_with_reason_and_underlying_error_string(v6, 3u, v7 + 32, v4);
        swift_release();
        return;
      }

      goto LABEL_33;
    }

BOOL static NWActivity.ReportingStrategy.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t NWActivity.ReportingStrategy.hash(into:)()
{
  return sub_18264F654();
}

uint64_t NWActivity.ReportingStrategy.hashValue.getter()
{
  return sub_18264F684();
}

uint64_t NWActivity.CompletionReason.description.getter()
{
  if (*((unsigned __int8 *)v0 + 24) >= 2u)
  {
    uint64_t v2 = *v0;
    if (v0[1] | v0[2] | *v0)
    {
      if (*(_OWORD *)(v0 + 1) == 0LL && v2 == 2) {
        int v4 = 3;
      }
      else {
        int v4 = 4;
      }
      if (v2 == 1 && *(_OWORD *)(v0 + 1) == 0LL) {
        int v1 = 2;
      }
      else {
        int v1 = v4;
      }
    }

    else
    {
      int v1 = 1;
    }
  }

  else
  {
    int v1 = 3;
  }

  nw_activity_completion_reason_to_string(v1);
  return sub_18264EB80();
}

id static NWActivity.CompletionReason.failure(withUnderlyingError:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = objc_msgSend(a1, sel_domain);
  uint64_t v5 = sub_18264EA48();
  uint64_t v7 = v6;

  id result = objc_msgSend(a1, sel_code);
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v7;
  *(void *)(a2 + 16) = result;
  *(_BYTE *)(a2 + 24) = 1;
  return result;
}

uint64_t static NWActivity.CompletionReason.failure(withUnderlyingError:)@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = *a1;
  if (*((_BYTE *)a1 + 4))
  {
    uint64_t result = sub_18264EA48();
    uint64_t v6 = result;
    uint64_t v8 = v7;
  }

  else
  {
    uint64_t v6 = sub_18264EA48();
    uint64_t v8 = v4;
    uint64_t result = sub_18264E958();
    int v3 = result;
  }

  *(void *)a2 = v6;
  *(void *)(a2 + 8) = v8;
  *(void *)(a2 + 16) = v3;
  *(_BYTE *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_181C30A48()
{
  if (*((unsigned __int8 *)v0 + 24) >= 2u)
  {
    uint64_t v2 = *v0;
    if (v0[1] | v0[2] | *v0)
    {
      if (*(_OWORD *)(v0 + 1) == 0LL && v2 == 2) {
        int v4 = 3;
      }
      else {
        int v4 = 4;
      }
      if (v2 == 1 && *(_OWORD *)(v0 + 1) == 0LL) {
        int v1 = 2;
      }
      else {
        int v1 = v4;
      }
    }

    else
    {
      int v1 = 1;
    }
  }

  else
  {
    int v1 = 3;
  }

  nw_activity_completion_reason_to_string(v1);
  return sub_18264EB80();
}

uint64_t NWActivity.nw.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  a1[3] = swift_getObjectType();
  *a1 = v3;
  return swift_unknownObjectRetain();
}

uint64_t NWActivity.domain.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t NWActivity.label.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t NWActivity.reportingStrategy.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = nw_activity_get_reporting_strategy(*(void **)(v1 + 16));
  else {
    char v4 = result;
  }
  *a1 = v4;
  return result;
}

void sub_181C30B20(unsigned __int8 *a1, uint64_t a2)
{
}

void NWActivity.reportingStrategy.setter(unsigned __int8 *a1)
{
}

void (*NWActivity.reportingStrategy.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)a1 = v3;
  unsigned int reporting_strategy = nw_activity_get_reporting_strategy(v3);
  if (reporting_strategy >= 4) {
    char v5 = 0;
  }
  else {
    char v5 = reporting_strategy;
  }
  *(_BYTE *)(a1 + 8) = v5;
  return sub_181C30B80;
}

void sub_181C30B80(uint64_t a1)
{
}

uint64_t NWActivity.parentActivity.getter()
{
  uint64_t v1 = (uint64_t)nw_activity_copy_parent_activity(*(void **)(v0 + 16));
  if (v1)
  {
    v3[3] = swift_getObjectType();
    v3[0] = v1;
    uint64_t v1 = swift_allocObject();
    NWActivity.init(_:)((uint64_t)v3);
  }

  return v1;
}

uint64_t sub_181C30BF0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (uint64_t)nw_activity_copy_parent_activity(*(void **)(*(void *)a1 + 16LL));
  uint64_t v4 = result;
  if (result)
  {
    _OWORD v5[3] = swift_getObjectType();
    v5[0] = v4;
    type metadata accessor for NWActivity();
    uint64_t v4 = swift_allocObject();
    uint64_t result = NWActivity.init(_:)((uint64_t)v5);
  }

  *a2 = v4;
  return result;
}

uint64_t NWActivity.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  NWActivity.init(_:)(a1);
  return v2;
}

void (*NWActivity.parentActivity.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = *(void **)(v1 + 16);
  a1[1] = (uint64_t)v3;
  id v4 = nw_activity_copy_parent_activity(v3);
  if (v4)
  {
    id v5 = v4;
    v8[3] = swift_getObjectType();
    v8[0] = v5;
    uint64_t v6 = swift_allocObject();
    NWActivity.init(_:)((uint64_t)v8);
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  *a1 = v6;
  return sub_181C30D18;
}

void sub_181C30D18(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if ((a2 & 1) != 0)
  {
    if (v2) {
      uint64_t v3 = *(void **)(v2 + 16);
    }
    else {
      uint64_t v3 = 0LL;
    }
    id v4 = (void *)a1[1];
    goto LABEL_8;
  }

  id v4 = (void *)a1[1];
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 16);
LABEL_8:
    nw_activity_set_parent_activity(v4, v3);
    swift_release();
    return;
  }

  nw_activity_set_parent_activity(v4, 0LL);
}

uint64_t NWActivity.isRetry.getter()
{
  return nw_activity_get_is_retry(*(void **)(v0 + 16));
}

uint64_t NWActivity.isActivated.getter()
{
  return nw_activity_is_activated(*(void **)(v0 + 16));
}

uint64_t NWActivity.isReported.getter()
{
  return nw_activity_is_selected_for_reporting(*(void **)(v0 + 16));
}

uint64_t NWActivity.isComplete.getter()
{
  return nw_activity_is_complete(*(void **)(v0 + 16));
}

uint64_t NWActivity.completionReason.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = nw_activity_get_completion_reason(*(void **)(v1 + 16));
  uint64_t v4 = (result - 2);
  else {
    uint64_t v5 = 0LL;
  }
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = v5;
  *(_BYTE *)(a1 + 24) = 2;
  return result;
}

uint64_t NWActivity.duration.getter()
{
  return 1000000000000000LL * nw_activity_get_duration(*(void **)(v0 + 16));
}

uint64_t NWActivity.token.getter()
{
  uint64_t v3 = *MEMORY[0x1895F89C0];
  __int128 v2 = 0uLL;
  nw_activity_get_token(*(void **)(v0 + 16), &v2);
  return sub_18264E664();
}

uint64_t NWActivity.activationTime.getter()
{
  return nw_activity_get_activation_time(*(void **)(v0 + 16));
}

uint64_t NWActivity.init(domain:label:)(unint64_t a1, unint64_t a2)
{
  if ((a1 & 0x8000000000000000LL) != 0 || HIDWORD(a1) || (a2 & 0x8000000000000000LL) != 0 || HIDWORD(a2))
  {
    uint64_t result = sub_18264F318();
    __break(1u);
  }

  else
  {
    v2[2] = nw_activity_create(a1, a2);
    v2[3] = a1;
    v2[4] = a2;
    return (uint64_t)v2;
  }

  return result;
}

uint64_t NWActivity.__allocating_init(retryOf:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = nw_activity_create_retry(*(void **)(a1 + 16));
  __int128 v4 = *(_OWORD *)(a1 + 24);
  swift_release();
  *(_OWORD *)(v2 + 24) = v4;
  return v2;
}

void *NWActivity.init(retryOf:)(uint64_t a1)
{
  v1[2] = nw_activity_create_retry(*(void **)(a1 + 16));
  v1[3] = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  swift_release();
  v1[4] = v3;
  return v1;
}

uint64_t NWActivity.__allocating_init(token:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  NWActivity.init(token:)(a1);
  return v2;
}

uint64_t NWActivity.init(token:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v17 = *MEMORY[0x1895F89C0];
  *(void *)&__int128 v16 = sub_18264E670();
  WORD4(v16) = v4;
  BYTE10(v16) = v5;
  BYTE11(v16) = v6;
  BYTE12(v16) = v7;
  BYTE13(v16) = v8;
  BYTE14(v16) = v9;
  HIBYTE(v16) = v10;
  int v11 = nw_activity_create_from_token(&v16);
  if (v11)
  {
    uint32_t v12 = v11;
    uint64_t v13 = sub_18264E688();
    unsigned __int8 v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL);
    swift_unknownObjectRetain();
    v14(a1, v13);
    v2[3] = 0LL;
    v2[4] = 0LL;
    v2[2] = v12;
    swift_unknownObjectRelease();
    return (uint64_t)v2;
  }

  else
  {
    uint64_t result = sub_18264F324();
    __break(1u);
  }

  return result;
}

uint64_t NWActivity.init(_:)(uint64_t a1)
{
  if (swift_dynamicCast())
  {
    v1[2] = v6;
    uint64_t v3 = (void *)swift_unknownObjectRetain();
    v1[3] = nw_activity_get_domain(v3);
    unsigned int label = nw_activity_get_label(v6);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_2(a1);
    v1[4] = label;
    return (uint64_t)v1;
  }

  else
  {
    uint64_t result = sub_18264F324();
    __break(1u);
  }

  return result;
}

Swift::Void __swiftcall NWActivity.activate()()
{
}

xpc_object_t sub_181C3131C(uint64_t a1)
{
  xpc_object_t v2 = xpc_array_create(0LL, 0LL);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = a1 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_181BF9894(v4, (uint64_t)v11);
      sub_181BF9894((uint64_t)v11, (uint64_t)v10);
      if (swift_dynamicCast())
      {
        uint64_t v5 = sub_18264EACC();
        swift_bridgeObjectRelease();
        xpc_object_t v6 = xpc_string_create((const char *)(v5 + 32));
        swift_release();
        if (!v6) {
          goto LABEL_3;
        }
        goto LABEL_25;
      }

      sub_181BF9894((uint64_t)v11, (uint64_t)v10);
      sub_181BF9894((uint64_t)v11, (uint64_t)v10);
      if (swift_dynamicCast())
      {
        xpc_object_t v6 = xpc_uint64_create(value);
        if (!v6) {
          goto LABEL_3;
        }
        goto LABEL_25;
      }

      sub_181BF9894((uint64_t)v11, (uint64_t)v10);
      if (swift_dynamicCast())
      {
LABEL_8:
        xpc_object_t v6 = xpc_int64_create(value);
        if (!v6) {
          goto LABEL_3;
        }
        goto LABEL_25;
      }

      sub_181BF9894((uint64_t)v11, (uint64_t)v10);
      if (swift_dynamicCast())
      {
        xpc_object_t v6 = xpc_double_create(*(double *)&value);
        if (!v6) {
          goto LABEL_3;
        }
        goto LABEL_25;
      }

      sub_181BF9894((uint64_t)v11, (uint64_t)v10);
      if (swift_dynamicCast())
      {
        xpc_object_t v6 = xpc_BOOL_create(value);
        if (!v6) {
          goto LABEL_3;
        }
LABEL_25:
        xpc_array_append_value(v2, v6);
        swift_unknownObjectRelease();
        goto LABEL_3;
      }

      sub_181BF9894((uint64_t)v11, (uint64_t)v10);
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D1F0);
      if (swift_dynamicCast())
      {
        uint64_t v7 = ((uint64_t (*)())sub_181C3131C)();
      }

      else
      {
        sub_181BF9894((uint64_t)v11, (uint64_t)v10);
        __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D1F8);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_3;
        }
        uint64_t v7 = ((uint64_t (*)())sub_181C31610)();
      }

      xpc_object_t v6 = (xpc_object_t)v7;
      swift_bridgeObjectRelease();
      if (v6) {
        goto LABEL_25;
      }
LABEL_3:
      __swift_destroy_boxed_opaque_existential_2((uint64_t)v11);
      v4 += 32LL;
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        return v2;
      }
    }
  }

  return v2;
}

xpc_object_t sub_181C31610(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0LL, 0LL, 0LL);
  uint64_t v21 = a1 + 64;
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  xpc_object_t xdict = v2;
  int64_t v22 = (unint64_t)(v3 + 63) >> 6;
  xpc_object_t result = (xpc_object_t)swift_bridgeObjectRetain();
  int64_t v7 = 0LL;
  if (!v5) {
    goto LABEL_8;
  }
LABEL_6:
  unint64_t v8 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  unint64_t v9 = v8 | (v7 << 6);
  while (2)
  {
    uint64_t v10 = *(void *)(a1 + 56);
    int v11 = (void *)(*(void *)(a1 + 48) + 16 * v9);
    uint64_t v12 = v11[1];
    *(void *)&__int128 v26 = *v11;
    *((void *)&v26 + 1) = v12;
    sub_181BF9894(v10 + 32 * v9, (uint64_t)v27);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_181C27F04((uint64_t)&v26, (uint64_t)v28);
      if (!v28[1])
      {
        swift_release();
        return xdict;
      }

      sub_181C275FC(&v29, &v26);
      sub_181BF9894((uint64_t)&v26, (uint64_t)v25);
      if (swift_dynamicCast())
      {
        uint64_t v16 = sub_18264EACC();
        swift_bridgeObjectRelease();
        xpc_object_t v17 = xpc_string_create((const char *)(v16 + 32));
        swift_release();
        if (v17) {
          goto LABEL_36;
        }
        goto LABEL_5;
      }

      sub_181BF9894((uint64_t)&v26, (uint64_t)v25);
      if (swift_dynamicCast())
      {
LABEL_34:
        xpc_object_t v18 = xpc_int64_create(value);
        goto LABEL_35;
      }

      sub_181BF9894((uint64_t)&v26, (uint64_t)v25);
      if (swift_dynamicCast())
      {
        xpc_object_t v18 = xpc_uint64_create(value);
        goto LABEL_35;
      }

      sub_181BF9894((uint64_t)&v26, (uint64_t)v25);
      sub_181BF9894((uint64_t)&v26, (uint64_t)v25);
      if (swift_dynamicCast())
      {
        xpc_object_t v18 = xpc_double_create(*(double *)&value);
        goto LABEL_35;
      }

      sub_181BF9894((uint64_t)&v26, (uint64_t)v25);
      if (swift_dynamicCast())
      {
        xpc_object_t v18 = xpc_BOOL_create(value);
LABEL_35:
        xpc_object_t v17 = v18;
        if (v18) {
          goto LABEL_36;
        }
        goto LABEL_5;
      }

      sub_181BF9894((uint64_t)&v26, (uint64_t)v25);
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D1F0);
      if (swift_dynamicCast())
      {
        uint64_t v20 = (uint64_t)sub_181C3131C(value);
      }

      else
      {
        sub_181BF9894((uint64_t)&v26, (uint64_t)v25);
        __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D1F8);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_5;
        }
        uint64_t v20 = sub_181C31610();
      }

      xpc_object_t v17 = (xpc_object_t)v20;
      swift_bridgeObjectRelease();
      if (v17)
      {
LABEL_36:
        uint64_t v19 = sub_18264EACC();
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRelease();
        xpc_dictionary_set_value(xdict, (const char *)(v19 + 32), v17);
        swift_unknownObjectRelease_n();
        __swift_destroy_boxed_opaque_existential_2((uint64_t)&v26);
        xpc_object_t result = (xpc_object_t)swift_release();
        if (v5) {
          goto LABEL_6;
        }
        goto LABEL_8;
      }

uint64_t NWActivity.deinit()
{
  return v0;
}

uint64_t NWActivity.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_181C31B18(uint64_t *a1, uint64_t *a2)
{
  return _s7Network10NWActivityC2eeoiySbAC_ACtFZ_0(*a1, *a2);
}

uint64_t NWActivity.description.getter()
{
  id v1 = objc_msgSend(*(id *)(v0 + 16), sel_description);
  uint64_t v2 = sub_18264EA48();

  return v2;
}

uint64_t NWActivity.debugDescription.getter()
{
  id v1 = objc_msgSend(*(id *)(v0 + 16), sel_description);
  uint64_t v2 = sub_18264EA48();

  return v2;
}

void NWActivity.playgroundDescription.getter(uint64_t *a1@<X8>)
{
  id v3 = objc_msgSend(*(id *)(v1 + 16), sel_description);
  uint64_t v4 = sub_18264EA48();
  uint64_t v6 = v5;

  a1[3] = MEMORY[0x189617FA8];
  *a1 = v4;
  a1[1] = v6;
}

void sub_181C31C2C(uint64_t *a1@<X8>)
{
  id v3 = objc_msgSend(*(id *)(*(void *)v1 + 16), sel_description);
  uint64_t v4 = sub_18264EA48();
  uint64_t v6 = v5;

  a1[3] = MEMORY[0x189617FA8];
  *a1 = v4;
  a1[1] = v6;
}

uint64_t NWConnection.startActivity(_:)(uint64_t a1)
{
  return sub_181C31CA8(a1, (void (*)(uint64_t))nw_connection_start_activity);
}

uint64_t NWConnection.endActivity(_:)(uint64_t a1)
{
  return sub_181C31CA8(a1, (void (*)(uint64_t))nw_connection_end_activity);
}

uint64_t sub_181C31CA8(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = *(void *)(v2 + 16);
  swift_getObjectType();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D1E0);
  swift_dynamicCast();
  a2(v4);
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t NSURLSessionTask._nwActivity.getter()
{
  id v1 = objc_msgSend(v0, sel__nw_activity);
  if (!v1) {
    return 0LL;
  }
  id v2 = v1;
  _OWORD v5[3] = swift_getObjectType();
  v5[0] = v2;
  type metadata accessor for NWActivity();
  uint64_t v3 = swift_allocObject();
  NWActivity.init(_:)((uint64_t)v5);
  return v3;
}

id sub_181C31DBC@<X0>(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel__nw_activity);
  uint64_t v4 = (uint64_t)result;
  if (result)
  {
    _OWORD v5[3] = swift_getObjectType();
    v5[0] = v4;
    type metadata accessor for NWActivity();
    uint64_t v4 = swift_allocObject();
    id result = (id)NWActivity.init(_:)((uint64_t)v5);
  }

  *a2 = v4;
  return result;
}

uint64_t NSURLSessionTask._nwActivity.setter(uint64_t a1)
{
  if (a1)
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D1E0);
    else {
      uint64_t v2 = 0LL;
    }
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  objc_msgSend(v1, sel_set_nw_activity_, v2);
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t (*NSURLSessionTask._nwActivity.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  id v3 = objc_msgSend(v1, sel__nw_activity);
  if (v3)
  {
    _OWORD v5[3] = swift_getObjectType();
    v5[0] = v3;
    type metadata accessor for NWActivity();
    id v3 = (id)swift_allocObject();
    NWActivity.init(_:)((uint64_t)v5);
  }

  *a1 = v3;
  return sub_181C31F64;
}

uint64_t sub_181C31F64(uint64_t *a1, char a2)
{
  if ((a2 & 1) == 0) {
    return NSURLSessionTask._nwActivity.setter(*a1);
  }
  uint64_t v2 = swift_retain();
  NSURLSessionTask._nwActivity.setter(v2);
  return swift_release();
}

uint64_t _s7Network10NWActivityC16CompletionReasonO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v7 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  int v9 = *(unsigned __int8 *)(a2 + 24);
  if (!*(_BYTE *)(a1 + 24))
  {
    if (!*(_BYTE *)(a2 + 24))
    {
      sub_181C32588(*(void *)a1, v2, v4, 0);
      sub_181C32588(v7, v6, v8, 0);
      return v3 == v7 && v2 == v6;
    }

    goto LABEL_46;
  }

  if (v5 != 1)
  {
    uint64_t v15 = v4 | v2;
    if (!(v4 | v2 | v3))
    {
      if (v9 != 2 || (v8 | v6 | v7) != 0) {
        goto LABEL_46;
      }
      sub_181C32588(0LL, 0LL, 0LL, 2);
      uint64_t v17 = 0LL;
      goto LABEL_45;
    }

    if (v3 != 1 || v15 != 0)
    {
      if (v3 != 2 || v15)
      {
        if (v9 != 2 || v7 != 3 || v8 | v6) {
          goto LABEL_46;
        }
        sub_181C32588(3LL, 0LL, 0LL, 2);
        uint64_t v17 = 3LL;
      }

      else
      {
        if (v9 != 2 || v7 != 2 || v8 | v6) {
          goto LABEL_46;
        }
        sub_181C32588(2LL, 0LL, 0LL, 2);
        uint64_t v17 = 2LL;
      }

uint64_t _s7Network10NWActivityC2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18264E688();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](v4);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)&v14 - v9;
  if (nw_activity_is_activated(*(void **)(a1 + 16))
    && nw_activity_is_activated(*(void **)(a2 + 16)))
  {
    NWActivity.token.getter();
    NWActivity.token.getter();
    char v11 = sub_18264E658();
    char v12 = *(void (**)(char *, uint64_t))(v5 + 8);
    v12(v8, v4);
    v12(v10, v4);
  }

  else
  {
    char v11 = 0;
  }

  return v11 & 1;
}

uint64_t type metadata accessor for NWActivity()
{
  return objc_opt_self();
}

unint64_t sub_181C32390()
{
  unint64_t result = qword_18C58D1E8;
  if (!qword_18C58D1E8)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWActivity.ReportingStrategy,  &type metadata for NWActivity.ReportingStrategy);
    atomic_store(result, (unint64_t *)&qword_18C58D1E8);
  }

  return result;
}

uint64_t sub_181C323D4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = NWActivity.reportingStrategy.getter(&v3);
  *a1 = v3;
  return result;
}

void sub_181C32414(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*(void *)a1) {
    char v3 = *(void **)(*(void *)a1 + 16LL);
  }
  else {
    char v3 = 0LL;
  }
  nw_activity_set_parent_activity(*(void **)(v2 + 16), v3);
}

uint64_t sub_181C3243C()
{
  uint64_t v0 = swift_retain();
  return NSURLSessionTask._nwActivity.setter(v0);
}

uint64_t method lookup function for NWActivity()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWActivity.__allocating_init(domain:label:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of NWActivity.__allocating_init(retryOf:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of NWActivity.__allocating_init(token:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of NWActivity.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t storeEnumTagSinglePayload for NWActivity.ReportingStrategy( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_181C324DC + 4 * byte_182660AD5[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_181C32510 + 4 * byte_182660AD0[v4]))();
}

uint64_t sub_181C32510(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C32518(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181C32520LL);
  }
  return result;
}

uint64_t sub_181C3252C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181C32534LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_181C32538(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C32540(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWActivity.ReportingStrategy()
{
  return &type metadata for NWActivity.ReportingStrategy;
}

uint64_t sub_181C3255C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for NWActivity.CompletionReason(uint64_t a1)
{
  return sub_181C32588(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t sub_181C32588(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for NWActivity.CompletionReason(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(_BYTE *)(a2 + 24);
  sub_181C3255C(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for NWActivity.CompletionReason(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(_BYTE *)(a2 + 24);
  sub_181C3255C(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  char v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  sub_181C32588(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for NWActivity.CompletionReason(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(_BYTE *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  char v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  sub_181C32588(v5, v7, v6, v8);
  return a1;
}

uint64_t sub_181C326B4(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_181C326CC(uint64_t result, unsigned int a2)
{
  uint64_t v2 = a2 - 2;
  if (a2 >= 2)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    LOBYTE(a2) = 2;
    *(void *)uint64_t result = v2;
  }

  *(_BYTE *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for NWActivity.CompletionReason()
{
  return &type metadata for NWActivity.CompletionReason;
}

uint64_t NWProtocolOptions.deinit()
{
  return v0;
}

uint64_t NWProtocol.deinit()
{
  return v0;
}

BOOL static NWProtocolDefinition.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return nw_protocol_definition_is_equal(*(nw_protocol_definition_t *)(a1 + 32), *(nw_protocol_definition_t *)(a2 + 32));
}

uint64_t _s7Network20NWProtocolDefinitionC4nameSSvg_0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NWProtocolDefinition.deinit()
{
  return v0;
}

uint64_t NWProtocolDefinition.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

BOOL sub_181C327B4(uint64_t a1, uint64_t a2)
{
  return nw_protocol_definition_is_equal( *(nw_protocol_definition_t *)(*(void *)a1 + 32LL),  *(nw_protocol_definition_t *)(*(void *)a2 + 32LL));
}

uint64_t sub_181C327D8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16LL);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NWProtocolOptions.nw.getter()
{
  return swift_unknownObjectRetain();
}

void *sub_181C32810()
{
  uint64_t result = sub_181C3282C();
  off_18C58D200 = result;
  return result;
}

void *sub_181C3282C()
{
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18265D150;
  *(void *)(inited + 32) = type metadata accessor for NWProtocolIP.Options();
  *(void *)(inited + 40) = type metadata accessor for NWProtocolQUIC.Options();
  *(void *)(inited + 48) = type metadata accessor for NWProtocolTCP.Options();
  *(void *)(inited + 56) = type metadata accessor for NWProtocolTLS.Options();
  *(void *)(inited + 64) = type metadata accessor for NWProtocolUDP.Options();
  *(void *)(inited + 72) = type metadata accessor for NWProtocolWebSocket.Options();
  *(void *)(inited + 80) = type metadata accessor for NWProtocolFramer.Options();
  *(void *)(inited + 88) = type metadata accessor for NWProtocolHTTP.Options();
  uint64_t v1 = type metadata accessor for NWProtocolHTTPEncoding.Options();
  uint64_t result = sub_181BC50E4((void *)1, 9LL, 1, (void *)inited);
  result[2] = 9LL;
  result[12] = v1;
  return result;
}

void sub_181C32928()
{
}

uint64_t sub_181C32984()
{
  uint64_t result = sub_181C329A0();
  qword_18C58D208 = result;
  return result;
}

uint64_t sub_181C329A0()
{
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_18265D150;
  *(void *)(v0 + 32) = type metadata accessor for NWProtocolIP.Metadata();
  *(void *)(v0 + 40) = type metadata accessor for NWProtocolQUIC.Metadata();
  *(void *)(v0 + 48) = type metadata accessor for NWProtocolTCP.Metadata();
  *(void *)(v0 + 56) = type metadata accessor for NWProtocolTLS.Metadata();
  *(void *)(v0 + 64) = type metadata accessor for NWProtocolUDP.Metadata();
  *(void *)(v0 + 72) = type metadata accessor for NWProtocolWebSocket.Metadata();
  *(void *)(v0 + 80) = type metadata accessor for NWProtocolFramer.Message();
  *(void *)(v0 + 88) = type metadata accessor for NWProtocolHTTP.Metadata();
  return v0;
}

void sub_181C32A4C()
{
}

uint64_t NWProtocol.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NWProtocolDefinition()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolDefinition()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWProtocolDefinition.debugDescription.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104LL))();
}

uint64_t type metadata accessor for NWProtocolOptions()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolOptions()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for NWProtocolMetadata()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolMetadata()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for NWProtocol()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocol()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_181C32B74()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D2F0);
  else {
    uint64_t v1 = 0LL;
  }
  if (v1) {
    uint64_t v2 = (uint64_t *)&unk_18C58A250;
  }
  else {
    uint64_t v2 = (uint64_t *)&unk_18C58D2F8;
  }
  return __swift_instantiateConcreteTypeFromMangledName(v2);
}

uint64_t sub_181C32BC0()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D2D8);
  else {
    uint64_t v1 = 0LL;
  }
  if (v1) {
    uint64_t v2 = (uint64_t *)&unk_18C58A250;
  }
  else {
    uint64_t v2 = (uint64_t *)&unk_18C58D2E0;
  }
  return __swift_instantiateConcreteTypeFromMangledName(v2);
}

void *sub_181C32C0C(uint64_t a1)
{
  return sub_181C32C44(a1, &qword_18C58B1B8, &qword_18C58D208);
}

void *sub_181C32C28(uint64_t a1)
{
  return sub_181C32C44(a1, &qword_18C58B1B0, &off_18C58D200);
}

void *sub_181C32C44(uint64_t a1, void *a2, void *a3)
{
  if (*a2 != -1LL) {
    goto LABEL_13;
  }
  while (1)
  {
    uint64_t v5 = *a3;
    uint64_t v6 = *(void *)(*a3 + 16LL);
    if (!v6) {
      return 0LL;
    }
    a3 = *(void **)(v5 + 32);
    uint64_t v7 = (uint64_t (*)(uint64_t))a3[11];
    swift_bridgeObjectRetain();
    if ((v7(a1) & 1) != 0)
    {
LABEL_8:
      swift_bridgeObjectRelease();
      return a3;
    }

    uint64_t v8 = 0LL;
    uint64_t v9 = v6 - 1;
    while (1)
    {
      if (v9 == v8)
      {
        swift_bridgeObjectRelease();
        return 0LL;
      }

      a3 = *(void **)(v5 + 8 * v8++ + 40);
    }

    __break(1u);
LABEL_13:
    swift_once();
  }

uint64_t NWProtocolFramer.Options.__allocating_init(definition:)(uint64_t a1)
{
  return sub_181C3363C(a1, (uint64_t (*)(uint64_t))nw_framer_create_options);
}

uint64_t sub_181C32D2C(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t NWProtocolFramer.Definition.__allocating_init(implementation:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  NWProtocolFramer.Definition.init(implementation:)(a1, a2);
  return v4;
}

void *NWProtocolFramer.Definition.init(implementation:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  v14[4] = sub_181C3348C;
  v14[5] = v5;
  v14[0] = MEMORY[0x1895F87A8];
  v14[1] = 1107296256LL;
  v14[2] = sub_181C33244;
  v14[3] = &block_descriptor_9;
  uint64_t v6 = _Block_copy(v14);
  swift_retain();
  swift_release();
  uint64_t v7 = sub_18264EACC();
  swift_bridgeObjectRelease();
  nw_protocol_definition_t definition = nw_framer_create_definition((const char *)(v7 + 32), 0, v6);
  swift_release();
  _Block_release(v6);
  v2[4] = definition;
  id v9 = objc_msgSend((id)swift_unknownObjectRetain(), sel_description);
  uint64_t v10 = sub_18264EA48();
  uint64_t v12 = v11;

  swift_unknownObjectRelease();
  v2[2] = v10;
  v2[3] = v12;
  swift_release();
  return v2;
}

uint64_t sub_181C32EF0(nw_framer *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16);
  swift_unknownObjectRetain();
  uint64_t v8 = swift_retain();
  uint64_t v9 = v7(v8, a2, a3);
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = v9;
  v10[3] = a3;
  v10[4] = v6;
  __int128 v26 = sub_181C34E50;
  unsigned __int8 v27 = v10;
  uint64_t v11 = MEMORY[0x1895F87A8];
  uint64_t v22 = MEMORY[0x1895F87A8];
  uint64_t v23 = 1107296256LL;
  unsigned __int8 v24 = sub_181C33244;
  unsigned __int8 v25 = &block_descriptor_32;
  uint64_t v12 = _Block_copy(&v22);
  swift_retain();
  swift_unknownObjectRetain();
  swift_release();
  nw_framer_set_input_handler(a1, v12);
  _Block_release(v12);
  uint64_t v13 = (void *)swift_allocObject();
  _OWORD v13[2] = v9;
  v13[3] = a3;
  v13[4] = v6;
  __int128 v26 = sub_181C34E9C;
  unsigned __int8 v27 = v13;
  uint64_t v22 = v11;
  uint64_t v23 = 1107296256LL;
  unsigned __int8 v24 = sub_181C33338;
  unsigned __int8 v25 = &block_descriptor_38;
  uint64_t v14 = _Block_copy(&v22);
  swift_retain();
  swift_unknownObjectRetain();
  swift_release();
  nw_framer_set_output_handler(a1, v14);
  _Block_release(v14);
  uint64_t v15 = (void *)swift_allocObject();
  void v15[2] = v9;
  v15[3] = a3;
  v15[4] = v6;
  __int128 v26 = sub_181C34EAC;
  unsigned __int8 v27 = v15;
  uint64_t v22 = v11;
  uint64_t v23 = 1107296256LL;
  unsigned __int8 v24 = sub_181BBF440;
  unsigned __int8 v25 = &block_descriptor_44_0;
  uint64_t v16 = _Block_copy(&v22);
  swift_retain();
  swift_unknownObjectRetain();
  swift_release();
  nw_framer_set_wakeup_handler(a1, v16);
  _Block_release(v16);
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = v9;
  v17[3] = a3;
  void v17[4] = v6;
  __int128 v26 = sub_181C34EF8;
  unsigned __int8 v27 = v17;
  uint64_t v22 = v11;
  uint64_t v23 = 1107296256LL;
  unsigned __int8 v24 = sub_181C333B8;
  unsigned __int8 v25 = &block_descriptor_50;
  xpc_object_t v18 = _Block_copy(&v22);
  swift_retain();
  swift_unknownObjectRetain();
  swift_release();
  nw_framer_set_stop_handler(a1, v18);
  _Block_release(v18);
  uint64_t v19 = (void *)swift_allocObject();
  v19[2] = v9;
  v19[3] = a3;
  v19[4] = v6;
  __int128 v26 = sub_181C34F74;
  unsigned __int8 v27 = v19;
  uint64_t v22 = v11;
  uint64_t v23 = 1107296256LL;
  unsigned __int8 v24 = sub_181BBF440;
  unsigned __int8 v25 = &block_descriptor_56;
  uint64_t v20 = _Block_copy(&v22);
  swift_retain();
  swift_unknownObjectRetain();
  swift_release();
  nw_framer_set_cleanup_handler(a1, v20);
  _Block_release(v20);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(a3 + 24))(&v22, v6, a2, a3);
  swift_unknownObjectRelease();
  swift_release();
  if ((_BYTE)v22) {
    return 2LL;
  }
  else {
    return 1LL;
  }
}

uint64_t sub_181C33244(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  uint64_t v3 = v1(v2);
  swift_release();
  swift_unknownObjectRelease();
  return v3;
}

uint64_t sub_181C33298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t ObjectType = swift_getObjectType();
  type metadata accessor for NWProtocolFramer.Message();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a2;
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 40);
  swift_unknownObjectRetain();
  v14(a7, v13, a3, a4, ObjectType, a6);
  return swift_release();
}

uint64_t sub_181C33338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v9(a2, a3, a4, a5);
  swift_release();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_181C333B8(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  LOBYTE(v1) = v1(v2);
  swift_release();
  swift_unknownObjectRelease();
  return v1 & 1;
}

uint64_t NWProtocolFramer.Definition.deinit()
{
  return v0;
}

uint64_t NWProtocolFramer.Definition.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_181C3345C(void *a1)
{
  return nw_protocol_options_is_framer(a1);
}

uint64_t NWProtocolFramer.Options.init(definition:)(uint64_t a1)
{
  return sub_181C336B0(a1, (uint64_t (*)(uint64_t))nw_framer_create_options);
}

uint64_t sub_181C3347C()
{
  return swift_deallocObject();
}

uint64_t sub_181C3348C(nw_framer *a1)
{
  return sub_181C32EF0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

double sub_181C334AC@<D0>(_OWORD *a1@<X8>)
{
  return sub_181C3389C((uint64_t (*)(uint64_t, uint64_t))nw_framer_options_copy_object_value, a1);
}

uint64_t sub_181C334B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181C33920(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))nw_framer_options_set_object_value);
}

uint64_t sub_181C334C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58D300);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void (*sub_181C3350C(void *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  uint64_t v7 = (char *)malloc(0x58uLL);
  *a1 = v7;
  uint64_t v8 = v7 + 32;
  *((void *)v7 + 9) = a3;
  *((void *)v7 + 10) = v3;
  *((void *)v7 + 8) = a2;
  uint64_t v9 = *(nw_protocol_options **)(v3 + 16);
  uint64_t v10 = sub_18264EACC();
  id v11 = nw_framer_options_copy_object_value(v9, (const char *)(v10 + 32));
  swift_release();
  if (v11)
  {
    sub_18264F0F0();
    swift_unknownObjectRelease();
  }

  else
  {
    *uint64_t v8 = 0u;
    *((_OWORD *)v7 + 3) = 0u;
  }

  sub_181C335D0((uint64_t)v8, (uint64_t)v7);
  return sub_181C335C4;
}

void sub_181C335C4(uint64_t *a1, char a2)
{
}

uint64_t sub_181C335D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58D300);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

BOOL sub_181C3361C(nw_protocol_metadata *a1)
{
  return nw_protocol_metadata_is_framer_message(a1);
}

uint64_t NWProtocolFramer.Message.__allocating_init(definition:)(uint64_t a1)
{
  return sub_181C3363C(a1, (uint64_t (*)(uint64_t))nw_framer_protocol_create_message);
}

uint64_t sub_181C3363C(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = swift_unknownObjectRetain();
  uint64_t v5 = a2(v4);
  swift_unknownObjectRelease();
  swift_release();
  *(void *)(v3 + 16) = v5;
  return v3;
}

uint64_t NWProtocolFramer.Message.init(definition:)(uint64_t a1)
{
  return sub_181C336B0(a1, (uint64_t (*)(uint64_t))nw_framer_protocol_create_message);
}

uint64_t sub_181C336B0(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = swift_unknownObjectRetain();
  uint64_t v5 = a2(v4);
  swift_unknownObjectRelease();
  swift_release();
  *(void *)(v2 + 16) = v5;
  return v2;
}

uint64_t NWProtocolFramer.Message.__allocating_init(instance:)()
{
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = (nw_framer *)swift_unknownObjectRetain();
  nw_framer_message_t v2 = nw_framer_message_create(v1);
  swift_unknownObjectRelease();
  swift_release();
  *(void *)(v0 + 16) = v2;
  return v0;
}

uint64_t NWProtocolFramer.Message.init(instance:)()
{
  uint64_t v1 = (nw_framer *)swift_unknownObjectRetain();
  nw_framer_message_t v2 = nw_framer_message_create(v1);
  swift_unknownObjectRelease();
  swift_release();
  *(void *)(v0 + 16) = v2;
  return v0;
}

double sub_181C337B8@<D0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X3>, _OWORD *a3@<X8>)
{
  uint64_t v5 = *(void *)(*(void *)a1 + 16LL);
  uint64_t v6 = sub_18264EACC();
  uint64_t v7 = a2(v5, v6 + 32);
  swift_release();
  if (v7)
  {
    sub_18264F0F0();
    swift_unknownObjectRelease();
  }

  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }

  return result;
}

uint64_t sub_181C33838( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t (*a5)(_BYTE *, uint64_t, uint64_t))
{
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  sub_181C334C4(a1, (uint64_t)v9);
  swift_bridgeObjectRetain();
  return a5(v9, v6, v7);
}

double sub_181C33890@<D0>(_OWORD *a1@<X8>)
{
  return sub_181C3389C((uint64_t (*)(uint64_t, uint64_t))nw_framer_message_copy_object_value, a1);
}

double sub_181C3389C@<D0>(uint64_t (*a1)(uint64_t, uint64_t)@<X2>, _OWORD *a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = sub_18264EACC();
  uint64_t v7 = a1(v5, v6 + 32);
  swift_release();
  if (v7)
  {
    sub_18264F0F0();
    swift_unknownObjectRelease();
  }

  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }

  return result;
}

uint64_t sub_181C33914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181C33920(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))nw_framer_message_set_object_value);
}

uint64_t sub_181C33920(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *(void *)(v4 + 16);
  sub_181C334C4(a1, (uint64_t)v16);
  uint64_t v8 = v17;
  if (v17)
  {
    uint64_t v9 = __swift_project_boxed_opaque_existential_2(v16, v17);
    uint64_t v10 = *(void *)(v8 - 8);
    MEMORY[0x1895F8858](v9);
    uint64_t v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *))(v10 + 16))(v12);
    uint64_t v13 = sub_18264F4E0();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v8);
    __swift_destroy_boxed_opaque_existential_2((uint64_t)v16);
  }

  else
  {
    uint64_t v13 = 0LL;
  }

  uint64_t v14 = sub_18264EACC();
  swift_bridgeObjectRelease();
  a4(v7, v14 + 32, v13);
  swift_unknownObjectRelease();
  sub_181BDA0F0(a1, (uint64_t *)&unk_18C58D300);
  return swift_release();
}

void (*sub_181C33A50(void *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  uint64_t v7 = (char *)malloc(0x58uLL);
  *a1 = v7;
  uint64_t v8 = v7 + 32;
  *((void *)v7 + 9) = a3;
  *((void *)v7 + 10) = v3;
  *((void *)v7 + 8) = a2;
  uint64_t v9 = *(nw_protocol_metadata **)(v3 + 16);
  uint64_t v10 = sub_18264EACC();
  id v11 = nw_framer_message_copy_object_value(v9, (const char *)(v10 + 32));
  swift_release();
  if (v11)
  {
    sub_18264F0F0();
    swift_unknownObjectRelease();
  }

  else
  {
    *uint64_t v8 = 0u;
    *((_OWORD *)v7 + 3) = 0u;
  }

  sub_181C335D0((uint64_t)v8, (uint64_t)v7);
  return sub_181C33B08;
}

void sub_181C33B08(uint64_t *a1, char a2)
{
}

void sub_181C33B14(uint64_t *a1, char a2, void (*a3)(void *, uint64_t, uint64_t))
{
  uint64_t v4 = (void *)*a1;
  if ((a2 & 1) != 0)
  {
    uint64_t v5 = v4[9];
    uint64_t v6 = v4[8];
    sub_181C334C4(*a1, (uint64_t)(v4 + 4));
    swift_bridgeObjectRetain();
    a3(v4 + 4, v6, v5);
    sub_181BDA0F0((uint64_t)v4, (uint64_t *)&unk_18C58D300);
  }

  else
  {
    uint64_t v7 = v4[9];
    uint64_t v8 = v4[8];
    swift_bridgeObjectRetain();
    a3(v4, v8, v7);
  }

  free(v4);
}

uint64_t NWProtocolFramer.Message.deinit()
{
  return v0;
}

uint64_t NWProtocolFramer.Instance.debugDescription.getter()
{
  id v1 = objc_msgSend(*(id *)(v0 + 16), sel_description);
  uint64_t v2 = sub_18264EA48();

  return v2;
}

Swift::Void __swiftcall NWProtocolFramer.Instance.markReady()()
{
}

void NWProtocolFramer.Instance.markFailed(error:)(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 4) == 255LL)
  {
    uint64_t v2 = *(nw_framer **)(v1 + 16);
    int v3 = 0;
LABEL_5:
    nw_framer_mark_failed_with_error(v2, v3);
    return;
  }

  int v4 = *(_DWORD *)a1;
  if (*(_BYTE *)(a1 + 4))
  {
    uint64_t v2 = *(nw_framer **)(v1 + 16);
    int v3 = v4;
    goto LABEL_5;
  }

  uint64_t v5 = *(nw_framer **)(v1 + 16);
  swift_unknownObjectRetain();
  int v6 = sub_18264E958();
  nw_framer_mark_failed_with_error(v5, v6);
  swift_unknownObjectRelease();
}

uint64_t NWProtocolFramer.Instance.parseInput(minimumIncompleteLength:maximumLength:parse:)( size_t a1, size_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(nw_framer **)(v4 + 16);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a3;
  *(void *)(v10 + 24) = a4;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_181C33E4C;
  *(void *)(v11 + 24) = v10;
  v15[4] = sub_181BD639C;
  v15[5] = v11;
  v15[0] = MEMORY[0x1895F87A8];
  v15[1] = 1107296256LL;
  void v15[2] = sub_181C33E80;
  v15[3] = &block_descriptor_9;
  uint64_t v12 = _Block_copy(v15);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  BOOL v13 = nw_framer_parse_input(v9, a1, a2, 0LL, v12);
  swift_unknownObjectRelease();
  _Block_release(v12);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_181C33E04( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, void, uint64_t))
{
  if (a1) {
    uint64_t v4 = a1 + a2;
  }
  else {
    uint64_t v4 = 0LL;
  }
  return a4(a1, v4, 0LL, a3);
}

uint64_t sub_181C33E3C()
{
  return swift_deallocObject();
}

uint64_t sub_181C33E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_181C33E70()
{
  return swift_deallocObject();
}

uint64_t sub_181C33E80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 32))(a2, a3, a4);
}

void NWProtocolFramer.Instance.deliverInput(data:message:isComplete:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_181C33F04()
{
  uint64_t v9 = v3;
  __int16 v10 = v4;
  char v11 = BYTE2(v4);
  char v12 = BYTE3(v4);
  char v13 = BYTE4(v4);
  size_t v5 = BYTE6(v4);
  char v14 = BYTE5(v4);
  int v6 = *(nw_framer **)(v1 + 16);
  uint64_t v7 = *(nw_protocol_metadata **)(v0 + 16);
  swift_retain();
  swift_retain();
  nw_framer_deliver_input(v6, (const uint8_t *)&v9, v5, v7, v2 & 1);
  swift_release();
  return swift_release();
}

BOOL NWProtocolFramer.Instance.deliverInputNoCopy(length:message:isComplete:)( size_t input_length, uint64_t a2, char a3)
{
  return nw_framer_deliver_input_no_copy( *(nw_framer_t *)(v3 + 16),  input_length,  *(nw_framer_message_t *)(a2 + 16),  a3 & 1);
}

Swift::Void __swiftcall NWProtocolFramer.Instance.passThroughInput()()
{
}

uint64_t NWProtocolFramer.Instance.parseOutput(minimumIncompleteLength:maximumLength:parse:)( size_t a1, size_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(nw_framer **)(v4 + 16);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a3;
  *(void *)(v10 + 24) = a4;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_181C33E4C;
  *(void *)(v11 + 24) = v10;
  v15[4] = sub_181BDA300;
  v15[5] = v11;
  v15[0] = MEMORY[0x1895F87A8];
  v15[1] = 1107296256LL;
  void v15[2] = sub_181C33E80;
  v15[3] = &block_descriptor_19;
  char v12 = _Block_copy(v15);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  BOOL v13 = nw_framer_parse_output(v9, a1, a2, 0LL, v12);
  swift_unknownObjectRelease();
  _Block_release(v12);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

void NWProtocolFramer.Instance.writeOutput(data:)()
{
  uint64_t v1 = *(nw_framer **)(v0 + 16);
  swift_unknownObjectRetain();
  char v2 = (void *)sub_18264E5EC();
  output_data = (dispatch_data_s *)NWCreateDispatchDataFromNSData(v2, v3);

  if (output_data)
  {
    nw_framer_write_output_data(v1, output_data);
    swift_unknownObjectRelease();
  }

  else
  {
    __break(1u);
  }

void NWProtocolFramer.Instance.writeOutput(discontiguousData:)()
{
  uint64_t v1 = *(nw_framer **)(v0 + 16);
  swift_unknownObjectRetain();
  char v2 = (dispatch_data_s *)sub_18264E988();
  nw_framer_write_output_data(v1, v2);
  swift_unknownObjectRelease();
}

void NWProtocolFramer.Instance.writeOutput<A>(data:)(nw_framer *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58C0C0);
  uint64_t v6 = MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void *)(a2 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](v6);
  char v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = MEMORY[0x1895F8858](v10);
  uint64_t v15 = (char *)&v33 - v14;
  MEMORY[0x1895F8858](v13);
  uint64_t v17 = (char *)&v33 - v16;
  uint64_t v18 = sub_18264E9A0();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1895F8858](v18);
  uint64_t v21 = (char *)&v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = *(void (**)(char *, nw_framer *, uint64_t))(v9 + 16);
  v22(v17, a1, a2);
  int v23 = swift_dynamicCast();
  unsigned __int8 v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
  if (v23)
  {
    v24(v8, 0LL, 1LL, v18);
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v8, v18);
    unsigned __int8 v25 = *(nw_framer **)(v34 + 16);
    swift_unknownObjectRetain();
    __int128 v26 = (dispatch_data_s *)sub_18264E988();
    nw_framer_write_output_data(v25, v26);
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    return;
  }

  uint64_t v27 = v34;
  v24(v8, 1LL, 1LL, v18);
  sub_181BDA0F0((uint64_t)v8, (uint64_t *)&unk_18C58C0C0);
  v22(v15, a1, a2);
  if (swift_dynamicCast())
  {
    a2 = v35;
    unint64_t v28 = v36;
    a1 = *(nw_framer **)(v27 + 16);
    swift_unknownObjectRetain();
    char v12 = (char *)sub_18264E5EC();
    uint64_t v22 = (void (*)(char *, nw_framer *, uint64_t))NWCreateDispatchDataFromNSData(v12, v29);

    if (v22) {
      goto LABEL_7;
    }
    __break(1u);
  }

  v22(v12, a1, a2);
  a2 = sub_18264E628();
  unint64_t v28 = v30;
  a1 = *(nw_framer **)(v27 + 16);
  swift_unknownObjectRetain();
  unint64_t v31 = (void *)sub_18264E5EC();
  uint64_t v22 = (void (*)(char *, nw_framer *, uint64_t))NWCreateDispatchDataFromNSData(v31, v32);

  if (!v22)
  {
    __break(1u);
    return;
  }

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NWProtocolFramer.Instance.writeOutputNoCopy(length:)( Swift::Int length)
{
  if (!nw_framer_write_output_no_copy(*(nw_framer_t *)(v1 + 16), length))
  {
    sub_181BBE220();
    swift_allocError();
    *(_DWORD *)uint64_t v2 = 22;
    *(_BYTE *)(v2 + 4) = 0;
    swift_willThrow();
  }

Swift::Void __swiftcall NWProtocolFramer.Instance.passThroughOutput()()
{
}

void NWProtocolFramer.Instance.scheduleWakeup(wakeupTime:)(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 8) & 1) != 0) {
    uint64_t v2 = -1LL;
  }
  else {
    uint64_t v2 = *(void *)a1;
  }
  nw_framer_schedule_wakeup(*(nw_framer_t *)(v1 + 16), v2);
}

uint64_t NWProtocolFramer.Instance.async(execute:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(nw_framer **)(v2 + 16);
  v6[4] = a1;
  v6[5] = a2;
  v6[0] = MEMORY[0x1895F87A8];
  v6[1] = 1107296256LL;
  _OWORD v6[2] = sub_181C32D2C;
  v6[3] = &block_descriptor_22;
  uint64_t v4 = _Block_copy(v6);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_framer_async(v3, v4);
  _Block_release(v4);
  return swift_unknownObjectRelease();
}

uint64_t NWProtocolFramer.Instance.remote.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_181C347D8((uint64_t (*)(void))nw_framer_copy_remote_endpoint, a1);
}

uint64_t NWProtocolFramer.Instance.local.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_181C347D8((uint64_t (*)(void))nw_framer_copy_local_endpoint, a1);
}

uint64_t sub_181C347D8@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (nw_endpoint *)a1(*(void *)(v2 + 16));
  return sub_181BDA308(v4, a2);
}

uint64_t NWProtocolFramer.Instance.parameters.getter()
{
  nw_parameters_t v1 = nw_framer_copy_parameters(*(nw_framer_t *)(v0 + 16));
  type metadata accessor for NWParameters();
  uint64_t v2 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A220);
  uint64_t v3 = swift_allocObject();
  *(_DWORD *)(v3 + 24) = 0;
  *(void *)(v3 + 16) = v1;
  *(void *)(v2 + 16) = v3;
  return v2;
}

uint64_t NWProtocolFramer.Instance.options.getter()
{
  nw_protocol_options_t v1 = nw_framer_copy_options(*(nw_framer_t *)(v0 + 16));
  type metadata accessor for NWProtocolFramer.Options();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v1;
  return result;
}

uint64_t NWProtocolFramer.Instance.prependApplicationProtocol(options:)(uint64_t a1)
{
  return sub_181C348D8(a1, (uint64_t (*)(void, void))nw_framer_prepend_application_protocol);
}

uint64_t NWProtocolFramer.Instance.prependApplicationProtocolUnsafe(options:)(uint64_t a1)
{
  return sub_181C348D8(a1, (uint64_t (*)(void, void))nw_framer_prepend_application_protocol_unsafe);
}

uint64_t sub_181C348D8(uint64_t a1, uint64_t (*a2)(void, void))
{
  uint64_t result = a2(*(void *)(v2 + 16), *(void *)(a1 + 16));
  if (!(_DWORD)result)
  {
    sub_181BBE220();
    swift_allocError();
    *(_DWORD *)uint64_t v4 = 22;
    *(_BYTE *)(v4 + 4) = 0;
    return swift_willThrow();
  }

  return result;
}

uint64_t NWProtocolFramer.Instance.deinit()
{
  return v0;
}

uint64_t NWProtocolFramer.Instance.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

BOOL static NWProtocolFramer.StartResult.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t NWProtocolFramer.StartResult.hash(into:)()
{
  return sub_18264F654();
}

uint64_t NWProtocolFramer.StartResult.hashValue.getter()
{
  return sub_18264F684();
}

uint64_t NWProtocolFramer.deinit()
{
  return v0;
}

uint64_t NWProtocolFramer.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_181C34A20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t result = sub_18264E484();
  char v12 = (const uint8_t *)result;
  if (result)
  {
    uint64_t result = sub_18264E4A8();
    if (__OFSUB__(a1, result))
    {
LABEL_11:
      __break(1u);
      goto LABEL_12;
    }

    v12 += a1 - result;
  }

  BOOL v13 = __OFSUB__(a2, a1);
  int64_t v14 = a2 - a1;
  if (v13)
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t result = sub_18264E49C();
  if (!v12)
  {
LABEL_12:
    __break(1u);
    return result;
  }

  if (result >= v14) {
    size_t v15 = v14;
  }
  else {
    size_t v15 = result;
  }
  nw_framer_deliver_input(*(nw_framer_t *)(a4 + 16), v12, v15, *(nw_framer_message_t *)(a5 + 16), a6 & 1);
  swift_release();
  return swift_release();
}

uint64_t sub_181C34AD4()
{
  return swift_deallocObject();
}

uint64_t sub_181C34AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    uint64_t v4 = a1 + a2;
  }
  else {
    uint64_t v4 = 0LL;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v3 + 16))(a1, v4, 0LL, a3);
}

uint64_t sub_181C34B18()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for NWProtocolFramer.Options()
{
  return objc_opt_self();
}

unint64_t sub_181C34B4C()
{
  unint64_t result = qword_18C58D320;
  if (!qword_18C58D320)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWProtocolFramer.StartResult,  &type metadata for NWProtocolFramer.StartResult);
    atomic_store(result, (unint64_t *)&qword_18C58D320);
  }

  return result;
}

double sub_181C34B90@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_181C337B8(a1, (uint64_t (*)(uint64_t, uint64_t))nw_framer_options_copy_object_value, a2);
}

uint64_t sub_181C34BAC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return sub_181C33838(a1, a2, a3, a4, (uint64_t (*)(_BYTE *, uint64_t, uint64_t))sub_181C334B8);
}

uint64_t sub_181C34BC8()
{
  return 0LL;
}

double sub_181C34BD8@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_181C337B8(a1, (uint64_t (*)(uint64_t, uint64_t))nw_framer_message_copy_object_value, a2);
}

uint64_t sub_181C34BF4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return sub_181C33838(a1, a2, a3, a4, (uint64_t (*)(_BYTE *, uint64_t, uint64_t))sub_181C33914);
}

uint64_t sub_181C34C10()
{
  return 0LL;
}

uint64_t type metadata accessor for NWProtocolFramer()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for NWProtocolFramer.Definition()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolFramer.Definition()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWProtocolFramer.Definition.__allocating_init(implementation:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t method lookup function for NWProtocolFramer.Options()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWProtocolFramer.Options.subscript.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112LL))();
}

uint64_t dispatch thunk of NWProtocolFramer.Options.subscript.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120LL))();
}

uint64_t dispatch thunk of NWProtocolFramer.Options.subscript.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128LL))();
}

uint64_t type metadata accessor for NWProtocolFramer.Message()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolFramer.Message()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWProtocolFramer.Message.__allocating_init(definition:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of NWProtocolFramer.Message.__allocating_init(instance:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of NWProtocolFramer.Message.subscript.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120LL))();
}

uint64_t dispatch thunk of NWProtocolFramer.Message.subscript.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128LL))();
}

uint64_t dispatch thunk of NWProtocolFramer.Message.subscript.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136LL))();
}

uint64_t type metadata accessor for NWProtocolFramer.Instance()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolFramer.Instance()
{
  return swift_lookUpClassMethod();
}

ValueMetadata *type metadata accessor for NWProtocolFramer.Instance.WakeupTime()
{
  return &type metadata for NWProtocolFramer.Instance.WakeupTime;
}

uint64_t storeEnumTagSinglePayload for NWProtocolFramer.StartResult( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_181C34D8C + 4 * byte_182660E35[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181C34DC0 + 4 * byte_182660E30[v4]))();
}

uint64_t sub_181C34DC0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C34DC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181C34DD0LL);
  }
  return result;
}

uint64_t sub_181C34DDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181C34DE4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_181C34DE8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C34DF0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWProtocolFramer.StartResult()
{
  return &type metadata for NWProtocolFramer.StartResult;
}

uint64_t dispatch thunk of static NWProtocolFramerImplementation.label.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of NWProtocolFramerImplementation.init(framer:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of NWProtocolFramerImplementation.start(framer:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of NWProtocolFramerImplementation.handleInput(framer:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of NWProtocolFramerImplementation.handleOutput(framer:message:messageLength:isComplete:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 40))();
}

uint64_t dispatch thunk of NWProtocolFramerImplementation.wakeup(framer:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of NWProtocolFramerImplementation.stop(framer:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of NWProtocolFramerImplementation.cleanup(framer:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t sub_181C34E50()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v2, ObjectType, v1);
}

uint64_t sub_181C34E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_181C33298(a1, a2, a3, a4, v4[2], v4[3], v4[4]);
}

uint64_t sub_181C34EAC()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v2, ObjectType, v1);
}

uint64_t sub_181C34EF8()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 56))(v2, ObjectType, v1) & 1;
}

uint64_t objectdestroy_28Tm()
{
  return swift_deallocObject();
}

uint64_t sub_181C34F74()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 64))(v2, ObjectType, v1);
}

uint64_t sub_181C35004(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_181C275FC((_OWORD *)a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v2;
    *uint64_t v2 = 0x8000000000000000LL;
    sub_181C8FBC8(v9, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v8;
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_18264F30C();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(a2, v5);
  }

  else
  {
    sub_181BDA0F0(a1, (uint64_t *)&unk_18C58D300);
    sub_181C8C9C0(a2, v9);
    uint64_t v7 = sub_18264F30C();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(a2, v7);
    return sub_181BDA0F0((uint64_t)v9, (uint64_t *)&unk_18C58D300);
  }

uint64_t sub_181C350E8(uint64_t a1, void *a2)
{
  int v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C370);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for NWActorDiscoveryMechanism(0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1LL) == 1)
  {
    sub_181BDA0F0(a1, &qword_18C58C370);
    sub_181C8CCAC(a2, (uint64_t)v8);
    sub_181BC920C((uint64_t)a2, (uint64_t (*)(void))type metadata accessor for NWActorID);
    return sub_181BDA0F0((uint64_t)v8, &qword_18C58C370);
  }

  else
  {
    sub_181BC928C(a1, (uint64_t)v11, type metadata accessor for NWActorDiscoveryMechanism);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v16 = *v3;
    uint64_t *v3 = 0x8000000000000000LL;
    sub_181C90028((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v16;
    swift_bridgeObjectRelease();
    return sub_181BC920C((uint64_t)a2, (uint64_t (*)(void))type metadata accessor for NWActorID);
  }

uint64_t sub_181C35250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C390);
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for NWActorSystem.ServerRole();
  MEMORY[0x1895F8858](v11);
  BOOL v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a1, 1LL) == 1)
  {
    sub_181BDA0F0(a1, &qword_18C58C390);
    sub_181C8CDE0(a2, a3, (uint64_t)v10);
    swift_bridgeObjectRelease();
    return sub_181BDA0F0((uint64_t)v10, &qword_18C58C390);
  }

  else
  {
    sub_181BC928C(a1, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for NWActorSystem.ServerRole);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    sub_181C90198((uint64_t)v13, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v4 = v18;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

uint64_t sub_181C353B8(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58CD40);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C45E590);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1LL, v9) == 1)
  {
    sub_181BDA0F0(a1, (uint64_t *)&unk_18C58CD40);
    unint64_t v13 = sub_181C8C190(a2);
    if ((v14 & 1) != 0)
    {
      unint64_t v15 = v13;
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v17 = *v3;
      uint64_t v22 = *v3;
      uint64_t *v3 = 0x8000000000000000LL;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_181C91D98();
        uint64_t v17 = v22;
      }

      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 32))( v8,  *(void *)(v17 + 56) + *(void *)(v10 + 72) * v15,  v9);
      sub_181C4CC80(v15, v17);
      uint64_t *v3 = v17;
      swift_bridgeObjectRelease();
      uint64_t v18 = 0LL;
    }

    else
    {
      uint64_t v18 = 1LL;
    }

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, v18, 1LL, v9);
    return sub_181BDA0F0((uint64_t)v8, (uint64_t *)&unk_18C58CD40);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    char v19 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v22 = *v3;
    uint64_t *v3 = 0x8000000000000000LL;
    sub_181C902E8((uint64_t)v12, a2, v19);
    uint64_t *v3 = v22;
    return swift_bridgeObjectRelease();
  }

uint64_t sub_181C35594(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58D5B0);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E780);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1LL, v9) == 1)
  {
    sub_181BDA0F0(a1, (uint64_t *)&unk_18C58D5B0);
    sub_181C8CF18(a2, (uint64_t)v8);
    uint64_t v13 = sub_18264E688();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL))(a2, v13);
    return sub_181BDA0F0((uint64_t)v8, (uint64_t *)&unk_18C58D5B0);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v3;
    uint64_t *v3 = 0x8000000000000000LL;
    sub_181C90550((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v18;
    swift_bridgeObjectRelease();
    uint64_t v16 = sub_18264E688();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8LL))(a2, v16);
  }

uint64_t sub_181C35724()
{
  uint64_t v0 = sub_18264E934();
  __swift_allocate_value_buffer(v0, qword_18C58D390);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_18C58D390);
  if (qword_18C58B270 != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_project_value_buffer(v0, (uint64_t)qword_18C5A4A60);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t NWActorSystemResultHandler.onReturn<A>(value:)(uint64_t a1, uint64_t a2)
{
  v3[11] = a2;
  v3[12] = v2;
  v3[10] = a1;
  swift_conformsToProtocol();
  v3[13] = swift_conformsToProtocol();
  v3[14] = type metadata accessor for ReplyEnvelope();
  v3[15] = swift_task_alloc();
  uint64_t v4 = sub_18264F30C();
  v3[16] = v4;
  v3[17] = *(void *)(v4 - 8);
  v3[18] = swift_task_alloc();
  v3[19] = type metadata accessor for NWFileSerializationContext(0LL);
  v3[20] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_181C35888()
{
  uint64_t v2 = v0[19];
  uint64_t v1 = v0[20];
  uint64_t v3 = v0[12];
  uint64_t v29 = sub_181C35CB0();
  char v28 = v4;
  uint64_t v5 = (int *)type metadata accessor for NWActorSystemResultHandler();
  sub_181BCD38C(v3 + v5[7], v1);
  sub_181BC9248( v3 + v5[6],  v1 + *(int *)(v2 + 20),  (uint64_t (*)(void))type metadata accessor for NWActorID);
  sub_18264E40C();
  swift_allocObject();
  uint64_t v6 = sub_18264E400();
  v0[21] = v6;
  if (qword_18C58B268 != -1) {
    swift_once();
  }
  uint64_t v8 = v0[19];
  uint64_t v7 = v0[20];
  uint64_t v10 = v0[17];
  uint64_t v9 = v0[18];
  uint64_t v11 = v0[16];
  uint64_t v30 = v0[12];
  uint64_t v31 = v0[11];
  uint64_t v12 = __swift_project_value_buffer(v11, (uint64_t)qword_18C5A4A48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v9, v12, v11);
  v0[5] = v8;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v0 + 2);
  sub_181BC9248(v7, (uint64_t)boxed_opaque_existential_0, type metadata accessor for NWFileSerializationContext);
  char v14 = (void (*)(uint64_t *, void))sub_18264E3F4();
  sub_181C35004((uint64_t)(v0 + 2), v9);
  v14(v0 + 6, 0LL);
  sub_181BC920C(v7, type metadata accessor for NWFileSerializationContext);
  uint64_t v15 = sub_181C5409C(v6, *(unsigned __int8 *)(v30 + v5[9]), v31);
  v0[22] = v15;
  v0[23] = v16;
  uint64_t v17 = v15;
  unint64_t v18 = v16;
  char v19 = (int *)v0[14];
  uint64_t v20 = v0[15];
  uint64_t v21 = v0[12];
  uint64_t v22 = sub_18264E688();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16LL))(v20, v21, v22);
  int v23 = (uint64_t *)(v20 + v19[5]);
  *int v23 = v17;
  v23[1] = v18;
  uint64_t v24 = v20 + v19[6];
  *(void *)uint64_t v24 = 0LL;
  *(void *)(v24 + 8) = 0LL;
  *(void *)(v24 + 16) = 0LL;
  *(void *)(v24 + 24) = 0x3000000000000000LL;
  *(_BYTE *)(v24 + 32) = -1;
  uint64_t v25 = v20 + v19[7];
  *(void *)uint64_t v25 = v29;
  *(_BYTE *)(v25 + 8) = v28 & 1;
  __swift_project_boxed_opaque_existential_2((void *)(v21 + v5[5]), *(void *)(v21 + v5[5] + 24));
  sub_181BCD4AC(v17, v18);
  __int128 v26 = (void *)swift_task_alloc();
  v0[24] = (uint64_t)v26;
  *__int128 v26 = v0;
  v26[1] = sub_181C35B48;
  return sub_181C49B30(v0[15]);
}

uint64_t sub_181C35B48()
{
  *(void *)(*(void *)v1 + 200LL) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_181C35BAC()
{
  uint64_t v1 = *(void *)(v0 + 176);
  unint64_t v2 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 120);
  swift_release();
  sub_181BCD4F0(v1, v2);
  sub_181BC920C(v3, (uint64_t (*)(void))type metadata accessor for ReplyEnvelope);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181C35C30()
{
  uint64_t v1 = *(void *)(v0 + 176);
  unint64_t v2 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 120);
  swift_release();
  sub_181BCD4F0(v1, v2);
  sub_181BC920C(v3, (uint64_t (*)(void))type metadata accessor for ReplyEnvelope);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181C35CB0()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C3A0);
  MEMORY[0x1895F8858](v1);
  uint64_t v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_18264F294();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = type metadata accessor for NWActorSystemResultHandler();
  sub_181C37AE8(v0 + *(int *)(v11 + 32), (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1LL, v4) == 1)
  {
    sub_181BDA0F0((uint64_t)v3, &qword_18C58C3A0);
    return 0LL;
  }

  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v3, v4);
  sub_18264F27C();
  sub_18264F288();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v8, v4);
  uint64_t result = sub_18264F720();
  uint64_t v16 = 1000 * result;
  if ((unsigned __int128)(result * (__int128)1000LL) >> 64 != (1000 * result) >> 63)
  {
    __break(1u);
    goto LABEL_11;
  }

  double v17 = (double)v15 * 1.0e-14;
  if ((~*(void *)&v17 & 0x7FF0000000000000LL) == 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if (v17 <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  if (v17 >= 9.22337204e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v12 = v16 + (uint64_t)v17;
  if (!__OFADD__(v16, (uint64_t)v17))
  {
    v13(v10, v4);
    return v12;
  }

uint64_t type metadata accessor for NWActorSystemResultHandler()
{
  uint64_t result = qword_18C58D438;
  if (!qword_18C58D438) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t NWActorSystemResultHandler.onReturnVoid()()
{
  v1[2] = v0;
  v1[3] = type metadata accessor for ReplyEnvelope();
  v1[4] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_181C35F34()
{
  uint64_t v2 = (int *)v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = v0[2];
  uint64_t v4 = sub_181C35CB0();
  char v6 = v5;
  uint64_t v7 = sub_18264E688();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL))(v1, v3, v7);
  *(_OWORD *)(v1 + v2[5]) = xmmword_18265D190;
  uint64_t v8 = v1 + v2[6];
  *(void *)uint64_t v8 = 0LL;
  *(void *)(v8 + 8) = 0LL;
  *(void *)(v8 + 16) = 0LL;
  *(void *)(v8 + 24) = 0x3000000000000000LL;
  *(_BYTE *)(v8 + 32) = -1;
  uint64_t v9 = v1 + v2[7];
  *(void *)uint64_t v9 = v4;
  *(_BYTE *)(v9 + 8) = v6 & 1;
  uint64_t v10 = type metadata accessor for NWActorSystemResultHandler();
  __swift_project_boxed_opaque_existential_2( (void *)(v3 + *(int *)(v10 + 20)),  *(void *)(v3 + *(int *)(v10 + 20) + 24));
  uint64_t v11 = (void *)swift_task_alloc();
  v0[5] = v11;
  void *v11 = v0;
  v11[1] = sub_181C36020;
  return sub_181C49B30(v0[4]);
}

uint64_t sub_181C36020()
{
  *(void *)(*(void *)v1 + 48LL) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_181C36084()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181C360CC()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NWActorSystemResultHandler.onThrow<A>(error:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[21] = a3;
  v4[22] = v3;
  v4[19] = a1;
  v4[20] = a2;
  v4[23] = type metadata accessor for ReplyEnvelope();
  _BYTE v4[24] = swift_task_alloc();
  v4[25] = *(void *)(a2 - 8);
  v4[26] = swift_task_alloc();
  v4[27] = swift_task_alloc();
  v4[28] = swift_task_alloc();
  v4[29] = type metadata accessor for NWActorSystemResultHandler();
  v4[30] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_181C36208()
{
  v71[1] = *MEMORY[0x1895F89C0];
  uint64_t v70 = sub_181C35CB0();
  char v69 = v1;
  if (qword_18C58B1C0 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 152);
  v68 = (__int128 *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 240);
  uint64_t v4 = *(void *)(v0 + 224);
  uint64_t v5 = *(void *)(v0 + 200);
  uint64_t v6 = *(void *)(v0 + 176);
  uint64_t v7 = *(void *)(v0 + 160);
  uint64_t v8 = sub_18264E934();
  __swift_project_value_buffer(v8, (uint64_t)qword_18C58D390);
  sub_181BC9248(v6, v3, (uint64_t (*)(void))type metadata accessor for NWActorSystemResultHandler);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v9(v4, v2, v7);
  uint64_t v10 = (os_log_s *)sub_18264E91C();
  os_log_type_t v11 = sub_18264F018();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v13 = *(void *)(v0 + 240);
  uint64_t v14 = *(void *)(v0 + 224);
  uint64_t v15 = *(void *)(v0 + 200);
  uint64_t v16 = *(void *)(v0 + 160);
  if (v12)
  {
    os_log_type_t type = v11;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v66 = swift_slowAlloc();
    v71[0] = v66;
    *(_DWORD *)uint64_t v17 = 136315394;
    sub_18264E688();
    sub_181C36DB8();
    uint64_t v18 = sub_18264F480();
    *(void *)(v0 + 136) = sub_181BF7900(v18, v19, v71);
    sub_18264F0CC();
    swift_bridgeObjectRelease();
    sub_181BC920C(v13, (uint64_t (*)(void))type metadata accessor for NWActorSystemResultHandler);
    *(_WORD *)(v17 + 12) = 2080;
    uint64_t v20 = sub_181CAA1F4(v14);
    *(void *)(v0 + 144) = sub_181BF7900(v20, v21, v71);
    sub_18264F0CC();
    swift_bridgeObjectRelease();
    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v22(v14, v16);
    _os_log_impl(&dword_181A5C000, v10, type, "CallID %s threw error: %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x186E12168](v66, -1LL, -1LL);
    MEMORY[0x186E12168](v17, -1LL, -1LL);
  }

  else
  {
    sub_181BC920C( *(void *)(v0 + 240),  (uint64_t (*)(void))type metadata accessor for NWActorSystemResultHandler);
    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v22(v14, v16);
  }

  v9(*(void *)(v0 + 216), *(void *)(v0 + 152), *(void *)(v0 + 160));
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58BC88);
  if ((swift_dynamicCast() & 1) != 0)
  {
    sub_181BCD534(v68, (_OWORD *)(v0 + 16));
    __swift_project_boxed_opaque_existential_2((void *)(v0 + 16), *(void *)(v0 + 40));
    swift_getDynamicType();
    uint64_t v23 = sub_18264F2E8();
    if (v24)
    {
      uint64_t v25 = v23;
      unint64_t v26 = v24;
      __swift_project_boxed_opaque_existential_2((void *)(v0 + 16), *(void *)(v0 + 40));
      sub_18264E40C();
      swift_allocObject();
      sub_18264E400();
      uint64_t v27 = sub_18264E3E8();
      uint64_t v29 = v28;
      swift_release();
      unint64_t v56 = v29 | 0x1000000000000000LL;
      __swift_destroy_boxed_opaque_existential_2(v0 + 16);
      goto LABEL_21;
    }

    __swift_destroy_boxed_opaque_existential_2(v0 + 16);
  }

  else
  {
    *(_OWORD *)(v0 + 80) = 0u;
    *(_OWORD *)(v0 + 96) = 0u;
    __int128 *v68 = 0u;
    sub_181BDA0F0((uint64_t)v68, qword_18C58D3C0);
  }

  uint64_t v30 = v22;
  uint64_t v31 = v9;
  unsigned __int8 v32 = (os_log_s *)sub_18264E91C();
  os_log_type_t v33 = sub_18264F018();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v34 = 0;
    _os_log_impl(&dword_181A5C000, v32, v33, "Error is not codable, attempting to convert to NSError", v34, 2u);
    MEMORY[0x186E12168](v34, -1LL, -1LL);
  }

  uint64_t v35 = (id *)(v0 + 112);
  uint64_t v36 = *(void *)(v0 + 208);
  uint64_t v37 = *(void *)(v0 + 160);
  uint64_t v38 = *(void *)(v0 + 152);

  v31(v36, v38, v37);
  uint64_t v39 = sub_18264F4C8();
  uint64_t v40 = *(void *)(v0 + 208);
  if (v39)
  {
    __int128 v41 = (void *)v39;
    v30(*(void *)(v0 + 208), *(void *)(v0 + 160));
  }

  else
  {
    uint64_t v42 = *(void *)(v0 + 200);
    uint64_t v43 = *(void *)(v0 + 160);
    __int128 v41 = (void *)swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32))(v44, v40, v43);
  }

  __int128 v45 = (void *)sub_18264E4D8();

  uint64_t v46 = (void *)objc_opt_self();
  *uint64_t v35 = 0LL;
  id v47 = objc_msgSend(v46, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v45, 1, v0 + 112);
  id v48 = *v35;
  if (v47)
  {
    uint64_t v25 = sub_18264E5F8();
    unint64_t v26 = v49;

    uint64_t v27 = 0LL;
    unint64_t v56 = 0x2000000000000000LL;
  }

  else
  {
    unint64_t v50 = v48;
    uint64_t v51 = sub_18264E4E4();

    swift_willThrow();
    uint64_t v52 = (os_log_s *)sub_18264E91C();
    os_log_type_t v53 = sub_18264F000();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v54 = 0;
      _os_log_impl(&dword_181A5C000, v52, v53, "Failed to archive NSError", v54, 2u);
      MEMORY[0x186E12168](v54, -1LL, -1LL);
    }

    *(void *)(v0 + 120) = v51;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D6A0);
    uint64_t v25 = sub_18264EAA8();
    unint64_t v26 = v55;
    uint64_t v27 = 0LL;
    unint64_t v56 = 0x3000000000000000LL;
  }

uint64_t sub_181C3698C()
{
  *(void *)(*(void *)v1 + 288LL) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_181C36A34()
{
  uint64_t v1 = *(void *)(v0 + 192);
  sub_181C36D48(*(void *)(v0 + 248), *(void *)(v0 + 256), *(void *)(v0 + 264), *(void *)(v0 + 272), 0);
  sub_181BC920C(v1, (uint64_t (*)(void))type metadata accessor for ReplyEnvelope);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181C36AF4()
{
  uint64_t v1 = *(void *)(v0 + 192);
  sub_181C36D48(*(void *)(v0 + 248), *(void *)(v0 + 256), *(void *)(v0 + 264), *(void *)(v0 + 272), 0);
  sub_181BC920C(v1, (uint64_t (*)(void))type metadata accessor for ReplyEnvelope);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181C36BB4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_181BC92FC;
  return NWActorSystemResultHandler.onReturn<A>(value:)(a1, a2);
}

uint64_t sub_181C36C30()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_181BC63C4;
  return NWActorSystemResultHandler.onReturnVoid()();
}

uint64_t sub_181C36C74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_181BC92FC;
  return NWActorSystemResultHandler.onThrow<A>(error:)(a1, a2, a3);
}

uint64_t sub_181C36CD8(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  if ((a5 & 1) != 0) {
    int v5 = 4;
  }
  else {
    int v5 = 0;
  }
  switch((a4 >> 60) & 3 | v5)
  {
    case 0uLL:
    case 3uLL:
      uint64_t result = swift_bridgeObjectRetain();
      break;
    case 1uLL:
      unint64_t v7 = a4 & 0xCFFFFFFFFFFFFFFFLL;
      swift_bridgeObjectRetain();
      uint64_t result = a3;
      a2 = v7;
      goto LABEL_7;
    case 2uLL:
LABEL_7:
      uint64_t result = sub_181BCD4AC(result, a2);
      break;
    default:
      return result;
  }

  return result;
}

uint64_t sub_181C36D48(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  if ((a5 & 1) != 0) {
    int v5 = 4;
  }
  else {
    int v5 = 0;
  }
  switch((a4 >> 60) & 3 | v5)
  {
    case 0uLL:
    case 3uLL:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 1uLL:
      unint64_t v7 = a4 & 0xCFFFFFFFFFFFFFFFLL;
      swift_bridgeObjectRelease();
      uint64_t result = a3;
      a2 = v7;
      goto LABEL_7;
    case 2uLL:
LABEL_7:
      uint64_t result = sub_181BCD4F0(result, a2);
      break;
    default:
      return result;
  }

  return result;
}

unint64_t sub_181C36DB8()
{
  unint64_t result = qword_18C58C240;
  if (!qword_18C58C240)
  {
    uint64_t v1 = sub_18264E688();
    unint64_t result = MEMORY[0x186E12084](MEMORY[0x189606F70], v1);
    atomic_store(result, (unint64_t *)&qword_18C58C240);
  }

  return result;
}

char *initializeBufferWithCopyOfBuffer for NWActorSystemResultHandler(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v26 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v26 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = sub_18264E688();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    __int128 v10 = *(_OWORD *)&a2[v9 + 24];
    *(_OWORD *)&a1[v9 + 24] = v10;
    (**(void (***)(void))(v10 - 8))();
    uint64_t v11 = a3[6];
    BOOL v12 = &a1[v11];
    uint64_t v13 = &a2[v11];
    uint64_t v14 = *(void *)&a2[v11 + 8];
    *(void *)BOOL v12 = *(void *)&a2[v11];
    *((void *)v12 + 1) = v14;
    uint64_t v15 = *(int *)(type metadata accessor for NWActorID() + 20);
    uint64_t v16 = &v12[v15];
    uint64_t v17 = &v13[v15];
    swift_bridgeObjectRetain();
    v8(v16, v17, v7);
    uint64_t v18 = a3[7];
    __int128 v19 = *(_OWORD *)&a2[v18 + 24];
    *(_OWORD *)&a1[v18 + 24] = v19;
    (**(void (***)(void))(v19 - 8))();
    uint64_t v20 = a3[8];
    unint64_t v21 = &a1[v20];
    uint64_t v22 = &a2[v20];
    uint64_t v23 = sub_18264F294();
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1LL, v23))
    {
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C3A0);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0LL, 1LL, v23);
    }

    a1[a3[9]] = a2[a3[9]];
  }

  return a1;
}

uint64_t destroy for NWActorSystemResultHandler(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_18264E688();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v5(a1, v4);
  __swift_destroy_boxed_opaque_existential_2(a1 + a2[5]);
  uint64_t v6 = a1 + a2[6];
  swift_bridgeObjectRelease();
  uint64_t v7 = type metadata accessor for NWActorID();
  v5(v6 + *(int *)(v7 + 20), v4);
  __swift_destroy_boxed_opaque_existential_2(a1 + a2[7]);
  uint64_t v8 = a1 + a2[8];
  uint64_t v9 = sub_18264F294();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  return result;
}

uint64_t initializeWithCopy for NWActorSystemResultHandler(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_18264E688();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  __int128 v9 = *(_OWORD *)(a2 + v8 + 24);
  *(_OWORD *)(a1 + v8 + 24) = v9;
  (**(void (***)(void))(v9 - 8))();
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = a2 + v10;
  uint64_t v13 = *(void *)(a2 + v10 + 8);
  void *v11 = *(void *)(a2 + v10);
  v11[1] = v13;
  uint64_t v14 = *(int *)(type metadata accessor for NWActorID() + 20);
  uint64_t v15 = (char *)v11 + v14;
  uint64_t v16 = v12 + v14;
  swift_bridgeObjectRetain();
  v7((uint64_t)v15, v16, v6);
  uint64_t v17 = a3[7];
  __int128 v18 = *(_OWORD *)(a2 + v17 + 24);
  *(_OWORD *)(a1 + v17 + 24) = v18;
  (**(void (***)(void))(v18 - 8))();
  uint64_t v19 = a3[8];
  uint64_t v20 = (void *)(a1 + v19);
  unint64_t v21 = (const void *)(a2 + v19);
  uint64_t v22 = sub_18264F294();
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48))(v21, 1LL, v22))
  {
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C3A0);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v23 + 16))(v20, v21, v22);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0LL, 1LL, v22);
  }

  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithCopy for NWActorSystemResultHandler(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_18264E688();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL);
  v7(a1, a2, v6);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + a3[5]), (uint64_t *)(a2 + a3[5]));
  uint64_t v8 = a3[6];
  __int128 v9 = (void *)(a1 + v8);
  uint64_t v10 = a2 + v8;
  *__int128 v9 = *(void *)(a2 + v8);
  v9[1] = *(void *)(a2 + v8 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = type metadata accessor for NWActorID();
  v7((uint64_t)v9 + *(int *)(v11 + 20), v10 + *(int *)(v11 + 20), v6);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + a3[7]), (uint64_t *)(a2 + a3[7]));
  uint64_t v12 = a3[8];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = sub_18264F294();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v9) = v17(v13, 1LL, v15);
  int v18 = v17(v14, 1LL, v15);
  if (!(_DWORD)v9)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v13, v14, v15);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_6;
  }

  if (v18)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C3A0);
    memcpy(v13, v14, *(void *)(*(void *)(v19 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v13, v14, v15);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
LABEL_7:
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v9 = *(void *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        uint64_t v10 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        uint64_t *v3 = v10;
      }

      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }

    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      int v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }

        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }

        return (uint64_t *)swift_release();
      }

      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          uint64_t *v3 = *a2;
          swift_retain();
        }

        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }

        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }

  return result;
}

uint64_t initializeWithTake for NWActorSystemResultHandler(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_18264E688();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  __int128 v12 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v12;
  *(void *)(v10 + 32) = *(void *)(v11 + 32);
  uint64_t v13 = a1 + v9;
  uint64_t v14 = a2 + v9;
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  uint64_t v15 = type metadata accessor for NWActorID();
  v7(v13 + *(int *)(v15 + 20), v14 + *(int *)(v15 + 20), v6);
  uint64_t v16 = a3[7];
  uint64_t v17 = a3[8];
  uint64_t v18 = a1 + v16;
  uint64_t v19 = a2 + v16;
  __int128 v20 = *(_OWORD *)(v19 + 16);
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  *(_OWORD *)(v18 + 16) = v20;
  *(void *)(v18 + 32) = *(void *)(v19 + 32);
  unint64_t v21 = (void *)(a1 + v17);
  uint64_t v22 = (const void *)(a2 + v17);
  uint64_t v23 = sub_18264F294();
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v24 + 48))(v22, 1LL, v23))
  {
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C3A0);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v24 + 32))(v21, v22, v23);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0LL, 1LL, v23);
  }

  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for NWActorSystemResultHandler(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_18264E688();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  __swift_destroy_boxed_opaque_existential_2(a1 + v8);
  __int128 v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(void *)(v9 + 32) = *(void *)(v10 + 32);
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = a2 + v12;
  uint64_t v15 = *(void *)(a2 + v12 + 8);
  void *v13 = *(void *)(a2 + v12);
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v16 = type metadata accessor for NWActorID();
  v7((uint64_t)v13 + *(int *)(v16 + 20), v14 + *(int *)(v16 + 20), v6);
  uint64_t v17 = a3[7];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  __swift_destroy_boxed_opaque_existential_2(a1 + v17);
  __int128 v20 = *(_OWORD *)(v19 + 16);
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  *(_OWORD *)(v18 + 16) = v20;
  *(void *)(v18 + 32) = *(void *)(v19 + 32);
  uint64_t v21 = a3[8];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (void *)(a2 + v21);
  uint64_t v24 = sub_18264F294();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v25 + 48);
  LODWORD(v14) = v26(v22, 1LL, v24);
  int v27 = v26(v23, 1LL, v24);
  if (!(_DWORD)v14)
  {
    if (!v27)
    {
      (*(void (**)(void *, void *, uint64_t))(v25 + 40))(v22, v23, v24);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v25 + 8))(v22, v24);
    goto LABEL_6;
  }

  if (v27)
  {
LABEL_6:
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C3A0);
    memcpy(v22, v23, *(void *)(*(void *)(v28 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v25 + 32))(v22, v23, v24);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0LL, 1LL, v24);
LABEL_7:
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWActorSystemResultHandler()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C37834(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_18264E688();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
    return v9(v10, a2, v8);
  }

  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    uint64_t v13 = type metadata accessor for NWActorID();
    uint64_t v14 = *(void *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
    {
      uint64_t v8 = v13;
      uint64_t v15 = a3[6];
    }

    else
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C3A0);
      uint64_t v14 = *(void *)(v8 - 8);
      uint64_t v15 = a3[8];
    }

    uint64_t v10 = a1 + v15;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    return v9(v10, a2, v8);
  }

  unint64_t v11 = *(void *)(a1 + a3[5] + 24);
  if (v11 >= 0xFFFFFFFF) {
    LODWORD(v11) = -1;
  }
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for NWActorSystemResultHandler()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C37914(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = sub_18264E688();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(void *)(a1 + a4[5] + 24) = (a2 - 1);
      return result;
    }

    uint64_t v13 = type metadata accessor for NWActorID();
    uint64_t v14 = *(void *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v15 = a4[6];
    }

    else
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C3A0);
      uint64_t v14 = *(void *)(v10 - 8);
      uint64_t v15 = a4[8];
    }

    uint64_t v12 = a1 + v15;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_181C379E4()
{
  if (v0 <= 0x3F)
  {
    type metadata accessor for NWActorID();
    if (v1 <= 0x3F)
    {
      sub_181C37A94();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }

void sub_181C37A94()
{
  if (!qword_18C58D448[0])
  {
    sub_18264F294();
    unint64_t v0 = sub_18264F09C();
    if (!v1) {
      atomic_store(v0, qword_18C58D448);
    }
  }

uint64_t sub_181C37AE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C3A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

id sub_181C37B30( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36)
{
  if (a36 < 0) {
    return a1;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_181BCECA4(a8, a9);
  sub_181BCECA4(a15, a16);
  sub_181BCECA4(a22, a23);
  sub_181BCECA4(a29, a30);
  return (id)swift_retain();
}

void _s11RequestTypeOwxx(uint64_t a1)
{
  __int128 v2 = *(_OWORD *)(a1 + 240);
  __int128 v3 = *(_OWORD *)(a1 + 256);
  __int128 v1 = *(_OWORD *)(a1 + 208);
  sub_181C37D38( *(void **)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  *(void *)(a1 + 112),  *(void *)(a1 + 120),  *(void *)(a1 + 128),  *(void *)(a1 + 136),  *(void *)(a1 + 144),  *(void *)(a1 + 152),  *(void *)(a1 + 160),  *(void *)(a1 + 168),  *(void *)(a1 + 176),  *(void *)(a1 + 184),  *(void *)(a1 + 192),  *(void *)(a1 + 200),  v1,  *((uint64_t *)&v1 + 1),  *(void *)(a1 + 224),  *(void *)(a1 + 232),  v2,  *((uint64_t *)&v2 + 1),  v3,  *((uint64_t *)&v3 + 1),  *(void *)(a1 + 272),  *(void *)(a1 + 280));
}

void sub_181C37D38( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36)
{
  if (a36 < 0)
  {
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_181BCECE0(a8, a9);
    sub_181BCECE0(a15, a16);
    sub_181BCECE0(a22, a23);
    sub_181BCECE0(a29, a30);
    swift_release();
  }

void *_s11RequestTypeOwcp(void *a1, uint64_t a2)
{
  uint64_t v13 = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a2 + 88);
  uint64_t v16 = *(void *)(a2 + 96);
  uint64_t v17 = *(void *)(a2 + 104);
  uint64_t v18 = *(void *)(a2 + 112);
  uint64_t v19 = *(void *)(a2 + 120);
  uint64_t v20 = *(void *)(a2 + 128);
  uint64_t v21 = *(void *)(a2 + 136);
  uint64_t v22 = *(void *)(a2 + 144);
  uint64_t v23 = *(void *)(a2 + 152);
  uint64_t v24 = *(void *)(a2 + 160);
  uint64_t v25 = *(void *)(a2 + 168);
  uint64_t v26 = *(void *)(a2 + 176);
  uint64_t v27 = *(void *)(a2 + 184);
  uint64_t v28 = *(void *)(a2 + 192);
  uint64_t v29 = *(void *)(a2 + 200);
  uint64_t v30 = *(void *)(a2 + 208);
  uint64_t v31 = *(void *)(a2 + 216);
  uint64_t v32 = *(void *)(a2 + 224);
  uint64_t v33 = *(void *)(a2 + 232);
  uint64_t v34 = *(void *)(a2 + 240);
  uint64_t v35 = *(void *)(a2 + 248);
  uint64_t v36 = *(void *)(a2 + 256);
  uint64_t v37 = *(void *)(a2 + 264);
  uint64_t v38 = *(void *)(a2 + 272);
  uint64_t v39 = *(void *)(a2 + 280);
  uint64_t v3 = *(void *)(a2 + 64);
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v4 = *(void **)a2;
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 48);
  sub_181C37B30( *(void **)a2,  v5,  v6,  v7,  v8,  v9,  v10,  v11,  v3,  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21,  v22,  v23,  v24,  v25,  v26,  v27,  v28,  v29,  v30,  v31,  v32,  v33,  v34,  v35,  v36,  v37,  v38,  v39);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  a1[7] = v11;
  a1[8] = v3;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  a1[16] = v20;
  a1[17] = v21;
  a1[18] = v22;
  a1[19] = v23;
  a1[20] = v24;
  a1[21] = v25;
  a1[22] = v26;
  a1[23] = v27;
  a1[24] = v28;
  a1[25] = v29;
  a1[26] = v30;
  a1[27] = v31;
  a1[28] = v32;
  a1[29] = v33;
  a1[30] = v34;
  a1[31] = v35;
  a1[32] = v36;
  a1[33] = v37;
  a1[34] = v38;
  a1[35] = v39;
  return a1;
}

uint64_t _s11RequestTypeOwca(uint64_t a1, uint64_t a2)
{
  uint64_t v61 = *(void **)a2;
  uint64_t v62 = *(void *)(a2 + 8);
  uint64_t v59 = *(void *)(a2 + 24);
  uint64_t v60 = *(void *)(a2 + 16);
  uint64_t v57 = *(void *)(a2 + 40);
  uint64_t v58 = *(void *)(a2 + 32);
  uint64_t v55 = *(void *)(a2 + 56);
  uint64_t v56 = *(void *)(a2 + 48);
  uint64_t v36 = *(void *)(a2 + 72);
  uint64_t v37 = *(void *)(a2 + 80);
  uint64_t v38 = *(void *)(a2 + 88);
  uint64_t v39 = *(void *)(a2 + 96);
  uint64_t v40 = *(void *)(a2 + 104);
  uint64_t v41 = *(void *)(a2 + 112);
  uint64_t v42 = *(void *)(a2 + 120);
  uint64_t v43 = *(void *)(a2 + 128);
  uint64_t v3 = *(void *)(a2 + 144);
  uint64_t v4 = *(void *)(a2 + 152);
  uint64_t v5 = *(void *)(a2 + 160);
  uint64_t v6 = *(void *)(a2 + 168);
  uint64_t v7 = *(void *)(a2 + 176);
  uint64_t v8 = *(void *)(a2 + 184);
  uint64_t v9 = *(void *)(a2 + 192);
  uint64_t v10 = *(void *)(a2 + 200);
  uint64_t v44 = *(void *)(a2 + 136);
  uint64_t v45 = *(void *)(a2 + 208);
  uint64_t v46 = *(void *)(a2 + 216);
  uint64_t v47 = *(void *)(a2 + 224);
  uint64_t v48 = *(void *)(a2 + 232);
  uint64_t v49 = *(void *)(a2 + 240);
  uint64_t v50 = *(void *)(a2 + 248);
  uint64_t v51 = *(void *)(a2 + 256);
  uint64_t v52 = *(void *)(a2 + 264);
  uint64_t v53 = *(void *)(a2 + 272);
  uint64_t v54 = *(void *)(a2 + 280);
  uint64_t v11 = *(void *)(a2 + 64);
  sub_181C37B30( *(void **)a2,  v62,  v60,  v59,  v58,  v57,  v56,  v55,  v11,  v36,  v37,  v38,  v39,  v40,  v41,  v42,  v43,  v44,  v3,  v4,  v5,  v6,  v7,  v8,  v9,  v10,  v45,  v46,  v47,  v48,  v49,  v50,  v51,  v52,  v53,  v54);
  uint64_t v12 = *(void **)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  *(void *)a1 = v61;
  *(void *)(a1 + 8) = v62;
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v60;
  *(void *)(a1 + 24) = v59;
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v58;
  *(void *)(a1 + 40) = v57;
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v56;
  __int128 v20 = *(_OWORD *)(a1 + 64);
  __int128 v21 = *(_OWORD *)(a1 + 80);
  *(void *)(a1 + 56) = v55;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v36;
  *(void *)(a1 + 80) = v37;
  *(void *)(a1 + 88) = v38;
  __int128 v22 = *(_OWORD *)(a1 + 96);
  __int128 v23 = *(_OWORD *)(a1 + 112);
  *(void *)(a1 + 96) = v39;
  *(void *)(a1 + 104) = v40;
  *(void *)(a1 + 112) = v41;
  *(void *)(a1 + 120) = v42;
  __int128 v24 = *(_OWORD *)(a1 + 128);
  __int128 v25 = *(_OWORD *)(a1 + 144);
  *(void *)(a1 + 128) = v43;
  *(void *)(a1 + 136) = v44;
  *(void *)(a1 + 144) = v3;
  __int128 v26 = *(_OWORD *)(a1 + 160);
  __int128 v27 = *(_OWORD *)(a1 + 176);
  *(void *)(a1 + 152) = v4;
  *(void *)(a1 + 160) = v5;
  *(void *)(a1 + 168) = v6;
  *(void *)(a1 + 176) = v7;
  __int128 v28 = *(_OWORD *)(a1 + 192);
  __int128 v29 = *(_OWORD *)(a1 + 208);
  *(void *)(a1 + 184) = v8;
  *(void *)(a1 + 192) = v9;
  *(void *)(a1 + 200) = v10;
  *(void *)(a1 + 208) = v45;
  *(void *)(a1 + 216) = v46;
  __int128 v30 = *(_OWORD *)(a1 + 224);
  __int128 v31 = *(_OWORD *)(a1 + 240);
  *(void *)(a1 + 224) = v47;
  *(void *)(a1 + 232) = v48;
  *(void *)(a1 + 240) = v49;
  *(void *)(a1 + 248) = v50;
  __int128 v32 = *(_OWORD *)(a1 + 256);
  *(void *)(a1 + 256) = v51;
  *(void *)(a1 + 264) = v52;
  uint64_t v33 = *(void *)(a1 + 272);
  uint64_t v34 = *(void *)(a1 + 280);
  *(void *)(a1 + 272) = v53;
  *(void *)(a1 + 280) = v54;
  sub_181C37D38( v12,  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  *((uint64_t *)&v20 + 1),  v21,  *((uint64_t *)&v21 + 1),  v22,  *((uint64_t *)&v22 + 1),  v23,  *((uint64_t *)&v23 + 1),  v24,  *((uint64_t *)&v24 + 1),  v25,  *((uint64_t *)&v25 + 1),  v26,  *((uint64_t *)&v26 + 1),  v27,  *((uint64_t *)&v27 + 1),  v28,  *((uint64_t *)&v28 + 1),  v29,  *((uint64_t *)&v29 + 1),  v30,  *((uint64_t *)&v30 + 1),  v31,  *((uint64_t *)&v31 + 1),  v32,  *((uint64_t *)&v32 + 1),  v33,  v34);
  return a1;
}

void *__swift_memcpy288_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x120uLL);
}

uint64_t _s11RequestTypeOwta(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  __int128 v12 = *(_OWORD *)(a1 + 64);
  __int128 v13 = *(_OWORD *)(a1 + 80);
  __int128 v14 = *(_OWORD *)(a1 + 96);
  __int128 v15 = *(_OWORD *)(a1 + 112);
  __int128 v16 = *(_OWORD *)(a1 + 128);
  __int128 v17 = *(_OWORD *)(a1 + 144);
  __int128 v18 = *(_OWORD *)(a1 + 160);
  __int128 v19 = *(_OWORD *)(a1 + 176);
  __int128 v20 = *(_OWORD *)(a1 + 192);
  __int128 v21 = *(_OWORD *)(a1 + 208);
  __int128 v22 = *(_OWORD *)(a1 + 224);
  __int128 v23 = *(_OWORD *)(a1 + 240);
  __int128 v24 = *(_OWORD *)(a1 + 256);
  uint64_t v25 = *(void *)(a1 + 272);
  uint64_t v26 = *(void *)(a1 + 280);
  __int128 v27 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v27;
  __int128 v28 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v28;
  __int128 v29 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v29;
  __int128 v30 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v30;
  __int128 v31 = a2[9];
  *(_OWORD *)(a1 + 128) = a2[8];
  *(_OWORD *)(a1 + 144) = v31;
  __int128 v32 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v32;
  __int128 v33 = a2[13];
  *(_OWORD *)(a1 + 192) = a2[12];
  *(_OWORD *)(a1 + 208) = v33;
  __int128 v34 = a2[15];
  *(_OWORD *)(a1 + 224) = a2[14];
  *(_OWORD *)(a1 + 240) = v34;
  __int128 v35 = a2[17];
  *(_OWORD *)(a1 + 256) = a2[16];
  *(_OWORD *)(a1 + 272) = v35;
  sub_181C37D38( v4,  v5,  v6,  v7,  v8,  v9,  v10,  v11,  v12,  *((uint64_t *)&v12 + 1),  v13,  *((uint64_t *)&v13 + 1),  v14,  *((uint64_t *)&v14 + 1),  v15,  *((uint64_t *)&v15 + 1),  v16,  *((uint64_t *)&v16 + 1),  v17,  *((uint64_t *)&v17 + 1),  v18,  *((uint64_t *)&v18 + 1),  v19,  *((uint64_t *)&v19 + 1),  v20,  *((uint64_t *)&v20 + 1),  v21,  *((uint64_t *)&v21 + 1),  v22,  *((uint64_t *)&v22 + 1),  v23,  *((uint64_t *)&v23 + 1),  v24,  *((uint64_t *)&v24 + 1),  v25,  v26);
  return a1;
}

uint64_t _s11RequestTypeOwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 288)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = *(_DWORD *)(a1 + 33);
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t _s11RequestTypeOwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 280) = 0LL;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 288) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(_OWORD *)uint64_t result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(void *)(result + 32) = (unint64_t)-a2 << 8;
      *(_OWORD *)(result + 56) = 0u;
      *(_OWORD *)(result + 72) = 0u;
      *(_OWORD *)(result + 88) = 0u;
      *(_OWORD *)(result + 104) = 0u;
      *(_OWORD *)(result + 120) = 0u;
      *(_OWORD *)(result + 136) = 0u;
      *(_OWORD *)(result + 152) = 0u;
      *(_OWORD *)(result + 168) = 0u;
      *(_OWORD *)(result + 184) = 0u;
      *(_OWORD *)(result + 200) = 0u;
      *(_OWORD *)(result + 216) = 0u;
      *(_OWORD *)(result + 232) = 0u;
      *(_OWORD *)(result + 248) = 0u;
      *(void *)(result + 280) = 0LL;
      *(_OWORD *)(result + 40) = 0u;
      result += 40LL;
      *(_OWORD *)(result + 224) = 0u;
      return result;
    }

    *(_BYTE *)(result + 288) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t sub_181C38564(uint64_t a1)
{
  return *(void *)(a1 + 280) >> 63;
}

uint64_t sub_181C38570(uint64_t result)
{
  *(void *)(result + 280) &= ~0x8000000000000000LL;
  return result;
}

uint64_t sub_181C38580(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 280) & 0xFFFFFFFFFFFFFF8LL | (a2 << 63);
  *(void *)(result + 32) = *(unsigned __int8 *)(result + 32);
  *(void *)(result + 280) = v2;
  return result;
}

ValueMetadata *_s11RequestTypeOMa()
{
  return &_s11RequestTypeON;
}

uint64_t sub_181C385AC@<X0>(char *a1@<X0>, uint64_t isEscapingClosureAtFileLocation@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58B040);
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_18264E568();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](v7);
  uint64_t v41 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v9);
  __int128 v12 = (char *)&v36 - v11;
  id v13 = objc_msgSend(a1, sel_HTTPMethod);
  if (!v13)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  __int128 v14 = v13;
  uint64_t v15 = sub_18264EA48();
  uint64_t v17 = v16;

  if ((v17 & 0x1000000000000000LL) != 0)
  {
    uint64_t v15 = sub_181C8B3F4();
    uint64_t v19 = v18;
    swift_bridgeObjectRelease();
    uint64_t v17 = v19;
    if ((v19 & 0x2000000000000000LL) == 0) {
      goto LABEL_4;
    }
LABEL_7:
    v44[0] = v15;
    v44[1] = v17 & 0xFFFFFFFFFFFFFFLL;
    goto LABEL_8;
  }

  if ((v17 & 0x2000000000000000LL) != 0) {
    goto LABEL_7;
  }
LABEL_4:
  if ((v15 & 0x1000000000000000LL) == 0) {
    goto LABEL_17;
  }
LABEL_8:
  while (1)
  {
    uint64_t v39 = sub_18264EB20();
    unint64_t v21 = v20;
    id v22 = objc_msgSend(a1, sel_URL);
    if (!v22) {
      break;
    }
    __int128 v23 = v22;
    uint64_t v40 = a1;
    uint64_t v38 = (void *)isEscapingClosureAtFileLocation;
    __int128 v24 = v41;
    sub_18264E538();

    uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v25(v6, v24, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0LL, 1LL, v7);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7);
    if ((_DWORD)result == 1) {
      goto LABEL_21;
    }
    uint64_t v37 = v12;
    v25(v12, v6, v7);
    type metadata accessor for HTTPFields._Storage();
    __int128 v27 = (void *)swift_allocObject();
    uint64_t v28 = MEMORY[0x18961AFE8];
    _OWORD v27[2] = MEMORY[0x18961AFE8];
    v27[3] = sub_181C87FF8(v28);
    __int128 v29 = (_DWORD *)swift_slowAlloc();
    void v27[4] = v29;
    *__int128 v29 = 0;
    uint64_t v45 = (uint64_t)v27;
    __int128 v30 = (void *)objc_opt_self();
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = &v45;
    uint64_t v6 = (char *)swift_allocObject();
    *((void *)v6 + 2) = sub_181C3A784;
    *((void *)v6 + 3) = v31;
    v44[4] = sub_181BD639C;
    v44[5] = v6;
    v44[0] = MEMORY[0x1895F87A8];
    v44[1] = 1107296256LL;
    v44[2] = sub_181C391B8;
    v44[3] = &block_descriptor_10;
    a1 = (char *)_Block_copy(v44);
    swift_retain();
    swift_release();
    __int128 v12 = v40;
    objc_msgSend(v30, sel__enumerateHTTPHeaderFieldsWithRequest_usingBlock_, v40, a1);
    _Block_release(a1);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0)
    {
      unint64_t v32 = HIBYTE(v21) & 0xF;
      uint64_t v33 = v39;
      if ((v21 & 0x2000000000000000LL) == 0) {
        unint64_t v32 = v39 & 0xFFFFFFFFFFFFLL;
      }
      if (v32)
      {
        uint64_t v6 = 0LL;
        if ((sub_181C2B750(v39, v21) & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v43[0] = v33;
          v43[1] = v21;
          uint64_t v34 = (uint64_t)v41;
          __int128 v35 = v37;
          (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v41, v37, v7);
          uint64_t v42 = v45;
          swift_retain();
          HTTPRequest.init(method:url:headerFields:)(v43, v34, &v42, v44);

          (*(void (**)(char *, uint64_t))(v8 + 8))(v35, v7);
          memcpy(v38, v44, 0x120uLL);
          swift_release();
          return swift_release();
        }
      }

      swift_bridgeObjectRelease();
      __break(1u);
      goto LABEL_19;
    }

    __break(1u);
LABEL_17:
    sub_18264F228();
  }

uint64_t sub_181C389E0( uint64_t *a1, uint64_t *a2, char *a3, uint64_t a4, unsigned __int8 *(*a5)@<X0>(unsigned __int8 *result@<X0>, _DWORD *a2@<X8>), uint64_t a6)
{
  uint64_t v11 = *a1;
  unint64_t v12 = a1[1];
  if ((v12 & 0x1000000000000000LL) == 0)
  {
    if ((v12 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v14 = HIBYTE(v12) & 0xF;
    v19[0] = v11;
    v19[1] = v12 & 0xFFFFFFFFFFFFFFLL;
    id v13 = (char *)v19;
    goto LABEL_7;
  }

  uint64_t v11 = sub_181C8B3F4();
  uint64_t v18 = v16;
  swift_bridgeObjectRelease();
  unint64_t v12 = v18;
  *a1 = v11;
  a1[1] = v18;
  if ((v18 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v11 & 0x1000000000000000LL) != 0)
  {
    id v13 = (char *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v14 = v11 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    id v13 = (char *)sub_18264F228();
  }

uint64_t sub_181C38AE8(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t *a5)
{
  if ((a2 & 0x1000000000000000LL) == 0)
  {
    if ((a2 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    *(void *)&__int128 v53 = a1;
    *((void *)&v53 + 1) = a2 & 0xFFFFFFFFFFFFFFLL;
    goto LABEL_7;
  }

  a1 = sub_181C8B3F4();
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  a2 = v10;
  if ((v10 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((a1 & 0x1000000000000000LL) == 0) {
    sub_18264F228();
  }
LABEL_7:
  unint64_t v11 = sub_18264EB20();
  id v13 = (char *)v11;
  uint64_t v14 = v12;
  uint64_t v15 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000LL) == 0) {
    uint64_t v15 = v11 & 0xFFFFFFFFFFFFLL;
  }
  if (v15 && (sub_181C2B750(v11, v12) & 1) != 0)
  {
    uint64_t v16 = sub_18264EAB4();
    uint64_t v18 = v17;
    uint64_t v40 = (unsigned __int8 *(*)@<X0>(unsigned __int8 *@<X0>, _DWORD *@<X8>))v16;
    if (v16 == 0x65696B6F6F63LL && v17 == 0xE600000000000000LL || (sub_18264F4EC() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      *(void *)&__int128 v53 = a3;
      *((void *)&v53 + 1) = a4;
      *(void *)&__int128 v43 = 8251LL;
      *((void *)&v43 + 1) = 0xE200000000000000LL;
      sub_181C251EC();
      uint64_t v19 = sub_18264EF88();
      uint64_t v20 = *(void *)(v19 + 16);
      if (v20)
      {
        uint64_t v38 = v18;
        for (uint64_t i = (uint64_t *)(v19 + 56); ; i += 4)
        {
          uint64_t v27 = v14;
          uint64_t v28 = v13;
          uint64_t v29 = *(i - 3);
          uint64_t v30 = *(i - 2);
          uint64_t v31 = *(i - 1);
          uint64_t v32 = *i;
          swift_bridgeObjectRetain();
          uint64_t v22 = MEMORY[0x186E0E670](v29, v30, v31, v32);
          unint64_t v24 = v33;
          swift_bridgeObjectRelease();
          if (!_s7Network9HTTPFieldV12isValidValueySbSSFZ_0(v22, v24))
          {
            *(void *)&__int128 v53 = v22;
            *((void *)&v53 + 1) = v24;
            uint64_t v54 = sub_181C01330;
            uint64_t v55 = 0LL;
            uint64_t v56 = sub_181C0136C;
            uint64_t v57 = 0LL;
            uint64_t v58 = sub_181C02E1C;
            uint64_t v59 = 0LL;
            __int128 v43 = v53;
            __int128 v44 = (unint64_t)sub_181C01330;
            __int128 v45 = (unint64_t)sub_181C0136C;
            __int128 v46 = (unint64_t)sub_181C02E1C;
            swift_bridgeObjectRetain();
            __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C5C0);
            __swift_instantiateConcreteTypeFromMangledName(&qword_18C58DFF0);
            if ((swift_dynamicCast() & 1) == 0)
            {
              uint64_t v42 = 0LL;
              memset(v41, 0, sizeof(v41));
              sub_181C02DDC((uint64_t)v41);
              goto LABEL_24;
            }

            sub_181BE61DC(v41, (uint64_t)v47);
            __swift_project_boxed_opaque_existential_2(v47, v48);
            if ((sub_18264F378() & 1) == 0)
            {
              __swift_destroy_boxed_opaque_existential_2((uint64_t)v47);
LABEL_24:
              id v13 = v28;
              uint64_t v22 = sub_181C3A2A8(&v53);
              unint64_t v35 = v34;
              swift_bridgeObjectRelease();
              unint64_t v24 = v35;
              goto LABEL_18;
            }

            __swift_project_boxed_opaque_existential_2(v47, v48);
            sub_18264F36C();
            unint64_t v23 = *((void *)&v43 + 1);
            uint64_t v22 = v43;
            __swift_destroy_boxed_opaque_existential_2((uint64_t)v47);
            swift_bridgeObjectRelease();
            unint64_t v24 = v23;
          }

          id v13 = v28;
LABEL_18:
          uint64_t v14 = v27;
          uint64_t v25 = *a5;
          swift_beginAccess();
          uint64_t v26 = *(void *)(*(void *)(v25 + 16) + 16LL);
          v49[0] = v13;
          v49[1] = v27;
          _OWORD v49[2] = v40;
          v49[3] = v38;
          char v50 = 0;
          uint64_t v51 = v22;
          unint64_t v52 = v24;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_181C216E0(v26, v26, (uint64_t)v49);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (!--v20)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return swift_bridgeObjectRelease();
          }
        }
      }

      swift_bridgeObjectRelease();
    }

    else
    {
      if ((sub_181BCE7EC(a3, a4) & 1) != 0)
      {
        *(void *)&__int128 v53 = a3;
        *((void *)&v53 + 1) = a4;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        sub_181C389E0((uint64_t *)&v53, a5, v13, v14, v40, v18);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        return swift_bridgeObjectRelease();
      }

      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_181C94C48(a3, a4, a5, v13, v14, v40, v18, v36);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  __break(1u);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  __break(1u);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_181C3900C( char *a1, uint64_t a2, uint64_t *a3, char *a4, uint64_t a5, unsigned __int8 *(*a6)@<X0>(unsigned __int8 *result@<X0>, _DWORD *a2@<X8>), uint64_t a7)
{
  if (!a1 || !a2) {
    goto LABEL_10;
  }
  if (*a1 < 0) {
    goto LABEL_11;
  }
  if (a2 == 1) {
    goto LABEL_10;
  }
  if (a1[1] < 0)
  {
LABEL_11:
    uint64_t v22 = a1;
    uint64_t v23 = a2;
    unint64_t v24 = sub_181C94200;
    uint64_t v25 = 0LL;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D498);
    sub_181C02894((unint64_t *)&unk_18C58D4A0, &qword_18C58D498, MEMORY[0x189619618]);
    sub_18264EB14();
    unint64_t v13 = 0LL;
    unint64_t v15 = 0xE000000000000000LL;
    goto LABEL_12;
  }

  if (a2 != 2)
  {
    uint64_t v12 = 2LL;
    while ((a1[v12] & 0x80000000) == 0)
    {
      if (a2 == ++v12) {
        goto LABEL_10;
      }
    }

    goto LABEL_11;
  }

uint64_t sub_181C391B8(uint64_t a1)
{
  __int128 v1 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  uint64_t v2 = sub_18264EA48();
  uint64_t v4 = v3;
  uint64_t v5 = sub_18264EA48();
  v1(v2, v4, v5, v6);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_181C39224(uint64_t a1, uint64_t a2, const __CFURL *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58B040);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *((void *)v3 + 5);
  uint64_t v8 = *((void *)v3 + 6);
  uint64_t v10 = *((void *)v3 + 35);
  CFURLRef v66 = a3;
  uint64_t v67 = v10;
  if (!a3)
  {
    char v11 = *((_BYTE *)v3 + 32);
    uint64_t v13 = *((void *)v3 + 2);
    uint64_t v12 = *((void *)v3 + 3);
    __int128 v70 = *v3;
    uint64_t v71 = v13;
    uint64_t v72 = v12;
    char v73 = v11;
    *(_DWORD *)v74 = *(_DWORD *)((char *)v3 + 33);
    *(_DWORD *)&v74[3] = *((_DWORD *)v3 + 9);
    uint64_t v75 = v9;
    uint64_t v76 = v8;
    __int128 v90 = *(__int128 *)((char *)v3 + 264);
    __int128 v87 = *(__int128 *)((char *)v3 + 216);
    __int128 v88 = *(__int128 *)((char *)v3 + 232);
    __int128 v89 = *(__int128 *)((char *)v3 + 248);
    __int128 v83 = *(__int128 *)((char *)v3 + 152);
    __int128 v84 = *(__int128 *)((char *)v3 + 168);
    __int128 v85 = *(__int128 *)((char *)v3 + 184);
    __int128 v86 = *(__int128 *)((char *)v3 + 200);
    __int128 v14 = *(__int128 *)((char *)v3 + 104);
    __int128 v79 = *(__int128 *)((char *)v3 + 88);
    __int128 v80 = v14;
    __int128 v81 = *(__int128 *)((char *)v3 + 120);
    __int128 v82 = *(__int128 *)((char *)v3 + 136);
    __int128 v15 = *(__int128 *)((char *)v3 + 72);
    __int128 v77 = *(__int128 *)((char *)v3 + 56);
    __int128 v78 = v15;
    uint64_t v91 = v67;
    HTTPRequest.url.getter((uint64_t)v7);
    uint64_t v16 = sub_18264E568();
    uint64_t v17 = *(void *)(v16 - 8);
    int v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v7, 1LL, v16);
    CFURLRef v66 = 0LL;
    if (v18 == 1) {
      goto LABEL_5;
    }
    uint64_t v19 = (const __CFURL *)sub_18264E520();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v16);
    CFURLRef v66 = v19;
    uint64_t v20 = v19;
  }

  unint64_t v21 = a3;
LABEL_5:
  uint64_t v22 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  swift_bridgeObjectRetain();
  uint64_t v23 = (__CFString *)sub_18264EA3C();
  swift_bridgeObjectRelease();
  unint64_t v24 = (__CFString *)sub_18264EA3C();
  uint64_t v64 = v22;
  CFHTTPMessageRef Request = CFHTTPMessageCreateRequest(v22, v23, v66, v24);

  uint64_t v26 = v67;
  swift_retain();
  v68 = (uint64_t *)(v26 + 16);
  swift_beginAccess();
  uint64_t v27 = *(void *)(v26 + 16);
  unint64_t v28 = *(void *)(v27 + 16);
  if (v28)
  {
    uint64_t v29 = 0LL;
    LODWORD(v65) = 1;
    do
    {
      uint64_t v34 = v29++ << 6;
      uint64_t v35 = v34 + 80;
      while (1)
      {
        if (v29 - 1 >= v28)
        {
          __break(1u);
          goto LABEL_33;
        }

        uint64_t v36 = (uint64_t *)(v27 + v35);
        uint64_t v37 = *(v36 - 6);
        uint64_t v38 = *(v36 - 5);
        uint64_t v39 = *v36;
        BOOL v40 = *(v36 - 4) == 0x65696B6F6F63LL && *(v36 - 3) == 0xE600000000000000LL;
        if (v40 || (sub_18264F4EC() & 1) != 0) {
          break;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v41 = Request;
        uint64_t v42 = v29;
        __int128 v43 = (void *)sub_18264EA3C();
        __int128 v44 = (void *)sub_18264EA3C();
        _CFHTTPMessageAddHeaderFieldValue();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        uint64_t v27 = *v68;
        unint64_t v28 = *(void *)(*v68 + 16);
        uint64_t v29 = v42 + 1;
        v35 += 64LL;
        if (v42 == v28) {
          goto LABEL_30;
        }
      }

      if ((v65 & 1) != 0)
      {
        uint64_t v65 = v37;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v45 = sub_181C1DA34();
        uint64_t v46 = *(void *)(v45 + 16);
        uint64_t v63 = v29;
        if (v46 && (uint64_t v47 = sub_181C8C01C(0x65696B6F6F63LL, 0xE600000000000000LL), (v48 & 1) != 0)) {
          unsigned __int16 v49 = *(_WORD *)(*(void *)(v45 + 56) + 4 * v47);
        }
        else {
          unsigned __int16 v49 = -1;
        }
        swift_bridgeObjectRelease();
        uint64_t v50 = swift_bridgeObjectRetain();
        uint64_t v51 = sub_181C23934(v50, v49);
        swift_release();
        swift_bridgeObjectRelease();
        int64_t v52 = *(void *)(v51 + 16);
        if (v52)
        {
          v61[1] = v39;
          v61[2] = v38;
          uint64_t v62 = Request;
          uint64_t v69 = MEMORY[0x18961AFE8];
          sub_181C9D08C(0, v52, 0);
          uint64_t v53 = v69;
          v61[0] = v51;
          uint64_t v54 = (uint64_t *)(v51 + 80);
          do
          {
            uint64_t v56 = *(v54 - 1);
            uint64_t v55 = *v54;
            uint64_t v69 = v53;
            unint64_t v58 = *(void *)(v53 + 16);
            unint64_t v57 = *(void *)(v53 + 24);
            swift_bridgeObjectRetain();
            if (v58 >= v57 >> 1)
            {
              sub_181C9D08C(v57 > 1, v58 + 1, 1);
              uint64_t v53 = v69;
            }

            *(void *)(v53 + 16) = v58 + 1;
            uint64_t v59 = v53 + 16 * v58;
            *(void *)(v59 + 32) = v56;
            *(void *)(v59 + 40) = v55;
            v54 += 7;
            --v52;
          }

          while (v52);
          swift_release();
          CFHTTPMessageRef Request = v62;
        }

        else
        {
          swift_release();
          uint64_t v53 = MEMORY[0x18961AFE8];
        }

        uint64_t v69 = v53;
        __swift_instantiateConcreteTypeFromMangledName(&qword_18C58AC68);
        sub_181C02894((unint64_t *)&qword_18C58AC70, &qword_18C58AC68, MEMORY[0x189618458]);
        sub_18264E9F4();
        swift_bridgeObjectRelease();
        uint64_t v30 = Request;
        uint64_t v31 = Request;
        uint64_t v32 = (void *)sub_18264EA3C();
        unint64_t v33 = (void *)sub_18264EA3C();
        swift_bridgeObjectRelease();
        _CFHTTPMessageAddHeaderFieldValue();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        CFHTTPMessageRef Request = v31;
        uint64_t v29 = v63;
      }

      LODWORD(v65) = 0;
      uint64_t v27 = *v68;
      unint64_t v28 = *(void *)(*v68 + 16);
    }

    while (v28 != v29);
  }

uint64_t sub_181C39800(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v10 = MEMORY[0x18961AFE8];
  sub_181C9D0A8(0, v2, 0);
  uint64_t v3 = v10;
  if (v2)
  {
    for (uint64_t i = a1 + 32; ; i += 32LL)
    {
      sub_181BF9894(i, (uint64_t)v9);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_181C9D0A8(0, *(void *)(v3 + 16) + 1LL, 1);
        uint64_t v3 = v10;
      }

      unint64_t v6 = *(void *)(v3 + 16);
      unint64_t v5 = *(void *)(v3 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_181C9D0A8(v5 > 1, v6 + 1, 1);
        uint64_t v3 = v10;
      }

      *(void *)(v3 + 16) = v6 + 1;
      *(void *)(v3 + 8 * v6 + 32) = v8;
      if (!--v2) {
        return v3;
      }
    }

    swift_release();
    return 0LL;
  }

  return v3;
}

uint64_t sub_181C3993C(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58B040);
  MEMORY[0x1895F8858](v4);
  v61[0] = (uint64_t)v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_181C3A210(a1, v82);
  uint64_t v6 = *((void *)v1 + 2);
  uint64_t v7 = *((void *)v1 + 3);
  char v8 = *((_BYTE *)v1 + 32);
  __int128 v9 = *(__int128 *)((char *)v1 + 40);
  uint64_t v10 = *((void *)v1 + 7);
  uint64_t v11 = *((void *)v1 + 8);
  uint64_t v12 = *((void *)v1 + 9);
  __int128 v83 = *v1;
  uint64_t v84 = v6;
  uint64_t v85 = v7;
  char v86 = v8;
  __int128 v87 = v9;
  uint64_t v88 = v10;
  uint64_t v89 = v11;
  uint64_t v62 = v12;
  uint64_t v90 = v12;
  HTTPResponse.status.getter(&v76);
  CFIndex v13 = v76;
  __int128 v14 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  swift_bridgeObjectRetain();
  __int128 v15 = (__CFString *)sub_18264EA3C();
  swift_bridgeObjectRelease();
  uint64_t v16 = (__CFString *)sub_18264EA3C();
  v61[1] = (uint64_t)v14;
  CFHTTPMessageRef Response = CFHTTPMessageCreateResponse(v14, v13, v15, v16);

  swift_bridgeObjectRelease();
  sub_181C3A210(v82, &v83);
  if (sub_181C38564((uint64_t)&v83) == 1)
  {
    uint64_t v17 = *(void **)sub_181C38570((uint64_t)&v83);
    sub_181C3A210(v82, &v76);
    int v18 = *(void **)sub_181C38570((uint64_t)&v76);
    sub_181C3A224( (uint64_t)v82,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_181C37B30);
    id v19 = v18;
    id v20 = objc_msgSend(v17, sel_contentDispositionEncodingFallbackArray);
    if (v20)
    {
      unint64_t v21 = v20;
      uint64_t v22 = sub_18264ECC4();

      uint64_t v23 = sub_181C39800(v22);
      sub_181C3A224( (uint64_t)v82,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_181C37D38);
      uint64_t v24 = v23;
      swift_bridgeObjectRelease();
      sub_181C3A224( (uint64_t)v82,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_181C37D38);
      goto LABEL_7;
    }

    sub_181C3A224( (uint64_t)v82,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_181C37D38);
    sub_181C3A224( (uint64_t)v82,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_181C37D38);
  }

  else
  {
    sub_181C38570((uint64_t)&v83);
  }

  uint64_t v24 = 0LL;
LABEL_7:
  uint64_t v25 = v62;
  swift_retain();
  swift_beginAccess();
  uint64_t v26 = *(void *)(v25 + 16);
  uint64_t v27 = *(void **)(v26 + 16);
  if (!v27)
  {
LABEL_49:
    swift_bridgeObjectRelease();
    swift_release();
    sub_181C3A210(v82, &v76);
    if (sub_181C38564((uint64_t)&v76) == 1)
    {
      id v53 = objc_msgSend(*(id *)sub_181C38570((uint64_t)&v76), sel_URL);
      if (v53)
      {
LABEL_54:
        uint64_t v59 = CFURLResponseCreateWithHTTPResponse();

        if (!v59) {
          goto LABEL_59;
        }

        objc_opt_self();
        return swift_dynamicCastObjCClassUnconditional();
      }

      __break(1u);
    }

    uint64_t v54 = (const void *)sub_181C38570((uint64_t)&v76);
    memcpy(v74, v54, sizeof(v74));
    sub_181C3A210(v82, v75);
    uint64_t v55 = (void *)sub_181C38570((uint64_t)v75);
    sub_181C0F308(v55);
    uint64_t v56 = v61[0];
    HTTPRequest.url.getter(v61[0]);
    uint64_t v57 = sub_18264E568();
    uint64_t v58 = *(void *)(v57 - 8);
    id v53 = (id)sub_18264E520();
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v56, v57);
    sub_181C3A224( (uint64_t)v82,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_181C37D38);
    goto LABEL_54;
  }

  unint64_t v2 = 0LL;
  uint64_t v70 = 0LL;
  uint64_t v71 = (uint64_t *)(v25 + 16);
  uint64_t v63 = "Content-Disposition";
  uint64_t v64 = v24;
  unint64_t v65 = 0x800000018272F6E0LL;
  while (v2 < (unint64_t)v27)
  {
    uint64_t v33 = v26 + (v2 << 6);
    uint64_t v35 = *(void *)(v33 + 32);
    uint64_t v34 = *(void *)(v33 + 40);
    uint64_t v36 = *(void *)(v33 + 48);
    uint64_t v37 = *(void *)(v33 + 56);
    char v38 = *(_BYTE *)(v33 + 64);
    unint64_t v40 = *(void *)(v33 + 72);
    unint64_t v39 = *(void *)(v33 + 80);
    v78[0] = v35;
    v78[1] = v34;
    v78[2] = v36;
    v78[3] = v37;
    char v79 = v38;
    unint64_t v80 = v40;
    unint64_t v81 = v39;
    if (!v24 || (v36 != 0xD000000000000013LL || v37 != v65) && (sub_18264F4EC() & 1) == 0)
    {
      uint64_t v28 = v24;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_10;
    }

    uint64_t v66 = v35;
    uint64_t v67 = v37;
    uint64_t v68 = v34;
    unint64_t v69 = v2;
    if ((v39 & 0x2000000000000000LL) != 0) {
      unint64_t v41 = HIBYTE(v39) & 0xF;
    }
    else {
      unint64_t v41 = v40 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v42 = (v40 >> 59) & 1;
    if ((v39 & 0x1000000000000000LL) == 0) {
      LOBYTE(v42) = 1;
    }
    uint64_t v43 = 4LL << v42;
    uint64_t v73 = v39 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v44 = 15LL;
    do
    {
      while (1)
      {
        if (4 * v41 == v44 >> 14)
        {
          CFIndex v76 = v40;
          unint64_t v77 = v39;
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          uint64_t v48 = v64;
          swift_bridgeObjectRetain_n();
          unint64_t v2 = Response;
          uint64_t v49 = v70;
          char v50 = sub_181C3A4A0(&v76, v48);
          swift_bridgeObjectRelease();
          uint64_t v70 = v49;
          if (v49) {
            goto LABEL_61;
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          goto LABEL_46;
        }

        unint64_t v45 = v44 & 0xC;
        unint64_t v46 = v44;
        if (v45 == v43) {
          unint64_t v46 = sub_181C23710(v44, v40, v39);
        }
        unint64_t v2 = v46 >> 16;
        if (v46 >> 16 >= v41)
        {
          __break(1u);
LABEL_57:
          __break(1u);
          goto LABEL_58;
        }

        if ((v39 & 0x1000000000000000LL) == 0) {
          break;
        }
        unint64_t v2 = sub_18264EBC8();
        if (v45 == v43) {
          goto LABEL_33;
        }
LABEL_36:
        if ((v39 & 0x1000000000000000LL) != 0) {
          goto LABEL_37;
        }
LABEL_23:
        unint64_t v44 = (v44 & 0xFFFFFFFFFFFF0000LL) + 65540;
        if ((v2 & 0x80) != 0) {
          goto LABEL_44;
        }
      }

      if ((v39 & 0x2000000000000000LL) != 0)
      {
        CFIndex v76 = v40;
        unint64_t v77 = v73;
        unint64_t v2 = *((unsigned __int8 *)&v76 + v2);
        if (v45 == v43) {
          goto LABEL_33;
        }
        goto LABEL_36;
      }

      uint64_t v47 = (v39 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v40 & 0x1000000000000000LL) == 0) {
        uint64_t v47 = sub_18264F228();
      }
      unint64_t v2 = *(unsigned __int8 *)(v47 + v2);
      if (v45 != v43) {
        goto LABEL_36;
      }
LABEL_33:
      unint64_t v44 = sub_181C23710(v44, v40, v39);
      if ((v39 & 0x1000000000000000LL) == 0) {
        goto LABEL_23;
      }
LABEL_37:
      if (v41 <= v44 >> 16) {
        goto LABEL_57;
      }
      unint64_t v44 = sub_18264EB98();
    }

    while ((v2 & 0x80) == 0);
LABEL_44:
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v51 = v64;
    swift_bridgeObjectRetain_n();
    unint64_t v2 = Response;
    uint64_t v52 = v70;
    char v50 = sub_181C96694(v40, v39, v51, (void *)v2, (uint64_t)v78);
    uint64_t v48 = v51;
    swift_bridgeObjectRelease_n();

    uint64_t v70 = v52;
    if (v52) {
      goto LABEL_62;
    }
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
LABEL_46:
    uint64_t v24 = v48;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    uint64_t v32 = v71;
    unint64_t v2 = v69;
    if ((v50 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }

    uint64_t v28 = v24;
LABEL_10:
    uint64_t v29 = Response;
    uint64_t v30 = (void *)sub_18264EA3C();
    uint64_t v31 = (void *)sub_18264EA3C();
    _CFHTTPMessageAddHeaderFieldValue();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t v24 = v28;
    uint64_t v32 = v71;
LABEL_11:
    ++v2;
    swift_beginAccess();
    uint64_t v26 = *v32;
    uint64_t v27 = *(void **)(*v32 + 16);
  }

void *sub_181C3A210(void *__src, void *__dst)
{
  return memcpy(__dst, __src, 0x120uLL);
}

uint64_t sub_181C3A224( uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  __int128 v5 = *(_OWORD *)(a1 + 240);
  __int128 v6 = *(_OWORD *)(a1 + 256);
  __int128 v4 = *(_OWORD *)(a1 + 208);
  a2( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  *(void *)(a1 + 112),  *(void *)(a1 + 120),  *(void *)(a1 + 128),  *(void *)(a1 + 136),  *(void *)(a1 + 144),  *(void *)(a1 + 152),  *(void *)(a1 + 160),  *(void *)(a1 + 168),  *(void *)(a1 + 176),  *(void *)(a1 + 184),  *(void *)(a1 + 192),  *(void *)(a1 + 200),  v4,  *((void *)&v4 + 1),  *(void *)(a1 + 224),  *(void *)(a1 + 232),  v5,  *((void *)&v5 + 1),  v6,  *((void *)&v6 + 1),  *(void *)(a1 + 272),  *(void *)(a1 + 280));
  return a1;
}

uint64_t sub_181C3A2A8(__int128 *a1)
{
  __int128 v3 = *a1;
  sub_181C3A7B4((uint64_t)&v3);
  swift_retain();
  swift_retain();
  swift_retain();
  sub_181C23B7C();
  sub_181C3A7DC((uint64_t)&v3);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v1 = sub_18264EB20();
  swift_release();
  return v1;
}

uint64_t sub_181C3A360(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_18264EB20();
  swift_release();
  return v4;
}

uint64_t sub_181C3A3F4(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_18264EB20();
  swift_release();
  return v4;
}

uint64_t sub_181C3A468@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_18264EB20();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_181C3A4A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = sub_18264EA9C();
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  if ((v5 & 0x1000000000000000LL) == 0)
  {
    if ((v5 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_11:
    uint64_t v14 = *(void *)(a2 + 16);
    if (v14)
    {
      swift_bridgeObjectRetain();
      uint64_t v15 = 0LL;
      while (1)
      {
        sub_18264EA90();
        __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D488);
        sub_181C02894((unint64_t *)&qword_18C58D490, &qword_18C58D488, MEMORY[0x189617C70]);
        sub_18264EA6C();
        if (v16) {
          break;
        }
        if (v14 == ++v15)
        {
LABEL_15:
          swift_bridgeObjectRelease();
          return 0LL;
        }
      }

      swift_bridgeObjectRelease();
      int v18 = (void *)sub_18264EA3C();
      id v19 = (void *)sub_18264EA3C();
      swift_bridgeObjectRelease();
      _CFHTTPMessageAddHeaderFieldValue();

      return 1LL;
    }

    return 0LL;
  }

  uint64_t v6 = sub_181C8B3F4();
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  *a1 = v6;
  a1[1] = v13;
  if ((v13 & 0x2000000000000000LL) != 0) {
    goto LABEL_11;
  }
LABEL_3:
  if ((v6 & 0x1000000000000000LL) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 16);
    if (v7) {
      goto LABEL_5;
    }
  }

  else
  {
    sub_18264F228();
    uint64_t v7 = *(void *)(a2 + 16);
    if (v7)
    {
LABEL_5:
      swift_bridgeObjectRetain();
      uint64_t v8 = 0LL;
      while (1)
      {
        sub_18264EA90();
        __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D488);
        sub_181C02894((unint64_t *)&qword_18C58D490, &qword_18C58D488, MEMORY[0x189617C70]);
        sub_18264EA6C();
        if (v9) {
          break;
        }
        if (v7 == ++v8) {
          goto LABEL_15;
        }
      }

      swift_bridgeObjectRelease();
      uint64_t v10 = (void *)sub_18264EA3C();
      uint64_t v11 = (void *)sub_18264EA3C();
      swift_bridgeObjectRelease();
      _CFHTTPMessageAddHeaderFieldValue();

      return 1LL;
    }
  }

  return 0LL;
}

uint64_t sub_181C3A774()
{
  return swift_deallocObject();
}

uint64_t sub_181C3A784(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  return sub_181C38AE8(a1, a2, a3, a4, *(uint64_t **)(v4 + 16));
}

uint64_t sub_181C3A78C()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

uint64_t sub_181C3A7B4(uint64_t a1)
{
  return a1;
}

uint64_t sub_181C3A7DC(uint64_t a1)
{
  return a1;
}

uint64_t sub_181C3A804()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x189604038]), sel_init);
  *(void *)&v5[0] = 6256494LL;
  *((void *)&v5[0] + 1) = 0xE300000000000000LL;
  sub_18264EB74();
  swift_bridgeObjectRelease();
  uint64_t v1 = (void *)sub_18264EA3C();
  swift_bridgeObjectRelease();
  id v2 = objc_msgSend(v0, sel_valueForKey_, v1);

  if (v2)
  {
    sub_18264F0F0();

    swift_unknownObjectRelease();
    sub_181C275FC(&v4, v5);
  }

  else
  {

    memset(v5, 0, sizeof(v5));
  }

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58D300);
  else {
    return 2LL;
  }
}

uint64_t sub_181C3A954()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x189604038]), sel_init);
  *(void *)&v7[0] = 6256494LL;
  *((void *)&v7[0] + 1) = 0xE300000000000000LL;
  sub_18264EB74();
  swift_bridgeObjectRelease();
  uint64_t v1 = (void *)sub_18264EA3C();
  swift_bridgeObjectRelease();
  id v2 = objc_msgSend(v0, sel_valueForKey_, v1);

  if (v2)
  {
    sub_18264F0F0();

    swift_unknownObjectRelease();
    sub_181C275FC(&v6, v7);
  }

  else
  {

    memset(v7, 0, sizeof(v7));
  }

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58D300);
  int v3 = swift_dynamicCast();
  uint64_t v4 = v6;
  if (!v3) {
    return 0LL;
  }
  return v4;
}

void sub_181C3AAA8()
{
  int64_t v1 = v0;
  *(void *)&__int128 v53 = 0LL;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58D5A0);
  uint64_t v3 = MEMORY[0x1895F8858](v2);
  uint64_t v51 = (uint64_t)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v3);
  char v50 = (char *)&v47 - v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E780);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v12 = (char *)&v47 - v11;
  if (qword_18C58B1C8 != -1) {
LABEL_38:
  }
    swift_once();
  uint64_t v13 = sub_18264E934();
  __swift_project_value_buffer(v13, (uint64_t)qword_18C58D4B0);
  swift_retain_n();
  uint64_t v14 = (os_log_s *)sub_18264E91C();
  os_log_type_t v15 = sub_18264F018();
  BOOL v16 = os_log_type_enabled(v14, v15);
  int64_t v52 = v1;
  if (v16)
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    int v18 = (os_unfair_lock_s *)swift_slowAlloc();
    os_unfair_lock_t v49 = v18;
    *(_DWORD *)uint64_t v17 = 136315138;
    uint64_t v48 = v17 + 4;
    uint64_t v55 = 67LL;
    unint64_t v56 = 0xE100000000000000LL;
    uint64_t v57 = v18;
    uint64_t id = nw_connection_get_id(*(void **)(*(void *)(v52 + 16) + 16LL));
    sub_18264F480();
    sub_18264EB74();
    swift_bridgeObjectRelease();
    uint64_t v55 = sub_181BF7900(v55, v56, (uint64_t *)&v57);
    int64_t v1 = v52;
    sub_18264F0CC();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_181A5C000, v14, v15, "%s: Invalidating", v17, 0xCu);
    os_unfair_lock_t v19 = v49;
    swift_arrayDestroy();
    MEMORY[0x186E12168](v19, -1LL, -1LL);
    MEMORY[0x186E12168](v17, -1LL, -1LL);

    uint64_t v20 = v53;
    BOOL v21 = (void)v53 == 0LL;
  }

  else
  {

    swift_release_n();
    BOOL v21 = 1;
    uint64_t v20 = v53;
  }

  uint64_t v22 = (os_unfair_lock_s *)(*(void *)(v1 + 80) + 16LL);
  os_unfair_lock_lock(v22);
  sub_181C4F63C(&v55);
  if (!v21
    || (uint64_t v23 = v55,
        os_unfair_lock_unlock(v22),
        nw_connection_cancel(*(nw_connection_t *)(v23 + 16)),
        swift_release(),
        os_unfair_lock_lock(v22),
        sub_181C4F648(&v55),
        v20))
  {
    os_unfair_lock_unlock(v22);
    __break(1u);
    return;
  }

  uint64_t v24 = v55;
  os_unfair_lock_t v49 = v22;
  os_unfair_lock_unlock(v22);
  uint64_t v25 = *(void *)(v1 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_sendingFileTransferSession);
  if (v25) {
    objc_msgSend(*(id *)(v25 + 32), sel_invalidate);
  }
  uint64_t v48 = 0LL;
  uint64_t v26 = *(void *)(v1 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_receivingFileTransferSession);
  if (v26) {
    objc_msgSend(*(id *)(v26 + 32), sel_invalidate);
  }
  int64_t v27 = 0LL;
  uint64_t v28 = v24 + 64;
  uint64_t v29 = 1LL << *(_BYTE *)(v24 + 32);
  uint64_t v30 = -1LL;
  if (v29 < 64) {
    uint64_t v30 = ~(-1LL << v29);
  }
  unint64_t v31 = v30 & *(void *)(v24 + 64);
  int64_t v1 = (unint64_t)(v29 + 63) >> 6;
  __int128 v53 = xmmword_1826610B0;
  while (1)
  {
    if (v31)
    {
      unint64_t v32 = __clz(__rbit64(v31));
      v31 &= v31 - 1;
      unint64_t v33 = v32 | (v27 << 6);
      goto LABEL_15;
    }

    int64_t v36 = v27 + 1;
    if (__OFADD__(v27, 1LL))
    {
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }

    if (v36 >= v1) {
      goto LABEL_33;
    }
    unint64_t v37 = *(void *)(v28 + 8 * v36);
    ++v27;
    if (!v37)
    {
      int64_t v27 = v36 + 1;
      if (v36 + 1 >= v1) {
        goto LABEL_33;
      }
      unint64_t v37 = *(void *)(v28 + 8 * v27);
      if (!v37)
      {
        int64_t v27 = v36 + 2;
        if (v36 + 2 >= v1) {
          goto LABEL_33;
        }
        unint64_t v37 = *(void *)(v28 + 8 * v27);
        if (!v37)
        {
          int64_t v27 = v36 + 3;
          if (v36 + 3 >= v1) {
            goto LABEL_33;
          }
          unint64_t v37 = *(void *)(v28 + 8 * v27);
          if (!v37) {
            break;
          }
        }
      }
    }

uint64_t sub_181C3B0C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _OWORD *a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 152) = v19;
  *(void *)(v9 + 160) = v8;
  *(void *)(v9 + 136) = a7;
  *(void *)(v9 + 144) = v18;
  *(void *)(v9 + 120) = a2;
  *(void *)(v9 + 128) = a4;
  *(void *)(v9 + 112) = a1;
  *(void *)(v9 + 168) = *v8;
  *(void *)(v9 + 176) = type metadata accessor for NWFileSerializationContext(0LL);
  *(void *)(v9 + 184) = swift_task_alloc();
  uint64_t v15 = sub_18264F09C();
  *(void *)(v9 + 192) = v15;
  *(void *)(v9 + 200) = *(void *)(v15 - 8);
  *(void *)(v9 + 208) = swift_task_alloc();
  *(void *)(v9 + 216) = *(void *)(v18 - 8);
  *(void *)(v9 + 224) = swift_task_alloc();
  *(_OWORD *)(v9 + 96) = *a6;
  BOOL v16 = (void *)swift_task_alloc();
  *(void *)(v9 + 232) = v16;
  void *v16 = v9;
  v16[1] = sub_181C3B1DC;
  return sub_181C3C3CC(a3, a4, a5, (_OWORD *)(v9 + 96), a8);
}

uint64_t sub_181C3B1DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[30] = a1;
  v4[31] = a2;
  v4[32] = v2;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_181C3B24C()
{
  uint64_t v1 = *(void *)(v0 + 256);
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v3 = *(os_unfair_lock_s **)(v2 + 80);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v4 + 16) = sub_181C4F678;
  *(void *)(v4 + 24) = v2;
  uint64_t v5 = v3 + 4;
  os_unfair_lock_lock(v5);
  (*(void (**)(uint64_t *__return_ptr))(v4 + 16))(&v37);
  if (v1)
  {
    os_unfair_lock_unlock(v5);
    return swift_task_dealloc();
  }

  char v7 = v37;
  os_unfair_lock_unlock(v5);
  swift_task_dealloc();
  if ((v7 & 1) == 0) {
    goto LABEL_13;
  }
  uint64_t v8 = *(void *)(v0 + 136);
  uint64_t v9 = swift_conformsToProtocol2();
  uint64_t v10 = v9 ? v9 : 0LL;
  if (!v9) {
    uint64_t v8 = 0LL;
  }
  if (!v8) {
    goto LABEL_13;
  }
  uint64_t v12 = *(void *)(v0 + 240);
  unint64_t v11 = *(void *)(v0 + 248);
  uint64_t v13 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v10 + 24);
  *(void *)(v0 + 40) = v8;
  *(void *)(v0 + 48) = v10;
  __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v0 + 16));
  sub_181BCD4AC(v12, v11);
  v13(v12, v11, v8, v10);
  uint64_t v14 = *(void *)(v0 + 216);
  sub_181BCD38C(v0 + 16, v0 + 56);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D6F0);
  int v15 = swift_dynamicCast();
  BOOL v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  if (!v15)
  {
    uint64_t v26 = *(void *)(v0 + 200);
    uint64_t v25 = *(void *)(v0 + 208);
    uint64_t v27 = *(void *)(v0 + 192);
    v16(v25, 1LL, 1LL, *(void *)(v0 + 144));
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
    uint64_t v28 = sub_18264F204();
    uint64_t v29 = (void *)swift_allocError();
    unint64_t v31 = v30;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D6F8);
    __swift_project_boxed_opaque_existential_2((void *)(v0 + 16), *(void *)(v0 + 40));
    *unint64_t v31 = swift_getDynamicType();
    sub_18264F1F8();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v28 - 8) + 104LL))( v31,  *MEMORY[0x189619358],  v28);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_2(v0 + 16);

LABEL_13:
    uint64_t v32 = *(void *)(v0 + 176);
    unint64_t v33 = *(void **)(v0 + 184);
    uint64_t v34 = *(void *)(v0 + 160);
    uint64_t v35 = *(void *)(v0 + 128);
    uint64_t v36 = *(void *)(v0 + 120);
    v33[3] = *(void *)(v0 + 168);
    v33[4] = &off_189BAF818;
    *unint64_t v33 = v34;
    sub_181BC9248( v35,  (uint64_t)v33 + *(int *)(v32 + 20),  (uint64_t (*)(void))type metadata accessor for NWActorID);
    swift_retain();
    sub_181BCD54C(v36, (uint64_t)v33);
    sub_181BC920C((uint64_t)v33, type metadata accessor for NWFileSerializationContext);
    sub_18264E3B8();
    swift_release();
    sub_181BCD4F0(*(void *)(v0 + 240), *(void *)(v0 + 248));
    goto LABEL_14;
  }

  uint64_t v18 = *(void *)(v0 + 240);
  unint64_t v17 = *(void *)(v0 + 248);
  uint64_t v20 = *(void *)(v0 + 216);
  uint64_t v19 = *(void *)(v0 + 224);
  uint64_t v21 = *(void *)(v0 + 208);
  uint64_t v22 = *(void *)(v0 + 144);
  uint64_t v23 = *(void *)(v0 + 112);
  v16(v21, 0LL, 1LL, v22);
  sub_181BCD4F0(v18, v17);
  uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32);
  v24(v19, v21, v22);
  v24(v23, v19, v22);
  __swift_destroy_boxed_opaque_existential_2(v0 + 16);
LABEL_14:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181C3B65C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181C3B6B0(void *a1, uint64_t (*a2)(void))
{
  return a2(*a1);
}

uint64_t sub_181C3B6D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(*(void *)(v2 + 80) + 16LL);
  os_unfair_lock_lock(v4);
  sub_181BF787C(v5, sub_181C4EF40);
  os_unfair_lock_unlock(v4);
  type metadata accessor for NWActivity();
  swift_allocObject();
  uint64_t v6 = *(void **)(NWActivity.init(domain:label:)(0x39uLL, 1uLL) + 16);
  nw_activity_set_parent_activity(v6, *(void **)(*(void *)(a2 + 112) + 16LL));
  nw_activity_activate(v6);
  os_unfair_lock_lock(v4);
  sub_181BF787C(v7, sub_181C4EF58);
  os_unfair_lock_unlock(v4);
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  sub_181BC904C((uint64_t)sub_181C4EF98);
  NWConnection.stateUpdateHandler.setter((uint64_t)sub_181C4EF98, v8);
  swift_release_n();
  if (qword_18C58B1D8 != -1) {
    swift_once();
  }
  NWConnection.start(queue:)((void *)qword_18C58D4E0);
  return swift_release();
}

uint64_t sub_181C3B844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_18264EDCC();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1LL, v6) != 1)
  {
    sub_18264EDC0();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }

  sub_181BDA0F0(a1, &qword_18C58C3E0);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_18264ED6C();
    swift_unknownObjectRelease();
  }

uint64_t sub_181C3B990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_18264EDCC();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1LL, v5) != 1)
  {
    sub_18264EDC0();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }

  sub_181BDA0F0(a1, &qword_18C58C3E0);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_18264ED6C();
    swift_unknownObjectRelease();
  }

  return swift_task_create();
}

uint64_t sub_181C3BAC4()
{
  uint64_t v0 = sub_18264E934();
  __swift_allocate_value_buffer(v0, qword_18C58D4B0);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_18C58D4B0);
  if (qword_18C58B270 != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_project_value_buffer(v0, (uint64_t)qword_18C5A4A60);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_181C3BB54()
{
  uint64_t v0 = sub_18264E934();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1895F8858](v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_18264E8D4();
  __swift_allocate_value_buffer(v4, qword_18C58D4C8);
  __swift_project_value_buffer(v4, (uint64_t)qword_18C58D4C8);
  if (qword_18C58B1C8 != -1) {
    swift_once();
  }
  uint64_t v5 = __swift_project_value_buffer(v0, (uint64_t)qword_18C58D4B0);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return sub_18264E8BC();
}

uint64_t sub_181C3BC3C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)(a1 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection__associatedActorIDs);
  swift_beginAccess();
  *a2 = *v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_181C3BC9C()
{
  uint64_t v0 = sub_18264F03C();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1895F8858](v0);
  uint64_t v3 = (char *)v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_18264F030();
  uint64_t v5 = (uint64_t (*)(uint64_t))MEMORY[0x18961B8A8];
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = sub_18264E97C();
  MEMORY[0x1895F8858](v6);
  sub_181C4F4D8(0LL, (unint64_t *)&qword_18C58D700);
  sub_18264E970();
  v8[1] = MEMORY[0x18961AFE8];
  sub_181BD67D4(&qword_18C58C1E8, v5, MEMORY[0x18961B8C0]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58D710);
  sub_181BEB6B8();
  sub_18264F108();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x18961B900], v0);
  uint64_t result = sub_18264F060();
  qword_18C58D4E0 = result;
  return result;
}

uint64_t sub_181C3BE58()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D620);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x1895F8858](v0);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v2);
  uint64_t v6 = (char *)&v14 - v5;
  uint64_t v7 = (void *)objc_opt_self();
  id v8 = objc_msgSend(v7, sel_megabytes);
  sub_181C4F4D8(0LL, (unint64_t *)&unk_18C58D628);
  sub_18264E418();
  id v9 = objc_msgSend(v7, sel_bytes);
  sub_18264E430();

  uint64_t v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v4, v0);
  sub_18264E424();
  double v12 = v11;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v10)(v6, v0);
  if ((~*(void *)&v12 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }

  if (v12 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if (v12 < 9.22337204e18)
  {
    qword_18C58D4E8 = (uint64_t)v12;
    return result;
  }

uint64_t sub_181C3BFE4()
{
  uint64_t result = os_variant_has_internal_content();
  byte_18C58D4F0 = result;
  return result;
}

uint64_t sub_181C3C008()
{
  uint64_t result = sub_18264F750();
  qword_18C58D4F8 = result;
  return result;
}

uint64_t sub_181C3C058(uint64_t a1, char a2)
{
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58D790);
  uint64_t v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = 0;
  uint64_t v6 = MEMORY[0x18961AFF0];
  *(void *)(v2 + 80) = v5;
  *(void *)(v2 + 88) = v6;
  *(void *)(v2 + 96) = v6;
  uint64_t v7 = v2 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_resolvedActorIDContinuation;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A1E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, 1LL, 1LL, v8);
  uint64_t v9 = MEMORY[0x18961AFE8];
  *(void *)(v2 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection__associatedActorIDs) = MEMORY[0x18961AFE8];
  *(void *)(v2 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_sendingFileTransferSession) = 0LL;
  *(void *)(v2 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_receivingFileTransferSession) = 0LL;
  *(void *)(v2 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_incomingFiles) = v9;
  *(_BYTE *)(v2 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_isDisconnected) = 0;
  *(void *)(v2 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_interruptionHandlers) = v9;
  *(_BYTE *)(v2 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_supportsCustomSerialization) = 0;
  *(void *)(v2 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_connectionEstablishedActivity) = 0LL;
  *(void *)(v2 + 16) = a1;
  *(_BYTE *)(v2 + 72) = a2;
  *(_BYTE *)(v2 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_allowCustomSerialization) = sub_181C3A804() & 1;
  return v2;
}

void sub_181C3C17C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (os_unfair_lock_s *)(*(void *)(a2 + 80) + 16LL);
  os_unfair_lock_lock(v2);
  sub_181BF787C(v3, sub_181C4F660);
  os_unfair_lock_unlock(v2);
  uint64_t v4 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  sub_181BC904C((uint64_t)sub_181C4EF98);
  NWConnection.stateUpdateHandler.setter((uint64_t)sub_181C4EF98, v4);
  swift_release_n();
  if (qword_18C58B1D8 != -1) {
    swift_once();
  }
  NWConnection.start(queue:)((void *)qword_18C58D4E0);
}

uint64_t sub_181C3C268(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58D5A0);
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A1E0);
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a2, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0LL, 1LL, v7);
  uint64_t v9 = a1 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_resolvedActorIDContinuation;
  swift_beginAccess();
  sub_181C4F454((uint64_t)v6, v9);
  return swift_endAccess();
}

uint64_t sub_181C3C354@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 88);
  swift_bridgeObjectRetain();
  *(void *)(a1 + 88) = sub_181C884F8(MEMORY[0x18961AFE8]);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t sub_181C3C3CC(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, uint64_t a5)
{
  *(void *)(v6 + 136) = a5;
  *(void *)(v6 + 144) = v5;
  *(void *)(v6 + 120) = a2;
  *(void *)(v6 + 128) = a3;
  *(void *)(v6 + 112) = a1;
  *(void *)(v6 + 152) = *v5;
  *(void *)(v6 + 160) = type metadata accessor for RemoteCallEnvelope(0LL);
  *(void *)(v6 + 168) = swift_task_alloc();
  *(_OWORD *)(v6 + 176) = *a4;
  return swift_task_switch();
}

void sub_181C3C444()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(*(void *)(v0 + 136) + 112LL);
  uint64_t v3 = *(void **)(*(void *)(v1 + 16) + 16LL);
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t ObjectType = swift_getObjectType();
  *(void *)(v0 + 56) = v4;
  *(void *)(v0 + 80) = ObjectType;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D1E0);
  swift_dynamicCast();
  nw_connection_start_activity(v3, *(void **)(v0 + 104));
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v6 = *(os_unfair_lock_s **)(v1 + 80);
  uint64_t v7 = swift_task_alloc();
  *(void *)(v7 + 16) = sub_181C4F678;
  *(void *)(v7 + 24) = v1;
  uint64_t v8 = v6 + 4;
  os_unfair_lock_lock(v6 + 4);
  (*(void (**)(__int128 *__return_ptr))(v7 + 16))(&v26);
  uint64_t v9 = *(void *)(v0 + 144);
  uint64_t v10 = *(void *)(v0 + 152);
  uint64_t v11 = *(void *)(v0 + 120);
  int v12 = v26;
  *(_BYTE *)(v0 + 248) = v26;
  __int128 v25 = *(_OWORD *)(v0 + 176);
  os_unfair_lock_unlock(v8);
  swift_task_dealloc();
  __int128 v26 = v25;
  *(void *)(v0 + 40) = v10;
  *(void *)(v0 + 48) = &off_189BAF818;
  *(void *)(v0 + 16) = v9;
  swift_retain();
  uint64_t v13 = sub_181BCCF3C(v0 + 16, v11, v12);
  uint64_t v14 = *(void *)(v0 + 168);
  uint64_t v15 = *(void *)(v0 + 176);
  BOOL v16 = *(int **)(v0 + 160);
  uint64_t v17 = *(void *)(v0 + 120);
  uint64_t v18 = *(void *)(v0 + 112);
  __swift_destroy_boxed_opaque_existential_2(v0 + 16);
  uint64_t is_selected_for_reporting = nw_activity_is_selected_for_reporting(*(void **)(v2 + 16));
  uint64_t v20 = sub_18264E688();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16LL))(v14, v18, v20);
  sub_181BC9248(v17, v14 + v16[5], (uint64_t (*)(void))type metadata accessor for NWActorID);
  uint64_t v21 = sub_18264E6C4();
  uint64_t v22 = (uint64_t *)(v14 + v16[6]);
  *uint64_t v22 = v21;
  v22[1] = v23;
  *(void *)(v14 + v16[7]) = v15;
  *(void *)(v14 + v16[8]) = v13;
  *(void *)(v14 + v16[9]) = is_selected_for_reporting;
  swift_bridgeObjectRetain();
  *(void *)(v0 + 192) = sub_181C9FEA8();
  *(void *)(v0 + 200) = v24;
  __asm { BR              X11 }

uint64_t sub_181C3C6D8(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 208) = BYTE6(a2);
  return swift_task_switch();
}

uint64_t sub_181C3C74C()
{
  *(void *)(*(void *)(v0 + 136) + 120LL) = *(void *)(v0 + 208);
  return swift_task_switch();
}

uint64_t sub_181C3C76C()
{
  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v1 = *(void *)(v0 + 200);
  char v3 = *(_BYTE *)(v0 + 248);
  uint64_t v5 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 152);
  uint64_t v7 = *(void *)(v0 + 128);
  uint64_t v6 = *(void *)(v0 + 136);
  uint64_t v8 = *(void *)(v0 + 112);
  uint64_t v9 = swift_task_alloc();
  *(void *)(v0 + 216) = v9;
  *(void *)(v9 + 16) = v5;
  *(void *)(v9 + 24) = v8;
  *(void *)(v9 + 32) = v6;
  *(void *)(v9 + 40) = v2;
  *(void *)(v9 + 48) = v1;
  *(_BYTE *)(v9 + 56) = 6;
  *(_BYTE *)(v9 + 57) = v3;
  *(void *)(v9 + 64) = v7;
  *(void *)(v9 + 72) = v4;
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 224) = v10;
  v10[2] = v8;
  v10[3] = v5;
  v10[4] = v6;
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 232) = v11;
  void *v11 = v0;
  v11[1] = sub_181C3C864;
  return sub_18264F4F8();
}

uint64_t sub_181C3C864()
{
  *(void *)(*(void *)v1 + 240LL) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_181C3C8D8()
{
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 144);
  sub_181BCD4F0(*(void *)(v0 + 192), *(void *)(v0 + 200));
  sub_181BC920C(v1, type metadata accessor for RemoteCallEnvelope);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 96);
  sub_181C3C9B0(v2);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v3, v4);
}

uint64_t sub_181C3C954()
{
  uint64_t v1 = *(void *)(v0 + 168);
  sub_181BCD4F0(*(void *)(v0 + 192), *(void *)(v0 + 200));
  sub_181BC920C(v1, type metadata accessor for RemoteCallEnvelope);
  sub_181C3C9B0(*(void *)(v0 + 144));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181C3C9B0(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 16) + 16LL);
  swift_getObjectType();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D1E0);
  swift_dynamicCast();
  nw_connection_end_activity(v1, v3);
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_181C3CA4C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8)
{
  *(void *)(v8 + 320) = v12;
  *(void *)(v8 + 328) = v13;
  *(_BYTE *)(v8 + 67) = a8;
  *(_BYTE *)(v8 + 66) = a7;
  *(void *)(v8 + 304) = a5;
  *(void *)(v8 + 312) = a6;
  *(void *)(v8 + 288) = a3;
  *(void *)(v8 + 296) = a4;
  *(void *)(v8 + 272) = a1;
  *(void *)(v8 + 280) = a2;
  uint64_t v9 = sub_18264E688();
  *(void *)(v8 + 336) = v9;
  *(void *)(v8 + 344) = *(void *)(v9 - 8);
  *(void *)(v8 + 352) = swift_task_alloc();
  uint64_t v10 = sub_18264E6D0();
  *(void *)(v8 + 360) = v10;
  *(void *)(v8 + 368) = *(void *)(v10 - 8);
  *(void *)(v8 + 376) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_181C3CAEC()
{
  uint64_t v1 = *(void *)(v0 + 328);
  char v2 = *(_BYTE *)(v0 + 67);
  char v3 = *(_BYTE *)(v0 + 66);
  uint64_t v5 = *(void *)(v0 + 304);
  uint64_t v4 = *(void *)(v0 + 312);
  uint64_t v7 = *(void *)(v0 + 288);
  uint64_t v6 = *(void *)(v0 + 296);
  uint64_t v8 = *(void *)(v0 + 280);
  uint64_t v9 = swift_task_alloc();
  *(void *)(v0 + 384) = v9;
  *(void *)(v9 + 16) = v6;
  *(void *)(v9 + 24) = v8;
  *(void *)(v9 + 32) = v5;
  *(void *)(v9 + 40) = v4;
  *(void *)(v9 + 48) = v7;
  *(_BYTE *)(v9 + 56) = v3;
  *(_BYTE *)(v9 + 57) = v2;
  *(void *)(v9 + 64) = v1;
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 392) = v10;
  v10[2] = v8;
  v10[3] = v7;
  v10[4] = sub_181C4EE20;
  v10[5] = v9;
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 400) = v11;
  void *v11 = v0;
  v11[1] = sub_181C3CBF8;
  return sub_18264F594();
}

uint64_t sub_181C3CBF8()
{
  *(void *)(*(void *)v1 + 408LL) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t sub_181C3CC64()
{
  uint64_t v1 = *(void **)(v0 + 408);
  swift_task_dealloc();
  swift_task_dealloc();
  *(void *)(v0 + 248) = v1;
  id v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D6A0);
  char v3 = *(void **)(v0 + 200);
  unint64_t v4 = *(void *)(v0 + 208);
  unint64_t v5 = *(void *)(v0 + 216);
  uint64_t v6 = *(void **)(v0 + 408);
  *(void *)(v0 + 224) = v6;
  id v7 = v6;
  if (!swift_dynamicCast())
  {
LABEL_16:
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    char v13 = 2;
    uint64_t v14 = 1LL;
    goto LABEL_17;
  }

  char v3 = *(void **)(v0 + 176);
  unint64_t v4 = *(void *)(v0 + 184);
  unint64_t v5 = *(void *)(v0 + 192);
  if (v5 >> 60 != 11 || v3 != (void *)5 || v4 || v5 != 0xB000000000000000LL)
  {
LABEL_15:
    sub_181C4EE64(v3, v4, v5);
    goto LABEL_16;
  }

  uint64_t v8 = *(void **)(v0 + 408);
  *(void *)(v0 + 232) = v8;
  id v9 = v8;
  unint64_t v10 = *(void *)(v0 + 168);
  sub_181C4EE64(*(void **)(v0 + 152), *(void *)(v0 + 160), v10);
  if (v10 >> 60 != 8) {
    goto LABEL_16;
  }
  uint64_t v11 = *(void **)(v0 + 408);
  *(void *)(v0 + 240) = v11;
  id v12 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D6A8);
  if ((swift_dynamicCast() & 1) != 0)
  {
    sub_181BE61DC((__int128 *)(v0 + 72), v0 + 112);
    __swift_project_boxed_opaque_existential_2((void *)(v0 + 112), *(void *)(v0 + 136));
    char v13 = 1;
    swift_getDynamicType();
    uint64_t v14 = sub_18264E43C();
    uint64_t v16 = v15;
    __swift_project_boxed_opaque_existential_2((void *)(v0 + 112), *(void *)(v0 + 136));
    uint64_t v17 = sub_18264E448();
    __swift_destroy_boxed_opaque_existential_2(v0 + 112);
  }

  else
  {
    *(void *)(v0 + 104) = 0LL;
    *(_OWORD *)(v0 + 72) = 0u;
    *(_OWORD *)(v0 + 88) = 0u;
    sub_181BDA0F0(v0 + 72, (uint64_t *)&unk_18C58D6B0);
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v14 = 2LL;
    char v13 = 2;
  }

uint64_t sub_181C3CEE4()
{
  __int128 v1 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 416) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 432) = v1;
  *(_OWORD *)(v0 + 448) = *(_OWORD *)(v0 + 48);
  *(_BYTE *)(v0 + 68) = *(_BYTE *)(v0 + 64);
  swift_task_dealloc();
  if (qword_18C58B1C8 != -1) {
    swift_once();
  }
  uint64_t v3 = *(void *)(v0 + 368);
  uint64_t v2 = *(void *)(v0 + 376);
  uint64_t v5 = *(void *)(v0 + 352);
  uint64_t v4 = *(void *)(v0 + 360);
  uint64_t v6 = *(void *)(v0 + 336);
  uint64_t v7 = *(void *)(v0 + 344);
  uint64_t v8 = *(void *)(v0 + 320);
  uint64_t v9 = *(void *)(v0 + 288);
  uint64_t v10 = sub_18264E934();
  __swift_project_value_buffer(v10, (uint64_t)qword_18C58D4B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v8, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v9, v6);
  uint64_t v11 = (os_log_s *)sub_18264E91C();
  os_log_type_t v12 = sub_18264F018();
  BOOL v13 = os_log_type_enabled(v11, v12);
  uint64_t v15 = *(void *)(v0 + 368);
  uint64_t v14 = *(void *)(v0 + 376);
  uint64_t v16 = *(void *)(v0 + 352);
  uint64_t v17 = *(void *)(v0 + 360);
  uint64_t v18 = *(void *)(v0 + 336);
  uint64_t v19 = *(void *)(v0 + 344);
  if (v13)
  {
    os_log_type_t type = v12;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    uint64_t v28 = v27;
    *(_DWORD *)uint64_t v20 = 136315394;
    sub_181BD67D4(&qword_18C58C260, (uint64_t (*)(uint64_t))MEMORY[0x18961BA90], MEMORY[0x18961BA98]);
    uint64_t v21 = sub_18264F480();
    *(void *)(v0 + 256) = sub_181BF7900(v21, v22, &v28);
    sub_18264F0CC();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v17);
    *(_WORD *)(v20 + 12) = 2080;
    sub_181BD67D4( (unint64_t *)&qword_18C58C240,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
    uint64_t v23 = sub_18264F480();
    *(void *)(v0 + 264) = sub_181BF7900(v23, v24, &v28);
    sub_18264F0CC();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v16, v18);
    _os_log_impl(&dword_181A5C000, v11, type, "Completed call: %s callID: %s", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x186E12168](v27, -1LL, -1LL);
    MEMORY[0x186E12168](v20, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(void, void))(v15 + 8))(*(void *)(v0 + 376), *(void *)(v0 + 360));
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v16, v18);
  }

  return swift_task_switch();
}

uint64_t sub_181C3D1D4()
{
  unsigned __int8 v1 = *(_BYTE *)(v0 + 68);
  uint64_t v2 = *(void *)(v0 + 296);
  __int128 v3 = *(_OWORD *)(v0 + 448);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)(v0 + 432);
  *(_OWORD *)(v2 + 152) = v3;
  *(_WORD *)(v2 + 168) = v1;
  return swift_task_switch();
}

uint64_t sub_181C3D204()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 296) + 112LL);
  unint64_t v2 = sub_181C279E4();
  if (!sub_181C31610(v2)) {
    return sub_18264F324();
  }
  nw_activity_submit_metrics(*(void *)(v1 + 16));
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  nw_activity_complete_with_reason(*(void **)(v1 + 16), 2u);
  return swift_task_switch();
}

uint64_t sub_181C3D2EC()
{
  *(_OWORD *)*(void *)(v0 + 272) = *(_OWORD *)(v0 + 416);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181C3D338()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 296) + 112LL);
  unint64_t v2 = sub_181C279E4();
  if (!sub_181C31610(v2)) {
    return sub_18264F324();
  }
  uint64_t v4 = *(void *)(v0 + 472);
  uint64_t v3 = *(void *)(v0 + 480);
  uint64_t v5 = *(void *)(v0 + 464);
  char v6 = *(_BYTE *)(v0 + 69);
  nw_activity_submit_metrics(*(void *)(v1 + 16));
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  v8[0] = v5;
  v8[1] = v4;
  void v8[2] = v3;
  char v9 = v6;
  NWActivity.complete(reason:)((uint64_t)v8);
  sub_181C32588(v5, v4, v3, v6);
  return swift_task_switch();
}

uint64_t sub_181C3D464()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181C3D4B8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, int a7, int a8)
{
  unint64_t v32 = a5;
  int v29 = a7;
  int v30 = a8;
  uint64_t v31 = a4;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C3E0);
  MEMORY[0x1895F8858](v10);
  os_log_type_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C0D0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  uint64_t v16 = MEMORY[0x1895F8858](v13);
  uint64_t v17 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v16);
  uint64_t v19 = (char *)&v29 - v18;
  if (qword_18C58B1F0 != -1) {
    swift_once();
  }
  uint64_t v33 = a2;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D6C0);
  swift_task_localValuePush();
  sub_181C3D728();
  uint64_t v20 = sub_18264E688();
  uint64_t v21 = *(void *)(v20 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v19, a6, v20);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v19, 0LL, 1LL, v20);
  uint64_t v22 = sub_18264EDCC();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v12, 1LL, 1LL, v22);
  uint64_t v23 = swift_allocObject();
  swift_weakInit();
  sub_181BE48BC((uint64_t)v19, (uint64_t)v17, &qword_18C58C0D0);
  unint64_t v24 = (*(unsigned __int8 *)(v14 + 80) + 58LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = 0LL;
  *(void *)(v25 + 24) = 0LL;
  uint64_t v26 = v31;
  *(void *)(v25 + 32) = v23;
  *(void *)(v25 + 40) = v26;
  unint64_t v27 = v32;
  *(void *)(v25 + 48) = v32;
  *(_BYTE *)(v25 + 56) = v29;
  *(_BYTE *)(v25 + 57) = v30 & 1;
  sub_181BE625C((uint64_t)v17, v25 + v24, &qword_18C58C0D0);
  sub_181BCD4AC(v26, v27);
  sub_181C3B844((uint64_t)v12, (uint64_t)&unk_18C58D6C8, v25);
  swift_release();
  sub_181BDA0F0((uint64_t)v19, &qword_18C58C0D0);
  return swift_task_localValuePop();
}

uint64_t sub_181C3D728()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C3E0);
  *(double *)&uint64_t result = COERCE_DOUBLE(MEMORY[0x1895F8858](v1));
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_18C58B1E8 != -1) {
    *(double *)&uint64_t result = COERCE_DOUBLE(swift_once());
  }
  if (byte_18C58D4F0 == 1)
  {
    *(double *)&uint64_t result = COERCE_DOUBLE(sub_181C3A954());
    if ((v5 & 1) == 0)
    {
      double v6 = *(double *)&result;
      if (*(double *)&result > 0.0)
      {
        *(double *)&uint64_t result = COERCE_DOUBLE(sub_181C4D598(0x64uLL));
        double v7 = v6 * 100.0;
        if ((~COERCE__INT64(v6 * 100.0) & 0x7FF0000000000000LL) != 0)
        {
          if (v7 > -9.22337204e18)
          {
            if (v7 < 9.22337204e18)
            {
              if (result + 1 <= (uint64_t)v7)
              {
                uint64_t v8 = sub_18264EDCC();
                (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))( v4,  1LL,  1LL,  v8);
                char v9 = (void *)swift_allocObject();
                _OWORD v9[2] = 0LL;
                v9[3] = 0LL;
                uint64_t v9[4] = v0;
                swift_retain();
                sub_181C3B990((uint64_t)v4, (uint64_t)&unk_18C58D6D8, (uint64_t)v9);
                *(double *)&uint64_t result = COERCE_DOUBLE(swift_release());
              }

              return result;
            }

uint64_t sub_181C3D8A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C3E0);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_18264E688();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  os_log_type_t v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_18C58B1C8 != -1) {
    swift_once();
  }
  uint64_t v13 = sub_18264E934();
  __swift_project_value_buffer(v13, (uint64_t)qword_18C58D4B0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  uint64_t v14 = (os_log_s *)sub_18264E91C();
  os_log_type_t v15 = sub_18264F018();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    v26[1] = a2;
    uint64_t v17 = (uint8_t *)v16;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v28 = a3;
    uint64_t v19 = v18;
    uint64_t v30 = v18;
    v26[0] = a1;
    *(_DWORD *)uint64_t v17 = 136315138;
    unint64_t v27 = v8;
    sub_181BD67D4( (unint64_t *)&qword_18C58C240,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
    uint64_t v20 = sub_18264F480();
    uint64_t v29 = sub_181BF7900(v20, v21, &v30);
    uint64_t v8 = v27;
    a1 = v26[0];
    sub_18264F0CC();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    _os_log_impl(&dword_181A5C000, v14, v15, "Task was cancelled for callID: %s", v17, 0xCu);
    swift_arrayDestroy();
    uint64_t v22 = v19;
    a3 = v28;
    MEMORY[0x186E12168](v22, -1LL, -1LL);
    MEMORY[0x186E12168](v17, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }

  sub_181C3DB80(a1);
  uint64_t v23 = sub_18264EDCC();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v8, 1LL, 1LL, v23);
  unint64_t v24 = (void *)swift_allocObject();
  _OWORD v24[2] = 0LL;
  v24[3] = 0LL;
  v24[4] = a3;
  swift_retain();
  sub_181C3B844((uint64_t)v8, (uint64_t)&unk_18C58D680, (uint64_t)v24);
  return swift_release();
}

uint64_t sub_181C3DB80(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58D5B0);
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = &v24[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E780);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = &v24[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C0D0);
  MEMORY[0x1895F8858](v11);
  uint64_t v13 = &v24[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = type metadata accessor for CancelRemoteCall(0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v16 = &v24[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v17 = sub_18264E688();
  uint64_t v18 = *(void *)(v17 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v18 + 16))(v16, a1, v17);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v13, 1LL, 1LL, v17);
  sub_181C4D694((uint64_t)v16, (uint64_t)v13, 4, v2);
  sub_181BDA0F0((uint64_t)v13, &qword_18C58C0D0);
  uint64_t v19 = *(os_unfair_lock_s **)(v2 + 80);
  uint64_t v25 = v2;
  uint64_t v26 = a1;
  uint64_t v20 = v19 + 4;
  os_unfair_lock_lock(v19 + 4);
  sub_181BF787C(v21, (uint64_t (*)(void))sub_181C4F694);
  os_unfair_lock_unlock(v20);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) == 1)
  {
    sub_181BC920C((uint64_t)v16, type metadata accessor for CancelRemoteCall);
    return sub_181BDA0F0((uint64_t)v6, (uint64_t *)&unk_18C58D5B0);
  }

  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v10, v6, v7);
    sub_18264ED9C();
    sub_181BD67D4( (unint64_t *)&qword_18C58CDD8,  (uint64_t (*)(uint64_t))MEMORY[0x18961BCB8],  MEMORY[0x18961BCC0]);
    uint64_t v23 = swift_allocError();
    sub_18264E9B8();
    uint64_t v27 = v23;
    sub_18264ED78();
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
    return sub_181BC920C((uint64_t)v16, type metadata accessor for CancelRemoteCall);
  }

uint64_t sub_181C3DE08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return swift_task_switch();
}

uint64_t sub_181C3DE20()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + 112LL);
  unint64_t v2 = sub_181C279E4();
  if (!sub_181C31610(v2)) {
    return sub_18264F324();
  }
  nw_activity_submit_metrics(*(void *)(v1 + 16));
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  nw_activity_complete_with_reason(*(void **)(v1 + 16), 4u);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181C3DEFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NWActorID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_181BC9248(a2, (uint64_t)v7, v8);
  uint64_t v9 = (unint64_t *)(a1 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection__associatedActorIDs);
  swift_beginAccess();
  unint64_t v10 = *v9;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v9 = v10;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v10 = sub_181BC51F4(0, *(void *)(v10 + 16) + 1LL, 1, v10);
    *uint64_t v9 = v10;
  }

  unint64_t v13 = *(void *)(v10 + 16);
  unint64_t v12 = *(void *)(v10 + 24);
  if (v13 >= v12 >> 1)
  {
    unint64_t v10 = sub_181BC51F4(v12 > 1, v13 + 1, 1, v10);
    *uint64_t v9 = v10;
  }

  *(void *)(v10 + 16) = v13 + 1;
  sub_181BC928C( (uint64_t)v7,  v10 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
  + *(void *)(v5 + 72) * v13,
    (uint64_t (*)(void))type metadata accessor for NWActorID);
  return swift_endAccess();
}

void sub_181C3E04C(unsigned int *a1)
{
  uint64_t v1 = *((unsigned __int8 *)a1 + 4);
  uint64_t v2 = *a1;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = Strong;
    unint64_t v5 = v2 | (v1 << 32);
    if (qword_18C58B1C8 != -1) {
      swift_once();
    }
    uint64_t v6 = sub_18264E934();
    __swift_project_value_buffer(v6, (uint64_t)qword_18C58D4B0);
    swift_retain_n();
    uint64_t v7 = (os_log_s *)sub_18264E91C();
    os_log_type_t v8 = sub_18264F018();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315394;
      uint64_t v38 = v10;
      uint64_t v39 = 67LL;
      unint64_t v40 = 0xE100000000000000LL;
      nw_connection_get_id(*(void **)(*(void *)(v4 + 16) + 16LL));
      sub_18264F480();
      sub_18264EB74();
      swift_bridgeObjectRelease();
      uint64_t v39 = sub_181BF7900(67LL, 0xE100000000000000LL, &v38);
      sub_18264F0CC();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2080;
      BYTE4(v39) = (v2 | (unint64_t)(v1 << 32)) >> 32;
      LODWORD(v39) = v2;
      uint64_t v11 = sub_18264EAC0();
      uint64_t v39 = sub_181BF7900(v11, v12, &v38);
      sub_18264F0CC();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_181A5C000, v7, v8, "%s: State changed to %s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x186E12168](v10, -1LL, -1LL);
      MEMORY[0x186E12168](v9, -1LL, -1LL);

      uint64_t v13 = (v5 >> 38) & 3;
      if ((_DWORD)v13) {
        goto LABEL_6;
      }
    }

    else
    {

      swift_release_n();
      uint64_t v13 = (v5 >> 38) & 3;
      if ((_DWORD)v13)
      {
LABEL_6:
        if ((_DWORD)v13 != 1) {
          __asm { BR              X10 }
        }

        uint64_t v14 = HIDWORD(v5) & 0x3F;
        swift_retain_n();
        uint64_t v15 = (os_log_s *)sub_18264E91C();
        os_log_type_t v16 = sub_18264F000();
        if (os_log_type_enabled(v15, v16))
        {
          uint64_t v17 = swift_slowAlloc();
          uint64_t v18 = swift_slowAlloc();
          *(_DWORD *)uint64_t v17 = 136315394;
          uint64_t v38 = v18;
          uint64_t v39 = 67LL;
          unint64_t v40 = 0xE100000000000000LL;
          nw_connection_get_id(*(void **)(*(void *)(v4 + 16) + 16LL));
          sub_18264F480();
          sub_18264EB74();
          swift_bridgeObjectRelease();
          uint64_t v39 = sub_181BF7900(v39, v40, &v38);
          sub_18264F0CC();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v17 + 12) = 2080;
          LODWORD(v39) = v2;
          BYTE4(v39) = BYTE4(v5) & 0x3F;
          uint64_t v19 = sub_18264EAC0();
          uint64_t v39 = sub_181BF7900(v19, v20, &v38);
          sub_18264F0CC();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_181A5C000, v15, v16, "%s moved to failed state with error: %s", (uint8_t *)v17, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x186E12168](v18, -1LL, -1LL);
          MEMORY[0x186E12168](v17, -1LL, -1LL);

          if ((_DWORD)v14)
          {
LABEL_9:
            uint64_t v29 = sub_18264EA48();
            unint64_t v31 = v30;
            int v32 = v5;
LABEL_19:
            uint64_t v39 = v29;
            unint64_t v40 = v31;
            uint64_t v41 = v32;
            char v42 = 1;
            sub_181C3E868(&v39, v4);
            swift_bridgeObjectRelease();
            sub_181BBE220();
            uint64_t v33 = (void *)swift_allocError();
            *(_DWORD *)uint64_t v34 = v5;
            *(_BYTE *)(v34 + 4) = BYTE4(v5) & 0x3F;
            sub_181C3EBB8((uint64_t)v33);
            swift_release();

            return;
          }
        }

        else
        {

          swift_release_n();
          if ((_DWORD)v14) {
            goto LABEL_9;
          }
        }

        uint64_t v29 = sub_18264EA48();
        unint64_t v31 = v27;
        int v32 = sub_18264E958();
        goto LABEL_19;
      }
    }

    swift_retain_n();
    uint64_t v21 = (os_log_s *)sub_18264E91C();
    os_log_type_t v22 = sub_18264F000();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315394;
      uint64_t v38 = v24;
      uint64_t v39 = 67LL;
      unint64_t v40 = 0xE100000000000000LL;
      nw_connection_get_id(*(void **)(*(void *)(v4 + 16) + 16LL));
      sub_18264F480();
      sub_18264EB74();
      swift_bridgeObjectRelease();
      uint64_t v39 = sub_181BF7900(v39, v40, &v38);
      sub_18264F0CC();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2080;
      LODWORD(v39) = v2;
      BYTE4(v39) = (v2 | (unint64_t)(v1 << 32)) >> 32;
      uint64_t v25 = sub_18264EAC0();
      uint64_t v39 = sub_181BF7900(v25, v26, &v38);
      sub_18264F0CC();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_181A5C000, v21, v22, "%s moved to waiting state with error: %s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x186E12168](v24, -1LL, -1LL);
      MEMORY[0x186E12168](v23, -1LL, -1LL);

      if (BYTE4(v5))
      {
LABEL_13:
        uint64_t v35 = sub_18264EA48();
        unint64_t v37 = v36;
LABEL_20:
        uint64_t v39 = v35;
        unint64_t v40 = v37;
        uint64_t v41 = (int)v5;
        char v42 = 1;
        sub_181C3E868(&v39, v4);
        swift_bridgeObjectRelease();
        swift_release();
        return;
      }
    }

    else
    {

      swift_release_n();
      if (BYTE4(v5)) {
        goto LABEL_13;
      }
    }

    uint64_t v35 = sub_18264EA48();
    unint64_t v37 = v28;
    LODWORD(v5) = sub_18264E958();
    goto LABEL_20;
  }

void sub_181C3E868(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  char v5 = *((_BYTE *)a1 + 24);
  uint64_t v6 = (os_unfair_lock_s *)(*(void *)(a2 + 80) + 16LL);
  os_unfair_lock_lock(v6);
  sub_181C4F624(v8);
  uint64_t v7 = v8[0];
  os_unfair_lock_unlock(v6);
  if (v7)
  {
    v8[0] = v2;
    v8[1] = v3;
    void v8[2] = v4;
    char v9 = v5;
    swift_retain();
    NWActivity.complete(reason:)((uint64_t)v8);
    swift_release_n();
  }

uint64_t sub_181C3E8F8()
{
  if (qword_18C58B1C8 != -1) {
    swift_once();
  }
  uint64_t v1 = sub_18264E934();
  __swift_project_value_buffer(v1, (uint64_t)qword_18C58D4B0);
  swift_retain_n();
  uint64_t v2 = (os_log_s *)sub_18264E91C();
  os_log_type_t v3 = sub_18264EFF4();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v12 = v5;
    uint64_t aBlock = 67LL;
    unint64_t v14 = 0xE100000000000000LL;
    nw_connection_get_id(*(void **)(*(void *)(v0 + 16) + 16LL));
    sub_18264F480();
    sub_18264EB74();
    swift_bridgeObjectRelease();
    uint64_t aBlock = sub_181BF7900(67LL, 0xE100000000000000LL, &v12);
    sub_18264F0CC();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_181A5C000, v2, v3, "%s: Receiving message", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x186E12168](v5, -1LL, -1LL);
    MEMORY[0x186E12168](v4, -1LL, -1LL);
  }

  else
  {

    swift_release_n();
  }

  uint64_t v6 = *(void *)(v0 + 16);
  uint64_t v7 = swift_allocObject();
  swift_weakInit();
  os_log_type_t v8 = *(nw_connection **)(v6 + 16);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_181C4EFA0;
  *(void *)(v9 + 24) = v7;
  uint64_t v17 = sub_181C4EFA8;
  uint64_t v18 = v9;
  uint64_t aBlock = MEMORY[0x1895F87A8];
  unint64_t v14 = 1107296256LL;
  uint64_t v15 = sub_181C696F8;
  os_log_type_t v16 = &block_descriptor_11;
  uint64_t v10 = _Block_copy(&aBlock);
  swift_retain_n();
  swift_unknownObjectRetain();
  swift_release();
  nw_connection_receive_message(v8, v10);
  _Block_release(v10);
  swift_release_n();
  return swift_unknownObjectRelease();
}

void sub_181C3EBB8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (os_unfair_lock_s *)(*(void *)(v1 + 80) + 16LL);
  os_unfair_lock_lock(v4);
  sub_181C4F5B0(&v11);
  char v5 = v11;
  os_unfair_lock_unlock(v4);
  if ((v5 & 1) == 0)
  {
    os_unfair_lock_lock(v4);
    sub_181C4F5CC(&v11);
    uint64_t v6 = v11;
    os_unfair_lock_unlock(v4);
    uint64_t v7 = *(void *)(v6 + 16);
    if (v7)
    {
      uint64_t v8 = v6 + 40;
      do
      {
        uint64_t v9 = *(void (**)(uint64_t *))(v8 - 8);
        uint64_t v11 = a1;
        swift_retain();
        v9(&v11);
        swift_release();
        v8 += 16LL;
        --v7;
      }

      while (v7);
    }

    swift_bridgeObjectRelease();
    uint64_t v10 = *(void (**)(uint64_t))(v2 + 40);
    if (v10)
    {
      swift_retain();
      v10(a1);
      sub_181BD25B8((uint64_t)v10);
    }

    sub_181C3AAA8();
  }

uint64_t sub_181C3ECCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v65 = a5;
  uint64_t v66 = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58D5B0);
  uint64_t v9 = MEMORY[0x1895F8858](v8);
  uint64_t v61 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v9);
  CFURLRef v60 = (char *)&v56 - v11;
  uint64_t v12 = sub_18264E688();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  uint64_t v64 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)&v56 - v16;
  uint64_t v18 = *(os_unfair_lock_s **)(a2 + 80);
  uint64_t v68 = a2;
  uint64_t v69 = a3;
  uint64_t v70 = a1;
  uint64_t v19 = v18 + 4;
  os_unfair_lock_lock(v18 + 4);
  unint64_t v20 = 0LL;
  sub_181BF787C(v21, sub_181C4EEBC);
  uint64_t v58 = v19;
  os_unfair_lock_unlock(v19);
  if (qword_18C58B1C8 != -1) {
    swift_once();
  }
  uint64_t v22 = sub_18264E934();
  uint64_t v23 = __swift_project_value_buffer(v22, (uint64_t)qword_18C58D4B0);
  uint64_t v62 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v62(v17, a3, v12);
  swift_retain_n();
  uint64_t v63 = v23;
  uint64_t v24 = (os_log_s *)sub_18264E91C();
  os_log_type_t v25 = sub_18264F018();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = swift_slowAlloc();
    uint64_t v67 = v12;
    uint64_t v27 = v26;
    uint64_t v28 = swift_slowAlloc();
    uint64_t v57 = 0LL;
    uint64_t v29 = v28;
    *(_DWORD *)uint64_t v27 = 136315394;
    uint64_t v72 = 67LL;
    unint64_t v73 = 0xE100000000000000LL;
    v74[0] = v28;
    uint64_t id = nw_connection_get_id(*(void **)(*(void *)(a2 + 16) + 16LL));
    sub_18264F480();
    uint64_t v59 = a3;
    sub_18264EB74();
    swift_bridgeObjectRelease();
    uint64_t v72 = sub_181BF7900(v72, v73, v74);
    sub_18264F0CC();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2080;
    sub_181BD67D4( (unint64_t *)&qword_18C58C240,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
    uint64_t v30 = sub_18264F480();
    uint64_t v72 = sub_181BF7900(v30, v31, v74);
    a3 = v59;
    sub_18264F0CC();
    swift_bridgeObjectRelease();
    int v32 = *(void (**)(char *, uint64_t))(v13 + 8);
    v32(v17, v67);
    _os_log_impl(&dword_181A5C000, v24, v25, "%s: Stored callID (%s)", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    uint64_t v33 = v29;
    unint64_t v20 = v57;
    MEMORY[0x186E12168](v33, -1LL, -1LL);
    uint64_t v34 = v27;
    uint64_t v12 = v67;
    MEMORY[0x186E12168](v34, -1LL, -1LL);
  }

  else
  {
    swift_release_n();
    int v32 = *(void (**)(char *, uint64_t))(v13 + 8);
    v32(v17, v12);
  }

  uint64_t result = v66(a3);
  if (v20)
  {
    unint64_t v36 = v20;
    unint64_t v37 = v64;
    v62(v64, a3, v12);
    swift_retain_n();
    uint64_t v38 = (os_log_s *)sub_18264E91C();
    os_log_type_t v39 = sub_18264F000();
    int v40 = v39;
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v41 = swift_slowAlloc();
      LODWORD(v66) = v40;
      char v42 = v37;
      uint64_t v43 = v41;
      uint64_t v44 = swift_slowAlloc();
      uint64_t v67 = v44;
      *(_DWORD *)uint64_t v43 = 136315394;
      uint64_t v72 = 67LL;
      unint64_t v73 = 0xE100000000000000LL;
      v74[0] = v44;
      uint64_t id = nw_connection_get_id(*(void **)(*(void *)(a2 + 16) + 16LL));
      sub_18264F480();
      uint64_t v59 = a3;
      sub_18264EB74();
      swift_bridgeObjectRelease();
      uint64_t v72 = sub_181BF7900(v72, v73, v74);
      sub_18264F0CC();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v43 + 12) = 2080;
      sub_181BD67D4( (unint64_t *)&qword_18C58C240,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
      uint64_t v45 = sub_18264F480();
      uint64_t v72 = sub_181BF7900(v45, v46, v74);
      a3 = v59;
      sub_18264F0CC();
      swift_bridgeObjectRelease();
      v32(v42, v12);
      _os_log_impl(&dword_181A5C000, v38, (os_log_type_t)v66, "%s: callID (%s) failed", (uint8_t *)v43, 0x16u);
      uint64_t v47 = v67;
      swift_arrayDestroy();
      MEMORY[0x186E12168](v47, -1LL, -1LL);
      MEMORY[0x186E12168](v43, -1LL, -1LL);
    }

    else
    {
      swift_release_n();
      v32(v37, v12);
    }

    uint64_t v49 = (uint64_t)v60;
    uint64_t v48 = (uint64_t)v61;
    char v50 = v58;
    MEMORY[0x1895F8858](v51);
    *(&v56 - 2) = a2;
    *(&v56 - 1) = a3;
    os_unfair_lock_lock(v50);
    sub_181BF787C(v52, (uint64_t (*)(void))sub_181C4F694);
    os_unfair_lock_unlock(v50);
    sub_181BE48BC(v49, v48, (uint64_t *)&unk_18C58D5B0);
    uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E780);
    uint64_t v54 = *(void *)(v53 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v48, 1LL, v53) == 1)
    {
      sub_181BDA0F0(v49, (uint64_t *)&unk_18C58D5B0);

      return sub_181BDA0F0(v48, (uint64_t *)&unk_18C58D5B0);
    }

    else
    {
      uint64_t v72 = (uint64_t)v36;
      id v55 = v36;
      sub_18264ED78();

      sub_181BDA0F0(v49, (uint64_t *)&unk_18C58D5B0);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 8))(v48, v53);
    }
  }

  return result;
}

uint64_t sub_181C3F38C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58D5B0);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_18264E688();
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v11 + 16))(v10, a2);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E780);
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v7, a3, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v7, 0LL, 1LL, v12);
  swift_beginAccess();
  sub_181C35594((uint64_t)v7, (uint64_t)v10);
  return swift_endAccess();
}

uint64_t *sub_181C3F4C4()
{
  return v0;
}

uint64_t sub_181C3F588()
{
  return swift_deallocClassInstance();
}

uint64_t sub_181C3F5AC()
{
  return _s15ActorConnectionCMa(0LL);
}

uint64_t _s15ActorConnectionCMa(uint64_t a1)
{
  return sub_181BD62C8(a1, qword_18C58A118);
}

void sub_181C3F5C8()
{
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_181C3F688()
{
  if (!qword_18C58A1E8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C58A1E0);
    unint64_t v0 = sub_18264F09C();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_18C58A1E8);
    }
  }

uint64_t _s15ActorConnectionC11ReplyResultVwxx(uint64_t a1)
{
  return sub_181BCD4F0(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t _s15ActorConnectionC11ReplyResultVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_181BCD4AC(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  __int128 v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  return a1;
}

uint64_t _s15ActorConnectionC11ReplyResultVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_181BCD4AC(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_181BCD4F0(v6, v7);
  __int128 v8 = *(_OWORD *)(a2 + 16);
  __int128 v9 = *(_OWORD *)(a2 + 32);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 32) = v9;
  return a1;
}

__n128 __swift_memcpy50_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s15ActorConnectionC11ReplyResultVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_181BCD4F0(v4, v5);
  __int128 v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  return a1;
}

uint64_t _s15ActorConnectionC11ReplyResultVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xD && *(_BYTE *)(a1 + 50)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t _s15ActorConnectionC11ReplyResultVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 48) = 0;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 50) = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 50) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0LL;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }

  return result;
}

ValueMetadata *_s15ActorConnectionC11ReplyResultVMa()
{
  return &_s15ActorConnectionC11ReplyResultVN;
}

char *sub_181C3F8BC(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v22 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = sub_18264E688();
    __int128 v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    __int128 v9 = (int *)type metadata accessor for RemoteCallEnvelope(0LL);
    uint64_t v10 = v9[5];
    uint64_t v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    uint64_t v13 = *(void *)&a2[v10 + 8];
    *(void *)uint64_t v11 = *(void *)&a2[v10];
    *((void *)v11 + 1) = v13;
    uint64_t v14 = *(int *)(type metadata accessor for NWActorID() + 20);
    uint64_t v15 = &v11[v14];
    uint64_t v16 = &v12[v14];
    swift_bridgeObjectRetain();
    v8(v15, v16, v7);
    uint64_t v17 = v9[6];
    uint64_t v18 = &a1[v17];
    uint64_t v19 = &a2[v17];
    uint64_t v20 = *((void *)v19 + 1);
    *(void *)uint64_t v18 = *(void *)v19;
    *((void *)v18 + 1) = v20;
    *(void *)&a1[v9[7]] = *(void *)&a2[v9[7]];
    *(void *)&a1[v9[8]] = *(void *)&a2[v9[8]];
    *(void *)&a1[v9[9]] = *(void *)&a2[v9[9]];
    uint64_t v21 = *(int *)(a3 + 24);
    a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
    a1[v21] = a2[v21];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  return a1;
}

uint64_t sub_181C3FA00(uint64_t a1)
{
  uint64_t v2 = sub_18264E688();
  unsigned int v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL);
  v3(a1, v2);
  uint64_t v4 = a1 + *(int *)(type metadata accessor for RemoteCallEnvelope(0LL) + 20);
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for NWActorID();
  v3(v4 + *(int *)(v5 + 20), v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_181C3FAA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_18264E688();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  __int128 v8 = (int *)type metadata accessor for RemoteCallEnvelope(0LL);
  uint64_t v9 = v8[5];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = a2 + v9;
  uint64_t v12 = *(void *)(a2 + v9 + 8);
  *uint64_t v10 = *(void *)(a2 + v9);
  v10[1] = v12;
  uint64_t v13 = *(int *)(type metadata accessor for NWActorID() + 20);
  uint64_t v14 = (char *)v10 + v13;
  uint64_t v15 = v11 + v13;
  swift_bridgeObjectRetain();
  v7((uint64_t)v14, v15, v6);
  uint64_t v16 = v8[6];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  *(void *)(a1 + v8[7]) = *(void *)(a2 + v8[7]);
  *(void *)(a1 + v8[8]) = *(void *)(a2 + v8[8]);
  *(void *)(a1 + v8[9]) = *(void *)(a2 + v8[9]);
  uint64_t v20 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v20) = *(_BYTE *)(a2 + v20);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *sub_181C3FBBC(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_18264E688();
  uint64_t v7 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL);
  v7(a1, a2, v6);
  __int128 v8 = (int *)type metadata accessor for RemoteCallEnvelope(0LL);
  uint64_t v9 = v8[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = a2 + v9;
  *(void *)uint64_t v10 = *(void *)(a2 + v9);
  *((void *)v10 + 1) = *(void *)(a2 + v9 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = type metadata accessor for NWActorID();
  v7(&v10[*(int *)(v12 + 20)], v11 + *(int *)(v12 + 20), v6);
  uint64_t v13 = v8[6];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = (void *)(a2 + v13);
  *(void *)uint64_t v14 = *v15;
  *((void *)v14 + 1) = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[v8[7]] = *(void *)(a2 + v8[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[v8[8]] = *(void *)(a2 + v8[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[v8[9]] = *(void *)(a2 + v8[9]);
  a1[*(int *)(a3 + 20)] = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  a1[*(int *)(a3 + 24)] = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_181C3FD04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_18264E688();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  __int128 v8 = (int *)type metadata accessor for RemoteCallEnvelope(0LL);
  uint64_t v9 = v8[5];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  uint64_t v12 = type metadata accessor for NWActorID();
  v7(v10 + *(int *)(v12 + 20), v11 + *(int *)(v12 + 20), v6);
  *(_OWORD *)(a1 + v8[6]) = *(_OWORD *)(a2 + v8[6]);
  *(void *)(a1 + v8[7]) = *(void *)(a2 + v8[7]);
  *(void *)(a1 + v8[8]) = *(void *)(a2 + v8[8]);
  *(void *)(a1 + v8[9]) = *(void *)(a2 + v8[9]);
  uint64_t v13 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  return a1;
}

char *sub_181C3FDE8(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_18264E688();
  uint64_t v7 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL);
  v7(a1, a2, v6);
  __int128 v8 = (int *)type metadata accessor for RemoteCallEnvelope(0LL);
  uint64_t v9 = v8[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = a2 + v9;
  uint64_t v12 = *(void *)(a2 + v9 + 8);
  *(void *)uint64_t v10 = *(void *)(a2 + v9);
  *((void *)v10 + 1) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = type metadata accessor for NWActorID();
  v7(&v10[*(int *)(v13 + 20)], v11 + *(int *)(v13 + 20), v6);
  uint64_t v14 = v8[6];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = (uint64_t *)(a2 + v14);
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  *(void *)uint64_t v15 = v18;
  *((void *)v15 + 1) = v17;
  swift_bridgeObjectRelease();
  *(void *)&a1[v8[7]] = *(void *)(a2 + v8[7]);
  swift_bridgeObjectRelease();
  *(void *)&a1[v8[8]] = *(void *)(a2 + v8[8]);
  swift_bridgeObjectRelease();
  *(void *)&a1[v8[9]] = *(void *)(a2 + v8[9]);
  uint64_t v19 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  a1[v19] = *(_BYTE *)(a2 + v19);
  return a1;
}

uint64_t sub_181C3FEF4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C3FF00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for RemoteCallEnvelope(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unsigned int v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 2) {
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_181C3FF8C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C3FF98(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for RemoteCallEnvelope(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  return result;
}

uint64_t _s15ActorConnectionC20RemoteCallInvocationVMa(uint64_t a1)
{
  return sub_181BD62C8(a1, qword_18C58D560);
}

uint64_t sub_181C40024()
{
  uint64_t result = type metadata accessor for RemoteCallEnvelope(319LL);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

void sub_181C40098(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 >= 6u) {
    __asm { BR              X10 }
  }

uint64_t sub_181C403E4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8)
{
  *(_BYTE *)(v8 + 153) = a8;
  *(_BYTE *)(v8 + 152) = a7;
  *(void *)(v8 + 64) = a6;
  *(void *)(v8 + 72) = v11;
  *(void *)(v8 + 48) = a4;
  *(void *)(v8 + 56) = a5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C0D0);
  *(void *)(v8 + 80) = swift_task_alloc();
  uint64_t v9 = sub_18264E688();
  *(void *)(v8 + 88) = v9;
  *(void *)(v8 + 96) = *(void *)(v9 - 8);
  *(void *)(v8 + 104) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58D5B0);
  *(void *)(v8 + 112) = swift_task_alloc();
  *(void *)(v8 + 120) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_181C404AC()
{
  uint64_t Strong = swift_weakLoadStrong();
  *(void *)(v0 + 128) = Strong;
  if (Strong)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_181C40578;
    return sub_181C408B4(*(void *)(v0 + 56), *(void *)(v0 + 64), *(_BYTE *)(v0 + 152), *(_BYTE *)(v0 + 153));
  }

  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_181C40578()
{
  *(void *)(*(void *)v1 + 144LL) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_181C405DC()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181C4063C()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  sub_181BE48BC(*(void *)(v0 + 72), v3, &qword_18C58C0D0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1LL, v1) == 1)
  {
    uint64_t v4 = *(void *)(v0 + 80);

    swift_release();
    uint64_t v5 = &qword_18C58C0D0;
    uint64_t v6 = v4;
  }

  else
  {
    uint64_t v8 = *(void *)(v0 + 128);
    uint64_t v9 = *(void *)(v0 + 104);
    (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 96) + 32LL))( v9,  *(void *)(v0 + 80),  *(void *)(v0 + 88));
    uint64_t v10 = *(os_unfair_lock_s **)(v8 + 80);
    uint64_t v11 = swift_task_alloc();
    *(void *)(v11 + 16) = v8;
    *(void *)(v11 + 24) = v9;
    uint64_t v12 = swift_task_alloc();
    *(void *)(v12 + 16) = sub_181C4F694;
    *(void *)(v12 + 24) = v11;
    swift_retain();
    os_unfair_lock_lock(v10 + 4);
    sub_181BF787C(v13, *(uint64_t (**)(void))(v12 + 16));
    os_unfair_lock_unlock(v10 + 4);
    uint64_t v15 = *(void *)(v0 + 112);
    uint64_t v14 = *(void *)(v0 + 120);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_181BE48BC(v14, v15, (uint64_t *)&unk_18C58D5B0);
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E780);
    uint64_t v17 = *(void *)(v16 - 8);
    int v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16);
    uint64_t v19 = *(void **)(v0 + 144);
    uint64_t v20 = *(void *)(v0 + 120);
    uint64_t v22 = *(void *)(v0 + 104);
    uint64_t v21 = *(void *)(v0 + 112);
    uint64_t v24 = *(void *)(v0 + 88);
    uint64_t v23 = *(void *)(v0 + 96);
    if (v18 != 1)
    {
      uint64_t v26 = *(void *)(v0 + 104);
      *(void *)(v0 + 40) = v19;
      id v25 = v19;
      sub_18264ED78();
      swift_release();

      sub_181BDA0F0(v20, (uint64_t *)&unk_18C58D5B0);
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v26, v24);
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v21, v16);
      goto LABEL_4;
    }

    sub_181BDA0F0(*(void *)(v0 + 120), (uint64_t *)&unk_18C58D5B0);

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
    uint64_t v6 = v21;
    uint64_t v5 = (uint64_t *)&unk_18C58D5B0;
  }

  sub_181BDA0F0(v6, v5);
LABEL_4:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181C408B4(uint64_t a1, uint64_t a2, char a3, char a4)
{
  *(void *)(v5 + 200) = a2;
  *(void *)(v5 + 208) = v4;
  *(_BYTE *)(v5 + 82) = a4;
  *(_BYTE *)(v5 + 81) = a3;
  *(void *)(v5 + 192) = a1;
  uint64_t v6 = sub_18264E8B0();
  *(void *)(v5 + 216) = v6;
  *(void *)(v5 + 224) = *(void *)(v6 - 8);
  *(void *)(v5 + 232) = swift_task_alloc();
  *(void *)(v5 + 240) = swift_task_alloc();
  *(void *)(v5 + 248) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_181C40968()
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  int v1 = *(unsigned __int8 *)(v0 + 81);
  if ((v1 - 2) < 4 || v1 == 0)
  {
    sub_181BCD4AC(*(void *)(v0 + 192), *(void *)(v0 + 200));
    char v3 = 0;
    uint64_t v4 = *(void *)(v0 + 192);
    unint64_t v5 = *(void *)(v0 + 200);
  }

  else
  {
    uint64_t v12 = (void *)sub_18264E5EC();
    *(void *)(v0 + 184) = 0LL;
    id v13 = objc_msgSend(v12, sel_compressedDataUsingAlgorithm_error_, 0, v0 + 184);

    id v14 = *(id *)(v0 + 184);
    if (!v13)
    {
      uint64_t v16 = v14;
      sub_18264E4E4();

      swift_willThrow();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }

    uint64_t v4 = sub_18264E5F8();
    unint64_t v5 = v15;

    char v3 = 1;
  }

  *(void *)(v0 + 256) = v4;
  *(void *)(v0 + 264) = v5;
  *(_BYTE *)(v0 + 83) = v3;
  sub_181C40098(v4, v5, *(_BYTE *)(v0 + 81));
  if (qword_18C58B1C8 != -1) {
    swift_once();
  }
  uint64_t v6 = sub_18264E934();
  __swift_project_value_buffer(v6, (uint64_t)qword_18C58D4B0);
  swift_retain();
  sub_181BCD4AC(v4, v5);
  swift_retain();
  sub_181BCD4AC(v4, v5);
  uint64_t v7 = (os_log_s *)sub_18264E91C();
  os_log_type_t v8 = sub_18264F018();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = *(void *)(v0 + 208);
  if (v9)
  {
    uint64_t v38 = *(unsigned __int8 *)(v0 + 81);
    uint64_t v11 = swift_slowAlloc();
    uint64_t v39 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315906;
    uint64_t v40 = v39;
    uint64_t v41 = 67LL;
    unint64_t v42 = 0xE100000000000000LL;
    *(void *)(v0 + 152) = nw_connection_get_id(*(void **)(*(void *)(v10 + 16) + 16LL));
    sub_18264F480();
    sub_18264EB74();
    swift_bridgeObjectRelease();
    *(void *)(v0 + 160) = sub_181BF7900(v41, v42, &v40);
    sub_18264F0CC();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v11 + 12) = 2080;
    __asm { BR              X9 }
  }

  swift_release_n();
  sub_181BCD4F0(v4, v5);
  sub_181BCD4F0(v4, v5);

  if (qword_18C58B1F0 != -1) {
    swift_once();
  }
  sub_18264F75C();
  uint64_t v18 = *(void *)(v0 + 128);
  *(void *)(v0 + 272) = v18;
  if (v18) {
    __asm { BR              X11 }
  }

  if (qword_18C58B1D0 != -1) {
    swift_once();
  }
  uint64_t v19 = sub_18264E8D4();
  __swift_project_value_buffer(v19, (uint64_t)qword_18C58D4C8);
  sub_18264E8C8();
  sub_18264E88C();
  swift_retain_n();
  uint64_t v20 = (void *)sub_18264E8C8();
  sub_18264F078();
  if ((sub_18264F090() & 1) != 0)
  {
    uint64_t v21 = *(unsigned __int8 *)(v0 + 81);
    (*(void (**)(void, void, void))(*(void *)(v0 + 224) + 16LL))( *(void *)(v0 + 240),  *(void *)(v0 + 248),  *(void *)(v0 + 216));
    uint64_t v22 = (_DWORD *)swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    *uint64_t v22 = 136315394;
    __asm { BR              X9 }
  }

  uint64_t v23 = *(void *)(v0 + 224);
  swift_release_n();

  uint64_t v24 = *(void *)(v0 + 208);
  (*(void (**)(void, void, void))(v23 + 16))( *(void *)(v0 + 232),  *(void *)(v0 + 248),  *(void *)(v0 + 216));
  sub_18264E904();
  swift_allocObject();
  uint64_t v25 = sub_18264E8F8();
  *(void *)(v0 + 288) = v25;
  if ((*(_BYTE *)(v24 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_allowCustomSerialization) & 1) != 0)
  {
    if (*(_BYTE *)(v0 + 83)) {
      int v26 = 7;
    }
    else {
      int v26 = 6;
    }
    if (!*(_BYTE *)(v0 + 82)) {
      goto LABEL_34;
    }
  }

  else
  {
    if (*(_BYTE *)(v0 + 83)) {
      int v26 = 3;
    }
    else {
      int v26 = 2;
    }
    if ((*(_BYTE *)(v0 + 82) & 1) == 0) {
      goto LABEL_34;
    }
  }

  v26 |= 8u;
LABEL_34:
  uint64_t v28 = *(void *)(v0 + 256);
  uint64_t v27 = *(void *)(v0 + 264);
  uint64_t v29 = *(void *)(v0 + 208);
  char v30 = *(_BYTE *)(v0 + 81);
  uint64_t v31 = sub_181C51E6C(v30, v26);
  *(void *)(v0 + 296) = v31;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58A250);
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 304) = inited;
  *(_OWORD *)(inited + 16) = xmmword_18265F3B0;
  *(void *)(inited + 32) = v31;
  uint64_t v41 = inited;
  sub_18264ECDC();
  unint64_t v33 = v41;
  type metadata accessor for NWConnection.ContentContext();
  *(void *)(v0 + 312) = swift_initStackObject();
  swift_retain();
  NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)( 0x614365746F6D6552LL,  0xEA00000000006C6CLL,  0LL,  0,  0LL,  v33,  0.5);
  uint64_t v35 = v34;
  *(void *)(v0 + 320) = v34;
  uint64_t v36 = swift_task_alloc();
  *(void *)(v0 + 328) = v36;
  *(void *)(v36 + 16) = v29;
  *(void *)(v36 + 24) = v28;
  *(void *)(v36 + 32) = v27;
  *(void *)(v36 + 40) = v35;
  *(void *)(v36 + 48) = v25;
  *(_BYTE *)(v36 + 56) = v30;
  unint64_t v37 = (void *)swift_task_alloc();
  *(void *)(v0 + 336) = v37;
  void *v37 = v0;
  v37[1] = sub_181C419F4;
  return sub_18264F594();
}

uint64_t sub_181C41488()
{
  *(void *)(*(void *)(v0 + 272) + 128LL) = *(void *)(v0 + 280);
  return swift_task_switch();
}

uint64_t sub_181C414F0()
{
  if (qword_18C58B1D0 != -1) {
    swift_once();
  }
  uint64_t v1 = sub_18264E8D4();
  __swift_project_value_buffer(v1, (uint64_t)qword_18C58D4C8);
  sub_18264E8C8();
  sub_18264E88C();
  swift_retain_n();
  uint64_t v2 = (void *)sub_18264E8C8();
  sub_18264F078();
  if ((sub_18264F090() & 1) != 0)
  {
    uint64_t v3 = *(unsigned __int8 *)(v0 + 81);
    (*(void (**)(void, void, void))(*(void *)(v0 + 224) + 16LL))( *(void *)(v0 + 240),  *(void *)(v0 + 248),  *(void *)(v0 + 216));
    uint64_t v4 = (_DWORD *)swift_slowAlloc();
    swift_slowAlloc();
    *uint64_t v4 = 136315394;
    __asm { BR              X9 }
  }

  uint64_t v5 = *(void *)(v0 + 224);
  swift_release_n();

  uint64_t v6 = *(void *)(v0 + 208);
  (*(void (**)(void, void, void))(v5 + 16))( *(void *)(v0 + 232),  *(void *)(v0 + 248),  *(void *)(v0 + 216));
  sub_18264E904();
  swift_allocObject();
  uint64_t v7 = sub_18264E8F8();
  *(void *)(v0 + 288) = v7;
  if ((*(_BYTE *)(v6 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_allowCustomSerialization) & 1) != 0)
  {
    if (*(_BYTE *)(v0 + 83)) {
      int v8 = 7;
    }
    else {
      int v8 = 6;
    }
    if (!*(_BYTE *)(v0 + 82)) {
      goto LABEL_16;
    }
LABEL_15:
    v8 |= 8u;
    goto LABEL_16;
  }

  if (*(_BYTE *)(v0 + 83)) {
    int v8 = 3;
  }
  else {
    int v8 = 2;
  }
  if ((*(_BYTE *)(v0 + 82) & 1) != 0) {
    goto LABEL_15;
  }
LABEL_16:
  uint64_t v10 = *(void *)(v0 + 256);
  uint64_t v9 = *(void *)(v0 + 264);
  uint64_t v11 = *(void *)(v0 + 208);
  char v12 = *(_BYTE *)(v0 + 81);
  uint64_t v13 = sub_181C51E6C(v12, v8);
  *(void *)(v0 + 296) = v13;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58A250);
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 304) = inited;
  *(_OWORD *)(inited + 16) = xmmword_18265F3B0;
  *(void *)(inited + 32) = v13;
  unint64_t v20 = inited;
  sub_18264ECDC();
  type metadata accessor for NWConnection.ContentContext();
  *(void *)(v0 + 312) = swift_initStackObject();
  swift_retain();
  NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)( 0x614365746F6D6552LL,  0xEA00000000006C6CLL,  0LL,  0,  0LL,  v20,  0.5);
  uint64_t v16 = v15;
  *(void *)(v0 + 320) = v15;
  uint64_t v17 = swift_task_alloc();
  *(void *)(v0 + 328) = v17;
  *(void *)(v17 + 16) = v11;
  *(void *)(v17 + 24) = v10;
  *(void *)(v17 + 32) = v9;
  *(void *)(v17 + 40) = v16;
  *(void *)(v17 + 48) = v7;
  *(_BYTE *)(v17 + 56) = v12;
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v0 + 336) = v18;
  *uint64_t v18 = v0;
  v18[1] = sub_181C419F4;
  return sub_18264F594();
}

uint64_t sub_181C419F4()
{
  *(void *)(*(void *)v1 + 344LL) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_181C41AAC()
{
  uint64_t v2 = *(void *)(v0 + 256);
  unint64_t v1 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 248);
  uint64_t v4 = *(void *)(v0 + 224);
  uint64_t v5 = *(void *)(v0 + 216);
  swift_release();
  swift_release();
  swift_release();
  sub_181BCD4F0(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181C41B84()
{
  uint64_t v2 = *(void *)(v0 + 256);
  unint64_t v1 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 248);
  uint64_t v4 = *(void *)(v0 + 216);
  uint64_t v5 = *(void *)(v0 + 224);
  swift_release();
  swift_release();
  swift_release();
  sub_181BCD4F0(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181C41C54( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v22 = a7;
  uint64_t v24 = a5;
  unint64_t v21 = a4;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A1F0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x1895F8858](v11);
  id v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = *(void *)(a2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  unint64_t v15 = (*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v16 = v15 + v13;
  uint64_t v17 = swift_allocObject();
  unint64_t v18 = (v16 & 0xFFFFFFFFFFFFFFF8LL) + v17;
  *(void *)(v17 + 16) = a6;
  *(void *)(v17 + 24) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v17 + v15, v14, v11);
  *(_BYTE *)(v17 + v16) = v22;
  unint64_t v19 = v21;
  *(void *)(v18 + 8) = a3;
  *(void *)(v18 + 16) = v19;
  v25[0] = (uint64_t)sub_181C4E774;
  v25[1] = v17;
  swift_retain();
  swift_retain();
  sub_181BCD4AC(a3, v19);
  NWConnection.send(content:contentContext:isComplete:completion:)(a3, v19, v24, 1, v25);
  return swift_release();
}

uint64_t sub_181C41DA8( unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v53 = a6;
  unint64_t v54 = a7;
  uint64_t v50 = a5;
  uint64_t v55 = a4;
  uint64_t v52 = a3;
  uint64_t v8 = sub_18264E8E0();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_18264E8B0();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  uint64_t v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14);
  unint64_t v18 = (char *)&v49 - v17;
  uint64_t v19 = *((unsigned __int8 *)a1 + 4);
  uint64_t v20 = *a1;
  if (qword_18C58B1D0 != -1) {
    swift_once();
  }
  unint64_t v56 = v20 | (v19 << 32);
  uint64_t v21 = sub_18264E8D4();
  __swift_project_value_buffer(v21, (uint64_t)qword_18C58D4C8);
  int v22 = (os_log_s *)sub_18264E8C8();
  sub_18264E8EC();
  int v51 = sub_18264F06C();
  if ((sub_18264F090() & 1) != 0)
  {
    swift_retain();
    sub_18264E910();
    swift_release();
    if ((*(unsigned int (**)(char *, uint64_t))(v9 + 88))(v11, v8) == *MEMORY[0x18961D198])
    {
      uint64_t v23 = "[Error] Interval already ended";
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      uint64_t v23 = "";
    }

    uint64_t v24 = v52;
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, v12);
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v25 = 0;
    os_signpost_id_t v26 = sub_18264E898();
    _os_signpost_emit_with_name_impl(&dword_181A5C000, v22, (os_signpost_type_t)v51, v26, "sendData", v23, v25, 2u);
    MEMORY[0x186E12168](v25, -1LL, -1LL);

    uint64_t v27 = *(void (**)(char *, uint64_t))(v13 + 8);
    v27(v18, v12);
    v27(v16, v12);
  }

  else
  {

    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
    uint64_t v24 = v52;
  }

  unint64_t v28 = v56;
  unint64_t v29 = HIDWORD(v56);
  uint64_t v31 = v53;
  unint64_t v30 = v54;
  if (HIDWORD(v56) <= 0xFE)
  {
    if (qword_18C58B1C8 != -1) {
      swift_once();
    }
    uint64_t v37 = sub_18264E934();
    __swift_project_value_buffer(v37, (uint64_t)qword_18C58D4B0);
    swift_retain_n();
    uint64_t v38 = (os_log_s *)sub_18264E91C();
    os_log_type_t v39 = sub_18264F000();
    if (os_log_type_enabled(v38, v39))
    {
      unint64_t v54 = v28;
      uint64_t v40 = v24;
      uint64_t v41 = swift_slowAlloc();
      unint64_t v42 = (void *)swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 136315394;
      uint64_t v58 = 67LL;
      unint64_t v59 = 0xE100000000000000LL;
      uint64_t v60 = v43;
      uint64_t id = nw_connection_get_id(*(void **)(*(void *)(v40 + 16) + 16LL));
      sub_18264F480();
      sub_18264EB74();
      swift_bridgeObjectRelease();
      uint64_t v58 = sub_181BF7900(v58, v59, &v60);
      sub_18264F0CC();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v41 + 12) = 2112;
      sub_181BBE220();
      swift_allocError();
      *(_DWORD *)uint64_t v44 = v54;
      *(_BYTE *)(v44 + 4) = v29;
      uint64_t v45 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v58 = v45;
      unint64_t v28 = v56;
      sub_18264F0CC();
      *unint64_t v42 = v45;
      _os_log_impl(&dword_181A5C000, v38, v39, "%s: Failed to send: %@", (uint8_t *)v41, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D610);
      swift_arrayDestroy();
      MEMORY[0x186E12168](v42, -1LL, -1LL);
      swift_arrayDestroy();
      MEMORY[0x186E12168](v43, -1LL, -1LL);
      MEMORY[0x186E12168](v41, -1LL, -1LL);
    }

    else
    {

      swift_release_n();
    }

    sub_181BF7EF8();
    uint64_t v46 = swift_allocError();
    *(void *)uint64_t v47 = v28;
    *(_OWORD *)(v47 + 8) = xmmword_1826610D0;
    uint64_t v58 = v46;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A1F0);
    return sub_18264ED78();
  }

  else
  {
    if (qword_18C58B1C8 != -1) {
      swift_once();
    }
    uint64_t v32 = sub_18264E934();
    __swift_project_value_buffer(v32, (uint64_t)qword_18C58D4B0);
    swift_retain();
    sub_181BCD4AC(v31, v30);
    swift_retain();
    sub_181BCD4AC(v31, v30);
    unint64_t v33 = (os_log_s *)sub_18264E91C();
    os_log_type_t v34 = sub_18264F018();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      unint64_t v56 = v36;
      *(_DWORD *)uint64_t v35 = 136315650;
      uint64_t v58 = 67LL;
      unint64_t v59 = 0xE100000000000000LL;
      uint64_t v60 = v36;
      uint64_t id = nw_connection_get_id(*(void **)(*(void *)(v24 + 16) + 16LL));
      sub_18264F480();
      sub_18264EB74();
      swift_bridgeObjectRelease();
      uint64_t v58 = sub_181BF7900(v58, v59, &v60);
      sub_18264F0CC();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v35 + 12) = 2080;
      __asm { BR              X10 }
    }

    swift_release_n();
    sub_181BCD4F0(v31, v30);
    sub_181BCD4F0(v31, v30);

    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A1F0);
    return sub_18264ED84();
  }

uint64_t sub_181C42648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 32) = a4;
  return swift_task_switch();
}

uint64_t sub_181C42660()
{
  if (qword_18C58B1C8 != -1) {
    swift_once();
  }
  uint64_t v1 = sub_18264E934();
  __swift_project_value_buffer(v1, (uint64_t)qword_18C58D4B0);
  swift_retain_n();
  uint64_t v2 = (os_log_s *)sub_18264E91C();
  os_log_type_t v3 = sub_18264F018();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[4];
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v13 = v7;
    uint64_t v14 = 67LL;
    unint64_t v15 = 0xE100000000000000LL;
    v0[2] = nw_connection_get_id(*(void **)(*(void *)(v5 + 16) + 16LL));
    sub_18264F480();
    sub_18264EB74();
    swift_bridgeObjectRelease();
    v0[3] = sub_181BF7900(v14, v15, &v13);
    sub_18264F0CC();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_181A5C000, v2, v3, "%s: Sending terminate process message", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x186E12168](v7, -1LL, -1LL);
    MEMORY[0x186E12168](v6, -1LL, -1LL);
  }

  else
  {
    swift_release_n();
  }

  uint64_t v8 = sub_181BE4A20((uint64_t)&unk_189BA8BC0);
  uint64_t v10 = v9;
  v0[5] = v8;
  v0[6] = v9;
  uint64_t v11 = (void *)swift_task_alloc();
  v0[7] = v11;
  void *v11 = v0;
  v11[1] = sub_181C428A8;
  return sub_181C408B4(v8, v10, 5, 0);
}

uint64_t sub_181C428A8()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0) {
    return swift_task_switch();
  }
  sub_181BCD4F0(*(void *)(v2 + 40), *(void *)(v2 + 48));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_181C4291C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_181C42950(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v141 = a3;
  uint64_t v150 = *MEMORY[0x1895F89C0];
  uint64_t v8 = sub_18264E8E0();
  uint64_t v137 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  v140 = (char *)&v121 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_18264E8B0();
  uint64_t v143 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](v10);
  v138 = (char *)&v121 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = MEMORY[0x1895F8858](v11);
  v139 = (char *)&v121 - v14;
  uint64_t v15 = MEMORY[0x1895F8858](v13);
  uint64_t v17 = (char *)&v121 - v16;
  uint64_t v18 = MEMORY[0x1895F8858](v15);
  v142 = (char *)&v121 - v19;
  MEMORY[0x1895F8858](v18);
  uint64_t v21 = (char *)&v121 - v20;
  uint64_t v22 = *((unsigned __int8 *)a5 + 4);
  uint64_t v23 = *a5;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v25 = Strong;
    v136 = v17;
    if (qword_18C58B1D0 != -1) {
      swift_once();
    }
    unint64_t v26 = v23 | (v22 << 32);
    uint64_t v27 = sub_18264E8D4();
    uint64_t v28 = __swift_project_value_buffer(v27, (uint64_t)qword_18C58D4C8);
    swift_retain();
    sub_18264E8A4();
    uint64_t v132 = v28;
    unint64_t v29 = (os_log_s *)sub_18264E8C8();
    os_signpost_type_t v30 = sub_18264F084();
    char v31 = sub_18264F090();
    unint64_t v135 = a2;
    uint64_t v134 = a1;
    uint64_t v133 = v10;
    uint64_t v131 = v8;
    if ((v31 & 1) != 0)
    {
      v130 = (uint64_t (*)(char *, uint64_t))v26;
      unint64_t v33 = v142;
      uint64_t v32 = v143;
      (*(void (**)(char *, char *, uint64_t))(v143 + 16))(v142, v21, v10);
      os_log_type_t v34 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v34 = 134217984;
      uint64_t id = nw_connection_get_id(*(void **)(*(void *)(v25 + 16) + 16LL));
      sub_18264F0CC();
      swift_release();
      os_signpost_id_t v35 = sub_18264E898();
      _os_signpost_emit_with_name_impl( &dword_181A5C000,  v29,  v30,  v35,  "receiveNextMessage",  "Receive message from %llu",  v34,  0xCu);
      MEMORY[0x186E12168](v34, -1LL, -1LL);

      uint64_t v36 = *(void (**)(char *, uint64_t))(v32 + 8);
      unint64_t v26 = (unint64_t)v130;
      v36(v21, v10);
      uint64_t v37 = v33;
    }

    else
    {
      swift_release();

      uint64_t v36 = *(void (**)(char *, uint64_t))(v143 + 8);
      uint64_t v37 = v21;
    }

    v36(v37, v10);
    unint64_t v38 = HIDWORD(v26);
    if (HIDWORD(v26) > 0xFE)
    {
      if (qword_18C58B1C8 != -1) {
        swift_once();
      }
      uint64_t v39 = sub_18264E934();
      uint64_t v40 = __swift_project_value_buffer(v39, (uint64_t)qword_18C58D4B0);
      swift_retain_n();
      uint64_t v41 = (os_log_s *)sub_18264E91C();
      os_log_type_t v42 = sub_18264EFF4();
      BOOL v43 = os_log_type_enabled(v41, v42);
      v130 = (uint64_t (*)(char *, uint64_t))v36;
      if (v43)
      {
        uint64_t v44 = (uint8_t *)swift_slowAlloc();
        uint64_t v45 = swift_slowAlloc();
        *(void *)&__int128 v145 = v45;
        *(_DWORD *)uint64_t v44 = 136315138;
        uint64_t id = 67LL;
        unint64_t v148 = 0xE100000000000000LL;
        uint64_t v144 = nw_connection_get_id(*(void **)(*(void *)(v25 + 16) + 16LL));
        sub_18264F480();
        sub_18264EB74();
        swift_bridgeObjectRelease();
        uint64_t id = sub_181BF7900(id, v148, (uint64_t *)&v145);
        sub_18264F0CC();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_181A5C000, v41, v42, "%s: Received message", v44, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x186E12168](v45, -1LL, -1LL);
        MEMORY[0x186E12168](v44, -1LL, -1LL);
      }

      else
      {

        swift_release_n();
      }

      unint64_t v55 = v135;
      unint64_t v56 = v136;
      uint64_t v57 = v141;
      if (v141)
      {
        LODWORD(v58) = nw_content_context_get_is_final(*(nw_content_context_t *)(v141 + 16));
        if (qword_18C58B200 != -1) {
          swift_once();
        }
        nw_protocol_metadata_t v59 = nw_content_context_copy_protocol_metadata( *(nw_content_context_t *)(v57 + 16),  *(nw_protocol_definition_t *)(qword_18C5A4A10 + 32));
        if (v59)
        {
          nw_protocol_metadata_t v60 = v59;
          uint64_t v61 = sub_181C32C0C((uint64_t)v59);
          if (v61)
          {
            uint64_t v62 = ((uint64_t (*)(nw_protocol_metadata_t))v61[12])(v60);
            type metadata accessor for NWProtocolFramer.Message();
            uint64_t v63 = swift_dynamicCastClass();
            if (v63)
            {
              if (v55 >> 60 == 15)
              {
                swift_retain_n();
                uint64_t v64 = (os_log_s *)sub_18264E91C();
                os_log_type_t v65 = sub_18264F000();
                if (os_log_type_enabled(v64, v65))
                {
                  uint64_t v66 = (uint8_t *)swift_slowAlloc();
                  uint64_t v67 = v25;
                  uint64_t v68 = swift_slowAlloc();
                  *(void *)&__int128 v145 = v68;
                  uint64_t v141 = v62;
                  *(_DWORD *)uint64_t v66 = 136315138;
                  uint64_t id = 67LL;
                  unint64_t v148 = 0xE100000000000000LL;
                  uint64_t v144 = nw_connection_get_id(*(void **)(*(void *)(v67 + 16) + 16LL));
                  sub_18264F480();
                  sub_18264EB74();
                  swift_bridgeObjectRelease();
                  uint64_t id = sub_181BF7900(id, v148, (uint64_t *)&v145);
                  sub_18264F0CC();
                  swift_release_n();
                  swift_bridgeObjectRelease();
                  _os_log_impl(&dword_181A5C000, v64, v65, "%s No content in message", v66, 0xCu);
                  swift_arrayDestroy();
                  uint64_t v69 = v68;
                  uint64_t v25 = v67;
                  MEMORY[0x186E12168](v69, -1LL, -1LL);
                  MEMORY[0x186E12168](v66, -1LL, -1LL);

                  swift_release();
LABEL_34:
                  sub_181C4460C(v58, v25);
                  swift_release();
                  return;
                }

                swift_release();
                goto LABEL_33;
              }

              uint64_t v76 = v63;
              unint64_t v126 = v55 >> 62;
              sub_181BCD4AC(v134, v55);
              uint64_t v77 = sub_181C519FC();
              sub_18264E8C8();
              sub_18264E88C();
              swift_retain_n();
              __int128 v78 = (void (*)(char *, char *, uint64_t))sub_18264E8C8();
              int v79 = sub_18264F078();
              char v80 = sub_18264F090();
              uint64_t v127 = v40;
              uint64_t v129 = v77;
              uint64_t v141 = v62;
              uint64_t v128 = v76;
              if ((v80 & 1) != 0)
              {
                int v124 = v79;
                v125 = v78;
                (*(void (**)(char *, char *, uint64_t))(v143 + 16))(v139, v56, v133);
                unint64_t v81 = (_DWORD *)swift_slowAlloc();
                uint64_t v143 = swift_slowAlloc();
                uint64_t id = v143;
                *unint64_t v81 = 136315394;
                __asm { BR              X10 }
              }

              swift_release_n();
              v125 = *(void (**)(char *, char *, uint64_t))(v143 + 16);
              v125(v142, v56, v133);
              sub_18264E904();
              swift_allocObject();
              int v82 = 1;
              uint64_t v143 = sub_18264E8F8();
              __int128 v83 = *(os_unfair_lock_s **)(v25 + 80);
              MEMORY[0x1895F8858](v143);
              *(&v121 - 2) = v25;
              *(&v121 - 1) = v76;
              swift_retain();
              os_unfair_lock_lock(v83 + 4);
              sub_181BF787C(v84, sub_181C4EFC8);
              os_unfair_lock_unlock(v83 + 4);
              swift_release();
              char v85 = v129;
              if (((1 << v129) & 0x3D) != 0)
              {
                int v82 = 0;
                int v86 = 0;
                goto LABEL_51;
              }

              int v86 = 0;
              if (((1 << v129) & 0xC0) == 0)
              {
LABEL_51:
                LODWORD(v139) = v82;
                swift_retain();
                uint64_t v88 = v134;
                sub_181BE4844(v134, v55);
                swift_retain();
                sub_181BE4844(v88, v55);
                uint64_t v89 = (os_log_s *)sub_18264E91C();
                int v90 = sub_18264F018();
                if (os_log_type_enabled(v89, (os_log_type_t)v90))
                {
                  int v122 = v90;
                  int v123 = v86;
                  int v124 = v58;
                  char v91 = v85;
                  uint64_t v92 = swift_slowAlloc();
                  uint64_t v121 = swift_slowAlloc();
                  *(void *)&__int128 v145 = v121;
                  *(_DWORD *)uint64_t v92 = 136315906;
                  uint64_t id = 67LL;
                  unint64_t v148 = 0xE100000000000000LL;
                  uint64_t v144 = nw_connection_get_id(*(void **)(*(void *)(v25 + 16) + 16LL));
                  sub_18264F480();
                  sub_18264EB74();
                  swift_bridgeObjectRelease();
                  uint64_t id = sub_181BF7900(id, v148, (uint64_t *)&v145);
                  sub_18264F0CC();
                  swift_release_n();
                  swift_bridgeObjectRelease();
                  *(_WORD *)(v92 + 12) = 2080;
                  __asm { BR              X10 }
                }

                sub_181BE61C8(v88, v55);
                swift_release_n();
                sub_181BE61C8(v88, v55);

                if (!(_DWORD)v139)
                {
                  sub_181BCD4AC(v134, v55);
                  if (nw_framer_message_copy_object_value(*(nw_framer_message_t *)(v128 + 16), "NWActorSystemOptions"))
                  {
                    sub_18264F0F0();
                    swift_unknownObjectRelease();
                  }

                  else
                  {
                    __int128 v145 = 0u;
                    __int128 v146 = 0u;
                  }

                  sub_181BE625C((uint64_t)&v145, (uint64_t)&id, (uint64_t *)&unk_18C58D300);
                  if (v149) {
                    swift_dynamicCast();
                  }
                  else {
                    sub_181BDA0F0((uint64_t)&id, (uint64_t *)&unk_18C58D300);
                  }
                  __asm { BR              X10 }
                }

                if (v86)
                {
                  v93 = (void *)sub_18264E5EC();
                  uint64_t id = 0LL;
                  id v94 = objc_msgSend(v93, sel_decompressedDataUsingAlgorithm_error_, 0, &id);

                  id v95 = (id)id;
                  if (!v94)
                  {
                    v96 = v95;
                    v97 = (void *)sub_18264E4E4();

                    swift_willThrow();
                    swift_retain();
                    id v98 = v97;
                    swift_retain();
                    id v99 = v97;
                    v100 = (os_log_s *)sub_18264E91C();
                    os_log_type_t v101 = sub_18264F000();
                    if (os_log_type_enabled(v100, v101))
                    {
                      uint64_t v102 = swift_slowAlloc();
                      int v124 = v58;
                      uint64_t v58 = v102;
                      v139 = (char *)swift_slowAlloc();
                      *(void *)&__int128 v145 = v139;
                      *(_DWORD *)uint64_t v58 = 136315394;
                      uint64_t id = 67LL;
                      unint64_t v148 = 0xE100000000000000LL;
                      uint64_t v144 = nw_connection_get_id(*(void **)(*(void *)(v25 + 16) + 16LL));
                      sub_18264F480();
                      sub_18264EB74();
                      swift_bridgeObjectRelease();
                      uint64_t id = sub_181BF7900(id, v148, (uint64_t *)&v145);
                      sub_18264F0CC();
                      swift_release_n();
                      swift_bridgeObjectRelease();
                      *(_WORD *)(v58 + 12) = 2080;
                      uint64_t id = (uint64_t)v97;
                      id v103 = v97;
                      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D6A0);
                      uint64_t v104 = sub_18264EAC0();
                      uint64_t id = sub_181BF7900(v104, v105, (uint64_t *)&v145);
                      sub_18264F0CC();
                      swift_bridgeObjectRelease();

                      _os_log_impl(&dword_181A5C000, v100, v101, "%s: Failed to unzip data: %s", (uint8_t *)v58, 0x16u);
                      v106 = v139;
                      swift_arrayDestroy();
                      MEMORY[0x186E12168](v106, -1LL, -1LL);
                      uint64_t v107 = v58;
                      LOBYTE(v58) = v124;
                      MEMORY[0x186E12168](v107, -1LL, -1LL);
                    }

                    else
                    {

                      swift_release_n();
                    }

                    v108 = v140;
                    v109 = v138;
                    v110 = (os_log_s *)sub_18264E8C8();
                    sub_18264E8EC();
                    os_signpost_type_t v111 = sub_18264F06C();
                    if ((sub_18264F090() & 1) != 0)
                    {
                      swift_retain();
                      sub_18264E910();
                      swift_release();
                      uint64_t v112 = v137;
                      uint64_t v113 = v131;
                      if ((*(unsigned int (**)(char *, uint64_t))(v137 + 88))(v108, v131) == *MEMORY[0x18961D198])
                      {
                        v114 = "[Error] Interval already ended";
                      }

                      else
                      {
                        (*(void (**)(char *, uint64_t))(v112 + 8))(v108, v113);
                        v114 = "";
                      }

                      v118 = v142;
                      uint64_t v115 = v133;
                      v125(v142, v109, v133);
                      v119 = (uint8_t *)swift_slowAlloc();
                      *(_WORD *)v119 = 0;
                      os_signpost_id_t v120 = sub_18264E898();
                      _os_signpost_emit_with_name_impl( &dword_181A5C000,  v110,  v111,  v120,  "handleMessage",  v114,  v119,  2u);
                      MEMORY[0x186E12168](v119, -1LL, -1LL);

                      v116 = v130;
                      v130(v109, v115);
                      uint64_t v117 = v116(v118, v115);
                    }

                    else
                    {

                      uint64_t v115 = v133;
                      v116 = v130;
                      uint64_t v117 = v130(v109, v133);
                    }

                    if ((v58 & 1) != 0)
                    {
                      v116(v136, v115);
                      swift_release();
                      sub_181BE61C8(v134, v55);
                      swift_release();
                    }

                    else
                    {
                      sub_181C3E8F8(v117);
                      swift_release();
                      swift_release();
                      sub_181BE61C8(v134, v55);
                      v116(v136, v115);
                    }

                    goto LABEL_34;
                  }

                  sub_18264E5F8();
                }

                else
                {
                  sub_181C0C148(47LL, v134, v55);
                }

                __asm { BR              X10 }
              }

              if (nw_framer_message_copy_object_value(*(nw_framer_message_t *)(v128 + 16), "NWActorSystemOptions"))
              {
                sub_18264F0F0();
                swift_unknownObjectRelease();
              }

              else
              {
                __int128 v145 = 0u;
                __int128 v146 = 0u;
              }

              sub_181BE625C((uint64_t)&v145, (uint64_t)&id, (uint64_t *)&unk_18C58D300);
              if (v149)
              {
                if ((swift_dynamicCast() & 1) != 0)
                {
                  char v87 = v145;
LABEL_50:
                  int v82 = v87 & 1;
                  int v86 = 1;
                  goto LABEL_51;
                }
              }

              else
              {
                sub_181BDA0F0((uint64_t)&id, (uint64_t *)&unk_18C58D300);
              }

              char v87 = 0;
              goto LABEL_50;
            }

            swift_release();
          }

          else
          {
            swift_unknownObjectRelease();
          }
        }
      }

      else
      {
        LOBYTE(v58) = 0;
      }

      swift_retain_n();
      uint64_t v70 = (os_log_s *)sub_18264E91C();
      os_log_type_t v71 = sub_18264F000();
      if (os_log_type_enabled(v70, v71))
      {
        uint64_t v72 = (uint8_t *)swift_slowAlloc();
        uint64_t v73 = v25;
        uint64_t v74 = swift_slowAlloc();
        *(void *)&__int128 v145 = v74;
        *(_DWORD *)uint64_t v72 = 136315138;
        uint64_t id = 67LL;
        unint64_t v148 = 0xE100000000000000LL;
        uint64_t v144 = nw_connection_get_id(*(void **)(*(void *)(v73 + 16) + 16LL));
        sub_18264F480();
        sub_18264EB74();
        swift_bridgeObjectRelease();
        uint64_t id = sub_181BF7900(id, v148, (uint64_t *)&v145);
        sub_18264F0CC();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_181A5C000, v70, v71, "%s Failed to determine message type", v72, 0xCu);
        swift_arrayDestroy();
        uint64_t v75 = v74;
        uint64_t v25 = v73;
        MEMORY[0x186E12168](v75, -1LL, -1LL);
        MEMORY[0x186E12168](v72, -1LL, -1LL);

        goto LABEL_34;
      }

LABEL_33:
      swift_release_n();
      goto LABEL_34;
    }

    if (qword_18C58B1C8 != -1) {
      swift_once();
    }
    uint64_t v46 = sub_18264E934();
    __swift_project_value_buffer(v46, (uint64_t)qword_18C58D4B0);
    swift_retain_n();
    uint64_t v47 = (os_log_s *)sub_18264E91C();
    os_log_type_t v48 = sub_18264F000();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v143 = v26;
      uint64_t v49 = swift_slowAlloc();
      uint64_t v50 = (void *)swift_slowAlloc();
      uint64_t v51 = v25;
      uint64_t v52 = swift_slowAlloc();
      *(void *)&__int128 v145 = v52;
      *(_DWORD *)uint64_t v49 = 136315394;
      uint64_t id = 67LL;
      unint64_t v148 = 0xE100000000000000LL;
      uint64_t v144 = nw_connection_get_id(*(void **)(*(void *)(v51 + 16) + 16LL));
      sub_18264F480();
      sub_18264EB74();
      swift_bridgeObjectRelease();
      uint64_t id = sub_181BF7900(id, v148, (uint64_t *)&v145);
      sub_18264F0CC();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v49 + 12) = 2112;
      sub_181BBE220();
      swift_allocError();
      *(_DWORD *)uint64_t v53 = v143;
      *(_BYTE *)(v53 + 4) = v38;
      uint64_t v54 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t id = v54;
      sub_18264F0CC();
      void *v50 = v54;
      _os_log_impl(&dword_181A5C000, v47, v48, "%s: Failed to receive message: %@", (uint8_t *)v49, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D610);
      swift_arrayDestroy();
      MEMORY[0x186E12168](v50, -1LL, -1LL);
      swift_arrayDestroy();
      MEMORY[0x186E12168](v52, -1LL, -1LL);
      MEMORY[0x186E12168](v49, -1LL, -1LL);
      swift_release();
    }

    else
    {

      swift_release_n();
    }
  }

void sub_181C4460C(char a1, uint64_t a2)
{
  if ((a1 & 1) != 0)
  {
    if (qword_18C58B1C8 != -1) {
      swift_once();
    }
    uint64_t v3 = sub_18264E934();
    __swift_project_value_buffer(v3, (uint64_t)qword_18C58D4B0);
    swift_retain_n();
    BOOL v4 = (os_log_s *)sub_18264E91C();
    os_log_type_t v5 = sub_18264F018();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136315138;
      uint64_t v8 = v7;
      nw_connection_get_id(*(void **)(*(void *)(a2 + 16) + 16LL));
      sub_18264F480();
      sub_18264EB74();
      swift_bridgeObjectRelease();
      sub_181BF7900(67LL, 0xE100000000000000LL, &v8);
      sub_18264F0CC();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_181A5C000, v4, v5, "%s: Message is final, connection has ended", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x186E12168](v7, -1LL, -1LL);
      MEMORY[0x186E12168](v6, -1LL, -1LL);
    }

    else
    {

      swift_release_n();
    }

    sub_181C3EBB8(0LL);
  }

uint64_t sub_181C44804(uint64_t result, uint64_t a2)
{
  uint64_t v2 = OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_supportsCustomSerialization;
  if ((*(_BYTE *)(result + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_supportsCustomSerialization) & 1) == 0)
  {
    uint64_t v3 = result;
    if (nw_framer_message_copy_object_value(*(nw_framer_message_t *)(a2 + 16), "NWActorSystemOptions"))
    {
      sub_18264F0F0();
      swift_unknownObjectRelease();
    }

    else
    {
      memset(v5, 0, sizeof(v5));
    }

    sub_181BE625C((uint64_t)v5, (uint64_t)v6, (uint64_t *)&unk_18C58D300);
    if (v7)
    {
      uint64_t result = swift_dynamicCast();
      if ((result & 1) != 0)
      {
        int v4 = (LODWORD(v5[0]) >> 2) & 1;
LABEL_10:
        *(_BYTE *)(v3 + sub_181C5475C(v0, v1, v2) = v4;
        return result;
      }
    }

    else
    {
      uint64_t result = sub_181BDA0F0((uint64_t)v6, (uint64_t *)&unk_18C58D300);
    }

    LOBYTE(v4) = 0;
    goto LABEL_10;
  }

  return result;
}

uint64_t sub_181C448E4(uint64_t a1, unint64_t a2, int a3, int a4)
{
  unint64_t v78 = a2;
  int v74 = a4;
  LODWORD(v77) = a3;
  uint64_t v5 = type metadata accessor for NWActorID();
  MEMORY[0x1895F8858](v5);
  uint64_t v66 = (uint64_t)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A1E0);
  uint64_t v71 = *(void *)(v7 - 8);
  uint64_t v72 = v7;
  MEMORY[0x1895F8858](v7);
  os_log_type_t v65 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58D5A0);
  uint64_t v10 = MEMORY[0x1895F8858](v9);
  uint64_t v69 = (uint64_t)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v73 = (char *)&v65 - v12;
  uint64_t v13 = sub_18264E8B0();
  uint64_t v81 = *(void *)(v13 - 8);
  int v82 = (char **)v13;
  MEMORY[0x1895F8858](v13);
  uint64_t v15 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_18264E8D4();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1895F8858](v16);
  uint64_t v19 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v76 = type metadata accessor for RemoteCallEnvelope(0LL);
  uint64_t v20 = MEMORY[0x1895F8858](v76);
  uint64_t v22 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = MEMORY[0x1895F8858](v20);
  uint64_t v75 = (char *)&v65 - v24;
  uint64_t v25 = MEMORY[0x1895F8858](v23);
  uint64_t v67 = (uint64_t)&v65 - v26;
  uint64_t v27 = MEMORY[0x1895F8858](v25);
  uint64_t v68 = (uint64_t)&v65 - v28;
  uint64_t v29 = MEMORY[0x1895F8858](v27);
  char v31 = (char *)&v65 - v30;
  MEMORY[0x1895F8858](v29);
  uint64_t v70 = (uint64_t)&v65 - v32;
  if (qword_18C58B1D0 != -1) {
    swift_once();
  }
  uint64_t v33 = __swift_project_value_buffer(v16, (uint64_t)qword_18C58D4C8);
  uint64_t v80 = v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v33, v16);
  sub_18264E8A4();
  os_log_type_t v34 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)os_log_type_t v34 = 0;
  os_signpost_id_t v35 = (os_log_s *)sub_18264E8C8();
  os_signpost_type_t v36 = sub_18264F078();
  os_signpost_id_t v37 = sub_18264E898();
  _os_signpost_emit_with_name_impl(&dword_181A5C000, v35, v36, v37, "decodeRemoteCallEnvelope", "", v34, 2u);
  if ((v77 & 1) != 0)
  {
    unint64_t v38 = v78;
    sub_181BCD4AC(a1, v78);
    uint64_t v39 = v75;
    sub_181CA0100(a1, v38, v75);
    uint64_t v77 = (uint64_t)v31;
    BOOL v43 = v39;
  }

  else
  {
    uint64_t v77 = (uint64_t)v31;
    sub_18264E3DC();
    swift_allocObject();
    uint64_t v40 = a1;
    uint64_t v41 = a1;
    unint64_t v42 = v78;
    sub_181BCD4AC(v40, v78);
    sub_18264E3D0();
    sub_181BD67D4(&qword_18C58D748, type metadata accessor for RemoteCallEnvelope, (uint64_t)&unk_1826643B8);
    sub_18264E3B8();
    sub_181BCD4F0(v41, v42);
    swift_release();
    BOOL v43 = v75;
    sub_181BC928C((uint64_t)v22, (uint64_t)v75, type metadata accessor for RemoteCallEnvelope);
  }

  uint64_t v44 = v67;
  sub_181BC928C((uint64_t)v43, v67, type metadata accessor for RemoteCallEnvelope);
  os_signpost_type_t v45 = sub_18264F06C();
  os_signpost_id_t v46 = sub_18264E898();
  _os_signpost_emit_with_name_impl(&dword_181A5C000, v35, v45, v46, "decodeRemoteCallEnvelope", "", v34, 2u);

  uint64_t v47 = v68;
  sub_181BC928C(v44, v68, type metadata accessor for RemoteCallEnvelope);
  MEMORY[0x186E12168](v34, -1LL, -1LL);
  uint64_t v48 = v47;
  uint64_t v49 = v77;
  sub_181BC928C(v48, v77, type metadata accessor for RemoteCallEnvelope);
  (*(void (**)(char *, char **))(v81 + 8))(v15, v82);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v19, v16);
  uint64_t v50 = v70;
  sub_181BC928C(v49, v70, type metadata accessor for RemoteCallEnvelope);
  uint64_t v51 = (char *)v79;
  uint64_t v52 = (os_unfair_lock_s *)(*(void *)(v79 + 80) + 16LL);
  os_unfair_lock_lock(v52);
  uint64_t v53 = (uint64_t)v73;
  sub_181BF787C(v54, (uint64_t (*)(void))sub_181C4F1C0);
  os_unfair_lock_unlock(v52);
  uint64_t v55 = v69;
  sub_181BE48BC(v53, v69, (uint64_t *)&unk_18C58D5A0);
  uint64_t v57 = v71;
  uint64_t v56 = v72;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v55, 1LL, v72) == 1)
  {
    uint64_t v58 = sub_181BDA0F0(v55, (uint64_t *)&unk_18C58D5A0);
  }

  else
  {
    nw_protocol_metadata_t v59 = v65;
    uint64_t v60 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v57 + 32))(v65, v55, v56);
    int v82 = &v65;
    uint64_t v61 = v50 + *(int *)(v76 + 20);
    MEMORY[0x1895F8858](v60);
    *(&v65 - 2) = v51;
    *(&v65 - 1) = (char *)v61;
    os_unfair_lock_lock(v52);
    sub_181BF787C(v62, sub_181C4F6BC);
    os_unfair_lock_unlock(v52);
    sub_181BC9248(v61, v66, (uint64_t (*)(void))type metadata accessor for NWActorID);
    sub_18264ED84();
    uint64_t v58 = (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v59, v56);
  }

  MEMORY[0x1895F8858](v58);
  *(&v65 - 4) = v51;
  *(&v65 - 3) = (char *)v50;
  *((_BYTE *)&v65 - 16) = v74 & 1;
  os_unfair_lock_lock(v52);
  sub_181BF787C(v63, sub_181C4F1D8);
  os_unfair_lock_unlock(v52);
  sub_181BDA0F0(v53, (uint64_t *)&unk_18C58D5A0);
  return sub_181BC920C(v50, type metadata accessor for RemoteCallEnvelope);
}

void sub_181C451F4(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C0D0);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_18264E3DC();
  swift_allocObject();
  sub_181BCD4AC(a1, a2);
  sub_18264E3D0();
  sub_181C4EFE0();
  sub_18264E3B8();
  sub_181BCD4F0(a1, a2);
  swift_release();
  __int128 v44 = v41;
  __int128 v45 = v42;
  __int128 v46 = v43;
  if (qword_18C58B1C8 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_18264E934();
  __swift_project_value_buffer(v8, (uint64_t)qword_18C58D4B0);
  swift_retain();
  sub_181C4E474(&v44);
  swift_retain();
  sub_181C4E474(&v44);
  uint64_t v9 = (os_log_s *)sub_18264E91C();
  os_log_type_t v10 = sub_18264F018();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    v39[0] = v7;
    uint64_t v13 = v12;
    v40[0] = v12;
    *(_DWORD *)uint64_t v11 = 136315394;
    *(void *)&__int128 v41 = 67LL;
    *((void *)&v41 + 1) = 0xE100000000000000LL;
    v39[1] = nw_connection_get_id(*(void **)(*(void *)(v2 + 16) + 16LL));
    sub_18264F480();
    sub_18264EB74();
    swift_bridgeObjectRelease();
    *(void *)&__int128 v41 = sub_181BF7900(v41, *((unint64_t *)&v41 + 1), v40);
    sub_18264F0CC();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    __int128 v41 = v44;
    __int128 v42 = v45;
    __int128 v43 = v46;
    sub_181C4E474(&v44);
    uint64_t v14 = sub_18264EAC0();
    *(void *)&__int128 v41 = sub_181BF7900(v14, v15, v40);
    sub_18264F0CC();
    swift_bridgeObjectRelease();
    sub_181C4E510(&v44);
    sub_181C4E510(&v44);
    _os_log_impl(&dword_181A5C000, v9, v10, "%s: Got file transfer request: %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    uint64_t v16 = v13;
    uint64_t v7 = (char *)v39[0];
    MEMORY[0x186E12168](v16, -1LL, -1LL);
    MEMORY[0x186E12168](v11, -1LL, -1LL);
  }

  else
  {
    swift_release_n();
    sub_181C4E510(&v44);
    sub_181C4E510(&v44);
  }

  MEMORY[0x1895F8858](v17);
  v39[-2] = v2;
  v39[-1] = &v44;
  uint64_t v19 = v18 + 4;
  os_unfair_lock_lock(v18 + 4);
  sub_181BF787C(v20, sub_181C4F024);
  os_unfair_lock_unlock(v19);
  uint64_t v21 = *(void *)(v2 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_receivingFileTransferSession);
  if (v21)
  {
    uint64_t v22 = *(void **)(v21 + 32);
    swift_retain();
    id v23 = objc_msgSend(v22, sel_selfPublicKey);
    if (v23)
    {
      uint64_t v24 = v23;
      uint64_t v25 = sub_18264E5F8();
      unint64_t v27 = v26;
      swift_release();

      uint64_t v28 = *(void *)(v2 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_sendingFileTransferSession);
      if (v28)
      {
        uint64_t v29 = *(void **)(v28 + 32);
        swift_retain();
        id v30 = objc_msgSend(v29, sel_selfPublicKey);
        if (v30)
        {
          char v31 = v30;
          uint64_t v32 = sub_18264E5F8();
          unint64_t v34 = v33;
          swift_release();

          uint64_t v35 = sub_18264E688();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56LL))(v7, 1LL, 1LL, v35);
          sub_181BCD4AC(v25, v27);
          sub_181BCD4AC(v32, v34);
          sub_181BCD4AC(v25, v27);
          sub_181BCD4AC(v32, v34);
          sub_181C4DB58(v25, v27, v32, v34, (uint64_t)v7, 3, v2);
          sub_181BCD4F0(v25, v27);
          sub_181BCD4F0(v32, v34);
          sub_181BCD4F0(v32, v34);
          sub_181BCD4F0(v25, v27);
          sub_181C4E510(&v44);
          sub_181BDA0F0((uint64_t)v7, &qword_18C58C0D0);
          sub_181BCD4F0(v25, v27);
          sub_181BCD4F0(v32, v34);
          return;
        }

        swift_release();
      }

      sub_181BCD4F0(v25, v27);
    }

    else
    {
      swift_release();
    }
  }

  os_signpost_type_t v36 = (os_log_s *)sub_18264E91C();
  os_log_type_t v37 = sub_18264F000();
  if (os_log_type_enabled(v36, v37))
  {
    unint64_t v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v38 = 0;
    _os_log_impl(&dword_181A5C000, v36, v37, "Missing public key for file transfer", v38, 2u);
    MEMORY[0x186E12168](v38, -1LL, -1LL);

    sub_181C4E510(&v44);
  }

  else
  {
    sub_181C4E510(&v44);
  }

uint64_t sub_181C4592C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  sub_18264E3DC();
  swift_allocObject();
  sub_181BCD4AC(a1, a2);
  sub_18264E3D0();
  sub_181C4F134();
  sub_18264E3B8();
  sub_181BCD4F0(a1, a2);
  swift_release();
  uint64_t v6 = v19;
  unint64_t v7 = v20;
  uint64_t v8 = v21;
  unint64_t v9 = v22;
  if (qword_18C58B1C8 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_18264E934();
  __swift_project_value_buffer(v10, (uint64_t)qword_18C58D4B0);
  swift_retain();
  sub_181BCD4AC(v19, v20);
  sub_181BCD4AC(v21, v22);
  swift_retain();
  sub_181BCD4AC(v19, v20);
  sub_181BCD4AC(v21, v22);
  uint64_t v11 = (os_log_s *)sub_18264E91C();
  os_log_type_t v12 = sub_18264F018();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    v18[0] = v17;
    *(_DWORD *)uint64_t v13 = 136315394;
    uint64_t v19 = 67LL;
    unint64_t v20 = 0xE100000000000000LL;
    nw_connection_get_id(*(void **)(*(void *)(v3 + 16) + 16LL));
    sub_18264F480();
    sub_18264EB74();
    swift_bridgeObjectRelease();
    uint64_t v19 = sub_181BF7900(67LL, 0xE100000000000000LL, v18);
    sub_18264F0CC();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    uint64_t v19 = v6;
    unint64_t v20 = v7;
    uint64_t v21 = v8;
    unint64_t v22 = v9;
    sub_181BCD4AC(v6, v7);
    sub_181BCD4AC(v8, v9);
    uint64_t v14 = sub_18264EAC0();
    uint64_t v19 = sub_181BF7900(v14, v15, v18);
    sub_18264F0CC();
    swift_bridgeObjectRelease();
    sub_181BCD4F0(v6, v7);
    sub_181BCD4F0(v8, v9);
    sub_181BCD4F0(v6, v7);
    sub_181BCD4F0(v8, v9);
    _os_log_impl(&dword_181A5C000, v11, v12, "%s: Got file transfer response: %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x186E12168](v17, -1LL, -1LL);
    MEMORY[0x186E12168](v13, -1LL, -1LL);
  }

  else
  {
    swift_release_n();
    sub_181BCD4F0(v19, v20);
    sub_181BCD4F0(v21, v22);
    sub_181BCD4F0(v19, v20);
    sub_181BCD4F0(v21, v22);
  }

  sub_181BCD4AC(v8, v9);
  sub_181C49A94(1LL, 0LL, 0LL, v8, v9);
  sub_181BCD4F0(v8, v9);
  sub_181BCD4AC(v6, v7);
  sub_181C49A94(0LL, 0LL, 0LL, v6, v7);
  sub_181BCD4F0(v6, v7);
  sub_181BCD4F0(v6, v7);
  return sub_181BCD4F0(v8, v9);
}

uint64_t sub_181C45E90(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for CancelRemoteCall(0LL);
  uint64_t v6 = MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = MEMORY[0x1895F8858](v6);
  uint64_t v11 = (char *)&v35 - v10;
  uint64_t v12 = MEMORY[0x1895F8858](v9);
  uint64_t v14 = (char *)&v35 - v13;
  MEMORY[0x1895F8858](v12);
  uint64_t v16 = (uint8_t *)&v35 - v15;
  sub_18264E3DC();
  swift_allocObject();
  sub_181BCD4AC(a1, a2);
  sub_18264E3D0();
  sub_181BD67D4(&qword_18C58D740, type metadata accessor for CancelRemoteCall, (uint64_t)&unk_18266465C);
  sub_18264E3B8();
  sub_181BCD4F0(a1, a2);
  swift_release();
  uint64_t v17 = sub_181BC928C((uint64_t)v14, (uint64_t)v16, type metadata accessor for CancelRemoteCall);
  MEMORY[0x1895F8858](v17);
  *(&v35 - 2) = v2;
  *(&v35 - 1) = v16;
  uint64_t v19 = v18 + 4;
  os_unfair_lock_lock(v18 + 4);
  sub_181C0AF9C((void *(*)(uint64_t *__return_ptr))sub_181C4F1A8, v37);
  os_unfair_lock_unlock(v19);
  if (v37[0])
  {
    if (qword_18C58B1C8 != -1) {
      swift_once();
    }
    uint64_t v20 = sub_18264E934();
    __swift_project_value_buffer(v20, (uint64_t)qword_18C58D4B0);
    sub_181BC9248((uint64_t)v16, (uint64_t)v11, type metadata accessor for CancelRemoteCall);
    uint64_t v21 = (os_log_s *)sub_18264E91C();
    os_log_type_t v22 = sub_18264F018();
    if (os_log_type_enabled(v21, v22))
    {
      id v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      v37[0] = v24;
      *(_DWORD *)id v23 = 136315138;
      uint64_t v35 = v23 + 4;
      sub_18264E688();
      sub_181BD67D4( (unint64_t *)&qword_18C58C240,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
      uint64_t v25 = sub_18264F480();
      uint64_t v36 = sub_181BF7900(v25, v26, v37);
      sub_18264F0CC();
      swift_bridgeObjectRelease();
      sub_181BC920C((uint64_t)v11, type metadata accessor for CancelRemoteCall);
      _os_log_impl(&dword_181A5C000, v21, v22, "Cancelling call ID: %s", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x186E12168](v24, -1LL, -1LL);
      MEMORY[0x186E12168](v23, -1LL, -1LL);
    }

    else
    {
      sub_181BC920C((uint64_t)v11, type metadata accessor for CancelRemoteCall);
    }

    sub_18264EE5C();
    swift_release();
  }

  else
  {
    if (qword_18C58B1C8 != -1) {
      swift_once();
    }
    uint64_t v27 = sub_18264E934();
    __swift_project_value_buffer(v27, (uint64_t)qword_18C58D4B0);
    sub_181BC9248((uint64_t)v16, (uint64_t)v8, type metadata accessor for CancelRemoteCall);
    uint64_t v28 = (os_log_s *)sub_18264E91C();
    os_log_type_t v29 = sub_18264F000();
    if (os_log_type_enabled(v28, v29))
    {
      id v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      v37[0] = v31;
      *(_DWORD *)id v30 = 136315138;
      sub_18264E688();
      sub_181BD67D4( (unint64_t *)&qword_18C58C240,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
      uint64_t v32 = sub_18264F480();
      uint64_t v36 = sub_181BF7900(v32, v33, v37);
      sub_18264F0CC();
      swift_bridgeObjectRelease();
      sub_181BC920C((uint64_t)v8, type metadata accessor for CancelRemoteCall);
      _os_log_impl(&dword_181A5C000, v28, v29, "Could not find task for call ID: %s", v30, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x186E12168](v31, -1LL, -1LL);
      MEMORY[0x186E12168](v30, -1LL, -1LL);
    }

    else
    {
      sub_181BC920C((uint64_t)v8, type metadata accessor for CancelRemoteCall);
    }
  }

  return sub_181BC920C((uint64_t)v16, type metadata accessor for CancelRemoteCall);
}

uint64_t sub_181C4655C(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  LODWORD(v47) = a4;
  uint64_t v46 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58D5B0);
  MEMORY[0x1895F8858](v6);
  uint64_t v49 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E780);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for ReplyEnvelope();
  uint64_t v13 = MEMORY[0x1895F8858](v12);
  uint64_t v15 = (char *)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = MEMORY[0x1895F8858](v13);
  uint64_t v18 = (char *)v40 - v17;
  MEMORY[0x1895F8858](v16);
  uint64_t v20 = (char *)v40 - v19;
  sub_181BCD4AC(a1, a2);
  uint64_t v21 = sub_181CA567C(a1, a2, v20);
  unint64_t v41 = a2;
  __int128 v42 = v15;
  v40[4] = v18;
  __int128 v43 = v11;
  uint64_t v45 = v8;
  MEMORY[0x1895F8858](v21);
  v40[-2] = v23;
  v40[-1] = v22;
  uint64_t v44 = v22;
  uint64_t v25 = v24 + 4;
  os_unfair_lock_lock(v24 + 4);
  uint64_t v26 = (uint64_t)v49;
  sub_181BF787C(v27, (uint64_t (*)(void))sub_181C4F49C);
  os_unfair_lock_unlock(v25);
  uint64_t v28 = v45;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v26, 1LL, v45) != 1)
  {
    unint64_t v38 = v41 >> 62;
    uint64_t v48 = v9;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v43, v26, v28);
    __asm { BR              X11 }
  }

  sub_181BDA0F0(v26, (uint64_t *)&unk_18C58D5B0);
  if (qword_18C58B1C8 != -1) {
    swift_once();
  }
  uint64_t v29 = sub_18264E934();
  __swift_project_value_buffer(v29, (uint64_t)qword_18C58D4B0);
  uint64_t v30 = v44;
  uint64_t v31 = (uint64_t)v42;
  sub_181BC9248(v44, (uint64_t)v42, (uint64_t (*)(void))type metadata accessor for ReplyEnvelope);
  uint64_t v32 = (os_log_s *)sub_18264E91C();
  os_log_type_t v33 = sub_18264F000();
  if (os_log_type_enabled(v32, v33))
  {
    unint64_t v34 = (uint8_t *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    v50[0] = v35;
    *(_DWORD *)unint64_t v34 = 136315138;
    sub_18264E688();
    sub_181BD67D4( (unint64_t *)&qword_18C58C240,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
    uint64_t v36 = sub_18264F480();
    v50[7] = sub_181BF7900(v36, v37, v50);
    sub_18264F0CC();
    swift_bridgeObjectRelease();
    sub_181BC920C(v31, (uint64_t (*)(void))type metadata accessor for ReplyEnvelope);
    _os_log_impl(&dword_181A5C000, v32, v33, "No continuation for reply with call ID: %s", v34, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x186E12168](v35, -1LL, -1LL);
    MEMORY[0x186E12168](v34, -1LL, -1LL);
  }

  else
  {
    sub_181BC920C(v31, (uint64_t (*)(void))type metadata accessor for ReplyEnvelope);
  }

  return sub_181BC920C(v30, (uint64_t (*)(void))type metadata accessor for ReplyEnvelope);
}

uint64_t sub_181C47B20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58D5A0);
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = a1 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_resolvedActorIDContinuation;
  swift_beginAccess();
  sub_181BE48BC(v7, a2, (uint64_t *)&unk_18C58D5A0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A1E0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v6, 1LL, 1LL, v8);
  swift_beginAccess();
  sub_181C4F454((uint64_t)v6, v7);
  return swift_endAccess();
}

uint64_t sub_181C47C1C(uint64_t a1, uint64_t a2, int a3)
{
  int v25 = a3;
  uint64_t v5 = type metadata accessor for RemoteCallEnvelope(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C3E0);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_18264E688();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v24 = v12;
  MEMORY[0x1895F8858](v12);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v15, a2);
  uint64_t v16 = sub_18264EDCC();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v11, 1LL, 1LL, v16);
  sub_181BC9248(a2, (uint64_t)v8, type metadata accessor for RemoteCallEnvelope);
  unint64_t v17 = (*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v18 = v17 + v7;
  unint64_t v19 = (v17 + v7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = 0LL;
  *(void *)(v20 + 24) = 0LL;
  sub_181BC928C((uint64_t)v8, v20 + v17, type metadata accessor for RemoteCallEnvelope);
  *(_BYTE *)(v20 + v18) = v25;
  *(void *)(v19 + v20 + 8) = a1;
  swift_retain();
  uint64_t v21 = sub_181C3B844((uint64_t)v11, (uint64_t)&unk_18C58D758, v20);
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v26 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0x8000000000000000LL;
  sub_181C906DC(v21, (uint64_t)v15, isUniquelyReferenced_nonNull_native);
  *(void *)(a1 + 96) = v26;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v24);
  return swift_endAccess();
}

uint64_t sub_181C47E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6)
{
  *(_BYTE *)(v6 + 372) = a5;
  *(void *)(v6 + 168) = a4;
  *(void *)(v6 + 176) = a6;
  *(void *)(v6 + 184) = *a6;
  uint64_t v7 = sub_18264E6A0();
  *(void *)(v6 + 192) = v7;
  *(void *)(v6 + 200) = *(void *)(v7 - 8);
  *(void *)(v6 + 208) = swift_task_alloc();
  *(void *)(v6 + 216) = type metadata accessor for NWActorID();
  *(void *)(v6 + 224) = swift_task_alloc();
  *(void *)(v6 + 232) = type metadata accessor for ReplyEnvelope();
  *(void *)(v6 + 240) = swift_task_alloc();
  *(void *)(v6 + 248) = type metadata accessor for RemoteCallEnvelope(0LL);
  *(void *)(v6 + 256) = swift_task_alloc();
  *(void *)(v6 + 264) = swift_task_alloc();
  *(void *)(v6 + 272) = swift_task_alloc();
  *(void *)(v6 + 280) = swift_task_alloc();
  *(void *)(v6 + 288) = swift_task_alloc();
  *(void *)(v6 + 296) = swift_task_alloc();
  *(void *)(v6 + 304) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_181C47F64()
{
  if (qword_18C58B1C8 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 304);
  uint64_t v3 = sub_18264E934();
  *(void *)(v0 + 312) = __swift_project_value_buffer(v3, (uint64_t)qword_18C58D4B0);
  sub_181BC9248(v1, v2, type metadata accessor for RemoteCallEnvelope);
  uint64_t v4 = (os_log_s *)sub_18264E91C();
  os_log_type_t v5 = sub_18264F018();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 304);
  if (v6)
  {
    int v22 = *(unsigned __int8 *)(v0 + 372);
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    v23[0] = v9;
    *(_DWORD *)uint64_t v8 = 136315394;
    sub_18264E688();
    sub_181BD67D4( (unint64_t *)&qword_18C58C240,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
    uint64_t v10 = sub_18264F480();
    *(void *)(v0 + 160) = sub_181BF7900(v10, v11, v23);
    sub_18264F0CC();
    swift_bridgeObjectRelease();
    sub_181BC920C(v7, type metadata accessor for RemoteCallEnvelope);
    *(_WORD *)(v8 + 12) = 1024;
    *(_DWORD *)(v0 + 368) = v22;
    sub_18264F0CC();
    _os_log_impl(&dword_181A5C000, v4, v5, "Performing remote call for call ID %s %{BOOL}d", (uint8_t *)v8, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x186E12168](v9, -1LL, -1LL);
    MEMORY[0x186E12168](v8, -1LL, -1LL);
  }

  else
  {
    sub_181BC920C(*(void *)(v0 + 304), type metadata accessor for RemoteCallEnvelope);
  }

  uint64_t v12 = *(void *)(v0 + 176);
  uint64_t v13 = *(os_unfair_lock_s **)(v12 + 80);
  uint64_t v14 = swift_task_alloc();
  *(void *)(v14 + 16) = sub_181C4F39C;
  *(void *)(v14 + 24) = v12;
  os_unfair_lock_lock(v13 + 4);
  (*(void (**)(uint64_t *__return_ptr))(v14 + 16))(v23);
  char v15 = v23[0];
  os_unfair_lock_unlock(v13 + 4);
  swift_task_dealloc();
  if (qword_18C58B208 != -1) {
    swift_once();
  }
  uint64_t v16 = *(void *)(v0 + 176);
  char v17 = *(_BYTE *)(v0 + 372);
  uint64_t v18 = *(void *)(v0 + 168);
  *(void *)(v0 + 40) = *(void *)(v0 + 184);
  *(void *)(v0 + 48) = &off_189BAF808;
  *(void *)(v0 + 16) = v16;
  uint64_t v19 = swift_task_alloc();
  *(void *)(v0 + 320) = v19;
  *(void *)(v19 + 16) = v18;
  *(_BYTE *)(v19 + 24) = v15;
  *(_BYTE *)(v19 + 25) = v17;
  *(void *)(v19 + 32) = v16;
  swift_retain();
  uint64_t v20 = (void *)swift_task_alloc();
  *(void *)(v0 + 328) = v20;
  *uint64_t v20 = v0;
  v20[1] = sub_181C482E8;
  v23[13] = 602LL;
  v23[14] = MEMORY[0x18961AFC8] + 8LL;
  return sub_18264F768();
}

uint64_t sub_181C482E8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 336) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  if (!v0) {
    sub_181BDA0F0(v2 + 16, &qword_18C58D770);
  }
  return swift_task_switch();
}

uint64_t sub_181C48370()
{
  if ((sub_18264EE68() & 1) != 0) {
    sub_181C4F430(0LL, 0LL, 0LL, 0x3000000000000000uLL, 0xFFu);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181C48440()
{
  return swift_task_switch();
}

uint64_t sub_181C48494()
{
  uint64_t v1 = *(void *)(v0 + 240);
  sub_181C4F430(*(void *)(v0 + 344), *(void *)(v0 + 352), 0LL, 0LL, *(_BYTE *)(v0 + 373));
  sub_181BC920C(v1, (uint64_t (*)(void))type metadata accessor for ReplyEnvelope);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181C4856C()
{
  uint64_t v1 = *(void **)(v0 + 336);
  sub_181BDA0F0(v0 + 16, &qword_18C58D770);
  *(void *)(v0 + 80) = v1;
  id v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D6A0);
  if ((swift_dynamicCast() & 1) != 0)
  {
    uint64_t v3 = *(void **)(v0 + 56);
    unint64_t v4 = *(void *)(v0 + 64);
    unint64_t v5 = *(void *)(v0 + 72);
    if (v5 >> 60 == 11 && v3 == (void *)4 && !v4 && v5 == 0xB000000000000000LL)
    {
      uint64_t v7 = *(void *)(v0 + 288);
      uint64_t v6 = *(void *)(v0 + 296);
      uint64_t v8 = *(void *)(v0 + 168);

      sub_181BC9248(v8, v6, type metadata accessor for RemoteCallEnvelope);
      sub_181BC9248(v8, v7, type metadata accessor for RemoteCallEnvelope);
      uint64_t v9 = (os_log_s *)sub_18264E91C();
      os_log_type_t v10 = sub_18264F018();
      BOOL v11 = os_log_type_enabled(v9, v10);
      uint64_t v12 = *(void *)(v0 + 288);
      uint64_t v13 = *(void *)(v0 + 296);
      if (v11)
      {
        os_log_type_t type = v10;
        uint64_t v14 = *(void *)(v0 + 248);
        uint64_t v15 = *(void *)(v0 + 224);
        uint64_t v16 = swift_slowAlloc();
        uint64_t v65 = swift_slowAlloc();
        uint64_t v68 = v65;
        *(_DWORD *)uint64_t v16 = 136315394;
        sub_181BC9248( v13 + *(int *)(v14 + 20),  v15,  (uint64_t (*)(void))type metadata accessor for NWActorID);
        sub_18264F168();
        swift_bridgeObjectRelease();
        v69[0] = 0x49726F746341574ELL;
        v69[1] = 0xEA00000000002844LL;
        swift_bridgeObjectRetain();
        sub_18264EB74();
        swift_bridgeObjectRelease();
        sub_18264EB74();
        sub_18264E688();
        sub_181BD67D4( (unint64_t *)&qword_18C58C240,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
        sub_18264F480();
        sub_18264EB74();
        swift_bridgeObjectRelease();
        sub_18264EB74();
        sub_181BC920C(v15, (uint64_t (*)(void))type metadata accessor for NWActorID);
        *(void *)(v0 + 144) = sub_181BF7900(0x49726F746341574ELL, 0xEA00000000002844LL, &v68);
        sub_18264F0CC();
        swift_bridgeObjectRelease();
        sub_181BC920C(v13, type metadata accessor for RemoteCallEnvelope);
        *(_WORD *)(v16 + 12) = 2080;
        uint64_t v17 = sub_18264F480();
        *(void *)(v0 + 152) = sub_181BF7900(v17, v18, &v68);
        sub_18264F0CC();
        swift_bridgeObjectRelease();
        sub_181BC920C(v12, type metadata accessor for RemoteCallEnvelope);
        _os_log_impl( &dword_181A5C000,  v9,  type,  "Failed to resolve actor with ID %s for callID %s",  (uint8_t *)v16,  0x16u);
        swift_arrayDestroy();
        MEMORY[0x186E12168](v65, -1LL, -1LL);
        MEMORY[0x186E12168](v16, -1LL, -1LL);
      }

      else
      {
        sub_181BC920C(*(void *)(v0 + 296), type metadata accessor for RemoteCallEnvelope);
        sub_181BC920C(v12, type metadata accessor for RemoteCallEnvelope);
      }

      uint64_t v54 = 0LL;
      unint64_t v53 = 0LL;
LABEL_20:
      char v56 = 1;
      goto LABEL_21;
    }

    sub_181C4EE64(v3, v4, v5);
  }

  uint64_t v19 = *(void **)(v0 + 336);

  *(void *)(v0 + 88) = v19;
  id v20 = v19;
  int v21 = swift_dynamicCast();
  int v22 = *(void **)(v0 + 336);
  if (v21)
  {
    uint64_t v24 = *(void *)(v0 + 272);
    uint64_t v23 = *(void *)(v0 + 280);
    uint64_t v25 = *(void *)(v0 + 168);

    sub_181BC9248(v25, v23, type metadata accessor for RemoteCallEnvelope);
    sub_181BC9248(v25, v24, type metadata accessor for RemoteCallEnvelope);
    uint64_t v26 = (os_log_s *)sub_18264E91C();
    os_log_type_t v27 = sub_18264F000();
    BOOL v28 = os_log_type_enabled(v26, v27);
    uint64_t v29 = *(void *)(v0 + 272);
    uint64_t v30 = *(void *)(v0 + 280);
    if (v28)
    {
      uint64_t v31 = *(void *)(v0 + 264);
      uint64_t v32 = swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      v69[0] = v33;
      *(_DWORD *)uint64_t v32 = 136315394;
      sub_181BC9248(v30, v31, type metadata accessor for RemoteCallEnvelope);
      uint64_t v34 = sub_18264EAC0();
      *(void *)(v0 + 128) = sub_181BF7900(v34, v35, v69);
      sub_18264F0CC();
      swift_bridgeObjectRelease();
      sub_181BC920C(v30, type metadata accessor for RemoteCallEnvelope);
      *(_WORD *)(v32 + 12) = 2080;
      sub_18264E688();
      sub_181BD67D4( (unint64_t *)&qword_18C58C240,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
      uint64_t v36 = sub_18264F480();
      *(void *)(v0 + 136) = sub_181BF7900(v36, v37, v69);
      sub_18264F0CC();
      swift_bridgeObjectRelease();
      sub_181BC920C(v29, type metadata accessor for RemoteCallEnvelope);
      _os_log_impl( &dword_181A5C000,  v26,  v27,  "Failed to execute distributed target: %s for callID %s",  (uint8_t *)v32,  0x16u);
      swift_arrayDestroy();
      MEMORY[0x186E12168](v33, -1LL, -1LL);
      MEMORY[0x186E12168](v32, -1LL, -1LL);
    }

    else
    {
      sub_181BC920C(*(void *)(v0 + 280), type metadata accessor for RemoteCallEnvelope);
      sub_181BC920C(v29, type metadata accessor for RemoteCallEnvelope);
    }

    (*(void (**)(void, void))(*(void *)(v0 + 200) + 8LL))(*(void *)(v0 + 208), *(void *)(v0 + 192));
    unint64_t v53 = 0LL;
    uint64_t v54 = 1LL;
    goto LABEL_20;
  }

  uint64_t v38 = *(void *)(v0 + 256);
  uint64_t v39 = *(void *)(v0 + 168);

  sub_181BC9248(v39, v38, type metadata accessor for RemoteCallEnvelope);
  id v40 = v22;
  id v41 = v22;
  __int128 v42 = (os_log_s *)sub_18264E91C();
  os_log_type_t v43 = sub_18264F000();
  BOOL v44 = os_log_type_enabled(v42, v43);
  uint64_t v45 = *(void **)(v0 + 336);
  uint64_t v46 = *(void *)(v0 + 256);
  if (v44)
  {
    uint64_t v47 = swift_slowAlloc();
    uint64_t v66 = swift_slowAlloc();
    v69[0] = v66;
    *(_DWORD *)uint64_t v47 = 136315394;
    *(void *)(v0 + 104) = v45;
    id v48 = v45;
    uint64_t v49 = sub_18264EAC0();
    *(void *)(v0 + 112) = sub_181BF7900(v49, v50, v69);
    sub_18264F0CC();
    swift_bridgeObjectRelease();

    *(_WORD *)(v47 + 12) = 2080;
    sub_18264E688();
    sub_181BD67D4( (unint64_t *)&qword_18C58C240,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
    uint64_t v51 = sub_18264F480();
    *(void *)(v0 + 120) = sub_181BF7900(v51, v52, v69);
    sub_18264F0CC();
    swift_bridgeObjectRelease();
    sub_181BC920C(v46, type metadata accessor for RemoteCallEnvelope);
    _os_log_impl( &dword_181A5C000,  v42,  v43,  "Failed to execute distributed target, underlying error: %s for callID %s",  (uint8_t *)v47,  0x16u);
    swift_arrayDestroy();
    MEMORY[0x186E12168](v66, -1LL, -1LL);
    MEMORY[0x186E12168](v47, -1LL, -1LL);
  }

  else
  {

    sub_181BC920C(v46, type metadata accessor for RemoteCallEnvelope);
  }

  *(void *)(v0 + 96) = *(void *)(v0 + 336);
  uint64_t v54 = sub_18264EAA8();
  unint64_t v53 = v55;
  char v56 = 0;
LABEL_21:
  *(_BYTE *)(v0 + 373) = v56;
  *(void *)(v0 + 344) = v54;
  *(void *)(v0 + 352) = v53;
  if ((sub_18264EE68() & 1) != 0)
  {
    sub_181C4F430(v54, v53, 0LL, 0LL, v56);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    nw_protocol_metadata_t v59 = *(int **)(v0 + 232);
    uint64_t v58 = *(void *)(v0 + 240);
    uint64_t v60 = *(void *)(v0 + 168);
    uint64_t v61 = sub_18264E688();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 16LL))(v58, v60, v61);
    *(_OWORD *)(v58 + v59[5]) = xmmword_18265D190;
    uint64_t v62 = v58 + v59[6];
    *(void *)uint64_t v62 = v54;
    *(void *)(v62 + 8) = v53;
    *(void *)(v62 + 16) = 0LL;
    *(void *)(v62 + 24) = 0LL;
    *(_BYTE *)(v62 + 32) = v56;
    uint64_t v63 = v58 + v59[7];
    *(void *)uint64_t v63 = 0LL;
    *(_BYTE *)(v63 + 8) = 1;
    sub_181C36CD8(v54, v53, 0LL, 0LL, v56);
    uint64_t v64 = (void *)swift_task_alloc();
    *(void *)(v0 + 360) = v64;
    *uint64_t v64 = v0;
    v64[1] = sub_181C48440;
    return sub_181C49198(*(void *)(v0 + 240));
  }

uint64_t sub_181C48F30(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5)
{
  *(_BYTE *)(v5 + 81) = a4;
  *(_BYTE *)(v5 + 80) = a3;
  *(void *)(v5 + 16) = a2;
  *(void *)(v5 + 24) = a5;
  *(void *)(v5 + 32) = _s15ActorConnectionC20RemoteCallInvocationVMa(0LL);
  *(void *)(v5 + 40) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_181C48F94()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 40);
  char v3 = *(_BYTE *)(v0 + 81);
  char v4 = *(_BYTE *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 24);
  sub_181BC9248(*(void *)(v0 + 16), v2, type metadata accessor for RemoteCallEnvelope);
  *(_BYTE *)(v2 + *(int *)(v1 + 20)) = v4;
  *(_BYTE *)(v2 + *(int *)(v1 + 24)) = v3;
  uint64_t v6 = *(int **)(v5 + 24);
  *(void *)(v0 + 48) = v6;
  if (v6)
  {
    *(void *)(v0 + 56) = *(void *)(*(void *)(v0 + 24) + 32LL);
    uint64_t v9 = (uint64_t (*)(void))((char *)v6 + *v6);
    swift_retain();
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 64) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_181C4908C;
    return v9(*(void *)(v0 + 40));
  }

  else
  {
    sub_181BC920C(*(void *)(v0 + 40), _s15ActorConnectionC20RemoteCallInvocationVMa);
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_181C4908C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48LL);
  *(void *)(*(void *)v1 + 72LL) = v0;
  swift_task_dealloc();
  sub_181BD25B8(v2);
  return swift_task_switch();
}

uint64_t sub_181C49108()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181C49150()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181C49198(uint64_t a1)
{
  v1[4] = a1;
  type metadata accessor for ReplyEnvelope();
  v1[5] = swift_task_alloc();
  char v3 = (void *)swift_task_alloc();
  v1[6] = v3;
  void *v3 = v1;
  v3[1] = sub_181C49208;
  return sub_181C49B30(a1);
}

uint64_t sub_181C49208()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0) {
    return swift_task_switch();
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_181C4927C()
{
  if (qword_18C58B1C8 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void **)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = sub_18264E934();
  __swift_project_value_buffer(v4, (uint64_t)qword_18C58D4B0);
  sub_181BC9248(v1, v3, (uint64_t (*)(void))type metadata accessor for ReplyEnvelope);
  id v5 = v2;
  id v6 = v2;
  uint64_t v7 = (os_log_s *)sub_18264E91C();
  os_log_type_t v8 = sub_18264F000();
  BOOL v9 = os_log_type_enabled(v7, v8);
  os_log_type_t v10 = *(void **)(v0 + 56);
  uint64_t v11 = *(void *)(v0 + 40);
  if (v9)
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v19 = (void *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    uint64_t v21 = v20;
    *(_DWORD *)uint64_t v12 = 136315394;
    sub_18264E688();
    log = v7;
    sub_181BD67D4( (unint64_t *)&qword_18C58C240,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
    uint64_t v13 = sub_18264F480();
    *(void *)(v0 + 16) = sub_181BF7900(v13, v14, &v21);
    sub_18264F0CC();
    swift_bridgeObjectRelease();
    sub_181BC920C(v11, (uint64_t (*)(void))type metadata accessor for ReplyEnvelope);
    *(_WORD *)(v12 + 12) = 2112;
    id v15 = v10;
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 24) = v16;
    sub_18264F0CC();
    *uint64_t v19 = v16;

    _os_log_impl(&dword_181A5C000, log, v8, "Failed to send reply to %s: %@", (uint8_t *)v12, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D610);
    swift_arrayDestroy();
    MEMORY[0x186E12168](v19, -1LL, -1LL);
    swift_arrayDestroy();
    MEMORY[0x186E12168](v20, -1LL, -1LL);
    MEMORY[0x186E12168](v12, -1LL, -1LL);
  }

  else
  {

    sub_181BC920C(v11, (uint64_t (*)(void))type metadata accessor for ReplyEnvelope);
  }

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181C49548@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v5 = (uint64_t *)(a1 + 88);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_181C8C1C0(a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v5;
    uint64_t v17 = *v5;
    *id v5 = 0x8000000000000000LL;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_181C921A4();
      uint64_t v9 = v17;
    }

    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = sub_18264E688();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))( v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * v6,  v11);
    uint64_t v12 = *(void *)(v17 + 56);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E780);
    uint64_t v14 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 32))(a3, v12 + *(void *)(v14 + 72) * v6, v13);
    sub_181C4CE4C(v6, v17);
    *id v5 = v17;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(a3, 0LL, 1LL, v13);
  }

  else
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E780);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(a3, 1LL, 1LL, v15);
  }

  return swift_endAccess();
}

uint64_t sub_181C496BC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  sub_181C4975C(1, *a2, v4, a2[4], a2[5]);
  swift_bridgeObjectRetain();
  sub_18264EB74();
  sub_181C4975C(0, v3, v4, a2[2], a2[3]);
  return swift_bridgeObjectRelease();
}

uint64_t sub_181C4975C(char a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v6 = v5;
  os_unfair_lock_assert_owner((os_unfair_lock_t)(*(void *)(v6 + 80) + 16LL));
  uint64_t v12 = &OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_sendingFileTransferSession;
  if ((a1 & 1) != 0) {
    uint64_t v13 = &OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_receivingFileTransferSession;
  }
  else {
    uint64_t v13 = &OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_sendingFileTransferSession;
  }
  if (*(void *)(v6 + *v13))
  {
    uint64_t v14 = qword_18C58B1C8;
    swift_retain();
    if (v14 != -1) {
      swift_once();
    }
    uint64_t v15 = sub_18264E934();
    __swift_project_value_buffer(v15, (uint64_t)qword_18C58D4B0);
    uint64_t v16 = (os_log_s *)sub_18264E91C();
    os_log_type_t v17 = sub_18264F000();
    if (os_log_type_enabled(v16, v17))
    {
      unint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v18 = 0;
      _os_log_impl(&dword_181A5C000, v16, v17, "Attempting to start file transfer when an active one exists", v18, 2u);
      MEMORY[0x186E12168](v18, -1LL, -1LL);
    }

    return swift_release();
  }

  else
  {
    unint64_t v29 = a5;
    if (qword_18C58B1C8 != -1) {
      swift_once();
    }
    uint64_t v20 = sub_18264E934();
    __swift_project_value_buffer(v20, (uint64_t)qword_18C58D4B0);
    uint64_t v21 = (os_log_s *)sub_18264E91C();
    os_log_type_t v22 = sub_18264F018();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 67109120;
      sub_18264F0CC();
      _os_log_impl(&dword_181A5C000, v21, v22, "Creating file transfer session, receiving: %{BOOL}d", v23, 8u);
      MEMORY[0x186E12168](v23, -1LL, -1LL);
    }

    uint64_t v24 = swift_allocObject();
    swift_weakInit();
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = v24;
    *(_BYTE *)(v25 + 24) = a1 & 1;
    if ((a1 & 1) != 0) {
      uint64_t v12 = &OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_receivingFileTransferSession;
    }
    _s19FileTransferSessionCMa();
    swift_allocObject();
    uint64_t v26 = sub_181C09D50(a1 & 1, (uint64_t)sub_181C4E7F4, v25);
    *(void *)(v6 + *v12) = v26;
    swift_retain();
    swift_release();
    uint64_t v27 = swift_allocObject();
    swift_weakInit();
    uint64_t v28 = *(void *)(v26 + 64);
    *(void *)(v26 + 64) = sub_181C4E800;
    *(void *)(v26 + 72) = v27;
    sub_181BD25B8(v28);
    objc_msgSend(*(id *)(v26 + 32), sel_prepare);
    sub_181C0A200(a2, a3, a4, v29);
    return swift_release();
  }

void sub_181C49A94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10 = (os_unfair_lock_s *)(*(void *)(v5 + 80) + 16LL);
  os_unfair_lock_lock(v10);
  sub_181C4F178(&v12);
  uint64_t v11 = v12;
  os_unfair_lock_unlock(v10);
  if (v11)
  {
    swift_retain();
    sub_181C0A200(a2, a3, a4, a5);
    swift_release_n();
  }

uint64_t sub_181C49B30(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  type metadata accessor for ReplyEnvelope();
  v2[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_181C49B88()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(os_unfair_lock_s **)(v2 + 80);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v1;
  uint64_t v5 = swift_task_alloc();
  *(void *)(v5 + 16) = sub_181C4F6A8;
  *(void *)(v5 + 24) = v4;
  v3 += 4;
  os_unfair_lock_lock(v3);
  sub_181C0AF9C(*(void *(**)(uint64_t *__return_ptr))(v5 + 16), &v26);
  os_unfair_lock_unlock(v3);
  uint64_t v6 = v26;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  if (v6)
  {
    if (qword_18C58B1C8 != -1) {
      swift_once();
    }
    uint64_t v7 = *(void *)(v0 + 56);
    uint64_t v8 = *(void *)(v0 + 40);
    uint64_t v9 = sub_18264E934();
    __swift_project_value_buffer(v9, (uint64_t)qword_18C58D4B0);
    sub_181BC9248(v8, v7, (uint64_t (*)(void))type metadata accessor for ReplyEnvelope);
    swift_retain_n();
    uint64_t v10 = (os_log_s *)sub_18264E91C();
    os_log_type_t v11 = sub_18264F018();
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v14 = *(void *)(v0 + 48);
    uint64_t v13 = *(void *)(v0 + 56);
    if (v12)
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315394;
      uint64_t v25 = v24;
      uint64_t v26 = 67LL;
      unint64_t v27 = 0xE100000000000000LL;
      *(void *)(v0 + 16) = nw_connection_get_id(*(void **)(*(void *)(v14 + 16) + 16LL));
      sub_18264F480();
      sub_18264EB74();
      swift_bridgeObjectRelease();
      *(void *)(v0 + 24) = sub_181BF7900(v26, v27, &v25);
      sub_18264F0CC();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v15 + 12) = 2080;
      sub_18264E688();
      sub_181BD67D4( (unint64_t *)&qword_18C58C240,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F70]);
      uint64_t v16 = sub_18264F480();
      *(void *)(v0 + 32) = sub_181BF7900(v16, v17, &v25);
      sub_18264F0CC();
      swift_bridgeObjectRelease();
      sub_181BC920C(v13, (uint64_t (*)(void))type metadata accessor for ReplyEnvelope);
      _os_log_impl(&dword_181A5C000, v10, v11, "%s: Sending reply for %s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x186E12168](v24, -1LL, -1LL);
      MEMORY[0x186E12168](v15, -1LL, -1LL);
    }

    else
    {
      swift_release_n();
      sub_181BC920C(v13, (uint64_t (*)(void))type metadata accessor for ReplyEnvelope);
    }

    uint64_t v18 = sub_181CA682C();
    *(void *)(v0 + 64) = v18;
    *(void *)(v0 + 72) = v19;
    uint64_t v21 = v18;
    uint64_t v22 = v19;
    uint64_t v23 = (void *)swift_task_alloc();
    *(void *)(v0 + 80) = v23;
    *uint64_t v23 = v0;
    v23[1] = sub_181C49F5C;
    return sub_181C408B4(v21, v22, 7, 0);
  }

  else
  {
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_181C49F5C()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 88) = v0;
  swift_task_dealloc();
  if (v0) {
    return swift_task_switch();
  }
  sub_181BCD4F0(*(void *)(v2 + 64), *(void *)(v2 + 72));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_181C49FD8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181C4A014@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = (uint64_t *)(a1 + 96);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_181C8C1C0(a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = 0LL;
  if ((a2 & 1) != 0)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v10 = *v5;
    uint64_t v14 = *v5;
    *uint64_t v5 = 0x8000000000000000LL;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_181C92488();
      uint64_t v10 = v14;
    }

    uint64_t v11 = *(void *)(v10 + 48);
    uint64_t v12 = sub_18264E688();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))( v11 + *(void *)(*(void *)(v12 - 8) + 72LL) * v6,  v12);
    uint64_t v8 = *(void *)(*(void *)(v14 + 56) + 8 * v6);
    sub_181C4D124(v6, v14);
    *uint64_t v5 = v14;
    swift_bridgeObjectRelease();
  }

  *a3 = v8;
  return swift_endAccess();
}

void sub_181C4A120(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C0D0);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = &v27[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = *(os_unfair_lock_s **)(v2 + 80);
  uint64_t v28 = v2;
  uint64_t v29 = a1;
  uint64_t v30 = a2;
  uint64_t v10 = v9 + 4;
  os_unfair_lock_lock(v9 + 4);
  sub_181C4E458((char *)&v31);
  char v11 = v31;
  os_unfair_lock_unlock(v10);
  if ((v11 & 1) != 0)
  {
    uint64_t v12 = *(void *)(v3 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_receivingFileTransferSession);
    if (v12)
    {
      uint64_t v13 = *(void **)(v12 + 32);
      swift_retain();
      id v14 = objc_msgSend(v13, sel_selfPublicKey);
      if (!v14)
      {
        swift_release();
        return;
      }

      uint64_t v15 = v14;
      uint64_t v16 = sub_18264E5F8();
      unint64_t v18 = v17;
      swift_release();

      uint64_t v19 = *(void *)(v3 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_sendingFileTransferSession);
      if (v19)
      {
        uint64_t v20 = *(void **)(v19 + 32);
        swift_retain();
        id v21 = objc_msgSend(v20, sel_selfPublicKey);
        if (v21)
        {
          uint64_t v22 = v21;
          uint64_t v23 = sub_18264E5F8();
          unint64_t v25 = v24;
          swift_release();

          *(void *)&__int128 v31 = a1;
          *((void *)&v31 + 1) = a2;
          uint64_t v32 = v16;
          unint64_t v33 = v18;
          uint64_t v34 = v23;
          unint64_t v35 = v25;
          uint64_t v26 = sub_18264E688();
          (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL))(v8, 1LL, 1LL, v26);
          swift_bridgeObjectRetain();
          sub_181BCD4AC(v16, v18);
          sub_181BCD4AC(v23, v25);
          swift_bridgeObjectRetain();
          sub_181BCD4AC(v16, v18);
          sub_181BCD4AC(v23, v25);
          sub_181C4DFE8(&v31, (uint64_t)v8, 2, v3);
          swift_bridgeObjectRelease();
          sub_181BCD4F0(v16, v18);
          sub_181BCD4F0(v23, v25);
          sub_181BCD4F0(v23, v25);
          sub_181BCD4F0(v16, v18);
          sub_181BDA0F0((uint64_t)v8, &qword_18C58C0D0);
          swift_bridgeObjectRelease();
          sub_181BCD4F0(v16, v18);
          sub_181BCD4F0(v23, v25);
          return;
        }

        swift_release();
      }

      sub_181BCD4F0(v16, v18);
    }
  }

uint64_t sub_181C4A3D0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  if (*(void *)(result + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_receivingFileTransferSession))
  {
    char v5 = 0;
  }

  else
  {
    swift_bridgeObjectRetain();
    sub_18264EB74();
    char v5 = 1;
    sub_181C4975C(1, a2, a3, 0LL, 0xF000000000000000LL);
    swift_bridgeObjectRelease();
    uint64_t result = sub_181C4975C(0, a2, a3, 0LL, 0xF000000000000000LL);
  }

  *a4 = v5;
  return result;
}

uint64_t sub_181C4A4A0()
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    MEMORY[0x1895F8858](result);
    uint64_t v2 = v1 + 4;
    os_unfair_lock_lock(v1 + 4);
    sub_181BF787C(v3, sub_181C4EBD4);
    os_unfair_lock_unlock(v2);
    return swift_release();
  }

  return result;
}

uint64_t sub_181C4A558()
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    MEMORY[0x1895F8858](result);
    uint64_t v2 = v1 + 4;
    os_unfair_lock_lock(v1 + 4);
    sub_181C4E808(&v4);
    uint64_t v3 = v4;
    os_unfair_lock_unlock(v2);
    if (v3)
    {
      swift_retain();
      sub_181CA20E4(0LL);
      swift_release();
      swift_release();
    }

    return swift_release();
  }

  return result;
}

uint64_t sub_181C4A64C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  unint64_t v6 = swift_bridgeObjectRetain();
  unint64_t v7 = sub_181C4EA74(v6, a1, a2);
  char v9 = v8;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v11 = 0LL;
  if ((v9 & 1) == 0)
  {
    swift_beginAccess();
    uint64_t v11 = sub_181C4A72C(v7);
    uint64_t result = swift_endAccess();
  }

  *a3 = v11;
  return result;
}

uint64_t sub_181C4A72C(unint64_t a1)
{
  unint64_t v3 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v3 & 0x8000000000000000LL) != 0
    || (v3 & 0x4000000000000000LL) != 0)
  {
    sub_181C1BCBC(v3);
  }

  uint64_t v5 = v3 & 0xFFFFFFFFFFFFFF8LL;
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }

  else
  {
    unint64_t v7 = v6 - 1;
    uint64_t v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      uint64_t v9 = v5 + 8 * a1;
      uint64_t v10 = *(void *)(v9 + 32);
      memmove((void *)(v9 + 32), (const void *)(v9 + 40), 8 * v8);
      *(void *)(v5 + 16) = v7;
      sub_18264ECDC();
      return v10;
    }
  }

  uint64_t result = sub_18264F360();
  __break(1u);
  return result;
}

uint64_t sub_181C4A80C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(char *, char *, uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = v6;
  v116 = a3;
  uint64_t v110 = a2;
  uint64_t v109 = a1;
  uint64_t v112 = a5;
  uint64_t v133 = *MEMORY[0x1895F89C0];
  uint64_t v113 = sub_18264E508();
  uint64_t v107 = *(void *)(v113 - 8);
  MEMORY[0x1895F8858](v113);
  os_signpost_type_t v111 = (char *)v104 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for NWActorID();
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (char *)v104 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_18264E568();
  uint64_t v122 = *(void *)(v13 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v13);
  v108 = (char *)v104 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = MEMORY[0x1895F8858](v14);
  unint64_t v18 = (char *)v104 - v17;
  uint64_t v19 = MEMORY[0x1895F8858](v16);
  id v21 = (char *)v104 - v20;
  MEMORY[0x1895F8858](v19);
  uint64_t v117 = (char *)v104 - v22;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58B040);
  uint64_t v24 = MEMORY[0x1895F8858](v23);
  uint64_t v25 = MEMORY[0x1895F8858](v24);
  uint64_t v26 = MEMORY[0x1895F8858](v25);
  uint64_t v28 = (char *)v104 - v27;
  uint64_t v29 = MEMORY[0x1895F8858](v26);
  uint64_t v30 = MEMORY[0x1895F8858](v29);
  uint64_t v32 = (char *)v104 - v31;
  MEMORY[0x1895F8858](v30);
  unint64_t v37 = (char *)v104 - v36;
  uint64_t v38 = *(void *)(v5 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_receivingFileTransferSession);
  if (!v38)
  {
    if (qword_18C58B1C8 != -1) {
      swift_once();
    }
    uint64_t v46 = sub_18264E934();
    __swift_project_value_buffer(v46, (uint64_t)qword_18C58D4B0);
    uint64_t v47 = (os_log_s *)sub_18264E91C();
    os_log_type_t v48 = sub_18264F000();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v49 = 0;
      _os_log_impl(&dword_181A5C000, v47, v48, "No receiving file transfer session", v49, 2u);
      MEMORY[0x186E12168](v49, -1LL, -1LL);
    }

    sub_181BF7EF8();
    swift_allocError();
    void *v50 = 0xD000000000000025LL;
    v50[1] = 0x8000000182730280LL;
    v50[2] = 0x9000000000000000LL;
    return swift_willThrow();
  }

  unint64_t v105 = v28;
  uint64_t v106 = v35;
  uint64_t v114 = v34;
  uint64_t v115 = v33;
  uint64_t v121 = v18;
  v104[1] = v7;
  uint64_t v39 = *(void **)(v38 + 32);
  uint64_t v118 = v38;
  swift_retain();
  id v40 = objc_msgSend(v39, sel_temporaryDirectoryURL);
  if (v40)
  {
    id v41 = v40;
    sub_18264E538();

    uint64_t v42 = v122;
    os_log_type_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v122 + 56);
    BOOL v44 = v32;
    uint64_t v45 = 0LL;
  }

  else
  {
    uint64_t v42 = v122;
    os_log_type_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v122 + 56);
    BOOL v44 = v32;
    uint64_t v45 = 1LL;
  }

  os_signpost_id_t v120 = v43;
  v43((uint64_t)v44, v45, 1LL, v13);
  sub_181BE625C((uint64_t)v32, (uint64_t)v37, &qword_18C58B040);
  v119 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 48);
  int v52 = v119(v37, 1LL, v13);
  sub_181BDA0F0((uint64_t)v37, &qword_18C58B040);
  unint64_t v53 = v121;
  uint64_t v54 = v118;
  if (v52 == 1)
  {
    sub_181BE48BC(a4, (uint64_t)&v124, &qword_18C58D638);
    sub_181BC9248((uint64_t)v116, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for NWActorID);
    if (v125)
    {
      sub_181BC920C((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for NWActorID);
      sub_181BE61DC(&v124, (uint64_t)&v126);
      uint64_t v55 = v122;
      char v56 = v117;
      goto LABEL_20;
    }

    swift_beginAccess();
    uint64_t v57 = *(uint64_t (**)(char *))(v5 + 56);
    uint64_t v55 = v122;
    if (v57)
    {
      swift_endAccess();
      swift_retain();
      uint64_t v58 = (void *)v57(v12);
      uint64_t v60 = v59;
      uint64_t v61 = v118;
      sub_181BD25B8((uint64_t)v57);
      sub_181BC920C((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for NWActorID);
      if (v58)
      {
        v123[0] = v58;
        v123[1] = v60;
        __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D640);
        __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D648);
        char v62 = swift_dynamicCast();
        char v56 = v117;
        if ((v62 & 1) == 0)
        {
          uint64_t v128 = 0LL;
          __int128 v126 = 0u;
          __int128 v127 = 0u;
        }

void sub_181C4B47C()
{
  if (qword_18C58B1C8 != -1) {
    swift_once();
  }
  uint64_t v1 = sub_18264E934();
  __swift_project_value_buffer(v1, (uint64_t)qword_18C58D4B0);
  swift_retain_n();
  swift_retain_n();
  uint64_t v2 = (os_log_s *)sub_18264E91C();
  os_log_type_t v3 = sub_18264F018();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315394;
    v12[0] = v5;
    nw_connection_get_id(*(void **)(*(void *)(v0 + 16) + 16LL));
    sub_18264F480();
    sub_18264EB74();
    swift_bridgeObjectRelease();
    sub_181BF7900(67LL, 0xE100000000000000LL, v12);
    sub_18264F0CC();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2080;
    type metadata accessor for NWFile1(0LL);
    swift_retain();
    uint64_t v6 = sub_18264EAC0();
    sub_181BF7900(v6, v7, v12);
    sub_18264F0CC();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_181A5C000, v2, v3, "%s: Incoming file reported: %s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x186E12168](v5, -1LL, -1LL);
    MEMORY[0x186E12168](v4, -1LL, -1LL);
  }

  else
  {

    swift_release_n();
    uint64_t v8 = swift_release_n();
  }

  MEMORY[0x1895F8858](v8);
  uint64_t v10 = v9 + 4;
  os_unfair_lock_lock(v9 + 4);
  sub_181BF787C(v11, sub_181C4EC24);
  os_unfair_lock_unlock(v10);
}

uint64_t sub_181C4B730(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_incomingFiles);
  swift_beginAccess();
  uint64_t v2 = swift_retain();
  MEMORY[0x186E0E844](v2);
  if (*(void *)((*v1 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((*v1 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
    sub_18264ED00();
  }
  sub_18264ED30();
  sub_18264ECDC();
  return swift_endAccess();
}

void sub_181C4B7D4(uint64_t a1)
{
  if (qword_18C58B1C8 != -1) {
    swift_once();
  }
  uint64_t v3 = sub_18264E934();
  __swift_project_value_buffer(v3, (uint64_t)qword_18C58D4B0);
  swift_retain_n();
  swift_retain_n();
  uint64_t v4 = (os_log_s *)sub_18264E91C();
  os_log_type_t v5 = sub_18264F018();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    v14[0] = 67LL;
    v14[1] = 0xE100000000000000LL;
    uint64_t v15 = v7;
    nw_connection_get_id(*(void **)(*(void *)(v1 + 16) + 16LL));
    sub_18264F480();
    sub_18264EB74();
    swift_bridgeObjectRelease();
    sub_181BF7900(67LL, 0xE100000000000000LL, &v15);
    sub_18264F0CC();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    type metadata accessor for NWFile1(0LL);
    swift_retain();
    uint64_t v8 = sub_18264EAC0();
    v14[0] = sub_181BF7900(v8, v9, &v15);
    sub_18264F0CC();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_181A5C000, v4, v5, "%s: Outgoing file reported: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x186E12168](v7, -1LL, -1LL);
    MEMORY[0x186E12168](v6, -1LL, -1LL);
  }

  else
  {

    swift_release_n();
    swift_release_n();
  }

  type metadata accessor for NWActorID();
  uint64_t v10 = sub_18264E64C();
  sub_181C4A120(v10, v11);
  swift_bridgeObjectRelease();
  uint64_t v12 = (os_unfair_lock_s *)(*(void *)(v1 + 80) + 16LL);
  os_unfair_lock_lock(v12);
  sub_181C4D680(v14);
  uint64_t v13 = v14[0];
  os_unfair_lock_unlock(v12);
  if (v13)
  {
    swift_retain();
    sub_181C0A3A4();
    swift_release();
    swift_retain();
    sub_181C0A428(a1);
    swift_release_n();
  }

void sub_181C4BAD0(void (*a1)(void))
{
  uint64_t v3 = (os_unfair_lock_s *)(*(void *)(v1 + 80) + 16LL);
  os_unfair_lock_lock(v3);
  sub_181C4BCC0(&v5);
  char v4 = v5;
  os_unfair_lock_unlock(v3);
  if ((v4 & 1) != 0) {
    a1(0LL);
  }
}

uint64_t sub_181C4BB5C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v5 = OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_isDisconnected;
  if ((*(_BYTE *)(result + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_isDisconnected) & 1) != 0)
  {
    char v6 = 1;
  }

  else
  {
    uint64_t v9 = result;
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = a2;
    *(void *)(v10 + 24) = a3;
    uint64_t v11 = (void **)(v9 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_interruptionHandlers);
    swift_beginAccess();
    uint64_t v12 = *v11;
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    char *v11 = v12;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v12 = sub_181BC5414(0LL, v12[2] + 1LL, 1, v12);
      char *v11 = v12;
    }

    unint64_t v15 = v12[2];
    unint64_t v14 = v12[3];
    if (v15 >= v14 >> 1)
    {
      uint64_t v12 = sub_181BC5414((void *)(v14 > 1), v15 + 1, 1, v12);
      char *v11 = v12;
    }

    uint64_t v12[2] = v15 + 1;
    uint64_t v16 = &v12[2 * v15];
    void v16[4] = sub_181C00730;
    v16[5] = v10;
    uint64_t result = swift_endAccess();
    char v6 = *(_BYTE *)(v9 + v5);
  }

  *a4 = v6;
  return result;
}

void sub_181C4BCA0(void (*a1)(void))
{
}

uint64_t sub_181C4BCC0@<X0>(char *a1@<X8>)
{
  return sub_181C4BB5C(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_181C4BCDC(uint64_t a1, int *a2)
{
  char v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  char v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *char v4 = v2;
  v4[1] = sub_181C13654;
  return v6(a1);
}

unint64_t sub_181C4BD40(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = sub_18264F114();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_18264F648();
        sub_18264EAB4();
        swift_bridgeObjectRetain();
        sub_18264EB44();
        swift_bridgeObjectRelease();
        uint64_t v10 = sub_18264F684();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }

        else if (v11 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v3);
          unint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            _OWORD *v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          unint64_t v16 = v15 + 24 * v3;
          uint64_t v17 = (__int128 *)(v15 + 24 * v6);
          if (24 * v3 < (uint64_t)(24 * v6) || v16 >= (unint64_t)v17 + 24 || (v18 = v3 == v6, int64_t v3 = v6, !v18))
          {
            __int128 v9 = *v17;
            *(void *)(v16 + 16) = *((void *)v17 + 2);
            *(_OWORD *)unint64_t v16 = v9;
            int64_t v3 = v6;
          }
        }

unint64_t sub_181C4BF58(int64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18264F30C();
  uint64_t v36 = *(void *)(v4 - 8);
  unint64_t result = MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    unint64_t result = sub_18264F114();
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v35 = (result + 1) & v11;
      uint64_t v12 = *(void *)(v36 + 72);
      uint64_t v34 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 16);
      uint64_t v13 = v11;
      do
      {
        uint64_t v14 = v8;
        uint64_t v15 = v12;
        int64_t v16 = v12 * v10;
        uint64_t v17 = v13;
        v34(v7, *(void *)(a2 + 48) + v12 * v10, v4);
        uint64_t v18 = sub_18264E9DC();
        unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v7, v4);
        uint64_t v13 = v17;
        unint64_t v19 = v18 & v17;
        if (a1 >= (uint64_t)v35)
        {
          if (v19 >= v35 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            uint64_t v22 = *(void *)(a2 + 48);
            unint64_t result = v22 + v15 * a1;
            uint64_t v8 = v14;
            if (v15 * a1 < v16 || (uint64_t v12 = v15, result >= v22 + v16 + v15))
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              uint64_t v12 = v15;
              uint64_t v13 = v17;
            }

            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }

            uint64_t v23 = *(void *)(a2 + 56);
            uint64_t v24 = (_OWORD *)(v23 + 32 * a1);
            uint64_t v25 = (_OWORD *)(v23 + 32 * v10);
            if (a1 != v10 || (a1 = v10, v24 >= v25 + 2))
            {
              __int128 v26 = v25[1];
              *uint64_t v24 = *v25;
              v24[1] = v26;
              a1 = v10;
            }

            goto LABEL_5;
          }
        }

        else if (v19 >= v35 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }

        uint64_t v8 = v14;
        uint64_t v12 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v13;
      }

      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
    }

    uint64_t v27 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v28 = *v27;
    uint64_t v29 = (-1LL << a1) - 1;
  }

  else
  {
    uint64_t v27 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v29 = *v27;
    uint64_t v28 = (-1LL << a1) - 1;
  }

  *uint64_t v27 = v29 & v28;
  uint64_t v30 = *(void *)(a2 + 16);
  BOOL v31 = __OFSUB__(v30, 1LL);
  uint64_t v32 = v30 - 1;
  if (v31)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v32;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_181C4C1E0(int64_t a1, uint64_t a2)
{
  uint64_t v30 = type metadata accessor for NWActorID();
  uint64_t v4 = *(void *)(v30 - 8);
  unint64_t result = MEMORY[0x1895F8858](v30);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    unint64_t result = sub_18264F114();
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v28 = (result + 1) & v11;
      uint64_t v29 = v11;
      uint64_t v12 = *(void *)(v4 + 72);
      do
      {
        uint64_t v13 = v12;
        int64_t v14 = v12 * v10;
        sub_181BC9248( *(void *)(a2 + 48) + v12 * v10,  (uint64_t)v7,  (uint64_t (*)(void))type metadata accessor for NWActorID);
        sub_18264F648();
        sub_18264EB44();
        sub_18264E688();
        sub_181BD67D4( (unint64_t *)&qword_18C58E6E0,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F48]);
        sub_18264E9E8();
        uint64_t v15 = sub_18264F684();
        unint64_t result = sub_181BC920C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for NWActorID);
        uint64_t v16 = v29;
        unint64_t v17 = v15 & v29;
        if (a1 >= (uint64_t)v28)
        {
          if (v17 < v28)
          {
            uint64_t v12 = v13;
          }

          else
          {
            uint64_t v12 = v13;
          }
        }

        else
        {
          uint64_t v12 = v13;
          if (v17 >= v28 || a1 >= (uint64_t)v17)
          {
LABEL_12:
            uint64_t v18 = *(void *)(a2 + 48);
            unint64_t result = v18 + v12 * a1;
            if (v12 * a1 < v14 || result >= v18 + v14 + v12)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
LABEL_17:
              uint64_t v16 = v29;
            }

            else if (v12 * a1 != v14)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_17;
            }

            uint64_t v19 = *(void *)(a2 + 56);
            uint64_t v20 = (void *)(v19 + 8 * a1);
            uint64_t v21 = (void *)(v19 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v20 >= v21 + 1))
            {
              *uint64_t v20 = *v21;
              a1 = v10;
            }
          }
        }

        unint64_t v10 = (v10 + 1) & v16;
      }

      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
    }

    uint64_t v22 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1LL << a1) - 1;
  }

  else
  {
    uint64_t v22 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1LL << a1) - 1;
  }

  *uint64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1LL);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_181C4C4AC(int64_t a1, uint64_t a2)
{
  uint64_t v30 = type metadata accessor for NWActorID();
  uint64_t v4 = *(void *)(v30 - 8);
  unint64_t result = MEMORY[0x1895F8858](v30);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    unint64_t result = sub_18264F114();
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v28 = (result + 1) & v11;
      uint64_t v29 = v11;
      uint64_t v12 = *(void *)(v4 + 72);
      do
      {
        uint64_t v13 = v12;
        int64_t v14 = v12 * v10;
        sub_181BC9248( *(void *)(a2 + 48) + v12 * v10,  (uint64_t)v7,  (uint64_t (*)(void))type metadata accessor for NWActorID);
        sub_18264F648();
        sub_18264EB44();
        sub_18264E688();
        sub_181BD67D4( (unint64_t *)&qword_18C58E6E0,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F48]);
        sub_18264E9E8();
        uint64_t v15 = sub_18264F684();
        unint64_t result = sub_181BC920C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for NWActorID);
        uint64_t v16 = v29;
        unint64_t v17 = v15 & v29;
        if (a1 >= (uint64_t)v28)
        {
          if (v17 < v28)
          {
            uint64_t v12 = v13;
          }

          else
          {
            uint64_t v12 = v13;
          }
        }

        else
        {
          uint64_t v12 = v13;
          if (v17 >= v28 || a1 >= (uint64_t)v17)
          {
LABEL_12:
            uint64_t v18 = *(void *)(a2 + 48);
            unint64_t result = v18 + v12 * a1;
            if (v12 * a1 < v14 || result >= v18 + v14 + v12)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
LABEL_17:
              uint64_t v16 = v29;
            }

            else if (v12 * a1 != v14)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_17;
            }

            uint64_t v19 = *(void *)(a2 + 56);
            uint64_t v20 = (_OWORD *)(v19 + 16 * a1);
            uint64_t v21 = (_OWORD *)(v19 + 16 * v10);
            if (a1 != v10 || (a1 = v10, v20 >= v21 + 1))
            {
              *uint64_t v20 = *v21;
              a1 = v10;
            }
          }
        }

        unint64_t v10 = (v10 + 1) & v16;
      }

      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
    }

    uint64_t v22 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1LL << a1) - 1;
  }

  else
  {
    uint64_t v22 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1LL << a1) - 1;
  }

  *uint64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1LL);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_181C4C778(int64_t a1, uint64_t a2)
{
  uint64_t v29 = type metadata accessor for NWActorID();
  uint64_t v4 = *(void *)(v29 - 8);
  unint64_t result = MEMORY[0x1895F8858](v29);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    unint64_t result = sub_18264F114();
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v28 = (result + 1) & v11;
      uint64_t v12 = *(void *)(v4 + 72);
      uint64_t v30 = v12;
      do
      {
        int64_t v13 = v12 * v10;
        sub_181BC9248( *(void *)(a2 + 48) + v12 * v10,  (uint64_t)v7,  (uint64_t (*)(void))type metadata accessor for NWActorID);
        sub_18264F648();
        sub_18264EB44();
        sub_18264E688();
        sub_181BD67D4( (unint64_t *)&qword_18C58E6E0,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F48]);
        sub_18264E9E8();
        uint64_t v14 = sub_18264F684();
        unint64_t result = sub_181BC920C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for NWActorID);
        unint64_t v15 = v14 & v11;
        if (a1 >= (uint64_t)v28)
        {
          if (v15 < v28)
          {
            uint64_t v12 = v30;
          }

          else
          {
            uint64_t v12 = v30;
          }
        }

        else
        {
          uint64_t v12 = v30;
          if (v15 >= v28 || a1 >= (uint64_t)v15)
          {
LABEL_12:
            if (v12 * a1 < v13
              || *(void *)(a2 + 48) + v12 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v13 + v12))
            {
              swift_arrayInitWithTakeFrontToBack();
            }

            else if (v12 * a1 != v13)
            {
              swift_arrayInitWithTakeBackToFront();
            }

            uint64_t v16 = *(void *)(a2 + 56);
            uint64_t v17 = *(void *)(*(void *)(type metadata accessor for NWActorDiscoveryMechanism(0LL) - 8) + 72LL);
            int64_t v18 = v17 * a1;
            unint64_t result = v16 + v17 * a1;
            int64_t v19 = v17 * v10;
            unint64_t v20 = v16 + v17 * v10 + v17;
            if (v18 < v19 || result >= v20)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
              a1 = v10;
              uint64_t v12 = v30;
            }

            else
            {
              a1 = v10;
              uint64_t v12 = v30;
              if (v18 != v19)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront();
                a1 = v10;
              }
            }
          }
        }

        unint64_t v10 = (v10 + 1) & v11;
      }

      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
    }

    uint64_t v22 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1LL << a1) - 1;
  }

  else
  {
    uint64_t v22 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1LL << a1) - 1;
  }

  *uint64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1LL);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_181C4CA84(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = sub_18264F114();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        sub_18264F648();
        swift_bridgeObjectRetain();
        sub_18264EB44();
        uint64_t v9 = sub_18264F684();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v10 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v11 = *(void *)(a2 + 48);
        uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
        int64_t v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1) {
          _OWORD *v12 = *v13;
        }
        uint64_t v14 = *(void *)(a2 + 56);
        uint64_t v15 = *(void *)(*(void *)(type metadata accessor for NWActorSystem.ServerRole() - 8) + 72LL);
        int64_t v16 = v15 * v3;
        unint64_t result = v14 + v15 * v3;
        int64_t v17 = v15 * v6;
        unint64_t v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }

        else
        {
          int64_t v3 = v6;
          if (v16 == v17) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }

        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }

      if (v10 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      goto LABEL_12;
    }

unint64_t sub_181C4CC80(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = sub_18264F114();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48);
        unint64_t v10 = (void *)(v9 + 8 * v6);
        unint64_t result = sub_18264F63C();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
        }

        else if (v11 < v8 && v3 < (uint64_t)v11)
        {
          goto LABEL_6;
        }

        uint64_t v14 = (void *)(v9 + 8 * v3);
        if (v3 != v6 || v14 >= v10 + 1) {
          void *v14 = *v10;
        }
        uint64_t v15 = *(void *)(a2 + 56);
        int64_t v17 = v16 * v3;
        unint64_t result = v15 + v16 * v3;
        int64_t v18 = v16 * v6;
        unint64_t v19 = v15 + v16 * v6 + v16;
        if (v17 < v18 || result >= v19)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }

        else
        {
          int64_t v3 = v6;
          if (v17 == v18) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }

        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    uint64_t v23 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v23 = *v21;
    uint64_t v22 = (-1LL << result) - 1;
  }

  *uint64_t v21 = v23 & v22;
  uint64_t v24 = *(void *)(a2 + 16);
  BOOL v25 = __OFSUB__(v24, 1LL);
  uint64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_181C4CE4C(int64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18264E688();
  uint64_t v37 = *(void *)(v4 - 8);
  unint64_t result = MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    unint64_t result = sub_18264F114();
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v36 = (result + 1) & v11;
      uint64_t v12 = *(void *)(v37 + 72);
      unint64_t v35 = *(void (**)(char *, unint64_t, uint64_t))(v37 + 16);
      uint64_t v13 = v11;
      do
      {
        uint64_t v14 = v8;
        uint64_t v15 = v12;
        int64_t v16 = v12 * v10;
        uint64_t v17 = v13;
        v35(v7, *(void *)(a2 + 48) + v12 * v10, v4);
        sub_181BD67D4( (unint64_t *)&qword_18C58E6E0,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F48]);
        uint64_t v18 = sub_18264E9DC();
        unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v7, v4);
        uint64_t v13 = v17;
        unint64_t v19 = v18 & v17;
        if (a1 >= (uint64_t)v36)
        {
          if (v19 >= v36 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            uint64_t v8 = v14;
            if (v15 * a1 < v16
              || *(void *)(a2 + 48) + v15 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v16 + v15))
            {
              swift_arrayInitWithTakeFrontToBack();
            }

            else if (v15 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront();
            }

            uint64_t v22 = *(void *)(a2 + 56);
            uint64_t v23 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C58E780) - 8) + 72LL);
            int64_t v24 = v23 * a1;
            unint64_t result = v22 + v23 * a1;
            int64_t v25 = v23 * v10;
            unint64_t v26 = v22 + v23 * v10 + v23;
            if (v24 < v25 || result >= v26)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
              a1 = v10;
              uint64_t v13 = v17;
            }

            else
            {
              a1 = v10;
              uint64_t v13 = v17;
              if (v24 != v25)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront();
                uint64_t v13 = v17;
                a1 = v10;
              }
            }

            goto LABEL_5;
          }
        }

        else if (v19 >= v36 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }

        uint64_t v8 = v14;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v13;
        uint64_t v12 = v15;
      }

      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
    }

    unint64_t v28 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v29 = *v28;
    uint64_t v30 = (-1LL << a1) - 1;
  }

  else
  {
    unint64_t v28 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v28;
    uint64_t v29 = (-1LL << a1) - 1;
  }

  uint64_t *v28 = v30 & v29;
  uint64_t v31 = *(void *)(a2 + 16);
  BOOL v32 = __OFSUB__(v31, 1LL);
  uint64_t v33 = v31 - 1;
  if (v32)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v33;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_181C4D124(int64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18264E688();
  uint64_t v35 = *(void *)(v4 - 8);
  unint64_t result = MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    unint64_t result = sub_18264F114();
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v34 = (result + 1) & v11;
      uint64_t v12 = *(void *)(v35 + 72);
      uint64_t v33 = *(void (**)(char *, unint64_t, uint64_t))(v35 + 16);
      uint64_t v13 = v11;
      do
      {
        uint64_t v14 = v8;
        uint64_t v15 = v12;
        int64_t v16 = v12 * v10;
        uint64_t v17 = v13;
        v33(v7, *(void *)(a2 + 48) + v12 * v10, v4);
        sub_181BD67D4( (unint64_t *)&qword_18C58E6E0,  (uint64_t (*)(uint64_t))MEMORY[0x189606F20],  MEMORY[0x189606F48]);
        uint64_t v18 = sub_18264E9DC();
        unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v7, v4);
        uint64_t v13 = v17;
        unint64_t v19 = v18 & v17;
        if (a1 >= (uint64_t)v34)
        {
          if (v19 >= v34 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            uint64_t v22 = *(void *)(a2 + 48);
            unint64_t result = v22 + v15 * a1;
            uint64_t v8 = v14;
            if (v15 * a1 < v16 || (uint64_t v12 = v15, result >= v22 + v16 + v15))
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              uint64_t v13 = v17;
              uint64_t v12 = v15;
            }

            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }

            uint64_t v23 = *(void *)(a2 + 56);
            int64_t v24 = (void *)(v23 + 8 * a1);
            int64_t v25 = (void *)(v23 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v24 >= v25 + 1))
            {
              *int64_t v24 = *v25;
              a1 = v10;
            }

            goto LABEL_5;
          }
        }

        else if (v19 >= v34 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }

        uint64_t v8 = v14;
        uint64_t v12 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v13;
      }

      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
    }

    unint64_t v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v27 = *v26;
    uint64_t v28 = (-1LL << a1) - 1;
  }

  else
  {
    unint64_t v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v28 = *v26;
    uint64_t v27 = (-1LL << a1) - 1;
  }

  *unint64_t v26 = v28 & v27;
  uint64_t v29 = *(void *)(a2 + 16);
  BOOL v30 = __OFSUB__(v29, 1LL);
  uint64_t v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_181C4D3C4(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = sub_18264F114();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_18264F648();
        swift_bridgeObjectRetain();
        sub_18264EB44();
        uint64_t v9 = sub_18264F684();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }

        else if (v10 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            _OWORD *v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          int64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }

unint64_t sub_181C4D598(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    unint64_t __buf = 0LL;
    arc4random_buf(&__buf, 8uLL);
    unint64_t result = (__buf * (unsigned __int128)v1) >> 64;
    if (__buf * v1 < v1)
    {
      unint64_t v2 = -(uint64_t)v1 % v1;
      if (v2 > __buf * v1)
      {
        do
        {
          unint64_t __buf = 0LL;
          arc4random_buf(&__buf, 8uLL);
        }

        while (v2 > __buf * v1);
        return (__buf * (unsigned __int128)v1) >> 64;
      }
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

void *sub_181C4D620@<X0>(void *(*a1)(uint64_t *__return_ptr)@<X1>, _BYTE *a2@<X8>)
{
  unint64_t result = a1(&v5);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_181C4D65C()
{
  return swift_deallocObject();
}

uint64_t sub_181C4D680@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_sendingFileTransferSession);
  return swift_retain();
}

uint64_t sub_181C4D694(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v34 = a4;
  uint64_t v35 = a2;
  int v31 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58D5B0);
  uint64_t v6 = MEMORY[0x1895F8858](v5);
  v29[3] = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  v29[2] = (char *)v29 - v8;
  uint64_t v9 = sub_18264E688();
  uint64_t v32 = *(void *)(v9 - 8);
  uint64_t v33 = v9;
  MEMORY[0x1895F8858](v9);
  v29[1] = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C0D0);
  uint64_t v30 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x1895F8858](v11);
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)v29 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C3E0);
  MEMORY[0x1895F8858](v15);
  uint64_t v17 = (char *)v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for CancelRemoteCall(0LL);
  MEMORY[0x1895F8858](v18);
  uint64_t v20 = (char *)v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_181BC9248(a1, (uint64_t)v20, type metadata accessor for CancelRemoteCall);
  sub_18264E40C();
  swift_allocObject();
  sub_18264E400();
  sub_181BD67D4(&qword_18C58D690, type metadata accessor for CancelRemoteCall, (uint64_t)&unk_182664684);
  uint64_t v21 = sub_18264E3E8();
  unint64_t v23 = v22;
  swift_release();
  uint64_t v24 = sub_18264EDCC();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56LL))(v17, 1LL, 1LL, v24);
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  sub_181BE48BC(v35, (uint64_t)v14, &qword_18C58C0D0);
  unint64_t v26 = (*(unsigned __int8 *)(v30 + 80) + 58LL) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = 0LL;
  *(void *)(v27 + 24) = 0LL;
  *(void *)(v27 + 32) = v25;
  *(void *)(v27 + 40) = v21;
  *(void *)(v27 + 48) = v23;
  *(_BYTE *)(v27 + 56) = v31;
  *(_BYTE *)(v27 + 57) = 0;
  sub_181BE625C((uint64_t)v14, v27 + v26, &qword_18C58C0D0);
  sub_181BCD4AC(v21, v23);
  sub_181C3B844((uint64_t)v17, (uint64_t)&unk_18C58D698, v27);
  swift_release();
  sub_181BCD4F0(v21, v23);
  return sub_181BC920C((uint64_t)v20, type metadata accessor for CancelRemoteCall);
}

uint64_t sub_181C4DB58( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v37 = a7;
  uint64_t v38 = a5;
  int v34 = a6;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58D5B0);
  uint64_t v12 = MEMORY[0x1895F8858](v11);
  v33[3] = (char *)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  v33[2] = (char *)v33 - v14;
  uint64_t v15 = sub_18264E688();
  uint64_t v35 = *(void *)(v15 - 8);
  uint64_t v36 = v15;
  MEMORY[0x1895F8858](v15);
  v33[1] = (char *)v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C0D0);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x1895F8858](v17);
  MEMORY[0x1895F8858](v19);
  uint64_t v21 = (char *)v33 - v20;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C3E0);
  MEMORY[0x1895F8858](v22);
  uint64_t v24 = (char *)v33 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v43 = a1;
  unint64_t v44 = a2;
  uint64_t v45 = a3;
  unint64_t v46 = a4;
  sub_18264E40C();
  swift_allocObject();
  uint64_t v39 = a1;
  unint64_t v40 = a2;
  sub_181BCD4AC(a1, a2);
  uint64_t v41 = a3;
  unint64_t v42 = a4;
  sub_181BCD4AC(a3, a4);
  sub_18264E400();
  sub_181C4F03C();
  uint64_t v25 = sub_18264E3E8();
  unint64_t v27 = v26;
  swift_release();
  uint64_t v28 = sub_18264EDCC();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL))(v24, 1LL, 1LL, v28);
  uint64_t v29 = swift_allocObject();
  swift_weakInit();
  sub_181BE48BC(v38, (uint64_t)v21, &qword_18C58C0D0);
  unint64_t v30 = (*(unsigned __int8 *)(v18 + 80) + 58LL) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = 0LL;
  *(void *)(v31 + 24) = 0LL;
  *(void *)(v31 + 32) = v29;
  *(void *)(v31 + 40) = v25;
  *(void *)(v31 + 48) = v27;
  *(_BYTE *)(v31 + 56) = v34;
  *(_BYTE *)(v31 + 57) = 0;
  sub_181BE625C((uint64_t)v21, v31 + v30, &qword_18C58C0D0);
  sub_181BCD4AC(v25, v27);
  sub_181C3B844((uint64_t)v24, (uint64_t)&unk_18C58D730, v31);
  swift_release();
  sub_181BCD4F0(v25, v27);
  sub_181BCD4F0(v39, v40);
  return sub_181BCD4F0(v41, v42);
}

void *sub_181C4DFE8(__int128 *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v32 = a4;
  uint64_t v33 = a2;
  int v29 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58D5B0);
  uint64_t v6 = MEMORY[0x1895F8858](v5);
  void v28[2] = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  v28[1] = (char *)v28 - v8;
  uint64_t v9 = sub_18264E688();
  uint64_t v30 = *(void *)(v9 - 8);
  uint64_t v31 = v9;
  MEMORY[0x1895F8858](v9);
  v28[0] = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C0D0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v11);
  MEMORY[0x1895F8858](v13);
  uint64_t v15 = (char *)v28 - v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C3E0);
  MEMORY[0x1895F8858](v16);
  uint64_t v18 = (char *)v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v19 = a1[1];
  __int128 v35 = *a1;
  __int128 v36 = v19;
  __int128 v37 = a1[2];
  sub_18264E40C();
  swift_allocObject();
  int v34 = a1;
  sub_181C4E474(a1);
  sub_18264E400();
  sub_181C4E4CC();
  uint64_t v20 = sub_18264E3E8();
  unint64_t v22 = v21;
  swift_release();
  uint64_t v23 = sub_18264EDCC();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v18, 1LL, 1LL, v23);
  uint64_t v24 = swift_allocObject();
  swift_weakInit();
  sub_181BE48BC(v33, (uint64_t)v15, &qword_18C58C0D0);
  unint64_t v25 = (*(unsigned __int8 *)(v12 + 80) + 58LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = 0LL;
  *(void *)(v26 + 24) = 0LL;
  *(void *)(v26 + 32) = v24;
  *(void *)(v26 + 40) = v20;
  *(void *)(v26 + 48) = v22;
  *(_BYTE *)(v26 + 56) = v29;
  *(_BYTE *)(v26 + 57) = 0;
  sub_181BE625C((uint64_t)v15, v26 + v25, &qword_18C58C0D0);
  sub_181BCD4AC(v20, v22);
  sub_181C3B844((uint64_t)v18, (uint64_t)&unk_18C58D5D8, v26);
  swift_release();
  sub_181BCD4F0(v20, v22);
  return sub_181C4E510(v34);
}

uint64_t sub_181C4E458@<X0>(char *a1@<X8>)
{
  return sub_181C4A3D0(v1[2], v1[3], v1[4], a1);
}

void *sub_181C4E474(void *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v5 = a1[5];
  swift_bridgeObjectRetain();
  sub_181BCD4AC(v2, v3);
  sub_181BCD4AC(v4, v5);
  return a1;
}

unint64_t sub_181C4E4CC()
{
  unint64_t result = qword_18C58D5C0;
  if (!qword_18C58D5C0)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_18265F0DC, &_s19FileTransferRequestVN);
    atomic_store(result, (unint64_t *)&qword_18C58D5C0);
  }

  return result;
}

void *sub_181C4E510(void *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v5 = a1[5];
  swift_bridgeObjectRelease();
  sub_181BCD4F0(v2, v3);
  sub_181BCD4F0(v4, v5);
  return a1;
}

uint64_t sub_181C4E568()
{
  return swift_deallocObject();
}

uint64_t sub_181C4E590(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  char v9 = *(_BYTE *)(v1 + 57);
  char v10 = *(_BYTE *)(v1 + 56);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  void *v11 = v2;
  v11[1] = sub_181BC92FC;
  return sub_181C403E4(a1, v4, v5, v6, v7, v8, v10, v9);
}

uint64_t sub_181C4E654(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_181BC92FC;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_18C58D5E0 + dword_18C58D5E0))(a1, v4);
}

uint64_t sub_181C4E6C4(uint64_t a1)
{
  return sub_181C41C54( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  *(unsigned __int8 *)(v1 + 56));
}

uint64_t sub_181C4E6D8()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A1F0);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = ((v3 + *(void *)(v2 + 64)) & 0xFFFFFFFFFFFFFFF8LL) + v0;
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  sub_181BCD4F0(*(void *)(v4 + 8), *(void *)(v4 + 16));
  return swift_deallocObject();
}

uint64_t sub_181C4E774(unsigned int *a1)
{
  uint64_t v3 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C58A1F0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_181C41DA8( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  v1 + v4,  *(unsigned __int8 *)(v1 + v4 + *(void *)(v3 + 64)),  *(void *)(((v4 + *(void *)(v3 + 64)) & 0xFFFFFFFFFFFFFFF8LL) + v1 + 8),  *(void *)(((v4 + *(void *)(v3 + 64)) & 0xFFFFFFFFFFFFFFF8LL) + v1 + 16));
}

uint64_t sub_181C4E7D0()
{
  return swift_deallocObject();
}

uint64_t sub_181C4E7F4()
{
  return sub_181C4A4A0();
}

uint64_t sub_181C4E800()
{
  return sub_181C4A558();
}

uint64_t sub_181C4E808@<X0>(uint64_t *a1@<X8>)
{
  return sub_181C4A64C(*(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

void sub_181C4E824()
{
  if (qword_18C58B1C8 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_18264E934();
  __swift_project_value_buffer(v0, (uint64_t)qword_18C58D4B0);
  uint64_t v1 = (os_log_s *)sub_18264E91C();
  os_log_type_t v2 = sub_18264F018();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_181A5C000, v1, v2, "Received terminate process message", v3, 2u);
    MEMORY[0x186E12168](v3, -1LL, -1LL);
  }

  if (qword_18C58B1E8 != -1) {
    swift_once();
  }
  if (byte_18C58D4F0 == 1)
  {
    double v4 = COERCE_DOUBLE(sub_181C3A954());
    char v6 = v5;
    oslog = (os_log_s *)sub_18264E91C();
    if ((v6 & 1) == 0 && v4 > 0.0)
    {
      os_log_type_t v10 = sub_18264F018();
      if (os_log_type_enabled(oslog, v10))
      {
        uint64_t v11 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v11 = 0;
        _os_log_impl(&dword_181A5C000, oslog, v10, "Terminating process", v11, 2u);
        MEMORY[0x186E12168](v11, -1LL, -1LL);
      }

      exit(1);
    }

    os_log_type_t v7 = sub_18264F000();
    if (os_log_type_enabled(oslog, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      char v9 = "Terminate process frequency not set";
LABEL_14:
      _os_log_impl(&dword_181A5C000, oslog, v7, v9, v8, 2u);
      MEMORY[0x186E12168](v8, -1LL, -1LL);
    }
  }

  else
  {
    oslog = (os_log_s *)sub_18264E91C();
    os_log_type_t v7 = sub_18264F000();
    if (os_log_type_enabled(oslog, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      char v9 = "Terminate process not supported";
      goto LABEL_14;
    }
  }
}

uint64_t sub_181C4EA74(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (v6)
  {
    for (uint64_t i = 0LL; ; ++i)
    {
      if ((a1 & 0xC000000000000001LL) != 0) {
        MEMORY[0x186E0ED48](i, a1);
      }
      else {
        swift_retain();
      }
      if (sub_18264E514() == a2 && v8 == a3)
      {
        swift_release();
        swift_bridgeObjectRelease();
        return i;
      }

      char v10 = sub_18264F4EC();
      swift_release();
      swift_bridgeObjectRelease();
      if ((v10 & 1) != 0) {
        return i;
      }
      uint64_t v11 = i + 1;
      if (__OFADD__(i, 1LL)) {
        break;
      }
      if (v11 == v6) {
        return 0LL;
      }
    }

    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v6 = sub_18264F330();
    swift_bridgeObjectRelease();
  }

  return 0LL;
}

uint64_t sub_181C4EBD4()
{
  if (*(_BYTE *)(v0 + 16)) {
    uint64_t v1 = &OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_receivingFileTransferSession;
  }
  else {
    uint64_t v1 = &OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_sendingFileTransferSession;
  }
  *(void *)(*(void *)(v0 + 24) + *v1) = 0LL;
  return swift_release();
}

uint64_t sub_181C4EC24()
{
  return sub_181C4B730(*(void *)(v0 + 16));
}

uint64_t sub_181C4EC3C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  char v12 = *(_BYTE *)(v1 + 57);
  char v9 = *(_BYTE *)(v1 + 56);
  char v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *char v10 = v2;
  v10[1] = sub_181BC92FC;
  return sub_181C3CA4C(a1, v4, v5, v6, v7, v8, v9, v12);
}

uint64_t sub_181C4ECE8()
{
  return sub_181C3D8A4(v0[2], v0[3], v0[4]);
}

uint64_t sub_181C4ECF8()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_181BC92FC;
  v3[2] = v2;
  return swift_task_switch();
}

uint64_t sub_181C4ED5C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  char v9 = *(_BYTE *)(v1 + 57);
  char v10 = *(_BYTE *)(v1 + 56);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  void *v11 = v2;
  v11[1] = sub_181BC63C4;
  return sub_181C403E4(a1, v4, v5, v6, v7, v8, v10, v9);
}

uint64_t sub_181C4EE20(uint64_t a1)
{
  return sub_181C3D4B8( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  *(unsigned __int8 *)(v1 + 56),  *(unsigned __int8 *)(v1 + 57));
}

uint64_t sub_181C4EE58(uint64_t a1)
{
  return sub_181C3ECCC( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(uint64_t (**)(uint64_t))(v1 + 32),  *(void *)(v1 + 40));
}

void sub_181C4EE64(void *a1, unint64_t a2, unint64_t a3)
{
  switch(a3 >> 60)
  {
    case 2uLL:
      uint64_t v3 = a3 & 0xFFFFFFFFFFFFFFFLL;
      sub_181BCD4F0((uint64_t)a1, a2);
      a1 = (void *)v3;
      goto LABEL_4;
    case 3uLL:
LABEL_4:

      break;
    case 4uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
      swift_bridgeObjectRelease();
      break;
    default:
      return;
  }

uint64_t sub_181C4EEBC()
{
  return sub_181C3F38C(v0[2], v0[3], v0[4]);
}

uint64_t sub_181C4EEE0()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_181BC92FC;
  void v3[4] = v2;
  return swift_task_switch();
}

uint64_t sub_181C4EF40()
{
  return sub_181C3DEFC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_181C4EF58()
{
  *(void *)(*(void *)(v0 + 16)
            + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_connectionEstablishedActivity) = *(void *)(v0 + 24);
  swift_release();
  return swift_retain();
}

void sub_181C4EF98(unsigned int *a1)
{
}

void sub_181C4EFA0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
}

uint64_t sub_181C4EFA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_181C696F4(a1, a2, a3, a4, *(void *)(v4 + 16), *(void *)(v4 + 24));
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

uint64_t sub_181C4EFC8()
{
  return sub_181C44804(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

unint64_t sub_181C4EFE0()
{
  unint64_t result = qword_18C58D720;
  if (!qword_18C58D720)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_18265F0B4, &_s19FileTransferRequestVN);
    atomic_store(result, (unint64_t *)&qword_18C58D720);
  }

  return result;
}

uint64_t sub_181C4F024()
{
  return sub_181C496BC(*(void *)(v0 + 16), *(uint64_t **)(v0 + 24));
}

unint64_t sub_181C4F03C()
{
  unint64_t result = qword_18C58D728;
  if (!qword_18C58D728)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_18265F08C, &_s20FileTransferResponseVN);
    atomic_store(result, (unint64_t *)&qword_18C58D728);
  }

  return result;
}

uint64_t objectdestroy_6Tm()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C58C0D0) - 8) + 80LL);
  uint64_t v2 = (v1 + 58) & ~v1;
  swift_unknownObjectRelease();
  swift_release();
  sub_181BCD4F0(*(void *)(v0 + 40), *(void *)(v0 + 48));
  uint64_t v3 = sub_18264E688();
  uint64_t v4 = *(void *)(v3 - 8);
  return swift_deallocObject();
}

unint64_t sub_181C4F134()
{
  unint64_t result = qword_18C58D738;
  if (!qword_18C58D738)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_18265F064, &_s20FileTransferResponseVN);
    atomic_store(result, (unint64_t *)&qword_18C58D738);
  }

  return result;
}

uint64_t sub_181C4F178@<X0>(void *a1@<X8>)
{
  if (*(_BYTE *)(v1 + 16)) {
    uint64_t v2 = &OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_receivingFileTransferSession;
  }
  else {
    uint64_t v2 = &OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_sendingFileTransferSession;
  }
  *a1 = *(void *)(*(void *)(v1 + 24) + *v2);
  return swift_retain();
}

uint64_t sub_181C4F1A8@<X0>(void *a1@<X8>)
{
  return sub_181C4A014(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_181C4F1C0@<X0>(uint64_t a1@<X8>)
{
  return sub_181C47B20(v1, a1);
}

uint64_t sub_181C4F1D8()
{
  return sub_181C47C1C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned __int8 *)(v0 + 32));
}

uint64_t sub_181C4F1F4()
{
  uint64_t v1 = type metadata accessor for RemoteCallEnvelope(0LL);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL);
  uint64_t v3 = (v2 + 32) & ~v2;
  swift_unknownObjectRelease();
  uint64_t v4 = v0 + v3;
  uint64_t v5 = sub_18264E688();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v6(v4, v5);
  uint64_t v7 = v4 + *(int *)(v1 + 20);
  swift_bridgeObjectRelease();
  uint64_t v8 = type metadata accessor for NWActorID();
  v6(v7 + *(int *)(v8 + 20), v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_181C4F2F0(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for RemoteCallEnvelope(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = v5 + *(void *)(v4 + 64);
  uint64_t v7 = (v6 & 0xFFFFFFFFFFFFF8LL) + v1;
  uint64_t v8 = *(void *)(v1 + 16);
  uint64_t v9 = *(void *)(v1 + 24);
  uint64_t v10 = v1 + v5;
  char v11 = *(_BYTE *)(v1 + v6);
  char v12 = *(void **)(v7 + 8);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  void *v13 = v2;
  v13[1] = sub_181BC92FC;
  return sub_181C47E40(a1, v8, v9, v10, v11, v12);
}

void sub_181C4F39C(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_supportsCustomSerialization);
}

uint64_t sub_181C4F3B0(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  char v5 = *(_BYTE *)(v1 + 24);
  char v6 = *(_BYTE *)(v1 + 25);
  uint64_t v7 = *(void *)(v1 + 32);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_181BC63C4;
  return sub_181C48F30(a1, v4, v5, v6, v7);
}

uint64_t sub_181C4F430( uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, unsigned __int8 a5)
{
  if ((~a4 & 0x3000000000000000LL) != 0 || a5 != 255) {
    return sub_181C36D48(result, a2, a3, a4, a5 & 1);
  }
  return result;
}

uint64_t sub_181C4F454(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58D5A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_181C4F49C@<X0>(uint64_t a1@<X8>)
{
  return sub_181C49548(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_181C4F4B4( uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, unsigned __int8 a5)
{
  if ((~a4 & 0x3000000000000000LL) != 0 || a5 != 255) {
    return sub_181C36CD8(result, a2, a3, a4, a5 & 1);
  }
  return result;
}

uint64_t sub_181C4F4D8(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }

  return result;
}

uint64_t dynamic_cast_existential_2_conditional(uint64_t a1)
{
  uint64_t result = swift_conformsToProtocol2();
  if (result)
  {
    if (swift_conformsToProtocol2()) {
      return a1;
    }
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t __swift_deallocate_boxed_opaque_existential_1Tm(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8LL) + 80LL) & 0x20000) != 0) {
    JUMPOUT(0x186E12168LL);
  }
  return result;
}

void sub_181C4F5B0(_BYTE *a1@<X8>)
{
  char v2 = *(_BYTE *)(v1 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_isDisconnected);
  *(_BYTE *)(v1 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_isDisconnected) = 1;
  *a1 = v2;
}

uint64_t sub_181C4F5CC@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_interruptionHandlers);
  uint64_t result = swift_beginAccess();
  uint64_t v5 = *v3;
  uint64_t *v3 = MEMORY[0x18961AFE8];
  *a1 = v5;
  return result;
}

void sub_181C4F624(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_connectionEstablishedActivity);
  *(void *)(v1 + OBJC_IVAR____TtCC7Network13NWActorSystem15ActorConnection_connectionEstablishedActivity) = 0LL;
  *a1 = v2;
}

uint64_t sub_181C4F63C@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
  return swift_retain();
}

uint64_t sub_181C4F648@<X0>(void *a1@<X8>)
{
  return sub_181C3C354(v1, a1);
}

uint64_t sub_181C4F660()
{
  return sub_181C3C268(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_181C4F678(_BYTE *a1@<X8>)
{
}

uint64_t sub_181C4F694@<X0>(uint64_t a1@<X8>)
{
  return sub_181C4F49C(a1);
}

uint64_t sub_181C4F6A8@<X0>(void *a1@<X8>)
{
  return sub_181C4F1A8(a1);
}

uint64_t sub_181C4F6BC()
{
  return sub_181C4EF40();
}

uint64_t sub_181C4F6D0()
{
  nw_protocol_definition_t v0 = nw_protocol_copy_udp_definition();
  type metadata accessor for NWProtocolDefinition();
  uint64_t v1 = (void *)swift_allocObject();
  v1[4] = v0;
  id v2 = objc_msgSend((id)swift_unknownObjectRetain(), sel_description);
  uint64_t v3 = sub_18264EA48();
  uint64_t v5 = v4;

  uint64_t result = swift_unknownObjectRelease();
  v1[2] = v3;
  v1[3] = v5;
  qword_18C58D7A0 = (uint64_t)v1;
  return result;
}

uint64_t static NWProtocolUDP.definition.getter()
{
  if (qword_18C58B1F8 != -1) {
    swift_once();
  }
  return swift_retain();
}

void sub_181C4F7A0(char a1)
{
}

BOOL sub_181C4F7B0()
{
  return nw_udp_options_get_prefer_no_checksum(*(void **)(v0 + 16));
}

void (*sub_181C4F7C8(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = nw_udp_options_get_prefer_no_checksum(v3);
  return sub_181C4F800;
}

void sub_181C4F800(uint64_t a1)
{
}

BOOL sub_181C4F810(nw_protocol_options *a1)
{
  uint64_t v1 = nw_protocol_options_copy_definition(a1);
  id v2 = nw_protocol_copy_udp_definition();
  BOOL is_equal = nw_protocol_definition_is_equal(v1, v2);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return is_equal;
}

uint64_t NWProtocolUDP.Options.__allocating_init()()
{
  return sub_181C4F8CC((uint64_t (*)(void))nw_udp_create_options);
}

uint64_t NWProtocolUDP.Options.init()()
{
  *(void *)(v0 + 16) = nw_udp_create_options();
  return v0;
}

uint64_t NWProtocolUDP.Options.deinit()
{
  return v0;
}

BOOL sub_181C4F8AC(nw_protocol_metadata *a1)
{
  return nw_protocol_metadata_is_udp(a1);
}

uint64_t NWProtocolUDP.Metadata.__allocating_init()()
{
  return sub_181C4F8CC((uint64_t (*)(void))nw_udp_create_metadata);
}

uint64_t sub_181C4F8CC(uint64_t (*a1)(void))
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = a1();
  return v2;
}

uint64_t NWProtocolUDP.Metadata.init()()
{
  *(void *)(v0 + 16) = nw_udp_create_metadata();
  return v0;
}

uint64_t NWProtocolUDP.deinit()
{
  return v0;
}

uint64_t NWProtocolUDP.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

BOOL sub_181C4F940@<W0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = nw_udp_options_get_prefer_no_checksum(*(void **)(*(void *)a1 + 16LL));
  *a2 = result;
  return result;
}

void sub_181C4F96C(BOOL *a1, uint64_t a2)
{
}

uint64_t type metadata accessor for NWProtocolUDP()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for NWProtocolUDP.Options()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolUDP.Options()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWProtocolUDP.Options.preferNoChecksum.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104LL))();
}

uint64_t dispatch thunk of NWProtocolUDP.Options.preferNoChecksum.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112LL))();
}

uint64_t dispatch thunk of NWProtocolUDP.Options.preferNoChecksum.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120LL))();
}

uint64_t dispatch thunk of NWProtocolUDP.Options.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t type metadata accessor for NWProtocolUDP.Metadata()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolUDP.Metadata()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWProtocolUDP.Metadata.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t sub_181C4FA30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 32LL))(a3, a1);
}

uint64_t sub_181C4FA48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56LL))(a3, 0LL, 1LL, a2);
}

uint64_t sub_181C4FA88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t NWDomainSequence.ScopedDomain.domain.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NWDomainSequence.ScopedDomain.interface.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  *a1 = v2;
  return sub_181BC6890(v2);
}

uint64_t NWDomainSequence.ScopedDomain.hash(into:)()
{
  uint64_t v1 = *(nw_interface **)(v0 + 16);
  swift_bridgeObjectRetain();
  sub_18264EB44();
  swift_bridgeObjectRelease();
  sub_18264F660();
  if (v1)
  {
    nw_interface_get_index(v1);
    sub_18264F654();
    uint64_t v3 = (nw_interface *)swift_unknownObjectRetain();
    nw_interface_get_name(v3);
    sub_18264EB80();
  }

  else
  {
    sub_18264F654();
  }

  sub_181BC69C8((uint64_t)v1);
  sub_18264EB44();
  return swift_bridgeObjectRelease();
}

uint64_t NWDomainSequence.ScopedDomain.hashValue.getter()
{
  uint64_t v1 = *(nw_interface **)(v0 + 16);
  sub_18264F648();
  sub_18264EB44();
  if (v1 == (nw_interface *)1)
  {
    sub_18264F660();
  }

  else
  {
    sub_18264F660();
    if (v1)
    {
      nw_interface_get_index(v1);
      sub_18264F654();
      uint64_t v2 = (nw_interface *)swift_unknownObjectRetain();
      nw_interface_get_name(v2);
      sub_18264EB80();
    }

    else
    {
      sub_18264F654();
    }

    sub_181BC69C8((uint64_t)v1);
    sub_18264EB44();
    swift_bridgeObjectRelease();
  }

  return sub_18264F684();
}

uint64_t sub_181C4FCC0()
{
  uint64_t v1 = *(nw_interface **)(v0 + 16);
  sub_18264EB44();
  sub_18264F660();
  if (v1)
  {
    nw_interface_get_index(v1);
    sub_18264F654();
    uint64_t v3 = (nw_interface *)swift_unknownObjectRetain();
    nw_interface_get_name(v3);
    sub_18264EB80();
  }

  else
  {
    sub_18264F654();
  }

  sub_181BC69C8((uint64_t)v1);
  sub_18264EB44();
  return swift_bridgeObjectRelease();
}

uint64_t sub_181C4FD9C()
{
  uint64_t v1 = *(nw_interface **)(v0 + 16);
  sub_18264F648();
  sub_18264EB44();
  if (v1 == (nw_interface *)1)
  {
    sub_18264F660();
  }

  else
  {
    sub_18264F660();
    if (v1)
    {
      nw_interface_get_index(v1);
      sub_18264F654();
      uint64_t v2 = (nw_interface *)swift_unknownObjectRetain();
      nw_interface_get_name(v2);
      sub_18264EB80();
    }

    else
    {
      sub_18264F654();
    }

    sub_181BC69C8((uint64_t)v1);
    sub_18264EB44();
    swift_bridgeObjectRelease();
  }

  return sub_18264F684();
}

uint64_t NWDomainSequence.Event.type.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  char v5 = *(_BYTE *)(v1 + 24);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  return sub_181C507CC(v2, v3, v4);
}

uint64_t NWDomainSequence.Event.primary.getter()
{
  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t NWDomainSequence.Event.moreComing.getter()
{
  return *(unsigned __int8 *)(v0 + 26);
}

void sub_181C4FEB0(uint64_t a1, DNSServiceFlags a2, nw_interface *a3)
{
  sdRef[1] = *(DNSServiceRef *)MEMORY[0x1895F89C0];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D990);
  MEMORY[0x1895F8858](v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL), a1, v6);
  uint64_t v9 = (void *)sub_18264F5AC();
  sdRef[0] = 0LL;
  if (a3 == (nw_interface *)1)
  {
    uint32_t index = 0;
  }

  else
  {
    if (!a3)
    {
      sub_181BC69C8(0LL);
      sub_18264F318();
      __break(1u);
      return;
    }

    uint32_t index = nw_interface_get_index(a3);
  }

  DNSServiceErrorType v11 = DNSServiceEnumerateDomains(sdRef, a2, index, (DNSServiceDomainEnumReply)sub_181C500BC, v9);
  char v12 = sdRef[0];
  if (sdRef[0])
  {
    id v13 = nw_context_copy_implicit_context();
    BOOL v14 = nw_context_copy_workloop(v13);
    swift_unknownObjectRelease();
    uint64_t v15 = (dispatch_queue_s *)(id)v14;
    DNSServiceSetDispatchQueue(v12, v15);
    uint64_t v16 = (void *)swift_allocObject();
    v16[2] = v15;
    void v16[3] = v12;
    void v16[4] = v9;
    sub_18264EEB0();
  }

  else
  {
    DNSServiceErrorType v17 = v11;
    swift_unknownObjectRelease();
    sub_181BBE220();
    uint64_t v18 = swift_allocError();
    *(_DWORD *)uint64_t v19 = v17;
    *(_BYTE *)(v19 + 4) = 1;
    v20[1] = v18;
    sub_18264EED4();
  }

uint64_t sub_181C500BC(uint64_t a1, int a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6)
{
  return sub_181C51810(a2, a3, a4, a5, a6);
}

uint64_t sub_181C500D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_18264E964();
  uint64_t v7 = (uint64_t (*)(uint64_t))MEMORY[0x18961B6A0];
  uint64_t v8 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_18264E97C();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  BOOL v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a3;
  *(void *)(v15 + 24) = a4;
  aBlock[4] = sub_181C517D4;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_181C32D2C;
  aBlock[3] = &block_descriptor_12;
  uint64_t v16 = _Block_copy(aBlock);
  sub_18264E970();
  v18[1] = MEMORY[0x18961AFE8];
  sub_181BD67D4((unint64_t *)&qword_18C45E550, v7, MEMORY[0x18961B6B8]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C45E560);
  sub_181C18498();
  sub_18264F108();
  MEMORY[0x186E0EBEC](0LL, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v6);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

uint64_t NWDomainSequence.DomainIterator.next()()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D7B0);
  void *v1 = v0;
  v1[1] = sub_181BC63C4;
  return sub_18264EF04();
}

uint64_t sub_181C5030C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D7B0);
  void *v1 = v0;
  v1[1] = sub_181BC92FC;
  return sub_18264EF04();
}

uint64_t sub_181C50378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[3] = a2;
  char v5 = (void *)swift_task_alloc();
  v4[6] = v5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D7B0);
  *char v5 = v4;
  v5[1] = sub_181C503EC;
  return sub_18264EF04();
}

uint64_t sub_181C503EC()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (!v0) {
    return (*(uint64_t (**)(void))(v2 + 8))();
  }
  if (*(void *)(v2 + 24))
  {
    swift_getObjectType();
    sub_18264ED6C();
  }

  return swift_task_switch();
}

uint64_t sub_181C50484()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void **)(v0 + 40);
  *(void *)(v0 + 16) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D6A0);
  swift_willThrowTypedImpl();
  *uint64_t v2 = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NWDomainSequence.makeAsyncIterator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D7B0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D7B8);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v2, v8);
  sub_18264EE20();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(a1, v7, v4);
  return sub_181C507F4(v2);
}

uint64_t sub_181C505EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D7B0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D7B8);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v2, v8);
  sub_18264EE20();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(a1, v7, v4);
  return sub_181C507F4(v2);
}

BOOL _s7Network16NWDomainSequenceV12ScopedDomainV2eeoiySbAE_AEtFZ_0(void *a1, void *a2)
{
  uint64_t v2 = (nw_interface *)a1[2];
  uint64_t v3 = (nw_interface *)a2[2];
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (char v5 = sub_18264F4EC(), result = 0LL, (v5 & 1) != 0))
  {
    if (v2 == (nw_interface *)1)
    {
    }

    else
    {
      nw_interface_t v9 = v2;
      if (v3 != (nw_interface *)1)
      {
        nw_interface_t v8 = v3;
        sub_181BC6890((uint64_t)v2);
        swift_unknownObjectRetain();
        char v7 = _s7Network11NWInterfaceV2eeoiySbAC_ACtFZ_0(&v9, &v8);
        swift_unknownObjectRelease();
        sub_181BC69C8((uint64_t)v2);
        return (v7 & 1) != 0;
      }

      swift_unknownObjectRetain();
    }

    sub_181BC6890((uint64_t)v3);
    sub_181BC69C8((uint64_t)v2);
    sub_181BC69C8((uint64_t)v3);
    return 0LL;
  }

  return result;
}

uint64_t sub_181C507CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181BC6890(a3);
}

uint64_t sub_181C507F4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NWDomainSequence(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for NWDomainSequence(uint64_t a1)
{
  return sub_181BD62C8(a1, (uint64_t *)&unk_18C58D838);
}

unint64_t sub_181C50848()
{
  unint64_t result = qword_18C58D7C0[0];
  if (!qword_18C58D7C0[0])
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWDomainSequence.ScopedDomain,  &type metadata for NWDomainSequence.ScopedDomain);
    atomic_store(result, qword_18C58D7C0);
  }

  return result;
}

uint64_t sub_181C5088C()
{
  return MEMORY[0x18961A3E8];
}

uint64_t sub_181C50898()
{
  return sub_181BD67D4( &qword_18C58D7D8,  type metadata accessor for NWDomainSequence.DomainIterator,  (uint64_t)&protocol conformance descriptor for NWDomainSequence.DomainIterator);
}

uint64_t type metadata accessor for NWDomainSequence.DomainIterator(uint64_t a1)
{
  return sub_181BD62C8(a1, (uint64_t *)&unk_18C58D8D0);
}

uint64_t initializeBufferWithCopyOfBuffer for NWDomainSequence(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D7B8);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for NWDomainSequence(uint64_t a1, uint64_t a2)
{
  return sub_181C5101C(a1, a2, &qword_18C58D7B8);
}

uint64_t initializeWithCopy for NWDomainSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181C5105C(a1, a2, a3, &qword_18C58D7B8);
}

uint64_t assignWithCopy for NWDomainSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181C510AC(a1, a2, a3, &qword_18C58D7B8);
}

uint64_t initializeWithTake for NWDomainSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181C510FC(a1, a2, a3, &qword_18C58D7B8);
}

uint64_t assignWithTake for NWDomainSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181C5114C(a1, a2, a3, &qword_18C58D7B8);
}

uint64_t getEnumTagSinglePayload for NWDomainSequence()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C50960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, &qword_18C58D7B8);
}

uint64_t storeEnumTagSinglePayload for NWDomainSequence()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C50978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, &qword_18C58D7B8);
}

void sub_181C50984(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t destroy for NWDomainSequence.ScopedDomain(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result != 1) {
    return swift_unknownObjectRelease();
  }
  return result;
}

void *_s7Network16NWDomainSequenceV12ScopedDomainVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[2];
  swift_bridgeObjectRetain();
  if (v4 != 1) {
    swift_unknownObjectRetain();
  }
  a1[2] = v4;
  return a1;
}

void *assignWithCopy for NWDomainSequence.ScopedDomain(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + 2;
  uint64_t v5 = a2[2];
  if (a1[2] == 1LL)
  {
    if (v5 != 1)
    {
      *uint64_t v4 = v5;
      swift_unknownObjectRetain();
      return a1;
    }

    uint64_t v6 = 1LL;
  }

  else
  {
    if (v5 != 1)
    {
      *uint64_t v4 = v5;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      return a1;
    }

    sub_181BE521C((uint64_t)(a1 + 2));
    uint64_t v6 = a2[2];
  }

  *uint64_t v4 = v6;
  return a1;
}

void *assignWithTake for NWDomainSequence.ScopedDomain(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + 2;
  uint64_t v6 = a2[2];
  if (a1[2] != 1LL)
  {
    if (v6 != 1)
    {
      *uint64_t v5 = v6;
      swift_unknownObjectRelease();
      return a1;
    }

    sub_181BE521C((uint64_t)(a1 + 2));
    uint64_t v6 = 1LL;
  }

  *uint64_t v5 = v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for NWDomainSequence.ScopedDomain(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(sub_181C5475C(v0, v1, v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NWDomainSequence.ScopedDomain(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NWDomainSequence.ScopedDomain()
{
  return &type metadata for NWDomainSequence.ScopedDomain;
}

uint64_t sub_181C50BD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181BC69C8(a3);
}

uint64_t initializeWithCopy for NWDomainSequence.Event(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  char v7 = *(_BYTE *)(a2 + 24);
  sub_181C507CC(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  return a1;
}

uint64_t assignWithCopy for NWDomainSequence.Event(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  char v7 = *(_BYTE *)(a2 + 24);
  sub_181C507CC(*(void *)a2, v5, v6);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  sub_181C50BD8(v8, v9, v10);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  return a1;
}

__n128 __swift_memcpy27_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for NWDomainSequence.Event(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  char v5 = *(_BYTE *)(a2 + 24);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  sub_181C50BD8(v6, v7, v8);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWDomainSequence.Event(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 27)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NWDomainSequence.Event( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_BYTE *)(result + 26) = 0;
    *(_WORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 27) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 27) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 24) = -(char)a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NWDomainSequence.Event()
{
  return &type metadata for NWDomainSequence.Event;
}

uint64_t destroy for NWDomainSequence.Event.EventType(uint64_t *a1)
{
  return sub_181C50BD8(*a1, a1[1], a1[2]);
}

uint64_t initializeWithCopy for NWDomainSequence.Event.EventType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(_BYTE *)(a2 + 24);
  sub_181C507CC(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for NWDomainSequence.Event.EventType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(_BYTE *)(a2 + 24);
  sub_181C507CC(*(void *)a2, v4, v5);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  sub_181C50BD8(v7, v8, v9);
  return a1;
}

uint64_t assignWithTake for NWDomainSequence.Event.EventType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(_BYTE *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  sub_181C50BD8(v5, v7, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWDomainSequence.Event.EventType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NWDomainSequence.Event.EventType( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 25) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 24) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_181C50FB4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for NWDomainSequence.Event.EventType()
{
  return &type metadata for NWDomainSequence.Event.EventType;
}

uint64_t initializeBufferWithCopyOfBuffer for NWDomainSequence.DomainIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D7B0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for NWDomainSequence.DomainIterator(uint64_t a1, uint64_t a2)
{
  return sub_181C5101C(a1, a2, &qword_18C58D7B0);
}

uint64_t sub_181C5101C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
}

uint64_t initializeWithCopy for NWDomainSequence.DomainIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181C5105C(a1, a2, a3, &qword_18C58D7B0);
}

uint64_t sub_181C5105C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  return a1;
}

uint64_t assignWithCopy for NWDomainSequence.DomainIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181C510AC(a1, a2, a3, &qword_18C58D7B0);
}

uint64_t sub_181C510AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  return a1;
}

uint64_t initializeWithTake for NWDomainSequence.DomainIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181C510FC(a1, a2, a3, &qword_18C58D7B0);
}

uint64_t sub_181C510FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  return a1;
}

uint64_t assignWithTake for NWDomainSequence.DomainIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181C5114C(a1, a2, a3, &qword_18C58D7B0);
}

uint64_t sub_181C5114C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWDomainSequence.DomainIterator()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C5119C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, &qword_18C58D7B0);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48LL))(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for NWDomainSequence.DomainIterator()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C511F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, &qword_18C58D7B0);
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(a1, a2, a2, v7);
}

void sub_181C5123C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_181C51250( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t, ValueMetadata *, uint64_t, void))
{
  if (v5 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_181C512C0( uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, uint64_t, void))
{
  if (!*a2)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C58D6A0);
    unint64_t v7 = a3(a1, &type metadata for NWDomainSequence.Event, v6, MEMORY[0x18961A3E8]);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }

uint64_t sub_181C5132C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *sub_181C51398(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(void *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }

  else
  {
    uint64_t v8 = *a2;
    uint64_t *v3 = *a2;
    unsigned int v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }

  return v3;
}

uint64_t sub_181C51408(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8LL) + 8LL))();
}

uint64_t sub_181C51418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_181C51448(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_181C51478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_181C514A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_181C514D8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 < 2)
    {
LABEL_18:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0LL;
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_18;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (!(_DWORD)v7) {
    return v5 + v11 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_181C51588 + 4 * byte_182661260[(v7 - 1)]))();
}

void sub_181C515D8(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        unsigned int v11 = 4u;
      }

      else if (v13 >= 0x100)
      {
        unsigned int v11 = 2;
      }

      else
      {
        unsigned int v11 = v13 > 1;
      }
    }

    else
    {
      unsigned int v11 = 1u;
    }
  }

  else
  {
    unsigned int v11 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }

        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }

    else
    {
      bzero(a1, *(void *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

uint64_t type metadata accessor for UncheckedSendable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UncheckedSendable);
}

uint64_t sub_181C51794()
{
  return swift_deallocObject();
}

uint64_t sub_181C517B8(uint64_t a1)
{
  return sub_181C500D4(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_181C517C4()
{
  return swift_deallocObject();
}

uint64_t sub_181C517D4()
{
  return swift_unknownObjectRelease();
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

uint64_t sub_181C51810(int a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5)
{
  int v26 = a1;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D998);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  unsigned int v12 = &v25[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D990);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t result = MEMORY[0x1895F8858](v13);
  DNSServiceErrorType v17 = &v25[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  if (a5)
  {
    uint64_t v27 = a5;
    swift_unknownObjectRetain();
    swift_dynamicCast();
    if (a3)
    {
      sub_181BBE220();
      uint64_t v18 = swift_allocError();
      *(_DWORD *)uint64_t v19 = a3;
      *(_BYTE *)(v19 + 4) = 1;
      uint64_t v27 = v18;
      sub_18264EED4();
    }

    else if (a4)
    {
      uint64_t v20 = sub_18264EB80();
      uint64_t v22 = v21;
      if (a2)
      {
        uint64_t v23 = nw_interface_create_with_index(a2);
        if (v23) {
          uint64_t v24 = (uint64_t)v23;
        }
        else {
          uint64_t v24 = 1LL;
        }
      }

      else
      {
        uint64_t v24 = 1LL;
      }

      uint64_t v27 = v20;
      uint64_t v28 = v22;
      uint64_t v29 = v24;
      BOOL v30 = (v26 & 2) == 0;
      BOOL v31 = (v26 & 4) != 0;
      char v32 = v26 & 1;
      swift_bridgeObjectRetain();
      sub_181BC6890(v24);
      sub_18264EEC8();
      swift_bridgeObjectRelease();
      sub_181BC69C8(v24);
      (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
    }

    return (*(uint64_t (**)(_BYTE *, uint64_t))(v14 + 8))(v17, v13);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_181C519FC()
{
  if (nw_framer_message_copy_object_value(*(nw_framer_message_t *)(v0 + 16), "NWActorSystemType"))
  {
    sub_18264F0F0();
    swift_unknownObjectRelease();
  }

  else
  {
    memset(v2, 0, sizeof(v2));
  }

  sub_181C335D0((uint64_t)v2, (uint64_t)v3);
  if (v4)
  {
    uint64_t result = swift_dynamicCast();
    if ((_DWORD)result) {
      return LOBYTE(v2[0]);
    }
  }

  else
  {
    sub_181C527DC((uint64_t)v3);
    return 0LL;
  }

  return result;
}

uint64_t sub_181C51AA0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181C51AD4 + 4 * byte_182661430[a1]))( 0x64696C61766E69LL,  0xE700000000000000LL);
}

uint64_t sub_181C51AD4()
{
  return 0x614365746F6D6572LL;
}

unint64_t sub_181C51AF0()
{
  return 0xD000000000000013LL;
}

uint64_t sub_181C51B68()
{
  return 0x6F7250796C706572LL;
}

BOOL sub_181C51B8C(char *a1, char *a2)
{
  return dword_1826616F0[*a1] == dword_1826616F0[*a2];
}

uint64_t sub_181C51BB0()
{
  return sub_18264F684();
}

uint64_t sub_181C51BFC()
{
  return sub_18264F678();
}

uint64_t sub_181C51C30()
{
  return sub_18264F684();
}

uint64_t sub_181C51C78@<X0>(unsigned int *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_181C528B8(*a1);
  *a2 = result;
  return result;
}

void sub_181C51CA0(_DWORD *a1@<X8>)
{
  *a1 = dword_1826616F0[*v1];
}

uint64_t sub_181C51CB8()
{
  return sub_181C51AA0(*v0);
}

uint64_t sub_181C51CC0@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v3 = sub_181BDA1E8(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

void *sub_181C51CFC()
{
  uint64_t v0 = type metadata accessor for WireProtocol();
  type metadata accessor for NWProtocolFramer.Definition();
  swift_allocObject();
  uint64_t result = NWProtocolFramer.Definition.init(implementation:)(v0, (uint64_t)&off_189BAFE10);
  qword_18C5A4A10 = (uint64_t)result;
  return result;
}

uint64_t _s7Network9TLVFramerCfD_0()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for WireProtocol()
{
  return objc_opt_self();
}

unint64_t sub_181C51D7C()
{
  return 0xD000000000000017LL;
}

uint64_t sub_181C51D98()
{
  return swift_allocObject();
}

uint64_t sub_181C51DC0(_BYTE *__src, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 <= 14) {
    return sub_181BE44F8(__src, &__src[a2]);
  }
  sub_18264E4C0();
  swift_allocObject();
  sub_18264E478();
  sub_18264E5B0();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t sub_181C51E6C(char a1, int a2)
{
  if (qword_18C58B200 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_18C5A4A10;
  type metadata accessor for NWProtocolFramer.Message();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = nw_framer_protocol_create_message(*(nw_protocol_definition_t *)(v4 + 32));
  size_t v8 = &type metadata for WireMessageType;
  LOBYTE(v7[0]) = a1;
  swift_retain();
  sub_181C33914((uint64_t)v7, 0xD000000000000011LL, 0x80000001827305F0LL);
  size_t v8 = &type metadata for WireMessageOptions;
  v7[0] = a2;
  sub_181C33914((uint64_t)v7, 0xD000000000000014LL, 0x8000000182730460LL);
  swift_release();
  return v5;
}

uint64_t sub_181C51F6C(uint64_t a1)
{
  unint64_t v1 = *(nw_framer **)(a1 + 16);
  uint64_t v2 = 12LL;
  while (1)
  {
    uint64_t v37 = 0LL;
    unsigned int v38 = 0;
    char v39 = 1;
    MEMORY[0x1895F8858](a1);
    v29[2] = 12LL;
    v29[3] = &v37;
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = sub_181C5281C;
    *(void *)(v9 + 24) = v29;
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = sub_181C52880;
    *(void *)(v10 + 24) = v9;
    __int128 v35 = sub_181C52898;
    uint64_t v36 = v10;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_181C33E80;
    int v34 = (ValueMetadata *)&block_descriptor_13;
    uint64_t v11 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    BOOL v12 = nw_framer_parse_input(v1, 0xCuLL, 0xCuLL, 0LL, v11);
    swift_unknownObjectRelease();
    _Block_release(v11);
    LOBYTE(v11) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if (!v12 || (v39 & 1) != 0) {
      return v2;
    }
    int v14 = HIDWORD(v37);
    size_t v15 = v38;
    else {
      char v16 = 0x706050403020001uLL >> (8 * (v37 - 1));
    }
    if (qword_18C58B200 != -1) {
      swift_once();
    }
    uint64_t v17 = qword_18C5A4A10;
    type metadata accessor for NWProtocolFramer.Message();
    uint64_t inited = swift_initStackObject();
    message = nw_framer_protocol_create_message(*(nw_protocol_definition_t *)(v17 + 32));
    *(void *)(inited + 16) = message;
    int v34 = &type metadata for WireMessageType;
    LOBYTE(aBlock[0]) = v16;
    sub_181C334C4((uint64_t)aBlock, (uint64_t)v31);
    uint64_t v20 = v32;
    if (v32)
    {
      uint64_t v21 = __swift_project_boxed_opaque_existential_2(v31, v32);
      uint64_t v22 = *(void *)(v20 - 8);
      MEMORY[0x1895F8858](v21);
      uint64_t v24 = (char *)&v31[-1] - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v22 + 16))(v24);
      unint64_t v25 = (void *)sub_18264F4E0();
      int v26 = *(void (**)(char *, uint64_t))(v22 + 8);
      swift_retain();
      v26(v24, v20);
      uint64_t v2 = 12LL;
      __swift_destroy_boxed_opaque_existential_2((uint64_t)v31);
    }

    else
    {
      swift_retain();
      unint64_t v25 = 0LL;
    }

    nw_framer_message_set_object_value(message, "NWActorSystemType", v25);
    swift_unknownObjectRelease();
    sub_181C527DC((uint64_t)aBlock);
    int v34 = &type metadata for WireMessageOptions;
    LODWORD(aBlock[0]) = v14;
    uint64_t v27 = *(nw_protocol_metadata **)(inited + 16);
    sub_181C334C4((uint64_t)aBlock, (uint64_t)v31);
    uint64_t v28 = v32;
    if (v32)
    {
      int v3 = __swift_project_boxed_opaque_existential_2(v31, v32);
      uint64_t v4 = *(void *)(v28 - 8);
      MEMORY[0x1895F8858](v3);
      uint64_t v6 = (char *)&v31[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v4 + 16))(v6);
      unsigned int v7 = (void *)sub_18264F4E0();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v28);
      __swift_destroy_boxed_opaque_existential_2((uint64_t)v31);
    }

    else
    {
      unsigned int v7 = 0LL;
    }

    nw_framer_message_set_object_value(v27, "NWActorSystemOptions", v7);
    swift_unknownObjectRelease();
    sub_181C527DC((uint64_t)aBlock);
    swift_release();
    BOOL v8 = nw_framer_deliver_input_no_copy(v1, v15, *(nw_framer_message_t *)(inited + 16), 1);
    a1 = swift_unknownObjectRelease();
    if (!v8) {
      return 0LL;
    }
  }

  __break(1u);
  return result;
}

void sub_181C52380(uint64_t a1, uint64_t a2, size_t a3)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  char v6 = sub_181C519FC();
  if (nw_framer_message_copy_object_value(*(nw_framer_message_t *)(a2 + 16), "NWActorSystemOptions"))
  {
    sub_18264F0F0();
    swift_unknownObjectRelease();
  }

  else
  {
    memset(__src, 0, sizeof(__src));
  }

  sub_181C335D0((uint64_t)__src, (uint64_t)&v37);
  if (!v39)
  {
    sub_181C527DC((uint64_t)&v37);
    goto LABEL_8;
  }

  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_8:
    int v7 = 0;
    goto LABEL_9;
  }

  int v7 = __src[0];
LABEL_9:
  if ((a3 & 0x8000000000000000LL) != 0 || HIDWORD(a3))
  {
    sub_18264F318();
    __break(1u);
  }

  else
  {
    int v8 = dword_1826616F0[v6];
    int v35 = v7;
    LODWORD(__src[0]) = v8;
    int v34 = a3;
    uint64_t v37 = sub_181BE44F8(__src, (_BYTE *)__src + 4);
    uint64_t v38 = v9 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v10 = sub_181BE44F8(&v35, __src);
    unint64_t v12 = v11 & 0xFFFFFFFFFFFFFFLL;
    sub_18264E610();
    sub_181BCD4F0(v10, v12);
    uint64_t v13 = sub_181BE44F8(&v34, &v35);
    unint64_t v15 = v14 & 0xFFFFFFFFFFFFFFLL;
    sub_18264E610();
    sub_181BCD4F0(v13, v15);
    uint64_t v16 = v37;
    unint64_t v17 = v38;
    uint64_t v18 = *(nw_framer **)(a1 + 16);
    swift_unknownObjectRetain();
    uint64_t v19 = (void *)sub_18264E5EC();
    uint64_t v21 = (dispatch_data_s *)NWCreateDispatchDataFromNSData(v19, v20);

    if (!v21) {
      __break(1u);
    }
    nw_framer_write_output_data(v18, v21);
    swift_unknownObjectRelease();

    sub_181BCD4F0(v16, v17);
    if (!nw_framer_write_output_no_copy(v18, a3))
    {
      sub_181BBE220();
      uint64_t v22 = (void *)swift_allocError();
      *(_DWORD *)uint64_t v23 = 22;
      *(_BYTE *)(v23 + 4) = 0;
      swift_willThrow();
      if (qword_18C58B270 != -1) {
        swift_once();
      }
      uint64_t v24 = sub_18264E934();
      __swift_project_value_buffer(v24, (uint64_t)qword_18C5A4A60);
      id v25 = v22;
      id v26 = v22;
      uint64_t v27 = (os_log_s *)sub_18264E91C();
      os_log_type_t v28 = sub_18264F000();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = (uint8_t *)swift_slowAlloc();
        uint64_t v30 = swift_slowAlloc();
        uint64_t v37 = v30;
        *(_DWORD *)uint64_t v29 = 136315138;
        *(void *)&__src[0] = v22;
        id v31 = v22;
        __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D6A0);
        uint64_t v32 = sub_18264EAC0();
        *(void *)&__src[0] = sub_181BF7900(v32, v33, &v37);
        sub_18264F0CC();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_181A5C000, v27, v28, "Hit error writing: %s", v29, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x186E12168](v30, -1LL, -1LL);
        MEMORY[0x186E12168](v29, -1LL, -1LL);
      }

      else
      {
      }
    }
  }

uint64_t sub_181C527DC(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58D300);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_181C5281C(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(v3 + 16);
  uint64_t v5 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (v4 <= 0) {
      goto LABEL_4;
    }
    return 0LL;
  }

  if (a2 - a1 < v4) {
    return 0LL;
  }
LABEL_4:
  *(void *)uint64_t v5 = sub_181C528D8(a1);
  *(_DWORD *)(v5 + 8) = v6;
  *(_BYTE *)(v5 + 12) = 0;
  return v4;
}

uint64_t sub_181C52870()
{
  return swift_deallocObject();
}

uint64_t sub_181C52880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181C33E04(a1, a2, a3, *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v3 + 16));
}

uint64_t sub_181C52888()
{
  return swift_deallocObject();
}

uint64_t sub_181C52898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181C33E50(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

uint64_t sub_181C528B8(unsigned int a1)
{
  if (a1 > 8) {
    return 8LL;
  }
  else {
    return byte_182661710[a1];
  }
}

uint64_t sub_181C528D8(uint64_t a1)
{
  if (!a1) {
    __break(1u);
  }
  sub_18264F0CC();
  sub_18264F0CC();
  sub_18264F0CC();
  return 0LL;
}

uint64_t getEnumTagSinglePayload for WireMessageType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }

uint64_t storeEnumTagSinglePayload for WireMessageType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_181C52A74 + 4 * byte_18266143D[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_181C52AA8 + 4 * byte_182661438[v4]))();
}

uint64_t sub_181C52AA8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C52AB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181C52AB8LL);
  }
  return result;
}

uint64_t sub_181C52AC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181C52ACCLL);
  }
  *(_BYTE *)uint64_t result = a2 + 7;
  return result;
}

uint64_t sub_181C52AD0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C52AD8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WireMessageType()
{
  return &type metadata for WireMessageType;
}

ValueMetadata *type metadata accessor for WireMessageOptions()
{
  return &type metadata for WireMessageOptions;
}

unint64_t sub_181C52B08()
{
  unint64_t result = qword_18C58D9A0;
  if (!qword_18C58D9A0)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_1826614C4, &type metadata for WireMessageOptions);
    atomic_store(result, (unint64_t *)&qword_18C58D9A0);
  }

  return result;
}

unint64_t sub_181C52B50()
{
  unint64_t result = qword_18C58D9A8;
  if (!qword_18C58D9A8)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182661494, &type metadata for WireMessageOptions);
    atomic_store(result, (unint64_t *)&qword_18C58D9A8);
  }

  return result;
}

unint64_t sub_181C52B98()
{
  unint64_t result = qword_18C58D9B0;
  if (!qword_18C58D9B0)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_1826614EC, &type metadata for WireMessageOptions);
    atomic_store(result, (unint64_t *)&qword_18C58D9B0);
  }

  return result;
}

unint64_t sub_181C52BE0()
{
  unint64_t result = qword_18C58D9B8;
  if (!qword_18C58D9B8)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182661524, &type metadata for WireMessageOptions);
    atomic_store(result, (unint64_t *)&qword_18C58D9B8);
  }

  return result;
}

unint64_t sub_181C52C28()
{
  unint64_t result = qword_18C58D9C0;
  if (!qword_18C58D9C0)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_1826616C4, &type metadata for WireMessageType);
    atomic_store(result, (unint64_t *)&qword_18C58D9C0);
  }

  return result;
}

uint64_t sub_181C52C6C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  *a2 = sub_18264EAA8();
  a2[1] = v4;
  uint64_t v5 = (char *)a2 + *(int *)(type metadata accessor for NWActorID() + 20);
  uint64_t v6 = sub_18264E688();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(v5, a1, v6);
}

uint64_t sub_181C52CE0()
{
  uint64_t result = sub_18264F750();
  qword_18C5A4A18 = result;
  return result;
}

uint64_t NWActorID.description.getter()
{
  return 0x49726F746341574ELL;
}

uint64_t type metadata accessor for NWActorID()
{
  uint64_t result = qword_18C58A1B8;
  if (!qword_18C58A1B8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t NWActorID.hash(into:)()
{
  return sub_18264E9E8();
}

uint64_t static NWActorID.== infix(_:_:)(void *a1, void *a2)
{
  BOOL v2 = *a1 == *a2 && a1[1] == a2[1];
  if (!v2 && (sub_18264F4EC() & 1) == 0) {
    return 0LL;
  }
  type metadata accessor for NWActorID();
  return sub_18264E658();
}

uint64_t sub_181C52F70()
{
  if (*v0) {
    return 0x696669746E656469LL;
  }
  else {
    return 0x656D614E65707974LL;
  }
}

uint64_t sub_181C52FB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_181C53EA4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_181C52FD4()
{
  return sub_18264F738();
}

uint64_t sub_181C52FFC()
{
  return sub_18264F744();
}

uint64_t NWActorID.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D9C8);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_181C53178();
  sub_18264F714();
  v8[15] = 0;
  sub_18264F444();
  if (!v1)
  {
    type metadata accessor for NWActorID();
    v8[14] = 1;
    sub_18264E688();
    sub_181BD67D4(&qword_18C58D9D8, (uint64_t (*)(uint64_t))MEMORY[0x189606F20], MEMORY[0x189606F38]);
    sub_18264F45C();
  }

  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_181C53178()
{
  unint64_t result = qword_18C58D9D0;
  if (!qword_18C58D9D0)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_1826618FC, &type metadata for NWActorID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58D9D0);
  }

  return result;
}

uint64_t NWActorID.hashValue.getter()
{
  return sub_18264F684();
}

uint64_t NWActorID.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v4 = sub_18264E688();
  uint64_t v24 = *(void *)(v4 - 8);
  uint64_t v25 = v4;
  MEMORY[0x1895F8858](v4);
  uint64_t v23 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D9E0);
  uint64_t v6 = *(void *)(v26 - 8);
  MEMORY[0x1895F8858](v26);
  int v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for NWActorID();
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (uint64_t *)((char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_181C53178();
  sub_18264F6E4();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
  }
  uint64_t v20 = a1;
  uint64_t v21 = v6;
  unint64_t v12 = v11;
  uint64_t v14 = v23;
  uint64_t v13 = v24;
  uint64_t v16 = v25;
  uint64_t v15 = v26;
  char v28 = 0;
  uint64_t *v12 = sub_18264F3D8();
  v12[1] = v17;
  char v27 = 1;
  sub_181BD67D4(&qword_18C58D9E8, (uint64_t (*)(uint64_t))MEMORY[0x189606F20], MEMORY[0x189606F60]);
  sub_18264F3F0();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v15);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))((char *)v12 + *(int *)(v9 + 20), v14, v16);
  sub_181C53630((uint64_t)v12, v22);
  __swift_destroy_boxed_opaque_existential_2((uint64_t)v20);
  return sub_181BC920C((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for NWActorID);
}

uint64_t sub_181C53494@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return NWActorID.init(from:)(a1, a2);
}

uint64_t sub_181C534A8(void *a1)
{
  return NWActorID.encode(to:)(a1);
}

uint64_t sub_181C534BC()
{
  return sub_18264F684();
}

uint64_t sub_181C53540()
{
  return sub_18264E9E8();
}

uint64_t sub_181C535B0()
{
  return sub_18264F684();
}

uint64_t sub_181C53630(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NWActorID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_181C53674()
{
  return sub_181BD67D4( &qword_18C58D9F0,  (uint64_t (*)(uint64_t))type metadata accessor for NWActorID,  (uint64_t)&protocol conformance descriptor for NWActorID);
}

uint64_t sub_181C536A4(void *a1, void *a2)
{
  BOOL v2 = *a1 == *a2 && a1[1] == a2[1];
  if (v2 || (sub_18264F4EC() & 1) != 0) {
    return sub_18264E658();
  }
  else {
    return 0LL;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for NWActorID(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v11 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain();
  }

  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    int v8 = (char *)a2 + v6;
    uint64_t v9 = sub_18264E688();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }

  return v3;
}

uint64_t destroy for NWActorID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_18264E688();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

void *initializeWithCopy for NWActorID(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_18264E688();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *assignWithCopy for NWActorID(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_18264E688();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24LL))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for NWActorID(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_18264E688();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

void *assignWithTake for NWActorID(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_18264E688();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWActorID()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C539B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_18264E688();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 20),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for NWActorID()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C53A40(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = sub_18264E688();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 20),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_181C53AB4()
{
  uint64_t result = sub_18264E688();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for NWActorID.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_181C53B74 + 4 * byte_182661725[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181C53BA8 + 4 * byte_182661720[v4]))();
}

uint64_t sub_181C53BA8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C53BB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181C53BB8LL);
  }
  return result;
}

uint64_t sub_181C53BC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181C53BCCLL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_181C53BD0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C53BD8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWActorID.CodingKeys()
{
  return &type metadata for NWActorID.CodingKeys;
}

unint64_t sub_181C53BF8()
{
  unint64_t result = qword_18C58D9F8;
  if (!qword_18C58D9F8)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_1826618D4, &type metadata for NWActorID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58D9F8);
  }

  return result;
}

unint64_t sub_181C53C40()
{
  unint64_t result = qword_18C58DA00;
  if (!qword_18C58DA00)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182661844, &type metadata for NWActorID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58DA00);
  }

  return result;
}

unint64_t sub_181C53C88()
{
  unint64_t result = qword_18C58DA08;
  if (!qword_18C58DA08)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_18266186C, &type metadata for NWActorID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58DA08);
  }

  return result;
}

uint64_t sub_181C53CCC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C0D0);
  uint64_t v5 = MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v9 = (char *)v19 - v8;
  uint64_t v10 = sub_18264E688();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[1];
  *a2 = *a1;
  a2[1] = v14;
  swift_bridgeObjectRetain();
  sub_18264E640();
  sub_181C53FA0((uint64_t)v9, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v7, 1LL, v10) == 1)
  {
    sub_181C53FE8((uint64_t)v7);
    sub_181C54028();
    swift_allocError();
    *uint64_t v15 = 0xD000000000000012LL;
    v15[1] = 0x8000000182730630LL;
    swift_willThrow();
    sub_181C53FE8((uint64_t)v9);
    sub_181BC920C((uint64_t)a1, type metadata accessor for NWActorSystemProtobuf_ActorID);
    return swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v17(v13, v7, v10);
    sub_181C53FE8((uint64_t)v9);
    sub_181BC920C((uint64_t)a1, type metadata accessor for NWActorSystemProtobuf_ActorID);
    uint64_t v18 = type metadata accessor for NWActorID();
    return ((uint64_t (*)(char *, char *, uint64_t))v17)((char *)a2 + *(int *)(v18 + 20), v13, v10);
  }

uint64_t sub_181C53EA4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656D614E65707974LL && a2 == 0xE800000000000000LL;
  if (v2 || (sub_18264F4EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v6 = sub_18264F4EC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_181C53FA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C0D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_181C53FE8(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C0D0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_181C54028()
{
  unint64_t result = qword_18C58DA18;
  if (!qword_18C58DA18)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_18265D910, &type metadata for NWOptionalError);
    atomic_store(result, (unint64_t *)&qword_18C58DA18);
  }

  return result;
}

uint64_t dispatch thunk of NWCustomSerializable.init(serializedData:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of NWCustomSerializable.serializedData.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t sub_181C5409C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((v9 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))( (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v3,  a3);
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D6F0);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_181BE61DC(v15, (uint64_t)v17);
      uint64_t v10 = v18;
      uint64_t v11 = v19;
      __swift_project_boxed_opaque_existential_2(v17, v18);
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 32))(v10, v11);
      __swift_destroy_boxed_opaque_existential_2((uint64_t)v17);
      return v12;
    }

    uint64_t v16 = 0LL;
    memset(v15, 0, sizeof(v15));
    sub_181C541E4((uint64_t)v15);
  }

  uint64_t v12 = a1;
  uint64_t v13 = sub_18264E3E8();
  if (!v4) {
    return v13;
  }
  return v12;
}

uint64_t sub_181C541E4(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58DA20);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

char *sub_181C54224(char *result, char *a2)
{
  uint64_t v3 = *v2;
  int64_t v4 = *((void *)*v2 + 2);
  int64_t v5 = (int64_t)&a2[v4];
  if (__OFADD__(v4, a2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    if (result) {
      BOOL v18 = result == a2;
    }
    else {
      BOOL v18 = 1;
    }
    if (v18) {
      goto LABEL_13;
    }
    int64_t v19 = *((void *)v3 + 2);
    char v20 = *result++;
    LOBYTE(v12) = v20;
    int64_t v6 = 16LL;
    while (1)
    {
      unint64_t v21 = *((void *)v3 + 3);
      int64_t v14 = v21 >> 1;
      int64_t v22 = v19 + 1;
      if ((uint64_t)(v21 >> 1) < v19 + 1)
      {
        int v34 = result;
        uint64_t v32 = a2;
        unint64_t v33 = sub_181BC4A78((char *)(v21 > 1), v19 + 1, 1, v3);
        int64_t v22 = v19 + 1;
        a2 = v32;
        uint64_t v3 = v33;
        unint64_t result = v34;
        int64_t v14 = *((void *)v3 + 3) >> 1;
        if (v19 >= v14) {
          goto LABEL_23;
        }
      }

      else if (v19 >= v14)
      {
        goto LABEL_23;
      }

      v3[v19 + 32] = v12;
      if (result == a2)
      {
LABEL_41:
        *((void *)v3 + 2) = v22;
        goto LABEL_13;
      }

      uint64_t v23 = (char *)(v14 + ~v19);
      uint64_t v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) > 0x10 && (unint64_t)(&v3[v19] - result + 33) >= 0x10)
      {
        uint64_t v25 = (__int128 *)result;
        int64_t v26 = v24 & 0xF;
        char v27 = &v24[-v26];
        v22 += (int64_t)v27;
        unint64_t result = &v27[(void)result];
        char v28 = &v3[v19 + 33];
        do
        {
          __int128 v29 = *v25++;
          *(_OWORD *)char v28 = v29;
          v28 += 16;
          v27 -= 16;
        }

        while (v27);
      }

      uint64_t v30 = result++;
      while (1)
      {
        char v31 = *v30++;
        LOBYTE(v12) = v31;
        if (v14 == v22) {
          break;
        }
        v3[v22++ + 32] = v12;
        ++result;
        if (v30 == a2) {
          goto LABEL_41;
        }
      }

uint64_t sub_181C54438(uint64_t result, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    unint64_t result = sub_18264EB8C();
    uint64_t v3 = result;
  }

  else if ((a2 & 0x2000000000000000LL) != 0)
  {
    uint64_t v3 = HIBYTE(a2) & 0xF;
  }

  else
  {
    uint64_t v3 = result & 0xFFFFFFFFFFFFLL;
  }

  int64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  int64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
  }

  else
  {
    char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v2 = v4;
    if (!(_DWORD)isUniquelyReferenced_nonNull_native || *((void *)v4 + 3) >> 1 < v6)
    {
      if (v5 <= v6) {
        int64_t v8 = v5 + v3;
      }
      else {
        int64_t v8 = v5;
      }
      int64_t v4 = sub_181BC4A78(isUniquelyReferenced_nonNull_native, v8, 1, v4);
      *uint64_t v2 = v4;
    }

    swift_bridgeObjectRetain();
    unint64_t result = sub_18264F174();
    if ((v9 & 1) != 0) {
      goto LABEL_22;
    }
    uint64_t v10 = result;
    unint64_t result = swift_bridgeObjectRelease_n();
    if (v10 >= v3)
    {
      if (v10 < 1)
      {
LABEL_17:
        *uint64_t v2 = v4;
        return result;
      }

      uint64_t v11 = *((void *)v4 + 2);
      BOOL v12 = __OFADD__(v11, v10);
      uint64_t v13 = v11 + v10;
      if (!v12)
      {
        *((void *)v4 + 2) = v13;
        goto LABEL_17;
      }

      goto LABEL_21;
    }
  }

  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_181C54560(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }

  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = sub_181BC5520(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  unint64_t v10 = (unint64_t)&v3[5 * v9 + 4];
  if (a1 + 32 < v10 + 40 * v8 && v10 < a1 + 32 + 40 * v8) {
    goto LABEL_24;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58DA30);
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }

void *sub_181C546D4( uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  if (a1) {
    uint64_t v4 = a2 - a1;
  }
  else {
    uint64_t v4 = 0LL;
  }
  uint64_t result = a3(&v6, a1, v4);
  if (!v3) {
    return (void *)v6;
  }
  return result;
}

uint64_t Connection1.__allocating_init(using:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  Connection1.init(using:)(a1);
  return v2;
}

uint64_t sub_181C5475C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void *sub_181C54764()
{
  uint64_t v0 = type metadata accessor for TLVFramer();
  type metadata accessor for NWProtocolFramer.Definition();
  swift_allocObject();
  uint64_t result = NWProtocolFramer.Definition.init(implementation:)(v0, (uint64_t)&protocol witness table for TLVFramer);
  qword_18C5A4A20 = (uint64_t)result;
  return result;
}

uint64_t static TLVFramer.label.getter()
{
  return 5655636LL;
}

uint64_t TLVFramer.__allocating_init(framer:)()
{
  return swift_allocObject();
}

uint64_t TLVFramer.init(framer:)()
{
  return v0;
}

uint64_t sub_181C54800(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = 0LL;
  if ((a3 & 1) == 0 && a1 && a2 - a1 >= 8)
  {
    sub_18264F0CC();
    *(void *)a5 = 0LL;
    *(_BYTE *)(a5 + 8) = 0;
    return 8LL;
  }

  return result;
}

uint64_t sub_181C5489C()
{
  if (nw_framer_message_copy_object_value(*(nw_framer_message_t *)(v0 + 16), "Type"))
  {
    sub_18264F0F0();
    swift_unknownObjectRelease();
  }

  else
  {
    memset(v2, 0, sizeof(v2));
  }

  sub_181BE625C((uint64_t)v2, (uint64_t)v3, (uint64_t *)&unk_18C58D300);
  if (v4)
  {
    uint64_t result = swift_dynamicCast();
    if ((_DWORD)result) {
      return LODWORD(v2[0]);
    }
  }

  else
  {
    sub_181BDA0F0((uint64_t)v3, (uint64_t *)&unk_18C58D300);
    return 0LL;
  }

  return result;
}

uint64_t TLVFramer.deinit()
{
  return v0;
}

uint64_t sub_181C54958()
{
  return 5655636LL;
}

uint64_t sub_181C54968()
{
  return swift_allocObject();
}

uint64_t static ProtocolStackBuilder.buildBlock(_:_:)( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 16LL))(a1, a3, a6);
  if (a5)
  {
    uint64_t v12 = (uint64_t *)(a7 & 0xFFFFFFFFFFFFFFFELL);
    do
    {
      uint64_t v14 = *v12++;
      uint64_t v13 = v14;
      uint64_t v16 = *a2++;
      uint64_t v15 = v16;
      uint64_t v17 = *a4++;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL))(v15, v17);
      --a5;
    }

    while (a5);
  }

  return result;
}

uint64_t Configuration.init(_:)@<X0>( void (*a1)(char *)@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, nw_parameters_t *a8@<X8>)
{
  uint64_t v63 = a2;
  uint64_t v64 = a1;
  uint64_t v71 = a8;
  uint64_t v62 = sub_18264F6A8();
  uint64_t v13 = *(void *)(v62 - 8);
  uint64_t TupleTypeMetadata = MEMORY[0x1895F8858](v62);
  uint64_t v61 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!a3) {
    goto LABEL_8;
  }
  MEMORY[0x1895F8858](TupleTypeMetadata);
  BOOL v18 = (uint64_t *)((char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  *BOOL v18 = a4;
  if (a3 >= 6 && (unint64_t)v18 - v16 + 8 >= 0x20)
  {
    unint64_t v19 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v57 = v18 + 3;
    uint64_t v58 = (__int128 *)(v16 + 16);
    unint64_t v59 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      __int128 v60 = *v58;
      *(v57 - 1) = *(v58 - 1);
      *uint64_t v57 = v60;
      v57 += 2;
      v58 += 2;
      v59 -= 4LL;
    }

    while (v59);
    if (v19 == a3) {
      goto LABEL_7;
    }
  }

  else
  {
    unint64_t v19 = 0LL;
  }

  unint64_t v20 = a3 - v19;
  uint64_t v21 = 8 * v19;
  int64_t v22 = &v18[v19 + 1];
  uint64_t v23 = (uint64_t *)(v16 + v21);
  do
  {
    uint64_t v24 = *v23++;
    *v22++ = v24;
    --v20;
  }

  while (v20);
LABEL_7:
  uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  a4 = TupleTypeMetadata;
LABEL_8:
  uint64_t v72 = a5;
  uint64_t v73 = a6;
  uint64_t v69 = &v61;
  uint64_t v74 = *(void *)(a4 - 8);
  uint64_t v25 = MEMORY[0x1895F8858](TupleTypeMetadata);
  char v27 = (char *)&v61 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v67 = &v61;
  uint64_t v28 = MEMORY[0x1895F8858](v25);
  uint64_t v30 = (char *)&v61 - v29;
  uint64_t v66 = &v61;
  MEMORY[0x1895F8858](v28);
  uint64_t v32 = (char *)&v61 - v31;
  nw_parameters_t v33 = nw_parameters_create();
  uint64_t v65 = &v61;
  nw_parameters_t v82 = v33;
  MEMORY[0x1895F8858](v33);
  int v35 = (char *)&v61 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v70 = a7;
  if (a3)
  {
    uint64_t v36 = (int *)(a4 + 48);
    unint64_t v37 = a3;
    uint64_t v38 = v35;
    do
    {
      uint64_t v39 = *v36;
      v36 += 4;
      *v38++ = &v32[v39];
      --v37;
    }

    while (v37);
    uint64_t v40 = *(int *)(a4 + 32);
  }

  else
  {
    uint64_t v40 = 0LL;
  }

  v64(&v32[v40]);
  uint64_t v81 = (void *)MEMORY[0x18961AFE8];
  uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
  v41(v30, v32, a4);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58DA30);
  int v42 = swift_dynamicCast();
  uint64_t v68 = a4;
  if (!v42)
  {
    v79[3] = a4;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v79);
    v41((char *)boxed_opaque_existential_0, v32, a4);
    uint64_t v49 = v61;
    sub_18264F690();
    sub_18264F69C();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v49, v62);
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58DA38);
    uint64_t v50 = sub_18264F2D0();
    swift_release();
    uint64_t v51 = *(void *)(v50 + 16);
    if (v51)
    {
      uint64_t v52 = v50 + 32;
      uint64_t v64 = (void (*)(char *))v50;
      swift_bridgeObjectRetain();
      unint64_t v53 = (void *)MEMORY[0x18961AFE8];
      do
      {
        sub_181BE48BC(v52, (uint64_t)v78, &qword_18C58DA38);
        sub_181BE625C((uint64_t)v78, (uint64_t)&v75, &qword_18C58DA38);
        if (v76)
        {
          sub_181BE61DC(&v75, (uint64_t)v77);
          sub_181BE61DC(v77, (uint64_t)&v75);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v53 = sub_181BC5520(0LL, v53[2] + 1LL, 1, v53);
          }
          unint64_t v55 = v53[2];
          unint64_t v54 = v53[3];
          if (v55 >= v54 >> 1) {
            unint64_t v53 = sub_181BC5520((void *)(v54 > 1), v55 + 1, 1, v53);
          }
          v53[2] = v55 + 1;
          sub_181BE61DC(&v75, (uint64_t)&v53[5 * v55 + 4]);
        }

        else
        {
          sub_181BDA0F0((uint64_t)&v75, &qword_18C58DA38);
        }

        v52 += 40LL;
        --v51;
      }

      while (v51);
      swift_bridgeObjectRelease_n();
    }

    else
    {
      swift_bridgeObjectRelease();
      unint64_t v53 = (void *)MEMORY[0x18961AFE8];
    }

    sub_181C54560((uint64_t)v53);
    uint64_t v43 = v81;
    uint64_t v46 = v81[2];
    if (v46) {
      goto LABEL_19;
    }
LABEL_35:
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }

  __swift_destroy_boxed_opaque_existential_2((uint64_t)v80);
  v41(v27, v32, a4);
  swift_dynamicCast();
  uint64_t v43 = v81;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v43 = sub_181BC5520(0LL, v43[2] + 1LL, 1, v43);
  }
  unint64_t v45 = v43[2];
  unint64_t v44 = v43[3];
  if (v45 >= v44 >> 1) {
    uint64_t v43 = sub_181BC5520((void *)(v44 > 1), v45 + 1, 1, v43);
  }
  v43[2] = v45 + 1;
  sub_181BE61DC(v78, (uint64_t)&v43[5 * v45 + 4]);
  uint64_t v81 = v43;
  uint64_t v46 = v43[2];
  if (!v46) {
    goto LABEL_35;
  }
LABEL_19:
  uint64_t v47 = v43 + 4;
  swift_bridgeObjectRetain();
  do
  {
    sub_181C550B0(v47);
    v47 += 5;
    --v46;
  }

  while (v46);
  swift_bridgeObjectRelease_n();
LABEL_36:
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v32, v68);
  *uint64_t v71 = v82;
  return result;
}

uint64_t sub_181C550B0(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  __swift_project_boxed_opaque_existential_2(a1, v1);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 8);
  uint64_t v4 = swift_unknownObjectRetain();
  v3(v4, v1, v2);
  return swift_unknownObjectRelease();
}

uint64_t Configuration.requiredInterface(_:)@<X0>(nw_interface **a1@<X0>, nw_parameters **a2@<X8>)
{
  uint64_t v4 = *a1;
  int64_t v5 = *v2;
  else {
    uint64_t v4 = 0LL;
  }
  nw_parameters_require_interface(v5, v4);
  swift_unknownObjectRelease();
  *a2 = v5;
  return swift_unknownObjectRetain();
}

uint64_t Configuration.requiredInterfaceType(_:)@<X0>(unsigned __int8 *a1@<X0>, void *a2@<X8>)
{
  return sub_181C55554(a1, (void (*)(uint64_t, void))nw_parameters_set_required_interface_type, a2);
}

uint64_t Configuration.requiredInterfaceSubtype(_:)@<X0>(char *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *v2;
  nw_parameters_set_required_interface_subtype(v4, dword_1826620F8[*a1]);
  *a2 = v4;
  return swift_unknownObjectRetain();
}

void Configuration.prohibitedInterfaces(_:)(uint64_t a1@<X0>, nw_parameters **a2@<X8>)
{
  int64_t v5 = *v2;
  nw_parameters_clear_prohibited_interfaces(*v2);
  if (!a1 || (uint64_t v6 = *(void *)(a1 + 16)) == 0)
  {
LABEL_9:
    *a2 = v5;
    swift_unknownObjectRetain();
    return;
  }

  swift_bridgeObjectRetain();
  uint64_t v7 = 0LL;
  while (1)
  {
    unint64_t v8 = *(nw_interface **)(a1 + 8 * v7 + 32);
LABEL_4:
    if (v6 == ++v7)
    {
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
  }

  if (v8)
  {
    nw_parameters_prohibit_interface(v5, v8);
    goto LABEL_4;
  }

  __break(1u);
}

uint64_t Configuration.prohibitedInterfaceTypes(_:)@<X0>(uint64_t a1@<X0>, nw_parameters **a2@<X8>)
{
  int64_t v5 = *v2;
  nw_parameters_clear_prohibited_interface_types(*v2);
  if (a1)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    if (v6)
    {
      swift_bridgeObjectRetain();
      for (uint64_t i = 0LL; i != v6; ++i)
      {
        nw_interface_type_t v8 = *(unsigned __int8 *)(a1 + i + 32);
        nw_parameters_prohibit_interface_type(v5, v8);
      }

      swift_bridgeObjectRelease();
    }
  }

  *a2 = v5;
  return swift_unknownObjectRetain();
}

uint64_t Configuration.prohibitedInterfaceSubtypes(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  int64_t v5 = *v2;
  xpc_object_t v6 = xpc_array_create(0LL, 0LL);
  if (a1)
  {
    uint64_t v7 = *(void *)(a1 + 16);
    if (v7)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = 0LL;
      do
      {
        uint64_t v9 = *(char *)(a1 + v8++ + 32);
        xpc_object_t v10 = xpc_uint64_create(qword_182662110[v9]);
        xpc_array_append_value(v6, v10);
        swift_unknownObjectRelease();
      }

      while (v7 != v8);
      swift_bridgeObjectRelease();
    }
  }

  nw_parameters_set_prohibited_interface_subtypes(v5, v6);
  swift_unknownObjectRelease();
  *a2 = v5;
  return swift_unknownObjectRetain();
}

uint64_t Configuration.prohibitExpensivePaths(_:)@<X0>(char a1@<W0>, void *a2@<X8>)
{
  return sub_181C55514(a1, (void (*)(uint64_t, void))nw_parameters_set_prohibit_expensive, a2);
}

uint64_t Configuration.prohibitConstrainedPaths(_:)@<X0>(char a1@<W0>, void *a2@<X8>)
{
  return sub_181C55514(a1, (void (*)(uint64_t, void))nw_parameters_set_prohibit_constrained, a2);
}

uint64_t Configuration.preferNoProxies(_:)@<X0>(char a1@<W0>, void *a2@<X8>)
{
  return sub_181C55514(a1, (void (*)(uint64_t, void))nw_parameters_set_prefer_no_proxy, a2);
}

uint64_t Configuration.localEndpoint(_:)@<X0>(uint64_t a1@<X0>, nw_parameters **a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *v2;
  sub_181BE48BC(a1, (uint64_t)v7, &qword_18C45E580);
  uint64_t v9 = type metadata accessor for NWEndpoint();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v7, 1LL, v9) == 1)
  {
    sub_181BDA0F0((uint64_t)v7, &qword_18C45E580);
    xpc_object_t v10 = 0LL;
  }

  else
  {
    NWEndpoint.nw.getter();
    xpc_object_t v10 = v11;
    sub_181BE4788((uint64_t)v7);
  }

  nw_parameters_set_local_endpoint(v8, v10);
  swift_unknownObjectRelease();
  *a2 = v8;
  return swift_unknownObjectRetain();
}

uint64_t Configuration.allowLocalEndpointReuse(_:)@<X0>(char a1@<W0>, void *a2@<X8>)
{
  return sub_181C55514(a1, (void (*)(uint64_t, void))nw_parameters_set_reuse_local_address, a2);
}

uint64_t Configuration.localOnly(_:)@<X0>(char a1@<W0>, void *a2@<X8>)
{
  return sub_181C55514(a1, (void (*)(uint64_t, void))nw_parameters_set_local_only, a2);
}

uint64_t Configuration.includePeerToPeer(_:)@<X0>(char a1@<W0>, void *a2@<X8>)
{
  return sub_181C55514(a1, (void (*)(uint64_t, void))nw_parameters_set_include_peer_to_peer, a2);
}

uint64_t Configuration.requiresDNSSECValidation(_:)@<X0>(char a1@<W0>, void *a2@<X8>)
{
  return sub_181C55514(a1, (void (*)(uint64_t, void))nw_parameters_set_requires_dnssec_validation, a2);
}

uint64_t Configuration.serviceClass(_:)@<X0>(unsigned __int8 *a1@<X0>, void *a2@<X8>)
{
  return sub_181C55554(a1, (void (*)(uint64_t, void))nw_parameters_set_service_class, a2);
}

uint64_t Configuration.multipathServiceType(_:)@<X0>(unsigned __int8 *a1@<X0>, void *a2@<X8>)
{
  return sub_181C55554(a1, (void (*)(uint64_t, void))nw_parameters_set_multipath_service, a2);
}

uint64_t Configuration.allowFastOpen(_:)@<X0>(char a1@<W0>, void *a2@<X8>)
{
  return sub_181C55514(a1, (void (*)(uint64_t, void))nw_parameters_set_fast_open_enabled, a2);
}

uint64_t sub_181C55514@<X0>(char a1@<W0>, void (*a2)(uint64_t, void)@<X2>, void *a3@<X8>)
{
  uint64_t v5 = *v3;
  a2(v5, a1 & 1);
  *a3 = v5;
  return swift_unknownObjectRetain();
}

uint64_t Configuration.expiredDNSBehavior(_:)@<X0>(unsigned __int8 *a1@<X0>, void *a2@<X8>)
{
  return sub_181C55554(a1, (void (*)(uint64_t, void))nw_parameters_set_expired_dns_behavior, a2);
}

uint64_t sub_181C55554@<X0>( unsigned __int8 *a1@<X0>, void (*a2)(uint64_t, void)@<X2>, void *a3@<X8>)
{
  uint64_t v5 = *v3;
  a2(v5, *a1);
  *a3 = v5;
  return swift_unknownObjectRetain();
}

uint64_t sub_181C55588@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_18264EE38();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v10 - v6;
  uint64_t v8 = sub_18264EE44();
  sub_18264EE20();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(a1, v8);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v7, v4);
}

uint64_t AsyncProperty.Iterator.next()()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  sub_18264EE38();
  void *v1 = v0;
  v1[1] = sub_181BC63C4;
  return sub_18264EE2C();
}

uint64_t sub_181C556A4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_181C13654;
  return AsyncProperty.Iterator.next()();
}

uint64_t sub_181C55704()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_181C55788;
  return sub_18264EDB4();
}

uint64_t sub_181C55788()
{
  uint64_t v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t AsyncProperty.makeAsyncIterator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_18264EDF0();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (uint64_t *)((char *)&v10 - v4);
  uint64_t v6 = sub_18264EE44();
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v10 - v7;
  *uint64_t v5 = 1LL;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x18961BD48], v2);
  sub_18264EE50();
  swift_release();
  return sub_181C55588((uint64_t)v8, a1);
}

uint64_t sub_181C558E0()
{
  uint64_t v0 = sub_18264F03C();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1895F8858](v0);
  uint64_t v3 = (char *)v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_18264F030();
  uint64_t v5 = (uint64_t (*)(uint64_t))MEMORY[0x18961B8A8];
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = sub_18264E97C();
  MEMORY[0x1895F8858](v6);
  sub_181BC91D0();
  sub_18264E970();
  v8[1] = MEMORY[0x18961AFE8];
  sub_181BD67D4(&qword_18C58C1E8, v5, MEMORY[0x18961B8C0]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58D710);
  sub_181C65D48((unint64_t *)&qword_18C58C1F0, (uint64_t *)&unk_18C58D710);
  sub_18264F108();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x18961B900], v0);
  uint64_t result = sub_18264F060();
  qword_18C5A4A28 = result;
  return result;
}

uint64_t Connection1.__allocating_init(to:using:)(uint64_t a1, nw_parameters **a2)
{
  uint64_t v4 = swift_allocObject();
  Connection1.init(to:using:)(a1, a2);
  return v4;
}

uint64_t Connection1.init(to:using:)(uint64_t a1, nw_parameters **a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for NWEndpoint();
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *a2;
  *(void *)(v3 + 24) = MEMORY[0x18961AFF8];
  NWEndpoint.nw.getter();
  if (v10)
  {
    uint64_t v11 = v10;
    if (nw_endpoint_get_type(v10) == 4)
    {
      uint64_t v12 = (void *)swift_unknownObjectRetain();
      nw_parameters_set_url_endpoint(v12, v11);
      swift_unknownObjectRelease();
    }

    swift_unknownObjectRelease();
  }

  sub_181BE4744(a1, (uint64_t)v8);
  nw_parameters_t v13 = nw_parameters_copy(v9);
  swift_unknownObjectRelease();
  type metadata accessor for NWParameters();
  uint64_t v14 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A220);
  uint64_t v15 = swift_allocObject();
  *(_DWORD *)(v15 + 24) = 0;
  *(void *)(v15 + 16) = v13;
  *(void *)(v14 + 16) = v15;
  type metadata accessor for NWConnection(0LL);
  swift_allocObject();
  sub_181C6BB70((uint64_t)v8, v14);
  uint64_t v17 = v16;
  swift_release();
  *(void *)(v3 + 16) = v17;
  swift_retain();
  swift_retain();
  sub_181BC904C((uint64_t)sub_181C63918);
  NWConnection.stateUpdateHandler.setter((uint64_t)sub_181C63918, v3);
  swift_release();
  swift_release();
  if (qword_18C58B218 != -1) {
    swift_once();
  }
  NWConnection.start(queue:)((void *)qword_18C5A4A28);
  sub_181BE4788(a1);
  return v3;
}

uint64_t Connection1.init(using:)(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x18961AFF8];
  *(void *)(v1 + 16) = a1;
  *(void *)(v1 + 24) = v2;
  swift_retain_n();
  swift_retain();
  sub_181BC904C((uint64_t)sub_181C63918);
  NWConnection.stateUpdateHandler.setter((uint64_t)sub_181C63918, v1);
  swift_release();
  swift_release();
  uint64_t v3 = qword_18C58B218;
  swift_retain();
  if (v3 != -1) {
    swift_once();
  }
  NWConnection.start(queue:)((void *)qword_18C5A4A28);
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_181C55D78(unsigned int *a1, uint64_t a2)
{
  unint64_t v3 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
  swift_beginAccess();
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v18 = v4 + 56;
  uint64_t v5 = 1LL << *(_BYTE *)(v4 + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(v4 + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0LL;
  if (v7) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v13 = v10 + 1;
  if (!__OFADD__(v10, 1LL))
  {
    if (v13 < v8)
    {
      unint64_t v14 = *(void *)(v18 + 8 * v13);
      ++v10;
      if (v14) {
        goto LABEL_20;
      }
      int64_t v10 = v13 + 1;
      if (v13 + 1 >= v8) {
        return swift_release();
      }
      unint64_t v14 = *(void *)(v18 + 8 * v10);
      if (v14) {
        goto LABEL_20;
      }
      int64_t v10 = v13 + 2;
      if (v13 + 2 >= v8) {
        return swift_release();
      }
      unint64_t v14 = *(void *)(v18 + 8 * v10);
      if (v14)
      {
LABEL_20:
        unint64_t v7 = (v14 - 1) & v14;
        for (unint64_t i = __clz(__rbit64(v14)) + (v10 << 6); ; unint64_t i = v11 | (v10 << 6))
        {
          sub_181C65CE0(*(void *)(v4 + 48) + 40 * i, (uint64_t)v26);
          __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E048);
          if ((swift_dynamicCast() & 1) != 0)
          {
            sub_181BE61DC(v21, (uint64_t)v23);
            uint64_t v16 = v24;
            uint64_t v17 = v25;
            __swift_project_boxed_opaque_existential_2(v23, v24);
            char v20 = BYTE4(v3);
            int v19 = v3;
            (*(void (**)(int *, uint64_t, uint64_t))(v17 + 8))(&v19, v16, v17);
            uint64_t result = __swift_destroy_boxed_opaque_existential_2((uint64_t)v23);
            if (!v7) {
              goto LABEL_7;
            }
          }

          else
          {
            uint64_t v22 = 0LL;
            memset(v21, 0, sizeof(v21));
            uint64_t result = sub_181BDA0F0((uint64_t)v21, &qword_18C58E050);
            if (!v7) {
              goto LABEL_7;
            }
          }

uint64_t Connection1.deinit()
{
  return v0;
}

uint64_t Connection1.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_181C56010(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  uint64_t v5 = MEMORY[0x1895F8858](a1);
  unint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v9 = (char *)&v11 - v8;
  (*(void (**)(char *))(v4 + 16))(v7);
  swift_beginAccess();
  sub_18264EF34();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, a3);
}

uint64_t sub_181C560E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v32 = a6;
  uint64_t v33 = a7;
  v28[1] = a5;
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  int64_t v10 = (void *)*v7;
  uint64_t v11 = sub_18264E964();
  uint64_t v36 = *(void *)(v11 - 8);
  uint64_t v37 = v11;
  MEMORY[0x1895F8858](v11);
  int64_t v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_18264E97C();
  uint64_t v34 = *(void *)(v14 - 8);
  uint64_t v35 = v14;
  uint64_t v15 = MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = *(void *)(a2 - 8);
  uint64_t v19 = *(void *)(v18 + 64);
  MEMORY[0x1895F8858](v15);
  char v20 = (char *)v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_18C58B218 != -1) {
    swift_once();
  }
  uint64_t v31 = qword_18C5A4A28;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))( (char *)v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  a2);
  unint64_t v21 = (*(unsigned __int8 *)(v18 + 80) + 88LL) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  uint64_t v22 = (char *)swift_allocObject();
  *((void *)v22 + 2) = v10[10];
  *((void *)v22 + 3) = v10[11];
  *((void *)v22 + 4) = swift_allocateMetadataPack();
  *((void *)v22 + 5) = a2;
  *((void *)v22 + 6) = v10[13];
  uint64_t WitnessTablePack = swift_allocateWitnessTablePack();
  uint64_t v24 = v29;
  *((void *)v22 + 7) = WitnessTablePack;
  *((void *)v22 + 8) = v24;
  *((void *)v22 + 9) = v30;
  *((void *)v22 + 10) = v7;
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(&v22[v21], v20, a2);
  aBlock[4] = v32;
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_181C32D2C;
  void aBlock[3] = v33;
  uint64_t v25 = _Block_copy(aBlock);
  swift_retain();
  sub_18264E970();
  uint64_t v38 = MEMORY[0x18961AFE8];
  sub_181BD67D4( (unint64_t *)&qword_18C45E550,  (uint64_t (*)(uint64_t))MEMORY[0x18961B6A0],  MEMORY[0x18961B6B8]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C45E560);
  sub_181C65D48((unint64_t *)&qword_18C45E570, (uint64_t *)&unk_18C45E560);
  uint64_t v26 = v37;
  sub_18264F108();
  MEMORY[0x186E0EBEC](0LL, v17, v13, v25);
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v13, v26);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v17, v35);
  return swift_release();
}

uint64_t sub_181C563A4()
{
  uint64_t v0 = sub_18264F09C();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1895F8858](v0);
  unint64_t v3 = (char *)&v5 - v2;
  swift_beginAccess();
  sub_18264EF40();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

BOOL static SendProgress.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t sub_181C56480()
{
  return sub_18264F654();
}

uint64_t sub_181C564A8@<X0>(uint64_t a1@<X8>)
{
  return sub_181C59D58(&qword_18C58DA50, &qword_18C58DA58, a1);
}

uint64_t sub_181C564BC(uint64_t a1)
{
  return sub_181C59DC8(a1, &qword_18C58DA50, &qword_18C58DA58);
}

uint64_t sub_181C564D0@<X0>(void *a1@<X8>)
{
  unint64_t v3 = (uint64_t *)(v1 + qword_18C58DA60);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v6 = v3[2];
  uint64_t v7 = v3[3];
  uint64_t v9 = v3[4];
  uint64_t v8 = v3[5];
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v9;
  a1[5] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void sub_181C56568(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + qword_18C58DD98);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(v1 + qword_18C58DD98 + 4);
  *(_DWORD *)a1 = v2;
}

int *sub_181C56588(int *result)
{
  int v2 = *result;
  uint64_t v3 = v1 + qword_18C58DD98;
  *(_BYTE *)(v3 + 4) = *((_BYTE *)result + 4);
  *(_DWORD *)uint64_t v3 = v2;
  return result;
}

void SendProgress.deinit()
{
}

uint64_t sub_181C565F4(uint64_t a1)
{
  uint64_t v3 = MEMORY[0x186E12084](&protocol conformance descriptor for SendProgress<A, Pack{repeat B}>, a1);
  sub_181C560E4( (uint64_t)&v5,  a1,  (uint64_t)&protocol witness table for SendProgress<A, Pack{repeat B}>,  v3,  (uint64_t)&unk_189BB17F0,  (uint64_t)sub_181C65CAC,  (uint64_t)&block_descriptor_316);
  swift_release();
  sub_181BDA0F0(v1 + qword_18C58DA50, &qword_18C58DA58);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

void SendProgress.__deallocating_deinit()
{
}

unsigned int *sub_181C566C4(unsigned int *result)
{
  unint64_t v1 = *result | ((unint64_t)*((unsigned __int8 *)result + 4) << 32);
  int v2 = *((unsigned __int8 *)result + 4) >> 6;
  if (v2)
  {
    if (v2 == 1)
    {
      unsigned int v4 = *result;
      char v5 = (v1 & 0x3FFFFFFFFFLL | 0x4000000000LL) >> 32;
    }

    else
    {
      if (v2 != 2) {
        return result;
      }
      if (v1 == 0x8000000001LL)
      {
        char v5 = 0x80;
        unsigned int v3 = 1;
      }

      else
      {
        if (v1 != 0x8000000002LL) {
          return result;
        }
        char v5 = 0x80;
        unsigned int v3 = 2;
      }

      unsigned int v4 = v3;
    }
  }

  else
  {
    unsigned int v4 = *result;
    char v5 = BYTE4(v1);
  }

  return (unsigned int *)sub_181C56770(&v4);
}

uint64_t sub_181C56770(unsigned int *a1)
{
  uint64_t v3 = sub_18264E964();
  v14[0] = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  char v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_18264E97C();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
  if (qword_18C58B218 != -1) {
    swift_once();
  }
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v1;
  *(_BYTE *)(v11 + 28) = BYTE4(v10);
  *(_DWORD *)(v11 + 24) = v10;
  aBlock[4] = sub_181C65C28;
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_181C32D2C;
  void aBlock[3] = &block_descriptor_310;
  uint64_t v12 = _Block_copy(aBlock);
  swift_retain();
  sub_18264E970();
  v14[1] = MEMORY[0x18961AFE8];
  sub_181BD67D4( (unint64_t *)&qword_18C45E550,  (uint64_t (*)(uint64_t))MEMORY[0x18961B6A0],  MEMORY[0x18961B6B8]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C45E560);
  sub_181C65D48((unint64_t *)&qword_18C45E570, (uint64_t *)&unk_18C45E560);
  sub_18264F108();
  MEMORY[0x186E0EBEC](0LL, v9, v5, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v14[0] + 8LL))(v5, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_release();
}

uint64_t sub_181C56998(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A1F0);
  uint64_t v113 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)v103 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = MEMORY[0x1895F8858](v5);
  v103[4] = (char *)v103 - v9;
  uint64_t v10 = MEMORY[0x1895F8858](v8);
  uint64_t v112 = (char *)v103 - v11;
  MEMORY[0x1895F8858](v10);
  os_signpost_type_t v111 = (char *)v103 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E038);
  uint64_t v104 = *(void *)(v13 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v13);
  uint64_t v114 = (char *)v103 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)v103 - v16;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E040);
  uint64_t v106 = *(void *)(v18 - 8);
  uint64_t v107 = v18;
  MEMORY[0x1895F8858](v18);
  unint64_t v105 = (char *)v103 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58DA58);
  uint64_t v21 = MEMORY[0x1895F8858](v20);
  v103[5] = (char *)v103 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v21);
  uint64_t v24 = (char *)v103 - v23;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(qword_18C58DE30);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = MEMORY[0x1895F8858](v25);
  v103[3] = (char *)v103 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v27);
  uint64_t v30 = (char *)v103 - v29;
  int v31 = *(_DWORD *)(a1 + qword_18C58DD98);
  BYTE4(v115) = *(_BYTE *)(a1 + qword_18C58DD98 + 4);
  LODWORD(v115) = v31;
  unint64_t v108 = HIDWORD(a2);
  char v121 = BYTE4(a2);
  unint64_t v110 = a2;
  unsigned int v120 = a2;
  uint64_t result = _s7Network9SendStateO2eeoiySbAC_ACtFZ_0((unsigned int *)&v115, &v120);
  if ((result & 1) == 0)
  {
    uint64_t v109 = a1;
    uint64_t v33 = a1 + qword_18C58DA50;
    swift_beginAccess();
    sub_181BE48BC(v33, (uint64_t)v24, &qword_18C58DA58);
    uint64_t v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
    int v35 = v34(v24, 1LL, v25);
    v103[2] = v25;
    v103[1] = v26;
    if (v35 == 1)
    {
      sub_181BDA0F0((uint64_t)v24, &qword_18C58DA58);
      unint64_t v36 = v110;
      uint64_t v37 = (v110 >> 38) & 3;
      if ((_DWORD)v37)
      {
LABEL_4:
        if ((_DWORD)v37 != 1) {
          __asm { BR              X10 }
        }

        uint64_t v38 = HIDWORD(v36) & 0x3F;
        uint64_t v39 = v109;
        sub_181C564D0(&v115);
        uint64_t v40 = v116;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v41 = (uint64_t)v40;
        uint64_t v42 = *((void *)v40 + 2);
        uint64_t v112 = (char *)v38;
        if (v42)
        {
          os_signpost_type_t v111 = (char *)v4;
          uint64_t v43 = v104;
          unint64_t v44 = (*(unsigned __int8 *)(v104 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80);
          uint64_t v107 = v41;
          unint64_t v45 = v41 + v44;
          uint64_t v46 = *(void *)(v104 + 72);
          uint64_t v47 = *(void (**)(char *, unint64_t, uint64_t))(v104 + 16);
          char v48 = v38;
          int v49 = v110;
          uint64_t v50 = v114;
          do
          {
            v47(v50, v45, v13);
            sub_181BBE220();
            uint64_t v51 = swift_allocError();
            *(_DWORD *)uint64_t v52 = v49;
            *(_BYTE *)(v52 + 4) = v48;
            uint64_t v115 = v51;
            sub_18264ED78();
            uint64_t v50 = v114;
            (*(void (**)(char *, uint64_t))(v43 + 8))(v114, v13);
            v45 += v46;
            --v42;
          }

          while (v42);
          swift_bridgeObjectRelease();
          uint64_t v39 = v109;
          uint64_t v4 = (uint64_t)v111;
        }

        else
        {
          swift_bridgeObjectRelease();
        }

        uint64_t v63 = (char *)(v39 + qword_18C58DA60);
        swift_beginAccess();
        uint64_t v64 = MEMORY[0x18961AFE8];
        *((void *)v63 + 1) = MEMORY[0x18961AFE8];
        swift_bridgeObjectRelease();
        sub_181C564D0(&v115);
        uint64_t v65 = v117;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v66 = *((void *)v65 + 2);
        uint64_t v114 = v63;
        if (v66)
        {
          char v67 = (char)v112;
          uint64_t v68 = v113;
          unint64_t v69 = (*(unsigned __int8 *)(v113 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v113 + 80);
          os_signpost_type_t v111 = v65;
          uint64_t v70 = &v65[v69];
          uint64_t v71 = *(void *)(v113 + 72);
          uint64_t v72 = *(void (**)(char *, char *, uint64_t))(v113 + 16);
          int v73 = v110;
          do
          {
            v72(v7, v70, v4);
            sub_181BBE220();
            uint64_t v74 = swift_allocError();
            *(_DWORD *)uint64_t v75 = v73;
            *(_BYTE *)(v75 + 4) = v67;
            uint64_t v115 = v74;
            sub_18264ED78();
            (*(void (**)(char *, uint64_t))(v68 + 8))(v7, v4);
            v70 += v71;
            --v66;
          }

          while (v66);
          swift_bridgeObjectRelease();
          uint64_t v63 = v114;
          uint64_t v64 = MEMORY[0x18961AFE8];
        }

        else
        {
          swift_bridgeObjectRelease();
        }

        *((void *)v63 + 2) = v64;
        swift_bridgeObjectRelease();
        sub_181C564D0(&v115);
        uint64_t v80 = v118;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v81 = *((void *)v80 + 2);
        if (v81)
        {
          char v82 = (char)v112;
          uint64_t v83 = v113;
          unint64_t v84 = (*(unsigned __int8 *)(v113 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v113 + 80);
          os_signpost_type_t v111 = v80;
          char v85 = &v80[v84];
          uint64_t v86 = *(void *)(v113 + 72);
          char v87 = *(void (**)(char *, char *, uint64_t))(v113 + 16);
          int v88 = v110;
          do
          {
            v87(v7, v85, v4);
            sub_181BBE220();
            uint64_t v89 = swift_allocError();
            *(_DWORD *)uint64_t v90 = v88;
            *(_BYTE *)(v90 + 4) = v82;
            uint64_t v115 = v89;
            sub_18264ED78();
            (*(void (**)(char *, uint64_t))(v83 + 8))(v7, v4);
            v85 += v86;
            --v81;
          }

          while (v81);
          swift_bridgeObjectRelease();
          char v91 = v82;
          uint64_t v63 = v114;
          uint64_t v64 = MEMORY[0x18961AFE8];
        }

        else
        {
          swift_bridgeObjectRelease();
          char v91 = (char)v112;
        }

        *((void *)v63 + 3) = v64;
        swift_bridgeObjectRelease();
        sub_181C564D0(&v115);
        uint64_t v92 = v119;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v93 = *((void *)v92 + 2);
        if (v93)
        {
          unint64_t v94 = (*(unsigned __int8 *)(v113 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v113 + 80);
          os_signpost_type_t v111 = v92;
          id v95 = &v92[v94];
          uint64_t v96 = *(void *)(v113 + 72);
          v97 = *(void (**)(char *, char *, uint64_t))(v113 + 16);
          char v98 = v91;
          int v99 = v110;
          do
          {
            v97(v7, v95, v4);
            sub_181BBE220();
            uint64_t v100 = swift_allocError();
            *(_DWORD *)uint64_t v101 = v99;
            *(_BYTE *)(v101 + 4) = v98;
            uint64_t v115 = v100;
            sub_18264ED78();
            (*(void (**)(char *, uint64_t))(v113 + 8))(v7, v4);
            v95 += v96;
            --v93;
          }

          while (v93);
          swift_bridgeObjectRelease();
          uint64_t v63 = v114;
          uint64_t v64 = MEMORY[0x18961AFE8];
        }

        else
        {
          swift_bridgeObjectRelease();
        }

        *((void *)v63 + 4) = v64;
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v76 = v109;
        int v79 = v110;
        unint64_t v78 = (void *)&unk_18C58D000;
        char v61 = v108;
        goto LABEL_34;
      }
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v30, v24, v25);
      BYTE4(v115) = v108;
      unint64_t v36 = v110;
      LODWORD(v115) = v110;
      v103[0] = v34;
      unint64_t v53 = v105;
      sub_18264EDFC();
      (*(void (**)(char *, uint64_t))(v106 + 8))(v53, v107);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v30, v25);
      uint64_t v37 = (v36 >> 38) & 3;
      if ((_DWORD)v37) {
        goto LABEL_4;
      }
    }

    sub_181C564D0(&v115);
    unint64_t v54 = v116;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v55 = *((void *)v54 + 2);
    if (v55)
    {
      uint64_t v56 = v104;
      unint64_t v57 = (*(unsigned __int8 *)(v104 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80);
      uint64_t v114 = v54;
      uint64_t v58 = &v54[v57];
      uint64_t v59 = *(void *)(v104 + 72);
      __int128 v60 = *(void (**)(char *, char *, uint64_t))(v104 + 16);
      char v61 = v108;
      int v62 = v110;
      do
      {
        v60(v17, v58, v13);
        LODWORD(v115) = v62;
        BYTE4(v115) = v61;
        sub_18264ED84();
        (*(void (**)(char *, uint64_t))(v56 + 8))(v17, v13);
        v58 += v59;
        --v55;
      }

      while (v55);
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRelease();
      char v61 = v108;
    }

    uint64_t v76 = v109;
    uint64_t v77 = v109 + qword_18C58DA60;
    swift_beginAccess();
    *(void *)(v77 + 8) = MEMORY[0x18961AFE8];
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v78 = &unk_18C58D000;
    int v79 = v110;
LABEL_34:
    uint64_t v102 = v76 + v78[435];
    *(_BYTE *)(v102 + 4) = v61;
    *(_DWORD *)uint64_t v102 = v79;
  }

  return result;
}

uint64_t sub_181C5761C@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  *a1 = sub_181C6393C;
  a1[1] = v1;
  return swift_retain();
}

uint64_t sub_181C57630(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = a2;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E040);
  uint64_t v3 = *(void *)(v20 - 8);
  MEMORY[0x1895F8858](v20);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58DA58);
  uint64_t v7 = MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v7);
  uint64_t v11 = (char *)&v20 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(qword_18C58DE30);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = a1 + qword_18C58DA50;
  swift_beginAccess();
  sub_181BE48BC(v16, (uint64_t)v11, &qword_18C58DA58);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
  {
    sub_181BDA0F0((uint64_t)v11, &qword_18C58DA58);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
    sub_18264EE08();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v9, 1LL, 1LL, v12);
    sub_181C564BC((uint64_t)v9);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }

  int v17 = *(_DWORD *)(a1 + qword_18C58DD98);
  char v23 = *(_BYTE *)(a1 + qword_18C58DD98 + 4);
  int v22 = v17;
  uint64_t v18 = v21;
  sub_18264EDFC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v9, v18, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v9, 0LL, 1LL, v12);
  sub_181C564BC((uint64_t)v9);
  swift_retain();
  return sub_18264EDE4();
}

uint64_t sub_181C578CC()
{
  *(void *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t sub_181C578E4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  void *v1 = v0;
  v1[1] = sub_181C57958;
  return sub_18264F594();
}

uint64_t sub_181C57958()
{
  *(void *)(*(void *)v1 + 32LL) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_181C579BC()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181C579C8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181C579D4(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v26 = a5;
  uint64_t v27 = a6;
  v25[1] = a4;
  uint64_t v9 = (void *)*a2;
  uint64_t v10 = sub_18264E964();
  uint64_t v30 = *(void *)(v10 - 8);
  uint64_t v31 = v10;
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_18264E97C();
  uint64_t v28 = *(void *)(v13 - 8);
  uint64_t v29 = v13;
  MEMORY[0x1895F8858](v13);
  uint64_t v15 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  MEMORY[0x1895F8858](v16);
  uint64_t v19 = (char *)v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_18C58B218 != -1) {
    swift_once();
  }
  uint64_t v25[2] = qword_18C5A4A28;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))( (char *)v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v16);
  unint64_t v20 = (*(unsigned __int8 *)(v17 + 80) + 64LL) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v21 = (char *)swift_allocObject();
  *((void *)v21 + 2) = v9[10];
  *((void *)v21 + 3) = v9[11];
  *((void *)v21 + 4) = swift_allocateMetadataPack();
  *((void *)v21 + 5) = v9[13];
  *((void *)v21 + 6) = swift_allocateWitnessTablePack();
  *((void *)v21 + 7) = a2;
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(&v21[v20], v19, v16);
  aBlock[4] = v26;
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_181C32D2C;
  void aBlock[3] = v27;
  int v22 = _Block_copy(aBlock);
  swift_retain();
  sub_18264E970();
  uint64_t v32 = MEMORY[0x18961AFE8];
  sub_181BD67D4( (unint64_t *)&qword_18C45E550,  (uint64_t (*)(uint64_t))MEMORY[0x18961B6A0],  MEMORY[0x18961B6B8]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C45E560);
  sub_181C65D48((unint64_t *)&qword_18C45E570, (uint64_t *)&unk_18C45E560);
  uint64_t v23 = v31;
  sub_18264F108();
  MEMORY[0x186E0EBEC](0LL, v15, v12, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v23);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v15, v29);
  return swift_release();
}

uint64_t sub_181C57C94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A1F0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(char *)(a1 + qword_18C58DD98 + 4);
  int64_t v9 = *(unsigned int *)(a1 + qword_18C58DD98) | (unint64_t)(v8 << 32);
  if (v8 >> 6 == 1)
  {
    sub_181BBE220();
    uint64_t v10 = swift_allocError();
    *(_DWORD *)uint64_t v11 = v9;
    *(_BYTE *)(v11 + 4) = BYTE4(v9) & 0x3F;
    v18[1] = v10;
    return sub_18264ED78();
  }

uint64_t sub_181C57E6C()
{
  return sub_181C57E68();
}

uint64_t sub_181C57E8C()
{
  return sub_181C56480();
}

uint64_t sub_181C57EAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181C5BBF0(a1, a2, a3, (void (*)(_BYTE *))sub_181C56480);
}

unsigned int *sub_181C57EB8(unsigned int *a1)
{
  return sub_181C566C4(a1);
}

BOOL sub_181C57ED8(uint64_t *a1, uint64_t *a2)
{
  return static SendProgress.== infix(_:_:)(*a1, *a2);
}

nw_protocol_options_t TLS.init()@<X0>(nw_protocol_options_t *a1@<X8>)
{
  nw_protocol_options_t result = nw_tls_create_options();
  *a1 = result;
  return result;
}

uint64_t TLS.configure(parameters:)(nw_parameters *a1)
{
  return sub_181C58480(a1, (void (*)(void))nw_protocol_stack_append_application_protocol);
}

uint64_t sub_181C57F28(nw_parameters *a1, uint64_t a2, uint64_t a3)
{
  return sub_181C584BC(a1, a2, a3, (void (*)(void))nw_protocol_stack_append_application_protocol);
}

uint64_t TCP.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = nw_tcp_create_options();
  return v0;
}

uint64_t TCP.init()()
{
  *(void *)(v0 + 16) = nw_tcp_create_options();
  return v0;
}

uint64_t TCP.noDelay(_:)(char a1)
{
  return sub_181C58048(a1, (void (*)(void, void))nw_tcp_options_set_no_delay);
}

uint64_t TCP.noPush(_:)(char a1)
{
  return sub_181C58048(a1, (void (*)(void, void))nw_tcp_options_set_no_push);
}

uint64_t TCP.noOptions(_:)(char a1)
{
  return sub_181C58048(a1, (void (*)(void, void))nw_tcp_options_set_no_options);
}

uint64_t TCP.enableKeepalive(_:)(char a1)
{
  return sub_181C58048(a1, (void (*)(void, void))nw_tcp_options_set_enable_keepalive);
}

uint64_t TCP.keepaliveCount(_:)(uint64_t a1)
{
  return sub_181C5800C(a1, (void (*)(void, uint64_t))nw_tcp_options_set_keepalive_count);
}

uint64_t TCP.keepaliveIdle(_:)(uint64_t a1)
{
  return sub_181C5800C(a1, (void (*)(void, uint64_t))nw_tcp_options_set_keepalive_idle_time);
}

uint64_t TCP.keepaliveInterval(_:)(uint64_t a1)
{
  return sub_181C5800C(a1, (void (*)(void, uint64_t))nw_tcp_options_set_keepalive_interval);
}

uint64_t TCP.maximumSegmentSize(_:)(uint64_t a1)
{
  return sub_181C5800C(a1, (void (*)(void, uint64_t))nw_tcp_options_set_maximum_segment_size);
}

uint64_t TCP.connectionTimeout(_:)(uint64_t a1)
{
  return sub_181C5800C(a1, (void (*)(void, uint64_t))nw_tcp_options_set_connection_timeout);
}

uint64_t TCP.persistTimeout(_:)(uint64_t a1)
{
  return sub_181C5800C(a1, (void (*)(void, uint64_t))nw_tcp_options_set_persist_timeout);
}

uint64_t TCP.retransmitConnectionDropTime(_:)(uint64_t a1)
{
  return sub_181C5800C(a1, (void (*)(void, uint64_t))nw_tcp_options_set_retransmit_connection_drop_time);
}

uint64_t sub_181C5800C(uint64_t a1, void (*a2)(void, uint64_t))
{
  return swift_retain();
}

uint64_t TCP.retransmitFinDrop(_:)(char a1)
{
  return sub_181C58048(a1, (void (*)(void, void))nw_tcp_options_set_retransmit_fin_drop);
}

uint64_t TCP.enableFastOpen(_:)(char a1)
{
  return sub_181C58048(a1, (void (*)(void, void))nw_tcp_options_set_enable_fast_open);
}

uint64_t sub_181C58048(char a1, void (*a2)(void, void))
{
  return swift_retain();
}

uint64_t TCP.configure(parameters:)(nw_parameters *a1)
{
  uint64_t v2 = nw_parameters_copy_default_protocol_stack(a1);
  nw_protocol_stack_set_transport_protocol(v2, *(nw_protocol_options_t *)(v1 + 16));
  return swift_unknownObjectRelease();
}

uint64_t TCP.deinit()
{
  return v0;
}

uint64_t TCP.__deallocating_deinit()
{
  return sub_181BE9F50();
}

uint64_t sub_181C580C0(nw_parameters *a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = nw_parameters_copy_default_protocol_stack(a1);
  nw_protocol_stack_set_transport_protocol(v3, *(nw_protocol_options_t *)(v2 + 16));
  return swift_unknownObjectRelease();
}

nw_protocol_options_t QUIC.init()@<X0>(nw_protocol_options_t *a1@<X8>)
{
  nw_protocol_options_t result = nw_quic_create_options();
  *a1 = result;
  return result;
}

uint64_t QUIC.configure(parameters:)(nw_parameters *a1)
{
  return sub_181C58480(a1, (void (*)(void))nw_protocol_stack_set_transport_protocol);
}

uint64_t sub_181C58120(nw_parameters *a1, uint64_t a2, uint64_t a3)
{
  return sub_181C584BC(a1, a2, a3, (void (*)(void))nw_protocol_stack_set_transport_protocol);
}

nw_protocol_options_t UDP.init()@<X0>(nw_protocol_options_t *a1@<X8>)
{
  nw_protocol_options_t result = nw_udp_create_options();
  *a1 = result;
  return result;
}

uint64_t UDP.preferNoChecksum(_:)@<X0>(char a1@<W0>, void *a2@<X8>)
{
  return sub_181C58264(a1, (void (*)(uint64_t, void))nw_udp_options_set_prefer_no_checksum, a2);
}

uint64_t UDP.configure(parameters:)(nw_parameters *a1)
{
  return sub_181C58480(a1, (void (*)(void))nw_protocol_stack_set_transport_protocol);
}

NWConcrete_nw_protocol_options *IP.init()@<X0>(NWConcrete_nw_protocol_options **a1@<X8>)
{
  nw_protocol_options_t result = nw_ip_create_options();
  *a1 = result;
  return result;
}

uint64_t IP.version(_:)@<X0>(char *a1@<X0>, nw_protocol_options **a2@<X8>)
{
  uint64_t v4 = *v2;
  nw_ip_options_set_version(v4, dword_182662138[*a1]);
  *a2 = v4;
  return swift_unknownObjectRetain();
}

uint64_t IP.hopLimit(_:)@<X0>(uint8_t a1@<W0>, nw_protocol_options **a2@<X8>)
{
  uint64_t v4 = *v2;
  nw_ip_options_set_hop_limit(v4, a1);
  *a2 = v4;
  return swift_unknownObjectRetain();
}

uint64_t IP.useMinimumMTU(_:)@<X0>(char a1@<W0>, void *a2@<X8>)
{
  return sub_181C58264(a1, (void (*)(uint64_t, void))nw_ip_options_set_use_minimum_mtu, a2);
}

uint64_t IP.disableFragmentation(_:)@<X0>(char a1@<W0>, void *a2@<X8>)
{
  return sub_181C58264(a1, (void (*)(uint64_t, void))nw_ip_options_set_disable_fragmentation, a2);
}

uint64_t IP.calculateReceiveTime(_:)@<X0>(char a1@<W0>, void *a2@<X8>)
{
  return sub_181C58264(a1, (void (*)(uint64_t, void))nw_ip_options_set_calculate_receive_time, a2);
}

uint64_t IP.localAddressPreference(_:)@<X0>(unsigned __int8 *a1@<X0>, nw_protocol_options **a2@<X8>)
{
  uint64_t v4 = *v2;
  nw_ip_options_set_local_address_preference(v4, (nw_ip_local_address_preference_t)*a1);
  *a2 = v4;
  return swift_unknownObjectRetain();
}

uint64_t IP.disableMulticastLoopback(_:)@<X0>(char a1@<W0>, void *a2@<X8>)
{
  return sub_181C58264(a1, (void (*)(uint64_t, void))nw_ip_options_set_disable_multicast_loopback, a2);
}

uint64_t sub_181C58264@<X0>(char a1@<W0>, void (*a2)(uint64_t, void)@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *v3;
  a2(v5, a1 & 1);
  *a3 = v5;
  return swift_unknownObjectRetain();
}

uint64_t IP.configure(parameters:)(nw_parameters *a1)
{
  return sub_181C58480(a1, (void (*)(void))nw_protocol_stack_set_internet_protocol);
}

uint64_t sub_181C582A8(nw_parameters *a1, uint64_t a2, uint64_t a3)
{
  return sub_181C584BC(a1, a2, a3, (void (*)(void))nw_protocol_stack_set_internet_protocol);
}

nw_protocol_options_t TLV.init()@<X0>(uint64_t *a1@<X8>)
{
  if (qword_18C58B210 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_18C5A4A20;
  type metadata accessor for NWProtocolFramer.Options();
  uint64_t v3 = swift_allocObject();
  nw_protocol_options_t result = nw_framer_create_options(*(nw_protocol_definition_t *)(v2 + 32));
  *(void *)(v3 + 16) = result;
  *a1 = v3;
  return result;
}

uint64_t TLV.configure(parameters:)(nw_parameters *a1)
{
  uint64_t v2 = *v1;
  nw_protocol_stack_t v3 = nw_parameters_copy_default_protocol_stack(a1);
  nw_protocol_stack_append_application_protocol(v3, *(void **)(v2 + 16));
  return swift_unknownObjectRelease();
}

uint64_t sub_181C58360(nw_parameters *a1)
{
  uint64_t v2 = *v1;
  nw_protocol_stack_t v3 = nw_parameters_copy_default_protocol_stack(a1);
  nw_protocol_stack_append_application_protocol(v3, *(void **)(v2 + 16));
  return swift_unknownObjectRelease();
}

nw_protocol_options_t JSON.init(_:)@<X0>(uint64_t *a1@<X8>)
{
  if (qword_18C58B210 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_18C5A4A20;
  type metadata accessor for NWProtocolFramer.Options();
  uint64_t v3 = swift_allocObject();
  nw_protocol_options_t result = nw_framer_create_options(*(nw_protocol_definition_t *)(v2 + 32));
  *(void *)(v3 + 16) = result;
  *a1 = v3;
  return result;
}

uint64_t JSON.options.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t JSON.configure(parameters:)(nw_parameters *a1)
{
  uint64_t v2 = *v1;
  nw_protocol_stack_t v3 = nw_parameters_copy_default_protocol_stack(a1);
  nw_protocol_stack_append_application_protocol(v3, *(void **)(v2 + 16));
  return swift_unknownObjectRelease();
}

nw_protocol_options_t WebSocket.init()@<X0>(nw_protocol_options_t *a1@<X8>)
{
  nw_protocol_options_t result = nw_ws_create_options(nw_ws_version_13);
  *a1 = result;
  return result;
}

uint64_t WebSocket.configure(parameters:)(nw_parameters *a1)
{
  return sub_181C58480(a1, (void (*)(void))nw_protocol_stack_append_application_protocol);
}

uint64_t sub_181C58480(nw_parameters *a1, void (*a2)(void))
{
  return swift_unknownObjectRelease();
}

uint64_t sub_181C584BC(nw_parameters *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  return swift_unknownObjectRelease();
}

uint64_t HTTP1.__allocating_init(enabled:)(char a1)
{
  return sub_181C585A8(a1, (uint64_t (*)(void))nw_http1_create_options);
}

uint64_t HTTP1.init(enabled:)(char a1)
{
  *(void *)(v1 + 16) = nw_http1_create_options();
  *(_BYTE *)(v1 + 24) = a1;
  return v1;
}

uint64_t HTTP1.__deallocating_deinit()
{
  return sub_181BE9F50();
}

uint64_t sub_181C5853C@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  return sub_181C5867C(a1, (uint64_t (*)(void))nw_http1_create_options, a2);
}

uint64_t HTTP2.__allocating_init(enabled:)(char a1)
{
  return sub_181C585A8(a1, (uint64_t (*)(void))nw_http2_create_options);
}

uint64_t HTTP2.init(enabled:)(char a1)
{
  *(void *)(v1 + 16) = nw_http2_create_options();
  *(_BYTE *)(v1 + 24) = a1;
  return v1;
}

uint64_t HTTP2.__deallocating_deinit()
{
  return sub_181BE9F50();
}

uint64_t sub_181C58590@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  return sub_181C5867C(a1, (uint64_t (*)(void))nw_http2_create_options, a2);
}

uint64_t HTTP3.__allocating_init(enabled:)(char a1)
{
  return sub_181C585A8(a1, (uint64_t (*)(void))nw_http3_create_options);
}

uint64_t sub_181C585A8(char a1, uint64_t (*a2)(void))
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2();
  *(_BYTE *)(v4 + 24) = a1;
  return v4;
}

uint64_t HTTP3.init(enabled:)(char a1)
{
  *(void *)(v1 + 16) = nw_http3_create_options();
  *(_BYTE *)(v1 + 24) = a1;
  return v1;
}

nw_parameters *_s7Network5HTTP1C9configure10parametersySo06OS_nw_D0_p_tF_0(nw_parameters *result)
{
  if (*(_BYTE *)(v1 + 24) == 1)
  {
    nw_protocol_stack_t v2 = nw_parameters_copy_default_protocol_stack(result);
    nw_protocol_stack_append_application_protocol(v2, *(void **)(v1 + 16));
    return (nw_parameters *)swift_unknownObjectRelease();
  }

  return result;
}

uint64_t HTTP3.__deallocating_deinit()
{
  return sub_181BE9F50();
}

uint64_t sub_181C58670@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  return sub_181C5867C(a1, (uint64_t (*)(void))nw_http3_create_options, a2);
}

uint64_t sub_181C5867C@<X0>(char a1@<W0>, uint64_t (*a2)(void)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v6 = swift_allocObject();
  uint64_t result = a2();
  *(void *)(v6 + 16) = result;
  *(_BYTE *)(v6 + 24) = a1;
  *a3 = v6;
  return result;
}

nw_parameters *sub_181C586CC(nw_parameters *result)
{
  uint64_t v2 = *v1;
  if (*(_BYTE *)(v2 + 24) == 1)
  {
    nw_protocol_stack_t v3 = nw_parameters_copy_default_protocol_stack(result);
    nw_protocol_stack_append_application_protocol(v3, *(void **)(v2 + 16));
    return (nw_parameters *)swift_unknownObjectRelease();
  }

  return result;
}

uint64_t DefaultHTTP1()(nw_protocol_options_t *a1)
{
  return sub_181C5873C(a1, (void (*)(void))type metadata accessor for HTTP1, (uint64_t (*)(void))nw_http1_create_options);
}

uint64_t DefaultHTTP2()(nw_protocol_options_t *a1)
{
  return sub_181C5873C(a1, (void (*)(void))type metadata accessor for HTTP2, (uint64_t (*)(void))nw_http2_create_options);
}

uint64_t sub_181C5873C(nw_protocol_options_t *a1, void (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a3();
  *(_BYTE *)(v5 + 24) = 1;
  *a1 = nw_tls_create_options();
  type metadata accessor for TCP();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = nw_tcp_create_options();
  return v5;
}

uint64_t DefaultHTTP3()(nw_protocol_options_t *a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = nw_http3_create_options();
  *(_BYTE *)(v2 + 24) = 1;
  *a1 = nw_quic_create_options();
  return v2;
}

uint64_t HTTP.__allocating_init(insecure:)(uint64_t (*a1)(void))
{
  uint64_t v2 = swift_allocObject();
  options = nw_http_messaging_create_options();
  *(void *)(v2 + 16) = options;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(void *)(v2 + 56) = 0LL;
  uint64_t v4 = a1();
  nw_http_messaging_options_set_http1_options(options, *(void **)(v4 + 16));
  swift_release();
  swift_release();
  return v2;
}

uint64_t HTTP.init(insecure:)(uint64_t (*a1)(void))
{
  *(void *)(v1 + 16) = nw_http_messaging_create_options();
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(void *)(v1 + 56) = 0LL;
  uint64_t v3 = a1();
  nw_http_messaging_options_set_http1_options(*(void **)(v1 + 16), *(void **)(v3 + 16));
  swift_release();
  swift_release();
  return v1;
}

uint64_t HTTP.__allocating_init(h1:h2:h3:)( uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t (*a3)(uint64_t *), uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v10 = swift_allocObject();
  HTTP.init(h1:h2:h3:)(a1, a2, a3, a4, a5);
  return v10;
}

uint64_t sub_181C5897C( uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t (*a3)(uint64_t *), uint64_t a4, uint64_t a5)
{
  *(void *)(a5 + 16) = nw_http_messaging_create_options();
  *(_OWORD *)(a5 + 24) = 0u;
  *(_OWORD *)(a5 + 40) = 0u;
  *(void *)(a5 + 56) = 0LL;
  uint64_t v8 = a1(&v28);
  uint64_t v10 = v9;
  uint64_t v11 = v28;
  int v12 = *(unsigned __int8 *)(swift_retain() + 24);
  swift_release();
  if (v12 == 1)
  {
    uint64_t v13 = *(void **)(a5 + 16);
    swift_retain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    unint64_t v14 = *(void **)(v8 + 16);
    swift_unknownObjectRetain();
    swift_release();
    nw_http_messaging_options_set_http1_options(v13, v14);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_retain();
    swift_unknownObjectRetain();
    swift_release();
    *(void *)(a5 + 24) = v11;
    swift_unknownObjectRelease();
    swift_retain();
    swift_retain();
    swift_release();
    *(void *)(a5 + 32) = v10;
    swift_release();
  }

  uint64_t v15 = a3(&v28);
  uint64_t v17 = v16;
  uint64_t v18 = v28;
  swift_retain();
  int v19 = *(unsigned __int8 *)(v15 + 24);
  swift_release();
  if (v19 == 1)
  {
    unint64_t v20 = *(void **)(a5 + 16);
    swift_retain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    uint64_t v21 = *(void **)(v15 + 16);
    swift_unknownObjectRetain();
    swift_release();
    nw_http_messaging_options_set_http2_options(v20, v21);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_retain();
    swift_unknownObjectRetain();
    swift_release();
    *(void *)(a5 + 40) = v18;
    swift_unknownObjectRelease();
    swift_retain();
    swift_retain();
    swift_release();
    *(void *)(a5 + 48) = v17;
    swift_release();
  }

  type metadata accessor for HTTP3();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = nw_http3_create_options();
  *(_BYTE *)(inited + 24) = 0;
  nw_protocol_options_t options = nw_quic_create_options();
  swift_retain();
  int v24 = *(unsigned __int8 *)(inited + 24);
  swift_release();
  if (v24 == 1)
  {
    uint64_t v25 = *(void **)(a5 + 16);
    swift_retain();
    swift_unknownObjectRetain();
    uint64_t v26 = *(void **)(inited + 16);
    swift_unknownObjectRetain();
    swift_release();
    nw_http_messaging_options_set_http3_options(v25, v26);
    swift_release();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    *(void *)(a5 + 56) = options;
    swift_unknownObjectRelease();
  }

  else
  {
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
  }

  return a5;
}

uint64_t sub_181C58C8C( uint64_t (*a1)(nw_protocol_options_t *), uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5)
{
  *(void *)(a5 + 16) = nw_http_messaging_create_options();
  *(_OWORD *)(a5 + 24) = 0u;
  *(_OWORD *)(a5 + 40) = 0u;
  *(void *)(a5 + 56) = 0LL;
  uint64_t v8 = a1(&v29);
  uint64_t v10 = v9;
  nw_protocol_options_t v11 = v29;
  int v12 = *(unsigned __int8 *)(swift_retain() + 24);
  swift_release();
  if (v12 == 1)
  {
    uint64_t v13 = *(void **)(a5 + 16);
    swift_retain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    unint64_t v14 = *(void **)(v8 + 16);
    swift_unknownObjectRetain();
    swift_release();
    nw_http_messaging_options_set_http1_options(v13, v14);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_retain();
    swift_unknownObjectRetain();
    swift_release();
    *(void *)(a5 + 24) = v11;
    swift_unknownObjectRelease();
    swift_retain();
    swift_retain();
    swift_release();
    *(void *)(a5 + 32) = v10;
    swift_release();
  }

  uint64_t v15 = sub_181C59850( &v29,  (void (*)(void))type metadata accessor for HTTP2,  (uint64_t (*)(void))nw_http2_create_options);
  uint64_t v17 = v16;
  nw_protocol_options_t v18 = v29;
  int v19 = *(unsigned __int8 *)(swift_retain() + 24);
  swift_release();
  if (v19 == 1)
  {
    unint64_t v20 = *(void **)(a5 + 16);
    swift_retain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    uint64_t v21 = a3;
    int v22 = *(void **)(v15 + 16);
    swift_unknownObjectRetain();
    swift_release();
    nw_http_messaging_options_set_http2_options(v20, v22);
    swift_unknownObjectRelease();
    a3 = v21;
    swift_unknownObjectRelease();
    swift_retain();
    swift_unknownObjectRetain();
    swift_release();
    *(void *)(a5 + 40) = v18;
    swift_unknownObjectRelease();
    swift_retain();
    swift_retain();
    swift_release();
    *(void *)(a5 + 48) = v17;
    swift_release();
  }

  uint64_t v23 = a3(&v29);
  nw_protocol_options_t v24 = v29;
  int v25 = *(unsigned __int8 *)(swift_retain() + 24);
  swift_release();
  if (v25 == 1)
  {
    uint64_t v26 = *(void **)(a5 + 16);
    swift_retain();
    uint64_t v27 = *(void **)(v23 + 16);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_release();
    nw_http_messaging_options_set_http3_options(v26, v27);
    swift_release();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    *(void *)(a5 + 56) = v24;
    swift_unknownObjectRelease();
  }

  else
  {
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
  }

  return a5;
}

uint64_t sub_181C58F94( uint64_t (*a1)(nw_protocol_options_t *), uint64_t a2, uint64_t (*a3)(nw_protocol_options_t *), uint64_t a4, uint64_t a5)
{
  *(void *)(a5 + 16) = nw_http_messaging_create_options();
  *(_OWORD *)(a5 + 24) = 0u;
  *(_OWORD *)(a5 + 40) = 0u;
  *(void *)(a5 + 56) = 0LL;
  uint64_t v7 = sub_181C59850(&v28, (void (*)(void))type metadata accessor for HTTP1, (uint64_t (*)(void))nw_http1_create_options);
  uint64_t v9 = v8;
  nw_protocol_options_t v10 = v28;
  int v11 = *(unsigned __int8 *)(swift_retain() + 24);
  swift_release();
  if (v11 == 1)
  {
    int v12 = *(void **)(a5 + 16);
    swift_retain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    uint64_t v13 = *(void **)(v7 + 16);
    swift_unknownObjectRetain();
    swift_release();
    nw_http_messaging_options_set_http1_options(v12, v13);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_retain();
    swift_unknownObjectRetain();
    swift_release();
    *(void *)(a5 + 24) = v10;
    swift_unknownObjectRelease();
    swift_retain();
    swift_retain();
    swift_release();
    *(void *)(a5 + 32) = v9;
    swift_release();
  }

  uint64_t v14 = a1(&v28);
  uint64_t v16 = v15;
  nw_protocol_options_t v17 = v28;
  int v18 = *(unsigned __int8 *)(swift_retain() + 24);
  swift_release();
  if (v18 == 1)
  {
    int v19 = *(void **)(a5 + 16);
    swift_retain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    unint64_t v20 = *(void **)(v14 + 16);
    swift_unknownObjectRetain();
    swift_release();
    nw_http_messaging_options_set_http2_options(v19, v20);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_retain();
    swift_unknownObjectRetain();
    swift_release();
    *(void *)(a5 + 40) = v17;
    swift_unknownObjectRelease();
    swift_retain();
    swift_retain();
    swift_release();
    *(void *)(a5 + 48) = v16;
    swift_release();
  }

  uint64_t v21 = a3(&v28);
  nw_protocol_options_t v22 = v28;
  int v23 = *(unsigned __int8 *)(swift_retain() + 24);
  swift_release();
  if (v23 == 1)
  {
    nw_protocol_options_t v24 = *(void **)(a5 + 16);
    swift_retain();
    int v25 = *(void **)(v21 + 16);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_release();
    nw_http_messaging_options_set_http3_options(v24, v25);
    swift_release();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    *(void *)(a5 + 56) = v22;
    swift_unknownObjectRelease();
  }

  else
  {
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
  }

  return a5;
}

void *HTTP.init(h1:h2:h3:)( uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t (*a3)(uint64_t *), uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = (void *)v5;
  *(void *)(v5 + 16) = nw_http_messaging_create_options();
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(void *)(v5 + 56) = 0LL;
  uint64_t v10 = a1(&v31);
  uint64_t v12 = v11;
  uint64_t v13 = v31;
  int v14 = *(unsigned __int8 *)(swift_retain() + 24);
  swift_release();
  if (v14 == 1)
  {
    uint64_t v15 = (void *)v6[2];
    swift_retain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    uint64_t v16 = *(void **)(v10 + 16);
    swift_unknownObjectRetain();
    swift_release();
    nw_http_messaging_options_set_http1_options(v15, v16);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_retain();
    swift_unknownObjectRetain();
    swift_release();
    v6[3] = v13;
    swift_unknownObjectRelease();
    swift_retain();
    swift_retain();
    swift_release();
    v6[4] = v12;
    swift_release();
  }

  uint64_t v17 = a3(&v31);
  uint64_t v19 = v18;
  uint64_t v20 = v31;
  int v21 = *(unsigned __int8 *)(swift_retain() + 24);
  swift_release();
  if (v21 == 1)
  {
    nw_protocol_options_t v22 = (void *)v6[2];
    swift_retain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    int v23 = a5;
    nw_protocol_options_t v24 = *(void **)(v17 + 16);
    swift_unknownObjectRetain();
    swift_release();
    nw_http_messaging_options_set_http2_options(v22, v24);
    swift_unknownObjectRelease();
    a5 = v23;
    swift_unknownObjectRelease();
    swift_retain();
    swift_unknownObjectRetain();
    swift_release();
    v6[5] = v20;
    swift_unknownObjectRelease();
    swift_retain();
    swift_retain();
    swift_release();
    void v6[6] = v19;
    swift_release();
  }

  uint64_t v25 = a5(&v31);
  uint64_t v26 = v31;
  int v27 = *(unsigned __int8 *)(swift_retain() + 24);
  swift_release();
  if (v27 == 1)
  {
    nw_protocol_options_t v28 = (void *)v6[2];
    swift_retain();
    nw_protocol_options_t v29 = *(void **)(v25 + 16);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_release();
    nw_http_messaging_options_set_http3_options(v28, v29);
    swift_release();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    v6[7] = v26;
    swift_unknownObjectRelease();
  }

  else
  {
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
  }

  return v6;
}

uint64_t HTTP.__allocating_init(h1:h2:h3:)( uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t (*a3)(uint64_t *), uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  return sub_181C5897C(a1, a2, a3, a4, v8);
}

uint64_t HTTP.__allocating_init(h1:h2:h3:)( uint64_t (*a1)(nw_protocol_options_t *), uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v9 = swift_allocObject();
  return sub_181C58C8C(a1, a2, a4, a5, v9);
}

uint64_t HTTP.__allocating_init(h1:h2:h3:)( uint64_t a1, uint64_t (*a2)(nw_protocol_options_t *), uint64_t a3, uint64_t (*a4)(nw_protocol_options_t *), uint64_t a5)
{
  uint64_t v9 = swift_allocObject();
  return sub_181C58F94(a2, a3, a4, a5, v9);
}

uint64_t HTTP.__allocating_init(h1:h2:h3:)(uint64_t (*a1)(uint64_t *), uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  HTTP.init(h1:h2:h3:)( a1,  a2,  (uint64_t (*)(uint64_t *))sub_181C5970C,  0LL,  (uint64_t (*)(void))sub_181C59720);
  return v4;
}

uint64_t sub_181C5970C(nw_protocol_options_t *a1)
{
  return sub_181C59850(a1, (void (*)(void))type metadata accessor for HTTP2, (uint64_t (*)(void))nw_http2_create_options);
}

uint64_t HTTP.__allocating_init(h1:h2:h3:)(uint64_t a1, uint64_t (*a2)(uint64_t *), uint64_t a3)
{
  uint64_t v5 = swift_allocObject();
  HTTP.init(h1:h2:h3:)( (uint64_t (*)(uint64_t *))sub_181C5978C,  0LL,  a2,  a3,  (uint64_t (*)(void))sub_181C59720);
  return v5;
}

uint64_t sub_181C5978C(nw_protocol_options_t *a1)
{
  return sub_181C59850(a1, (void (*)(void))type metadata accessor for HTTP1, (uint64_t (*)(void))nw_http1_create_options);
}

uint64_t sub_181C597A0(nw_protocol_options_t *a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = nw_http3_create_options();
  *(_BYTE *)(v2 + 24) = 0;
  *a1 = nw_quic_create_options();
  return v2;
}

uint64_t HTTP.__allocating_init(h1:h2:h3:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4 = swift_allocObject();
  HTTP.init(h1:h2:h3:)( (uint64_t (*)(uint64_t *))sub_181C5978C,  0LL,  (uint64_t (*)(uint64_t *))sub_181C5970C,  0LL,  a3);
  return v4;
}

uint64_t sub_181C59850(nw_protocol_options_t *a1, void (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a3();
  *(_BYTE *)(v5 + 24) = 0;
  nw_protocol_options_t options = nw_tls_create_options();
  type metadata accessor for TCP();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = nw_tcp_create_options();
  *a1 = options;
  return v5;
}

uint64_t HTTP.configure(parameters:)(nw_parameters *a1)
{
  id v3 = nw_http_messaging_options_copy_http1_options(*(void **)(v1 + 16));
  swift_unknownObjectRelease();
  id v4 = nw_http_messaging_options_copy_http2_options(*(void **)(v1 + 16));
  swift_unknownObjectRelease();
  id v5 = nw_http_messaging_options_copy_http3_options(*(void **)(v1 + 16));
  swift_unknownObjectRelease();
  uint64_t v6 = nw_parameters_copy_default_protocol_stack(a1);
  uint64_t v7 = *(void **)(v1 + 40);
  if (v7)
  {
    swift_unknownObjectRetain();
    if (v5) {
      nw_tls_options_add_transport_specific_application_protocol(v7, (uint64_t)"h3");
    }
    if (v4) {
      nw_tls_options_add_transport_specific_application_protocol(v7, (uint64_t)"h2");
    }
    if (v3) {
      nw_tls_options_add_transport_specific_application_protocol(v7, (uint64_t)"http/1.1");
    }
    swift_unknownObjectRelease();
  }

  uint64_t v8 = *(void **)(v1 + 24);
  if (v8)
  {
    swift_unknownObjectRetain();
    if (v5) {
      nw_tls_options_add_transport_specific_application_protocol(v8, (uint64_t)"h3");
    }
    if (v4) {
      nw_tls_options_add_transport_specific_application_protocol(v8, (uint64_t)"h2");
    }
    if (v3) {
      nw_tls_options_add_transport_specific_application_protocol(v8, (uint64_t)"http/1.1");
    }
    swift_unknownObjectRelease();
  }

  uint64_t v9 = *(nw_protocol_options **)(v1 + 56);
  if (v9) {
    goto LABEL_21;
  }
  uint64_t v10 = *(void *)(v1 + 48);
  if (v10 || (uint64_t v10 = *(void *)(v1 + 32)) != 0)
  {
    uint64_t v9 = *(nw_protocol_options **)(v10 + 16);
LABEL_21:
    nw_protocol_stack_set_transport_protocol(v6, v9);
  }

  nw_protocol_stack_append_application_protocol(v6, *(void **)(v1 + 16));
  BOOL v11 = nw_array_create();
  uint64_t v12 = *(void **)(v1 + 56);
  if (v12)
  {
    swift_unknownObjectRetain();
    uint64_t v13 = nw_protocol_transform_create();
    nw_protocol_transform_clear_protocols_at_level(v13, 3);
    nw_protocol_transform_append_protocol(v13, 3, v12);
    nw_protocol_transform_set_fallback_mode(v13, 2);
    nw_protocol_transform_add_match_url_scheme(v13, "https");
    nw_protocol_transform_add_match_url_scheme(v13, "wss");
    nw_protocol_transform_set_prohibit_direct(v13, 1);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    nw_array_append(v11, v13);
    swift_unknownObjectRelease_n();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }

  int v14 = *(void **)(v1 + 40);
  if (v14 && (uint64_t v15 = *(void *)(v1 + 48)) != 0
    || (v14 = *(void **)(v1 + 24)) != 0LL && (uint64_t v15 = *(void *)(v1 + 32)) != 0)
  {
    swift_unknownObjectRetain();
    swift_retain();
    uint64_t v16 = nw_protocol_transform_create();
    nw_protocol_transform_clear_protocols_at_level(v16, 3);
    uint64_t v17 = nw_protocol_options_copy(v14);
    nw_protocol_transform_append_protocol(v16, 4, v17);
    swift_unknownObjectRelease();
    nw_protocol_transform_append_protocol(v16, 3, *(void **)(v15 + 16));
    nw_protocol_transform_add_match_url_scheme(v16, "https");
    nw_protocol_transform_add_match_url_scheme(v16, "wss");
    nw_protocol_transform_set_prohibit_direct(v16, 1);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    nw_array_append(v11, v16);
    swift_release();
    swift_unknownObjectRelease_n();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }

  uint64_t v18 = *(void *)(v1 + 32);
  if (v18)
  {
    swift_retain();
    uint64_t v19 = nw_protocol_transform_create();
    nw_protocol_transform_clear_protocols_at_level(v19, 3);
    nw_protocol_transform_append_protocol(v19, 3, *(void **)(v18 + 16));
    nw_protocol_transform_add_match_url_scheme(v19, "http");
    nw_protocol_transform_add_match_url_scheme(v19, "ws");
    nw_protocol_transform_set_prohibit_direct(v19, 1);
    nw_array_append(v11, v19);
    swift_unknownObjectRelease();
    swift_release();
  }

  if (nw_array_get_count(v11) >= 1) {
    nw_parameters_set_transform_array(a1, (void *)v11);
  }
  nw_parameters_set_data_mode(a1, 2u);
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t HTTP.Response.httpResponse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  char v6 = *((_BYTE *)v1 + 32);
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = v1[9];
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t HTTP.Response.content.getter()
{
  uint64_t v1 = *(void *)(v0 + 80);
  sub_181BE4844(v1, *(void *)(v0 + 88));
  return v1;
}

__n128 HTTP.Response.init(httpResponse:content:)@<Q0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  char v6 = *(_BYTE *)(a1 + 32);
  __int128 v7 = *(_OWORD *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 56);
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(void *)(a4 + 16) = v4;
  *(void *)(a4 + 24) = v5;
  *(_BYTE *)(a4 + 32) = v6;
  *(_OWORD *)(a4 + 40) = v7;
  *(void *)(a4 + 56) = v8;
  __n128 result = *(__n128 *)(a1 + 64);
  *(__n128 *)(a4 + 64) = result;
  *(void *)(a4 + 80) = a2;
  *(void *)(a4 + 88) = a3;
  return result;
}

uint64_t sub_181C59D44@<X0>(uint64_t a1@<X8>)
{
  return sub_181C59D58(&qword_18C58DA70, &qword_18C58DA78, a1);
}

uint64_t sub_181C59D58@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = v3 + *a1;
  swift_beginAccess();
  return sub_181BE48BC(v6, a3, a2);
}

uint64_t sub_181C59DB4(uint64_t a1)
{
  return sub_181C59DC8(a1, &qword_18C58DA70, &qword_18C58DA78);
}

uint64_t sub_181C59DC8(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = v3 + *a2;
  swift_beginAccess();
  sub_181C1D268(a1, v6, a3);
  return swift_endAccess();
}

uint64_t sub_181C59E2C@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v1 + qword_18C58DA80);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v6 = v3[2];
  uint64_t v7 = v3[3];
  uint64_t v8 = v3[4];
  uint64_t v9 = v3[5];
  uint64_t v10 = v3[6];
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_181C59EDC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + qword_18C58DA88);
  uint64_t v3 = *(void *)(v1 + qword_18C58DA88 + 8);
  uint64_t v4 = *(void *)(v1 + qword_18C58DA88 + 16);
  uint64_t v5 = *(void *)(v1 + qword_18C58DA88 + 24);
  uint64_t v6 = *(void *)(v1 + qword_18C58DA88 + 32);
  uint64_t v7 = *(void *)(v1 + qword_18C58DA88 + 40);
  uint64_t v8 = *(void *)(v1 + qword_18C58DA88 + 48);
  uint64_t v9 = *(void *)(v1 + qword_18C58DA88 + 56);
  uint64_t v10 = *(void *)(v1 + qword_18C58DA88 + 64);
  unint64_t v11 = *(void *)(v1 + qword_18C58DA88 + 72);
  uint64_t v13 = *(void *)(v1 + qword_18C58DA88 + 80);
  unint64_t v12 = *(void *)(v1 + qword_18C58DA88 + 88);
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = v13;
  a1[11] = v12;
  return sub_181C6498C(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v13, v12);
}

uint64_t sub_181C59F3C(_OWORD *a1)
{
  uint64_t v2 = (_OWORD *)(v1 + qword_18C58DA88);
  uint64_t v4 = *(void *)(v1 + qword_18C58DA88);
  uint64_t v3 = *(void *)(v1 + qword_18C58DA88 + 8);
  uint64_t v5 = *(void *)(v1 + qword_18C58DA88 + 16);
  uint64_t v6 = *(void *)(v1 + qword_18C58DA88 + 24);
  uint64_t v7 = *(void *)(v1 + qword_18C58DA88 + 32);
  uint64_t v8 = *(void *)(v1 + qword_18C58DA88 + 40);
  uint64_t v9 = *(void *)(v1 + qword_18C58DA88 + 48);
  uint64_t v10 = *(void *)(v1 + qword_18C58DA88 + 56);
  __int128 v11 = *(_OWORD *)(v1 + qword_18C58DA88 + 64);
  uint64_t v12 = *(void *)(v1 + qword_18C58DA88 + 80);
  unint64_t v13 = *(void *)(v1 + qword_18C58DA88 + 88);
  __int128 v14 = a1[1];
  *uint64_t v2 = *a1;
  v2[1] = v14;
  __int128 v15 = a1[3];
  _OWORD v2[2] = a1[2];
  v2[3] = v15;
  __int128 v16 = a1[5];
  v2[4] = a1[4];
  v2[5] = v16;
  return sub_181C63A38(v4, v3, v5, v6, v7, v8, v9, v10, v11, *((unint64_t *)&v11 + 1), v12, v13);
}

void HTTP.Progress.deinit()
{
}

uint64_t sub_181C59FF0(uint64_t a1)
{
  uint64_t v3 = MEMORY[0x186E12084](&protocol conformance descriptor for HTTP.Progress<A, Pack{repeat B}>, a1);
  sub_181C560E4( (uint64_t)&v5,  a1,  (uint64_t)&protocol witness table for HTTP.Progress<A, Pack{repeat B}>,  v3,  (uint64_t)&unk_189BB17F0,  (uint64_t)sub_181C65CAC,  (uint64_t)&block_descriptor_316);
  swift_release();
  sub_181BDA0F0(v1 + qword_18C58DA70, &qword_18C58DA78);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_181C63A38( *(void *)(v1 + qword_18C58DA88),  *(void *)(v1 + qword_18C58DA88 + 8),  *(void *)(v1 + qword_18C58DA88 + 16),  *(void *)(v1 + qword_18C58DA88 + 24),  *(void *)(v1 + qword_18C58DA88 + 32),  *(void *)(v1 + qword_18C58DA88 + 40),  *(void *)(v1 + qword_18C58DA88 + 48),  *(void *)(v1 + qword_18C58DA88 + 56),  *(void *)(v1 + qword_18C58DA88 + 64),  *(void *)(v1 + qword_18C58DA88 + 72),  *(void *)(v1 + qword_18C58DA88 + 80),  *(void *)(v1 + qword_18C58DA88 + 88));
  return v1;
}

void HTTP.Progress.__deallocating_deinit()
{
}

unsigned int *sub_181C5A100(unsigned int *result)
{
  unint64_t v1 = *result | ((unint64_t)*((unsigned __int8 *)result + 4) << 32);
  int v2 = *((unsigned __int8 *)result + 4) >> 6;
  if (v2)
  {
    if (v2 == 1)
    {
      unint64_t v5 = *result | ((unint64_t)*((unsigned __int8 *)result + 4) << 32) & 0x3FFFFFFFFFLL;
      __int128 v6 = 0u;
      __int128 v7 = 0u;
      __int128 v8 = 0u;
      __int128 v9 = 0u;
      unint64_t v4 = 0x8000000000000000LL;
    }

    else
    {
      if (v2 != 2) {
        return result;
      }
      if (v1 == 0x8000000001LL)
      {
        uint64_t v3 = 1LL;
      }

      else
      {
        if (v1 != 0x8000000002LL) {
          return result;
        }
        uint64_t v3 = 2LL;
      }

      unint64_t v5 = v3;
      __int128 v6 = 0u;
      __int128 v7 = 0u;
      __int128 v8 = 0u;
      __int128 v9 = 0u;
      unint64_t v4 = 0xC000000000000000LL;
    }

    uint64_t v11 = 0LL;
    __int128 v10 = v4;
  }

  else
  {
    unint64_t v5 = *result | ((unint64_t)*((unsigned __int8 *)result + 4) << 32);
    __int128 v6 = 0u;
    __int128 v7 = 0u;
    __int128 v8 = 0u;
    __int128 v9 = 0u;
    __int128 v10 = 0u;
    uint64_t v11 = 0LL;
  }

  return (unsigned int *)sub_181C5A1DC(&v5);
}

uint64_t sub_181C5A1DC(_OWORD *a1)
{
  uint64_t v3 = sub_18264E964();
  uint64_t v14 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  unint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_18264E97C();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  __int128 v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_181C6591C(a1, v17);
  if (qword_18C58B218 != -1) {
    swift_once();
  }
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v1;
  sub_181C6591C(v17, (_OWORD *)(v10 + 24));
  aBlock[4] = sub_181C6598C;
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_181C32D2C;
  void aBlock[3] = &block_descriptor_292;
  uint64_t v11 = _Block_copy(aBlock);
  swift_retain();
  sub_181C659D4( v17,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_181C6498C);
  sub_18264E970();
  uint64_t v15 = MEMORY[0x18961AFE8];
  sub_181BD67D4( (unint64_t *)&qword_18C45E550,  (uint64_t (*)(uint64_t))MEMORY[0x18961B6A0],  MEMORY[0x18961B6B8]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C45E560);
  sub_181C65D48((unint64_t *)&qword_18C45E570, (uint64_t *)&unk_18C45E560);
  sub_18264F108();
  MEMORY[0x186E0EBEC](0LL, v9, v5, v11);
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_release();
}

uint64_t sub_181C5A418(uint64_t a1, _OWORD *a2)
{
  int v2 = a2;
  sub_181C6591C(a2, &v80);
  v45[2] = *((void *)&v80 + 1);
  _OWORD v45[3] = v81;
  uint64_t v45[4] = v82;
  v45[5] = v83;
  v45[1] = v84;
  v45[6] = v86;
  v45[7] = v85;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E020);
  v45[12] = *(void *)(v4 - 8);
  v45[13] = v4;
  uint64_t v5 = MEMORY[0x1895F8858](v4);
  char v67 = (char *)v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v66 = (char *)v45 - v7;
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A1F0);
  v45[10] = *(void *)(v46 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](v46);
  uint64_t v68 = (char *)v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = MEMORY[0x1895F8858](v8);
  uint64_t v58 = (char *)v45 - v11;
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  unint64_t v57 = (char *)v45 - v13;
  MEMORY[0x1895F8858](v12);
  uint64_t v65 = (char *)v45 - v14;
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E038);
  v45[11] = *(void *)(v54 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](v54);
  unint64_t v53 = (char *)v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  uint64_t v51 = (char *)v45 - v17;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58E028);
  uint64_t v48 = *(void *)(v18 - 8);
  uint64_t v49 = v18;
  MEMORY[0x1895F8858](v18);
  uint64_t v47 = (char *)v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58DA78);
  uint64_t v21 = MEMORY[0x1895F8858](v20);
  v45[9] = (char *)v45 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v21);
  uint64_t v52 = (uint64_t)v45 - v23;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(qword_18C58DF50);
  uint64_t v55 = *(void *)(v24 - 8);
  uint64_t v56 = v24;
  uint64_t v25 = MEMORY[0x1895F8858](v24);
  v45[8] = (char *)v45 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v25);
  uint64_t v50 = (char *)v45 - v27;
  uint64_t v64 = a1;
  sub_181C59EDC((uint64_t *)&v69);
  uint64_t v28 = *((void *)&v69 + 1);
  uint64_t v29 = v70;
  uint64_t v61 = v71;
  int v62 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v69;
  uint64_t v30 = v72;
  uint64_t v31 = v74;
  uint64_t v59 = v75;
  uint64_t v60 = v73;
  uint64_t v32 = v76;
  unint64_t v33 = v77;
  uint64_t v34 = v78;
  unint64_t v35 = v79;
  __int128 v89 = v69;
  uint64_t v90 = v70;
  uint64_t v91 = v71;
  uint64_t v92 = v72;
  uint64_t v93 = v73;
  uint64_t v94 = v74;
  uint64_t v95 = v75;
  uint64_t v96 = v76;
  unint64_t v97 = v77;
  uint64_t v98 = v78;
  unint64_t v99 = v79;
  uint64_t v63 = v2;
  sub_181C6591C(v2, v87);
  _s7Network4HTTPC5StateO2eeoiySbAE_AEtFZ_0((uint64_t)&v89);
  LOBYTE(sub_181C5475C(v0, v1, v2) = v36;
  uint64_t result = sub_181C63A38((uint64_t)v62, v28, v29, v61, v30, v60, v31, v59, v32, v33, v34, v35);
  if ((v2 & 1) == 0)
  {
    uint64_t v38 = v50;
    uint64_t v39 = v64 + qword_18C58DA70;
    swift_beginAccess();
    uint64_t v40 = v52;
    sub_181BE48BC(v39, v52, &qword_18C58DA78);
    uint64_t v42 = v55;
    uint64_t v41 = v56;
    int v62 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48);
    if (v62(v40, 1LL, v56) == 1)
    {
      sub_181BDA0F0(v40, &qword_18C58DA78);
      uint64_t v43 = v63;
    }

    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v38, v40, v41);
      uint64_t v43 = v63;
      sub_181C6591C(v63, &v89);
      sub_181C659D4( v43,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_181C6498C);
      unint64_t v44 = v47;
      sub_18264EDFC();
      (*(void (**)(char *, uint64_t))(v48 + 8))(v44, v49);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v38, v41);
    }

    sub_181C6591C(v43, v87);
    __asm { BR              X14 }
  }

  return result;
}

uint64_t sub_181C5B45C@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  *a1 = sub_181C63AC8;
  a1[1] = v1;
  return swift_retain();
}

void sub_181C5B470(uint64_t a1, uint64_t a2)
{
  v18[1] = a2;
  v18[0] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58E028);
  uint64_t v3 = *(void *)(v18[0] - 8LL);
  MEMORY[0x1895F8858](v18[0]);
  uint64_t v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58DA78);
  uint64_t v7 = MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v7);
  uint64_t v11 = (char *)v18 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(qword_18C58DF50);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v15 = (char *)v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = a1 + qword_18C58DA70;
  swift_beginAccess();
  sub_181BE48BC(v16, (uint64_t)v11, &qword_18C58DA78);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
  {
    sub_181BDA0F0((uint64_t)v11, &qword_18C58DA78);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
    sub_18264EE08();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v9, 1LL, 1LL, v12);
    sub_181C59DB4((uint64_t)v9);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }

  uint64_t v17 = v18[0];
  sub_181C59EDC((uint64_t *)v22);
  v19[0] = v22[0];
  v19[1] = v22[1];
  void v19[2] = v22[2];
  v19[3] = v22[3];
  __int128 v20 = v22[4];
  __int128 v21 = v22[5];
  sub_18264EDFC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v17);
  sub_181C59EDC((uint64_t *)v19);
  __asm { BR              X14 }

uint64_t sub_181C5B6F4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unint64_t a9@<X8>)
{
  return sub_18264EDE4();
}

uint64_t sub_181C5B7CC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t (*a5)(char *))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a3);
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(a4);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  return a5(v9);
}

uint64_t sub_181C5B860(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_181C5B878()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  void *v1 = v0;
  v1[1] = sub_181C5B8EC;
  return sub_18264F594();
}

uint64_t sub_181C5B8EC()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 40) = v0;
  swift_task_dealloc();
  if (v0) {
    return swift_task_switch();
  }
  else {
    return (*(uint64_t (**)(void))(v2 + 8))();
  }
}

uint64_t sub_181C5B958()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_181C5B964()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E020);
  MEMORY[0x1895F8858](v0);
  sub_181C59EDC(v1);
  __asm { BR              X3 }

uint64_t sub_181C5BA00@<X0>(uint64_t a1@<X0>, char a2@<W8>)
{
  *(void *)(v12 - 256) = v11;
  *(void *)(v12 - 248) = v3;
  *(void *)(v12 - 240) = v4;
  *(void *)(v12 - 232) = v8;
  *(_BYTE *)(v12 - 224) = a2;
  *(void *)(v12 - 216) = v5;
  *(void *)(v12 - 208) = v6;
  *(void *)(v12 - 200) = v2;
  *(void *)(v12 - 192) = v7;
  *(void *)(v12 - 184) = a1 & 0x3FFFFFFFFFFFFFFFLL;
  *(void *)(v12 - 176) = v10;
  *(void *)(v12 - 168) = v9;
  return sub_18264ED84();
}

uint64_t sub_181C5BBA0()
{
  return sub_18264F684();
}

uint64_t sub_181C5BBE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181C5BBF0(a1, a2, a3, (void (*)(_BYTE *))sub_181C65F64);
}

uint64_t sub_181C5BBF0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *))
{
  return sub_18264F684();
}

unsigned int *sub_181C5BC30(unsigned int *a1)
{
  return sub_181C5A100(a1);
}

uint64_t HTTP.deinit()
{
  return v0;
}

uint64_t HTTP.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_181C5BCE0(nw_parameters *a1)
{
  return HTTP.configure(parameters:)(a1);
}

uint64_t sub_181C5BD00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = v4 + *(void *)(*(void *)v4 + 128LL);
  uint64_t v6 = sub_18264EE14();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
  uint64_t v7 = (void *)(v4 + *(void *)(*(void *)v4 + 136LL));
  *uint64_t v7 = a1;
  v7[1] = a2;
  return v4;
}

uint64_t sub_181C5BD84()
{
  uint64_t v1 = *(void (**)(uint64_t (*)(uint64_t, uint64_t), uint64_t))(v0 + *(void *)(*(void *)v0 + 136LL));
  swift_retain();
  v1(sub_181C657F8, v0);
  return swift_release();
}

uint64_t sub_181C5BDD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v40 = a3;
  uint64_t v41 = a1;
  uint64_t v3 = *(void *)(*(void *)a3 + 88LL);
  uint64_t v4 = sub_18264EE14();
  uint64_t v38 = *(void *)(v4 - 8);
  uint64_t v39 = v4;
  MEMORY[0x1895F8858](v4);
  unint64_t v35 = (char *)&v34 - v5;
  uint64_t v36 = sub_18264EDD8();
  uint64_t v6 = sub_18264F09C();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v37 = (char *)&v34 - v8;
  uint64_t v9 = sub_18264F09C();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](v9);
  uint64_t v13 = (char *)&v34 - v12;
  uint64_t v14 = *(void *)(v3 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](v11);
  uint64_t v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  uint64_t v42 = (char *)&v34 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v41, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1LL, v3) == 1)
  {
    uint64_t v20 = v38;
    uint64_t v19 = v39;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    uint64_t v21 = v40 + *(void *)(*(void *)v40 + 128LL);
    swift_beginAccess();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v21, 1LL, v19);
    if (!(_DWORD)result)
    {
      uint64_t v23 = v35;
      (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v35, v21, v19);
      sub_18264EE08();
      return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v23, v19);
    }
  }

  else
  {
    uint64_t v34 = v17;
    uint64_t v24 = v7;
    uint64_t v41 = v6;
    uint64_t v25 = v36;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v42, v13, v3);
    uint64_t v26 = v40 + *(void *)(*(void *)v40 + 128LL);
    swift_beginAccess();
    uint64_t v28 = v38;
    uint64_t v27 = v39;
    uint64_t v29 = 1LL;
    int v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v26, 1LL, v39);
    uint64_t v31 = v37;
    if (!v30)
    {
      uint64_t v32 = v35;
      (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v35, v26, v27);
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v34, v42, v3);
      sub_18264EDFC();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v32, v27);
      uint64_t v29 = 0LL;
    }

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56LL))(v31, v29, 1LL, v25);
    uint64_t v33 = (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v31, v41);
    sub_181C5BD84(v33);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v42, v3);
  }

  return result;
}

uint64_t AsyncSequenceReceive.makeAsyncIterator()()
{
  uint64_t v0 = sub_18264EDF0();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1895F8858](v0);
  uint64_t v3 = (char *)&v9 - v2;
  uint64_t v4 = sub_18264EE44();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v9 - v6;
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x18961BD50], v0);
  sub_18264EE50();
  sub_181C5BD84();
  sub_18264EE20();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_181C5C214(uint64_t a1, void *a2)
{
  uint64_t v23 = a2;
  uint64_t v3 = (void *)*a2;
  uint64_t v4 = sub_18264E964();
  uint64_t v26 = *(void *)(v4 - 8);
  uint64_t v27 = v4;
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_18264E97C();
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v25 = v7;
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = v3[11];
  uint64_t v11 = sub_18264EE14();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)v22 - v13;
  if (qword_18C58B218 != -1) {
    swift_once();
  }
  v22[1] = qword_18C5A4A28;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  unint64_t v15 = (*(unsigned __int8 *)(v12 + 80) + 72LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v16 = (char *)swift_allocObject();
  *((void *)v16 + 2) = v3[10];
  *((void *)v16 + 3) = v10;
  *((void *)v16 + 4) = v3[12];
  *((void *)v16 + 5) = swift_allocateMetadataPack();
  *((void *)v16 + 6) = v3[14];
  uint64_t WitnessTablePack = swift_allocateWitnessTablePack();
  uint64_t v18 = v23;
  *((void *)v16 + 7) = WitnessTablePack;
  *((void *)v16 + 8) = v18;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v16[v15], v14, v11);
  aBlock[4] = sub_181C65878;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_181C32D2C;
  void aBlock[3] = &block_descriptor_274;
  uint64_t v19 = _Block_copy(aBlock);
  swift_retain();
  sub_18264E970();
  uint64_t v28 = MEMORY[0x18961AFE8];
  sub_181BD67D4( (unint64_t *)&qword_18C45E550,  (uint64_t (*)(uint64_t))MEMORY[0x18961B6A0],  MEMORY[0x18961B6B8]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C45E560);
  sub_181C65D48((unint64_t *)&qword_18C45E570, (uint64_t *)&unk_18C45E560);
  uint64_t v20 = v27;
  sub_18264F108();
  MEMORY[0x186E0EBEC](0LL, v9, v6, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v6, v20);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v25);
  return swift_release();
}

uint64_t sub_181C5C4E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = sub_18264EE14();
  uint64_t v6 = sub_18264F09C();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  uint64_t v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  MEMORY[0x1895F8858](v8);
  uint64_t v12 = &v16[-v11];
  uint64_t v13 = (char *)a1 + *(void *)(v4 + 128);
  swift_beginAccess();
  (*(void (**)(_BYTE *, char *, uint64_t))(v7 + 16))(v12, v13, v6);
  uint64_t v14 = *(void *)(v5 - 8);
  LODWORD(v4) = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v5);
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v12, v6);
  if ((_DWORD)v4 != 1) {
    return sub_18264EE08();
  }
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v14 + 16))(v10, a2, v5);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v14 + 56))(v10, 0LL, 1LL, v5);
  swift_beginAccess();
  (*(void (**)(char *, _BYTE *, uint64_t))(v7 + 40))(v13, v10, v6);
  return swift_endAccess();
}

uint64_t AsyncSequenceReceive.deinit()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 128LL);
  sub_18264EE14();
  uint64_t v2 = sub_18264F09C();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_release();
  return v0;
}

void AsyncSequenceReceive.__deallocating_deinit()
{
}

uint64_t sub_181C5C6D4()
{
  return swift_release();
}

void Connection1<>.send(_:metadata:isComplete:)()
{
}

uint64_t sub_181C5C758()
{
  uint64_t v5 = swift_retain();
  uint64_t v6 = sub_181C6509C( v5,  (void (*)(void, uint64_t *))type metadata accessor for SendProgress,  (uint64_t (*)(uint64_t))sub_181C63B40);
  swift_release();
  type metadata accessor for NWConnection.ContentContext();
  swift_initStackObject();
  swift_bridgeObjectRetain();
  NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)( 0x746E6F43646E6573LL,  0xEB00000000747865LL,  0LL,  v4,  0LL,  v3,  0.5);
  uint64_t v8 = v7;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v2;
  *(void *)(v9 + 24) = v6;
  v11[0] = (uint64_t)sub_181C63C80;
  v11[1] = v9;
  swift_retain();
  NWConnection.send(content:contentContext:isComplete:completion:)(v1, v0, v8, 1, v11);
  swift_release();
  swift_release();
  return v6;
}

void Connection1<>.send(_:metadata:isComplete:)(uint64_t a1, unint64_t a2)
{
}

uint64_t sub_181C5C8AC(uint64_t a1)
{
  return a1;
}

uint64_t Connection1<>.receive(minimumLength:maximumLength:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[8] = a3;
  v4[9] = v3;
  v4[6] = a1;
  v4[7] = a2;
  return swift_task_switch();
}

uint64_t sub_181C5C8F0()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 80) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 64);
  *(void *)(v3 + 32) = v2;
  *(void *)(v3 + 40) = v1;
  char v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58DAA0);
  *char v4 = v0;
  v4[1] = sub_181C5C9A8;
  return sub_18264F594();
}

uint64_t sub_181C5C9A8()
{
  *(void *)(*(void *)v1 + 96LL) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_181C5CA0C()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(unsigned __int8 *)(v0 + 40);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 8))(v2, v1, v3, v4);
}

uint64_t sub_181C5CA64()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181C5CA9C(uint64_t a1, uint64_t a2, uint32_t a3, uint32_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E018);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = *(void *)(a2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))( (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v8);
  unint64_t v12 = (*(unsigned __int8 *)(v9 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))( v13 + v12,  (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v8);
  uint64_t v14 = *(nw_connection **)(v11 + 16);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_181C657B8;
  *(void *)(v15 + 24) = v13;
  aBlock[4] = sub_181C65D9C;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_181C696F8;
  void aBlock[3] = &block_descriptor_258;
  uint64_t v16 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_receive(v14, a3, a4, v16);
  swift_unknownObjectRelease();
  _Block_release(v16);
  return swift_release();
}

uint64_t Connection1<>.receive(exactly:)(uint64_t a1, uint64_t a2)
{
  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  return swift_task_switch();
}

uint64_t sub_181C5CC44()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 72) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 56);
  *(void *)(v2 + 32) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58DAA0);
  void *v3 = v0;
  v3[1] = sub_181C5CCFC;
  return sub_18264F594();
}

uint64_t sub_181C5CCFC()
{
  *(void *)(*(void *)v1 + 88LL) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_181C5CD60()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(unsigned __int8 *)(v0 + 40);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 8))(v2, v1, v3, v4);
}

uint64_t sub_181C5CDB8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181C5CDF0(uint64_t a1, uint64_t a2, uint32_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E018);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = *(void *)(a2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))( (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v6);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))( v11 + v10,  (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v6);
  unint64_t v12 = *(nw_connection **)(v9 + 16);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = sub_181C65668;
  *(void *)(v13 + 24) = v11;
  aBlock[4] = sub_181C65D9C;
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_181C696F8;
  void aBlock[3] = &block_descriptor_238;
  uint64_t v14 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_receive(v12, a3, a3, v14);
  swift_unknownObjectRelease();
  _Block_release(v14);
  return swift_release();
}

uint64_t sub_181C5CF70( uint64_t a1, unint64_t a2, uint64_t a3, char a4, unsigned int *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a2 >> 60 == 15)
  {
    if (a3)
    {
      uint64_t v12 = swift_allocObject();
      *(void *)(v12 + 16) = MEMORY[0x18961AFE8];
      uint64_t v13 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
      uint64_t v14 = *(nw_content_context **)(a3 + 16);
      uint64_t v32 = a9;
      uint64_t v33 = v12;
      *(void *)&__int128 aBlock = MEMORY[0x1895F87A8];
      *((void *)&aBlock + 1) = 1107296256LL;
      int v30 = sub_181C69288;
      uint64_t v31 = a10;
      uint64_t v15 = _Block_copy(&aBlock);
      swift_retain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_release();
      nw_content_context_foreach_protocol_metadata(v14, v15);
      _Block_release(v15);
      swift_unknownObjectRelease();
      swift_beginAccess();
      uint64_t v16 = *v13;
      swift_bridgeObjectRetain();
      swift_release();
      __int128 aBlock = xmmword_18265D190;
      int v30 = v16;
      LOBYTE(v31) = a4 & 1;
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E018);
      sub_18264ED84();
      return swift_release();
    }
  }

  else if (a3)
  {
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = MEMORY[0x18961AFE8];
    uint64_t v22 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 16);
    uint64_t v23 = *(nw_content_context **)(a3 + 16);
    uint64_t v32 = a7;
    uint64_t v33 = v21;
    *(void *)&__int128 aBlock = MEMORY[0x1895F87A8];
    *((void *)&aBlock + 1) = 1107296256LL;
    int v30 = sub_181C69288;
    uint64_t v31 = a8;
    uint64_t v24 = _Block_copy(&aBlock);
    sub_181BE4844(a1, a2);
    sub_181BE4844(a1, a2);
    swift_retain();
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    nw_content_context_foreach_protocol_metadata(v23, v24);
    _Block_release(v24);
    swift_unknownObjectRelease();
    swift_beginAccess();
    uint64_t v25 = *v22;
    swift_bridgeObjectRetain();
    swift_release();
    *(void *)&__int128 aBlock = a1;
    *((void *)&aBlock + 1) = a2;
    int v30 = v25;
    LOBYTE(v31) = a4 & 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E018);
    sub_18264ED84();
    sub_181BE61C8(a1, a2);
    return swift_release();
  }

  unint64_t v27 = *a5 | ((unint64_t)*((unsigned __int8 *)a5 + 4) << 32);
  sub_181BBE220();
  swift_allocError();
  if (HIDWORD(v27) <= 0xFE)
  {
    *(_DWORD *)uint64_t v28 = v27;
    *(_BYTE *)(v28 + 4) = BYTE4(v27);
  }

  else
  {
    *(_DWORD *)uint64_t v28 = 54;
    *(_BYTE *)(v28 + 4) = 0;
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E018);
  return sub_18264ED78();
}

void Connection1<>.receive()(uint64_t a1)
{
}

{
  sub_181C5E3BC(a1, &qword_18C58DAB8);
}

uint64_t sub_181C5D2A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_181C65618;
  *(void *)(v8 + 24) = v6;
  uint64_t v9 = *(nw_connection **)(v7 + 16);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = sub_181C65654;
  *(void *)(v10 + 24) = v8;
  v13[4] = sub_181C4EFA8;
  void v13[5] = v10;
  v13[0] = MEMORY[0x1895F87A8];
  v13[1] = 1107296256LL;
  _OWORD v13[2] = sub_181C696F8;
  v13[3] = &block_descriptor_218;
  uint64_t v11 = _Block_copy(v13);
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_receive(v9, 1u, 0xFFFFFFFF, v11);
  swift_unknownObjectRelease();
  _Block_release(v11);
  return swift_release();
}

uint64_t sub_181C5D3D8( uint64_t a1, unint64_t a2, uint64_t a3, char a4, unsigned int *a5, void (*a6)(uint64_t, unint64_t, uint64_t, void, int *))
{
  if (a2 >> 60 == 15)
  {
    if (a3)
    {
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = MEMORY[0x18961AFE8];
      uint64_t v10 = (uint64_t *)(v9 + 16);
      uint64_t v11 = *(nw_content_context **)(a3 + 16);
      uint64_t v32 = sub_181C65144;
      uint64_t v33 = v9;
      uint64_t aBlock = MEMORY[0x1895F87A8];
      uint64_t v29 = 1107296256LL;
      int v30 = sub_181C69288;
      uint64_t v31 = &block_descriptor_223;
      uint64_t v12 = _Block_copy(&aBlock);
      swift_retain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_release();
      nw_content_context_foreach_protocol_metadata(v11, v12);
      _Block_release(v12);
      swift_unknownObjectRelease();
      swift_beginAccess();
      uint64_t v13 = *v10;
      swift_bridgeObjectRetain();
      swift_release();
      char v27 = -1;
      int v26 = 0;
      a6(0LL, 0xC000000000000000LL, v13, a4 & 1, &v26);
      uint64_t v14 = 0LL;
      unint64_t v15 = 0xC000000000000000LL;
LABEL_6:
      sub_181BCD4F0(v14, v15);
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }

  else if (a3)
  {
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = MEMORY[0x18961AFE8];
    uint64_t v19 = (uint64_t *)(v18 + 16);
    uint64_t v25 = a6;
    uint64_t v20 = *(nw_content_context **)(a3 + 16);
    uint64_t v32 = sub_181C65144;
    uint64_t v33 = v18;
    uint64_t aBlock = MEMORY[0x1895F87A8];
    uint64_t v29 = 1107296256LL;
    int v30 = sub_181C69288;
    uint64_t v31 = &block_descriptor_228;
    uint64_t v21 = _Block_copy(&aBlock);
    sub_181BE4844(a1, a2);
    sub_181BE4844(a1, a2);
    swift_retain();
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    nw_content_context_foreach_protocol_metadata(v20, v21);
    _Block_release(v21);
    swift_unknownObjectRelease();
    swift_beginAccess();
    uint64_t v22 = *v19;
    swift_bridgeObjectRetain();
    swift_release();
    char v27 = -1;
    int v26 = 0;
    v25(a1, a2, v22, a4 & 1, &v26);
    sub_181BE61C8(a1, a2);
    uint64_t v14 = a1;
    unint64_t v15 = a2;
    goto LABEL_6;
  }

  unint64_t v24 = *a5 | ((unint64_t)*((unsigned __int8 *)a5 + 4) << 32);
  if (BYTE4(v24) == 255LL)
  {
    BYTE4(aBlock) = 0;
    LODWORD(aBlock) = 54;
  }

  else
  {
    LODWORD(aBlock) = *a5;
    BYTE4(aBlock) = BYTE4(v24);
  }

  return ((uint64_t (*)(void, void, uint64_t, void, uint64_t *))a6)(0LL, 0LL, 1LL, 0LL, &aBlock);
}

uint64_t sub_181C5D6E0(_BYTE *a1, void *a2)
{
  if (swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    sub_181BCD38C((uint64_t)a2, (uint64_t)v8);
    swift_dynamicCast();
    *a1 = 1;
    return sub_181BDAEEC(v6, v7);
  }

  else
  {
    sub_181BCD38C((uint64_t)a2, (uint64_t)v8);
    if (swift_dynamicCast())
    {
      sub_181BCD4F0(v6, v7);
      *a1 = 2;
      sub_181BCD38C((uint64_t)a2, (uint64_t)v8);
      swift_dynamicCast();
      return v6;
    }

    else
    {
      *a1 = 2;
      __swift_project_boxed_opaque_existential_2(a2, a2[3]);
      sub_18264E40C();
      swift_allocObject();
      sub_18264E400();
      uint64_t v4 = sub_18264E3E8();
      swift_release();
    }
  }

  return v4;
}

uint64_t sub_181C5D888(uint64_t a1, unint64_t a2)
{
  if (swift_dynamicCastMetatype()) {
    __asm { BR              X10 }
  }

  if (swift_dynamicCastMetatype())
  {
    sub_181BCD4AC(a1, a2);
    return swift_dynamicCast();
  }

  else
  {
    sub_18264E3DC();
    swift_allocObject();
    sub_18264E3D0();
    sub_18264E3B8();
    return swift_release();
  }

void Connection1<>.send(_:metadata:)()
{
}

uint64_t sub_181C5DCB4()
{
  uint64_t v4 = swift_retain();
  uint64_t v5 = sub_181C6509C( v4,  (void (*)(void, uint64_t *))type metadata accessor for SendProgress,  (uint64_t (*)(uint64_t))sub_181C63B40);
  swift_release();
  type metadata accessor for NWConnection.ContentContext();
  swift_initStackObject();
  swift_bridgeObjectRetain();
  NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)( 0x746E6F43646E6573LL,  0xEB00000000747865LL,  0LL,  0,  0LL,  v3,  0.5);
  uint64_t v7 = v6;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v2;
  *(void *)(v8 + 24) = v5;
  v10[0] = (uint64_t)sub_181C65F68;
  v10[1] = v8;
  swift_retain();
  NWConnection.send(content:contentContext:isComplete:completion:)(v1, v0, v7, 1, v10);
  swift_release();
  swift_release();
  return v5;
}

uint64_t sub_181C5DDB4(unsigned int *a1)
{
  if (*((unsigned __int8 *)a1 + 4) == 255LL)
  {
    char v7 = 0x80;
    int v6 = 3;
    uint64_t v1 = (unsigned int *)&v6;
  }

  else
  {
    unint64_t v2 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
    int v4 = *a1;
    char v5 = (v2 | 0x4000000000LL) >> 32;
    uint64_t v1 = (unsigned int *)&v4;
  }

  return sub_181C56770(v1);
}

void Connection1<>.send(_:metadata:)(uint64_t a1, unint64_t a2)
{
}

uint64_t sub_181C5DE6C(uint64_t a1)
{
  return a1;
}

uint64_t Connection1<>.receiveOnce()(uint64_t a1)
{
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = v1;
  return swift_task_switch();
}

uint64_t sub_181C5DEAC()
{
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 40);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58DAB8);
  *uint64_t v2 = v0;
  v2[1] = sub_181C5DF64;
  return sub_18264F594();
}

uint64_t sub_181C5DF64()
{
  *(void *)(*(void *)v1 + 72LL) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_181C5DFC8()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v2, v1, v3);
}

uint64_t sub_181C5E018()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181C5E04C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E010);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = *(void *)(a2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))( v9 + v8,  (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  uint64_t v10 = *(nw_connection **)(v7 + 16);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_181C65604;
  *(void *)(v11 + 24) = v9;
  aBlock[4] = sub_181C65D9C;
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_181C696F8;
  void aBlock[3] = &block_descriptor_201;
  uint64_t v12 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_receive_message(v10, v12);
  _Block_release(v12);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_181C5E1C0(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  if (a2 >> 60 == 15 || a3 == 0)
  {
    unint64_t v6 = *a5 | ((unint64_t)*((unsigned __int8 *)a5 + 4) << 32);
    if (HIDWORD(v6) <= 0xFE)
    {
      sub_181BBE220();
      swift_allocError();
      *(_DWORD *)uint64_t v7 = v6;
      *(_BYTE *)(v7 + 4) = BYTE4(v6);
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E010);
      return sub_18264ED78();
    }
  }

  else
  {
    uint64_t v10 = result;
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = MEMORY[0x18961AFE8];
    uint64_t v12 = *(nw_content_context **)(a3 + 16);
    aBlock[4] = sub_181C65144;
    aBlock[5] = v11;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_181C69288;
    void aBlock[3] = &block_descriptor_206;
    uint64_t v13 = _Block_copy(aBlock);
    sub_181BE4844(v10, a2);
    sub_181BE4844(v10, a2);
    swift_retain();
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    nw_content_context_foreach_protocol_metadata(v12, v13);
    _Block_release(v13);
    swift_unknownObjectRelease();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E010);
    sub_18264ED84();
    sub_181BE61C8(v10, a2);
    return swift_release();
  }

  return result;
}

void sub_181C5E3BC(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_181C5E418()
{
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = sub_181C5BD00(v0, v3);
  swift_retain();
  return v4;
}

uint64_t sub_181C5E468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_181C655B8;
  *(void *)(v8 + 24) = v6;
  uint64_t v9 = *(nw_connection **)(v7 + 16);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = sub_181C655F0;
  *(void *)(v10 + 24) = v8;
  v13[4] = sub_181C65D9C;
  void v13[5] = v10;
  v13[0] = MEMORY[0x1895F87A8];
  v13[1] = 1107296256LL;
  _OWORD v13[2] = sub_181C696F8;
  v13[3] = &block_descriptor_186;
  uint64_t v11 = _Block_copy(v13);
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_receive_message(v9, v11);
  _Block_release(v11);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_181C5E598( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t (*a6)(uint64_t, unint64_t, uint64_t, int *))
{
  if (a2 >> 60 == 15 || a3 == 0)
  {
    unint64_t v8 = *a5 | ((unint64_t)*((unsigned __int8 *)a5 + 4) << 32);
    if (BYTE4(v8) == 255LL)
    {
      BYTE4(aBlock[0]) = 0;
      LODWORD(aBlock[0]) = 22;
    }

    else
    {
      LODWORD(aBlock[0]) = *a5;
      BYTE4(aBlock[0]) = BYTE4(v8);
    }

    return a6(0LL, 0LL, 1LL, (int *)aBlock);
  }

  else
  {
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = MEMORY[0x18961AFE8];
    uint64_t v13 = (uint64_t *)(v12 + 16);
    uint64_t v14 = *(nw_content_context **)(a3 + 16);
    aBlock[4] = sub_181C65144;
    aBlock[5] = v12;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_181C69288;
    void aBlock[3] = &block_descriptor_191;
    unint64_t v15 = _Block_copy(aBlock);
    sub_181BE4844(a1, a2);
    sub_181BE4844(a1, a2);
    swift_retain();
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    nw_content_context_foreach_protocol_metadata(v14, v15);
    _Block_release(v15);
    swift_unknownObjectRelease();
    swift_beginAccess();
    uint64_t v16 = *v13;
    swift_bridgeObjectRetain();
    swift_release();
    char v19 = -1;
    int v18 = 0;
    a6(a1, a2, v16, &v18);
    sub_181BE61C8(a1, a2);
    sub_181BCD4F0(a1, a2);
    swift_release();
    return swift_bridgeObjectRelease();
  }

void Connection1<>.send(type:_:metadata:isFinal:)()
{
}

uint64_t sub_181C5E7B8(uint64_t a1)
{
  uint64_t v7 = MEMORY[0x18961AFE8];
  if (v4) {
    uint64_t v7 = v4;
  }
  *(void *)(v5 - 72) = v7;
  uint64_t v8 = qword_18C58B210;
  swift_bridgeObjectRetain();
  if (v8 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_18C5A4A20;
  type metadata accessor for NWProtocolFramer.Message();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = nw_framer_protocol_create_message(*(nw_protocol_definition_t *)(v9 + 32));
  v19[3] = MEMORY[0x18961A860];
  LODWORD(v19[0]) = v1;
  swift_retain();
  sub_181C33914((uint64_t)v19, 1701869908LL, 0xE400000000000000LL);
  uint64_t v11 = swift_release();
  MEMORY[0x186E0E844](v11);
  if (*(void *)((*(void *)(v5 - 72) & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((*(void *)(v5 - 72) & 0xFFFFFFFFFFFFFF8LL)
                                                                                     + 0x18) >> 1)
    sub_18264ED00();
  sub_18264ED30();
  sub_18264ECDC();
  unint64_t v12 = *(void *)(v5 - 72);
  type metadata accessor for NWConnection.ContentContext();
  swift_initStackObject();
  NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)( 5655636LL,  0xE300000000000000LL,  0LL,  v3 & 1,  0LL,  v12,  0.5);
  uint64_t v14 = v13;
  uint64_t v15 = sub_181C5D6E0(v19, v2);
  unint64_t v17 = v16;
  v19[0] = (uint64_t)sub_181C63CD4;
  v19[1] = a1;
  sub_181BCD4AC(v15, v16);
  swift_retain();
  NWConnection.send(content:contentContext:isComplete:completion:)(v15, v17, v14, 1, v19);
  sub_181BCD4F0(v15, v17);
  swift_release();
  sub_181BCD4F0(v15, v17);
  swift_release();
  return a1;
}

void sub_181C5E9B4()
{
}

uint64_t sub_181C5EA04()
{
  uint64_t v0 = swift_retain();
  uint64_t v1 = sub_181C6509C( v0,  (void (*)(void, uint64_t *))type metadata accessor for SendProgress,  (uint64_t (*)(uint64_t))sub_181C63B40);
  swift_release();
  return v1;
}

uint64_t Connection1<>.receiveOnce<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[9] = a4;
  v5[10] = v4;
  v5[7] = a1;
  v5[8] = a3;
  return swift_task_switch();
}

uint64_t sub_181C5EA68()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 88) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 64);
  *(void *)(v2 + 32) = v1;
  char v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58DAC8);
  void *v3 = v0;
  v3[1] = sub_181C5EB28;
  return sub_18264F594();
}

uint64_t sub_181C5EB28()
{
  *(void *)(*(void *)v1 + 104LL) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_181C5EB8C()
{
  uint64_t v1 = *(void *)(v0 + 56);
  int v2 = *(_DWORD *)(v0 + 16);
  __int128 v6 = *(_OWORD *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 40);
  char v4 = *(_BYTE *)(v0 + 48);
  swift_task_dealloc();
  *(_DWORD *)uint64_t v1 = v2;
  *(_OWORD *)(v1 + 8) = v6;
  *(void *)(v1 + 24) = v3;
  *(_BYTE *)(v1 + 32) = v4;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181C5EBFC()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181C5EC30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E000);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = *(void *)(a2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))( v9 + v8,  (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  uint64_t v10 = *(nw_connection **)(v7 + 16);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_181C65528;
  *(void *)(v11 + 24) = v9;
  aBlock[4] = sub_181C65D9C;
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_181C696F8;
  void aBlock[3] = &block_descriptor_168;
  unint64_t v12 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_receive_message(v10, v12);
  _Block_release(v12);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_181C5EDA4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v5 = *((unsigned __int8 *)a5 + 4);
  uint64_t v6 = *a5;
  if (a3)
  {
    uint64_t v10 = qword_18C58B210;
    swift_retain();
    if (v10 != -1) {
      swift_once();
    }
    uint64_t v11 = *(nw_content_context **)(a3 + 16);
    nw_protocol_metadata_t v12 = nw_content_context_copy_protocol_metadata(v11, *(nw_protocol_definition_t *)(qword_18C5A4A20 + 32));
    if (!v12)
    {
LABEL_15:
      swift_release();
      goto LABEL_16;
    }

    nw_protocol_metadata_t v13 = v12;
    uint64_t v14 = sub_181C32C0C((uint64_t)v12);
    if (v14)
    {
      ((void (*)(nw_protocol_metadata_t))v14[12])(v13);
      type metadata accessor for NWProtocolFramer.Message();
      if (swift_dynamicCastClass())
      {
        int v27 = sub_181C5489C();
        if (a2 >> 60 == 15) {
          uint64_t v15 = 0LL;
        }
        else {
          uint64_t v15 = a1;
        }
        unint64_t v16 = 0xC000000000000000LL;
        if (a2 >> 60 != 15) {
          unint64_t v16 = a2;
        }
        uint64_t v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v16;
        uint64_t v26 = v15;
        uint64_t v17 = swift_allocObject();
        *(void *)(v17 + 16) = MEMORY[0x18961AFE8];
        int v18 = (void **)(v17 + 16);
        uint64_t v32 = sub_181C65144;
        uint64_t v33 = v17;
        uint64_t aBlock = MEMORY[0x1895F87A8];
        uint64_t v29 = 1107296256LL;
        int v30 = sub_181C69288;
        uint64_t v31 = &block_descriptor_173;
        char v19 = _Block_copy(&aBlock);
        sub_181BE4844(a1, a2);
        swift_unknownObjectRetain();
        swift_retain();
        swift_release();
        nw_content_context_foreach_protocol_metadata(v11, v19);
        _Block_release(v19);
        swift_unknownObjectRelease();
        swift_beginAccess();
        uint64_t v20 = *v18;
        swift_bridgeObjectRetain();
        swift_release();
        char v21 = *(_BYTE *)(a3 + 64);
        LODWORD(aBlock) = v27;
        uint64_t v29 = v26;
        int v30 = v25;
        uint64_t v31 = v20;
        LOBYTE(v32) = v21;
        __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E000);
        sub_18264ED84();
        swift_release();
        return swift_release();
      }

      swift_release();
      goto LABEL_15;
    }

    swift_release();
    swift_unknownObjectRelease();
  }

void Connection1<>.receive()()
{
}

{
  sub_181C619AC(qword_18C58DAF0);
}

uint64_t sub_181C5F09C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_181C654C8;
  *(void *)(v8 + 24) = v6;
  uint64_t v9 = *(nw_connection **)(v7 + 16);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = sub_181C65514;
  *(void *)(v10 + 24) = v8;
  v13[4] = sub_181C65D9C;
  void v13[5] = v10;
  v13[0] = MEMORY[0x1895F87A8];
  v13[1] = 1107296256LL;
  _OWORD v13[2] = sub_181C696F8;
  v13[3] = &block_descriptor_153;
  uint64_t v11 = _Block_copy(v13);
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_receive_message(v9, v11);
  _Block_release(v11);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_181C5F1CC( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, void (*a6)(uint64_t *, int *))
{
  uint64_t v7 = *((unsigned __int8 *)a5 + 4);
  uint64_t v8 = *a5;
  if (a3)
  {
    uint64_t v12 = qword_18C58B210;
    swift_retain();
    if (v12 != -1) {
      swift_once();
    }
    nw_protocol_metadata_t v13 = *(nw_content_context **)(a3 + 16);
    nw_protocol_metadata_t v14 = nw_content_context_copy_protocol_metadata(v13, *(nw_protocol_definition_t *)(qword_18C5A4A20 + 32));
    if (!v14)
    {
LABEL_15:
      swift_release();
      goto LABEL_16;
    }

    nw_protocol_metadata_t v15 = v14;
    unint64_t v16 = sub_181C32C0C((uint64_t)v14);
    if (v16)
    {
      ((void (*)(nw_protocol_metadata_t))v16[12])(v15);
      type metadata accessor for NWProtocolFramer.Message();
      if (swift_dynamicCastClass())
      {
        unsigned int v28 = sub_181C5489C();
        if (a2 >> 60 == 15) {
          uint64_t v17 = 0LL;
        }
        else {
          uint64_t v17 = a1;
        }
        unint64_t v18 = 0xC000000000000000LL;
        if (a2 >> 60 != 15) {
          unint64_t v18 = a2;
        }
        unint64_t v26 = v18;
        uint64_t v27 = v17;
        uint64_t v19 = swift_allocObject();
        *(void *)(v19 + 16) = MEMORY[0x18961AFE8];
        uint64_t v20 = (uint64_t *)(v19 + 16);
        uint64_t v37 = sub_181C65144;
        uint64_t v38 = v19;
        uint64_t aBlock = MEMORY[0x1895F87A8];
        uint64_t v34 = 1107296256LL;
        unint64_t v35 = sub_181C69288;
        uint64_t v36 = (uint64_t)&block_descriptor_158;
        char v21 = _Block_copy(&aBlock);
        sub_181BE4844(a1, a2);
        swift_unknownObjectRetain();
        swift_retain();
        swift_release();
        nw_content_context_foreach_protocol_metadata(v13, v21);
        _Block_release(v21);
        swift_unknownObjectRelease();
        swift_beginAccess();
        uint64_t v22 = *v20;
        swift_bridgeObjectRetain();
        swift_release();
        char v23 = *(_BYTE *)(a3 + 64);
        uint64_t aBlock = v28;
        uint64_t v34 = v27;
        unint64_t v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v26;
        uint64_t v36 = v22;
        LOBYTE(v37) = v23;
        char v30 = -1;
        int v29 = 0;
        a6(&aBlock, &v29);
        sub_181BCD4F0(v27, v26);
        swift_release();
        swift_release();
        return swift_bridgeObjectRelease();
      }

      swift_release();
      goto LABEL_15;
    }

    swift_release();
    swift_unknownObjectRelease();
  }

void Connection1.send<A>(_:metadata:isFinal:)()
{
}

uint64_t sub_181C5F4EC()
{
  uint64_t v3 = swift_retain();
  uint64_t v4 = sub_181C6509C( v3,  (void (*)(void, uint64_t *))type metadata accessor for SendProgress,  (uint64_t (*)(uint64_t))sub_181C63B40);
  swift_release();
  unint64_t v5 = MEMORY[0x18961AFE8];
  if (v2) {
    unint64_t v5 = v2;
  }
  unint64_t v17 = v5;
  uint64_t v6 = qword_18C58B210;
  swift_bridgeObjectRetain();
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_18C5A4A20;
  type metadata accessor for NWProtocolFramer.Message();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = nw_framer_protocol_create_message(*(nw_protocol_definition_t *)(v7 + 32));
  v18[3] = MEMORY[0x18961A860];
  LODWORD(v18[0]) = 0;
  swift_retain();
  sub_181C33914((uint64_t)v18, 1701869908LL, 0xE400000000000000LL);
  uint64_t v9 = swift_release();
  MEMORY[0x186E0E844](v9);
  if (*(void *)((v17 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
    sub_18264ED00();
  }
  sub_18264ED30();
  sub_18264ECDC();
  type metadata accessor for NWConnection.ContentContext();
  swift_initStackObject();
  NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)( 1313821514LL,  0xE400000000000000LL,  0LL,  v1 & 1,  0LL,  v17,  0.5);
  uint64_t v11 = v10;
  uint64_t v12 = sub_181C5D6E0(&v16, v0);
  unint64_t v14 = v13;
  v18[0] = (uint64_t)sub_181C63CD4;
  v18[1] = v4;
  swift_retain();
  NWConnection.send(content:contentContext:isComplete:completion:)(v12, v14, v11, 1, v18);
  sub_181BCD4F0(v12, v14);
  swift_release();
  swift_release();
  return v4;
}

uint64_t Connection1.receiveOnce<A>()(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  void v3[4] = v2;
  v3[2] = a1;
  v3[5] = *v2;
  return swift_task_switch();
}

uint64_t sub_181C5F734()
{
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  unint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v2;
  *unint64_t v2 = v0;
  v2[1] = sub_181C5F7DC;
  return sub_18264F594();
}

uint64_t sub_181C5F7DC()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0) {
    return swift_task_switch();
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_181C5F850()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181C5F884(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v21 = a3;
  uint64_t v5 = *a2;
  uint64_t v6 = *(void *)(*(void *)(*a2 + 88LL) + 16LL);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C58D6A0);
  uint64_t v7 = sub_18264ED90();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = a2[2];
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v20 - v9, a1, v7);
  unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 56LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v13 = (char *)swift_allocObject();
  *((void *)v13 + 2) = *(void *)(v5 + 80);
  *((void *)v13 + 3) = swift_allocateMetadataPack();
  *((void *)v13 + 4) = v6;
  uint64_t WitnessTablePack = swift_allocateWitnessTablePack();
  uint64_t v15 = v21;
  *((void *)v13 + 5) = WitnessTablePack;
  *((void *)v13 + 6) = v15;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v13[v12], v10, v7);
  char v16 = *(nw_connection **)(v11 + 16);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = sub_181C65408;
  *(void *)(v17 + 24) = v13;
  aBlock[4] = sub_181C65D9C;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_181C696F8;
  void aBlock[3] = &block_descriptor_140;
  unint64_t v18 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_receive_message(v16, v18);
  _Block_release(v18);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_181C5FA54(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v7 = *((unsigned __int8 *)v6 + 4);
  uint64_t v8 = *v6;
  if (v9)
  {
    uint64_t v10 = qword_18C58B210;
    swift_retain();
    if (v10 != -1) {
      swift_once();
    }
    nw_protocol_metadata_t v11 = nw_content_context_copy_protocol_metadata( *(nw_content_context_t *)(a3 + 16),  *(nw_protocol_definition_t *)(qword_18C5A4A20 + 32));
    if (v11)
    {
      nw_protocol_metadata_t v12 = v11;
      unint64_t v13 = sub_181C32C0C((uint64_t)v11);
      if (!v13)
      {
        swift_release();
        swift_unknownObjectRelease();
        goto LABEL_16;
      }

      ((void (*)(nw_protocol_metadata_t))v13[12])(v12);
      type metadata accessor for NWProtocolFramer.Message();
      uint64_t v14 = swift_dynamicCastClass();
      swift_release();
      if (v14)
      {
        if (a2 >> 60 == 15) {
          uint64_t v15 = 0LL;
        }
        else {
          uint64_t v15 = a1;
        }
        if (a2 >> 60 == 15) {
          unint64_t v16 = 0xC000000000000000LL;
        }
        else {
          unint64_t v16 = a2;
        }
        sub_181BE4844(a1, a2);
        sub_181C5D888(v15, v16);
        sub_181BCD4F0(v15, v16);
        __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C58D6A0);
        sub_18264ED90();
        sub_18264ED84();
        return swift_release();
      }
    }

    swift_release();
  }

uint64_t Connection1.receiveMessageOnce<A>()(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  void v3[4] = v2;
  v3[2] = a1;
  v3[5] = *(void *)(*(void *)(*(void *)v2 + 88LL) + 16LL);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C58DAE0);
  v3[6] = swift_getTupleTypeMetadata3();
  v3[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_181C5FDC0()
{
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 64) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_181C5FE54;
  return sub_18264F594();
}

uint64_t sub_181C5FE54()
{
  *(void *)(*(void *)v1 + 80LL) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_181C5FEB8()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v1 + *(int *)(v2 + 48));
  uint64_t v4 = *(unsigned __int8 *)(v1 + *(int *)(v2 + 64));
  (*(void (**)(void, uint64_t))(*(void *)(*(void *)(v0 + 40) - 8LL) + 32LL))(*(void *)(v0 + 16), v1);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v3, v4);
}

uint64_t sub_181C5FF30()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181C5FF70(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v21 = a3;
  uint64_t v5 = *a2;
  uint64_t v6 = *(void *)(*(void *)(*a2 + 88LL) + 16LL);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C58DAE0);
  swift_getTupleTypeMetadata3();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C58D6A0);
  uint64_t v7 = sub_18264ED90();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = a2[2];
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v20 - v9, a1, v7);
  unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 56LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v13 = (char *)swift_allocObject();
  *((void *)v13 + 2) = *(void *)(v5 + 80);
  *((void *)v13 + 3) = swift_allocateMetadataPack();
  *((void *)v13 + 4) = v6;
  uint64_t WitnessTablePack = swift_allocateWitnessTablePack();
  uint64_t v15 = v21;
  *((void *)v13 + 5) = WitnessTablePack;
  *((void *)v13 + 6) = v15;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v13[v12], v10, v7);
  unint64_t v16 = *(nw_connection **)(v11 + 16);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = sub_181C65294;
  *(void *)(v17 + 24) = v13;
  aBlock[4] = sub_181C65D9C;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_181C696F8;
  void aBlock[3] = &block_descriptor_125;
  uint64_t v18 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_receive_message(v16, v18);
  _Block_release(v18);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_181C60174( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v45 = a6;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C58DAE0);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v13 = MEMORY[0x1895F8858](TupleTypeMetadata3);
  uint64_t v15 = (char *)&v41 - v14;
  uint64_t v16 = *(void *)(a9 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = *((unsigned __int8 *)a5 + 4);
  uint64_t v20 = *a5;
  if (a3)
  {
    uint64_t v43 = a1;
    uint64_t v21 = qword_18C58B210;
    swift_retain();
    if (v21 != -1) {
      swift_once();
    }
    uint64_t v22 = *(nw_content_context **)(a3 + 16);
    nw_protocol_metadata_t v23 = nw_content_context_copy_protocol_metadata(v22, *(nw_protocol_definition_t *)(qword_18C5A4A20 + 32));
    if (v23)
    {
      nw_protocol_metadata_t v24 = v23;
      uint64_t v42 = v22;
      uint64_t v25 = sub_181C32C0C((uint64_t)v23);
      if (!v25)
      {
        swift_release();
        swift_unknownObjectRelease();
        goto LABEL_16;
      }

      ((void (*)(nw_protocol_metadata_t))v25[12])(v24);
      type metadata accessor for NWProtocolFramer.Message();
      uint64_t v26 = swift_dynamicCastClass();
      swift_release();
      if (v26)
      {
        if (a2 >> 60 == 15) {
          uint64_t v27 = 0LL;
        }
        else {
          uint64_t v27 = v43;
        }
        if (a2 >> 60 == 15) {
          unint64_t v28 = 0xC000000000000000LL;
        }
        else {
          unint64_t v28 = a2;
        }
        sub_181BE4844(v43, a2);
        sub_181C5D888(v27, v28);
        sub_181BCD4F0(v27, v28);
        uint64_t v32 = swift_allocObject();
        *(void *)(v32 + 16) = MEMORY[0x18961AFE8];
        uint64_t v33 = (uint64_t *)(v32 + 16);
        aBlock[4] = sub_181C65144;
        aBlock[5] = v32;
        aBlock[0] = MEMORY[0x1895F87A8];
        aBlock[1] = 1107296256LL;
        aBlock[2] = sub_181C69288;
        void aBlock[3] = &block_descriptor_130;
        uint64_t v34 = _Block_copy(aBlock);
        unint64_t v35 = v42;
        swift_unknownObjectRetain();
        swift_retain();
        swift_release();
        nw_content_context_foreach_protocol_metadata(v35, v34);
        _Block_release(v34);
        swift_unknownObjectRelease();
        swift_beginAccess();
        uint64_t v36 = *v33;
        swift_bridgeObjectRetain();
        swift_release();
        char v37 = *(_BYTE *)(a3 + 64);
        uint64_t v38 = *(int *)(TupleTypeMetadata3 + 48);
        uint64_t v39 = *(int *)(TupleTypeMetadata3 + 64);
        (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v15, v18, a9);
        *(void *)&v15[v38] = v36;
        v15[v39] = v37;
        __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C58D6A0);
        sub_18264ED90();
        sub_18264ED84();
        return swift_release();
      }
    }

    swift_release();
  }

void Connection1.receive<A>()()
{
}

uint64_t sub_181C60600()
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = v0;
  uint64_t v3 = sub_181C5BD00((uint64_t)sub_181C63D10, v2);
  swift_retain();
  return v3;
}

uint64_t sub_181C60654(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = *a3;
  uint64_t v8 = a3[2];
  uint64_t v9 = (void *)swift_allocObject();
  _OWORD v9[2] = *(void *)(v7 + 80);
  v9[3] = swift_allocateMetadataPack();
  uint64_t v9[4] = *(void *)(*(void *)(v7 + 88) + 16LL);
  v9[5] = swift_allocateWitnessTablePack();
  v9[6] = a4;
  v9[7] = a1;
  v9[8] = a2;
  uint64_t v10 = *(nw_connection **)(v8 + 16);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_181C6519C;
  *(void *)(v11 + 24) = v9;
  v14[4] = sub_181C65D9C;
  v14[5] = v11;
  v14[0] = MEMORY[0x1895F87A8];
  v14[1] = 1107296256LL;
  void v14[2] = sub_181C696F8;
  v14[3] = &block_descriptor_115;
  unint64_t v12 = _Block_copy(v14);
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_receive_message(v10, v12);
  _Block_release(v12);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_181C607A0( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, void (*a6)(char *, int *), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v33 = a7;
  uint64_t v34 = a6;
  uint64_t v32 = a1;
  uint64_t v13 = sub_18264F09C();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](v13);
  uint64_t v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  uint64_t v19 = (char *)&v31 - v18;
  uint64_t v20 = *((unsigned __int8 *)a5 + 4);
  uint64_t v21 = *a5;
  if (a3)
  {
    uint64_t v22 = qword_18C58B210;
    swift_retain();
    if (v22 != -1) {
      swift_once();
    }
    nw_protocol_metadata_t v23 = nw_content_context_copy_protocol_metadata( *(nw_content_context_t *)(a3 + 16),  *(nw_protocol_definition_t *)(qword_18C5A4A20 + 32));
    if (v23)
    {
      nw_protocol_metadata_t v24 = v23;
      uint64_t v25 = sub_181C32C0C((uint64_t)v23);
      if (v25)
      {
        uint64_t v31 = v13;
        ((void (*)(nw_protocol_metadata_t))v25[12])(v24);
        type metadata accessor for NWProtocolFramer.Message();
        uint64_t v26 = swift_dynamicCastClass();
        swift_release();
        if (v26)
        {
          if (a2 >> 60 == 15) {
            uint64_t v27 = 0LL;
          }
          else {
            uint64_t v27 = v32;
          }
          if (a2 >> 60 == 15) {
            unint64_t v28 = 0xC000000000000000LL;
          }
          else {
            unint64_t v28 = a2;
          }
          sub_181BE4844(v32, a2);
          sub_181C5D888(v27, v28);
          sub_181BCD4F0(v27, v28);
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a10 - 8) + 56LL))(v19, 0LL, 1LL, a10);
          char v36 = -1;
          int v35 = 0;
          v34(v19, &v35);
          swift_release();
          return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v19, v31);
        }

        swift_release();
        uint64_t v13 = v31;
      }

      else
      {
        swift_release();
        swift_unknownObjectRelease();
      }
    }

    else
    {
      swift_release();
    }
  }

  uint64_t v29 = v21 | (v20 << 32);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a10 - 8) + 56LL))(v17, 1LL, 1LL, a10);
  if (BYTE4(v29) == 255LL)
  {
    char v36 = 0;
    int v35 = 22;
  }

  else
  {
    int v35 = v29;
    char v36 = BYTE4(v29);
  }

  v34(v17, &v35);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
}

void Connection1.receiveMessage<A>()()
{
}

uint64_t sub_181C60B10()
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = v0;
  uint64_t v3 = sub_181C5BD00((uint64_t)sub_181C63D18, v2);
  swift_retain();
  return v3;
}

uint64_t sub_181C60B68(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = *a3;
  uint64_t v8 = a3[2];
  uint64_t v9 = (void *)swift_allocObject();
  _OWORD v9[2] = *(void *)(v7 + 80);
  v9[3] = swift_allocateMetadataPack();
  uint64_t v9[4] = *(void *)(*(void *)(v7 + 88) + 16LL);
  v9[5] = swift_allocateWitnessTablePack();
  v9[6] = a4;
  v9[7] = a1;
  v9[8] = a2;
  uint64_t v10 = *(nw_connection **)(v8 + 16);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_181C6516C;
  *(void *)(v11 + 24) = v9;
  v14[4] = sub_181C65D9C;
  v14[5] = v11;
  v14[0] = MEMORY[0x1895F87A8];
  v14[1] = 1107296256LL;
  void v14[2] = sub_181C696F8;
  v14[3] = &block_descriptor_100;
  unint64_t v12 = _Block_copy(v14);
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_receive_message(v10, v12);
  _Block_release(v12);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_181C60CB4( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, void (*a6)(char *, int *), uint64_t a7)
{
  uint64_t v39 = a7;
  uint64_t v37 = a1;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C58DAE0);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v40 = sub_18264F09C();
  uint64_t v38 = *(void *)(v40 - 8);
  uint64_t v12 = MEMORY[0x1895F8858](v40);
  uint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  uint64_t v16 = (char *)&v35 - v15;
  uint64_t v17 = *((unsigned __int8 *)a5 + 4);
  uint64_t v18 = *a5;
  if (a3)
  {
    uint64_t v19 = qword_18C58B210;
    swift_retain();
    if (v19 != -1) {
      swift_once();
    }
    uint64_t v20 = *(nw_protocol_definition **)(qword_18C5A4A20 + 32);
    nw_content_context_t v36 = *(nw_content_context_t *)(a3 + 16);
    nw_protocol_metadata_t v21 = nw_content_context_copy_protocol_metadata(v36, v20);
    if (v21)
    {
      nw_protocol_metadata_t v22 = v21;
      nw_protocol_metadata_t v23 = sub_181C32C0C((uint64_t)v21);
      if (v23)
      {
        int v35 = a6;
        ((void (*)(nw_protocol_metadata_t))v23[12])(v22);
        type metadata accessor for NWProtocolFramer.Message();
        uint64_t v24 = swift_dynamicCastClass();
        swift_release();
        if (v24)
        {
          if (a2 >> 60 == 15) {
            uint64_t v25 = 0LL;
          }
          else {
            uint64_t v25 = v37;
          }
          if (a2 >> 60 == 15) {
            unint64_t v26 = 0xC000000000000000LL;
          }
          else {
            unint64_t v26 = a2;
          }
          sub_181BE4844(v37, a2);
          sub_181C5D888(v25, v26);
          sub_181BCD4F0(v25, v26);
          uint64_t v27 = *(int *)(TupleTypeMetadata3 + 48);
          uint64_t v28 = *(int *)(TupleTypeMetadata3 + 64);
          uint64_t v29 = swift_allocObject();
          *(void *)(v29 + 16) = MEMORY[0x18961AFE8];
          uint64_t v30 = (uint64_t *)(v29 + 16);
          aBlock[4] = sub_181C65144;
          aBlock[5] = v29;
          aBlock[0] = MEMORY[0x1895F87A8];
          aBlock[1] = 1107296256LL;
          aBlock[2] = sub_181C69288;
          void aBlock[3] = &block_descriptor_105;
          uint64_t v31 = _Block_copy(aBlock);
          uint64_t v32 = v36;
          swift_unknownObjectRetain();
          swift_retain();
          swift_release();
          nw_content_context_foreach_protocol_metadata(v32, v31);
          _Block_release(v31);
          swift_unknownObjectRelease();
          swift_beginAccess();
          uint64_t v33 = *v30;
          swift_bridgeObjectRetain();
          swift_release();
          *(void *)&v16[v27] = v33;
          v16[v28] = *(_BYTE *)(a3 + 64);
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata3 - 8) + 56LL))( v16,  0LL,  1LL,  TupleTypeMetadata3);
          char v42 = -1;
          int v41 = 0;
          v35(v16, &v41);
          swift_release();
          return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v16, v40);
        }

        swift_release();
        a6 = v35;
      }

      else
      {
        swift_release();
        swift_unknownObjectRelease();
      }
    }

    else
    {
      swift_release();
    }
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata3 - 8) + 56LL))( v14,  1LL,  1LL,  TupleTypeMetadata3);
  if (((v18 | (unint64_t)(v17 << 32)) >> 32) == 255LL)
  {
    BYTE4(aBlock[0]) = 0;
    LODWORD(aBlock[0]) = 22;
  }

  else
  {
    LODWORD(aBlock[0]) = v18;
    BYTE4(aBlock[0]) = (v18 | (unint64_t)(v17 << 32)) >> 32;
  }

  a6(v14, (int *)aBlock);
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v14, v40);
}

void sub_181C610BC()
{
}

uint64_t sub_181C61124()
{
  uint64_t v4 = swift_retain();
  uint64_t v5 = sub_181C6509C( v4,  (void (*)(void, uint64_t *))type metadata accessor for SendProgress,  (uint64_t (*)(uint64_t))sub_181C63B40);
  swift_release();
  unint64_t v6 = MEMORY[0x18961AFE8];
  if (v2) {
    unint64_t v6 = v2;
  }
  unint64_t v10 = v6;
  LOBYTE(v11[0]) = v3;
  type metadata accessor for NWProtocolWebSocket.Metadata();
  swift_allocObject();
  swift_bridgeObjectRetain();
  NWProtocolWebSocket.Metadata.init(opcode:)((char *)v11);
  MEMORY[0x186E0E844]();
  if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
    sub_18264ED00();
  }
  sub_18264ED30();
  sub_18264ECDC();
  type metadata accessor for NWConnection.ContentContext();
  swift_initStackObject();
  NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)( 0x746E6F43646E6573LL,  0xEB00000000747865LL,  0LL,  0,  0LL,  v10,  0.5);
  uint64_t v8 = v7;
  v11[0] = (uint64_t)sub_181C63CD4;
  v11[1] = v5;
  swift_retain();
  NWConnection.send(content:contentContext:isComplete:completion:)(v1, v0, v8, 1, v11);
  swift_release();
  swift_release();
  return v5;
}

void Connection1<>.send(_:metadata:)(void *a1)
{
  uint64_t v1 = sub_181C5D6E0(&v3, a1);
  sub_181BCD4AC(v1, v2);
  sub_181C610BC();
}

void sub_181C61388()
{
}

uint64_t sub_181C613D8()
{
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v1;
  __swift_instantiateConcreteTypeFromMangledName(qword_18C58DAF0);
  void *v1 = v0;
  v1[1] = sub_181C61470;
  return sub_18264F594();
}

uint64_t sub_181C61470()
{
  *(void *)(*(void *)v1 + 80LL) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_181C614D4()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(unsigned __int8 *)(v0 + 48);
  **(_BYTE **)(v0 + 56) = *(_BYTE *)(v0 + 16);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 8))(v1, v2, v3, v4);
}

uint64_t sub_181C614F8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_181C61508(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58DFE0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = *(void *)(a2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))( v9 + v8,  (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  unint64_t v10 = *(nw_connection **)(v7 + 16);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_181C65158;
  *(void *)(v11 + 24) = v9;
  aBlock[4] = sub_181C65D9C;
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_181C696F8;
  void aBlock[3] = &block_descriptor_85;
  uint64_t v12 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_receive_message(v10, v12);
  _Block_release(v12);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_181C6167C(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  unint64_t v5 = *a5 | ((unint64_t)*((unsigned __int8 *)a5 + 4) << 32);
  if (a3)
  {
    uint64_t v8 = result;
    uint64_t v9 = qword_18C58B070;
    swift_retain();
    if (v9 != -1) {
      swift_once();
    }
    unint64_t v10 = *(nw_content_context **)(a3 + 16);
    nw_protocol_metadata_t v11 = nw_content_context_copy_protocol_metadata(v10, *((nw_protocol_definition_t *)off_18C58B078 + 4));
    if (v11)
    {
      nw_protocol_metadata_t v12 = v11;
      uint64_t v13 = sub_181C32C0C((uint64_t)v11);
      if (v13)
      {
        ((void (*)(nw_protocol_metadata_t))v13[12])(v12);
        type metadata accessor for NWProtocolWebSocket.Metadata();
        uint64_t v14 = swift_dynamicCastClass();
        if (v14)
        {
          char v28 = *(_BYTE *)(v14 + 24);
          if (a2 >> 60 == 15) {
            uint64_t v15 = 0LL;
          }
          else {
            uint64_t v15 = v8;
          }
          unint64_t v16 = 0xC000000000000000LL;
          if (a2 >> 60 != 15) {
            unint64_t v16 = a2;
          }
          unint64_t v26 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v16;
          uint64_t v27 = v15;
          uint64_t v17 = swift_allocObject();
          *(void *)(v17 + 16) = MEMORY[0x18961AFE8];
          uint64_t v18 = (void **)(v17 + 16);
          uint64_t v33 = sub_181C65144;
          uint64_t v34 = v17;
          uint64_t aBlock = MEMORY[0x1895F87A8];
          uint64_t v30 = 1107296256LL;
          uint64_t v31 = sub_181C69288;
          uint64_t v32 = &block_descriptor_90;
          uint64_t v19 = _Block_copy(&aBlock);
          sub_181BE4844(v8, a2);
          swift_unknownObjectRetain();
          swift_retain();
          swift_release();
          nw_content_context_foreach_protocol_metadata(v10, v19);
          _Block_release(v19);
          swift_unknownObjectRelease();
          swift_beginAccess();
          uint64_t v20 = *v18;
          swift_bridgeObjectRetain();
          swift_release();
          char v21 = *(_BYTE *)(a3 + 64);
          LOBYTE(aBlock) = v28;
          uint64_t v30 = v27;
          uint64_t v31 = v26;
          uint64_t v32 = v20;
          LOBYTE(v33) = v21;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58DFE0);
          sub_18264ED84();
          swift_release();
          return swift_release();
        }

        swift_release();
      }

      else
      {
        swift_unknownObjectRelease();
      }
    }

    if (HIDWORD(v5) > 0xFE) {
      return swift_release();
    }
    sub_181BBE220();
    uint64_t v24 = swift_allocError();
    *(_DWORD *)uint64_t v25 = v5;
    *(_BYTE *)(v25 + 4) = BYTE4(v5);
    uint64_t aBlock = v24;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58DFE0);
    sub_18264ED78();
    return swift_release();
  }

  if (HIDWORD(v5) <= 0xFE)
  {
    sub_181BBE220();
    uint64_t v22 = swift_allocError();
    *(_DWORD *)uint64_t v23 = v5;
    *(_BYTE *)(v23 + 4) = BYTE4(v5);
    uint64_t aBlock = v22;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58DFE0);
    return sub_18264ED78();
  }

  return result;
}

void sub_181C619AC(uint64_t *a1)
{
}

uint64_t sub_181C61A00()
{
  uint64_t v2 = sub_181C5BD00(v0, v1);
  swift_retain();
  return v2;
}

uint64_t sub_181C61A38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  uint64_t v7 = *(nw_connection **)(v5 + 16);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_181C65118;
  *(void *)(v8 + 24) = v6;
  void v11[4] = sub_181C65D9C;
  v11[5] = v8;
  v11[0] = MEMORY[0x1895F87A8];
  v11[1] = 1107296256LL;
  void v11[2] = sub_181C696F8;
  v11[3] = &block_descriptor_69;
  uint64_t v9 = _Block_copy(v11);
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_receive_message(v7, v9);
  _Block_release(v9);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_181C61B40( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, void (*a6)(uint64_t *, int *))
{
  unint64_t v7 = *a5 | ((unint64_t)*((unsigned __int8 *)a5 + 4) << 32);
  if (a3)
  {
    uint64_t v11 = qword_18C58B070;
    swift_retain();
    if (v11 != -1) {
      swift_once();
    }
    nw_protocol_metadata_t v12 = *(nw_content_context **)(a3 + 16);
    nw_protocol_metadata_t v13 = nw_content_context_copy_protocol_metadata(v12, *((nw_protocol_definition_t *)off_18C58B078 + 4));
    if (v13)
    {
      nw_protocol_metadata_t v14 = v13;
      uint64_t v15 = sub_181C32C0C((uint64_t)v13);
      if (v15)
      {
        ((void (*)(nw_protocol_metadata_t))v15[12])(v14);
        type metadata accessor for NWProtocolWebSocket.Metadata();
        uint64_t v16 = swift_dynamicCastClass();
        if (v16)
        {
          uint64_t v27 = *(unsigned __int8 *)(v16 + 24);
          if (a2 >> 60 == 15) {
            uint64_t v17 = 0LL;
          }
          else {
            uint64_t v17 = a1;
          }
          unint64_t v18 = 0xC000000000000000LL;
          if (a2 >> 60 != 15) {
            unint64_t v18 = a2;
          }
          unint64_t v25 = v18;
          uint64_t v26 = v17;
          uint64_t v19 = swift_allocObject();
          *(void *)(v19 + 16) = MEMORY[0x18961AFE8];
          uint64_t v20 = (uint64_t *)(v19 + 16);
          nw_content_context_t v36 = sub_181C65144;
          uint64_t v37 = v19;
          uint64_t aBlock = MEMORY[0x1895F87A8];
          uint64_t v33 = 1107296256LL;
          uint64_t v34 = sub_181C69288;
          uint64_t v35 = (uint64_t)&block_descriptor_75;
          char v21 = _Block_copy(&aBlock);
          sub_181BE4844(a1, a2);
          swift_unknownObjectRetain();
          swift_retain();
          swift_release();
          nw_content_context_foreach_protocol_metadata(v12, v21);
          _Block_release(v21);
          swift_unknownObjectRelease();
          swift_beginAccess();
          uint64_t v22 = *v20;
          swift_bridgeObjectRetain();
          swift_release();
          char v23 = *(_BYTE *)(a3 + 64);
          uint64_t aBlock = v27;
          uint64_t v33 = v26;
          uint64_t v34 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v25;
          uint64_t v35 = v22;
          LOBYTE(v36) = v23;
          char v29 = -1;
          int v28 = 0;
          a6(&aBlock, &v28);
          swift_release();
          swift_release();
          sub_181BCD4F0(v26, v25);
          return swift_bridgeObjectRelease();
        }

        swift_release();
      }

      else
      {
        swift_unknownObjectRelease();
      }
    }

    uint64_t aBlock = 0LL;
    uint64_t v33 = 0LL;
    uint64_t v34 = 0LL;
    uint64_t v35 = 1LL;
    LOBYTE(v36) = 0;
    if (HIDWORD(v7) <= 0xFE)
    {
      char v31 = BYTE4(v7);
      int v30 = v7;
    }

    else
    {
      char v31 = 0;
      int v30 = 22;
    }

    a6(&aBlock, &v30);
    return swift_release();
  }

  else
  {
    uint64_t aBlock = 0LL;
    uint64_t v33 = 0LL;
    uint64_t v34 = 0LL;
    uint64_t v35 = 1LL;
    LOBYTE(v36) = 0;
    if (HIDWORD(v7) <= 0xFE)
    {
      char v31 = BYTE4(v7);
      int v30 = v7;
    }

    else
    {
      char v31 = 0;
      int v30 = 22;
    }

    return ((uint64_t (*)(uint64_t *, int *))a6)(&aBlock, &v30);
  }

void Connection1<>.ping(_:metadata:)()
{
}

  ;
}

void Connection1<>.pong(_:metadata:)()
{
}

  ;
}

void Connection1<>.close(code:reason:metadata:)()
{
}

uint64_t sub_181C61F24()
{
  uint64_t v5 = swift_retain();
  uint64_t v6 = sub_181C6509C( v5,  (void (*)(void, uint64_t *))type metadata accessor for SendProgress,  (uint64_t (*)(uint64_t))sub_181C63B40);
  swift_release();
  unint64_t v7 = MEMORY[0x18961AFE8];
  if (v3) {
    unint64_t v7 = v3;
  }
  unint64_t v17 = v7;
  type metadata accessor for NWProtocolWebSocket.Metadata();
  uint64_t v8 = swift_allocObject();
  *(_BYTE *)(v8 + 24) = 3;
  *(_WORD *)(v8 + 40) = 4;
  *(_BYTE *)(v8 + 42) = 0;
  *(void *)(v8 + 32) = 0LL;
  swift_bridgeObjectRetain();
  metadata = nw_ws_create_metadata(nw_ws_opcode_close);
  *(void *)(v8 + 16) = metadata;
  swift_beginAccess();
  *(_WORD *)(v8 + 40) = v2;
  *(_BYTE *)(v8 + 42) = v4;
  if (!v4) {
    nw_ws_close_code_t v2 = word_182662144[(char)v2];
  }
  nw_ws_metadata_set_close_code(metadata, v2);
  uint64_t v10 = swift_retain();
  MEMORY[0x186E0E844](v10);
  if (*(void *)((v17 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
    sub_18264ED00();
  }
  sub_18264ED30();
  sub_18264ECDC();
  if (v0)
  {
    swift_bridgeObjectRetain();
    uint64_t v0 = sub_181BDAEEC(v1, v0);
    unint64_t v12 = v11;
  }

  else
  {
    unint64_t v12 = 0xF000000000000000LL;
  }

  type metadata accessor for NWConnection.ContentContext();
  swift_initStackObject();
  NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)( 0x746E6F43646E6573LL,  0xEB00000000747865LL,  0LL,  0,  0LL,  v17,  0.5);
  uint64_t v14 = v13;
  v16[0] = (uint64_t)sub_181C63CD4;
  v16[1] = v6;
  swift_retain();
  NWConnection.send(content:contentContext:isComplete:completion:)(v0, v12, v14, 1, v16);
  swift_release();
  swift_release();
  sub_181BE61C8(v0, v12);
  swift_release();
  return v6;
}

void Connection1<>.get()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58B040);
  MEMORY[0x1895F8858](v0);
  sub_181C62524();
}

uint64_t sub_181C621A4(uint64_t a1)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = *(void *)(*(void *)(v6 + OBJC_IVAR____TtC7Network13_NWConnection_parameters) + 16LL);
  uint64_t v8 = (void *)(v7 + 16);
  uint64_t v9 = (os_unfair_lock_s *)(v7 + 24);
  swift_retain();
  os_unfair_lock_lock(v9);
  sub_181C96C68(v8, (void *)(v1 + 176));
  os_unfair_lock_unlock(v9);
  uint64_t v10 = *(void **)(v1 + 176);
  swift_release();
  unint64_t v11 = (nw_endpoint *)nw_parameters_copy_url_endpoint(v10);
  swift_unknownObjectRelease();
  if (!v11)
  {
    *(_OWORD *)(v1 + 184) = 0u;
    *(_OWORD *)(v1 + 200) = 0u;
    *(_OWORD *)(v1 + 216) = 0u;
    *(_OWORD *)(v1 + 232) = 0u;
    *(void *)(v1 + 176) = 22LL;
    *(void *)(v1 + 248) = 0x8000000000000000LL;
    *(void *)(v1 + 256) = 0LL;
    *(void *)(v1 + 264) = 0LL;
    sub_181C5A1DC((_OWORD *)(v1 + 176));
    return a1;
  }

  *(void *)uint64_t v1 = v11;
  nw_endpoint_get_url(v11);
  sub_18264EB80();
  sub_18264E550();
  swift_bridgeObjectRelease();
  uint64_t v12 = sub_18264E568();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48LL))(v4, 1LL, v12);
  if ((_DWORD)result != 1)
  {
    *(void *)(v1 + 8) = 5522759LL;
    *(void *)(v1 + 16) = 0xE300000000000000LL;
    HTTPFields.init(dictionaryLiteral:)(MEMORY[0x18961AFE8], (void *)(v1 + 168));
    HTTPRequest.init(method:url:headerFields:)((uint64_t *)(v1 + 8), v4, (uint64_t *)(v1 + 168), (void *)(v1 + 176));
    type metadata accessor for __NWHTTPRequest();
    uint64_t v14 = swift_allocObject();
    memcpy((void *)(v14 + 16), (const void *)(v1 + 176), 0x120uLL);
    sub_181C0F308((void *)(v1 + 176));
    metadata_for_request = nw_http_create_metadata_for_request((void *)v14);
    swift_release();
    type metadata accessor for NWProtocolHTTP.Metadata();
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = metadata_for_request;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58A250);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18265F3B0;
    *(void *)(inited + 32) = v16;
    *(void *)(v1 + 8) = inited;
    sub_18264ECDC();
    unint64_t v18 = *(void *)(v1 + 8);
    type metadata accessor for NWConnection.ContentContext();
    swift_initStackObject();
    swift_retain();
    NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)( 0x746E6F43646E6573LL,  0xEB00000000747865LL,  0LL,  1,  0LL,  v18,  0.5);
    uint64_t v20 = v19;
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = a1;
    *(void *)(v21 + 24) = v3;
    uint64_t v22 = *(nw_connection **)(v6 + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_unknownObjectRetain();
    uint64_t v24 = a1;
    unint64_t v25 = (dispatch_data_s *)NWCreateDispatchDataFromNSData(0LL, v23);
    uint64_t v26 = *(nw_content_context **)(v20 + 16);
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = sub_181C63D5C;
    *(void *)(v27 + 24) = v21;
    *(void *)(v1 + 40) = sub_181C63D64;
    *(void *)(v1 + 48) = v27;
    *(void *)(v1 + 8) = MEMORY[0x1895F87A8];
    *(void *)(v1 + 16) = 1107296256LL;
    *(void *)(v1 + 24) = sub_181BBF440;
    *(void *)(v1 + 32) = &block_descriptor_14;
    int v28 = _Block_copy((const void *)(v1 + 8));
    swift_retain();
    swift_unknownObjectRetain();
    swift_release();
    nw_connection_send(v22, v25, v26, 1, v28);
    _Block_release(v28);
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();

    a1 = v24;
    swift_unknownObjectRelease();
    sub_181C63D84((void *)(v1 + 176));
    swift_release();
    return a1;
  }

  __break(1u);
  return result;
}

void sub_181C62524()
{
}

uint64_t sub_181C62570()
{
  uint64_t v0 = swift_retain();
  uint64_t v1 = sub_181C6509C( v0,  (void (*)(void, uint64_t *))type metadata accessor for HTTP.Progress,  (uint64_t (*)(uint64_t))sub_181C64F70);
  swift_release();
  return v1;
}

uint64_t sub_181C625B8(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  if (*((unsigned __int8 *)a1 + 4) == 255LL)
  {
    unint64_t v10 = 3LL;
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    unint64_t v15 = 0xC000000000000000LL;
    sub_181C5A1DC(&v10);
    uint64_t v5 = *(nw_connection **)(*(void *)(a3 + 16) + 16LL);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = sub_181C64F68;
    *(void *)(v6 + 24) = a2;
    uint64_t v9[4] = sub_181C4EFA8;
    v9[5] = v6;
    v9[0] = MEMORY[0x1895F87A8];
    v9[1] = 1107296256LL;
    _OWORD v9[2] = sub_181C696F8;
    v9[3] = &block_descriptor_53;
    uint64_t v7 = _Block_copy(v9);
    swift_retain_n();
    swift_unknownObjectRetain();
    swift_release();
    nw_connection_receive_message(v5, v7);
    _Block_release(v7);
    swift_release();
    return swift_unknownObjectRelease();
  }

  else
  {
    unint64_t v10 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    unint64_t v15 = 0x8000000000000000LL;
    return sub_181C5A1DC(&v10);
  }

uint64_t sub_181C62710(uint64_t result, unint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v5 = result;
    uint64_t v6 = qword_18C58B198;
    swift_retain();
    if (v6 != -1) {
      swift_once();
    }
    nw_protocol_metadata_t v7 = nw_content_context_copy_protocol_metadata( *(nw_content_context_t *)(a3 + 16),  *((nw_protocol_definition_t *)off_18C58CAE0 + 4));
    if (v7)
    {
      nw_protocol_metadata_t v8 = v7;
      uint64_t v9 = sub_181C32C0C((uint64_t)v7);
      if (!v9)
      {
        swift_release();
        return swift_unknownObjectRelease();
      }

      ((void (*)(nw_protocol_metadata_t))v9[12])(v8);
      type metadata accessor for NWProtocolHTTP.Metadata();
      uint64_t v10 = swift_dynamicCastClass();
      if (v10)
      {
        __int128 v11 = nw_http_metadata_copy_response(*(void **)(v10 + 16));
        if (v11)
        {
          __int128 v12 = v11;
          swift_beginAccess();
          uint64_t v13 = v12[3];
          uint64_t v21 = v12[4];
          uint64_t v22 = v12[2];
          uint64_t v14 = v12[5];
          uint64_t v20 = *((unsigned __int8 *)v12 + 48);
          uint64_t v15 = v12[8];
          uint64_t v16 = v12[10];
          uint64_t v18 = v12[9];
          uint64_t v19 = v12[7];
          uint64_t v17 = v12[11];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_unknownObjectRelease();
          *(void *)&__int128 v23 = v22;
          *((void *)&v23 + 1) = v13;
          uint64_t v24 = v21;
          uint64_t v25 = v14;
          uint64_t v26 = v20;
          uint64_t v27 = v19;
          uint64_t v28 = v15;
          uint64_t v29 = v18;
          uint64_t v30 = v16;
          uint64_t v31 = v17 | 0x4000000000000000LL;
          uint64_t v32 = v5;
          unint64_t v33 = a2;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          sub_181BE4844(v5, a2);
          sub_181C5A1DC(&v23);
          swift_release_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_release();
          swift_release();
          return sub_181BE61C8(v5, a2);
        }
      }

      swift_release();
    }

    return swift_release();
  }

  return result;
}

double sub_181C62998@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if ((swift_dynamicCast() & 1) == 0)
  {
    *(void *)(a2 + 32) = 0LL;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }

  return result;
}

uint64_t sub_181C62A20( uint64_t a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t result = sub_18264E484();
  uint64_t v9 = result;
  if (result)
  {
    uint64_t result = sub_18264E4A8();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }

    v9 += a1 - result;
  }

  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v12 = sub_18264E49C();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t v14 = v9 + v13;
  if (v9) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0LL;
  }
  uint64_t result = (uint64_t)sub_181C546D4(v9, v15, a4);
  if (v4) {
    return v16;
  }
  return result;
}

char *sub_181C62ACC(char *a1, int64_t a2, char *__src, int64_t a4)
{
  uint64_t v4 = __src;
  if (!a4 || !a2) {
    return v4;
  }
  if (a4 >= a2) {
    size_t v5 = a2;
  }
  else {
    size_t v5 = a4;
  }
  if ((v5 & 0x8000000000000000LL) == 0 && (&a1[v5] <= __src || &__src[v5] <= a1))
  {
    memcpy(a1, __src, v5);
    v4 += v5;
    return v4;
  }

  uint64_t result = (char *)sub_18264F360();
  __break(1u);
  return result;
}

uint64_t sub_181C62BDC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_18264EB20();
  *a1 = result;
  a1[1] = v3;
  return result;
}

BOOL _s7Network4HTTPC8ResponseV2eeoiySbAE_AEtFZ_0(__int128 *a1, __int128 *a2)
{
  __int128 v2 = *a1;
  uint64_t v3 = *((void *)a1 + 3);
  char v4 = *((_BYTE *)a1 + 32);
  __int128 v5 = *(__int128 *)((char *)a1 + 40);
  uint64_t v6 = *((void *)a1 + 7);
  uint64_t v8 = *((void *)a1 + 10);
  unint64_t v7 = *((void *)a1 + 11);
  __int128 v9 = *a2;
  uint64_t v10 = *((void *)a2 + 2);
  uint64_t v11 = *((void *)a2 + 3);
  char v12 = *((_BYTE *)a2 + 32);
  __int128 v13 = *(__int128 *)((char *)a2 + 40);
  uint64_t v14 = *((void *)a2 + 7);
  uint64_t v16 = *((void *)a2 + 10);
  unint64_t v15 = *((void *)a2 + 11);
  uint64_t v28 = *((void *)a1 + 2);
  uint64_t v29 = v3;
  char v30 = v4;
  __int128 v31 = v5;
  uint64_t v32 = v6;
  __int128 v33 = a1[4];
  __int128 v20 = v9;
  uint64_t v21 = v10;
  uint64_t v22 = v11;
  char v23 = v12;
  __int128 v24 = v13;
  uint64_t v25 = v14;
  __int128 v26 = a2[4];
  __int128 v27 = v2;
  if (v7 >> 60 == 15)
  {
    if (v15 >> 60 == 15) {
      return 1LL;
    }
    goto LABEL_6;
  }

  if (v15 >> 60 == 15)
  {
LABEL_6:
    sub_181BE4844(v8, v7);
    sub_181BE4844(v16, v15);
    sub_181BE61C8(v8, v7);
    sub_181BE61C8(v16, v15);
    return 0LL;
  }

  sub_181BE4844(v8, v7);
  sub_181BE4844(v16, v15);
  sub_181C05AD4(v8, v7);
  char v18 = v17;
  sub_181BE61C8(v16, v15);
  sub_181BE61C8(v8, v7);
  return (v18 & 1) != 0;
}

void _s7Network4HTTPC5StateO2eeoiySbAE_AEtFZ_0(uint64_t a1)
{
  __asm { BR              X10 }

uint64_t sub_181C62E10( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (v10 >> 62)
  {
    sub_181C6498C(v14, v8, a3, a4, a5, a6, a7, a8, v9, v10, v11, v12);
    goto LABEL_13;
  }

  if (BYTE4(v13))
  {
    int v15 = v13;
    if (BYTE4(v13) == 1)
    {
      sub_181C65A28((uint64_t)v20);
      if (BYTE4(v14) != 1) {
        goto LABEL_14;
      }
    }

    else
    {
      sub_181C65A28((uint64_t)v20);
      if (BYTE4(v14) != 2) {
        goto LABEL_14;
      }
    }

    if (v15 == (_DWORD)v14) {
      goto LABEL_11;
    }
LABEL_14:
    char v18 = 0;
    return v18 & 1;
  }

  if (BYTE4(v14))
  {
LABEL_13:
    sub_181C65A28((uint64_t)v20);
    goto LABEL_14;
  }

  int v16 = sub_18264E958();
  int v17 = sub_18264E958();
  sub_181C65A28((uint64_t)v20);
  if (v16 != v17) {
    goto LABEL_14;
  }
LABEL_11:
  char v18 = 1;
  return v18 & 1;
}

uint64_t _s7Network9SendStateO2eeoiySbAC_ACtFZ_0(unsigned int *a1, unsigned int *a2)
{
  unsigned int v2 = *((unsigned __int8 *)a1 + 4);
  unint64_t v3 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
  unint64_t v4 = *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32);
  unsigned int v5 = v2 >> 6;
  if (v5)
  {
    if (v5 != 1) {
      __asm { BR              X10 }
    }

    if (((v4 >> 38) & 3) != 1) {
      return 0LL;
    }
    uint64_t v6 = HIDWORD(v3) & 0x3F;
    uint64_t v7 = HIDWORD(v4) & 0x3F;
    if ((_DWORD)v6)
    {
      if ((_DWORD)v6 == 1) {
        return (_DWORD)v7 == 1 && (_DWORD)v3 == *a2;
      }
      return (_DWORD)v7 == 2 && (_DWORD)v3 == *a2;
    }

    goto LABEL_20;
  }

  if (((v4 >> 38) & 3) != 0) {
    return 0LL;
  }
  LODWORD(v7) = BYTE4(v4);
  if (!HIDWORD(v3))
  {
LABEL_20:
    if (!(_DWORD)v7)
    {
      int v10 = sub_18264E958();
    }

    return 0LL;
  }

  if (HIDWORD(v3) != 1) {
    return (_DWORD)v7 == 2 && (_DWORD)v3 == *a2;
  }
  return (_DWORD)v7 == 1 && (_DWORD)v3 == *a2;
}

uint64_t sub_181C6335C(uint64_t a1)
{
  uint64_t v1 = *(nw_framer **)(a1 + 16);
  while (1)
  {
    uint64_t v28 = 0LL;
    char v29 = 1;
    MEMORY[0x1895F8858](a1);
    void v20[2] = &v28;
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = sub_181C65D1C;
    *(void *)(v4 + 24) = v20;
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = sub_181C52880;
    *(void *)(v5 + 24) = v4;
    __int128 v26 = sub_181C52898;
    uint64_t v27 = v5;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_181C33E80;
    uint64_t v25 = &block_descriptor_325;
    uint64_t v6 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    BOOL v7 = nw_framer_parse_input(v1, 8uLL, 8uLL, 0LL, v6);
    swift_unknownObjectRelease();
    _Block_release(v6);
    LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if (!v7) {
      return 8LL;
    }
    if ((v29 & 1) == 0)
    {
      int v9 = v28;
      unsigned int v10 = HIDWORD(v28);
      if (qword_18C58B210 != -1) {
        swift_once();
      }
      uint64_t v11 = qword_18C5A4A20;
      type metadata accessor for NWProtocolFramer.Message();
      uint64_t inited = swift_initStackObject();
      message = nw_framer_protocol_create_message(*(nw_protocol_definition_t *)(v11 + 32));
      *(void *)(inited + 16) = message;
      uint64_t v25 = (void *)MEMORY[0x18961A860];
      LODWORD(aBlock[0]) = v9;
      sub_181BE48BC((uint64_t)aBlock, (uint64_t)v22, (uint64_t *)&unk_18C58D300);
      uint64_t v14 = v23;
      if (v23)
      {
        int v15 = __swift_project_boxed_opaque_existential_2(v22, v23);
        uint64_t v16 = *(void *)(v14 - 8);
        MEMORY[0x1895F8858](v15);
        char v18 = (char *)&v22[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(char *))(v16 + 16))(v18);
        unsigned int v2 = (void *)sub_18264F4E0();
        uint64_t v19 = *(void (**)(char *, uint64_t))(v16 + 8);
        swift_retain();
        v19(v18, v14);
        __swift_destroy_boxed_opaque_existential_2((uint64_t)v22);
      }

      else
      {
        swift_retain();
        unsigned int v2 = 0LL;
      }

      nw_framer_message_set_object_value(message, "Type", v2);
      swift_unknownObjectRelease();
      sub_181BDA0F0((uint64_t)aBlock, (uint64_t *)&unk_18C58D300);
      swift_release();
      BOOL v3 = nw_framer_deliver_input_no_copy(v1, bswap32(v10), *(nw_framer_message_t *)(inited + 16), 1);
      a1 = swift_unknownObjectRelease();
      if (v3) {
        continue;
      }
    }

    return 0LL;
  }

  __break(1u);
  return result;
}

void sub_181C63680(uint64_t a1, uint64_t a2, size_t a3)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  int v5 = sub_181C5489C();
  if ((a3 & 0x8000000000000000LL) != 0 || HIDWORD(a3))
  {
    sub_18264F318();
    __break(1u);
  }

  else
  {
    __src[0] = v5;
    __src[1] = bswap32(a3);
    uint64_t v6 = sub_181C51DC0(__src, 8LL);
    unint64_t v8 = v7;
    int v9 = *(nw_framer **)(a1 + 16);
    swift_unknownObjectRetain();
    unsigned int v10 = (void *)sub_18264E5EC();
    unint64_t v12 = (dispatch_data_s *)NWCreateDispatchDataFromNSData(v10, v11);

    if (!v12) {
      __break(1u);
    }
    nw_framer_write_output_data(v9, v12);
    swift_unknownObjectRelease();

    if (nw_framer_write_output_no_copy(v9, a3))
    {
      sub_181BCD4F0(v6, v8);
    }

    else
    {
      sub_181BBE220();
      uint64_t v13 = (void *)swift_allocError();
      *(_DWORD *)uint64_t v14 = 22;
      *(_BYTE *)(v14 + 4) = 0;
      swift_willThrow();
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58BC90);
      uint64_t v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = xmmword_18265BE50;
      sub_18264F168();
      sub_18264EB74();
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D6A0);
      sub_18264F2DC();
      *(void *)(v15 + 56) = MEMORY[0x189617FA8];
      *(void *)(v15 + 32) = 0LL;
      *(void *)(v15 + 40) = 0xE000000000000000LL;
      sub_18264F630();
      sub_181BCD4F0(v6, v8);
      swift_bridgeObjectRelease();
    }
  }

uint64_t sub_181C63918(unsigned int *a1)
{
  return sub_181C55D78(a1, v1);
}

void type metadata accessor for SendProgress()
{
}

uint64_t sub_181C6393C(uint64_t a1)
{
  return sub_181C579D4( a1,  v1,  qword_18C58DE30,  (uint64_t)&unk_189BB1750,  (uint64_t)sub_181C65B84,  (uint64_t)&block_descriptor_304);
}

uint64_t sub_181C63974(uint64_t a1)
{
  return sub_181C579D4( a1,  v1,  &qword_18C58A1F0,  (uint64_t)&unk_189BB1700,  (uint64_t)sub_181C65AF4,  (uint64_t)&block_descriptor_298);
}

uint64_t type metadata accessor for HTTP1()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for TCP()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for HTTP2()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for HTTP3()
{
  return objc_opt_self();
}

void type metadata accessor for HTTP.Progress()
{
}

uint64_t sub_181C63A38( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12)
{
  if (a10 >> 62 == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return sub_181BE61C8(a11, a12);
  }

  return result;
}

uint64_t sub_181C63AC8(uint64_t a1)
{
  return sub_181C579D4( a1,  v1,  qword_18C58DF50,  (uint64_t)&unk_189BB1660,  (uint64_t)sub_181C658D8,  (uint64_t)&block_descriptor_286);
}

uint64_t sub_181C63B00(uint64_t a1)
{
  return sub_181C579D4( a1,  v1,  &qword_18C58E020,  (uint64_t)&unk_189BB1610,  (uint64_t)sub_181C658B8,  (uint64_t)&block_descriptor_280);
}

uint64_t sub_181C63B38(uint64_t a1)
{
  return sub_181C5C214(a1, v1);
}

void sub_181C63B40(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v2 + qword_18C58DA50;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(qword_18C58DE30);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = (void *)(v2 + qword_18C58DA60);
  uint64_t v7 = MEMORY[0x18961AFE8];
  *uint64_t v6 = MEMORY[0x18961AFE8];
  v6[1] = v7;
  _OWORD v6[2] = v7;
  v6[3] = v7;
  v6[4] = v7;
  v6[5] = v7;
  uint64_t v8 = v2 + qword_18C58DD98;
  *(_BYTE *)(v8 + 4) = 0x80;
  *(_DWORD *)uint64_t v8 = 0;
  *(void *)(v2 + 16) = a1;
  swift_retain();
  type metadata accessor for SendProgress();
}

uint64_t sub_181C63C00(uint64_t a1)
{
  uint64_t v3 = MEMORY[0x186E12084](&protocol conformance descriptor for SendProgress<A, Pack{repeat B}>, a1);
  sub_181C560E4( (uint64_t)&v5,  a1,  (uint64_t)&protocol witness table for SendProgress<A, Pack{repeat B}>,  v3,  (uint64_t)&unk_189BB0C88,  (uint64_t)sub_181C6510C,  (uint64_t)&block_descriptor_59);
  return v1;
}

uint64_t sub_181C63C5C()
{
  return swift_deallocObject();
}

uint64_t sub_181C63C80(unsigned int *a1)
{
  return sub_181C5DDB4(a1);
}

uint64_t sub_181C63C98(uint64_t a1)
{
  return sub_181C5CA9C(a1, v1[3], v1[4], v1[5]);
}

uint64_t sub_181C63CA4(uint64_t a1)
{
  return sub_181C5CDF0(a1, *(void *)(v1 + 24), *(void *)(v1 + 32));
}

void type metadata accessor for AsyncSequenceReceive()
{
}

uint64_t sub_181C63CBC(uint64_t a1, uint64_t a2)
{
  return sub_181C5D2A0(a1, a2, *(void *)(v2 + 24));
}

uint64_t sub_181C63CC4(uint64_t a1)
{
  return sub_181C5E04C(a1, *(void *)(v1 + 24));
}

uint64_t sub_181C63CCC(uint64_t a1, uint64_t a2)
{
  return sub_181C5E468(a1, a2, *(void *)(v2 + 24));
}

uint64_t sub_181C63CD4(unsigned int *a1)
{
  return sub_181C5DDB4(a1);
}

uint64_t sub_181C63CEC(uint64_t a1)
{
  return sub_181C5EC30(a1, *(void *)(v1 + 32));
}

uint64_t sub_181C63CF8(uint64_t a1, uint64_t a2)
{
  return sub_181C5F09C(a1, a2, v2);
}

uint64_t sub_181C63D00(uint64_t a1)
{
  return sub_181C5F884(a1, *(void **)(v1 + 24), *(void *)(v1 + 16));
}

uint64_t sub_181C63D08(uint64_t a1)
{
  return sub_181C5FF70(a1, *(void **)(v1 + 24), *(void *)(v1 + 16));
}

uint64_t sub_181C63D10(uint64_t a1, uint64_t a2)
{
  return sub_181C60654(a1, a2, *(uint64_t **)(v2 + 24), *(void *)(v2 + 16));
}

uint64_t sub_181C63D18(uint64_t a1, uint64_t a2)
{
  return sub_181C60B68(a1, a2, *(uint64_t **)(v2 + 24), *(void *)(v2 + 16));
}

uint64_t sub_181C63D20(uint64_t a1)
{
  return sub_181C61508(a1, v1);
}

uint64_t sub_181C63D28(uint64_t a1, uint64_t a2)
{
  return sub_181C61A38(a1, a2, v2);
}

uint64_t sub_181C63D30()
{
  return swift_deallocObject();
}

uint64_t sub_181C63D5C(unsigned int *a1)
{
  return sub_181C625B8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_181C63D64(uint64_t a1)
{
  return sub_181C69D80(a1, *(uint64_t (**)(_BYTE *))(v1 + 16));
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

void *sub_181C63D84(void *a1)
{
  uint64_t v2 = a1[7];
  uint64_t v3 = a1[8];
  uint64_t v5 = a1[15];
  uint64_t v6 = a1[14];
  uint64_t v7 = a1[22];
  uint64_t v8 = a1[21];
  uint64_t v9 = a1[29];
  uint64_t v10 = a1[28];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_181BCECE0(v2, v3);
  sub_181BCECE0(v6, v5);
  sub_181BCECE0(v8, v7);
  sub_181BCECE0(v10, v9);
  swift_release();
  return a1;
}

void sub_181C63EE8()
{
}

void sub_181C63EF8()
{
}

void sub_181C63F08()
{
}

uint64_t type metadata accessor for TLVFramer()
{
  return objc_opt_self();
}

uint64_t method lookup function for TLVFramer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TLVFramer.__allocating_init(framer:)()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of TLVFramer.start(framer:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88LL))();
}

uint64_t dispatch thunk of TLVFramer.wakeup(framer:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96LL))();
}

uint64_t dispatch thunk of TLVFramer.stop(framer:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104LL))();
}

uint64_t dispatch thunk of TLVFramer.cleanup(framer:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112LL))();
}

uint64_t dispatch thunk of TLVFramer.handleInput(framer:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120LL))();
}

uint64_t dispatch thunk of TLVFramer.handleOutput(framer:message:messageLength:isComplete:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128LL))();
}

uint64_t dispatch thunk of StateChangedHandler.handleNewState(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of Protocol.configure(parameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of OptionalProtocol.init(enabled:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t sub_181C63FAC()
{
  return swift_allocateGenericValueMetadata();
}

void type metadata accessor for ProtocolStackBuilder()
{
}

ValueMetadata *type metadata accessor for DisableProtocol()
{
  return &type metadata for DisableProtocol;
}

uint64_t sub_181C63FD0()
{
  return swift_allocateGenericValueMetadata();
}

void type metadata accessor for Configuration()
{
}

void *sub_181C63FE4(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t sub_181C64010()
{
  return swift_release();
}

void *sub_181C64018(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_181C64050(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t type metadata accessor for AsyncProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncProperty);
}

uint64_t sub_181C6408C()
{
  uint64_t result = sub_18264EE38();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t sub_181C640F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18264EE38();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_181C64138(uint64_t a1)
{
  uint64_t v2 = sub_18264EE38();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
}

uint64_t sub_181C64170(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18264EE38();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_181C641B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18264EE38();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_181C64200(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18264EE38();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_181C64248(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18264EE38();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_181C64290()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C6429C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18264EE38();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t sub_181C642DC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C642E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18264EE38();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for AsyncProperty.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for AsyncProperty.Iterator);
}

uint64_t type metadata accessor for Internal()
{
  return objc_opt_self();
}

uint64_t sub_181C64358()
{
  return swift_initClassMetadata2();
}

void type metadata accessor for Connection1()
{
}

uint64_t method lookup function for Connection1()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Connection1.__allocating_init(to:using:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of Connection1.__allocating_init(using:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

ValueMetadata *type metadata accessor for SendState()
{
  return &type metadata for SendState;
}

void sub_181C643E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t method lookup function for SendProgress()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SendProgress.hash(into:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152LL))();
}

uint64_t dispatch thunk of SendProgress.handleNewState(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240LL))();
}

uint64_t dispatch thunk of SendProgress.states.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256LL))();
}

uint64_t dispatch thunk of SendProgress.done.getter()
{
  uint64_t v4 = (uint64_t (*)(void))(**(int **)(*(void *)v0 + 264LL) + *(void *)(*(void *)v0 + 264LL));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_181BC63C4;
  return v4();
}

uint64_t dispatch thunk of SendProgress.hashValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272LL))();
}

ValueMetadata *type metadata accessor for TLS()
{
  return &type metadata for TLS;
}

uint64_t method lookup function for TCP()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TCP.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

ValueMetadata *type metadata accessor for QUIC()
{
  return &type metadata for QUIC;
}

ValueMetadata *type metadata accessor for UDP()
{
  return &type metadata for UDP;
}

ValueMetadata *type metadata accessor for IP()
{
  return &type metadata for IP;
}

ValueMetadata *type metadata accessor for TLV()
{
  return &type metadata for TLV;
}

uint64_t type metadata accessor for JSON(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for JSON);
}

ValueMetadata *type metadata accessor for WebSocket()
{
  return &type metadata for WebSocket;
}

uint64_t method lookup function for HTTP1()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of HTTP1.__allocating_init(enabled:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t method lookup function for HTTP2()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for HTTP3()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for HTTP()
{
  return objc_opt_self();
}

uint64_t method lookup function for HTTP()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of HTTP.__allocating_init(insecure:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of HTTP.__allocating_init(h1:h2:h3:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t destroy for HTTP.Response(uint64_t a1)
{
  uint64_t result = swift_release();
  unint64_t v3 = *(void *)(a1 + 88);
  if (v3 >> 60 != 15) {
    return sub_181BCD4F0(*(void *)(a1 + 80), v3);
  }
  return result;
}

uint64_t initializeWithCopy for HTTP.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v7 = (uint64_t *)(a2 + 80);
  unint64_t v8 = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v8 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v7;
  }

  else
  {
    uint64_t v9 = *v7;
    sub_181BCD4AC(*v7, v8);
    *(void *)(a1 + 80) = v9;
    *(void *)(a1 + 88) = v8;
  }

  return a1;
}

uint64_t assignWithCopy for HTTP.Response(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  uint64_t v4 = (uint64_t *)(a2 + 80);
  unint64_t v5 = *(void *)(a2 + 88);
  if (*(void *)(a1 + 88) >> 60 != 15LL)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      sub_181BCD4AC(*v4, v5);
      uint64_t v8 = *(void *)(a1 + 80);
      unint64_t v9 = *(void *)(a1 + 88);
      *(void *)(a1 + 80) = v7;
      *(void *)(a1 + 88) = v5;
      sub_181BCD4F0(v8, v9);
      return a1;
    }

    sub_181BF86F4(a1 + 80);
    goto LABEL_6;
  }

  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v4;
    return a1;
  }

  uint64_t v6 = *v4;
  sub_181BCD4AC(*v4, v5);
  *(void *)(a1 + 80) = v6;
  *(void *)(a1 + 88) = v5;
  return a1;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for HTTP.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_release();
  uint64_t v8 = (void *)(a2 + 80);
  unint64_t v9 = *(void *)(a1 + 88);
  if (v9 >> 60 != 15)
  {
    unint64_t v10 = *(void *)(a2 + 88);
    if (v10 >> 60 != 15)
    {
      uint64_t v11 = *(void *)(a1 + 80);
      *(void *)(a1 + 80) = *v8;
      *(void *)(a1 + 88) = v10;
      sub_181BCD4F0(v11, v9);
      return a1;
    }

    sub_181BF86F4(a1 + 80);
  }

  *(_OWORD *)(a1 + 80) = *(_OWORD *)v8;
  return a1;
}

uint64_t getEnumTagSinglePayload for HTTP.Response(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(sub_181BCD4F0(v1, v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HTTP.Response(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0LL;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 96) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for HTTP.Response()
{
  return &type metadata for HTTP.Response;
}

uint64_t sub_181C6498C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12)
{
  if (a10 >> 62 == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    return sub_181BE4844(a11, a12);
  }

  return result;
}

uint64_t destroy for HTTP.State(uint64_t a1)
{
  return sub_181C63A38( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88));
}

uint64_t *initializeWithCopy for HTTP.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  unint64_t v13 = a2[9];
  uint64_t v14 = a2[10];
  unint64_t v15 = a2[11];
  sub_181C6498C(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  return a1;
}

uint64_t assignWithCopy for HTTP.State(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  unint64_t v24 = a2[9];
  uint64_t v25 = a2[10];
  unint64_t v26 = a2[11];
  sub_181C6498C(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v24, v25, v26);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  __int128 v20 = *(_OWORD *)(a1 + 64);
  uint64_t v21 = *(void *)(a1 + 80);
  unint64_t v22 = *(void *)(a1 + 88);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v24;
  *(void *)(a1 + 80) = v25;
  *(void *)(a1 + 88) = v26;
  sub_181C63A38(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((unint64_t *)&v20 + 1), v21, v22);
  return a1;
}

uint64_t assignWithTake for HTTP.State(uint64_t a1, _OWORD *a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  __int128 v11 = *(_OWORD *)(a1 + 64);
  uint64_t v12 = *(void *)(a1 + 80);
  unint64_t v13 = *(void *)(a1 + 88);
  __int128 v14 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v14;
  __int128 v15 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v15;
  __int128 v16 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v16;
  sub_181C63A38(v3, v5, v4, v6, v7, v8, v9, v10, v11, *((unint64_t *)&v11 + 1), v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for HTTP.State(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = *(_DWORD *)(a1 + 33);
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for HTTP.State(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 88) = 0LL;
    double result = 0.0;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(a1 + 96) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)(a1 + 32) = (unint64_t)-a2 << 8;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(void *)(a1 + 88) = 0LL;
      return result;
    }

    *(_BYTE *)(a1 + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t sub_181C64D1C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 72) >> 62;
  if ((_DWORD)v1 == 3) {
    return (*(_DWORD *)a1 + 3);
  }
  else {
    return v1;
  }
}

uint64_t sub_181C64D38(uint64_t result)
{
  *(void *)(result + 72) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t sub_181C64D48(uint64_t result, uint64_t a2)
{
  if (a2 < 3)
  {
    uint64_t v2 = *(void *)(result + 72) & 0xFFFFFFFFFFFFFF8LL | (a2 << 62);
    *(void *)(result + 32) = *(unsigned __int8 *)(result + 32);
    *(void *)(result + 72) = v2;
  }

  else
  {
    *(void *)double result = (a2 - 3);
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)(result + 80) = 0LL;
    *(void *)(result + 88) = 0LL;
    *(void *)(result + 72) = 0xC000000000000000LL;
  }

  return result;
}

ValueMetadata *type metadata accessor for HTTP.State()
{
  return &type metadata for HTTP.State;
}

void sub_181C64DA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_181C64DC8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t *a5)
{
  if (v5 <= 0x3F) {
    swift_initClassMetadata2();
  }
}

uint64_t method lookup function for HTTP.Progress()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of HTTP.Progress.done.getter(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(**(int **)(*(void *)v1 + 264LL) + *(void *)(*(void *)v1 + 264LL));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_181BC92FC;
  return v6(a1);
}

uint64_t sub_181C64ED4()
{
  uint64_t result = sub_18264F09C();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t method lookup function for AsyncSequenceReceive()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_181C64F68(uint64_t result, unint64_t a2, uint64_t a3)
{
  return sub_181C62710(result, a2, a3);
}

void sub_181C64F70(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v2 + qword_18C58DA70;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(qword_18C58DF50);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = MEMORY[0x18961AFE8];
  uint64_t v7 = (void *)(v2 + qword_18C58DA80);
  *uint64_t v7 = MEMORY[0x18961AFE8];
  v7[1] = v6;
  _OWORD v7[2] = v6;
  v7[3] = v6;
  v7[4] = v6;
  v7[5] = v6;
  _DWORD v7[6] = v6;
  uint64_t v8 = v2 + qword_18C58DA88;
  *(_OWORD *)uint64_t v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(void *)(v8 + 64) = 0LL;
  *(void *)(v8 + 72) = 0xC000000000000000LL;
  *(void *)(v8 + 80) = 0LL;
  *(void *)(v8 + 88) = 0LL;
  *(void *)(v2 + 16) = a1;
  swift_retain();
  type metadata accessor for HTTP.Progress();
}

uint64_t sub_181C65040(uint64_t a1)
{
  uint64_t v3 = MEMORY[0x186E12084](&protocol conformance descriptor for HTTP.Progress<A, Pack{repeat B}>, a1);
  sub_181C560E4( (uint64_t)&v5,  a1,  (uint64_t)&protocol witness table for HTTP.Progress<A, Pack{repeat B}>,  v3,  (uint64_t)&unk_189BB0C88,  (uint64_t)sub_181C6510C,  (uint64_t)&block_descriptor_59);
  return v1;
}

uint64_t sub_181C6509C( uint64_t a1, void (*a2)(void, uint64_t *), uint64_t (*a3)(uint64_t))
{
  uint64_t v8 = *(void *)(v3 + 80);
  __int128 v6 = *(_OWORD *)(v3 + 104);
  __int128 v9 = *(_OWORD *)(v3 + 88);
  __int128 v10 = v6;
  a2(0LL, &v8);
  swift_allocObject();
  return a3(a1);
}

uint64_t sub_181C6510C()
{
  return sub_181C65CB8((uint64_t (*)(void, uint64_t))sub_181C56010);
}

uint64_t sub_181C65118(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  return sub_181C61B40(a1, a2, a3, a4, a5, *(void (**)(uint64_t *, int *))(v5 + 16));
}

uint64_t sub_181C65120()
{
  return swift_deallocObject();
}

void *sub_181C65144(uint64_t a1, uint64_t a2)
{
  return sub_181C691B4(a1, a2, v2);
}

uint64_t sub_181C6514C()
{
  return objectdestroy_77Tm((uint64_t *)&unk_18C58DFE0);
}

uint64_t sub_181C65158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_181C6553C( a1,  a2,  a3,  a4,  a5,  (uint64_t *)&unk_18C58DFE0,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_181C6167C);
}

uint64_t sub_181C6516C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_181C651A8( a1,  a2,  a3,  a4,  a5,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void))sub_181C60CB4);
}

uint64_t sub_181C65178()
{
  return swift_deallocObject();
}

uint64_t sub_181C6519C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_181C651A8( a1,  a2,  a3,  a4,  a5,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void))sub_181C607A0);
}

uint64_t sub_181C651A8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void))
{
  return a6(a1, a2, a3, a4, a5, v6[7], v6[8], v6[2], v6[3], v6[4], v6[5], v6[6]);
}

uint64_t sub_181C651E0()
{
  uint64_t v1 = sub_18264ED90();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8LL))( v0 + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL) + 56LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL)),  v1);
  return swift_deallocObject();
}

uint64_t sub_181C65294(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4, unsigned int *a5)
{
  uint64_t v9 = v5[2];
  uint64_t v10 = v5[3];
  uint64_t v11 = v5[4];
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C58DAE0);
  swift_getTupleTypeMetadata3();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C58D6A0);
  uint64_t v12 = *(unsigned __int8 *)(*(void *)(sub_18264ED90() - 8) + 80LL);
  return sub_181C60174(a1, a2, a3, a4, a5, (uint64_t)v5 + ((v12 + 56) & ~v12), v9, v10, v11);
}

uint64_t sub_181C65388()
{
  uint64_t v1 = sub_18264ED90();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8LL))( v0 + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL) + 56LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL)),  v1);
  return swift_deallocObject();
}

uint64_t sub_181C65408(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_181C5FA54(a1, a2, a3);
}

uint64_t sub_181C654C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t (**)(_BYTE *, uint64_t))(v2 + 16);
  sub_181BE625C(a1, (uint64_t)v6, &qword_18C58DFF8);
  return v4(v6, a2);
}

uint64_t sub_181C65514(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  return sub_181C5F1CC(a1, a2, a3, a4, a5, *(void (**)(uint64_t *, int *))(v5 + 16));
}

uint64_t sub_181C6551C()
{
  return objectdestroy_77Tm(&qword_18C58E000);
}

uint64_t sub_181C65528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_181C6553C( a1,  a2,  a3,  a4,  a5,  &qword_18C58E000,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_181C5EDA4);
}

uint64_t sub_181C6553C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v13 = *(unsigned __int8 *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8) + 80LL);
  return a7(a1, a2, a3, a4, a5, v7 + ((v13 + 16) & ~v13));
}

uint64_t sub_181C655B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(uint64_t (**)(void *, uint64_t))(v4 + 16);
  v7[0] = a1;
  v7[1] = a2;
  _OWORD v7[2] = a3;
  return v5(v7, a4);
}

uint64_t sub_181C655F0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  return sub_181C5E598( a1,  a2,  a3,  a4,  a5,  *(uint64_t (**)(uint64_t, unint64_t, uint64_t, int *))(v5 + 16));
}

uint64_t sub_181C655F8()
{
  return objectdestroy_77Tm(&qword_18C58E010);
}

uint64_t sub_181C65604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_181C6553C( a1,  a2,  a3,  a4,  a5,  &qword_18C58E010,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_181C5E1C0);
}

uint64_t sub_181C65618(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  __int128 v6 = *(uint64_t (**)(void *, uint64_t))(v5 + 16);
  v8[0] = a1;
  v8[1] = a2;
  void v8[2] = a3;
  char v9 = a4;
  return v6(v8, a5);
}

uint64_t sub_181C65654(uint64_t a1, unint64_t a2, uint64_t a3, char a4, unsigned int *a5)
{
  return sub_181C5D3D8( a1,  a2,  a3,  a4,  a5,  *(void (**)(uint64_t, unint64_t, uint64_t, void, int *))(v5 + 16));
}

uint64_t sub_181C6565C()
{
  return objectdestroy_77Tm(&qword_18C58E018);
}

uint64_t sub_181C65668(uint64_t a1, unint64_t a2, uint64_t a3, char a4, unsigned int *a5)
{
  return sub_181C656A8( a1,  a2,  a3,  a4,  a5,  (uint64_t)sub_181C65144,  (uint64_t)&block_descriptor_248,  (uint64_t)sub_181C65144,  (uint64_t)&block_descriptor_243);
}

uint64_t sub_181C656A8( uint64_t a1, unint64_t a2, uint64_t a3, char a4, unsigned int *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v18 = *(unsigned __int8 *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C58E018) - 8) + 80LL);
  return sub_181C5CF70(a1, a2, a3, a4, a5, v9 + ((v18 + 16) & ~v18), a6, a7, a8, a9);
}

uint64_t sub_181C65750()
{
  return objectdestroy_77Tm(&qword_18C58E018);
}

uint64_t objectdestroy_77Tm(uint64_t *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))( v1 + ((*(unsigned __int8 *)(*(void *)(v2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80LL)),  v2);
  return swift_deallocObject();
}

uint64_t sub_181C657B8(uint64_t a1, unint64_t a2, uint64_t a3, char a4, unsigned int *a5)
{
  return sub_181C656A8( a1,  a2,  a3,  a4,  a5,  (uint64_t)sub_181C65144,  (uint64_t)&block_descriptor_268,  (uint64_t)sub_181C65144,  (uint64_t)&block_descriptor_263);
}

uint64_t sub_181C657F8(uint64_t a1, uint64_t a2)
{
  return sub_181C5BDD4(a1, a2, v2);
}

uint64_t sub_181C65800()
{
  uint64_t v1 = sub_18264EE14();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 72LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_181C65878()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(sub_18264EE14() - 8) + 80LL);
  return sub_181C5C4E0(*(uint64_t **)(v0 + 64), v0 + ((v1 + 72) & ~v1));
}

uint64_t sub_181C658AC()
{
  return objectdestroy_276Tm(&qword_18C58E020);
}

uint64_t sub_181C658B8()
{
  return sub_181C65B98(&qword_18C58E020, (uint64_t (*)(void, uint64_t))sub_181C5B964);
}

uint64_t sub_181C658CC()
{
  return objectdestroy_276Tm(qword_18C58DF50);
}

uint64_t sub_181C658D8()
{
  return sub_181C65B98(qword_18C58DF50, (uint64_t (*)(void, uint64_t))sub_181C5B470);
}

uint64_t sub_181C658EC(uint64_t a1)
{
  return sub_181C5B7CC(a1, v1, &qword_18C58DA78, qword_18C58DF50, (uint64_t (*)(char *))sub_181C59DB4);
}

_OWORD *sub_181C6591C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  __int128 v3 = a1[2];
  __int128 v4 = a1[3];
  __int128 v5 = a1[5];
  a2[4] = a1[4];
  a2[5] = v5;
  a2[2] = v3;
  a2[3] = v4;
  return a2;
}

uint64_t sub_181C6593C()
{
  return swift_deallocObject();
}

uint64_t sub_181C6598C()
{
  return sub_181C5A418(*(void *)(v0 + 16), (_OWORD *)(v0 + 24));
}

uint64_t sub_181C65998(int *a1, uint64_t a2)
{
  return a2;
}

void *sub_181C659D4( void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_181C65A28(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  uint64_t v13 = *(void *)(a1 + 96);
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v4 = *(void *)(a1 + 120);
  uint64_t v5 = *(void *)(a1 + 128);
  uint64_t v6 = *(void *)(a1 + 136);
  uint64_t v7 = *(void *)(a1 + 144);
  uint64_t v8 = *(void *)(a1 + 152);
  __int128 v12 = *(_OWORD *)(a1 + 160);
  uint64_t v10 = *(void *)(a1 + 176);
  unint64_t v9 = *(void *)(a1 + 184);
  sub_181C63A38( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88));
  sub_181C63A38(v13, v2, v3, v4, v5, v6, v7, v8, v12, *((unint64_t *)&v12 + 1), v10, v9);
  return a1;
}

uint64_t sub_181C65AE8()
{
  return objectdestroy_276Tm(&qword_18C58A1F0);
}

uint64_t sub_181C65AF4()
{
  return sub_181C65B98(&qword_18C58A1F0, sub_181C57C94);
}

uint64_t sub_181C65B08()
{
  return objectdestroy_276Tm(qword_18C58DE30);
}

uint64_t objectdestroy_276Tm(uint64_t *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 64LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v1 + v4, v2);
  return swift_deallocObject();
}

uint64_t sub_181C65B84()
{
  return sub_181C65B98(qword_18C58DE30, sub_181C57630);
}

uint64_t sub_181C65B98(uint64_t *a1, uint64_t (*a2)(void, uint64_t))
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(a1) - 8) + 80LL);
  return a2(*(void *)(v2 + 56), v2 + ((v3 + 64) & ~v3));
}

uint64_t sub_181C65BD4(uint64_t a1)
{
  return sub_181C5B7CC(a1, v1, &qword_18C58DA58, qword_18C58DE30, (uint64_t (*)(char *))sub_181C564BC);
}

uint64_t sub_181C65C04()
{
  return swift_deallocObject();
}

uint64_t sub_181C65C28()
{
  return sub_181C56998( *(void *)(v0 + 16),  *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32));
}

uint64_t objectdestroy_55Tm()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 88LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_181C65CAC()
{
  return sub_181C65CB8((uint64_t (*)(void, uint64_t))sub_181C563A4);
}

uint64_t sub_181C65CB8(uint64_t (*a1)(void, uint64_t))
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(*(void *)(v1 + 40) - 8LL) + 80LL);
  return a1(*(void *)(v1 + 80), v1 + ((v2 + 88) & ~v2));
}

uint64_t sub_181C65CE0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_181C65D1C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_181C54800(a1, a2, a3 & 1, a4, *(void *)(v4 + 16));
}

uint64_t sub_181C65D28()
{
  return swift_deallocObject();
}

uint64_t sub_181C65D38()
{
  return swift_deallocObject();
}

uint64_t sub_181C65D48(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = MEMORY[0x186E12084](MEMORY[0x189618470], v4);
    atomic_store(result, a1);
  }

  return result;
}

void static DistributedActor<>.discover(_:using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for NWActorID();
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (uint64_t *)&v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  NWActorSystem.assignID<A>(_:)(v7);
  uint64_t v8 = *(os_unfair_lock_s **)(a2 + 128);
  uint64_t v12 = a2;
  uint64_t v13 = v7;
  unint64_t v9 = v8 + 4;
  uint64_t v15 = 0LL;
  uint64_t v16 = 0LL;
  uint64_t v14 = a1;
  os_unfair_lock_lock(v8 + 4);
  sub_181BF787C(v10, sub_181C66094);
  os_unfair_lock_unlock(v9);
  if (v2)
  {
    __break(1u);
  }

  else
  {
    uint64_t v17 = a2;
    sub_18264E6B8();
    sub_181BC920C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for NWActorID);
  }

uint64_t sub_181C66094()
{
  return sub_181C662CC();
}

void static DistributedActor<>.discover(_:connectionParameters:using:invalidationHandler:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v20[0] = a5;
  unint64_t v9 = (int *)type metadata accessor for NWActorDiscoveryMechanism(0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for NWActorID();
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (void *)((char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  NWActorSystem.assignID<A>(_:)(v14);
  sub_181BE4744(a1, (uint64_t)v11);
  type metadata accessor for NWActorDiscoveryMechanism.Target(0LL);
  swift_storeEnumTagMultiPayload();
  *(void *)&v11[v9[7]] = a2;
  uint64_t v15 = &v11[v9[5]];
  *(_OWORD *)uint64_t v15 = 0u;
  *((_OWORD *)v15 + 1) = 0u;
  v15[32] = -2;
  *(void *)&v11[v9[6]] = 0LL;
  uint64_t v16 = *(os_unfair_lock_s **)(a3 + 128);
  void v20[4] = a3;
  v20[5] = v14;
  v20[6] = v11;
  v20[7] = a4;
  v20[8] = v20[0];
  uint64_t v17 = v16 + 4;
  swift_retain();
  os_unfair_lock_lock(v17);
  uint64_t v18 = v20[1];
  sub_181BF787C(v19, sub_181C66094);
  os_unfair_lock_unlock(v17);
  if (v18)
  {
    __break(1u);
  }

  else
  {
    v20[11] = a3;
    sub_18264E6B8();
    sub_181BC920C((uint64_t)v11, type metadata accessor for NWActorDiscoveryMechanism);
    sub_181BC920C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for NWActorID);
  }

uint64_t DistributedActor<>.peer.getter()
{
  if (qword_18C58B208 != -1) {
    swift_once();
  }
  return sub_18264F75C();
}

uint64_t sub_181C662CC()
{
  return sub_181BF2054(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_181C662EC()
{
  nw_protocol_definition_t v0 = nw_protocol_copy_tcp_definition();
  type metadata accessor for NWProtocolDefinition();
  uint64_t v1 = (void *)swift_allocObject();
  v1[4] = v0;
  id v2 = objc_msgSend((id)swift_unknownObjectRetain(), sel_description);
  uint64_t v3 = sub_18264EA48();
  uint64_t v5 = v4;

  uint64_t result = swift_unknownObjectRelease();
  v1[2] = v3;
  v1[3] = v5;
  qword_18C58E058 = (uint64_t)v1;
  return result;
}

uint64_t static NWProtocolTCP.definition.getter()
{
  if (qword_18C58B220 != -1) {
    swift_once();
  }
  return swift_retain();
}

void sub_181C663BC(char a1)
{
}

BOOL sub_181C663CC()
{
  return nw_tcp_options_get_no_delay(*(void **)(v0 + 16));
}

void (*sub_181C663E4(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = nw_tcp_options_get_no_delay(v3);
  return sub_181C6641C;
}

void sub_181C6641C(uint64_t a1)
{
}

void sub_181C6642C(char a1)
{
}

BOOL sub_181C6643C()
{
  return nw_tcp_options_get_no_push(*(void **)(v0 + 16));
}

void (*sub_181C66454(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = nw_tcp_options_get_no_push(v3);
  return sub_181C6648C;
}

void sub_181C6648C(uint64_t a1)
{
}

void sub_181C6649C(char a1)
{
}

BOOL sub_181C664AC()
{
  return nw_tcp_options_get_no_options(*(void **)(v0 + 16));
}

void (*sub_181C664C4(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = nw_tcp_options_get_no_options(v3);
  return sub_181C664FC;
}

void sub_181C664FC(uint64_t a1)
{
}

void sub_181C6650C(char a1)
{
}

BOOL sub_181C6651C()
{
  return nw_tcp_options_get_enable_keepalive(*(void **)(v0 + 16));
}

void (*sub_181C66534(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = nw_tcp_options_get_enable_keepalive(v3);
  return sub_181C6656C;
}

void sub_181C6656C(uint64_t a1)
{
}

uint64_t sub_181C6657C(unint64_t a1)
{
  return sub_181C668E0(a1, (uint64_t (*)(void, unint64_t))nw_tcp_options_set_keepalive_count);
}

uint64_t sub_181C66588()
{
  return nw_tcp_options_get_keepalive_count(*(void **)(v0 + 16));
}

uint64_t (*sub_181C665A4(void *a1))(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v1 + 16);
  a1[1] = v3;
  *a1 = nw_tcp_options_get_keepalive_count(v3);
  return sub_181C665E0;
}

uint64_t sub_181C665E0(void *a1, uint64_t a2)
{
  return sub_181C669F8(a1, a2, (uint64_t (*)(void))nw_tcp_options_set_keepalive_count);
}

uint64_t sub_181C665EC(unint64_t a1)
{
  return sub_181C668E0(a1, (uint64_t (*)(void, unint64_t))nw_tcp_options_set_keepalive_idle_time);
}

uint64_t sub_181C665F8()
{
  return nw_tcp_options_get_keepalive_idle_time(*(void **)(v0 + 16));
}

uint64_t (*sub_181C66614(void *a1))(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v1 + 16);
  a1[1] = v3;
  *a1 = nw_tcp_options_get_keepalive_idle_time(v3);
  return sub_181C66650;
}

uint64_t sub_181C66650(void *a1, uint64_t a2)
{
  return sub_181C669F8(a1, a2, (uint64_t (*)(void))nw_tcp_options_set_keepalive_idle_time);
}

uint64_t sub_181C6665C(unint64_t a1)
{
  return sub_181C668E0(a1, (uint64_t (*)(void, unint64_t))nw_tcp_options_set_keepalive_interval);
}

uint64_t sub_181C66668()
{
  return nw_tcp_options_get_keepalive_interval(*(void **)(v0 + 16));
}

uint64_t (*sub_181C66684(void *a1))(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v1 + 16);
  a1[1] = v3;
  *a1 = nw_tcp_options_get_keepalive_interval(v3);
  return sub_181C666C0;
}

uint64_t sub_181C666C0(void *a1, uint64_t a2)
{
  return sub_181C669F8(a1, a2, (uint64_t (*)(void))nw_tcp_options_set_keepalive_interval);
}

uint64_t sub_181C666CC(unint64_t a1)
{
  return sub_181C668E0(a1, (uint64_t (*)(void, unint64_t))nw_tcp_options_set_maximum_segment_size);
}

uint64_t sub_181C666D8()
{
  return nw_tcp_options_get_maximum_segment_size(*(void **)(v0 + 16));
}

uint64_t (*sub_181C666F4(void *a1))(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v1 + 16);
  a1[1] = v3;
  *a1 = nw_tcp_options_get_maximum_segment_size(v3);
  return sub_181C66730;
}

uint64_t sub_181C66730(void *a1, uint64_t a2)
{
  return sub_181C669F8(a1, a2, (uint64_t (*)(void))nw_tcp_options_set_maximum_segment_size);
}

uint64_t sub_181C6673C(unint64_t a1)
{
  return sub_181C668E0(a1, (uint64_t (*)(void, unint64_t))nw_tcp_options_set_connection_timeout);
}

uint64_t sub_181C66748()
{
  return nw_tcp_options_get_connection_timeout(*(void **)(v0 + 16));
}

uint64_t (*sub_181C66764(void *a1))(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v1 + 16);
  a1[1] = v3;
  *a1 = nw_tcp_options_get_connection_timeout(v3);
  return sub_181C667A0;
}

uint64_t sub_181C667A0(void *a1, uint64_t a2)
{
  return sub_181C669F8(a1, a2, (uint64_t (*)(void))nw_tcp_options_set_connection_timeout);
}

uint64_t sub_181C667AC(unint64_t a1)
{
  return sub_181C668E0(a1, (uint64_t (*)(void, unint64_t))nw_tcp_options_set_persist_timeout);
}

uint64_t sub_181C667B8()
{
  return nw_tcp_options_get_persist_timeout(*(void **)(v0 + 16));
}

uint64_t (*sub_181C667D4(void *a1))(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v1 + 16);
  a1[1] = v3;
  *a1 = nw_tcp_options_get_persist_timeout(v3);
  return sub_181C66810;
}

uint64_t sub_181C66810(void *a1, uint64_t a2)
{
  return sub_181C669F8(a1, a2, (uint64_t (*)(void))nw_tcp_options_set_persist_timeout);
}

uint64_t sub_181C6681C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  if ((*a1 & 0x8000000000000000LL) == 0 && !HIDWORD(*a1)) {
    return a5(*(void *)(*(void *)a2 + 16LL));
  }
  uint64_t result = sub_18264F318();
  __break(1u);
  return result;
}

uint64_t sub_181C668D4(unint64_t a1)
{
  return sub_181C668E0( a1,  (uint64_t (*)(void, unint64_t))nw_tcp_options_set_retransmit_connection_drop_time);
}

uint64_t sub_181C668E0(unint64_t a1, uint64_t (*a2)(void, unint64_t))
{
  if ((a1 & 0x8000000000000000LL) == 0 && !HIDWORD(a1)) {
    return a2(*(void *)(v2 + 16), a1);
  }
  uint64_t result = sub_18264F318();
  __break(1u);
  return result;
}

uint64_t sub_181C66994()
{
  return nw_tcp_options_get_retransmit_connection_drop_time(*(void **)(v0 + 16));
}

uint64_t (*sub_181C669B0(void *a1))(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v1 + 16);
  a1[1] = v3;
  *a1 = nw_tcp_options_get_retransmit_connection_drop_time(v3);
  return sub_181C669EC;
}

uint64_t sub_181C669EC(void *a1, uint64_t a2)
{
  return sub_181C669F8(a1, a2, (uint64_t (*)(void))nw_tcp_options_set_retransmit_connection_drop_time);
}

uint64_t sub_181C669F8(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  if ((*a1 & 0x8000000000000000LL) == 0 && !HIDWORD(*a1)) {
    return a3(a1[1]);
  }
  uint64_t result = sub_18264F318();
  __break(1u);
  return result;
}

void sub_181C66AAC(char a1)
{
}

BOOL sub_181C66ABC()
{
  return nw_tcp_options_get_retransmit_fin_drop(*(void **)(v0 + 16));
}

void (*sub_181C66AD4(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = nw_tcp_options_get_retransmit_fin_drop(v3);
  return sub_181C66B0C;
}

void sub_181C66B0C(uint64_t a1)
{
}

void sub_181C66B1C(char a1)
{
}

BOOL sub_181C66B2C()
{
  return nw_tcp_options_get_disable_ack_stretching(*(void **)(v0 + 16));
}

void (*sub_181C66B44(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = nw_tcp_options_get_disable_ack_stretching(v3);
  return sub_181C66B7C;
}

void sub_181C66B7C(uint64_t a1)
{
}

void sub_181C66B8C(char a1)
{
}

BOOL sub_181C66B9C()
{
  return nw_tcp_options_get_enable_fast_open(*(void **)(v0 + 16));
}

void (*sub_181C66BB4(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = nw_tcp_options_get_enable_fast_open(v3);
  return sub_181C66BEC;
}

void sub_181C66BEC(uint64_t a1)
{
}

void sub_181C66BFC(char a1)
{
}

BOOL sub_181C66C0C()
{
  return nw_tcp_options_get_disable_ecn(*(void **)(v0 + 16));
}

void (*sub_181C66C24(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = nw_tcp_options_get_disable_ecn(v3);
  return sub_181C66C5C;
}

void sub_181C66C5C(uint64_t a1)
{
}

BOOL sub_181C66C6C(nw_protocol_options *a1)
{
  uint64_t v1 = nw_protocol_options_copy_definition(a1);
  uint64_t v2 = nw_protocol_copy_tcp_definition();
  BOOL is_equal = nw_protocol_definition_is_equal(v1, v2);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return is_equal;
}

uint64_t NWProtocolTCP.Options.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = nw_tcp_create_options();
  return v0;
}

uint64_t NWProtocolTCP.Options.init()()
{
  *(void *)(v0 + 16) = nw_tcp_create_options();
  return v0;
}

uint64_t NWProtocolTCP.Options.deinit()
{
  return v0;
}

BOOL sub_181C66D34(nw_protocol_metadata *a1)
{
  return nw_protocol_metadata_is_tcp(a1);
}

uint64_t sub_181C66D48()
{
  return nw_tcp_get_available_receive_buffer(*(nw_protocol_metadata_t *)(v0 + 16));
}

uint64_t sub_181C66D50()
{
  return nw_tcp_get_available_send_buffer(*(nw_protocol_metadata_t *)(v0 + 16));
}

uint64_t NWProtocolTCP.deinit()
{
  return v0;
}

uint64_t NWProtocolTCP.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

BOOL sub_181C66D74@<W0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = nw_tcp_options_get_no_delay(*(void **)(*(void *)a1 + 16LL));
  *a2 = result;
  return result;
}

void sub_181C66DA0(BOOL *a1, uint64_t a2)
{
}

BOOL sub_181C66DB4@<W0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = nw_tcp_options_get_no_push(*(void **)(*(void *)a1 + 16LL));
  *a2 = result;
  return result;
}

void sub_181C66DE0(BOOL *a1, uint64_t a2)
{
}

BOOL sub_181C66DF4@<W0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = nw_tcp_options_get_no_options(*(void **)(*(void *)a1 + 16LL));
  *a2 = result;
  return result;
}

void sub_181C66E20(BOOL *a1, uint64_t a2)
{
}

BOOL sub_181C66E34@<W0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = nw_tcp_options_get_enable_keepalive(*(void **)(*(void *)a1 + 16LL));
  *a2 = result;
  return result;
}

void sub_181C66E60(BOOL *a1, uint64_t a2)
{
}

uint64_t sub_181C66E74@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = nw_tcp_options_get_keepalive_count(*(void **)(*(void *)a1 + 16LL));
  *a2 = result;
  return result;
}

uint64_t sub_181C66EA4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_181C6681C(a1, a2, a3, a4, (uint64_t (*)(void))nw_tcp_options_set_keepalive_count);
}

uint64_t sub_181C66EC0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = nw_tcp_options_get_keepalive_idle_time(*(void **)(*(void *)a1 + 16LL));
  *a2 = result;
  return result;
}

uint64_t sub_181C66EF0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_181C6681C(a1, a2, a3, a4, (uint64_t (*)(void))nw_tcp_options_set_keepalive_idle_time);
}

uint64_t sub_181C66F0C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = nw_tcp_options_get_keepalive_interval(*(void **)(*(void *)a1 + 16LL));
  *a2 = result;
  return result;
}

uint64_t sub_181C66F3C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_181C6681C(a1, a2, a3, a4, (uint64_t (*)(void))nw_tcp_options_set_keepalive_interval);
}

uint64_t sub_181C66F58@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = nw_tcp_options_get_maximum_segment_size(*(void **)(*(void *)a1 + 16LL));
  *a2 = result;
  return result;
}

uint64_t sub_181C66F88(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_181C6681C(a1, a2, a3, a4, (uint64_t (*)(void))nw_tcp_options_set_maximum_segment_size);
}

uint64_t sub_181C66FA4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = nw_tcp_options_get_connection_timeout(*(void **)(*(void *)a1 + 16LL));
  *a2 = result;
  return result;
}

uint64_t sub_181C66FD4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_181C6681C(a1, a2, a3, a4, (uint64_t (*)(void))nw_tcp_options_set_connection_timeout);
}

uint64_t sub_181C66FF0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = nw_tcp_options_get_persist_timeout(*(void **)(*(void *)a1 + 16LL));
  *a2 = result;
  return result;
}

uint64_t sub_181C67020(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_181C6681C(a1, a2, a3, a4, (uint64_t (*)(void))nw_tcp_options_set_persist_timeout);
}

uint64_t sub_181C6703C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = nw_tcp_options_get_retransmit_connection_drop_time(*(void **)(*(void *)a1 + 16LL));
  *a2 = result;
  return result;
}

uint64_t sub_181C6706C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_181C6681C( a1,  a2,  a3,  a4,  (uint64_t (*)(void))nw_tcp_options_set_retransmit_connection_drop_time);
}

BOOL sub_181C67088@<W0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = nw_tcp_options_get_retransmit_fin_drop(*(void **)(*(void *)a1 + 16LL));
  *a2 = result;
  return result;
}

void sub_181C670B4(BOOL *a1, uint64_t a2)
{
}

BOOL sub_181C670C8@<W0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = nw_tcp_options_get_disable_ack_stretching(*(void **)(*(void *)a1 + 16LL));
  *a2 = result;
  return result;
}

void sub_181C670F4(BOOL *a1, uint64_t a2)
{
}

BOOL sub_181C67108@<W0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = nw_tcp_options_get_enable_fast_open(*(void **)(*(void *)a1 + 16LL));
  *a2 = result;
  return result;
}

void sub_181C67134(BOOL *a1, uint64_t a2)
{
}

BOOL sub_181C67148@<W0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = nw_tcp_options_get_disable_ecn(*(void **)(*(void *)a1 + 16LL));
  *a2 = result;
  return result;
}

void sub_181C67174(BOOL *a1, uint64_t a2)
{
}

uint64_t type metadata accessor for NWProtocolTCP()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for NWProtocolTCP.Options()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolTCP.Options()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.noDelay.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.noDelay.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.noDelay.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.noPush.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.noPush.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.noPush.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.noOptions.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.noOptions.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.noOptions.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.enableKeepalive.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.enableKeepalive.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.enableKeepalive.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.keepaliveCount.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.keepaliveCount.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.keepaliveCount.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.keepaliveIdle.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.keepaliveIdle.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.keepaliveIdle.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.keepaliveInterval.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.keepaliveInterval.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.keepaliveInterval.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.maximumSegmentSize.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.maximumSegmentSize.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.maximumSegmentSize.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.connectionTimeout.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.connectionTimeout.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.connectionTimeout.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.persistTimeout.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.persistTimeout.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.persistTimeout.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.connectionDropTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.connectionDropTime.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.connectionDropTime.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.retransmitFinDrop.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 368LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.retransmitFinDrop.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 376LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.retransmitFinDrop.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 384LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.disableAckStretching.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 392LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.disableAckStretching.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 400LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.disableAckStretching.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 408LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.enableFastOpen.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 416LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.enableFastOpen.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 424LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.enableFastOpen.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 432LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.disableECN.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 440LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.disableECN.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 448LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.disableECN.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 456LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Options.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 464))();
}

uint64_t type metadata accessor for NWProtocolTCP.Metadata()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWProtocolTCP.Metadata()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWProtocolTCP.Metadata.availableReceiveBuffer.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104LL))();
}

uint64_t dispatch thunk of NWProtocolTCP.Metadata.availableSendBuffer.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112LL))();
}

uint64_t NWConnection.__allocating_init(to:using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v4;
  swift_release();
  return v5;
}

uint64_t NWConnection.identifier.getter()
{
  return nw_connection_get_id(*(void **)(v0 + 16));
}

Swift::Void __swiftcall NWConnection.cancel()()
{
}

uint64_t NWConnection.stateUpdateHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 96));
  uint64_t v6 = *(void *)(v5 + 16);
  sub_181BC904C(a1);
  sub_181BD25B8(v6);
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  LODWORD(v6) = *(unsigned __int8 *)(v5 + 93);
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 96));
  if ((_DWORD)v6 != 1) {
    return sub_181BD25B8(a1);
  }
  uint64_t v7 = *(nw_connection **)(v2 + 16);
  uint64_t v8 = (void *)swift_allocObject();
  void v8[2] = v2;
  void v8[3] = a1;
  void v8[4] = a2;
  void v11[4] = sub_181C6BCD8;
  v11[5] = v8;
  v11[0] = MEMORY[0x1895F87A8];
  v11[1] = 1107296256LL;
  void v11[2] = sub_181BD1944;
  v11[3] = &block_descriptor_15;
  unint64_t v9 = _Block_copy(v11);
  swift_unknownObjectRetain();
  swift_retain();
  sub_181BC904C(a1);
  swift_release();
  nw_connection_set_state_changed_handler(v7, v9);
  sub_181BD25B8(a1);
  _Block_release(v9);
  return swift_unknownObjectRelease();
}

void NWConnection.start(queue:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 96));
  *(_BYTE *)(v4 + 93) = 1;
  uint64_t v5 = *(void **)(v4 + 80);
  uint64_t v6 = a1;

  *(void *)(v4 + 80) = a1;
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 96));
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 96));
  sub_181C67E78((uint64_t *)(v4 + 16), v11);
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 96));
  if (v11[0])
  {
    __int128 v10 = *(_OWORD *)v11;
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = v10;
    uint64_t v8 = sub_181BD639C;
  }

  else
  {
    uint64_t v8 = 0LL;
    uint64_t v7 = 0LL;
  }

  sub_181BC904C((uint64_t)v8);
  sub_181BC904C((uint64_t)v8);
  NWConnection.stateUpdateHandler.setter((uint64_t)v8, v7);
  sub_181BD25B8((uint64_t)v8);
  sub_181BD25B8((uint64_t)v8);
  unint64_t v9 = *(nw_connection **)(v2 + 16);
  nw_connection_set_queue(v9, v6);
  nw_connection_start(v9);
}

uint64_t NWConnection.ContentContext.__allocating_init(identifier:expiration:priority:isFinal:antecedent:metadata:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t a6, double a7)
{
  uint64_t v14 = swift_allocObject();
  NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)( a1,  a2,  a3,  a4,  a5,  a6,  a7);
  return v14;
}

void NWConnection.send(content:contentContext:isComplete:completion:)( uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v9 = *a5;
  if (*a5)
  {
    uint64_t v10 = a5[1];
    uint64_t v11 = *(nw_connection **)(v5 + 16);
    sub_181BC904C(*a5);
    swift_unknownObjectRetain();
    if (a2 >> 60 == 15) {
      uint64_t v13 = 0LL;
    }
    else {
      uint64_t v13 = (void *)sub_18264E5EC();
    }
    uint64_t v17 = (dispatch_data_s *)NWCreateDispatchDataFromNSData(v13, v12);

    uint64_t v18 = *(nw_content_context **)(a3 + 16);
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = v9;
    *(void *)(v19 + 24) = v10;
    aBlock[4] = sub_181C6BCFC;
    aBlock[5] = v19;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_181BBF440;
    void aBlock[3] = &block_descriptor_9_0;
    __int128 v20 = _Block_copy(aBlock);
    sub_181BC904C(v9);
    swift_unknownObjectRetain();
    swift_release();
    nw_connection_send(v11, v17, v18, a4 & 1, v20);
    _Block_release(v20);
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    sub_181BD25B8(v9);
  }

  else
  {
    uint64_t v14 = *(nw_connection **)(v5 + 16);
    swift_unknownObjectRetain();
    if (a2 >> 60 == 15) {
      uint64_t v16 = 0LL;
    }
    else {
      uint64_t v16 = (void *)sub_18264E5EC();
    }
    uint64_t v21 = (dispatch_data_s *)NWCreateDispatchDataFromNSData(v16, v15);

    nw_connection_send_idempotent(v14, v21, *(nw_content_context **)(a3 + 16), a4 & 1);
    swift_unknownObjectRelease();
  }

uint64_t NWConnection.receiveMessage(completion:)(uint64_t a1, uint64_t a2)
{
  return sub_181C69960(a1, a2, (uint64_t)&unk_189BB1B68, (uint64_t)sub_181C6BD00, (uint64_t)&block_descriptor_15_1);
}

void NWConnection.receive(minimumIncompleteLength:maximumLength:completion:)( uint32_t a1, uint32_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t NWConnection.debugDescription.getter()
{
  id v1 = objc_msgSend(*(id *)(v0 + 16), sel_description);
  uint64_t v2 = sub_18264EA48();

  return v2;
}

uint64_t sub_181C67A2C@<X0>(nw_error_t error@<X1>, uint64_t result@<X0>, uint64_t a3@<X8>)
{
  switch((int)result)
  {
    case 0:
      BOOL result = swift_unknownObjectRelease();
      unint64_t v5 = 0x8000000000LL;
      break;
    case 1:
      if (error)
      {
        nw_error_domain_t error_domain = nw_error_get_error_domain(error);
        switch(error_domain)
        {
          case nw_error_domain_tls:
            unsigned int error_code = nw_error_get_error_code(error);
            BOOL result = swift_unknownObjectRelease();
            unint64_t v5 = error_code | 0x200000000LL;
            break;
          case nw_error_domain_dns:
            unsigned int v9 = nw_error_get_error_code(error);
            BOOL result = swift_unknownObjectRelease();
            unint64_t v5 = v9 | 0x100000000LL;
            break;
          case nw_error_domain_posix:
            nw_error_get_error_code(error);
            uint64_t v7 = sub_18264E94C();
            BOOL result = swift_unknownObjectRelease();
            unint64_t v5 = 22LL;
            if ((v7 & 0x100000000LL) == 0) {
              unint64_t v5 = v7;
            }
            break;
          default:
            BOOL result = swift_unknownObjectRelease();
            unint64_t v5 = 22LL;
            break;
        }
      }

      else
      {
        unint64_t v5 = 50LL;
      }

      break;
    case 2:
      BOOL result = swift_unknownObjectRelease();
      unint64_t v5 = 0x8000000001LL;
      break;
    case 3:
      BOOL result = swift_unknownObjectRelease();
      unint64_t v5 = 0x8000000002LL;
      break;
    case 4:
      BOOL result = (uint64_t)sub_181BF9C34(error, (uint64_t)&v10);
      unint64_t v5 = 0x4000000016LL;
      if (v11 != 255LL) {
        unint64_t v5 = v10 | ((unint64_t)v11 << 32) | 0x4000000000LL;
      }
      break;
    default:
      BOOL result = swift_unknownObjectRelease();
      unint64_t v5 = 0x8000000003LL;
      break;
  }

  *(_DWORD *)a3 = v5;
  *(_BYTE *)(a3 + 4) = BYTE4(v5);
  return result;
}

void NWConnection.state.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 96));
  int v4 = *(_DWORD *)(v3 + 88);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(v3 + 92);
  *(_DWORD *)a1 = v4;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 96));
}

uint64_t (*NWConnection.stateUpdateHandler.getter())()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 24);
  uint64_t v2 = (uint64_t *)&v1[4];
  uint64_t v3 = v1 + 24;
  os_unfair_lock_lock(v1 + 24);
  sub_181C67E78(v2, (uint64_t (**)())&v6);
  os_unfair_lock_unlock(v3);
  if (!(void)v6) {
    return 0LL;
  }
  __int128 v5 = v6;
  *(_OWORD *)(swift_allocObject() + 16) = v5;
  return sub_181BDA300;
}

uint64_t sub_181C67C9C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    int v4 = sub_181BDA300;
  }

  else
  {
    int v4 = 0LL;
    uint64_t v3 = 0LL;
  }

  sub_181BC904C(v1);
  return NWConnection.stateUpdateHandler.setter((uint64_t)v4, v3);
}

void sub_181C67D1C(uint64_t a1, nw_error *a2, uint64_t a3, void (*a4)(int *))
{
  uint64_t v7 = *(os_unfair_lock_s **)(a3 + 24);
  uint64_t v8 = (uint64_t)&v7[4];
  unsigned int v9 = v7 + 24;
  os_unfair_lock_lock(v7 + 24);
  sub_181C67DB4(v8, a1, a2, (uint64_t)&v10);
  os_unfair_lock_unlock(v9);
  if (a4) {
    a4(&v10);
  }
}

uint64_t sub_181C67DB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, nw_error *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_181C67A2C(a3, a2, (uint64_t)&v11);
  unsigned int v9 = v11;
  unint64_t v10 = v11 | ((unint64_t)v12 << 32);
  *(_BYTE *)(a1 + 76) = v12;
  *(_DWORD *)(a1 + 72) = v9;
  if (v10 >= 0x8000000003LL)
  {
    uint64_t result = nw_utilities_minos_atleast();
    if ((_DWORD)result)
    {
      sub_181BD25B8(*(void *)a1);
      *(void *)a1 = 0LL;
      *(void *)(a1 + 8) = 0LL;
      sub_181BD25B8(*(void *)(a1 + 16));
      *(void *)(a1 + 16) = 0LL;
      *(void *)(a1 + 24) = 0LL;
      sub_181BD25B8(*(void *)(a1 + 32));
      *(void *)(a1 + 32) = 0LL;
      *(void *)(a1 + 40) = 0LL;
      uint64_t result = sub_181BD25B8(*(void *)(a1 + 48));
      *(void *)(a1 + 48) = 0LL;
      *(void *)(a1 + 56) = 0LL;
    }
  }

  *(_DWORD *)a4 = v10;
  *(_BYTE *)(a4 + 4) = BYTE4(v10);
  return result;
}

uint64_t sub_181C67E78@<X0>(uint64_t *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    __int128 v6 = sub_181BD639C;
  }

  else
  {
    __int128 v6 = 0LL;
    uint64_t v5 = 0LL;
  }

  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;
  return sub_181BC904C(v3);
}

uint64_t (*NWConnection.stateUpdateHandler.modify(uint64_t (**a1)()))(uint64_t *a1, char a2)
{
  a1[2] = (uint64_t (*)())v1;
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 24);
  uint64_t v4 = (uint64_t *)&v3[4];
  uint64_t v5 = v3 + 24;
  os_unfair_lock_lock(v3 + 24);
  sub_181C67E78(v4, v10);
  os_unfair_lock_unlock(v5);
  __int128 v6 = v10[0];
  if (v10[0])
  {
    __int128 v9 = *(_OWORD *)v10;
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = v9;
    __int128 v6 = sub_181BDA300;
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  *a1 = v6;
  a1[1] = (uint64_t (*)())v7;
  return sub_181C67F94;
}

uint64_t sub_181C67F94(uint64_t *a1, char a2)
{
  return sub_181BD2348( a1,  a2,  NWConnection.stateUpdateHandler.setter,  (void (*)(uint64_t, uint64_t))sub_181BC904C,  (uint64_t (*)(uint64_t, uint64_t))sub_181BDA294);
}

uint64_t NWConnection.maximumDatagramSize.getter()
{
  return nw_connection_get_maximum_datagram_size(*(nw_connection_t *)(v0 + 16));
}

uint64_t NWConnection.currentPath.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = nw_connection_copy_current_path(*(nw_connection_t *)(v1 + 16));
  if (v3)
  {
    sub_181C10170(v3, a1);
    uint64_t v4 = type metadata accessor for NWPath(0LL);
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL);
    uint64_t v6 = a1;
    uint64_t v7 = 0LL;
  }

  else
  {
    uint64_t v4 = type metadata accessor for NWPath(0LL);
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL);
    uint64_t v6 = a1;
    uint64_t v7 = 1LL;
  }

  return v5(v6, v7, 1LL, v4);
}

uint64_t (*NWConnection.pathUpdateHandler.getter())(uint64_t a1)
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 24);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 24;
  os_unfair_lock_lock(v1 + 24);
  sub_181C6834C(v2, (uint64_t (**)())&v6);
  os_unfair_lock_unlock(v3);
  if (!(void)v6) {
    return 0LL;
  }
  __int128 v5 = v6;
  *(_OWORD *)(swift_allocObject() + 16) = v5;
  return sub_181C1882C;
}

void sub_181C680D4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_181C6F3C4;
  }

  else
  {
    uint64_t v4 = 0LL;
    uint64_t v3 = 0LL;
  }

  sub_181BC904C(v1);
  NWConnection.pathUpdateHandler.setter((uint64_t)v4, v3);
}

void NWConnection.pathUpdateHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 96));
  uint64_t v6 = *(void *)(v5 + 32);
  sub_181BC904C(a1);
  sub_181BD25B8(v6);
  *(void *)(v5 + 32) = a1;
  *(void *)(v5 + 40) = a2;
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 96));
  if (a1)
  {
    uint64_t v7 = *(nw_connection **)(v2 + 16);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = a1;
    *(void *)(v8 + 24) = a2;
    v10[4] = sub_181C6BD18;
    v10[5] = v8;
    v10[0] = MEMORY[0x1895F87A8];
    v10[1] = 1107296256LL;
    v10[2] = sub_181BFB944;
    v10[3] = &block_descriptor_38_0;
    __int128 v9 = _Block_copy(v10);
    sub_181BC904C(a1);
    sub_181BC904C(a1);
    swift_unknownObjectRetain();
    swift_release();
    nw_connection_set_path_changed_handler(v7, v9);
    sub_181BD25B8(a1);
    _Block_release(v9);
    swift_unknownObjectRelease();
    sub_181BD25B8(a1);
  }

  else
  {
    nw_connection_set_path_changed_handler(*(nw_connection_t *)(v2 + 16), 0LL);
  }

uint64_t sub_181C682B4(uint64_t a1, void (*a2)(char *))
{
  uint64_t v3 = type metadata accessor for NWPath(0LL);
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = (nw_path *)swift_unknownObjectRetain();
  sub_181C10170(v6, (uint64_t)v5);
  a2(v5);
  return sub_181BC920C((uint64_t)v5, type metadata accessor for NWPath);
}

uint64_t sub_181C6834C@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = sub_181BD639C;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v5 = 0LL;
  }

  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;
  return sub_181BC904C(v3);
}

uint64_t (*NWConnection.pathUpdateHandler.modify( uint64_t (**a1)(uint64_t)))(uint64_t *a1, char a2)
{
  a1[2] = (uint64_t (*)(uint64_t))v1;
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 24);
  uint64_t v4 = (uint64_t)&v3[4];
  uint64_t v5 = v3 + 24;
  os_unfair_lock_lock(v3 + 24);
  sub_181C6834C(v4, v10);
  os_unfair_lock_unlock(v5);
  uint64_t v6 = (uint64_t (*)(uint64_t))v10[0];
  if (v10[0])
  {
    __int128 v9 = *(_OWORD *)v10;
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = v9;
    uint64_t v6 = sub_181C6F3C4;
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  *a1 = v6;
  a1[1] = (uint64_t (*)(uint64_t))v7;
  return sub_181C68468;
}

uint64_t sub_181C68468(uint64_t *a1, char a2)
{
  return sub_181BD2348( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t))NWConnection.pathUpdateHandler.setter,  (void (*)(uint64_t, uint64_t))sub_181BC904C,  (uint64_t (*)(uint64_t, uint64_t))sub_181BD25B8);
}

uint64_t (*NWConnection.viabilityUpdateHandler.getter())(char)
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 24);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 24;
  os_unfair_lock_lock(v1 + 24);
  sub_181C6873C(v2, (uint64_t (**)(unsigned __int8 *))&v6);
  os_unfair_lock_unlock(v3);
  if (!(void)v6) {
    return 0LL;
  }
  __int128 v5 = v6;
  *(_OWORD *)(swift_allocObject() + 16) = v5;
  return sub_181C6BD20;
}

void sub_181C68520(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_181C6BD20;
  }

  else
  {
    uint64_t v4 = 0LL;
    uint64_t v3 = 0LL;
  }

  sub_181BC904C(v1);
  NWConnection.viabilityUpdateHandler.setter((uint64_t)v4, v3);
}

void NWConnection.viabilityUpdateHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 96));
  uint64_t v6 = *(void *)(v5 + 48);
  sub_181BC904C(a1);
  sub_181BD25B8(v6);
  *(void *)(v5 + 48) = a1;
  *(void *)(v5 + 56) = a2;
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 96));
  if (a1)
  {
    uint64_t v7 = *(nw_connection **)(v2 + 16);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = a1;
    *(void *)(v8 + 24) = a2;
    v10[4] = sub_181BD639C;
    v10[5] = v8;
    v10[0] = MEMORY[0x1895F87A8];
    v10[1] = 1107296256LL;
    v10[2] = sub_181C68700;
    v10[3] = &block_descriptor_51_0;
    __int128 v9 = _Block_copy(v10);
    sub_181BC904C(a1);
    sub_181BC904C(a1);
    swift_unknownObjectRetain();
    swift_release();
    nw_connection_set_viability_changed_handler(v7, v9);
    sub_181BD25B8(a1);
    _Block_release(v9);
    swift_unknownObjectRelease();
    sub_181BD25B8(a1);
  }

  else
  {
    nw_connection_set_viability_changed_handler(*(nw_connection_t *)(v2 + 16), 0LL);
  }

uint64_t sub_181C68700(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

uint64_t sub_181C6873C@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(unsigned __int8 *)@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = sub_181C6F2BC;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v5 = 0LL;
  }

  *a2 = v6;
  a2[1] = (uint64_t (*)(unsigned __int8 *))v5;
  return sub_181BC904C(v3);
}

uint64_t (*NWConnection.viabilityUpdateHandler.modify( uint64_t (**a1)(char)))(uint64_t *a1, char a2)
{
  a1[2] = (uint64_t (*)(char))v1;
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 24);
  uint64_t v4 = (uint64_t)&v3[4];
  uint64_t v5 = v3 + 24;
  os_unfair_lock_lock(v3 + 24);
  sub_181C6873C(v4, v10);
  os_unfair_lock_unlock(v5);
  uint64_t v6 = (uint64_t (*)(char))v10[0];
  if (v10[0])
  {
    __int128 v9 = *(_OWORD *)v10;
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = v9;
    uint64_t v6 = sub_181C6BD20;
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  *a1 = v6;
  a1[1] = (uint64_t (*)(char))v7;
  return sub_181C68858;
}

uint64_t sub_181C68858(uint64_t *a1, char a2)
{
  return sub_181BD2348( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t))NWConnection.viabilityUpdateHandler.setter,  (void (*)(uint64_t, uint64_t))sub_181BDA298,  (uint64_t (*)(uint64_t, uint64_t))sub_181BDA294);
}

uint64_t (*NWConnection.betterPathUpdateHandler.getter())(char)
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 24);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 24;
  os_unfair_lock_lock(v1 + 24);
  sub_181C68B64(v2, (uint64_t (**)(unsigned __int8 *))&v6);
  os_unfair_lock_unlock(v3);
  if (!(void)v6) {
    return 0LL;
  }
  __int128 v5 = v6;
  *(_OWORD *)(swift_allocObject() + 16) = v5;
  return sub_181C6BD20;
}

double sub_181C68910@<D0>( uint64_t a1@<X0>, void (*a2)(__int128 *__return_ptr, os_unfair_lock_s *)@<X3>, _OWORD *a3@<X8>)
{
  __int128 v5 = *(os_unfair_lock_s **)(*(void *)a1 + 24LL);
  __int128 v6 = v5 + 4;
  uint64_t v7 = v5 + 24;
  os_unfair_lock_lock(v5 + 24);
  a2(&v9, v6);
  os_unfair_lock_unlock(v7);
  double result = *(double *)&v9;
  *a3 = v9;
  return result;
}

void sub_181C68984(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_181C6BD20;
  }

  else
  {
    uint64_t v4 = 0LL;
    uint64_t v3 = 0LL;
  }

  sub_181BC904C(v1);
  NWConnection.betterPathUpdateHandler.setter((uint64_t)v4, v3);
}

void NWConnection.betterPathUpdateHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 96));
  uint64_t v6 = *(void *)(v5 + 64);
  sub_181BC904C(a1);
  sub_181BD25B8(v6);
  *(void *)(v5 + 64) = a1;
  *(void *)(v5 + 72) = a2;
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 96));
  if (a1)
  {
    uint64_t v7 = *(nw_connection **)(v2 + 16);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = a1;
    *(void *)(v8 + 24) = a2;
    v10[4] = sub_181BDA300;
    v10[5] = v8;
    v10[0] = MEMORY[0x1895F87A8];
    v10[1] = 1107296256LL;
    v10[2] = sub_181C68700;
    v10[3] = &block_descriptor_65;
    __int128 v9 = _Block_copy(v10);
    sub_181BC904C(a1);
    sub_181BC904C(a1);
    swift_unknownObjectRetain();
    swift_release();
    nw_connection_set_better_path_available_handler(v7, v9);
    sub_181BD25B8(a1);
    _Block_release(v9);
    swift_unknownObjectRelease();
    sub_181BD25B8(a1);
  }

  else
  {
    nw_connection_set_better_path_available_handler(*(nw_connection_t *)(v2 + 16), 0LL);
  }

uint64_t sub_181C68B64@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(unsigned __int8 *a1)@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = sub_181C6F284;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v5 = 0LL;
  }

  *a2 = v6;
  a2[1] = (uint64_t (*)(unsigned __int8 *))v5;
  return sub_181BC904C(v3);
}

uint64_t (*NWConnection.betterPathUpdateHandler.modify( uint64_t (**a1)(char)))(uint64_t *a1, char a2)
{
  a1[2] = (uint64_t (*)(char))v1;
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 24);
  uint64_t v4 = (uint64_t)&v3[4];
  uint64_t v5 = v3 + 24;
  os_unfair_lock_lock(v3 + 24);
  sub_181C68B64(v4, v10);
  os_unfair_lock_unlock(v5);
  uint64_t v6 = (uint64_t (*)(char))v10[0];
  if (v10[0])
  {
    __int128 v9 = *(_OWORD *)v10;
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = v9;
    uint64_t v6 = sub_181C6BD20;
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  *a1 = v6;
  a1[1] = (uint64_t (*)(char))v7;
  return sub_181C68C80;
}

uint64_t sub_181C68C80(uint64_t *a1, char a2)
{
  return sub_181BD2348( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t))NWConnection.betterPathUpdateHandler.setter,  (void (*)(uint64_t, uint64_t))sub_181BDA298,  (uint64_t (*)(uint64_t, uint64_t))sub_181BDA294);
}

uint64_t NWConnection.endpoint.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_181BC9248( v1 + OBJC_IVAR____TtC7Network13_NWConnection_endpoint,  a1,  (uint64_t (*)(void))type metadata accessor for NWEndpoint);
}

uint64_t NWConnection.parameters.getter()
{
  return swift_retain();
}

uint64_t NWConnection.init(to:using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_release();
  return v3;
}

uint64_t NWConnection.__allocating_init(host:port:using:)(uint64_t a1, __int16 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NWEndpoint();
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(_BYTE *)(a1 + 24);
  __int16 v11 = *a2;
  *(_OWORD *)uint64_t v8 = *(_OWORD *)a1;
  *((void *)v8 + 2) = v9;
  v8[24] = v10;
  *((_WORD *)v8 + 13) = v11;
  swift_storeEnumTagMultiPayload();
  swift_allocObject();
  sub_181C6BB70((uint64_t)v8, a3);
  uint64_t v13 = v12;
  swift_release();
  return v13;
}

uint64_t NWConnection.__allocating_init(connection:parameters:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for NWEndpoint();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](v7);
  uint64_t v22 = (uint64_t)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = (char *)&v22 - v11;
  uint64_t v13 = *(void **)(a1 + 16);
  uint64_t v14 = *(void *)(a2 + 16);
  uint64_t v15 = (void *)(v14 + 16);
  uint64_t v16 = (os_unfair_lock_s *)(v14 + 24);
  swift_unknownObjectRetain();
  os_unfair_lock_lock(v16);
  sub_181C96C68(v15, &v23);
  os_unfair_lock_unlock(v16);
  uint64_t v17 = (nw_connection *)nw_connection_create_with_connection(v13, v23);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (v17)
  {
    uint64_t v18 = nw_connection_copy_endpoint(v17);
    sub_181BDA308(v18, (uint64_t)v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) == 1)
    {
      swift_unknownObjectRelease();
      swift_release();
      swift_release();
      sub_181BDA0F0((uint64_t)v6, &qword_18C45E580);
      return 0LL;
    }

    else
    {
      sub_181BC928C((uint64_t)v6, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
      uint64_t v20 = v22;
      sub_181BC9248((uint64_t)v12, v22, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
      swift_allocObject();
      uint64_t v19 = sub_181C6BD24(v20, a2, (uint64_t)v17);
      swift_release();
      swift_release();
      swift_unknownObjectRelease();
      sub_181BC920C((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    }
  }

  else
  {
    swift_release();
    swift_release();
    return 0LL;
  }

  return v19;
}

void *NWConnection.queue.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = (os_unfair_lock_s *)(v1 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 96));
  uint64_t v3 = *(void **)(v1 + 80);
  id v4 = v3;
  os_unfair_lock_unlock(v2);
  return v3;
}

Swift::Void __swiftcall NWConnection.forceCancel()()
{
}

Swift::Void __swiftcall NWConnection.cancelCurrentEndpoint()()
{
}

Swift::Void __swiftcall NWConnection.restart()()
{
}

uint64_t _s7Network12NWConnectionC2nwSo03OS_C11_connection_pvg_0()
{
  return swift_unknownObjectRetain();
}

uint64_t NWConnection.ContentContext.identifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NWConnection.ContentContext.expirationMilliseconds.getter()
{
  return *(void *)(v0 + 40);
}

double NWConnection.ContentContext.relativePriority.getter()
{
  return *(double *)(v0 + 48);
}

uint64_t NWConnection.ContentContext.antecedent.getter()
{
  return swift_retain();
}

uint64_t NWConnection.ContentContext.isFinal.getter()
{
  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t sub_181C690B0()
{
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = MEMORY[0x18961AFE8];
  uint64_t v2 = (uint64_t *)(v1 + 16);
  uint64_t v3 = *(nw_content_context **)(v0 + 16);
  v7[4] = sub_181C65144;
  v7[5] = v1;
  v7[0] = MEMORY[0x1895F87A8];
  v7[1] = 1107296256LL;
  _OWORD v7[2] = sub_181C69288;
  void v7[3] = &block_descriptor_75_0;
  id v4 = _Block_copy(v7);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_content_context_foreach_protocol_metadata(v3, v4);
  _Block_release(v4);
  swift_unknownObjectRelease();
  swift_beginAccess();
  uint64_t v5 = *v2;
  swift_bridgeObjectRetain();
  swift_release();
  return v5;
}

void *sub_181C691B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result = sub_181C32C0C(a2);
  if (result)
  {
    uint64_t v5 = (void (*)(uint64_t))result[12];
    uint64_t v6 = swift_unknownObjectRetain();
    v5(v6);
    swift_beginAccess();
    uint64_t v7 = swift_retain();
    MEMORY[0x186E0E844](v7);
    if (*(void *)((*(void *)(a3 + 16) & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((*(void *)(a3 + 16) & 0xFFFFFFFFFFFFFF8LL)
                                                                                       + 0x18) >> 1)
      sub_18264ED00();
    sub_18264ED30();
    sub_18264ECDC();
    swift_endAccess();
    return (void *)swift_release();
  }

  return result;
}

uint64_t sub_181C69288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v5(a2, a3);
  swift_release();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_181C692EC(uint64_t a1)
{
  return sub_181C6A64C(a1, (uint64_t (*)(void, void))nw_content_context_copy_protocol_metadata);
}

void NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t a6, double a7)
{
  uint64_t v15 = sub_18264EACC();
  uint64_t v16 = nw_content_context_create((const char *)(v15 + 32));
  swift_release();
  *(void *)(v7 + 16) = v16;
  *(void *)(v7 + 24) = a1;
  *(void *)(v7 + 32) = a2;
  *(void *)(v7 + 40) = a3;
  nw_content_context_set_expiration_milliseconds(v16, a3);
  *(double *)(v7 + 48) = a7;
  nw_content_context_set_relative_priority(v16, a7);
  *(_BYTE *)(v7 + 64) = a4;
  nw_content_context_set_is_final(v16, a4 & 1);
  *(void *)(v7 + 56) = a5;
  if (a5)
  {
    uint64_t v17 = *(nw_content_context **)(a5 + 16);
    swift_retain();
    nw_content_context_set_antecedent(v16, v17);
  }

  if (!a6) {
    goto LABEL_14;
  }
  if (!(a6 >> 62))
  {
    uint64_t v18 = *(void *)((a6 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    if (v18) {
      goto LABEL_6;
    }
LABEL_13:
    swift_bridgeObjectRelease();
LABEL_14:
    swift_release();
    return;
  }

  swift_bridgeObjectRetain();
  uint64_t v18 = sub_18264F330();
  swift_bridgeObjectRelease();
  if (!v18) {
    goto LABEL_13;
  }
LABEL_6:
  if (v18 >= 1)
  {
    if ((a6 & 0xC000000000000001LL) != 0)
    {
      for (uint64_t i = 0LL; i != v18; ++i)
      {
        uint64_t v20 = MEMORY[0x186E0ED48](i, a6);
        nw_content_context_set_metadata_for_protocol( *(nw_content_context_t *)(v7 + 16),  *(nw_protocol_metadata_t *)(v20 + 16));
        swift_unknownObjectRelease();
      }
    }

    else
    {
      uint64_t v21 = (uint64_t *)(a6 + 32);
      uint64_t v22 = *(nw_content_context **)(v7 + 16);
      do
      {
        uint64_t v23 = *v21++;
        nw_content_context_set_metadata_for_protocol(v22, *(nw_protocol_metadata_t *)(v23 + 16));
        --v18;
      }

      while (v18);
    }

    goto LABEL_13;
  }

  __break(1u);
}

uint64_t sub_181C69488(uint64_t a1)
{
  return sub_181C694FC(a1, (nw_content_context **)&_nw_content_context_default_message, &qword_18C58E060);
}

uint64_t static NWConnection.ContentContext.defaultMessage.getter()
{
  return sub_181BE8D9C(&qword_18C58B228);
}

uint64_t sub_181C694B8(uint64_t a1)
{
  return sub_181C694FC(a1, (nw_content_context **)&_nw_content_context_final_send, &qword_18C58E068);
}

uint64_t static NWConnection.ContentContext.finalMessage.getter()
{
  return sub_181BE8D9C(&qword_18C58B230);
}

uint64_t sub_181C694E8(uint64_t a1)
{
  return sub_181C694FC(a1, (nw_content_context **)&_nw_content_context_default_stream, &qword_18C58E070);
}

uint64_t sub_181C694FC(uint64_t a1, nw_content_context **a2, uint64_t *a3)
{
  id v4 = *a2;
  type metadata accessor for NWConnection.ContentContext();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 48) = 0LL;
  *(void *)(v5 + 56) = 0LL;
  *(void *)(v5 + 40) = 0LL;
  uint64_t v6 = (nw_content_context *)swift_unknownObjectRetain_n();
  *(_BYTE *)(v5 + 64) = nw_content_context_get_is_final(v6);
  nw_content_context_get_identifier(v4);
  uint64_t v7 = sub_18264EB80();
  uint64_t v9 = v8;
  uint64_t result = swift_unknownObjectRelease();
  *(void *)(v5 + 24) = v7;
  *(void *)(v5 + 32) = v9;
  *a3 = v5;
  return result;
}

uint64_t static NWConnection.ContentContext.defaultStream.getter()
{
  return sub_181BE8D9C(&qword_18C58B238);
}

uint64_t NWConnection.ContentContext.__allocating_init(nw:)(nw_content_context *a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = a1;
  uint64_t v3 = (nw_content_context *)swift_unknownObjectRetain();
  *(void *)(v2 + 40) = nw_content_context_get_expiration_milliseconds(v3);
  *(double *)(v2 + 48) = nw_content_context_get_relative_priority(a1);
  *(_BYTE *)(v2 + 64) = nw_content_context_get_is_final(a1);
  nw_content_context_get_identifier(a1);
  *(void *)(v2 + 24) = sub_18264EB80();
  *(void *)(v2 + 32) = v4;
  uint64_t v5 = nw_content_context_copy_antecedent(a1);
  uint64_t v6 = sub_181C6C1A8(v5);
  swift_unknownObjectRelease();
  *(void *)(v2 + 56) = v6;
  return v2;
}

uint64_t NWConnection.ContentContext.init(nw:)(nw_content_context *a1)
{
  uint64_t v1 = sub_181C6C244(a1);
  swift_unknownObjectRelease();
  return v1;
}

uint64_t NWConnection.ContentContext.deinit()
{
  uint64_t v1 = *(void *)(v0 + 56);
  *(void *)(v0 + 56) = 0LL;
  if (v1)
  {
    do
    {
      uint64_t v2 = *(void *)(v1 + 56);
      swift_retain();
      swift_release();
      uint64_t v1 = v2;
    }

    while (v2);
  }

  swift_release();
  return v0;
}

uint64_t NWConnection.ContentContext.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void sub_181C696F8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  id v10 = a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v9(a2, a3, a4, a5);
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
}

void NWConnection.receiveDiscontiguous(minimumIncompleteLength:maximumLength:completion:)( uint32_t a1, uint32_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_181C697AC(uint32_t a1, uint32_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = *(nw_connection **)(v7 + 16);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a3;
  *(void *)(v15 + 24) = a4;
  void v17[4] = a6;
  v17[5] = v15;
  v17[0] = MEMORY[0x1895F87A8];
  v17[1] = 1107296256LL;
  v17[2] = sub_181C696F8;
  void v17[3] = a7;
  uint64_t v16 = _Block_copy(v17);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_receive(v14, a1, a2, v16);
  swift_unknownObjectRelease();
  _Block_release(v16);
}

uint64_t sub_181C69888( void *a1, uint64_t a2, char a3, uint64_t a4, void (*a5)(uint64_t, unint64_t, void *, void, _BYTE *))
{
  uint64_t v7 = NWCreateNSDataFromDispatchData(a1);
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = sub_18264E5F8();
    unint64_t v11 = v10;
  }

  else
  {
    uint64_t v9 = 0LL;
    unint64_t v11 = 0xF000000000000000LL;
  }

  uint64_t v12 = (nw_content_context *)swift_unknownObjectRetain();
  uint64_t v13 = sub_181C6C1A8(v12);
  uint64_t v14 = (nw_error *)swift_unknownObjectRetain();
  sub_181BF9C34(v14, (uint64_t)v16);
  a5(v9, v11, v13, a3 & 1, v16);
  swift_release();
  return sub_181BE61C8(v9, v11);
}

uint64_t NWConnection.receiveMessageDiscontiguous(completion:)(uint64_t a1, uint64_t a2)
{
  return sub_181C69960(a1, a2, (uint64_t)&unk_189BB1ED8, (uint64_t)sub_181C6F2B4, (uint64_t)&block_descriptor_87);
}

uint64_t sub_181C69960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = *(nw_connection **)(v5 + 16);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  v14[4] = a4;
  v14[5] = v11;
  v14[0] = MEMORY[0x1895F87A8];
  v14[1] = 1107296256LL;
  void v14[2] = sub_181C696F8;
  v14[3] = a5;
  uint64_t v12 = _Block_copy(v14);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_receive_message(v10, v12);
  _Block_release(v12);
  return swift_unknownObjectRelease();
}

uint64_t sub_181C69A24( uint64_t a1, uint64_t a2, char a3, uint64_t a4, void (*a5)(char *, void *, void, _BYTE *))
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58C0C0);
  MEMORY[0x1895F8858](v8);
  unint64_t v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  if (a1)
  {
    sub_18264E994();
    uint64_t v11 = sub_18264E9A0();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v10, 0LL, 1LL, v11);
  }

  else
  {
    uint64_t v12 = sub_18264E9A0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v10, 1LL, 1LL, v12);
  }

  uint64_t v13 = (nw_content_context *)swift_unknownObjectRetain();
  uint64_t v14 = sub_181C6C1A8(v13);
  uint64_t v15 = (nw_error *)swift_unknownObjectRetain();
  sub_181BF9C34(v15, (uint64_t)v18);
  a5(v10, v14, a3 & 1, v18);
  swift_release();
  return sub_181BDA0F0((uint64_t)v10, (uint64_t *)&unk_18C58C0C0);
}

uint64_t NWConnection.receiveFile(at:maximumLength:handler:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void **)(v4 + 16);
  swift_unknownObjectRetain();
  sub_18264E544();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a3;
  *(void *)(v9 + 24) = a4;
  v13[4] = sub_181C6C2C4;
  void v13[5] = v9;
  v13[0] = MEMORY[0x1895F87A8];
  v13[1] = 1107296256LL;
  _OWORD v13[2] = sub_181C69CF4;
  v13[3] = &block_descriptor_93;
  unint64_t v10 = _Block_copy(v13);
  swift_retain();
  swift_release();
  uint64_t v11 = sub_18264EACC();
  swift_bridgeObjectRelease();
  nw_connection_receive_file_at_path_with_progress(v8, (const char *)(v11 + 32), a2, v10);
  swift_release();
  _Block_release(v10);
  return swift_unknownObjectRelease();
}

uint64_t sub_181C69C64( uint64_t a1, nw_content_context *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, void *, uint64_t, _BYTE *))
{
  uint64_t v9 = sub_181C6C1A8(a2);
  unint64_t v10 = (nw_error *)swift_unknownObjectRetain();
  sub_181BF9C34(v10, (uint64_t)v12);
  LOBYTE(a5) = a5(a1, v9, a3, v12);
  swift_release();
  return a5 & 1;
}

uint64_t sub_181C69CF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  LOBYTE(a4) = v9(a2, a3, a4, a5);
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return a4 & 1;
}

uint64_t sub_181C69D80(uint64_t a1, uint64_t (*a2)(_BYTE *))
{
  uint64_t v3 = (nw_error *)swift_unknownObjectRetain();
  sub_181BF9C34(v3, (uint64_t)v5);
  return a2(v5);
}

void NWConnection.send(discontiguousContent:contentContext:isComplete:completion:)( uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v7 = *a4;
  if (*a4)
  {
    uint64_t v8 = a4[1];
    uint64_t v9 = *(nw_connection **)(v4 + 16);
    sub_181BC904C(*a4);
    swift_unknownObjectRetain();
    unint64_t v10 = (dispatch_data_s *)sub_18264E988();
    uint64_t v11 = *(nw_content_context **)(a2 + 16);
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = v7;
    *(void *)(v12 + 24) = v8;
    aBlock[4] = sub_181C6BCFC;
    aBlock[5] = v12;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_181BBF440;
    void aBlock[3] = &block_descriptor_99;
    uint64_t v13 = _Block_copy(aBlock);
    sub_181BC904C(v7);
    swift_unknownObjectRetain();
    swift_release();
    nw_connection_send(v9, v10, v11, a3 & 1, v13);
    _Block_release(v13);
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    sub_181BD25B8(v7);
  }

  else
  {
    uint64_t v14 = *(nw_connection **)(v4 + 16);
    swift_unknownObjectRetain();
    uint64_t v15 = (dispatch_data_s *)sub_18264E988();
    nw_connection_send_idempotent(v14, v15, *(nw_content_context **)(a2 + 16), a3 & 1);
    swift_unknownObjectRelease();
  }

uint64_t NWConnection.sendFile(at:contentContext:maximumLength:is_complete:handler:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *(void **)(v6 + 16);
  swift_unknownObjectRetain();
  sub_18264E544();
  uint64_t v13 = *(void **)(a2 + 16);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a5;
  *(void *)(v14 + 24) = a6;
  void v18[4] = sub_181C6C2F0;
  v18[5] = v14;
  v18[0] = MEMORY[0x1895F87A8];
  v18[1] = 1107296256LL;
  void v18[2] = sub_181C6A088;
  v18[3] = &block_descriptor_105_0;
  uint64_t v15 = _Block_copy(v18);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  uint64_t v16 = sub_18264EACC();
  swift_bridgeObjectRelease();
  nw_connection_send_file_at_path_with_progress(v12, (const char *)(v16 + 32), v13, a3, a4 & 1, v15);
  swift_release();
  _Block_release(v15);
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_181C6A088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  LOBYTE(a3) = v7(a2, a3, a4);
  swift_release();
  swift_unknownObjectRelease();
  return a3 & 1;
}

void NWConnection.send<A>(content:contentContext:isComplete:completion:)( uint64_t a1, uint64_t a2, int a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v50 = a4;
  v41[1] = a6;
  int v48 = a3;
  uint64_t v49 = a2;
  uint64_t v8 = *(void *)(a5 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](a1);
  v41[0] = (char *)v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v9);
  char v42 = (char *)v41 - v11;
  uint64_t v12 = sub_18264F09C();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  unint64_t v44 = (char *)v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = MEMORY[0x1895F8858](v14);
  uint64_t v46 = (char *)v41 - v17;
  MEMORY[0x1895F8858](v16);
  uint64_t v19 = (char *)v41 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58C0C0);
  MEMORY[0x1895F8858](v20);
  uint64_t v22 = (char *)v41 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = sub_18264E9A0();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1895F8858](v23);
  unint64_t v26 = (char *)v41 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v47 = a1;
  uint64_t v45 = v27;
  v27(v19, a1, v12);
  uint64_t v43 = v8;
  uint64_t v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (v28(v19, 1LL, a5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56))(v22, 1LL, 1LL, v23);
  }

  else
  {
    int v29 = swift_dynamicCast();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v22, v29 ^ 1u, 1LL, v23);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1LL, v23) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v26, v22, v23);
      NWConnection.send(discontiguousContent:contentContext:isComplete:completion:)((uint64_t)v26, v49, v48 & 1, v50);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
      return;
    }
  }

  sub_181BDA0F0((uint64_t)v22, (uint64_t *)&unk_18C58C0C0);
  char v30 = v46;
  uint64_t v31 = v47;
  uint64_t v32 = v45;
  v45(v46, v47, v12);
  if (v28(v30, 1LL, a5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v30, v12);
  }

  else if ((swift_dynamicCast() & 1) != 0)
  {
    uint64_t v33 = v51;
    unint64_t v34 = v52;
    sub_181BCD4AC(v51, v52);
    NWConnection.send(content:contentContext:isComplete:completion:)(v33, v34, v49, v48 & 1, v50);
    sub_181BCD4F0(v33, v34);
    sub_181BCD4F0(v33, v34);
    return;
  }

  uint64_t v35 = v44;
  v32(v44, v31, v12);
  if (v28(v35, 1LL, a5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v35, v12);
    NWConnection.send(content:contentContext:isComplete:completion:)(0LL, 0xF000000000000000LL, v49, v48 & 1, v50);
  }

  else
  {
    uint64_t v37 = v42;
    uint64_t v36 = v43;
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v42, v35, a5);
    (*(void (**)(void, char *, uint64_t))(v36 + 16))(v41[0], v37, a5);
    uint64_t v38 = sub_18264E628();
    unint64_t v40 = v39;
    NWConnection.send(content:contentContext:isComplete:completion:)(v38, v39, v49, v48 & 1, v50);
    sub_181BCD4F0(v38, v40);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v37, a5);
  }

uint64_t NWConnection.batch(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(nw_connection **)(v2 + 16);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  uint64_t v9[4] = sub_181BD639C;
  v9[5] = v6;
  v9[0] = MEMORY[0x1895F87A8];
  v9[1] = 1107296256LL;
  _OWORD v9[2] = sub_181C6A620;
  v9[3] = &block_descriptor_111;
  uint64_t v7 = _Block_copy(v9);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_batch(v5, v7);
  swift_unknownObjectRelease();
  _Block_release(v7);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  return result;
}

uint64_t sub_181C6A620(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t NWConnection.metadata(definition:)(uint64_t a1)
{
  return sub_181C6A64C(a1, (uint64_t (*)(void, void))nw_connection_copy_protocol_metadata);
}

uint64_t sub_181C6A64C(uint64_t a1, uint64_t (*a2)(void, void))
{
  uint64_t result = a2(*(void *)(v2 + 16), *(void *)(a1 + 32));
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = sub_181C32C0C(result);
    if (v5)
    {
      return ((uint64_t (*)(uint64_t))v5[12])(v4);
    }

    else
    {
      swift_unknownObjectRelease();
      return 0LL;
    }
  }

  return result;
}

uint64_t NWConnection.EstablishmentReport.debugDescription.getter()
{
  id v1 = objc_msgSend(*v0, sel_description);
  uint64_t v2 = sub_18264EA48();

  return v2;
}

double NWConnection.EstablishmentReport.attemptStartedAfterInterval.getter()
{
  return *(double *)(v0 + 16);
}

uint64_t NWConnection.EstablishmentReport.previousAttemptCount.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t NWConnection.EstablishmentReport.usedProxy.getter()
{
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t NWConnection.EstablishmentReport.proxyConfigured.getter()
{
  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t NWConnection.EstablishmentReport.proxyEndpoint.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NWConnection.EstablishmentReport(0LL) + 40);
  return sub_181C6C37C(v3, a1);
}

void NWConnection.EstablishmentReport.Resolution.source.getter(_BYTE *a1@<X8>)
{
  *a1 = *v1;
}

double NWConnection.EstablishmentReport.Resolution.duration.getter()
{
  return *(double *)(v0 + 8);
}

uint64_t NWConnection.EstablishmentReport.Resolution.endpointCount.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t NWConnection.EstablishmentReport.Resolution.successfulEndpoint.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for NWConnection.EstablishmentReport.Resolution(0LL);
  return sub_181BC9248( v1 + *(int *)(v3 + 28),  a1,  (uint64_t (*)(void))type metadata accessor for NWEndpoint);
}

uint64_t NWConnection.EstablishmentReport.Resolution.preferredEndpoint.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for NWConnection.EstablishmentReport.Resolution(0LL);
  return sub_181BC9248( v1 + *(int *)(v3 + 32),  a1,  (uint64_t (*)(void))type metadata accessor for NWEndpoint);
}

BOOL static NWConnection.EstablishmentReport.Resolution.DNSProtocol.== infix(_:_:)( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t NWConnection.EstablishmentReport.Resolution.DNSProtocol.hash(into:)()
{
  return sub_18264F654();
}

uint64_t NWConnection.EstablishmentReport.Resolution.dnsProtocol.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = type metadata accessor for NWConnection.EstablishmentReport.Resolution(0LL);
  unsigned int v4 = *(_DWORD *)(v1 + *(int *)(result + 36));
  if (v4 >= 5) {
    LOBYTE(v4) = 0;
  }
  *a1 = v4;
  return result;
}

uint64_t NWConnection.EstablishmentReport.resolutions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NWConnection.EstablishmentReport.Handshake.definition.getter()
{
  return swift_retain();
}

double NWConnection.EstablishmentReport.Handshake.handshakeDuration.getter()
{
  return *(double *)(v0 + 8);
}

double NWConnection.EstablishmentReport.Handshake.handshakeRTT.getter()
{
  return *(double *)(v0 + 16);
}

uint64_t NWConnection.EstablishmentReport.handshakes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_181C6A8B4@<X0>(nw_establishment_report *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4 = (int *)type metadata accessor for NWConnection.EstablishmentReport(0LL);
  uint64_t v5 = *((void *)v4 - 1);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!a1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v5 + 56))(a2, 1LL, 1LL, v4);
  }
  uint64_t v26 = a2;
  *(void *)uint64_t v7 = a1;
  uint64_t v8 = (nw_establishment_report *)swift_unknownObjectRetain_n();
  uint64_t duration_milliseconds = nw_establishment_report_get_duration_milliseconds(v8);
  uint64_t attempt_started_after_milliseconds = nw_establishment_report_get_attempt_started_after_milliseconds(a1);
  v11.i64[0] = duration_milliseconds;
  v11.i64[1] = attempt_started_after_milliseconds;
  *(float64x2_t *)(v7 + 8) = vdivq_f64(vcvtq_f64_u64(v11), (float64x2_t)vdupq_n_s64(0x408F400000000000uLL));
  *((void *)v7 + 3) = nw_establishment_report_get_previous_attempt_count(a1);
  _BYTE v7[32] = nw_establishment_report_get_used_proxy(a1);
  v7[33] = nw_establishment_report_get_proxy_configured(a1);
  uint64_t v12 = nw_establishment_report_copy_proxy_endpoint(a1);
  sub_181BDA308(v12, (uint64_t)&v7[v4[10]]);
  uint64_t v13 = MEMORY[0x18961AFE8];
  uint64_t v34 = MEMORY[0x18961AFE8];
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = &v34;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_181C6F244;
  *(void *)(v15 + 24) = v14;
  uint64_t v32 = sub_181BBFA50;
  uint64_t v33 = v15;
  uint64_t v16 = MEMORY[0x1895F87A8];
  uint64_t aBlock = MEMORY[0x1895F87A8];
  uint64_t v29 = 1107296256LL;
  char v30 = sub_181C6AF34;
  uint64_t v31 = &block_descriptor_157;
  uint64_t v17 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  nw_establishment_report_enumerate_resolution_reports(a1, v17);
  _Block_release(v17);
  LOBYTE(v17) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v17 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    *(void *)&v7[v4[11]] = v34;
    uint64_t v27 = v13;
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = &v27;
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = sub_181C6F26C;
    *(void *)(v20 + 24) = v19;
    uint64_t v32 = sub_181BBFA50;
    uint64_t v33 = v20;
    uint64_t aBlock = v16;
    uint64_t v29 = 1107296256LL;
    char v30 = sub_181C6B0BC;
    uint64_t v31 = &block_descriptor_166;
    uint64_t v21 = _Block_copy(&aBlock);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    nw_establishment_report_enumerate_protocols(a1, v21);
    swift_unknownObjectRelease_n();
    _Block_release(v21);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    uint64_t result = swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0)
    {
      *(void *)&v7[v4[12]] = v27;
      swift_bridgeObjectRelease();
      uint64_t v23 = (uint64_t)v7;
      uint64_t v24 = v26;
      sub_181BC928C(v23, v26, type metadata accessor for NWConnection.EstablishmentReport);
      (*(void (**)(uint64_t, void, uint64_t, int *))(v5 + 56))(v24, 0LL, 1LL, v4);
      swift_release();
      return swift_release();
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_181C6AC34(nw_resolution_report *a1, unint64_t *a2)
{
  uint64_t v33 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
  uint64_t v4 = MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&protocol - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v4);
  uint64_t v8 = (char *)&protocol - v7;
  uint64_t v9 = (int *)type metadata accessor for NWConnection.EstablishmentReport.Resolution(0LL);
  uint64_t v32 = *((void *)v9 - 1);
  uint64_t v10 = MEMORY[0x1895F8858](v9);
  uint64_t v31 = (uint64_t)&protocol - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v13 = (double *)((char *)&protocol - v12);
  nw_report_resolution_source_t source = nw_resolution_report_get_source(a1);
  int v15 = source == nw_report_resolution_source_cache;
  if (source == nw_report_resolution_source_expired_cache) {
    int v15 = 2;
  }
  int v30 = v15;
  uint64_t milliseconds = nw_resolution_report_get_milliseconds(a1);
  uint32_t endpoint_count = nw_resolution_report_get_endpoint_count(a1);
  nw_resolution_report_copy_successful_endpoint(a1);
  nw_resolution_report_copy_preferred_endpoint(a1);
  nw_report_resolution_protocol_t protocol = nw_resolution_report_get_protocol(a1);
  uint64_t v18 = (nw_endpoint *)swift_unknownObjectRetain();
  sub_181BDA308(v18, (uint64_t)v8);
  uint64_t v19 = type metadata accessor for NWEndpoint();
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48LL);
  uint64_t result = v20(v8, 1LL, v19);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v22 = (nw_endpoint *)swift_unknownObjectRetain();
  sub_181BDA308(v22, (uint64_t)v6);
  uint64_t result = v20(v6, 1LL, v19);
  if ((_DWORD)result == 1)
  {
LABEL_11:
    __break(1u);
    return result;
  }

  *(_BYTE *)uint64_t v13 = v30;
  v13[1] = (double)milliseconds / 1000.0;
  *((void *)v13 + 2) = endpoint_count;
  sub_181BC928C( (uint64_t)v8,  (uint64_t)v13 + v9[7],  (uint64_t (*)(void))type metadata accessor for NWEndpoint);
  sub_181BC928C( (uint64_t)v6,  (uint64_t)v13 + v9[8],  (uint64_t (*)(void))type metadata accessor for NWEndpoint);
  *(_DWORD *)((char *)v13 + v9[9]) = protocol;
  uint64_t v23 = v31;
  sub_181BC9248((uint64_t)v13, v31, type metadata accessor for NWConnection.EstablishmentReport.Resolution);
  uint64_t v24 = v33;
  unint64_t v25 = *v33;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v24 = v25;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v25 = sub_181BC5654(0, *(void *)(v25 + 16) + 1LL, 1, v25);
    *uint64_t v24 = v25;
  }

  unint64_t v28 = *(void *)(v25 + 16);
  unint64_t v27 = *(void *)(v25 + 24);
  if (v28 >= v27 >> 1)
  {
    unint64_t v25 = sub_181BC5654(v27 > 1, v28 + 1, 1, v25);
    *uint64_t v24 = v25;
  }

  *(void *)(v25 + 16) = v28 + 1;
  sub_181BC928C( v23,  v25 + ((*(unsigned __int8 *)(v32 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))
  + *(void *)(v32 + 72) * v28,
    type metadata accessor for NWConnection.EstablishmentReport.Resolution);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_181BC920C((uint64_t)v13, type metadata accessor for NWConnection.EstablishmentReport.Resolution);
  return 1LL;
}

uint64_t sub_181C6AF34(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  char v4 = v3(a2);
  swift_unknownObjectRelease();
  return v4 & 1;
}

uint64_t sub_181C6AF7C(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v8 = (void *)swift_allocObject();
  void v8[4] = a1;
  id v9 = objc_msgSend((id)swift_unknownObjectRetain(), sel_description);
  uint64_t v10 = sub_18264EA48();
  uint64_t v12 = v11;

  void v8[2] = v10;
  void v8[3] = v12;
  uint64_t v13 = *a4;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a4 = v13;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v13 = sub_181BC5668(0LL, v13[2] + 1LL, 1, v13);
    *a4 = v13;
  }

  unint64_t v16 = v13[2];
  unint64_t v15 = v13[3];
  if (v16 >= v15 >> 1) {
    uint64_t v13 = sub_181BC5668((void *)(v15 > 1), v16 + 1, 1, v13);
  }
  v17.i64[0] = a2;
  v17.i64[1] = a3;
  _OWORD v13[2] = v16 + 1;
  uint64_t v18 = &v13[3 * v16];
  void v18[4] = v8;
  *(float64x2_t *)(v18 + 5) = vdivq_f64(vcvtq_f64_u64(v17), (float64x2_t)vdupq_n_s64(0x408F400000000000uLL));
  *a4 = v13;
  swift_release();
  return 1LL;
}

uint64_t sub_181C6B0BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  LOBYTE(a4) = v7(a2, a3, a4);
  swift_unknownObjectRelease();
  return a4 & 1;
}

uint64_t _s7Network18ProxyConfigurationV16debugDescriptionSSvg_0()
{
  id v1 = objc_msgSend(*v0, sel_description);
  uint64_t v2 = sub_18264EA48();

  return v2;
}

uint64_t NWConnection.requestEstablishmentReport(queue:completion:)( dispatch_queue_s *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(nw_connection **)(v3 + 16);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  void v11[4] = sub_181C6C3D8;
  v11[5] = v8;
  v11[0] = MEMORY[0x1895F87A8];
  v11[1] = 1107296256LL;
  void v11[2] = sub_181BBF440;
  v11[3] = &block_descriptor_117;
  id v9 = _Block_copy(v11);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_access_establishment_report(v7, a1, v9);
  _Block_release(v9);
  return swift_unknownObjectRelease();
}

uint64_t sub_181C6B248(uint64_t a1, void (*a2)(char *))
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E2A8);
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = (nw_establishment_report *)swift_unknownObjectRetain();
  sub_181C6A8B4(v6, (uint64_t)v5);
  a2(v5);
  return sub_181BDA0F0((uint64_t)v5, &qword_18C58E2A8);
}

uint64_t NWConnection.DataTransferReport.debugDescription.getter()
{
  id v1 = objc_msgSend(*v0, sel_description);
  uint64_t v2 = sub_18264EA48();

  return v2;
}

double NWConnection.DataTransferReport.duration.getter()
{
  return *(double *)(v0 + 8);
}

uint64_t NWConnection.DataTransferReport.PathReport.interface.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_unknownObjectRetain();
}

void NWConnection.DataTransferReport.PathReport.radioType.getter(char *a1@<X8>)
{
  if (*v1)
  {
    uint64_t v3 = (void *)swift_unknownObjectRetain();
    radio_os_log_type_t type = nw_interface_get_radio_type(v3);
    sub_181C0FB08(radio_type, a1);
    swift_unknownObjectRelease();
  }

  else
  {
    *a1 = 24;
  }

uint64_t NWConnection.DataTransferReport.PathReport.receivedIPPacketCount.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t NWConnection.DataTransferReport.PathReport.sentIPPacketCount.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t NWConnection.DataTransferReport.PathReport.receivedTransportByteCount.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t NWConnection.DataTransferReport.PathReport.receivedTransportDuplicateByteCount.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t NWConnection.DataTransferReport.PathReport.receivedTransportOutOfOrderByteCount.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t NWConnection.DataTransferReport.PathReport.sentTransportByteCount.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t NWConnection.DataTransferReport.PathReport.retransmittedTransportByteCount.getter()
{
  return *(void *)(v0 + 56);
}

double NWConnection.DataTransferReport.PathReport.transportSmoothedRTT.getter()
{
  return *(double *)(v0 + 64);
}

double NWConnection.DataTransferReport.PathReport.transportMinimumRTT.getter()
{
  return *(double *)(v0 + 72);
}

double NWConnection.DataTransferReport.PathReport.transportRTTVariance.getter()
{
  return *(double *)(v0 + 80);
}

uint64_t NWConnection.DataTransferReport.PathReport.receivedApplicationByteCount.getter()
{
  return *(void *)(v0 + 88);
}

uint64_t NWConnection.DataTransferReport.PathReport.sentApplicationByteCount.getter()
{
  return *(void *)(v0 + 96);
}

uint64_t NWConnection.DataTransferReport.aggregatePathReport.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 96);
  __int128 v3 = *(_OWORD *)(v1 + 32);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(a1 + 16) = v3;
  __int128 v4 = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 80);
  *(void *)(a1 + 80) = v2;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(v1 + 104);
  return swift_unknownObjectRetain();
}

uint64_t NWConnection.DataTransferReport.pathReports.getter()
{
  return swift_bridgeObjectRetain();
}

double sub_181C6B43C@<D0>(nw_data_transfer_report *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3 = (nw_data_transfer_report *)swift_unknownObjectRetain();
  uint64_t duration_milliseconds = nw_data_transfer_report_get_duration_milliseconds(v3);
  uint32_t path_count = nw_data_transfer_report_get_path_count(a1);
  if (path_count)
  {
    uint32_t v4 = 0;
    uint64_t v5 = (void *)MEMORY[0x18961AFE8];
    do
    {
      nw_interface_t v6 = nw_data_transfer_report_copy_path_interface(a1, v4);
      uint64_t received_ip_packet_count = nw_data_transfer_report_get_received_ip_packet_count(a1, v4);
      uint64_t sent_ip_packet_count = nw_data_transfer_report_get_sent_ip_packet_count(a1, v4);
      uint64_t received_transport_byte_count = nw_data_transfer_report_get_received_transport_byte_count(a1, v4);
      uint64_t received_transport_duplicate_byte_count = nw_data_transfer_report_get_received_transport_duplicate_byte_count( a1,  v4);
      uint64_t received_transport_out_of_order_byte_count = nw_data_transfer_report_get_received_transport_out_of_order_byte_count( a1,  v4);
      uint64_t sent_transport_byte_count = nw_data_transfer_report_get_sent_transport_byte_count(a1, v4);
      uint64_t sent_transport_retransmitted_byte_count = nw_data_transfer_report_get_sent_transport_retransmitted_byte_count( a1,  v4);
      transport_smoothed_rtt_uint64_t milliseconds = nw_data_transfer_report_get_transport_smoothed_rtt_milliseconds(a1, v4);
      transport_minimum_rtt_uint64_t milliseconds = nw_data_transfer_report_get_transport_minimum_rtt_milliseconds(a1, v4);
      uint64_t transport_rtt_variance = nw_data_transfer_report_get_transport_rtt_variance(a1, v4);
      uint64_t received_application_byte_count = nw_data_transfer_report_get_received_application_byte_count(a1, v4);
      uint64_t sent_application_byte_count = nw_data_transfer_report_get_sent_application_byte_count(a1, v4);
      swift_unknownObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = sub_181BC578C(0LL, v5[2] + 1LL, 1, v5);
      }
      unint64_t v13 = v5[2];
      unint64_t v12 = v5[3];
      uint64_t v14 = v5;
      if (v13 >= v12 >> 1) {
        uint64_t v14 = sub_181BC578C((void *)(v12 > 1), v13 + 1, 1, v5);
      }
      void v14[2] = v13 + 1;
      uint64_t v5 = v14;
      unint64_t v15 = (double *)&v14[13 * v13];
      *((void *)v15 + 4) = v6;
      *((void *)v15 + 5) = received_ip_packet_count;
      *((void *)v15 + 6) = sent_ip_packet_count;
      *((void *)v15 + 7) = received_transport_byte_count;
      *((void *)v15 + 8) = received_transport_duplicate_byte_count;
      *((void *)v15 + 9) = received_transport_out_of_order_byte_count;
      *((void *)v15 + 10) = sent_transport_byte_count;
      *((void *)v15 + 11) = sent_transport_retransmitted_byte_count;
      v15[12] = (double)transport_smoothed_rtt_milliseconds / 1000.0;
      v15[13] = (double)transport_minimum_rtt_milliseconds / 1000.0;
      v15[14] = (double)transport_rtt_variance / 1000.0;
      ++v4;
      *((void *)v15 + 15) = received_application_byte_count;
      *((void *)v15 + 16) = sent_application_byte_count;
      swift_unknownObjectRelease();
    }

    while (path_count != v4);
    nw_interface_t v39 = nw_data_transfer_report_copy_path_interface(a1, 0xFFFFFFFF);
    uint64_t v37 = nw_data_transfer_report_get_received_ip_packet_count(a1, 0xFFFFFFFF);
    uint64_t v16 = nw_data_transfer_report_get_sent_ip_packet_count(a1, 0xFFFFFFFF);
    uint64_t v17 = nw_data_transfer_report_get_received_transport_byte_count(a1, 0xFFFFFFFF);
    uint64_t v18 = nw_data_transfer_report_get_received_transport_duplicate_byte_count(a1, 0xFFFFFFFF);
    uint64_t v19 = nw_data_transfer_report_get_received_transport_out_of_order_byte_count(a1, 0xFFFFFFFF);
    uint64_t v20 = nw_data_transfer_report_get_sent_transport_byte_count(a1, 0xFFFFFFFF);
    uint64_t v21 = nw_data_transfer_report_get_sent_transport_retransmitted_byte_count(a1, 0xFFFFFFFF);
    double v22 = (double)nw_data_transfer_report_get_transport_smoothed_rtt_milliseconds(a1, 0xFFFFFFFF) / 1000.0;
    double v23 = (double)nw_data_transfer_report_get_transport_minimum_rtt_milliseconds(a1, 0xFFFFFFFF) / 1000.0;
    double v24 = (double)nw_data_transfer_report_get_transport_rtt_variance(a1, 0xFFFFFFFF) / 1000.0;
    uint64_t v25 = nw_data_transfer_report_get_received_application_byte_count(a1, 0xFFFFFFFF);
    uint64_t v26 = nw_data_transfer_report_get_sent_application_byte_count(a1, 0xFFFFFFFF);
  }

  else
  {
    uint64_t v37 = 0LL;
    nw_interface_t v39 = 0LL;
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v20 = 0LL;
    uint64_t v21 = 0LL;
    uint64_t v25 = 0LL;
    uint64_t v26 = 0LL;
    double v22 = 0.0;
    double v23 = 0.0;
    double v24 = 0.0;
    uint64_t v5 = (void *)MEMORY[0x18961AFE8];
  }

  swift_unknownObjectRelease();
  *(void *)a2 = a1;
  double result = (double)duration_milliseconds / 1000.0;
  *(double *)(a2 + 8) = result;
  *(void *)(a2 + 16) = v39;
  *(void *)(a2 + 24) = v37;
  *(void *)(a2 + 32) = v16;
  *(void *)(a2 + 40) = v17;
  *(void *)(a2 + 48) = v18;
  *(void *)(a2 + 56) = v19;
  *(void *)(a2 + 64) = v20;
  *(void *)(a2 + 72) = v21;
  *(double *)(a2 + 80) = v22;
  *(double *)(a2 + 88) = v23;
  *(double *)(a2 + 96) = v24;
  *(void *)(a2 + 104) = v25;
  *(void *)(a2 + 112) = v26;
  *(void *)(a2 + 120) = v5;
  return result;
}

void sub_181C6B7FC(dispatch_queue_s *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(nw_data_transfer_report **)(v3 + 16);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  v10[4] = sub_181C6C3E0;
  v10[5] = v8;
  v10[0] = MEMORY[0x1895F87A8];
  v10[1] = 1107296256LL;
  v10[2] = sub_181BFB944;
  v10[3] = &block_descriptor_123;
  id v9 = _Block_copy(v10);
  swift_retain();
  swift_release();
  nw_data_transfer_report_collect(v7, a1, v9);
  _Block_release(v9);
}

uint64_t sub_181C6B8C4(uint64_t a1, void (*a2)(_OWORD *))
{
  uint64_t v3 = (nw_data_transfer_report *)swift_unknownObjectRetain();
  sub_181C6B43C(v3, (uint64_t)v6);
  void v5[4] = v6[4];
  v5[5] = v6[5];
  v5[6] = v6[6];
  v5[7] = v6[7];
  v5[0] = v6[0];
  v5[1] = v6[1];
  _OWORD v5[2] = v6[2];
  _OWORD v5[3] = v6[3];
  a2(v5);
  return sub_181C6F1EC((uint64_t)v6);
}

uint64_t NWConnection.PendingDataTransferReport.deinit()
{
  return v0;
}

uint64_t NWConnection.PendingDataTransferReport.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t NWConnection.startDataTransferReport()()
{
  nw_data_transfer_report_t new_data_transfer_report = nw_connection_create_new_data_transfer_report(*(nw_connection_t *)(v0 + 16));
  type metadata accessor for NWConnection.PendingDataTransferReport();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = new_data_transfer_report;
  return result;
}

uint64_t NWConnection.deinit()
{
  return v0;
}

uint64_t NWConnection.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t _s7Network12NWConnectionC5StateO2eeoiySbAE_AEtFZ_0(unsigned int *a1, unsigned int *a2)
{
  unsigned int v2 = *((unsigned __int8 *)a1 + 4);
  unint64_t v3 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
  unint64_t v4 = *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32);
  unsigned int v5 = v2 >> 6;
  if (v5)
  {
    if (v5 != 1) {
      __asm { BR              X10 }
    }

    if (((v4 >> 38) & 3) != 1) {
      return 0LL;
    }
    uint64_t v6 = HIDWORD(v3) & 0x3F;
    uint64_t v7 = HIDWORD(v4) & 0x3F;
    if ((_DWORD)v6)
    {
      if ((_DWORD)v6 == 1) {
        return (_DWORD)v7 == 1 && (_DWORD)v3 == *a2;
      }
      return (_DWORD)v7 == 2 && (_DWORD)v3 == *a2;
    }

    goto LABEL_20;
  }

  if (((v4 >> 38) & 3) != 0) {
    return 0LL;
  }
  LODWORD(v7) = BYTE4(v4);
  if (!HIDWORD(v3))
  {
LABEL_20:
    if (!(_DWORD)v7)
    {
      int v10 = sub_18264E958();
    }

    return 0LL;
  }

  if (HIDWORD(v3) != 1) {
    return (_DWORD)v7 == 2 && (_DWORD)v3 == *a2;
  }
  return (_DWORD)v7 == 1 && (_DWORD)v3 == *a2;
}

void sub_181C6BB70(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E318);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 96) = 0;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(void *)(v6 + 80) = 0LL;
  *(_DWORD *)(v6 + 88) = 0;
  *(_WORD *)(v6 + 92) = 128;
  *(void *)(v2 + 24) = v6;
  sub_181BC9248( a1,  v2 + OBJC_IVAR____TtC7Network13_NWConnection_endpoint,  (uint64_t (*)(void))type metadata accessor for NWEndpoint);
  *(void *)(v2 + OBJC_IVAR____TtC7Network13_NWConnection_parameters) = a2;
  swift_retain();
  NWEndpoint.nw.getter();
  if (v7)
  {
    uint64_t v8 = v7;
    id v9 = *(os_unfair_lock_s **)(a2 + 16);
    int v10 = v9 + 4;
    uint64_t v11 = v9 + 6;
    os_unfair_lock_lock(v9 + 6);
    sub_181C96C68(v10, &parameters);
    os_unfair_lock_unlock(v11);
    nw_connection_t v12 = nw_connection_create(v8, parameters);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_181BC920C(a1, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    *(void *)(v3 + 16) = v12;
  }

  else
  {
    __break(1u);
    os_unfair_lock_unlock(0LL);
    __break(1u);
  }

uint64_t sub_181C6BCA4()
{
  if (*(void *)(v0 + 24)) {
    swift_release();
  }
  return swift_deallocObject();
}

void sub_181C6BCD8(uint64_t a1, nw_error *a2)
{
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

uint64_t sub_181C6BD00(void *a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_181C69888( a1,  a2,  a3,  a4,  *(void (**)(uint64_t, unint64_t, void *, void, _BYTE *))(v4 + 16));
}

uint64_t sub_181C6BD18(uint64_t a1)
{
  return sub_181C682B4(a1, *(void (**)(char *))(v1 + 16));
}

uint64_t sub_181C6BD24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = swift_allocObject();
  *(_DWORD *)(v7 + 96) = 0;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(void *)(v7 + 80) = 0LL;
  *(_DWORD *)(v7 + 88) = 0;
  *(_WORD *)(v7 + 92) = 128;
  *(void *)(v3 + 24) = v7;
  sub_181BC9248( a1,  v3 + OBJC_IVAR____TtC7Network13_NWConnection_endpoint,  (uint64_t (*)(void))type metadata accessor for NWEndpoint);
  *(void *)(v3 + OBJC_IVAR____TtC7Network13_NWConnection_parameters) = a2;
  *(void *)(v3 + 16) = a3;
  swift_retain();
  swift_unknownObjectRetain();
  sub_181BC904C(0LL);
  NWConnection.stateUpdateHandler.setter(0LL, 0LL);
  sub_181BC920C(a1, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
  return v3;
}

uint64_t sub_181C6BDFC(uint64_t a1, nw_connection *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for NWEndpoint();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](v7);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v9);
  unint64_t v13 = (char *)&v17 - v12;
  uint64_t v14 = nw_connection_copy_endpoint(a2);
  sub_181BDA308(v14, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) == 1)
  {
    swift_release();
    swift_unknownObjectRelease();
    sub_181BDA0F0((uint64_t)v6, &qword_18C45E580);
    return 0LL;
  }

  else
  {
    sub_181BC928C((uint64_t)v6, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    sub_181BC9248((uint64_t)v13, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    type metadata accessor for NWConnection(0LL);
    swift_allocObject();
    uint64_t v15 = sub_181C6BD24((uint64_t)v11, a1, (uint64_t)a2);
    swift_release();
    swift_unknownObjectRelease();
    sub_181BC920C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
  }

  return v15;
}

uint64_t _s7Network12NWConnectionCyACSgSo16OS_nw_connection_pcfC_0(nw_connection *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
  MEMORY[0x1895F8858](v2);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for NWEndpoint();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](v5);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = MEMORY[0x1895F8858](v7);
  uint64_t v12 = (char *)&v21 - v11;
  MEMORY[0x1895F8858](v10);
  uint64_t v14 = (char *)&v21 - v13;
  uint64_t v15 = nw_connection_copy_endpoint(a1);
  sub_181BDA308(v15, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5))
  {
    sub_181BDA0F0((uint64_t)v4, &qword_18C45E580);
    swift_unknownObjectRelease();
    return 0LL;
  }

  else
  {
    sub_181BC928C((uint64_t)v4, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    sub_181BC928C((uint64_t)v12, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    nw_parameters_t v17 = nw_connection_copy_parameters(a1);
    type metadata accessor for NWParameters();
    uint64_t v18 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A220);
    uint64_t v19 = swift_allocObject();
    *(_DWORD *)(v19 + 24) = 0;
    *(void *)(v19 + 16) = v17;
    *(void *)(v18 + 16) = v19;
    sub_181BC9248((uint64_t)v14, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    type metadata accessor for NWConnection(0LL);
    swift_allocObject();
    uint64_t v16 = sub_181C6BD24((uint64_t)v9, v18, (uint64_t)a1);
    swift_release();
    swift_unknownObjectRelease();
    sub_181BC920C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
  }

  return v16;
}

uint64_t sub_181C6C184()
{
  return swift_deallocObject();
}

void *sub_181C6C1A8(nw_content_context *a1)
{
  uint64_t v2 = (void *)swift_allocObject();
  uint64_t v3 = v2;
  if (a1)
  {
    _OWORD v2[2] = a1;
    v2[6] = 0LL;
    v2[7] = 0LL;
    v2[5] = 0LL;
    uint64_t v4 = (nw_content_context *)swift_unknownObjectRetain();
    *((_BYTE *)v3 + 64) = nw_content_context_get_is_final(v4);
    nw_content_context_get_identifier(a1);
    uint64_t v5 = sub_18264EB80();
    uint64_t v7 = v6;
    swift_unknownObjectRelease();
    v3[3] = v5;
    void v3[4] = v7;
  }

  else
  {
    swift_deallocPartialClassInstance();
    return 0LL;
  }

  return v3;
}

uint64_t sub_181C6C244(nw_content_context *a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v3 = (nw_content_context *)swift_unknownObjectRetain();
  *(void *)(v1 + 40) = nw_content_context_get_expiration_milliseconds(v3);
  *(double *)(v1 + 48) = nw_content_context_get_relative_priority(a1);
  *(_BYTE *)(v1 + 64) = nw_content_context_get_is_final(a1);
  nw_content_context_get_identifier(a1);
  *(void *)(v1 + 24) = sub_18264EB80();
  *(void *)(v1 + 32) = v4;
  uint64_t v5 = nw_content_context_copy_antecedent(a1);
  *(void *)(v1 + 56) = sub_181C6C1A8(v5);
  return v1;
}

uint64_t sub_181C6C2AC(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_181C69A24(a1, a2, a3, a4, *(void (**)(char *, void *, void, _BYTE *))(v4 + 16));
}

uint64_t sub_181C6C2C4(uint64_t a1, nw_content_context *a2, uint64_t a3, uint64_t a4)
{
  return sub_181C69C64(a1, a2, a3, a4, *(uint64_t (**)(uint64_t, void *, uint64_t, _BYTE *))(v4 + 16));
}

uint64_t sub_181C6C2CC()
{
  return swift_deallocObject();
}

uint64_t sub_181C6C2F0(uint64_t a1, uint64_t a2, nw_error *a3)
{
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(v3 + 16);
  swift_unknownObjectRetain();
  sub_181BF9C34(a3, (uint64_t)v9);
  return v7(a1, a2, v9) & 1;
}

uint64_t sub_181C6C358()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for NWConnection.EstablishmentReport(uint64_t a1)
{
  return sub_181BD62C8(a1, qword_18C58E0E0);
}

uint64_t sub_181C6C37C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for NWConnection.EstablishmentReport.Resolution(uint64_t a1)
{
  return sub_181BD62C8(a1, qword_18C58E1F8);
}

uint64_t sub_181C6C3D8(uint64_t a1)
{
  return sub_181C6B248(a1, *(void (**)(char *))(v1 + 16));
}

uint64_t sub_181C6C3E0(uint64_t a1)
{
  return sub_181C6B8C4(a1, *(void (**)(_OWORD *))(v1 + 16));
}

uint64_t type metadata accessor for NWConnection.PendingDataTransferReport()
{
  return objc_opt_self();
}

unint64_t sub_181C6C40C()
{
  unint64_t result = qword_18C58E078;
  if (!qword_18C58E078)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWConnection.EstablishmentReport.Resolution.Source,  &type metadata for NWConnection.EstablishmentReport.Resolution.Source);
    atomic_store(result, (unint64_t *)&qword_18C58E078);
  }

  return result;
}

unint64_t sub_181C6C454()
{
  unint64_t result = qword_18C58E080;
  if (!qword_18C58E080)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWConnection.EstablishmentReport.Resolution.DNSProtocol,  &type metadata for NWConnection.EstablishmentReport.Resolution.DNSProtocol);
    atomic_store(result, (unint64_t *)&qword_18C58E080);
  }

  return result;
}

double sub_181C6C498@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_181C68910(a1, (void (*)(__int128 *__return_ptr, os_unfair_lock_s *))sub_181C67E78, a2);
}

double sub_181C6C4B8@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_181C68910(a1, (void (*)(__int128 *__return_ptr, os_unfair_lock_s *))sub_181C6834C, a2);
}

double sub_181C6C4D8@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_181C68910(a1, (void (*)(__int128 *__return_ptr, os_unfair_lock_s *))sub_181C6873C, a2);
}

double sub_181C6C4F8@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_181C68910(a1, (void (*)(__int128 *__return_ptr, os_unfair_lock_s *))sub_181C68B64, a2);
}

uint64_t sub_181C6C518()
{
  return type metadata accessor for NWConnection(0LL);
}

uint64_t type metadata accessor for NWConnection(uint64_t a1)
{
  return sub_181BD62C8(a1, (uint64_t *)&unk_18C58A3F0);
}

uint64_t sub_181C6C534()
{
  uint64_t result = type metadata accessor for NWEndpoint();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t method lookup function for NWConnection()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWConnection.__allocating_init(to:using:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

ValueMetadata *type metadata accessor for NWConnection.State()
{
  return &type metadata for NWConnection.State;
}

uint64_t type metadata accessor for NWConnection.ContentContext()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWConnection.ContentContext()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWConnection.ContentContext.nw.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128LL))();
}

uint64_t dispatch thunk of NWConnection.ContentContext.protocolMetadata.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136LL))();
}

uint64_t dispatch thunk of NWConnection.ContentContext.protocolMetadata(definition:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144LL))();
}

uint64_t dispatch thunk of NWConnection.ContentContext.__allocating_init(identifier:expiration:priority:isFinal:antecedent:metadata:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of NWConnection.ContentContext.__allocating_init(nw:)()
{
  return (*(uint64_t (**)(void))(v0 + 168))();
}

void *destroy for NWConnection.SendCompletion(void *result)
{
  if (*result >= 0xFFFFFFFFuLL) {
    return (void *)swift_release();
  }
  return result;
}

uint64_t _s7Network12NWConnectionC14SendCompletionOwCP_0(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  else
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_retain();
  }

  return a1;
}

unint64_t *assignWithCopy for NWConnection.SendCompletion(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      unint64_t v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      swift_retain();
      return a1;
    }

unint64_t *assignWithTake for NWConnection.SendCompletion(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      unint64_t v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      return a1;
    }

ValueMetadata *type metadata accessor for NWConnection.SendCompletion()
{
  return &type metadata for NWConnection.SendCompletion;
}

uint64_t initializeBufferWithCopyOfBuffer for NWConnection.EstablishmentReport( uint64_t a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = v4 + ((v3 + 16LL) & ~(unint64_t)v3);
    swift_retain();
  }

  else
  {
    uint64_t v7 = a1;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    *(void *)(a1 + 24) = a2[3];
    *(_WORD *)(a1 + 32) = *((_WORD *)a2 + 16);
    uint64_t v8 = a3[10];
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for NWEndpoint();
    uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL);
    swift_unknownObjectRetain();
    if (!v12(v10, 1LL, v11))
    {
      uint64_t v14 = (char *)&loc_181C6C8C0 + 4 * byte_1826621C9[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }

    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
    uint64_t v15 = a3[12];
    *(void *)(v7 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    *(void *)(v7 + v15) = *(uint64_t *)((char *)a2 + v15);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  return v7;
}

uint64_t destroy for NWConnection.EstablishmentReport(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for NWEndpoint();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v4, 1LL, v5))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        sub_181BC6974(*(void *)v4, *(void *)(v4 + 8), *(void *)(v4 + 16), *(_BYTE *)(v4 + 24));
        break;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)(v4 + 48) != 1LL) {
          goto LABEL_9;
        }
        break;
      case 2u:
        swift_bridgeObjectRelease();
        break;
      case 3u:
        uint64_t v7 = sub_18264E568();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v4, v7);
        break;
      case 4u:
LABEL_9:
        swift_unknownObjectRelease();
        break;
      default:
        break;
    }
  }

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NWConnection.EstablishmentReport(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v6 = a3[10];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for NWEndpoint();
  uint64_t v10 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL);
  swift_unknownObjectRetain();
  if (!v10(v8, 1LL, v9))
  {
    uint64_t v12 = (char *)&loc_181C6CBE4 + 4 * byte_1826621D3[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }

  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
  memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64LL));
  uint64_t v13 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(void *)(a1 + v13) = *(void *)(a2 + v13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NWConnection.EstablishmentReport(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  uint64_t v6 = a3[10];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for NWEndpoint();
  uint64_t v10 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL);
  int v11 = v10(v7, 1LL, v9);
  int v12 = v10(v8, 1LL, v9);
  if (v11)
  {
    if (!v12)
    {
      uint64_t v13 = (char *)&loc_181C6CDFC + 4 * byte_1826621D8[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }

    goto LABEL_6;
  }

  if (v12)
  {
    sub_181BC920C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64LL));
    goto LABEL_9;
  }

  if (a1 != a2)
  {
    sub_181BC920C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    uint64_t v15 = (char *)&loc_181C6CEB4 + 4 * byte_1826621DD[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }

void sub_181C6D028()
{
  *uint64_t v0 = *v1;
  v0[1] = v1[1];
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x181C6CFCCLL);
}

void sub_181C6D050()
{
  uint64_t v2 = sub_18264E568();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL))(v0, v1, v2);
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x181C6CFCCLL);
}

void sub_181C6D084()
{
  *uint64_t v0 = *v1;
  swift_unknownObjectRetain();
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x181C6CFCCLL);
}

void sub_181C6D0A4()
{
  *uint64_t v0 = *v1;
  v0[1] = v1[1];
  v0[2] = v1[2];
  v0[3] = v1[3];
  v0[4] = v1[4];
  v0[5] = v1[5];
  uint64_t v2 = v1[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v2 != 1) {
    swift_unknownObjectRetain();
  }
  v0[6] = v2;
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x181C6CFCCLL);
}

uint64_t initializeWithTake for NWConnection.EstablishmentReport(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v7 = a3[10];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for NWEndpoint();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v13 = sub_18264E568();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v13 - 8) + 32LL))(v8, v9, v13);
      swift_storeEnumTagMultiPayload();
    }

    else
    {
      memcpy(v8, v9, *(void *)(v11 + 64));
    }

    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
  }

  uint64_t v14 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(void *)(a1 + v14) = *(void *)(a2 + v14);
  return a1;
}

uint64_t assignWithTake for NWConnection.EstablishmentReport(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  uint64_t v6 = a3[10];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for NWEndpoint();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1LL, v9);
  int v13 = v11(v8, 1LL, v9);
  if (!v12)
  {
    if (!v13)
    {
      if (a1 == a2) {
        goto LABEL_14;
      }
      sub_181BC920C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v16 = sub_18264E568();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 32LL))(v7, v8, v16);
        swift_storeEnumTagMultiPayload();
        goto LABEL_14;
      }

      size_t v15 = *(void *)(v10 + 64);
      goto LABEL_8;
    }

    sub_181BC920C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
LABEL_7:
    size_t v15 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580) - 8) + 64LL);
LABEL_8:
    memcpy(v7, v8, v15);
    goto LABEL_14;
  }

  if (v13) {
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v14 = sub_18264E568();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 32LL))(v7, v8, v14);
    swift_storeEnumTagMultiPayload();
  }

  else
  {
    memcpy(v7, v8, *(void *)(v10 + 64));
  }

  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
LABEL_14:
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NWConnection.EstablishmentReport()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C6D448(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 40)],  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for NWConnection.EstablishmentReport()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_181C6D4D4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 40)],  a2,  a2,  v7);
  }

  return result;
}

void sub_181C6D54C()
{
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t initializeBufferWithCopyOfBuffer for NWConnection.EstablishmentReport.Resolution( uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) == 0)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    type metadata accessor for NWEndpoint();
    uint64_t v5 = (char *)&loc_181C6D678 + 4 * byte_1826621E2[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }

  uint64_t v6 = *a2;
  *(void *)a1 = *a2;
  uint64_t v7 = v6 + ((v4 + 16LL) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t destroy for NWConnection.EstablishmentReport.Resolution(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  type metadata accessor for NWEndpoint();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      sub_181BC6974(*(void *)v4, *(void *)(v4 + 8), *(void *)(v4 + 16), *(_BYTE *)(v4 + 24));
      break;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(void *)(v4 + 48) != 1LL) {
        goto LABEL_7;
      }
      break;
    case 2u:
      swift_bridgeObjectRelease();
      break;
    case 3u:
      uint64_t v5 = sub_18264E568();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
      break;
    case 4u:
LABEL_7:
      swift_unknownObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v6 = a1 + *(int *)(a2 + 32);
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      uint64_t result = sub_181BC6974(*(void *)v6, *(void *)(v6 + 8), *(void *)(v6 + 16), *(_BYTE *)(v6 + 24));
      break;
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = *(void *)(v6 + 48);
      if (result != 1) {
        goto LABEL_14;
      }
      break;
    case 2:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 3:
      uint64_t v8 = sub_18264E568();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v6, v8);
      break;
    case 4:
LABEL_14:
      uint64_t result = swift_unknownObjectRelease();
      break;
    default:
      return result;
  }

  return result;
}

void initializeWithCopy for NWConnection.EstablishmentReport.Resolution(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  type metadata accessor for NWEndpoint();
  uint64_t v2 = (char *)sub_181C6DACC + 4 * byte_1826621F6[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

uint64_t sub_181C6DACC()
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  char v5 = *(_BYTE *)(v1 + 24);
  sub_181BC683C(*(void *)v1, v3, v4, v5);
  *(void *)uint64_t v0 = v2;
  *(void *)(v0 + 8) = v3;
  *(void *)(v0 + 16) = v4;
  *(_BYTE *)(v0 + 24) = v5;
  *(_WORD *)(v0 + 26) = *(_WORD *)(v1 + 26);
  swift_storeEnumTagMultiPayload();
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)sub_181C6DBDC
                                                   + 4 * byte_1826621FB[EnumCaseMultiPayload]))( EnumCaseMultiPayload,  v7);
}

uint64_t sub_181C6DBDC()
{
  uint64_t v5 = *(void *)v3;
  uint64_t v6 = *(void *)(v3 + 8);
  uint64_t v10 = v4;
  uint64_t v7 = *(void *)(v3 + 16);
  char v8 = *(_BYTE *)(v3 + 24);
  sub_181BC683C(*(void *)v3, v6, v7, v8);
  *(void *)uint64_t v2 = v5;
  *(void *)(v2 + 8) = v6;
  *(void *)(v2 + 16) = v7;
  *(_BYTE *)(v2 + 24) = v8;
  *(_WORD *)(v2 + 26) = *(_WORD *)(v3 + 26);
  swift_storeEnumTagMultiPayload();
  *(_DWORD *)(v0 + *(int *)(v10 + 36)) = *(_DWORD *)(v1 + *(int *)(v10 + 36));
  return v0;
}

uint64_t assignWithCopy for NWConnection.EstablishmentReport.Resolution( uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)uint64_t result = *(_BYTE *)a2;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(void *)(result + 16) = *(void *)(a2 + 16);
  if (result != a2)
  {
    sub_181BC920C(result + *(int *)(a3 + 28), (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    type metadata accessor for NWEndpoint();
    uint64_t v3 = (char *)&loc_181C6DD84 + 4 * byte_182662200[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }

  *(_DWORD *)(result + *(int *)(a3 + 36)) = *(_DWORD *)(a2 + *(int *)(a3 + 36));
  return result;
}

uint64_t initializeWithTake for NWConnection.EstablishmentReport.Resolution(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = a3[7];
  uint64_t v7 = (void *)(a1 + v6);
  char v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for NWEndpoint();
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v10 = sub_18264E568();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }

  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64LL));
  }

  uint64_t v11 = a3[8];
  int v12 = (void *)(a1 + v11);
  int v13 = (const void *)(a2 + v11);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v14 = sub_18264E568();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 32LL))(v12, v13, v14);
    swift_storeEnumTagMultiPayload();
  }

  else
  {
    memcpy(v12, v13, *(void *)(*(void *)(v9 - 8) + 64LL));
  }

  *(_DWORD *)(a1 + a3[9]) = *(_DWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for NWConnection.EstablishmentReport.Resolution(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  if (a1 != a2)
  {
    uint64_t v6 = a3[7];
    uint64_t v7 = (void *)(a1 + v6);
    char v8 = (const void *)(a2 + v6);
    sub_181BC920C(a1 + v6, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    uint64_t v9 = type metadata accessor for NWEndpoint();
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v10 = sub_18264E568();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v7, v8, v10);
      swift_storeEnumTagMultiPayload();
    }

    else
    {
      memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64LL));
    }

    uint64_t v11 = a3[8];
    int v12 = (void *)(a1 + v11);
    int v13 = (const void *)(a2 + v11);
    sub_181BC920C(a1 + v11, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v14 = sub_18264E568();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 32LL))(v12, v13, v14);
      swift_storeEnumTagMultiPayload();
    }

    else
    {
      memcpy(v12, v13, *(void *)(*(void *)(v9 - 8) + 64LL));
    }
  }

  *(_DWORD *)(a1 + a3[9]) = *(_DWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWConnection.EstablishmentReport.Resolution()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C6E280(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 253)
  {
    unsigned int v4 = *a1;
    if (v4 >= 3) {
      return v4 - 2;
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v8 = type metadata accessor for NWEndpoint();
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 28)],  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for NWConnection.EstablishmentReport.Resolution()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_BYTE *sub_181C6E300(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 253)
  {
    *uint64_t result = a2 + 2;
  }

  else
  {
    uint64_t v7 = type metadata accessor for NWEndpoint();
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 28)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_181C6E370()
{
  uint64_t result = type metadata accessor for NWEndpoint();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for NWConnection.EstablishmentReport.Resolution.Source( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_181C6E450 + 4 * byte_18266220F[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_181C6E484 + 4 * byte_18266220A[v4]))();
}

uint64_t sub_181C6E484(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C6E48C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181C6E494LL);
  }
  return result;
}

uint64_t sub_181C6E4A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181C6E4A8LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_181C6E4AC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C6E4B4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWConnection.EstablishmentReport.Resolution.Source()
{
  return &type metadata for NWConnection.EstablishmentReport.Resolution.Source;
}

uint64_t storeEnumTagSinglePayload for NWConnection.EstablishmentReport.Resolution.DNSProtocol( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_181C6E51C + 4 * byte_182662219[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_181C6E550 + 4 * byte_182662214[v4]))();
}

uint64_t sub_181C6E550(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C6E558(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181C6E560LL);
  }
  return result;
}

uint64_t sub_181C6E56C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181C6E574LL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_181C6E578(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C6E580(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWConnection.EstablishmentReport.Resolution.DNSProtocol()
{
  return &type metadata for NWConnection.EstablishmentReport.Resolution.DNSProtocol;
}

uint64_t initializeBufferWithCopyOfBuffer for NWConnection.EstablishmentReport.Handshake( uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t destroy for NWConnection.EstablishmentReport.Handshake()
{
  return swift_release();
}

void *assignWithCopy for NWConnection.EstablishmentReport.Handshake(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for NWConnection.EstablishmentReport.Handshake(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWConnection.EstablishmentReport.Handshake(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NWConnection.EstablishmentReport.Handshake( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NWConnection.EstablishmentReport.Handshake()
{
  return &type metadata for NWConnection.EstablishmentReport.Handshake;
}

uint64_t destroy for NWConnection.DataTransferReport()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NWConnection.DataTransferReport(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for NWConnection.DataTransferReport(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  a1[12] = a2[12];
  a1[13] = a2[13];
  a1[14] = a2[14];
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy128_8(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  __int128 v6 = a2[5];
  __int128 v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for NWConnection.DataTransferReport(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NWConnection.DataTransferReport(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 128)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NWConnection.DataTransferReport(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 120) = 0LL;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 128) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 128) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NWConnection.DataTransferReport()
{
  return &type metadata for NWConnection.DataTransferReport;
}

uint64_t initializeWithCopy for NWConnection.DataTransferReport.PathReport(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for NWConnection.DataTransferReport.PathReport(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  a1[12] = a2[12];
  return a1;
}

uint64_t assignWithTake for NWConnection.DataTransferReport.PathReport(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWConnection.DataTransferReport.PathReport(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 104)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NWConnection.DataTransferReport.PathReport( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 104) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 104) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NWConnection.DataTransferReport.PathReport()
{
  return &type metadata for NWConnection.DataTransferReport.PathReport;
}

uint64_t method lookup function for NWConnection.PendingDataTransferReport()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWConnection.PendingDataTransferReport.collect(queue:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96LL))();
}

void destroy for NWConnection.LockedState(uint64_t a1)
{
  if (*(void *)a1) {
    swift_release();
  }
  if (*(void *)(a1 + 16)) {
    swift_release();
  }
  if (*(void *)(a1 + 32)) {
    swift_release();
  }
  if (*(void *)(a1 + 48)) {
    swift_release();
  }
}

uint64_t initializeWithCopy for NWConnection.LockedState(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    swift_retain();
  }

  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = v5;
    *(void *)(a1 + 24) = v6;
    swift_retain();
  }

  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }

  uint64_t v7 = *(void *)(a2 + 32);
  if (v7)
  {
    uint64_t v8 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = v7;
    *(void *)(a1 + 40) = v8;
    swift_retain();
  }

  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }

  uint64_t v9 = *(void *)(a2 + 48);
  if (v9)
  {
    uint64_t v10 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v9;
    *(void *)(a1 + 56) = v10;
    swift_retain();
  }

  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }

  uint64_t v11 = *(void **)(a2 + 64);
  *(void *)(a1 + 64) = v11;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_WORD *)(a1 + 76) = *(_WORD *)(a2 + 76);
  id v12 = v11;
  return a1;
}

uint64_t assignWithCopy for NWConnection.LockedState(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (*(void *)a1)
  {
    if (v4)
    {
      uint64_t v5 = a2[1];
      *(void *)a1 = v4;
      *(void *)(a1 + 8) = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }

    swift_release();
  }

  else if (v4)
  {
    uint64_t v6 = a2[1];
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v6;
    swift_retain();
    goto LABEL_8;
  }

  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  uint64_t v7 = a2[2];
  if (*(void *)(a1 + 16))
  {
    if (v7)
    {
      uint64_t v8 = a2[3];
      *(void *)(a1 + 16) = v7;
      *(void *)(a1 + 24) = v8;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }

    swift_release();
  }

  else if (v7)
  {
    uint64_t v9 = a2[3];
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v9;
    swift_retain();
    goto LABEL_15;
  }

  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
LABEL_15:
  uint64_t v10 = a2[4];
  if (*(void *)(a1 + 32))
  {
    if (v10)
    {
      uint64_t v11 = a2[5];
      *(void *)(a1 + 32) = v10;
      *(void *)(a1 + 40) = v11;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }

    swift_release();
  }

  else if (v10)
  {
    uint64_t v12 = a2[5];
    *(void *)(a1 + 32) = v10;
    *(void *)(a1 + 40) = v12;
    swift_retain();
    goto LABEL_22;
  }

  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
LABEL_22:
  uint64_t v13 = a2[6];
  if (!*(void *)(a1 + 48))
  {
    if (v13)
    {
      uint64_t v15 = a2[7];
      *(void *)(a1 + 48) = v13;
      *(void *)(a1 + 56) = v15;
      swift_retain();
      goto LABEL_29;
    }

__n128 __swift_memcpy78_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 62) = *(_OWORD *)(a2 + 62);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for NWConnection.LockedState(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (*(void *)a1)
  {
    if (v4)
    {
      uint64_t v5 = a2[1];
      *(void *)a1 = v4;
      *(void *)(a1 + 8) = v5;
      swift_release();
      goto LABEL_8;
    }

    swift_release();
  }

  else if (v4)
  {
    uint64_t v6 = a2[1];
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v6;
    goto LABEL_8;
  }

  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  uint64_t v7 = a2[2];
  if (*(void *)(a1 + 16))
  {
    if (v7)
    {
      uint64_t v8 = a2[3];
      *(void *)(a1 + 16) = v7;
      *(void *)(a1 + 24) = v8;
      swift_release();
      goto LABEL_15;
    }

    swift_release();
  }

  else if (v7)
  {
    uint64_t v9 = a2[3];
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v9;
    goto LABEL_15;
  }

  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
LABEL_15:
  uint64_t v10 = a2[4];
  if (*(void *)(a1 + 32))
  {
    if (v10)
    {
      uint64_t v11 = a2[5];
      *(void *)(a1 + 32) = v10;
      *(void *)(a1 + 40) = v11;
      swift_release();
      goto LABEL_22;
    }

    swift_release();
  }

  else if (v10)
  {
    uint64_t v12 = a2[5];
    *(void *)(a1 + 32) = v10;
    *(void *)(a1 + 40) = v12;
    goto LABEL_22;
  }

  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
LABEL_22:
  uint64_t v13 = a2[6];
  if (!*(void *)(a1 + 48))
  {
    if (v13)
    {
      uint64_t v15 = a2[7];
      *(void *)(a1 + 48) = v13;
      *(void *)(a1 + 56) = v15;
      goto LABEL_29;
    }

uint64_t getEnumTagSinglePayload for NWConnection.LockedState(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 78)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NWConnection.LockedState( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 76) = 0;
    *(_DWORD *)(result + 72) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 78) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 78) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NWConnection.LockedState()
{
  return &type metadata for NWConnection.LockedState;
}

uint64_t sub_181C6F1BC(char a1)
{
  uint64_t v2 = *(uint64_t (**)(char *))(v1 + 16);
  char v4 = a1;
  return v2(&v4);
}

uint64_t sub_181C6F1EC(uint64_t a1)
{
  return a1;
}

uint64_t sub_181C6F234()
{
  return swift_deallocObject();
}

uint64_t sub_181C6F244(nw_resolution_report *a1)
{
  return sub_181C6AC34(a1, *(unint64_t **)(v1 + 16));
}

uint64_t sub_181C6F24C()
{
  return swift_deallocObject();
}

uint64_t sub_181C6F25C()
{
  return swift_deallocObject();
}

uint64_t sub_181C6F26C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181C6AF7C(a1, a2, a3, *(void ***)(v3 + 16));
}

uint64_t sub_181C6F274()
{
  return swift_deallocObject();
}

uint64_t sub_181C6F284(unsigned __int8 *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t HTTPResponse.status.getter@<X0>(void *a1@<X8>)
{
  unint64_t v5 = *(void *)(v1 + 40);
  unint64_t v6 = *(void *)(v1 + 48);
  if ((v6 & 0x2000000000000000LL) != 0) {
    unint64_t v7 = HIBYTE(v6) & 0xF;
  }
  else {
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v7)
  {
    __break(1u);
LABEL_51:
    unsigned __int8 v8 = sub_18264EBC8();
    unint64_t v9 = sub_18264EB98();
    goto LABEL_14;
  }

  uint64_t v2 = *(void *)(v1 + 56);
  uint64_t v3 = *(void *)(v1 + 64);
  if ((v6 & 0x1000000000000000LL) != 0) {
    uint64_t v1 = (v5 >> 59) & 1;
  }
  else {
    uint64_t v1 = 1LL;
  }
  if ((v6 & 0x1000000000000000LL) != 0) {
    goto LABEL_51;
  }
  if ((v6 & 0x2000000000000000LL) != 0)
  {
    unsigned __int8 v8 = v5;
  }

  else
  {
    if ((v5 & 0x1000000000000000LL) == 0) {
      goto LABEL_61;
    }
    unsigned __int8 v8 = *(_BYTE *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
  }

unint64_t sub_181C6F6F8(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000LL) != 0) {
    unint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v5 = 4 * v4;
  uint64_t v6 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000LL) == 0) {
    LOBYTE(v6) = 1;
  }
  uint64_t v7 = 4LL << v6;
  uint64_t v16 = a2 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v14 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  unint64_t v8 = 15LL;
  while (1)
  {
    unint64_t v9 = v8 >> 14;
    if (v8 >> 14 == v5) {
      return v9 == v5;
    }
    unint64_t v10 = v8 & 0xC;
    unint64_t result = v8;
    if (v10 == v7) {
      unint64_t result = sub_181C23710(v8, a1, a2);
    }
    unint64_t v12 = result >> 16;
    if (result >> 16 >= v4) {
      break;
    }
    if ((a2 & 0x1000000000000000LL) != 0)
    {
      unint64_t result = sub_18264EBC8();
      char v13 = result;
      if (v10 != v7) {
        goto LABEL_20;
      }
    }

    else if ((a2 & 0x2000000000000000LL) != 0)
    {
      v15[0] = a1;
      v15[1] = v16;
      char v13 = *((_BYTE *)v15 + v12);
      if (v10 != v7) {
        goto LABEL_20;
      }
    }

    else
    {
      unint64_t result = v14;
      if ((a1 & 0x1000000000000000LL) == 0) {
        unint64_t result = sub_18264F228();
      }
      char v13 = *(_BYTE *)(result + v12);
      if (v10 != v7)
      {
LABEL_20:
        if ((a2 & 0x1000000000000000LL) == 0) {
          goto LABEL_7;
        }
        goto LABEL_21;
      }
    }

    unint64_t result = sub_181C23710(v8, a1, a2);
    unint64_t v8 = result;
    if ((a2 & 0x1000000000000000LL) == 0)
    {
LABEL_7:
      unint64_t v8 = (v8 & 0xFFFFFFFFFFFF0000LL) + 65540;
      goto LABEL_8;
    }

unint64_t sub_181C6F894(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000LL) != 0) {
    unint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 1LL;
  }
  uint64_t v5 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000LL) == 0) {
    LOBYTE(v5) = 1;
  }
  uint64_t v6 = 4LL << v5;
  uint64_t v14 = a2 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v7 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  unint64_t v8 = 15LL;
  while (1)
  {
    unint64_t v9 = v8 & 0xC;
    unint64_t result = v8;
    if (v9 == v6) {
      unint64_t result = sub_181C23710(v8, a1, a2);
    }
    unint64_t v11 = result >> 16;
    if (result >> 16 >= v2) {
      break;
    }
    if ((a2 & 0x1000000000000000LL) != 0)
    {
      unint64_t result = sub_18264EBC8();
      char v12 = result;
      if (v9 == v6) {
        goto LABEL_17;
      }
    }

    else if ((a2 & 0x2000000000000000LL) != 0)
    {
      v13[0] = a1;
      v13[1] = v14;
      char v12 = *((_BYTE *)v13 + v11);
      if (v9 == v6) {
        goto LABEL_17;
      }
    }

    else
    {
      unint64_t result = v7;
      if ((a1 & 0x1000000000000000LL) == 0) {
        unint64_t result = sub_18264F228();
      }
      char v12 = *(_BYTE *)(result + v11);
      if (v9 == v6)
      {
LABEL_17:
        unint64_t result = sub_181C23710(v8, a1, a2);
        unint64_t v8 = result;
        if ((a2 & 0x1000000000000000LL) == 0) {
          goto LABEL_22;
        }
        goto LABEL_18;
      }
    }

    if ((a2 & 0x1000000000000000LL) == 0)
    {
LABEL_22:
      unint64_t v8 = (v8 & 0xFFFFFFFFFFFF0000LL) + 65540;
      goto LABEL_23;
    }

Network::HTTPResponse::Status __swiftcall HTTPResponse.Status.init(code:reasonPhrase:)( Swift::Int code, Swift::String reasonPhrase)
{
  if ((unint64_t)code > 0x3E7)
  {
    __break(1u);
  }

  else
  {
    object = reasonPhrase._object;
    uint64_t countAndFlagsBits = reasonPhrase._countAndFlagsBits;
    Swift::Int v5 = code;
    uint64_t v6 = v2;
    code = sub_181C6F894(reasonPhrase._countAndFlagsBits, (unint64_t)reasonPhrase._object);
    if ((code & 1) == 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D1D0);
      sub_181C2EF74();
      sub_18264EB14();
      code = swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = 0LL;
      object = (void *)0xE000000000000000LL;
    }

    *uint64_t v6 = v5;
    v6[1] = countAndFlagsBits;
    _OWORD v6[2] = (Swift::Int)object;
  }

  result.reasonPhrase = reasonPhrase;
  result.code = code;
  return result;
}

uint64_t HTTPResponse.init(status:headerFields:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *a2;
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_18264EB38();
  uint64_t v9 = v8;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a3 = 0x7375746174733ALL;
  *(void *)(a3 + 8) = 0xE700000000000000LL;
  *(void *)(a3 + 16) = 0x7375746174733ALL;
  *(void *)(a3 + 24) = 0xE700000000000000LL;
  *(_BYTE *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = v7;
  *(void *)(a3 + 48) = v9;
  *(void *)(a3 + 56) = v4;
  *(void *)(a3 + 64) = v5;
  *(void *)(a3 + 72) = v6;
  return result;
}

uint64_t HTTPResponse.Status.code.getter()
{
  return *(void *)v0;
}

uint64_t HTTPResponse.Status.reasonPhrase.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

Network::HTTPResponse::Status __swiftcall HTTPResponse.Status.init(integerLiteral:)(Swift::Int integerLiteral)
{
  if ((unint64_t)integerLiteral > 0x3E7)
  {
    __break(1u);
  }

  else
  {
    Swift::Int *v1 = integerLiteral;
    v1[1] = 0LL;
    v1[2] = 0xE000000000000000LL;
  }

  result.code = integerLiteral;
  return result;
}

BOOL static HTTPResponse.Status.Kind.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t HTTPResponse.Status.Kind.hash(into:)()
{
  return sub_18264F654();
}

uint64_t HTTPResponse.Status.Kind.hashValue.getter()
{
  return sub_18264F684();
}

uint64_t HTTPResponse.Status.kind.getter()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v1 - 400;
  unint64_t v3 = v1 - 500;
  else {
    unsigned int v4 = 0;
  }
  if (v3 > 0xFFFFFFFFFFFFFF9BLL) {
    unsigned int v4 = 4;
  }
  if (v2 <= 0xFFFFFFFFFFFFFF9BLL) {
    return v4;
  }
  else {
    return 3LL;
  }
}

uint64_t HTTPResponse.Status.hash(into:)()
{
  return sub_18264F654();
}

BOOL static HTTPResponse.Status.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t HTTPResponse.Status.description.getter()
{
  uint64_t v1 = sub_18264F480();
  sub_18264EB74();
  swift_bridgeObjectRetain();
  sub_18264EB74();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_181C6FD98(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  if (a3 > -100 && a3 < 25600)
  {
    unsigned int v3 = ((char)a3 / 100) + 48;
    if (((v3 >> 8) & 1) != 0)
    {
      __break(1u);
    }

    else
    {
      *a1 = v3;
      if ((((__int16)a3 / 10 % 10) & 0x8000) == 0)
      {
        unsigned int v4 = ((26215 * (__int16)a3) >> 18) + ((26215 * (__int16)a3) >> 31);
        a1[1] = v4 - 10 * (((int)(26215 * v4) >> 18) + (((26215 * v4) & 0x80000000) != 0)) + 48;
        if ((((__int16)a3 % 10) & 0x8000) == 0)
        {
          a1[2] = (__int16)a3 % 10 + 48;
          return 3LL;
        }
      }
    }
  }

  uint64_t result = sub_18264F318();
  __break(1u);
  return result;
}

int *sub_181C6FED0@<X0>(int *result@<X0>, int *a2@<X8>)
{
  int v2 = *result;
  else {
    int v4 = *result;
  }
  if (v2 == 32) {
    int v4 = 32;
  }
  if (v2 == 9) {
    int v5 = 9;
  }
  else {
    int v5 = v4;
  }
  *a2 = v5;
  return result;
}

uint64_t HTTPResponse.Status.hashValue.getter()
{
  return sub_18264F684();
}

uint64_t sub_181C6FF4C()
{
  return sub_18264F684();
}

uint64_t sub_181C6FF90()
{
  return sub_18264F654();
}

uint64_t sub_181C6FFB8()
{
  return sub_18264F684();
}

void *sub_181C6FFF8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (*result > 0x3E7uLL)
  {
    __break(1u);
  }

  else
  {
    *a2 = *result;
    a2[1] = 0LL;
    a2[2] = 0xE000000000000000LL;
  }

  return result;
}

uint64_t sub_181C70018()
{
  uint64_t v1 = sub_18264F480();
  sub_18264EB74();
  swift_bridgeObjectRetain();
  sub_18264EB74();
  swift_bridgeObjectRelease();
  return v1;
}

double sub_181C7009C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v5;
  double result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 16) = v2;
  return result;
}

uint64_t HTTPResponse.status.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_18264EB38();
  unint64_t v6 = v5;
  swift_bridgeObjectRelease();
  uint64_t v7 = v1[1];
  uint64_t v13 = *v1;
  uint64_t v8 = v1[2];
  uint64_t v9 = v1[3];
  char v12 = *((_BYTE *)v1 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8 == 0x7375746174733ALL && v9 == 0xE700000000000000LL || (uint64_t result = sub_18264F4EC(), (result & 1) != 0))
  {
    uint64_t result = sub_18264EB50();
    if (result == 3)
    {
      char v11 = sub_181C6F6F8(v4, v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v11 & 1) != 0)
      {
        uint64_t *v1 = v13;
        v1[1] = v7;
        v1[2] = v8;
        v1[3] = v9;
        *((_BYTE *)v1 + 32) = v12;
        v1[5] = v4;
        v1[6] = v6;
        uint64_t result = swift_bridgeObjectRelease();
        v1[7] = v2;
        v1[8] = v3;
        return result;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

unint64_t HTTPResponse.PseudoHeaderFields.status.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  char v6 = *((_BYTE *)a1 + 32);
  unint64_t v7 = a1[5];
  unint64_t v8 = a1[6];
  BOOL v9 = v4 == 0x7375746174733ALL && v5 == 0xE700000000000000LL;
  if (v9 || (unint64_t result = sub_18264F4EC(), (result & 1) != 0))
  {
    unint64_t result = sub_18264EB50();
    if (result == 3)
    {
      unint64_t result = sub_181C6F6F8(v7, v8);
      if ((result & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t result = swift_bridgeObjectRelease();
        *(void *)uint64_t v1 = v2;
        *(void *)(v1 + 8) = v3;
        *(void *)(v1 + 16) = v4;
        *(void *)(v1 + 24) = v5;
        *(_BYTE *)(v1 + 32) = v6;
        *(void *)(v1 + 40) = v7;
        *(void *)(v1 + 48) = v8;
        return result;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t (*HTTPResponse.status.modify(void *a1))(void *a1, char a2)
{
  a1[3] = v1;
  HTTPResponse.status.getter(a1);
  return sub_181C703DC;
}

uint64_t sub_181C703DC(void *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  v5[0] = *a1;
  v5[1] = v2;
  _OWORD v5[2] = v3;
  if ((a2 & 1) == 0) {
    return HTTPResponse.status.setter((uint64_t)v5);
  }
  swift_bridgeObjectRetain();
  HTTPResponse.status.setter((uint64_t)v5);
  return swift_bridgeObjectRelease();
}

uint64_t HTTPResponse.PseudoHeaderFields.status.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  char v6 = *((_BYTE *)v1 + 32);
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_181C7048C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  char v5 = *(_BYTE *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = v3;
  *(void *)(a2 + 24) = v4;
  *(_BYTE *)(a2 + 32) = v5;
  *(void *)(a2 + 40) = v6;
  *(void *)(a2 + 48) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

unint64_t sub_181C704D8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  char v4 = *(_BYTE *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  v8[0] = *(void *)a1;
  v8[1] = v1;
  void v8[2] = v2;
  void v8[3] = v3;
  char v9 = v4;
  uint64_t v10 = v5;
  uint64_t v11 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return HTTPResponse.PseudoHeaderFields.status.setter(v8);
}

void (*HTTPResponse.PseudoHeaderFields.status.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[7] = v1;
  uint64_t v5 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  char v8 = *((_BYTE *)v1 + 32);
  uint64_t v9 = v1[5];
  uint64_t v10 = v1[6];
  void *v3 = v5;
  v3[1] = v4;
  v3[2] = v6;
  v3[3] = v7;
  *((_BYTE *)v3 + 32) = v8;
  v3[5] = v9;
  v3[6] = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_181C705C0;
}

void sub_181C705C0(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = **a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v5 = (*a1)[3];
  char v6 = *((_BYTE *)*a1 + 32);
  unint64_t v8 = (*a1)[5];
  unint64_t v7 = (*a1)[6];
  BOOL v10 = (*a1)[2] == 0x7375746174733ALL && v5 == 0xE700000000000000LL;
  uint64_t v17 = (*a1)[2];
  if ((a2 & 1) != 0)
  {
    if (!v10 && (sub_18264F4EC() & 1) == 0) {
      goto LABEL_23;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (sub_18264EB50() == 3)
    {
      if ((sub_181C6F6F8(v8, v7) & 1) != 0)
      {
        uint64_t v11 = v3;
        uint64_t v12 = v4;
        uint64_t v13 = v2[7];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)uint64_t v13 = v12;
        *(void *)(v13 + 8) = v11;
        *(void *)(v13 + 16) = v17;
        *(void *)(v13 + 24) = v5;
        *(_BYTE *)(v13 + 32) = v6;
        *(void *)(v13 + 40) = v8;
        *(void *)(v13 + 48) = v7;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_18:
        free(v2);
        return;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
  }

  else
  {
    if (!v10 && (sub_18264F4EC() & 1) == 0) {
      goto LABEL_24;
    }
    if (sub_18264EB50() == 3)
    {
      if ((sub_181C6F6F8(v8, v7) & 1) != 0)
      {
        uint64_t v14 = v3;
        uint64_t v15 = v4;
        uint64_t v16 = v2[7];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)uint64_t v16 = v15;
        *(void *)(v16 + 8) = v14;
        *(void *)(v16 + 16) = v17;
        *(void *)(v16 + 24) = v5;
        *(_BYTE *)(v16 + 32) = v6;
        *(void *)(v16 + 40) = v8;
        *(void *)(v16 + 48) = v7;
        goto LABEL_18;
      }

      goto LABEL_22;
    }
  }

  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
}

uint64_t HTTPResponse.PseudoHeaderFields.hash(into:)()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t HTTPResponse.PseudoHeaderFields.hashValue.getter()
{
  return sub_18264F684();
}

uint64_t HTTPResponse.pseudoHeaderFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  char v6 = *((_BYTE *)v1 + 32);
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 HTTPResponse.pseudoHeaderFields.setter(__n128 *a1)
{
  __n128 v8 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unint64_t v3 = a1[1].n128_u64[1];
  unsigned __int8 v4 = a1[2].n128_u8[0];
  unint64_t v5 = a1[2].n128_u64[1];
  unint64_t v6 = a1[3].n128_u64[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __n128 result = v8;
  __n128 *v1 = v8;
  v1[1].n128_u64[0] = v2;
  v1[1].n128_u64[1] = v3;
  v1[2].n128_u8[0] = v4;
  v1[2].n128_u64[1] = v5;
  v1[3].n128_u64[0] = v6;
  return result;
}

uint64_t (*HTTPResponse.pseudoHeaderFields.modify())()
{
  return nullsub_1;
}

uint64_t HTTPResponse.headerFields.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 72);
  return swift_retain();
}

uint64_t HTTPResponse.headerFields.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_release();
  *(void *)(v1 + 72) = v2;
  return result;
}

uint64_t (*HTTPResponse.headerFields.modify())()
{
  return nullsub_1;
}

uint64_t HTTPResponse.hash(into:)()
{
  return swift_release();
}

uint64_t HTTPResponse.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 72);
  sub_18264F648();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_18264EB44();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_18264F660();
  swift_bridgeObjectRetain();
  sub_18264EB44();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = v2 + 80;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_18264EB44();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_18264F660();
      swift_bridgeObjectRetain();
      sub_18264EB44();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v4 += 64LL;
      --v3;
    }

    while (v3);
    swift_bridgeObjectRelease();
  }

  return sub_18264F684();
}

uint64_t sub_181C70CD4()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_18264EB44();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_18264F660();
  swift_bridgeObjectRetain();
  sub_18264EB44();
  swift_bridgeObjectRelease();
  uint64_t result = swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = v3 + 80;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_18264EB44();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_18264F660();
      swift_bridgeObjectRetain();
      sub_18264EB44();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v5 += 64LL;
      --v4;
    }

    while (v4);
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_181C70E58()
{
  return sub_18264F684();
}

uint64_t HTTPResponse.debugDescription.getter()
{
  uint64_t v1 = sub_18264F480();
  sub_18264EB74();
  swift_bridgeObjectRetain();
  sub_18264EB74();
  swift_bridgeObjectRelease_n();
  return v1;
}

uint64_t sub_181C70FE4()
{
  uint64_t v1 = sub_18264F480();
  sub_18264EB74();
  swift_bridgeObjectRetain();
  sub_18264EB74();
  swift_bridgeObjectRelease_n();
  return v1;
}

uint64_t HTTPResponse.PseudoHeaderFields.encode(to:)(void *a1)
{
  return __swift_destroy_boxed_opaque_existential_2((uint64_t)v2);
}

uint64_t HTTPResponse.PseudoHeaderFields.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1;
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_18264F6C0();
  if (!v2)
  {
    uint64_t v24 = a2;
    uint64_t v41 = (uint64_t)v3;
    __swift_project_boxed_opaque_existential_2(v39, v40);
    if ((sub_18264F4A4() & 1) != 0)
    {
LABEL_3:
      sub_181BCD38C((uint64_t)v39, (uint64_t)&v32);
      sub_18264F204();
      swift_allocError();
      sub_18264F1E0();
    }

    else
    {
      unint64_t v5 = 0LL;
      unint64_t v6 = 0LL;
      char v7 = 0;
      unint64_t v8 = 0LL;
      uint64_t v9 = 0LL;
      uint64_t v31 = 0LL;
      uint64_t v10 = 0LL;
      while (2)
      {
        uint64_t v25 = v10;
        uint64_t v26 = v9;
        unint64_t v27 = v8;
        char v28 = v7;
        unint64_t v29 = v6;
        unint64_t v30 = v5;
        while (1)
        {
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v39, v40);
          sub_181C25308();
          sub_18264F498();
          uint64_t v12 = v32;
          uint64_t v11 = v33;
          uint64_t v14 = v34;
          unint64_t v13 = v35;
          char v15 = v36;
          unint64_t v17 = v37;
          unint64_t v16 = v38;
          if (v34 == 0x7375746174733ALL && v35 == 0xE700000000000000LL) {
            break;
          }
          if ((sub_18264F4EC() & 1) != 0) {
            goto LABEL_16;
          }
          swift_bridgeObjectRetain();
          char v19 = sub_18264EBE0();
          swift_bridgeObjectRelease();
          if ((v19 & 1) == 0)
          {
            sub_181BCECE0(v25, v31);
            sub_181BCD38C((uint64_t)v39, (uint64_t)&v32);
            sub_18264F168();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            sub_18264EB74();
            if ((sub_181BCE7EC(v17, v16) & 1) != 0)
            {
              swift_bridgeObjectRetain();
            }

            else
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              sub_181C9420C(v17, v16);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }

            sub_18264EB74();
            swift_bridgeObjectRelease();
            sub_18264EB74();
            swift_bridgeObjectRelease();
            sub_18264EB74();
            sub_18264F204();
            swift_allocError();
            sub_18264F1E0();
            swift_bridgeObjectRelease();
            goto LABEL_27;
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __swift_project_boxed_opaque_existential_2(v39, v40);
          if ((sub_18264F4A4() & 1) != 0)
          {
            uint64_t v12 = v25;
            uint64_t v14 = v26;
            unint64_t v16 = v30;
            uint64_t v11 = v31;
            unint64_t v13 = v27;
            char v15 = v28;
            unint64_t v17 = v29;
            goto LABEL_21;
          }
        }

        unint64_t v13 = 0xE700000000000000LL;
LABEL_16:
        sub_181BCECE0(v25, v31);
        if (v31)
        {
          sub_181BCD38C((uint64_t)v39, (uint64_t)&v32);
          sub_18264F204();
          swift_allocError();
          sub_18264F1E0();
LABEL_27:
          __swift_destroy_boxed_opaque_existential_2((uint64_t)&v32);
          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_28;
        }

        __swift_project_boxed_opaque_existential_2(v39, v40);
        char v20 = sub_18264F4A4();
        unint64_t v5 = v38;
        unint64_t v6 = v37;
        char v7 = v36;
        unint64_t v8 = v13;
        uint64_t v9 = v34;
        uint64_t v31 = v33;
        uint64_t v10 = v32;
        if ((v20 & 1) == 0) {
          continue;
        }
        break;
      }

uint64_t sub_181C71788@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return HTTPResponse.PseudoHeaderFields.init(from:)(a1, a2);
}

uint64_t sub_181C7179C(void *a1)
{
  return __swift_destroy_boxed_opaque_existential_2((uint64_t)v2);
}

uint64_t sub_181C71870(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_181CAB27C(*a1, *a2);
}

uint64_t sub_181C7187C()
{
  return sub_18264F684();
}

uint64_t sub_181C71930()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_181C719C0()
{
  return sub_18264F684();
}

uint64_t sub_181C71A70@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_181C73250();
  *a1 = result;
  return result;
}

void sub_181C71A9C(unint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0x800000018272DBB0LL;
  unint64_t v4 = 0xEC00000073646C65LL;
  uint64_t v5 = 0x6946726564616568LL;
  if (v2 != 1)
  {
    uint64_t v5 = 0x68506E6F73616572LL;
    unint64_t v4 = 0xEC00000065736172LL;
  }

  BOOL v6 = v2 == 0;
  if (*v1) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = 0xD000000000000012LL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

unint64_t sub_181C71B10()
{
  uint64_t v1 = 0x6946726564616568LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x68506E6F73616572LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000012LL;
  }
}

uint64_t sub_181C71B80@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_181C73250();
  *a1 = result;
  return result;
}

uint64_t sub_181C71BA4()
{
  return sub_18264F738();
}

uint64_t sub_181C71BCC()
{
  return sub_18264F744();
}

uint64_t HTTPResponse.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E320);
  uint64_t v22 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v21 = *v1;
  uint64_t v7 = *((void *)v1 + 2);
  uint64_t v6 = *((void *)v1 + 3);
  char v8 = *((_BYTE *)v1 + 32);
  uint64_t v9 = *((void *)v1 + 5);
  uint64_t v19 = *((void *)v1 + 6);
  uint64_t v20 = v9;
  uint64_t v10 = *((void *)v1 + 7);
  uint64_t v17 = *((void *)v1 + 8);
  uint64_t v18 = v10;
  uint64_t v16 = *((void *)v1 + 9);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_181C72940();
  sub_18264F714();
  __int128 v24 = v21;
  uint64_t v25 = v7;
  uint64_t v26 = v6;
  char v27 = v8;
  uint64_t v28 = v20;
  uint64_t v29 = v19;
  char v30 = 0;
  sub_181C72984();
  uint64_t v11 = v23;
  sub_18264F45C();
  if (v11) {
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v5, v3);
  }
  uint64_t v13 = v16;
  uint64_t v14 = v22;
  LOBYTE(v24) = 2;
  sub_18264F444();
  *(void *)&__int128 v24 = v13;
  char v30 = 1;
  sub_181C729C8();
  sub_18264F45C();
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v5, v3);
}

uint64_t HTTPResponse.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E340);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  char v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_181C72940();
  sub_18264F6E4();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
  }
  char v36 = 0;
  sub_181C72A0C();
  sub_18264F3F0();
  uint64_t v25 = v28;
  uint64_t v26 = a2;
  uint64_t v10 = v29;
  uint64_t v11 = v31;
  int v35 = v32;
  uint64_t v12 = v34;
  uint64_t v23 = v33;
  uint64_t v24 = v30;
  LOBYTE(v28) = 2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v13 = sub_18264F3D8();
  unint64_t v27 = v14;
  unint64_t v15 = v14;
  uint64_t v22 = v11;
  unint64_t v16 = v13;
  if ((sub_181C6F894(v13, v14) & 1) != 0)
  {
    char v36 = 1;
    sub_181C72A94();
    swift_bridgeObjectRetain();
    sub_18264F3F0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v18 = v28;
    swift_bridgeObjectRetain();
    uint64_t v19 = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v20 = v26;
    *uint64_t v26 = v25;
    v20[1] = v10;
    void v20[2] = v24;
    v20[3] = v19;
    *((_BYTE *)v20 + 32) = v35;
    v20[5] = v23;
    v20[6] = v12;
    v20[7] = v16;
    v20[8] = v27;
    v20[9] = v18;
    __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
    swift_release();
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_181C72A50();
    swift_allocError();
    *uint64_t v17 = v16;
    v17[1] = v15;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_181C72140@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return HTTPResponse.init(from:)(a1, a2);
}

uint64_t sub_181C72154(void *a1)
{
  return HTTPResponse.encode(to:)(a1);
}

double static HTTPResponse.Status.continue.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 100LL;
  *(_OWORD *)a1 = xmmword_182662660;
  *(void *)(a1 + 16) = 0xE800000000000000LL;
  return result;
}

double static HTTPResponse.Status.switchingProtocols.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 101LL;
  *(_OWORD *)a1 = xmmword_182662670;
  *(void *)(a1 + 16) = 0x8000000182730C30LL;
  return result;
}

double static HTTPResponse.Status.earlyHints.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 103LL;
  *(_OWORD *)a1 = xmmword_182662680;
  *(void *)(a1 + 16) = 0xEB0000000073746ELL;
  return result;
}

double static HTTPResponse.Status.ok.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 200LL;
  *(_OWORD *)a1 = xmmword_182662690;
  *(void *)(a1 + 16) = 0xE200000000000000LL;
  return result;
}

double static HTTPResponse.Status.created.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 201LL;
  *(_OWORD *)a1 = xmmword_1826626A0;
  *(void *)(a1 + 16) = 0xE700000000000000LL;
  return result;
}

double static HTTPResponse.Status.accepted.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 202LL;
  *(_OWORD *)a1 = xmmword_1826626B0;
  *(void *)(a1 + 16) = 0xE800000000000000LL;
  return result;
}

double static HTTPResponse.Status.nonAuthoritativeInformation.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 203LL;
  *(_OWORD *)a1 = xmmword_1826626C0;
  *(void *)(a1 + 16) = 0x8000000182730C50LL;
  return result;
}

double static HTTPResponse.Status.noContent.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 204LL;
  *(_OWORD *)a1 = xmmword_1826626D0;
  *(void *)(a1 + 16) = 0xEA0000000000746ELL;
  return result;
}

double static HTTPResponse.Status.resetContent.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 205LL;
  *(_OWORD *)a1 = xmmword_1826626E0;
  *(void *)(a1 + 16) = 0xED0000746E65746ELL;
  return result;
}

double static HTTPResponse.Status.partialContent.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 206LL;
  *(_OWORD *)a1 = xmmword_1826626F0;
  *(void *)(a1 + 16) = 0xEF746E65746E6F43LL;
  return result;
}

double static HTTPResponse.Status.multipleChoices.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 300LL;
  *(_OWORD *)a1 = xmmword_182662700;
  *(void *)(a1 + 16) = 0x8000000182730C70LL;
  return result;
}

double static HTTPResponse.Status.movedPermanently.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 301LL;
  *(_OWORD *)a1 = xmmword_182662710;
  *(void *)(a1 + 16) = 0x8000000182730C90LL;
  return result;
}

double static HTTPResponse.Status.found.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 302LL;
  *(_OWORD *)a1 = xmmword_182662720;
  *(void *)(a1 + 16) = 0xE500000000000000LL;
  return result;
}

double static HTTPResponse.Status.seeOther.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 303LL;
  *(_OWORD *)a1 = xmmword_182662730;
  *(void *)(a1 + 16) = 0xE900000000000072LL;
  return result;
}

double static HTTPResponse.Status.notModified.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 304LL;
  *(_OWORD *)a1 = xmmword_182662740;
  *(void *)(a1 + 16) = 0xEC00000064656966LL;
  return result;
}

double static HTTPResponse.Status.temporaryRedirect.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 307LL;
  *(_OWORD *)a1 = xmmword_182662750;
  *(void *)(a1 + 16) = 0x8000000182730CB0LL;
  return result;
}

double static HTTPResponse.Status.permanentRedirect.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 308LL;
  *(_OWORD *)a1 = xmmword_182662760;
  *(void *)(a1 + 16) = 0x8000000182730CD0LL;
  return result;
}

double static HTTPResponse.Status.badRequest.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 400LL;
  *(_OWORD *)a1 = xmmword_182662770;
  *(void *)(a1 + 16) = 0xEB00000000747365LL;
  return result;
}

double static HTTPResponse.Status.unauthorized.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 401LL;
  *(_OWORD *)a1 = xmmword_182662780;
  *(void *)(a1 + 16) = 0xEC00000064657A69LL;
  return result;
}

double static HTTPResponse.Status.forbidden.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 403LL;
  *(_OWORD *)a1 = xmmword_182662790;
  *(void *)(a1 + 16) = 0xE90000000000006ELL;
  return result;
}

double static HTTPResponse.Status.notFound.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 404LL;
  *(_OWORD *)a1 = xmmword_1826627A0;
  *(void *)(a1 + 16) = 0xE900000000000064LL;
  return result;
}

double static HTTPResponse.Status.methodNotAllowed.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 405LL;
  *(_OWORD *)a1 = xmmword_1826627B0;
  *(void *)(a1 + 16) = 0x8000000182730CF0LL;
  return result;
}

double static HTTPResponse.Status.notAcceptable.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 406LL;
  *(_OWORD *)a1 = xmmword_1826627C0;
  *(void *)(a1 + 16) = 0xEE00656C62617470LL;
  return result;
}

double static HTTPResponse.Status.proxyAuthenticationRequired.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 407LL;
  *(_OWORD *)a1 = xmmword_1826627D0;
  *(void *)(a1 + 16) = 0x8000000182730D10LL;
  return result;
}

double static HTTPResponse.Status.requestTimeout.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 408LL;
  *(_OWORD *)a1 = xmmword_1826627E0;
  *(void *)(a1 + 16) = 0xEF74756F656D6954LL;
  return result;
}

double static HTTPResponse.Status.conflict.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 409LL;
  *(_OWORD *)a1 = xmmword_1826627F0;
  *(void *)(a1 + 16) = 0xE800000000000000LL;
  return result;
}

double static HTTPResponse.Status.gone.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 410LL;
  *(_OWORD *)a1 = xmmword_182662800;
  *(void *)(a1 + 16) = 0xE400000000000000LL;
  return result;
}

double static HTTPResponse.Status.lengthRequired.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 411LL;
  *(_OWORD *)a1 = xmmword_182662810;
  *(void *)(a1 + 16) = 0xEF64657269757165LL;
  return result;
}

double static HTTPResponse.Status.preconditionFailed.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 412LL;
  *(_OWORD *)a1 = xmmword_182662820;
  *(void *)(a1 + 16) = 0x8000000182730D30LL;
  return result;
}

double static HTTPResponse.Status.contentTooLarge.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 413LL;
  *(_OWORD *)a1 = xmmword_182662830;
  *(void *)(a1 + 16) = 0x8000000182730D50LL;
  return result;
}

double static HTTPResponse.Status.uriTooLong.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 414LL;
  *(_OWORD *)a1 = xmmword_182662840;
  *(void *)(a1 + 16) = 0xEC000000676E6F4CLL;
  return result;
}

double static HTTPResponse.Status.unsupportedMediaType.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 415LL;
  *(_OWORD *)a1 = xmmword_182662850;
  *(void *)(a1 + 16) = 0x8000000182730D70LL;
  return result;
}

double static HTTPResponse.Status.rangeNotSatisfiable.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 416LL;
  *(_OWORD *)a1 = xmmword_182662860;
  *(void *)(a1 + 16) = 0x8000000182730D90LL;
  return result;
}

double static HTTPResponse.Status.expectationFailed.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 417LL;
  *(_OWORD *)a1 = xmmword_182662870;
  *(void *)(a1 + 16) = 0x8000000182730DB0LL;
  return result;
}

double static HTTPResponse.Status.misdirectedRequest.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 421LL;
  *(_OWORD *)a1 = xmmword_182662880;
  *(void *)(a1 + 16) = 0x8000000182730DD0LL;
  return result;
}

double static HTTPResponse.Status.unprocessableContent.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 422LL;
  *(_OWORD *)a1 = xmmword_182662890;
  *(void *)(a1 + 16) = 0x8000000182730DF0LL;
  return result;
}

double static HTTPResponse.Status.tooEarly.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 425LL;
  *(_OWORD *)a1 = xmmword_1826628A0;
  *(void *)(a1 + 16) = 0xE900000000000079LL;
  return result;
}

double static HTTPResponse.Status.upgradeRequired.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 426LL;
  *(_OWORD *)a1 = xmmword_1826628B0;
  *(void *)(a1 + 16) = 0x8000000182730E10LL;
  return result;
}

double static HTTPResponse.Status.preconditionRequired.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 428LL;
  *(_OWORD *)a1 = xmmword_1826628C0;
  *(void *)(a1 + 16) = 0x8000000182730E30LL;
  return result;
}

double static HTTPResponse.Status.tooManyRequests.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 429LL;
  *(_OWORD *)a1 = xmmword_1826628D0;
  *(void *)(a1 + 16) = 0x8000000182730E50LL;
  return result;
}

double static HTTPResponse.Status.requestHeaderFieldsTooLarge.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 431LL;
  *(_OWORD *)a1 = xmmword_1826628E0;
  *(void *)(a1 + 16) = 0x8000000182730E70LL;
  return result;
}

double static HTTPResponse.Status.unavailableForLegalReasons.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 451LL;
  *(_OWORD *)a1 = xmmword_1826628F0;
  *(void *)(a1 + 16) = 0x8000000182730E90LL;
  return result;
}

double static HTTPResponse.Status.internalServerError.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 500LL;
  *(_OWORD *)a1 = xmmword_182662900;
  *(void *)(a1 + 16) = 0x8000000182730EB0LL;
  return result;
}

double static HTTPResponse.Status.notImplemented.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 501LL;
  *(_OWORD *)a1 = xmmword_182662910;
  *(void *)(a1 + 16) = 0xEF6465746E656D65LL;
  return result;
}

double static HTTPResponse.Status.badGateway.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 502LL;
  *(_OWORD *)a1 = xmmword_182662920;
  *(void *)(a1 + 16) = 0xEB00000000796177LL;
  return result;
}

double static HTTPResponse.Status.serviceUnavailable.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 503LL;
  *(_OWORD *)a1 = xmmword_182662930;
  *(void *)(a1 + 16) = 0x8000000182730ED0LL;
  return result;
}

double static HTTPResponse.Status.gatewayTimeout.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 504LL;
  *(_OWORD *)a1 = xmmword_182662940;
  *(void *)(a1 + 16) = 0xEF74756F656D6954LL;
  return result;
}

double static HTTPResponse.Status.httpVersionNotSupported.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 505LL;
  *(_OWORD *)a1 = xmmword_182662950;
  *(void *)(a1 + 16) = 0x8000000182730EF0LL;
  return result;
}

double static HTTPResponse.Status.networkAuthenticationRequired.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 511LL;
  *(_OWORD *)a1 = xmmword_182662960;
  *(void *)(a1 + 16) = 0x8000000182730F10LL;
  return result;
}

BOOL _s7Network12HTTPResponseV18PseudoHeaderFieldsV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  int v5 = *(unsigned __int8 *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  BOOL v8 = *(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24);
  BOOL result = 0;
  if ((v8 || (sub_18264F4EC() & 1) != 0) && v2 == v5)
  {
    BOOL v9 = v3 == v6 && v4 == v7;
    if (v9 || (sub_18264F4EC() & 1) != 0) {
      return 1;
    }
  }

  return result;
}

uint64_t _s7Network12HTTPResponseV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 72);
  int v6 = *(unsigned __int8 *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 72);
  if ((*(void *)(a1 + 16) != *(void *)(a2 + 16) || *(void *)(a1 + 24) != *(void *)(a2 + 24))
    && (sub_18264F4EC() & 1) == 0
    || v2 != v6
    || (v3 != v7 || v4 != v8) && (sub_18264F4EC() & 1) == 0)
  {
    return 0LL;
  }

  swift_retain();
  swift_retain();
  char v10 = sub_181C24B78(v5, v9);
  swift_release();
  swift_release();
  return v10 & 1;
}

unint64_t sub_181C72940()
{
  unint64_t result = qword_18C58E328;
  if (!qword_18C58E328)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182662DEC, &type metadata for HTTPResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58E328);
  }

  return result;
}

unint64_t sub_181C72984()
{
  unint64_t result = qword_18C58E330;
  if (!qword_18C58E330)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for HTTPResponse.PseudoHeaderFields,  &type metadata for HTTPResponse.PseudoHeaderFields);
    atomic_store(result, (unint64_t *)&qword_18C58E330);
  }

  return result;
}

unint64_t sub_181C729C8()
{
  unint64_t result = qword_18C58E338;
  if (!qword_18C58E338)
  {
    unint64_t result = MEMORY[0x186E12084](&protocol conformance descriptor for HTTPFields, &type metadata for HTTPFields);
    atomic_store(result, (unint64_t *)&qword_18C58E338);
  }

  return result;
}

unint64_t sub_181C72A0C()
{
  unint64_t result = qword_18C58E348;
  if (!qword_18C58E348)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for HTTPResponse.PseudoHeaderFields,  &type metadata for HTTPResponse.PseudoHeaderFields);
    atomic_store(result, (unint64_t *)&qword_18C58E348);
  }

  return result;
}

unint64_t sub_181C72A50()
{
  unint64_t result = qword_18C58E350;
  if (!qword_18C58E350)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182662DAC, &type metadata for HTTPResponse.DecodingError);
    atomic_store(result, (unint64_t *)&qword_18C58E350);
  }

  return result;
}

unint64_t sub_181C72A94()
{
  unint64_t result = qword_18C58E358;
  if (!qword_18C58E358)
  {
    unint64_t result = MEMORY[0x186E12084](&protocol conformance descriptor for HTTPFields, &type metadata for HTTPFields);
    atomic_store(result, (unint64_t *)&qword_18C58E358);
  }

  return result;
}

unint64_t sub_181C72ADC()
{
  unint64_t result = qword_18C58E360;
  if (!qword_18C58E360)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for HTTPResponse.Status.Kind,  &type metadata for HTTPResponse.Status.Kind);
    atomic_store(result, (unint64_t *)&qword_18C58E360);
  }

  return result;
}

unint64_t sub_181C72B24()
{
  unint64_t result = qword_18C58E368;
  if (!qword_18C58E368)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for HTTPResponse.Status,  &type metadata for HTTPResponse.Status);
    atomic_store(result, (unint64_t *)&qword_18C58E368);
  }

  return result;
}

uint64_t sub_181C72B68()
{
  return MEMORY[0x1896187A8];
}

unint64_t sub_181C72B78()
{
  unint64_t result = qword_18C58E370;
  if (!qword_18C58E370)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for HTTPResponse.PseudoHeaderFields,  &type metadata for HTTPResponse.PseudoHeaderFields);
    atomic_store(result, (unint64_t *)&qword_18C58E370);
  }

  return result;
}

unint64_t sub_181C72BC0()
{
  unint64_t result = qword_18C58E378;
  if (!qword_18C58E378)
  {
    unint64_t result = MEMORY[0x186E12084](&protocol conformance descriptor for HTTPResponse, &type metadata for HTTPResponse);
    atomic_store(result, (unint64_t *)&qword_18C58E378);
  }

  return result;
}

uint64_t sub_181C72C08(__int128 *a1)
{
  uint64_t v1 = *((void *)a1 + 2);
  __int128 v3 = *a1;
  uint64_t v4 = v1;
  swift_bridgeObjectRetain();
  return HTTPResponse.status.setter((uint64_t)&v3);
}

uint64_t destroy for HTTPResponse()
{
  return swift_release();
}

uint64_t initializeWithCopy for HTTPResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for HTTPResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for HTTPResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for HTTPResponse(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(sub_181BCD4F0(v1, v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HTTPResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 80) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for HTTPResponse()
{
  return &type metadata for HTTPResponse;
}

uint64_t getEnumTagSinglePayload for HTTPResponse.Status(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(sub_181BCD4F0(v1, v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HTTPResponse.Status(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for HTTPResponse.Status()
{
  return &type metadata for HTTPResponse.Status;
}

uint64_t storeEnumTagSinglePayload for HTTPResponse.Status.Kind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_181C7300C + 4 * byte_182662975[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_181C73040 + 4 * byte_182662970[v4]))();
}

uint64_t sub_181C73040(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C73048(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181C73050LL);
  }
  return result;
}

uint64_t sub_181C7305C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181C73064LL);
  }
  *(_BYTE *)__n128 result = a2 + 5;
  return result;
}

uint64_t sub_181C73068(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C73070(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HTTPResponse.Status.Kind()
{
  return &type metadata for HTTPResponse.Status.Kind;
}

ValueMetadata *type metadata accessor for HTTPResponse.PseudoHeaderFields()
{
  return &type metadata for HTTPResponse.PseudoHeaderFields;
}

ValueMetadata *type metadata accessor for HTTPResponse.DecodingError()
{
  return &type metadata for HTTPResponse.DecodingError;
}

uint64_t storeEnumTagSinglePayload for HTTPResponse.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_181C730F8 + 4 * byte_18266297F[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_181C7312C + 4 * byte_18266297A[v4]))();
}

uint64_t sub_181C7312C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C73134(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181C7313CLL);
  }
  return result;
}

uint64_t sub_181C73148(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181C73150LL);
  }
  *(_BYTE *)__n128 result = a2 + 2;
  return result;
}

uint64_t sub_181C73154(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C7315C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HTTPResponse.CodingKeys()
{
  return &type metadata for HTTPResponse.CodingKeys;
}

unint64_t sub_181C7317C()
{
  unint64_t result = qword_18C58E380;
  if (!qword_18C58E380)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182662D84, &type metadata for HTTPResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58E380);
  }

  return result;
}

unint64_t sub_181C731C4()
{
  unint64_t result = qword_18C58E388;
  if (!qword_18C58E388)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182662CBC, &type metadata for HTTPResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58E388);
  }

  return result;
}

unint64_t sub_181C7320C()
{
  unint64_t result = qword_18C58E390;
  if (!qword_18C58E390)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182662CE4, &type metadata for HTTPResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58E390);
  }

  return result;
}

uint64_t sub_181C73250()
{
  unint64_t v0 = sub_18264F390();
  swift_bridgeObjectRelease();
  if (v0 >= 3) {
    return 3LL;
  }
  else {
    return v0;
  }
}

uint64_t sub_181C73298(_BYTE *a1, uint64_t a2)
{
  return sub_181C2EFC0(a1, a2);
}

uint64_t NWMulticastGroup.sourceFilter.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_181C6C37C(v1 + OBJC_IVAR____TtC7Network16NWMulticastGroup_sourceFilter, a1);
}

uint64_t NWMulticastGroup.isUnicastDisabled.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC7Network16NWMulticastGroup_isUnicastDisabled);
}

uint64_t sub_181C732D0(nw_group_descriptor *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)&aBlock[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v1 + OBJC_IVAR____TtC7Network16NWMulticastGroup__nw) = a1;
  uint64_t v6 = (void *)swift_unknownObjectRetain();
  specific_nw_report_resolution_source_t source = (nw_endpoint *)nw_multicast_group_descriptor_get_specific_source(v6);
  sub_181BDA308(specific_source, (uint64_t)v5);
  sub_181C776A8((uint64_t)v5, v1 + OBJC_IVAR____TtC7Network16NWMulticastGroup_sourceFilter);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC7Network16NWMulticastGroup_isUnicastDisabled) = nw_multicast_group_descriptor_get_disable_unicast_traffic(a1);
  uint64_t v14 = MEMORY[0x18961AFE8];
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = &v14;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_181C77700;
  *(void *)(v9 + 24) = v8;
  aBlock[4] = sub_181BC097C;
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_181C6AF34;
  void aBlock[3] = &block_descriptor_72;
  char v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  nw_group_descriptor_enumerate_endpoints(a1, v10);
  swift_unknownObjectRelease();
  _Block_release(v10);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((a1 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v1 + 16) = v14;
    swift_release();
    return v1;
  }

  return result;
}

uint64_t sub_181C73490()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C368);
  MEMORY[0x1895F8858](v0);
  unint64_t v2 = (char *)&v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for NWEndpoint();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v10 = (nw_endpoint *)swift_unknownObjectRetain();
  sub_181BDA308(v10, (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    sub_181BDA0F0((uint64_t)v5, &qword_18C45E580);
  }

  else
  {
    sub_181BE4800((uint64_t)v5, (uint64_t)v9);
    sub_181BE4744((uint64_t)v9, (uint64_t)v2);
    sub_181BF73B0(0LL, 0LL, (uint64_t)v2);
    sub_181BE4788((uint64_t)v9);
  }

  return 1LL;
}

uint64_t NWMulticastGroup.__allocating_init(_:)(void *a1)
{
  uint64_t v1 = nw_group_descriptor_copy(a1);
  type metadata accessor for NWMulticastGroup(0LL);
  uint64_t v2 = swift_allocObject();
  sub_181C732D0((nw_group_descriptor *)v1);
  swift_unknownObjectRelease();
  return v2;
}

uint64_t type metadata accessor for NWMulticastGroup(uint64_t a1)
{
  return sub_181BD62C8(a1, qword_18C58A130);
}

uint64_t NWMulticastGroup.__allocating_init(for:from:disableUnicast:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = swift_allocObject();
  NWMulticastGroup.init(for:from:disableUnicast:)(a1, a2, a3);
  return v6;
}

uint64_t NWMulticastGroup.init(for:from:disableUnicast:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = v3;
  type metadata accessor for NWEndpoint();
  uint64_t v9 = MEMORY[0x1895F8858](a1);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v5 + OBJC_IVAR____TtC7Network16NWMulticastGroup__nw) = 0LL;
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13)
  {
    HIDWORD(v28) = a3;
    uint64_t v29 = v4;
    uint64_t v30 = v9;
    uint64_t v31 = a2;
    uint64_t v32 = v5;
    uint64_t v14 = v9 + ((*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v15 = *(void *)(v10 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_181BE4744(v14, (uint64_t)v12);
      uint64_t v17 = *(void *)v12;
      uint64_t v16 = *((void *)v12 + 1);
      uint64_t v18 = *((void *)v12 + 2);
      int v19 = v12[24];
      if (v19 == 1)
      {
        if ((*(void *)v12 & 0xF0LL) != 0xE0) {
          goto LABEL_11;
        }
      }

      else if (v19 != 2 || ~*v12 != 0LL)
      {
LABEL_11:
        swift_bridgeObjectRelease_n();
        sub_181BBE220();
        swift_allocError();
        *(_DWORD *)uint64_t v21 = 22;
        *(_BYTE *)(v21 + 4) = 0;
        swift_willThrow();
        sub_181BC6974(v17, v16, v18, v19);
        goto LABEL_15;
      }

      sub_181BC6974(*(void *)v12, *((void *)v12 + 1), *((void *)v12 + 2), v12[24]);
      v14 += v15;
      if (!--v13)
      {
        uint64_t v23 = v30;
        swift_bridgeObjectRelease();
        uint64_t v5 = v32;
        *(void *)(v32 + 16) = v23;
        uint64_t v24 = v31;
        sub_181C6C37C(v31, v5 + OBJC_IVAR____TtC7Network16NWMulticastGroup_sourceFilter);
        *(_BYTE *)(v5 + OBJC_IVAR____TtC7Network16NWMulticastGroup_isUnicastDisabled) = BYTE4(v28) & 1;
        uint64_t v25 = sub_181C739B0();
        sub_181BDA0F0(v24, &qword_18C45E580);
        *(void *)(v5 + OBJC_IVAR____TtC7Network16NWMulticastGroup__nw) = v25;
        swift_unknownObjectRelease();
        return v5;
      }
    }

    swift_bridgeObjectRelease_n();
    sub_181BE4788((uint64_t)v12);
    sub_181BBE220();
    swift_allocError();
    *(_DWORD *)uint64_t v26 = 22;
    *(_BYTE *)(v26 + 4) = 0;
    swift_willThrow();
LABEL_15:
    uint64_t v5 = v32;
    a2 = v31;
  }

  else
  {
    swift_bridgeObjectRelease();
    sub_181BBE220();
    swift_allocError();
    *(_DWORD *)uint64_t v22 = 22;
    *(_BYTE *)(v22 + 4) = 0;
    swift_willThrow();
  }

  sub_181BDA0F0(a2, &qword_18C45E580);
  swift_unknownObjectRelease();
  type metadata accessor for NWMulticastGroup(0LL);
  swift_deallocPartialClassInstance();
  return v5;
}

uint64_t sub_181C739A0()
{
  return swift_unknownObjectRetain();
}

nw_group_descriptor *sub_181C739B0()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
  MEMORY[0x1895F8858](v1);
  uint64_t v3 = (char *)v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for NWEndpoint();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](v4);
  uint64_t v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)v23 - v9;
  uint64_t v11 = *(void *)(v0 + 16);
  uint64_t v12 = *(void *)(v11 + 16);
  if (!v12) {
    return 0LL;
  }
  uint64_t v13 = v11 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  sub_181BE4744(v13, (uint64_t)v23 - v9);
  swift_bridgeObjectRetain();
  NWEndpoint.nw.getter();
  if (!v14)
  {
    sub_181BE4788((uint64_t)v10);
    swift_bridgeObjectRelease();
    return 0LL;
  }

  uint64_t v24 = v4;
  uint64_t v25 = v0;
  v23[1] = v14;
  multicast = nw_group_descriptor_create_multicast(v14);
  uint64_t v16 = *(void *)(v5 + 72);
  do
  {
    sub_181BE4744(v13, (uint64_t)v8);
    _s7Network10NWEndpointO2eeoiySbAC_ACtFZ_0((uint64_t)v8, (uint64_t)v10);
    if ((v17 & 1) == 0)
    {
      NWEndpoint.nw.getter();
      if (v18)
      {
        nw_group_descriptor_add_endpoint(multicast, v18);
        swift_unknownObjectRelease();
      }
    }

    sub_181BE4788((uint64_t)v8);
    v13 += v16;
    --v12;
  }

  while (v12);
  swift_bridgeObjectRelease();
  uint64_t v19 = v25;
  sub_181C6C37C(v25 + OBJC_IVAR____TtC7Network16NWMulticastGroup_sourceFilter, (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1LL, v24) == 1)
  {
    sub_181BDA0F0((uint64_t)v3, &qword_18C45E580);
  }

  else
  {
    NWEndpoint.nw.getter();
    uint64_t v21 = v20;
    sub_181BE4788((uint64_t)v3);
    if (v21)
    {
      nw_multicast_group_descriptor_set_specific_source(multicast, v21);
      swift_unknownObjectRelease();
    }
  }

  nw_multicast_group_descriptor_set_disable_unicast_traffic( multicast,  *(_BYTE *)(v19 + OBJC_IVAR____TtC7Network16NWMulticastGroup_isUnicastDisabled));
  swift_unknownObjectRelease();
  sub_181BE4788((uint64_t)v10);
  return multicast;
}

uint64_t NWMulticastGroup.deinit()
{
  return v0;
}

uint64_t NWMulticastGroup.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_181C73C84()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for NWEndpoint() - 8) + 80LL);
  uint64_t v2 = (v1 + 32) & ~v1;
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_18265BE50;
  sub_181BE4744(v0 + OBJC_IVAR____TtC7Network16NWMultiplexGroup_remoteEndpoint, v3 + v2);
  return v3;
}

uint64_t NWMultiplexGroup.__allocating_init(_:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
  MEMORY[0x1895F8858](v2);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = nw_group_descriptor_copy(a1);
  type metadata accessor for NWMultiplexGroup(0LL);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + OBJC_IVAR____TtC7Network16NWMultiplexGroup__nw) = v5;
  uint64_t v7 = (void *)swift_unknownObjectRetain();
  nw_group_descriptor_copy_member(v7);
  uint64_t v8 = (nw_endpoint *)swift_unknownObjectRetain();
  sub_181BDA308(v8, (uint64_t)v4);
  uint64_t v9 = type metadata accessor for NWEndpoint();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v4, 1LL, v9);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_181BE4800((uint64_t)v4, v6 + OBJC_IVAR____TtC7Network16NWMultiplexGroup_remoteEndpoint);
    swift_unknownObjectRelease();
    return v6;
  }

  return result;
}

uint64_t type metadata accessor for NWMultiplexGroup(uint64_t a1)
{
  return sub_181BD62C8(a1, (uint64_t *)&unk_18C58A148);
}

uint64_t NWMultiplexGroup.__allocating_init(to:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  sub_181BE4744(a1, v2 + OBJC_IVAR____TtC7Network16NWMultiplexGroup_remoteEndpoint);
  NWEndpoint.nw.getter();
  if (v3)
  {
    nw_group_descriptor_t multiplex = nw_group_descriptor_create_multiplex(v3);
    swift_unknownObjectRelease();
    sub_181BE4788(a1);
  }

  else
  {
    sub_181BE4788(a1);
    nw_group_descriptor_t multiplex = 0LL;
  }

  *(void *)(v2 + OBJC_IVAR____TtC7Network16NWMultiplexGroup__nw) = multiplex;
  return v2;
}

uint64_t NWMultiplexGroup.init(to:)(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_181BE4744(a1, v2 + OBJC_IVAR____TtC7Network16NWMultiplexGroup_remoteEndpoint);
  NWEndpoint.nw.getter();
  if (v4)
  {
    nw_group_descriptor_t multiplex = nw_group_descriptor_create_multiplex(v4);
    swift_unknownObjectRelease();
    sub_181BE4788(a1);
  }

  else
  {
    sub_181BE4788(a1);
    nw_group_descriptor_t multiplex = 0LL;
  }

  *(void *)(v2 + OBJC_IVAR____TtC7Network16NWMultiplexGroup__nw) = multiplex;
  return v2;
}

uint64_t sub_181C73F3C()
{
  return swift_unknownObjectRetain();
}

uint64_t NWMultiplexGroup.deinit()
{
  return v0;
}

uint64_t NWMultiplexGroup.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t NWApplicationServiceGroup.nw.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_181C73FD0(nw_group_descriptor *a1)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  uint64_t v3 = sub_18264E688();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v1 + OBJC_IVAR____TtC7Network25NWApplicationServiceGroup__nw) = a1;
  __int128 v14 = 0uLL;
  uint64_t v7 = (void *)swift_unknownObjectRetain();
  nw_group_descriptor_get_id(v7, &v14);
  sub_18264E664();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))( v1 + OBJC_IVAR____TtC7Network25NWApplicationServiceGroup_groupID,  v6,  v3);
  uint64_t v13 = MEMORY[0x18961AFE8];
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = &v13;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_181C77690;
  *(void *)(v9 + 24) = v8;
  aBlock[4] = sub_181BBFA50;
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_181C6AF34;
  void aBlock[3] = &block_descriptor_56_0;
  uint64_t v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  nw_group_descriptor_enumerate_endpoints(a1, v10);
  swift_unknownObjectRelease();
  _Block_release(v10);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  *(void *)(v1 + 16) = v13;
  swift_release();
  return v1;
}

uint64_t sub_181C741E4(uint64_t a1, unint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for NWEndpoint();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v12 = (char *)&v19 - v11;
  uint64_t v13 = (nw_endpoint *)swift_unknownObjectRetain();
  sub_181BDA308(v13, (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    sub_181BDA0F0((uint64_t)v5, &qword_18C45E580);
  }

  else
  {
    sub_181BE4800((uint64_t)v5, (uint64_t)v12);
    sub_181BE4744((uint64_t)v12, (uint64_t)v10);
    unint64_t v14 = *a2;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a2 = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v14 = sub_181BC4EB8(0, *(void *)(v14 + 16) + 1LL, 1, v14);
      *a2 = v14;
    }

    unint64_t v17 = *(void *)(v14 + 16);
    unint64_t v16 = *(void *)(v14 + 24);
    if (v17 >= v16 >> 1)
    {
      unint64_t v14 = sub_181BC4EB8(v16 > 1, v17 + 1, 1, v14);
      *a2 = v14;
    }

    *(void *)(v14 + 16) = v17 + 1;
    sub_181BE4800( (uint64_t)v10,  v14 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
    + *(void *)(v7 + 72) * v17);
    sub_181BE4788((uint64_t)v12);
  }

  return 1LL;
}

uint64_t NWApplicationServiceGroup.__allocating_init(for:id:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  NWApplicationServiceGroup.init(for:id:)(a1, a2);
  return v4;
}

uint64_t NWApplicationServiceGroup.init(for:id:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v32[1] = *MEMORY[0x1895F89C0];
  uint64_t v6 = type metadata accessor for NWEndpoint();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(void *)(a1 + 16))
  {
    *(void *)(v2 + 16) = a1;
    uint64_t v10 = v2 + OBJC_IVAR____TtC7Network25NWApplicationServiceGroup_groupID;
    uint64_t v11 = sub_18264E688();
    uint64_t v12 = a2;
    uint64_t v13 = v11;
    uint64_t v14 = *(void *)(v11 - 8);
    uint64_t v15 = *(void (**)(uint64_t))(v14 + 16);
    uint64_t v30 = v12;
    v15(v10);
    if (*(void *)(a1 + 16))
    {
      sub_181BE4744( a1 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)),  (uint64_t)v9);
      swift_bridgeObjectRetain();
      NWEndpoint.nw.getter();
      unint64_t v17 = v16;
      sub_181BE4788((uint64_t)v9);
      if (v17)
      {
        *(void *)&__int128 v31 = sub_18264E670();
        WORD4(v31) = v18;
        BYTE10(v31) = v19;
        BYTE11(v31) = v20;
        BYTE12(v31) = v21;
        BYTE13(v31) = v22;
        BYTE14(v31) = v23;
        HIBYTE(v31) = v24;
        sub_181C74698(&v31, v17, a1, v32);
        swift_bridgeObjectRelease();
        uint64_t v25 = v32[0];
        (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v30, v13);
        swift_unknownObjectRelease();
LABEL_8:
        *(void *)(v3 + OBJC_IVAR____TtC7Network25NWApplicationServiceGroup__nw) = v25;
        return v3;
      }

      swift_bridgeObjectRelease();
    }

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v30, v13);
    uint64_t v25 = 0LL;
    goto LABEL_8;
  }

  swift_bridgeObjectRelease();
  sub_181BBE220();
  swift_allocError();
  *(_DWORD *)uint64_t v26 = 22;
  *(_BYTE *)(v26 + 4) = 0;
  swift_willThrow();
  uint64_t v27 = sub_18264E688();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8LL))(a2, v27);
  swift_deallocPartialClassInstance();
  return v3;
}

nw_group_descriptor *sub_181C74698@<X0>(_OWORD *a1@<X0>, void *a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E420);
  MEMORY[0x1895F8858](v48);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
  uint64_t v12 = MEMORY[0x1895F8858](v11);
  uint64_t v45 = (uint64_t)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  unint64_t v16 = (char *)&v40 - v15;
  MEMORY[0x1895F8858](v14);
  __int16 v18 = (char *)&v40 - v17;
  uint64_t v19 = type metadata accessor for NWEndpoint();
  uint64_t v50 = *(void *)(v19 - 8);
  uint64_t v20 = MEMORY[0x1895F8858](v19);
  uint64_t v43 = (uint64_t)&v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = (nw_group_descriptor *)MEMORY[0x1895F8858](v20);
  uint64_t v49 = (char *)&v40 - v23;
  if (!a1)
  {
    __break(1u);
    return result;
  }

  uint64_t result = (nw_group_descriptor *)nw_group_descriptor_create_application_service(a2, a1);
  nw_group_descriptor_t v44 = result;
  uint64_t v24 = *(void *)(a3 + 16);
  if (!v24) {
    goto LABEL_16;
  }
  uint64_t v41 = a4;
  uint64_t v42 = v4;
  uint64_t v25 = a3 + ((*(unsigned __int8 *)(v50 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80));
  uint64_t v46 = *(void *)(v50 + 72);
  uint64_t v40 = a3;
  swift_bridgeObjectRetain();
  uint64_t v47 = v25;
  uint64_t v26 = v25;
  uint64_t v27 = (uint64_t)v49;
  do
  {
    sub_181BE4744(v26, v27);
    sub_181BE4744(v27, (uint64_t)v18);
    uint64_t v28 = v50;
    uint64_t v29 = *(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56);
    v29(v18, 0LL, 1LL, v19);
    sub_181BE4744(v47, (uint64_t)v16);
    v29(v16, 0LL, 1LL, v19);
    uint64_t v30 = (uint64_t)&v10[*(int *)(v48 + 48)];
    sub_181C6C37C((uint64_t)v18, (uint64_t)v10);
    sub_181C6C37C((uint64_t)v16, v30);
    __int128 v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
    if (v31((uint64_t)v10, 1LL, v19) == 1)
    {
      sub_181BDA0F0((uint64_t)v16, &qword_18C45E580);
      sub_181BDA0F0((uint64_t)v18, &qword_18C45E580);
      if (v31(v30, 1LL, v19) == 1)
      {
        sub_181BDA0F0((uint64_t)v10, &qword_18C45E580);
        uint64_t v27 = (uint64_t)v49;
        goto LABEL_5;
      }
    }

    else
    {
      uint64_t v32 = (uint64_t)v16;
      uint64_t v33 = v45;
      sub_181C6C37C((uint64_t)v10, v45);
      if (v31(v30, 1LL, v19) != 1)
      {
        uint64_t v35 = v43;
        sub_181BE4800(v30, v43);
        _s7Network10NWEndpointO2eeoiySbAC_ACtFZ_0(v33, v35);
        char v37 = v36;
        sub_181BE4788(v35);
        sub_181BDA0F0(v32, &qword_18C45E580);
        sub_181BDA0F0((uint64_t)v18, &qword_18C45E580);
        uint64_t v38 = v33;
        unint64_t v16 = (char *)v32;
        sub_181BE4788(v38);
        sub_181BDA0F0((uint64_t)v10, &qword_18C45E580);
        uint64_t v27 = (uint64_t)v49;
        if ((v37 & 1) != 0) {
          goto LABEL_5;
        }
        goto LABEL_13;
      }

      sub_181BDA0F0(v32, &qword_18C45E580);
      sub_181BDA0F0((uint64_t)v18, &qword_18C45E580);
      uint64_t v34 = v33;
      unint64_t v16 = (char *)v32;
      sub_181BE4788(v34);
    }

    sub_181BDA0F0((uint64_t)v10, &qword_18C58E420);
    uint64_t v27 = (uint64_t)v49;
LABEL_13:
    NWEndpoint.nw.getter();
    if (v39)
    {
      nw_group_descriptor_add_endpoint(v44, v39);
      swift_unknownObjectRelease();
    }

uint64_t NWApplicationServiceGroup.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7Network25NWApplicationServiceGroup_groupID;
  uint64_t v2 = sub_18264E688();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_unknownObjectRelease();
  return v0;
}

uint64_t NWApplicationServiceGroup.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7Network25NWApplicationServiceGroup_groupID;
  uint64_t v2 = sub_18264E688();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t NWConnectionGroup.debugDescription.getter()
{
  id v1 = objc_msgSend(*(id *)(v0 + 24), sel_description);
  uint64_t v2 = sub_18264EA48();

  return v2;
}

uint64_t sub_181C74B88@<X0>(nw_error_t error@<X1>, uint64_t result@<X0>, uint64_t a3@<X8>)
{
  switch((int)result)
  {
    case 0:
      uint64_t result = swift_unknownObjectRelease();
      unint64_t v5 = 0x8000000000LL;
      break;
    case 1:
      if (error)
      {
        nw_error_domain_t error_domain = nw_error_get_error_domain(error);
        switch(error_domain)
        {
          case nw_error_domain_tls:
            unsigned int error_code = nw_error_get_error_code(error);
            uint64_t result = swift_unknownObjectRelease();
            unint64_t v5 = error_code | 0x200000000LL;
            break;
          case nw_error_domain_dns:
            unsigned int v9 = nw_error_get_error_code(error);
            uint64_t result = swift_unknownObjectRelease();
            unint64_t v5 = v9 | 0x100000000LL;
            break;
          case nw_error_domain_posix:
            nw_error_get_error_code(error);
            uint64_t v7 = sub_18264E94C();
            uint64_t result = swift_unknownObjectRelease();
            unint64_t v5 = 22LL;
            if ((v7 & 0x100000000LL) == 0) {
              unint64_t v5 = v7;
            }
            break;
          default:
            uint64_t result = swift_unknownObjectRelease();
            unint64_t v5 = 22LL;
            break;
        }
      }

      else
      {
        unint64_t v5 = 50LL;
      }

      break;
    case 2:
      uint64_t result = swift_unknownObjectRelease();
      unint64_t v5 = 0x8000000001LL;
      break;
    case 3:
      uint64_t result = (uint64_t)sub_181BF9C34(error, (uint64_t)&v10);
      unint64_t v5 = 0x4000000016LL;
      if (v11 != 255LL) {
        unint64_t v5 = v10 | ((unint64_t)v11 << 32) | 0x4000000000LL;
      }
      break;
    default:
      uint64_t result = swift_unknownObjectRelease();
      unint64_t v5 = 0x8000000002LL;
      break;
  }

  *(_DWORD *)a3 = v5;
  *(_BYTE *)(a3 + 4) = BYTE4(v5);
  return result;
}

void NWConnectionGroup.state.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 56);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(v3 + 60);
  *(_DWORD *)a1 = v4;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 72));
}

uint64_t (*NWConnectionGroup.stateUpdateHandler.getter())()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 18;
  os_unfair_lock_lock(v1 + 18);
  sub_181C75100(v2, (uint64_t (**)())&v6);
  os_unfair_lock_unlock(v3);
  if (!(void)v6) {
    return 0LL;
  }
  __int128 v5 = v6;
  *(_OWORD *)(swift_allocObject() + 16) = v5;
  return sub_181BD639C;
}

uint64_t sub_181C74DE0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    int v4 = sub_181BDA300;
  }

  else
  {
    int v4 = 0LL;
    uint64_t v3 = 0LL;
  }

  sub_181BDA298(v1);
  return NWConnectionGroup.stateUpdateHandler.setter((uint64_t)v4, v3);
}

uint64_t NWConnectionGroup.stateUpdateHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 72));
  uint64_t v6 = *(void *)(v5 + 24);
  sub_181BDA298(a1);
  sub_181BDA294(v6);
  *(void *)(v5 + 24) = a1;
  *(void *)(v5 + 32) = a2;
  LODWORD(v6) = *(unsigned __int8 *)(v5 + 16);
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 72));
  if ((_DWORD)v6 != 1) {
    return sub_181BDA294(a1);
  }
  uint64_t v7 = *(nw_connection_group **)(v2 + 24);
  uint64_t v8 = (void *)swift_allocObject();
  void v8[2] = v2;
  void v8[3] = a1;
  uint64_t v8[4] = a2;
  void v11[4] = sub_181C76DBC;
  v11[5] = v8;
  v11[0] = MEMORY[0x1895F87A8];
  v11[1] = 1107296256LL;
  void v11[2] = sub_181BD1944;
  v11[3] = &block_descriptor_16;
  unsigned int v9 = _Block_copy(v11);
  swift_unknownObjectRetain();
  swift_retain();
  sub_181BDA298(a1);
  swift_release();
  nw_connection_group_set_state_changed_handler(v7, v9);
  sub_181BDA294(a1);
  _Block_release(v9);
  return swift_unknownObjectRelease();
}

void sub_181C74FBC(uint64_t a1, nw_error *a2, uint64_t a3, void (*a4)(int *))
{
  uint64_t v7 = *(os_unfair_lock_s **)(a3 + 16);
  uint64_t v8 = (uint64_t)&v7[4];
  unsigned int v9 = v7 + 18;
  os_unfair_lock_lock(v7 + 18);
  sub_181C75054(v8, a1, a2, (uint64_t)&v10);
  os_unfair_lock_unlock(v9);
  if (a4) {
    a4(&v10);
  }
}

uint64_t sub_181C75054@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, nw_error *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_181C74B88(a3, a2, (uint64_t)&v11);
  unsigned int v9 = v11;
  unint64_t v10 = v11 | ((unint64_t)v12 << 32);
  *(_BYTE *)(a1 + 44) = v12;
  *(_DWORD *)(a1 + 40) = v9;
  if (v10 >= 0x8000000002LL)
  {
    uint64_t result = nw_utilities_minos_atleast();
    if ((_DWORD)result)
    {
      sub_181BDA294(*(void *)(a1 + 8));
      *(void *)(a1 + 8) = 0LL;
      *(void *)(a1 + 16) = 0LL;
      uint64_t result = sub_181BDA294(*(void *)(a1 + 24));
      *(void *)(a1 + 24) = 0LL;
      *(void *)(a1 + 32) = 0LL;
    }
  }

  *(_DWORD *)a4 = v10;
  *(_BYTE *)(a4 + 4) = BYTE4(v10);
  return result;
}

uint64_t sub_181C75100@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = sub_181BD639C;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v5 = 0LL;
  }

  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;
  return sub_181BDA298(v3);
}

uint64_t (*NWConnectionGroup.stateUpdateHandler.modify(uint64_t (**a1)()))(uint64_t *a1, char a2)
{
  a1[2] = (uint64_t (*)())v1;
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  uint64_t v4 = (uint64_t)&v3[4];
  uint64_t v5 = v3 + 18;
  os_unfair_lock_lock(v3 + 18);
  sub_181C75100(v4, v10);
  os_unfair_lock_unlock(v5);
  uint64_t v6 = v10[0];
  if (v10[0])
  {
    __int128 v9 = *(_OWORD *)v10;
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = v9;
    uint64_t v6 = sub_181BDA300;
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  *a1 = v6;
  a1[1] = (uint64_t (*)())v7;
  return sub_181C7521C;
}

uint64_t sub_181C7521C(uint64_t *a1, char a2)
{
  return sub_181BD2348( a1,  a2,  NWConnectionGroup.stateUpdateHandler.setter,  (void (*)(uint64_t, uint64_t))sub_181C7771C,  (uint64_t (*)(uint64_t, uint64_t))sub_181C77720);
}

nw_protocol_metadata *NWConnectionGroup.metadata(definition:)(uint64_t a1)
{
  uint64_t result =  nw_connection_group_copy_protocol_metadata( *(nw_connection_group_t *)(v1 + 24),  *(nw_protocol_definition_t *)(a1 + 32));
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = sub_181C32C0C((uint64_t)result);
    if (v4)
    {
      return (nw_protocol_metadata *)((uint64_t (*)(nw_protocol_metadata *))v4[12])(v3);
    }

    else
    {
      swift_unknownObjectRelease();
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_181C75298()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 72) = 0LL;
  *(void *)(v0 + 16) = &__block_literal_global_41831;
  *(void *)(v0 + 48) = 0LL;
  *(void *)(v0 + 56) = 0LL;
  *(void *)(v0 + 40) = 0LL;
  uint64_t v1 = (nw_content_context *)swift_unknownObjectRetain_n();
  *(_BYTE *)(v0 + 64) = nw_content_context_get_is_final(v1);
  nw_content_context_get_identifier((nw_content_context_t)&__block_literal_global_41831);
  uint64_t v2 = sub_18264EB80();
  uint64_t v4 = v3;
  uint64_t result = swift_unknownObjectRelease();
  *(void *)(v0 + 24) = v2;
  *(void *)(v0 + 32) = v4;
  *(void *)(v0 + 72) = 0LL;
  qword_18C58E3A0 = v0;
  return result;
}

uint64_t static NWConnectionGroup.Message.default.getter()
{
  if (qword_18C58B240 != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t sub_181C75368@<X0>(uint64_t a1@<X8>)
{
  return sub_181C75380( (uint64_t (*)(uint64_t, uint64_t))nw_connection_group_copy_remote_endpoint_for_message,  a1);
}

uint64_t sub_181C75374@<X0>(uint64_t a1@<X8>)
{
  return sub_181C75380( (uint64_t (*)(uint64_t, uint64_t))nw_connection_group_copy_local_endpoint_for_message,  a1);
}

uint64_t sub_181C75380@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 72);
  if (v4)
  {
    uint64_t v6 = *(void *)(v4 + 24);
    uint64_t v7 = *(void *)(v2 + 16);
    swift_retain();
    uint64_t v8 = (nw_endpoint *)a1(v6, v7);
    sub_181BDA308(v8, a2);
    return swift_release();
  }

  else
  {
    uint64_t v10 = type metadata accessor for NWEndpoint();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))( a2,  1LL,  1LL,  v10);
  }

uint64_t sub_181C75414(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 72);
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = *(nw_connection_group **)(v2 + 24);
  uint64_t v4 = *(nw_content_context **)(v1 + 16);
  uint64_t v5 = *(nw_protocol_definition **)(a1 + 32);
  swift_retain();
  uint64_t v6 = nw_connection_group_copy_protocol_metadata_for_message(v3, v4, v5);
  uint64_t v7 = (uint64_t)v6;
  if (v6)
  {
    uint64_t v8 = sub_181C32C0C((uint64_t)v6);
    if (v8)
    {
      uint64_t v7 = ((uint64_t (*)(uint64_t))v8[12])(v7);
      goto LABEL_5;
    }

    swift_release();
    swift_unknownObjectRelease();
    return 0LL;
  }

uint64_t sub_181C754B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 72);
  if (v3)
  {
    uint64_t v4 = *(nw_connection_group **)(v3 + 24);
    uint64_t v5 = *(nw_content_context **)(v1 + 16);
    swift_retain();
    uint64_t v6 = nw_connection_group_copy_path_for_message(v4, v5);
    sub_181C10170(v6, a1);
    swift_release();
    uint64_t v7 = type metadata accessor for NWPath(0LL);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL);
    uint64_t v9 = a1;
    uint64_t v10 = 0LL;
  }

  else
  {
    uint64_t v7 = type metadata accessor for NWPath(0LL);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL);
    uint64_t v9 = a1;
    uint64_t v10 = 1LL;
  }

  return v8(v9, v10, 1LL, v7);
}

void sub_181C75550(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(v3 + 72);
  if (v4)
  {
    swift_retain();
    if (a2 >> 60 == 15) {
      uint64_t v8 = 0LL;
    }
    else {
      uint64_t v8 = (void *)sub_18264E5EC();
    }
    uint64_t v9 = NWCreateDispatchDataFromNSData(v8, v7);

    uint64_t v10 = *(nw_connection_group **)(v4 + 24);
    unsigned int v11 = *(nw_content_context **)(v3 + 16);
    unsigned __int8 v12 = *(nw_content_context **)(a3 + 16);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    if (v9)
    {
      uint64_t v13 = v9;
      nw_connection_group_reply(v10, v11, v12, v13);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
    }

    else
    {
      nw_connection_group_reply(v10, v11, v12, 0LL);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
    }

    swift_release();
  }

nw_connection *sub_181C75674()
{
  uint64_t v1 = *(void *)(v0 + 72);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = *(nw_connection_group **)(v1 + 24);
  uint64_t v3 = *(nw_content_context **)(v0 + 16);
  swift_retain();
  connection_for_message = nw_connection_group_extract_connection_for_message(v2, v3);
  if (connection_for_message)
  {
    uint64_t v5 = swift_retain();
    connection_for_message = (nw_connection *)sub_181C6BDFC(v5, connection_for_message);
  }

  swift_release();
  return connection_for_message;
}

void NWConnectionGroup.Message.__allocating_init(identifier:expiration:priority:isFinal:antecedent:metadata:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t a6, double a7)
{
  *(void *)(swift_allocObject() + 72) = 0LL;
  NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)( a1,  a2,  a3,  a4,  a5,  a6,  a7);
}

void NWConnectionGroup.Message.init(identifier:expiration:priority:isFinal:antecedent:metadata:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t a6, double a7)
{
  *(void *)(v7 + 72) = 0LL;
  NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)( a1,  a2,  a3,  a4,  a5,  a6,  a7);
}

uint64_t NWConnectionGroup.Message.__allocating_init(nw:)(nw_content_context *a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 72) = 0LL;
  *(void *)(v2 + 16) = a1;
  uint64_t v3 = (nw_content_context *)swift_unknownObjectRetain();
  *(void *)(v2 + 40) = nw_content_context_get_expiration_milliseconds(v3);
  *(double *)(v2 + 48) = nw_content_context_get_relative_priority(a1);
  *(_BYTE *)(v2 + 64) = nw_content_context_get_is_final(a1);
  nw_content_context_get_identifier(a1);
  *(void *)(v2 + 24) = sub_18264EB80();
  *(void *)(v2 + 32) = v4;
  uint64_t v5 = nw_content_context_copy_antecedent(a1);
  uint64_t v6 = sub_181C6C1A8(v5);
  swift_unknownObjectRelease();
  *(void *)(v2 + 56) = v6;
  return v2;
}

uint64_t NWConnectionGroup.Message.init(nw:)(nw_content_context *a1)
{
  *(void *)(v1 + 72) = 0LL;
  *(void *)(v1 + 16) = a1;
  uint64_t v3 = (nw_content_context *)swift_unknownObjectRetain();
  *(void *)(v1 + 40) = nw_content_context_get_expiration_milliseconds(v3);
  *(double *)(v1 + 48) = nw_content_context_get_relative_priority(a1);
  *(_BYTE *)(v1 + 64) = nw_content_context_get_is_final(a1);
  nw_content_context_get_identifier(a1);
  *(void *)(v1 + 24) = sub_18264EB80();
  *(void *)(v1 + 32) = v4;
  uint64_t v5 = nw_content_context_copy_antecedent(a1);
  *(void *)(v1 + 56) = sub_181C6C1A8(v5);
  swift_unknownObjectRelease();
  return v1;
}

uint64_t sub_181C75888()
{
  return swift_release();
}

uint64_t NWConnectionGroup.Message.deinit()
{
  uint64_t v0 = NWConnection.ContentContext.deinit();
  swift_release();
  return v0;
}

uint64_t NWConnectionGroup.Message.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void NWConnectionGroup.setReceiveHandler(maximumMessageSize:rejectOversizedMessages:handler:)( unint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  if (a1 > 0xFFFFFFFE) {
    uint32_t v6 = -1;
  }
  else {
    uint32_t v6 = a1;
  }
  if (a3)
  {
    uint64_t v9 = *(nw_connection_group **)(v4 + 24);
    uint64_t v10 = (void *)swift_allocObject();
    v10[2] = v4;
    v10[3] = a3;
    v10[4] = a4;
    void v12[4] = sub_181C76DE4;
    v12[5] = v10;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 1107296256LL;
    uint64_t v12[2] = sub_181C75B20;
    v12[3] = &block_descriptor_13_0;
    unsigned int v11 = _Block_copy(v12);
    sub_181BDA298(a3);
    sub_181BDA298(a3);
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    nw_connection_group_set_receive_handler(v9, v6, a2 & 1, v11);
    _Block_release(v11);
    swift_unknownObjectRelease();
    sub_181BDA294(a3);
  }

  else
  {
    nw_connection_group_set_receive_handler(*(nw_connection_group_t *)(v4 + 24), v6, a2 & 1, 0LL);
  }

uint64_t sub_181C75A38( void *a1, nw_content_context *a2, char a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, unint64_t, void))
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 72) = 0LL;
  *(void *)(v10 + 16) = a2;
  *(void *)(v10 + 48) = 0LL;
  *(void *)(v10 + 56) = 0LL;
  *(void *)(v10 + 40) = 0LL;
  swift_retain();
  unsigned int v11 = (nw_content_context *)swift_unknownObjectRetain();
  *(_BYTE *)(v10 + 64) = nw_content_context_get_is_final(v11);
  nw_content_context_get_identifier(a2);
  *(void *)(v10 + 24) = sub_18264EB80();
  *(void *)(v10 + 32) = v12;
  *(void *)(v10 + 72) = a4;
  uint64_t v13 = NWCreateNSDataFromDispatchData(a1);
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = sub_18264E5F8();
    unint64_t v17 = v16;
  }

  else
  {
    uint64_t v15 = 0LL;
    unint64_t v17 = 0xF000000000000000LL;
  }

  a5(v10, v15, v17, a3 & 1);
  sub_181BE61C8(v15, v17);
  return swift_release();
}

void sub_181C75B20(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void (**)(void *, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  id v8 = a2;
  swift_unknownObjectRetain();
  v7(a2, a3, a4);
  swift_release();
  swift_unknownObjectRelease();
}

uint64_t NWConnectionGroup.send(content:to:message:completion:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)aBlock - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *(nw_connection_group **)(v6 + 24);
  swift_unknownObjectRetain();
  if (a2 >> 60 == 15) {
    unint64_t v17 = 0LL;
  }
  else {
    unint64_t v17 = (void *)sub_18264E5EC();
  }
  __int16 v18 = (dispatch_data_s *)NWCreateDispatchDataFromNSData(v17, v16);

  sub_181C6C37C(a3, (uint64_t)v14);
  uint64_t v19 = type metadata accessor for NWEndpoint();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48LL))(v14, 1LL, v19) == 1)
  {
    sub_181BDA0F0((uint64_t)v14, &qword_18C45E580);
    uint64_t v20 = 0LL;
  }

  else
  {
    NWEndpoint.nw.getter();
    uint64_t v20 = v21;
    sub_181BE4788((uint64_t)v14);
  }

  char v22 = *(nw_content_context **)(a4 + 16);
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = a5;
  *(void *)(v23 + 24) = a6;
  aBlock[4] = sub_181BBF9F8;
  aBlock[5] = v23;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_181BBF440;
  void aBlock[3] = &block_descriptor_19_0;
  uint64_t v24 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_connection_group_send_message(v15, v18, v20, v22, v24);
  _Block_release(v24);
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t (*NWConnectionGroup.newConnectionHandler.getter())(uint64_t a1)
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 18;
  os_unfair_lock_lock(v1 + 18);
  sub_181C760F4(v2, &v6);
  os_unfair_lock_unlock(v3);
  if (!(void)v6) {
    return 0LL;
  }
  __int128 v5 = v6;
  *(_OWORD *)(swift_allocObject() + 16) = v5;
  return sub_181BF9778;
}

double sub_181C75E24@<D0>( uint64_t a1@<X0>, void (*a2)(__int128 *__return_ptr, os_unfair_lock_s *)@<X3>, _OWORD *a3@<X8>)
{
  __int128 v5 = *(os_unfair_lock_s **)(*(void *)a1 + 16LL);
  __int128 v6 = v5 + 4;
  uint64_t v7 = v5 + 18;
  os_unfair_lock_lock(v5 + 18);
  a2(&v9, v6);
  os_unfair_lock_unlock(v7);
  double result = *(double *)&v9;
  *a3 = v9;
  return result;
}

void sub_181C75E98(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_181C77770;
  }

  else
  {
    uint64_t v4 = 0LL;
    uint64_t v3 = 0LL;
  }

  sub_181BDA298(v1);
  NWConnectionGroup.newConnectionHandler.setter((uint64_t)v4, v3);
}

void NWConnectionGroup.newConnectionHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 72));
  uint64_t v6 = *(void *)(v5 + 40);
  sub_181BDA298(a1);
  sub_181BDA294(v6);
  *(void *)(v5 + 40) = a1;
  *(void *)(v5 + 48) = a2;
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 72));
  if (a1)
  {
    uint64_t v7 = *(nw_connection_group **)(v2 + 24);
    id v8 = (void *)swift_allocObject();
    void v8[2] = v2;
    void v8[3] = a1;
    uint64_t v8[4] = a2;
    v10[4] = sub_181C76DF4;
    v10[5] = v8;
    v10[0] = MEMORY[0x1895F87A8];
    v10[1] = 1107296256LL;
    v10[2] = sub_181BFB944;
    v10[3] = &block_descriptor_28;
    __int128 v9 = _Block_copy(v10);
    sub_181BDA298(a1);
    sub_181BDA298(a1);
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    nw_connection_group_set_new_connection_handler(v7, v9);
    sub_181BDA294(a1);
    _Block_release(v9);
    swift_unknownObjectRelease();
    sub_181BDA294(a1);
  }

  else
  {
    nw_connection_group_set_new_connection_handler(*(nw_connection_group_t *)(v2 + 24), 0LL);
  }

void sub_181C76084(nw_connection *a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v5 = *(void *)(a2 + 48);
  swift_retain();
  swift_unknownObjectRetain();
  if (sub_181C6BDFC(v5, a1))
  {
    a3();
    swift_release();
  }

  else
  {
    nw_connection_cancel(a1);
  }

uint64_t sub_181C760F4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = sub_181C00730;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v5 = 0LL;
  }

  *a2 = v6;
  a2[1] = v5;
  return sub_181BDA298(v3);
}

uint64_t (*NWConnectionGroup.newConnectionHandler.modify( uint64_t (**a1)(uint64_t)))(uint64_t *a1, char a2)
{
  a1[2] = (uint64_t (*)(uint64_t))v1;
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  uint64_t v4 = (uint64_t)&v3[4];
  uint64_t v5 = v3 + 18;
  os_unfair_lock_lock(v3 + 18);
  sub_181C760F4(v4, &v10);
  os_unfair_lock_unlock(v5);
  uint64_t v6 = (uint64_t (*)(uint64_t))v10;
  if ((void)v10)
  {
    __int128 v9 = v10;
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = v9;
    uint64_t v6 = sub_181C77770;
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  *a1 = v6;
  a1[1] = (uint64_t (*)(uint64_t))v7;
  return sub_181C76210;
}

uint64_t sub_181C76210(uint64_t *a1, char a2)
{
  return sub_181BD2348( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t))NWConnectionGroup.newConnectionHandler.setter,  (void (*)(uint64_t, uint64_t))sub_181BDA298,  (uint64_t (*)(uint64_t, uint64_t))sub_181BDA294);
}

uint64_t NWConnectionGroup.extract(connectionTo:using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v8 = *(nw_connection_group **)(v2 + 24);
  sub_181C6C37C(a1, (uint64_t)v7);
  uint64_t v9 = type metadata accessor for NWEndpoint();
  int v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v7, 1LL, v9);
  swift_unknownObjectRetain();
  if (v10 == 1)
  {
    sub_181BDA0F0((uint64_t)v7, &qword_18C45E580);
    unsigned int v11 = 0LL;
    if (a2)
    {
LABEL_3:
      uint64_t v12 = *(nw_protocol_options **)(a2 + 16);
      swift_unknownObjectRetain();
      goto LABEL_6;
    }
  }

  else
  {
    NWEndpoint.nw.getter();
    unsigned int v11 = v13;
    sub_181BE4788((uint64_t)v7);
    if (a2) {
      goto LABEL_3;
    }
  }

  uint64_t v12 = 0LL;
LABEL_6:
  connection = nw_connection_group_extract_connection(v8, v11, v12);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (connection) {
    return _s7Network12NWConnectionCyACSgSo16OS_nw_connection_pcfC_0(connection);
  }
  else {
    return 0LL;
  }
}

BOOL NWConnectionGroup.reinsert(connection:)(uint64_t a1)
{
  return nw_connection_group_reinsert_extracted_connection( *(nw_connection_group_t *)(v1 + 24),  *(nw_connection_t *)(a1 + 16));
}

uint64_t NWConnectionGroup.descriptor.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t NWConnectionGroup.parameters.getter()
{
  return swift_retain();
}

uint64_t NWConnectionGroup.__allocating_init(with:using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_181C76E00(a1, a2, a3);
  swift_unknownObjectRelease();
  swift_release();
  return v6;
}

uint64_t NWConnectionGroup.init(with:using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = sub_181C76E00(a1, a2, a3);
  swift_unknownObjectRelease();
  swift_release();
  return v3;
}

uint64_t sub_181C76458(nw_connection_group *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E418);
  uint64_t v7 = swift_allocObject();
  *(_DWORD *)(v7 + 72) = 0;
  *(_BYTE *)(v7 + 16) = 0;
  *(_OWORD *)(v7 + 24) = 0u;
  *(_OWORD *)(v7 + 40) = 0u;
  *(_BYTE *)(v7 + 60) = 0x80;
  *(_DWORD *)(v7 + 56) = 0;
  *(void *)(v7 + 64) = 0LL;
  _OWORD v2[2] = v7;
  nw_parameters_t v8 = nw_connection_group_copy_parameters(a1);
  type metadata accessor for NWParameters();
  uint64_t v9 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A220);
  uint64_t v10 = swift_allocObject();
  *(_DWORD *)(v10 + 24) = 0;
  *(void *)(v10 + 16) = v8;
  *(void *)(v9 + 16) = v10;
  v2[6] = v9;
  nw_group_descriptor_t v11 = nw_connection_group_copy_descriptor(a1);
  int type = nw_group_descriptor_get_type(v11);
  if (type == 1)
  {
    type metadata accessor for NWMulticastGroup(0LL);
    uint64_t v13 = swift_allocObject();
    sub_181C732D0(v11);
    __int16 v18 = &protocol witness table for NWMulticastGroup;
    goto LABEL_8;
  }

  if (type == 3)
  {
    type metadata accessor for NWApplicationServiceGroup(0LL);
    uint64_t v13 = swift_allocObject();
    sub_181C73FD0(v11);
    __int16 v18 = &protocol witness table for NWApplicationServiceGroup;
    goto LABEL_8;
  }

  if (type != 2)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_deallocPartialClassInstance();
    return 0LL;
  }

  type metadata accessor for NWMultiplexGroup(0LL);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + OBJC_IVAR____TtC7Network16NWMultiplexGroup__nw) = v11;
  uint64_t v14 = (void *)swift_unknownObjectRetain();
  nw_group_descriptor_copy_member(v14);
  uint64_t v15 = (nw_endpoint *)swift_unknownObjectRetain();
  sub_181BDA308(v15, (uint64_t)v6);
  uint64_t v16 = type metadata accessor for NWEndpoint();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48LL))(v6, 1LL, v16);
  if ((_DWORD)result != 1)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_181BE4800((uint64_t)v6, v13 + OBJC_IVAR____TtC7Network16NWMultiplexGroup_remoteEndpoint);
    __int16 v18 = &protocol witness table for NWMultiplexGroup;
LABEL_8:
    v2[4] = v13;
    v2[5] = v18;
    v2[3] = a1;
    return (uint64_t)v2;
  }

  __break(1u);
  return result;
}

uint64_t NWConnectionGroup.__allocating_init(_:)(nw_connection_group *a1)
{
  return sub_181C76458(a1);
}

void NWConnectionGroup.start(queue:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 72));
  uint64_t v5 = *(void **)(v4 + 64);
  uint64_t v6 = a1;

  *(void *)(v4 + 64) = a1;
  *(_BYTE *)(v4 + 16) = 1;
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 72));
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 72));
  sub_181C75100(v4 + 16, v11);
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 72));
  if (v11[0])
  {
    __int128 v10 = *(_OWORD *)v11;
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = v10;
    nw_parameters_t v8 = sub_181BDA300;
  }

  else
  {
    nw_parameters_t v8 = 0LL;
    uint64_t v7 = 0LL;
  }

  sub_181BDA298((uint64_t)v8);
  sub_181BDA298((uint64_t)v8);
  NWConnectionGroup.stateUpdateHandler.setter((uint64_t)v8, v7);
  sub_181BDA294((uint64_t)v8);
  sub_181BDA294((uint64_t)v8);
  uint64_t v9 = *(nw_connection_group **)(v2 + 24);
  nw_connection_group_set_queue(v9, v6);
  nw_connection_group_start(v9);
}

void *NWConnectionGroup.queue.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (os_unfair_lock_s *)(v1 + 72);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 72));
  uint64_t v3 = *(void **)(v1 + 64);
  id v4 = v3;
  os_unfair_lock_unlock(v2);
  return v3;
}

Swift::Void __swiftcall NWConnectionGroup.cancel()()
{
}

uint64_t NWConnectionGroup.deinit()
{
  return v0;
}

uint64_t NWConnectionGroup.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t NWConnection.__allocating_init(message:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NWEndpoint();
  MEMORY[0x1895F8858](v2);
  id v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = *(void *)(a1 + 72);
  if (!v5) {
    goto LABEL_7;
  }
  uint64_t v6 = *(nw_connection_group **)(v5 + 24);
  uint64_t v7 = *(nw_content_context **)(a1 + 16);
  swift_retain();
  nw_connection_t connection_for_message = nw_connection_group_extract_connection_for_message(v6, v7);
  if (!connection_for_message)
  {
    swift_release();
LABEL_7:
    swift_release();
    return 0LL;
  }

  uint64_t v9 = connection_for_message;
  uint64_t v10 = swift_retain();
  uint64_t v11 = sub_181C6BDFC(v10, v9);
  swift_release();
  if (!v11) {
    goto LABEL_7;
  }
  sub_181BE4744(v11 + OBJC_IVAR____TtC7Network13_NWConnection_endpoint, (uint64_t)v4);
  uint64_t v12 = *(void *)(v11 + OBJC_IVAR____TtC7Network13_NWConnection_parameters);
  uint64_t v13 = *(void *)(v11 + 16);
  swift_allocObject();
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v14 = sub_181C6BD24((uint64_t)v4, v12, v13);
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  return v14;
}

uint64_t NWConnection.__allocating_init(from:to:using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NWEndpoint();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  uint64_t v36 = (uint64_t)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = MEMORY[0x1895F8858](v8);
  uint64_t v12 = (char *)&v36 - v11;
  MEMORY[0x1895F8858](v10);
  uint64_t v37 = (uint64_t)&v36 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
  uint64_t v15 = MEMORY[0x1895F8858](v14);
  unint64_t v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  uint64_t v19 = (char *)&v36 - v18;
  uint64_t v20 = *(nw_connection_group **)(a1 + 24);
  sub_181C6C37C(a2, (uint64_t)&v36 - v18);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v7) = v21(v19, 1LL, v6);
  swift_unknownObjectRetain();
  if ((_DWORD)v7 == 1)
  {
    sub_181BDA0F0((uint64_t)v19, &qword_18C45E580);
    char v22 = 0LL;
    uint64_t v38 = a2;
    if (a3)
    {
LABEL_3:
      uint64_t v23 = *(nw_protocol_options **)(a3 + 16);
      swift_unknownObjectRetain();
      goto LABEL_6;
    }
  }

  else
  {
    NWEndpoint.nw.getter();
    char v22 = v24;
    sub_181BE4788((uint64_t)v19);
    uint64_t v38 = a2;
    if (a3) {
      goto LABEL_3;
    }
  }

  uint64_t v23 = 0LL;
LABEL_6:
  connection = nw_connection_group_extract_connection(v20, v22, v23);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (connection)
  {
    uint64_t v26 = nw_connection_copy_endpoint(connection);
    sub_181BDA308(v26, (uint64_t)v17);
    if (!v21(v17, 1LL, v6))
    {
      sub_181BE4800((uint64_t)v17, (uint64_t)v12);
      uint64_t v29 = v37;
      sub_181BE4800((uint64_t)v12, v37);
      uint64_t v30 = nw_connection_copy_parameters(connection);
      nw_parameters_t v31 = nw_parameters_copy(v30);
      swift_unknownObjectRelease();
      type metadata accessor for NWParameters();
      uint64_t v32 = swift_allocObject();
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A220);
      uint64_t v33 = swift_allocObject();
      *(_DWORD *)(v33 + 24) = 0;
      *(void *)(v33 + 16) = v31;
      *(void *)(v32 + 16) = v33;
      uint64_t v34 = v36;
      sub_181BE4744(v29, v36);
      swift_allocObject();
      uint64_t v28 = sub_181C6BD24(v34, v32, (uint64_t)connection);
      swift_release();
      swift_release();
      swift_unknownObjectRelease();
      swift_release();
      sub_181BDA0F0(v38, &qword_18C45E580);
      sub_181BE4788(v29);
      return v28;
    }

    sub_181BDA0F0((uint64_t)v17, &qword_18C45E580);
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    uint64_t v27 = v38;
  }

  else
  {
    swift_release();
    swift_release();
    uint64_t v27 = v38;
  }

  sub_181BDA0F0(v27, &qword_18C45E580);
  return 0LL;
}

uint64_t sub_181C76D64()
{
  return swift_deallocObject();
}

uint64_t sub_181C76D88()
{
  if (*(void *)(v0 + 24)) {
    swift_release();
  }
  return swift_deallocObject();
}

void sub_181C76DBC(uint64_t a1, nw_error *a2)
{
}

uint64_t block_copy_helper_16(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_16()
{
  return swift_release();
}

uint64_t sub_181C76DE4(void *a1, nw_content_context *a2, char a3)
{
  return sub_181C75A38( a1,  a2,  a3,  *(void *)(v3 + 16),  *(void (**)(uint64_t, uint64_t, unint64_t, void))(v3 + 24));
}

void sub_181C76DF4(nw_connection *a1)
{
}

uint64_t sub_181C76E00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E418);
  uint64_t v8 = swift_allocObject();
  *(_DWORD *)(v8 + 72) = 0;
  *(_BYTE *)(v8 + 16) = 0;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_BYTE *)(v8 + 60) = 0x80;
  *(_DWORD *)(v8 + 56) = 0;
  *(void *)(v8 + 64) = 0LL;
  v4[2] = v8;
  v4[4] = a1;
  v4[5] = a2;
  v4[6] = a3;
  type metadata accessor for NWMultiplexGroup(0LL);
  uint64_t v9 = swift_dynamicCastClass();
  if (v9)
  {
    uint64_t v10 = *(nw_group_descriptor **)(v9 + OBJC_IVAR____TtC7Network16NWMultiplexGroup__nw);
    if (v10) {
      goto LABEL_8;
    }
    __break(1u);
  }

  type metadata accessor for NWApplicationServiceGroup(v9);
  uint64_t v11 = swift_dynamicCastClass();
  if (!v11) {
    goto LABEL_7;
  }
  uint64_t v10 = *(nw_group_descriptor **)(v11 + OBJC_IVAR____TtC7Network25NWApplicationServiceGroup__nw);
  if (v10)
  {
LABEL_8:
    uint64_t v13 = *(void *)(a3 + 16);
    uint64_t v14 = (void *)(v13 + 16);
    uint64_t v15 = (os_unfair_lock_s *)(v13 + 24);
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_unknownObjectRetain();
    os_unfair_lock_lock(v15);
    sub_181C96C68(v14, &parameters);
    os_unfair_lock_unlock(v15);
    nw_connection_group_t v16 = nw_connection_group_create(v10, parameters);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v4[3] = v16;
    sub_181BDA298(0LL);
    NWConnectionGroup.stateUpdateHandler.setter(0LL, 0LL);
    return (uint64_t)v4;
  }

  __break(1u);
LABEL_7:
  type metadata accessor for NWMulticastGroup(v11);
  uint64_t result = swift_dynamicCastClassUnconditional();
  uint64_t v10 = *(nw_group_descriptor **)(result + OBJC_IVAR____TtC7Network16NWMulticastGroup__nw);
  if (v10) {
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

double sub_181C76FA8@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_181C75E24(a1, (void (*)(__int128 *__return_ptr, os_unfair_lock_s *))sub_181C75100, a2);
}

double sub_181C76FC8@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_181C75E24(a1, (void (*)(__int128 *__return_ptr, os_unfair_lock_s *))sub_181C760F4, a2);
}

uint64_t dispatch thunk of NWGroupDescriptor.members.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_181C76FF0()
{
  return type metadata accessor for NWMulticastGroup(0LL);
}

void sub_181C76FF8()
{
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for NWMulticastGroup()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWMulticastGroup.members.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112LL))();
}

uint64_t dispatch thunk of NWMulticastGroup.__allocating_init(for:from:disableUnicast:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of NWMulticastGroup.nw.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160LL))();
}

uint64_t sub_181C770C4()
{
  return type metadata accessor for NWMultiplexGroup(0LL);
}

uint64_t sub_181C770CC()
{
  uint64_t result = type metadata accessor for NWEndpoint();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t method lookup function for NWMultiplexGroup()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWMultiplexGroup.members.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96LL))();
}

uint64_t dispatch thunk of NWMultiplexGroup.__allocating_init(to:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of NWMultiplexGroup.nw.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120LL))();
}

uint64_t sub_181C7716C()
{
  return type metadata accessor for NWApplicationServiceGroup(0LL);
}

uint64_t type metadata accessor for NWApplicationServiceGroup(uint64_t a1)
{
  return sub_181BD62C8(a1, (uint64_t *)&unk_18C58A158);
}

uint64_t sub_181C77188()
{
  uint64_t result = sub_18264E688();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t method lookup function for NWApplicationServiceGroup()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWApplicationServiceGroup.__allocating_init(for:id:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t type metadata accessor for NWConnectionGroup()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWConnectionGroup()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWConnectionGroup.__allocating_init(with:using:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

ValueMetadata *type metadata accessor for NWConnectionGroup.State()
{
  return &type metadata for NWConnectionGroup.State;
}

uint64_t type metadata accessor for NWConnectionGroup.Message()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWConnectionGroup.Message()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWConnectionGroup.Message.remoteEndpoint.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208LL))();
}

uint64_t dispatch thunk of NWConnectionGroup.Message.localEndpoint.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216LL))();
}

uint64_t dispatch thunk of NWConnectionGroup.Message.metadata(definition:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224LL))();
}

uint64_t dispatch thunk of NWConnectionGroup.Message.path.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232LL))();
}

uint64_t dispatch thunk of NWConnectionGroup.Message.reply(content:message:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240LL))();
}

uint64_t dispatch thunk of NWConnectionGroup.Message.extractConnection()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248LL))();
}

void destroy for NWConnectionGroup.LockedState(uint64_t a1)
{
  if (*(void *)(a1 + 8)) {
    swift_release();
  }
  if (*(void *)(a1 + 24)) {
    swift_release();
  }
}

uint64_t initializeWithCopy for NWConnectionGroup.LockedState(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    swift_retain();
  }

  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }

  uint64_t v6 = *(void *)(a2 + 24);
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = v7;
    swift_retain();
  }

  else
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }

  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  uint64_t v8 = *(void **)(a2 + 48);
  *(void *)(a1 + 48) = v8;
  id v9 = v8;
  return a1;
}

uint64_t assignWithCopy for NWConnectionGroup.LockedState(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  uint64_t v6 = (_OWORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8))
  {
    if (v5)
    {
      uint64_t v7 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v7;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }

    swift_release();
  }

  else if (v5)
  {
    uint64_t v8 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v8;
    swift_retain();
    goto LABEL_8;
  }

  *uint64_t v4 = *v6;
LABEL_8:
  uint64_t v9 = *(void *)(a2 + 24);
  if (!*(void *)(a1 + 24))
  {
    if (v9)
    {
      uint64_t v11 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v9;
      *(void *)(a1 + 32) = v11;
      swift_retain();
      goto LABEL_15;
    }

uint64_t assignWithTake for NWConnectionGroup.LockedState(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  uint64_t v6 = (_OWORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8))
  {
    if (v5)
    {
      uint64_t v7 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v7;
      swift_release();
      goto LABEL_8;
    }

    swift_release();
  }

  else if (v5)
  {
    uint64_t v8 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v8;
    goto LABEL_8;
  }

  *uint64_t v4 = *v6;
LABEL_8:
  uint64_t v9 = *(void *)(a2 + 24);
  if (!*(void *)(a1 + 24))
  {
    if (v9)
    {
      uint64_t v11 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v9;
      *(void *)(a1 + 32) = v11;
      goto LABEL_15;
    }

uint64_t getEnumTagSinglePayload for NWConnectionGroup.LockedState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NWConnectionGroup.LockedState( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 56) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 56) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NWConnectionGroup.LockedState()
{
  return &type metadata for NWConnectionGroup.LockedState;
}

uint64_t sub_181C77680()
{
  return swift_deallocObject();
}

uint64_t sub_181C77690(uint64_t a1)
{
  return sub_181C741E4(a1, *(unint64_t **)(v1 + 16));
}

uint64_t sub_181C77698()
{
  return swift_deallocObject();
}

uint64_t sub_181C776A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_181C776F0()
{
  return swift_deallocObject();
}

uint64_t sub_181C77700()
{
  return sub_181C73490();
}

uint64_t sub_181C77708()
{
  return swift_deallocObject();
}

void static BonjourMetadataProviders.None.none.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t BonjourMetadataProviders.None.shouldFetchMetadata.getter()
{
  return *v0;
}

uint64_t BonjourMetadataProviders.None.makeMetadata(from:)()
{
  return 0LL;
}

uint64_t sub_181C7778C()
{
  return *v0;
}

void static BonjourMetadataProviders.Default.default.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t BonjourMetadataProviders.Default.shouldFetchMetadata.getter()
{
  return *v0;
}

uint64_t BonjourMetadataProviders.Default.makeMetadata(from:)@<X0>( uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  unint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  if (!*a1)
  {
    unint64_t v6 = sub_181C88134(MEMORY[0x18961AFE8]);
    NWTXTRecord.init(_:)(v6, v8);
    unint64_t v4 = v8[0];
    unint64_t v5 = v8[1];
  }

  *a2 = v4;
  a2[1] = v5;
  return sub_181BD2FFC(v3);
}

uint64_t sub_181C77808@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  unint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  if (!*a1)
  {
    unint64_t v6 = sub_181C88134(MEMORY[0x18961AFE8]);
    NWTXTRecord.init(_:)(v6, v8);
    unint64_t v4 = v8[0];
    unint64_t v5 = v8[1];
  }

  *a2 = v4;
  a2[1] = v5;
  return sub_181BD2FFC(v3);
}

uint64_t BonjourMetadataProviders.DecodeResult.shouldFetchMetadata.getter()
{
  return *v0;
}

uint64_t BonjourMetadataProviders.DecodeResult.makeMetadata(from:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    MEMORY[0x1895F8858](a1);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D6A0);
    sub_181C77A24((void (*)(_BYTE *))sub_181C779DC, a2);
    sub_181BD6288(v3);
    uint64_t v4 = sub_18264F6B4();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a2, 0LL, 1LL, v4);
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C58D6A0);
    uint64_t v6 = sub_18264F6B4();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))( a2,  1LL,  1LL,  v6);
  }

uint64_t sub_181C779DC(void *a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  __int128 v6 = *(_OWORD *)(v1 + 40);
  uint64_t result = TXTRecordDecoder.decode<A>(_:from:)(v4, (uint64_t *)&v6);
  if (v2) {
    *a1 = v2;
  }
  return result;
}

uint64_t sub_181C77A24@<X0>(void (*a1)(_BYTE *)@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v6 = sub_18264F6B4();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = &v11[-v8];
  a1(v5);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v7 + 32))(a2, v9, v6);
}

void static BonjourMetadataProviders.Decode.decode(_:decoder:)(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t BonjourMetadataProviders.Decode.shouldFetchMetadata.getter()
{
  return *v0;
}

uint64_t BonjourMetadataProviders.Decode.makeMetadata(from:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!*a1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(*(void *)(a2 + 16) - 8LL) + 56LL))( a3,  1LL,  1LL,  *(void *)(a2 + 16));
  }
  uint64_t v4 = a1[1];
  v7[0] = *a1;
  v7[1] = v4;
  uint64_t v5 = *(void *)(a2 + 16);
  TXTRecordDecoder.decode<A>(_:from:)(v5, v7);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(a3, 0LL, 1LL, v5);
}

uint64_t sub_181C77C08@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return BonjourMetadataProviders.Decode.makeMetadata(from:)(a1, a2, a3);
}

uint64_t BonjourEndpoint.id.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + *(int *)(a1 + 32));
  swift_bridgeObjectRetain();
  sub_18264EB74();
  swift_bridgeObjectRetain();
  sub_18264EB74();
  swift_bridgeObjectRelease();
  sub_18264EB74();
  swift_bridgeObjectRetain();
  sub_18264EB74();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t BonjourEndpoint.nw.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for NWBrowser.Result(0LL);
  return sub_181BC9248( v1 + *(int *)(v3 + 20),  a1,  (uint64_t (*)(void))type metadata accessor for NWEndpoint);
}

uint64_t BonjourEndpoint.description.getter()
{
  return 0LL;
}

uint64_t sub_181C77E74@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v20 = (int *)type metadata accessor for BonjourEndpoint(0LL, a10, v18, v19);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a10 - 8) + 32LL))(a9 + v20[7], a2, a10);
  char v22 = (void *)(a9 + v20[8]);
  *char v22 = a3;
  v22[1] = a4;
  uint64_t v23 = (void *)(a9 + v20[9]);
  *uint64_t v23 = a5;
  v23[1] = a6;
  uint64_t v24 = (void *)(a9 + v20[10]);
  *uint64_t v24 = a7;
  v24[1] = a8;
  return result;
}

uint64_t sub_181C77F30@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = BonjourEndpoint.id.getter(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t BrowseDescriptorFactories.Bonjour.makeDescriptor()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  char v5 = (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 24LL))(*(void *)(a1 + 16));
  uint64_t v7 = *v3;
  uint64_t v6 = v3[1];
  uint64_t v9 = v3[2];
  uint64_t v8 = v3[3];
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  if ((v5 & 1) != 0) {
    char v11 = 32;
  }
  else {
    char v11 = 0;
  }
  *(void *)a2 = v7;
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = v9;
  *(void *)(a2 + 24) = v8;
  *(_BYTE *)(a2 + 32) = v11;
  return result;
}

uint64_t BrowseDescriptorFactories.Bonjour.makeEndpoint(from:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v66 = a3;
  uint64_t v69 = a1;
  uint64_t v4 = type metadata accessor for NWBrowser.Result(0LL);
  MEMORY[0x1895F8858](v4);
  uint64_t v58 = (uint64_t)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v64 = a2;
  uint64_t v61 = v7;
  uint64_t v62 = v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v59 = sub_18264F09C();
  uint64_t v9 = *(void *)(v59 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](v59);
  uint64_t v65 = (char *)&v52 - v11;
  uint64_t v67 = AssociatedTypeWitness;
  uint64_t v60 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  uint64_t v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  nw_connection_group_t v16 = (char *)&v52 - v15;
  uint64_t v17 = type metadata accessor for NWEndpoint();
  uint64_t v18 = MEMORY[0x1895F8858](v17);
  uint64_t v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = MEMORY[0x1895F8858](v18);
  uint64_t v23 = (uint64_t *)((char *)&v52 - v22);
  MEMORY[0x1895F8858](v21);
  uint64_t v25 = (char *)&v52 - v24;
  uint64_t v63 = v4;
  sub_181BC9248( v69 + *(int *)(v4 + 20),  (uint64_t)&v52 - v24,  (uint64_t (*)(void))type metadata accessor for NWEndpoint);
  sub_181BC9248((uint64_t)v25, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v26 = v16;
    uint64_t v54 = *v23;
    uint64_t v55 = v14;
    uint64_t v28 = v23[1];
    uint64_t v27 = v23[2];
    uint64_t v29 = v23[3];
    uint64_t v52 = v23[4];
    uint64_t v53 = v27;
    uint64_t v30 = v23[6];
    uint64_t v56 = v23[5];
    uint64_t v57 = v29;
    sub_181BC69C8(v30);
    uint64_t v31 = v69;
    __int128 v68 = *(_OWORD *)(v69 + *(int *)(v63 + 28));
    uint64_t v32 = v65;
    (*(void (**)(__int128 *, uint64_t))(v62 + 16))(&v68, v61);
    uint64_t v33 = (uint64_t)v25;
    uint64_t v34 = v28;
    sub_181BE4788(v33);
    uint64_t v35 = v60;
    uint64_t v36 = v67;
    int v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v60 + 48))(v32, 1LL, v67);
    uint64_t v38 = v66;
    if (v37 == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v32, v59);
      uint64_t v41 = type metadata accessor for BonjourEndpoint(0LL, v36, v39, v40);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56LL))( v38,  1LL,  1LL,  v41);
    }

    else
    {
      nw_group_descriptor_t v44 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
      uint64_t v45 = v26;
      v44(v26, v32, v36);
      uint64_t v46 = v31;
      uint64_t v47 = v58;
      sub_181BC9248(v46, v58, type metadata accessor for NWBrowser.Result);
      uint64_t v48 = (uint64_t)v55;
      v44(v55, v45, v36);
      sub_181C77E74(v47, v48, v54, v34, v53, v57, v52, v56, v38, v36);
      uint64_t v51 = type metadata accessor for BonjourEndpoint(0LL, v36, v49, v50);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56LL))( v38,  0LL,  1LL,  v51);
    }
  }

  else
  {
    sub_181BC9248((uint64_t)v25, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    type metadata accessor for UnexpectedEndpointType();
    sub_181C783A8();
    swift_allocError();
    sub_181BC928C((uint64_t)v20, v43, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    swift_willThrow();
    sub_181BE4788((uint64_t)v25);
    return sub_181BE4788((uint64_t)v23);
  }

unint64_t sub_181C783A8()
{
  unint64_t result = qword_18C58E428;
  if (!qword_18C58E428)
  {
    uint64_t v1 = type metadata accessor for UnexpectedEndpointType();
    unint64_t result = MEMORY[0x186E12084](&protocol conformance descriptor for UnexpectedEndpointType, v1);
    atomic_store(result, (unint64_t *)&qword_18C58E428);
  }

  return result;
}

uint64_t type metadata accessor for BonjourEndpoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BonjourEndpoint);
}

uint64_t BrowseDescriptorFactories.Bonjour.browseParameters.getter()
{
  uint64_t v0 = swift_allocObject();
  nw_parameters_t v1 = nw_parameters_create();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A220);
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 24) = 0;
  *(void *)(v2 + 16) = v1;
  *(void *)(v0 + 16) = v2;
  return v0;
}

uint64_t sub_181C78460@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return BrowseDescriptorFactories.Bonjour.makeEndpoint(from:)(a1, a2, a3);
}

uint64_t sub_181C78474()
{
  uint64_t v0 = swift_allocObject();
  nw_parameters_t v1 = nw_parameters_create();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A220);
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 24) = 0;
  *(void *)(v2 + 16) = v1;
  *(void *)(v0 + 16) = v2;
  return v0;
}

uint64_t static BrowseDescriptorFactories.Bonjour.bonjour(_:domain:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(_BYTE *)(a5 + 32) = 1;
  *(void *)a5 = a1;
  *(void *)(a5 + 8) = a2;
  *(void *)(a5 + 16) = a3;
  *(void *)(a5 + 24) = a4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t _s7Network25BrowseDescriptorFactoriesO7BonjourV7bonjour_6domain8metadataQrSS_SSSgxtFZ_0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, char *a7@<X8>)
{
  uint64_t v14 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](a1);
  nw_connection_group_t v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v17, v18);
  *(void *)a7 = a1;
  *((void *)a7 + 1) = a2;
  *((void *)a7 + 2) = a3;
  *((void *)a7 + 3) = a4;
  uint64_t v20 = type metadata accessor for BrowseDescriptorFactories.Bonjour(0LL, a5, a6, v19);
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&a7[*(int *)(v20 + 40)], v16, a5);
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t _s7Network8Browser1C3for5usingACyAA25BrowseDescriptorFactoriesO7BonjourVy_AA0H17MetadataProvidersO4NoneVGGAN_AA12NWParametersCSgtcANRszrlufC_0( uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  char v6 = *((_BYTE *)a1 + 32);
  if (a2)
  {
    uint64_t v7 = a2;
  }

  else
  {
    type metadata accessor for NWParameters();
    uint64_t v7 = swift_allocObject();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    nw_parameters_t v8 = nw_parameters_create();
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A220);
    uint64_t v9 = swift_allocObject();
    *(_DWORD *)(v9 + 24) = 0;
    *(void *)(v9 + 16) = v8;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v7 + 16) = v9;
  }

  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  *(void *)(result + 24) = v2;
  *(void *)(result + 32) = v5;
  *(void *)(result + 40) = v4;
  *(_BYTE *)(result + 48) = v6;
  *(void *)(result + 56) = v7;
  return result;
}

uint64_t _s7Network8Browser1C3for5usingACyAA25BrowseDescriptorFactoriesO7BonjourVy_AA0H17MetadataProvidersO12DecodeResultVy_qd__GGGAO_AA12NWParametersCSgtcAORszSeRd__s8SendableRd__lufC_0( uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = *(_BYTE *)(a1 + 32);
  v8[0] = *(void *)a1;
  v8[1] = v2;
  __int128 v9 = *(_OWORD *)(a1 + 16);
  char v10 = v3;
  if (a2)
  {
    uint64_t v4 = a2;
  }

  else
  {
    type metadata accessor for NWParameters();
    uint64_t v4 = swift_allocObject();
    nw_parameters_t v5 = nw_parameters_create();
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A220);
    uint64_t v6 = swift_allocObject();
    *(_DWORD *)(v6 + 24) = 0;
    *(void *)(v6 + 16) = v5;
    *(void *)(v4 + 16) = v6;
  }

  return Browser1.__allocating_init(provider:using:)((uint64_t)v8, v4);
}

uint64_t sub_181C78774()
{
  return MEMORY[0x189617FB8];
}

uint64_t dispatch thunk of BonjourMetadataProvider.makeMetadata(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of BonjourMetadataProvider.shouldFetchMetadata.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

ValueMetadata *type metadata accessor for BonjourMetadataProviders()
{
  return &type metadata for BonjourMetadataProviders;
}

ValueMetadata *type metadata accessor for BonjourMetadataProviders.None()
{
  return &type metadata for BonjourMetadataProviders.None;
}

ValueMetadata *type metadata accessor for BonjourMetadataProviders.Default()
{
  return &type metadata for BonjourMetadataProviders.Default;
}

uint64_t sub_181C787C8()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for BonjourMetadataProviders.DecodeResult( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for BonjourMetadataProviders.DecodeResult);
}

uint64_t _s7Network24BonjourMetadataProvidersO4NoneVwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

uint64_t _s7Network24BonjourMetadataProvidersO4NoneVwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_181C788C8 + 4 * byte_182663065[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181C788FC + 4 * asc_182663060[v4]))();
}

uint64_t sub_181C788FC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C78904(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181C7890CLL);
  }
  return result;
}

uint64_t sub_181C78918(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181C78920LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_181C78924(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C7892C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for BonjourMetadataProviders.Decode( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for BonjourMetadataProviders.Decode);
}

uint64_t sub_181C78944()
{
  uint64_t result = type metadata accessor for NWBrowser.Result(319LL);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0LL;
    }
  }

  return result;
}

void *sub_181C789D8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_18264E568();
  uint64_t v7 = *(void *)(v6 - 8);
  int v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = v8 & 0xF8 | 7LL;
  if (*(void *)(v7 + 64) <= 0x38uLL) {
    uint64_t v11 = 56LL;
  }
  else {
    uint64_t v11 = *(void *)(v7 + 64);
  }
  uint64_t v12 = v11 + 8;
  uint64_t v13 = *(void *)(a3 + 16);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(_DWORD *)(v14 + 80);
  uint64_t v10 = ((v8 & 0xF8) + 15LL) & ~v9;
  uint64_t v16 = *(void *)(v14 + 64) + 7LL;
  int v17 = (*(_DWORD *)(v14 + 80) | v8) & 0x100000;
  uint64_t v18 = *a2;
  *a1 = *a2;
  if ((v15 | v9) != 7
    || v17 != 0
    || ((((((v16 + ((((((v11 + 8 + v10) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + v15 + 16) & ~v15)) & 0xFFFFFFFFFFFFFFF8LL)
         + 23) & 0xFFFFFFFFFFFFFFF8LL)
       + 23) & 0xFFFFFFFFFFFFFFF8LL)
     + 16 > 0x18)
  {
    a1 = (void *)(v18 + (((v15 | v9) + 16) & ~(v15 | v9)));
    swift_retain();
  }

  else
  {
    unint64_t v47 = ((((v11 + 8 + v10) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + v15 + 16;
    uint64_t v48 = v16;
    uint64_t v49 = v13;
    uint64_t v50 = a2;
    uint64_t v21 = ~v9;
    uint64_t v22 = (char *)a1 + v9;
    uint64_t v23 = (char *)a2 + v9;
    uint64_t v24 = (unint64_t)(v22 + 8) & v21;
    uint64_t v25 = (unint64_t)(v23 + 8) & v21;
    int v26 = *(unsigned __int8 *)(v25 + v11);
    swift_unknownObjectRetain();
    switch(v26)
    {
      case 0:
        uint64_t v28 = ~v15;
        uint64_t v30 = *(void *)v25;
        uint64_t v29 = *(void *)(v25 + 8);
        uint64_t v31 = *(void *)(v25 + 16);
        char v46 = *(_BYTE *)(v25 + 24);
        sub_181BC683C(*(void *)v25, v29, v31, v46);
        *(void *)uint64_t v24 = v30;
        *(void *)(v24 + 8) = v29;
        *(void *)(v24 + 16) = v31;
        *(_BYTE *)(v24 + 24) = v46;
        *(_WORD *)(v24 + 26) = *(_WORD *)(v25 + 26);
        *(_BYTE *)(v24 + v11) = 0;
        break;
      case 1:
        uint64_t v28 = ~v15;
        *(void *)uint64_t v24 = *(void *)v25;
        *(void *)(v24 + 8) = *(void *)(v25 + 8);
        *(void *)(v24 + 16) = *(void *)(v25 + 16);
        *(void *)(v24 + 24) = *(void *)(v25 + 24);
        *(void *)(v24 + 32) = *(void *)(v25 + 32);
        *(void *)(v24 + 40) = *(void *)(v25 + 40);
        uint64_t v33 = *(void *)(v25 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v33 != 1) {
          swift_unknownObjectRetain();
        }
        *(void *)(v24 + 48) = v33;
        char v32 = 1;
        goto LABEL_25;
      case 2:
        uint64_t v28 = ~v15;
        *(void *)uint64_t v24 = *(void *)v25;
        *(void *)(v24 + 8) = *(void *)(v25 + 8);
        *(_BYTE *)(v24 + v11) = 2;
        swift_bridgeObjectRetain();
        break;
      case 3:
        uint64_t v28 = ~v15;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v24, v25, v6);
        char v32 = 3;
LABEL_25:
        *(_BYTE *)(v24 + v11) = v32;
        break;
      case 4:
        uint64_t v28 = ~v15;
        *(void *)uint64_t v24 = *(void *)v25;
        *(_BYTE *)(v24 + v11) = 4;
        swift_unknownObjectRetain();
        break;
      default:
        else {
          uint64_t v27 = 4LL;
        }
        __asm { BR              X11 }

        return result;
    }

    uint64_t v34 = (void *)((v12 + v25) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v35 = (void *)((v12 + v24) & 0xFFFFFFFFFFFFF8LL);
    *uint64_t v35 = *v34;
    unint64_t v36 = ((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    int v37 = (unint64_t *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8LL);
    unint64_t v38 = *v37;
    swift_bridgeObjectRetain();
    if (v38 < 0xFFFFFFFF)
    {
      *(_OWORD *)unint64_t v36 = *(_OWORD *)v37;
    }

    else
    {
      *(void *)unint64_t v36 = v38;
      *(void *)(v36 + 8) = v37[1];
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
    }

    (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 16))( ((unint64_t)a1 + v47) & v28,  ((unint64_t)v50 + v47) & v28,  v49);
    uint64_t v39 = (void *)((v48 + (((unint64_t)a1 + v47) & v28)) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v40 = (void *)((v48 + (((unint64_t)v50 + v47) & v28)) & 0xFFFFFFFFFFFFFFF8LL);
    *uint64_t v39 = *v40;
    v39[1] = v40[1];
    uint64_t v41 = (void *)(((unint64_t)v39 + 23) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v42 = (void *)(((unint64_t)v40 + 23) & 0xFFFFFFFFFFFFFFF8LL);
    *uint64_t v41 = *v42;
    v41[1] = v42[1];
    uint64_t v43 = (void *)(((unint64_t)v41 + 23) & 0xFFFFFFFFFFFFFFF8LL);
    nw_group_descriptor_t v44 = (void *)(((unint64_t)v42 + 23) & 0xFFFFFFFFFFFFFFF8LL);
    *uint64_t v43 = *v44;
    v43[1] = v44[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  return a1;
}

uint64_t sub_181C78DA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18264E568();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80) & 0xF8;
  uint64_t v7 = v6 + 15;
  unint64_t v8 = ~v6 & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v9 = (v6 + 15 + a1) & v8;
  if (*(void *)(v5 + 64) <= 0x38uLL) {
    uint64_t v10 = 56LL;
  }
  else {
    uint64_t v10 = *(void *)(v5 + 64);
  }
  switch(*(_BYTE *)(v9 + v10))
  {
    case 0:
      sub_181BC6974( *(void *)((v6 + 15 + a1) & v8),  *(void *)(((v6 + 15 + a1) & v8) + 8),  *(void *)(((v6 + 15 + a1) & v8) + 0x10),  *(_BYTE *)(((v6 + 15 + a1) & v8) + 0x18));
      goto LABEL_15;
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(void *)(v9 + 48) == 1LL) {
        goto LABEL_15;
      }
      goto LABEL_14;
    case 2:
      swift_bridgeObjectRelease();
      goto LABEL_15;
    case 3:
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v9, v4);
      goto LABEL_15;
    case 4:
LABEL_14:
      swift_unknownObjectRelease();
LABEL_15:
      uint64_t v12 = v10 + 8;
      swift_bridgeObjectRelease();
      if (*(void *)((((v12 + v9) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) >= 0xFFFFFFFFuLL)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
      }

      (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8LL) + 8LL))((a1
                                                                                                + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8LL) + 80LL)
                                                                                                + ((((v12 + (v7 & v8)) & 0xFFFFFFFFFFFFFFF8LL)
                                                                                                  + 15) & 0xFFFFFFFFFFFFFFF8LL)
                                                                                                + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8LL) + 80LL));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    default:
      else {
        uint64_t v11 = 4LL;
      }
      __asm { BR              X13 }

      return result;
  }

void *sub_181C78FAC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = sub_18264E568();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80) & 0xF8;
  uint64_t v8 = v7 + 15;
  unint64_t v9 = ~v7 & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v10 = ((unint64_t)a1 + v7 + 15) & v9;
  uint64_t v40 = a2;
  uint64_t v11 = ((unint64_t)a2 + v7 + 15) & v9;
  if (*(void *)(v6 + 64) <= 0x38uLL) {
    uint64_t v12 = 56LL;
  }
  else {
    uint64_t v12 = *(void *)(v6 + 64);
  }
  int v13 = *(unsigned __int8 *)(v11 + v12);
  swift_unknownObjectRetain();
  switch(v13)
  {
    case 0:
      uint64_t v15 = *(void *)v11;
      uint64_t v16 = *(void *)(v11 + 8);
      uint64_t v17 = *(void *)(v11 + 16);
      char v18 = *(_BYTE *)(v11 + 24);
      sub_181BC683C(*(void *)v11, v16, v17, v18);
      *(void *)uint64_t v10 = v15;
      *(void *)(v10 + 8) = v16;
      *(void *)(v10 + 16) = v17;
      *(_BYTE *)(v10 + 24) = v18;
      *(_WORD *)(v10 + 26) = *(_WORD *)(v11 + 26);
      *(_BYTE *)(v10 + v12) = 0;
      break;
    case 1:
      *(void *)uint64_t v10 = *(void *)v11;
      *(void *)(v10 + 8) = *(void *)(v11 + 8);
      *(void *)(v10 + 16) = *(void *)(v11 + 16);
      *(void *)(v10 + 24) = *(void *)(v11 + 24);
      *(void *)(v10 + 32) = *(void *)(v11 + 32);
      *(void *)(v10 + 40) = *(void *)(v11 + 40);
      uint64_t v19 = *(void *)(v11 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v19 != 1) {
        swift_unknownObjectRetain();
      }
      *(void *)(v10 + 48) = v19;
      *(_BYTE *)(v10 + v12) = 1;
      break;
    case 2:
      *(void *)uint64_t v10 = *(void *)v11;
      *(void *)(v10 + 8) = *(void *)(v11 + 8);
      *(_BYTE *)(v10 + v12) = 2;
      swift_bridgeObjectRetain();
      break;
    case 3:
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v10, v11, v5);
      *(_BYTE *)(v10 + v12) = 3;
      break;
    case 4:
      *(void *)uint64_t v10 = *(void *)v11;
      *(_BYTE *)(v10 + v12) = 4;
      swift_unknownObjectRetain();
      break;
    default:
      else {
        uint64_t v14 = 4LL;
      }
      __asm { BR              X11 }

      return result;
  }

  uint64_t v20 = v12 + 8;
  uint64_t v21 = (void *)((v20 + v11) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v22 = (void *)((v20 + v10) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v22 = *v21;
  unint64_t v23 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v24 = (unint64_t *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v25 = *v24;
  swift_bridgeObjectRetain();
  if (v25 < 0xFFFFFFFF)
  {
    *(_OWORD *)unint64_t v23 = *(_OWORD *)v24;
  }

  else
  {
    *(void *)unint64_t v23 = v25;
    *(void *)(v23 + 8) = v24[1];
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
  }

  uint64_t v26 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v27 = *(unsigned __int8 *)(v26 + 80);
  unint64_t v28 = ((((v20 + (v8 & v9)) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + v27 + 16;
  unint64_t v29 = ((unint64_t)a1 + v28) & ~v27;
  unint64_t v30 = ((unint64_t)v40 + v28) & ~v27;
  (*(void (**)(unint64_t, unint64_t))(v26 + 16))(v29, v30);
  uint64_t v31 = *(void *)(v26 + 64) + 7LL;
  char v32 = (void *)((v31 + v29) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v33 = (void *)((v31 + v30) & 0xFFFFFFFFFFFFFFF8LL);
  *char v32 = *v33;
  v32[1] = v33[1];
  uint64_t v34 = (void *)(((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v35 = (void *)(((unint64_t)v33 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v34 = *v35;
  v34[1] = v35[1];
  unint64_t v36 = (void *)(((unint64_t)v34 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  int v37 = (void *)(((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  *unint64_t v36 = *v37;
  v36[1] = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_181C79304(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  uint64_t v6 = sub_18264E568();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(_DWORD *)(v7 + 80) & 0xF8;
  uint64_t v9 = v8 + 15;
  unint64_t v10 = ~v8 & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v11 = ((unint64_t)a1 + v8 + 15) & v10;
  uint64_t v12 = ((unint64_t)v4 + v8 + 15) & v10;
  if (*(void *)(v7 + 64) <= 0x38uLL) {
    uint64_t v13 = 56LL;
  }
  else {
    uint64_t v13 = *(void *)(v7 + 64);
  }
  if (v11 != v12)
  {
    uint64_t v14 = v6;
    switch(*(_BYTE *)(v11 + v13))
    {
      case 0:
        sub_181BC6974( *(void *)(((unint64_t)a1 + v8 + 15) & v10),  *(void *)((((unint64_t)a1 + v8 + 15) & v10) + 8),  *(void *)((((unint64_t)a1 + v8 + 15) & v10) + 0x10),  *(_BYTE *)((((unint64_t)a1 + v8 + 15) & v10) + 0x18));
        goto LABEL_21;
      case 1:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)(v11 + 48) != 1LL) {
          goto LABEL_15;
        }
        goto LABEL_21;
      case 2:
        swift_bridgeObjectRelease();
        goto LABEL_21;
      case 3:
        (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v11, v6);
        goto LABEL_21;
      case 4:
LABEL_15:
        swift_unknownObjectRelease();
LABEL_21:
        switch(*(_BYTE *)(v12 + v13))
        {
          case 0:
            uint64_t v17 = *(void *)v12;
            uint64_t v18 = *(void *)(v12 + 8);
            uint64_t v42 = v4;
            uint64_t v43 = a3;
            uint64_t v19 = *(void *)(v12 + 16);
            char v20 = *(_BYTE *)(v12 + 24);
            sub_181BC683C(*(void *)v12, v18, v19, v20);
            *(void *)uint64_t v11 = v17;
            *(void *)(v11 + 8) = v18;
            *(void *)(v11 + 16) = v19;
            *(_BYTE *)(v11 + 24) = v20;
            uint64_t v4 = v42;
            a3 = v43;
            *(_WORD *)(v11 + 26) = *(_WORD *)(v12 + 26);
            *(_BYTE *)(v11 + v13) = 0;
            break;
          case 1:
            *(void *)uint64_t v11 = *(void *)v12;
            *(void *)(v11 + 8) = *(void *)(v12 + 8);
            *(void *)(v11 + 16) = *(void *)(v12 + 16);
            *(void *)(v11 + 24) = *(void *)(v12 + 24);
            *(void *)(v11 + 32) = *(void *)(v12 + 32);
            *(void *)(v11 + 40) = *(void *)(v12 + 40);
            uint64_t v21 = *(void *)(v12 + 48);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v21 != 1) {
              swift_unknownObjectRetain();
            }
            *(void *)(v11 + 48) = v21;
            *(_BYTE *)(v11 + v13) = 1;
            break;
          case 2:
            *(void *)uint64_t v11 = *(void *)v12;
            *(void *)(v11 + 8) = *(void *)(v12 + 8);
            *(_BYTE *)(v11 + v13) = 2;
            swift_bridgeObjectRetain();
            break;
          case 3:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v11, v12, v14);
            *(_BYTE *)(v11 + v13) = 3;
            break;
          case 4:
            *(void *)uint64_t v11 = *(void *)v12;
            *(_BYTE *)(v11 + v13) = 4;
            swift_unknownObjectRetain();
            break;
          default:
            else {
              uint64_t v16 = 4LL;
            }
            __asm { BR              X12 }

            return result;
        }

        return result;
      default:
        else {
          uint64_t v15 = 4LL;
        }
        __asm { BR              X12 }

        return result;
    }
  }

  uint64_t v22 = v13 + 1;
  unint64_t v23 = (void *)(((v11 | 7) + v22) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v24 = (v12 | 7) + v22;
  unint64_t v25 = (v24 & 0xFFFFFFFFFFFFFFF8LL) + 15;
  *unint64_t v23 = *(void *)(v24 & 0xFFFFFFFFFFFFFFF8LL);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v26 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v27 = (unint64_t *)(v25 & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v28 = *v27;
  if (*v26 < 0xFFFFFFFFuLL)
  {
    if (v28 >= 0xFFFFFFFF)
    {
      *uint64_t v26 = v28;
      v26[1] = v27[1];
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      goto LABEL_36;
    }

void *sub_181C797E8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = sub_18264E568();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(_DWORD *)(v7 + 80) & 0xF8;
  uint64_t v9 = v8 + 15;
  unint64_t v10 = ~v8 & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v11 = (_OWORD *)(((unint64_t)a1 + v8 + 15) & v10);
  uint64_t v12 = (_OWORD *)(((unint64_t)a2 + v8 + 15) & v10);
  if (*(void *)(v7 + 64) <= 0x38uLL) {
    uint64_t v13 = 56LL;
  }
  else {
    uint64_t v13 = *(void *)(v7 + 64);
  }
  switch(*((_BYTE *)v12 + v13))
  {
    case 0:
      char v15 = 0;
      __int128 v16 = *v12;
      _OWORD *v11 = v16;
      break;
    case 1:
      __int128 v17 = *v12;
      __int128 v18 = *(_OWORD *)((((unint64_t)a2 + v8 + 15) & v10) + 0x10);
      __int128 v19 = *(_OWORD *)((((unint64_t)a2 + v8 + 15) & v10) + 0x20);
      *(_OWORD *)((((unint64_t)a1 + v8 + 15) & v10) + 0x10) = v18;
      *(_OWORD *)((((unint64_t)a1 + v8 + 15) & v10) + 0x20) = v19;
      _OWORD *v11 = v17;
      char v15 = 1;
      break;
    case 2:
      _OWORD *v11 = *v12;
      char v15 = 2;
      break;
    case 3:
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v7 + 32))(v11, v12, v6);
      char v15 = 3;
      break;
    case 4:
      *(void *)uint64_t v11 = *(void *)v12;
      char v15 = 4;
      break;
    default:
      else {
        uint64_t v14 = 4LL;
      }
      __asm { BR              X13 }

      return result;
  }

  *((_BYTE *)v11 + v13) = v15;
  char v20 = (void *)(((unint64_t)v11 + v13 + 8) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v21 = (void *)(((unint64_t)v12 + v13 + 8) & 0xFFFFFFFFFFFFFFF8LL);
  *char v20 = *v21;
  *(_OWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFF8LL) = *(_OWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFF8LL);
  uint64_t v22 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v23 = *(unsigned __int8 *)(v22 + 80);
  unint64_t v24 = ((((v13 + 8 + (v9 & v10)) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + v23 + 16;
  unint64_t v25 = ((unint64_t)a1 + v24) & ~v23;
  unint64_t v26 = ((unint64_t)a2 + v24) & ~v23;
  (*(void (**)(unint64_t, unint64_t))(v22 + 32))(v25, v26);
  uint64_t v27 = *(void *)(v22 + 64) + 7LL;
  unint64_t v28 = (_OWORD *)((v27 + v25) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v29 = (_OWORD *)((v27 + v26) & 0xFFFFFFFFFFFFFFF8LL);
  _OWORD *v28 = *v29;
  uint64_t v30 = (_OWORD *)(((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v31 = (_OWORD *)(((unint64_t)v29 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v30 = *v31;
  *(_OWORD *)(((unint64_t)v30 + 23) & 0xFFFFFFFFFFFFF8LL) = *(_OWORD *)(((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

void *sub_181C79A24(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  uint64_t v6 = sub_18264E568();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(_DWORD *)(v7 + 80) & 0xF8;
  uint64_t v9 = v8 + 15;
  unint64_t v10 = ~v8 & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v11 = ((unint64_t)a1 + v8 + 15) & v10;
  uint64_t v12 = ((unint64_t)a2 + v8 + 15) & v10;
  if (*(void *)(v7 + 64) <= 0x38uLL) {
    uint64_t v13 = 56LL;
  }
  else {
    uint64_t v13 = *(void *)(v7 + 64);
  }
  if (v11 != v12)
  {
    uint64_t v14 = v6;
    switch(*(_BYTE *)(v11 + v13))
    {
      case 0:
        sub_181BC6974( *(void *)(((unint64_t)a1 + v8 + 15) & v10),  *(void *)((((unint64_t)a1 + v8 + 15) & v10) + 8),  *(void *)((((unint64_t)a1 + v8 + 15) & v10) + 0x10),  *(_BYTE *)((((unint64_t)a1 + v8 + 15) & v10) + 0x18));
        goto LABEL_21;
      case 1:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)(v11 + 48) != 1LL) {
          goto LABEL_15;
        }
        goto LABEL_21;
      case 2:
        swift_bridgeObjectRelease();
        goto LABEL_21;
      case 3:
        (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v11, v6);
        goto LABEL_21;
      case 4:
LABEL_15:
        swift_unknownObjectRelease();
LABEL_21:
        switch(*(_BYTE *)(v12 + v13))
        {
          case 0:
            char v17 = 0;
            __int128 v18 = *(_OWORD *)v12;
            *(_OWORD *)(v11 + 12) = *(_OWORD *)(v12 + 12);
            *(_OWORD *)uint64_t v11 = v18;
            break;
          case 1:
            __int128 v19 = *(_OWORD *)v12;
            __int128 v20 = *(_OWORD *)(v12 + 16);
            __int128 v21 = *(_OWORD *)(v12 + 32);
            *(void *)(v11 + 48) = *(void *)(v12 + 48);
            *(_OWORD *)(v11 + 16) = v20;
            *(_OWORD *)(v11 + 32) = v21;
            *(_OWORD *)uint64_t v11 = v19;
            char v17 = 1;
            break;
          case 2:
            *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
            char v17 = 2;
            break;
          case 3:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v11, v12, v14);
            char v17 = 3;
            break;
          case 4:
            *(void *)uint64_t v11 = *(void *)v12;
            char v17 = 4;
            break;
          default:
            else {
              uint64_t v16 = 4LL;
            }
            __asm { BR              X12 }

            return result;
        }

        *(_BYTE *)(v11 + v13) = v17;
        break;
      default:
        else {
          uint64_t v15 = 4LL;
        }
        __asm { BR              X12 }

        return result;
    }
  }

  uint64_t v22 = v13 + 1;
  uint64_t v23 = (void *)(((v11 | 7) + v13 + 1) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v24 = (void *)(((v12 | 7) + v13 + 1) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v23 = *v24;
  swift_bridgeObjectRelease();
  unint64_t v25 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v26 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  if (*v25 < 0xFFFFFFFFuLL) {
    goto LABEL_32;
  }
  if (*(void *)v26 < 0xFFFFFFFFuLL)
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
LABEL_32:
    *(_OWORD *)unint64_t v25 = *(_OWORD *)v26;
    goto LABEL_33;
  }

  *unint64_t v25 = *(void *)v26;
  swift_bridgeObjectRelease();
  v25[1] = *(void *)(v26 + 8);
  swift_unknownObjectRelease();
LABEL_33:
  uint64_t v27 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v28 = *(unsigned __int8 *)(v27 + 80);
  unint64_t v29 = (((((v9 & v10 | 7) + v22) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + v28 + 16;
  unint64_t v30 = ((unint64_t)a1 + v29) & ~v28;
  unint64_t v31 = ((unint64_t)a2 + v29) & ~v28;
  (*(void (**)(unint64_t, unint64_t))(v27 + 40))(v30, v31);
  uint64_t v32 = *(void *)(v27 + 64) + 7LL;
  unint64_t v33 = (void *)((v32 + v30) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v34 = (void *)((v32 + v31) & 0xFFFFFFFFFFFFFFF8LL);
  *unint64_t v33 = *v34;
  v33[1] = v34[1];
  swift_bridgeObjectRelease();
  uint64_t v35 = (void *)(((unint64_t)v33 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v36 = (void *)(((unint64_t)v34 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v35 = *v36;
  v35[1] = v36[1];
  swift_bridgeObjectRelease();
  int v37 = (void *)(((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v38 = (void *)(((unint64_t)v36 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  void *v37 = *v38;
  v37[1] = v38[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_181C79E08(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(sub_18264E568() - 8);
  if (*(void *)(v6 + 64) <= 0x38uLL) {
    uint64_t v7 = 56LL;
  }
  else {
    uint64_t v7 = *(void *)(v6 + 64);
  }
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  unint64_t v11 = (((v7
         + ((unsigned __int16)((*(_WORD *)(v6 + 80) & 0xF8) + 15) & (unsigned __int16)~(*(_WORD *)(v6 + 80) & 0xF8) & 0x1F8)
         + 8) & 0xFFFFFFFFFFFFFFF8LL)
       + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = v11 + v12 + 16;
  if (v10 < a2)
  {
    if (((((((((*(void *)(v8 + 64) + (v13 & ~v12) + 7) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL)
         + 16) & 0xFFFFFFF8) != 0)
      unsigned int v14 = 2;
    else {
      unsigned int v14 = a2 - v10 + 1;
    }
    if (v14 >= 0x10000) {
      unsigned int v15 = 4;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v14 < 0x100) {
      unsigned int v15 = 1;
    }
    if (v14 >= 2) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0LL;
    }
    __asm { BR              X16 }
  }

  if ((v9 & 0x80000000) != 0) {
    return (*(uint64_t (**)(unint64_t))(v8 + 48))(((unint64_t)a1 + v13) & ~v12);
  }
  uint64_t v18 = *a1;
  return (v18 + 1);
}

void sub_181C79FA0(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(sub_18264E568() - 8);
  if (*(void *)(v8 + 64) <= 0x38uLL) {
    uint64_t v9 = 56LL;
  }
  else {
    uint64_t v9 = *(void *)(v8 + 64);
  }
  uint64_t v10 = *(void *)(*(void *)(a4 + 16) - 8LL);
  if (*(_DWORD *)(v10 + 84) <= 0x7FFFFFFFu) {
    unsigned int v11 = 0x7FFFFFFF;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v10 + 84);
  }
  __int16 v12 = *(_DWORD *)(v8 + 80) & 0xF8;
  if (v11 >= a3)
  {
    int v15 = 0u;
    if (a2 <= v11) {
      goto LABEL_20;
    }
  }

  else
  {
    if (((((((*(_DWORD *)(v10 + 64)
             + (((((((_DWORD)v9 + ((unsigned __int16)(v12 + 15) & (unsigned __int16)~v12 & 0x1F8) + 8) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8)
               + 16
               + *(unsigned __int8 *)(v10 + 80)) & ~*(unsigned __int8 *)(v10 + 80))
             + 7) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      unsigned int v13 = a3 - v11 + 1;
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (a2 <= v11) {
LABEL_20:
    }
      __asm { BR              X13 }
  }

  if (((((((*(_DWORD *)(v10 + 64)
           + (((((((_DWORD)v9 + ((unsigned __int16)(v12 + 15) & (unsigned __int16)~v12 & 0x1F8) + 8) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8)
             + 16
             + *(unsigned __int8 *)(v10 + 80)) & ~*(unsigned __int8 *)(v10 + 80))
           + 7) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8)
       + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v16 = ~v11 + a2;
    bzero( a1,  ((((((*(void *)(v10 + 64)
          + ((((((v9 + ((unsigned __int16)(v12 + 15) & (unsigned __int16)~v12 & 0x1F8) + 8) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)
            + 16
            + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
          + 7) & 0xFFFFFFFFFFFFFFF8LL)
        + 23) & 0xFFFFFFFFFFFFFFF8LL)
      + 23) & 0xFFFFFFFFFFFFFFF8LL)
    + 16);
    *a1 = v16;
  }

  __asm { BR              X10 }

void sub_181C7A108()
{
  *(_BYTE *)(v0 + sub_181BCD4F0(v0, v1) = v2;
  JUMPOUT(0x181C7A180LL);
}

void sub_181C7A110()
{
  *(_DWORD *)(v0 + sub_181BCD4F0(v1, v2) = 0;
  if (v1) {
    JUMPOUT(0x181C7A118LL);
  }
  JUMPOUT(0x181C7A180LL);
}

void sub_181C7A12C()
{
  *(_WORD *)(v0 + sub_181BCD4F0(v0, v1) = v2;
  JUMPOUT(0x181C7A180LL);
}

void sub_181C7A134()
{
  *(_DWORD *)(v0 + sub_181BCD4F0(v0, v1) = v2;
  JUMPOUT(0x181C7A180LL);
}

void sub_181C7A13C(uint64_t a1, uint64_t a2, int a3)
{
  *(_WORD *)((char *)v3 + v5) = 0;
  if (v4)
  {
    if (a3 < 0) {
      JUMPOUT(0x181C7A148LL);
    }
    if (v4 < 0) {
      JUMPOUT(0x181C7A16CLL);
    }
    void *v3 = (v4 - 1);
  }

  JUMPOUT(0x181C7A180LL);
}

uint64_t sub_181C7A198()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *sub_181C7A218(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 32) & (unint64_t)~v6) + *(void *)(v5 + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }

  else
  {
    uint64_t v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    unsigned int v11 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8LL);
    __int16 v12 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8LL);
    void *v11 = *v12;
    v11[1] = v12[1];
    uint64_t v13 = ((unint64_t)v11 + v6 + 16) & ~v6;
    uint64_t v14 = ((unint64_t)v12 + v6 + 16) & ~v6;
    int v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15(v13, v14, v4);
  }

  return a1;
}

uint64_t sub_181C7A304(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8LL) + 8LL))((((a1 + 23) & 0xFFFFFFFFFFFFFFF8LL) + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8LL) + 80LL) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8LL) + 80LL));
}

void *sub_181C7A358(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v6 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v5 = *v6;
  v5[1] = v6[1];
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = ((unint64_t)v5 + v9 + 16) & ~v9;
  uint64_t v11 = ((unint64_t)v6 + v9 + 16) & ~v9;
  __int16 v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v10, v11, v7);
  return a1;
}

void *sub_181C7A3F0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v7 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v6 = *v7;
  v6[1] = v7[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))( ((unint64_t)v6 + *(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  ((unint64_t)v7 + *(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

_OWORD *sub_181C7A4A0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (_OWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v5 = (_OWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))( ((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80),  ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

void *sub_181C7A508(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v8 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v9 + 40))( ((unint64_t)v7 + *(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80),  ((unint64_t)v8 + *(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

uint64_t sub_181C7A598(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  int v8 = a2 - v6;
  if (a2 <= v6) {
    goto LABEL_22;
  }
  uint64_t v9 = ((v7 + 32) & ~v7) + *(void *)(v4 + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)(a1 + v9);
      if (!v11) {
        goto LABEL_22;
      }
      goto LABEL_15;
    }

    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9)) {
        goto LABEL_22;
      }
      goto LABEL_15;
    }

    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((((a1 + 23) & 0xFFFFFFFFFFFFFFF8LL) + v7 + 16) & ~v7);
      }
      unint64_t v15 = *(void *)(a1 + 8);
      if (v15 >= 0xFFFFFFFF) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }

  int v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9)) {
    goto LABEL_22;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (!(_DWORD)v9) {
    return v6 + v14 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_181C7A66C + 4 * byte_1826630C9[(v9 - 1)]))();
}

void sub_181C7A6E4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      unsigned int v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        unsigned int v8 = 4u;
      }

      else if (v10 >= 0x100)
      {
        unsigned int v8 = 2;
      }

      else
      {
        unsigned int v8 = v10 > 1;
      }
    }

    else
    {
      unsigned int v8 = 1u;
    }
  }

  else
  {
    unsigned int v8 = 0u;
  }

  if (v6 < a2)
  {
    int v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        int v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }

        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }

        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }

    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X13 }

uint64_t type metadata accessor for BrowseDescriptorFactories.Bonjour( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for BrowseDescriptorFactories.Bonjour);
}

void sub_181C7A8F0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t static NWApplicationID.self.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = nw_application_id_create_self();
  *a1 = result;
  return result;
}

uint64_t NWApplicationID.init(nw:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t NWApplicationID.hash(into:)()
{
  uint64_t v1 = sub_18264E688();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1895F8858](v1);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v0;
  uint64_t v5 = v9;
  sub_181C7AA28();
  sub_181C7AAB8();
  sub_18264E9E8();
  unsigned int v6 = *(void (**)(char *, uint64_t))(v2 + 8);
  v6(v4, v1);
  uint64_t v9 = v5;
  NWApplicationID.persona.getter();
  sub_18264E9E8();
  return ((uint64_t (*)(char *, uint64_t))v6)(v4, v1);
}

uint64_t sub_181C7AA28()
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  uint64_t v1 = *v0;
  __int128 v3 = 0uLL;
  nw_application_id_get_uuid(v1, &v3);
  return sub_18264E664();
}

unint64_t sub_181C7AAB8()
{
  unint64_t result = qword_18C58E6E0;
  if (!qword_18C58E6E0)
  {
    uint64_t v1 = sub_18264E688();
    unint64_t result = MEMORY[0x186E12084](MEMORY[0x189606F48], v1);
    atomic_store(result, (unint64_t *)&qword_18C58E6E0);
  }

  return result;
}

uint64_t NWApplicationID.persona.getter()
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  uint64_t v1 = *v0;
  __int128 v3 = 0uLL;
  nw_application_id_get_persona(v1, &v3);
  return sub_18264E664();
}

uint64_t static NWApplicationID.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = sub_18264E688();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  unsigned int v10 = (char *)&v16 - v9;
  uint64_t v11 = *a1;
  uint64_t v12 = *a2;
  uint64_t v17 = *a1;
  sub_181C7AA28();
  uint64_t v17 = v12;
  sub_181C7AA28();
  LOBYTE(a2) = sub_18264E658();
  unsigned int v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v8, v4);
  v13(v10, v4);
  if ((a2 & 1) != 0)
  {
    uint64_t v17 = v11;
    NWApplicationID.persona.getter();
    uint64_t v17 = v12;
    NWApplicationID.persona.getter();
    char v14 = sub_18264E658();
    v13(v8, v4);
    v13(v10, v4);
  }

  else
  {
    char v14 = 0;
  }

  return v14 & 1;
}

uint64_t NWApplicationID.nw.getter()
{
  return swift_unknownObjectRetain();
}

unint64_t NWApplicationID.debugDescription.getter()
{
  return 0xD000000000000011LL;
}

uint64_t NWApplicationID.encode(to:)(void *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  uint64_t v3 = sub_18264E58C();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v24[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v1;
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_18264F6F0();
  v24[0] = 0LL;
  BOOL v8 = nw_application_id_copy_serialized_bytes(v7, v24);
  uint64_t v9 = v24[0];
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x189606B28], v3);
  sub_18264E580();
  if (!v9)
  {
    unsigned int v13 = (void (*)(BOOL, void))sub_18264E580();
    v13(v8, 0LL);
    swift_release();
    swift_release();
    uint64_t v11 = 0LL;
    uint64_t v12 = 0xC000000000000000LL;
    goto LABEL_18;
  }

  sub_18264E4C0();
  swift_allocObject();
  swift_retain();
  uint64_t v10 = sub_18264E46C();
  if (v9 >= 15)
  {
    if ((unint64_t)v9 >= 0x7FFFFFFF)
    {
      sub_18264E5B0();
      uint64_t v11 = swift_allocObject();
      *(void *)(v11 + 16) = 0LL;
      *(void *)(v11 + 24) = v9;
      swift_release();
      uint64_t v12 = v10 | 0x8000000000000000LL;
    }

    else
    {
      swift_release();
      uint64_t v11 = v9 << 32;
      uint64_t v12 = v10 | 0x4000000000000000LL;
    }

    goto LABEL_18;
  }

  if (v9 < 0)
  {
    __break(1u);
    goto LABEL_20;
  }

  char v14 = (_BYTE *)sub_18264E484();
  if (v14)
  {
    uint64_t v15 = sub_18264E4A8();
    if (!__OFSUB__(0LL, v15))
    {
      v14 -= v15;
      goto LABEL_10;
    }

uint64_t NWApplicationID.init(from:)(void *a1)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_18264F6C0();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v5, v6);
    sub_181C0B82C();
    sub_18264F498();
    __asm { BR              X10 }
  }

  return __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
}

uint64_t sub_181C7B2E0(void *a1)
{
  return NWApplicationID.init(from:)(a1);
}

uint64_t sub_181C7B2F4(void *a1)
{
  return NWApplicationID.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for NWApplicationID()
{
  return &type metadata for NWApplicationID;
}

uint64_t sub_181C7B318(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x18961AFE8];
  if (v1)
  {
    uint64_t v11 = MEMORY[0x18961AFE8];
    sub_181C9D08C(0, v1, 0);
    uint64_t v2 = v11;
    uint64_t v4 = (uint64_t *)(a1 + 80);
    do
    {
      uint64_t v6 = *(v4 - 1);
      uint64_t v5 = *v4;
      unint64_t v8 = *(void *)(v11 + 16);
      unint64_t v7 = *(void *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1) {
        sub_181C9D08C(v7 > 1, v8 + 1, 1);
      }
      *(void *)(v11 + 16) = v8 + 1;
      uint64_t v9 = v11 + 16 * v8;
      *(void *)(v9 + 32) = v6;
      *(void *)(v9 + 40) = v5;
      v4 += 7;
      --v1;
    }

    while (v1);
  }

  return v2;
}

uint64_t sub_181C7B3EC@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a2 == -1)
  {
    int well_known = nw_http_field_name_find_well_known(a1);
    uint64_t v8 = 0x646F6874656D3ALL;
    unint64_t v6 = 0xE700000000000000LL;
    uint64_t result = 0x646F6874656D3ALL;
    unint64_t v10 = 0xE700000000000000LL;
    switch(well_known)
    {
      case 0:
        break;
      case 1:
        uint64_t v8 = 0x656D656863733ALL;
        uint64_t result = 0x656D656863733ALL;
        break;
      case 2:
        uint64_t v8 = 0x69726F687475613ALL;
        unint64_t v6 = 0xEA00000000007974LL;
        uint64_t result = 0x69726F687475613ALL;
        unint64_t v10 = 0xEA00000000007974LL;
        break;
      case 3:
        unint64_t v6 = 0xE500000000000000LL;
        uint64_t v8 = 0x687461703ALL;
        uint64_t result = 0x687461703ALL;
        unint64_t v10 = 0xE500000000000000LL;
        break;
      case 4:
        uint64_t v8 = 0x6F636F746F72703ALL;
        unint64_t v6 = 0xE90000000000006CLL;
        uint64_t result = 0x6F636F746F72703ALL;
        unint64_t v10 = 0xE90000000000006CLL;
        break;
      case 5:
        uint64_t v8 = 0x7375746174733ALL;
        uint64_t result = 0x7375746174733ALL;
        break;
      case 6:
        uint64_t v8 = 0x747065636341LL;
        goto LABEL_72;
      case 7:
        unint64_t v6 = 0xEF676E69646F636ELL;
        uint64_t result = 0x652D747065636361LL;
        uint64_t v8 = 0x452D747065636341LL;
        unint64_t v10 = 0xEF676E69646F636ELL;
        break;
      case 8:
        unint64_t v6 = 0xEF65676175676E61LL;
        uint64_t result = 0x6C2D747065636361LL;
        uint64_t v8 = 0x4C2D747065636341LL;
        unint64_t v10 = 0xEF65676175676E61LL;
        break;
      case 9:
        unint64_t v6 = 0xED00007365676E61LL;
        uint64_t result = 0x722D747065636361LL;
        uint64_t v8 = 0x522D747065636341LL;
        unint64_t v10 = 0xED00007365676E61LL;
        break;
      case 10:
        uint64_t v8 = 0xD00000000000001CLL;
        unint64_t v10 = 0x800000018272F4E0LL;
        uint64_t v12 = "Access-Control-Allow-Headers";
        goto LABEL_82;
      case 11:
        uint64_t v8 = 0xD00000000000001CLL;
        unint64_t v10 = 0x800000018272F520LL;
        uint64_t v12 = "Access-Control-Allow-Methods";
        goto LABEL_82;
      case 12:
        uint64_t v8 = 0xD00000000000001BLL;
        unint64_t v10 = 0x800000018272F560LL;
        uint64_t v12 = "Access-Control-Allow-Origin";
        goto LABEL_82;
      case 13:
        uint64_t v8 = 0xD00000000000001DLL;
        unint64_t v10 = 0x800000018272F5A0LL;
        uint64_t v12 = "Access-Control-Expose-Headers";
        goto LABEL_82;
      case 14:
        uint64_t v8 = 0xD000000000000016LL;
        unint64_t v10 = 0x800000018272F5E0LL;
        uint64_t v12 = "Access-Control-Max-Age";
        goto LABEL_82;
      case 15:
        uint64_t v8 = 0xD00000000000001ELL;
        unint64_t v10 = 0x800000018272F620LL;
        uint64_t v12 = "Access-Control-Request-Headers";
        goto LABEL_82;
      case 16:
        uint64_t v8 = 0xD00000000000001DLL;
        unint64_t v10 = 0x800000018272F660LL;
        uint64_t v12 = "Access-Control-Request-Method";
        goto LABEL_82;
      case 17:
        uint64_t v8 = 6645569LL;
LABEL_27:
        uint64_t result = v8 | 0x20;
        unint64_t v6 = 0xE300000000000000LL;
        unint64_t v10 = 0xE300000000000000LL;
        break;
      case 18:
        uint64_t v8 = 0x776F6C6C41LL;
LABEL_29:
        uint64_t result = v8 | 0x20;
        unint64_t v6 = 0xE500000000000000LL;
        unint64_t v10 = 0xE500000000000000LL;
        break;
      case 19:
        uint64_t result = 0x6376732D746C61LL;
        uint64_t v8 = 0x6376532D746C41LL;
        break;
      case 20:
        uint64_t v8 = 0xD000000000000013LL;
        unint64_t v10 = 0x800000018272F6A0LL;
        uint64_t v12 = "Authentication-Info";
        goto LABEL_82;
      case 21:
        uint64_t v8 = 0x7A69726F68747541LL;
        uint64_t result = 0x7A69726F68747561LL;
        unint64_t v6 = 0xED00006E6F697461LL;
        unint64_t v10 = 0xED00006E6F697461LL;
        break;
      case 22:
        unint64_t v6 = 0xED00006C6F72746ELL;
        uint64_t result = 0x6F632D6568636163LL;
        uint64_t v8 = 0x6F432D6568636143LL;
        unint64_t v10 = 0xED00006C6F72746ELL;
        break;
      case 23:
        unint64_t v10 = 0x80000001827315E0LL;
        unsigned int v13 = "Capsule-Protocol";
        goto LABEL_80;
      case 24:
        uint64_t v8 = 0xD000000000000014LL;
        unint64_t v10 = 0x80000001827315A0LL;
        uint64_t v12 = "Client-Connection-Id";
        goto LABEL_82;
      case 25:
        unint64_t v6 = 0xEE00687361686F65LL;
        uint64_t result = 0x672D746E65696C63LL;
        uint64_t v14 = 0x746E65696C43LL;
LABEL_37:
        uint64_t v8 = v14 & 0xFFFFFFFFFFFFLL | 0x472D000000000000LL;
        unint64_t v10 = 0xEE00687361686F65LL;
        break;
      case 26:
        uint64_t v8 = 0x697463656E6E6F43LL;
        uint64_t result = 0x697463656E6E6F63LL;
        unint64_t v6 = 0xEA00000000006E6FLL;
        unint64_t v10 = 0xEA00000000006E6FLL;
        break;
      case 27:
        unint64_t v10 = 0x8000000182731560LL;
        unsigned int v13 = "Connect-UDP-Bind";
        goto LABEL_80;
      case 29:
        uint64_t v8 = 0xD000000000000013LL;
        unint64_t v10 = 0x800000018272F6E0LL;
        uint64_t v12 = "Content-Disposition";
        goto LABEL_82;
      case 30:
        unint64_t v10 = 0x800000018272F720LL;
        unsigned int v13 = "Content-Encoding";
        goto LABEL_80;
      case 31:
        unint64_t v10 = 0x800000018272F760LL;
        unsigned int v13 = "Content-Language";
        goto LABEL_80;
      case 32:
        uint64_t v8 = 0x2D746E65746E6F43LL;
        uint64_t result = 0x2D746E65746E6F63LL;
        unint64_t v6 = 0xEE006874676E654CLL;
        unint64_t v10 = 0xEE006874676E656CLL;
        break;
      case 33:
        unint64_t v10 = 0x800000018272F7A0LL;
        unsigned int v13 = "Content-Location";
        goto LABEL_80;
      case 34:
        uint64_t v8 = 0x2D746E65746E6F43LL;
        uint64_t result = 0x2D746E65746E6F63LL;
        unint64_t v6 = 0xED000065676E6152LL;
        unint64_t v10 = 0xED000065676E6172LL;
        break;
      case 35:
        uint64_t v8 = 0xD000000000000017LL;
        unint64_t v10 = 0x800000018272F7E0LL;
        uint64_t v12 = "Content-Security-Policy";
        goto LABEL_82;
      case 36:
        uint64_t v8 = 0x2D746E65746E6F43LL;
        uint64_t result = 0x2D746E65746E6F63LL;
        unint64_t v6 = 0xEC00000065707954LL;
        unint64_t v10 = 0xEC00000065707974LL;
        break;
      case 37:
        uint64_t v8 = 0x65696B6F6F43LL;
        goto LABEL_72;
      case 38:
        uint64_t v8 = 0xD00000000000001CLL;
        unint64_t v10 = 0x800000018272F880LL;
        uint64_t v12 = "Cross-Origin-Resource-Policy";
        goto LABEL_82;
      case 39:
        unint64_t v10 = 0x8000000182731520LL;
        unsigned int v13 = "Datagram-Flow-Id";
        goto LABEL_80;
      case 40:
        uint64_t v8 = 1702125892LL;
        goto LABEL_59;
      case 41:
        unint64_t v6 = 0xEA00000000006174LL;
        uint64_t result = 0x61642D796C726165LL;
        uint64_t v8 = 0x61442D796C726145LL;
        unint64_t v10 = 0xEA00000000006174LL;
        break;
      case 42:
        unint64_t v6 = 0xE400000000000000LL;
        uint64_t result = 1734440037LL;
        uint64_t v8 = 1734431813LL;
        unint64_t v10 = 0xE400000000000000LL;
        break;
      case 43:
        uint64_t v8 = 0x746365707845LL;
        goto LABEL_72;
      case 44:
        uint64_t v8 = 0x73657269707845LL;
        uint64_t result = 0x73657269707865LL;
        break;
      case 45:
        uint64_t v8 = 1836020294LL;
LABEL_59:
        uint64_t result = v8 | 0x20;
        unint64_t v6 = 0xE400000000000000LL;
        unint64_t v10 = 0xE400000000000000LL;
        break;
      case 47:
        uint64_t result = 0x686374616D2D6669LL;
        unint64_t v6 = 0xE800000000000000LL;
        uint64_t v8 = 0x686374614D2D6649LL;
        unint64_t v10 = 0xE800000000000000LL;
        break;
      case 48:
        uint64_t v8 = 0xD000000000000011LL;
        unint64_t v10 = 0x800000018272F8C0LL;
        uint64_t v12 = "If-Modified-Since";
        goto LABEL_82;
      case 49:
        unint64_t v6 = 0xED0000686374614DLL;
        unint64_t v10 = 0xED0000686374616DLL;
        uint64_t result = 0x2D656E6F6E2D6669LL;
        uint64_t v8 = 0x2D656E6F4E2D6649LL;
        break;
      case 50:
        uint64_t result = 0x65676E61722D6669LL;
        unint64_t v6 = 0xE800000000000000LL;
        uint64_t v8 = 0x65676E61522D6649LL;
        unint64_t v10 = 0xE800000000000000LL;
        break;
      case 51:
        uint64_t v8 = 0xD000000000000013LL;
        unint64_t v10 = 0x800000018272F900LL;
        uint64_t v12 = "If-Unmodified-Since";
        goto LABEL_82;
      case 52:
        unint64_t v6 = 0xEA00000000006576LL;
        uint64_t result = 0x696C612D7065656BLL;
        uint64_t v8 = 0x696C412D7065654BLL;
        unint64_t v10 = 0xEA00000000006576LL;
        break;
      case 53:
        unint64_t v6 = 0xED00006465696669LL;
        uint64_t result = 0x646F6D2D7473616CLL;
        uint64_t v8 = 0x646F4D2D7473614CLL;
        unint64_t v10 = 0xED00006465696669LL;
        break;
      case 54:
        uint64_t v8 = 0x6E6F697461636F4CLL;
        goto LABEL_74;
      case 55:
        unint64_t v6 = 0xEC00000073647261LL;
        uint64_t result = 0x77726F662D78616DLL;
        uint64_t v8 = 0x77726F462D78614DLL;
        unint64_t v10 = 0xEC00000073647261LL;
        break;
      case 56:
        uint64_t v8 = 0x6E696769724FLL;
        goto LABEL_72;
      case 57:
        unint64_t v6 = 0xE300000000000000LL;
        uint64_t result = 7353200LL;
        uint64_t v8 = 5256016LL;
        unint64_t v10 = 0xE300000000000000LL;
        break;
      case 58:
        uint64_t v8 = 0x616D67617250LL;
LABEL_72:
        uint64_t result = v8 | 0x20;
        unint64_t v6 = 0xE600000000000000LL;
        unint64_t v10 = 0xE600000000000000LL;
        break;
      case 59:
        uint64_t v8 = 0x797469726F697250LL;
LABEL_74:
        uint64_t result = v8 | 0x20;
        unint64_t v6 = 0xE800000000000000LL;
        unint64_t v10 = 0xE800000000000000LL;
        break;
      case 60:
        uint64_t v8 = 0xD000000000000012LL;
        unint64_t v10 = 0x800000018272F940LL;
        uint64_t v12 = "Proxy-Authenticate";
        goto LABEL_82;
      case 61:
        uint64_t v8 = 0xD000000000000019LL;
        unint64_t v10 = 0x800000018272F980LL;
        uint64_t v12 = "Proxy-Authentication-Info";
        goto LABEL_82;
      case 62:
        uint64_t v8 = 0xD000000000000013LL;
        unint64_t v10 = 0x800000018272F9C0LL;
        uint64_t v12 = "Proxy-Authorization";
        goto LABEL_82;
      case 63:
        uint64_t v8 = 0xD000000000000012LL;
        unint64_t v10 = 0x80000001827314E0LL;
        uint64_t v12 = "Proxy-Config-Epoch";
        goto LABEL_82;
      case 64:
        unint64_t v10 = 0x80000001827314A0LL;
        unsigned int v13 = "Proxy-Connection";
LABEL_80:
        unint64_t v6 = (unint64_t)(v13 - 32) | 0x8000000000000000LL;
        uint64_t v8 = 0xD000000000000010LL;
        uint64_t result = 0xD000000000000010LL;
        break;
      case 65:
        uint64_t v8 = 0xD000000000000015LL;
        unint64_t v10 = 0x8000000182731460LL;
        uint64_t v12 = "Proxy-QUIC-Forwarding";
LABEL_82:
        unint64_t v6 = (unint64_t)(v12 - 32) | 0x8000000000000000LL;
        uint64_t result = v8;
        break;
      default:
        unint64_t v6 = 0xEC00000073757461LL;
        uint64_t result = 0x74732D79786F7270LL;
        uint64_t v8 = 0x74532D79786F7250LL;
        unint64_t v10 = 0xEC00000073757461LL;
        switch(well_known)
        {
          case 'B':
            goto LABEL_83;
          case 'C':
            uint64_t v8 = 0x65676E6152LL;
            goto LABEL_29;
          case 'D':
            uint64_t v8 = 0x72657265666552LL;
            break;
          case 'E':
            unint64_t v6 = 0xEB00000000726574LL;
            uint64_t result = 0x66612D7972746572LL;
            uint64_t v8 = 0x66412D7972746552LL;
            unint64_t v10 = 0xEB00000000726574LL;
            goto LABEL_83;
          case 'F':
            uint64_t v8 = 0xD000000000000011LL;
            unint64_t v10 = 0x8000000182731420LL;
            uint64_t v12 = "Sec-CH-Background";
            goto LABEL_82;
          case 'G':
            unint64_t v6 = 0xEE00687361686F65LL;
            uint64_t result = 0x672D68632D636573LL;
            uint64_t v14 = 0x48432D636553LL;
            goto LABEL_37;
          case 'H':
            unint64_t v6 = 0xEB0000000065736FLL;
            uint64_t result = 0x707275702D636573LL;
            uint64_t v8 = 0x707275502D636553LL;
            unint64_t v10 = 0xEB0000000065736FLL;
            goto LABEL_83;
          case 'I':
            uint64_t v8 = 0xD000000000000014LL;
            unint64_t v10 = 0x800000018272FA00LL;
            uint64_t v12 = "Sec-WebSocket-Accept";
            goto LABEL_82;
          case 'J':
            uint64_t v8 = 0xD000000000000018LL;
            unint64_t v10 = 0x800000018272FA40LL;
            uint64_t v12 = "Sec-WebSocket-Extensions";
            goto LABEL_82;
          case 'K':
            uint64_t v8 = 0xD000000000000011LL;
            unint64_t v10 = 0x800000018272FA80LL;
            uint64_t v12 = "Sec-WebSocket-Key";
            goto LABEL_82;
          case 'L':
            uint64_t v8 = 0xD000000000000016LL;
            unint64_t v10 = 0x800000018272FAC0LL;
            uint64_t v12 = "Sec-WebSocket-Protocol";
            goto LABEL_82;
          case 'M':
            uint64_t v8 = 0xD000000000000015LL;
            unint64_t v10 = 0x800000018272FB00LL;
            uint64_t v12 = "Sec-WebSocket-Version";
            goto LABEL_82;
          case 'N':
            uint64_t v8 = 0x726576726553LL;
            goto LABEL_72;
          case 'O':
            uint64_t v8 = 0xD000000000000014LL;
            unint64_t v10 = 0x80000001827313E0LL;
            uint64_t v12 = "Server-Connection-Id";
            goto LABEL_82;
          case 'P':
            unint64_t v6 = 0xEA00000000006569LL;
            uint64_t result = 0x6B6F6F632D746573LL;
            uint64_t v8 = 0x6B6F6F432D746553LL;
            unint64_t v10 = 0xEA00000000006569LL;
            goto LABEL_83;
          case 'Q':
            uint64_t v8 = 0xD000000000000019LL;
            unint64_t v10 = 0x800000018272FB40LL;
            uint64_t v12 = "Strict-Transport-Security";
            goto LABEL_82;
          case 'R':
            unint64_t v6 = 0xE200000000000000LL;
            uint64_t result = 25972LL;
            uint64_t v8 = 17748LL;
            unint64_t v10 = 0xE200000000000000LL;
            goto LABEL_83;
          case 'S':
            uint64_t v8 = 0xD000000000000013LL;
            unint64_t v10 = 0x80000001827313A0LL;
            uint64_t v12 = "Timing-Allow-Origin";
            goto LABEL_82;
          case 'T':
            uint64_t v8 = 0x72656C69617254LL;
            break;
          case 'U':
            uint64_t v8 = 0xD000000000000011LL;
            unint64_t v10 = 0x800000018272FB80LL;
            uint64_t v12 = "Transfer-Encoding";
            goto LABEL_82;
          case 'V':
            uint64_t v8 = 0x65646172677055LL;
            break;
          case 'W':
            uint64_t v8 = 0xD000000000000019LL;
            unint64_t v10 = 0x8000000182731360LL;
            uint64_t v12 = "Upgrade-Insecure-Requests";
            goto LABEL_82;
          case 'X':
            unint64_t v6 = 0xEA0000000000746ELL;
            uint64_t result = 0x6567612D72657375LL;
            uint64_t v8 = 0x6567412D72657355LL;
            unint64_t v10 = 0xEA0000000000746ELL;
            goto LABEL_83;
          case 'Y':
            uint64_t v8 = 2037539158LL;
            goto LABEL_59;
          case 'Z':
            uint64_t v8 = 6383958LL;
            goto LABEL_27;
          case '[':
            unint64_t v10 = 0x800000018272FBC0LL;
            unsigned int v13 = "WWW-Authenticate";
            goto LABEL_80;
          case '\\':
            uint64_t v8 = 0xD000000000000016LL;
            unint64_t v10 = 0x800000018272FC00LL;
            uint64_t v12 = "X-Content-Type-Options";
            goto LABEL_82;
          case ']':
            unint64_t v6 = 0xEF736E6F6974704FLL;
            unint64_t v10 = 0xEF736E6F6974706FLL;
            uint64_t result = 0x2D656D6172662D78LL;
            uint64_t v8 = 0x2D656D6172462D58LL;
            goto LABEL_83;
          case '^':
            unint64_t v10 = 0x8000000182731320LL;
            unsigned int v13 = "X-XSS-Protection";
            goto LABEL_80;
          default:
            unint64_t v4 = sub_18264EB80();
            goto LABEL_3;
        }

        uint64_t result = v8 | 0x20;
        unint64_t v6 = 0xE700000000000000LL;
        unint64_t v10 = 0xE700000000000000LL;
        break;
    }
  }

  else
  {
    unint64_t v4 = sub_18264EB20();
LABEL_3:
    unint64_t v6 = v5;
    uint64_t v7 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000LL) == 0) {
      uint64_t v7 = v4 & 0xFFFFFFFFFFFFLL;
    }
    if (!v7 || (uint64_t v8 = v4, (sub_181C2B750(v4, v5) & 1) == 0))
    {
      uint64_t result = swift_bridgeObjectRelease();
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      return result;
    }

    uint64_t result = sub_18264EAB4();
  }

uint64_t sub_181C7C314@<X0>( unint64_t a1@<X0>, unint64_t a2@<X1>, void (*a3)(uint64_t, uint64_t, char *, uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, void (*a10)(uint64_t))
{
  uint64_t v33 = a6;
  uint64_t v34 = *MEMORY[0x1895F89C0];
  if ((sub_181BCE7EC(a1, a2) & 1) != 0)
  {
    uint64_t v32 = (uint64_t)a10;
    swift_bridgeObjectRetain();
    sub_181BCEDC8(a8);
    sub_181C7CCD4(a1, a2, (void (*)(uint64_t, uint64_t, void *, uint64_t))a3, a4, a5, v33, a7, a8, a10);
    goto LABEL_13;
  }

  v30[1] = a9;
  uint64_t v31 = a5;
  uint64_t v32 = a4;
  uint64_t v18 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v18 = a1;
  }
  uint64_t v19 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v19 = 11LL;
  }
  unint64_t isStackAllocationSafe = sub_181C86740(0xFuLL, v19 | (v18 << 16), a1, a2);
  uint64_t v21 = isStackAllocationSafe + 1;
  if (__OFADD__(isStackAllocationSafe, 1LL))
  {
    __break(1u);
LABEL_15:
    __break(1u);
  }

  if (v21 < 0) {
    goto LABEL_15;
  }
  if (v21 < 1025 || (unint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    uint64_t v23 = (char *)v30 - v22;
    sub_181C7DB2C((uint64_t)v30 - v22, v21, a1, a2);
    uint64_t v24 = sub_18264EB50();
    uint64_t v25 = sub_18264EB50();
    a3(v31, v24, v23, v25);
  }

  else
  {
    uint64_t v26 = swift_slowAlloc();
    sub_181C7DB2C(v26, v21, a1, a2);
    uint64_t v27 = sub_18264EB50();
    uint64_t v28 = sub_18264EB50();
    a3(v31, v27, (char *)v26, v28);
    MEMORY[0x186E12168](v26, -1LL, -1LL);
  }

uint64_t sub_181C7C560(unint64_t a1, unint64_t a2, uint64_t (*a3)(char *))
{
  v15[1] = *MEMORY[0x1895F89C0];
  if ((sub_181BCE7EC(a1, a2) & 1) != 0) {
    return sub_181C7CF94(a1, a2, (uint64_t (*)(void *))a3);
  }
  uint64_t v8 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v8 = a1;
  }
  uint64_t v9 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v9 = 11LL;
  }
  unint64_t isStackAllocationSafe = sub_181C86740(0xFuLL, v9 | (v8 << 16), a1, a2);
  uint64_t v11 = isStackAllocationSafe + 1;
  if (__OFADD__(isStackAllocationSafe, 1LL))
  {
    __break(1u);
LABEL_16:
    __break(1u);
  }

  if (v11 < 0) {
    goto LABEL_16;
  }
  if (v11 < 1025 || (unint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    unsigned int v13 = (char *)v15 - v12;
    sub_181C7DB2C((uint64_t)v15 - v12, v11, a1, a2);
    uint64_t result = a3(v13);
    if (v3) {
      return swift_willThrow();
    }
  }

  else
  {
    uint64_t v14 = swift_slowAlloc();
    sub_181C7DB2C(v14, v11, a1, a2);
    a3((char *)v14);
    return MEMORY[0x186E12168](v14, -1LL, -1LL);
  }

  return result;
}

uint64_t sub_181C7C718( unint64_t a1, unint64_t a2, void (**a3)(void, void, void, void, void, void), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t v33 = a7;
  uint64_t v34 = a4;
  uint64_t v35 = *MEMORY[0x1895F89C0];
  if ((sub_181BCE7EC(a1, a2) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _Block_copy(a3);
    sub_181C7D3AC(a1, a2, a3, v34, a5, a6, v33, a8, a9);
    goto LABEL_19;
  }

  v31[1] = a5;
  int v32 = a9;
  uint64_t v15 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v15 = a1;
  }
  uint64_t v16 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v16 = 11LL;
  }
  unint64_t isStackAllocationSafe = sub_181C86740(0xFuLL, v16 | (v15 << 16), a1, a2);
  uint64_t v18 = isStackAllocationSafe + 1;
  if (__OFADD__(isStackAllocationSafe, 1LL))
  {
    __break(1u);
LABEL_21:
    __break(1u);
  }

  if (v18 < 0) {
    goto LABEL_21;
  }
  if (v18 < 1025 || (unint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    uint64_t v20 = (char *)v31 - v19;
    sub_181C7DB2C((uint64_t)v31 - v19, v18, a1, a2);
    uint64_t v21 = sub_18264EB50();
    uint64_t v22 = sub_18264EB50();
    unsigned int v23 = (v32 - 1);
    if (v23 < 3) {
      uint64_t v24 = v23 + 1;
    }
    else {
      uint64_t v24 = 0LL;
    }
    ((void (**)(void, uint64_t, uint64_t, char *, uint64_t, uint64_t))a3)[2](a3, v34, v21, v20, v22, v24);
  }

  else
  {
    uint64_t v25 = swift_slowAlloc();
    sub_181C7DB2C(v25, v18, a1, a2);
    uint64_t v26 = sub_18264EB50();
    uint64_t v27 = sub_18264EB50();
    unsigned int v28 = (v32 - 1);
    if (v28 < 3) {
      uint64_t v29 = v28 + 1;
    }
    else {
      uint64_t v29 = 0LL;
    }
    a3[2](a3, v34, v26, v25, v27, v29);
    MEMORY[0x186E12168](v25, -1LL, -1LL);
  }

uint64_t sub_181C7C9A0( unint64_t a1, unint64_t a2, void (**a3)(void, void, void, void, void), uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  if ((sub_181BCE7EC(a1, a2) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    _Block_copy(a3);
    sub_181C7D574(a1, a2, a3, a4, a5, a6, a7);
    goto LABEL_21;
  }

  int v29 = a7;
  uint64_t v14 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v14 = a1;
  }
  uint64_t v15 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v15 = 11LL;
  }
  unint64_t isStackAllocationSafe = sub_181C86740(0xFuLL, v15 | (v14 << 16), a1, a2);
  uint64_t v17 = isStackAllocationSafe + 1;
  if (__OFADD__(isStackAllocationSafe, 1LL))
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  if (v17 < 0)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }

  if (v17 < 1025 || (unint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    v28[1] = v28;
    MEMORY[0x1895F8858](isStackAllocationSafe);
    uint64_t v19 = (char *)v28 - v18;
    sub_181C7DB2C((uint64_t)v28 - v18, v17, a1, a2);
    uint64_t v20 = sub_18264EB50();
    if (!__OFSUB__(v20, a4))
    {
      unsigned int v21 = (v29 - 1);
      if (v21 < 3) {
        uint64_t v22 = v21 + 1;
      }
      else {
        uint64_t v22 = 0LL;
      }
      ((void (**)(void, char *, uint64_t, uint64_t, uint64_t))a3)[2](a3, v19, a4, v20 - a4, v22);
      goto LABEL_21;
    }

    goto LABEL_23;
  }

  uint64_t v23 = swift_slowAlloc();
  sub_181C7DB2C(v23, v17, a1, a2);
  uint64_t v24 = sub_18264EB50();
  if (__OFSUB__(v24, a4)) {
    goto LABEL_25;
  }
  unsigned int v25 = (v29 - 1);
  if (v25 < 3) {
    uint64_t v26 = v25 + 1;
  }
  else {
    uint64_t v26 = 0LL;
  }
  a3[2](a3, v23, a4, v24 - a4, v26);
  MEMORY[0x186E12168](v23, -1LL, -1LL);
LABEL_21:
  _Block_release(a3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_181C7CBF8( void (*a1)(char *__return_ptr, void *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a4 & 0x1000000000000000LL) != 0 || !(a4 & 0x2000000000000000LL | a3 & 0x1000000000000000LL))
  {
    sub_18264F144();
    if (!v4) {
      char v7 = v11;
    }
  }

  else if ((a4 & 0x2000000000000000LL) != 0)
  {
    v10[0] = a3;
    v10[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    a1(&v9, v10);
    if (!v4) {
      char v7 = v9;
    }
  }

  else
  {
    if ((a3 & 0x1000000000000000LL) != 0) {
      uint64_t v6 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v6 = sub_18264F228();
    }
    a1((char *)v10, (void *)v6);
    if (!v4) {
      char v7 = v10[0];
    }
  }

  return v7 & 1;
}

uint64_t sub_181C7CCD4( uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, void *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(uint64_t))
{
  if ((a2 & 0x1000000000000000LL) != 0 || !(a2 & 0x2000000000000000LL | a1 & 0x1000000000000000LL))
  {
    sub_18264F144();
  }

  else if ((a2 & 0x2000000000000000LL) != 0)
  {
    v16[0] = a1;
    v16[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v13 = sub_18264EB50();
    uint64_t v14 = sub_18264EB50();
    a3(a5, v13, v16, v14);
  }

  else
  {
    if ((a1 & 0x1000000000000000LL) != 0) {
      uint64_t v11 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v11 = sub_18264F228();
    }
    a9(v11);
  }

  swift_bridgeObjectRelease();
  return sub_181BCEE10(a8);
}

uint64_t sub_181C7CE10@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t, uint64_t, char *, uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, void (*a9)(uint64_t))
{
  void v20[4] = a3;
  v20[5] = a4;
  v20[6] = a5;
  v20[7] = a6;
  v20[8] = a7;
  if ((a2 & 0x1000000000000000LL) != 0 || !(a2 & 0x2000000000000000LL | a1 & 0x1000000000000000LL))
  {
    sub_18264F144();
  }

  else
  {
    _OWORD v21[3] = v20;
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      v21[0] = a1;
      v21[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      v20[1] = v9;
      unint64_t v18 = *(void *)(a3 + 40);
      unint64_t v17 = *(void *)(a3 + 48);
      swift_bridgeObjectRetain();
      sub_181BCEDC8(a3);
      sub_181C7C314(v18, v17, a4, a5, (uint64_t)v21, a6, a7, a3, a8, a9);
      sub_181BCEE10(a3);
      return swift_bridgeObjectRelease();
    }

    if ((a1 & 0x1000000000000000LL) != 0) {
      uint64_t v16 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v16 = sub_18264F228();
    }
    sub_181C7D6D0(v16, a3, a4, a5, a6, a7, a9, a8);
  }

  sub_181BCEE10(a3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_181C7CF94(uint64_t a1, uint64_t a2, uint64_t (*a3)(void *))
{
  if ((a2 & 0x1000000000000000LL) != 0 || !(a2 & 0x2000000000000000LL | a1 & 0x1000000000000000LL)) {
    return sub_18264F144();
  }
  if ((a2 & 0x2000000000000000LL) != 0)
  {
    v6[0] = a1;
    v6[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v4 = v6;
  }

  else if ((a1 & 0x1000000000000000LL) != 0)
  {
    uint64_t v4 = (void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    uint64_t v4 = (void *)sub_18264F228();
  }

  return a3(v4);
}

void sub_181C7D04C(uint64_t a1, uint64_t a2, void (**a3)(void, void, void, void))
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  if ((a2 & 0x1000000000000000LL) != 0 || !(a2 & 0x2000000000000000LL | a1 & 0x1000000000000000LL))
  {
    sub_18264F144();
LABEL_7:
    _Block_release(a3);
    return;
  }

  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((a1 & 0x1000000000000000LL) != 0) {
      uint64_t v6 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v6 = sub_18264F228();
    }
    a3[2](a3, v6, v5, v4);
    goto LABEL_7;
  }

  v7[0] = a1;
  v7[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  ((void (*)(void (**)(void, void, void, void), void *))a3[2])(a3, v7);
  _Block_release(a3);
}

void sub_181C7D130(uint64_t a1, uint64_t a2, void (**a3)(void, void, void, void))
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  if ((a2 & 0x1000000000000000LL) != 0 || !(a2 & 0x2000000000000000LL | a1 & 0x1000000000000000LL))
  {
    sub_18264F144();
LABEL_7:
    _Block_release(a3);
    return;
  }

  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((a1 & 0x1000000000000000LL) != 0) {
      uint64_t v6 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v6 = sub_18264F228();
    }
    a3[2](a3, v6, v5, v4);
    goto LABEL_7;
  }

  v7[0] = a1;
  v7[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  ((void (*)(void (**)(void, void, void, void), void *))a3[2])(a3, v7);
  _Block_release(a3);
}

uint64_t sub_181C7D224( uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, void *aBlock, uint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  if ((a2 & 0x1000000000000000LL) != 0 || !(a2 & 0x2000000000000000LL | a1 & 0x1000000000000000LL))
  {
    sub_18264F144();
  }

  else
  {
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      v16[0] = a1;
      v16[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      _Block_copy(aBlock);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_181C7C718( a3,  a4,  (void (**)(void, void, void, void, void, void))aBlock,  (uint64_t)v16,  a6,  a7,  a3,  a4,  a8);
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }

    if ((a1 & 0x1000000000000000LL) != 0) {
      uint64_t v14 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v14 = sub_18264F228();
    }
    sub_181C85C28(v14, a3, a4, aBlock, a6, a7, a8);
  }

  swift_bridgeObjectRelease();
LABEL_9:
  _Block_release(aBlock);
  return swift_bridgeObjectRelease();
}

uint64_t sub_181C7D3AC( uint64_t a1, uint64_t a2, void (**a3)(void, void, void, void, void, void), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  __int128 v21[2] = a3;
  _OWORD v21[3] = a4;
  void v21[4] = a5;
  v21[5] = a6;
  v21[6] = a7;
  v21[7] = a8;
  char v22 = a9;
  if ((a2 & 0x1000000000000000LL) != 0 || !(a2 & 0x2000000000000000LL | a1 & 0x1000000000000000LL))
  {
    sub_18264F144();
    _Block_release(a3);
  }

  else if ((a2 & 0x2000000000000000LL) != 0)
  {
    v23[0] = a1;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v16 = sub_18264EB50();
    uint64_t v17 = sub_18264EB50();
    unsigned int v18 = (a9 - 1);
    if (v18 < 3) {
      uint64_t v19 = v18 + 1;
    }
    else {
      uint64_t v19 = 0LL;
    }
    ((void (**)(void, uint64_t, uint64_t, void *, uint64_t, uint64_t))a3)[2](a3, a4, v16, v23, v17, v19);
    _Block_release(a3);
  }

  else
  {
    void v23[3] = v21;
    if ((a1 & 0x1000000000000000LL) != 0) {
      uint64_t v15 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v15 = sub_18264F228();
    }
    sub_181C85CD4(v15, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    _Block_release(a3);
  }

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_181C7D574( uint64_t a1, uint64_t a2, void (**a3)(void, void, void, void, void), uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if ((a2 & 0x1000000000000000LL) != 0 || !(a2 & 0x2000000000000000LL | a1 & 0x1000000000000000LL))
  {
    sub_18264F144();
LABEL_7:
    _Block_release(a3);
    return swift_bridgeObjectRelease();
  }

  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((a1 & 0x1000000000000000LL) != 0) {
      uint64_t v12 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v12 = sub_18264F228();
    }
    sub_181C85EBC(v12, (uint64_t)a3, a4, a5, a6, a7);
    goto LABEL_7;
  }

  v16[0] = a1;
  v16[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  uint64_t result = sub_18264EB50();
  if (!__OFSUB__(result, a4))
  {
    unsigned int v14 = (a7 - 1);
    if (v14 < 3) {
      uint64_t v15 = v14 + 1;
    }
    else {
      uint64_t v15 = 0LL;
    }
    ((void (**)(void, void *, uint64_t, uint64_t, uint64_t))a3)[2](a3, v16, a4, result - a4, v15);
    _Block_release(a3);
    return swift_bridgeObjectRelease();
  }

  __break(1u);
  return result;
}

uint64_t sub_181C7D6D0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, uint64_t, char *, uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t)@<X6>, uint64_t a8@<X8>)
{
  unint64_t v15 = *(void *)(a2 + 40);
  unint64_t v16 = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  sub_181BCEDC8(a2);
  return sub_181C7C314(v15, v16, a3, a4, a1, a5, a6, a2, a8, a7);
}

uint64_t sub_181C7D774(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = *v1;
  v11[3] = v5;
  void v11[4] = v6;
  v11[0] = v2;
  v11[1] = v3;
  void v11[2] = v4;
  uint64_t v7 = HTTPFields.subscript.getter((uint64_t)v11);
  if (*(void *)(v7 + 16))
  {
    if (v4 != 0x65696B6F6F63LL || v5 != 0xE600000000000000LL) {
      sub_18264F4EC();
    }
    uint64_t v9 = sub_181C7B318(v7);
    swift_bridgeObjectRelease();
    v11[0] = v9;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58AC68);
    sub_181C02894((unint64_t *)&qword_18C58AC70, &qword_18C58AC68, MEMORY[0x189618458]);
    uint64_t v8 = sub_18264E9F4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  return v8;
}

uint64_t sub_181C7D8C4(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v3 = a3[1];
  uint64_t v6 = a3[2];
  uint64_t v5 = a3[3];
  if (a2)
  {
    BOOL v9 = v6 == 0x65696B6F6F63LL && v5 == 0xE600000000000000LL;
    if (v9 || (sub_18264F4EC() & 1) != 0)
    {
      sub_181C251EC();
      uint64_t v10 = sub_18264EF88();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v11 = sub_181C86FD4(v10, v4, v3, v6, v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_181C1F9FC(v11, v4, v3, v6, v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v13 = sub_181C024EC(a1, a2);
      uint64_t v15 = v14;
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58AC90);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18265BE50;
      *(void *)(inited + 32) = v4;
      *(_BYTE *)(inited + 64) = 0;
      *(void *)(inited + 40) = v3;
      *(void *)(inited + 48) = v6;
      *(void *)(inited + 56) = v5;
      *(void *)(inited + 72) = v13;
      *(void *)(inited + 80) = v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_181C1F9FC(inited, v4, v3, v6, v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_setDeallocating();
      return swift_arrayDestroy();
    }
  }

  else
  {
    sub_181C1F9FC(MEMORY[0x18961AFE8], *a3, a3[1], v6, v5);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

unint64_t sub_181C7DB2C(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x2000000000000000LL) != 0) {
    uint64_t v7 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v7 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v7)
  {
    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    do
    {
      if ((a4 & 0x1000000000000000LL) != 0)
      {
        LOBYTE(v10) = sub_18264F15C();
        if (__OFADD__(v8, 1LL)) {
          goto LABEL_22;
        }
      }

      else
      {
        if ((a4 & 0x2000000000000000LL) != 0)
        {
          v15[0] = a3;
          v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
          int v10 = *((unsigned __int8 *)v15 + v9);
          if (*((char *)v15 + v9) < 0) {
            __asm { BR              X9 }
          }
        }

        else
        {
          uint64_t v12 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000LL) == 0) {
            uint64_t v12 = sub_18264F228();
          }
          int v10 = *(unsigned __int8 *)(v12 + v9);
          if (*(char *)(v12 + v9) < 0) {
            __asm { BR              X10 }
          }
        }

        uint64_t v11 = 1LL;
        if (__OFADD__(v8, 1LL))
        {
LABEL_22:
          __break(1u);
          JUMPOUT(0x181C7DD38LL);
        }
      }

      v9 += v11;
      *(_BYTE *)(a1 + v8++) = v10;
    }

    while (v9 < v7);
  }

  uint64_t v13 = 7LL;
  if (((a4 >> 60) & ((a3 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v13 = 11LL;
  }
  unint64_t result = sub_181C86740(0xFuLL, v13 | (v7 << 16), a3, a4);
  *(_BYTE *)(a1 + result) = 0;
  return result;
}

uint64_t _nw_http_field_has_name(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_181C7B3EC(a2, -1LL, (uint64_t)&v10);
  uint64_t v5 = v11;
  if (v11)
  {
    uint64_t v6 = v10;
    if (v3 == v12 && v13 == v4) {
      char v8 = 1;
    }
    else {
      char v8 = sub_18264F4EC();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_181C7DE74(v6, v5);
    return v8 & 1;
  }

  else
  {
    uint64_t result = sub_18264F324();
    __break(1u);
  }

  return result;
}

uint64_t sub_181C7DE74(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t _nw_http_field_set_value()
{
  unint64_t v0 = sub_18264EB80();
  return HTTPField.value.setter(v0, v1);
}

void _nw_http_field_access(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = _Block_copy(v3);
  __int128 v5 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v5;
  uint64_t v12[2] = *(_OWORD *)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v11 = v4;
  char v8 = sub_181C86A48;
  uint64_t v9 = &v10;
  __int128 v6 = v12[0];
  sub_181BCEDC8((uint64_t)v12);
  sub_181BCEDC8((uint64_t)v12);
  swift_bridgeObjectRetain();
  sub_181C7CE10( v6,  *((uint64_t *)&v6 + 1),  (uint64_t)v12,  (void (*)(uint64_t, uint64_t, char *, uint64_t))sub_181BD639C,  (uint64_t)v7,  v6,  *((uint64_t *)&v6 + 1),  (uint64_t)sub_181C87558,  (void (*)(uint64_t))sub_181C87558);
  _Block_release(v4);
  sub_181BCEE10((uint64_t)v12);
  _Block_release(v3);
}

void _nw_http_field_access_canonical(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = _Block_copy(v3);
  __int128 v5 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v5;
  uint64_t v12[2] = *(_OWORD *)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v11 = v4;
  char v8 = sub_181C8761C;
  uint64_t v9 = &v10;
  __int128 v6 = v5;
  sub_181BCEDC8((uint64_t)v12);
  sub_181BCEDC8((uint64_t)v12);
  swift_bridgeObjectRetain();
  sub_181C7CE10( v6,  *((uint64_t *)&v6 + 1),  (uint64_t)v12,  (void (*)(uint64_t, uint64_t, char *, uint64_t))sub_181BDA300,  (uint64_t)v7,  v6,  *((uint64_t *)&v6 + 1),  (uint64_t)sub_181C87558,  (void (*)(uint64_t))sub_181C87558);
  _Block_release(v4);
  sub_181BCEE10((uint64_t)v12);
  _Block_release(v3);
}

uint64_t _nw_http_field_set_indexing_strategy(uint64_t result, unsigned int a2)
{
  if (a2 >= 4) {
    char v2 = 0;
  }
  else {
    char v2 = a2;
  }
  *(_BYTE *)(result + 32) = v2;
  return result;
}

uint64_t _nw_http_field_get_indexing_strategy(uint64_t a1)
{
  else {
    return 0LL;
  }
}

void sub_181C7E0AC()
{
}

void sub_181C7E0F4()
{
}

void sub_181C7E13C()
{
}

void sub_181C7E184()
{
}

uint64_t sub_181C7E1CC(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 104LL))(*a2) & 1;
}

uint64_t sub_181C7E1FC(void (*a1)(uint64_t))
{
  return swift_endAccess();
}

uint64_t sub_181C7E260@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  a1[3] = &type metadata for HTTPFields;
  a1[4] = &off_189BAB1C0;
  *a1 = v3;
  return swift_retain();
}

uint64_t sub_181C7E2B8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v1;
  swift_retain();
  return v2;
}

uint64_t sub_181C7E318(uint64_t a1)
{
  if (*(__objc2_class **)a1 == &OBJC_CLASS____TtC7NetworkP33_CFBD4EB2ABB20EFC96032331681B9C8314__NWHTTPFields)
  {
    swift_beginAccess();
    uint64_t v4 = *(void *)(v1 + 16);
    swift_beginAccess();
    uint64_t v5 = *(void *)(a1 + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    char v2 = sub_181C24B78(v4, v5);
    swift_release();
    swift_release();
    swift_release();
  }

  else
  {
    char v2 = 0;
  }

  return v2 & 1;
}

uint64_t sub_181C7E3D4()
{
  return swift_release();
}

uint64_t sub_181C7E3DC()
{
  return sub_181C84E84((void (*)(void))MEMORY[0x18961B3C8]);
}

uint64_t _nw_http_fields_create()
{
  uint64_t v0 = (void *)swift_allocObject();
  uint64_t v1 = MEMORY[0x18961AFE8];
  v0[2] = MEMORY[0x18961AFE8];
  v0[3] = sub_181C87FF8(v1);
  char v2 = (_DWORD *)swift_slowAlloc();
  v0[4] = v2;
  *char v2 = 0;
  type metadata accessor for __NWHTTPFields();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v0;
  return result;
}

uint64_t _nw_http_fields_copy(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 96LL);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  return v3;
}

uint64_t _nw_http_fields_is_equal(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 104LL);
  swift_retain();
  uint64_t v2 = swift_retain();
  LOBYTE(sub_181BCD4F0(v0, v1) = v1(v2);
  swift_release();
  swift_release();
  return v1 & 1;
}

uint64_t _nw_http_fields_get_count()
{
  uint64_t v0 = swift_retain();
  (*(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t *@<X0>, void *@<X8>), void, void))(*(void *)v0 + 80LL))( &v2,  sub_181C7E544,  0LL,  MEMORY[0x189618740]);
  swift_release();
  return v2;
}

uint64_t sub_181C7E544@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(void *)(*(void *)(v3 + 16) + 16LL);
  return result;
}

uint64_t sub_181C7E590(uint64_t a1, unint64_t a2, char *a3)
{
  uint64_t v6 = v22;
  if (v22)
  {
    uint64_t v7 = (uint64_t)v21;
    uint64_t v9 = v23;
    uint64_t v8 = v24;
    size_t v10 = strlen(a3);
    if (v10)
    {
      if (*a3 < 0) {
        goto LABEL_11;
      }
      if (v10 == 1) {
        goto LABEL_10;
      }
      if (a3[1] < 0)
      {
LABEL_11:
        unsigned int v21 = a3;
        uint64_t v22 = v10;
        uint64_t v23 = sub_181C94200;
        uint64_t v24 = 0LL;
        sub_181C86A84(v7, v6);
        __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D498);
        sub_181C02894((unint64_t *)&unk_18C58D4A0, &qword_18C58D498, MEMORY[0x189619618]);
        sub_18264EB14();
        uint64_t v13 = 0LL;
        unint64_t v15 = 0xE000000000000000LL;
        goto LABEL_12;
      }

      size_t v11 = v10 - 2;
      if (v10 != 2)
      {
        uint64_t v12 = a3 + 2;
        while ((*v12 & 0x80000000) == 0)
        {
          ++v12;
          if (!--v11) {
            goto LABEL_10;
          }
        }

        goto LABEL_11;
      }
    }

uint64_t sub_181C7E7D8(uint64_t *a1, uint64_t a2)
{
  __int128 v11 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  char v5 = *(_BYTE *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v8 = *a1;
  swift_beginAccess();
  uint64_t v9 = *(void *)(*(void *)(v8 + 16) + 16LL);
  __int128 v12 = v11;
  uint64_t v13 = v3;
  uint64_t v14 = v4;
  char v15 = v5;
  uint64_t v16 = v6;
  uint64_t v17 = v7;
  sub_181BCEDC8(a2);
  sub_181C216E0(v9, v9, (uint64_t)&v12);
  return sub_181BCEE10(a2);
}

uint64_t sub_181C7E884(uint64_t a1, unint64_t a2, char *a3)
{
  uint64_t v6 = v14;
  if (v14)
  {
    uint64_t v7 = (uint64_t)v13;
    size_t v8 = strlen(a3);
    if (v8)
    {
      if (*a3 < 0) {
        goto LABEL_11;
      }
      if (v8 == 1) {
        goto LABEL_10;
      }
      if (a3[1] < 0)
      {
LABEL_11:
        uint64_t v13 = a3;
        size_t v14 = v8;
        char v15 = sub_181C94200;
        uint64_t v16 = 0LL;
        __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D498);
        sub_181C02894((unint64_t *)&unk_18C58D4A0, &qword_18C58D498, MEMORY[0x189619618]);
        sub_18264EB14();
        uint64_t v11 = 0LL;
        goto LABEL_12;
      }

      size_t v9 = v8 - 2;
      if (v8 != 2)
      {
        size_t v10 = a3 + 2;
        while ((*v10 & 0x80000000) == 0)
        {
          ++v10;
          if (!--v9) {
            goto LABEL_10;
          }
        }

        goto LABEL_11;
      }
    }

uint64_t sub_181C7EA64( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  v10[0] = a2;
  v10[1] = a3;
  void v10[2] = a4;
  v10[3] = a5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_181C7D8C4(a6, a7, v10);
}

uint64_t sub_181C7EAD4(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_181C7B3EC(a2, -1LL, (uint64_t)&v8);
  uint64_t v5 = v9;
  if (v9)
  {
    uint64_t v6 = v8;
    MEMORY[0x1895F8858](v4);
    (*(void (**)(uint64_t (*)(uint64_t)))(*(void *)a1 + 80LL))(sub_181C86ACC);
    swift_release();
    return sub_181C7DE74(v6, v5);
  }

  else
  {
    uint64_t result = sub_18264F324();
    __break(1u);
  }

  return result;
}

uint64_t sub_181C7EBE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return swift_bridgeObjectRelease();
}

uint64_t _nw_http_fields_remove(uint64_t a1, uint64_t a2)
{
  v4[2] = a2;
  uint64_t v2 = *(void (**)(uint64_t (*)(uint64_t *), void *, uint64_t))(*(void *)a1 + 80LL);
  swift_retain();
  v2(sub_181C86AD8, v4, MEMORY[0x18961AFC8] + 8LL);
  return swift_release();
}

uint64_t sub_181C7ECAC(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  unint64_t v5 = *(void *)(*(void *)(v3 + 16) + 16LL);
  if (!v5)
  {
    __break(1u);
    goto LABEL_6;
  }

  if ((a2 & 0x8000000000000000LL) != 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if (v5 > a2) {
    return sub_181C25944(a2);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_181C7ED28(uint64_t a1, unint64_t a2)
{
  void (*v9)(unint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t *@<X8>), void *, uint64_t);
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t result;
  void v20[4];
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  swift_retain();
  uint64_t v4 = sub_181C7B3EC(a2, -1LL, (uint64_t)&v23);
  uint64_t v5 = v24;
  if (v24)
  {
    uint64_t v7 = v25;
    uint64_t v6 = v26;
    uint64_t v8 = v23;
    MEMORY[0x1895F8858](v4);
    void v20[2] = v8;
    v20[3] = v5;
    unsigned int v21 = v7;
    uint64_t v22 = v6;
    uint64_t v9 = *(void (**)(unint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t *@<X8>), void *, uint64_t))(*(void *)a1 + 80LL);
    size_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58A208);
    v9(&v23, sub_181C86AE0, v20, v10);
    sub_181C7DE74(v8, v5);
    uint64_t v11 = v24;
    if (!v24)
    {
      swift_release();
      return 0LL;
    }

    __int128 v12 = v23;
    uint64_t v13 = HIBYTE(v24) & 0xF;
    if ((v24 & 0x2000000000000000LL) == 0) {
      uint64_t v13 = v23;
    }
    size_t v14 = 7LL;
    if (((v24 >> 60) & ((v23 & 0x800000000000000LL) == 0)) != 0) {
      size_t v14 = 11LL;
    }
    char v15 = sub_181C86740(0xFuLL, v14 | (v13 << 16), v23, v24);
    uint64_t v16 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
      __break(1u);
    }

    else
    {
      uint64_t v17 = malloc(v15 + 1);
      if (v17)
      {
        uint64_t v18 = v17;
        sub_181C7DB2C((uint64_t)v17, v16, v12, v11);
        swift_release();
        swift_bridgeObjectRelease();
        return (uint64_t)v18;
      }
    }

    __break(1u);
  }

  LODWORD(v22) = 0;
  unsigned int v21 = 374LL;
  uint64_t result = sub_18264F324();
  __break(1u);
  return result;
}

uint64_t _nw_http_fields_have_field_with_name(uint64_t a1, unint64_t a2)
{
  return sub_181C7EF00(a1, a2) & 1;
}

uint64_t sub_181C7EF00(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_181C7B3EC(a2, -1LL, (uint64_t)&v8);
  uint64_t v5 = v9;
  if (v9)
  {
    uint64_t v6 = v8;
    MEMORY[0x1895F8858](v4);
    (*(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(_BYTE *@<X8>)))(*(void *)a1 + 80LL))( &v8,  sub_181C86B2C);
    swift_release();
    sub_181C7DE74(v6, v5);
    return v8;
  }

  else
  {
    uint64_t result = sub_18264F324();
    __break(1u);
  }

  return result;
}

uint64_t sub_181C7F01C@<X0>(uint64_t a1@<X3>, uint64_t a2@<X4>, _BYTE *a3@<X8>)
{
  if (*(void *)(sub_181C1DA34() + 16))
  {
    swift_bridgeObjectRetain();
    sub_181C8C01C(a1, a2);
    char v7 = v6;
    swift_bridgeObjectRelease();
  }

  else
  {
    char v7 = 0;
  }

  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  *a3 = v7 & 1;
  return result;
}

void _nw_http_fields_append_advanced( uint64_t a1, unint64_t a2, uint64_t a3, char *a4, size_t a5, void *aBlock)
{
  uint64_t v11 = _Block_copy(aBlock);
  sub_181C7F118(a1, a2, a3, a4, a5, v11);
  _Block_release(v11);
}

uint64_t sub_181C7F118(uint64_t a1, unint64_t a2, uint64_t a3, char *a4, size_t a5, void *aBlock)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  uint64_t v11 = (void (**)(void *, uint64_t *))_Block_copy(aBlock);
  swift_retain();
  sub_181C7B3EC(a2, a3, (uint64_t)&v26);
  uint64_t v12 = v27;
  if (v27)
  {
    uint64_t v13 = (uint64_t)v26;
    size_t v14 = v28;
    uint64_t v15 = v29;
    if (a5 == -1LL)
    {
      a5 = strlen(a4);
      if (!a5) {
        goto LABEL_13;
      }
    }

    else if (!a5)
    {
      goto LABEL_13;
    }

    if (*a4 < 0) {
      goto LABEL_14;
    }
    if (a5 == 1) {
      goto LABEL_13;
    }
    if (a4[1] < 0)
    {
LABEL_14:
      uint64_t v26 = a4;
      uint64_t v27 = a5;
      unsigned int v28 = sub_181C94200;
      uint64_t v29 = 0LL;
      sub_181C86A84(v13, v12);
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D498);
      sub_181C02894((unint64_t *)&unk_18C58D4A0, &qword_18C58D498, MEMORY[0x189619618]);
      sub_18264EB14();
      uint64_t v18 = 0LL;
      unint64_t v20 = 0xE000000000000000LL;
      goto LABEL_15;
    }

    size_t v16 = a5 - 2;
    if (a5 != 2)
    {
      uint64_t v17 = a4 + 2;
      while ((*v17 & 0x80000000) == 0)
      {
        ++v17;
        if (!--v16) {
          goto LABEL_13;
        }
      }

      goto LABEL_14;
    }

uint64_t sub_181C7F3DC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v4 = a2[3];
  char v6 = *((_BYTE *)a2 + 32);
  uint64_t v8 = a2[5];
  uint64_t v7 = a2[6];
  uint64_t v9 = *a1;
  swift_beginAccess();
  uint64_t v10 = *(void *)(*(void *)(v9 + 16) + 16LL);
  v12[0] = v3;
  v12[1] = v2;
  uint64_t v12[2] = v5;
  _OWORD v12[3] = v4;
  char v13 = v6;
  uint64_t v14 = v8;
  uint64_t v15 = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_181C216E0(v10, v10, (uint64_t)v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void _nw_http_fields_access_value_by_name(uint64_t a1, unint64_t a2, void *aBlock)
{
  uint64_t v5 = _Block_copy(aBlock);
  sub_181C7F4E8(a1, a2, v5);
  _Block_release(v5);
}

void sub_181C7F4E8(uint64_t a1, unint64_t a2, void *aBlock)
{
  uint64_t v5 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v6 = sub_181C7B3EC(a2, -1LL, (uint64_t)&v9);
  uint64_t v7 = v10;
  if (v10)
  {
    uint64_t v8 = v9;
    MEMORY[0x1895F8858](v6);
    (*(void (**)(uint64_t (*)(uint64_t *)))(*(void *)a1 + 80LL))(sub_181C86B40);
    swift_release();
    sub_181C7DE74(v8, v7);
    _Block_release(v5);
  }

  else
  {
    sub_18264F324();
    __break(1u);
  }

uint64_t sub_181C7F614(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *a1;
  v14[3] = a5;
  v14[4] = v7;
  v14[0] = a2;
  v14[1] = a3;
  void v14[2] = a4;
  uint64_t v8 = sub_181C7D774(v14);
  if (!v9) {
    return (*(uint64_t (**)(uint64_t))(a6 + 16))(a6);
  }
  uint64_t v10 = MEMORY[0x1895F8858](v8);
  unint64_t v11 = MEMORY[0x1895F8858](v10);
  sub_181C7C560(v11, v12, (uint64_t (*)(char *))sub_181C87608);
  return swift_bridgeObjectRelease();
}

void _nw_http_fields_access_field(uint64_t a1, uint64_t a2, void *aBlock)
{
  uint64_t v5 = _Block_copy(aBlock);
  uint64_t v6 = _Block_copy(v5);
  void v8[2] = a2;
  void v8[3] = v6;
  uint64_t v7 = *(void (**)(uint64_t (*)(uint64_t *), void *, uint64_t))(*(void *)a1 + 80LL);
  swift_retain();
  v7(sub_181C86B50, v8, MEMORY[0x18961AFC8] + 8LL);
  swift_release();
  _Block_release(v6);
  _Block_release(v5);
}

uint64_t sub_181C7F774(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }

  uint64_t v5 = *a1;
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 16);
  if (*(void *)(v6 + 16) <= a2) {
    goto LABEL_5;
  }
  uint64_t v7 = v6 + (a2 << 6);
  uint64_t v8 = *(void *)(v7 + 40);
  uint64_t v9 = *(void *)(v7 + 48);
  uint64_t v10 = *(void *)(v7 + 56);
  char v11 = *(_BYTE *)(v7 + 64);
  uint64_t v12 = *(void *)(v7 + 72);
  uint64_t v13 = *(void *)(v7 + 80);
  *(void *)&__int128 v22 = *(void *)(v7 + 32);
  *((void *)&v22 + 1) = v8;
  uint64_t v23 = v9;
  uint64_t v24 = v10;
  char v25 = v11;
  uint64_t v26 = v12;
  uint64_t v27 = v13;
  uint64_t v14 = *(void (**)(uint64_t, __int128 *))(a3 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14(a3, &v22);
  __int128 v16 = v22;
  uint64_t v17 = v23;
  uint64_t v18 = v24;
  char v19 = v25;
  uint64_t v20 = v26;
  uint64_t v21 = v27;
  return HTTPFields.subscript.setter((uint64_t *)&v16, a2);
}

unint64_t _nw_http_fields_enumerate_by_name(uint64_t a1, unint64_t a2, void *aBlock)
{
  uint64_t v5 = _Block_copy(aBlock);
  LOBYTE(a2) = sub_181C7F8D8(a1, a2, v5);
  _Block_release(v5);
  return a2 & 1;
}

uint64_t sub_181C7F8D8(uint64_t a1, unint64_t a2, void *aBlock)
{
  uint64_t v5 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v6 = sub_181C7B3EC(a2, -1LL, (uint64_t)&v10);
  uint64_t v7 = v11;
  if (v11)
  {
    uint64_t v8 = v10;
    MEMORY[0x1895F8858](v6);
    (*(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(unint64_t *@<X0>, char *@<X8>)))(*(void *)a1 + 80LL))( &v10,  sub_181C86B58);
    swift_release();
    sub_181C7DE74(v8, v7);
    _Block_release(v5);
    return v10;
  }

  else
  {
    uint64_t result = sub_18264F324();
    __break(1u);
  }

  return result;
}

uint64_t sub_181C7FA18@<X0>( unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v65 = a6;
  uint64_t v56 = a7;
  uint64_t v75 = *MEMORY[0x1895F89C0];
  unint64_t v69 = *a1;
  *(void *)&__int128 v71 = a2;
  *((void *)&v71 + 1) = a3;
  *(void *)&__int128 v72 = a4;
  *((void *)&v72 + 1) = a5;
  uint64_t v7 = HTTPFields.subscript.getter((uint64_t)&v71);
  uint64_t v62 = *(void *)(v7 + 16);
  if (!v62)
  {
LABEL_80:
    uint64_t result = swift_bridgeObjectRelease();
    char v54 = 1;
    goto LABEL_81;
  }

  uint64_t v8 = 0LL;
  uint64_t v63 = 0LL;
  v55[1] = v7;
  uint64_t v61 = v7 + 32;
  while (2)
  {
    uint64_t v9 = v61 + 56 * v8;
    __int128 v11 = *(_OWORD *)(v9 + 16);
    __int128 v10 = *(_OWORD *)(v9 + 32);
    __int128 v12 = *(_OWORD *)v9;
    unint64_t v74 = *(void *)(v9 + 48);
    __int128 v72 = v11;
    __int128 v73 = v10;
    __int128 v71 = v12;
    __int128 v13 = v12;
    uint64_t v14 = MEMORY[0x1895F8858](v7);
    v55[-2] = v65;
    uint64_t v15 = MEMORY[0x1895F8858](v14);
    v55[-2] = sub_181C87620;
    v55[-1] = v16;
    uint64_t v17 = MEMORY[0x1895F8858](v15);
    v55[-6] = &v71;
    v55[-5] = sub_181C87638;
    v55[-4] = v18;
    *(_OWORD *)&v55[-3] = v13;
    if ((*((void *)&v13 + 1) & 0x1000000000000000LL) != 0) {
      goto LABEL_78;
    }
    unint64_t v20 = *((void *)&v73 + 1);
    unint64_t v19 = v74;
    uint64_t v66 = v55;
    uint64_t v67 = v8;
    __int128 v64 = v13;
    if ((*((void *)&v13 + 1) & 0x2000000000000000LL) == 0)
    {
      if ((v13 & 0x1000000000000000LL) == 0)
      {
LABEL_78:
        sub_181BCEDC8((uint64_t)&v71);
        uint64_t v52 = v63;
        sub_18264F144();
        uint64_t v63 = v52;
        goto LABEL_75;
      }

      uint64_t v60 = v55;
      MEMORY[0x1895F8858](v17);
      uint64_t v59 = &v55[-8];
      v55[-6] = sub_181C87638;
      v55[-5] = v21;
      uint64_t v57 = v22;
      v55[-4] = v22;
      *(_OWORD *)&v55[-3] = v13;
      v55[-1] = &v71;
      if ((v19 & 0x2000000000000000LL) != 0) {
        unint64_t v23 = HIBYTE(v19) & 0xF;
      }
      else {
        unint64_t v23 = v20 & 0xFFFFFFFFFFFFLL;
      }
      if ((v19 & 0x1000000000000000LL) != 0) {
        uint64_t v24 = (v20 >> 59) & 1;
      }
      else {
        uint64_t v24 = 1LL;
      }
      uint64_t v58 = v24;
      uint64_t v25 = 4LL << v24;
      unint64_t v26 = 15LL;
      while (1)
      {
        while (1)
        {
          if (4 * v23 == v26 >> 14) {
            goto LABEL_58;
          }
          unint64_t v27 = v26 & 0xC;
          unint64_t v28 = v26;
          if (v27 == v25) {
            unint64_t v28 = sub_181C23710(v26, v20, v19);
          }
          unint64_t v29 = v28 >> 16;
          if (v28 >> 16 >= v23) {
            goto LABEL_83;
          }
          if ((v19 & 0x1000000000000000LL) == 0) {
            break;
          }
          char v31 = sub_18264EBC8();
          if (v27 == v25) {
            goto LABEL_30;
          }
LABEL_25:
          if ((v19 & 0x1000000000000000LL) == 0) {
            goto LABEL_13;
          }
LABEL_26:
          if (v23 <= v26 >> 16) {
            goto LABEL_85;
          }
          unint64_t v26 = sub_18264EB98();
          if (v31 < 0)
          {
LABEL_66:
            uint64_t v48 = 11LL;
            if ((_DWORD)v58) {
              uint64_t v48 = 7LL;
            }
            unint64_t v49 = sub_181C86740(0xFuLL, v48 | (v23 << 16), v20, v19);
            uint64_t v46 = v49 + 1;
            if (!__OFADD__(v49, 1LL))
            {
              if ((v46 & 0x8000000000000000LL) == 0)
              {
                uint64_t isStackAllocationSafe = sub_181BCEDC8((uint64_t)&v71);
                if (v46 < 1025) {
                  goto LABEL_72;
                }
                uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
                if ((isStackAllocationSafe & 1) != 0) {
                  goto LABEL_72;
                }
LABEL_73:
                uint64_t v51 = swift_slowAlloc();
                sub_181C7DB2C(v51, v46, v20, v19);
                sub_18264EB50();
                sub_18264EB50();
                char v43 = (*(uint64_t (**)(void))(v65 + 16))();
                MEMORY[0x186E12168](v51, -1LL, -1LL);
                goto LABEL_74;
              }

uint64_t _nw_http_fields_enumerate(uint64_t a1, void *a2)
{
  return _nw_http_fields_enumerateTm(a1, a2, (uint64_t)sub_181C86B68);
}

uint64_t sub_181C80210@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v64 = a2;
  uint64_t v56 = a3;
  uint64_t v76 = *MEMORY[0x1895F89C0];
  uint64_t v3 = *a1;
  uint64_t v62 = v3 + 16;
  v55[1] = v3;
  swift_retain();
  unint64_t v4 = 0LL;
  uint64_t v61 = 0LL;
  do
  {
    uint64_t v5 = v62;
    uint64_t v6 = swift_beginAccess();
    unint64_t v7 = *(void *)(*(void *)v5 + 16LL);
    if (v4 == v7)
    {
      uint64_t result = swift_release();
      char v54 = 1;
      goto LABEL_81;
    }

    if (v4 >= v7) {
      goto LABEL_86;
    }
    uint64_t v8 = *(void *)v5 + (v4 << 6);
    uint64_t v10 = *(void *)(v8 + 40);
    uint64_t v11 = *(void *)(v8 + 48);
    uint64_t v12 = *(void *)(v8 + 56);
    char v13 = *(_BYTE *)(v8 + 64);
    unint64_t v14 = *(void *)(v8 + 72);
    unint64_t v15 = *(void *)(v8 + 80);
    v72[0] = *(void *)(v8 + 32);
    unint64_t v9 = v72[0];
    v72[1] = v10;
    v72[2] = v11;
    v72[3] = v12;
    uint64_t v68 = v12;
    char v73 = v13;
    unint64_t v74 = v14;
    unint64_t v75 = v15;
    uint64_t v16 = MEMORY[0x1895F8858](v6);
    v55[-2] = v64;
    uint64_t v17 = MEMORY[0x1895F8858](v16);
    v55[-2] = sub_181C86F54;
    v55[-1] = v18;
    uint64_t v19 = MEMORY[0x1895F8858](v17);
    v55[-6] = v72;
    v55[-5] = sub_181C86F80;
    v55[-4] = v20;
    v55[-3] = v9;
    v55[-2] = v10;
    if ((v10 & 0x1000000000000000LL) != 0) {
      goto LABEL_79;
    }
    uint64_t v65 = v55;
    unint64_t v66 = v4;
    uint64_t v67 = v10;
    unint64_t v63 = v9;
    if ((v10 & 0x2000000000000000LL) == 0)
    {
      if ((v9 & 0x1000000000000000LL) == 0)
      {
LABEL_79:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v52 = v61;
        sub_18264F144();
        uint64_t v61 = v52;
        swift_bridgeObjectRelease();
        goto LABEL_77;
      }

      uint64_t v60 = v55;
      MEMORY[0x1895F8858](v19);
      uint64_t v59 = &v55[-8];
      v55[-6] = sub_181C86F80;
      v55[-5] = v21;
      uint64_t v57 = v22;
      v55[-4] = v22;
      v55[-3] = v9;
      v55[-2] = v10;
      v55[-1] = v72;
      if ((v15 & 0x2000000000000000LL) != 0) {
        unint64_t v23 = HIBYTE(v15) & 0xF;
      }
      else {
        unint64_t v23 = v14 & 0xFFFFFFFFFFFFLL;
      }
      if ((v15 & 0x1000000000000000LL) != 0) {
        uint64_t v24 = (v14 >> 59) & 1;
      }
      else {
        uint64_t v24 = 1LL;
      }
      uint64_t v58 = v24;
      uint64_t v25 = 4LL << v24;
      unint64_t v26 = 15LL;
      while (1)
      {
        while (1)
        {
          if (4 * v23 == v26 >> 14) {
            goto LABEL_59;
          }
          unint64_t v27 = v26 & 0xC;
          unint64_t v28 = v26;
          if (v27 == v25) {
            unint64_t v28 = sub_181C23710(v26, v14, v15);
          }
          unint64_t v29 = v28 >> 16;
          if (v28 >> 16 >= v23) {
            goto LABEL_83;
          }
          if ((v15 & 0x1000000000000000LL) == 0) {
            break;
          }
          char v31 = sub_18264EBC8();
          if (v27 == v25) {
            goto LABEL_31;
          }
LABEL_26:
          if ((v15 & 0x1000000000000000LL) == 0) {
            goto LABEL_14;
          }
LABEL_27:
          if (v23 <= v26 >> 16) {
            goto LABEL_85;
          }
          unint64_t v26 = sub_18264EB98();
          if (v31 < 0)
          {
LABEL_67:
            uint64_t v48 = 11LL;
            if ((_DWORD)v58) {
              uint64_t v48 = 7LL;
            }
            unint64_t v49 = sub_181C86740(0xFuLL, v48 | (v23 << 16), v14, v15);
            uint64_t v46 = v49 + 1;
            if (!__OFADD__(v49, 1LL))
            {
              if ((v46 & 0x8000000000000000LL) == 0)
              {
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                uint64_t isStackAllocationSafe = swift_bridgeObjectRetain();
                if (v46 < 1025) {
                  goto LABEL_73;
                }
                uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
                if ((isStackAllocationSafe & 1) != 0) {
                  goto LABEL_73;
                }
LABEL_74:
                uint64_t v51 = swift_slowAlloc();
                sub_181C7DB2C(v51, v46, v14, v15);
                sub_18264EB50();
                sub_18264EB50();
                char v43 = (*(uint64_t (**)(void))(v64 + 16))();
                MEMORY[0x186E12168](v51, -1LL, -1LL);
                goto LABEL_75;
              }

uint64_t _nw_http_fields_enumerate_field(uint64_t a1, void *a2)
{
  return _nw_http_fields_enumerateTm(a1, a2, (uint64_t)sub_181C86B70);
}

uint64_t sub_181C80AE0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  uint64_t v6 = *a1;
  uint64_t result = swift_beginAccess();
  uint64_t v8 = *(void *)(*(void *)(v6 + 16) + 16LL);
  if (v8)
  {
    uint64_t v9 = 0LL;
    unint64_t v10 = 0LL;
    while (1)
    {
      uint64_t v11 = *a1;
      swift_beginAccess();
      uint64_t v12 = *(void *)(v11 + 16);
      if (v10 >= *(void *)(v12 + 16)) {
        __break(1u);
      }
      uint64_t v13 = v12 + v9;
      uint64_t v14 = *(void *)(v13 + 40);
      uint64_t v15 = *(void *)(v13 + 48);
      uint64_t v16 = *(void *)(v13 + 56);
      char v17 = *(_BYTE *)(v13 + 64);
      uint64_t v18 = *(void *)(v13 + 72);
      uint64_t v19 = *(void *)(v13 + 80);
      *(void *)&__int128 v27 = *(void *)(v13 + 32);
      *((void *)&v27 + 1) = v14;
      uint64_t v28 = v15;
      uint64_t v29 = v16;
      char v30 = v17;
      uint64_t v31 = v18;
      uint64_t v32 = v19;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      LODWORD(v16) = (*(uint64_t (**)(uint64_t, unint64_t, __int128 *))(a2 + 16))(a2, v10, &v27);
      __int128 v21 = v27;
      uint64_t v22 = v28;
      uint64_t v23 = v29;
      char v24 = v30;
      uint64_t v25 = v31;
      uint64_t v26 = v32;
      uint64_t result = HTTPFields.subscript.setter((uint64_t *)&v21, v10);
      if (!(_DWORD)v16) {
        break;
      }
      ++v10;
      v9 += 64LL;
      if (v8 == v10) {
        goto LABEL_6;
      }
    }

    char v20 = 0;
  }

  else
  {
LABEL_6:
    char v20 = 1;
  }

  *a3 = v20;
  return result;
}

uint64_t _nw_http_fields_enumerate_const_field(uint64_t a1, void *a2)
{
  return _nw_http_fields_enumerateTm(a1, a2, (uint64_t)sub_181C86B78);
}

uint64_t _nw_http_fields_enumerateTm(uint64_t a1, void *aBlock, uint64_t a3)
{
  uint64_t v5 = _Block_copy(aBlock);
  uint64_t v6 = _Block_copy(v5);
  swift_retain();
  void v8[2] = v6;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void *, void))(*(void *)a1 + 80LL))( &v9,  a3,  v8,  MEMORY[0x1896184C8]);
  swift_release();
  _Block_release(v6);
  _Block_release(v5);
  return v9;
}

uint64_t sub_181C80CE8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  uint64_t v5 = *a1;
  uint64_t v6 = *a1 + 16;
  swift_retain();
  swift_beginAccess();
  uint64_t v7 = *(void *)(v5 + 16);
  unint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v9 = 0LL;
    unint64_t v10 = 0LL;
    while (1)
    {
      if (v10 >= v8) {
        __break(1u);
      }
      uint64_t v11 = v7 + v9;
      uint64_t v12 = *(void *)(v11 + 72);
      uint64_t v13 = *(void *)(v11 + 80);
      char v14 = *(_BYTE *)(v11 + 64);
      uint64_t v15 = *(void *)(v11 + 48);
      uint64_t v16 = *(void *)(v11 + 56);
      uint64_t v17 = *(void *)(v11 + 40);
      v19[0] = *(void *)(v11 + 32);
      v19[1] = v17;
      void v19[2] = v15;
      v19[3] = v16;
      char v20 = v14;
      uint64_t v21 = v12;
      uint64_t v22 = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      LOBYTE(v13) = (*(uint64_t (**)(uint64_t, unint64_t, void *))(a2 + 16))(a2, v10, v19);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v13 & 1) == 0) {
        break;
      }
      ++v10;
      uint64_t v7 = *(void *)v6;
      unint64_t v8 = *(void *)(*(void *)v6 + 16LL);
      v9 += 64LL;
      if (v10 == v8) {
        goto LABEL_6;
      }
    }

    uint64_t result = swift_release();
    *a3 = 0;
  }

  else
  {
LABEL_6:
    uint64_t result = swift_release();
    *a3 = 1;
  }

  return result;
}

uint64_t sub_181C80E4C(void (*a1)(uint64_t))
{
  return swift_endAccess();
}

void *sub_181C80EAC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = (const void *)(v1 + 16);
  swift_beginAccess();
  memcpy(__dst, v3, sizeof(__dst));
  a1[3] = (uint64_t)&type metadata for HTTPRequest;
  a1[4] = (uint64_t)&off_189BAB180;
  uint64_t v4 = swift_allocObject();
  *a1 = v4;
  memcpy((void *)(v4 + 16), v3, 0x120uLL);
  return sub_181C0F308(__dst);
}

uint64_t sub_181C80F48()
{
  uint64_t v1 = (const void *)(v0 + 16);
  swift_beginAccess();
  memcpy(__dst, v1, sizeof(__dst));
  uint64_t v2 = swift_allocObject();
  memcpy((void *)(v2 + 16), v1, 0x120uLL);
  sub_181C0F308(__dst);
  return v2;
}

uint64_t sub_181C80FC8(__objc2_class **a1)
{
  if (*a1 != &OBJC_CLASS____TtC7NetworkP33_CFBD4EB2ABB20EFC96032331681B9C8315__NWHTTPRequest) {
    goto LABEL_5;
  }
  uint64_t v2 = a1;
  swift_beginAccess();
  memcpy(__dst, (const void *)(v1 + 16), sizeof(__dst));
  v2 += 2;
  swift_beginAccess();
  memcpy(v10, v2, sizeof(v10));
  memcpy(v8, __dst, sizeof(v8));
  memcpy(v7, v2, sizeof(v7));
  sub_181C0F308(__dst);
  sub_181C0F308(v10);
  if (!_s7Network11HTTPRequestV18PseudoHeaderFieldsV2eeoiySbAE_AEtFZ_0((uint64_t)v8, (uint64_t)v7))
  {
    sub_181C63D84(v10);
    sub_181C63D84(__dst);
LABEL_5:
    char v5 = 0;
    return v5 & 1;
  }

  uint64_t v3 = __dst[35];
  uint64_t v4 = v10[35];
  swift_retain();
  swift_retain();
  char v5 = sub_181C24B78(v3, v4);
  swift_release();
  swift_release();
  sub_181C63D84(v10);
  sub_181C63D84(__dst);
  return v5 & 1;
}

void *sub_181C810FC()
{
  return sub_181C63D84(v2);
}

uint64_t sub_181C81134()
{
  return swift_deallocClassInstance();
}

uint64_t sub_181C81180(char *a1, char *a2, char *a3, char *a4)
{
  if ("GET" == a1)
  {
    unint64_t v9 = 0xE300000000000000LL;
    uint64_t v11 = 5522759LL;
  }

  else if ("HEAD" == a1)
  {
    unint64_t v9 = 0xE400000000000000LL;
    uint64_t v11 = 1145128264LL;
  }

  else if ("POST" == a1)
  {
    unint64_t v9 = 0xE400000000000000LL;
    uint64_t v11 = 1414745936LL;
  }

  else if ("PUT" == a1)
  {
    unint64_t v9 = 0xE300000000000000LL;
    uint64_t v11 = 5526864LL;
  }

  else if ("DELETE" == a1)
  {
    unint64_t v9 = 0xE600000000000000LL;
    uint64_t v11 = 0x4554454C4544LL;
  }

  else if ("CONNECT" == a1)
  {
    unint64_t v9 = 0xE700000000000000LL;
    uint64_t v11 = 0x5443454E4E4F43LL;
  }

  else if ("OPTIONS" == a1)
  {
    unint64_t v9 = 0xE700000000000000LL;
    uint64_t v11 = 0x534E4F4954504FLL;
  }

  else if ("TRACE" == a1)
  {
    unint64_t v9 = 0xE500000000000000LL;
    uint64_t v11 = 0x4543415254LL;
  }

  else if ("PATCH" == a1)
  {
    unint64_t v9 = 0xE500000000000000LL;
    uint64_t v11 = 0x4843544150LL;
  }

  else if ("CONNECT-UDP" == a1)
  {
    unint64_t v9 = 0xEB00000000504455LL;
    uint64_t v11 = 0x2D5443454E4E4F43LL;
  }

  else
  {
    unint64_t v7 = sub_18264EB80();
    unint64_t v9 = v8;
    uint64_t v10 = HIBYTE(v8) & 0xF;
    if ((v8 & 0x2000000000000000LL) == 0) {
      uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
    }
    if (!v10 || (uint64_t v11 = v7, (sub_181C2B750(v7, v8) & 1) == 0))
    {
      swift_bridgeObjectRelease();
LABEL_93:
      uint64_t result = sub_18264F324();
      __break(1u);
      return result;
    }
  }

  if (!a2)
  {
    uint64_t v15 = 0LL;
    unint64_t v17 = 0LL;
    goto LABEL_39;
  }

  size_t v12 = strlen(a2);
  if (!v12) {
    goto LABEL_35;
  }
  if ((*a2 & 0x80000000) == 0)
  {
    if (v12 == 1) {
      goto LABEL_35;
    }
    if ((a2[1] & 0x80000000) == 0)
    {
      size_t v13 = v12 - 2;
      if (v12 != 2)
      {
        char v14 = a2 + 2;
        while ((*v14 & 0x80000000) == 0)
        {
          ++v14;
          if (!--v13) {
            goto LABEL_35;
          }
        }

        goto LABEL_37;
      }

uint64_t sub_181C81854(uint64_t a1, const char *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58B040);
  MEMORY[0x1895F8858](v3);
  char v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_18264E568();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  size_t v12 = (char *)&v20 - v11;
  unint64_t v13 = sub_18264EB80();
  uint64_t v15 = v14;
  uint64_t v16 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000LL) == 0) {
    uint64_t v16 = v13 & 0xFFFFFFFFFFFFLL;
  }
  if (v16 && (uint64_t v17 = v13, (sub_181C2B750(v13, v14) & 1) != 0))
  {
    sub_181C81AD0(a2, (uint64_t)v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v5, v6);
      v22[0] = v17;
      v22[1] = v15;
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
      HTTPFields.init(dictionaryLiteral:)(MEMORY[0x18961AFE8], &v21);
      HTTPRequest.init(method:url:headerFields:)(v22, (uint64_t)v10, &v21, v23);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
      type metadata accessor for __NWHTTPRequest();
      uint64_t v18 = swift_allocObject();
      memcpy((void *)(v18 + 16), v23, 0x120uLL);
      return v18;
    }

    sub_181BDA0F0((uint64_t)v5, &qword_18C58B040);
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t result = sub_18264F324();
  __break(1u);
  return result;
}

uint64_t sub_181C81AD0@<X0>(const char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58B040);
  uint64_t v5 = MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v9 = (char *)&v19 - v8;
  CFIndex v10 = strlen(a1);
  uint64_t v11 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  CFStringEncoding v12 = sub_18264E4F0();
  CFURLRef v13 = CFURLCreateAbsoluteURLWithBytes(v11, (const UInt8 *)a1, v10, v12, 0LL, 0);
  if (v13)
  {
    CFURLRef v14 = v13;
    sub_18264E538();

    uint64_t v15 = sub_18264E568();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v7, 0LL, 1LL, v15);
  }

  else
  {
    uint64_t v15 = sub_18264E568();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v7, 1LL, 1LL, v15);
  }

  sub_181C86F0C((uint64_t)v7, (uint64_t)v9);
  sub_18264E568();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v9, 1LL, v15) == 1)
  {
    sub_181BDA0F0((uint64_t)v9, &qword_18C58B040);
    uint64_t v17 = 1LL;
  }

  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a2, v9, v15);
    uint64_t v17 = 0LL;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(a2, v17, 1LL, v15);
}

uint64_t _nw_http_request_has_method(uint64_t a1)
{
  uint64_t v2 = sub_18264EB80();
  uint64_t v4 = v3;
  swift_beginAccess();
  if (*(void *)(a1 + 56) == v2 && *(void *)(a1 + 64) == v4) {
    char v6 = 1;
  }
  else {
    char v6 = sub_18264F4EC();
  }
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_release();
  return v6 & 1;
}

uint64_t sub_181C81D04(uint64_t a1)
{
  unint64_t v2 = sub_18264EB80();
  unint64_t v4 = v3;
  uint64_t v5 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000LL) == 0) {
    uint64_t v5 = v2 & 0xFFFFFFFFFFFFLL;
  }
  if (v5)
  {
    unint64_t v6 = v2;
    if ((sub_181C2B750(v2, v3) & 1) != 0)
    {
      swift_beginAccess();
      uint64_t v8 = *(void *)(a1 + 16);
      uint64_t v7 = *(void *)(a1 + 24);
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = *(void *)(a1 + 40);
      char v11 = *(_BYTE *)(a1 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v9 == 0x646F6874656D3ALL && v10 == 0xE700000000000000LL || (sub_18264F4EC() & 1) != 0)
      {
        if ((sub_181C2B750(v6, v4) & 1) != 0)
        {
          *(void *)(a1 + 16) = v8;
          *(void *)(a1 + 24) = v7;
          *(void *)(a1 + 32) = v9;
          *(void *)(a1 + 40) = v10;
          *(_BYTE *)(a1 + 48) = v11;
          *(void *)(a1 + 56) = v6;
          *(void *)(a1 + 64) = v4;
          swift_endAccess();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }

        __break(1u);
      }

      __break(1u);
    }
  }

  swift_bridgeObjectRelease();
  uint64_t result = sub_18264F324();
  __break(1u);
  return result;
}

uint64_t sub_181C81ED0(uint64_t a1, char *a2)
{
  if (!a2)
  {
    swift_beginAccess();
    uint64_t v10 = *(void *)(a1 + 72);
    uint64_t v11 = *(void *)(a1 + 80);
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(void *)(a1 + 120) = 0LL;
    sub_181BCECE0(v10, v11);
    return swift_release();
  }

  size_t v4 = strlen(a2);
  if (!v4) {
    goto LABEL_10;
  }
  if ((*a2 & 0x80000000) == 0)
  {
    if (v4 == 1) {
      goto LABEL_10;
    }
    if ((a2[1] & 0x80000000) == 0)
    {
      size_t v5 = v4 - 2;
      if (v4 != 2)
      {
        unint64_t v6 = a2 + 2;
        while ((*v6 & 0x80000000) == 0)
        {
          ++v6;
          if (!--v5) {
            goto LABEL_10;
          }
        }

        goto LABEL_12;
      }

uint64_t sub_181C8210C(uint64_t a1, char *a2)
{
  if (!a2)
  {
    swift_beginAccess();
    uint64_t v10 = *(void *)(a1 + 128);
    uint64_t v11 = *(void *)(a1 + 136);
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(void *)(a1 + 176) = 0LL;
    sub_181BCECE0(v10, v11);
    return swift_release();
  }

  size_t v4 = strlen(a2);
  if (!v4) {
    goto LABEL_10;
  }
  if ((*a2 & 0x80000000) == 0)
  {
    if (v4 == 1) {
      goto LABEL_10;
    }
    if ((a2[1] & 0x80000000) == 0)
    {
      size_t v5 = v4 - 2;
      if (v4 != 2)
      {
        unint64_t v6 = a2 + 2;
        while ((*v6 & 0x80000000) == 0)
        {
          ++v6;
          if (!--v5) {
            goto LABEL_10;
          }
        }

        goto LABEL_12;
      }

uint64_t sub_181C82338(uint64_t a1, char *a2)
{
  if (!a2)
  {
    swift_beginAccess();
    uint64_t v10 = *(void *)(a1 + 184);
    uint64_t v11 = *(void *)(a1 + 192);
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(void *)(a1 + 232) = 0LL;
    sub_181BCECE0(v10, v11);
    return swift_release();
  }

  size_t v4 = strlen(a2);
  if (!v4) {
    goto LABEL_10;
  }
  if ((*a2 & 0x80000000) == 0)
  {
    if (v4 == 1) {
      goto LABEL_10;
    }
    if ((a2[1] & 0x80000000) == 0)
    {
      size_t v5 = v4 - 2;
      if (v4 != 2)
      {
        unint64_t v6 = a2 + 2;
        while ((*v6 & 0x80000000) == 0)
        {
          ++v6;
          if (!--v5) {
            goto LABEL_10;
          }
        }

        goto LABEL_12;
      }

uint64_t sub_181C82564(uint64_t a1, char *a2)
{
  if (!a2)
  {
    swift_beginAccess();
    uint64_t v10 = *(void *)(a1 + 240);
    uint64_t v11 = *(void *)(a1 + 248);
    *(_OWORD *)(a1 + 240) = 0u;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 272) = 0u;
    *(void *)(a1 + 288) = 0LL;
    sub_181BCECE0(v10, v11);
    return swift_release();
  }

  size_t v4 = strlen(a2);
  if (!v4) {
    goto LABEL_10;
  }
  if ((*a2 & 0x80000000) == 0)
  {
    if (v4 == 1) {
      goto LABEL_10;
    }
    if ((a2[1] & 0x80000000) == 0)
    {
      size_t v5 = v4 - 2;
      if (v4 != 2)
      {
        unint64_t v6 = a2 + 2;
        while ((*v6 & 0x80000000) == 0)
        {
          ++v6;
          if (!--v5) {
            goto LABEL_10;
          }
        }

        goto LABEL_12;
      }

void _nw_http_request_access_method(uint64_t a1, void *aBlock)
{
  unint64_t v3 = _Block_copy(aBlock);
  size_t v4 = _Block_copy(v3);
  swift_retain();
  swift_beginAccess();
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  _Block_copy(v4);
  swift_bridgeObjectRetain();
  sub_181C7D04C(v5, v6, (void (**)(void, void, void, void))v4);
  swift_endAccess();
  swift_release();
  swift_bridgeObjectRelease();
  _Block_release(v4);
  _Block_release(v3);
}

void _nw_http_request_access_extended_connect_protocol(uint64_t a1, void *aBlock)
{
  unint64_t v3 = _Block_copy(aBlock);
  size_t v4 = (void (**)(void *, void))_Block_copy(v3);
  swift_retain();
  swift_beginAccess();
  if (*(void *)(a1 + 248))
  {
    uint64_t v5 = MEMORY[0x1895F8858](*(void *)(a1 + 280));
    unint64_t v6 = MEMORY[0x1895F8858](v5);
    sub_181C7C560(v6, v7, (uint64_t (*)(char *))sub_181C86BB0);
  }

  else
  {
    v4[2](v4, 0LL);
  }

  swift_endAccess();
  swift_release();
  _Block_release(v4);
  _Block_release(v3);
}

void _nw_http_request_access_scheme(uint64_t a1, void *aBlock)
{
  unint64_t v3 = _Block_copy(aBlock);
  size_t v4 = (void (**)(void *, void))_Block_copy(v3);
  swift_retain();
  swift_beginAccess();
  if (*(void *)(a1 + 80))
  {
    uint64_t v5 = MEMORY[0x1895F8858](*(void *)(a1 + 112));
    unint64_t v6 = MEMORY[0x1895F8858](v5);
    sub_181C7C560(v6, v7, (uint64_t (*)(char *))sub_181C87608);
  }

  else
  {
    v4[2](v4, 0LL);
  }

  swift_endAccess();
  swift_release();
  _Block_release(v4);
  _Block_release(v3);
}

void _nw_http_request_access_authority(uint64_t a1, void *aBlock)
{
  unint64_t v3 = _Block_copy(aBlock);
  size_t v4 = (void (**)(void *, void))_Block_copy(v3);
  swift_retain();
  swift_beginAccess();
  if (*(void *)(a1 + 136))
  {
    uint64_t v5 = MEMORY[0x1895F8858](*(void *)(a1 + 168));
    unint64_t v6 = MEMORY[0x1895F8858](v5);
    sub_181C7C560(v6, v7, (uint64_t (*)(char *))sub_181C87608);
  }

  else
  {
    v4[2](v4, 0LL);
  }

  swift_endAccess();
  swift_release();
  _Block_release(v4);
  _Block_release(v3);
}

void _nw_http_request_access_path(uint64_t a1, void *aBlock)
{
  unint64_t v3 = _Block_copy(aBlock);
  size_t v4 = (void (**)(void *, void))_Block_copy(v3);
  swift_retain();
  swift_beginAccess();
  if (*(void *)(a1 + 192))
  {
    uint64_t v5 = MEMORY[0x1895F8858](*(void *)(a1 + 224));
    unint64_t v6 = MEMORY[0x1895F8858](v5);
    sub_181C7C560(v6, v7, (uint64_t (*)(char *))sub_181C87608);
  }

  else
  {
    v4[2](v4, 0LL);
  }

  swift_endAccess();
  swift_release();
  _Block_release(v4);
  _Block_release(v3);
}

void _nw_http_request_access_method_field(uint64_t a1, void *a2)
{
}

void sub_181C82C70(uint64_t a1, void *aBlock)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  unint64_t v3 = _Block_copy(aBlock);
  swift_retain();
  swift_beginAccess();
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  char v7 = *(_BYTE *)(a1 + 48);
  unint64_t v8 = *(void *)(a1 + 56);
  unint64_t v9 = *(void *)(a1 + 64);
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v19 = v4;
  *(void *)&__int128 v20 = v5;
  *((void *)&v20 + 1) = v6;
  char v21 = v7;
  unint64_t v22 = v8;
  unint64_t v23 = v9;
  uint64_t v10 = (void (*)(void *, uint64_t *))v3[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v3, &v18);
  uint64_t v11 = v18;
  uint64_t v12 = v19;
  __int128 v13 = v20;
  char v14 = v21;
  unint64_t v15 = v22;
  unint64_t v16 = v23;
  if (v20 != __PAIR128__(0xE700000000000000LL, 0x646F6874656D3ALL) && (sub_18264F4EC() & 1) == 0) {
LABEL_10:
  }
    __break(1u);
  uint64_t v17 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000LL) == 0) {
    uint64_t v17 = v15 & 0xFFFFFFFFFFFFLL;
  }
  if (!v17)
  {
    __break(1u);
    goto LABEL_9;
  }

  if ((sub_181C2B750(v15, v16) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = v11;
  *(void *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 32) = v13;
  *(_BYTE *)(a1 + 48) = v14;
  *(void *)(a1 + 56) = v15;
  *(void *)(a1 + 64) = v16;
  swift_endAccess();
  swift_release();
  _Block_release(v3);
}

uint64_t _nw_http_request_access_scheme_field(uint64_t a1, void *a2)
{
  return _nw_http_request_access_scheme_fieldTm(a1, a2, (uint64_t (*)(uint64_t, void *))sub_181C82E40);
}

BOOL sub_181C82E40(uint64_t *a1, void *aBlock)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  unint64_t v3 = _Block_copy(aBlock);
  swift_retain();
  swift_beginAccess();
  uint64_t v4 = a1[10];
  if (v4)
  {
    uint64_t v5 = a1[14];
    uint64_t v6 = a1[15];
    uint64_t v8 = a1[12];
    uint64_t v7 = a1[13];
    uint64_t v9 = a1[11];
    uint64_t v19 = a1[9];
    uint64_t v20 = v4;
    uint64_t v21 = v9;
    uint64_t v22 = v8;
    unsigned __int8 v23 = v7;
    uint64_t v24 = v5;
    uint64_t v25 = v6;
    uint64_t v10 = (void (*)(void *, uint64_t *))v3[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v3, &v19);
    uint64_t v11 = v19;
    uint64_t v12 = v20;
    uint64_t v13 = v21;
    uint64_t v14 = v22;
    uint64_t v15 = v23;
    uint64_t v16 = v24;
    uint64_t v17 = v25;
    if ((v21 != 0x656D656863733ALL || v22 != 0xE700000000000000LL) && (sub_18264F4EC() & 1) == 0) {
      __break(1u);
    }
    sub_181BCECE0(a1[9], a1[10]);
    a1[9] = v11;
    a1[10] = v12;
    a1[11] = v13;
    a1[12] = v14;
    a1[13] = v15;
    a1[14] = v16;
    a1[15] = v17;
  }

  swift_endAccess();
  swift_release();
  _Block_release(v3);
  return v4 != 0;
}

uint64_t _nw_http_request_access_authority_field(uint64_t a1, void *a2)
{
  return _nw_http_request_access_scheme_fieldTm(a1, a2, (uint64_t (*)(uint64_t, void *))sub_181C82FE0);
}

BOOL sub_181C82FE0(uint64_t *a1, void *aBlock)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  unint64_t v3 = _Block_copy(aBlock);
  swift_retain();
  swift_beginAccess();
  uint64_t v4 = a1[17];
  if (v4)
  {
    uint64_t v5 = a1[21];
    uint64_t v6 = a1[22];
    uint64_t v8 = a1[19];
    uint64_t v7 = a1[20];
    uint64_t v9 = a1[18];
    uint64_t v19 = a1[16];
    uint64_t v20 = v4;
    uint64_t v21 = v9;
    uint64_t v22 = v8;
    unsigned __int8 v23 = v7;
    uint64_t v24 = v5;
    uint64_t v25 = v6;
    uint64_t v10 = (void (*)(void *, uint64_t *))v3[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v3, &v19);
    uint64_t v11 = v19;
    uint64_t v12 = v20;
    uint64_t v13 = v21;
    uint64_t v14 = v22;
    uint64_t v15 = v23;
    uint64_t v17 = v24;
    uint64_t v16 = v25;
    if ((v21 != 0x69726F687475613ALL || v22 != 0xEA00000000007974LL) && (sub_18264F4EC() & 1) == 0) {
      __break(1u);
    }
    sub_181BCECE0(a1[16], a1[17]);
    a1[16] = v11;
    a1[17] = v12;
    a1[18] = v13;
    a1[19] = v14;
    a1[20] = v15;
    a1[21] = v17;
    a1[22] = v16;
  }

  swift_endAccess();
  swift_release();
  _Block_release(v3);
  return v4 != 0;
}

uint64_t _nw_http_request_access_path_field(uint64_t a1, void *a2)
{
  return _nw_http_request_access_scheme_fieldTm(a1, a2, (uint64_t (*)(uint64_t, void *))sub_181C83188);
}

BOOL sub_181C83188(uint64_t *a1, void *aBlock)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  unint64_t v3 = _Block_copy(aBlock);
  swift_retain();
  swift_beginAccess();
  uint64_t v4 = a1[24];
  if (v4)
  {
    uint64_t v5 = a1[28];
    uint64_t v6 = a1[29];
    uint64_t v8 = a1[26];
    uint64_t v7 = a1[27];
    uint64_t v9 = a1[25];
    uint64_t v19 = a1[23];
    uint64_t v20 = v4;
    uint64_t v21 = v9;
    uint64_t v22 = v8;
    unsigned __int8 v23 = v7;
    uint64_t v24 = v5;
    uint64_t v25 = v6;
    uint64_t v10 = (void (*)(void *, uint64_t *))v3[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v3, &v19);
    uint64_t v11 = v19;
    uint64_t v12 = v20;
    uint64_t v13 = v21;
    uint64_t v14 = v22;
    uint64_t v15 = v23;
    uint64_t v16 = v24;
    uint64_t v17 = v25;
    if ((v21 != 0x687461703ALL || v22 != 0xE500000000000000LL) && (sub_18264F4EC() & 1) == 0) {
      __break(1u);
    }
    sub_181BCECE0(a1[23], a1[24]);
    a1[23] = v11;
    a1[24] = v12;
    a1[25] = v13;
    a1[26] = v14;
    a1[27] = v15;
    a1[28] = v16;
    a1[29] = v17;
  }

  swift_endAccess();
  swift_release();
  _Block_release(v3);
  return v4 != 0;
}

uint64_t _nw_http_request_access_extended_connect_protocol_field(uint64_t a1, void *a2)
{
  return _nw_http_request_access_scheme_fieldTm(a1, a2, (uint64_t (*)(uint64_t, void *))sub_181C83370);
}

uint64_t _nw_http_request_access_scheme_fieldTm( uint64_t a1, void *aBlock, uint64_t (*a3)(uint64_t, void *))
{
  uint64_t v5 = _Block_copy(aBlock);
  LOBYTE(a3) = a3(a1, v5);
  _Block_release(v5);
  return a3 & 1;
}

BOOL sub_181C83370(uint64_t *a1, void *aBlock)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  unint64_t v3 = _Block_copy(aBlock);
  swift_retain();
  swift_beginAccess();
  uint64_t v4 = a1[31];
  if (v4)
  {
    uint64_t v5 = a1[35];
    uint64_t v6 = a1[36];
    uint64_t v8 = a1[33];
    uint64_t v7 = a1[34];
    uint64_t v9 = a1[32];
    uint64_t v19 = a1[30];
    uint64_t v20 = v4;
    uint64_t v21 = v9;
    uint64_t v22 = v8;
    unsigned __int8 v23 = v7;
    uint64_t v24 = v5;
    uint64_t v25 = v6;
    uint64_t v10 = (void (*)(void *, uint64_t *))v3[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v3, &v19);
    uint64_t v11 = v19;
    uint64_t v12 = v20;
    uint64_t v13 = v21;
    uint64_t v14 = v22;
    uint64_t v15 = v23;
    uint64_t v17 = v24;
    uint64_t v16 = v25;
    if ((v21 != 0x6F636F746F72703ALL || v22 != 0xE90000000000006CLL) && (sub_18264F4EC() & 1) == 0) {
      __break(1u);
    }
    sub_181BCECE0(a1[30], a1[31]);
    a1[30] = v11;
    a1[31] = v12;
    a1[32] = v13;
    a1[33] = v14;
    a1[34] = v15;
    a1[35] = v17;
    a1[36] = v16;
  }

  swift_endAccess();
  swift_release();
  _Block_release(v3);
  return v4 != 0;
}

uint64_t sub_181C83510(uint64_t a1, const char *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58B040);
  uint64_t v4 = MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v4);
  uint64_t v8 = (char *)&v14 - v7;
  uint64_t v9 = sub_18264E568();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_retain();
  sub_181C81AD0(a2, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9) == 1)
  {
    sub_181BDA0F0((uint64_t)v8, &qword_18C58B040);
    uint64_t result = sub_18264F324();
    __break(1u);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v6, v12, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v6, 0LL, 1LL, v9);
    HTTPRequest.url.setter((uint64_t)v6);
    swift_endAccess();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }

  return result;
}

UInt8 *sub_181C836FC(uint64_t a1)
{
  uint64_t v2 = sub_18264E568();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58B040);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_retain();
  swift_beginAccess();
  memcpy(v15, (const void *)(a1 + 16), sizeof(v15));
  HTTPRequest.url.getter((uint64_t)v8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v3 + 48))(v8, 1LL, v2))
  {
    sub_181BDA0F0((uint64_t)v8, &qword_18C58B040);
    uint64_t v9 = 0LL;
LABEL_6:
    swift_endAccess();
    swift_release();
    return v9;
  }

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v3 + 16))(v5, v8, v2);
  sub_181BDA0F0((uint64_t)v8, &qword_18C58B040);
  uint64_t v10 = (const __CFURL *)sub_18264E520();
  uint64_t result = (UInt8 *)CFURLGetBytes(v10, 0LL, 0LL);
  CFIndex v12 = (CFIndex)(result + 1);
  if (__OFADD__(result, 1LL))
  {
    __break(1u);
  }

  else
  {
    uint64_t v13 = result;
    uint64_t result = (UInt8 *)malloc((size_t)(result + 1));
    if (result)
    {
      uint64_t v9 = result;
      CFURLGetBytes(v10, result, v12);
      v13[(void)v9] = 0;

      (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
      goto LABEL_6;
    }
  }

  __break(1u);
  return result;
}

uint64_t _nw_http_request_set_header_fields(uint64_t a1, uint64_t a2)
{
  return _nw_http_request_set_header_fieldsTm(a1, a2, (uint64_t)sub_181C86BD8);
}

uint64_t _nw_http_request_copy_header_fields(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 296);
  type metadata accessor for __NWHTTPFields();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v2;
  swift_retain();
  swift_release();
  return v3;
}

uint64_t sub_181C83944(void (*a1)(uint64_t))
{
  return swift_endAccess();
}

uint64_t sub_181C839A4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  char v7 = *(_BYTE *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  uint64_t v8 = *(void *)(v1 + 64);
  uint64_t v10 = *(void *)(v1 + 80);
  uint64_t v14 = *(void *)(v1 + 72);
  uint64_t v11 = *(void *)(v1 + 88);
  a1[3] = (uint64_t)&type metadata for HTTPResponse;
  a1[4] = (uint64_t)&off_189BAB1A0;
  uint64_t v12 = swift_allocObject();
  *a1 = v12;
  *(void *)(v12 + 16) = v4;
  *(void *)(v12 + 24) = v3;
  *(void *)(v12 + 32) = v6;
  *(void *)(v12 + 40) = v5;
  *(_BYTE *)(v12 + 48) = v7;
  *(void *)(v12 + 56) = v9;
  *(void *)(v12 + 64) = v8;
  *(void *)(v12 + 72) = v14;
  *(void *)(v12 + 80) = v10;
  *(void *)(v12 + 88) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t sub_181C83A88()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  char v5 = *(_BYTE *)(v0 + 48);
  uint64_t v7 = *(void *)(v0 + 56);
  uint64_t v6 = *(void *)(v0 + 64);
  uint64_t v8 = *(void *)(v0 + 80);
  uint64_t v12 = *(void *)(v0 + 72);
  uint64_t v9 = *(void *)(v0 + 88);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v2;
  *(void *)(v10 + 24) = v1;
  *(void *)(v10 + 32) = v4;
  *(void *)(v10 + 40) = v3;
  *(_BYTE *)(v10 + 48) = v5;
  *(void *)(v10 + 56) = v7;
  *(void *)(v10 + 64) = v6;
  *(void *)(v10 + 72) = v12;
  *(void *)(v10 + 80) = v8;
  *(void *)(v10 + 88) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return v10;
}

uint64_t sub_181C83B58(uint64_t a1)
{
  if (*(__objc2_class **)a1 == &OBJC_CLASS____TtC7NetworkP33_CFBD4EB2ABB20EFC96032331681B9C8316__NWHTTPResponse)
  {
    swift_beginAccess();
    uint64_t v4 = *(void *)(v1 + 32);
    uint64_t v5 = *(void *)(v1 + 40);
    char v6 = *(_BYTE *)(v1 + 48);
    __int128 v7 = *(_OWORD *)(v1 + 56);
    uint64_t v8 = *(void *)(v1 + 72);
    __int128 v22 = *(_OWORD *)(v1 + 16);
    uint64_t v23 = v4;
    uint64_t v24 = v5;
    char v25 = v6;
    __int128 v26 = v7;
    uint64_t v27 = v8;
    __int128 v28 = *(_OWORD *)(v1 + 80);
    swift_beginAccess();
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 40);
    char v11 = *(_BYTE *)(a1 + 48);
    __int128 v12 = *(_OWORD *)(a1 + 56);
    uint64_t v13 = *(void *)(a1 + 72);
    __int128 v15 = *(_OWORD *)(a1 + 16);
    uint64_t v16 = v9;
    uint64_t v17 = v10;
    char v18 = v11;
    __int128 v19 = v12;
    uint64_t v20 = v13;
    __int128 v21 = *(_OWORD *)(a1 + 80);
    char v2 = _s7Network12HTTPResponseV2eeoiySbAC_ACtFZ_0((uint64_t)&v22, (uint64_t)&v15);
  }

  else
  {
    char v2 = 0;
  }

  return v2 & 1;
}

uint64_t sub_181C83C3C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_181C83C94()
{
  return swift_deallocClassInstance();
}

uint64_t sub_181C83CFC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  __int128 v2 = xmmword_182662660;
  unint64_t v3 = 0xE800000000000000LL;
  switch((int)result)
  {
    case 100:
      goto LABEL_51;
    case 101:
      __int128 v2 = xmmword_182662670;
      uint64_t v4 = "Switching Protocols";
      goto LABEL_50;
    case 103:
      __int128 v2 = xmmword_182662680;
      unint64_t v3 = 0xEB0000000073746ELL;
      goto LABEL_51;
    case 200:
      __int128 v2 = xmmword_182662690;
      unint64_t v3 = 0xE200000000000000LL;
      goto LABEL_51;
    case 201:
      __int128 v2 = xmmword_1826626A0;
      unint64_t v3 = 0xE700000000000000LL;
      goto LABEL_51;
    case 202:
      __int128 v2 = xmmword_1826626B0;
      unint64_t v3 = 0xE800000000000000LL;
      goto LABEL_51;
    case 203:
      __int128 v2 = xmmword_1826626C0;
      uint64_t v4 = "Non-Authoritative Information";
      goto LABEL_50;
    case 204:
      __int128 v2 = xmmword_1826626D0;
      unint64_t v3 = 0xEA0000000000746ELL;
      goto LABEL_51;
    case 205:
      __int128 v2 = xmmword_1826626E0;
      unint64_t v3 = 0xED0000746E65746ELL;
      goto LABEL_51;
    case 206:
      __int128 v2 = xmmword_1826626F0;
      unint64_t v3 = 0xEF746E65746E6F43LL;
      goto LABEL_51;
    case 300:
      __int128 v2 = xmmword_182662700;
      uint64_t v4 = "Multiple Choices";
      goto LABEL_50;
    case 301:
      __int128 v2 = xmmword_182662710;
      uint64_t v4 = "Moved Permanently";
      goto LABEL_50;
    case 302:
      __int128 v2 = xmmword_182662720;
      unint64_t v3 = 0xE500000000000000LL;
      goto LABEL_51;
    case 303:
      unint64_t v3 = 0xE900000000000072LL;
      __int128 v2 = xmmword_182662730;
      goto LABEL_51;
    case 304:
      __int128 v2 = xmmword_182662740;
      uint64_t v5 = 26982LL;
      goto LABEL_29;
    case 307:
      __int128 v2 = xmmword_182662750;
      uint64_t v4 = "Temporary Redirect";
      goto LABEL_50;
    case 308:
      __int128 v2 = xmmword_182662760;
      uint64_t v4 = "Permanent Redirect";
      goto LABEL_50;
    case 400:
      __int128 v2 = xmmword_182662770;
      unint64_t v3 = 0xEB00000000747365LL;
      goto LABEL_51;
    case 401:
      __int128 v2 = xmmword_182662780;
      uint64_t v5 = 31337LL;
LABEL_29:
      unint64_t v3 = v5 & 0xFFFF0000FFFFLL | 0xEC00000064650000LL;
      goto LABEL_51;
    case 403:
      unint64_t v3 = 0xE90000000000006ELL;
      __int128 v2 = xmmword_182662790;
      goto LABEL_51;
    case 404:
      __int128 v2 = xmmword_1826627A0;
      unint64_t v3 = 0xE900000000000064LL;
      goto LABEL_51;
    case 405:
      __int128 v2 = xmmword_1826627B0;
      uint64_t v4 = "Method Not Allowed";
      goto LABEL_50;
    case 406:
      __int128 v2 = xmmword_1826627C0;
      unint64_t v3 = 0xEE00656C62617470LL;
      goto LABEL_51;
    case 407:
      __int128 v2 = xmmword_1826627D0;
      uint64_t v4 = "Proxy Authentication Required";
      goto LABEL_50;
    case 408:
      __int128 v2 = xmmword_1826627E0;
      goto LABEL_53;
    case 409:
      __int128 v2 = xmmword_1826627F0;
      unint64_t v3 = 0xE800000000000000LL;
      goto LABEL_51;
    case 410:
      __int128 v2 = xmmword_182662800;
      unint64_t v3 = 0xE400000000000000LL;
      goto LABEL_51;
    case 411:
      __int128 v2 = xmmword_182662810;
      unint64_t v3 = 0xEF64657269757165LL;
      goto LABEL_51;
    case 412:
      __int128 v2 = xmmword_182662820;
      uint64_t v4 = "Precondition Failed";
      goto LABEL_50;
    case 413:
      __int128 v2 = xmmword_182662830;
      uint64_t v4 = "Content Too Large";
      goto LABEL_50;
    case 414:
      __int128 v2 = xmmword_182662840;
      unint64_t v3 = 0xEC000000676E6F4CLL;
      goto LABEL_51;
    case 415:
      __int128 v2 = xmmword_182662850;
      uint64_t v4 = "Unsupported Media Type";
      goto LABEL_50;
    case 416:
      __int128 v2 = xmmword_182662860;
      uint64_t v4 = "Range Not Satisfiable";
      goto LABEL_50;
    case 417:
      __int128 v2 = xmmword_182662870;
      uint64_t v4 = "Expectation Failed";
      goto LABEL_50;
    case 421:
      __int128 v2 = xmmword_182662880;
      uint64_t v4 = "Misdirected Request";
      goto LABEL_50;
    case 422:
      __int128 v2 = xmmword_182662890;
      uint64_t v4 = "Unprocessable Content";
      goto LABEL_50;
    case 425:
      unint64_t v3 = 0xE900000000000079LL;
      __int128 v2 = xmmword_1826628A0;
      goto LABEL_51;
    case 426:
      __int128 v2 = xmmword_1826628B0;
      uint64_t v4 = "Upgrade Required";
      goto LABEL_50;
    case 428:
      __int128 v2 = xmmword_1826628C0;
      uint64_t v4 = "Precondition Required";
      goto LABEL_50;
    case 429:
      __int128 v2 = xmmword_1826628D0;
      uint64_t v4 = "Too Many Requests";
      goto LABEL_50;
    case 431:
      __int128 v2 = xmmword_1826628E0;
      uint64_t v4 = "Request Header Fields Too Large";
      goto LABEL_50;
    case 451:
      __int128 v2 = xmmword_1826628F0;
      uint64_t v4 = "Unavailable For Legal Reasons";
      goto LABEL_50;
    case 500:
      __int128 v2 = xmmword_182662900;
      uint64_t v4 = "Internal Server Error";
      goto LABEL_50;
    case 501:
      __int128 v2 = xmmword_182662910;
      unint64_t v3 = 0xEF6465746E656D65LL;
      goto LABEL_51;
    case 502:
      __int128 v2 = xmmword_182662920;
      unint64_t v3 = 0xEB00000000796177LL;
      goto LABEL_51;
    case 503:
      __int128 v2 = xmmword_182662930;
      uint64_t v4 = "Service Unavailable";
      goto LABEL_50;
    case 504:
      __int128 v2 = xmmword_182662940;
LABEL_53:
      unint64_t v3 = 0xEF74756F656D6954LL;
      goto LABEL_51;
    case 505:
      __int128 v2 = xmmword_182662950;
      uint64_t v4 = "HTTP Version Not Supported";
      goto LABEL_50;
    case 511:
      __int128 v2 = xmmword_182662960;
      uint64_t v4 = "Network Authentication Required";
LABEL_50:
      unint64_t v3 = (unint64_t)(v4 - 32) | 0x8000000000000000LL;
LABEL_51:
      *(_OWORD *)a2 = v2;
      *(void *)(a2 + 16) = v3;
      break;
    default:
      uint64_t result = sub_18264F324();
      __break(1u);
      break;
  }

  return result;
}

uint64_t sub_181C84180(uint64_t result, char *__s)
{
  __int128 v2 = __s;
  unsigned __int16 v3 = result;
  if (!__s)
  {
    unint64_t v8 = 0xE000000000000000LL;
    goto LABEL_13;
  }

  size_t v4 = strlen(__s);
  if (!v4) {
    goto LABEL_10;
  }
  if ((*v2 & 0x80000000) == 0)
  {
    if (v4 == 1) {
      goto LABEL_10;
    }
    if ((v2[1] & 0x80000000) == 0)
    {
      size_t v5 = v4 - 2;
      if (v4 != 2)
      {
        char v6 = v2 + 2;
        while ((*v6 & 0x80000000) == 0)
        {
          ++v6;
          if (!--v5) {
            goto LABEL_10;
          }
        }

        goto LABEL_12;
      }

uint64_t _nw_http_response_create_well_known(uint64_t a1)
{
  uint64_t v1 = v9[1];
  uint64_t v2 = v9[2];
  HTTPFields.init(dictionaryLiteral:)(MEMORY[0x18961AFE8], &v8);
  uint64_t v3 = v8;
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_18264EB38();
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  type metadata accessor for __NWHTTPResponse();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0x7375746174733ALL;
  *(void *)(result + 24) = 0xE700000000000000LL;
  *(void *)(result + 32) = 0x7375746174733ALL;
  *(void *)(result + 40) = 0xE700000000000000LL;
  *(_BYTE *)(result + 48) = 0;
  *(void *)(result + 56) = v4;
  *(void *)(result + 64) = v6;
  *(void *)(result + 72) = v1;
  *(void *)(result + 80) = v2;
  *(void *)(result + 88) = v3;
  return result;
}

uint64_t sub_181C8448C(uint64_t a1, unsigned __int16 a2)
{
  unsigned int v3 = a2;
  swift_retain();
  uint64_t result = swift_beginAccess();
  if (v3 > 0x3E7)
  {
    __break(1u);
  }

  else
  {
    if ((sub_181C6F894(0LL, 0xE000000000000000LL) & 1) == 0)
    {
      uint64_t v5 = 0LL;
      unint64_t v6 = 0xE000000000000000LL;
      unint64_t v7 = sub_181C6FED0;
      uint64_t v8 = 0LL;
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D1D0);
      sub_181C02894((unint64_t *)&qword_18C58D1D8, &qword_18C58D1D0, MEMORY[0x189619618]);
      sub_18264EB14();
    }

    uint64_t v5 = a2;
    unint64_t v6 = 0LL;
    unint64_t v7 = (int *(*)@<X0>(int *@<X0>, int *@<X8>))0xE000000000000000LL;
    HTTPResponse.status.setter((uint64_t)&v5);
    swift_endAccess();
    return swift_release();
  }

  return result;
}

uint64_t _nw_http_response_get_status_code()
{
  return (unsigned __int16)sub_181C845A8();
}

uint64_t sub_181C845A8()
{
  unint64_t v0 = v2;
  swift_bridgeObjectRelease();
  if ((v0 & 0x8000000000000000LL) != 0 || v0 >= 0x10000)
  {
    uint64_t result = sub_18264F318();
    __break(1u);
  }

  else
  {
    swift_endAccess();
    swift_release();
    return v0;
  }

  return result;
}

uint64_t sub_181C846D8(uint64_t a1, char *a2)
{
  if (!a2)
  {
    unint64_t v7 = 0LL;
    unint64_t v9 = 0xE000000000000000LL;
    goto LABEL_13;
  }

  size_t v4 = strlen(a2);
  if (!v4) {
    goto LABEL_10;
  }
  if ((*a2 & 0x80000000) == 0)
  {
    if (v4 == 1) {
      goto LABEL_10;
    }
    if ((a2[1] & 0x80000000) == 0)
    {
      size_t v5 = v4 - 2;
      if (v4 != 2)
      {
        unint64_t v6 = a2 + 2;
        while ((*v6 & 0x80000000) == 0)
        {
          ++v6;
          if (!--v5) {
            goto LABEL_10;
          }
        }

        goto LABEL_12;
      }

void _nw_http_response_access_reason_phrase(uint64_t a1, void *a2)
{
}

void sub_181C84908(uint64_t a1, void *aBlock)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  unsigned int v3 = _Block_copy(aBlock);
  swift_retain();
  swift_beginAccess();
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  char v6 = *(_BYTE *)(a1 + 48);
  __int128 v7 = *(_OWORD *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 72);
  __int128 v23 = *(_OWORD *)(a1 + 16);
  uint64_t v24 = v4;
  uint64_t v25 = v5;
  char v26 = v6;
  __int128 v27 = v7;
  uint64_t v28 = v8;
  __int128 v29 = *(_OWORD *)(a1 + 80);
  HTTPResponse.status.getter(&v20);
  unint64_t v10 = v21;
  unint64_t v9 = v22;
  if ((sub_181BCE7EC(v21, v22) & 1) != 0)
  {
    _Block_copy(v3);
    _Block_copy(v3);
    sub_181C7D130(v10, v9, (void (**)(void, void, void, void))v3);
    goto LABEL_13;
  }

  uint64_t v11 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000LL) == 0) {
    uint64_t v11 = v10;
  }
  uint64_t v12 = 7LL;
  if (((v9 >> 60) & ((v10 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v12 = 11LL;
  }
  unint64_t v13 = sub_181C86740(0xFuLL, v12 | (v11 << 16), v10, v9);
  uint64_t v14 = v13 + 1;
  if (__OFADD__(v13, 1LL))
  {
    __break(1u);
LABEL_15:
    __break(1u);
  }

  if (v14 < 0) {
    goto LABEL_15;
  }
  uint64_t isStackAllocationSafe = (uint64_t)_Block_copy(v3);
  if (v14 < 1025 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    unint64_t v17 = (char *)&v19 - v16;
    sub_181C7DB2C((uint64_t)&v19 - v16, v14, v10, v9);
    (*((void (**)(void *, char *))v3 + 2))(v3, v17);
  }

  else
  {
    uint64_t v18 = swift_slowAlloc();
    sub_181C7DB2C(v18, v14, v10, v9);
    (*((void (**)(void *, uint64_t))v3 + 2))(v3, v18);
    MEMORY[0x186E12168](v18, -1LL, -1LL);
  }

void _nw_http_response_access_status_field(uint64_t a1, void *a2)
{
}

void _nw_http_request_access_method_fieldTm( uint64_t a1, void *aBlock, void (*a3)(uint64_t, void *))
{
  uint64_t v5 = _Block_copy(aBlock);
  a3(a1, v5);
  _Block_release(v5);
}

void sub_181C84B94(uint64_t a1, void *aBlock)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  unsigned int v3 = _Block_copy(aBlock);
  swift_retain();
  swift_beginAccess();
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  char v7 = *(_BYTE *)(a1 + 48);
  unint64_t v8 = *(void *)(a1 + 56);
  unint64_t v9 = *(void *)(a1 + 64);
  uint64_t v17 = *(void *)(a1 + 16);
  uint64_t v18 = v4;
  *(void *)&__int128 v19 = v5;
  *((void *)&v19 + 1) = v6;
  char v20 = v7;
  unint64_t v21 = v8;
  unint64_t v22 = v9;
  unint64_t v10 = (void (*)(void *, uint64_t *))v3[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v3, &v17);
  uint64_t v11 = v17;
  uint64_t v12 = v18;
  __int128 v13 = v19;
  char v14 = v20;
  unint64_t v15 = v21;
  unint64_t v16 = v22;
  if (v19 != __PAIR128__(0xE700000000000000LL, 0x7375746174733ALL) && (sub_18264F4EC() & 1) == 0) {
LABEL_8:
  }
    __break(1u);
  if (sub_18264EB50() != 3)
  {
    __break(1u);
    goto LABEL_7;
  }

  if ((sub_181C6F6F8(v15, v16) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = v11;
  *(void *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 32) = v13;
  *(_BYTE *)(a1 + 48) = v14;
  *(void *)(a1 + 56) = v15;
  *(void *)(a1 + 64) = v16;
  swift_endAccess();
  swift_release();
  _Block_release(v3);
}

uint64_t _nw_http_response_set_header_fields(uint64_t a1, uint64_t a2)
{
  return _nw_http_request_set_header_fieldsTm(a1, a2, (uint64_t)sub_181C86C2C);
}

uint64_t _nw_http_request_set_header_fieldsTm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 16;
  swift_retain();
  swift_retain();
  swift_beginAccess();
  void v7[2] = v5;
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a2 + 80LL))(a3, v7, MEMORY[0x18961AFC8] + 8LL);
  swift_endAccess();
  swift_release();
  return swift_release();
}

uint64_t _nw_http_response_copy_header_fields(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  type metadata accessor for __NWHTTPFields();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v2;
  swift_retain();
  swift_release();
  return v3;
}

uint64_t sub_181C84E78()
{
  return sub_181C84E84((void (*)(void))MEMORY[0x18961B108]);
}

uint64_t sub_181C84E84(void (*a1)(void))
{
  return swift_deallocClassInstance();
}

uint64_t _nw_http_parsed_fields_create()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = MEMORY[0x18961AFE8];
  return result;
}

uint64_t _nw_http_parsed_fields_add( uint64_t a1, unint64_t a2, uint64_t a3, const char *a4, int64_t a5, char a6)
{
  return sub_181C84EF4(a1, a2, a3, a4, a5, a6) & 1;
}

uint64_t sub_181C84EF4( uint64_t a1, unint64_t a2, uint64_t a3, const char *a4, int64_t a5, char a6)
{
  if (a3 == -1)
  {
    sub_181C7B3EC(a2, -1LL, (uint64_t)&v47);
LABEL_5:
    uint64_t v12 = (uint64_t)v47;
    uint64_t v13 = v48;
    uint64_t v14 = (uint64_t)v49;
    uint64_t v15 = v50;
    swift_retain();
    if (v13)
    {
      if (a5 >= 1) {
        goto LABEL_14;
      }
LABEL_7:
      a5 = strlen(a4);
      if (!a5) {
        goto LABEL_21;
      }
LABEL_14:
      if ((*a4 & 0x80000000) == 0)
      {
        if (a5 == 1) {
          goto LABEL_21;
        }
        if ((a4[1] & 0x80000000) == 0)
        {
          if (a5 != 2)
          {
            uint64_t v18 = 2LL;
            while ((a4[v18] & 0x80000000) == 0)
            {
              if (a5 == ++v18) {
                goto LABEL_21;
              }
            }

            goto LABEL_22;
          }

uint64_t sub_181C85478(uint64_t a1)
{
  uint64_t v2 = swift_bridgeObjectRetain();
  HTTPRequest.init(parsed:)(v2, __src);
  *(void *)(a1 + 16) = MEMORY[0x18961AFE8];
  swift_release();
  swift_bridgeObjectRelease();
  type metadata accessor for __NWHTTPRequest();
  uint64_t v3 = swift_allocObject();
  memcpy((void *)(v3 + 16), __src, 0x120uLL);
  return v3;
}

__n128 sub_181C856CC(uint64_t a1)
{
  uint64_t v2 = swift_bridgeObjectRetain();
  HTTPResponse.init(parsed:)(v2, (uint64_t)&v12);
  uint64_t v3 = v13;
  uint64_t v4 = v14;
  char v5 = v15;
  __int128 v10 = v16;
  __int128 v11 = v12;
  uint64_t v6 = v17;
  __n128 v9 = v18;
  *(void *)(a1 + 16) = MEMORY[0x18961AFE8];
  swift_release();
  swift_bridgeObjectRelease();
  type metadata accessor for __NWHTTPResponse();
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = v11;
  *(void *)(v7 + 32) = v3;
  *(void *)(v7 + 40) = v4;
  *(_BYTE *)(v7 + 48) = v5;
  *(_OWORD *)(v7 + 56) = v10;
  *(void *)(v7 + 72) = v6;
  __n128 result = v9;
  *(__n128 *)(v7 + 80) = v9;
  return result;
}

uint64_t sub_181C8594C(uint64_t a1)
{
  uint64_t v2 = swift_bridgeObjectRetain();
  HTTPFields.init(parsedTrailerFields:)(v2, &v5);
  uint64_t v3 = v5;
  *(void *)(a1 + 16) = MEMORY[0x18961AFE8];
  swift_release();
  swift_bridgeObjectRelease();
  type metadata accessor for __NWHTTPFields();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  return result;
}

void _nw_http_fields_enumerate_modern_header_fields(uint64_t a1, void *a2)
{
}

uint64_t sub_181C85BA0( uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unsigned __int8 *a5, void *a6)
{
  unsigned __int8 v11 = *a5;
  swift_bridgeObjectRetain();
  _Block_copy(a6);
  swift_bridgeObjectRetain();
  return sub_181C7D224(a1, a2, a3, a4, a6, a1, a2, v11);
}

uint64_t sub_181C85C28( uint64_t a1, unint64_t a2, unint64_t a3, void *aBlock, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  return sub_181C7C718( a2,  a3,  (void (**)(void, void, void, void, void, void))aBlock,  a1,  a5,  a6,  a2,  a3,  a7);
}

uint64_t sub_181C85CD4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v12 = sub_18264EB50();
  uint64_t v13 = sub_18264EB50();
  unsigned int v14 = (a8 - 1);
  if (v14 < 3) {
    uint64_t v15 = v14 + 1;
  }
  else {
    uint64_t v15 = 0LL;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 16))( a2,  a3,  v12,  a1,  v13,  v15);
}

void _nw_http_fields_enumerate_modern_header_fields_combined(uint64_t a1, void *a2)
{
}

void _nw_http_fields_enumerate_modern_header_fieldsTm( uint64_t a1, void *aBlock, uint64_t a3, void (*a4)(uint64_t, void *, uint64_t, uint64_t))
{
  uint64_t v7 = _Block_copy(aBlock);
  unint64_t v8 = _Block_copy(v7);
  uint64_t v9 = swift_retain();
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a1 + 88LL))(v13, v9);
  uint64_t v10 = v14;
  uint64_t v11 = v15;
  __swift_project_boxed_opaque_existential_2(v13, v14);
  uint64_t v12[2] = v8;
  a4(a3, v12, v10, v11);
  swift_release();
  _Block_release(v8);
  __swift_destroy_boxed_opaque_existential_2((uint64_t)v13);
  _Block_release(v7);
}

uint64_t sub_181C85E44( unint64_t a1, unint64_t a2, uint64_t a3, unsigned __int8 *a4, void *aBlock)
{
  int v9 = *a4;
  _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  return sub_181C7C9A0(a1, a2, (void (**)(void, void, void, void, void))aBlock, a3, a1, a2, v9);
}

uint64_t sub_181C85EBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t result = sub_18264EB50();
  if (__OFSUB__(result, a3))
  {
    __break(1u);
  }

  else
  {
    unsigned int v11 = (a6 - 1);
    if (v11 < 3) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = 0LL;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 16))( a2,  a1,  a3,  result - a3,  v12);
  }

  return result;
}

uint64_t sub_181C85F3C(uint64_t a1, size_t *a2)
{
  uint64_t v3 = swift_retain();
  (*(void (**)(void *__return_ptr))(*(void *)v3 + 88LL))(v12);
  uint64_t v4 = v13;
  uint64_t v5 = v14;
  __swift_project_boxed_opaque_existential_2(v12, v13);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(v4, v5);
  __swift_destroy_boxed_opaque_existential_2((uint64_t)v12);
  size_t v7 = *(void *)(v6 + 16);
  unint64_t v8 = malloc(v7);
  if (v8)
  {
    int v9 = v8;
    if (v7)
    {
      memcpy(v8, (const void *)(v6 + 32), v7);
    }

    swift_bridgeObjectRelease();
    *a2 = v7;
    swift_release();
    return (uint64_t)v9;
  }

  __break(1u);
LABEL_11:
  uint64_t result = sub_18264F360();
  __break(1u);
  return result;
}

uint64_t _nw_http_request_create_from_url_request(void *a1)
{
  uint64_t v1 = a1;
  sub_181C385AC(v1, (uint64_t)v4);
  type metadata accessor for __NWHTTPRequest();
  uint64_t v2 = swift_allocObject();
  memcpy((void *)(v2 + 16), v4, 0x120uLL);

  return v2;
}

uint64_t _nw_http_request_copy_url_request(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = sub_181C86120(a1, (uint64_t)v5, (const __CFURL *)a3);

  return v7;
}

uint64_t sub_181C86120(uint64_t a1, uint64_t a2, const __CFURL *a3)
{
  uint64_t v4 = (const void *)(a1 + 16);
  swift_retain();
  swift_beginAccess();
  memcpy(__dst, v4, sizeof(__dst));
  memcpy(v11, v4, sizeof(v11));
  uint64_t v5 = sub_18264EA48();
  uint64_t v7 = v6;
  sub_181C0F308(__dst);
  sub_181C39224(v5, v7, a3);
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  sub_181C63D84(__dst);
  swift_endAccess();
  swift_release();
  return v9;
}

uint64_t _nw_http_response_copy_url_response(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = sub_181C86258(a1, a2, a3);

  return v10;
}

uint64_t sub_181C86258(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2)
  {
    swift_retain();
    swift_beginAccess();
    memcpy(__dst, (const void *)(a2 + 16), sizeof(__dst));
    memmove(__src, (const void *)(a2 + 16), 0x120uLL);
    sub_181C86D2C((uint64_t)__src);
    sub_181C0F308(__dst);
    swift_release();
LABEL_5:
    sub_181C3A210(__src, v20);
    swift_beginAccess();
    uint64_t v7 = *(void *)(a1 + 24);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    char v10 = *(_BYTE *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 56);
    uint64_t v12 = *(void *)(a1 + 64);
    uint64_t v13 = *(void *)(a1 + 72);
    uint64_t v14 = *(void *)(a1 + 80);
    uint64_t v15 = *(void *)(a1 + 88);
    __dst[0] = *(void *)(a1 + 16);
    __dst[1] = v7;
    __dst[2] = v8;
    __dst[3] = v9;
    LOBYTE(__dst[4]) = v10;
    __dst[5] = v11;
    __dst[6] = v12;
    __dst[7] = v13;
    __dst[8] = v14;
    __dst[9] = v15;
    sub_181C3A210(v20, __src);
    sub_18264EA48();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_181C3993C(__src);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for CFURLResponse(0LL);
    uint64_t v16 = swift_dynamicCastUnknownClassUnconditional();
    swift_endAccess();
    swift_release();
    sub_181C86CAC((uint64_t)v20);
    return v16;
  }

  if (a3)
  {
    __src[0] = a3;
    sub_181C86C90((uint64_t)__src);
    id v6 = a3;
    goto LABEL_5;
  }

  uint64_t result = sub_18264F324();
  __break(1u);
  return result;
}

uint64_t sub_181C86478()
{
  uint64_t v0 = sub_18264E934();
  __swift_allocate_value_buffer(v0, qword_18C5A4A30);
  __swift_project_value_buffer(v0, (uint64_t)qword_18C5A4A30);
  return sub_18264E928();
}

uint64_t sub_181C864E4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    a3(&var2);
    if (!v3) {
      char v4 = var2;
    }
  }

  else
  {
    ((void (*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&var2 + 1), 0LL, 0LL);
    if (!v3) {
      char v4 = BYTE1(var2);
    }
  }

  return v4 & 1;
}

unint64_t sub_181C86538(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000LL) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 1) == 0 || (result & 0xC) == 4LL << v5) {
    goto LABEL_9;
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 < result >> 16)
  {
    __break(1u);
LABEL_9:
    uint64_t result = sub_181C865D4(result, a2, a3);
    if ((result & 1) == 0) {
      return result & 0xC | sub_181C86640(result, a2, a3) & 0xFFFFFFFFFFFFFFF3LL | 1;
    }
  }

  return result;
}

unint64_t sub_181C865D4(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000LL) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4LL << v5) {
    uint64_t result = sub_181C23710(result, a2, a3);
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 < result >> 16) {
    __break(1u);
  }
  return result;
}

unint64_t sub_181C86640(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000LL;
  }

  else
  {
    unint64_t v5 = result >> 16;
    if ((a3 & 0x1000000000000000LL) == 0)
    {
      void v13[2] = v3;
      void v13[3] = v4;
      if ((a3 & 0x2000000000000000LL) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((_BYTE *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            unint64_t v10 = v5 - 1;
            int v11 = *((_BYTE *)&v12 + v5-- + 7) & 0xC0;
          }

          while (v11 == 128);
          unint64_t v5 = v10;
        }

        return v5 << 16;
      }

      if ((a2 & 0x1000000000000000LL) != 0)
      {
        uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 != (a2 & 0xFFFFFFFFFFFFLL))
        {
          do
LABEL_9:
            int v7 = *(_BYTE *)(v6 + v5--) & 0xC0;
          while (v7 == 128);
          ++v5;
        }
      }

      else
      {
        unint64_t v12 = result >> 16;
        uint64_t v6 = sub_18264F228();
        unint64_t v5 = v12;
        if (v12 != v9) {
          goto LABEL_9;
        }
      }

      return v5 << 16;
    }

    uint64_t v8 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000LL) == 0) {
      uint64_t v8 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (v5 != v8) {
      return sub_18264F150();
    }
  }

  return result;
}

unint64_t sub_181C86740( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = sub_181C86538(a1, a3, a4);
  unint64_t result = sub_181C86538(a2, a3, a4);
  unint64_t v9 = result >> 14;
  if (v7 >> 14 < result >> 14)
  {
    for (uint64_t i = 0LL; ; ++i)
    {
      uint64_t v11 = i + 1;
      if (__OFADD__(i, 1LL)) {
        break;
      }
      if ((a4 & 0x1000000000000000LL) != 0)
      {
        unint64_t result = sub_18264EAFC();
        unint64_t v7 = result;
      }

      else
      {
        unint64_t v12 = v7 >> 16;
        if ((a4 & 0x2000000000000000LL) != 0)
        {
          unint64_t v22 = a3;
          uint64_t v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          int v13 = *((unsigned __int8 *)&v22 + v12);
        }

        else
        {
          unint64_t result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000LL) == 0) {
            unint64_t result = sub_18264F228();
          }
          int v13 = *(unsigned __int8 *)(result + v12);
        }

        int v14 = (char)v13;
        unsigned int v15 = __clz(v13 ^ 0xFF) - 24;
        if (v14 >= 0) {
          LOBYTE(v15) = 1;
        }
        unint64_t v7 = ((v12 + v15) << 16) | 5;
      }

      if (v9 <= v7 >> 14) {
        return v11;
      }
    }

    __break(1u);
LABEL_36:
    __break(1u);
    return result;
  }

  if (v9 < v7 >> 14)
  {
    uint64_t v11 = 0LL;
    while (!__OFSUB__(v11--, 1LL))
    {
      if ((a4 & 0x1000000000000000LL) != 0)
      {
        unint64_t result = sub_18264EB08();
        unint64_t v7 = result;
      }

      else
      {
        if ((a4 & 0x2000000000000000LL) != 0)
        {
          unint64_t v22 = a3;
          uint64_t v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          if ((*((_BYTE *)&v22 + (v7 >> 16) - 1) & 0xC0) == 0x80)
          {
            uint64_t v20 = 0LL;
            do
              int v21 = *((_BYTE *)&v22 + (v7 >> 16) + v20-- - 2) & 0xC0;
            while (v21 == 128);
            uint64_t v19 = 1 - v20;
          }

          else
          {
            uint64_t v19 = 1LL;
          }
        }

        else
        {
          unint64_t result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000LL) == 0) {
            unint64_t result = sub_18264F228();
          }
          uint64_t v17 = 0LL;
          do
            int v18 = *(_BYTE *)(result + (v7 >> 16) - 1 + v17--) & 0xC0;
          while (v18 == 128);
          uint64_t v19 = -v17;
        }

        unint64_t v7 = (v7 - (v19 << 16)) & 0xFFFFFFFFFFFF0000LL | 5;
      }

      if (v9 >= v7 >> 14) {
        return v11;
      }
    }

    goto LABEL_36;
  }

  return 0LL;
}

void *sub_181C86950@<X0>(void *(*a1)(uint64_t *__return_ptr)@<X2>, _BYTE *a2@<X8>)
{
  unint64_t result = a1(&v5);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_181C8698C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(_BYTE *__return_ptr, uint64_t, uint64_t, char *, uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _BYTE *a7@<X8>)
{
  unint64_t v14 = *(void *)(a2 + 40);
  unint64_t v13 = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  sub_181BCEDC8(a2);
  char v15 = sub_181C8725C(v14, v13, a3, a4, a1, a5, a6, a2);
  sub_181BCEE10(a2);
  uint64_t result = swift_bridgeObjectRelease();
  *a7 = v15 & 1;
  return result;
}

uint64_t sub_181C86A48()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

uint64_t type metadata accessor for __NWHTTPFields()
{
  return objc_opt_self();
}

uint64_t sub_181C86A84(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }

  return result;
}

uint64_t sub_181C86AB4(uint64_t *a1)
{
  return sub_181C7E7D8(a1, *(void *)(v1 + 16));
}

uint64_t sub_181C86ABC(uint64_t a1)
{
  return sub_181C7EA64( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  *(void *)(v1 + 56));
}

uint64_t sub_181C86ACC(uint64_t a1)
{
  return sub_181C7EBE4(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_181C86AD8(uint64_t *a1)
{
  return sub_181C7ECAC(a1, *(void *)(v1 + 16));
}

uint64_t sub_181C86AE0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  __int128 v4 = *(_OWORD *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 32);
  uint64_t v6 = *(void *)(v2 + 40);
  uint64_t v12 = *a1;
  __int128 v9 = v4;
  uint64_t v10 = v5;
  uint64_t v11 = v6;
  uint64_t result = sub_181C7D774((uint64_t *)&v9);
  *a2 = result;
  a2[1] = v8;
  return result;
}

uint64_t sub_181C86B2C@<X0>(_BYTE *a1@<X8>)
{
  return sub_181C7F01C(*(void *)(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t sub_181C86B38(uint64_t *a1)
{
  return sub_181C7F3DC(a1, *(uint64_t **)(v1 + 16));
}

uint64_t sub_181C86B40(uint64_t *a1)
{
  return sub_181C7F614(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_181C86B50(uint64_t *a1)
{
  return sub_181C7F774(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_181C86B58@<X0>(unint64_t *a1@<X0>, char *a2@<X8>)
{
  return sub_181C7FA18(a1, v2[2], v2[3], v2[4], v2[5], v2[6], a2);
}

uint64_t sub_181C86B68@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  return sub_181C80210(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_181C86B70@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  return sub_181C80AE0(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_181C86B78@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_181C80CE8(a1, *(void *)(v2 + 16), a2);
}

uint64_t type metadata accessor for __NWHTTPRequest()
{
  return objc_opt_self();
}

uint64_t sub_181C86BA0()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

uint64_t sub_181C86BB0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_181C86BDC(void *a1)
{
  *(void *)(*(void *)(v1 + 16) + 280LL) = *a1;
  swift_retain();
  return swift_release();
}

uint64_t type metadata accessor for __NWHTTPResponse()
{
  return objc_opt_self();
}

uint64_t sub_181C86C30(void *a1)
{
  *(void *)(*(void *)(v1 + 16) + 72LL) = *a1;
  swift_retain();
  return swift_release();
}

uint64_t type metadata accessor for __NWHTTPParsedFields()
{
  return objc_opt_self();
}

uint64_t sub_181C86C80(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unsigned __int8 *a5)
{
  return sub_181C85BA0(a1, a2, a3, a4, a5, *(void **)(v5 + 16));
}

uint64_t sub_181C86C88(unint64_t a1, unint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  return sub_181C85E44(a1, a2, a3, a4, *(void **)(v4 + 16));
}

uint64_t sub_181C86C90(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 280) & 0xFFFFFFFFFFFFFF8LL | 0x8000000000000000LL;
  *(void *)(result + 32) = *(unsigned __int8 *)(result + 32);
  *(void *)(result + 280) = v1;
  return result;
}

uint64_t sub_181C86CAC(uint64_t a1)
{
  __int128 v4 = *(_OWORD *)(a1 + 240);
  __int128 v5 = *(_OWORD *)(a1 + 256);
  __int128 v3 = *(_OWORD *)(a1 + 208);
  sub_181C37D38( *(void **)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  *(void *)(a1 + 112),  *(void *)(a1 + 120),  *(void *)(a1 + 128),  *(void *)(a1 + 136),  *(void *)(a1 + 144),  *(void *)(a1 + 152),  *(void *)(a1 + 160),  *(void *)(a1 + 168),  *(void *)(a1 + 176),  *(void *)(a1 + 184),  *(void *)(a1 + 192),  *(void *)(a1 + 200),  v3,  *((uint64_t *)&v3 + 1),  *(void *)(a1 + 224),  *(void *)(a1 + 232),  v4,  *((uint64_t *)&v4 + 1),  v5,  *((uint64_t *)&v5 + 1),  *(void *)(a1 + 272),  *(void *)(a1 + 280));
  return a1;
}

uint64_t sub_181C86D2C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 280) & 0xFFFFFFFFFFFFFF8LL;
  *(void *)(result + 32) = *(unsigned __int8 *)(result + 32);
  *(void *)(result + 280) = v1;
  return result;
}

uint64_t type metadata accessor for __NWHTTPFieldsProvider()
{
  return objc_opt_self();
}

uint64_t sub_181C86D64()
{
  return swift_deallocObject();
}

uint64_t sub_181C86DA8()
{
  if (v0[10])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (v0[17])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (v0[24])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (v0[31])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_181C86E54(uint64_t a1)
{
  return sub_181C85EBC( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(_BYTE *)(v1 + 48));
}

uint64_t sub_181C86E74(uint64_t a1)
{
  return sub_181C85C28( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void **)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  *(_BYTE *)(v1 + 56));
}

uint64_t sub_181C86E98(uint64_t a1)
{
  return sub_181C85CD4( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  *(void *)(v1 + 56),  *(_BYTE *)(v1 + 64));
}

uint64_t sub_181C86EBC()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_181C86EDC()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

uint64_t sub_181C86F0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58B040);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_181C86F54()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

uint64_t sub_181C86F80@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result & 1;
  return result;
}

uint64_t sub_181C86FAC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_181C87494(a1, a2);
}

void *sub_181C86FC0@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_181C874B4(a1, a2);
}

uint64_t sub_181C86FD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = MEMORY[0x18961AFE8];
  if (v5)
  {
    uint64_t v42 = MEMORY[0x18961AFE8];
    sub_181C9D0C4(0, v5, 0);
    uint64_t v6 = v42;
    for (uint64_t i = (uint64_t *)(a1 + 56); ; i += 4)
    {
      uint64_t v11 = *(i - 3);
      uint64_t v10 = *(i - 2);
      uint64_t v13 = *(i - 1);
      uint64_t v12 = *i;
      swift_bridgeObjectRetain();
      uint64_t v14 = MEMORY[0x186E0E670](v11, v10, v13, v12);
      unint64_t v16 = v15;
      if (!_s7Network9HTTPFieldV12isValidValueySbSSFZ_0(v14, v15)) {
        break;
      }
LABEL_11:
      swift_bridgeObjectRetain();
      uint64_t v19 = a5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v42 = v6;
      unint64_t v21 = *(void *)(v6 + 16);
      unint64_t v20 = *(void *)(v6 + 24);
      if (v21 >= v20 >> 1)
      {
        sub_181C9D0C4(v20 > 1, v21 + 1, 1);
        uint64_t v19 = a5;
        uint64_t v6 = v42;
      }

      *(void *)(v6 + 16) = v21 + 1;
      uint64_t v22 = v6 + 56 * v21;
      *(void *)(v22 + 32) = a2;
      *(void *)(v22 + 40) = a3;
      *(void *)(v22 + 48) = a4;
      *(void *)(v22 + 56) = v19;
      *(_BYTE *)(v22 + 64) = 0;
      *(void *)(v22 + 72) = v14;
      *(void *)(v22 + 80) = v16;
      if (!--v5) {
        return v6;
      }
    }

    *(void *)&__int128 v35 = v14;
    *((void *)&v35 + 1) = v16;
    id v36 = sub_181C01330;
    uint64_t v37 = 0LL;
    unint64_t v38 = sub_181C0136C;
    uint64_t v39 = 0LL;
    unint64_t v40 = sub_181C02E1C;
    uint64_t v41 = 0LL;
    __int128 v29 = v35;
    __int128 v30 = (unint64_t)sub_181C01330;
    __int128 v31 = (unint64_t)sub_181C0136C;
    __int128 v32 = (unint64_t)sub_181C02E1C;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C5C0);
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58DFF0);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_181BE61DC(v27, (uint64_t)v33);
      __swift_project_boxed_opaque_existential_2(v33, v34);
      if ((sub_18264F378() & 1) != 0)
      {
        __swift_project_boxed_opaque_existential_2(v33, v34);
        sub_18264F36C();
        unint64_t v17 = *((void *)&v29 + 1);
        uint64_t v14 = v29;
        __swift_destroy_boxed_opaque_existential_2((uint64_t)v33);
LABEL_10:
        swift_bridgeObjectRelease();
        unint64_t v16 = v17;
        goto LABEL_11;
      }

      __swift_destroy_boxed_opaque_existential_2((uint64_t)v33);
    }

    else
    {
      uint64_t v28 = 0LL;
      memset(v27, 0, sizeof(v27));
      sub_181BDA0F0((uint64_t)v27, &qword_18C58C5B8);
    }

    uint64_t v14 = sub_181C3A2A8(&v35);
    unint64_t v17 = v18;
    goto LABEL_10;
  }

  return v6;
}

uint64_t sub_181C8725C( unint64_t a1, unint64_t a2, void (*a3)(_BYTE *__return_ptr, uint64_t, uint64_t, char *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v29)(_BYTE *__return_ptr, uint64_t, uint64_t, char *, uint64_t);
  uint64_t v30;
  _BYTE v31[81];
  *(void *)&v31[73] = *MEMORY[0x1895F89C0];
  *(void *)&v31[17] = a3;
  *(void *)&v31[25] = a4;
  *(void *)&v31[33] = a5;
  *(void *)&v31[41] = a6;
  *(void *)&v31[49] = a7;
  *(void *)&v31[57] = a8;
  if ((sub_181BCE7EC(a1, a2) & 1) != 0)
  {
    char v13 = sub_181C7CBF8((void (*)(char *__return_ptr, void *))sub_181C86FC0, (uint64_t)&v31[1], a1, a2);
    return v13 & 1;
  }

  __int128 v30 = a4;
  uint64_t v14 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v14 = a1;
  }
  uint64_t v15 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v15 = 11LL;
  }
  unint64_t isStackAllocationSafe = sub_181C86740(0xFuLL, v15 | (v14 << 16), a1, a2);
  uint64_t v17 = isStackAllocationSafe + 1;
  if (__OFADD__(isStackAllocationSafe, 1LL))
  {
    __break(1u);
LABEL_15:
    __break(1u);
  }

  if (v17 < 0) {
    goto LABEL_15;
  }
  __int128 v29 = a3;
  if (v17 < 1025 || (unint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    uint64_t v28 = (uint64_t)&v28;
    MEMORY[0x1895F8858](isStackAllocationSafe);
    uint64_t v19 = (char *)&v28 - v18;
    sub_181C7DB2C((uint64_t)&v28 - v18, v17, a1, a2);
    uint64_t v20 = sub_18264EB50();
    uint64_t v21 = sub_18264EB50();
    v29(v31, a5, v20, v19, v21);
    char v13 = v31[0];
  }

  else
  {
    uint64_t v22 = swift_slowAlloc();
    sub_181C7DB2C(v22, v17, a1, a2);
    uint64_t v23 = sub_18264EB50();
    uint64_t v24 = sub_18264EB50();
    uint64_t v25 = v23;
    uint64_t v26 = v22;
    v29(v31, a5, v25, (char *)v22, v24);
    char v13 = v31[0];
    MEMORY[0x186E12168](v26, -1LL, -1LL);
  }

  return v13 & 1;
}

uint64_t sub_181C87494@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_181C8698C( a1,  *(void *)(v2 + 16),  *(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t, char *, uint64_t))(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40),  *(void *)(v2 + 48),  a2);
}

void *sub_181C874B4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  void *(*v5)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  int64_t v5 = *(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 32);
  unint64_t v7 = sub_18264EB50();
  uint64_t v8 = sub_18264EB50();
  uint64_t result = v5(&v10, v6, v7, a1, v8);
  *a2 = v10;
  return result;
}

uint64_t sub_181C8753C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_181C8756C(a1, (void (*)(uint64_t))sub_181C87558, a2);
}

uint64_t sub_181C87558(uint64_t a1)
{
  return sub_181C87590(a1);
}

uint64_t sub_181C8756C@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X8>)
{
  return sub_181C7D6D0( a1,  *(void *)(v3 + 16),  *(void (**)(uint64_t, uint64_t, char *, uint64_t))(v3 + 24),  *(void *)(v3 + 32),  *(void *)(v3 + 40),  *(void *)(v3 + 48),  a2,  a3);
}

uint64_t sub_181C87590(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = sub_18264EB50();
  uint64_t v6 = sub_18264EB50();
  return v3(v4, v5, a1, v6);
}

uint64_t sub_181C87608()
{
  return sub_181C86BB0();
}

uint64_t sub_181C87624()
{
  return sub_181C86EBC();
}

uint64_t sub_181C87640@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_181C8A5F0(a2);
  if ((v10 & 1) != 0) {
    goto LABEL_17;
  }
  uint64_t v11 = v9;
  uint64_t v12 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v12 != (_DWORD)v9)
  {
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v13 = result;
  uint64_t v14 = 1LL << *(_BYTE *)(a2 + 32);
  if (v14 < result)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  __int128 v22 = *(_OWORD *)a1;
  char v23 = *(_BYTE *)(a1 + 16);
  __int128 v24 = v22;
  char v25 = v23;
  sub_181C93370((uint64_t)&v24, (uint64_t)v26);
  uint64_t result = sub_181C93370((uint64_t)v26, (uint64_t)&v27);
  if ((v29 & 1) != 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  if (v28 != (_DWORD)v12) {
    goto LABEL_13;
  }
  if (v27 < v13)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  __int128 v17 = *(_OWORD *)(a1 + 24);
  char v18 = *(_BYTE *)(a1 + 40);
  __int128 v19 = v17;
  char v20 = v18;
  sub_181C93370((uint64_t)&v19, (uint64_t)v21);
  uint64_t result = sub_181C93370((uint64_t)v21, (uint64_t)&v30);
  if ((v32 & 1) == 0)
  {
    uint64_t v15 = v30;
    int v16 = v31;
    sub_181C93190(v13, v11, 0);
    uint64_t result = sub_181C93190(v14, v12, 0);
    if ((_DWORD)v12 == v16)
    {
      if (v14 >= v15)
      {
        *(void *)(a4 + 48) = a2;
        *(void *)(a4 + 56) = a3;
        *(_OWORD *)a4 = v22;
        *(_BYTE *)(a4 + 16) = v23;
        *(_OWORD *)(a4 + 24) = v17;
        *(_BYTE *)(a4 + 40) = v18;
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        return sub_181C933B8(a1);
      }

      goto LABEL_16;
    }

uint64_t NWTXTRecord.init(_:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v72 = sub_181C88270(MEMORY[0x18961AFE8]);
  nw_txt_record_t dictionary = nw_txt_record_create_dictionary();
  int64_t v4 = 0LL;
  uint64_t v5 = a1 + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 64);
  int64_t v76 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v74 = a1 + 64;
  uint64_t v75 = a1;
  while (v8)
  {
    unint64_t v9 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v10 = v9 | (v4 << 6);
LABEL_20:
    uint64_t v14 = 16 * v10;
    uint64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + v14);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    char v18 = (uint64_t *)(*(void *)(a1 + 56) + v14);
    uint64_t v20 = *v18;
    unint64_t v19 = v18[1];
    uint64_t v21 = HIBYTE(v19) & 0xF;
    if ((v19 & 0x2000000000000000LL) == 0) {
      uint64_t v21 = v20 & 0xFFFFFFFFFFFFLL;
    }
    int64_t v77 = v4;
    if (v21)
    {
      if (v20) {
        BOOL v22 = 0;
      }
      else {
        BOOL v22 = v19 == 0xE000000000000000LL;
      }
      if (v22 || (sub_18264F4EC() & 1) != 0)
      {
        char v23 = (const char *)(sub_18264EACC() + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        __int128 v24 = (nw_txt_record *)swift_unknownObjectRetain();
        LOBYTE(v23) = nw_txt_record_set_key(v24, v23, (const uint8_t *)"", 0LL);
        swift_unknownObjectRelease();
        swift_release();
        goto LABEL_51;
      }

      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      unint64_t v27 = v19;
      uint64_t v28 = v20;
      if ((v19 & 0x1000000000000000LL) != 0)
      {
        uint64_t v28 = sub_181C8B3F4();
        unint64_t v27 = v49;
        swift_bridgeObjectRelease();
        if ((v27 & 0x2000000000000000LL) != 0)
        {
LABEL_50:
          *(void *)uint64_t v78 = v28;
          uint64_t v79 = v27 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v50 = (const char *)(sub_18264EACC() + 32);
          char v51 = (nw_txt_record *)swift_unknownObjectRetain();
          BOOL v52 = nw_txt_record_set_key(v51, v50, v78, HIBYTE(v27) & 0xF);
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          swift_release();
          uint64_t v5 = v74;
          a1 = v75;
          if (!v52) {
            goto LABEL_29;
          }
          goto LABEL_51;
        }
      }

      else if ((v19 & 0x2000000000000000LL) != 0)
      {
        goto LABEL_50;
      }

      if ((v28 & 0x1000000000000000LL) != 0)
      {
        uint64_t value = (uint8_t *)((v27 & 0xFFFFFFFFFFFFFFFLL) + 32);
        size_t v29 = v28 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        uint64_t value = (uint8_t *)sub_18264F228();
        size_t v29 = v68;
      }

      uint64_t v30 = (const char *)(sub_18264EACC() + 32);
      int v31 = (nw_txt_record *)swift_unknownObjectRetain();
      BOOL v32 = nw_txt_record_set_key(v31, v30, value, v29);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_release();
      uint64_t v5 = v74;
      a1 = v75;
      if (!v32)
      {
LABEL_29:
        swift_bridgeObjectRelease();
        goto LABEL_31;
      }

unint64_t sub_181C87E5C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E800);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x18961AFF0];
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58E7B0);
  uint64_t v6 = sub_18264F354();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }

  unint64_t v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_181BE48BC(v12, (uint64_t)v5, &qword_18C58E800);
    unint64_t result = sub_181C8C028((uint64_t)v5);
    if ((v15 & 1) != 0) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = sub_18264F30C();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32LL))( v17 + *(void *)(*(void *)(v18 - 8) + 72LL) * v16,  v5,  v18);
    unint64_t result = (unint64_t)sub_181C275FC(v9, (_OWORD *)(v7[7] + 32 * v16));
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1LL);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    void v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_181C87FF8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x18961AFF0];
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58AC80);
  uint64_t v2 = (void *)sub_18264F354();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }

  swift_retain();
  uint64_t v4 = (__int16 *)(a1 + 50);
  while (1)
  {
    uint64_t v5 = *(void *)(v4 - 9);
    uint64_t v6 = *(void *)(v4 - 5);
    __int16 v7 = *(v4 - 1);
    __int16 v8 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_181C928F4(v5, v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_181C8C224);
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    unint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (_WORD *)(v2[7] + 4 * result);
    _WORD *v12 = v7;
    v12[1] = v8;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 12;
    _OWORD v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_181C88134(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x18961AFF0];
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E7A0);
  uint64_t v2 = (void *)sub_18264F354();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }

  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v7 = *(v4 - 1);
    uint64_t v8 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_181C928F4(v5, v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_181C8C224);
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    unint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    void *v12 = v7;
    v12[1] = v8;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    _OWORD v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_181C88270(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x18961AFF0];
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E808);
  uint64_t v2 = (void *)sub_18264F354();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }

  swift_retain();
  uint64_t v4 = (char *)(a1 + 64);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 4);
    uint64_t v6 = *((void *)v4 - 3);
    uint64_t v7 = *((void *)v4 - 2);
    unint64_t v8 = *((void *)v4 - 1);
    char v9 = *v4;
    swift_bridgeObjectRetain();
    sub_181BDA12C(v7, v8, v9);
    unint64_t result = sub_181C8C078(v5, v6);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v12 = v5;
    v12[1] = v6;
    uint64_t v13 = v2[7] + 24 * result;
    *(void *)uint64_t v13 = v7;
    *(void *)(v13 + 8) = v8;
    *(_BYTE *)(v13 + 16) = v9;
    uint64_t v14 = v2[2];
    BOOL v15 = __OFADD__(v14, 1LL);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v4 += 40;
    _OWORD v2[2] = v16;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_181C883B0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x18961AFF0];
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E760);
  uint64_t v2 = sub_18264F354();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }

  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_181BE48BC(v6, (uint64_t)&v15, &qword_18C58E7D8);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_181C928F4(v15, v16, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_181C8C224);
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    char v11 = (uint64_t *)(v3[6] + 16 * result);
    uint64_t *v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_181C275FC(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1LL);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48LL;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_181C884F8(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E7F0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x18961AFF0];
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58E788);
  uint64_t v6 = sub_18264F354();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }

  char v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_181BE48BC(v12, (uint64_t)v5, &qword_18C58E7F0);
    unint64_t result = sub_181C8C1C0((uint64_t)v5);
    if ((v15 & 1) != 0) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = sub_18264E688();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32LL))( v17 + *(void *)(*(void *)(v18 - 8) + 72LL) * v16,  v5,  v18);
    uint64_t v19 = v7[7];
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E780);
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v20 - 8) + 32LL))( v19 + *(void *)(*(void *)(v20 - 8) + 72LL) * v16,  v9,  v20);
    uint64_t v21 = v7[2];
    BOOL v22 = __OFADD__(v21, 1LL);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_11;
    }
    void v7[2] = v23;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t NWTXTRecord.subscript.setter(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    uint64_t v7 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000LL) == 0) {
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if (v7)
    {
      uint64_t v14 = a1;
      unint64_t v15 = a2;
      char v16 = 0;
      NWTXTRecord.setEntry(_:for:)((uint64_t)&v14, a3, a4);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }

    swift_bridgeObjectRelease();
    uint64_t v10 = (const char *)(sub_18264EACC() + 32);
    unint64_t v11 = (nw_txt_record *)swift_unknownObjectRetain();
    LOBYTE(v10) = nw_txt_record_set_key(v11, v10, (const uint8_t *)"", 0LL);
    swift_unknownObjectRelease();
    swift_release();
    if ((v10 & 1) != 0)
    {
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v14 = *v4;
      *uint64_t v4 = 0x8000000000000000LL;
      sub_181C8FA40(1LL, 0LL, 2, a3, a4, isUniquelyReferenced_nonNull_native);
      *uint64_t v4 = v14;
      swift_bridgeObjectRelease_n();
      return swift_bridgeObjectRelease();
    }
  }

  else
  {
    uint64_t v8 = (const char *)(sub_18264EACC() + 32);
    char v9 = (nw_txt_record *)swift_unknownObjectRetain();
    LODWORD(v8) = nw_txt_record_remove_key(v9, v8);
    swift_unknownObjectRelease();
    swift_release();
    if ((_DWORD)v8)
    {
      swift_bridgeObjectRetain();
      sub_181C8C8D0(a3, a4, (uint64_t)&v14);
      swift_bridgeObjectRelease();
      sub_181C91170(v14, v15, v16);
      return swift_bridgeObjectRelease();
    }
  }

  return swift_bridgeObjectRelease();
}

uint64_t NWTXTRecord.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_18264EA9C();
  MEMORY[0x1895F8858](v5);
  uint64_t v6 = *v2;
  if (!*(void *)(v6 + 16)) {
    return 0LL;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_181C8C078(a1, a2);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  uint64_t v9 = *(void *)(v6 + 56) + 24 * v7;
  uint64_t v10 = *(void *)v9;
  unint64_t v11 = *(void *)(v9 + 8);
  int v12 = *(unsigned __int8 *)(v9 + 16);
  sub_181BDA12C(*(void *)v9, v11, *(_BYTE *)(v9 + 16));
  swift_bridgeObjectRelease();
  if (v12)
  {
    if (v12 == 1)
    {
      sub_181BCD4AC(v10, v11);
      sub_18264EA84();
      sub_181C91184();
      uint64_t v13 = sub_18264EA6C();
      sub_181BDA14C(v10, v11, 1);
      sub_181BDA14C(v10, v11, 1);
      return v13;
    }

    else
    {
      return 0LL;
    }
  }

  return v10;
}

{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  void v9[2];
  char v10;
  uint64_t v4 = sub_181C8A368((uint64_t)v9, *(void *)a2, *(void *)(a2 + 8), *(unsigned __int8 *)(a2 + 16), *v2);
  uint64_t v5 = v9[0];
  uint64_t v6 = v9[1];
  unint64_t v7 = v10;
  swift_bridgeObjectRetain();
  sub_181BDA12C(v5, v6, v7);
  sub_181BDA14C(v5, v6, v7);
  swift_bridgeObjectRelease();
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v7;
  return v4;
}

uint64_t NWTXTRecord.init(nw:)@<X0>(nw_txt_record *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = MEMORY[0x18961AFF0];
  uint64_t v5 = (uint64_t *)(v4 + 16);
  uint64_t v9[4] = sub_181BDA1E0;
  v9[5] = v4;
  v9[0] = MEMORY[0x1895F87A8];
  v9[1] = 1107296256LL;
  _OWORD v9[2] = sub_181C89CDC;
  void v9[3] = &block_descriptor_17;
  uint64_t v6 = _Block_copy(v9);
  swift_retain();
  swift_release();
  nw_txt_record_apply(a1, v6);
  _Block_release(v6);
  swift_beginAccess();
  uint64_t v7 = *v5;
  swift_bridgeObjectRetain();
  uint64_t result = swift_release();
  *a2 = v7;
  a2[1] = a1;
  return result;
}

BOOL static NWTXTRecord.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return nw_txt_record_is_equal(*(nw_txt_record_t *)(a1 + 8), *(nw_txt_record_t *)(a2 + 8));
}

uint64_t NWTXTRecord.debugDescription.getter()
{
  uint64_t v1 = *v0;
  uint64_t v4 = MEMORY[0x18961AFF0];
  swift_bridgeObjectRetain_n();
  swift_unknownObjectRetain();
  sub_181BD279C(v1, &v4);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  uint64_t v2 = sub_18264E9C4();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t NWTXTRecord.nw.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t NWTXTRecord.Entry.data.getter()
{
  uint64_t v2 = *(void *)v0;
  unint64_t v1 = *(void *)(v0 + 8);
  if (*(_BYTE *)(v0 + 16))
  {
    if (*(_BYTE *)(v0 + 16) == 1) {
      sub_181BCD4AC(*(void *)v0, *(void *)(v0 + 8));
    }
    else {
      return 0LL;
    }
  }

  else
  {
    swift_bridgeObjectRetain();
    return sub_181BDAEEC(v2, v1);
  }

  return v2;
}

uint64_t NWTXTRecord.Entry.init(_:)@<X0>(unint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_18264EA9C();
  uint64_t result = MEMORY[0x1895F8858](v4);
  if (a1 >> 60 != 15) {
    __asm { BR              X10 }
  }

  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = 0LL;
  *(_BYTE *)(a2 + 16) = 2;
  return result;
}

uint64_t NWTXTRecord.Entry.hash(into:)()
{
  uint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  if (!*(_BYTE *)(v0 + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t v1 = sub_181BDAEEC(v1, v2);
    unint64_t v2 = v3;
    goto LABEL_7;
  }

  if (*(_BYTE *)(v0 + 16) == 1)
  {
    sub_181BCD4AC(*(void *)v0, *(void *)(v0 + 8));
LABEL_7:
    sub_18264F660();
    sub_181BCD4AC(v1, v2);
    sub_18264E604();
    sub_181BE61C8(v1, v2);
    return sub_181BE61C8(v1, v2);
  }

  if (v1 | v2)
  {
    uint64_t v1 = 0LL;
    unint64_t v2 = 0xC000000000000000LL;
    goto LABEL_7;
  }

  return sub_18264F660();
}

uint64_t NWTXTRecord.Entry.debugDescription.getter()
{
  uint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  if (*(_BYTE *)(v0 + 16))
  {
    if (*(_BYTE *)(v0 + 16) == 1)
    {
      sub_181BCD4AC(*(void *)v0, *(void *)(v0 + 8));
      uint64_t v3 = sub_18264E598();
      sub_181BDA14C(v1, v2, 1);
    }

    else if (v1 | v2)
    {
      return 0x3E7974706D653CLL;
    }

    else
    {
      return 0x3E656E6F6E3CLL;
    }
  }

  else
  {
    sub_18264EB74();
    sub_18264EB74();
    return 34LL;
  }

  return v3;
}

uint64_t NWTXTRecord.Entry.hashValue.getter()
{
  uint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  int v3 = *(unsigned __int8 *)(v0 + 16);
  sub_18264F648();
  if (v3)
  {
    if (v3 == 1)
    {
      sub_181BCD4AC(v1, v2);
    }

    else
    {
      if (!(v1 | v2))
      {
        sub_18264F660();
        return sub_18264F684();
      }

      uint64_t v1 = 0LL;
      unint64_t v2 = 0xC000000000000000LL;
    }
  }

  else
  {
    swift_bridgeObjectRetain();
    uint64_t v1 = sub_181BDAEEC(v1, v2);
    unint64_t v2 = v4;
  }

  sub_18264F660();
  sub_181BCD4AC(v1, v2);
  sub_18264E604();
  sub_181BE61C8(v1, v2);
  sub_181BE61C8(v1, v2);
  return sub_18264F684();
}

uint64_t sub_181C8902C()
{
  uint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  if (!*(_BYTE *)(v0 + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t v1 = sub_181BDAEEC(v1, v2);
    unint64_t v2 = v3;
    goto LABEL_7;
  }

  if (*(_BYTE *)(v0 + 16) == 1)
  {
    sub_181BCD4AC(*(void *)v0, *(void *)(v0 + 8));
LABEL_7:
    sub_18264F660();
    sub_181BCD4AC(v1, v2);
    sub_18264E604();
    sub_181BE61C8(v1, v2);
    return sub_181BE61C8(v1, v2);
  }

  if (v1 | v2)
  {
    uint64_t v1 = 0LL;
    unint64_t v2 = 0xC000000000000000LL;
    goto LABEL_7;
  }

  return sub_18264F660();
}

uint64_t sub_181C890FC()
{
  uint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  int v3 = *(unsigned __int8 *)(v0 + 16);
  sub_18264F648();
  if (v3)
  {
    if (v3 == 1)
    {
      sub_181BCD4AC(v1, v2);
    }

    else
    {
      if (!(v1 | v2))
      {
        sub_18264F660();
        return sub_18264F684();
      }

      uint64_t v1 = 0LL;
      unint64_t v2 = 0xC000000000000000LL;
    }
  }

  else
  {
    swift_bridgeObjectRetain();
    uint64_t v1 = sub_181BDAEEC(v1, v2);
    unint64_t v2 = v4;
  }

  sub_18264F660();
  sub_181BCD4AC(v1, v2);
  sub_18264E604();
  sub_181BE61C8(v1, v2);
  sub_181BE61C8(v1, v2);
  return sub_18264F684();
}

uint64_t sub_181C891E0()
{
  return sub_18264F684();
}

uint64_t sub_181C89244()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_181C89284()
{
  return sub_18264F684();
}

uint64_t sub_181C892E4()
{
  uint64_t v0 = sub_18264EAB4();
  uint64_t v2 = v1;
  if (v0 == sub_18264EAB4() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_18264F4EC();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t NWTXTRecord.setEntry(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = v3;
  v20[5] = *MEMORY[0x1895F89C0];
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  int v9 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    if (v9 == 1) {
      __asm { BR              X9 }
    }

    if (!(v7 | v8))
    {
      uint64_t v19 = sub_18264EACC() + 32;
      uint64_t v14 = (nw_txt_record *)swift_unknownObjectRetain();
      char v16 = (const char *)v19;
      unint64_t v15 = 0LL;
      goto LABEL_13;
    }

void NWTXTRecord.init(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_181C89B44(uint64_t a1, int a2, _BYTE *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = (uint64_t *)(a5 + 16);
  uint64_t v9 = sub_18264EB80();
  uint64_t v11 = v10;
  if (a2 == 4)
  {
    sub_181C51DC0(a3, a4);
    NWTXTRecord.Entry.init(_:)(v14, (uint64_t)v22);
    uint64_t v15 = v22[0];
    uint64_t v16 = v22[1];
    char v17 = v23;
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v8;
    *uint64_t v8 = 0x8000000000000000LL;
    sub_181C8FA40(v15, v16, v17, v9, v11, isUniquelyReferenced_nonNull_native);
    uint64_t v19 = v21;
  }

  else
  {
    if (a2 == 3)
    {
      swift_beginAccess();
      char v12 = swift_isUniquelyReferenced_nonNull_native();
      v22[0] = *v8;
      *uint64_t v8 = 0x8000000000000000LL;
      uint64_t v13 = 1LL;
    }

    else
    {
      if (a2 != 2)
      {
        swift_bridgeObjectRelease();
        return 1LL;
      }

      swift_beginAccess();
      char v12 = swift_isUniquelyReferenced_nonNull_native();
      v22[0] = *v8;
      *uint64_t v8 = 0x8000000000000000LL;
      uint64_t v13 = 0LL;
    }

    sub_181C8FA40(v13, 0LL, 2, v9, v11, v12);
    uint64_t v19 = v22[0];
  }

  *uint64_t v8 = v19;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  return 1LL;
}

uint64_t sub_181C89CDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  LOBYTE(a5) = v9(a2, a3, a4, a5);
  swift_release();
  return a5 & 1;
}

Swift::Bool __swiftcall NWTXTRecord.removeEntry(key:)(Swift::String key)
{
  object = key._object;
  uint64_t countAndFlagsBits = key._countAndFlagsBits;
  uint64_t v3 = (const char *)(sub_18264EACC() + 32);
  unint64_t v4 = (nw_txt_record *)swift_unknownObjectRetain();
  BOOL v5 = nw_txt_record_remove_key(v4, v3);
  swift_unknownObjectRelease();
  swift_release();
  if (v5)
  {
    swift_bridgeObjectRetain();
    sub_181C8C8D0(countAndFlagsBits, (uint64_t)object, (uint64_t)v7);
    swift_bridgeObjectRelease();
    sub_181C91170(v7[0], v7[1], v8);
  }

  return v5;
}

uint64_t NWTXTRecord.getEntry(for:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *v3;
  if (*(void *)(v5 + 16))
  {
    uint64_t v7 = result;
    swift_bridgeObjectRetain();
    unint64_t v8 = sub_181C8C078(v7, a2);
    if ((v9 & 1) != 0)
    {
      uint64_t v10 = *(void *)(v5 + 56) + 24 * v8;
      uint64_t v11 = *(void *)v10;
      unint64_t v12 = *(void *)(v10 + 8);
      *(void *)a3 = *(void *)v10;
      *(void *)(a3 + 8) = v12;
      char v13 = *(_BYTE *)(v10 + 16);
      *(_BYTE *)(a3 + 16) = v13;
      sub_181BDA12C(v11, v12, v13);
      return swift_bridgeObjectRelease();
    }

    uint64_t result = swift_bridgeObjectRelease();
  }

  *(void *)a3 = 0LL;
  *(void *)(a3 + 8) = 0LL;
  *(_BYTE *)(a3 + 16) = -1;
  return result;
}

uint64_t NWTXTRecord.data.getter()
{
  uint64_t v1 = *(nw_txt_record **)(v0 + 8);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_18265D190;
  v6[4] = sub_181C92CE4;
  v6[5] = v2;
  v6[0] = MEMORY[0x1895F87A8];
  v6[1] = 1107296256LL;
  void v6[2] = sub_181BDEF40;
  v6[3] = &block_descriptor_11_0;
  uint64_t v3 = _Block_copy(v6);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_txt_record_access_bytes(v1, v3);
  _Block_release(v3);
  swift_unknownObjectRelease();
  swift_beginAccess();
  uint64_t v4 = *(void *)(v2 + 16);
  sub_181BCD4AC(v4, *(void *)(v2 + 24));
  swift_release();
  return v4;
}

uint64_t sub_181C89F90(_BYTE *__src, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    if (a2 <= 14)
    {
      uint64_t v7 = sub_181BE44F8(__src, &__src[a2]);
      unint64_t v8 = v9 & 0xFFFFFFFFFFFFFFLL;
    }

    else
    {
      sub_18264E4C0();
      swift_allocObject();
      uint64_t v5 = sub_18264E478();
      uint64_t v6 = v5;
      if ((unint64_t)a2 >= 0x7FFFFFFF)
      {
        sub_18264E5B0();
        uint64_t v7 = swift_allocObject();
        *(void *)(v7 + 16) = 0LL;
        *(void *)(v7 + 24) = a2;
        unint64_t v8 = v6 | 0x8000000000000000LL;
      }

      else
      {
        uint64_t v7 = a2 << 32;
        unint64_t v8 = v5 | 0x4000000000000000LL;
      }
    }
  }

  else
  {
    uint64_t v7 = 0LL;
    unint64_t v8 = 0xC000000000000000LL;
  }

  swift_beginAccess();
  uint64_t v10 = *(void *)(a3 + 16);
  unint64_t v11 = *(void *)(a3 + 24);
  *(void *)(a3 + 16) = v7;
  *(void *)(a3 + 24) = v8;
  sub_181BCD4F0(v10, v11);
  return 1LL;
}

uint64_t sub_181C8A07C@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v5 = NWTXTRecord.subscript.getter(v3, v4);
  uint64_t v7 = v6;
  swift_unknownObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5;
  a2[1] = v7;
  return result;
}

uint64_t sub_181C8A0F8(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return NWTXTRecord.subscript.setter(v5, v6, v3, v4);
}

void (*NWTXTRecord.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  void v7[3] = a3;
  v7[4] = v3;
  uint64_t v7[2] = a2;
  *uint64_t v7 = NWTXTRecord.subscript.getter(a2, a3);
  v7[1] = v8;
  return sub_181C8A1CC;
}

void sub_181C8A1CC(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  unint64_t v4 = (*a1)[1];
  uint64_t v5 = (*a1)[3];
  uint64_t v6 = (*a1)[2];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    NWTXTRecord.subscript.setter(v3, v4, v6, v5);
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRetain();
    NWTXTRecord.subscript.setter(v3, v4, v6, v5);
  }

  free(v2);
}

uint64_t NWTXTRecord.dictionary.getter()
{
  uint64_t v2 = MEMORY[0x18961AFF0];
  uint64_t v0 = swift_bridgeObjectRetain();
  sub_181BD279C(v0, &v2);
  swift_bridgeObjectRelease();
  return v2;
}

BOOL sub_181C8A2B0(uint64_t a1, uint64_t a2)
{
  return nw_txt_record_is_equal(*(nw_txt_record_t *)(a1 + 8), *(nw_txt_record_t *)(a2 + 8));
}

uint64_t sub_181C8A368(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1LL << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (((*(void *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8LL) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v5 = *(void *)(*(void *)(a5 + 48) + 16 * a2);
    uint64_t v6 = *(void *)(a5 + 56) + 24 * a2;
    uint64_t v7 = *(void *)v6;
    unint64_t v8 = *(void *)(v6 + 8);
    *(void *)uint64_t result = *(void *)v6;
    *(void *)(result + 8) = v8;
    char v9 = *(_BYTE *)(v6 + 16);
    *(_BYTE *)(result + 16) = v9;
    swift_bridgeObjectRetain();
    sub_181BDA12C(v7, v8, v9);
    return v5;
  }

BOOL static NWTXTRecord.Index.== infix(_:_:)(BOOL result, uint64_t a2)
{
  if ((*(_BYTE *)(result + 16) & 1) == 0 && (*(_BYTE *)(a2 + 16) & 1) == 0)
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

BOOL static NWTXTRecord.Index.< infix(_:_:)(BOOL result, uint64_t a2)
{
  if ((*(_BYTE *)(result + 16) & 1) == 0 && (*(_BYTE *)(a2 + 16) & 1) == 0)
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

BOOL sub_181C8A494(BOOL result, uint64_t a2)
{
  if ((*(_BYTE *)(result + 16) & 1) == 0 && (*(_BYTE *)(a2 + 16) & 1) == 0)
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

BOOL sub_181C8A4D0(BOOL result, uint64_t a2)
{
  if ((*(_BYTE *)(a2 + 16) & 1) == 0 && (*(_BYTE *)(result + 16) & 1) == 0)
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

BOOL sub_181C8A50C(BOOL result, uint64_t a2)
{
  if ((*(_BYTE *)(result + 16) & 1) == 0 && (*(_BYTE *)(a2 + 16) & 1) == 0)
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

BOOL sub_181C8A548(BOOL result, uint64_t a2)
{
  if ((*(_BYTE *)(a2 + 16) & 1) == 0 && (*(_BYTE *)(result + 16) & 1) == 0)
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

BOOL sub_181C8A584(BOOL result, uint64_t a2)
{
  if ((*(_BYTE *)(result + 16) & 1) == 0 && (*(_BYTE *)(a2 + 16) & 1) == 0)
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t NWTXTRecord.startIndex.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_181C8A5F0(*v1);
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  return result;
}

uint64_t sub_181C8A5F0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3LL;
  }
  unint64_t v8 = v7 - 3;
  char v9 = (unint64_t *)(a1 + 88);
  uint64_t v2 = 128LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

void NWTXTRecord.endIndex.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = *(unsigned int *)(*(void *)v1 + 36LL);
  *(void *)a1 = 1LL << *(_BYTE *)(*(void *)v1 + 32LL);
  *(void *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = 0;
}

uint64_t NWTXTRecord.index(after:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_181C92870(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16), *v2);
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 16) = v6 & 1;
  return result;
}

uint64_t sub_181C8A6EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_181C8A5F0(*v1);
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  return result;
}

void sub_181C8A71C(uint64_t a1@<X8>)
{
  uint64_t v2 = *(unsigned int *)(*(void *)v1 + 36LL);
  *(void *)a1 = 1LL << *(_BYTE *)(*(void *)v1 + 32LL);
  *(void *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = 0;
}

void (*sub_181C8A73C(void *a1, uint64_t a2))(uint64_t a1)
{
  char v5 = malloc(0x40uLL);
  *a1 = v5;
  uint64_t v6 = sub_181C8A368((uint64_t)v13, *(void *)a2, *(void *)(a2 + 8), *(unsigned __int8 *)(a2 + 16), *v2);
  uint64_t v8 = v7;
  uint64_t v9 = v13[0];
  unint64_t v10 = v13[1];
  v5[5] = v7;
  v5[6] = v9;
  v5[7] = v10;
  char v11 = v14;
  *((_BYTE *)v5 + 33) = v14;
  swift_bridgeObjectRetain();
  sub_181BDA12C(v9, v10, v11);
  sub_181BDA14C(v9, v10, v11);
  swift_bridgeObjectRelease();
  *char v5 = v6;
  v5[1] = v8;
  _OWORD v5[2] = v9;
  void v5[3] = v10;
  *((_BYTE *)v5 + 32) = v11;
  swift_bridgeObjectRetain();
  sub_181BDA12C(v9, v10, v11);
  return sub_181C8A814;
}

void sub_181C8A814(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 48LL);
  unint64_t v2 = *(void *)(*(void *)a1 + 56LL);
  uint64_t v4 = *(void *)(*(void *)a1 + 16LL);
  unint64_t v5 = *(void *)(*(void *)a1 + 24LL);
  char v6 = *(_BYTE *)(*(void *)a1 + 32LL);
  char v7 = *(_BYTE *)(*(void *)a1 + 33LL);
  swift_bridgeObjectRelease();
  sub_181BDA14C(v4, v5, v6);
  swift_bridgeObjectRelease();
  sub_181BDA14C(v3, v2, v7);
  free(v1);
}

uint64_t sub_181C8A890@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3 = a1[1];
  __int128 v5 = *a1;
  v6[0] = v3;
  *(_OWORD *)((char *)v6 + 9) = *(__int128 *)((char *)a1 + 25);
  return sub_181C87640((uint64_t)&v5, *v2, v2[1], a2);
}

uint64_t sub_181C8A8C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = sub_181C8A5F0(v4);
  *(void *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6 & 1;
  uint64_t v7 = *(unsigned int *)(v4 + 36);
  *(void *)(a1 + 40) = 1LL << *(_BYTE *)(v4 + 32);
  *(void *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 56) = 0;
  swift_bridgeObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t sub_181C8A928()
{
  uint64_t v1 = *v0;
  uint64_t result = sub_181C8A5F0(*v0);
  if ((v4 & 1) == 0)
  {
    if (*(_DWORD *)(v1 + 36) == v3) {
      return result == 1LL << *(_BYTE *)(v1 + 32);
    }
    __break(1u);
  }

  __break(1u);
  return result;
}

void sub_181C8A97C(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(_BYTE *)(a1 + 16) = -2;
}

uint64_t sub_181C8A98C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_181C8A9A4(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16), a2, *v3, a3);
}

uint64_t sub_181C8A9A4@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if (a4 < 0)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
  }

  else
  {
    uint64_t v7 = a2;
    unint64_t v8 = result;
    uint64_t v9 = a6;
    char v10 = a3 & 1;
    if (a4)
    {
      uint64_t result = sub_181C93174(result, a2, a3 & 1);
      uint64_t v12 = 0LL;
      uint64_t v13 = a5 + 64;
      uint64_t v14 = a4 - 1;
      uint64_t v15 = v7;
      uint64_t v16 = a5 + 96;
      while (1)
      {
        if ((v10 & 1) != 0) {
          goto LABEL_31;
        }
        if ((v8 & 0x8000000000000000LL) != 0 || (uint64_t v18 = 1LL << *(_BYTE *)(a5 + 32), (uint64_t)v8 >= v18))
        {
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
          goto LABEL_30;
        }

        unint64_t v19 = v8 >> 6;
        unint64_t v20 = *(void *)(v13 + 8 * (v8 >> 6));
        if (((v20 >> v8) & 1) == 0) {
          goto LABEL_28;
        }
        if (*(_DWORD *)(a5 + 36) != (_DWORD)v7) {
          goto LABEL_29;
        }
        unint64_t v21 = v20 & (-2LL << (v8 & 0x3F));
        if (v21)
        {
          unint64_t v8 = __clz(__rbit64(v21)) | v8 & 0xFFFFFFFFFFFFFFC0LL;
        }

        else
        {
          unint64_t v22 = v19 + 1;
          unint64_t v23 = (unint64_t)(v18 + 63) >> 6;
          if (v19 + 1 >= v23) {
            goto LABEL_22;
          }
          unint64_t v24 = *(void *)(v13 + 8 * v22);
          if (!v24)
          {
            unint64_t v22 = v19 + 2;
            if (v19 + 2 >= v23) {
              goto LABEL_22;
            }
            unint64_t v24 = *(void *)(v13 + 8 * v22);
            if (!v24)
            {
              unint64_t v22 = v19 + 3;
              if (v19 + 3 >= v23)
              {
LABEL_22:
                unint64_t v8 = 1LL << *(_BYTE *)(a5 + 32);
                goto LABEL_5;
              }

              unint64_t v24 = *(void *)(v13 + 8 * v22);
              if (!v24)
              {
                while (v23 - 4 != v19)
                {
                  unint64_t v24 = *(void *)(v16 + 8 * v19++);
                  if (v24)
                  {
                    uint64_t v25 = v8;
                    uint64_t v26 = v16;
                    uint64_t result = sub_181C93190(v25, v7, 0);
                    uint64_t v16 = v26;
                    unint64_t v22 = v19 + 3;
                    goto LABEL_14;
                  }
                }

                uint64_t v27 = v8;
                uint64_t v28 = v16;
                uint64_t result = sub_181C93190(v27, v7, 0);
                uint64_t v16 = v28;
                unint64_t v8 = v18;
                goto LABEL_5;
              }
            }
          }

uint64_t sub_181C8ABA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_181C8ABE0( *(void *)a1,  *(void *)(a1 + 8),  *(_BYTE *)(a1 + 16),  a2,  *(void *)a3,  *(void *)(a3 + 8),  *(_BYTE *)(a3 + 16),  *v4,  a4);
}

uint64_t sub_181C8ABE0@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int a6@<W5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  if (a4 < 0)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }

  else
  {
    uint64_t v14 = a2;
    unint64_t v15 = result;
    char v16 = a3 & 1;
    uint64_t result = sub_181C93174(result, a2, a3 & 1);
    if (a4)
    {
      uint64_t v17 = 0LL;
      char v31 = a7 & 1;
      char v18 = (a3 | a7) & 1;
      uint64_t v19 = a8 + 64;
      uint64_t v20 = a5;
      while (1)
      {
        if ((v18 & 1) != 0) {
          goto LABEL_36;
        }
        if ((_DWORD)v14 != a6)
        {
          __break(1u);
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
          goto LABEL_35;
        }

        if (v15 == v20)
        {
          uint64_t result = sub_181C93190(v20, v14, 0);
          *(void *)a9 = 0LL;
          *(void *)(a9 + 8) = 0LL;
          *(_BYTE *)(a9 + 16) = -1;
          return result;
        }

        if ((v15 & 0x8000000000000000LL) != 0) {
          goto LABEL_32;
        }
        uint64_t v21 = 1LL << *(_BYTE *)(a8 + 32);
        unint64_t v22 = v15 >> 6;
        unint64_t v23 = *(void *)(v19 + 8 * (v15 >> 6));
        if (((v23 >> v15) & 1) == 0) {
          goto LABEL_33;
        }
        if (*(_DWORD *)(a8 + 36) != a6) {
          goto LABEL_34;
        }
        unint64_t v24 = v23 & (-2LL << (v15 & 0x3F));
        if (v24)
        {
          uint64_t result = sub_181C93190(v15, v14, 0);
          unint64_t v15 = __clz(__rbit64(v24)) | v15 & 0xFFFFFFFFFFFFFFC0LL;
        }

        else
        {
          unint64_t v25 = v22 + 1;
          unint64_t v26 = (unint64_t)(v21 + 63) >> 6;
          if (v22 + 1 < v26)
          {
            unint64_t v27 = *(void *)(v19 + 8 * v25);
            if (v27) {
              goto LABEL_16;
            }
            unint64_t v25 = v22 + 2;
            if (v22 + 2 >= v26)
            {
LABEL_26:
              uint64_t result = sub_181C93190(v15, v14, 0);
              unint64_t v15 = v21;
            }

            else
            {
              unint64_t v27 = *(void *)(v19 + 8 * v25);
              if (!v27)
              {
                unint64_t v25 = v22 + 3;
                if (v22 + 3 >= v26) {
                  goto LABEL_26;
                }
                unint64_t v27 = *(void *)(v19 + 8 * v25);
                if (!v27)
                {
                  unint64_t v28 = v26 - 4;
                  while (v28 != v22)
                  {
                    unint64_t v27 = *(void *)(a8 + 96 + 8 * v22++);
                    if (v27)
                    {
                      unint64_t v25 = v22 + 3;
                      goto LABEL_16;
                    }
                  }

                  goto LABEL_26;
                }
              }

uint64_t sub_181C8AE24(uint64_t a1, uint64_t a2)
{
  return sub_181C8AE44( *(void *)a1,  *(void *)(a1 + 8),  *(_BYTE *)(a1 + 16),  *(void *)a2,  *(void *)(a2 + 8),  *(_BYTE *)(a2 + 16),  *v2);
}

uint64_t sub_181C8AE44(uint64_t result, uint64_t a2, char a3, uint64_t a4, unsigned int a5, char a6, uint64_t a7)
{
  if ((a6 & 1) != 0 || (a3 & 1) != 0) {
    goto LABEL_39;
  }
  unint64_t v8 = result;
  if (a4 < result) {
    goto LABEL_37;
  }
  if (a5 != (_DWORD)a2)
  {
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    return result;
  }

  if (result != a4)
  {
    uint64_t v12 = a7 + 64;
    uint64_t v22 = a7 + 96;
    uint64_t v10 = 1LL;
    while (1)
    {
      if ((v8 & 0x8000000000000000LL) != 0 || (uint64_t v13 = 1LL << *(_BYTE *)(a7 + 32), (uint64_t)v8 >= v13))
      {
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        goto LABEL_38;
      }

      unint64_t v14 = v8 >> 6;
      unint64_t v15 = *(void *)(v12 + 8 * (v8 >> 6));
      if (((v15 >> v8) & 1) == 0) {
        goto LABEL_35;
      }
      if (*(_DWORD *)(a7 + 36) != a5) {
        goto LABEL_36;
      }
      unint64_t v16 = v15 & (-2LL << (v8 & 0x3F));
      if (v16)
      {
        uint64_t result = sub_181C93190(v8, a2, 0);
        unint64_t v8 = __clz(__rbit64(v16)) | v8 & 0xFFFFFFFFFFFFFFC0LL;
        if (v8 == a4) {
          return v10;
        }
      }

      else
      {
        unint64_t v17 = v14 + 1;
        unint64_t v18 = (unint64_t)(v13 + 63) >> 6;
        if (v14 + 1 < v18)
        {
          unint64_t v19 = *(void *)(v12 + 8 * v17);
          if (v19) {
            goto LABEL_18;
          }
          unint64_t v17 = v14 + 2;
          if (v14 + 2 >= v18)
          {
LABEL_29:
            uint64_t result = sub_181C93190(v8, a2, 0);
            unint64_t v8 = v13;
          }

          else
          {
            unint64_t v19 = *(void *)(v12 + 8 * v17);
            if (!v19)
            {
              unint64_t v17 = v14 + 3;
              if (v14 + 3 >= v18) {
                goto LABEL_29;
              }
              unint64_t v19 = *(void *)(v12 + 8 * v17);
              if (!v19)
              {
                unint64_t v20 = v18 - 4;
                while (v20 != v14)
                {
                  unint64_t v19 = *(void *)(v22 + 8 * v14++);
                  if (v19)
                  {
                    unint64_t v17 = v14 + 3;
                    goto LABEL_18;
                  }
                }

                goto LABEL_29;
              }
            }

uint64_t sub_181C8B030(uint64_t result, uint64_t a2)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0 || (*(_BYTE *)(a2 + 16) & 1) != 0) {
    goto LABEL_13;
  }
  int v2 = *(_DWORD *)(result + 8);
  if (v2 != *(void *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_10;
  }

  if (*(void *)result < *(void *)a2)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
LABEL_14:
    __break(1u);
    return result;
  }

  if (*(void *)result >= *(void *)(a2 + 24))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  return result;
}

uint64_t sub_181C8B09C(uint64_t result, uint64_t a2)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0 || (*(_BYTE *)(a2 + 16) & 1) != 0) {
    goto LABEL_13;
  }
  int v2 = *(_DWORD *)(result + 8);
  if (v2 != *(void *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_10;
  }

  if (*(void *)result < *(void *)a2)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
LABEL_14:
    __break(1u);
    return result;
  }

  if (*(void *)(a2 + 24) < *(void *)result)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  return result;
}

uint64_t sub_181C8B108(uint64_t result, uint64_t a2)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0 || (*(_BYTE *)(a2 + 16) & 1) != 0) {
    goto LABEL_13;
  }
  if (*(_DWORD *)(result + 8) != *(void *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_10;
  }

  if (*(void *)result < *(void *)a2)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if (((*(_BYTE *)(a2 + 40) | *(_BYTE *)(result + 40)) & 1) != 0)
  {
LABEL_14:
    __break(1u);
    return result;
  }

  if (*(void *)(a2 + 24) < *(void *)(result + 24))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  return result;
}

uint64_t sub_181C8B184@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_181C92870(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16), *v2);
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 16) = v6 & 1;
  return result;
}

uint64_t sub_181C8B1C0(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(_BYTE *)(a1 + 16);
  uint64_t v7 = sub_181C92870(*(void *)a1, v5, v6, v3);
  uint64_t v9 = v8;
  char v11 = v10;
  uint64_t result = sub_181C93190(v4, v5, v6);
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v11 & 1;
  return result;
}

__n128 sub_181C8B238@<Q0>(__n128 *a1@<X8>)
{
  __n128 v7 = *(__n128 *)v1;
  uint64_t v3 = sub_181C8A5F0(*v1);
  __n128 result = v7;
  *a1 = v7;
  a1[1].n128_u64[0] = v3;
  a1[1].n128_u64[1] = v5;
  a1[2].n128_u8[0] = v6 & 1;
  return result;
}

uint64_t sub_181C8B280()
{
  uint64_t v1 = *v0;
  uint64_t v2 = sub_181C8A5F0(*v0);
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  uint64_t v7 = sub_181C8AE44(v2, v3, v5 & 1, 1LL << *(_BYTE *)(v1 + 32), *(_DWORD *)(v1 + 36), 0, v1);
  sub_181C93190(v2, v4, v6);
  return v7;
}

uint64_t sub_181C8B2FC()
{
  uint64_t v1 = sub_181C8B998(*v0, v0[1]);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_181C8B344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_181C8BD30(a1, a2, a3, *v3, v3[1]);
}

uint64_t sub_181C8B34C()
{
  uint64_t v1 = *v0;
  uint64_t v4 = MEMORY[0x18961AFF0];
  swift_bridgeObjectRetain_n();
  swift_unknownObjectRetain();
  sub_181BD279C(v1, &v4);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  uint64_t v2 = sub_18264E9C4();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_181C8B3F4()
{
  unint64_t v0 = sub_18264EC04();
  uint64_t v4 = sub_181C8B470(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_181C8B470(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    unint64_t v9 = sub_181C8B5B4(a1, a2, a3, a4);
    if (v9)
    {
      uint64_t v10 = v9;
      char v11 = sub_181BF7818(v9, 0LL);
      unint64_t v12 = sub_181C8B6A0((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }

    else
    {
      char v11 = (void *)MEMORY[0x18961AFE8];
    }

    uint64_t v13 = MEMORY[0x186E0E6C4](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }

  else
  {
    if ((a4 & 0x2000000000000000LL) == 0)
    {
      if ((a3 & 0x1000000000000000LL) != 0) {
LABEL_12:
      }
        JUMPOUT(0x186E0E6C4LL);
LABEL_9:
      sub_18264F228();
      goto LABEL_12;
    }

    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x186E0E6C4]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }

unint64_t sub_181C8B5B4( unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4LL << v8;
  if ((result & 0xC) == 4LL << v8)
  {
    __n128 result = sub_181C23710(result, a3, a4);
    unint64_t v7 = result;
  }

  if ((a2 & 0xC) == v9)
  {
    __n128 result = sub_181C23710(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000LL) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }

  else if ((a4 & 0x1000000000000000LL) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }

  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }

  else if (v10 >= a2 >> 16)
  {
    return sub_18264EBBC();
  }

  __break(1u);
  return result;
}

unint64_t sub_181C8B6A0( unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0LL;
    goto LABEL_33;
  }

  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0LL;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    _OWORD v9[2] = a6;
    void v9[3] = a7;
    uint64_t v9[4] = v12;
    return v11;
  }

  uint64_t v11 = 0LL;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000LL) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4LL << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000LL) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    __n128 result = v12;
    if (v17 == v15) {
      __n128 result = sub_181C23710(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000LL) != 0)
    {
      __n128 result = sub_18264EBC8();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }

    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000LL) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }

      else
      {
        __n128 result = v21;
        if ((a6 & 0x1000000000000000LL) == 0) {
          __n128 result = sub_18264F228();
        }
        char v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000LL) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }

    __n128 result = sub_181C23710(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000LL) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000LL) + 65540;
      goto LABEL_29;
    }

void *sub_181C8B8B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 16) + 16LL);
  if (!v2) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58AC90);
  unint64_t v3 = (void *)swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v2;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 56);
  uint64_t v5 = sub_181C8BC14((uint64_t)&v7, (uint64_t)(v3 + 4), v2, a1);
  swift_retain();
  swift_release();
  if (v5 != v2)
  {
    __break(1u);
    return (void *)MEMORY[0x18961AFE8];
  }

  return v3;
}

uint64_t sub_181C8B998(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_181C8A5F0(a1);
  uint64_t v6 = v5;
  char v8 = v7 & 1;
  uint64_t v9 = sub_181C8AE44(v4, v5, v7 & 1, 1LL << *(_BYTE *)(a1 + 32), *(_DWORD *)(a1 + 36), 0, a1);
  sub_181C93190(v4, v6, v8);
  if (!v9) {
    return MEMORY[0x18961AFE8];
  }
  if (v9 <= 0)
  {
    unint64_t v10 = (void *)MEMORY[0x18961AFE8];
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E768);
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    void v10[2] = v9;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }

  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v12 = sub_181C8BD30((uint64_t)v17, (uint64_t)(v10 + 4), v9, a1, a2);
  uint64_t v13 = v17[2];
  uint64_t v14 = v17[3];
  char v15 = v18;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = sub_181C93190(v13, v14, v15);
  if (v12 == v9) {
    return (uint64_t)v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_181C8BAF4(char *a1, int64_t a2)
{
  if (!a2) {
    return MEMORY[0x18961AFE8];
  }
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58AC08);
    uint64_t v4 = (char *)swift_allocObject();
    size_t v5 = _swift_stdlib_malloc_size(v4);
    *((void *)v4 + 2) = a2;
    *((void *)v4 + 3) = 2 * v5 - 64;
    uint64_t v6 = v4 + 32;
    if (&v4[a2 + 32] <= a1 || v6 >= &a1[a2])
    {
      memcpy(v6, a1, a2);
      return (uint64_t)v4;
    }
  }

  uint64_t result = sub_18264F360();
  __break(1u);
  return result;
}

uint64_t sub_181C8BC14(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t v5 = (void *)result;
  if (!a2)
  {
LABEL_11:
    uint64_t v6 = 0LL;
    goto LABEL_12;
  }

  uint64_t v6 = a3;
  if (!a3)
  {
LABEL_12:
    *size_t v5 = a4;
    v5[1] = v6;
    return v6;
  }

  if ((a3 & 0x8000000000000000LL) == 0)
  {
    uint64_t v7 = a2;
    uint64_t result = swift_beginAccess();
    uint64_t v8 = *(void *)(a4 + 16);
    unint64_t v9 = *(void *)(v8 + 16);
    if (v9)
    {
      unint64_t v10 = (void *)(v8 + 80);
      uint64_t v11 = 1LL;
      while (v11 - 1 < v9)
      {
        uint64_t v12 = *(v10 - 1);
        uint64_t v13 = *v10;
        char v14 = *((_BYTE *)v10 - 16);
        uint64_t v15 = *(v10 - 4);
        uint64_t v16 = *(v10 - 3);
        uint64_t v17 = *(v10 - 5);
        *(void *)uint64_t v7 = *(v10 - 6);
        *(void *)(v7 + 8) = v17;
        *(void *)(v7 + 16) = v15;
        *(void *)(v7 + 24) = v16;
        *(_BYTE *)(v7 + 32) = v14;
        *(void *)(v7 + 40) = v12;
        *(void *)(v7 + 48) = v13;
        if (v6 == v11)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_12;
        }

        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t result = swift_bridgeObjectRetain();
        uint64_t v18 = v11 + 1;
        unint64_t v9 = *(void *)(v8 + 16);
        v10 += 8;
        v7 += 56LL;
        if (v11++ == v9)
        {
          uint64_t v6 = v18 - 1;
          goto LABEL_12;
        }
      }

      __break(1u);
      goto LABEL_15;
    }

    goto LABEL_11;
  }

uint64_t sub_181C8BD30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_181C8A5F0(a4);
  unint64_t v12 = result;
  char v13 = v11 & 1;
  if (!a2)
  {
    uint64_t result = 0LL;
    goto LABEL_32;
  }

  if (!a3)
  {
    uint64_t result = 0LL;
LABEL_32:
    uint64_t v14 = a4;
LABEL_36:
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = a5;
    *(void *)(a1 + 16) = v12;
    *(void *)(a1 + 24) = v10;
    *(_BYTE *)(a1 + 32) = v13;
    return result;
  }

  if (a3 < 0) {
    goto LABEL_43;
  }
  uint64_t v34 = a1;
  uint64_t v35 = a5;
  if ((v11 & 1) == 0)
  {
    uint64_t result = 0LL;
    uint64_t v14 = a4;
    uint64_t v15 = a4 + 64;
    uint64_t v16 = 1LL;
    uint64_t v37 = a3;
    while (1)
    {
      uint64_t v17 = *(unsigned int *)(v14 + 36);
      if ((_DWORD)v17 != (_DWORD)v10)
      {
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        break;
      }

      uint64_t v18 = v16;
      uint64_t v19 = 1LL << *(_BYTE *)(v14 + 32);
      if (v12 == v19)
      {
        char v13 = 0;
LABEL_35:
        a1 = v34;
        a5 = v35;
        goto LABEL_36;
      }

      uint64_t v41 = a2;
      unint64_t v20 = v12 >> 6;
      if ((*(void *)(v15 + 8 * (v12 >> 6)) & (1LL << v12)) == 0) {
        goto LABEL_39;
      }
      uint64_t v40 = v18;
      uint64_t v36 = v10;
      uint64_t v21 = v15;
      uint64_t v22 = (uint64_t *)(*(void *)(v14 + 48) + 16 * v12);
      uint64_t v23 = v22[1];
      uint64_t v39 = *v22;
      uint64_t v24 = *(void *)(v14 + 56) + 24 * v12;
      uint64_t v25 = *(void *)v24;
      unint64_t v26 = *(void *)(v24 + 8);
      char v27 = *(_BYTE *)(v24 + 16);
      swift_bridgeObjectRetain();
      sub_181BDA12C(v25, v26, v27);
      swift_bridgeObjectRetain();
      sub_181BDA12C(v25, v26, v27);
      swift_bridgeObjectRelease();
      uint64_t result = sub_181BDA14C(v25, v26, v27);
      uint64_t v14 = a4;
      uint64_t v28 = 1LL << *(_BYTE *)(a4 + 32);
      uint64_t v29 = *(void *)(v21 + 8 * v20);
      if ((v29 & (1LL << v12)) == 0) {
        goto LABEL_41;
      }
      uint64_t v10 = v17;
      if (*(_DWORD *)(a4 + 36) != (_DWORD)v17) {
        goto LABEL_42;
      }
      uint64_t v15 = v21;
      unint64_t v30 = v29 & (-2LL << (v12 & 0x3F));
      if (v30)
      {
        unint64_t v12 = __clz(__rbit64(v30)) | v12 & 0xFFFFFFFFFFFFFFC0LL;
        goto LABEL_28;
      }

      unint64_t v31 = v20 + 1;
      unint64_t v32 = (unint64_t)(v28 + 63) >> 6;
      if (v20 + 1 < v32)
      {
        unint64_t v33 = *(void *)(v21 + 8 * v31);
        if (v33) {
          goto LABEL_18;
        }
        unint64_t v31 = v20 + 2;
        if (v20 + 2 < v32)
        {
          unint64_t v33 = *(void *)(v21 + 8 * v31);
          if (v33) {
            goto LABEL_18;
          }
          unint64_t v31 = v20 + 3;
          if (v20 + 3 < v32)
          {
            unint64_t v33 = *(void *)(v21 + 8 * v31);
            if (v33)
            {
LABEL_18:
              unint64_t v12 = __clz(__rbit64(v33)) + (v31 << 6);
              goto LABEL_28;
            }

            while (v32 - 4 != v20)
            {
              unint64_t v33 = *(void *)(a4 + 96 + 8 * v20++);
              if (v33)
              {
                sub_181C93190(v12, v36, 0);
                uint64_t v10 = v17;
                uint64_t v15 = v21;
                uint64_t v14 = a4;
                unint64_t v31 = v20 + 3;
                goto LABEL_18;
              }
            }

            sub_181C93190(v12, v36, 0);
            uint64_t v10 = v17;
            uint64_t v15 = v21;
            uint64_t v14 = a4;
          }
        }
      }

      unint64_t v12 = v28;
LABEL_28:
      uint64_t result = v40;
      *(void *)uint64_t v41 = v39;
      *(void *)(v41 + 8) = v23;
      *(void *)(v41 + 16) = v25;
      *(void *)(v41 + 24) = v26;
      *(_BYTE *)(v41 + 32) = v27;
      if (v40 == v37)
      {
        char v13 = 0;
        uint64_t result = v37;
        goto LABEL_35;
      }

      a2 = v41 + 40;
      uint64_t v16 = v40 + 1;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_181C8C01C(uint64_t a1, uint64_t a2)
{
  return sub_181C928F4(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_181C8C224);
}

unint64_t sub_181C8C028(uint64_t a1)
{
  uint64_t v2 = sub_18264E9DC();
  return sub_181C8C304(a1, v2);
}

unint64_t sub_181C8C078(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18264F684();
  return sub_181C8C42C(a1, a2, v4);
}

unint64_t sub_181C8C0F8(void *a1)
{
  uint64_t v2 = sub_18264F684();
  return sub_181C8C5BC(a1, v2);
}

unint64_t sub_181C8C190(uint64_t a1)
{
  uint64_t v2 = sub_18264F63C();
  return sub_181C8C6FC(a1, v2);
}

unint64_t sub_181C8C1C0(uint64_t a1)
{
  uint64_t v2 = sub_18264E9DC();
  return sub_181C8C798(a1, v2);
}

unint64_t sub_181C8C224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_18264F4EC() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        char v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }

      while (!v14 && (sub_18264F4EC() & 1) == 0);
    }
  }

  return v6;
}

unint64_t sub_181C8C304(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v16[1] = a1;
  uint64_t v5 = sub_18264F30C();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v10 = a2 & ~v9;
  if (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    char v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(void *)(v3 + 48) + v12 * v10, v5);
      char v14 = sub_18264EA24();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
    }

    while (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
  }

  return v10;
}

unint64_t sub_181C8C42C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v7 = sub_18264EAB4();
    uint64_t v9 = v8;
    if (v7 == sub_18264EAB4() && v9 == v10)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v6;
    }

    char v12 = sub_18264F4EC();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
    {
      uint64_t v13 = ~v5;
      unint64_t v6 = (v6 + 1) & v13;
      if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
      {
        while (1)
        {
          uint64_t v14 = sub_18264EAB4();
          uint64_t v16 = v15;
          if (v14 == sub_18264EAB4() && v16 == v17) {
            break;
          }
          char v19 = sub_18264F4EC();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v19 & 1) == 0)
          {
            unint64_t v6 = (v6 + 1) & v13;
            if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0) {
              continue;
            }
          }

          return v6;
        }

        goto LABEL_16;
      }
    }
  }

  return v6;
}

unint64_t sub_181C8C5BC(void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for NWActorID();
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (uint64_t *)((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v10 = a2 & ~v9;
  if (((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    while (1)
    {
      sub_181BC9248( *(void *)(v2 + 48) + v12 * v10,  (uint64_t)v8,  (uint64_t (*)(void))type metadata accessor for NWActorID);
      BOOL v13 = *v8 == *a1 && v8[1] == a1[1];
      if ((v13 || (sub_18264F4EC() & 1) != 0) && (sub_18264E658() & 1) != 0) {
        break;
      }
      sub_181C93448((uint64_t)v8);
      unint64_t v10 = (v10 + 1) & v11;
      if (((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
        return v10;
      }
    }

    sub_181C93448((uint64_t)v8);
  }

  return v10;
}

unint64_t sub_181C8C6FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }

  return result;
}

unint64_t sub_181C8C798(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v16[1] = a1;
  uint64_t v5 = sub_18264E688();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v10 = a2 & ~v9;
  if (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    BOOL v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(void *)(v3 + 48) + v12 * v10, v5);
      sub_181C93408(&qword_18C58E798, MEMORY[0x189606F58]);
      char v14 = sub_18264EA24();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
    }

    while (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
  }

  return v10;
}

uint64_t sub_181C8C8D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_181C8C078(a1, a2);
  LOBYTE(a2) = v9;
  uint64_t result = swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v4;
    uint64_t v15 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_181C90F98();
      uint64_t v12 = v15;
    }

    swift_bridgeObjectRelease();
    uint64_t v13 = *(void *)(v12 + 56) + 24 * v8;
    char v14 = *(_BYTE *)(v13 + 16);
    *(_OWORD *)a3 = *(_OWORD *)v13;
    *(_BYTE *)(a3 + 16) = v14;
    sub_181C4BD40(v8, v12);
    *uint64_t v4 = v12;
    return swift_bridgeObjectRelease();
  }

  else
  {
    *(void *)a3 = 0LL;
    *(void *)(a3 + 8) = 0LL;
    *(_BYTE *)(a3 + 16) = -1;
  }

  return result;
}

double sub_181C8C9C0@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_181C8C028(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v13 = *v3;
    uint64_t *v3 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_181C91204();
      uint64_t v9 = v13;
    }

    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = sub_18264F30C();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))( v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * v6,  v11);
    sub_181C275FC((_OWORD *)(*(void *)(v9 + 56) + 32 * v6), a2);
    sub_181C4BF58(v6, v9);
    uint64_t *v3 = v9;
    swift_bridgeObjectRelease();
  }

  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }

  return result;
}

uint64_t sub_181C8CABC(void *a1)
{
  return sub_181C8CAE4(a1, (void (*)(unint64_t, uint64_t))sub_181C4C1DC, &qword_18C58E7E0);
}

uint64_t sub_181C8CAD0(void *a1)
{
  return sub_181C8CAE4(a1, (void (*)(unint64_t, uint64_t))sub_181C4C1DC, &qword_18C58E7E8);
}

uint64_t sub_181C8CAE4(void *a1, void (*a2)(unint64_t, uint64_t), uint64_t *a3)
{
  unint64_t v6 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_181C8C0F8(a1);
  LOBYTE(a1) = v9;
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v6;
  uint64_t v16 = *v6;
  *unint64_t v6 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_181C9144C(a3);
    uint64_t v11 = v16;
  }

  uint64_t v12 = *(void *)(v11 + 48);
  uint64_t v13 = type metadata accessor for NWActorID();
  sub_181C93448(v12 + *(void *)(*(void *)(v13 - 8) + 72LL) * v8);
  uint64_t v14 = *(void *)(*(void *)(v11 + 56) + 8 * v8);
  a2(v8, v11);
  *unint64_t v6 = v11;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_181C8CBC8(void *a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_181C8C0F8(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_181C91684();
    uint64_t v7 = v12;
  }

  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for NWActorID();
  sub_181C93448(v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * v4);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 16 * v4);
  sub_181C4C4AC(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_181C8CCAC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_181C8C0F8(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v17 = *v3;
    uint64_t *v3 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_181C918BC();
      uint64_t v9 = v17;
    }

    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for NWActorID();
    sub_181C93448(v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * v6);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = type metadata accessor for NWActorDiscoveryMechanism(0LL);
    uint64_t v14 = *(void *)(v13 - 8);
    sub_181BC928C(v12 + *(void *)(v14 + 72) * v6, a2, type metadata accessor for NWActorDiscoveryMechanism);
    sub_181C4C778(v6, v9);
    uint64_t *v3 = v9;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(a2, 0LL, 1LL, v13);
  }

  else
  {
    uint64_t v16 = type metadata accessor for NWActorDiscoveryMechanism(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))( a2,  1LL,  1LL,  v16);
  }

uint64_t sub_181C8CDE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_181C928F4(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_181C8C224);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v17 = *v4;
    *unint64_t v4 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_181C91B54();
      uint64_t v11 = v17;
    }

    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v11 + 56);
    uint64_t v13 = type metadata accessor for NWActorSystem.ServerRole();
    uint64_t v14 = *(void *)(v13 - 8);
    sub_181BC928C( v12 + *(void *)(v14 + 72) * v8,  a3,  (uint64_t (*)(void))type metadata accessor for NWActorSystem.ServerRole);
    sub_181C4CA84(v8, v11);
    *unint64_t v4 = v11;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(a3, 0LL, 1LL, v13);
  }

  else
  {
    uint64_t v16 = type metadata accessor for NWActorSystem.ServerRole();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))( a3,  1LL,  1LL,  v16);
  }

uint64_t sub_181C8CF18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_181C8C1C0(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v17 = *v3;
    uint64_t *v3 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_181C921A4();
      uint64_t v9 = v17;
    }

    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = sub_18264E688();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))( v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * v6,  v11);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E780);
    uint64_t v14 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 32))(a2, v12 + *(void *)(v14 + 72) * v6, v13);
    sub_181C4CE4C(v6, v9);
    uint64_t *v3 = v9;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(a2, 0LL, 1LL, v13);
  }

  else
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E780);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))( a2,  1LL,  1LL,  v16);
  }

uint64_t sub_181C8D05C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58AC80);
  char v40 = a2;
  uint64_t v6 = sub_18264F348();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v39 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v37 = v2;
  int64_t v38 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }

    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }

    if (v22 >= v38) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v39 + 8 * v22);
    ++v13;
    if (!v24)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v38) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v39 + 8 * v13);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v38)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v37;
          if ((v40 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }

        unint64_t v24 = *(void *)(v39 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_42;
            }
            if (v13 >= v38) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v39 + 8 * v13);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }

        int64_t v13 = v25;
      }
    }

uint64_t sub_181C8D378(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E808);
  char v40 = a2;
  uint64_t v6 = sub_18264F348();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1LL << *(_BYTE *)(v5 + 32);
    int64_t v38 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1LL << v8);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v37 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0LL;
    for (i = v5; ; uint64_t v5 = i)
    {
      if (v10)
      {
        unint64_t v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v21 = v20 | (v13 << 6);
      }

      else
      {
        int64_t v22 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }

        if (v22 >= v37) {
          goto LABEL_33;
        }
        unint64_t v23 = v38[v22];
        ++v13;
        if (!v23)
        {
          int64_t v13 = v22 + 1;
          if (v22 + 1 >= v37) {
            goto LABEL_33;
          }
          unint64_t v23 = v38[v13];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if ((v40 & 1) != 0)
              {
                uint64_t v36 = 1LL << *(_BYTE *)(v5 + 32);
                if (v36 >= 64) {
                  bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  void *v38 = -1LL << v36;
                }
                *(void *)(v5 + 16) = 0LL;
              }

              break;
            }

            unint64_t v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v13 = v24 + 1;
                if (__OFADD__(v24, 1LL)) {
                  goto LABEL_40;
                }
                if (v13 >= v37) {
                  goto LABEL_33;
                }
                unint64_t v23 = v38[v13];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }

            int64_t v13 = v24;
          }
        }

uint64_t sub_181C8D6BC(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_18264F30C();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58E7B0);
  int v39 = a2;
  uint64_t v10 = sub_18264F348();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  uint64_t v12 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  int64_t v38 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1LL << v12);
  }
  else {
    uint64_t v14 = -1LL;
  }
  unint64_t v15 = v14 & v13;
  uint64_t v36 = v2;
  int64_t v37 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0LL;
  while (1)
  {
    if (v15)
    {
      unint64_t v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }

    int64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }

    if (v22 >= v37) {
      break;
    }
    unint64_t v23 = v38;
    unint64_t v24 = v38[v22];
    ++v18;
    if (!v24)
    {
      int64_t v18 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_34;
      }
      unint64_t v24 = v38[v18];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }

        unint64_t v24 = v38[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v18 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_43;
            }
            if (v18 >= v37) {
              goto LABEL_34;
            }
            unint64_t v24 = v38[v18];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }

        int64_t v18 = v25;
      }
    }

uint64_t sub_181C8DA40(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v7 = type metadata accessor for NWActorID();
  uint64_t v41 = *(void *)(v7 - 8);
  uint64_t v42 = v7;
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  int v43 = a2;
  uint64_t v11 = sub_18264F348();
  uint64_t v12 = v11;
  if (*(void *)(v10 + 16))
  {
    int64_t v38 = v3;
    uint64_t v13 = 1LL << *(_BYTE *)(v10 + 32);
    uint64_t v14 = *(void *)(v10 + 64);
    char v40 = (void *)(v10 + 64);
    if (v13 < 64) {
      uint64_t v15 = ~(-1LL << v13);
    }
    else {
      uint64_t v15 = -1LL;
    }
    unint64_t v16 = v15 & v14;
    int64_t v39 = (unint64_t)(v13 + 63) >> 6;
    uint64_t v17 = v11 + 64;
    uint64_t result = swift_retain();
    int64_t v19 = 0LL;
    while (1)
    {
      if (v16)
      {
        unint64_t v21 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        unint64_t v22 = v21 | (v19 << 6);
      }

      else
      {
        int64_t v23 = v19 + 1;
        if (__OFADD__(v19, 1LL))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }

        if (v23 >= v39) {
          goto LABEL_34;
        }
        unint64_t v24 = v40[v23];
        ++v19;
        if (!v24)
        {
          int64_t v19 = v23 + 1;
          if (v23 + 1 >= v39) {
            goto LABEL_34;
          }
          unint64_t v24 = v40[v19];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v39)
            {
LABEL_34:
              swift_release();
              uint64_t v5 = v38;
              if ((v43 & 1) != 0)
              {
                uint64_t v36 = 1LL << *(_BYTE *)(v10 + 32);
                if (v36 >= 64) {
                  bzero(v40, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *char v40 = -1LL << v36;
                }
                *(void *)(v10 + 16) = 0LL;
              }

              break;
            }

            unint64_t v24 = v40[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v19 = v25 + 1;
                if (__OFADD__(v25, 1LL)) {
                  goto LABEL_41;
                }
                if (v19 >= v39) {
                  goto LABEL_34;
                }
                unint64_t v24 = v40[v19];
                ++v25;
                if (v24) {
                  goto LABEL_21;
                }
              }
            }

            int64_t v19 = v25;
          }
        }

uint64_t sub_181C8DDF4(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for NWActorID();
  uint64_t v38 = *(void *)(v5 - 8);
  uint64_t v39 = v5;
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E7C8);
  int v40 = a2;
  uint64_t v9 = sub_18264F348();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1LL << *(_BYTE *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v37 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1LL << v11);
  }
  else {
    uint64_t v13 = -1LL;
  }
  unint64_t v14 = v13 & v12;
  uint64_t v35 = v2;
  int64_t v36 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0LL;
  while (1)
  {
    if (v14)
    {
      unint64_t v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_22;
    }

    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1LL))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }

    if (v21 >= v36) {
      break;
    }
    unint64_t v22 = v37;
    unint64_t v23 = v37[v21];
    ++v17;
    if (!v23)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_34;
      }
      unint64_t v23 = v37[v17];
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v35;
          if ((v40 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }

        unint64_t v23 = v37[v24];
        if (!v23)
        {
          while (1)
          {
            int64_t v17 = v24 + 1;
            if (__OFADD__(v24, 1LL)) {
              goto LABEL_43;
            }
            if (v17 >= v36) {
              goto LABEL_34;
            }
            unint64_t v23 = v37[v17];
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }

        int64_t v17 = v24;
      }
    }

uint64_t sub_181C8E1B4(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for NWActorDiscoveryMechanism(0LL);
  uint64_t v44 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for NWActorID();
  uint64_t v45 = *(void *)(v8 - 8);
  uint64_t v46 = v8;
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E7D0);
  int v47 = a2;
  uint64_t v12 = sub_18264F348();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1LL << *(_BYTE *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v42 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1LL << v14);
  }
  else {
    uint64_t v16 = -1LL;
  }
  unint64_t v17 = v16 & v15;
  int v40 = v2;
  int64_t v41 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v18 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0LL;
  int v43 = v7;
  while (1)
  {
    if (v17)
    {
      unint64_t v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }

    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1LL))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }

    if (v24 >= v41) {
      break;
    }
    uint64_t v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }

        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1LL)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }

        int64_t v20 = v27;
      }
    }

uint64_t sub_181C8E5E8(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for NWActorSystem.ServerRole();
  uint64_t v42 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E7F8);
  int v43 = a2;
  uint64_t v9 = sub_18264F348();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1LL << *(_BYTE *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  int64_t v41 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1LL << v11);
  }
  else {
    uint64_t v13 = -1LL;
  }
  unint64_t v14 = v13 & v12;
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0LL;
  while (1)
  {
    if (v14)
    {
      unint64_t v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }

    int64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1LL))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }

    if (v22 >= v40) {
      break;
    }
    unint64_t v23 = v41;
    unint64_t v24 = v41[v22];
    ++v17;
    if (!v24)
    {
      int64_t v17 = v22 + 1;
      if (v22 + 1 >= v40) {
        goto LABEL_34;
      }
      unint64_t v24 = v41[v17];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v39;
          if ((v43 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }

        unint64_t v24 = v41[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v17 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_43;
            }
            if (v17 >= v40) {
              goto LABEL_34;
            }
            unint64_t v24 = v41[v17];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }

        int64_t v17 = v25;
      }
    }

uint64_t sub_181C8E968(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C45E590);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E7C0);
  uint64_t result = sub_18264F348();
  uint64_t v11 = result;
  if (*(void *)(v9 + 16))
  {
    BOOL v36 = v3;
    int64_t v12 = 0LL;
    uint64_t v13 = *(void *)(v9 + 64);
    uint64_t v39 = (void *)(v9 + 64);
    uint64_t v14 = 1LL << *(_BYTE *)(v9 + 32);
    if (v14 < 64) {
      uint64_t v15 = ~(-1LL << v14);
    }
    else {
      uint64_t v15 = -1LL;
    }
    unint64_t v16 = v15 & v13;
    int64_t v38 = (unint64_t)(v14 + 63) >> 6;
    uint64_t v17 = result + 64;
    int v37 = a2;
    uint64_t v18 = 16LL;
    if ((a2 & 1) != 0) {
      uint64_t v18 = 32LL;
    }
    uint64_t v40 = v18;
    while (1)
    {
      if (v16)
      {
        unint64_t v20 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        unint64_t v21 = v20 | (v12 << 6);
      }

      else
      {
        int64_t v22 = v12 + 1;
        if (__OFADD__(v12, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        uint64_t result = (uint64_t)v39;
        if (v22 >= v38) {
          goto LABEL_33;
        }
        unint64_t v23 = v39[v22];
        ++v12;
        if (!v23)
        {
          int64_t v12 = v22 + 1;
          if (v22 + 1 >= v38) {
            goto LABEL_33;
          }
          unint64_t v23 = v39[v12];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v38)
            {
LABEL_33:
              if ((v37 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v36;
                goto LABEL_40;
              }

              uint64_t v34 = 1LL << *(_BYTE *)(v9 + 32);
              if (v34 >= 64) {
                bzero(v39, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *uint64_t v39 = -1LL << v34;
              }
              uint64_t v3 = v36;
              *(void *)(v9 + 16) = 0LL;
              break;
            }

            unint64_t v23 = v39[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v12 = v24 + 1;
                if (__OFADD__(v24, 1LL)) {
                  goto LABEL_42;
                }
                if (v12 >= v38) {
                  goto LABEL_33;
                }
                unint64_t v23 = v39[v12];
                ++v24;
                if (v23) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v12 = v24;
          }
        }

uint64_t sub_181C8EC9C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E760);
  uint64_t v6 = sub_18264F348();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1LL << v8);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0LL;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }

      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }

        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if ((a2 & 1) != 0)
              {
                uint64_t v32 = 1LL << *(_BYTE *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v34 = -1LL << v32;
                }
                *(void *)(v5 + 16) = 0LL;
              }

              break;
            }

            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1LL)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }

            int64_t v13 = v20;
          }
        }

uint64_t sub_181C8EF98(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E780);
  uint64_t v51 = *(void *)(v5 - 8);
  uint64_t v52 = v5;
  MEMORY[0x1895F8858](v5);
  uint64_t v50 = &v42[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = sub_18264E688();
  uint64_t v49 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = &v42[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58E788);
  uint64_t v11 = sub_18264F348();
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  uint64_t v46 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1LL << v13);
  }
  else {
    uint64_t v15 = -1LL;
  }
  unint64_t v16 = v15 & v14;
  uint64_t v44 = v2;
  int64_t v45 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v17 = v11 + 64;
  uint64_t v48 = v10;
  uint64_t result = swift_retain();
  int64_t v19 = 0LL;
  int v43 = a2;
  uint64_t v20 = 16LL;
  if ((a2 & 1) != 0) {
    uint64_t v20 = 32LL;
  }
  uint64_t v47 = v20;
  uint64_t v21 = v20;
  while (1)
  {
    if (v16)
    {
      unint64_t v23 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v24 = v23 | (v19 << 6);
      goto LABEL_24;
    }

    int64_t v25 = v19 + 1;
    if (__OFADD__(v19, 1LL))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }

    if (v25 >= v45) {
      break;
    }
    unint64_t v26 = v46;
    unint64_t v27 = v46[v25];
    ++v19;
    if (!v27)
    {
      int64_t v19 = v25 + 1;
      if (v25 + 1 >= v45) {
        goto LABEL_34;
      }
      unint64_t v27 = v46[v19];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v45)
        {
LABEL_34:
          uint64_t v40 = v48;
          swift_release();
          uint64_t v3 = v44;
          if ((v43 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }

        unint64_t v27 = v46[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v19 = v28 + 1;
            if (__OFADD__(v28, 1LL)) {
              goto LABEL_43;
            }
            if (v19 >= v45) {
              goto LABEL_34;
            }
            unint64_t v27 = v46[v19];
            ++v28;
            if (v27) {
              goto LABEL_23;
            }
          }
        }

        int64_t v19 = v28;
      }
    }

uint64_t sub_181C8F38C(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_18264E688();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E7A8);
  int v43 = a2;
  uint64_t v10 = sub_18264F348();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1LL << *(_BYTE *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  uint64_t v41 = (void *)(v11 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1LL << v13);
  }
  else {
    uint64_t v15 = -1LL;
  }
  unint64_t v16 = v15 & v14;
  uint64_t v39 = v3;
  int64_t v40 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v17 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v19 = 0LL;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v22 = v21 | (v19 << 6);
      goto LABEL_22;
    }

    int64_t v23 = v19 + 1;
    if (__OFADD__(v19, 1LL))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }

    if (v23 >= v40) {
      break;
    }
    unint64_t v24 = v41;
    unint64_t v25 = v41[v23];
    ++v19;
    if (!v25)
    {
      int64_t v19 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_34;
      }
      unint64_t v25 = v41[v19];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v39;
          if ((v43 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }

        unint64_t v25 = v41[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v19 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_43;
            }
            if (v19 >= v40) {
              goto LABEL_34;
            }
            unint64_t v25 = v41[v19];
            ++v26;
            if (v25) {
              goto LABEL_21;
            }
          }
        }

        int64_t v19 = v26;
      }
    }

uint64_t sub_181C8F71C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E7A0);
  char v42 = a2;
  uint64_t v6 = sub_18264F348();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }

    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }

    if (v23 >= v40) {
      break;
    }
    unint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }

        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }

        int64_t v13 = v26;
      }
    }

uint64_t sub_181C8FA40(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = v6;
  uint64_t v14 = *v6;
  unint64_t v16 = sub_181C8C078(a4, a5);
  uint64_t v17 = *(void *)(v14 + 16);
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v20 = v15;
  uint64_t v21 = *(void *)(v14 + 24);
  if (v21 >= v19 && (a6 & 1) != 0) {
    goto LABEL_7;
  }
  if (v21 >= v19 && (a6 & 1) == 0)
  {
    sub_181C90F98();
LABEL_7:
    unint64_t v22 = (void *)*v7;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      uint64_t v23 = v22[7] + 24 * v16;
      uint64_t result = sub_181BDA14C(*(void *)v23, *(void *)(v23 + 8), *(_BYTE *)(v23 + 16));
      *(void *)uint64_t v23 = a1;
      *(void *)(v23 + 8) = a2;
      *(_BYTE *)(v23 + 16) = a3;
      return result;
    }

_OWORD *sub_181C8FBC8(_OWORD *a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = sub_18264F30C();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_181C8C028(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }

  else
  {
    char v18 = v13;
    uint64_t v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      char v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        uint64_t v21 = (_OWORD *)(v20[7] + 32 * v14);
        __swift_destroy_boxed_opaque_existential_2((uint64_t)v21);
        return sub_181C275FC(a1, v21);
      }

      goto LABEL_11;
    }

    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_181C91204();
      goto LABEL_7;
    }

    sub_181C8D6BC(v17, a3 & 1);
    unint64_t v23 = sub_181C8C028(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      unint64_t v14 = v23;
      char v20 = *v4;
      if ((v18 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_181C90880(v14, (uint64_t)v11, a1, v20);
    }
  }

  uint64_t result = (_OWORD *)sub_18264F5C4();
  __break(1u);
  return result;
}

uint64_t sub_181C8FD44(uint64_t a1, void *a2, char a3)
{
  return sub_181C8FD5C(a1, a2, a3, &qword_18C58E7E0);
}

uint64_t sub_181C8FD50(uint64_t a1, void *a2, char a3)
{
  return sub_181C8FD5C(a1, a2, a3, &qword_18C58E7E8);
}

uint64_t sub_181C8FD5C(uint64_t a1, void *a2, char a3, uint64_t *a4)
{
  uint64_t v6 = (void **)v4;
  uint64_t v10 = type metadata accessor for NWActorID();
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v13 = (void *)*v4;
  unint64_t v15 = sub_181C8C0F8(a2);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v6;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      uint64_t v22 = v21[7];
      uint64_t result = swift_release();
      *(void *)(v22 + 8 * v15) = a1;
      return result;
    }

    goto LABEL_11;
  }

  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_181C9144C(a4);
    goto LABEL_7;
  }

  sub_181C8DA40(v18, a3 & 1, a4);
  unint64_t v24 = sub_181C8C0F8(a2);
  if ((v19 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = sub_18264F5C4();
    __break(1u);
    return result;
  }

  unint64_t v15 = v24;
  uint64_t v21 = *v6;
  if ((v19 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  sub_181BC9248((uint64_t)a2, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for NWActorID);
  return sub_181C90920(v15, (uint64_t)v12, a1, v21);
}

uint64_t sub_181C8FEC4(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = type metadata accessor for NWActorID();
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v13 = (void *)*v4;
  unint64_t v15 = sub_181C8C0F8(a3);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v5;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      uint64_t v22 = (uint64_t *)(v21[7] + 16 * v15);
      uint64_t result = swift_release();
      *uint64_t v22 = a1;
      v22[1] = a2;
      return result;
    }

    goto LABEL_11;
  }

  if (v20 >= v18 && (a4 & 1) == 0)
  {
    sub_181C91684();
    goto LABEL_7;
  }

  sub_181C8DDF4(v18, a4 & 1);
  unint64_t v24 = sub_181C8C0F8(a3);
  if ((v19 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = sub_18264F5C4();
    __break(1u);
    return result;
  }

  unint64_t v15 = v24;
  uint64_t v21 = *v5;
  if ((v19 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  sub_181BC9248((uint64_t)a3, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for NWActorID);
  return sub_181C909B8(v15, (uint64_t)v12, a1, a2, v21);
}

uint64_t sub_181C90028(uint64_t a1, void *a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for NWActorID();
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = (void *)*v3;
  unint64_t v13 = sub_181C8C0F8(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    char v19 = *v4;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      uint64_t v20 = v19[7];
      uint64_t v21 = type metadata accessor for NWActorDiscoveryMechanism(0LL);
      return sub_181C93484( a1,  v20 + *(void *)(*(void *)(v21 - 8) + 72LL) * v13,  type metadata accessor for NWActorDiscoveryMechanism);
    }

    goto LABEL_11;
  }

  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_181C918BC();
    goto LABEL_7;
  }

  sub_181C8E1B4(v16, a3 & 1);
  unint64_t v23 = sub_181C8C0F8(a2);
  if ((v17 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = sub_18264F5C4();
    __break(1u);
    return result;
  }

  unint64_t v13 = v23;
  char v19 = *v4;
  if ((v17 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  sub_181BC9248((uint64_t)a2, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for NWActorID);
  return sub_181C90A58(v13, (uint64_t)v10, a1, v19);
}

uint64_t sub_181C90198(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_181C928F4(a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_181C8C224);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = v18[7];
        uint64_t v20 = type metadata accessor for NWActorSystem.ServerRole();
        return sub_181C93484( a1,  v19 + *(void *)(*(void *)(v20 - 8) + 72LL) * v12,  (uint64_t (*)(void))type metadata accessor for NWActorSystem.ServerRole);
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_181C91B54();
      goto LABEL_7;
    }

    sub_181C8E5E8(v15, a4 & 1);
    uint64_t v22 = sub_181C928F4(a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_181C8C224);
    if ((v16 & 1) == (v23 & 1))
    {
      unint64_t v12 = v22;
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_181C90B10(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }

  uint64_t result = sub_18264F5C4();
  __break(1u);
  return result;
}

uint64_t sub_181C902E8(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_181C8C190(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }

  else
  {
    char v14 = v9;
    uint64_t v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      char v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        uint64_t v17 = v16[7];
        uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C45E590);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 40LL))( v17 + *(void *)(*(void *)(v18 - 8) + 72LL) * v10,  a1,  v18);
      }

      return sub_181C90BA0(v10, a2, a1, v16);
    }

    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_181C91D98();
      goto LABEL_7;
    }

    sub_181C8E968(v13, a3 & 1);
    unint64_t v20 = sub_181C8C190(a2);
    if ((v14 & 1) == (v21 & 1))
    {
      unint64_t v10 = v20;
      char v16 = *v4;
      if ((v14 & 1) != 0) {
        goto LABEL_8;
      }
      return sub_181C90BA0(v10, a2, a1, v16);
    }
  }

  uint64_t result = sub_18264F5C4();
  __break(1u);
  return result;
}

_OWORD *sub_181C90410(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_181C928F4(a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_181C8C224);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
        __swift_destroy_boxed_opaque_existential_2((uint64_t)v19);
        return sub_181C275FC(a1, v19);
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_181C91FC0();
      goto LABEL_7;
    }

    sub_181C8EC9C(v15, a4 & 1);
    uint64_t v21 = sub_181C928F4(a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_181C8C224);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_181C90C30(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain();
    }
  }

  uint64_t result = (_OWORD *)sub_18264F5C4();
  __break(1u);
  return result;
}

uint64_t sub_181C90550(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = sub_18264E688();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  char v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_181C8C1C0(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }

  else
  {
    char v18 = v13;
    uint64_t v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      unint64_t v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        uint64_t v21 = v20[7];
        uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E780);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 40LL))( v21 + *(void *)(*(void *)(v22 - 8) + 72LL) * v14,  a1,  v22);
      }

      goto LABEL_11;
    }

    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_181C921A4();
      goto LABEL_7;
    }

    sub_181C8EF98(v17, a3 & 1);
    unint64_t v24 = sub_181C8C1C0(a2);
    if ((v18 & 1) == (v25 & 1))
    {
      unint64_t v14 = v24;
      unint64_t v20 = *v4;
      if ((v18 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_181C90C98(v14, (uint64_t)v11, a1, v20);
    }
  }

  uint64_t result = sub_18264F5C4();
  __break(1u);
  return result;
}

uint64_t sub_181C906DC(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = sub_18264E688();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  char v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_181C8C1C0(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_release();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }

    goto LABEL_11;
  }

  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_181C92488();
    goto LABEL_7;
  }

  sub_181C8F38C(v17, a3 & 1);
  unint64_t v23 = sub_181C8C1C0(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = sub_18264F5C4();
    __break(1u);
    return result;
  }

  unint64_t v14 = v23;
  unint64_t v20 = *v4;
  if ((v18 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_181C90D54(v14, (uint64_t)v11, a1, v20);
}

unint64_t sub_181C90838(unint64_t result, uint64_t a2, uint64_t a3, int a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1LL << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(_DWORD *)(a5[7] + 4 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

_OWORD *sub_181C90880(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = sub_18264F30C();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  a2,  v9);
  uint64_t result = sub_181C275FC(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_181C90920(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for NWActorID();
  uint64_t result = sub_181BC928C( a2,  v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  (uint64_t (*)(void))type metadata accessor for NWActorID);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_181C909B8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v10 = a5[6];
  uint64_t v11 = type metadata accessor for NWActorID();
  uint64_t result = sub_181BC928C( a2,  v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * a1,  (uint64_t (*)(void))type metadata accessor for NWActorID);
  uint64_t v13 = (void *)(a5[7] + 16 * a1);
  void *v13 = a3;
  v13[1] = a4;
  uint64_t v14 = a5[2];
  BOOL v15 = __OFADD__(v14, 1LL);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a5[2] = v16;
  }
  return result;
}

uint64_t sub_181C90A58(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for NWActorID();
  sub_181BC928C( a2,  v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  (uint64_t (*)(void))type metadata accessor for NWActorID);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for NWActorDiscoveryMechanism(0LL);
  uint64_t result = sub_181BC928C( a3,  v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * a1,  type metadata accessor for NWActorDiscoveryMechanism);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1LL);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

uint64_t sub_181C90B10(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for NWActorSystem.ServerRole();
  uint64_t result = sub_181BC928C( a4,  v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * a1,  (uint64_t (*)(void))type metadata accessor for NWActorSystem.ServerRole);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1LL);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

uint64_t sub_181C90BA0(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t v7 = a4[7];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C45E590);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32LL))( v7 + *(void *)(*(void *)(v8 - 8) + 72LL) * a1,  a3,  v8);
  uint64_t v10 = a4[2];
  BOOL v11 = __OFADD__(v10, 1LL);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
  return result;
}

_OWORD *sub_181C90C30(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_181C275FC(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t sub_181C90C98(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = sub_18264E688();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  a2,  v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E780);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))( v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * a1,  a3,  v11);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1LL);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

uint64_t sub_181C90D54(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = sub_18264E688();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  a2,  v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

void *sub_181C90DEC()
{
  unint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58AC80);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_18264F33C();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

void *sub_181C90F98()
{
  unint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E808);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_18264F33C();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v27 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v27 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      int64_t v9 = v27 + 1;
      if (v27 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v28 = *(void *)(v6 + 8 * v9);
      if (!v28) {
        break;
      }
    }

uint64_t sub_181C91170(uint64_t result, unint64_t a2, char a3)
{
  if (a3 != -1) {
    return sub_181BDA14C(result, a2, a3);
  }
  return result;
}

unint64_t sub_181C91184()
{
  unint64_t result = qword_18C58E700;
  if (!qword_18C58E700)
  {
    unint64_t result = MEMORY[0x186E12084](MEMORY[0x189606D98], MEMORY[0x189606D70]);
    atomic_store(result, (unint64_t *)&qword_18C58E700);
  }

  return result;
}

uint64_t sub_181C911C8()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_17(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_17()
{
  return swift_release();
}

void *sub_181C91204()
{
  unint64_t v1 = v0;
  uint64_t v2 = sub_18264F30C();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58E7B0);
  uint64_t v6 = *v0;
  uint64_t v7 = sub_18264F33C();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v8;
    return result;
  }

  int64_t v24 = v1;
  unint64_t result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1LL << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  uint64_t v25 = v6 + 64;
  int64_t v12 = 0LL;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v13 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v14 = -1LL;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 64);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v21 >= v16) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v21);
    ++v12;
    if (!v22)
    {
      int64_t v12 = v21 + 1;
      if (v21 + 1 >= v16) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v25 + 8 * v12);
      if (!v22) {
        break;
      }
    }

void *sub_181C91440()
{
  return sub_181C9144C(&qword_18C58E7E0);
}

void *sub_181C9144C(uint64_t *a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for NWActorID();
  uint64_t v29 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v7 = *v1;
  uint64_t v8 = sub_18264F33C();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_28:
    uint64_t *v3 = v9;
    return result;
  }

  int64_t v27 = v3;
  unint64_t result = (void *)(v8 + 64);
  unint64_t v11 = (unint64_t)((1LL << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  uint64_t v28 = v7 + 64;
  int64_t v13 = 0LL;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  uint64_t v14 = 1LL << *(_BYTE *)(v7 + 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & *(void *)(v7 + 64);
  int64_t v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      unint64_t v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }

    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v23 >= v17) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v23);
    ++v13;
    if (!v24)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v17) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v28 + 8 * v13);
      if (!v24) {
        break;
      }
    }

void *sub_181C91684()
{
  unint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for NWActorID();
  uint64_t v26 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E7C8);
  uint64_t v5 = *v0;
  uint64_t v6 = sub_18264F33C();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v7;
    return result;
  }

  int64_t v25 = v1;
  unint64_t result = (void *)(v6 + 64);
  uint64_t v9 = v5 + 64;
  unint64_t v10 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  int64_t v12 = 0LL;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v13 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v14 = -1LL;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & *(void *)(v5 + 64);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v16) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v9 + 8 * v22);
    ++v12;
    if (!v23)
    {
      int64_t v12 = v22 + 1;
      if (v22 + 1 >= v16) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v9 + 8 * v12);
      if (!v23) {
        break;
      }
    }

void *sub_181C918BC()
{
  unint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for NWActorDiscoveryMechanism(0LL);
  uint64_t v29 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for NWActorID();
  uint64_t v28 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E7D0);
  uint64_t v8 = *v0;
  uint64_t v9 = sub_18264F33C();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_25:
    uint64_t *v1 = v10;
    return result;
  }

  int64_t v25 = v1;
  unint64_t result = (void *)(v9 + 64);
  unint64_t v12 = (unint64_t)((1LL << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  int64_t v13 = 0LL;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v14 = 1LL << *(_BYTE *)(v8 + 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & *(void *)(v8 + 64);
  uint64_t v26 = v8 + 64;
  int64_t v27 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      unint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_9;
    }

    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v21 >= v27) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v26 + 8 * v21);
    ++v13;
    if (!v22)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v27) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v26 + 8 * v13);
      if (!v22) {
        break;
      }
    }

void *sub_181C91B54()
{
  unint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for NWActorSystem.ServerRole();
  uint64_t v29 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E7F8);
  uint64_t v5 = *v0;
  uint64_t v6 = sub_18264F33C();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v7;
    return result;
  }

  uint64_t v26 = v1;
  unint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  uint64_t v27 = v5 + 64;
  int64_t v11 = 0LL;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v28 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }

    int64_t v23 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v23 >= v28) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v27 + 8 * v23);
    ++v11;
    if (!v24)
    {
      int64_t v11 = v23 + 1;
      if (v23 + 1 >= v28) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v27 + 8 * v11);
      if (!v24) {
        break;
      }
    }

void *sub_181C91D98()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C45E590);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1895F8858](v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E7C0);
  int64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = sub_18264F33C();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    unint64_t result = (void *)swift_release();
    *int64_t v23 = v7;
    return result;
  }

  unint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  int64_t v10 = 0LL;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v24 = v5 + 64;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }

    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }

void *sub_181C91FC0()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E760);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_18264F33C();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }

  int64_t v25 = v1;
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

char *sub_181C921A4()
{
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E780);
  uint64_t v37 = *(void *)(v41 - 8);
  MEMORY[0x1895F8858](v41);
  int64_t v40 = (char *)&v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v39 = sub_18264E688();
  uint64_t v36 = *(void *)(v39 - 8);
  MEMORY[0x1895F8858](v39);
  uint64_t v38 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58E788);
  uint64_t v33 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = sub_18264F33C();
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v43 = v4;
  if (!v5)
  {
    unint64_t result = (char *)swift_release();
    uint64_t v32 = v43;
    uint64_t v31 = v33;
LABEL_25:
    *uint64_t v31 = v32;
    return result;
  }

  uint64_t v6 = v4;
  unint64_t result = (char *)(v4 + 64);
  uint64_t v8 = (char *)(v3 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  uint64_t v34 = v3 + 64;
  if (v6 != v3 || result >= &v8[8 * v9])
  {
    unint64_t result = (char *)memmove(result, v8, 8 * v9);
    uint64_t v6 = v43;
  }

  int64_t v10 = 0LL;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v42 = v3;
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v35 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v14 = v36;
  uint64_t v15 = v37;
  uint64_t v17 = v38;
  uint64_t v16 = v39;
  uint64_t v18 = v41;
  uint64_t v19 = v43;
  while (1)
  {
    if (v13)
    {
      unint64_t v20 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      int64_t v44 = v10;
      unint64_t v21 = v20 | (v10 << 6);
      uint64_t v22 = v42;
      goto LABEL_9;
    }

    int64_t v27 = v10 + 1;
    uint64_t v22 = v42;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v27 >= v35) {
      goto LABEL_23;
    }
    unint64_t v28 = *(void *)(v34 + 8 * v27);
    int64_t v29 = v10 + 1;
    if (!v28)
    {
      int64_t v29 = v27 + 1;
      if (v27 + 1 >= v35) {
        goto LABEL_23;
      }
      unint64_t v28 = *(void *)(v34 + 8 * v29);
      if (!v28) {
        break;
      }
    }

void *sub_181C92488()
{
  uint64_t v1 = sub_18264E688();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1895F8858](v1);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E7A8);
  unint64_t v24 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = sub_18264F33C();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *unint64_t v24 = v7;
    return result;
  }

  unint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  uint64_t v25 = v5 + 64;
  int64_t v11 = 0LL;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v26) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      int64_t v11 = v20 + 1;
      if (v20 + 1 >= v26) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v25 + 8 * v11);
      if (!v21) {
        break;
      }
    }

void *sub_181C926B8()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E7A0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_18264F33C();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }

  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }

uint64_t sub_181C92870(uint64_t result, int a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0) {
    goto LABEL_10;
  }
  if (result < 0 || -(-1LL << *(_BYTE *)(a4 + 32)) <= result)
  {
    __break(1u);
  }

  else if (((*(void *)(a4 + 64 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    if (*(_DWORD *)(a4 + 36) == a2) {
      return sub_18264F120();
    }
    goto LABEL_9;
  }

  __break(1u);
LABEL_9:
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_181C928F4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = sub_18264F684();
  return a3(a1, a2, v5);
}

uint64_t _s7Network11NWTXTRecordV5EntryO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1;
  unint64_t v2 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  int v6 = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    if (*(_BYTE *)(a1 + 16) == 1)
    {
      sub_181BCD4AC(*(void *)a1, v2);
      if (!v6) {
        goto LABEL_12;
      }
    }

    else
    {
      if (v3 | v2) {
        unint64_t v2 = 0xC000000000000000LL;
      }
      else {
        unint64_t v2 = 0xF000000000000000LL;
      }
      uint64_t v3 = 0LL;
      if (!*(_BYTE *)(a2 + 16)) {
        goto LABEL_12;
      }
    }
  }

  else
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_181BDAEEC(v3, v2);
    unint64_t v2 = v7;
    if (!v6)
    {
LABEL_12:
      swift_bridgeObjectRetain();
      uint64_t v5 = sub_181BDAEEC(v5, v4);
      unint64_t v4 = v8;
      goto LABEL_17;
    }
  }

  if (v6 == 1)
  {
    sub_181BCD4AC(v5, v4);
  }

  else
  {
    if (v5 | v4) {
      unint64_t v4 = 0xC000000000000000LL;
    }
    else {
      unint64_t v4 = 0xF000000000000000LL;
    }
    uint64_t v5 = 0LL;
  }

BOOL sub_181C92ADC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  if ((v2 & 0x1000000000000000LL) != 0)
  {
    uint64_t v1 = sub_181C8B3F4();
    uint64_t v12 = v11;
    swift_bridgeObjectRelease();
    *a1 = v1;
    a1[1] = v12;
    unint64_t v2 = v12;
    if ((v12 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    v17[0] = v1;
    v17[1] = v2 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v13 = sub_18264EACC() + 32;
    int v6 = (nw_txt_record *)swift_unknownObjectRetain();
    unint64_t v8 = (const uint8_t *)v17;
    unint64_t v7 = (const char *)v13;
    size_t v9 = HIBYTE(v2) & 0xF;
    goto LABEL_8;
  }

  if ((v2 & 0x2000000000000000LL) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  if ((v1 & 0x1000000000000000LL) != 0)
  {
    uint64_t v3 = (v2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v4 = v1 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v3 = sub_18264F228();
    uint64_t v4 = v16;
  }

  uint64_t v5 = sub_18264EACC() + 32;
  int v6 = (nw_txt_record *)swift_unknownObjectRetain();
  unint64_t v7 = (const char *)v5;
  unint64_t v8 = (const uint8_t *)v3;
  size_t v9 = v4;
LABEL_8:
  BOOL v14 = nw_txt_record_set_key(v6, v7, v8, v9);
  swift_unknownObjectRelease();
  swift_release();
  return v14;
}

BOOL sub_181C92C0C(const uint8_t *a1, uint64_t a2)
{
  if (a1)
  {
    size_t v3 = a2 - (void)a1;
    uint64_t v4 = sub_18264EACC() + 32;
    uint64_t v5 = (nw_txt_record *)swift_unknownObjectRetain();
    int v6 = (const char *)v4;
    unint64_t v7 = a1;
    size_t v8 = v3;
  }

  else
  {
    uint64_t v9 = sub_18264EACC() + 32;
    uint64_t v5 = (nw_txt_record *)swift_unknownObjectRetain();
    int v6 = (const char *)v9;
    unint64_t v7 = 0LL;
    size_t v8 = 0LL;
  }

  BOOL v10 = nw_txt_record_set_key(v5, v6, v7, v8);
  swift_unknownObjectRelease();
  swift_release();
  return v10;
}

uint64_t sub_181C92CC0()
{
  return swift_deallocObject();
}

uint64_t sub_181C92CE4(_BYTE *a1, uint64_t a2)
{
  return sub_181C89F90(a1, a2, v2);
}

unint64_t sub_181C92CF0()
{
  unint64_t result = qword_18C58E708;
  if (!qword_18C58E708)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWTXTRecord.Entry,  &type metadata for NWTXTRecord.Entry);
    atomic_store(result, (unint64_t *)&qword_18C58E708);
  }

  return result;
}

unint64_t sub_181C92D38()
{
  unint64_t result = qword_18C58E710;
  if (!qword_18C58E710)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWTXTRecord.Index,  &type metadata for NWTXTRecord.Index);
    atomic_store(result, (unint64_t *)&qword_18C58E710);
  }

  return result;
}

unint64_t sub_181C92D80()
{
  unint64_t result = qword_18C58E718;
  if (!qword_18C58E718)
  {
    unint64_t result = MEMORY[0x186E12084](&protocol conformance descriptor for NWTXTRecord, &type metadata for NWTXTRecord);
    atomic_store(result, (unint64_t *)&qword_18C58E718);
  }

  return result;
}

unint64_t sub_181C92DC8()
{
  unint64_t result = qword_18C58E720;
  if (!qword_18C58E720)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWTXTRecord.Index,  &type metadata for NWTXTRecord.Index);
    atomic_store(result, (unint64_t *)&qword_18C58E720);
  }

  return result;
}

uint64_t sub_181C92E0C()
{
  return sub_181C02894(&qword_18C58E728, &qword_18C58E730, MEMORY[0x189617A28]);
}

uint64_t sub_181C92E38()
{
  return sub_181C02894(&qword_18C58E738, &qword_18C58E740, MEMORY[0x18961A5E8]);
}

uint64_t sub_181C92E64()
{
  return sub_181C02894(&qword_18C58E748, &qword_18C58E750, MEMORY[0x189619678]);
}

uint64_t sub_181C92E98()
{
  return 0LL;
}

uint64_t destroy for NWTXTRecord()
{
  return swift_unknownObjectRelease();
}

void *_s7Network11NWTXTRecordVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for NWTXTRecord(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

_OWORD *assignWithTake for NWTXTRecord(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for NWTXTRecord()
{
  return &type metadata for NWTXTRecord;
}

uint64_t destroy for NWTXTRecord.Entry(uint64_t a1)
{
  return sub_181BDA14C(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s7Network11NWTXTRecordV5EntryOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_181BDA12C(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for NWTXTRecord.Entry(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_181BDA12C(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_181BDA14C(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for NWTXTRecord.Entry(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_181BDA14C(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWTXTRecord.Entry(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NWTXTRecord.Entry(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 254;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_181C93130(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_181C93148(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)unint64_t result = a2 - 2;
    *(void *)(result + 8) = 0LL;
    LOBYTE(a2) = 2;
  }

  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for NWTXTRecord.Entry()
{
  return &type metadata for NWTXTRecord.Entry;
}

uint64_t sub_181C93174(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for NWTXTRecord.Index(uint64_t a1)
{
  return sub_181C93190(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_181C93190(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s7Network11NWTXTRecordV5IndexVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_181C93174(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for NWTXTRecord.Index(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_181C93174(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(_BYTE *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_181C93190(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for NWTXTRecord.Index(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_181C93190(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWTXTRecord.Index(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NWTXTRecord.Index(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NWTXTRecord.Index()
{
  return &type metadata for NWTXTRecord.Index;
}

ValueMetadata *type metadata accessor for NWTXTRecord.CaseInsensitiveString()
{
  return &type metadata for NWTXTRecord.CaseInsensitiveString;
}

unint64_t sub_181C9332C()
{
  unint64_t result = qword_18C58E758;
  if (!qword_18C58E758)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182663B78, &type metadata for NWTXTRecord.CaseInsensitiveString);
    atomic_store(result, (unint64_t *)&qword_18C58E758);
  }

  return result;
}

uint64_t sub_181C93370(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58E770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_181C933B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  char v4 = *(_BYTE *)(a1 + 40);
  sub_181C93174(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
  sub_181C93174(v2, v3, v4);
  return a1;
}

uint64_t sub_181C93408(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = sub_18264E688();
    uint64_t result = MEMORY[0x186E12084](a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_181C93448(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NWActorID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_181C93484(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_181C934DC()
{
  return sub_18264F5F4();
}

uint64_t sub_181C93504()
{
  return sub_18264F5E8();
}

unint64_t static NWActorSystemError.errorDomain.getter()
{
  return 0xD000000000000012LL;
}

uint64_t NWActorSystemError.errorCode.getter()
{
  return ((uint64_t (*)(uint64_t))((char *)sub_181C93570 + 4 * byte_182663BE0[*(void *)(v0 + 16) >> 60]))(1LL);
}

uint64_t sub_181C93570()
{
  return 2LL;
}

uint64_t sub_181C93578()
{
  return 5LL;
}

uint64_t sub_181C93580()
{
  return 16LL;
}

uint64_t sub_181C93588@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 8);
  if (a1 == 0xB000000000000000LL && (v3 | v1) == 0) {
    return 6LL;
  }
  if (a1 == 0xB000000000000000LL && v1 == 1 && v3 == 0) {
    return 7LL;
  }
  if (a1 == 0xB000000000000000LL && v1 == 2 && !v3) {
    return 9LL;
  }
  if (a1 == 0xB000000000000000LL && v1 == 3 && !v3) {
    return 12LL;
  }
  if (v3) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = v1 == 4;
  }
  if (v8 && a1 == 0xB000000000000000LL) {
    return 13LL;
  }
  else {
    return 14LL;
  }
}

unint64_t sub_181C93650()
{
  unint64_t result = qword_18C58E810;
  if (!qword_18C58E810)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for ActorSystemError,  &type metadata for ActorSystemError);
    atomic_store(result, (unint64_t *)&qword_18C58E810);
  }

  return result;
}

unint64_t sub_181C93698()
{
  return 0xD000000000000012LL;
}

uint64_t sub_181C936B4()
{
  return ((uint64_t (*)(uint64_t))((char *)sub_181C936DC + 4 * byte_182663BEC[*(void *)(v0 + 16) >> 60]))(1LL);
}

uint64_t sub_181C936DC()
{
  return 2LL;
}

uint64_t sub_181C936E4()
{
  return 5LL;
}

uint64_t sub_181C936EC()
{
  return 16LL;
}

uint64_t sub_181C936F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 8);
  if (a1 == 0xB000000000000000LL && (v3 | v1) == 0) {
    return 6LL;
  }
  if (a1 == 0xB000000000000000LL && v1 == 1 && v3 == 0) {
    return 7LL;
  }
  if (a1 == 0xB000000000000000LL && v1 == 2 && !v3) {
    return 9LL;
  }
  if (a1 == 0xB000000000000000LL && v1 == 3 && !v3) {
    return 12LL;
  }
  if (v3) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = v1 == 4;
  }
  if (v8 && a1 == 0xB000000000000000LL) {
    return 13LL;
  }
  else {
    return 14LL;
  }
}

void *initializeBufferWithCopyOfBuffer for ActorSystemError(void *a1, void *a2, uint64_t a3)
{
  return sub_181C93A30(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_181C937C8);
}

id sub_181C937C8(id result, unint64_t a2, unint64_t a3)
{
  switch(a3 >> 60)
  {
    case 2uLL:
      uint64_t v3 = a3 & 0xFFFFFFFFFFFFFFFLL;
      sub_181BCD4AC((uint64_t)result, a2);
      unint64_t result = (id)v3;
      goto LABEL_4;
    case 3uLL:
LABEL_4:
      unint64_t result = result;
      break;
    case 4uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
      unint64_t result = (id)swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }

  return result;
}

void destroy for ActorSystemError(uint64_t a1)
{
}

void sub_181C93830(void *a1, unint64_t a2, unint64_t a3)
{
  switch(a3 >> 60)
  {
    case 2uLL:
      uint64_t v3 = a3 & 0xFFFFFFFFFFFFFFFLL;
      sub_181BCD4F0((uint64_t)a1, a2);
      a1 = (void *)v3;
      goto LABEL_4;
    case 3uLL:
LABEL_4:

      break;
    case 4uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
      swift_bridgeObjectRelease();
      break;
    default:
      return;
  }

uint64_t *assignWithCopy for ActorSystemError(uint64_t *a1, void *a2, uint64_t a3)
{
  return sub_181C93A8C( a1,  a2,  a3,  (void (*)(void, uint64_t, uint64_t))sub_181C937C8,  (void (*)(uint64_t, uint64_t, uint64_t))sub_181C93830);
}

uint64_t *assignWithTake for ActorSystemError(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_181C93AF8(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_181C93830);
}

uint64_t getEnumTagSinglePayload for ActorSystemError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x76 && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 118);
  }
  unsigned int v3 = ((*(void *)(a1 + 16) >> 60) & 0x8F | (16 * (*(void *)(a1 + 16) & 7))) ^ 0x7F;
  if (v3 >= 0x75) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ActorSystemError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x75)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)unint64_t result = a2 - 118;
    if (a3 >= 0x76) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0x76) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 4) & 7 | (8 * (-a2 & 0x7F));
      *(void *)unint64_t result = 0LL;
      *(void *)(result + 8) = 0LL;
      *(void *)(result + 16) = (v3 | (v3 << 57)) & 0xF000000000000007LL;
    }
  }

  return result;
}

uint64_t sub_181C93950(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16) >> 60;
  else {
    return (*(_DWORD *)a1 + 10);
  }
}

uint64_t sub_181C9396C(uint64_t result)
{
  *(void *)(result + 16) &= 0xFFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t sub_181C9397C(uint64_t result, uint64_t a2)
{
  if (a2 < 0xA)
  {
    *(void *)(result + 16) = *(void *)(result + 16) & 0xFFFFFFFFFFFFFF8LL | (a2 << 60);
  }

  else
  {
    *(void *)unint64_t result = (a2 - 10);
    *(_OWORD *)(result + 8) = xmmword_182663DF0;
  }

  return result;
}

ValueMetadata *type metadata accessor for ActorSystemError()
{
  return &type metadata for ActorSystemError;
}

void *initializeBufferWithCopyOfBuffer for NWActorSystemError(void *a1, void *a2, uint64_t a3)
{
  return sub_181C93A30(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_181C939C8);
}

id sub_181C939C8(id result, unint64_t a2, unint64_t a3)
{
  switch(a3 >> 60)
  {
    case 2uLL:
      uint64_t v3 = a3 & 0xFFFFFFFFFFFFFFFLL;
      sub_181BCD4AC((uint64_t)result, a2);
      unint64_t result = (id)v3;
      goto LABEL_4;
    case 3uLL:
LABEL_4:
      unint64_t result = result;
      break;
    case 4uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
      unint64_t result = (id)swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }

  return result;
}

void destroy for NWActorSystemError(uint64_t a1)
{
}

void *sub_181C93A30(void *a1, void *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t))
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a2[2];
  a4(*a2, v6, v7);
  *a1 = v5;
  a1[1] = v6;
  a1[2] = v7;
  return a1;
}

uint64_t *assignWithCopy for NWActorSystemError(uint64_t *a1, void *a2, uint64_t a3)
{
  return sub_181C93A8C( a1,  a2,  a3,  (void (*)(void, uint64_t, uint64_t))sub_181C939C8,  (void (*)(uint64_t, uint64_t, uint64_t))sub_181C4EE64);
}

uint64_t *sub_181C93A8C( uint64_t *a1, void *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = a2[2];
  a4(*a2, v8, v9);
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v12 = a1[2];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v9;
  a5(v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for NWActorSystemError(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_181C93AF8(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_181C4EE64);
}

uint64_t *sub_181C93AF8( uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v7 = a1[2];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v5;
  a4(v6, v8, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for NWActorSystemError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x75 && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 117);
  }
  unsigned int v3 = ((*(void *)(a1 + 16) >> 60) & 0x8F | (16 * (*(void *)(a1 + 16) & 7))) ^ 0x7F;
  if (v3 >= 0x74) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for NWActorSystemError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x74)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)unint64_t result = a2 - 117;
    if (a3 >= 0x75) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0x75) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 4) & 7 | (8 * (-a2 & 0x7F));
      *(void *)unint64_t result = 0LL;
      *(void *)(result + 8) = 0LL;
      *(void *)(result + 16) = (v3 | (v3 << 57)) & 0xF000000000000007LL;
    }
  }

  return result;
}

uint64_t sub_181C93BE0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16) >> 60;
  else {
    return (*(_DWORD *)a1 + 11);
  }
}

uint64_t sub_181C93BFC(uint64_t result, uint64_t a2)
{
  if (a2 < 0xB)
  {
    *(void *)(result + 16) = *(void *)(result + 16) & 0xFFFFFFFFFFFFFF8LL | (a2 << 60);
  }

  else
  {
    *(void *)unint64_t result = (a2 - 11);
    *(_OWORD *)(result + 8) = xmmword_182663E00;
  }

  return result;
}

ValueMetadata *type metadata accessor for NWActorSystemError()
{
  return &type metadata for NWActorSystemError;
}

unint64_t sub_181C93C3C()
{
  unint64_t result = qword_18C58E818;
  if (!qword_18C58E818)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWActorSystemError,  &type metadata for NWActorSystemError);
    atomic_store(result, (unint64_t *)&qword_18C58E818);
  }

  return result;
}

ValueMetadata *type metadata accessor for ISOLatin1String()
{
  return &type metadata for ISOLatin1String;
}

uint64_t sub_181C93C94@<X0>( uint64_t (*a1)(uint64_t, uint64_t)@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if ((sub_181BCE7EC(a3, a4) & 1) == 0) {
    return sub_181C94EA0(a1, a2, a3, a4, a5, a6);
  }
  swift_bridgeObjectRetain();
  sub_181C93FD4((uint64_t (*)(void *, uint64_t))a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_181C93D44(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](a1);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v7);
  uint64_t v11 = (char *)&v18 - v10;
  if ((sub_18264EC34() & 1) != 0)
  {
    uint64_t v12 = *(uint64_t (**)(char *, char *, uint64_t))(v6 + 16);
    uint64_t v19 = a1;
    uint64_t v13 = v12(v11, a1, a2);
    MEMORY[0x1895F8858](v13);
    *(&v18 - 2) = a2;
    *(&v18 - 1) = a3;
    sub_18264EC28();
    if (v22[1])
    {
      uint64_t v14 = v22[0];
      unint64_t v15 = *(void (**)(char *, uint64_t))(v6 + 8);
      v15(v11, a2);
LABEL_4:
      uint64_t v16 = v19;
LABEL_12:
      v15(v16, a2);
      return v14;
    }

    v12(v9, v11, a2);
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58DFF0);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_181BE61DC(v20, (uint64_t)v22);
      __swift_project_boxed_opaque_existential_2(v22, v23);
      if ((sub_18264F378() & 1) != 0)
      {
        __swift_project_boxed_opaque_existential_2(v22, v23);
        sub_18264F36C();
        unint64_t v15 = *(void (**)(char *, uint64_t))(v6 + 8);
        v15(v11, a2);
        uint64_t v14 = *(void *)&v20[0];
        __swift_destroy_boxed_opaque_existential_2((uint64_t)v22);
        goto LABEL_4;
      }

      __swift_destroy_boxed_opaque_existential_2((uint64_t)v22);
    }

    else
    {
      uint64_t v21 = 0LL;
      memset(v20, 0, sizeof(v20));
      sub_181C02DDC((uint64_t)v20);
    }

    uint64_t v16 = v19;
    uint64_t v14 = sub_181C96108((uint64_t)v11);
    unint64_t v15 = *(void (**)(char *, uint64_t))(v6 + 8);
    v15(v11, a2);
    goto LABEL_12;
  }

  uint64_t v14 = sub_181C94094();
  (*(void (**)(char *, uint64_t))(v6 + 8))(a1, a2);
  return v14;
}

uint64_t sub_181C93FD4(uint64_t (*a1)(void *, uint64_t))
{
  uint64_t v3 = *v1;
  unint64_t v4 = v1[1];
  if ((v4 & 0x1000000000000000LL) == 0)
  {
    if ((v4 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v6 = HIBYTE(v4) & 0xF;
    v10[0] = v3;
    v10[1] = v4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v5 = v10;
    return a1(v5, v6);
  }

  uint64_t v3 = sub_181C8B3F4();
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  uint64_t *v1 = v3;
  v1[1] = v8;
  unint64_t v4 = v8;
  if ((v8 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v3 & 0x1000000000000000LL) != 0)
  {
    uint64_t v5 = (void *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v5 = (void *)sub_18264F228();
  }

  return a1(v5, v6);
}

uint64_t sub_181C94094()
{
  uint64_t v0 = sub_18264F198();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1895F8858](v0);
  uint64_t v3 = (char *)v10 - v2;
  uint64_t v4 = sub_18264F2C4();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)v10 - v6;
  sub_18264EC58();
  MEMORY[0x186E12084](MEMORY[0x189619258], v0);
  sub_18264F384();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v10[0] = 0LL;
  v10[1] = 0xE000000000000000LL;
  MEMORY[0x186E12084](MEMORY[0x189619618], v4);
  sub_18264EB14();
  uint64_t v8 = v10[0];
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

unsigned __int8 *sub_181C94200@<X0>(unsigned __int8 *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

unint64_t sub_181C9420C(unint64_t a1, unint64_t a2)
{
  unint64_t v3 = a2;
  v13[1] = *MEMORY[0x1895F89C0];
  uint64_t v5 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v5 = a1;
  }
  uint64_t v6 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v6 = 11LL;
  }
  uint64_t isStackAllocationSafe = sub_181C86740(0xFuLL, v6 | (v5 << 16), a1, a2);
  if (isStackAllocationSafe < 0) {
    __break(1u);
  }
  uint64_t v8 = isStackAllocationSafe;
  if (isStackAllocationSafe < 1025
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    uint64_t v10 = sub_181C950A0((uint64_t)v13 - v9, v8, a1, v3);
    if (v2) {
      swift_willThrow();
    }
    else {
      return v10;
    }
  }

  else
  {
    uint64_t v11 = swift_slowAlloc();
    unint64_t v3 = sub_181C950A0(v11, v8, a1, v3);
    MEMORY[0x186E12168](v11, -1LL, -1LL);
  }

  return v3;
}

uint64_t sub_181C94388@<X0>( unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58B040);
  uint64_t v12 = MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  uint64_t v16 = (char *)&v27 - v15;
  uint64_t v17 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v17 = a1;
  }
  uint64_t v18 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v18 = 11LL;
  }
  unint64_t v19 = sub_181C86740(0xFuLL, v18 | (v17 << 16), a1, a2);
  if ((v19 & 0x8000000000000000LL) != 0) {
    __break(1u);
  }
  int64_t v20 = v19;
  sub_181BCEDC8(a3);
  sub_181BCEDC8(a4);
  sub_181BCEDC8(a3);
  uint64_t isStackAllocationSafe = sub_181BCEDC8(a4);
  if (v20 < 1025 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    unint64_t v28 = v16;
    uint64_t v29 = a5;
    MEMORY[0x1895F8858](isStackAllocationSafe);
    uint64_t v23 = (char *)&v27 - v22;
    sub_181BCEDC8(a3);
    sub_181BCEDC8(a4);
    sub_181C95290(v23, (char *)v20, a1, a2, a3, a4, (uint64_t)v14);
    if (v5)
    {
      swift_willThrow();
    }

    else
    {
      uint64_t v24 = (uint64_t)v28;
      sub_181C86F0C((uint64_t)v14, (uint64_t)v28);
      sub_181C86F0C(v24, v29);
    }
  }

  else
  {
    int64_t v25 = (char *)swift_slowAlloc();
    sub_181BCEDC8(a3);
    sub_181BCEDC8(a4);
    sub_181C95290(v25, (char *)v20, a1, a2, a3, a4, a5);
    MEMORY[0x186E12168](v25, -1LL, -1LL);
  }

  sub_181BCEE10(a3);
  sub_181BCEE10(a4);
  sub_181BCEE10(a3);
  sub_181BCEE10(a4);
  sub_181BCEE10(a3);
  return sub_181BCEE10(a4);
}

uint64_t sub_181C9460C@<X0>( unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58B040);
  uint64_t v14 = MEMORY[0x1895F8858](v13);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v29 = (uint64_t)&v28 - v17;
  uint64_t v18 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v18 = a1;
  }
  uint64_t v19 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v19 = 11LL;
  }
  unint64_t v20 = sub_181C86740(0xFuLL, v19 | (v18 << 16), a1, a2);
  if ((v20 & 0x8000000000000000LL) != 0) {
    __break(1u);
  }
  int64_t v21 = v20;
  sub_181BCEDC8(a3);
  uint64_t isStackAllocationSafe = sub_181BCEDC8(a3);
  if (v21 < 1025 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    uint64_t v28 = a6;
    uint64_t v30 = &v28;
    MEMORY[0x1895F8858](isStackAllocationSafe);
    uint64_t v24 = (char *)&v28 - v23;
    sub_181BCEDC8(a3);
    sub_181C95550(v24, (char *)v21, a1, a2, a3, a4, a5, (uint64_t)v16);
    if (v6)
    {
      swift_willThrow();
    }

    else
    {
      uint64_t v25 = v29;
      sub_181C86F0C((uint64_t)v16, v29);
      sub_181C86F0C(v25, v28);
    }
  }

  else
  {
    unint64_t v26 = (char *)swift_slowAlloc();
    sub_181BCEDC8(a3);
    sub_181C95550(v26, (char *)v21, a1, a2, a3, a4, a5, a6);
    MEMORY[0x186E12168](v26, -1LL, -1LL);
  }

  sub_181BCEE10(a3);
  sub_181BCEE10(a3);
  return sub_181BCEE10(a3);
}

uint64_t sub_181C94874@<X0>( unint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X2>, char *a4@<X3>, char *a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v27 = a5;
  uint64_t v28 = a6;
  uint64_t v29 = *MEMORY[0x1895F89C0];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58B040);
  uint64_t v14 = MEMORY[0x1895F8858](v13);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v18 = (char *)&v26 - v17;
  uint64_t v19 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v19 = a1;
  }
  uint64_t v20 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v20 = 11LL;
  }
  uint64_t isStackAllocationSafe = sub_181C86740(0xFuLL, v20 | (v19 << 16), a1, a2);
  if (isStackAllocationSafe < 0) {
    __break(1u);
  }
  uint64_t v22 = (char *)isStackAllocationSafe;
  if (isStackAllocationSafe < 1025
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    sub_181C95760((char *)&v26 - v23, v22, a1, a2, a3, a4, v27, v28, (uint64_t)v16);
    if (v7)
    {
      return swift_willThrow();
    }

    else
    {
      sub_181C86F0C((uint64_t)v16, (uint64_t)v18);
      return sub_181C86F0C((uint64_t)v18, a7);
    }
  }

  else
  {
    uint64_t v25 = (char *)swift_slowAlloc();
    sub_181C95760(v25, v22, a1, a2, a3, a4, v27, v28, a7);
    return MEMORY[0x186E12168](v25, -1LL, -1LL);
  }

char *sub_181C94A88(unint64_t a1, unint64_t a2)
{
  return sub_181C94AD0(a1, a2);
}

char *sub_181C94AD0(unint64_t a1, unint64_t a2)
{
  v12[1] = *MEMORY[0x1895F89C0];
  uint64_t v5 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v5 = a1;
  }
  uint64_t v6 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v6 = 11LL;
  }
  uint64_t isStackAllocationSafe = sub_181C86740(0xFuLL, v6 | (v5 << 16), a1, a2);
  if (isStackAllocationSafe < 0) {
    __break(1u);
  }
  uint64_t v8 = (char *)isStackAllocationSafe;
  if (isStackAllocationSafe < 1025
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    unint64_t result = sub_181C9595C((char *)v12 - v9, v8, a1, a2);
    if (v2) {
      return (char *)swift_willThrow();
    }
  }

  else
  {
    uint64_t v11 = (char *)swift_slowAlloc();
    sub_181C9595C(v11, v8, a1, a2);
    return (char *)MEMORY[0x186E12168](v11, -1LL, -1LL);
  }

  return result;
}

uint64_t sub_181C94C48@<X0>( unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, unsigned __int8 *(*a6)@<X0>(unsigned __int8 *result@<X0>, _DWORD *a2@<X8>)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v9 = v8;
  v26[1] = a8;
  uint64_t v28 = *MEMORY[0x1895F89C0];
  uint64_t v17 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v17 = a1;
  }
  uint64_t v18 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v18 = 11LL;
  }
  unint64_t v19 = sub_181C86740(0xFuLL, v18 | (v17 << 16), a1, a2);
  if ((v19 & 0x8000000000000000LL) != 0) {
    __break(1u);
  }
  uint64_t v20 = v19;
  uint64_t v27 = a3;
  swift_bridgeObjectRetain_n();
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v20 < 1025 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    uint64_t v23 = (char *)v26 - v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_181C95B44(v23, v20, a1, a2, v27, a4, a5, a6, a7);
    if (v9)
    {
      swift_willThrow();
      swift_bridgeObjectRelease_n();
LABEL_12:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }

    swift_bridgeObjectRelease_n();
  }

  else
  {
    uint64_t v24 = (char *)swift_slowAlloc();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_181C95B44(v24, v20, a1, a2, v27, a4, a5, a6, a7);
    MEMORY[0x186E12168](v24, -1LL, -1LL);
    swift_bridgeObjectRelease_n();
    if (v8) {
      goto LABEL_12;
    }
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease_n();
}

uint64_t sub_181C94EA0@<X0>( uint64_t (*a1)(uint64_t, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v28[1] = a2;
  void v28[3] = *MEMORY[0x1895F89C0];
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = MEMORY[0x1895F8858](a1);
  uint64_t v14 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  uint64_t v18 = (char *)v28 - v17;
  uint64_t v19 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000LL) == 0) {
    uint64_t v19 = v15;
  }
  uint64_t v20 = 7LL;
  if (((v16 >> 60) & ((v15 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v20 = 11LL;
  }
  uint64_t isStackAllocationSafe = sub_181C86740(0xFuLL, v20 | (v19 << 16), v15, v16);
  if (isStackAllocationSafe < 0) {
    __break(1u);
  }
  uint64_t v22 = isStackAllocationSafe;
  if (isStackAllocationSafe <= 1024
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
  {
    v28[0] = a6;
    MEMORY[0x1895F8858](isStackAllocationSafe);
    uint64_t v24 = v28[2];
    sub_181C95D64((uint64_t)v28 - v23, v22, a3, a4, a1);
    if (v24)
    {
      return swift_willThrow();
    }

    else
    {
      uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
      v26(v18, v14, a5);
      return ((uint64_t (*)(void, char *, uint64_t))v26)(v28[0], v18, a5);
    }
  }

  else
  {
    uint64_t v27 = swift_slowAlloc();
    sub_181C95D64(v27, v22, a3, a4, a1);
    return MEMORY[0x186E12168](v27, -1LL, -1LL);
  }

uint64_t sub_181C950A0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a4 & 0x2000000000000000LL) != 0) {
    uint64_t v5 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v5)
  {
    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    uint64_t v10 = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v11 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    do
    {
      if ((a4 & 0x1000000000000000LL) != 0)
      {
        LOBYTE(v13) = sub_18264F15C();
      }

      else
      {
        if ((a4 & 0x2000000000000000LL) != 0)
        {
          v16[0] = a3;
          v16[1] = v10;
          int v13 = *((unsigned __int8 *)v16 + v9);
          if (*((char *)v16 + v9) < 0) {
            __asm { BR              X9 }
          }
        }

        else
        {
          uint64_t v12 = v11;
          if ((a3 & 0x1000000000000000LL) == 0) {
            uint64_t v12 = sub_18264F228();
          }
          int v13 = *(unsigned __int8 *)(v12 + v9);
          if (*(char *)(v12 + v9) < 0) {
            __asm { BR              X10 }
          }
        }

        uint64_t v14 = 1LL;
      }

      if (__OFADD__(v8, 1LL))
      {
        __break(1u);
        JUMPOUT(0x181C95270LL);
      }

      v9 += v14;
      *(_BYTE *)(a1 + v8++) = v13;
    }

    while (v9 < v5);
  }

  return sub_18264EB20();
}

uint64_t sub_181C95290@<X0>( char *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v26 = a6;
  if ((a4 & 0x2000000000000000LL) != 0) {
    uint64_t v8 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v8 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v8)
  {
    unint64_t v9 = a4;
    unint64_t v10 = a3;
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v14 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    while (1)
    {
      if ((v9 & 0x1000000000000000LL) != 0)
      {
        LOBYTE(v16) = sub_18264F15C();
      }

      else
      {
        if ((v9 & 0x2000000000000000LL) != 0)
        {
          unint64_t v24 = v10;
          unint64_t v25 = v13;
          int v16 = *((unsigned __int8 *)&v24 + v12);
          if (*((char *)&v24 + v12) < 0) {
            __asm { BR              X9 }
          }
        }

        else
        {
          uint64_t v15 = v14;
          if ((v10 & 0x1000000000000000LL) == 0) {
            uint64_t v15 = sub_18264F228();
          }
          int v16 = *(unsigned __int8 *)(v15 + v12);
          if (*(char *)(v15 + v12) < 0) {
            __asm { BR              X10 }
          }
        }

        uint64_t v17 = 1LL;
      }

      if (__OFADD__(v11, 1LL)) {
        break;
      }
      v12 += v17;
      a1[v11++] = v16;
      if (v12 >= v8) {
        goto LABEL_19;
      }
    }

    __break(1u);
    goto LABEL_23;
  }

uint64_t sub_181C95550@<X0>( char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, char *a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v26 = a5;
  if ((a4 & 0x2000000000000000LL) != 0) {
    uint64_t v9 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v9 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v9)
  {
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v14 = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v15 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    do
    {
      if ((a4 & 0x1000000000000000LL) != 0)
      {
        LOBYTE(v17) = sub_18264F15C();
      }

      else
      {
        if ((a4 & 0x2000000000000000LL) != 0)
        {
          v25[0] = a3;
          v25[1] = v14;
          int v17 = *((unsigned __int8 *)v25 + v13);
          if (*((char *)v25 + v13) < 0) {
            __asm { BR              X9 }
          }
        }

        else
        {
          uint64_t v16 = v15;
          if ((a3 & 0x1000000000000000LL) == 0) {
            uint64_t v16 = sub_18264F228();
          }
          int v17 = *(unsigned __int8 *)(v16 + v13);
          if (*(char *)(v16 + v13) < 0) {
            __asm { BR              X10 }
          }
        }

        uint64_t v18 = 1LL;
      }

      if (__OFADD__(v12, 1LL))
      {
        __break(1u);
        JUMPOUT(0x181C95740LL);
      }

      v13 += v18;
      a1[v12++] = v17;
    }

    while (v13 < v9);
  }

  uint64_t v19 = v26;
  sub_181BCDDE0(a1, a2, v26, a6, a7, a8);
  return sub_181BCEE10(v19);
}

uint64_t sub_181C95760@<X0>( char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, char *a5@<X4>, char *a6@<X5>, char *a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>)
{
  if ((a4 & 0x2000000000000000LL) != 0) {
    uint64_t v10 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10)
  {
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    uint64_t v15 = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v16 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    do
    {
      if ((a4 & 0x1000000000000000LL) != 0)
      {
        LOBYTE(v18) = sub_18264F15C();
      }

      else
      {
        if ((a4 & 0x2000000000000000LL) != 0)
        {
          v27[0] = a3;
          v27[1] = v15;
          int v18 = *((unsigned __int8 *)v27 + v14);
          if (*((char *)v27 + v14) < 0) {
            __asm { BR              X9 }
          }
        }

        else
        {
          uint64_t v17 = v16;
          if ((a3 & 0x1000000000000000LL) == 0) {
            uint64_t v17 = sub_18264F228();
          }
          int v18 = *(unsigned __int8 *)(v17 + v14);
          if (*(char *)(v17 + v14) < 0) {
            __asm { BR              X10 }
          }
        }

        uint64_t v19 = 1LL;
      }

      if (__OFADD__(v13, 1LL))
      {
        __break(1u);
        JUMPOUT(0x181C9593CLL);
      }

      v14 += v19;
      a1[v13++] = v18;
    }

    while (v14 < v10);
  }

  return sub_181BCDF08(a5, a6, a7, a8, a1, a2, a9);
}

char *sub_181C9595C(char *a1, char *a2, uint64_t a3, unint64_t a4)
{
  if ((a4 & 0x2000000000000000LL) != 0) {
    uint64_t v5 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v5)
  {
    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    uint64_t v10 = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v11 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    do
    {
      if ((a4 & 0x1000000000000000LL) != 0)
      {
        LOBYTE(v13) = sub_18264F15C();
      }

      else
      {
        if ((a4 & 0x2000000000000000LL) != 0)
        {
          v17[0] = a3;
          v17[1] = v10;
          int v13 = *((unsigned __int8 *)v17 + v9);
          if (*((char *)v17 + v9) < 0) {
            __asm { BR              X9 }
          }
        }

        else
        {
          uint64_t v12 = v11;
          if ((a3 & 0x1000000000000000LL) == 0) {
            uint64_t v12 = sub_18264F228();
          }
          int v13 = *(unsigned __int8 *)(v12 + v9);
          if (*(char *)(v12 + v9) < 0) {
            __asm { BR              X10 }
          }
        }

        uint64_t v14 = 1LL;
      }

      if (__OFADD__(v8, 1LL))
      {
        __break(1u);
        JUMPOUT(0x181C95B24LL);
      }

      v9 += v14;
      a1[v8++] = v13;
    }

    while (v9 < v5);
  }

  return sub_181C54224(a1, a2);
}

uint64_t sub_181C95B44( char *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5, char *a6, uint64_t a7, unsigned __int8 *(*a8)@<X0>(unsigned __int8 *result@<X0>, _DWORD *a2@<X8>), uint64_t a9)
{
  uint64_t v26 = a7;
  if ((a4 & 0x2000000000000000LL) != 0) {
    uint64_t v10 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10)
  {
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    uint64_t v15 = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v16 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    do
    {
      if ((a4 & 0x1000000000000000LL) != 0)
      {
        LOBYTE(v18) = sub_18264F15C();
      }

      else
      {
        if ((a4 & 0x2000000000000000LL) != 0)
        {
          v25[0] = a3;
          v25[1] = v15;
          int v18 = *((unsigned __int8 *)v25 + v14);
          if (*((char *)v25 + v14) < 0) {
            __asm { BR              X9 }
          }
        }

        else
        {
          uint64_t v17 = v16;
          if ((a3 & 0x1000000000000000LL) == 0) {
            uint64_t v17 = sub_18264F228();
          }
          int v18 = *(unsigned __int8 *)(v17 + v14);
          if (*(char *)(v17 + v14) < 0) {
            __asm { BR              X10 }
          }
        }

        uint64_t v19 = 1LL;
      }

      if (__OFADD__(v13, 1LL))
      {
        __break(1u);
        JUMPOUT(0x181C95D44LL);
      }

      v14 += v19;
      a1[v13++] = v18;
    }

    while (v14 < v10);
  }

  sub_181C3900C(a1, a2, a5, a6, v26, a8, a9);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_181C95D64( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if ((a4 & 0x2000000000000000LL) != 0) {
    uint64_t v6 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v6 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v6)
  {
    uint64_t v9 = 0LL;
    uint64_t v10 = 0LL;
    uint64_t v11 = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v12 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    do
    {
      if ((a4 & 0x1000000000000000LL) != 0)
      {
        LOBYTE(v13) = sub_18264F15C();
        if (__OFADD__(v9, 1LL)) {
          goto LABEL_20;
        }
      }

      else
      {
        if ((a4 & 0x2000000000000000LL) != 0)
        {
          v19[0] = a3;
          v19[1] = v11;
          int v13 = *((unsigned __int8 *)v19 + v10);
          if (*((char *)v19 + v10) < 0) {
            __asm { BR              X9 }
          }
        }

        else
        {
          uint64_t v15 = v12;
          if ((a3 & 0x1000000000000000LL) == 0) {
            uint64_t v15 = sub_18264F228();
          }
          int v13 = *(unsigned __int8 *)(v15 + v10);
          if (*(char *)(v15 + v10) < 0) {
            __asm { BR              X10 }
          }
        }

        uint64_t v14 = 1LL;
        if (__OFADD__(v9, 1LL))
        {
LABEL_20:
          __break(1u);
          JUMPOUT(0x181C95F58LL);
        }
      }

      v10 += v14;
      *(_BYTE *)(a1 + v9++) = v13;
    }

    while (v10 < v6);
  }

  return a5(a1, a2);
}

uint64_t sub_181C95F78(unsigned __int8 *a1)
{
  return (*a1 >> 7) ^ 1u;
}

uint64_t sub_181C95F88()
{
  return sub_18264F684();
}

uint64_t sub_181C95FD0()
{
  return sub_18264EB44();
}

uint64_t sub_181C95FD8()
{
  return sub_18264F684();
}

uint64_t sub_181C9601C(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1LL;
  }
  else {
    return sub_18264F4EC();
  }
}

unint64_t sub_181C96050()
{
  unint64_t result = qword_18C58E820;
  if (!qword_18C58E820)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182663E20, &type metadata for ISOLatin1String);
    atomic_store(result, (unint64_t *)&qword_18C58E820);
  }

  return result;
}

uint64_t sub_181C96094@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x186E0E820](a1, a2, AssociatedTypeWitness);
  uint64_t result = sub_18264EB20();
  *a3 = result;
  a3[1] = v8;
  return result;
}

uint64_t sub_181C96108(uint64_t a1)
{
  uint64_t v3 = sub_18264EC1C();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if ((_swift_isClassOrObjCExistentialType() & 1) != 0 && (v3 < 0 || (v3 & 0x4000000000000000LL) != 0)) {
    goto LABEL_12;
  }
  _swift_isClassOrObjCExistentialType();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  if ((_swift_isClassOrObjCExistentialType() & 1) != 0 && (v3 < 0 || (v3 & 0x4000000000000000LL) != 0))
  {
    swift_unknownObjectRetain();
    sub_18264F330();
    swift_unknownObjectRelease();
  }

  else
  {
    _swift_isClassOrObjCExistentialType();
  }

  sub_18264EA30();
  if ((unsigned __int128)(v6 * (__int128)*(uint64_t *)(v5 + 72)) >> 64 != (v6 * *(void *)(v5 + 72)) >> 63)
  {
    __break(1u);
LABEL_12:
    uint64_t v13 = v3;
    uint64_t v9 = sub_18264F1C8();
    swift_retain();
    MEMORY[0x186E12084](MEMORY[0x189619320], v9);
    sub_18264F270();
    uint64_t v10 = sub_18264EA30();
    sub_181C96328(v10, v11, (uint64_t)&v13);
    uint64_t v7 = v13;
    swift_release();
    goto LABEL_10;
  }

  uint64_t v7 = sub_18264EB20();
LABEL_10:
  swift_release();
  return v7;
}

uint64_t sub_181C96328@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x186E0E820](a1, a2, AssociatedTypeWitness);
  uint64_t result = sub_18264EB20();
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v8;
  *(_BYTE *)(a3 + 16) = v9 & 1;
  return result;
}

uint64_t sub_181C963A4( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v26 = a2;
  v25[1] = a7;
  void v25[2] = a6;
  uint64_t v29 = a5;
  uint64_t v10 = sub_18264EA9C();
  MEMORY[0x1895F8858](v10);
  void v25[3] = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((a4 & 0x2000000000000000LL) != 0) {
    uint64_t v12 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v12 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v12)
  {
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    while (1)
    {
      if ((a4 & 0x1000000000000000LL) != 0)
      {
        LOBYTE(v16) = sub_18264F15C();
      }

      else
      {
        if ((a4 & 0x2000000000000000LL) != 0)
        {
          uint64_t v27 = a3;
          uint64_t v28 = a4 & 0xFFFFFFFFFFFFFFLL;
          int v16 = *((unsigned __int8 *)&v27 + v14);
          if (*((char *)&v27 + v14) < 0) {
            __asm { BR              X9 }
          }
        }

        else
        {
          uint64_t v15 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000LL) == 0) {
            uint64_t v15 = sub_18264F228();
          }
          int v16 = *(unsigned __int8 *)(v15 + v14);
          if (*(char *)(v15 + v14) < 0) {
            __asm { BR              X10 }
          }
        }

        uint64_t v17 = 1LL;
      }

      if (__OFADD__(v13, 1LL)) {
        break;
      }
      v14 += v17;
      *(_BYTE *)(a1 + v13++) = v16;
      if (v14 >= v12) {
        goto LABEL_19;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_19:
    uint64_t v18 = *(void *)(v29 + 16);
    if (!v18) {
      return 0LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v19 = 0LL;
    uint64_t v20 = v26;
    while (1)
    {
      uint64_t v27 = a1;
      uint64_t v28 = v20;
      sub_18264EA90();
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D488);
      sub_181C96938();
      sub_18264EA6C();
      if (v21) {
        break;
      }
      if (v18 == ++v19)
      {
        swift_bridgeObjectRelease();
        return 0LL;
      }
    }
  }

  swift_bridgeObjectRelease();
  uint64_t v23 = (void *)sub_18264EA3C();
  unint64_t v24 = (void *)sub_18264EA3C();
  swift_bridgeObjectRelease();
  _CFHTTPMessageAddHeaderFieldValue();

  return 1LL;
}

uint64_t sub_181C96694(unint64_t a1, unint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v6 = v5;
  v28[1] = *(id *)MEMORY[0x1895F89C0];
  uint64_t v12 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v12 = a1;
  }
  uint64_t v13 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v13 = 11LL;
  }
  unint64_t v14 = sub_181C86740(0xFuLL, v13 | (v12 << 16), a1, a2);
  if ((v14 & 0x8000000000000000LL) != 0) {
    __break(1u);
  }
  uint64_t v15 = v14;
  swift_bridgeObjectRetain();
  id v16 = a4;
  sub_181BCEDC8(a5);
  swift_bridgeObjectRetain();
  id v17 = v16;
  uint64_t isStackAllocationSafe = sub_181BCEDC8(a5);
  v28[0] = v17;
  if (v15 >= 1025)
  {
    uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      uint64_t v23 = v17;
      uint64_t v24 = swift_slowAlloc();
      swift_bridgeObjectRetain();
      id v25 = v23;
      sub_181BCEDC8(a5);
      char v22 = sub_181C963A4(v24, v15, a1, a2, a3, (uint64_t)v25, a5);
      sub_181BCEE10(a5);
      swift_bridgeObjectRelease();

      MEMORY[0x186E12168](v24, -1LL, -1LL);
      swift_bridgeObjectRelease();
      if (v6) {
        goto LABEL_12;
      }
LABEL_13:
      id v26 = v28[0];
      sub_181BCEE10(a5);

      swift_bridgeObjectRelease();
      sub_181BCEE10(a5);
      return v22 & 1;
    }
  }

  MEMORY[0x1895F8858](isStackAllocationSafe);
  uint64_t v20 = (char *)v28 - v19;
  swift_bridgeObjectRetain();
  id v21 = v17;
  sub_181BCEDC8(a5);
  char v22 = sub_181C963A4((uint64_t)v20, v15, a1, a2, a3, (uint64_t)v21, a5);
  sub_181BCEE10(a5);
  swift_bridgeObjectRelease();

  if (!v5)
  {

    swift_bridgeObjectRelease();
    goto LABEL_13;
  }

  swift_willThrow();

  swift_bridgeObjectRelease();
LABEL_12:
  sub_181BCEE10(a5);

  swift_bridgeObjectRelease();
  sub_181BCEE10(a5);
  return v22 & 1;
}

unint64_t sub_181C96938()
{
  unint64_t result = qword_18C58D490;
  if (!qword_18C58D490)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C58D488);
    unint64_t result = MEMORY[0x186E12084](MEMORY[0x189617C70], v1);
    atomic_store(result, (unint64_t *)&qword_18C58D490);
  }

  return result;
}

uint64_t sub_181C96984@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_181C96094(a1, a2, a3);
}

unint64_t sub_181C969EC()
{
  unint64_t result = qword_18C58E828;
  if (!qword_18C58E828)
  {
    unint64_t result = MEMORY[0x186E12084](MEMORY[0x18961ABA0], MEMORY[0x18961AB98]);
    atomic_store(result, (unint64_t *)&qword_18C58E828);
  }

  return result;
}

uint64_t NWParameters.nw.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (os_unfair_lock_s *)(v1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  uint64_t v3 = *(void *)(v1 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock(v2);
  return v3;
}

uint64_t NWParameters.copy()()
{
  return sub_181C96AA8( (uint64_t (*)(void))nw_parameters_copy,  (void (*)(void))type metadata accessor for NWParameters,  &qword_18C58A220);
}

uint64_t NWParameters.defaultProtocolStack.getter()
{
  return sub_181C96AA8( (uint64_t (*)(void))nw_parameters_copy_default_protocol_stack,  (void (*)(void))type metadata accessor for NWParameters.ProtocolStack,  (uint64_t *)&unk_18C58A228);
}

uint64_t sub_181C96AA8(uint64_t (*a1)(void), void (*a2)(void), uint64_t *a3)
{
  uint64_t v7 = *(os_unfair_lock_s **)(v3 + 16);
  uint64_t v8 = v7 + 4;
  char v9 = v7 + 6;
  os_unfair_lock_lock(v7 + 6);
  sub_181C9AEEC(v8, a1, a2, a3, &v11);
  os_unfair_lock_unlock(v9);
  return v11;
}

uint64_t static NWParameters.applicationService.getter()
{
  application_service = nw_parameters_create_application_service();
  nw_parameters_t v1 = nw_parameters_copy(application_service);
  swift_unknownObjectRelease();
  uint64_t v2 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A220);
  uint64_t v3 = swift_allocObject();
  *(_DWORD *)(v3 + 24) = 0;
  *(void *)(v3 + 16) = v1;
  *(void *)(v2 + 16) = v3;
  return v2;
}

uint64_t NWParameters.__allocating_init(_:)(nw_parameters *a1)
{
  nw_parameters_t v1 = nw_parameters_copy(a1);
  swift_unknownObjectRelease();
  uint64_t v2 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A220);
  uint64_t v3 = swift_allocObject();
  *(_DWORD *)(v3 + 24) = 0;
  *(void *)(v3 + 16) = v1;
  *(void *)(v2 + 16) = v3;
  return v2;
}

uint64_t NWParameters.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  nw_parameters_t v1 = nw_parameters_create();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A220);
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 24) = 0;
  *(void *)(v2 + 16) = v1;
  *(void *)(v0 + 16) = v2;
  return v0;
}

uint64_t sub_181C96C68@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_unknownObjectRetain();
}

uint64_t NWParameters.__allocating_init(tls:tcp:)(uint64_t a1, uint64_t a2)
{
  return sub_181C9D838(a1, a2, 2u);
}

uint64_t NWParameters.__allocating_init(dtls:udp:)(uint64_t a1, uint64_t a2)
{
  return sub_181C9D838(a1, a2, 1u);
}

uint64_t NWParameters.__allocating_init(quicStream:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  nw_parameters_t v3 = nw_parameters_create();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A220);
  uint64_t v4 = swift_allocObject();
  *(void *)(v2 + 16) = v4;
  *(_DWORD *)(v4 + 24) = 0;
  uint64_t v5 = (os_unfair_lock_s *)(v4 + 24);
  *(void *)(v4 + 16) = v3;
  uint64_t v6 = (void *)(v4 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 24));
  sub_181C9AEEC( v6,  (uint64_t (*)(void))nw_parameters_copy_default_protocol_stack,  (void (*)(void))type metadata accessor for NWParameters.ProtocolStack,  (uint64_t *)&unk_18C58A228,  &v9);
  os_unfair_lock_unlock(v5);
  uint64_t v7 = *(void *)(v9 + 16);
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 24));
  nw_protocol_stack_set_transport_protocol(*(nw_protocol_stack_t *)(v7 + 16), *(nw_protocol_options_t *)(a1 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 24));
  swift_release();
  swift_release_n();
  return v2;
}

uint64_t NWParameters.init()()
{
  nw_parameters_t v1 = nw_parameters_create();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A220);
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 24) = 0;
  *(void *)(v2 + 16) = v1;
  *(void *)(v0 + 16) = v2;
  return v0;
}

nw_parameters *static NWParameters.applicationServiceQUIC(identity:)(uint64_t a1)
{
  if (a1)
  {
    nw_parameters_t v1 = (void *)swift_unknownObjectRetain();
    unint64_t result = nw_parameters_create_application_service_quic_using_identity(v1);
    if (result)
    {
      nw_parameters_t v3 = nw_parameters_copy(result);
      swift_unknownObjectRelease();
      uint64_t v4 = swift_allocObject();
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A220);
      uint64_t v5 = swift_allocObject();
      *(_DWORD *)(v5 + 24) = 0;
      *(void *)(v5 + 16) = v3;
      swift_unknownObjectRelease();
LABEL_6:
      *(void *)(v4 + 16) = v5;
      return (nw_parameters *)v4;
    }

    __break(1u);
  }

  else
  {
    unint64_t result = nw_parameters_create_application_service_quic();
    if (result)
    {
      nw_parameters_t v6 = nw_parameters_copy(result);
      swift_unknownObjectRelease();
      uint64_t v4 = swift_allocObject();
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A220);
      uint64_t v5 = swift_allocObject();
      *(_DWORD *)(v5 + 24) = 0;
      *(void *)(v5 + 16) = v6;
      goto LABEL_6;
    }
  }

  __break(1u);
  return result;
}

uint64_t static NWParameters.quic(alpn:)()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = _s7Network14NWProtocolQUICC7OptionsC4alpnAESaySSG_tcfC_0(v0);
  return _s7Network12NWParametersC4quicAcA14NWProtocolQUICC7OptionsC_tcfC_0(v1);
}

uint64_t static NWParameters.migratingPeerToPeerQuic(quic:)()
{
  uint64_t v0 = swift_retain();
  uint64_t v1 = _s7Network12NWParametersC4quicAcA14NWProtocolQUICC7OptionsC_tcfC_0(v0);
  uint64_t v2 = *(void *)(v1 + 16);
  nw_parameters_t v3 = (os_unfair_lock_s *)(v2 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 24));
  uint64_t v4 = *(void **)(v2 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock(v3);
  nw_parameters_set_migrating_peer_to_peer(v4);
  swift_unknownObjectRelease();
  return v1;
}

uint64_t static NWParameters.quicDatagram(alpn:)()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = _s7Network14NWProtocolQUICC7OptionsC4alpnAESaySSG_tcfC_0(v0);
  nw_quic_set_stream_is_datagram(*(nw_protocol_options_t *)(v1 + 16), 1);
  return _s7Network12NWParametersC4quicAcA14NWProtocolQUICC7OptionsC_tcfC_0(v1);
}

uint64_t static NWParameters.tls.getter()
{
  return sub_181C96FD4( (void (*)(void))type metadata accessor for NWProtocolTCP.Options,  (uint64_t (*)(void))nw_tcp_create_options,  2u);
}

uint64_t static NWParameters.dtls.getter()
{
  return sub_181C96FD4( (void (*)(void))type metadata accessor for NWProtocolUDP.Options,  (uint64_t (*)(void))nw_udp_create_options,  1u);
}

uint64_t sub_181C96FD4(void (*a1)(void), uint64_t (*a2)(void), unsigned int a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = nw_tls_create_options();
  a1(0LL);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = a2();
  return sub_181C9D838(v6, inited, a3);
}

uint64_t static NWParameters.tcp.getter()
{
  return sub_181C97084( (void (*)(void))type metadata accessor for NWProtocolTCP.Options,  (uint64_t (*)(void))nw_tcp_create_options,  2u);
}

uint64_t static NWParameters.udp.getter()
{
  return sub_181C97084( (void (*)(void))type metadata accessor for NWProtocolUDP.Options,  (uint64_t (*)(void))nw_udp_create_options,  1u);
}

uint64_t sub_181C97084(void (*a1)(void), uint64_t (*a2)(void), unsigned int a3)
{
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = a2();
  return sub_181C9D838(0LL, inited, a3);
}

void NWParameters.requiredInterface.getter(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  nw_interface_t v4 = nw_parameters_copy_required_interface(*(nw_parameters_t *)(v3 + 16));
  if (v4) {
    uint64_t v5 = (uint64_t)v4;
  }
  else {
    uint64_t v5 = 1LL;
  }
  *a1 = v5;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
}

uint64_t sub_181C97130(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*(void *)a2 + 16LL);
  nw_interface_t v4 = (nw_parameters **)(v3 + 16);
  uint64_t v5 = (os_unfair_lock_s *)(v3 + 24);
  sub_181BC6890(*a1);
  os_unfair_lock_lock(v5);
  sub_181C9F618(v4);
  os_unfair_lock_unlock(v5);
  return sub_181BC69C8(v2);
}

uint64_t NWParameters.requiredInterface.setter(unint64_t *a1)
{
  unint64_t v2 = *a1;
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  nw_interface_t v4 = (nw_parameters **)&v3[4];
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_181C971F8(v4, v2);
  os_unfair_lock_unlock(v5);
  return sub_181BC69C8(v2);
}

uint64_t sub_181C971F8(nw_parameters **a1, unint64_t a2)
{
  unint64_t v2 = *a1;
  if (a2 >= 2)
  {
    uint64_t v3 = (nw_interface *)a2;
    swift_unknownObjectRetain();
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  nw_parameters_require_interface(v2, v3);
  return swift_unknownObjectRelease();
}

nw_interface_t sub_181C9724C@<X0>(nw_parameters_t *a1@<X0>, uint64_t *a2@<X8>)
{
  nw_interface_t result = nw_parameters_copy_required_interface(*a1);
  if (result) {
    uint64_t v4 = (uint64_t)result;
  }
  else {
    uint64_t v4 = 1LL;
  }
  *a2 = v4;
  return result;
}

uint64_t (*NWParameters.requiredInterface.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = *(void *)(v1 + 16);
  a1[1] = v3;
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  nw_interface_t v4 = nw_parameters_copy_required_interface(*(nw_parameters_t *)(v3 + 16));
  if (v4) {
    uint64_t v5 = (uint64_t)v4;
  }
  else {
    uint64_t v5 = 1LL;
  }
  *a1 = v5;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
  return sub_181C972E4;
}

uint64_t sub_181C972E4(uint64_t *a1, char a2)
{
  unint64_t v3 = *a1;
  unint64_t v2 = (os_unfair_lock_s *)a1[1];
  nw_interface_t v4 = v2 + 6;
  uint64_t v5 = (nw_parameters **)&v2[4];
  if ((a2 & 1) != 0)
  {
    sub_181BC6890(*a1);
    os_unfair_lock_lock(v4);
    sub_181C971F8(v5, v3);
    os_unfair_lock_unlock(v4);
    sub_181BC69C8(v3);
  }

  else
  {
    os_unfair_lock_lock(v2 + 6);
    sub_181C971F8(v5, v3);
    os_unfair_lock_unlock(v4);
  }

  return sub_181BC69C8(v3);
}

void NWParameters.requiredInterfaceType.getter(_BYTE *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  required_interface_int type = nw_parameters_get_required_interface_type(*(nw_parameters_t *)(v3 + 16));
  else {
    char v5 = required_interface_type;
  }
  *a1 = v5;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
}

void NWParameters.requiredInterfaceType.setter(unsigned __int8 *a1)
{
}

uint64_t sub_181C973F0@<X0>(nw_parameters_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = nw_parameters_get_required_interface_type(*a1);
  else {
    char v4 = result;
  }
  *a2 = v4;
  return result;
}

void (*NWParameters.requiredInterfaceType.modify(uint64_t a1))(os_unfair_lock_s **a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)a1 = v3;
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  required_interface_int type = nw_parameters_get_required_interface_type(*(nw_parameters_t *)(v3 + 16));
  else {
    char v5 = required_interface_type;
  }
  *(_BYTE *)(a1 + 8) = v5;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
  return sub_181C97488;
}

void sub_181C97488(os_unfair_lock_s **a1, uint64_t a2)
{
}

void NWParameters.requiredInterfaceSubtype.getter(char *a1@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  char v4 = (void **)&v3[4];
  char v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_181C97538(v4, a1);
  os_unfair_lock_unlock(v5);
}

void NWParameters.requiredInterfaceSubtype.setter(char *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(v1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  nw_parameters_set_required_interface_subtype(*(void **)(v3 + 16), dword_182664310[v2]);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
}

uint64_t sub_181C97538@<X0>(void **a1@<X0>, char *a2@<X8>)
{
  uint64_t result = nw_parameters_get_required_interface_subtype(*a1);
  if ((int)result > 4000)
  {
    if ((_DWORD)result == 4001)
    {
      char v4 = 3;
      goto LABEL_11;
    }

    if ((_DWORD)result == 5001)
    {
      char v4 = 4;
      goto LABEL_11;
    }

void (*NWParameters.requiredInterfaceSubtype.modify(void *a1))(os_unfair_lock_s **a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  *a1 = v2;
  uint64_t v3 = (char *)(a1 + 1);
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 24));
  required_interface_subint type = nw_parameters_get_required_interface_subtype(*(void **)(v2 + 16));
  if (required_interface_subtype > 4000)
  {
    if (required_interface_subtype == 4001)
    {
      char v5 = 3;
      goto LABEL_11;
    }

    if (required_interface_subtype == 5001)
    {
      char v5 = 4;
      goto LABEL_11;
    }

void sub_181C97660(os_unfair_lock_s **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *a1 + 6;
  uint64_t v3 = *((char *)a1 + 8);
  os_unfair_lock_lock(v2);
  nw_parameters_set_required_interface_subtype(*(void **)&v1[4]._os_unfair_lock_opaque, dword_182664310[v3]);
  os_unfair_lock_unlock(v2);
}

uint64_t NWParameters.prohibitedInterfaces.getter()
{
  return sub_181C97938((void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_181C97754);
}

uint64_t NWParameters.prohibitedInterfaces.setter(uint64_t a1)
{
  return sub_181C97DB0(a1, (void (*)(os_unfair_lock_s *, uint64_t))sub_181C976D0);
}

void sub_181C976D0(nw_parameters_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  nw_parameters_clear_prohibited_interfaces(*a1);
  if (a2)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    if (v4)
    {
      swift_bridgeObjectRetain();
      uint64_t v5 = 0LL;
      while (1)
      {
        uint64_t v6 = *(nw_interface **)(a2 + 8 * v5 + 32);
        if (!v6) {
          break;
        }
        ++v5;
        nw_parameters_prohibit_interface(v3, v6);
        if (v4 == v5)
        {
          swift_bridgeObjectRelease();
          return;
        }
      }

      __break(1u);
    }
  }

uint64_t sub_181C97754@<X0>(nw_parameters **a1@<X0>, void *a2@<X8>)
{
  uint64_t v11 = MEMORY[0x18961AFE8];
  uint64_t v3 = *a1;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = &v11;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_181BDA1A4;
  *(void *)(v5 + 24) = v4;
  aBlock[4] = sub_181BBFA50;
  aBlock[5] = v5;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_181C6AF34;
  void aBlock[3] = &block_descriptor_207;
  uint64_t v6 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  nw_parameters_iterate_prohibited_interfaces(v3, v6);
  _Block_release(v6);
  LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v3 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v8 = v11;
    uint64_t v9 = *(void *)(v11 + 16);
    uint64_t result = swift_release();
    if (!v9)
    {
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v8 = 0LL;
    }

    *a2 = v8;
  }

  return result;
}

uint64_t (*NWParameters.prohibitedInterfaces.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  a1[1] = v3;
  uint64_t v4 = (nw_parameters **)&v3[4];
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_181C97754(v4, &v7);
  a1[2] = 0LL;
  os_unfair_lock_unlock(v5);
  *a1 = v7;
  return sub_181C97920;
}

uint64_t sub_181C97920(uint64_t *a1, char a2)
{
  return sub_181C98294(a1, a2, (void (*)(os_unfair_lock_s *, uint64_t))sub_181C976D0);
}

uint64_t NWParameters.prohibitedInterfaceTypes.getter()
{
  return sub_181C97938((void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_181C97A94);
}

uint64_t sub_181C97938(void (*a1)(uint64_t *__return_ptr, os_unfair_lock_s *))
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  uint64_t v4 = v3 + 4;
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  a1(&v7, v4);
  os_unfair_lock_unlock(v5);
  return v7;
}

void sub_181C97998( uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr, os_unfair_lock_s *)@<X3>, void *a3@<X8>)
{
  uint64_t v5 = *(os_unfair_lock_s **)(*(void *)a1 + 16LL);
  uint64_t v6 = v5 + 4;
  uint64_t v7 = v5 + 6;
  os_unfair_lock_lock(v5 + 6);
  a2(&v8, v6);
  os_unfair_lock_unlock(v7);
  *a3 = v8;
}

uint64_t NWParameters.prohibitedInterfaceTypes.setter(uint64_t a1)
{
  return sub_181C97DB0(a1, (void (*)(os_unfair_lock_s *, uint64_t))sub_181C97A18);
}

void sub_181C97A18(nw_parameters_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  nw_parameters_clear_prohibited_interface_types(*a1);
  if (a2)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    if (v4)
    {
      swift_bridgeObjectRetain();
      for (uint64_t i = 0LL; i != v4; ++i)
      {
        nw_interface_type_t v6 = *(unsigned __int8 *)(a2 + i + 32);
        nw_parameters_prohibit_interface_type(v3, v6);
      }

      swift_bridgeObjectRelease();
    }
  }

uint64_t sub_181C97A94@<X0>(nw_parameters **a1@<X0>, void *a2@<X8>)
{
  uint64_t v11 = MEMORY[0x18961AFE8];
  uint64_t v3 = *a1;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = &v11;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_181C9F668;
  *(void *)(v5 + 24) = v4;
  aBlock[4] = sub_181BBFA50;
  aBlock[5] = v5;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_181BCEE7C;
  void aBlock[3] = &block_descriptor_198;
  nw_interface_type_t v6 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  nw_parameters_iterate_prohibited_interface_types(v3, v6);
  _Block_release(v6);
  LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v3 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v8 = v11;
    uint64_t v9 = *(void *)(v11 + 16);
    uint64_t result = swift_release();
    if (!v9)
    {
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v8 = 0LL;
    }

    *a2 = v8;
  }

  return result;
}

uint64_t sub_181C97BE8(unsigned int a1, char **a2)
{
  uint64_t v4 = *a2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a2 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v4 = sub_181BC59DC(0LL, *((void *)v4 + 2) + 1LL, 1, v4);
    *a2 = v4;
  }

  unint64_t v7 = *((void *)v4 + 2);
  unint64_t v6 = *((void *)v4 + 3);
  if (v7 >= v6 >> 1) {
    uint64_t v4 = sub_181BC59DC((char *)(v6 > 1), v7 + 1, 1, v4);
  }
  if (a1 >= 5) {
    char v8 = 0;
  }
  else {
    char v8 = a1;
  }
  *((void *)v4 + 2) = v7 + 1;
  v4[v7 + 32] = v8;
  *a2 = v4;
  return 1LL;
}

uint64_t (*NWParameters.prohibitedInterfaceTypes.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  a1[1] = v3;
  uint64_t v4 = (nw_parameters **)&v3[4];
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_181C97A94(v4, &v7);
  a1[2] = 0LL;
  os_unfair_lock_unlock(v5);
  *a1 = v7;
  return sub_181C97D14;
}

uint64_t sub_181C97D14(uint64_t *a1, char a2)
{
  return sub_181C98294(a1, a2, (void (*)(os_unfair_lock_s *, uint64_t))sub_181C97A18);
}

uint64_t NWParameters.prohibitedInterfaceSubtypes.getter()
{
  return sub_181C97938((void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_181C97ED8);
}

uint64_t sub_181C97D2C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(os_unfair_lock_s *))
{
  unint64_t v6 = *(os_unfair_lock_s **)(*(void *)a2 + 16LL);
  uint64_t v7 = v6 + 4;
  char v8 = v6 + 6;
  swift_bridgeObjectRetain();
  os_unfair_lock_lock(v8);
  a5(v7);
  os_unfair_lock_unlock(v8);
  return swift_bridgeObjectRelease();
}

uint64_t NWParameters.prohibitedInterfaceSubtypes.setter(uint64_t a1)
{
  return sub_181C97DB0(a1, (void (*)(os_unfair_lock_s *, uint64_t))sub_181C97E18);
}

uint64_t sub_181C97DB0(uint64_t a1, void (*a2)(os_unfair_lock_s *, uint64_t))
{
  uint64_t v5 = *(os_unfair_lock_s **)(v2 + 16);
  unint64_t v6 = v5 + 4;
  uint64_t v7 = v5 + 6;
  os_unfair_lock_lock(v5 + 6);
  a2(v6, a1);
  os_unfair_lock_unlock(v7);
  return swift_bridgeObjectRelease();
}

uint64_t sub_181C97E18(void **a1, uint64_t a2)
{
  xpc_object_t v4 = xpc_array_create(0LL, 0LL);
  if (a2)
  {
    uint64_t v5 = *(void *)(a2 + 16);
    if (v5)
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = 0LL;
      do
      {
        uint64_t v7 = *(char *)(a2 + v6++ + 32);
        xpc_object_t v8 = xpc_uint64_create(qword_1826642E8[v7]);
        xpc_array_append_value(v4, v8);
        swift_unknownObjectRelease();
      }

      while (v5 != v6);
      swift_bridgeObjectRelease();
    }
  }

  nw_parameters_set_prohibited_interface_subtypes(*a1, v4);
  return swift_unknownObjectRelease();
}

uint64_t sub_181C97ED8@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v12 = MEMORY[0x18961AFE8];
  id v3 = nw_parameters_copy_prohibited_interface_subtypes(*a1);
  if (!v3) {
    id v3 = xpc_array_create(0LL, 0LL);
  }
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = &v12;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_181C9F640;
  *(void *)(v5 + 24) = v4;
  void v11[4] = sub_181BBFA50;
  void v11[5] = v5;
  v11[0] = MEMORY[0x1895F87A8];
  v11[1] = 1107296256LL;
  void v11[2] = sub_181C981C0;
  v11[3] = &block_descriptor_189;
  uint64_t v6 = _Block_copy(v11);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  xpc_array_apply(v3, v6);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  _Block_release(v6);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 + 16);
    uint64_t result = swift_release();
    if (!v10)
    {
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v9 = 0LL;
    }

    *a2 = v9;
  }

  return result;
}

uint64_t sub_181C98068(int a1, xpc_object_t xuint, char **a3)
{
  uint64_t value = xpc_uint64_get_value(xuint);
  if (HIDWORD(value))
  {
    uint64_t result = sub_18264F318();
    __break(1u);
    return result;
  }

  if ((int)value > 4000)
  {
    if ((_DWORD)value == 4001)
    {
      char v5 = 3;
      goto LABEL_12;
    }

    if ((_DWORD)value == 5001)
    {
      char v5 = 4;
      goto LABEL_12;
    }

uint64_t sub_181C981C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  char v6 = v5(a2, a3);
  swift_unknownObjectRelease();
  return v6 & 1;
}

uint64_t (*NWParameters.prohibitedInterfaceSubtypes.modify(void *a1))(uint64_t *a1, char a2)
{
  id v3 = *(os_unfair_lock_s **)(v1 + 16);
  a1[1] = v3;
  uint64_t v4 = (void **)&v3[4];
  char v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_181C97ED8(v4, &v7);
  a1[2] = 0LL;
  os_unfair_lock_unlock(v5);
  *a1 = v7;
  return sub_181C98288;
}

uint64_t sub_181C98288(uint64_t *a1, char a2)
{
  return sub_181C98294(a1, a2, (void (*)(os_unfair_lock_s *, uint64_t))sub_181C97E18);
}

uint64_t sub_181C98294(uint64_t *a1, char a2, void (*a3)(os_unfair_lock_s *, uint64_t))
{
  uint64_t v4 = (os_unfair_lock_s *)a1[1];
  uint64_t v5 = *a1;
  char v6 = v4 + 6;
  uint64_t v7 = v4 + 4;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    os_unfair_lock_lock(v6);
    a3(v7, v5);
    os_unfair_lock_unlock(v6);
    swift_bridgeObjectRelease();
  }

  else
  {
    os_unfair_lock_lock(v4 + 6);
    a3(v7, v5);
    os_unfair_lock_unlock(v6);
  }

  return swift_bridgeObjectRelease();
}

uint64_t NWParameters.prohibitExpensivePaths.getter()
{
  return sub_181C9AF78((uint64_t (*)(void))nw_parameters_get_prohibit_expensive);
}

void NWParameters.prohibitExpensivePaths.setter(char a1)
{
}

BOOL sub_181C9836C@<W0>(nw_parameters_t *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = nw_parameters_get_prohibit_expensive(*a1);
  *a2 = result;
  return result;
}

void (*NWParameters.prohibitExpensivePaths.modify(uint64_t a1))(os_unfair_lock_s **a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)a1 = v3;
  uint64_t v4 = (os_unfair_lock_s *)(v3 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = nw_parameters_get_prohibit_expensive(*(nw_parameters_t *)(v3 + 16));
  os_unfair_lock_unlock(v4);
  *(_BYTE *)(a1 + 8) = v3;
  return sub_181C983F8;
}

void sub_181C983F8(os_unfair_lock_s **a1, uint64_t a2)
{
}

uint64_t NWParameters.prohibitConstrainedPaths.getter()
{
  return sub_181C9AF78((uint64_t (*)(void))nw_parameters_get_prohibit_constrained);
}

void NWParameters.prohibitConstrainedPaths.setter(char a1)
{
}

BOOL sub_181C9841C@<W0>(nw_parameters_t *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = nw_parameters_get_prohibit_constrained(*a1);
  *a2 = result;
  return result;
}

void (*NWParameters.prohibitConstrainedPaths.modify( uint64_t a1))(os_unfair_lock_s **a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)a1 = v3;
  uint64_t v4 = (os_unfair_lock_s *)(v3 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = nw_parameters_get_prohibit_constrained(*(nw_parameters_t *)(v3 + 16));
  os_unfair_lock_unlock(v4);
  *(_BYTE *)(a1 + 8) = v3;
  return sub_181C984A8;
}

void sub_181C984A8(os_unfair_lock_s **a1, uint64_t a2)
{
}

uint64_t NWParameters.preferNoProxies.getter()
{
  return sub_181C9AF78((uint64_t (*)(void))nw_parameters_get_prefer_no_proxy);
}

void NWParameters.preferNoProxies.setter(char a1)
{
}

BOOL sub_181C984CC@<W0>(nw_parameters_t *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = nw_parameters_get_prefer_no_proxy(*a1);
  *a2 = result;
  return result;
}

void (*NWParameters.preferNoProxies.modify(uint64_t a1))(os_unfair_lock_s **a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)a1 = v3;
  uint64_t v4 = (os_unfair_lock_s *)(v3 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = nw_parameters_get_prefer_no_proxy(*(nw_parameters_t *)(v3 + 16));
  os_unfair_lock_unlock(v4);
  *(_BYTE *)(a1 + 8) = v3;
  return sub_181C98558;
}

void sub_181C98558(os_unfair_lock_s **a1, uint64_t a2)
{
}

void NWParameters.requiredLocalEndpoint.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  uint64_t v4 = (nw_parameters_t *)&v3[4];
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_181C9883C(v4, a1);
  os_unfair_lock_unlock(v5);
}

void sub_181C985BC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(*(void *)a1 + 16LL);
  uint64_t v4 = (nw_parameters_t *)&v3[4];
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_181C9883C(v4, a2);
  os_unfair_lock_unlock(v5);
}

uint64_t sub_181C98618(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
  MEMORY[0x1895F8858](v4);
  char v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_181BE48BC(a1, (uint64_t)v6, &qword_18C45E580);
  uint64_t v7 = *(os_unfair_lock_s **)(*(void *)a2 + 16LL);
  uint64_t v12 = v6;
  unint64_t v8 = (nw_parameters **)&v7[4];
  unint64_t v9 = v7 + 6;
  os_unfair_lock_lock(v7 + 6);
  sub_181C9F570(v8);
  os_unfair_lock_unlock(v9);
  return sub_181BDA0F0((uint64_t)v6, &qword_18C45E580);
}

uint64_t NWParameters.requiredLocalEndpoint.setter(uint64_t a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  uint64_t v4 = (nw_parameters **)&v3[4];
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_181C98744(v4, a1);
  os_unfair_lock_unlock(v5);
  return sub_181BDA0F0(a1, &qword_18C45E580);
}

uint64_t sub_181C98744(nw_parameters **a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
  MEMORY[0x1895F8858](v4);
  char v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *a1;
  sub_181BE48BC(a2, (uint64_t)v6, &qword_18C45E580);
  uint64_t v8 = type metadata accessor for NWEndpoint();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))(v6, 1LL, v8) == 1)
  {
    sub_181BDA0F0((uint64_t)v6, &qword_18C45E580);
    unint64_t v9 = 0LL;
  }

  else
  {
    NWEndpoint.nw.getter();
    unint64_t v9 = v10;
    sub_181BC920C((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
  }

  nw_parameters_set_local_endpoint(v7, v9);
  return swift_unknownObjectRelease();
}

uint64_t sub_181C9883C@<X0>(nw_parameters_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = nw_parameters_copy_local_endpoint(*a1);
  if (v3) {
    return sub_181BDA308(v3, a2);
  }
  uint64_t v5 = type metadata accessor for NWEndpoint();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(a2, 1LL, 1LL, v5);
}

void (*NWParameters.requiredLocalEndpoint.modify(void **a1))(uint64_t a1, char a2)
{
  size_t v3 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580) - 8) + 64LL);
  *a1 = malloc(v3);
  uint64_t v4 = malloc(v3);
  uint64_t v5 = *(os_unfair_lock_s **)(v1 + 16);
  a1[1] = v4;
  a1[2] = v5;
  char v6 = (nw_parameters_t *)&v5[4];
  uint64_t v7 = v5 + 6;
  os_unfair_lock_lock(v5 + 6);
  sub_181C9883C(v6, (uint64_t)v4);
  a1[3] = 0LL;
  os_unfair_lock_unlock(v7);
  return sub_181C9893C;
}

void sub_181C9893C(uint64_t a1, char a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(a1 + 16);
  size_t v3 = *(void **)a1;
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = v2 + 6;
  char v6 = (nw_parameters **)&v2[4];
  if ((a2 & 1) != 0)
  {
    sub_181BE48BC(*(void *)(a1 + 8), (uint64_t)v3, &qword_18C45E580);
    os_unfair_lock_lock(v5);
    sub_181C98744(v6, (uint64_t)v3);
    os_unfair_lock_unlock(v5);
    sub_181BDA0F0((uint64_t)v3, &qword_18C45E580);
  }

  else
  {
    os_unfair_lock_lock(v2 + 6);
    sub_181C98744(v6, (uint64_t)v4);
    os_unfair_lock_unlock(v5);
  }

  sub_181BDA0F0((uint64_t)v4, &qword_18C45E580);
  free(v4);
  free(v3);
}

uint64_t NWParameters.allowLocalEndpointReuse.getter()
{
  return sub_181C9AF78((uint64_t (*)(void))nw_parameters_get_reuse_local_address);
}

void NWParameters.allowLocalEndpointReuse.setter(char a1)
{
}

BOOL sub_181C98A2C@<W0>(nw_parameters_t *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = nw_parameters_get_reuse_local_address(*a1);
  *a2 = result;
  return result;
}

void (*NWParameters.allowLocalEndpointReuse.modify( uint64_t a1))(os_unfair_lock_s **a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)a1 = v3;
  uint64_t v4 = (os_unfair_lock_s *)(v3 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = nw_parameters_get_reuse_local_address(*(nw_parameters_t *)(v3 + 16));
  os_unfair_lock_unlock(v4);
  *(_BYTE *)(a1 + 8) = v3;
  return sub_181C98AB8;
}

void sub_181C98AB8(os_unfair_lock_s **a1, uint64_t a2)
{
}

uint64_t NWParameters.acceptLocalOnly.getter()
{
  return sub_181C9AF78((uint64_t (*)(void))nw_parameters_get_local_only);
}

void NWParameters.acceptLocalOnly.setter(char a1)
{
}

BOOL sub_181C98ADC@<W0>(nw_parameters_t *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = nw_parameters_get_local_only(*a1);
  *a2 = result;
  return result;
}

void (*NWParameters.acceptLocalOnly.modify(uint64_t a1))(os_unfair_lock_s **a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)a1 = v3;
  uint64_t v4 = (os_unfair_lock_s *)(v3 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = nw_parameters_get_local_only(*(nw_parameters_t *)(v3 + 16));
  os_unfair_lock_unlock(v4);
  *(_BYTE *)(a1 + 8) = v3;
  return sub_181C98B68;
}

void sub_181C98B68(os_unfair_lock_s **a1, uint64_t a2)
{
}

uint64_t NWParameters.includePeerToPeer.getter()
{
  return sub_181C9AF78((uint64_t (*)(void))nw_parameters_get_include_peer_to_peer);
}

void NWParameters.includePeerToPeer.setter(char a1)
{
}

BOOL sub_181C98B8C@<W0>(nw_parameters_t *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = nw_parameters_get_include_peer_to_peer(*a1);
  *a2 = result;
  return result;
}

void (*NWParameters.includePeerToPeer.modify(uint64_t a1))(os_unfair_lock_s **a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)a1 = v3;
  uint64_t v4 = (os_unfair_lock_s *)(v3 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = nw_parameters_get_include_peer_to_peer(*(nw_parameters_t *)(v3 + 16));
  os_unfair_lock_unlock(v4);
  *(_BYTE *)(a1 + 8) = v3;
  return sub_181C98C18;
}

void sub_181C98C18(os_unfair_lock_s **a1, uint64_t a2)
{
}

uint64_t NWParameters.requiresDNSSECValidation.getter()
{
  return sub_181C9AF78((uint64_t (*)(void))nw_parameters_requires_dnssec_validation);
}

void NWParameters.requiresDNSSECValidation.setter(char a1)
{
}

BOOL sub_181C98C3C@<W0>(nw_parameters_t *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = nw_parameters_requires_dnssec_validation(*a1);
  *a2 = result;
  return result;
}

void (*NWParameters.requiresDNSSECValidation.modify( uint64_t a1))(os_unfair_lock_s **a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)a1 = v3;
  uint64_t v4 = (os_unfair_lock_s *)(v3 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = nw_parameters_requires_dnssec_validation(*(nw_parameters_t *)(v3 + 16));
  os_unfair_lock_unlock(v4);
  *(_BYTE *)(a1 + 8) = v3;
  return sub_181C98CC8;
}

void sub_181C98CC8(os_unfair_lock_s **a1, uint64_t a2)
{
}

BOOL static NWParameters.ServiceClass.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t NWParameters.ServiceClass.hash(into:)()
{
  return sub_18264F654();
}

void NWParameters.serviceClass.getter(_BYTE *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  nw_service_class_t service_class = nw_parameters_get_service_class(*(nw_parameters_t *)(v3 + 16));
  else {
    char v5 = service_class;
  }
  *a1 = v5;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
}

void NWParameters.serviceClass.setter(unsigned __int8 *a1)
{
}

uint64_t sub_181C98D6C@<X0>(nw_parameters_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = nw_parameters_get_service_class(*a1);
  else {
    char v4 = result;
  }
  *a2 = v4;
  return result;
}

void (*NWParameters.serviceClass.modify(uint64_t a1))(os_unfair_lock_s **a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)a1 = v3;
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  nw_service_class_t service_class = nw_parameters_get_service_class(*(nw_parameters_t *)(v3 + 16));
  else {
    char v5 = service_class;
  }
  *(_BYTE *)(a1 + 8) = v5;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
  return sub_181C98E04;
}

void sub_181C98E04(os_unfair_lock_s **a1, uint64_t a2)
{
}

void NWParameters.multipathServiceType.getter(_BYTE *a1@<X8>)
{
}

void NWParameters.multipathServiceType.setter(unsigned __int8 *a1)
{
}

uint64_t sub_181C98E2C@<X0>(nw_parameters_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = nw_parameters_get_multipath_service(*a1);
  else {
    char v4 = result;
  }
  *a2 = v4;
  return result;
}

void (*NWParameters.multipathServiceType.modify(uint64_t a1))(os_unfair_lock_s **a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)a1 = v3;
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  nw_multipath_service_t multipath_service = nw_parameters_get_multipath_service(*(nw_parameters_t *)(v3 + 16));
  if (multipath_service >= 4) {
    char v5 = 0;
  }
  else {
    char v5 = multipath_service;
  }
  *(_BYTE *)(a1 + 8) = v5;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
  return sub_181C98EC4;
}

void sub_181C98EC4(os_unfair_lock_s **a1, uint64_t a2)
{
}

uint64_t NWParameters.allowFastOpen.getter()
{
  return sub_181C9AF78((uint64_t (*)(void))nw_parameters_get_fast_open_enabled);
}

void NWParameters.allowFastOpen.setter(char a1)
{
}

BOOL sub_181C98EE8@<W0>(nw_parameters_t *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = nw_parameters_get_fast_open_enabled(*a1);
  *a2 = result;
  return result;
}

void (*NWParameters.allowFastOpen.modify(uint64_t a1))(os_unfair_lock_s **a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)a1 = v3;
  char v4 = (os_unfair_lock_s *)(v3 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = nw_parameters_get_fast_open_enabled(*(nw_parameters_t *)(v3 + 16));
  os_unfair_lock_unlock(v4);
  *(_BYTE *)(a1 + 8) = v3;
  return sub_181C98F74;
}

void sub_181C98F74(os_unfair_lock_s **a1, uint64_t a2)
{
}

void NWParameters.expiredDNSBehavior.getter(_BYTE *a1@<X8>)
{
}

void sub_181C98F90(uint64_t (*a1)(void)@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 24));
  unsigned int v6 = a1(*(void *)(v5 + 16));
  if (v6 >= 4) {
    char v7 = 0;
  }
  else {
    char v7 = v6;
  }
  *a2 = v7;
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 24));
}

void sub_181C98FE0( uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr, os_unfair_lock_s *)@<X3>, _BYTE *a3@<X8>)
{
  uint64_t v5 = *(os_unfair_lock_s **)(*(void *)a1 + 16LL);
  unsigned int v6 = v5 + 4;
  char v7 = v5 + 6;
  os_unfair_lock_lock(v5 + 6);
  a2(&v8, v6);
  os_unfair_lock_unlock(v7);
  *a3 = v8;
}

void sub_181C99054( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(os_unfair_lock_s *))
{
  unsigned int v6 = *(os_unfair_lock_s **)(*(void *)a2 + 16LL);
  char v7 = v6 + 4;
  uint64_t v8 = v6 + 6;
  os_unfair_lock_lock(v6 + 6);
  a5(v7);
  os_unfair_lock_unlock(v8);
}

void NWParameters.expiredDNSBehavior.setter(unsigned __int8 *a1)
{
}

void sub_181C990BC(unsigned __int8 *a1, void (*a2)(void, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(v2 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 24));
  a2(*(void *)(v5 + 16), v4);
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 24));
}

uint64_t sub_181C99104@<X0>(nw_parameters_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = nw_parameters_get_expired_dns_behavior(*a1);
  else {
    char v4 = result;
  }
  *a2 = v4;
  return result;
}

void (*NWParameters.expiredDNSBehavior.modify(uint64_t a1))(os_unfair_lock_s **a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)a1 = v3;
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  nw_parameters_expired_dns_behavior_t expired_dns_behavior = nw_parameters_get_expired_dns_behavior(*(nw_parameters_t *)(v3 + 16));
  if (expired_dns_behavior >= 4) {
    char v5 = 0;
  }
  else {
    char v5 = expired_dns_behavior;
  }
  *(_BYTE *)(a1 + 8) = v5;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
  return sub_181C9919C;
}

void sub_181C9919C(os_unfair_lock_s **a1, uint64_t a2)
{
}

void sub_181C991A8(os_unfair_lock_s **a1, uint64_t a2, void (*a3)(void, uint64_t))
{
  char v4 = *a1;
  char v5 = *a1 + 6;
  uint64_t v6 = *((unsigned __int8 *)a1 + 8);
  os_unfair_lock_lock(v5);
  a3(*(void *)&v4[4]._os_unfair_lock_opaque, v6);
  os_unfair_lock_unlock(v5);
}

void sub_181C99204(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(*(void *)a1 + 16LL);
  char v4 = (nw_protocol_stack **)&v3[4];
  char v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_181C994A0(v4, &v6);
  os_unfair_lock_unlock(v5);
  *a2 = v6;
}

uint64_t sub_181C9926C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)a2 + 16LL);
  uint64_t v3 = (nw_protocol_stack_t *)(v2 + 16);
  char v4 = (os_unfair_lock_s *)(v2 + 24);
  swift_bridgeObjectRetain();
  os_unfair_lock_lock(v4);
  sub_181C9F4F8(v3);
  os_unfair_lock_unlock(v4);
  return swift_bridgeObjectRelease();
}

uint64_t sub_181C992D8(unint64_t a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  char v4 = (nw_protocol_stack_t *)&v3[4];
  char v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_181C99334(v4, a1);
  os_unfair_lock_unlock(v5);
  return swift_bridgeObjectRelease();
}

uint64_t sub_181C99334(nw_protocol_stack_t *a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  nw_protocol_stack_clear_application_protocols(*a1);
  if (a2 >> 62) {
    goto LABEL_15;
  }
  uint64_t v4 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = sub_18264F330())
  {
    if ((a2 & 0xC000000000000001LL) != 0)
    {
      while (1)
      {
        BOOL v5 = __OFSUB__(v4--, 1LL);
        if (v5) {
          break;
        }
        uint64_t v6 = MEMORY[0x186E0ED48](v4, a2);
        nw_protocol_stack_prepend_application_protocol(v3, *(nw_protocol_options_t *)(v6 + 16));
        swift_unknownObjectRelease();
        if (!v4) {
          return swift_bridgeObjectRelease();
        }
      }

      __break(1u);
    }

    else
    {
      unint64_t v7 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v8 = v4 - 1;
      while (1)
      {
        BOOL v5 = __OFSUB__(v4--, 1LL);
        if (v5) {
          break;
        }
        if (v8 >= v7) {
          goto LABEL_14;
        }
        nw_protocol_stack_prepend_application_protocol( v3,  *(nw_protocol_options_t *)(*(void *)(a2 + 32 + 8 * v4) + 16LL));
        if (!v4) {
          return swift_bridgeObjectRelease();
        }
      }
    }

    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_181C99444()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (nw_protocol_stack **)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_181C994A0(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t sub_181C994A0@<X0>(nw_protocol_stack **a1@<X0>, void *a2@<X8>)
{
  uint64_t v10 = MEMORY[0x18961AFE8];
  uint64_t v3 = *a1;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = &v10;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_181C9F6B0;
  *(void *)(v5 + 24) = v4;
  aBlock[4] = sub_181C1882C;
  aBlock[5] = v5;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_181C0EC80;
  void aBlock[3] = &block_descriptor_223_0;
  uint64_t v6 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  nw_protocol_stack_iterate_application_protocols(v3, v6);
  _Block_release(v6);
  LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v3 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v8 = v10;
    uint64_t result = swift_release();
    *a2 = v8;
  }

  return result;
}

uint64_t sub_181C995E0(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  if (qword_18C58B1B0 != -1) {
LABEL_18:
  }
    uint64_t result = swift_once();
  uint64_t v4 = off_18C58D200;
  uint64_t v5 = *((void *)off_18C58D200 + 2);
  if (v5)
  {
    uint64_t v6 = *((void *)off_18C58D200 + 4);
    unint64_t v7 = *(uint64_t (**)(uint64_t))(v6 + 88);
    swift_bridgeObjectRetain();
    uint64_t result = v7(v3);
    if ((result & 1) != 0)
    {
LABEL_4:
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t))(v6 + 96))(v3);
      swift_unknownObjectRetain();
      uint64_t v8 = swift_retain();
      MEMORY[0x186E0E844](v8);
      if (*(void *)((*a2 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((*a2 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
        sub_18264ED00();
      }
      sub_18264ED30();
      sub_18264ECDC();
      return swift_release();
    }

    if (v5 != 1)
    {
      if (v4[2] < 2uLL)
      {
        __break(1u);
        return result;
      }

      uint64_t v6 = v4[5];
      uint64_t v9 = 0LL;
      uint64_t v10 = v5 - 2;
      while (v10 != v9)
      {
        if ((unint64_t)(v9 + 2) >= v4[2])
        {
          __break(1u);
          goto LABEL_18;
        }

        uint64_t v6 = v4[v9++ + 6];
      }
    }

    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t (*sub_181C99778(void *a1))(unint64_t *a1, char a2)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  a1[1] = v3;
  uint64_t v4 = (nw_protocol_stack **)&v3[4];
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_181C994A0(v4, &v7);
  a1[2] = 0LL;
  os_unfair_lock_unlock(v5);
  *a1 = v7;
  return sub_181C997F0;
}

uint64_t sub_181C997F0(unint64_t *a1, char a2)
{
  uint64_t v2 = (os_unfair_lock_s *)a1[1];
  unint64_t v3 = *a1;
  uint64_t v4 = v2 + 6;
  uint64_t v5 = (nw_protocol_stack_t *)&v2[4];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    os_unfair_lock_lock(v4);
    sub_181C99334(v5, v3);
    os_unfair_lock_unlock(v4);
    swift_bridgeObjectRelease();
  }

  else
  {
    os_unfair_lock_lock(v2 + 6);
    sub_181C99334(v5, v3);
    os_unfair_lock_unlock(v4);
  }

  return swift_bridgeObjectRelease();
}

void *sub_181C998AC(void *result, uint64_t a2)
{
  if (*result)
  {
    uint64_t v2 = *(void *)(*(void *)a2 + 16LL);
    unint64_t v3 = (nw_protocol_stack_t *)(v2 + 16);
    uint64_t v4 = (os_unfair_lock_s *)(v2 + 24);
    swift_retain_n();
    os_unfair_lock_lock(v4);
    sub_181C9F4EC(v3);
    os_unfair_lock_unlock(v4);
    return (void *)swift_release_n();
  }

  return result;
}

uint64_t sub_181C99914(uint64_t result)
{
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(v1 + 16);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
    nw_protocol_stack_set_transport_protocol(*(nw_protocol_stack_t *)(v3 + 16), *(nw_protocol_options_t *)(v2 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
    return swift_release_n();
  }

  return result;
}

uint64_t sub_181C99970()
{
  return sub_181C99A80((uint64_t (*)(void))nw_protocol_stack_copy_transport_protocol);
}

uint64_t *(*sub_181C9997C(uint64_t *a1))(uint64_t *result, char a2)
{
  a1[1] = v1;
  *a1 = sub_181C99970();
  return sub_181C999B0;
}

uint64_t *sub_181C999B0(uint64_t *result, char a2)
{
  uint64_t v2 = *result;
  if ((a2 & 1) != 0)
  {
    if (v2)
    {
      uint64_t v3 = *(void *)(result[1] + 16);
      swift_retain_n();
      os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
      nw_protocol_stack_set_transport_protocol(*(nw_protocol_stack_t *)(v3 + 16), *(nw_protocol_options_t *)(v2 + 16));
      os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
      swift_release_n();
    }

    return (uint64_t *)swift_release();
  }

  else if (v2)
  {
    uint64_t v4 = *(void *)(result[1] + 16);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v4 + 24));
    nw_protocol_stack_set_transport_protocol(*(nw_protocol_stack_t *)(v4 + 16), *(nw_protocol_options_t *)(v2 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 24));
    return (uint64_t *)swift_release_n();
  }

  return result;
}

uint64_t sub_181C99A74()
{
  return sub_181C99A80((uint64_t (*)(void))nw_protocol_stack_copy_internet_protocol);
}

uint64_t sub_181C99A80(uint64_t (*a1)(void))
{
  uint64_t v3 = *(void *)(v1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  uint64_t v4 = a1(*(void *)(v3 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
  if (v4)
  {
    uint64_t v5 = sub_181C32C28(v4);
    if (v5) {
      return ((uint64_t (*)(uint64_t))v5[12])(v4);
    }
    swift_unknownObjectRelease();
  }

  return 0LL;
}

uint64_t (*sub_181C99AF8(uint64_t *a1))()
{
  *a1 = sub_181C99A74();
  return destroy for NWConnection.EstablishmentReport.Handshake;
}

uint64_t NWParameters.ProtocolStack.deinit()
{
  return v0;
}

uint64_t sub_181C99B48@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_181C9AEEC( a1,  (uint64_t (*)(void))nw_parameters_copy_default_protocol_stack,  (void (*)(void))type metadata accessor for NWParameters.ProtocolStack,  (uint64_t *)&unk_18C58A228,  a2);
}

uint64_t _s7Network12NWParametersC16debugDescriptionSSvg_0()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (id *)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_181C99BD4(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

void sub_181C99BD4(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_description);
  uint64_t v4 = sub_18264EA48();
  uint64_t v6 = v5;

  *a2 = v4;
  a2[1] = v6;
}

uint64_t sub_181C99C38()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 24) = MEMORY[0x18961AFE8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E838);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 24) = 0;
  *(void *)(v1 + 16) = &__block_literal_global_11084;
  *(void *)(v0 + 16) = v1;
  qword_18C58E830 = v0;
  return swift_unknownObjectRetain();
}

uint64_t static NWParameters.PrivacyContext.default.getter()
{
  if (qword_18C58B250 != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t NWParameters.PrivacyContext.__allocating_init(description:)()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 24) = MEMORY[0x18961AFE8];
  uint64_t v1 = sub_18264EACC();
  swift_bridgeObjectRelease();
  nw_privacy_context_t v2 = nw_privacy_context_create((const char *)(v1 + 32));
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E838);
  uint64_t v3 = swift_allocObject();
  *(_DWORD *)(v3 + 24) = 0;
  *(void *)(v3 + 16) = v2;
  *(void *)(v0 + 16) = v3;
  return v0;
}

uint64_t NWParameters.PrivacyContext.init(description:)()
{
  *(void *)(v0 + 24) = MEMORY[0x18961AFE8];
  uint64_t v1 = sub_18264EACC();
  swift_bridgeObjectRelease();
  nw_privacy_context_t v2 = nw_privacy_context_create((const char *)(v1 + 32));
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E838);
  uint64_t v3 = swift_allocObject();
  *(_DWORD *)(v3 + 24) = 0;
  *(void *)(v3 + 16) = v2;
  *(void *)(v0 + 16) = v3;
  return v0;
}

void sub_181C99E04()
{
}

void sub_181C99E10()
{
}

void sub_181C99E1C(void (*a1)(void))
{
  uint64_t v3 = *(void *)(v1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  a1(*(void *)(v3 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
}

uint64_t NWParameters.PrivacyContext.ResolverConfiguration.debugDescription.getter()
{
  uint64_t v0 = sub_181C99ED4();
  if (!v0) {
    return 7104878LL;
  }
  id v1 = -[nw_resolver_config description](v0, sel_description);
  swift_unknownObjectRelease();
  uint64_t v2 = sub_18264EA48();

  return v2;
}

nw_resolver_config *sub_181C99ED4()
{
  uint64_t v1 = sub_18264E568();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1895F8858](v1);
  uint64_t v4 = (char *)v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for NWEndpoint();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](v5);
  uint64_t v9 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = MEMORY[0x1895F8858](v7);
  uint64_t v12 = (char *)v34 - v11;
  MEMORY[0x1895F8858](v10);
  unint64_t v14 = (char *)v34 - v13;
  uint64_t v15 = type metadata accessor for NWParameters.PrivacyContext.ResolverConfiguration();
  MEMORY[0x1895F8858](v15);
  id v17 = (char *)v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_181BC9248(v0, (uint64_t)v17, v18);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = *(void *)&v17[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C58E878) + 48)];
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v17, v1);
    uint64_t v20 = (const __CFURL *)sub_18264E520();
    BOOL v21 = nw_endpoint_create_with_cfurl(v20);

    https = nw_resolver_config_create_https((nw_endpoint_t)v21);
    if (https)
    {
      uint64_t v23 = *(void *)(v19 + 16);
      if (v23)
      {
        v34[0] = v21;
        v34[1] = v19;
        uint64_t v24 = v19 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
        uint64_t v25 = *(void *)(v6 + 72);
        swift_unknownObjectRetain();
        do
        {
          sub_181BC9248(v24, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
          NWEndpoint.nw.getter();
          if (v26)
          {
            nw_resolver_config_add_server_address(https, v26);
            swift_unknownObjectRelease();
          }

          sub_181BC920C((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
          v24 += v25;
          --v23;
        }

        while (v23);
        swift_unknownObjectRelease();
      }

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
  }

  else
  {
    uint64_t v27 = *(void *)&v17[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C58E870) + 48)];
    sub_181BE4800((uint64_t)v17, (uint64_t)v14);
    NWEndpoint.nw.getter();
    if (v28)
    {
      https = nw_resolver_config_create_tls(v28);
      if (https)
      {
        uint64_t v29 = *(void *)(v27 + 16);
        if (v29)
        {
          uint64_t v30 = v27 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
          uint64_t v31 = *(void *)(v6 + 72);
          swift_unknownObjectRetain();
          do
          {
            sub_181BC9248(v30, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
            NWEndpoint.nw.getter();
            if (v32)
            {
              nw_resolver_config_add_server_address(https, v32);
              swift_unknownObjectRelease();
            }

            sub_181BC920C((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
            v30 += v31;
            --v29;
          }

          while (v29);
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
        }

        else
        {
          swift_bridgeObjectRelease();
        }

        swift_unknownObjectRelease();
        sub_181BC920C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
      }

      else
      {
        sub_181BC920C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
      }
    }

    else
    {
      sub_181BC920C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
      swift_bridgeObjectRelease();
      return 0LL;
    }
  }

  return https;
}

uint64_t sub_181C9A278()
{
  uint64_t v0 = sub_181C99ED4();
  if (!v0) {
    return 7104878LL;
  }
  id v1 = -[nw_resolver_config description](v0, sel_description);
  swift_unknownObjectRelease();
  uint64_t v2 = sub_18264EA48();

  return v2;
}

void sub_181C9A2F0(char a1, uint64_t a2)
{
  uint64_t v5 = *(os_unfair_lock_s **)(v2 + 16);
  uint64_t v6 = (nw_privacy_context **)&v5[4];
  uint64_t v7 = v5 + 6;
  os_unfair_lock_lock(v5 + 6);
  sub_181C9A34C(v6, a1, a2);
  os_unfair_lock_unlock(v7);
}

uint64_t sub_181C9A34C(nw_privacy_context **a1, char a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E930);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *a1;
  sub_181BE48BC(a3, (uint64_t)v8, &qword_18C58E930);
  uint64_t v10 = type metadata accessor for NWParameters.PrivacyContext.ResolverConfiguration();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))(v8, 1LL, v10) == 1)
  {
    sub_181BDA0F0((uint64_t)v8, &qword_18C58E930);
    uint64_t v11 = 0LL;
  }

  else
  {
    uint64_t v11 = sub_181C99ED4();
    sub_181BC920C( (uint64_t)v8,  (uint64_t (*)(void))type metadata accessor for NWParameters.PrivacyContext.ResolverConfiguration);
  }

  nw_privacy_context_require_encrypted_name_resolution(v9, a2 & 1, v11);
  return swift_unknownObjectRelease();
}

void sub_181C9A44C(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (os_unfair_lock_s *)(*(void *)(*(void *)a1 + 16LL) + 24LL);
  os_unfair_lock_lock(v3);
  sub_181C9F4E0(a2);
  os_unfair_lock_unlock(v3);
}

uint64_t sub_181C9A490(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)a2 + 16LL);
  uint64_t v3 = (nw_privacy_context **)(v2 + 16);
  uint64_t v4 = (os_unfair_lock_s *)(v2 + 24);
  swift_bridgeObjectRetain();
  os_unfair_lock_lock(v4);
  sub_181C9F4C8(v3);
  os_unfair_lock_unlock(v4);
  return swift_bridgeObjectRelease();
}

uint64_t sub_181C9A4FC(uint64_t a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  uint64_t v4 = (nw_privacy_context **)&v3[4];
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_181C9A55C(v4, v1, a1);
  os_unfair_lock_unlock(v5);
  return swift_bridgeObjectRelease();
}

void sub_181C9A55C(nw_privacy_context **a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a2 + 24) = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = *a1;
  nw_privacy_context_clear_proxies(v5);
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0LL; i != v6; ++i)
    {
      uint64_t v8 = *(nw_proxy_config **)(a3 + 8 * i + 32);
      nw_privacy_context_add_proxy(v5, v8);
    }

    swift_bridgeObjectRelease();
  }

uint64_t sub_181C9A5F0()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(v0 + 16) + 24LL);
  os_unfair_lock_lock(v1);
  uint64_t v2 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v1);
  return v2;
}

uint64_t (*sub_181C9A630(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  a1[1] = v1;
  a1[2] = v3;
  uint64_t v4 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  uint64_t v5 = *(void *)(v1 + 24);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v4);
  *a1 = v5;
  return sub_181C9A68C;
}

uint64_t sub_181C9A68C(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = (os_unfair_lock_s *)a1[2];
  uint64_t v5 = v4 + 6;
  uint64_t v6 = (nw_privacy_context **)&v4[4];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    os_unfair_lock_lock(v5);
    sub_181C9A55C(v6, v3, v2);
    os_unfair_lock_unlock(v5);
    swift_bridgeObjectRelease();
  }

  else
  {
    os_unfair_lock_lock(v4 + 6);
    sub_181C9A55C(v6, v3, v2);
    os_unfair_lock_unlock(v5);
  }

  return swift_bridgeObjectRelease();
}

uint64_t NWParameters.PrivacyContext.deinit()
{
  return v0;
}

uint64_t NWParameters.PrivacyContext.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t NWParameters.requiredNetworkAgents.getter()
{
  return sub_181C9A7C0( (uint64_t (*)(void))nw_parameters_copy_required_netagent_domains,  (uint64_t (*)(uint64_t))nw_parameters_copy_required_netagent_types);
}

uint64_t sub_181C9A7C0(uint64_t (*a1)(void), uint64_t (*a2)(uint64_t))
{
  uint64_t v5 = *(os_unfair_lock_s **)(v2 + 16);
  uint64_t v6 = v5 + 4;
  uint64_t v7 = v5 + 6;
  os_unfair_lock_lock(v5 + 6);
  sub_181C9AB60(v6, a1, a2, &v9);
  os_unfair_lock_unlock(v7);
  return v9;
}

void sub_181C9A834( uint64_t a1@<X0>, uint64_t (*a2)(void)@<X3>, uint64_t (*a3)(uint64_t)@<X4>, void *a4@<X8>)
{
  uint64_t v7 = *(os_unfair_lock_s **)(*(void *)a1 + 16LL);
  uint64_t v8 = v7 + 4;
  uint64_t v9 = v7 + 6;
  os_unfair_lock_lock(v7 + 6);
  sub_181C9AB60(v8, a2, a3, &v10);
  os_unfair_lock_unlock(v9);
  *a4 = v10;
}

uint64_t NWParameters.requiredNetworkAgents.setter(uint64_t a1)
{
  return sub_181C9A970( a1,  (void (*)(uint64_t, xpc_object_t, xpc_object_t))nw_parameters_set_required_netagent_classes);
}

uint64_t (*NWParameters.requiredNetworkAgents.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  uint64_t v4 = v3 + 4;
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_181C9AB60( v4,  (uint64_t (*)(void))nw_parameters_copy_required_netagent_domains,  (uint64_t (*)(uint64_t))nw_parameters_copy_required_netagent_types,  &v7);
  os_unfair_lock_unlock(v5);
  *a1 = v7;
  return sub_181C9A944;
}

uint64_t sub_181C9A944(uint64_t *a1, char a2)
{
  return sub_181C9ADA8(a1, a2, NWParameters.requiredNetworkAgents.setter);
}

uint64_t NWParameters.preferredNetworkAgents.getter()
{
  return sub_181C9A7C0( (uint64_t (*)(void))nw_parameters_copy_preferred_netagent_domains,  (uint64_t (*)(uint64_t))nw_parameters_copy_preferred_netagent_types);
}

uint64_t NWParameters.preferredNetworkAgents.setter(uint64_t a1)
{
  return sub_181C9A970( a1,  (void (*)(uint64_t, xpc_object_t, xpc_object_t))nw_parameters_set_preferred_netagent_classes);
}

uint64_t sub_181C9A970(uint64_t a1, void (*a2)(uint64_t, xpc_object_t, xpc_object_t))
{
  xpc_object_t v5 = xpc_array_create(0LL, 0LL);
  xpc_object_t v6 = xpc_array_create(0LL, 0LL);
  uint64_t v7 = *(void *)(v2 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 24));
  sub_181C9AA4C(v7 + 16, a1, v5, v6);
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 24));
  swift_bridgeObjectRelease();
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 24));
  uint64_t v8 = *(void *)(v7 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 24));
  a2(v8, v5, v6);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

void sub_181C9AA4C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    uint64_t v7 = swift_bridgeObjectRetain() + 56;
    do
    {
      uint64_t v8 = (const char *)(sub_18264EACC() + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      xpc_object_t v9 = xpc_string_create(v8);
      swift_release();
      xpc_array_append_value(a3, v9);
      swift_bridgeObjectRelease();
      uint64_t v10 = sub_18264EACC();
      swift_bridgeObjectRelease();
      xpc_object_t v11 = xpc_string_create((const char *)(v10 + 32));
      swift_release();
      xpc_array_append_value(a4, v11);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v7 += 32LL;
      --v4;
    }

    while (v4);
    swift_bridgeObjectRelease();
  }

uint64_t sub_181C9AB60@<X0>( void *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t (*a3)(uint64_t)@<X2>, void *a4@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t result = a2(*a1);
  if (!result)
  {
    uint64_t v13 = (void *)MEMORY[0x18961AFE8];
LABEL_20:
    *a4 = v13;
    return result;
  }

  uint64_t v8 = (void *)result;
  uint64_t v9 = a3(v6);
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x18961AFE8];
    goto LABEL_19;
  }

  uint64_t v10 = (void *)v9;
  size_t count = xpc_array_get_count(v8);
  uint64_t result = xpc_array_get_count(v10);
  uint64_t v23 = a4;
  if (count != result) {
    goto LABEL_16;
  }
  if ((count & 0x8000000000000000LL) == 0)
  {
    if (count)
    {
      size_t v12 = 0LL;
      uint64_t v13 = (void *)MEMORY[0x18961AFE8];
      uint64_t v25 = v10;
      size_t v24 = count;
      do
      {
        if (xpc_array_get_string(v8, v12) && xpc_array_get_string(v10, v12))
        {
          uint64_t v15 = sub_18264EB80();
          uint64_t v17 = v16;
          uint64_t v18 = sub_18264EB80();
          uint64_t v20 = v19;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v13 = sub_181BC59F4(0LL, v13[2] + 1LL, 1, v13);
          }
          unint64_t v22 = v13[2];
          unint64_t v21 = v13[3];
          if (v22 >= v21 >> 1) {
            uint64_t v13 = sub_181BC59F4((void *)(v21 > 1), v22 + 1, 1, v13);
          }
          void v13[2] = v22 + 1;
          unint64_t v14 = &v13[4 * v22];
          v14[4] = v15;
          uint64_t v14[5] = v17;
          void v14[6] = v18;
          v14[7] = v20;
          uint64_t v10 = v25;
          size_t count = v24;
        }

        ++v12;
      }

      while (count != v12);
      goto LABEL_17;
    }

uint64_t (*NWParameters.preferredNetworkAgents.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  uint64_t v4 = v3 + 4;
  xpc_object_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_181C9AB60( v4,  (uint64_t (*)(void))nw_parameters_copy_preferred_netagent_domains,  (uint64_t (*)(uint64_t))nw_parameters_copy_preferred_netagent_types,  &v7);
  os_unfair_lock_unlock(v5);
  *a1 = v7;
  return sub_181C9AD9C;
}

uint64_t sub_181C9AD9C(uint64_t *a1, char a2)
{
  return sub_181C9ADA8(a1, a2, NWParameters.preferredNetworkAgents.setter);
}

uint64_t sub_181C9ADA8(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t))
{
  if ((a2 & 1) == 0) {
    return a3(*a1);
  }
  uint64_t v4 = swift_bridgeObjectRetain();
  a3(v4);
  return swift_bridgeObjectRelease();
}

void NWParameters.setPrivacyContext(_:)(uint64_t a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  uint64_t v4 = (nw_parameters **)&v3[4];
  xpc_object_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_181C9AE50(v4, a1);
  os_unfair_lock_unlock(v5);
}

void sub_181C9AE50(nw_parameters **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(a2 + 16);
  xpc_object_t v5 = (os_unfair_lock_s *)(v4 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 24));
  uint64_t v6 = *(nw_privacy_context **)(v4 + 16);
  swift_unknownObjectRetain();
  os_unfair_lock_unlock(v5);
  if (v2)
  {
    __break(1u);
  }

  else
  {
    nw_parameters_set_privacy_context(v3, v6);
    swift_unknownObjectRelease();
  }

uint64_t sub_181C9AEC0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_181C9AEEC( a1,  (uint64_t (*)(void))nw_parameters_copy,  (void (*)(void))type metadata accessor for NWParameters,  &qword_18C58A220,  a2);
}

uint64_t sub_181C9AEEC@<X0>( void *a1@<X0>, uint64_t (*a2)(void)@<X1>, void (*a3)(void)@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8 = a2(*a1);
  a3();
  uint64_t v9 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(a4);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = v8;
  *(void *)(v9 + 16) = result;
  *a5 = v9;
  return result;
}

uint64_t NWParameters.isKnownTracker.getter()
{
  return sub_181C9AF78((uint64_t (*)(void))nw_parameters_get_is_known_tracker);
}

uint64_t sub_181C9AF78(uint64_t (*a1)(void))
{
  uint64_t v3 = *(void *)(v1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  uint64_t v4 = a1(*(void *)(v3 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
  return v4;
}

void NWParameters.isKnownTracker.setter(char a1)
{
}

void sub_181C9AFD0(char a1, void (*a2)(void, void))
{
  uint64_t v5 = *(void *)(v2 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 24));
  a2(*(void *)(v5 + 16), a1 & 1);
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 24));
}

uint64_t sub_181C9B018@<X0>(void **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = nw_parameters_get_is_known_tracker(*a1);
  *a2 = result;
  return result;
}

void (*NWParameters.isKnownTracker.modify(uint64_t a1))(os_unfair_lock_s **a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)a1 = v3;
  uint64_t v4 = (os_unfair_lock_s *)(v3 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = nw_parameters_get_is_known_tracker(*(void **)(v3 + 16));
  os_unfair_lock_unlock(v4);
  *(_BYTE *)(a1 + 8) = v3;
  return sub_181C9B0A4;
}

void sub_181C9B0A4(os_unfair_lock_s **a1, uint64_t a2)
{
}

void sub_181C9B0B0(os_unfair_lock_s **a1, uint64_t a2, void (*a3)(void, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a1 + 6;
  uint64_t v6 = *((unsigned __int8 *)a1 + 8);
  os_unfair_lock_lock(v5);
  a3(*(void *)&v4[4]._os_unfair_lock_opaque, v6);
  os_unfair_lock_unlock(v5);
}

uint64_t NWParameters.Attribution.hash(into:)()
{
  return sub_18264F654();
}

BOOL static NWParameters.Attribution.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t NWParameters.Attribution.hashValue.getter()
{
  return sub_18264F684();
}

void NWParameters.attribution.getter(BOOL *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  *a1 = nw_parameters_get_attribution(*(nw_parameters_t *)(v3 + 16)) == nw_parameters_attribution_user;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
}

void sub_181C9B1C8(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(*(void *)a1 + 16LL);
  uint64_t v4 = (nw_parameters_t *)&v3[4];
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_181C9B27C(v4, &v6);
  os_unfair_lock_unlock(v5);
  *a2 = v6;
}

void NWParameters.attribution.setter(unsigned __int8 *a1)
{
  int v2 = *a1;
  uint64_t v3 = *(void *)(v1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  if (v2) {
    nw_parameters_attribution_t v4 = nw_parameters_attribution_user;
  }
  else {
    nw_parameters_attribution_t v4 = nw_parameters_attribution_developer;
  }
  nw_parameters_set_attribution(*(nw_parameters_t *)(v3 + 16), v4);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
}

uint64_t sub_181C9B27C@<X0>(nw_parameters_t *a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t result = nw_parameters_get_attribution(*a1);
  *a2 = (_DWORD)result == 2;
  return result;
}

void (*NWParameters.attribution.modify(uint64_t a1))(os_unfair_lock_s **a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)a1 = v3;
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  *(_BYTE *)(a1 + 8) = nw_parameters_get_attribution(*(nw_parameters_t *)(v3 + 16)) == nw_parameters_attribution_user;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
  return sub_181C9B314;
}

void sub_181C9B314(os_unfair_lock_s **a1)
{
  uint64_t v1 = *a1;
  int v2 = *a1 + 6;
  int v3 = *((unsigned __int8 *)a1 + 8);
  os_unfair_lock_lock(v2);
  if (v3) {
    nw_parameters_attribution_t v4 = nw_parameters_attribution_user;
  }
  else {
    nw_parameters_attribution_t v4 = nw_parameters_attribution_developer;
  }
  nw_parameters_set_attribution(*(nw_parameters_t *)&v1[4]._os_unfair_lock_opaque, v4);
  os_unfair_lock_unlock(v2);
}

uint64_t NWParameters.accountID.getter()
{
  return sub_181C9B404((uint64_t (*)(void))nw_parameters_get_account_id);
}

uint64_t NWParameters.accountID.setter(uint64_t a1, uint64_t a2)
{
  return sub_181C9B568(a1, a2, (void (*)(uint64_t, uint64_t))nw_parameters_set_account_id);
}

uint64_t (*NWParameters.accountID.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = *(void *)(v1 + 16);
  a1[2] = v3;
  nw_parameters_attribution_t v4 = (os_unfair_lock_s *)(v3 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  if (nw_parameters_get_account_id(*(void **)(v3 + 16)))
  {
    uint64_t v5 = sub_18264EB80();
    uint64_t v7 = v6;
  }

  else
  {
    uint64_t v5 = 0LL;
    uint64_t v7 = 0LL;
  }

  os_unfair_lock_unlock(v4);
  *a1 = v5;
  a1[1] = v7;
  return sub_181C9B3EC;
}

uint64_t sub_181C9B3EC(uint64_t *a1, char a2)
{
  return sub_181C9B700(a1, a2, (void (*)(uint64_t, uint64_t))nw_parameters_set_account_id);
}

uint64_t NWParameters.sourceApplicationBundleID.getter()
{
  return sub_181C9B404((uint64_t (*)(void))nw_parameters_get_effective_bundle_id);
}

uint64_t sub_181C9B404(uint64_t (*a1)(void))
{
  uint64_t v3 = *(void *)(v1 + 16);
  nw_parameters_attribution_t v4 = (os_unfair_lock_s *)(v3 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  if (a1(*(void *)(v3 + 16))) {
    uint64_t v5 = sub_18264EB80();
  }
  else {
    uint64_t v5 = 0LL;
  }
  os_unfair_lock_unlock(v4);
  return v5;
}

double sub_181C9B46C@<D0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X3>, _OWORD *a3@<X8>)
{
  uint64_t v5 = *(os_unfair_lock_s **)(*(void *)a1 + 16LL);
  uint64_t v6 = v5 + 4;
  uint64_t v7 = v5 + 6;
  os_unfair_lock_lock(v5 + 6);
  sub_181C9B640(v6, a2, (uint64_t *)&v9);
  os_unfair_lock_unlock(v7);
  double result = *(double *)&v9;
  *a3 = v9;
  return result;
}

uint64_t sub_181C9B4E4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(os_unfair_lock_s *))
{
  uint64_t v6 = *(os_unfair_lock_s **)(*(void *)a2 + 16LL);
  uint64_t v7 = v6 + 4;
  uint64_t v8 = v6 + 6;
  swift_bridgeObjectRetain();
  os_unfair_lock_lock(v8);
  a5(v7);
  os_unfair_lock_unlock(v8);
  return swift_bridgeObjectRelease();
}

uint64_t NWParameters.sourceApplicationBundleID.setter(uint64_t a1, uint64_t a2)
{
  return sub_181C9B568(a1, a2, (void (*)(uint64_t, uint64_t))nw_parameters_set_source_application_by_bundle_id);
}

uint64_t sub_181C9B568(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v7 = *(os_unfair_lock_s **)(v3 + 16);
  uint64_t v8 = (uint64_t *)&v7[4];
  __int128 v9 = v7 + 6;
  os_unfair_lock_lock(v7 + 6);
  sub_181C9B5DC(v8, a1, a2, a3);
  os_unfair_lock_unlock(v9);
  return swift_bridgeObjectRelease();
}

uint64_t sub_181C9B5DC(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v5 = *a1;
  if (a3) {
    uint64_t v6 = sub_18264EACC() + 32;
  }
  else {
    uint64_t v6 = 0LL;
  }
  a4(v5, v6);
  return swift_unknownObjectRelease();
}

uint64_t sub_181C9B640@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = a2(*a1);
  if (result) {
    uint64_t result = sub_18264EB80();
  }
  else {
    uint64_t v5 = 0LL;
  }
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t (*NWParameters.sourceApplicationBundleID.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = *(void *)(v1 + 16);
  a1[2] = v3;
  nw_parameters_attribution_t v4 = (os_unfair_lock_s *)(v3 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  if (nw_parameters_get_effective_bundle_id(*(void **)(v3 + 16)))
  {
    uint64_t v5 = sub_18264EB80();
    uint64_t v7 = v6;
  }

  else
  {
    uint64_t v5 = 0LL;
    uint64_t v7 = 0LL;
  }

  os_unfair_lock_unlock(v4);
  *a1 = v5;
  a1[1] = v7;
  return sub_181C9B6F4;
}

uint64_t sub_181C9B6F4(uint64_t *a1, char a2)
{
  return sub_181C9B700(a1, a2, (void (*)(uint64_t, uint64_t))nw_parameters_set_source_application_by_bundle_id);
}

uint64_t sub_181C9B700(uint64_t *a1, char a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = (os_unfair_lock_s *)a1[2];
  uint64_t v7 = v6 + 6;
  uint64_t v8 = (uint64_t *)&v6[4];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    os_unfair_lock_lock(v7);
    sub_181C9B5DC(v8, v5, v4, a3);
    os_unfair_lock_unlock(v7);
    swift_bridgeObjectRelease();
  }

  else
  {
    os_unfair_lock_lock(v6 + 6);
    sub_181C9B5DC(v8, v5, v4, a3);
    os_unfair_lock_unlock(v7);
  }

  return swift_bridgeObjectRelease();
}

void NWParameters.applicationID.getter(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  *a1 = nw_parameters_copy_application_id(*(void **)(v3 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
}

void *sub_181C9B81C(void *result)
{
  if (*result)
  {
    MEMORY[0x1895F8858](result);
    int v2 = (void **)(v1 + 16);
    uint64_t v3 = (os_unfair_lock_s *)(v1 + 24);
    swift_unknownObjectRetain();
    os_unfair_lock_lock(v3);
    sub_181C9F458(v2);
    os_unfair_lock_unlock(v3);
    return (void *)swift_unknownObjectRelease();
  }

  return result;
}

void **NWParameters.applicationID.setter(void **result)
{
  int v2 = *result;
  if (*result)
  {
    uint64_t v3 = *(void *)(v1 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
    nw_parameters_set_application_id(*(void **)(v3 + 16), v2);
    os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
    return (void **)swift_unknownObjectRelease();
  }

  return result;
}

BOOL sub_181C9B90C@<W0>(void **a1@<X0>, BOOL *a2@<X8>)
{
  BOOL result = nw_parameters_copy_application_id(*a1);
  *a2 = result;
  return result;
}

uint64_t (*NWParameters.applicationID.modify(void *a1))(uint64_t result, char a2)
{
  uint64_t v3 = *(void *)(v1 + 16);
  a1[1] = v3;
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  *a1 = nw_parameters_copy_application_id(*(void **)(v3 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
  return sub_181C9B994;
}

uint64_t sub_181C9B994(uint64_t result, char a2)
{
  int v2 = *(void **)result;
  if ((a2 & 1) != 0)
  {
    if (v2)
    {
      uint64_t v3 = *(void *)(result + 8);
      swift_unknownObjectRetain();
      os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
      nw_parameters_set_application_id(*(void **)(v3 + 16), v2);
      os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
      swift_unknownObjectRelease();
    }

    return swift_unknownObjectRelease();
  }

  else if (v2)
  {
    uint64_t v4 = *(void *)(result + 8);
    os_unfair_lock_lock((os_unfair_lock_t)(v4 + 24));
    nw_parameters_set_application_id(*(void **)(v4 + 16), v2);
    os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 24));
    return swift_unknownObjectRelease();
  }

  return result;
}

uint64_t _s7Network12NWParametersC13ProtocolStackCfD_0()
{
  return swift_deallocClassInstance();
}

uint64_t sub_181C9BA70()
{
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)v0 + 16LL);
  int v2 = (id *)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_181C99BD4(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t ProxyConfiguration.nw.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ProxyConfiguration.init(_nw:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

BOOL ProxyConfiguration.allowFailover.getter()
{
  return nw_proxy_config_get_failover_allowed(*v0);
}

void ProxyConfiguration.allowFailover.setter(char a1)
{
}

void (*ProxyConfiguration.allowFailover.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = nw_proxy_config_get_failover_allowed(*v1);
  return sub_181C9BB44;
}

void sub_181C9BB44(uint64_t a1)
{
}

uint64_t ProxyConfiguration.matchDomains.getter()
{
  uint64_t v1 = *v0;
  uint64_t v8 = MEMORY[0x18961AFE8];
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = &v8;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_181C9DBC4;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_181BD639C;
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_181C9BCCC;
  void aBlock[3] = &block_descriptor_18;
  uint64_t v4 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_proxy_config_enumerate_match_domains(v1, v4);
  swift_unknownObjectRelease();
  _Block_release(v4);
  LOBYTE(sub_181BCD4F0(v0, v1) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v1 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v6 = v8;
    swift_release();
    return v6;
  }

  return result;
}

uint64_t ProxyConfiguration.matchDomains.setter(uint64_t a1)
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_181C9BCCC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 32))(a2);
}

void (*ProxyConfiguration.matchDomains.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x48uLL);
  uint64_t v4 = MEMORY[0x18961AFE8];
  *a1 = v3;
  v3[7] = v4;
  v3[8] = v1;
  uint64_t v5 = *v1;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v3 + 7;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_181C9F6D4;
  *(void *)(v7 + 24) = v6;
  void v3[4] = sub_181BDA300;
  v3[5] = v7;
  void *v3 = MEMORY[0x1895F87A8];
  v3[1] = 1107296256LL;
  v3[2] = sub_181C9BCCC;
  v3[3] = &block_descriptor_68;
  uint64_t v8 = _Block_copy(v3);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_proxy_config_enumerate_match_domains(v5, v8);
  swift_unknownObjectRelease();
  _Block_release(v8);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = (void (*)(uint64_t, char))swift_release();
  if ((v5 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v10 = v3[7];
    swift_release();
    v3[6] = v10;
    return sub_181C9BE58;
  }

  return result;
}

void sub_181C9BE58(uint64_t a1, char a2)
{
}

uint64_t ProxyConfiguration.excludedDomains.getter()
{
  uint64_t v1 = *v0;
  uint64_t v8 = MEMORY[0x18961AFE8];
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = &v8;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_181C9F6D4;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_181BDA300;
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_181C9BCCC;
  void aBlock[3] = &block_descriptor_78;
  uint64_t v4 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_proxy_config_enumerate_match_domains(v1, v4);
  swift_unknownObjectRelease();
  _Block_release(v4);
  LOBYTE(sub_181BCD4F0(v0, v1) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v1 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v6 = v8;
    swift_release();
    return v6;
  }

  return result;
}

uint64_t ProxyConfiguration.excludedDomains.setter(uint64_t a1)
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_181C9BFE4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_18264EB80();
  uint64_t v5 = v4;
  uint64_t v6 = (void *)*a2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *a2 = (uint64_t)v6;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_181BC4728(0LL, v6[2] + 1LL, 1, v6);
    uint64_t v6 = (void *)result;
    *a2 = result;
  }

  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1)
  {
    uint64_t result = (uint64_t)sub_181BC4728((void *)(v8 > 1), v9 + 1, 1, v6);
    uint64_t v6 = (void *)result;
    *a2 = result;
  }

  _OWORD v6[2] = v9 + 1;
  uint64_t v10 = &v6[2 * v9];
  uint64_t v10[4] = v3;
  v10[5] = v5;
  return result;
}

void (*ProxyConfiguration.excludedDomains.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x48uLL);
  uint64_t v4 = MEMORY[0x18961AFE8];
  *a1 = v3;
  v3[7] = v4;
  v3[8] = v1;
  uint64_t v5 = *v1;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v3 + 7;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_181C9F6D4;
  *(void *)(v7 + 24) = v6;
  void v3[4] = sub_181BDA300;
  v3[5] = v7;
  void *v3 = MEMORY[0x1895F87A8];
  v3[1] = 1107296256LL;
  v3[2] = sub_181C9BCCC;
  v3[3] = &block_descriptor_89;
  unint64_t v8 = _Block_copy(v3);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_proxy_config_enumerate_match_domains(v5, v8);
  swift_unknownObjectRelease();
  _Block_release(v8);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = (void (*)(uint64_t, char))swift_release();
  if ((v5 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v10 = v3[7];
    swift_release();
    v3[6] = v10;
    return sub_181C9C1FC;
  }

  return result;
}

void sub_181C9C1FC(uint64_t a1, char a2)
{
}

void sub_181C9C210( uint64_t a1, char a2, uint64_t (*a3)(void), void (*a4)(uint64_t, uint64_t))
{
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void *)(*(void *)a1 + 48LL);
  if ((a2 & 1) != 0)
  {
    uint64_t v8 = swift_bridgeObjectRetain();
    sub_181C9DC44(v8, a3, a4);
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_181C9DC44(v7, a3, a4);
  }

  swift_bridgeObjectRelease();
  free(v6);
}

Swift::Void __swiftcall ProxyConfiguration.applyCredential(username:password:)( Swift::String username, Swift::String password)
{
  uint64_t v2 = (const char *)(sub_18264EACC() + 32);
  uint64_t v3 = (const char *)(sub_18264EACC() + 32);
  uint64_t v4 = (nw_proxy_config *)swift_unknownObjectRetain();
  nw_proxy_config_set_username_and_password(v4, v2, v3);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
}

void ProxyConfiguration.init(socksv5Proxy:)(uint64_t a1@<X0>, nw_proxy_config_t *a2@<X8>)
{
  if (v4)
  {
    socksuint64_t v5 = nw_proxy_config_create_socksv5(v4);
    swift_unknownObjectRelease();
    sub_181BC920C(a1, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    *a2 = socksv5;
  }

  else
  {
    __break(1u);
  }

void ProxyConfiguration.init(httpCONNECTProxy:tlsOptions:)( uint64_t a1@<X0>, uint64_t a2@<X1>, nw_proxy_config_t *a3@<X8>)
{
  if (v6)
  {
    uint64_t v7 = v6;
    if (a2)
    {
      uint64_t v8 = *(nw_protocol_options **)(a2 + 16);
      swift_unknownObjectRetain();
    }

    else
    {
      uint64_t v8 = 0LL;
    }

    nw_proxy_config_t http_connect = nw_proxy_config_create_http_connect(v7, v8);
    swift_release();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_181BC920C(a1, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
    *a3 = http_connect;
  }

  else
  {
    __break(1u);
  }

uint64_t ProxyConfiguration.RelayHop.init(http3RelayEndpoint:http2RelayEndpoint:tlsOptions:additionalHTTPHeaderFields:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, nw_relay_hop **a5@<X8>)
{
  uint64_t v33 = a5;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C45E580);
  MEMORY[0x1895F8858](v9);
  xpc_object_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = a1;
  NWEndpoint.nw.getter();
  uint64_t v13 = v12;
  uint64_t v31 = a2;
  sub_181BE48BC(a2, (uint64_t)v11, &qword_18C45E580);
  uint64_t v14 = type metadata accessor for NWEndpoint();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48LL))(v11, 1LL, v14) == 1)
  {
    sub_181BDA0F0((uint64_t)v11, &qword_18C45E580);
    uint64_t v15 = 0LL;
  }

  else
  {
    NWEndpoint.nw.getter();
    uint64_t v15 = v16;
    sub_181BC920C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for NWEndpoint);
  }

  uint64_t v30 = a3;
  uint64_t v17 = nw_relay_hop_create(v13, v15, *(nw_protocol_options_t *)(a3 + 16));
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v18 = a4 + 64;
  uint64_t v19 = 1LL << *(_BYTE *)(a4 + 32);
  uint64_t v20 = -1LL;
  if (v19 < 64) {
    uint64_t v20 = ~(-1LL << v19);
  }
  uint64_t v21 = v20 & *(void *)(a4 + 64);
  int64_t v22 = (unint64_t)(v19 + 63) >> 6;
  uint64_t result = swift_unknownObjectRetain();
  int64_t v24 = 0LL;
  while (1)
  {
    if (v21)
    {
      v21 &= v21 - 1;
      goto LABEL_8;
    }

    int64_t v27 = v24 + 1;
    if (__OFADD__(v24, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v27 >= v22) {
      goto LABEL_24;
    }
    uint64_t v28 = *(void *)(v18 + 8 * v27);
    ++v24;
    if (!v28)
    {
      int64_t v24 = v27 + 1;
      if (v27 + 1 >= v22) {
        goto LABEL_24;
      }
      uint64_t v28 = *(void *)(v18 + 8 * v24);
      if (!v28)
      {
        int64_t v24 = v27 + 2;
        if (v27 + 2 >= v22) {
          goto LABEL_24;
        }
        uint64_t v28 = *(void *)(v18 + 8 * v24);
        if (!v28) {
          break;
        }
      }
    }

uint64_t ProxyConfiguration.RelayHop.init(http2RelayEndpoint:tlsOptions:additionalHTTPHeaderFields:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, nw_relay_hop **a4@<X8>)
{
  uint64_t v7 = nw_relay_hop_create(0LL, v6, *(nw_protocol_options_t *)(a2 + 16));
  swift_unknownObjectRelease();
  uint64_t v8 = a3 + 64;
  uint64_t v9 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v10 = -1LL;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  uint64_t v11 = v10 & *(void *)(a3 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t result = swift_unknownObjectRetain();
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      v11 &= v11 - 1;
      goto LABEL_5;
    }

    int64_t v17 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
      __break(1u);
      goto LABEL_23;
    }

    if (v17 >= v12) {
      goto LABEL_21;
    }
    uint64_t v18 = *(void *)(v8 + 8 * v17);
    ++v14;
    if (!v18)
    {
      int64_t v14 = v17 + 1;
      if (v17 + 1 >= v12) {
        goto LABEL_21;
      }
      uint64_t v18 = *(void *)(v8 + 8 * v14);
      if (!v18)
      {
        int64_t v14 = v17 + 2;
        if (v17 + 2 >= v12) {
          goto LABEL_21;
        }
        uint64_t v18 = *(void *)(v8 + 8 * v14);
        if (!v18) {
          break;
        }
      }
    }

void *ProxyConfiguration.init(relayHops:)@<X0>(void *result@<X0>, nw_proxy_config_t *a2@<X8>)
{
  uint64_t v3 = result[2];
  if (v3 == 1)
  {
    uint64_t v4 = (nw_relay_hop *)result[4];
    swift_unknownObjectRetain();
    swift_bridgeObjectRelease();
    nw_proxy_config_t relay = nw_proxy_config_create_relay(v4, 0LL);
LABEL_5:
    uint64_t result = (void *)swift_unknownObjectRelease();
    *a2 = relay;
    return result;
  }

  if (v3 == 2)
  {
    nw_endpoint_t v6 = (nw_relay_hop *)result[4];
    uint64_t v7 = (nw_relay_hop *)result[5];
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRelease();
    nw_proxy_config_t relay = nw_proxy_config_create_relay(v6, v7);
    swift_unknownObjectRelease();
    goto LABEL_5;
  }

  __break(1u);
  return result;
}

void ProxyConfiguration.init(obliviousHTTPRelay:relayResourcePath:gatewayKeyConfig:matchDomains:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __asm { BR              X10 }

uint64_t sub_181C9C9C4()
{
  uint64_t v11 = v4;
  __int16 v12 = v3;
  char v13 = BYTE2(v3);
  char v14 = BYTE3(v3);
  char v15 = BYTE4(v3);
  char v16 = BYTE5(v3);
  uint64_t v5 = (const char *)(sub_18264EACC() + 32);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  oblivious_http = nw_proxy_config_create_oblivious_http(v0, v5, (const uint8_t *)&v11, BYTE6(v3));
  swift_release();
  uint64_t v7 = *(void *)(v2 + 16);
  if (v7)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = v2 + 40;
    do
    {
      uint64_t v9 = sub_18264EACC();
      nw_proxy_config_add_match_domain(oblivious_http, (const char *)(v9 + 32));
      swift_release();
      v8 += 16LL;
      --v7;
    }

    while (v7);
    swift_bridgeObjectRelease();
  }

  sub_181BCD4F0(v4, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  uint64_t result = swift_unknownObjectRelease();
  nw_proxy_config *v1 = oblivious_http;
  return result;
}

uint64_t NSURLSessionConfiguration.proxyConfigurations.getter()
{
  id v1 = objc_msgSend(v0, sel_proxyConfigurations);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E840);
  unint64_t v2 = sub_18264ECC4();

  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v3) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    return MEMORY[0x18961AFE8];
  }

  swift_bridgeObjectRetain();
  uint64_t v3 = sub_18264F330();
  swift_bridgeObjectRelease();
  if (!v3) {
    goto LABEL_13;
  }
LABEL_3:
  uint64_t v10 = MEMORY[0x18961AFE8];
  uint64_t result = sub_181C9D0E0(0, v3 & ~(v3 >> 63), 0);
  if ((v3 & 0x8000000000000000LL) == 0)
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = v10;
    do
    {
      if ((v2 & 0xC000000000000001LL) != 0)
      {
        uint64_t v7 = MEMORY[0x186E0ED48](v5, v2);
      }

      else
      {
        uint64_t v7 = *(void *)(v2 + 8 * v5 + 32);
        swift_unknownObjectRetain();
      }

      unint64_t v9 = *(void *)(v10 + 16);
      unint64_t v8 = *(void *)(v10 + 24);
      if (v9 >= v8 >> 1) {
        sub_181C9D0E0(v8 > 1, v9 + 1, 1);
      }
      ++v5;
      *(void *)(v10 + 16) = v9 + 1;
      *(void *)(v10 + 8 * v9 + 32) = v7;
    }

    while (v3 != v5);
    swift_bridgeObjectRelease();
    return v6;
  }

  __break(1u);
  return result;
}

void NSURLSessionConfiguration.proxyConfigurations.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_18264F24C();
    uint64_t v3 = 0LL;
    do
    {
      uint64_t v4 = v3 + 1;
      swift_unknownObjectRetain();
      sub_18264F234();
      sub_18264F258();
      sub_18264F264();
      sub_18264F240();
      uint64_t v3 = v4;
    }

    while (v2 != v4);
  }

  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E840);
  id v5 = (id)sub_18264ECB8();
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setProxyConfigurations_, v5);
}

void (*NSURLSessionConfiguration.proxyConfigurations.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  *a1 = NSURLSessionConfiguration.proxyConfigurations.getter();
  return sub_181C9D02C;
}

void sub_181C9D02C(uint64_t *a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    uint64_t v2 = swift_bridgeObjectRetain();
    NSURLSessionConfiguration.proxyConfigurations.setter(v2);
    swift_bridgeObjectRelease();
  }

  else
  {
    NSURLSessionConfiguration.proxyConfigurations.setter(*a1);
  }

uint64_t sub_181C9D070(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_181C9D0FC(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_181C9D08C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_181C9D284(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_181C9D0A8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_181C9D3EC(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_181C9D0C4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_181C9D548(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_181C9D0E0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_181C9D6D0(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_181C9D0FC(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_18C58E9B0);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    void v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }

  else
  {
    uint64_t v10 = (void *)MEMORY[0x18961AFE8];
  }

  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8) {
      memmove(v10 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_30;
  }

  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58B870);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }

uint64_t sub_181C9D284(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58AC98);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }

uint64_t sub_181C9D3EC(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58E9A0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }

uint64_t sub_181C9D548(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58AC90);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8]) {
      memmove(v12, v13, 56 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v13 >= &v12[56 * v8] || v12 >= &v13[56 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }

uint64_t sub_181C9D6D0(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E928);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }

uint64_t sub_181C9D838(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = swift_allocObject();
  nw_parameters_t v7 = nw_parameters_create();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A220);
  uint64_t v8 = swift_allocObject();
  *(void *)(v6 + 16) = v8;
  *(_DWORD *)(v8 + 24) = 0;
  uint64_t v9 = (os_unfair_lock_s *)(v8 + 24);
  *(void *)(v8 + 16) = v7;
  uint64_t v10 = (void **)(v8 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 24));
  nw_parameters_set_data_mode(*v10, a3);
  os_unfair_lock_unlock(v9);
  os_unfair_lock_lock(v9);
  sub_181C9AEEC( v10,  (uint64_t (*)(void))nw_parameters_copy_default_protocol_stack,  (void (*)(void))type metadata accessor for NWParameters.ProtocolStack,  (uint64_t *)&unk_18C58A228,  &v22);
  os_unfair_lock_unlock(v9);
  uint64_t v11 = v22;
  uint64_t v12 = *(void *)(v22 + 16);
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v12 + 24));
  nw_protocol_stack_set_transport_protocol(*(nw_protocol_stack_t *)(v12 + 16), *(nw_protocol_options_t *)(a2 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 24));
  swift_retain();
  swift_release_n();
  if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58A250);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18265F3B0;
    *(void *)(inited + 32) = a1;
    uint64_t v22 = inited;
    sub_18264ECDC();
    unint64_t v14 = v22;
    uint64_t v15 = *(void *)(v11 + 16);
    char v16 = (nw_protocol_stack_t *)(v15 + 16);
    int64_t v17 = (os_unfair_lock_s *)(v15 + 24);
    swift_retain_n();
    os_unfair_lock_lock(v17);
    sub_181C99334(v16, v14);
    os_unfair_lock_unlock(v17);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v18 = *(os_unfair_lock_s **)(v11 + 16);
    int64_t v19 = (nw_protocol_stack_t *)&v18[4];
    uint64_t v20 = v18 + 6;
    os_unfair_lock_lock(v18 + 6);
    sub_181C99334(v19, MEMORY[0x18961AFE8]);
    os_unfair_lock_unlock(v20);
  }

  swift_release();
  swift_release();
  swift_release();
  return v6;
}

uint64_t _s7Network12NWParametersC4quicAcA14NWProtocolQUICC7OptionsC_tcfC_0(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  nw_parameters_t v3 = nw_parameters_create();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58A220);
  uint64_t v4 = swift_allocObject();
  *(void *)(v2 + 16) = v4;
  *(_DWORD *)(v4 + 24) = 0;
  id v5 = (os_unfair_lock_s *)(v4 + 24);
  *(void *)(v4 + 16) = v3;
  uint64_t v6 = (void *)(v4 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 24));
  sub_181C9AEEC( v6,  (uint64_t (*)(void))nw_parameters_copy_default_protocol_stack,  (void (*)(void))type metadata accessor for NWParameters.ProtocolStack,  (uint64_t *)&unk_18C58A228,  &v10);
  os_unfair_lock_unlock(v5);
  uint64_t v7 = *(void *)(v10 + 16);
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 24));
  nw_protocol_stack_set_transport_protocol(*(nw_protocol_stack_t *)(v7 + 16), *(nw_protocol_options_t *)(a1 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 24));
  swift_retain();
  swift_release_n();
  uint64_t v8 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 24));
  nw_parameters_set_attach_protocol_listener(*(void **)(v8 + 16), 1);
  os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 24));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v2;
}

uint64_t sub_181C9DBB4()
{
  return swift_deallocObject();
}

uint64_t sub_181C9DBC4(uint64_t a1)
{
  return sub_181C9BFE4(a1, *(uint64_t **)(v1 + 16));
}

uint64_t sub_181C9DBDC()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_18()
{
  return swift_release();
}

uint64_t sub_181C9DC04()
{
  return swift_deallocObject();
}

uint64_t sub_181C9DC14()
{
  return swift_deallocObject();
}

uint64_t sub_181C9DC24()
{
  return swift_deallocObject();
}

uint64_t sub_181C9DC34()
{
  return swift_deallocObject();
}

uint64_t sub_181C9DC44(uint64_t a1, uint64_t (*a2)(void), void (*a3)(uint64_t, uint64_t))
{
  uint64_t result = a2(*v3);
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    uint64_t v8 = a1 + 40;
    do
    {
      uint64_t v9 = sub_18264EACC() + 32;
      uint64_t v10 = swift_unknownObjectRetain();
      a3(v10, v9);
      swift_unknownObjectRelease();
      uint64_t result = swift_release();
      v8 += 16LL;
      --v7;
    }

    while (v7);
  }

  return result;
}

uint64_t sub_181C9DCC8()
{
  return swift_deallocObject();
}

uint64_t sub_181C9DCD8()
{
  return swift_deallocObject();
}

uint64_t sub_181C9DCE8( uint64_t a1, uint64_t a2, uint64_t a3, nw_relay_hop *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = sub_18264E484();
  uint64_t v12 = (const uint8_t *)result;
  if (result)
  {
    uint64_t result = sub_18264E4A8();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }

    v12 += a1 - result;
  }

  BOOL v13 = __OFSUB__(a2, a1);
  int64_t v14 = a2 - a1;
  if (v13)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t result = sub_18264E49C();
  if (!v12)
  {
LABEL_16:
    __break(1u);
    return result;
  }

  if (result >= v14) {
    size_t v15 = v14;
  }
  else {
    size_t v15 = result;
  }
  uint64_t v16 = sub_18264EACC();
  oblivious_http = nw_proxy_config_create_oblivious_http(a4, (const char *)(v16 + 32), v12, v15);
  swift_release();
  uint64_t v18 = *(void *)(a7 + 16);
  if (v18)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = a7 + 40;
    do
    {
      uint64_t v20 = sub_18264EACC();
      nw_proxy_config_add_match_domain(oblivious_http, (const char *)(v20 + 32));
      swift_release();
      v19 += 16LL;
      --v18;
    }

    while (v18);
    swift_bridgeObjectRelease();
  }

  return (uint64_t)oblivious_http;
}

unint64_t sub_181C9DE04()
{
  unint64_t result = qword_18C58E848;
  if (!qword_18C58E848)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWParameters.ServiceClass,  &type metadata for NWParameters.ServiceClass);
    atomic_store(result, (unint64_t *)&qword_18C58E848);
  }

  return result;
}

unint64_t sub_181C9DE4C()
{
  unint64_t result = qword_18C58E850;
  if (!qword_18C58E850)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWParameters.MultipathServiceType,  &type metadata for NWParameters.MultipathServiceType);
    atomic_store(result, (unint64_t *)&qword_18C58E850);
  }

  return result;
}

unint64_t sub_181C9DE94()
{
  unint64_t result = qword_18C58E858;
  if (!qword_18C58E858)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWParameters.ExpiredDNSBehavior,  &type metadata for NWParameters.ExpiredDNSBehavior);
    atomic_store(result, (unint64_t *)&qword_18C58E858);
  }

  return result;
}

unint64_t sub_181C9DEDC()
{
  unint64_t result = qword_18C58E860;
  if (!qword_18C58E860)
  {
    unint64_t result = MEMORY[0x186E12084]( &protocol conformance descriptor for NWParameters.Attribution,  &type metadata for NWParameters.Attribution);
    atomic_store(result, (unint64_t *)&qword_18C58E860);
  }

  return result;
}

void sub_181C9DF20(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_181C97998(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_181C9724C, a2);
}

void sub_181C9DF40(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  sub_181C98FE0(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_181C973F0, a2);
}

void sub_181C9DF5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_181C9DF78(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  sub_181C98FE0(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_181C97538, a2);
}

void sub_181C9DF94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_181C9DFB0(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_181C97998(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_181C97754, a2);
}

uint64_t sub_181C9DFCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_181C97D2C(a1, a2, a3, a4, (void (*)(os_unfair_lock_s *))sub_181C9F5DC);
}

void sub_181C9DFE8(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_181C97998(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_181C97A94, a2);
}

uint64_t sub_181C9E004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_181C97D2C(a1, a2, a3, a4, (void (*)(os_unfair_lock_s *))sub_181C9F5C4);
}

void sub_181C9E020(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_181C97998(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_181C97ED8, a2);
}

uint64_t sub_181C9E03C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_181C97D2C(a1, a2, a3, a4, (void (*)(os_unfair_lock_s *))sub_181C9F5AC);
}

void sub_181C9E058(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  sub_181C98FE0(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_181C9836C, a2);
}

void sub_181C9E074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_181C9E090(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  sub_181C98FE0(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_181C9841C, a2);
}

void sub_181C9E0AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_181C9E0C8(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  sub_181C98FE0(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_181C984CC, a2);
}

void sub_181C9E0E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_181C9E108(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  sub_181C98FE0(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_181C98A2C, a2);
}

void sub_181C9E124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_181C9E140(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  sub_181C98FE0(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_181C98ADC, a2);
}

void sub_181C9E15C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_181C9E178(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  sub_181C98FE0(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_181C98B8C, a2);
}

void sub_181C9E194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_181C9E1B0(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  sub_181C98FE0(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_181C98C3C, a2);
}

void sub_181C9E1CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_181C9E1E8(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  sub_181C98FE0(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_181C98D6C, a2);
}

void sub_181C9E204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_181C9E220(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  sub_181C98FE0(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_181C98E2C, a2);
}

void sub_181C9E23C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_181C9E258(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  sub_181C98FE0(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_181C98EE8, a2);
}

void sub_181C9E274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_181C9E290(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  sub_181C98FE0(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_181C99104, a2);
}

void sub_181C9E2AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_181C9E2D0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_181C99970();
  *a1 = result;
  return result;
}

uint64_t sub_181C9E2FC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_181C99A74();
  *a1 = result;
  return result;
}

void sub_181C9E330(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_181C9E354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_133Tm(a1, a2, a3, a4, NWParameters.requiredNetworkAgents.setter);
}

void sub_181C9E360(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_181C9E384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_133Tm(a1, a2, a3, a4, NWParameters.preferredNetworkAgents.setter);
}

void sub_181C9E390(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  sub_181C98FE0(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_181C9B018, a2);
}

void sub_181C9E3AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_181C9E3CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

double sub_181C9E3E8@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_181C9B46C(a1, (uint64_t (*)(void))nw_parameters_get_account_id, a2);
}

uint64_t sub_181C9E404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_181C9B4E4(a1, a2, a3, a4, (void (*)(os_unfair_lock_s *))sub_181C9F484);
}

double sub_181C9E420@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_181C9B46C(a1, (uint64_t (*)(void))nw_parameters_get_effective_bundle_id, a2);
}

uint64_t sub_181C9E43C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_181C9B4E4(a1, a2, a3, a4, (void (*)(os_unfair_lock_s *))sub_181C9F464);
}

void sub_181C9E458(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_181C97998(a1, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_181C9B90C, a2);
}

BOOL sub_181C9E478@<W0>(nw_proxy_config_t *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = nw_proxy_config_get_failover_allowed(*a1);
  *a2 = result;
  return result;
}

void sub_181C9E4A0(BOOL *a1, nw_proxy_config_t *a2)
{
}

uint64_t sub_181C9E4B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ProxyConfiguration.matchDomains.getter();
  *a1 = result;
  return result;
}

uint64_t sub_181C9E4E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_149Tm( a1,  a2,  a3,  a4,  (uint64_t (*)(void))nw_proxy_config_clear_match_domains,  (void (*)(uint64_t, uint64_t))nw_proxy_config_add_match_domain);
}

uint64_t sub_181C9E4FC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ProxyConfiguration.excludedDomains.getter();
  *a1 = result;
  return result;
}

uint64_t sub_181C9E534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_149Tm( a1,  a2,  a3,  a4,  (uint64_t (*)(void))nw_proxy_config_clear_excluded_domains,  (void (*)(uint64_t, uint64_t))nw_proxy_config_add_excluded_domain);
}

uint64_t keypath_set_149Tm( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), void (*a6)(uint64_t, uint64_t))
{
  uint64_t v8 = swift_bridgeObjectRetain();
  sub_181C9DC44(v8, a5, a6);
  return swift_bridgeObjectRelease();
}

uint64_t sub_181C9E590@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = NSURLSessionConfiguration.proxyConfigurations.getter();
  *a1 = result;
  return result;
}

uint64_t sub_181C9E5B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_133Tm( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t))NSURLSessionConfiguration.proxyConfigurations.setter);
}

uint64_t keypath_set_133Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = swift_bridgeObjectRetain();
  return a5(v6);
}

uint64_t type metadata accessor for NWParameters()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWParameters()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWParameters.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t storeEnumTagSinglePayload for NWParameters.ServiceClass(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_181C9E670 + 4 * byte_182663E95[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_181C9E6A4 + 4 * byte_182663E90[v4]))();
}

uint64_t sub_181C9E6A4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C9E6AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181C9E6B4LL);
  }
  return result;
}

uint64_t sub_181C9E6C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181C9E6C8LL);
  }
  *(_BYTE *)uint64_t result = a2 + 5;
  return result;
}

uint64_t sub_181C9E6CC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C9E6D4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWParameters.ServiceClass()
{
  return &type metadata for NWParameters.ServiceClass;
}

ValueMetadata *type metadata accessor for NWParameters.MultipathServiceType()
{
  return &type metadata for NWParameters.MultipathServiceType;
}

uint64_t _s7Network12NWParametersC20MultipathServiceTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_181C9E754 + 4 * byte_182663E9F[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_181C9E788 + 4 * byte_182663E9A[v4]))();
}

uint64_t sub_181C9E788(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C9E790(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181C9E798LL);
  }
  return result;
}

uint64_t sub_181C9E7A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181C9E7ACLL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_181C9E7B0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C9E7B8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWParameters.ExpiredDNSBehavior()
{
  return &type metadata for NWParameters.ExpiredDNSBehavior;
}

uint64_t type metadata accessor for NWParameters.ProtocolStack()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWParameters.ProtocolStack()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWParameters.ProtocolStack.applicationProtocols.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88LL))();
}

uint64_t dispatch thunk of NWParameters.ProtocolStack.applicationProtocols.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96LL))();
}

uint64_t dispatch thunk of NWParameters.ProtocolStack.applicationProtocols.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104LL))();
}

uint64_t dispatch thunk of NWParameters.ProtocolStack.transportProtocol.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112LL))();
}

uint64_t dispatch thunk of NWParameters.ProtocolStack.transportProtocol.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120LL))();
}

uint64_t dispatch thunk of NWParameters.ProtocolStack.transportProtocol.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128LL))();
}

uint64_t dispatch thunk of NWParameters.ProtocolStack.internetProtocol.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136LL))();
}

uint64_t dispatch thunk of NWParameters.ProtocolStack.internetProtocol.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144LL))();
}

uint64_t dispatch thunk of NWParameters.ProtocolStack.internetProtocol.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152LL))();
}

uint64_t type metadata accessor for NWParameters.PrivacyContext()
{
  return objc_opt_self();
}

uint64_t method lookup function for NWParameters.PrivacyContext()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NWParameters.PrivacyContext.debugDescription.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96LL))();
}

uint64_t dispatch thunk of NWParameters.PrivacyContext.__allocating_init(description:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of NWParameters.PrivacyContext.flushCache()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128LL))();
}

uint64_t dispatch thunk of NWParameters.PrivacyContext.disableLogging()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136LL))();
}

uint64_t dispatch thunk of NWParameters.PrivacyContext.requireEncryptedNameResolution(_:fallbackResolver:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144LL))();
}

uint64_t dispatch thunk of NWParameters.PrivacyContext.proxyConfigurations.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176LL))();
}

uint64_t dispatch thunk of NWParameters.PrivacyContext.proxyConfigurations.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184LL))();
}

uint64_t dispatch thunk of NWParameters.PrivacyContext.proxyConfigurations.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192LL))();
}

uint64_t *initializeBufferWithCopyOfBuffer for NWParameters.PrivacyContext.ResolverConfiguration( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      type metadata accessor for NWEndpoint();
      uint64_t v9 = (char *)&loc_181C9E9D8 + 4 * byte_182663EA4[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }

    uint64_t v6 = sub_18264E568();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E878);
    *(uint64_t *)((char *)a1 + *(int *)(v7 + sub_181BCD4F0(*(void *)(v0 + 40), *(void *)(v0 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v7 + 48));
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }

  return a1;
}

uint64_t destroy for NWParameters.PrivacyContext.ResolverConfiguration(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = sub_18264E568();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
    int v3 = &qword_18C58E878;
  }

  else
  {
    type metadata accessor for NWEndpoint();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        sub_181BC6974(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(_BYTE *)(a1 + 24));
        break;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)(a1 + 48) != 1LL) {
          goto LABEL_8;
        }
        break;
      case 2u:
        swift_bridgeObjectRelease();
        break;
      case 3u:
        uint64_t v4 = sub_18264E568();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
        break;
      case 4u:
LABEL_8:
        swift_unknownObjectRelease();
        break;
      default:
        break;
    }

    int v3 = &qword_18C58E870;
  }

  __swift_instantiateConcreteTypeFromMangledName(v3);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NWParameters.PrivacyContext.ResolverConfiguration(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    type metadata accessor for NWEndpoint();
    uint64_t v6 = (char *)&loc_181C9ECD8 + 4 * byte_182663EAE[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }

  uint64_t v4 = sub_18264E568();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, a2, v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E878);
  *(void *)(a1 + *(int *)(v5 + sub_181BCD4F0(*(void *)(v0 + 40), *(void *)(v0 + 48)) = *(void *)(a2 + *(int *)(v5 + 48));
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for NWParameters.PrivacyContext.ResolverConfiguration(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_181BC920C( a1,  (uint64_t (*)(void))type metadata accessor for NWParameters.PrivacyContext.ResolverConfiguration);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      type metadata accessor for NWEndpoint();
      uint64_t v6 = (char *)&loc_181C9EEE8 + 4 * byte_182663EB3[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }

    uint64_t v4 = sub_18264E568();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, a2, v4);
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58E878);
    *(void *)(a1 + *(int *)(v5 + sub_181BCD4F0(*(void *)(v0 + 40), *(void *)(v0 + 48)) = *(void *)(a2 + *(int *)(v5 + 48));
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }

  return a1;
}

uint64_t type metadata accessor for NWParameters.PrivacyContext.ResolverConfiguration()
{
  uint64_t result = qword_18C58E8F0;
  if (!qword_18C58E8F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

char *initializeWithTake for NWParameters.PrivacyContext.ResolverConfiguration(char *a1, char *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_18264E568();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
    uint64_t v5 = &qword_18C58E878;
  }

  else
  {
    uint64_t v6 = type metadata accessor for NWEndpoint();
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v7 = sub_18264E568();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64LL));
    }

    uint64_t v5 = &qword_18C58E870;
  }

  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(v5);
  *(void *)&a1[*(int *)(v8 + 48)] = *(void *)&a2[*(int *)(v8 + 48)];
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *assignWithTake for NWParameters.PrivacyContext.ResolverConfiguration(char *a1, char *a2)
{
  if (a1 != a2)
  {
    sub_181BC920C( (uint64_t)a1,  (uint64_t (*)(void))type metadata accessor for NWParameters.PrivacyContext.ResolverConfiguration);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = sub_18264E568();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
      uint64_t v5 = &qword_18C58E878;
    }

    else
    {
      uint64_t v6 = type metadata accessor for NWEndpoint();
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v7 = sub_18264E568();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
      }

      else
      {
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64LL));
      }

      uint64_t v5 = &qword_18C58E870;
    }

    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(v5);
    *(void *)&a1[*(int *)(v8 + 48)] = *(void *)&a2[*(int *)(v8 + 48)];
    swift_storeEnumTagMultiPayload();
  }

  return a1;
}

uint64_t sub_181C9F2B8()
{
  uint64_t result = type metadata accessor for NWEndpoint();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    uint64_t v5 = &v4;
    uint64_t result = sub_18264E568();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      uint64_t v6 = &v3;
      swift_initEnumMetadataMultiPayload();
      return 0LL;
    }
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for NWParameters.Attribution(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_181C9F3B8 + 4 * byte_182663EBD[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_181C9F3EC + 4 * byte_182663EB8[v4]))();
}

uint64_t sub_181C9F3EC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C9F3F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181C9F3FCLL);
  }
  return result;
}

uint64_t sub_181C9F408(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181C9F410LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_181C9F414(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181C9F41C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NWParameters.Attribution()
{
  return &type metadata for NWParameters.Attribution;
}

ValueMetadata *type metadata accessor for ProxyConfiguration()
{
  return &type metadata for ProxyConfiguration;
}

ValueMetadata *type metadata accessor for ProxyConfiguration.RelayHop()
{
  return &type metadata for ProxyConfiguration.RelayHop;
}

void sub_181C9F458(void **a1)
{
}

uint64_t sub_181C9F464(uint64_t *a1)
{
  return sub_181C9B5DC( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  (void (*)(uint64_t, uint64_t))nw_parameters_set_source_application_by_bundle_id);
}

uint64_t sub_181C9F484(uint64_t *a1)
{
  return sub_181C9B5DC( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  (void (*)(uint64_t, uint64_t))nw_parameters_set_account_id);
}

void sub_181C9F4A4(nw_parameters **a1)
{
  unint64_t v2 = *a1;
  if (*(_BYTE *)(v1 + 16)) {
    nw_parameters_attribution_t v3 = nw_parameters_attribution_user;
  }
  else {
    nw_parameters_attribution_t v3 = nw_parameters_attribution_developer;
  }
  nw_parameters_set_attribution(v2, v3);
}

void sub_181C9F4BC(void **a1)
{
}

void sub_181C9F4C8(nw_privacy_context **a1)
{
}

uint64_t sub_181C9F4E0@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 24);
  return swift_bridgeObjectRetain();
}

void sub_181C9F4EC(nw_protocol_stack_t *a1)
{
}

uint64_t sub_181C9F4F8(nw_protocol_stack_t *a1)
{
  return sub_181C99334(a1, *(void *)(v1 + 16));
}

void sub_181C9F510(nw_parameters_t *a1)
{
}

void sub_181C9F51C(nw_parameters_t *a1)
{
}

void sub_181C9F528(nw_parameters_t *a1)
{
}

void sub_181C9F534(nw_parameters_t *a1)
{
}

void sub_181C9F540(nw_parameters_t *a1)
{
}

void sub_181C9F54C(nw_parameters_t *a1)
{
}

void sub_181C9F558(nw_parameters_t *a1)
{
}

void sub_181C9F564(nw_parameters_t *a1)
{
}

uint64_t sub_181C9F570(nw_parameters **a1)
{
  return sub_181C98744(a1, *(void *)(v1 + 16));
}

void sub_181C9F588(nw_parameters_t *a1)
{
}

void sub_181C9F594(nw_parameters_t *a1)
{
}

void sub_181C9F5A0(nw_parameters_t *a1)
{
}

uint64_t sub_181C9F5AC(void **a1)
{
  return sub_181C97E18(a1, *(void *)(v1 + 16));
}

void sub_181C9F5C4(nw_parameters_t *a1)
{
}

void sub_181C9F5DC(nw_parameters_t *a1)
{
}

void sub_181C9F5F4(void **a1)
{
}

void sub_181C9F60C(nw_parameters_t *a1)
{
}

uint64_t sub_181C9F618(nw_parameters **a1)
{
  return sub_181C971F8(a1, *(void *)(v1 + 16));
}

uint64_t sub_181C9F630()
{
  return swift_deallocObject();
}

uint64_t sub_181C9F640(int a1, void *a2)
{
  return sub_181C98068(a1, a2, *(char ***)(v2 + 16));
}

uint64_t sub_181C9F648()
{
  return swift_deallocObject();
}

uint64_t sub_181C9F658()
{
  return swift_deallocObject();
}

uint64_t sub_181C9F668(unsigned int a1)
{
  return sub_181C97BE8(a1, *(char ***)(v1 + 16));
}

uint64_t sub_181C9F670()
{
  return swift_deallocObject();
}

uint64_t sub_181C9F680()
{
  return swift_deallocObject();
}

uint64_t sub_181C9F690()
{
  return swift_deallocObject();
}

uint64_t sub_181C9F6A0()
{
  return swift_deallocObject();
}

uint64_t sub_181C9F6B0(uint64_t a1)
{
  return sub_181C995E0(a1, *(void **)(v1 + 16));
}

uint64_t sub_181C9F6B8()
{
  return swift_deallocObject();
}

uint64_t *sub_181C9F720(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = sub_18264E688();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = (uint64_t *)((char *)a1 + v9);
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = *(uint64_t *)((char *)a2 + v9 + 8);
    *uint64_t v10 = *(uint64_t *)((char *)a2 + v9);
    v10[1] = v12;
    uint64_t v13 = *(int *)(type metadata accessor for NWActorID() + 20);
    int64_t v14 = (char *)v10 + v13;
    size_t v15 = &v11[v13];
    swift_bridgeObjectRetain();
    v8((uint64_t *)v14, (uint64_t *)v15, v7);
    uint64_t v16 = a3[6];
    uint64_t v17 = a3[7];
    uint64_t v18 = (uint64_t *)((char *)a1 + v16);
    uint64_t v19 = (uint64_t *)((char *)a2 + v16);
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v20;
    *(uint64_t *)((char *)a1 + v17) = *(uint64_t *)((char *)a2 + v17);
    uint64_t v21 = a3[9];
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    *(uint64_t *)((char *)a1 + v21) = *(uint64_t *)((char *)a2 + v21);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  return a1;
}

uint64_t sub_181C9F834(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18264E688();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v5(a1, v4);
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  uint64_t v7 = type metadata accessor for NWActorID();
  v5(v6 + *(int *)(v7 + 20), v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_181C9F8D0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_18264E688();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = a2 + v8;
  uint64_t v11 = *(void *)(a2 + v8 + 8);
  *uint64_t v9 = *(void *)(a2 + v8);
  v9[1] = v11;
  uint64_t v12 = *(int *)(type metadata accessor for NWActorID() + 20);
  uint64_t v13 = (char *)v9 + v12;
  uint64_t v14 = v10 + v12;
  swift_bridgeObjectRetain();
  v7((uint64_t)v13, v14, v6);
  uint64_t v15 = a3[6];
  uint64_t v16 = a3[7];
  uint64_t v17 = (void *)(a1 + v15);
  uint64_t v18 = (void *)(a2 + v15);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  *(void *)(a1 + v16) = *(void *)(a2 + v16);
  uint64_t v20 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + v20) = *(void *)(a2 + v20);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *sub_181C9F9B8(char *a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_18264E688();
  uint64_t v7 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = a2 + v8;
  *(void *)uint64_t v9 = *(void *)(a2 + v8);
  *((void *)v9 + 1) = *(void *)(a2 + v8 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = type metadata accessor for NWActorID();
  v7(&v9[*(int *)(v11 + 20)], v10 + *(int *)(v11 + 20), v6);
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = (void *)(a2 + v12);
  *(void *)uint64_t v13 = *v14;
  *((void *)v13 + 1) = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[7]] = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[8]] = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[9]] = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_181C9FAD4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_18264E688();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  uint64_t v11 = type metadata accessor for NWActorID();
  v7(v9 + *(int *)(v11 + 20), v10 + *(int *)(v11 + 20), v6);
  uint64_t v12 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  uint64_t v13 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + v13) = *(void *)(a2 + v13);
  return a1;
}

char *sub_181C9FB90(char *a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_18264E688();
  uint64_t v7 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = a2 + v8;
  uint64_t v11 = *(void *)(a2 + v8 + 8);
  *(void *)uint64_t v9 = *(void *)(a2 + v8);
  *((void *)v9 + 1) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = type metadata accessor for NWActorID();
  v7(&v9[*(int *)(v12 + 20)], v10 + *(int *)(v12 + 20), v6);
  uint64_t v13 = a3[6];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  *(void *)uint64_t v14 = v17;
  *((void *)v14 + 1) = v16;
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[7]] = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[8]] = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[9]] = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_181C9FC7C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C9FC88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_18264E688();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
    return v9(v10, a2, v8);
  }

  uint64_t v11 = type metadata accessor for NWActorID();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }

  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_181C9FD34()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181C9FD40(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_18264E688();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
    return v11(v12, a2, a2, v10);
  }

  uint64_t result = type metadata accessor for NWActorID();
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }

  *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for RemoteCallEnvelope(uint64_t a1)
{
  return sub_181BD62C8(a1, qword_18C58EA10);
}

uint64_t sub_181C9FDFC()
{
  uint64_t result = sub_18264E688();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for NWActorID();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_181C9FEA8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for NWActorSystemProtobuf_ActorID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  int v5 = (void *)((char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = type metadata accessor for NWActorSystemProtobuf_RemoteCall(0LL);
  v24[1] = v6;
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (void *)((char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = MEMORY[0x18961AFE8];
  void v8[2] = 0LL;
  void v8[3] = 0xE000000000000000LL;
  void v8[4] = v9;
  v8[5] = v9;
  v8[6] = 0LL;
  sub_18264E70C();
  uint64_t v10 = (uint64_t)v8 + *(int *)(v6 + 40);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
  v11(v10, 1LL, 1LL, v2);
  *uint64_t v8 = sub_18264E64C();
  v8[1] = v12;
  uint64_t v13 = (int *)type metadata accessor for RemoteCallEnvelope(0LL);
  uint64_t v14 = (void *)(v1 + v13[5]);
  sub_18264E70C();
  uint64_t v15 = v14[1];
  *int v5 = *v14;
  v5[1] = v15;
  type metadata accessor for NWActorID();
  swift_bridgeObjectRetain();
  _OWORD v5[2] = sub_18264E64C();
  void v5[3] = v16;
  sub_181BDA0F0(v10, &qword_18C58C690);
  sub_181BC928C((uint64_t)v5, v10, type metadata accessor for NWActorSystemProtobuf_ActorID);
  v11(v10, 0LL, 1LL, v2);
  uint64_t v17 = (uint64_t *)(v1 + v13[6]);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  void v8[2] = v19;
  void v8[3] = v18;
  uint64_t v20 = *(void *)(v1 + v13[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  void v8[4] = v20;
  uint64_t v21 = *(void *)(v1 + v13[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8[5] = v21;
  v8[6] = *(void *)(v1 + v13[9]);
  sub_181BD67D4(&qword_18C58C630, type metadata accessor for NWActorSystemProtobuf_RemoteCall, (uint64_t)&unk_18265EB28);
  uint64_t v22 = sub_18264E7D8();
  sub_181BC920C((uint64_t)v8, type metadata accessor for NWActorSystemProtobuf_RemoteCall);
  return v22;
}

uint64_t sub_181CA0100@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v48 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C690);
  MEMORY[0x1895F8858](v5);
  uint64_t v47 = (uint64_t)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for NWActorSystemProtobuf_ActorID(0LL);
  uint64_t v45 = *(void *)(v7 - 8);
  uint64_t v46 = v7;
  MEMORY[0x1895F8858](v7);
  int64_t v44 = (uint64_t *)((char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = type metadata accessor for NWActorID();
  MEMORY[0x1895F8858](v9);
  uint64_t v43 = (uint64_t *)((char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58C0D0);
  uint64_t v12 = MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  uint64_t v49 = (uint64_t)&v40 - v15;
  uint64_t v16 = sub_18264E688();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1895F8858](v16);
  uint64_t v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for NWActorSystemProtobuf_RemoteCall(0LL);
  MEMORY[0x1895F8858](v20);
  uint64_t v22 = (uint64_t *)((char *)&v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v53 = a1;
  unint64_t v54 = a2;
  uint64_t v23 = sub_18264E730();
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  uint64_t v52 = 0LL;
  MEMORY[0x1895F8858](v23);
  sub_181BCD4AC(a1, a2);
  sub_18264E724();
  sub_181BD67D4(&qword_18C58C630, type metadata accessor for NWActorSystemProtobuf_RemoteCall, (uint64_t)&unk_18265EB28);
  uint64_t v24 = v55;
  sub_18264E7E4();
  if (v24) {
    return sub_181BCD4F0(a1, a2);
  }
  uint64_t v42 = 0LL;
  uint64_t v55 = a1;
  swift_bridgeObjectRetain();
  uint64_t v26 = v49;
  sub_18264E640();
  swift_bridgeObjectRelease();
  sub_181BE48BC(v26, (uint64_t)v14, &qword_18C58C0D0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1LL, v16) == 1)
  {
    sub_181BDA0F0((uint64_t)v14, &qword_18C58C0D0);
    sub_181C54028();
    swift_allocError();
    strcpy(v27, "Missing callID");
    v27[15] = -18;
    swift_willThrow();
    sub_181BCD4F0(v55, a2);
    sub_181BDA0F0(v49, &qword_18C58C0D0);
    return sub_181BC920C((uint64_t)v22, type metadata accessor for NWActorSystemProtobuf_RemoteCall);
  }

  else
  {
    uint64_t v41 = v17;
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v28(v19, v14, v16);
    sub_181BDA0F0(v49, &qword_18C58C0D0);
    int64_t v29 = v48;
    v28(v48, v19, v16);
    uint64_t v30 = v47;
    sub_181BE48BC((uint64_t)v22 + *(int *)(v20 + 40), v47, &qword_18C58C690);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v30, 1LL, v46) == 1)
    {
      uint64_t v31 = v44;
      *int64_t v44 = 0LL;
      v31[1] = 0xE000000000000000LL;
      void v31[2] = 0LL;
      void v31[3] = 0xE000000000000000LL;
      sub_18264E70C();
      sub_181BDA0F0(v30, &qword_18C58C690);
    }

    else
    {
      uint64_t v31 = v44;
      sub_181BC928C(v30, (uint64_t)v44, type metadata accessor for NWActorSystemProtobuf_ActorID);
    }

    uint64_t v32 = v55;
    uint64_t v34 = v42;
    uint64_t v33 = v43;
    sub_181C53CCC(v31, v43);
    sub_181BCD4F0(v32, a2);
    if (v34)
    {
      sub_181BC920C((uint64_t)v22, type metadata accessor for NWActorSystemProtobuf_RemoteCall);
      return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v29, v16);
    }

    else
    {
      int64_t v35 = (int *)type metadata accessor for RemoteCallEnvelope(0LL);
      sub_181BC928C( (uint64_t)v33,  (uint64_t)&v29[v35[5]],  (uint64_t (*)(void))type metadata accessor for NWActorID);
      uint64_t v36 = v22[3];
      uint64_t v37 = &v29[v35[6]];
      *(void *)uint64_t v37 = v22[2];
      *((void *)v37 + 1) = v36;
      uint64_t v38 = v22[5];
      *(void *)&v29[v35[7]] = v22[4];
      *(void *)&v29[v35[8]] = v38;
      uint64_t v39 = v22[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t result = sub_181BC920C((uint64_t)v22, type metadata accessor for NWActorSystemProtobuf_RemoteCall);
      *(void *)&v29[v35[9]] = v39;
    }
  }

  return result;
}

void *sub_181CA0610@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_181CA061C()
{
  return sub_18264ECA0();
}

uint64_t sub_181CA0678()
{
  return sub_18264EC94();
}

uint64_t sub_181CA06C4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58EA90);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_181CA1348();
  sub_18264F714();
  LOBYTE(v12) = 0;
  sub_18264E688();
  sub_181BD67D4(&qword_18C58D9D8, (uint64_t (*)(uint64_t))MEMORY[0x189606F20], MEMORY[0x189606F38]);
  sub_18264F45C();
  if (!v2)
  {
    uint64_t v9 = (int *)type metadata accessor for RemoteCallEnvelope(0LL);
    LOBYTE(v12) = 1;
    type metadata accessor for NWActorID();
    sub_181BD67D4( &qword_18C58EA98,  (uint64_t (*)(uint64_t))type metadata accessor for NWActorID,  (uint64_t)&protocol conformance descriptor for NWActorID);
    sub_18264F45C();
    LOBYTE(v12) = 2;
    sub_18264F444();
    uint64_t v12 = *(void *)(v3 + v9[7]);
    HIBYTE(v11) = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58AC68);
    sub_181CA1414(&qword_18C58EAA0, MEMORY[0x189617FB0], MEMORY[0x189618448]);
    sub_18264F45C();
    uint64_t v12 = *(void *)(v3 + v9[8]);
    HIBYTE(v11) = 4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C58EA78);
    sub_181CA1474(&qword_18C58EAA8, (uint64_t (*)(void))sub_181C0B554, MEMORY[0x189618448]);
    sub_18264F45C();
    uint64_t v12 = *(void *)(v3 + v9[9]);
    HIBYTE(v11) = 5;
    sub_181CA14DC();
    sub_18264F45C();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_181CA0990@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v24 = type metadata accessor for NWActorID();
  MEMORY[0x1895F8858](v24);
  uint64_t v25 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = sub_18264E688();
  uint64_t v4 = *(void *)(v26 - 8);
  MEMORY[0x1895F8858](v26);
  int64_t v27 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58EA58);
  uint64_t v6 = *(void *)(v29 - 8);
  MEMORY[0x1895F8858](v29);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = (int *)type metadata accessor for RemoteCallEnvelope(0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_181CA1348();
  uint64_t v28 = v8;
  uint64_t v12 = v30;
  sub_18264F6E4();
  if (v12) {
    return __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
  }
  uint64_t v13 = (uint64_t)v25;
  uint64_t v30 = v6;
  uint64_t v14 = (uint64_t)v11;
  LOBYTE(v32) = 0;
  sub_181BD67D4(&qword_18C58D9E8, (uint64_t (*)(uint64_t))MEMORY[0x189606F20], MEMORY[0x189606F60]);
  uint64_t v15 = v26;
  uint64_t v16 = v27;
  sub_18264F3F0();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v14, v16, v15);
  LOBYTE(v32) = 1;
  sub_181BD67D4( &qword_18C58EA68,  (uint64_t (*)(uint64_t))type metadata accessor for NWActorID,  (uint64_t)&protocol conformance descriptor for NWActorID);
  sub_18264F3F0();
  sub_181BC928C(v13, v14 + v9[5], (uint64_t (*)(void))type metadata accessor for NWActorID);
  LOBYTE(v32) = 2;
  uint64_t v17 = sub_18264F3D8();
  uint64_t v18 = v30;
  uint64_t v19 = (uint64_t *)(v14 + v9[6]);
  *uint64_t v19 = v17;
  v19[1] = v20;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58AC68);
  char v31 = 3;
  sub_181CA1414(&qword_18C58EA70, MEMORY[0x189617FD8], MEMORY[0x189618478]);
  sub_18264F3F0();
  *(void *)(v14 + v9[7]) = v32;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C58EA78);
  char v31 = 4;
  sub_181CA1474(&qword_18C58EA80, (uint64_t (*)(void))sub_181C0B82C, MEMORY[0x189618478]);
  sub_18264F3F0();
  *(void *)(v14 + v9[8]) = v32;
  char v31 = 5;
  sub_181CA138C();
  sub_18264F3F0();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v28, v29);
  *(void *)(v14 + v9[9]) = v32;
  sub_181CA13D0(v14, v23);
  __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
  return sub_181BC920C(v14, type metadata accessor for RemoteCallEnvelope);
}

uint64_t sub_181CA0E70@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = a2;
  uint64_t v17 = sub_18264E688();
  uint64_t v14 = *(void *)(v17 - 8);
  MEMORY[0x1895F8858](v17);
  uint64_t v16 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58EB90);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CancelRemoteCall(0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_181CA1F28();
  sub_18264F6E4();
  if (!v2)
  {
    sub_181BD67D4(&qword_18C58D9E8, (uint64_t (*)(uint64_t))MEMORY[0x189606F20], MEMORY[0x189606F60]);
    sub_18264F3F0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v16, v17);
    sub_181BC928C((uint64_t)v11, v15, type metadata accessor for CancelRemoteCall);
  }

  return __swift_destroy_boxed_opaque_existential_2((uint64_t)a1);
}

void *sub_181CA103C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_181CA1050@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_181CA1064@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_181CA1078(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_181CA10A8@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_181CA10D4@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_181CA10F8(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_181CA110C(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_181CA1120(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_181CA1134@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_181CA1148(void *a1)
{
  return (*v1 & ~*a1) == 0LL;
}

BOOL sub_181CA115C(void *a1)
{
  return (*v1 & *a1) == 0LL;
}

BOOL sub_181CA1170(void *a1)
{
  return (*a1 & ~*v1) == 0LL;
}

BOOL sub_181CA1184()
{
  return *v0 == 0LL;
}

void *sub_181CA1194(void *result)
{
  *v1 &= ~*result;
  return result;
}

void *sub_181CA11A8@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_181CA11B8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_181BDA220(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_181CA11F4()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_181CA1220 + 4 * byte_182664330[*v0]))( 0x44496C6C6163LL,  0xE600000000000000LL);
}

uint64_t sub_181CA1220()
{
  return 0x6E65697069636572LL;
}

unint64_t sub_181CA123C()
{
  return 0xD000000000000010LL;
}

uint64_t sub_181CA1258()
{
  return 0x53636972656E6567LL;
}

uint64_t sub_181CA1278()
{
  return 1936159329LL;
}

uint64_t sub_181CA1288()
{
  return 0x736E6F6974706FLL;
}

uint64_t sub_181CA12A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_181CA1CA4(a1, a2);
  *a3 = result;
  return result;
}

void sub_181CA12C4(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_181CA12D0()
{
  return sub_18264F738();
}

uint64_t sub_181CA12F8()
{
  return sub_18264F744();
}

uint64_t sub_181CA1320@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_181CA0990(a1, a2);
}

uint64_t sub_181CA1334(void *a1)
{
  return sub_181CA06C4(a1);
}

unint64_t sub_181CA1348()
{
  unint64_t result = qword_18C58EA60;
  if (!qword_18C58EA60)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_1826646FC, &type metadata for RemoteCallEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EA60);
  }

  return result;
}

unint64_t sub_181CA138C()
{
  unint64_t result = qword_18C58EA88;
  if (!qword_18C58EA88)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_1826646D4, &type metadata for RemoteCallEnvelope.Options);
    atomic_store(result, (unint64_t *)&qword_18C58EA88);
  }

  return result;
}

uint64_t sub_181CA13D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RemoteCallEnvelope(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_181CA1414(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C58AC68);
    uint64_t v8 = a2;
    uint64_t result = MEMORY[0x186E12084](a3, v7, &v8);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_181CA1474(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C58EA78);
    uint64_t v8 = a2();
    uint64_t result = MEMORY[0x186E12084](a3, v7, &v8);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_181CA14DC()
{
  unint64_t result = qword_18C58EAB0;
  if (!qword_18C58EAB0)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_1826646AC, &type metadata for RemoteCallEnvelope.Options);
    atomic_store(result, (unint64_t *)&qword_18C58EAB0);
  }

  return result;
}

uint64_t sub_181CA1520(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18264E688();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_181CA155C(uint64_t a1)
{
  uint64_t v2 = sub_18264E688();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
}

uint64_t sub_181CA1590(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18264E688();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_181CA15D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18264E688();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_181CA1618(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18264E688();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_181CA165C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18264E688();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_181CA16A0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_181CA16AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18264E688();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t sub_181CA16E8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_181CA16F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18264E688();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for CancelRemoteCall(uint64_t a1)
{
  return sub_181BD62C8(a1, qword_18C58EB10);
}

uint64_t sub_181CA1748()
{
  uint64_t result = sub_18264E688();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for RemoteCallEnvelope.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_181CA17FC + 4 * byte_18266433B[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_181CA1830 + 4 * byte_182664336[v4]))();
}

uint64_t sub_181CA1830(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181CA1838(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x181CA1840LL);
  }
  return result;
}

uint64_t sub_181CA184C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x181CA1854LL);
  }
  *(_BYTE *)uint64_t result = a2 + 5;
  return result;
}

uint64_t sub_181CA1858(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181CA1860(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RemoteCallEnvelope.CodingKeys()
{
  return &type metadata for RemoteCallEnvelope.CodingKeys;
}

ValueMetadata *type metadata accessor for RemoteCallEnvelope.Options()
{
  return &type metadata for RemoteCallEnvelope.Options;
}

unint64_t sub_181CA1890()
{
  unint64_t result = qword_18C58EB48;
  if (!qword_18C58EB48)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182664434, &type metadata for RemoteCallEnvelope.Options);
    atomic_store(result, (unint64_t *)&qword_18C58EB48);
  }

  return result;
}

unint64_t sub_181CA18D8()
{
  unint64_t result = qword_18C58EB50;
  if (!qword_18C58EB50)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182664404, &type metadata for RemoteCallEnvelope.Options);
    atomic_store(result, (unint64_t *)&qword_18C58EB50);
  }

  return result;
}

unint64_t sub_181CA1920()
{
  unint64_t result = qword_18C58EB58;
  if (!qword_18C58EB58)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_18266445C, &type metadata for RemoteCallEnvelope.Options);
    atomic_store(result, (unint64_t *)&qword_18C58EB58);
  }

  return result;
}

unint64_t sub_181CA1968()
{
  unint64_t result = qword_18C58EB60;
  if (!qword_18C58EB60)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182664494, &type metadata for RemoteCallEnvelope.Options);
    atomic_store(result, (unint64_t *)&qword_18C58EB60);
  }

  return result;
}

unint64_t sub_181CA19B0()
{
  unint64_t result = qword_18C58EB68;
  if (!qword_18C58EB68)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182664624, &type metadata for RemoteCallEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EB68);
  }

  return result;
}

uint64_t sub_181CA19F4()
{
  return 0x44496C6C6163LL;
}

uint64_t sub_181CA1A08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x44496C6C6163LL && a2 == 0xE600000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }

  else
  {
    char v5 = sub_18264F4EC();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }

  *a3 = v7 & 1;
  return result;
}

void sub_181CA1A94(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_181CA1AA0()
{
  return sub_18264F738();
}

uint64_t sub_181CA1AC8()
{
  return sub_18264F744();
}

uint64_t sub_181CA1AF0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_181CA0E70(a1, a2);
}

uint64_t sub_181CA1B04(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58EB80);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_2(a1, a1[3]);
  sub_181CA1F28();
  sub_18264F714();
  sub_18264E688();
  sub_181BD67D4(&qword_18C58D9D8, (uint64_t (*)(uint64_t))MEMORY[0x189606F20], MEMORY[0x189606F38]);
  sub_18264F45C();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_181CA1C18()
{
  unint64_t result = qword_18C58EB70;
  if (!qword_18C58EB70)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182664594, &type metadata for RemoteCallEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EB70);
  }

  return result;
}

unint64_t sub_181CA1C60()
{
  unint64_t result = qword_18C58EB78;
  if (!qword_18C58EB78)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_1826645BC, &type metadata for RemoteCallEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EB78);
  }

  return result;
}

uint64_t sub_181CA1CA4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x44496C6C6163LL && a2 == 0xE600000000000000LL;
  if (v2 || (sub_18264F4EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x6E65697069636572LL && a2 == 0xE900000000000074LL || (sub_18264F4EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0xD000000000000010LL && a2 == 0x800000018272EC50LL || (sub_18264F4EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0x53636972656E6567LL && a2 == 0xEB00000000736275LL || (sub_18264F4EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else if (a1 == 1936159329 && a2 == 0xE400000000000000LL || (sub_18264F4EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4LL;
  }

  else if (a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 5LL;
  }

  else
  {
    char v6 = sub_18264F4EC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 5LL;
    }
    else {
      return 6LL;
    }
  }

unint64_t sub_181CA1F28()
{
  unint64_t result = qword_18C58EB88;
  if (!qword_18C58EB88)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182664804, &type metadata for CancelRemoteCall.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EB88);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for CancelRemoteCall.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_181CA1FAC + 4 * byte_182664340[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_181CA1FCC + 4 * byte_182664345[v4]))();
  }
}

_BYTE *sub_181CA1FAC(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_181CA1FCC(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_181CA1FD4(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_181CA1FDC(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_181CA1FE4(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_181CA1FEC(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CancelRemoteCall.CodingKeys()
{
  return &type metadata for CancelRemoteCall.CodingKeys;
}

unint64_t sub_181CA200C()
{
  unint64_t result = qword_18C58EB98;
  if (!qword_18C58EB98)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_1826647DC, &type metadata for CancelRemoteCall.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EB98);
  }

  return result;
}

unint64_t sub_181CA2054()
{
  unint64_t result = qword_18C58EBA0;
  if (!qword_18C58EBA0)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_18266474C, &type metadata for CancelRemoteCall.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EBA0);
  }

  return result;
}

unint64_t sub_181CA209C()
{
  unint64_t result = qword_18C58EBA8;
  if (!qword_18C58EBA8)
  {
    unint64_t result = MEMORY[0x186E12084](&unk_182664774, &type metadata for CancelRemoteCall.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_18C58EBA8);
  }

  return result;
}

uint64_t sub_181CA20E4(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58ECD8);
  uint64_t v38 = *(void *)(v2 - 8);
  uint64_t v39 = v2;
  MEMORY[0x1895F8858](v2);
  uint64_t v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58BBF8);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v40 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    id v8 = a1;
    if (qword_18C58B258 != -1) {
      swift_once();
    }
    uint64_t v9 = sub_18264E934();
    __swift_project_value_buffer(v9, (uint64_t)qword_18C58EBB0);
    id v10 = a1;
    id v11 = a1;
    uint64_t v12 = (os_log_s *)sub_18264E91C();
    os_log_type_t v13 = sub_18264F018();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 138412290;
      uint64_t v41 = v14 + 4;
      id v16 = a1;
      uint64_t v17 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v43 = v17;
      sub_18264F0CC();
      *uint64_t v15 = v17;

      _os_log_impl(&dword_181A5C000, v12, v13, "Marking file as failed: %@", v14, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C58D610);
      swift_arrayDestroy();
      MEMORY[0x186E12168](v15, -1LL, -1LL);
      MEMORY[0x186E12168](v14, -1LL, -1LL);
    }

    else
    {
    }
  }

  else
  {
    if (qword_18C58B258 != -1) {
      swift_once();
    }
    uint64_t v19 = sub_18264E934();
    __swift_project_value_buffer(v19, (uint64_t)qword_18C58EBB0);
    uint64_t v20 = (os_log_s *)sub_18264E91C();
    os_log_type_t v21 = sub_18264F018();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl(&dword_181A5C000, v20, v21, "Marking file as completed", v22, 2u);
      MEMORY[0x186E12168](v22, -1LL, -1LL);
    }
  }

  uint64_t v23 = v42;
  MEMORY[0x1895F8858](v18);
  *(&v37 - 2) = (uint64_t)a1;
  *(&v37 - 1) = v23;
  uint64_t v25 = v24 + 4;
  os_unfair_lock_lock(v24 + 4);
  sub_181BF787C(v26, (uint64_t (*)(void))sub_181CA4B74);
  os_unfair_lock_unlock(v25);
  os_unfair_lock_lock(v25);
  sub_181CA4B8C(&v43);
  int64_t v27 = (uint8_t *)v43;
  os_unfair_lock_unlock(v25);
  uint64_t v41 = v27;
  uint64_t v28 = *((void *)v27 + 2);
  if (v28)
  {
    uint64_t v29 = v40;
    uint64_t v30 = &v41[(*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)];
    uint64_t v31 = v5;
    uint64_t v42 = *(void *)(v6 + 72);
    uint64_t v32 = *(void (**)(char *, uint8_t *, uint64_t))(v6 + 16);
    uint64_t v33 = v38;
    uint64_t v34 = v39;
    do
    {
      v32(v29, v30, v31);
      LOBYTE(v43) = 1;
      sub_18264EEC8();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v4, v34);
      uint64_t v43 = (uint64_t)a1;
      id v35 = a1;
      sub_18264EED4();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v29, v31);
      v30 += v42;
      --v28;
    }

    while (v28);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_181CA250C(unsigned __int8 *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58ECD8);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58BBF8);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  id v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v12 = *a1;
  if (qword_18C58B258 != -1) {
    swift_once();
  }
  int v28 = v12;
  uint64_t v13 = sub_18264E934();
  __swift_project_value_buffer(v13, (uint64_t)qword_18C58EBB0);
  uint64_t v14 = (os_log_s *)sub_18264E91C();
  os_log_type_t v15 = sub_18264F018();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = v2;
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_181A5C000, v14, v15, "Updating file state", v17, 2u);
    uint64_t v18 = v17;
    uint64_t v2 = v16;
    MEMORY[0x186E12168](v18, -1LL, -1LL);
  }

  uint64_t v19 = (os_unfair_lock_s *)(*(void *)(v2 + 16) + 16LL);
  os_unfair_lock_lock(v19);
  sub_181CA4B8C(&v32);
  uint64_t v20 = v32;
  os_unfair_lock_unlock(v19);
  uint64_t v21 = *(void *)(v20 + 16);
  if (v21)
  {
    uint64_t v22 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v27 = v20;
    uint64_t v23 = v20 + ((v22 + 32) & ~v22);
    uint64_t v29 = *(void *)(v9 + 72);
    uint64_t v30 = v4;
    uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    char v25 = v28;
    do
    {
      v24(v11, v23, v8);
      char v31 = v25;
      sub_18264EEC8();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v30);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      v23 += v29;
      --v21;
    }

    while (v21);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_181CA2768()
{
  uint64_t v0 = sub_18264E934();
  __swift_allocate_value_buffer(v0, qword_18C58EBB0);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_18C58EBB0);
  if (qword_18C58B270 != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_project_value_buffer(v0, (uint64_t)qword_18C5A4A60);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_181CA27F8()
{
  uint64_t result = sub_18264F750();
  qword_18C58EBC8 = result;
  return result;
}

uint64_t static NWFile1.$delegate.getter()
{
  if (qword_18C58B260 != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t static NWFile1.delegate.getter()
{
  if (qword_18C58B260 != -1) {
    swift_once();
  }
  return sub_18264F75C();
}

uint64_t NWFile1.fileURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC7Network7NWFile1_fileURL;
  uint64_t v4 = sub_18264E568();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t NWFile1.transferState.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58EBD0);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1895F8858](v1);
  uint64_t v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58BBF8);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](v5);
  uint64_t v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  MEMORY[0x1895F8858](v7);
  id v11 = &v17[-v10];
  (*(void (**)(_BYTE *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x18961BE60], v1);
  sub_18264EE98();
  (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32))(v11, v9, v5);
  int v12 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v18 = v0;
  uint64_t v19 = v11;
  uint64_t v13 = v12 + 4;
  os_unfair_lock_lock(v12 + 4);
  sub_181CA2C5C((uint64_t)&v20);
  uint64_t v14 = v20;
  int v15 = v21;
  os_unfair_lock_unlock(v13);
  if (v15 != 255)
  {
    if ((v15 & 1) != 0) {
      uint64_t v20 = v14;
    }
    else {
      uint64_t v20 = 0LL;
    }
    sub_18264EED4();
  }

  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v5);
}

id sub_181CA2AD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C58BBF8);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v10 = *(unsigned __int8 *)(a1 + 40);
  if (v10 == 255)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
    swift_beginAccess();
    unint64_t v11 = *(void *)(a1 + 24);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a1 + 24) = v11;
    uint64_t v18 = (unint64_t *)(a1 + 24);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v11 = sub_181BC5B20(0, *(void *)(v11 + 16) + 1LL, 1, v11);
      *(void *)(a1 + 24) = v11;
    }

    unint64_t v14 = *(void *)(v11 + 16);
    unint64_t v13 = *(void *)(v11 + 24);
    if (v14 >= v13 >> 1)
    {
      unint64_t v11 = sub_181BC5B20(v13 > 1, v14 + 1, 1, v11);
      *uint64_t v18 = v11;
    }

    *(void *)(v11 + 16) = v14 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))( v11 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
    + *(void *)(v7 + 72) * v14,
      v9,
      v6);
    swift_endAccess();
    LOBYTE(v10) = *(_BYTE *)(a1 + 40);
  }

  int v15 = *(void **)(a1 + 32);
  *(void *)a3 = v15;
  *(_BYTE *)(a3 + 8) = v10;
  return sub_181CA4BD0(v15, v10);
}

id sub_181CA2C5C@<X0>(uint64_t a1@<X8>)
{
  return sub_181CA2AD8(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t NWFile1.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_18C58D790);
  uint64_t v3 = swift_allocObject();
  *(_DWORD *)(v3 + 16) = 0;
  uint64_t v4 = MEMORY[0x18961AFE8];
  *(void *)(v2 + 16) = v3;
  *(void *)(v2 + 24) = v4;
  *(void *)(v2 + 32) = 0LL;
  *(_BYTE *)(v2 + 40) = -1;
  uint64_t v5 = v2 + OBJC_IVAR____TtC7Network7NWFile1_fileURL;
  uint64_t v6 = sub_18264E568();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(v5, a1, v6);
  return v2;
}