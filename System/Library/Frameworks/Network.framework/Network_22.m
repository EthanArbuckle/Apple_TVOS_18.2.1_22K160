BOOL ___ZL34nw_protocol_http2_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_63( void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  dispatch_data_t v23;
  dispatch_data_s *v24;
  uint64_t v25;
  dispatch_data_s *v26;
  dispatch_data_t v27;
  dispatch_object_s *v28;
  dispatch_data_t v29;
  uint64_t v30;
  dispatch_data_s *v31;
  uint64_t v32;
  dispatch_data_s *v33;
  dispatch_data_t concat;
  dispatch_object_s *v35;
  uint64_t v36;
  const char *v37;
  os_log_s *v38;
  os_log_type_t v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  char *v43;
  BOOL v44;
  char *v45;
  uint64_t v46;
  size_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  BOOL v51;
  int v52;
  const char *v53;
  const char *v54;
  os_log_s *v55;
  os_log_type_t v56;
  uint64_t v57;
  const char *v58;
  BOOL v59;
  int v60;
  const char *v61;
  const char *v62;
  char *backtrace_string;
  BOOL v64;
  uint64_t v65;
  const char *v66;
  const char *v67;
  int v68;
  uint64_t v69;
  const char *v70;
  BOOL v71;
  int v72;
  const char *v73;
  uint64_t v74;
  const char *v75;
  BOOL v76;
  int v77;
  const char *v78;
  char v80;
  os_log_type_t type;
  unsigned int size;
  int size_4;
  const char *v84;
  __int16 v85;
  void *v86;
  __int16 v87;
  const char *v88;
  __int16 v89;
  int v90;
  __int16 v91;
  char *v92;
  uint64_t v93;
  v93 = *MEMORY[0x1895F89C0];
  size = 0;
  v4 = nw_frame_unclaimed_bytes(a2, &size);
  v6 = *(void *)(a1[4] + 8LL);
  v7 = *(unsigned __int16 *)(v6 + 24);
  if (*(_WORD *)(v6 + 24))
  {
    if (size < v7)
    {
      *(_WORD *)(v6 + 24) = v7 - size;
      v8 = *(void *)(a2 + 32);
      v9 = *(void **)(a2 + 40);
      if (v8)
      {
        *(void *)(v8 + 40) = v9;
        v9 = *(void **)(a2 + 40);
      }

      else
      {
        *(void *)(a1[8] + 8LL) = v9;
      }

      *v9 = v8;
      *(void *)(a2 + 32) = 0LL;
      *(void *)(a2 + 40) = 0LL;
      v22 = 1LL;
      nw_frame_finalize(a2);
      return v22;
    }

    nw_frame_claim(a2, v5, v7, 0);
    v10 = (const void *)nw_frame_unclaimed_bytes(a2, &size);
    *(_WORD *)(*(void *)(a1[4] + 8LL) + 24LL) = 0;
  }

  else
  {
    v10 = (const void *)v4;
  }

  v11 = *(void *)(a1[5] + 8LL);
  v12 = *(void *)(v11 + 24);
  if (!v12) {
    return 0LL;
  }
  v13 = size;
  if (v12 <= size)
  {
    v18 = a1[10];
    if (!v18)
    {
      v29 = dispatch_data_create(v10, v12, 0LL, 0LL);
      if (v29)
      {
        v31 = v29;
        v32 = *(void *)(a1[7] + 8LL);
        v33 = *(dispatch_data_s **)(v32 + 24);
        if (v33)
        {
          concat = dispatch_data_create_concat(v33, v31);
          v35 = *(dispatch_object_s **)(*(void *)(a1[7] + 8LL) + 24LL);
          if (v35)
          {
            dispatch_release(v35);
            *(void *)(*(void *)(a1[7] + 8LL) + 24LL) = 0LL;
          }

          dispatch_release(v31);
          *(void *)(*(void *)(a1[7] + 8LL) + 24LL) = concat;
        }

        else
        {
          *(void *)(v32 + 24) = v31;
        }
      }

      goto LABEL_87;
    }

    v19 = *(void *)(v18 + 112);
    if (v19)
    {
      if ((*(_WORD *)(v18 + 204) & 0x100) == 0
        || !g_channel_check_validity
        || g_channel_check_validity(a1[10], *(void *)(v18 + 88)))
      {
        LODWORD(v19) = *(_DWORD *)(v18 + 52);
        v20 = *(unsigned int *)(v18 + 56);
        if ((_DWORD)v19) {
          LODWORD(v19) = v19 - (v20 + *(_DWORD *)(v18 + 60));
        }
        v21 = *(void *)(v18 + 112) + v20;
        goto LABEL_65;
      }

      LODWORD(v19) = 0;
    }

    v21 = 0LL;
LABEL_65:
    v46 = *(unsigned int *)(*(void *)(a1[6] + 8LL) + 24LL);
    v47 = *(void *)(*(void *)(a1[5] + 8LL) + 24LL);
    if (v47 + v46 > v19)
    {
      v48 = a1[11];
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v49 = a1[11];
      v50 = (const char *)(v49 + 390);
      v51 = v49 == 0;
      v52 = *(_DWORD *)(v49 + 368);
      size_4 = 136446978;
      if (v51) {
        v50 = "";
      }
      v84 = "nw_protocol_http2_get_input_frames_block_invoke";
      if (v51) {
        v53 = "";
      }
      else {
        v53 = " ";
      }
      v85 = 2082;
      v86 = (void *)v50;
      v87 = 2080;
      v88 = v53;
      v89 = 1024;
      v90 = v52;
      v54 = (const char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v80 = 0;
      if (__nwlog_fault(v54, &type, &v80))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          v55 = (os_log_s *)gconnectionLogObj;
          v56 = type;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
          {
            v57 = a1[11];
            v58 = (const char *)(v57 + 390);
            v59 = v57 == 0;
            if (!v57) {
              v58 = "";
            }
            v60 = *(_DWORD *)(v57 + 368);
            if (v59) {
              v61 = "";
            }
            else {
              v61 = " ";
            }
            size_4 = 136446978;
            v84 = "nw_protocol_http2_get_input_frames_block_invoke";
            v85 = 2082;
            v86 = (void *)v58;
            v87 = 2080;
            v88 = v61;
            v89 = 1024;
            v90 = v60;
            v62 = "%{public}s %{public}s%s<i%u> Datagram frame is too short";
LABEL_114:
            _os_log_impl(&dword_181A5C000, v55, v56, v62, (uint8_t *)&size_4, 0x26u);
          }
        }

        else if (v80)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          v55 = (os_log_s *)gconnectionLogObj;
          v56 = type;
          v64 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
          if (!backtrace_string)
          {
            if (!v64) {
              goto LABEL_115;
            }
            v74 = a1[11];
            v75 = (const char *)(v74 + 390);
            v76 = v74 == 0;
            if (!v74) {
              v75 = "";
            }
            v77 = *(_DWORD *)(v74 + 368);
            if (v76) {
              v78 = "";
            }
            else {
              v78 = " ";
            }
            size_4 = 136446978;
            v84 = "nw_protocol_http2_get_input_frames_block_invoke";
            v85 = 2082;
            v86 = (void *)v75;
            v87 = 2080;
            v88 = v78;
            v89 = 1024;
            v90 = v77;
            v62 = "%{public}s %{public}s%s<i%u> Datagram frame is too short, no backtrace";
            goto LABEL_114;
          }

          if (v64)
          {
            v65 = a1[11];
            v66 = (const char *)(v65 + 390);
            if (v65)
            {
              v67 = " ";
            }

            else
            {
              v66 = "";
              v67 = "";
            }

            v68 = *(_DWORD *)(v65 + 368);
            size_4 = 136447234;
            v84 = "nw_protocol_http2_get_input_frames_block_invoke";
            v85 = 2082;
            v86 = (void *)v66;
            v87 = 2080;
            v88 = v67;
            v89 = 1024;
            v90 = v68;
            v91 = 2082;
            v92 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v55,  v56,  "%{public}s %{public}s%s<i%u> Datagram frame is too short, dumping backtrace:%{public}s",  (uint8_t *)&size_4,  0x30u);
          }

          free(backtrace_string);
        }

        else
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          v55 = (os_log_s *)gconnectionLogObj;
          v56 = type;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
          {
            v69 = a1[11];
            v70 = (const char *)(v69 + 390);
            v71 = v69 == 0;
            if (!v69) {
              v70 = "";
            }
            v72 = *(_DWORD *)(v69 + 368);
            if (v71) {
              v73 = "";
            }
            else {
              v73 = " ";
            }
            size_4 = 136446978;
            v84 = "nw_protocol_http2_get_input_frames_block_invoke";
            v85 = 2082;
            v86 = (void *)v70;
            v87 = 2080;
            v88 = v73;
            v89 = 1024;
            v90 = v72;
            v62 = "%{public}s %{public}s%s<i%u> Datagram frame is too short, backtrace limit exceeded";
            goto LABEL_114;
          }
        }
      }

uint64_t ___ZL34nw_protocol_http2_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_66( uint64_t a1, uint64_t a2)
{
  uint64_t v222 = *MEMORY[0x1895F89C0];
  unsigned int v4 = nw_frame_unclaimed_length((_DWORD *)a2);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  unsigned int v6 = *(_DWORD *)(v5 + 24);
  unsigned int v7 = *(_DWORD *)(a1 + 76);
  size_t v8 = v7 - v6;
  if (v7 <= v6) {
    return 0LL;
  }
  unsigned int v9 = v4;
  int v10 = v4 - v8;
  if (v4 <= v8)
  {
    *(_DWORD *)(v5 + 24) = v6 + v4;
    uint64_t v17 = *(void *)(a2 + 32);
    v18 = *(void **)(a2 + 40);
    if (v17)
    {
      *(void *)(v17 + 40) = v18;
      v18 = *(void **)(a2 + 40);
    }

    else
    {
      *(void *)(*(void *)(a1 + 48) + 8LL) = v18;
    }

    void *v18 = v17;
    *(void *)(a2 + 32) = 0LL;
    *(void *)(a2 + 40) = 0LL;
    uint64_t v23 = *(void *)(a1 + 48);
    if (v23)
    {
      uint64_t v13 = a2;
      if (((*(unsigned __int16 *)(v23 + 188) | (*(unsigned __int8 *)(v23 + 190) << 16)) & 0x80000) == 0)
      {
        uint64_t v13 = a2;
        if (gLogDatapath)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          uint64_t v24 = gconnectionLogObj;
          uint64_t v13 = a2;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v25 = *(void *)(a1 + 48);
            v26 = (const char *)(v25 + 191);
            v27 = "";
            BOOL v28 = v25 == 0;
            if (!v25) {
              v26 = "";
            }
            uint64_t v31 = v25 + 176;
            int v29 = *(_DWORD *)(v25 + 176);
            int v30 = *(_DWORD *)(v31 + 4);
            if (!v28) {
              v27 = " ";
            }
            *(_DWORD *)buf = 136447490;
            v213 = "nw_protocol_http2_get_input_frames_block_invoke";
            __int16 v214 = 2082;
            v215 = v26;
            __int16 v216 = 2080;
            uint64_t v217 = (uint64_t)v27;
            __int16 v218 = 1024;
            *(_DWORD *)v219 = v30;
            *(_WORD *)&v219[4] = 1024;
            *(_DWORD *)&v219[6] = v29;
            *(_WORD *)&v219[10] = 1024;
            *(_DWORD *)&v219[12] = v9;
            v32 = "%{public}s %{public}s%s<i%u:s%d> delivering entire incoming frame (%u bytes)";
            v33 = (os_log_s *)v24;
            uint32_t v34 = 50;
LABEL_32:
            _os_log_impl(&dword_181A5C000, v33, OS_LOG_TYPE_DEBUG, v32, buf, v34);
            uint64_t v13 = a2;
          }
        }
      }
    }

    else
    {
      uint64_t v125 = *(void *)(a1 + 56);
      if (!v125 || (uint64_t v13 = a2, (*(__int16 *)(v125 + 388) & 0x80000000) == 0))
      {
        uint64_t v13 = a2;
        if (gLogDatapath)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          uint64_t v126 = gconnectionLogObj;
          uint64_t v13 = a2;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v127 = *(void *)(a1 + 56);
            v128 = "";
            BOOL v129 = v127 == 0;
            int v130 = *(_DWORD *)(v127 + 368);
            v131 = (const char *)(v127 + 390);
            v213 = "nw_protocol_http2_get_input_frames_block_invoke";
            __int16 v214 = 2082;
            if (v129) {
              v131 = "";
            }
            *(_DWORD *)buf = 136447234;
            if (!v129) {
              v128 = " ";
            }
            v215 = v131;
            __int16 v216 = 2080;
            uint64_t v217 = (uint64_t)v128;
            __int16 v218 = 1024;
            *(_DWORD *)v219 = v130;
            *(_WORD *)&v219[4] = 1024;
            *(_DWORD *)&v219[6] = v9;
            v32 = "%{public}s %{public}s%s<i%u> delivering entire incoming frame (%u bytes)";
            v33 = (os_log_s *)v126;
            uint32_t v34 = 44;
            goto LABEL_32;
          }
        }
      }
    }

uint64_t ___ZL39nw_protocol_http2_replace_input_handlerP11nw_protocolS0_S0__block_invoke( uint64_t a1, uint64_t a2)
{
  *(void *)(nw_frame_get_metadata(a2) + 8) = *(void *)(a1 + 32);
  return 1LL;
}

BOOL nw_http2_remove_from_protocol_table(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  if ((*(__int16 *)(a1 + 388) & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v24 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v25 = *(_DWORD *)(a1 + 368);
      *(_DWORD *)buf = 136447234;
      int v29 = "nw_http2_remove_from_protocol_table";
      __int16 v30 = 2082;
      uint64_t v31 = a1 + 390;
      __int16 v32 = 2080;
      v33 = " ";
      __int16 v34 = 1024;
      int v35 = v25;
      __int16 v36 = 2048;
      uint64_t v37 = a2;
      _os_log_impl( &dword_181A5C000,  v24,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> called for input handler %p",  buf,  0x30u);
    }
  }

  uint64_t v4 = *(void *)(a1 + 152);
  if (v4)
  {
    BOOL node = nw_hash_table_get_node(v4, a2, 8LL);
    if (node)
    {
      if (nw_hash_table_remove_node(*(void *)(a1 + 152), node))
      {
        *(void *)(a2 + 56) = 0LL;
        BOOL result = 1LL;
        if ((*(__int16 *)(a1 + 388) & 0x80000000) == 0 && gLogDatapath)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          unsigned int v7 = (os_log_s *)gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
          {
            int v8 = *(_DWORD *)(a1 + 368);
            *(_DWORD *)buf = 136447234;
            int v29 = "nw_http2_remove_from_protocol_table";
            __int16 v30 = 2082;
            uint64_t v31 = a1 + 390;
            __int16 v32 = 2080;
            v33 = " ";
            __int16 v34 = 1024;
            int v35 = v8;
            __int16 v36 = 2048;
            uint64_t v37 = a2;
            _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> removed protocol %p from protocol based table",  buf,  0x30u);
          }

          return 1LL;
        }

        return result;
      }

      if ((*(__int16 *)(a1 + 388) & 0x80000000) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        int v13 = *(_DWORD *)(a1 + 368);
        *(_DWORD *)buf = 136447234;
        int v29 = "nw_http2_remove_from_protocol_table";
        __int16 v30 = 2082;
        uint64_t v31 = a1 + 390;
        __int16 v32 = 2080;
        v33 = " ";
        __int16 v34 = 1024;
        int v35 = v13;
        __int16 v36 = 2048;
        uint64_t v37 = a2;
        uint64_t v14 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v26 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          int v15 = (os_log_s *)gconnectionLogObj;
          os_log_type_t v16 = type;
          if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type)) {
            goto LABEL_47;
          }
          int v17 = *(_DWORD *)(a1 + 368);
          *(_DWORD *)buf = 136447234;
          int v29 = "nw_http2_remove_from_protocol_table";
          __int16 v30 = 2082;
          uint64_t v31 = a1 + 390;
          __int16 v32 = 2080;
          v33 = " ";
          __int16 v34 = 1024;
          int v35 = v17;
          __int16 v36 = 2048;
          uint64_t v37 = a2;
          v18 = "%{public}s %{public}s%s<i%u> failed to remove protocol node for protocol %p from table";
        }

        else if (v26)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          int v15 = (os_log_s *)gconnectionLogObj;
          os_log_type_t v16 = type;
          BOOL v20 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
          if (backtrace_string)
          {
            if (v20)
            {
              int v21 = *(_DWORD *)(a1 + 368);
              *(_DWORD *)buf = 136447490;
              int v29 = "nw_http2_remove_from_protocol_table";
              __int16 v30 = 2082;
              uint64_t v31 = a1 + 390;
              __int16 v32 = 2080;
              v33 = " ";
              __int16 v34 = 1024;
              int v35 = v21;
              __int16 v36 = 2048;
              uint64_t v37 = a2;
              __int16 v38 = 2082;
              v39 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v15,  v16,  "%{public}s %{public}s%s<i%u> failed to remove protocol node for protocol %p from table, dumping backtrace:%{public}s",  buf,  0x3Au);
            }

            free(backtrace_string);
            goto LABEL_47;
          }

          if (!v20)
          {
LABEL_47:
            if (v14) {
              free(v14);
            }
            return 0LL;
          }

          int v23 = *(_DWORD *)(a1 + 368);
          *(_DWORD *)buf = 136447234;
          int v29 = "nw_http2_remove_from_protocol_table";
          __int16 v30 = 2082;
          uint64_t v31 = a1 + 390;
          __int16 v32 = 2080;
          v33 = " ";
          __int16 v34 = 1024;
          int v35 = v23;
          __int16 v36 = 2048;
          uint64_t v37 = a2;
          v18 = "%{public}s %{public}s%s<i%u> failed to remove protocol node for protocol %p from table, no backtrace";
        }

        else
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          int v15 = (os_log_s *)gconnectionLogObj;
          os_log_type_t v16 = type;
          if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type)) {
            goto LABEL_47;
          }
          int v22 = *(_DWORD *)(a1 + 368);
          *(_DWORD *)buf = 136447234;
          int v29 = "nw_http2_remove_from_protocol_table";
          __int16 v30 = 2082;
          uint64_t v31 = a1 + 390;
          __int16 v32 = 2080;
          v33 = " ";
          __int16 v34 = 1024;
          int v35 = v22;
          __int16 v36 = 2048;
          uint64_t v37 = a2;
          v18 = "%{public}s %{public}s%s<i%u> failed to remove protocol node for protocol %p from table, backtrace limit exceeded";
        }

        _os_log_impl(&dword_181A5C000, v15, v16, v18, buf, 0x30u);
        goto LABEL_47;
      }

      return 0LL;
    }

    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    unsigned int v9 = (os_log_s *)gconnectionLogObj;
    BOOL result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR);
    if (result)
    {
      int v12 = *(_DWORD *)(a1 + 368);
      *(_DWORD *)buf = 136447234;
      int v29 = "nw_http2_remove_from_protocol_table";
      __int16 v30 = 2082;
      uint64_t v31 = a1 + 390;
      __int16 v32 = 2080;
      v33 = " ";
      __int16 v34 = 1024;
      int v35 = v12;
      __int16 v36 = 2048;
      uint64_t v37 = a2;
      uint64_t v11 = "%{public}s %{public}s%s<i%u> protocol %p is not present in id based table, cannot remove";
      goto LABEL_23;
    }
  }

  else
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    unsigned int v9 = (os_log_s *)gconnectionLogObj;
    BOOL result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR);
    if (result)
    {
      int v10 = *(_DWORD *)(a1 + 368);
      *(_DWORD *)buf = 136447234;
      int v29 = "nw_http2_remove_from_protocol_table";
      __int16 v30 = 2082;
      uint64_t v31 = a1 + 390;
      __int16 v32 = 2080;
      v33 = " ";
      __int16 v34 = 1024;
      int v35 = v10;
      __int16 v36 = 2048;
      uint64_t v37 = a2;
      uint64_t v11 = "%{public}s %{public}s%s<i%u> protocol based table is NULL, cannot remove protocol %p";
LABEL_23:
      _os_log_impl(&dword_181A5C000, v9, OS_LOG_TYPE_ERROR, v11, buf, 0x30u);
      return 0LL;
    }
  }

  return result;
}

uint64_t nw_http2_add_to_protocol_table(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v73 = *MEMORY[0x1895F89C0];
  if (a3)
  {
    if (((*(unsigned __int16 *)(a3 + 188) | (*(unsigned __int8 *)(a3 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v38 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        int v40 = *(_DWORD *)(a3 + 176);
        int v39 = *(_DWORD *)(a3 + 180);
        *(_DWORD *)buf = 136447746;
        v64 = "nw_http2_add_to_protocol_table";
        __int16 v65 = 2082;
        os_log_type_t v66 = (char *)(a3 + 191);
        __int16 v67 = 2080;
        v68 = " ";
        __int16 v69 = 1024;
        int v70 = v39;
        __int16 v71 = 1024;
        *(_DWORD *)uint64_t v72 = v40;
        *(_WORD *)&v72[4] = 2048;
        *(void *)&v72[6] = a2;
        *(_WORD *)&v72[14] = 1024;
        *(_DWORD *)&v72[16] = v40;
        int v35 = "%{public}s %{public}s%s<i%u:s%d> called for protocol %p, stream %d";
        __int16 v36 = (os_log_s *)v38;
        uint32_t v37 = 60;
        goto LABEL_69;
      }
    }
  }

  else if ((*(__int16 *)(a1 + 388) & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v33 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v34 = *(_DWORD *)(a1 + 368);
      *(_DWORD *)buf = 136447490;
      v64 = "nw_http2_add_to_protocol_table";
      __int16 v65 = 2082;
      os_log_type_t v66 = (char *)(a1 + 390);
      __int16 v67 = 2080;
      v68 = " ";
      __int16 v69 = 1024;
      int v70 = v34;
      __int16 v71 = 2048;
      *(void *)uint64_t v72 = a2;
      *(_WORD *)&v72[8] = 1024;
      *(_DWORD *)&v72[10] = -999;
      int v35 = "%{public}s %{public}s%s<i%u> called for protocol %p, stream %d";
      __int16 v36 = (os_log_s *)v33;
      uint32_t v37 = 54;
LABEL_69:
      _os_log_impl(&dword_181A5C000, v36, OS_LOG_TYPE_DEBUG, v35, buf, v37);
    }
  }

  char v62 = 0;
  uint64_t internal = *(void *)(a1 + 152);
  uint64_t internal = nw_hash_table_create_internal( 0x11u,  8,  (const void *(*)(const void *, unsigned int *))nw_http2_get_key,  (unsigned int (*)(const void *, unsigned int))nw_http2_key_hash,  (BOOL (*)(const void *, const void *, unsigned int))nw_http2_matches_key,  0LL);
  if (!internal)
  {
    *(void *)(a1 + 152) = 0LL;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v64 = "nw_http2_add_to_protocol_table";
    int v21 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v60 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v22 = (os_log_s *)gLogObj;
      os_log_type_t v23 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      v64 = "nw_http2_add_to_protocol_table";
      uint64_t v24 = "%{public}s nw_hash_table_create_no_lock failed";
    }

    else if (v60)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v22 = (os_log_s *)gLogObj;
      os_log_type_t v23 = type;
      BOOL v26 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          v64 = "nw_http2_add_to_protocol_table";
          __int16 v65 = 2082;
          os_log_type_t v66 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s nw_hash_table_create_no_lock failed, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_54:
        if (v21)
        {
          uint64_t v31 = (char *)v21;
          goto LABEL_56;
        }

        return 0LL;
      }

      if (!v26) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      v64 = "nw_http2_add_to_protocol_table";
      uint64_t v24 = "%{public}s nw_hash_table_create_no_lock failed, no backtrace";
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v22 = (os_log_s *)gLogObj;
      os_log_type_t v23 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      v64 = "nw_http2_add_to_protocol_table";
      uint64_t v24 = "%{public}s nw_hash_table_create_no_lock failed, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v22, v23, v24, buf, 0xCu);
    goto LABEL_54;
  }

  *(_DWORD *)(internal + 48) &= ~2u;
  *(void *)(a1 + 152) = internal;
LABEL_7:
  BOOL v7 = nw_hash_table_add_object(internal, a2, &v62);
  if (!v62)
  {
    if (a3)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      int v10 = *(_DWORD *)(a3 + 176);
      int v9 = *(_DWORD *)(a3 + 180);
      *(_DWORD *)buf = 136447746;
      v64 = "nw_http2_add_to_protocol_table";
      __int16 v65 = 2082;
      os_log_type_t v66 = (char *)(a3 + 191);
      __int16 v67 = 2080;
      v68 = " ";
      __int16 v69 = 1024;
      int v70 = v9;
      __int16 v71 = 1024;
      *(_DWORD *)uint64_t v72 = v10;
      *(_WORD *)&v72[4] = 1042;
      *(_DWORD *)&v72[6] = 16;
      *(_WORD *)&v72[10] = 2098;
      *(void *)&v72[12] = a2;
      uint64_t v11 = (const char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v60 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        int v12 = (os_log_s *)gconnectionLogObj;
        os_log_type_t v13 = type;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
        {
          int v15 = *(_DWORD *)(a3 + 176);
          int v14 = *(_DWORD *)(a3 + 180);
          *(_DWORD *)buf = 136447746;
          v64 = "nw_http2_add_to_protocol_table";
          __int16 v65 = 2082;
          os_log_type_t v66 = (char *)(a3 + 191);
          __int16 v67 = 2080;
          v68 = " ";
          __int16 v69 = 1024;
          int v70 = v14;
          __int16 v71 = 1024;
          *(_DWORD *)uint64_t v72 = v15;
          *(_WORD *)&v72[4] = 1042;
          *(_DWORD *)&v72[6] = 16;
          *(_WORD *)&v72[10] = 2098;
          *(void *)&v72[12] = a2;
          os_log_type_t v16 = "%{public}s %{public}s%s<i%u:s%d> http2 already has input handler registered for %{public,uuid_t}.16P";
LABEL_46:
          _os_log_impl(&dword_181A5C000, v12, v13, v16, buf, 0x3Cu);
        }
      }

      else if (v60)
      {
        int v17 = (char *)__nw_create_backtrace_string();
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        int v12 = (os_log_s *)gconnectionLogObj;
        os_log_type_t v13 = type;
        BOOL v18 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
        if (!v17)
        {
          if (!v18) {
            goto LABEL_47;
          }
          int v30 = *(_DWORD *)(a3 + 176);
          int v29 = *(_DWORD *)(a3 + 180);
          *(_DWORD *)buf = 136447746;
          v64 = "nw_http2_add_to_protocol_table";
          __int16 v65 = 2082;
          os_log_type_t v66 = (char *)(a3 + 191);
          __int16 v67 = 2080;
          v68 = " ";
          __int16 v69 = 1024;
          int v70 = v29;
          __int16 v71 = 1024;
          *(_DWORD *)uint64_t v72 = v30;
          *(_WORD *)&v72[4] = 1042;
          *(_DWORD *)&v72[6] = 16;
          *(_WORD *)&v72[10] = 2098;
          *(void *)&v72[12] = a2;
          os_log_type_t v16 = "%{public}s %{public}s%s<i%u:s%d> http2 already has input handler registered for %{public,uuid_t}.16P, no backtrace";
          goto LABEL_46;
        }

        if (v18)
        {
          int v20 = *(_DWORD *)(a3 + 176);
          int v19 = *(_DWORD *)(a3 + 180);
          *(_DWORD *)buf = 136448002;
          v64 = "nw_http2_add_to_protocol_table";
          __int16 v65 = 2082;
          os_log_type_t v66 = (char *)(a3 + 191);
          __int16 v67 = 2080;
          v68 = " ";
          __int16 v69 = 1024;
          int v70 = v19;
          __int16 v71 = 1024;
          *(_DWORD *)uint64_t v72 = v20;
          *(_WORD *)&v72[4] = 1042;
          *(_DWORD *)&v72[6] = 16;
          *(_WORD *)&v72[10] = 2098;
          *(void *)&v72[12] = a2;
          *(_WORD *)&v72[20] = 2082;
          *(void *)&v72[22] = v17;
          _os_log_impl( &dword_181A5C000,  v12,  v13,  "%{public}s %{public}s%s<i%u:s%d> http2 already has input handler registered for %{public,uuid_t}.16P, dumpin g backtrace:%{public}s",  buf,  0x46u);
        }

        free(v17);
      }

      else
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        int v12 = (os_log_s *)gconnectionLogObj;
        os_log_type_t v13 = type;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
        {
          int v28 = *(_DWORD *)(a3 + 176);
          int v27 = *(_DWORD *)(a3 + 180);
          *(_DWORD *)buf = 136447746;
          v64 = "nw_http2_add_to_protocol_table";
          __int16 v65 = 2082;
          os_log_type_t v66 = (char *)(a3 + 191);
          __int16 v67 = 2080;
          v68 = " ";
          __int16 v69 = 1024;
          int v70 = v27;
          __int16 v71 = 1024;
          *(_DWORD *)uint64_t v72 = v28;
          *(_WORD *)&v72[4] = 1042;
          *(_DWORD *)&v72[6] = 16;
          *(_WORD *)&v72[10] = 2098;
          *(void *)&v72[12] = a2;
          os_log_type_t v16 = "%{public}s %{public}s%s<i%u:s%d> http2 already has input handler registered for %{public,uuid_t}.16P, ba"
                "cktrace limit exceeded";
          goto LABEL_46;
        }
      }

void nw_http2_get_key(const void *a1, unsigned int *a2)
{
  *a2 = 8;
}

BOOL nw_http2_matches_key(const void *a1, const void *a2)
{
  return a1 == a2;
}

void ___ZL38nw_protocol_http2_remove_input_handlerP11nw_protocolS0_b_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v140 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_destroy";
    uint64_t v3 = _os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v134 = OS_LOG_TYPE_DEFAULT;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v82 = (os_log_s *)__nwlog_obj();
      os_log_type_t v83 = type[0];
      if (!os_log_type_enabled(v82, type[0])) {
        goto LABEL_220;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_destroy";
      v84 = "%{public}s called with null protocol";
LABEL_219:
      _os_log_impl(&dword_181A5C000, v82, v83, v84, buf, 0xCu);
      goto LABEL_220;
    }

    if (v134 == OS_LOG_TYPE_DEFAULT)
    {
      uint64_t v82 = (os_log_s *)__nwlog_obj();
      os_log_type_t v83 = type[0];
      if (!os_log_type_enabled(v82, type[0])) {
        goto LABEL_220;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_destroy";
      v84 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_219;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v82 = (os_log_s *)__nwlog_obj();
    os_log_type_t v83 = type[0];
    BOOL v98 = os_log_type_enabled(v82, type[0]);
    if (!backtrace_string)
    {
      if (!v98) {
        goto LABEL_220;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_destroy";
      v84 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_219;
    }

    if (v98)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_destroy";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v82,  v83,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
LABEL_220:
    if (!v3) {
      return;
    }
    goto LABEL_139;
  }

  uint64_t v3 = *(void *)(v2 + 40);
  if (v3)
  {
    if ((*(__int16 *)(v3 + 388) & 0x80000000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      int v85 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        int v86 = *(_DWORD *)(v3 + 368);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_destroy";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v3 + 390;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&buf[24] = " ";
        LOWORD(v136) = 1024;
        *(_DWORD *)((char *)&v136 + 2) = v86;
        _os_log_impl(&dword_181A5C000, v85, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
      }
    }

    uint64_t v4 = *(void *)(v3 + 88);
    if (v4)
    {
      nw_queue_cancel_source(v4, a2);
      *(void *)(v3 + 88) = 0LL;
    }

    uint64_t v5 = *(void *)(v3 + 152);
    if (v5)
    {
      int v6 = *(_DWORD *)(v5 + 40);
      if (v6)
      {
        if ((*(__int16 *)(v3 + 388) & 0x80000000) == 0 && gLogDatapath)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          BOOL v7 = (os_log_s *)gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
          {
            int v8 = *(_DWORD *)(v3 + 368);
            *(_DWORD *)buf = 136447490;
            *(void *)&uint8_t buf[4] = "nw_protocol_http2_destroy";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v3 + 390;
            *(_WORD *)&buf[22] = 2080;
            *(void *)&buf[24] = " ";
            LOWORD(v136) = 1024;
            *(_DWORD *)((char *)&v136 + 2) = v8;
            HIWORD(v136) = 2048;
            uint64_t v137 = v3;
            __int16 v138 = 1024;
            int v139 = v6;
            _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> not destroying http2 %p, still have %u input handlers",  buf,  0x36u);
          }
        }

        return;
      }

      nw_protocol_set_input_handler(v2, 0LL);
      if ((*(__int16 *)(v3 + 388) & 0x80000000) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v16 = (os_log_s *)gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO))
        {
          int v17 = *(_DWORD *)(v3 + 368);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_http2_destroy";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v3 + 390;
          *(_WORD *)&buf[22] = 2080;
          *(void *)&buf[24] = " ";
          LOWORD(v136) = 1024;
          *(_DWORD *)((char *)&v136 + 2) = v17;
          _os_log_impl( &dword_181A5C000,  v16,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u> no more input handlers, destroying",  buf,  0x26u);
        }
      }

      uint64_t v18 = *(void *)(v3 + 144);
      if (v18) {
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)v18 + 8LL))(v18, v3, 0LL);
      }
      int v19 = *(char **)(v3 + 160);
      uint64_t v20 = MEMORY[0x1895F87A8];
      if (v19)
      {
        *(void *)os_log_type_t type = MEMORY[0x1895F87A8];
        uint64_t v130 = 0x40000000LL;
        v131 = ___ZL25nw_protocol_http2_destroyP11nw_protocol_block_invoke;
        uint64_t v132 = &__block_descriptor_tmp_58_83319;
        uint64_t v133 = v3;
        nw_hash_table_apply(v19, (uint64_t)type);
        int v21 = *(os_unfair_lock_s **)(v3 + 160);
        if (v21)
        {
          _nw_hash_table_release(v21, v15);
          *(void *)(v3 + 160) = 0LL;
        }
      }

      int v22 = *(os_unfair_lock_s **)(v3 + 152);
      if (v22)
      {
        _nw_hash_table_release(v22, v15);
        *(void *)(v3 + 152) = 0LL;
      }

      if (gLogDatapath)
      {
        v112 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v112, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
          _os_log_impl(&dword_181A5C000, v112, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
        }
      }

      *(void *)buf = v20;
      *(void *)&buf[8] = 0x40000000LL;
      *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_81998;
      *(void *)&buf[24] = &__block_descriptor_tmp_30_81999;
      uint64_t v136 = v3 + 240;
      LOBYTE(v137) = 0;
      uint64_t v23 = *(void *)(v3 + 240);
      do
      {
        if (!v23) {
          break;
        }
        uint64_t v24 = *(void *)(v23 + 32);
        char v25 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
        uint64_t v23 = v24;
      }

      while ((v25 & 1) != 0);
      if (!*(void *)(v3 + 168))
      {
LABEL_73:
        if (gLogDatapath)
        {
          os_log_type_t v113 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v113, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_release_master_frame_array";
            _os_log_impl(&dword_181A5C000, v113, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
          }
        }

        *(void *)buf = v20;
        *(void *)&buf[8] = 0x40000000LL;
        *(void *)&buf[16] = ___ZL38nw_protocol_release_master_frame_arrayP16nw_frame_array_s_block_invoke;
        *(void *)&buf[24] = &__block_descriptor_tmp_31_82001;
        uint64_t v136 = v3 + 168;
        uint64_t v43 = *(void *)(v3 + 168);
        do
        {
          if (!v43) {
            break;
          }
          uint64_t v44 = *(void *)(v43 + 16);
          char v45 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
          uint64_t v43 = v44;
        }

        while ((v45 & 1) != 0);
        if (!*(void *)(v3 + 184))
        {
LABEL_94:
          if (gLogDatapath)
          {
            uint32_t v114 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v114, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_release_master_frame_array";
              _os_log_impl(&dword_181A5C000, v114, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
            }
          }

          *(void *)buf = v20;
          *(void *)&buf[8] = 0x40000000LL;
          *(void *)&buf[16] = ___ZL38nw_protocol_release_master_frame_arrayP16nw_frame_array_s_block_invoke;
          *(void *)&buf[24] = &__block_descriptor_tmp_31_82001;
          uint64_t v136 = v3 + 184;
          uint64_t v57 = *(void *)(v3 + 184);
          do
          {
            if (!v57) {
              break;
            }
            uint64_t v58 = *(void *)(v57 + 16);
            char v59 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
            uint64_t v57 = v58;
          }

          while ((v59 & 1) != 0);
          nw_frame_cache_destroy((uint64_t *)(v3 + 200));
          char v60 = *(void **)(v3 + 288);
          if (v60)
          {
            uint64_t v61 = *(void **)(v3 + 296);
            if (v61) {
              nw_association_unregister(v60, v61);
            }
          }

          uint64_t v62 = *(void *)(v2 + 32);
          if (v62)
          {
            uint64_t v63 = *(void *)(v62 + 24);
            if (v63)
            {
              v64 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
              if (v64)
              {
                v64(v62, v2);
                goto LABEL_105;
              }
            }
          }

          __nwlog_obj();
          uint64_t v87 = *(void *)(v2 + 32);
          v88 = "invalid";
          if (v87)
          {
            v89 = *(const char **)(v87 + 16);
            if (v89) {
              v88 = v89;
            }
          }

          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_http2_destroy";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v88;
          BOOL v90 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t v134 = OS_LOG_TYPE_ERROR;
          char v128 = 0;
          if (__nwlog_fault(v90, &v134, &v128))
          {
            if (v134 == OS_LOG_TYPE_FAULT)
            {
              uint64_t v91 = (os_log_s *)__nwlog_obj();
              os_log_type_t v92 = v134;
              if (!os_log_type_enabled(v91, v134)) {
                goto LABEL_228;
              }
              uint64_t v93 = *(void *)(v2 + 32);
              int v94 = "invalid";
              if (v93)
              {
                int v95 = *(const char **)(v93 + 16);
                if (v95) {
                  int v94 = v95;
                }
              }

              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_protocol_http2_destroy";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v94;
              uint64_t v96 = "%{public}s protocol %{public}s has invalid remove_input_handler callback";
              goto LABEL_227;
            }

            if (!v128)
            {
              uint64_t v91 = (os_log_s *)__nwlog_obj();
              os_log_type_t v92 = v134;
              if (!os_log_type_enabled(v91, v134)) {
                goto LABEL_228;
              }
              uint64_t v120 = *(void *)(v2 + 32);
              v121 = "invalid";
              if (v120)
              {
                v122 = *(const char **)(v120 + 16);
                if (v122) {
                  v121 = v122;
                }
              }

              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_protocol_http2_destroy";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v121;
              uint64_t v96 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, backtrace limit exceeded";
              goto LABEL_227;
            }

            v101 = (char *)__nw_create_backtrace_string();
            uint64_t v91 = (os_log_s *)__nwlog_obj();
            os_log_type_t v92 = v134;
            BOOL v102 = os_log_type_enabled(v91, v134);
            if (v101)
            {
              if (v102)
              {
                uint64_t v103 = *(void *)(v2 + 32);
                int v104 = "invalid";
                if (v103)
                {
                  uint64_t v105 = *(const char **)(v103 + 16);
                  if (v105) {
                    int v104 = v105;
                  }
                }

                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_protocol_http2_destroy";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v104;
                *(_WORD *)&buf[22] = 2082;
                *(void *)&buf[24] = v101;
                _os_log_impl( &dword_181A5C000,  v91,  v92,  "%{public}s protocol %{public}s has invalid remove_input_handler callback, dumping backtrace:%{public}s",  buf,  0x20u);
              }

              free(v101);
              goto LABEL_228;
            }

            if (v102)
            {
              uint64_t v123 = *(void *)(v2 + 32);
              uint32_t v124 = "invalid";
              if (v123)
              {
                uint64_t v125 = *(const char **)(v123 + 16);
                if (v125) {
                  uint32_t v124 = v125;
                }
              }

              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_protocol_http2_destroy";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v124;
              uint64_t v96 = "%{public}s protocol %{public}s has invalid remove_input_handler callback, no backtrace";
LABEL_227:
              _os_log_impl(&dword_181A5C000, v91, v92, v96, buf, 0x16u);
            }
          }

uint64_t ___ZL38nw_protocol_http2_remove_input_handlerP11nw_protocolS0_b_block_invoke_56( uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t object = nw_hash_node_get_object(a2);
  nw_protocol_set_input_handler(v3, object);
  *(_OWORD *)*(void *)(a1 + 40) = *(_OWORD *)*(void *)(*(void *)(a1 + 32) + 48LL);
  uint64_t v5 = *(void *)(a1 + 40);
  if ((!v5 || (*(__int16 *)(v5 + 388) & 0x80000000) == 0) && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    BOOL v7 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      int v9 = (const char *)(v8 + 390);
      int v10 = "";
      BOOL v11 = v8 == 0;
      if (!v8) {
        int v9 = "";
      }
      int v12 = *(_DWORD *)(v8 + 368);
      if (!v11) {
        int v10 = " ";
      }
      uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 48LL);
      int v14 = 136447234;
      uint64_t v15 = "nw_protocol_http2_remove_input_handler_block_invoke";
      __int16 v16 = 2082;
      int v17 = v9;
      __int16 v18 = 2080;
      int v19 = v10;
      __int16 v20 = 1024;
      int v21 = v12;
      __int16 v22 = 2048;
      uint64_t v23 = v13;
      _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> reset default input handler to %p",  (uint8_t *)&v14,  0x30u);
    }
  }

  return 0LL;
}

uint64_t ___ZL25nw_protocol_http2_destroyP11nw_protocol_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v60 = *MEMORY[0x1895F89C0];
  uint64_t object = nw_hash_node_get_object(a2);
  if (object)
  {
    uint64_t v5 = object;
    int v6 = *(unsigned __int16 *)(object + 188);
    int v7 = v6 | (*(unsigned __int8 *)(object + 190) << 16);
    if ((v6 & 1) == 0 || *(_DWORD *)(object + 176) == -1)
    {
      if ((v7 & 0x80000) == 0 && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v44 = (os_log_s *)gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          int v46 = *(_DWORD *)(v5 + 176);
          int v45 = *(_DWORD *)(v5 + 180);
          *(_DWORD *)buf = 136447234;
          int v50 = "nw_protocol_http2_destroy_block_invoke";
          __int16 v51 = 2082;
          os_log_type_t v52 = (const char *)(v5 + 191);
          __int16 v53 = 2080;
          int v54 = " ";
          __int16 v55 = 1024;
          int v56 = v45;
          __int16 v57 = 1024;
          *(_DWORD *)uint64_t v58 = v46;
          _os_log_impl( &dword_181A5C000,  v44,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> not closing already closed or invalid stream when destroying",  buf,  0x2Cu);
        }
      }

      *(_WORD *)(v5 + 188) &= ~1u;
      *(_DWORD *)(v5 + 176) = -1;
      nw_hash_table_remove_node(*(void *)(*(void *)(a1 + 32) + 160LL), a2);
    }

    else
    {
      if ((v7 & 0x80000) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v8 = (os_log_s *)gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO))
        {
          int v10 = *(_DWORD *)(v5 + 176);
          int v9 = *(_DWORD *)(v5 + 180);
          *(_DWORD *)buf = 136447490;
          int v50 = "nw_protocol_http2_destroy_block_invoke";
          __int16 v51 = 2082;
          os_log_type_t v52 = (const char *)(v5 + 191);
          __int16 v53 = 2080;
          int v54 = " ";
          __int16 v55 = 1024;
          int v56 = v9;
          __int16 v57 = 1024;
          *(_DWORD *)uint64_t v58 = v10;
          *(_WORD *)&v58[4] = 1024;
          *(_DWORD *)&v58[6] = v10;
          _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:s%d> closing stream %d during destroy, did not have an active input_handler",  buf,  0x32u);
        }
      }

      nw_http2_stream_close(*(void *)(a1 + 32), v5);
    }

    nw_http2_stream_destroy((void **)v5);
    return 1LL;
  }

  uint64_t v11 = *(void *)(a1 + 32);
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
  }
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = (const char *)(v12 + 390);
  BOOL v14 = v12 == 0;
  int v15 = *(_DWORD *)(v12 + 368);
  if (v14) {
    uint64_t v13 = "";
  }
  *(_DWORD *)buf = 136447234;
  int v50 = "nw_protocol_http2_destroy_block_invoke";
  if (v14) {
    __int16 v16 = "";
  }
  else {
    __int16 v16 = " ";
  }
  __int16 v51 = 2082;
  os_log_type_t v52 = v13;
  __int16 v53 = 2080;
  int v54 = v16;
  __int16 v55 = 1024;
  int v56 = v15;
  __int16 v57 = 2048;
  *(void *)uint64_t v58 = a2;
  int v17 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v47 = 0;
  if (__nwlog_fault(v17, &type, &v47))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      __int16 v18 = (os_log_s *)gconnectionLogObj;
      os_log_type_t v19 = type;
      if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type)) {
        goto LABEL_63;
      }
      uint64_t v20 = *(void *)(a1 + 32);
      int v21 = (const char *)(v20 + 390);
      BOOL v22 = v20 == 0;
      if (!v20) {
        int v21 = "";
      }
      int v23 = *(_DWORD *)(v20 + 368);
      if (v22) {
        uint64_t v24 = "";
      }
      else {
        uint64_t v24 = " ";
      }
      *(_DWORD *)buf = 136447234;
      int v50 = "nw_protocol_http2_destroy_block_invoke";
      __int16 v51 = 2082;
      os_log_type_t v52 = v21;
      __int16 v53 = 2080;
      int v54 = v24;
      __int16 v55 = 1024;
      int v56 = v23;
      __int16 v57 = 2048;
      *(void *)uint64_t v58 = a2;
      char v25 = "%{public}s %{public}s%s<i%u> hash node %p didn't have a stream as extra";
      goto LABEL_62;
    }

    if (!v47)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      __int16 v18 = (os_log_s *)gconnectionLogObj;
      os_log_type_t v19 = type;
      if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type)) {
        goto LABEL_63;
      }
      uint64_t v33 = *(void *)(a1 + 32);
      int v34 = (const char *)(v33 + 390);
      BOOL v35 = v33 == 0;
      if (!v33) {
        int v34 = "";
      }
      int v36 = *(_DWORD *)(v33 + 368);
      if (v35) {
        int v37 = "";
      }
      else {
        int v37 = " ";
      }
      *(_DWORD *)buf = 136447234;
      int v50 = "nw_protocol_http2_destroy_block_invoke";
      __int16 v51 = 2082;
      os_log_type_t v52 = v34;
      __int16 v53 = 2080;
      int v54 = v37;
      __int16 v55 = 1024;
      int v56 = v36;
      __int16 v57 = 2048;
      *(void *)uint64_t v58 = a2;
      char v25 = "%{public}s %{public}s%s<i%u> hash node %p didn't have a stream as extra, backtrace limit exceeded";
      goto LABEL_62;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    __int16 v18 = (os_log_s *)gconnectionLogObj;
    os_log_type_t v19 = type;
    BOOL v27 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
    if (backtrace_string)
    {
      if (v27)
      {
        uint64_t v28 = *(void *)(a1 + 32);
        os_log_type_t v29 = (const char *)(v28 + 390);
        BOOL v30 = v28 == 0;
        if (!v28) {
          os_log_type_t v29 = "";
        }
        int v31 = *(_DWORD *)(v28 + 368);
        if (v30) {
          __int16 v32 = "";
        }
        else {
          __int16 v32 = " ";
        }
        *(_DWORD *)buf = 136447490;
        int v50 = "nw_protocol_http2_destroy_block_invoke";
        __int16 v51 = 2082;
        os_log_type_t v52 = v29;
        __int16 v53 = 2080;
        int v54 = v32;
        __int16 v55 = 1024;
        int v56 = v31;
        __int16 v57 = 2048;
        *(void *)uint64_t v58 = a2;
        *(_WORD *)&v58[8] = 2082;
        char v59 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v18,  v19,  "%{public}s %{public}s%s<i%u> hash node %p didn't have a stream as extra, dumping backtrace:%{public}s",  buf,  0x3Au);
      }

      free(backtrace_string);
      goto LABEL_63;
    }

    if (v27)
    {
      uint64_t v38 = *(void *)(a1 + 32);
      int v39 = (const char *)(v38 + 390);
      BOOL v40 = v38 == 0;
      if (!v38) {
        int v39 = "";
      }
      int v41 = *(_DWORD *)(v38 + 368);
      if (v40) {
        int v42 = "";
      }
      else {
        int v42 = " ";
      }
      *(_DWORD *)buf = 136447234;
      int v50 = "nw_protocol_http2_destroy_block_invoke";
      __int16 v51 = 2082;
      os_log_type_t v52 = v39;
      __int16 v53 = 2080;
      int v54 = v42;
      __int16 v55 = 1024;
      int v56 = v41;
      __int16 v57 = 2048;
      *(void *)uint64_t v58 = a2;
      char v25 = "%{public}s %{public}s%s<i%u> hash node %p didn't have a stream as extra, no backtrace";
LABEL_62:
      _os_log_impl(&dword_181A5C000, v18, v19, v25, buf, 0x30u);
    }
  }

void ___ZL36nw_protocol_http2_set_up_associationP17nw_protocol_http2P13nw_parameters_block_invoke( uint64_t a1, void *a2, void *a3)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  uint64_t handle = nw_protocol_instance_stub_get_handle(a2);
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v32 = "nw_protocol_http2_set_up_association_block_invoke";
    int v21 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v32 = "nw_protocol_http2_set_up_association_block_invoke";
      uint64_t v24 = "%{public}s called with null protocol_handle";
      goto LABEL_66;
    }

    if (!v29)
    {
      BOOL v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v32 = "nw_protocol_http2_set_up_association_block_invoke";
      uint64_t v24 = "%{public}s called with null protocol_handle, backtrace limit exceeded";
      goto LABEL_66;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v22 = (os_log_s *)__nwlog_obj();
    os_log_type_t v23 = type;
    BOOL v26 = os_log_type_enabled(v22, type);
    if (!backtrace_string)
    {
      if (!v26) {
        goto LABEL_67;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v32 = "nw_protocol_http2_set_up_association_block_invoke";
      uint64_t v24 = "%{public}s called with null protocol_handle, no backtrace";
      goto LABEL_66;
    }

    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v32 = "nw_protocol_http2_set_up_association_block_invoke";
      __int16 v33 = 2082;
      int v34 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s called with null protocol_handle, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
LABEL_67:
    if (!v21) {
      return;
    }
    goto LABEL_68;
  }

  uint64_t v5 = *(void *)(handle + 40);
  if (!v5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v32 = "nw_protocol_http2_set_up_association_block_invoke";
    int v21 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v32 = "nw_protocol_http2_set_up_association_block_invoke";
      uint64_t v24 = "%{public}s called with null http2";
      goto LABEL_66;
    }

    if (!v29)
    {
      BOOL v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v32 = "nw_protocol_http2_set_up_association_block_invoke";
      uint64_t v24 = "%{public}s called with null http2, backtrace limit exceeded";
      goto LABEL_66;
    }

    BOOL v27 = (char *)__nw_create_backtrace_string();
    BOOL v22 = (os_log_s *)__nwlog_obj();
    os_log_type_t v23 = type;
    BOOL v28 = os_log_type_enabled(v22, type);
    if (v27)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v32 = "nw_protocol_http2_set_up_association_block_invoke";
        __int16 v33 = 2082;
        int v34 = v27;
        _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s called with null http2, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v27);
      if (!v21) {
        return;
      }
LABEL_68:
      free(v21);
      return;
    }

    if (v28)
    {
      *(_DWORD *)buf = 136446210;
      __int16 v32 = "nw_protocol_http2_set_up_association_block_invoke";
      uint64_t v24 = "%{public}s called with null http2, no backtrace";
LABEL_66:
      _os_log_impl(&dword_181A5C000, v22, v23, v24, buf, 0xCu);
      goto LABEL_67;
    }

    goto LABEL_67;
  }

  if ((*(_WORD *)(v5 + 388) & 8) == 0)
  {
    BOOL v6 = nw_path_copy_for_flow_registration(a3, *(void **)(v5 + 280));
    if (v6)
    {
      int v7 = (void *)v6;
      uint64_t v8 = *(void **)(v5 + 120);
      if (v8 != v7)
      {
        if (v8)
        {
          os_release(v8);
          *(void *)(v5 + 120) = 0LL;
        }

        *(void *)(v5 + 120) = os_retain(v7);
      }

      int v9 = *(void **)(v5 + 304);
      if (v9 && (nw_path_has_proxy_config(v7, v9) & 1) == 0)
      {
        if ((*(__int16 *)(v5 + 388) & 0x80000000) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          int v17 = (os_log_s *)gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO))
          {
            int v18 = *(_DWORD *)(v5 + 368);
            *(_DWORD *)buf = 136446978;
            __int16 v32 = "nw_protocol_http2_set_up_association_block_invoke";
            __int16 v33 = 2082;
            int v34 = (char *)(v5 + 390);
            __int16 v35 = 2080;
            int v36 = " ";
            __int16 v37 = 1024;
            int v38 = v18;
            _os_log_impl( &dword_181A5C000,  v17,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u> Effective proxy configuration lost, treating as a GOAWAY",  buf,  0x26u);
          }
        }

        nw_http2_connection_receive_goaway(v5, 0x7FFFFFFFLL);
        goto LABEL_37;
      }

      if ((*(_WORD *)(v5 + 388) & 0x20) != 0)
      {
        BOOL is_viable = nw_path_is_viable(v7);
        int alternate_path_state = nw_path_get_alternate_path_state(v7, a3);
        __int16 v12 = *(_WORD *)(v5 + 388);
        if (is_viable && alternate_path_state == 0)
        {
          if ((v12 & 0x40) != 0)
          {
            if ((*(_WORD *)(v5 + 388) & 0x8000) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              os_log_type_t v19 = (os_log_s *)gconnectionLogObj;
              if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO))
              {
                int v20 = *(_DWORD *)(v5 + 368);
                *(_DWORD *)buf = 136446978;
                __int16 v32 = "nw_protocol_http2_set_up_association_block_invoke";
                __int16 v33 = 2082;
                int v34 = (char *)(v5 + 390);
                __int16 v35 = 2080;
                int v36 = " ";
                __int16 v37 = 1024;
                int v38 = v20;
                _os_log_impl( &dword_181A5C000,  v19,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u> Path recovered, recommending that new flows join",  buf,  0x26u);
              }
            }

            __int16 v16 = *(_WORD *)(v5 + 388) & 0xFFBF;
            goto LABEL_36;
          }
        }

        else if ((v12 & 0x40) == 0)
        {
          if ((*(_WORD *)(v5 + 388) & 0x8000) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            BOOL v14 = (os_log_s *)gconnectionLogObj;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO))
            {
              int v15 = *(_DWORD *)(v5 + 368);
              *(_DWORD *)buf = 136446978;
              __int16 v32 = "nw_protocol_http2_set_up_association_block_invoke";
              __int16 v33 = 2082;
              int v34 = (char *)(v5 + 390);
              __int16 v35 = 2080;
              int v36 = " ";
              __int16 v37 = 1024;
              int v38 = v15;
              _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u> Bad path, recommending that new flows not join",  buf,  0x26u);
            }
          }

          __int16 v16 = *(_WORD *)(v5 + 388) | 0x40;
LABEL_36:
          *(_WORD *)(v5 + 388) = v16;
        }
      }

uint64_t ___ZL32nw_protocol_http2_input_finishedP11nw_protocolS0__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v110 = *MEMORY[0x1895F89C0];
  uint64_t object = nw_hash_node_get_object(a2);
  if (!object)
  {
    uint64_t v14 = *(void *)(a1 + 32);
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v15 = *(void *)(a1 + 32);
    __int16 v16 = (const char *)(v15 + 390);
    BOOL v17 = v15 == 0;
    int v18 = *(_DWORD *)(v15 + 368);
    if (v17) {
      __int16 v16 = "";
    }
    *(_DWORD *)buf = 136447234;
    BOOL v100 = "nw_protocol_http2_input_finished_block_invoke";
    if (v17) {
      os_log_type_t v19 = "";
    }
    else {
      os_log_type_t v19 = " ";
    }
    __int16 v101 = 2082;
    BOOL v102 = v16;
    __int16 v103 = 2080;
    int v104 = v19;
    __int16 v105 = 1024;
    int v106 = v18;
    __int16 v107 = 2048;
    *(void *)v108 = a2;
    int v20 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v97 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      int v21 = (os_log_s *)gconnectionLogObj;
      os_log_type_t v22 = type;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
      {
        uint64_t v23 = *(void *)(a1 + 32);
        uint64_t v24 = (const char *)(v23 + 390);
        BOOL v25 = v23 == 0;
        if (!v23) {
          uint64_t v24 = "";
        }
        int v26 = *(_DWORD *)(v23 + 368);
        if (v25) {
          BOOL v27 = "";
        }
        else {
          BOOL v27 = " ";
        }
        *(_DWORD *)buf = 136447234;
        BOOL v100 = "nw_protocol_http2_input_finished_block_invoke";
        __int16 v101 = 2082;
        BOOL v102 = v24;
        __int16 v103 = 2080;
        int v104 = v27;
        __int16 v105 = 1024;
        int v106 = v26;
        __int16 v107 = 2048;
        *(void *)v108 = a2;
        BOOL v28 = "%{public}s %{public}s%s<i%u> no object for hash node %p, skipping input_finished";
LABEL_102:
        _os_log_impl(&dword_181A5C000, v21, v22, v28, buf, 0x30u);
      }
    }

    else if (v97)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      int v21 = (os_log_s *)gconnectionLogObj;
      os_log_type_t v22 = type;
      BOOL v54 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
      if (!backtrace_string)
      {
        if (!v54) {
          goto LABEL_103;
        }
        uint64_t v66 = *(void *)(a1 + 32);
        __int16 v67 = (const char *)(v66 + 390);
        BOOL v68 = v66 == 0;
        if (!v66) {
          __int16 v67 = "";
        }
        int v69 = *(_DWORD *)(v66 + 368);
        if (v68) {
          int v70 = "";
        }
        else {
          int v70 = " ";
        }
        *(_DWORD *)buf = 136447234;
        BOOL v100 = "nw_protocol_http2_input_finished_block_invoke";
        __int16 v101 = 2082;
        BOOL v102 = v67;
        __int16 v103 = 2080;
        int v104 = v70;
        __int16 v105 = 1024;
        int v106 = v69;
        __int16 v107 = 2048;
        *(void *)v108 = a2;
        BOOL v28 = "%{public}s %{public}s%s<i%u> no object for hash node %p, skipping input_finished, no backtrace";
        goto LABEL_102;
      }

      if (v54)
      {
        uint64_t v55 = *(void *)(a1 + 32);
        int v56 = (const char *)(v55 + 390);
        BOOL v57 = v55 == 0;
        if (!v55) {
          int v56 = "";
        }
        int v58 = *(_DWORD *)(v55 + 368);
        if (v57) {
          char v59 = "";
        }
        else {
          char v59 = " ";
        }
        *(_DWORD *)buf = 136447490;
        BOOL v100 = "nw_protocol_http2_input_finished_block_invoke";
        __int16 v101 = 2082;
        BOOL v102 = v56;
        __int16 v103 = 2080;
        int v104 = v59;
        __int16 v105 = 1024;
        int v106 = v58;
        __int16 v107 = 2048;
        *(void *)v108 = a2;
        *(_WORD *)&v108[8] = 2082;
        os_log_type_t v109 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v21,  v22,  "%{public}s %{public}s%s<i%u> no object for hash node %p, skipping input_finished, dumping backtrace:%{public}s",  buf,  0x3Au);
      }

      free(backtrace_string);
    }

    else
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      int v21 = (os_log_s *)gconnectionLogObj;
      os_log_type_t v22 = type;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
      {
        uint64_t v61 = *(void *)(a1 + 32);
        uint64_t v62 = (const char *)(v61 + 390);
        BOOL v63 = v61 == 0;
        if (!v61) {
          uint64_t v62 = "";
        }
        int v64 = *(_DWORD *)(v61 + 368);
        if (v63) {
          uint64_t v65 = "";
        }
        else {
          uint64_t v65 = " ";
        }
        *(_DWORD *)buf = 136447234;
        BOOL v100 = "nw_protocol_http2_input_finished_block_invoke";
        __int16 v101 = 2082;
        BOOL v102 = v62;
        __int16 v103 = 2080;
        int v104 = v65;
        __int16 v105 = 1024;
        int v106 = v64;
        __int16 v107 = 2048;
        *(void *)v108 = a2;
        BOOL v28 = "%{public}s %{public}s%s<i%u> no object for hash node %p, skipping input_finished, backtrace limit exceeded";
        goto LABEL_102;
      }
    }

double __nw_protocol_http2_identifier_block_invoke()
{
  *(void *)&double result = 0x200000004LL;
  qword_18C594214 = 0x200000004LL;
  return result;
}

uint64_t nw_network_agent_ctl_setsockopt( int a1, int a2, unsigned __int8 *uu, _BYTE *a4, _BYTE *a5, uint64_t a6, int a7, int a8, char a9, char a10, char a11, char a12, char a13, char a14, char a15, char a16, unsigned __int8 a17, unsigned __int8 a18, char a19, const unsigned __int8 *a20, unsigned int a21)
{
  uint64_t v53 = *MEMORY[0x1895F89C0];
  if (a2 == 2) {
    return nw_network_agent_ctl_setsockopt_inner(a1, 2, 0LL, 0, 0LL, 0);
  }
  if (!uu)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_network_agent_ctl_setsockopt";
    BOOL v27 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v28 = (os_log_s *)__nwlog_obj();
      os_log_type_t v29 = type;
      if (!os_log_type_enabled(v28, type)) {
        goto LABEL_122;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_network_agent_ctl_setsockopt";
      BOOL v30 = "%{public}s called with null netagent_uuid";
      goto LABEL_121;
    }

    if (!v44)
    {
      BOOL v28 = (os_log_s *)__nwlog_obj();
      os_log_type_t v29 = type;
      if (!os_log_type_enabled(v28, type)) {
        goto LABEL_122;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_network_agent_ctl_setsockopt";
      BOOL v30 = "%{public}s called with null netagent_uuid, backtrace limit exceeded";
      goto LABEL_121;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v28 = (os_log_s *)__nwlog_obj();
    os_log_type_t v29 = type;
    BOOL v38 = os_log_type_enabled(v28, type);
    if (!backtrace_string)
    {
      if (!v38) {
        goto LABEL_122;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_network_agent_ctl_setsockopt";
      BOOL v30 = "%{public}s called with null netagent_uuid, no backtrace";
      goto LABEL_121;
    }

    if (!v38) {
      goto LABEL_116;
    }
LABEL_114:
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_network_agent_ctl_setsockopt";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    __int16 v37 = "%{public}s called with null netagent_uuid, dumping backtrace:%{public}s";
LABEL_115:
    _os_log_impl(&dword_181A5C000, v28, v29, v37, buf, 0x16u);
    goto LABEL_116;
  }

  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_network_agent_ctl_setsockopt";
    BOOL v27 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v28 = (os_log_s *)__nwlog_obj();
      os_log_type_t v29 = type;
      if (!os_log_type_enabled(v28, type)) {
        goto LABEL_122;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_network_agent_ctl_setsockopt";
      BOOL v30 = "%{public}s called with null domain";
      goto LABEL_121;
    }

    if (!v44)
    {
      BOOL v28 = (os_log_s *)__nwlog_obj();
      os_log_type_t v29 = type;
      if (!os_log_type_enabled(v28, type)) {
        goto LABEL_122;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_network_agent_ctl_setsockopt";
      BOOL v30 = "%{public}s called with null domain, backtrace limit exceeded";
      goto LABEL_121;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v28 = (os_log_s *)__nwlog_obj();
    os_log_type_t v29 = type;
    BOOL v39 = os_log_type_enabled(v28, type);
    if (!backtrace_string)
    {
      if (!v39) {
        goto LABEL_122;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_network_agent_ctl_setsockopt";
      BOOL v30 = "%{public}s called with null domain, no backtrace";
      goto LABEL_121;
    }

    if (!v39) {
      goto LABEL_116;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_network_agent_ctl_setsockopt";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    __int16 v37 = "%{public}s called with null domain, dumping backtrace:%{public}s";
    goto LABEL_115;
  }

  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_network_agent_ctl_setsockopt";
    BOOL v27 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v28 = (os_log_s *)__nwlog_obj();
      os_log_type_t v29 = type;
      if (!os_log_type_enabled(v28, type)) {
        goto LABEL_122;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_network_agent_ctl_setsockopt";
      BOOL v30 = "%{public}s called with null type";
      goto LABEL_121;
    }

    if (!v44)
    {
      BOOL v28 = (os_log_s *)__nwlog_obj();
      os_log_type_t v29 = type;
      if (!os_log_type_enabled(v28, type)) {
        goto LABEL_122;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_network_agent_ctl_setsockopt";
      BOOL v30 = "%{public}s called with null type, backtrace limit exceeded";
      goto LABEL_121;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v28 = (os_log_s *)__nwlog_obj();
    os_log_type_t v29 = type;
    BOOL v40 = os_log_type_enabled(v28, type);
    if (!backtrace_string)
    {
      if (!v40) {
        goto LABEL_122;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_network_agent_ctl_setsockopt";
      BOOL v30 = "%{public}s called with null type, no backtrace";
      goto LABEL_121;
    }

    if (!v40) {
      goto LABEL_116;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_network_agent_ctl_setsockopt";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    __int16 v37 = "%{public}s called with null type, dumping backtrace:%{public}s";
    goto LABEL_115;
  }

  if (!uuid_is_null(uu))
  {
    uint64_t v52 = 0LL;
    __int128 v51 = 0u;
    __int128 v49 = 0u;
    memset(v50, 0, sizeof(v50));
    __int128 v47 = 0u;
    __int128 v48 = 0u;
    *(_OWORD *)buf = *(_OWORD *)uu;
    *(_OWORD *)&buf[16] = 0u;
    buf[16] = *a4;
    if (buf[16])
    {
      buf[17] = a4[1];
      if (buf[17])
      {
        buf[18] = a4[2];
        if (buf[18])
        {
          buf[19] = a4[3];
          if (buf[19])
          {
            buf[20] = a4[4];
            if (buf[20])
            {
              buf[21] = a4[5];
              if (buf[21])
              {
                buf[22] = a4[6];
                if (buf[22])
                {
                  buf[23] = a4[7];
                  if (buf[23])
                  {
                    buf[24] = a4[8];
                    if (buf[24])
                    {
                      buf[25] = a4[9];
                      if (buf[25])
                      {
                        buf[26] = a4[10];
                        if (buf[26])
                        {
                          buf[27] = a4[11];
                          if (buf[27])
                          {
                            buf[28] = a4[12];
                            if (buf[28])
                            {
                              buf[29] = a4[13];
                              if (buf[29])
                              {
                                buf[30] = a4[14];
                                if (buf[30])
                                {
                                  buf[31] = a4[15];
                                  if (buf[31])
                                  {
                                    LOBYTE(v47) = a4[16];
                                    if ((_BYTE)v47)
                                    {
                                      BYTE1(v47) = a4[17];
                                      if (BYTE1(v47))
                                      {
                                        BYTE2(v47) = a4[18];
                                        if (BYTE2(v47))
                                        {
                                          BYTE3(v47) = a4[19];
                                          if (BYTE3(v47))
                                          {
                                            BYTE4(v47) = a4[20];
                                            if (BYTE4(v47))
                                            {
                                              BYTE5(v47) = a4[21];
                                              if (BYTE5(v47))
                                              {
                                                BYTE6(v47) = a4[22];
                                                if (BYTE6(v47))
                                                {
                                                  BYTE7(v47) = a4[23];
                                                  if (BYTE7(v47))
                                                  {
                                                    BYTE8(v47) = a4[24];
                                                    if (BYTE8(v47))
                                                    {
                                                      BYTE9(v47) = a4[25];
                                                      if (BYTE9(v47))
                                                      {
                                                        BYTE10(v47) = a4[26];
                                                        if (BYTE10(v47))
                                                        {
                                                          BYTE11(v47) = a4[27];
                                                          if (BYTE11(v47))
                                                          {
                                                            BYTE12(v47) = a4[28];
                                                            if (BYTE12(v47))
                                                            {
                                                              BYTE13(v47) = a4[29];
                                                              if (BYTE13(v47))
                                                              {
                                                                BYTE14(v47) = a4[30];
                                                                if (BYTE14(v47)) {
                                                                  HIBYTE(v47) = 0;
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    LOBYTE(v48) = *a5;
    if ((_BYTE)v48)
    {
      BYTE1(v48) = a5[1];
      if (BYTE1(v48))
      {
        BYTE2(v48) = a5[2];
        if (BYTE2(v48))
        {
          BYTE3(v48) = a5[3];
          if (BYTE3(v48))
          {
            BYTE4(v48) = a5[4];
            if (BYTE4(v48))
            {
              BYTE5(v48) = a5[5];
              if (BYTE5(v48))
              {
                BYTE6(v48) = a5[6];
                if (BYTE6(v48))
                {
                  BYTE7(v48) = a5[7];
                  if (BYTE7(v48))
                  {
                    BYTE8(v48) = a5[8];
                    if (BYTE8(v48))
                    {
                      BYTE9(v48) = a5[9];
                      if (BYTE9(v48))
                      {
                        BYTE10(v48) = a5[10];
                        if (BYTE10(v48))
                        {
                          BYTE11(v48) = a5[11];
                          if (BYTE11(v48))
                          {
                            BYTE12(v48) = a5[12];
                            if (BYTE12(v48))
                            {
                              BYTE13(v48) = a5[13];
                              if (BYTE13(v48))
                              {
                                BYTE14(v48) = a5[14];
                                if (BYTE14(v48))
                                {
                                  HIBYTE(v48) = a5[15];
                                  if (HIBYTE(v48))
                                  {
                                    LOBYTE(v49) = a5[16];
                                    if ((_BYTE)v49)
                                    {
                                      BYTE1(v49) = a5[17];
                                      if (BYTE1(v49))
                                      {
                                        BYTE2(v49) = a5[18];
                                        if (BYTE2(v49))
                                        {
                                          BYTE3(v49) = a5[19];
                                          if (BYTE3(v49))
                                          {
                                            BYTE4(v49) = a5[20];
                                            if (BYTE4(v49))
                                            {
                                              BYTE5(v49) = a5[21];
                                              if (BYTE5(v49))
                                              {
                                                BYTE6(v49) = a5[22];
                                                if (BYTE6(v49))
                                                {
                                                  BYTE7(v49) = a5[23];
                                                  if (BYTE7(v49))
                                                  {
                                                    BYTE8(v49) = a5[24];
                                                    if (BYTE8(v49))
                                                    {
                                                      BYTE9(v49) = a5[25];
                                                      if (BYTE9(v49))
                                                      {
                                                        BYTE10(v49) = a5[26];
                                                        if (BYTE10(v49))
                                                        {
                                                          BYTE11(v49) = a5[27];
                                                          if (BYTE11(v49))
                                                          {
                                                            BYTE12(v49) = a5[28];
                                                            if (BYTE12(v49))
                                                            {
                                                              BYTE13(v49) = a5[29];
                                                              if (BYTE13(v49))
                                                              {
                                                                BYTE14(v49) = a5[30];
                                                                if (BYTE14(v49)) {
                                                                  HIBYTE(v49) = 0;
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    if (a6)
    {
      uint64_t v31 = 0LL;
      while (1)
      {
        int v32 = *(unsigned __int8 *)(a6 + v31);
        *((_BYTE *)v50 + v31) = v32;
        if (!v32) {
          break;
        }
        if (++v31 == 127)
        {
          HIBYTE(v51) = 0;
          break;
        }
      }
    }

    if (a7)
    {
      LODWORD(v52) = v52 | 2;
      int v34 = a17;
      int v33 = a18;
      if (!a8) {
        goto LABEL_82;
      }
    }

    else
    {
      int v34 = a17;
      int v33 = a18;
      if (!a8)
      {
LABEL_82:
        if (a9) {
          goto LABEL_83;
        }
        goto LABEL_97;
      }
    }

    LODWORD(v52) = v52 | 4;
    if (a9)
    {
LABEL_83:
      LODWORD(v52) = v52 | 8;
      if (!a10) {
        goto LABEL_84;
      }
      goto LABEL_98;
    }

uint64_t nw_network_agent_ctl_setsockopt_inner( int a1, int a2, const unsigned __int8 *a3, unsigned int a4, const unsigned __int8 *a5, unsigned int a6)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  uint64_t v8 = a6 + a4;
  if (__CFADD__(a6, a4))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446722;
    BOOL v36 = "nw_network_agent_ctl_setsockopt_inner";
    __int16 v37 = 1024;
    *(_DWORD *)BOOL v38 = a4;
    *(_WORD *)&v38[4] = 1024;
    *(_DWORD *)&v38[6] = a6;
    int v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (__nwlog_fault(v9, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v10 = (os_log_s *)gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446722;
          BOOL v36 = "nw_network_agent_ctl_setsockopt_inner";
          __int16 v37 = 1024;
          *(_DWORD *)BOOL v38 = a4;
          *(_WORD *)&v38[4] = 1024;
          *(_DWORD *)&v38[6] = a6;
          int v12 = "%{public}s Invalid payload values (%u, %u)";
LABEL_35:
          _os_log_impl(&dword_181A5C000, v10, v11, v12, buf, 0x18u);
        }
      }

      else if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v10 = (os_log_s *)gLogObj;
        os_log_type_t v11 = type;
        BOOL v20 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446978;
            BOOL v36 = "nw_network_agent_ctl_setsockopt_inner";
            __int16 v37 = 1024;
            *(_DWORD *)BOOL v38 = a4;
            *(_WORD *)&v38[4] = 1024;
            *(_DWORD *)&v38[6] = a6;
            __int16 v39 = 2082;
            BOOL v40 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s Invalid payload values (%u, %u), dumping backtrace:%{public}s",  buf,  0x22u);
          }

          free(backtrace_string);
          goto LABEL_36;
        }

        if (v20)
        {
          *(_DWORD *)buf = 136446722;
          BOOL v36 = "nw_network_agent_ctl_setsockopt_inner";
          __int16 v37 = 1024;
          *(_DWORD *)BOOL v38 = a4;
          *(_WORD *)&v38[4] = 1024;
          *(_DWORD *)&v38[6] = a6;
          int v12 = "%{public}s Invalid payload values (%u, %u), no backtrace";
          goto LABEL_35;
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v10 = (os_log_s *)gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446722;
          BOOL v36 = "nw_network_agent_ctl_setsockopt_inner";
          __int16 v37 = 1024;
          *(_DWORD *)BOOL v38 = a4;
          *(_WORD *)&v38[4] = 1024;
          *(_DWORD *)&v38[6] = a6;
          int v12 = "%{public}s Invalid payload values (%u, %u), backtrace limit exceeded";
          goto LABEL_35;
        }
      }
    }

uint64_t nw_network_agent_ctl_simple_setsockopt(int a1, int a2, const unsigned __int8 *a3, unsigned int a4)
{
  return nw_network_agent_ctl_setsockopt_inner(a1, a2, a3, a4, 0LL, 0);
}

uint64_t nw_network_agent_ctl_send_assign_message(int a1, unsigned __int8 *a2, unsigned int a3)
{
  return nw_network_agent_ctl_setsockopt_inner(a1, 11, a2, a3, 0LL, 0);
}

uint64_t nw_network_agent_ctl_send_assign_group_message(int a1, unsigned __int8 *a2, unsigned int a3)
{
  return nw_network_agent_ctl_setsockopt_inner(a1, 20, a2, a3, 0LL, 0);
}

uint64_t nw_network_agent_ctl_copy_received_agent_message(int a1, _BYTE *a2)
{
  uint64_t v64 = *MEMORY[0x1895F89C0];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
    uint64_t v6 = _os_log_send_and_compose_impl();
    v57[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (v57[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v53 = (os_log_s *)__nwlog_obj();
      os_log_type_t v54 = v57[0];
      if (!os_log_type_enabled(v53, v57[0])) {
        goto LABEL_78;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
      int v9 = "%{public}s called with null no_message_available";
    }

    else if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v53 = (os_log_s *)__nwlog_obj();
      os_log_type_t v54 = v57[0];
      BOOL v55 = os_log_type_enabled(v53, v57[0]);
      if (backtrace_string)
      {
        if (!v55)
        {
LABEL_64:
          free(backtrace_string);
          if (!v6) {
            return 0LL;
          }
          goto LABEL_79;
        }

        *(_DWORD *)buf = 136446466;
        uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
        __int16 v62 = 2082;
        *(void *)BOOL v63 = backtrace_string;
        int v32 = "%{public}s called with null no_message_available, dumping backtrace:%{public}s";
        char v33 = v53;
        os_log_type_t v34 = v54;
        uint32_t v35 = 22;
        goto LABEL_63;
      }

      if (!v55) {
        goto LABEL_78;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
      int v9 = "%{public}s called with null no_message_available, no backtrace";
    }

    else
    {
      uint64_t v53 = (os_log_s *)__nwlog_obj();
      os_log_type_t v54 = v57[0];
      if (!os_log_type_enabled(v53, v57[0])) {
        goto LABEL_78;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
      int v9 = "%{public}s called with null no_message_available, backtrace limit exceeded";
    }

    BOOL v38 = v53;
    os_log_type_t v39 = v54;
    uint32_t v40 = 12;
    goto LABEL_77;
  }

  *a2 = 0;
  if (a1 < 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
    __int16 v62 = 1024;
    *(_DWORD *)BOOL v63 = a1;
    uint64_t v6 = _os_log_send_and_compose_impl();
    v57[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (v57[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v10 = gLogObj;
      os_log_type_t v11 = v57[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, v57[0])) {
        goto LABEL_78;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
      __int16 v62 = 1024;
      *(_DWORD *)BOOL v63 = a1;
      int v9 = "%{public}s Trying to read from invalid network agent socket %d";
    }

    else if (type)
    {
      uint64_t v15 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v10 = gLogObj;
      os_log_type_t v11 = v57[0];
      BOOL v16 = os_log_type_enabled((os_log_t)gLogObj, v57[0]);
      if (v15)
      {
        if (!v16) {
          goto LABEL_35;
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
        __int16 v62 = 1024;
        *(_DWORD *)BOOL v63 = a1;
        *(_WORD *)&v63[4] = 2082;
        *(void *)&v63[6] = v15;
        BOOL v17 = "%{public}s Trying to read from invalid network agent socket %d, dumping backtrace:%{public}s";
        int v18 = (os_log_s *)v10;
        os_log_type_t v19 = v11;
        uint32_t v20 = 28;
        goto LABEL_34;
      }

      if (!v16) {
        goto LABEL_78;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
      __int16 v62 = 1024;
      *(_DWORD *)BOOL v63 = a1;
      int v9 = "%{public}s Trying to read from invalid network agent socket %d, no backtrace";
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v10 = gLogObj;
      os_log_type_t v11 = v57[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, v57[0])) {
        goto LABEL_78;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
      __int16 v62 = 1024;
      *(_DWORD *)BOOL v63 = a1;
      int v9 = "%{public}s Trying to read from invalid network agent socket %d, backtrace limit exceeded";
    }

    BOOL v38 = (os_log_s *)v10;
    os_log_type_t v39 = v11;
LABEL_50:
    uint32_t v40 = 18;
LABEL_77:
    _os_log_impl(&dword_181A5C000, v38, v39, v9, buf, v40);
    goto LABEL_78;
  }

  *(void *)BOOL v57 = 0LL;
  uint64_t v58 = 0LL;
  ssize_t v4 = recv(a1, v57, 0x10uLL, 2);
  if (v4 <= 15)
  {
    ssize_t v5 = v4;
    if ((v4 & 0x8000000000000000LL) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446722;
      uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
      __int16 v62 = 2048;
      *(void *)BOOL v63 = v5;
      *(_WORD *)&v63[8] = 2048;
      *(void *)&v63[10] = 16LL;
      uint64_t v6 = _os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v56 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v7 = gLogObj;
        os_log_type_t v8 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_78;
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
        __int16 v62 = 2048;
        *(void *)BOOL v63 = v5;
        *(_WORD *)&v63[8] = 2048;
        *(void *)&v63[10] = 16LL;
        int v9 = "%{public}s Not enough bytes available to read network agent message header (%zd < %zd)";
LABEL_73:
        BOOL v38 = (os_log_s *)v7;
        os_log_type_t v39 = v8;
        uint32_t v40 = 32;
        goto LABEL_77;
      }

      if (!v56)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v7 = gLogObj;
        os_log_type_t v8 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_78;
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
        __int16 v62 = 2048;
        *(void *)BOOL v63 = v5;
        *(_WORD *)&v63[8] = 2048;
        *(void *)&v63[10] = 16LL;
        int v9 = "%{public}s Not enough bytes available to read network agent message header (%zd < %zd), backtrace limit exceeded";
        goto LABEL_73;
      }

      uint64_t v15 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v7 = gLogObj;
      os_log_type_t v8 = type;
      BOOL v29 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (!v15)
      {
        if (!v29) {
          goto LABEL_78;
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
        __int16 v62 = 2048;
        *(void *)BOOL v63 = v5;
        *(_WORD *)&v63[8] = 2048;
        *(void *)&v63[10] = 16LL;
        int v9 = "%{public}s Not enough bytes available to read network agent message header (%zd < %zd), no backtrace";
        goto LABEL_73;
      }

      if (!v29)
      {
LABEL_35:
        free(v15);
        if (!v6) {
          return 0LL;
        }
        goto LABEL_79;
      }

      *(_DWORD *)buf = 136446978;
      uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
      __int16 v62 = 2048;
      *(void *)BOOL v63 = v5;
      *(_WORD *)&v63[8] = 2048;
      *(void *)&v63[10] = 16LL;
      *(_WORD *)&v63[18] = 2082;
      *(void *)&v63[20] = v15;
      BOOL v17 = "%{public}s Not enough bytes available to read network agent message header (%zd < %zd), dumping backtrace:%{public}s";
      int v18 = (os_log_s *)v7;
      os_log_type_t v19 = v8;
      uint32_t v20 = 42;
LABEL_34:
      _os_log_impl(&dword_181A5C000, v18, v19, v17, buf, v20);
      goto LABEL_35;
    }

    int v28 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (v28 == 35)
    {
      uint64_t v6 = 0LL;
      *a2 = 1;
      return v6;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
    __int16 v62 = 1024;
    *(_DWORD *)BOOL v63 = v28;
    uint64_t v6 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v56 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v36 = (os_log_s *)gLogObj;
      os_log_type_t v37 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_78;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
      __int16 v62 = 1024;
      *(_DWORD *)BOOL v63 = v28;
      int v9 = "%{public}s Read network agent message header failed %{darwin.errno}d";
      goto LABEL_94;
    }

    if (v56)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v36 = (os_log_s *)__nwlog_obj();
      os_log_type_t v37 = type;
      BOOL v44 = os_log_type_enabled(v36, type);
      if (backtrace_string)
      {
        if (!v44) {
          goto LABEL_64;
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
        __int16 v62 = 1024;
        *(_DWORD *)BOOL v63 = v28;
        *(_WORD *)&v63[4] = 2082;
        *(void *)&v63[6] = backtrace_string;
        int v32 = "%{public}s Read network agent message header failed %{darwin.errno}d, dumping backtrace:%{public}s";
        char v33 = v36;
        os_log_type_t v34 = v37;
        uint32_t v35 = 28;
        goto LABEL_63;
      }

      if (v44)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
        __int16 v62 = 1024;
        *(_DWORD *)BOOL v63 = v28;
        int v9 = "%{public}s Read network agent message header failed %{darwin.errno}d, no backtrace";
        goto LABEL_94;
      }
    }

    else
    {
      BOOL v36 = (os_log_s *)__nwlog_obj();
      os_log_type_t v37 = type;
      if (os_log_type_enabled(v36, type))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v61 = "nw_network_agent_ctl_copy_received_agent_message";
        __int16 v62 = 1024;
        *(_DWORD *)BOOL v63 = v28;
        int v9 = "%{public}s Read network agent message header failed %{darwin.errno}d, backtrace limit exceeded";
LABEL_94:
        BOOL v38 = v36;
        os_log_type_t v39 = v37;
        goto LABEL_50;
      }
    }

uint64_t nw_network_agent_open_control_socket()
{
  uint64_t v49 = *MEMORY[0x1895F89C0];
  int v48 = 0;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  __int128 v45 = 0u;
  __int128 v44 = 0u;
  memset(v43, 0, sizeof(v43));
  memset(v36, 0, sizeof(v36));
  if (getuid())
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v0 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v38 = "nw_network_agent_open_control_socket";
      _os_log_impl( &dword_181A5C000,  v0,  OS_LOG_TYPE_DEFAULT,  "%{public}s Requesting netagent socket from helper",  buf,  0xCu);
    }

    kernel_socket_uint64_t internal = networkd_privileged_get_kernel_socket_internal(0xCuLL);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v2 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      BOOL v38 = "nw_network_agent_open_control_socket";
      __int16 v39 = 1024;
      int v40 = kernel_socket_internal;
      _os_log_impl( &dword_181A5C000,  v2,  OS_LOG_TYPE_DEFAULT,  "%{public}s Received netagent socket %d from helper",  buf,  0x12u);
    }

    return kernel_socket_internal;
  }

  uint64_t v3 = socket(32, 2, 2);
  if ((v3 & 0x80000000) != 0)
  {
    int v9 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    BOOL v38 = "nw_network_agent_open_control_socket";
    __int16 v39 = 1024;
    int v40 = v9;
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v11 = (os_log_s *)gLogObj;
      os_log_type_t v12 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446466;
      BOOL v38 = "nw_network_agent_open_control_socket";
      __int16 v39 = 1024;
      int v40 = v9;
      uint64_t v13 = "%{public}s cannot create netagent kernel control socket %{darwin.errno}d";
    }

    else if (v34)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v11 = (os_log_s *)gLogObj;
      os_log_type_t v12 = type;
      BOOL v18 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446722;
          BOOL v38 = "nw_network_agent_open_control_socket";
          __int16 v39 = 1024;
          int v40 = v9;
          __int16 v41 = 2082;
          v42[0] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s cannot create netagent kernel control socket %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
        }

        free(backtrace_string);
        goto LABEL_54;
      }

      if (!v18)
      {
LABEL_54:
        if (v10) {
          free(v10);
        }
        return 0xFFFFFFFFLL;
      }

      *(_DWORD *)buf = 136446466;
      BOOL v38 = "nw_network_agent_open_control_socket";
      __int16 v39 = 1024;
      int v40 = v9;
      uint64_t v13 = "%{public}s cannot create netagent kernel control socket %{darwin.errno}d, no backtrace";
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v11 = (os_log_s *)gLogObj;
      os_log_type_t v12 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446466;
      BOOL v38 = "nw_network_agent_open_control_socket";
      __int16 v39 = 1024;
      int v40 = v9;
      uint64_t v13 = "%{public}s cannot create netagent kernel control socket %{darwin.errno}d, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0x12u);
    goto LABEL_54;
  }

  kernel_socket_uint64_t internal = v3;
  LODWORD(v43[0]) = 0;
  *((void *)&v43[1] + 1) = 0LL;
  int v48 = 0;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  __int128 v45 = 0u;
  __int128 v44 = 0u;
  strcpy((char *)v43 + 4, "com.apple.net.netagent");
  if (ioctl(v3, 0xC0644E03uLL, v43))
  {
    int v4 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446722;
    BOOL v38 = "nw_network_agent_open_control_socket";
    __int16 v39 = 1024;
    int v40 = kernel_socket_internal;
    __int16 v41 = 1024;
    LODWORD(v42[0]) = v4;
    ssize_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v6 = (os_log_s *)gLogObj;
      os_log_type_t v7 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_65;
      }
      *(_DWORD *)buf = 136446722;
      BOOL v38 = "nw_network_agent_open_control_socket";
      __int16 v39 = 1024;
      int v40 = kernel_socket_internal;
      __int16 v41 = 1024;
      LODWORD(v42[0]) = v4;
      os_log_type_t v8 = "%{public}s ioctl CTLIOCGINFO failed on netagent kernel control socket %d %{darwin.errno}d";
      goto LABEL_64;
    }

    if (!v34)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v6 = (os_log_s *)gLogObj;
      os_log_type_t v7 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_65;
      }
      *(_DWORD *)buf = 136446722;
      BOOL v38 = "nw_network_agent_open_control_socket";
      __int16 v39 = 1024;
      int v40 = kernel_socket_internal;
      __int16 v41 = 1024;
      LODWORD(v42[0]) = v4;
      os_log_type_t v8 = "%{public}s ioctl CTLIOCGINFO failed on netagent kernel control socket %d %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_64;
    }

    uint64_t v15 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v6 = (os_log_s *)gLogObj;
    os_log_type_t v7 = type;
    BOOL v16 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!v15)
    {
      if (!v16) {
        goto LABEL_65;
      }
      *(_DWORD *)buf = 136446722;
      BOOL v38 = "nw_network_agent_open_control_socket";
      __int16 v39 = 1024;
      int v40 = kernel_socket_internal;
      __int16 v41 = 1024;
      LODWORD(v42[0]) = v4;
      os_log_type_t v8 = "%{public}s ioctl CTLIOCGINFO failed on netagent kernel control socket %d %{darwin.errno}d, no backtrace";
      goto LABEL_64;
    }

    if (v16)
    {
      *(_DWORD *)buf = 136446978;
      BOOL v38 = "nw_network_agent_open_control_socket";
      __int16 v39 = 1024;
      int v40 = kernel_socket_internal;
      __int16 v41 = 1024;
      LODWORD(v42[0]) = v4;
      WORD2(v42[0]) = 2082;
      *(void *)((char *)v42 + 6) = v15;
      _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s ioctl CTLIOCGINFO failed on netagent kernel control socket %d %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x22u);
    }

    free(v15);
    goto LABEL_65;
  }

  *(_DWORD *)&v36[0].sa_len = 139296;
  *(_DWORD *)&v36[0].sa_data[2] = v43[0];
  memset(&v36[0].sa_data[6], 0, 24);
  if (connect(kernel_socket_internal, v36, 0x20u))
  {
    int v14 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446722;
    BOOL v38 = "nw_network_agent_open_control_socket";
    __int16 v39 = 1024;
    int v40 = kernel_socket_internal;
    __int16 v41 = 1024;
    LODWORD(v42[0]) = v14;
    ssize_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v6 = (os_log_s *)gLogObj;
      os_log_type_t v7 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_65;
      }
      *(_DWORD *)buf = 136446722;
      BOOL v38 = "nw_network_agent_open_control_socket";
      __int16 v39 = 1024;
      int v40 = kernel_socket_internal;
      __int16 v41 = 1024;
      LODWORD(v42[0]) = v14;
      os_log_type_t v8 = "%{public}s connect failed on netagent kernel control socket %d %{darwin.errno}d";
      goto LABEL_64;
    }

    if (!v34)
    {
      uint64_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_65;
      }
      *(_DWORD *)buf = 136446722;
      BOOL v38 = "nw_network_agent_open_control_socket";
      __int16 v39 = 1024;
      int v40 = kernel_socket_internal;
      __int16 v41 = 1024;
      LODWORD(v42[0]) = v14;
      os_log_type_t v8 = "%{public}s connect failed on netagent kernel control socket %d %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_64;
    }

    os_log_type_t v26 = (char *)__nw_create_backtrace_string();
    uint64_t v6 = (os_log_s *)__nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v27 = os_log_type_enabled(v6, type);
    if (v26)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446978;
        BOOL v38 = "nw_network_agent_open_control_socket";
        __int16 v39 = 1024;
        int v40 = kernel_socket_internal;
        __int16 v41 = 1024;
        LODWORD(v42[0]) = v14;
        WORD2(v42[0]) = 2082;
        *(void *)((char *)v42 + 6) = v26;
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s connect failed on netagent kernel control socket %d %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x22u);
      }

      free(v26);
      if (!v5) {
        goto LABEL_67;
      }
      goto LABEL_66;
    }

    if (v27)
    {
      *(_DWORD *)buf = 136446722;
      BOOL v38 = "nw_network_agent_open_control_socket";
      __int16 v39 = 1024;
      int v40 = kernel_socket_internal;
      __int16 v41 = 1024;
      LODWORD(v42[0]) = v14;
      os_log_type_t v8 = "%{public}s connect failed on netagent kernel control socket %d %{darwin.errno}d, no backtrace";
LABEL_64:
      _os_log_impl(&dword_181A5C000, v6, v7, v8, buf, 0x18u);
    }

uint64_t nw_network_agent_add_to_interface(uint64_t a1, unsigned __int8 *uu)
{
  uint64_t v42 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint32_t v35 = "nw_network_agent_add_to_interface_internal";
    int v4 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v33 = OS_LOG_TYPE_DEFAULT;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      ssize_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type[0];
      if (!os_log_type_enabled(v5, type[0])) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 136446210;
      uint32_t v35 = "nw_network_agent_add_to_interface_internal";
      os_log_type_t v7 = "%{public}s called with null if_name";
      goto LABEL_42;
    }

    if (v33 == OS_LOG_TYPE_DEFAULT)
    {
      ssize_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type[0];
      if (!os_log_type_enabled(v5, type[0])) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 136446210;
      uint32_t v35 = "nw_network_agent_add_to_interface_internal";
      os_log_type_t v7 = "%{public}s called with null if_name, backtrace limit exceeded";
      goto LABEL_42;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    ssize_t v5 = (os_log_s *)__nwlog_obj();
    os_log_type_t v6 = type[0];
    BOOL v31 = os_log_type_enabled(v5, type[0]);
    if (!backtrace_string)
    {
      if (!v31) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 136446210;
      uint32_t v35 = "nw_network_agent_add_to_interface_internal";
      os_log_type_t v7 = "%{public}s called with null if_name, no backtrace";
      goto LABEL_42;
    }

    if (!v31) {
      goto LABEL_17;
    }
    *(_DWORD *)buf = 136446466;
    uint32_t v35 = "nw_network_agent_add_to_interface_internal";
    __int16 v36 = 2082;
    *(void *)os_log_type_t v37 = backtrace_string;
    uint64_t v13 = "%{public}s called with null if_name, dumping backtrace:%{public}s";
    goto LABEL_16;
  }

  if (uuid_is_null(uu))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    uint32_t v35 = "nw_network_agent_add_to_interface_internal";
    int v4 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v33 = OS_LOG_TYPE_DEFAULT;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      ssize_t v5 = (os_log_s *)gLogObj;
      os_log_type_t v6 = type[0];
      if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        uint32_t v35 = "nw_network_agent_add_to_interface_internal";
        os_log_type_t v7 = "%{public}s called with null netagent_uuid";
LABEL_42:
        _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0xCu);
        goto LABEL_43;
      }

      goto LABEL_43;
    }

    if (v33 == OS_LOG_TYPE_DEFAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      ssize_t v5 = (os_log_s *)gLogObj;
      os_log_type_t v6 = type[0];
      if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        uint32_t v35 = "nw_network_agent_add_to_interface_internal";
        os_log_type_t v7 = "%{public}s called with null netagent_uuid, backtrace limit exceeded";
        goto LABEL_42;
      }

uint64_t nw_network_agent_remove_from_interface(uint64_t a1, unsigned __int8 *uu)
{
  uint64_t v48 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v39 = "nw_network_agent_remove_from_interface";
    int v4 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v37 = OS_LOG_TYPE_DEFAULT;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      ssize_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type[0];
      if (!os_log_type_enabled(v5, type[0])) {
        goto LABEL_44;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v39 = "nw_network_agent_remove_from_interface";
      os_log_type_t v7 = "%{public}s called with null if_name";
      goto LABEL_43;
    }

    if (v37 == OS_LOG_TYPE_DEFAULT)
    {
      ssize_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type[0];
      if (!os_log_type_enabled(v5, type[0])) {
        goto LABEL_44;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v39 = "nw_network_agent_remove_from_interface";
      os_log_type_t v7 = "%{public}s called with null if_name, backtrace limit exceeded";
      goto LABEL_43;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    ssize_t v5 = (os_log_s *)__nwlog_obj();
    os_log_type_t v6 = type[0];
    BOOL v35 = os_log_type_enabled(v5, type[0]);
    if (!backtrace_string)
    {
      if (!v35) {
        goto LABEL_44;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v39 = "nw_network_agent_remove_from_interface";
      os_log_type_t v7 = "%{public}s called with null if_name, no backtrace";
      goto LABEL_43;
    }

    if (!v35) {
      goto LABEL_17;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v39 = "nw_network_agent_remove_from_interface";
    __int16 v40 = 2082;
    *(void *)__int128 v41 = backtrace_string;
    BOOL v12 = "%{public}s called with null if_name, dumping backtrace:%{public}s";
    goto LABEL_16;
  }

  if (uuid_is_null(uu))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    __int16 v39 = "nw_network_agent_remove_from_interface";
    int v4 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v37 = OS_LOG_TYPE_DEFAULT;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      ssize_t v5 = (os_log_s *)gLogObj;
      os_log_type_t v6 = type[0];
      if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v39 = "nw_network_agent_remove_from_interface";
        os_log_type_t v7 = "%{public}s called with null netagent_uuid";
LABEL_43:
        _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0xCu);
        goto LABEL_44;
      }

      goto LABEL_44;
    }

    if (v37 == OS_LOG_TYPE_DEFAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      ssize_t v5 = (os_log_s *)gLogObj;
      os_log_type_t v6 = type[0];
      if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v39 = "nw_network_agent_remove_from_interface";
        os_log_type_t v7 = "%{public}s called with null netagent_uuid, backtrace limit exceeded";
        goto LABEL_43;
      }

unsigned int *nw_network_agent_get_agent_from_dictionary(unsigned int *result)
{
  size_t length = 0LL;
  if (result)
  {
    data = (unsigned int *)xpc_dictionary_get_data(result, "data", &length);
    uint64_t result = 0LL;
    if (data)
    {
      if (length >= 0xD8)
      {
        if (length == data[53] + 216LL) {
          return data;
        }
        else {
          return 0LL;
        }
      }
    }
  }

  return result;
}

unsigned int *nw_network_agent_truncate_agent_data_in_dictionary(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  size_t v16 = 0LL;
  data = (unsigned int *)xpc_dictionary_get_data(a1, "data", &v16);
  if (data && v16 >= 0xD8 && v16 == data[53] + 216LL)
  {
    __int128 v3 = *((_OWORD *)data + 1);
    bytes[0] = *(_OWORD *)data;
    bytes[1] = v3;
    __int128 v4 = *((_OWORD *)data + 2);
    __int128 v5 = *((_OWORD *)data + 3);
    __int128 v6 = *((_OWORD *)data + 5);
    bytes[4] = *((_OWORD *)data + 4);
    bytes[5] = v6;
    bytes[2] = v4;
    bytes[3] = v5;
    __int128 v7 = *((_OWORD *)data + 6);
    __int128 v8 = *((_OWORD *)data + 7);
    __int128 v9 = *((_OWORD *)data + 9);
    bytes[8] = *((_OWORD *)data + 8);
    bytes[9] = v9;
    bytes[6] = v7;
    bytes[7] = v8;
    __int128 v10 = *((_OWORD *)data + 10);
    __int128 v11 = *((_OWORD *)data + 12);
    unsigned int v12 = data[52];
    bytes[11] = *((_OWORD *)data + 11);
    bytes[12] = v11;
    bytes[10] = v10;
    unsigned int v19 = v12;
    int v20 = 0;
    xpc_dictionary_set_data(a1, "data", bytes, 0xD8uLL);
    size_t length = 0LL;
    int v13 = (unsigned int *)xpc_dictionary_get_data(a1, "data", &length);
    uint64_t result = 0LL;
    if (!v13) {
      return result;
    }
    size_t v15 = length;
    if (length < 0xD8) {
      return result;
    }
LABEL_9:
    if (v15 == v13[53] + 216LL) {
      return v13;
    }
    else {
      return 0LL;
    }
  }

  *(void *)&bytes[0] = 0LL;
  int v13 = (unsigned int *)xpc_dictionary_get_data(a1, "data", (size_t *)bytes);
  uint64_t result = 0LL;
  if (v13)
  {
    size_t v15 = *(void *)&bytes[0];
    if (*(void *)&bytes[0] >= 0xD8uLL) {
      goto LABEL_9;
    }
  }

  return result;
}

BOOL nw_network_agent_copy_dictionary_for_uuid(const unsigned __int8 *a1)
{
  uint64_t v57 = *MEMORY[0x1895F89C0];
  __int128 v51 = 0u;
  __int128 v52 = 0u;
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  __int128 v47 = 0u;
  __int128 v48 = 0u;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  if (!a1 || uuid_is_null(a1)) {
    return 0LL;
  }
  int v2 = socket(2, 2, 0);
  if (v2 < 0)
  {
    int v6 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int buf = 136446466;
    os_log_type_t v54 = "nw_network_agent_copy_struct";
    __int16 v55 = 1024;
    *(_DWORD *)char v56 = v6;
    __int128 v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int128 v8 = (os_log_s *)gLogObj;
      os_log_type_t v9 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_33;
      }
      int buf = 136446466;
      os_log_type_t v54 = "nw_network_agent_copy_struct";
      __int16 v55 = 1024;
      *(_DWORD *)char v56 = v6;
      __int128 v10 = "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d";
    }

    else if (v37)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int128 v8 = (os_log_s *)gLogObj;
      os_log_type_t v9 = type;
      BOOL v20 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v20)
        {
          int buf = 136446722;
          os_log_type_t v54 = "nw_network_agent_copy_struct";
          __int16 v55 = 1024;
          *(_DWORD *)char v56 = v6;
          *(_WORD *)&v56[4] = 2082;
          *(void *)&v56[6] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d, dumping backtrace:%{public}s",  (uint8_t *)&buf,  0x1Cu);
        }

        free(backtrace_string);
        goto LABEL_33;
      }

      if (!v20)
      {
LABEL_33:
        if (v7) {
          free(v7);
        }
        return 0LL;
      }

      int buf = 136446466;
      os_log_type_t v54 = "nw_network_agent_copy_struct";
      __int16 v55 = 1024;
      *(_DWORD *)char v56 = v6;
      __int128 v10 = "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d, no backtrace";
    }

    else
    {
      __int128 v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_33;
      }
      int buf = 136446466;
      os_log_type_t v54 = "nw_network_agent_copy_struct";
      __int16 v55 = 1024;
      *(_DWORD *)char v56 = v6;
      __int128 v10 = "%{public}s socket(AF_INET, SOCK_DGRAM, 0) failed %{darwin.errno}d, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v8, v9, v10, (uint8_t *)&buf, 0x12u);
    goto LABEL_33;
  }

  int v3 = v2;
  __int128 v51 = 0u;
  __int128 v52 = 0u;
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  __int128 v47 = 0u;
  __int128 v48 = 0u;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v39 = *(_OWORD *)a1;
  __int128 v40 = 0u;
  if (ioctl(v2, 0xC0E069A8uLL, &v39))
  {
    int v4 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int128 v5 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      int buf = 136446466;
      os_log_type_t v54 = "nw_network_agent_copy_struct";
      __int16 v55 = 1024;
      *(_DWORD *)char v56 = v4;
      _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_ERROR,  "%{public}s SIOCGIFAGENTDATA failed %{darwin.errno}d",  (uint8_t *)&buf,  0x12u);
    }

xpc_object_t nw_network_agent_copy_dictionary_from_necp()
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  if (necp_client_action())
  {
    int v0 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v1 = (os_log_s *)gLogObj;
    if (v0 == 2)
    {
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446466;
        os_log_type_t v24 = "nw_network_agent_copy_dictionary_from_necp";
        __int16 v25 = 1024;
        LODWORD(v26[0]) = 2;
        _os_log_impl( &dword_181A5C000,  v1,  OS_LOG_TYPE_DEBUG,  "%{public}s NECP_CLIENT_ACTION_COPY_AGENT %{darwin.errno}d",  buf,  0x12u);
      }

      return 0LL;
    }

    *(_DWORD *)int buf = 136446466;
    os_log_type_t v24 = "nw_network_agent_copy_dictionary_from_necp";
    __int16 v25 = 1024;
    LODWORD(v26[0]) = v0;
    int v4 = (void *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault((const char *)v4, &type, &v21))
    {
LABEL_36:
      if (v4) {
        free(v4);
      }
      return 0LL;
    }

    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = gLogObj;
      os_log_type_t v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v24 = "nw_network_agent_copy_dictionary_from_necp";
      __int16 v25 = 1024;
      LODWORD(v26[0]) = v0;
      __int128 v7 = "%{public}s NECP_CLIENT_ACTION_COPY_AGENT %{darwin.errno}d";
LABEL_29:
      os_log_type_t v17 = (os_log_s *)v5;
      os_log_type_t v18 = v6;
      uint32_t v19 = 18;
LABEL_35:
      _os_log_impl(&dword_181A5C000, v17, v18, v7, buf, v19);
      goto LABEL_36;
    }

    if (!v21)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = gLogObj;
      os_log_type_t v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v24 = "nw_network_agent_copy_dictionary_from_necp";
      __int16 v25 = 1024;
      LODWORD(v26[0]) = v0;
      __int128 v7 = "%{public}s NECP_CLIENT_ACTION_COPY_AGENT %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_29;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v5 = gLogObj;
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v9) {
        goto LABEL_36;
      }
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v24 = "nw_network_agent_copy_dictionary_from_necp";
      __int16 v25 = 1024;
      LODWORD(v26[0]) = v0;
      __int128 v7 = "%{public}s NECP_CLIENT_ACTION_COPY_AGENT %{darwin.errno}d, no backtrace";
      goto LABEL_29;
    }

    if (v9)
    {
      *(_DWORD *)int buf = 136446722;
      os_log_type_t v24 = "nw_network_agent_copy_dictionary_from_necp";
      __int16 v25 = 1024;
      LODWORD(v26[0]) = v0;
      WORD2(v26[0]) = 2082;
      *(void *)((char *)v26 + 6) = backtrace_string;
      __int128 v10 = "%{public}s NECP_CLIENT_ACTION_COPY_AGENT %{darwin.errno}d, dumping backtrace:%{public}s";
      size_t v11 = (os_log_s *)v5;
      os_log_type_t v12 = v6;
      uint32_t v13 = 28;
LABEL_23:
      _os_log_impl(&dword_181A5C000, v11, v12, v10, buf, v13);
      goto LABEL_24;
    }

    goto LABEL_24;
  }

  xpc_object_t v2 = xpc_dictionary_create(0LL, 0LL, 0LL);
  if (!v2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v24 = "nw_network_agent_copy_dictionary_from_necp";
    int v4 = (void *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v14 = gLogObj;
      os_log_type_t v15 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v24 = "nw_network_agent_copy_dictionary_from_necp";
      __int128 v7 = "%{public}s xpc_dictionary_create failed";
    }

    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v14 = gLogObj;
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v24 = "nw_network_agent_copy_dictionary_from_necp";
          __int16 v25 = 2082;
          v26[0] = backtrace_string;
          __int128 v10 = "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s";
          size_t v11 = (os_log_s *)v14;
          os_log_type_t v12 = v15;
          uint32_t v13 = 22;
          goto LABEL_23;
        }

uint64_t nw_network_agent_set_use_count(int a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  uint64_t v14 = a2;
  uint64_t v3 = setsockopt(a1, 2, 16, &v14, 8u);
  if ((v3 & 0x80000000) == 0) {
    return v3;
  }
  int v4 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)int buf = 136446978;
  BOOL v16 = "nw_network_agent_set_use_count";
  __int16 v17 = 1024;
  int v18 = a1;
  __int16 v19 = 2048;
  uint64_t v20 = v14;
  __int16 v21 = 1024;
  int v22 = v4;
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = (os_log_s *)gLogObj;
      os_log_type_t v7 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_16;
      }
      *(_DWORD *)int buf = 136446978;
      BOOL v16 = "nw_network_agent_set_use_count";
      __int16 v17 = 1024;
      int v18 = a1;
      __int16 v19 = 2048;
      uint64_t v20 = v14;
      __int16 v21 = 1024;
      int v22 = v4;
      __int128 v8 = "%{public}s setsockopt for use count failed, handle = %d, use_count = %llu %{darwin.errno}d";
      goto LABEL_15;
    }

    if (!v12)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = (os_log_s *)gLogObj;
      os_log_type_t v7 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_16;
      }
      *(_DWORD *)int buf = 136446978;
      BOOL v16 = "nw_network_agent_set_use_count";
      __int16 v17 = 1024;
      int v18 = a1;
      __int16 v19 = 2048;
      uint64_t v20 = v14;
      __int16 v21 = 1024;
      int v22 = v4;
      __int128 v8 = "%{public}s setsockopt for use count failed, handle = %d, use_count = %llu %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_15;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v6 = (os_log_s *)gLogObj;
    os_log_type_t v7 = type;
    BOOL v10 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)int buf = 136447234;
        BOOL v16 = "nw_network_agent_set_use_count";
        __int16 v17 = 1024;
        int v18 = a1;
        __int16 v19 = 2048;
        uint64_t v20 = v14;
        __int16 v21 = 1024;
        int v22 = v4;
        __int16 v23 = 2082;
        os_log_type_t v24 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s setsockopt for use count failed, uint64_t handle = %d, use_count = %llu %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x2Cu);
      }

      free(backtrace_string);
      goto LABEL_16;
    }

    if (v10)
    {
      *(_DWORD *)int buf = 136446978;
      BOOL v16 = "nw_network_agent_set_use_count";
      __int16 v17 = 1024;
      int v18 = a1;
      __int16 v19 = 2048;
      uint64_t v20 = v14;
      __int16 v21 = 1024;
      int v22 = v4;
      __int128 v8 = "%{public}s setsockopt for use count failed, handle = %d, use_count = %llu %{darwin.errno}d, no backtrace";
LABEL_15:
      _os_log_impl(&dword_181A5C000, v6, v7, v8, buf, 0x22u);
    }
  }

uint64_t nw_network_agent_get_use_count(int a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    *a2 = 0LL;
    *(void *)os_log_type_t type = 0LL;
    socklen_t v21 = 8;
    uint64_t v4 = getsockopt(a1, 2, 16, type, &v21);
    if ((v4 & 0x80000000) == 0)
    {
      *a2 = *(void *)type;
      return v4;
    }

    int v9 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)int buf = 136446978;
    os_log_type_t v24 = "nw_network_agent_get_use_count";
    __int16 v25 = 1024;
    *(_DWORD *)uint64_t v26 = a1;
    *(_WORD *)&v26[4] = 2048;
    *(void *)&v26[6] = *(void *)type;
    __int16 v27 = 1024;
    int v28 = v9;
    BOOL v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v20 = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (v20 == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      size_t v11 = (os_log_s *)gLogObj;
      os_log_type_t v12 = v20;
      if (!os_log_type_enabled((os_log_t)gLogObj, v20)) {
        goto LABEL_35;
      }
      *(_DWORD *)int buf = 136446978;
      os_log_type_t v24 = "nw_network_agent_get_use_count";
      __int16 v25 = 1024;
      *(_DWORD *)uint64_t v26 = a1;
      *(_WORD *)&v26[4] = 2048;
      *(void *)&v26[6] = *(void *)type;
      __int16 v27 = 1024;
      int v28 = v9;
      uint32_t v13 = "%{public}s getsockopt for use count failed, handle = %d, use_count = %llu %{darwin.errno}d";
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      size_t v11 = (os_log_s *)gLogObj;
      os_log_type_t v12 = v20;
      BOOL v17 = os_log_type_enabled((os_log_t)gLogObj, v20);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)int buf = 136447234;
          os_log_type_t v24 = "nw_network_agent_get_use_count";
          __int16 v25 = 1024;
          *(_DWORD *)uint64_t v26 = a1;
          *(_WORD *)&v26[4] = 2048;
          *(void *)&v26[6] = *(void *)type;
          __int16 v27 = 1024;
          int v28 = v9;
          __int16 v29 = 2082;
          __int128 v30 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s getsockopt for use count failed, uint64_t handle = %d, use_count = %llu %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x2Cu);
        }

        free(backtrace_string);
        goto LABEL_35;
      }

      if (!v17)
      {
LABEL_35:
        if (v10) {
          free(v10);
        }
        return v4;
      }

      *(_DWORD *)int buf = 136446978;
      os_log_type_t v24 = "nw_network_agent_get_use_count";
      __int16 v25 = 1024;
      *(_DWORD *)uint64_t v26 = a1;
      *(_WORD *)&v26[4] = 2048;
      *(void *)&v26[6] = *(void *)type;
      __int16 v27 = 1024;
      int v28 = v9;
      uint32_t v13 = "%{public}s getsockopt for use count failed, handle = %d, use_count = %llu %{darwin.errno}d, no backtrace";
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      size_t v11 = (os_log_s *)gLogObj;
      os_log_type_t v12 = v20;
      if (!os_log_type_enabled((os_log_t)gLogObj, v20)) {
        goto LABEL_35;
      }
      *(_DWORD *)int buf = 136446978;
      os_log_type_t v24 = "nw_network_agent_get_use_count";
      __int16 v25 = 1024;
      *(_DWORD *)uint64_t v26 = a1;
      *(_WORD *)&v26[4] = 2048;
      *(void *)&v26[6] = *(void *)type;
      __int16 v27 = 1024;
      int v28 = v9;
      uint32_t v13 = "%{public}s getsockopt for use count failed, handle = %d, use_count = %llu %{darwin.errno}d, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0x22u);
    goto LABEL_35;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v24 = "nw_network_agent_get_use_count";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v21) = 0;
  if (__nwlog_fault(v5, type, &v21))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = (os_log_s *)gLogObj;
      os_log_type_t v7 = type[0];
      if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v24 = "nw_network_agent_get_use_count";
        __int128 v8 = "%{public}s called with null out_use_count";
LABEL_26:
        _os_log_impl(&dword_181A5C000, v6, v7, v8, buf, 0xCu);
      }
    }

    else if ((_BYTE)v21)
    {
      uint64_t v14 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = (os_log_s *)gLogObj;
      os_log_type_t v7 = type[0];
      BOOL v15 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
      if (v14)
      {
        if (v15)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v24 = "nw_network_agent_get_use_count";
          __int16 v25 = 2082;
          *(void *)uint64_t v26 = v14;
          _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null out_use_count, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v14);
        goto LABEL_27;
      }

      if (v15)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v24 = "nw_network_agent_get_use_count";
        __int128 v8 = "%{public}s called with null out_use_count, no backtrace";
        goto LABEL_26;
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = (os_log_s *)gLogObj;
      os_log_type_t v7 = type[0];
      if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v24 = "nw_network_agent_get_use_count";
        __int128 v8 = "%{public}s called with null out_use_count, backtrace limit exceeded";
        goto LABEL_26;
      }
    }
  }

uint64_t nw_network_agent_get_token_count(int a1, _DWORD *a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    *a2 = 0;
    socklen_t v21 = 4;
    *(_DWORD *)os_log_type_t type = 0;
    uint64_t v4 = getsockopt(a1, 2, 23, type, &v21);
    if ((v4 & 0x80000000) == 0)
    {
      *a2 = *(_DWORD *)type;
      return v4;
    }

    int v9 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)int buf = 136446978;
    os_log_type_t v24 = "nw_network_agent_get_token_count";
    __int16 v25 = 1024;
    *(_DWORD *)uint64_t v26 = a1;
    *(_WORD *)&v26[4] = 1024;
    *(_DWORD *)&v26[6] = *(_DWORD *)type;
    __int16 v27 = 1024;
    int v28 = v9;
    BOOL v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v20 = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (v20 == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      size_t v11 = (os_log_s *)gLogObj;
      os_log_type_t v12 = v20;
      if (!os_log_type_enabled((os_log_t)gLogObj, v20)) {
        goto LABEL_35;
      }
      *(_DWORD *)int buf = 136446978;
      os_log_type_t v24 = "nw_network_agent_get_token_count";
      __int16 v25 = 1024;
      *(_DWORD *)uint64_t v26 = a1;
      *(_WORD *)&v26[4] = 1024;
      *(_DWORD *)&v26[6] = *(_DWORD *)type;
      __int16 v27 = 1024;
      int v28 = v9;
      uint32_t v13 = "%{public}s getsockopt for use count failed, handle = %d, use_count = %u %{darwin.errno}d";
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      size_t v11 = (os_log_s *)gLogObj;
      os_log_type_t v12 = v20;
      BOOL v17 = os_log_type_enabled((os_log_t)gLogObj, v20);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)int buf = 136447234;
          os_log_type_t v24 = "nw_network_agent_get_token_count";
          __int16 v25 = 1024;
          *(_DWORD *)uint64_t v26 = a1;
          *(_WORD *)&v26[4] = 1024;
          *(_DWORD *)&v26[6] = *(_DWORD *)type;
          __int16 v27 = 1024;
          int v28 = v9;
          __int16 v29 = 2082;
          __int128 v30 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s getsockopt for use count failed, uint64_t handle = %d, use_count = %u %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x28u);
        }

        free(backtrace_string);
        goto LABEL_35;
      }

      if (!v17)
      {
LABEL_35:
        if (v10) {
          free(v10);
        }
        return v4;
      }

      *(_DWORD *)int buf = 136446978;
      os_log_type_t v24 = "nw_network_agent_get_token_count";
      __int16 v25 = 1024;
      *(_DWORD *)uint64_t v26 = a1;
      *(_WORD *)&v26[4] = 1024;
      *(_DWORD *)&v26[6] = *(_DWORD *)type;
      __int16 v27 = 1024;
      int v28 = v9;
      uint32_t v13 = "%{public}s getsockopt for use count failed, handle = %d, use_count = %u %{darwin.errno}d, no backtrace";
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      size_t v11 = (os_log_s *)gLogObj;
      os_log_type_t v12 = v20;
      if (!os_log_type_enabled((os_log_t)gLogObj, v20)) {
        goto LABEL_35;
      }
      *(_DWORD *)int buf = 136446978;
      os_log_type_t v24 = "nw_network_agent_get_token_count";
      __int16 v25 = 1024;
      *(_DWORD *)uint64_t v26 = a1;
      *(_WORD *)&v26[4] = 1024;
      *(_DWORD *)&v26[6] = *(_DWORD *)type;
      __int16 v27 = 1024;
      int v28 = v9;
      uint32_t v13 = "%{public}s getsockopt for use count failed, handle = %d, use_count = %u %{darwin.errno}d, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0x1Eu);
    goto LABEL_35;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v24 = "nw_network_agent_get_token_count";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v21) = 0;
  if (__nwlog_fault(v5, type, &v21))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = (os_log_s *)gLogObj;
      os_log_type_t v7 = type[0];
      if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v24 = "nw_network_agent_get_token_count";
        __int128 v8 = "%{public}s called with null out_use_count";
LABEL_26:
        _os_log_impl(&dword_181A5C000, v6, v7, v8, buf, 0xCu);
      }
    }

    else if ((_BYTE)v21)
    {
      uint64_t v14 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = (os_log_s *)gLogObj;
      os_log_type_t v7 = type[0];
      BOOL v15 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
      if (v14)
      {
        if (v15)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v24 = "nw_network_agent_get_token_count";
          __int16 v25 = 2082;
          *(void *)uint64_t v26 = v14;
          _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null out_use_count, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v14);
        goto LABEL_27;
      }

      if (v15)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v24 = "nw_network_agent_get_token_count";
        __int128 v8 = "%{public}s called with null out_use_count, no backtrace";
        goto LABEL_26;
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = (os_log_s *)gLogObj;
      os_log_type_t v7 = type[0];
      if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v24 = "nw_network_agent_get_token_count";
        __int128 v8 = "%{public}s called with null out_use_count, backtrace limit exceeded";
        goto LABEL_26;
      }
    }
  }

void *nw_protocol_socksv5_copy_definition()
{
  if (nw_protocol_socksv5_copy_definition::onceToken[0] != -1) {
    dispatch_once(nw_protocol_socksv5_copy_definition::onceToken, &__block_literal_global_83827);
  }
  BOOL result = (void *)nw_protocol_socksv5_copy_definition::definition;
  if (nw_protocol_socksv5_copy_definition::definition) {
    return os_retain((void *)nw_protocol_socksv5_copy_definition::definition);
  }
  return result;
}

BOOL __nw_protocol_socksv5_copy_definition_block_invoke()
{
  nw_protocol_socksv5_copy_definition::definition = (uint64_t)nw_framer_create_definition( "socksv5",  0,  &__block_literal_global_6_83831);
  return nw_protocol_definition_register((void *)nw_protocol_socksv5_copy_definition::definition);
}

uint64_t __nw_protocol_socksv5_copy_definition_block_invoke_2(uint64_t a1, nw_framer *a2)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  uint64_t v3 = calloc(1uLL, 0x18uLL);
  if (v3)
  {
LABEL_2:
    v3[4] = 0;
    nw_parameters_t v4 = nw_framer_copy_parameters(a2);
    if (v4)
    {
      uint64_t v5 = v4;
      id v6 = v5[23];

      if (v6)
      {
        os_log_type_t v7 = (id *)v6;
        id v8 = v7[13];

        if (v8)
        {
          int v9 = v8;
          BOOL v10 = (const char *)v9[2];

          if (v10) {
            *(void *)uint64_t v3 = xpc_string_create(v10);
          }
          size_t v11 = v9;
          os_log_type_t v12 = (const char *)v11[3];

          if (v12) {
            *((void *)v3 + 1) = xpc_string_create(v12);
          }
        }

        os_release(v7);
      }

      os_release(v5);
    }

    uint64_t v13 = MEMORY[0x1895F87A8];
    input_handler[0] = MEMORY[0x1895F87A8];
    input_handler[1] = 0x40000000LL;
    input_handler[2] = __nw_protocol_socksv5_copy_definition_block_invoke_3;
    input_handler[3] = &__block_descriptor_tmp_11_83836;
    input_handler[4] = v3;
    input_handler[5] = a2;
    nw_framer_set_input_handler(a2, input_handler);
    output_handler[0] = v13;
    output_handler[1] = 0x40000000LL;
    output_handler[2] = __nw_protocol_socksv5_copy_definition_block_invoke_2_12;
    output_handler[3] = &__block_descriptor_tmp_14_83837;
    output_handler[4] = v3;
    nw_framer_set_output_handler(a2, output_handler);
    cleanup_handler[0] = v13;
    cleanup_handler[1] = 0x40000000LL;
    cleanup_handler[2] = __nw_protocol_socksv5_copy_definition_block_invoke_3_15;
    cleanup_handler[3] = &__block_descriptor_tmp_17_83838;
    cleanup_handler[4] = v3;
    nw_framer_set_cleanup_handler(a2, cleanup_handler);
    if (a2)
    {
      *(_DWORD *)output_buffer = 261;
      if (*(void *)v3 && *((void *)v3 + 1))
      {
        output_buffer[1] = OS_LOG_TYPE_DEBUG;
        output_buffer[3] = OS_LOG_TYPE_DEBUG;
        size_t v14 = 4LL;
      }

      else
      {
        size_t v14 = 3LL;
      }

      nw_framer_write_output(a2, (const uint8_t *)output_buffer, v14);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v15 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v31 = "nw_socksv5_send_hello";
        _os_log_impl(&dword_181A5C000, v15, OS_LOG_TYPE_DEBUG, "%{public}s Sent client hello", buf, 0xCu);
      }

      v3[4] = 1;
      return 2LL;
    }

    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    uint64_t v31 = "nw_socksv5_send_hello";
    char v19 = (char *)_os_log_send_and_compose_impl();
    output_buffer[0] = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (__nwlog_fault(v19, output_buffer, &v29))
    {
      if (output_buffer[0] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v20 = (os_log_s *)__nwlog_obj();
        os_log_type_t v21 = output_buffer[0];
        if (!os_log_type_enabled(v20, output_buffer[0])) {
          goto LABEL_36;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v31 = "nw_socksv5_send_hello";
        int v22 = "%{public}s called with null framer";
        goto LABEL_35;
      }

      if (!v29)
      {
        os_log_type_t v20 = (os_log_s *)__nwlog_obj();
        os_log_type_t v21 = output_buffer[0];
        if (!os_log_type_enabled(v20, output_buffer[0])) {
          goto LABEL_36;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v31 = "nw_socksv5_send_hello";
        int v22 = "%{public}s called with null framer, backtrace limit exceeded";
        goto LABEL_35;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v20 = (os_log_s *)__nwlog_obj();
      os_log_type_t v21 = output_buffer[0];
      BOOL v24 = os_log_type_enabled(v20, output_buffer[0]);
      if (backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v31 = "nw_socksv5_send_hello";
          __int16 v32 = 2082;
          uint64_t v33 = (uint64_t)backtrace_string;
          _os_log_impl( &dword_181A5C000,  v20,  v21,  "%{public}s called with null framer, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_36;
      }

      if (v24)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v31 = "nw_socksv5_send_hello";
        int v22 = "%{public}s called with null framer, no backtrace";
LABEL_35:
        _os_log_impl(&dword_181A5C000, v20, v21, v22, buf, 0xCu);
      }
    }

uint64_t __nw_protocol_socksv5_copy_definition_block_invoke_3(uint64_t a1, nw_framer_t framer)
{
  uint64_t v45 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(a1 + 32);
  switch(*(_DWORD *)(v2 + 16))
  {
    case 0:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      nw_parameters_t v4 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136446210;
        *(void *)((char *)&buf + 4) = "nw_protocol_socksv5_copy_definition_block_invoke_3";
        _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_ERROR,  "%{public}s Reading packets in initial state",  (uint8_t *)&buf,  0xCu);
      }

      return 0LL;
    case 1:
      uint64_t v5 = *(nw_framer **)(a1 + 40);
      *(_WORD *)temp_buffer = 0;
      *(void *)&__int128 buf = MEMORY[0x1895F87A8];
      *((void *)&buf + 1) = 0x40000000LL;
      id v6 = ___ZL22nw_socksv5_parse_helloP9nw_framerP10nw_socksv5_block_invoke;
      os_log_type_t v7 = &__block_descriptor_tmp_24_83849;
      goto LABEL_6;
    case 2:
      uint64_t v5 = *(nw_framer **)(a1 + 40);
      *(_WORD *)temp_buffer = 0;
      *(void *)&__int128 buf = MEMORY[0x1895F87A8];
      *((void *)&buf + 1) = 0x40000000LL;
      id v6 = ___ZL21nw_socksv5_parse_authP9nw_framerP10nw_socksv5_block_invoke;
      os_log_type_t v7 = &__block_descriptor_tmp_25_83850;
LABEL_6:
      uint64_t v41 = (uint64_t)v6;
      __int128 v42 = v7;
      __int128 v43 = v5;
      uint64_t v44 = v2;
      nw_framer_parse_input(v5, 2uLL, 2uLL, temp_buffer, &buf);
      return 0LL;
    case 3:
      id v8 = *(nw_framer **)(a1 + 40);
      *(_DWORD *)__int16 v34 = 0;
      uint64_t v30 = 0LL;
      uint64_t v31 = &v30;
      int v33 = 0;
      uint64_t v32 = 0x2000000000LL;
      uint64_t v26 = 0LL;
      __int16 v27 = &v26;
      uint64_t v28 = 0x2000000000LL;
      char v29 = 0;
      uint64_t v9 = MEMORY[0x1895F87A8];
      *(void *)temp_buffer = MEMORY[0x1895F87A8];
      uint64_t v20 = 0x40000000LL;
      uint64_t v21 = (uint64_t)___ZL24nw_socksv5_parse_connectP9nw_framerP10nw_socksv5_block_invoke;
      int v22 = &unk_189BC81F8;
      BOOL v24 = &v30;
      __int16 v25 = v8;
      __int16 v23 = &v26;
      if (nw_framer_parse_input(v8, 4uLL, 4uLL, v34, temp_buffer))
      {
        if (*((_BYTE *)v27 + 24) != 3) {
          goto LABEL_10;
        }
        *(_DWORD *)((char *)&buf + 3) = 0;
        LODWORD(buf) = 0;
        size_t v10 = *((unsigned int *)v31 + 6);
        parse[0] = v9;
        parse[1] = 0x40000000LL;
        parse[2] = ___ZL24nw_socksv5_parse_connectP9nw_framerP10nw_socksv5_block_invoke_27;
        parse[3] = &unk_189BC8220;
        parse[4] = &v30;
        if (nw_framer_parse_input(v8, v10, v10, (uint8_t *)&buf, parse))
        {
LABEL_10:
          bzero(&buf, 0x201uLL);
          size_t v11 = *((unsigned int *)v31 + 6);
          if (v11 < 0x202)
          {
            *(void *)&__int128 v35 = v9;
            *((void *)&v35 + 1) = 0x40000000LL;
            uint64_t v36 = ___ZL24nw_socksv5_parse_connectP9nw_framerP10nw_socksv5_block_invoke_29;
            char v37 = &unk_189BC8248;
            __int16 v38 = &v30;
            uint64_t v39 = v2;
            if (nw_framer_parse_input(v8, v11, v11, (uint8_t *)&buf, &v35))
            {
              nw_framer_pass_through_input(v8);
              nw_framer_pass_through_output(v8);
              nw_framer_mark_ready(v8);
            }
          }

          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v12 = (os_log_s *)gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
            {
              LODWORD(v35) = 136446210;
              *(void *)((char *)&v35 + 4) = "nw_socksv5_parse_connect";
              _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_ERROR,  "%{public}s Read length is longer than the destination message, disconnecting",  (uint8_t *)&v35,  0xCu);
            }

            nw_framer_mark_failed_with_error(v8, 22);
          }
        }
      }

      _Block_object_dispose(&v26, 8);
      p___int128 buf = &v30;
      goto LABEL_20;
    case 4:
      *(void *)&__int128 buf = 0LL;
      *((void *)&buf + 1) = &buf;
      uint64_t v41 = 0x2000000000LL;
      __int128 v42 = 0LL;
      *(void *)temp_buffer = 0LL;
      uint64_t v20 = (uint64_t)temp_buffer;
      uint64_t v21 = 0x2000000000LL;
      LOBYTE(v22) = 0;
      v17[0] = MEMORY[0x1895F87A8];
      v17[1] = 0x40000000LL;
      v17[2] = __nw_protocol_socksv5_copy_definition_block_invoke_7;
      v17[3] = &unk_189BC8130;
      v17[4] = &buf;
      v17[5] = temp_buffer;
      nw_framer_parse_input(framer, 1uLL, 0xFFFFFFFFuLL, 0LL, v17);
      size_t v14 = nw_framer_message_create(*(nw_framer_t *)(a1 + 40));
      nw_framer_deliver_input_no_copy(framer, *(void *)(*((void *)&buf + 1) + 24LL), v14, *(_BYTE *)(v20 + 24));
      if (v14) {
        os_release(v14);
      }
      _Block_object_dispose(temp_buffer, 8);
      p___int128 buf = (uint64_t *)&buf;
LABEL_20:
      _Block_object_dispose(p_buf, 8);
      break;
    default:
      return 0LL;
  }

  return 0LL;
}

BOOL __nw_protocol_socksv5_copy_definition_block_invoke_2_12( BOOL result, nw_framer_t framer, int a3, size_t output_length)
{
  if (*(_DWORD *)(*(void *)(result + 32) + 16LL) == 4) {
    return nw_framer_write_output_no_copy(framer, output_length);
  }
  return result;
}

void __nw_protocol_socksv5_copy_definition_block_invoke_3_15(uint64_t a1)
{
  uint64_t v2 = *(xpc_object_t **)(a1 + 32);
  if (*v2)
  {
    xpc_release(*v2);
    **(void **)(a1 + 32) = 0LL;
    uint64_t v2 = *(xpc_object_t **)(a1 + 32);
  }

  if (!v2[1]
    || (xpc_release(v2[1]), *(void *)(*(void *)(a1 + 32) + 8LL) = 0LL, (uint64_t v2 = *(xpc_object_t **)(a1 + 32)) != 0LL))
  {
    free(v2);
  }

uint64_t ___ZL22nw_socksv5_parse_helloP9nw_framerP10nw_socksv5_block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v64 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    if (*a2 != 5)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v7 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        int v8 = *a2;
        *(_DWORD *)__int128 buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_socksv5_parse_hello_block_invoke";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v8;
        uint64_t v9 = "%{public}s Received invalid SOCKS version %d";
LABEL_22:
        _os_log_impl(&dword_181A5C000, v7, OS_LOG_TYPE_ERROR, v9, buf, 0x12u);
      }

uint64_t ___ZL21nw_socksv5_parse_authP9nw_framerP10nw_socksv5_block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    if (*a2 == 1)
    {
      int v4 = a2[1];
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = (os_log_s *)gLogObj;
      if (!v4)
      {
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
        {
          int v11 = 136446210;
          uint64_t v12 = "nw_socksv5_parse_auth_block_invoke";
          _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_DEBUG,  "%{public}s Received authentication success from SOCKS server",  (uint8_t *)&v11,  0xCu);
        }

        nw_socksv5_send_connect(*(nw_framer **)(a1 + 32), *(void *)(a1 + 40));
        return 2LL;
      }

      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        int v6 = a2[1];
        int v11 = 136446466;
        uint64_t v12 = "nw_socksv5_parse_auth_block_invoke";
        __int16 v13 = 1024;
        int v14 = v6;
        os_log_type_t v7 = "%{public}s Received SOCKS auth status %d, failing";
LABEL_11:
        _os_log_impl(&dword_181A5C000, v5, OS_LOG_TYPE_ERROR, v7, (uint8_t *)&v11, 0x12u);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        int v10 = *a2;
        int v11 = 136446466;
        uint64_t v12 = "nw_socksv5_parse_auth_block_invoke";
        __int16 v13 = 1024;
        int v14 = v10;
        os_log_type_t v7 = "%{public}s Received invalid SOCKS auth version %d";
        goto LABEL_11;
      }
    }

    nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 32), 80);
    return 2LL;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  int v8 = (os_log_s *)gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
  {
    int v11 = 136446210;
    uint64_t v12 = "nw_socksv5_parse_auth_block_invoke";
    _os_log_impl(&dword_181A5C000, v8, OS_LOG_TYPE_ERROR, "%{public}s Received NULL server auth", (uint8_t *)&v11, 0xCu);
  }

  return 0LL;
}

uint64_t ___ZL24nw_socksv5_parse_connectP9nw_framerP10nw_socksv5_block_invoke( uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (!a2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v7 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136446210;
      int v14 = "nw_socksv5_parse_connect_block_invoke";
      _os_log_impl(&dword_181A5C000, v7, OS_LOG_TYPE_ERROR, "%{public}s Received NULL header", (uint8_t *)&v13, 0xCu);
    }

    return 0LL;
  }

  if (*a2 == 5)
  {
    if (a2[1])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v4 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        int v5 = a2[1];
        int v13 = 136446466;
        int v14 = "nw_socksv5_parse_connect_block_invoke";
        __int16 v15 = 1024;
        int v16 = v5;
        int v6 = "%{public}s Received SOCKS connect status %d, failing";
LABEL_11:
        _os_log_impl(&dword_181A5C000, v4, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v13, 0x12u);
        goto LABEL_12;
      }

      goto LABEL_12;
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = a2[3];
    int v10 = a2[3];
    switch(v10)
    {
      case 4:
        uint64_t result = 0LL;
        *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 22;
        return result;
      case 3:
        uint64_t result = 0LL;
        *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 5;
        return result;
      case 1:
        uint64_t result = 0LL;
        *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 10;
        return result;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v11 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      int v12 = a2[3];
      int v13 = 136446466;
      int v14 = "nw_socksv5_parse_connect_block_invoke";
      __int16 v15 = 1024;
      int v16 = v12;
      _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_ERROR,  "%{public}s Received SOCKS unknown type %d",  (uint8_t *)&v13,  0x12u);
    }

    nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 48), 22);
    return 0LL;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  int v4 = (os_log_s *)gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
  {
    int v9 = *a2;
    int v13 = 136446466;
    int v14 = "nw_socksv5_parse_connect_block_invoke";
    __int16 v15 = 1024;
    int v16 = v9;
    int v6 = "%{public}s Received invalid SOCKS version %d";
    goto LABEL_11;
  }

uint64_t ___ZL24nw_socksv5_parse_connectP9nw_framerP10nw_socksv5_block_invoke_27(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(unsigned __int8 *)(a2 + 4) + 7;
  }

  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v2 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      int v4 = 136446210;
      int v5 = "nw_socksv5_parse_connect_block_invoke";
      _os_log_impl(&dword_181A5C000, v2, OS_LOG_TYPE_ERROR, "%{public}s Received NULL fqdn", (uint8_t *)&v4, 0xCu);
    }
  }

  return 0LL;
}

uint64_t ___ZL24nw_socksv5_parse_connectP9nw_framerP10nw_socksv5_block_invoke_29(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v2 = (os_log_s *)gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
  {
    int v4 = 136446210;
    int v5 = "nw_socksv5_parse_connect_block_invoke";
    _os_log_impl( &dword_181A5C000,  v2,  OS_LOG_TYPE_DEBUG,  "%{public}s Received complete connect message from SOCKS server",  (uint8_t *)&v4,  0xCu);
  }

  *(_DWORD *)(*(void *)(a1 + 40) + 16LL) = 4;
  return *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
}

uint64_t __nw_protocol_socksv5_copy_definition_block_invoke_7(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = a3;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = a4;
  return 0LL;
}

void nw_socksv5_send_connect(nw_framer *a1, uint64_t a2)
{
  uint64_t v52 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    nw_endpoint_t v4 = nw_framer_copy_remote_endpoint(a1);
    BOOL v5 = nw_endpoint_copy_proxy_original_endpoint(v4);
    if (v4) {
      os_release(v4);
    }
    __int128 v50 = 0u;
    memset(v51, 0, sizeof(v51));
    __int128 v48 = 0u;
    __int128 v49 = 0u;
    __int128 v46 = 0u;
    __int128 v47 = 0u;
    __int128 v44 = 0u;
    __int128 v45 = 0u;
    __int128 v42 = 0u;
    __int128 v43 = 0u;
    __int128 v40 = 0u;
    __int128 v41 = 0u;
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    __int128 v37 = 0u;
    __int128 v36 = 0u;
    __int128 v35 = 0u;
    __int128 v34 = 0u;
    __int128 v33 = 0u;
    __int128 v32 = 0u;
    __int128 v31 = 0u;
    __int128 v30 = 0u;
    __int128 v29 = 0u;
    __int128 v28 = 0u;
    __int128 v27 = 0u;
    __int128 v26 = 0u;
    __int128 v25 = 0u;
    __int128 v24 = 0u;
    __int128 v23 = 0u;
    *(_WORD *)output_buffer = 261;
    memset(&output_buffer[2], 0, 33);
    if (nw_endpoint_get_type((nw_endpoint_t)v5) == nw_endpoint_type_address)
    {
      address = nw_endpoint_get_address((nw_endpoint_t)v5);
      if (address->sa_family == 30)
      {
        output_buffer[3] = 4;
        *(sockaddr *)&output_buffer[4] = *(sockaddr *)&address->sa_data[6];
        *(_WORD *)&output_buffer[20] = *(_WORD *)address->sa_data;
        size_t v7 = 22LL;
      }

      else
      {
        output_buffer[3] = 1;
        *(_DWORD *)&output_buffer[4] = *(_DWORD *)&address->sa_data[2];
        *(_WORD *)&output_buffer[8] = *(_WORD *)address->sa_data;
        size_t v7 = 10LL;
      }
    }

    else
    {
      output_buffer[3] = 3;
      hostname = nw_endpoint_get_hostname((nw_endpoint_t)v5);
      if (hostname)
      {
        int v9 = hostname;
        size_t v10 = strlen(hostname);
        if (v10 >= 0xFF) {
          size_t v11 = 255LL;
        }
        else {
          size_t v11 = v10;
        }
        output_buffer[4] = v11;
        memcpy(&output_buffer[5], v9, v11);
      }

      else
      {
        size_t v11 = 0LL;
        output_buffer[4] = 0;
      }

      *(_WORD *)&output_buffer[v11 + 5] = __rev16(nw_endpoint_get_port((nw_endpoint_t)v5));
      size_t v7 = v11 + 7;
    }

    nw_framer_write_output(a1, output_buffer, v7);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v12 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 136446210;
      uint64_t v21 = "nw_socksv5_send_connect";
      _os_log_impl(&dword_181A5C000, v12, OS_LOG_TYPE_DEBUG, "%{public}s Sent client request", buf, 0xCu);
    }

    *(_DWORD *)(a2 + 16) = 3;
    if (v5) {
      os_release((void *)v5);
    }
    return;
  }

  __nwlog_obj();
  *(_DWORD *)output_buffer = 136446210;
  *(void *)&output_buffer[4] = "nw_socksv5_send_connect";
  int v13 = (char *)_os_log_send_and_compose_impl();
  buf[0] = 16;
  char v19 = 0;
  if (__nwlog_fault(v13, buf, &v19))
  {
    if (buf[0] == 17)
    {
      int v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = buf[0];
      if (!os_log_type_enabled(v14, (os_log_type_t)buf[0])) {
        goto LABEL_34;
      }
      *(_DWORD *)output_buffer = 136446210;
      *(void *)&output_buffer[4] = "nw_socksv5_send_connect";
      int v16 = "%{public}s called with null framer";
      goto LABEL_33;
    }

    if (!v19)
    {
      int v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = buf[0];
      if (!os_log_type_enabled(v14, (os_log_type_t)buf[0])) {
        goto LABEL_34;
      }
      *(_DWORD *)output_buffer = 136446210;
      *(void *)&output_buffer[4] = "nw_socksv5_send_connect";
      int v16 = "%{public}s called with null framer, backtrace limit exceeded";
      goto LABEL_33;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v14 = (os_log_s *)__nwlog_obj();
    os_log_type_t v15 = buf[0];
    BOOL v18 = os_log_type_enabled(v14, (os_log_type_t)buf[0]);
    if (backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)output_buffer = 136446466;
        *(void *)&output_buffer[4] = "nw_socksv5_send_connect";
        *(_WORD *)&output_buffer[12] = 2082;
        *(void *)&output_buffer[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s called with null framer, dumping backtrace:%{public}s",  output_buffer,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_34;
    }

    if (v18)
    {
      *(_DWORD *)output_buffer = 136446210;
      *(void *)&output_buffer[4] = "nw_socksv5_send_connect";
      int v16 = "%{public}s called with null framer, no backtrace";
LABEL_33:
      _os_log_impl(&dword_181A5C000, v14, v15, v16, output_buffer, 0xCu);
    }
  }

void *nw_protocol_copy_test_definition()
{
  if (nw_protocol_copy_test_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_test_definition::onceToken, &__block_literal_global_83889);
  }
  uint64_t result = (void *)nw_protocol_copy_test_definition::test_definition;
  if (nw_protocol_copy_test_definition::test_definition) {
    return os_retain((void *)nw_protocol_copy_test_definition::test_definition);
  }
  return result;
}

void __nw_protocol_copy_test_definition_block_invoke()
{
  nw_protocol_copy_test_definition::test_definition = (uint64_t)nw_protocol_definition_create_with_identifier((__int128 *)&g_test_protocol_identifier);
  nw_protocol_definition_set_options_allocator( (void *)nw_protocol_copy_test_definition::test_definition,  (uint64_t)nw_protocol_test_allocate_options,  (uint64_t)nw_protocol_test_copy_options,  (uint64_t)nw_protocol_test_deallocate_options);
  nw_protocol_definition_set_options_equality_check( (void *)nw_protocol_copy_test_definition::test_definition,  (uint64_t)nw_protocol_test_options_are_equal);
  nw_protocol_definition_set_metadata_allocator( (void *)nw_protocol_copy_test_definition::test_definition,  (uint64_t)nw_protocol_test_allocate_metadata,  (uint64_t)nw_protocol_test_deallocate_metadata);
}

BOOL nw_protocol_test_allocate_options(nw_protocol_definition *a1)
{
  v1 = calloc(1uLL, 0x30uLL);
  if (v1) {
    goto LABEL_2;
  }
  uint64_t v3 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  nw_endpoint_t v4 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v4);
  if (!result)
  {
    free(v4);
LABEL_2:
    v1[1] = 0u;
    v1[2] = 0u;
    _OWORD *v1 = 0u;
    return (BOOL)v1;
  }

  __break(1u);
  return result;
}

BOOL nw_protocol_test_copy_options(nw_protocol_definition *a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    __int128 v27 = "nw_protocol_test_copy_options";
    int v16 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v16, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v17 = (os_log_s *)__nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          __int128 v27 = "nw_protocol_test_copy_options";
          char v19 = "%{public}s called with null existing_handle";
LABEL_31:
          _os_log_impl(&dword_181A5C000, v17, v18, v19, buf, 0xCu);
        }
      }

      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v17 = (os_log_s *)__nwlog_obj();
        os_log_type_t v18 = type;
        BOOL v23 = os_log_type_enabled(v17, type);
        if (backtrace_string)
        {
          if (v23)
          {
            *(_DWORD *)__int128 buf = 136446466;
            __int128 v27 = "nw_protocol_test_copy_options";
            __int16 v28 = 2082;
            uint64_t v29 = (uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v17,  v18,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }

        if (v23)
        {
          *(_DWORD *)__int128 buf = 136446210;
          __int128 v27 = "nw_protocol_test_copy_options";
          char v19 = "%{public}s called with null existing_handle, no backtrace";
          goto LABEL_31;
        }
      }

      else
      {
        uint64_t v17 = (os_log_s *)__nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          __int128 v27 = "nw_protocol_test_copy_options";
          char v19 = "%{public}s called with null existing_handle, backtrace limit exceeded";
          goto LABEL_31;
        }
      }
    }

void nw_protocol_test_deallocate_options(nw_protocol_definition *a1, void *a2)
{
  if (a2)
  {
    if ((a2[4] & 1) != 0)
    {
      uint64_t v3 = (const void *)a2[3];
      if (v3) {
        _Block_release(v3);
      }
    }

    a2[3] = 0LL;
    if ((a2[2] & 1) != 0)
    {
      nw_endpoint_t v4 = (const void *)a2[1];
      if (v4) {
        _Block_release(v4);
      }
    }

    free(a2);
  }

BOOL nw_protocol_test_options_are_equal(nw_protocol_definition *a1, void *a2, void *a3)
{
  return *a2 == *a3 && a2[1] == a3[1] && a2[2] == a3[2] && a2[3] == a3[3] && a2[4] == a3[4] && a2[5] == a3[5];
}

BOOL nw_protocol_test_allocate_metadata(nw_protocol_definition *a1)
{
  v1 = calloc(1uLL, 4uLL);
  if (v1) {
    return (BOOL)v1;
  }
  uint64_t v3 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  nw_endpoint_t v4 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v4);
  if (!result)
  {
    free(v4);
    return (BOOL)v1;
  }

  __break(1u);
  return result;
}

void nw_protocol_test_deallocate_metadata(nw_protocol_definition *a1, void *a2)
{
  if (a2) {
    free(a2);
  }
}

BOOL ___Z27nw_protocol_test_identifierv_block_invoke()
{
  unk_18C5A453D = 0LL;
  unk_18C5A454D = 0LL;
  unk_18C5A4545 = 0LL;
  dword_18C5A4554 = 0;
  strcpy((char *)&g_test_protocol_identifier, "test");
  qword_18C5A45D0 = (uint64_t)nw_protocol_common_get_parameters;
  unk_18C5A45D8 = nw_protocol_common_get_path;
  qword_18C5A45E0 = (uint64_t)nw_protocol_common_get_local_endpoint;
  unk_18C5A45E8 = nw_protocol_common_get_remote_endpoint;
  qword_18C5A4580 = (uint64_t)nw_protocol_common_disconnect;
  unk_18C5A4588 = nw_protocol_common_connected;
  qword_18C5A45A0 = (uint64_t)nw_protocol_common_input_available;
  unk_18C5A45A8 = nw_protocol_common_output_available;
  qword_18C5A4660 = (uint64_t)nw_protocol_common_reset;
  unk_18C5A4668 = nw_protocol_common_input_flush;
  qword_18C5A4640 = (uint64_t)nw_protocol_common_copy_info;
  unk_18C5A4648 = 0LL;
  qword_18C5A4610 = (uint64_t)nw_protocol_common_supports_external_data;
  unk_18C5A4618 = nw_protocol_common_input_finished;
  qword_18C5A4630 = (uint64_t)nw_protocol_common_get_output_interface;
  unk_18C5A4638 = nw_protocol_common_waiting_for_output;
  qword_18C5A45F0 = (uint64_t)nw_protocol_common_register_notification;
  unk_18C5A45F8 = nw_protocol_common_unregister_notification;
  qword_18C5A4600 = (uint64_t)nw_protocol_common_notify;
  unk_18C5A4608 = nw_protocol_common_updated_path;
  g_test_protocol_callbacks = (uint64_t)nw_protocol_test_add_input_handler;
  *(void *)algn_18C5A4568 = nw_protocol_test_remove_input_handler;
  qword_18C5A45B0 = (uint64_t)nw_protocol_test_get_input_frames;
  unk_18C5A45B8 = nw_protocol_test_get_output_frames;
  qword_18C5A45C0 = (uint64_t)nw_protocol_test_finalize_output_frames;
  unk_18C5A45C8 = nw_protocol_common_link_state;
  qword_18C5A4570 = (uint64_t)nw_protocol_common_replace_input_handler;
  unk_18C5A4578 = nw_protocol_test_connect;
  qword_18C5A4590 = (uint64_t)nw_protocol_test_disconnected;
  unk_18C5A4598 = nw_protocol_common_error;
  qword_18C5A4620 = (uint64_t)nw_protocol_test_output_finished;
  unk_18C5A4628 = nw_protocol_common_get_output_local_endpoint;
  qword_18C5A4650 = 0LL;
  unk_18C5A4658 = nw_protocol_test_get_message_properties;
  qword_18C5A4558 = 0x100000004LL;
  return nw_protocol_register_extended(&g_test_protocol_identifier, (uint64_t)nw_protocol_test_create);
}

BOOL nw_protocol_test_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  v69[3] = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_test_add_input_handler";
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v66 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v21 = (os_log_s *)__nwlog_obj();
      os_log_type_t v22 = type[0];
      if (!os_log_type_enabled(v21, type[0])) {
        goto LABEL_66;
      }
      *(_DWORD *)__int128 buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_test_add_input_handler";
      BOOL v23 = "%{public}s called with null protocol";
    }

    else if (v66)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v21 = (os_log_s *)__nwlog_obj();
      os_log_type_t v22 = type[0];
      BOOL v47 = os_log_type_enabled(v21, type[0]);
      if (backtrace_string)
      {
        if (v47)
        {
          *(_DWORD *)__int128 buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_test_add_input_handler";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v21,  v22,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_66;
      }

      if (!v47) {
        goto LABEL_66;
      }
      *(_DWORD *)__int128 buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_test_add_input_handler";
      BOOL v23 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      uint64_t v21 = (os_log_s *)__nwlog_obj();
      os_log_type_t v22 = type[0];
      if (!os_log_type_enabled(v21, type[0])) {
        goto LABEL_66;
      }
      *(_DWORD *)__int128 buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_test_add_input_handler";
      BOOL v23 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_65;
  }

  if (a1->handle == &nw_protocol_ref_counted_handle)
  {
    if ((nw_protocol_common_add_input_handler((uint64_t)a1, (uint64_t)a2) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v15 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_test_add_input_handler";
        _os_log_impl(&dword_181A5C000, v15, OS_LOG_TYPE_ERROR, "%{public}s failed to add input handler", buf, 0xCu);
      }

      return 0LL;
    }

    if (a1->handle != &nw_protocol_ref_counted_handle)
    {
      __nwlog_obj();
      *(_DWORD *)__int128 buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_test_access_options";
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      char v66 = 0;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v21 = (os_log_s *)__nwlog_obj();
        os_log_type_t v22 = type[0];
        if (!os_log_type_enabled(v21, type[0])) {
          goto LABEL_66;
        }
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_test_access_options";
        BOOL v23 = "%{public}s called with null test";
      }

      else if (v66)
      {
        uint64_t v32 = (char *)__nw_create_backtrace_string();
        uint64_t v21 = (os_log_s *)__nwlog_obj();
        os_log_type_t v22 = type[0];
        BOOL v52 = os_log_type_enabled(v21, type[0]);
        if (v32)
        {
          if (v52)
          {
            *(_DWORD *)__int128 buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_protocol_test_access_options";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v32;
            __int128 v34 = "%{public}s called with null test, dumping backtrace:%{public}s";
            goto LABEL_48;
          }

          goto LABEL_49;
        }

        if (!v52) {
          goto LABEL_66;
        }
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_test_access_options";
        BOOL v23 = "%{public}s called with null test, no backtrace";
      }

      else
      {
        uint64_t v21 = (os_log_s *)__nwlog_obj();
        os_log_type_t v22 = type[0];
        if (!os_log_type_enabled(v21, type[0])) {
          goto LABEL_66;
        }
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_test_access_options";
        BOOL v23 = "%{public}s called with null test, backtrace limit exceeded";
      }

      goto LABEL_65;
    }

    callbacks = a1[1].callbacks;
    if (callbacks) {
      a1[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
    }
    nw_endpoint_t v4 = a1->callbacks;
    if (v4)
    {
      get_parameters = (uint64_t (*)(nw_protocol *))v4->get_parameters;
      if (get_parameters)
      {
        char v6 = (void *)get_parameters(a1);
LABEL_10:
        if (a1->handle == &nw_protocol_ref_counted_handle)
        {
          int v16 = a1[1].callbacks;
          if (v16)
          {
            uint64_t v17 = (nw_protocol_callbacks *)((char *)v16 - 1);
            a1[1].callbacks = v17;
            if (!v17)
            {
              os_log_type_t v18 = *(void (***)(void))a1[1].flow_id;
              if (v18)
              {
                *(void *)a1[1].flow_id = 0LL;
                v18[2](v18);
                _Block_release(v18);
              }

              if ((a1[1].flow_id[8] & 1) != 0)
              {
                char v19 = *(const void **)a1[1].flow_id;
                if (v19) {
                  _Block_release(v19);
                }
              }

              free(a1);
            }
          }
        }

        if (v6)
        {
          if (nw_protocol_copy_test_definition::onceToken != -1) {
            dispatch_once(&nw_protocol_copy_test_definition::onceToken, &__block_literal_global_83889);
          }
          if (nw_protocol_copy_test_definition::test_definition)
          {
            size_t v7 = os_retain((void *)nw_protocol_copy_test_definition::test_definition);
            if (v7)
            {
              int v8 = v7;
              int v9 = nw_parameters_copy_protocol_options_for_definition(v6, v7);
              if (v9)
              {
                char v10 = v9;
                BOOL is_test_protocol = nw_protocol_options_is_test_protocol(v9);
                if (is_test_protocol)
                {
                  if (nw_protocol_options_is_test_protocol(v10))
                  {
                    *(void *)os_log_type_t type = 0LL;
                    BOOL v63 = type;
                    uint64_t v64 = 0x2000000000LL;
                    uint64_t v65 = 0LL;
                    *(void *)__int128 buf = MEMORY[0x1895F87A8];
                    *(void *)&buf[8] = 0x40000000LL;
                    *(void *)&buf[16] = ___ZL38nw_protocol_test_options_get_test_modeP19nw_protocol_options_block_invoke;
                    BOOL v68 = (nw_protocol *)&unk_189BC83F8;
                    v69[0] = type;
                    nw_protocol_options_access_handle(v10, buf);
                    int v12 = (nw_protocol *)*((void *)v63 + 3);
                    _Block_object_dispose(type, 8);
LABEL_20:
                    a1[1].output_handler = v12;
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    unsigned int v13 = (os_log_s *)gLogObj;
                    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
                    {
                      output_handler = a1[1].output_handler;
                      *(_DWORD *)__int128 buf = 136446466;
                      *(void *)&uint8_t buf[4] = "nw_protocol_test_add_input_handler_block_invoke";
                      *(_WORD *)&buf[12] = 2048;
                      *(void *)&buf[14] = output_handler;
                      _os_log_impl( &dword_181A5C000,  v13,  OS_LOG_TYPE_INFO,  "%{public}s Got test mode flags: %llu",  buf,  0x16u);
                    }

uint64_t nw_protocol_test_remove_input_handler(nw_protocol *a1, nw_protocol *a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if (a1->handle == &nw_protocol_ref_counted_handle)
    {
      int v4 = a3;
      uint64_t v5 = nw_protocol_common_remove_input_handler_with_cleanup_blocks(a1, a2, a3, 0LL, 0LL);
      if (v4)
      {
        if (a1[1].output_handler_context)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v6 = (os_log_s *)gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)__int128 buf = 136446466;
            uint64_t v20 = "nw_protocol_test_destroy";
            __int16 v21 = 2082;
            os_log_type_t v22 = a1 + 2;
            _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s Cancelling output frame failure timer",  buf,  0x16u);
          }

          nw_queue_cancel_source((uint64_t)a1[1].output_handler_context, v7);
          a1[1].output_handler_context = 0LL;
        }

        nw_protocol_destroy((uint64_t)&a1[1].output_handler, 0LL);
      }

      return v5;
    }

    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    uint64_t v20 = "nw_protocol_test_remove_input_handler";
    int v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v10 = (os_log_s *)__nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v20 = "nw_protocol_test_remove_input_handler";
        int v12 = "%{public}s called with null test";
        goto LABEL_36;
      }

      goto LABEL_37;
    }

    if (!v17)
    {
      char v10 = (os_log_s *)__nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v20 = "nw_protocol_test_remove_input_handler";
        int v12 = "%{public}s called with null test, backtrace limit exceeded";
        goto LABEL_36;
      }

      goto LABEL_37;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    char v10 = (os_log_s *)__nwlog_obj();
    os_log_type_t v11 = type;
    BOOL v16 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v20 = "nw_protocol_test_remove_input_handler";
        int v12 = "%{public}s called with null test, no backtrace";
        goto LABEL_36;
      }

      goto LABEL_37;
    }

    if (v16)
    {
      *(_DWORD *)__int128 buf = 136446466;
      uint64_t v20 = "nw_protocol_test_remove_input_handler";
      __int16 v21 = 2082;
      os_log_type_t v22 = (nw_protocol *)backtrace_string;
      os_log_type_t v15 = "%{public}s called with null test, dumping backtrace:%{public}s";
      goto LABEL_26;
    }

    goto LABEL_27;
  }

  __nwlog_obj();
  *(_DWORD *)__int128 buf = 136446210;
  uint64_t v20 = "nw_protocol_test_remove_input_handler";
  int v9 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v17)
    {
      char v10 = (os_log_s *)__nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v20 = "nw_protocol_test_remove_input_handler";
        int v12 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_36;
      }

      goto LABEL_37;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    char v10 = (os_log_s *)__nwlog_obj();
    os_log_type_t v11 = type;
    BOOL v14 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v20 = "nw_protocol_test_remove_input_handler";
        int v12 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_36;
      }

      goto LABEL_37;
    }

    if (v14)
    {
      *(_DWORD *)__int128 buf = 136446466;
      uint64_t v20 = "nw_protocol_test_remove_input_handler";
      __int16 v21 = 2082;
      os_log_type_t v22 = (nw_protocol *)backtrace_string;
      os_log_type_t v15 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_26:
      _os_log_impl(&dword_181A5C000, v10, v11, v15, buf, 0x16u);
    }

uint64_t nw_protocol_test_get_input_frames( nw_protocol *a1, nw_protocol *a2, unsigned int a3, int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v337 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_test_get_input_frames";
    uint64_t v143 = (char *)_os_log_send_and_compose_impl();
    v323[0] = 16;
    v330[0] = 0;
    if (v323[0] == 17)
    {
      uint64_t v140 = (os_log_s *)__nwlog_obj();
      os_log_type_t v141 = v323[0];
      if (os_log_type_enabled(v140, (os_log_type_t)v323[0]))
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_test_get_input_frames";
        uint64_t v142 = "%{public}s called with null protocol";
LABEL_271:
        _os_log_impl(&dword_181A5C000, v140, v141, v142, buf, 0xCu);
      }

LABEL_413:
                if (v193) {
                  free(v193);
                }
                uint64_t v36 = v191;
                uint64_t v49 = MEMORY[0x1895F87A8];
LABEL_108:
                nw::retained_ptr<nw_protocol *>::~retained_ptr((uint64_t *)v321);
                nw::retained_ptr<nw_protocol *>::~retained_ptr((uint64_t *)v330);
                if (a2->handle == &nw_protocol_ref_counted_handle)
                {
                  BOOL v74 = a2[1].callbacks;
                  if (v74) {
                    a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v74->add_input_handler + 1);
                  }
                  *(void *)v330 = a2;
                  char v73 = v330[8] | 1;
                }

                else
                {
                  *(void *)v330 = a2;
                  char v73 = v330[8] & 0xFE;
                }

                v330[8] = v73;
                if (a1->handle == &nw_protocol_ref_counted_handle)
                {
                  int v76 = a1[1].callbacks;
                  if (v76) {
                    a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v76->add_input_handler + 1);
                  }
                  *(void *)v321 = a1;
                  char v75 = v322 | 1;
                }

                else
                {
                  *(void *)v321 = a1;
                  char v75 = v322 & 0xFE;
                }

                char v322 = v75;
                uint64_t v77 = a2->callbacks;
                if (v77)
                {
                  disconnected = (void (*)(nw_protocol *, nw_protocol *))v77->disconnected;
                  if (disconnected)
                  {
                    disconnected(a2, a1);
LABEL_121:
                    nw::retained_ptr<nw_protocol *>::~retained_ptr((uint64_t *)v321);
                    nw::retained_ptr<nw_protocol *>::~retained_ptr((uint64_t *)v330);
                    goto LABEL_122;
                  }
                }

                uint64_t v198 = v36;
                __nwlog_obj();
                v199 = a2->identifier;
                *(_DWORD *)v323 = 136446722;
                *(void *)&v323[4] = "__nw_protocol_disconnected";
                if (!v199) {
                  v199 = (nw_protocol_identifier *)"invalid";
                }
                *(_WORD *)&v323[12] = 2082;
                *(void *)&v323[14] = v199;
                *(_WORD *)&v323[22] = 2048;
                *(void *)v324 = a2;
                uint64_t v200 = (char *)_os_log_send_and_compose_impl();
                os_log_type_t v320 = OS_LOG_TYPE_ERROR;
                char v319 = 0;
                if (__nwlog_fault(v200, &v320, &v319))
                {
                  if (v320 == OS_LOG_TYPE_FAULT)
                  {
                    v201 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v202 = v320;
                    if (os_log_type_enabled(v201, v320))
                    {
                      int v203 = a2->identifier;
                      if (!v203) {
                        int v203 = (nw_protocol_identifier *)"invalid";
                      }
                      *(_DWORD *)v323 = 136446722;
                      *(void *)&v323[4] = "__nw_protocol_disconnected";
                      *(_WORD *)&v323[12] = 2082;
                      *(void *)&v323[14] = v203;
                      *(_WORD *)&v323[22] = 2048;
                      *(void *)v324 = a2;
                      v204 = "%{public}s protocol %{public}s (%p) has invalid disconnected callback";
LABEL_420:
                      v255 = v201;
LABEL_421:
                      _os_log_impl(&dword_181A5C000, v255, v202, v204, v323, 0x20u);
                    }
                  }

                  else if (v319)
                  {
                    v236 = (char *)__nw_create_backtrace_string();
                    v237 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v202 = v320;
                    v275 = v237;
                    BOOL v238 = os_log_type_enabled(v237, v320);
                    if (v236)
                    {
                      if (v238)
                      {
                        v239 = a2->identifier;
                        if (!v239) {
                          v239 = (nw_protocol_identifier *)"invalid";
                        }
                        *(_DWORD *)v323 = 136446978;
                        *(void *)&v323[4] = "__nw_protocol_disconnected";
                        *(_WORD *)&v323[12] = 2082;
                        *(void *)&v323[14] = v239;
                        *(_WORD *)&v323[22] = 2048;
                        *(void *)v324 = a2;
                        *(_WORD *)&v324[8] = 2082;
                        *(void *)&v324[10] = v236;
                        _os_log_impl( &dword_181A5C000,  v275,  v202,  "%{public}s protocol %{public}s (%p) has invalid disconnected callback, dumping backtrace:%{public}s",  v323,  0x2Au);
                      }

                      free(v236);
                      goto LABEL_422;
                    }

                    if (v238)
                    {
                      v259 = a2->identifier;
                      if (!v259) {
                        v259 = (nw_protocol_identifier *)"invalid";
                      }
                      *(_DWORD *)v323 = 136446722;
                      *(void *)&v323[4] = "__nw_protocol_disconnected";
                      *(_WORD *)&v323[12] = 2082;
                      *(void *)&v323[14] = v259;
                      *(_WORD *)&v323[22] = 2048;
                      *(void *)v324 = a2;
                      v204 = "%{public}s protocol %{public}s (%p) has invalid disconnected callback, no backtrace";
                      v255 = v275;
                      goto LABEL_421;
                    }
                  }

                  else
                  {
                    v201 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v202 = v320;
                    if (os_log_type_enabled(v201, v320))
                    {
                      v254 = a2->identifier;
                      if (!v254) {
                        v254 = (nw_protocol_identifier *)"invalid";
                      }
                      *(_DWORD *)v323 = 136446722;
                      *(void *)&v323[4] = "__nw_protocol_disconnected";
                      *(_WORD *)&v323[12] = 2082;
                      *(void *)&v323[14] = v254;
                      *(_WORD *)&v323[22] = 2048;
                      *(void *)v324 = a2;
                      v204 = "%{public}s protocol %{public}s (%p) has invalid disconnected callback, backtrace limit exceeded";
                      goto LABEL_420;
                    }
                  }
                }

uint64_t nw_protocol_test_get_output_frames( nw_protocol *a1, nw_protocol *a2, uint64_t a3, uint64_t a4, uint64_t a5, nw_frame_array_s *a6)
{
  uint64_t v88 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if (a1->handle == &nw_protocol_ref_counted_handle)
    {
      p_output_handler = &a1[1].output_handler;
      output_handler = a1[1].output_handler;
      if ((output_handler & 0x80) != 0)
      {
        int v13 = (BYTE4(a1[3].identifier) + 1) & 3;
        BYTE4(a1[3].identifier) = v13;
        if (v13 == 2)
        {
          if (!gLogDatapath) {
            goto LABEL_77;
          }
          size_t v14 = (os_log_s *)__nwlog_obj();
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_77;
          }
          *(_DWORD *)__int128 buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_test_get_output_frames";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = a1 + 2;
          os_log_type_t v15 = "%{public}s %{public}s Failing every 2nd request for get_output_frames";
          goto LABEL_148;
        }

        if (!v13)
        {
          if (!gLogDatapath) {
            goto LABEL_77;
          }
          size_t v14 = (os_log_s *)__nwlog_obj();
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_77;
          }
          *(_DWORD *)__int128 buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_test_get_output_frames";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = a1 + 2;
          os_log_type_t v15 = "%{public}s %{public}s Failing every 4th request for get_output_frames";
LABEL_148:
          _os_log_impl(&dword_181A5C000, v14, OS_LOG_TYPE_DEBUG, v15, buf, 0x16u);
LABEL_77:
          if (a1[1].output_handler_context)
          {
            if (gLogDatapath)
            {
              BOOL v63 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)__int128 buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_protocol_test_get_output_frames";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = a1 + 2;
                _os_log_impl( &dword_181A5C000,  v63,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s Cancelling existing output frame failure timer",  buf,  0x16u);
              }
            }

            nw_queue_cancel_source((uint64_t)a1[1].output_handler_context, (uint64_t)a2);
            a1[1].output_handler_context = 0LL;
          }

          v75[0] = MEMORY[0x1895F87A8];
          v75[1] = 0x40000000LL;
          v75[2] = ___ZL34nw_protocol_test_get_output_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke;
          v75[3] = &__block_descriptor_tmp_37_84134;
          v75[4] = (char *)a1 + 96;
          v75[5] = a1;
          uint64_t v34 = 0LL;
          a1[1].output_handler_context = (void *)nw_queue_context_create_source(0LL, 2, 3, 0, v75, 0LL);
          return v34;
        }
      }

      else
      {
        BYTE4(a1[3].identifier) = (BYTE4(a1[3].identifier) + 1) & 3;
      }

      if (((unsigned __int16)output_handler & 0x200) == 0 || (arc4random() & 0x80000000) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v16 = (os_log_s *)gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int128 buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_test_get_output_frames";
          _os_log_impl( &dword_181A5C000,  v16,  OS_LOG_TYPE_INFO,  "%{public}s Allowing request for get_output_frames to succeed",  buf,  0xCu);
        }

uint64_t nw_protocol_test_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  uint64_t v100 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    uint64_t v93 = "nw_protocol_test_finalize_output_frames";
    os_log_type_t v58 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v90 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v59 = (os_log_s *)__nwlog_obj();
      os_log_type_t v60 = type;
      if (!os_log_type_enabled(v59, type)) {
        goto LABEL_210;
      }
      *(_DWORD *)__int128 buf = 136446210;
      uint64_t v93 = "nw_protocol_test_finalize_output_frames";
      BOOL v61 = "%{public}s called with null protocol";
LABEL_209:
      _os_log_impl(&dword_181A5C000, v59, v60, v61, buf, 0xCu);
      goto LABEL_210;
    }

    if (!v90)
    {
      char v59 = (os_log_s *)__nwlog_obj();
      os_log_type_t v60 = type;
      if (os_log_type_enabled(v59, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v93 = "nw_protocol_test_finalize_output_frames";
        BOOL v61 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_209;
      }

      goto LABEL_210;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    char v59 = (os_log_s *)__nwlog_obj();
    os_log_type_t v60 = type;
    BOOL v71 = os_log_type_enabled(v59, type);
    if (!backtrace_string)
    {
      if (v71)
      {
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v93 = "nw_protocol_test_finalize_output_frames";
        BOOL v61 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_209;
      }

      goto LABEL_210;
    }

    if (!v71) {
      goto LABEL_163;
    }
    *(_DWORD *)__int128 buf = 136446466;
    uint64_t v93 = "nw_protocol_test_finalize_output_frames";
    __int16 v94 = 2082;
    int v95 = (nw_protocol_identifier *)backtrace_string;
    uint64_t v72 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_162:
    _os_log_impl(&dword_181A5C000, v59, v60, v72, buf, 0x16u);
    goto LABEL_163;
  }

  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    uint64_t v93 = "nw_protocol_test_finalize_output_frames";
    os_log_type_t v58 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v90 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v59 = (os_log_s *)__nwlog_obj();
      os_log_type_t v60 = type;
      if (!os_log_type_enabled(v59, type)) {
        goto LABEL_210;
      }
      *(_DWORD *)__int128 buf = 136446210;
      uint64_t v93 = "nw_protocol_test_finalize_output_frames";
      BOOL v61 = "%{public}s called with null test";
      goto LABEL_209;
    }

    if (!v90)
    {
      char v59 = (os_log_s *)__nwlog_obj();
      os_log_type_t v60 = type;
      if (os_log_type_enabled(v59, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v93 = "nw_protocol_test_finalize_output_frames";
        BOOL v61 = "%{public}s called with null test, backtrace limit exceeded";
        goto LABEL_209;
      }

      goto LABEL_210;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    char v59 = (os_log_s *)__nwlog_obj();
    os_log_type_t v60 = type;
    BOOL v73 = os_log_type_enabled(v59, type);
    if (!backtrace_string)
    {
      if (v73)
      {
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v93 = "nw_protocol_test_finalize_output_frames";
        BOOL v61 = "%{public}s called with null test, no backtrace";
        goto LABEL_209;
      }

      goto LABEL_210;
    }

    if (!v73) {
      goto LABEL_163;
    }
    *(_DWORD *)__int128 buf = 136446466;
    uint64_t v93 = "nw_protocol_test_finalize_output_frames";
    __int16 v94 = 2082;
    int v95 = (nw_protocol_identifier *)backtrace_string;
    uint64_t v72 = "%{public}s called with null test, dumping backtrace:%{public}s";
    goto LABEL_162;
  }

  v86[0] = MEMORY[0x1895F87A8];
  v86[1] = 0x40000000LL;
  uint64_t v87 = ___ZL39nw_protocol_test_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke;
  uint64_t v88 = &__block_descriptor_tmp_40_84096;
  uint64_t v89 = a2;
  callbacks = a1[1].callbacks;
  if (callbacks) {
    a1[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
  }
  uint64_t v5 = a1->callbacks;
  if (v5)
  {
    get_parameters = (uint64_t (*)(nw_protocol *))v5->get_parameters;
    if (get_parameters)
    {
      uint64_t v7 = (void *)get_parameters(a1);
      goto LABEL_8;
    }
  }

  __nwlog_obj();
  identifier = a1->identifier;
  *(_DWORD *)__int128 buf = 136446722;
  uint64_t v93 = "__nw_protocol_get_parameters";
  if (!identifier) {
    identifier = (nw_protocol_identifier *)"invalid";
  }
  __int16 v94 = 2082;
  int v95 = identifier;
  __int16 v96 = 2048;
  char v97 = a1;
  BOOL v47 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v90 = 0;
  if (__nwlog_fault(v47, &type, &v90))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v48 = (os_log_s *)__nwlog_obj();
      os_log_type_t v49 = type;
      if (os_log_type_enabled(v48, type))
      {
        os_log_type_t v50 = a1->identifier;
        if (!v50) {
          os_log_type_t v50 = (nw_protocol_identifier *)"invalid";
        }
        *(_DWORD *)__int128 buf = 136446722;
        uint64_t v93 = "__nw_protocol_get_parameters";
        __int16 v94 = 2082;
        int v95 = v50;
        __int16 v96 = 2048;
        char v97 = a1;
        uint64_t v51 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback";
LABEL_182:
        _os_log_impl(&dword_181A5C000, v48, v49, v51, buf, 0x20u);
      }
    }

    else if (v90)
    {
      uint64_t v64 = (char *)__nw_create_backtrace_string();
      uint64_t v48 = (os_log_s *)__nwlog_obj();
      os_log_type_t v49 = type;
      BOOL v65 = os_log_type_enabled(v48, type);
      if (v64)
      {
        if (v65)
        {
          char v66 = a1->identifier;
          if (!v66) {
            char v66 = (nw_protocol_identifier *)"invalid";
          }
          *(_DWORD *)__int128 buf = 136446978;
          uint64_t v93 = "__nw_protocol_get_parameters";
          __int16 v94 = 2082;
          int v95 = v66;
          __int16 v96 = 2048;
          char v97 = a1;
          __int16 v98 = 2082;
          uint64_t v99 = v64;
          _os_log_impl( &dword_181A5C000,  v48,  v49,  "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(v64);
        goto LABEL_183;
      }

      if (v65)
      {
        os_log_type_t v81 = a1->identifier;
        if (!v81) {
          os_log_type_t v81 = (nw_protocol_identifier *)"invalid";
        }
        *(_DWORD *)__int128 buf = 136446722;
        uint64_t v93 = "__nw_protocol_get_parameters";
        __int16 v94 = 2082;
        int v95 = v81;
        __int16 v96 = 2048;
        char v97 = a1;
        uint64_t v51 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, no backtrace";
        goto LABEL_182;
      }
    }

    else
    {
      uint64_t v48 = (os_log_s *)__nwlog_obj();
      os_log_type_t v49 = type;
      if (os_log_type_enabled(v48, type))
      {
        int v79 = a1->identifier;
        if (!v79) {
          int v79 = (nw_protocol_identifier *)"invalid";
        }
        *(_DWORD *)__int128 buf = 136446722;
        uint64_t v93 = "__nw_protocol_get_parameters";
        __int16 v94 = 2082;
        int v95 = v79;
        __int16 v96 = 2048;
        char v97 = a1;
        uint64_t v51 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, backtrace limit exceeded";
        goto LABEL_182;
      }
    }
  }

uint64_t nw_protocol_test_connect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v70 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    os_log_type_t v63 = "nw_protocol_test_connect";
    uint64_t v40 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v60 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v60)
      {
        __int128 v41 = (os_log_s *)__nwlog_obj();
        os_log_type_t v42 = type;
        if (!os_log_type_enabled(v41, type)) {
          goto LABEL_128;
        }
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v63 = "nw_protocol_test_connect";
        os_log_type_t v43 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_127;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __int128 v41 = (os_log_s *)__nwlog_obj();
      os_log_type_t v42 = type;
      BOOL v53 = os_log_type_enabled(v41, type);
      if (!backtrace_string)
      {
        if (!v53) {
          goto LABEL_128;
        }
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v63 = "nw_protocol_test_connect";
        os_log_type_t v43 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_127;
      }

      if (v53)
      {
        *(_DWORD *)__int128 buf = 136446466;
        os_log_type_t v63 = "nw_protocol_test_connect";
        __int16 v64 = 2082;
        BOOL v65 = (nw_protocol *)backtrace_string;
        uint64_t v54 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_101:
        _os_log_impl(&dword_181A5C000, v41, v42, v54, buf, 0x16u);
      }

void nw_protocol_test_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v51 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    __int128 v44 = "nw_protocol_test_disconnected";
    __int128 v25 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v26 = (os_log_s *)__nwlog_obj();
      os_log_type_t v27 = type;
      if (!os_log_type_enabled(v26, type)) {
        goto LABEL_105;
      }
      *(_DWORD *)__int128 buf = 136446210;
      __int128 v44 = "nw_protocol_test_disconnected";
      __int16 v28 = "%{public}s called with null protocol";
    }

    else if (v41)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v26 = (os_log_s *)__nwlog_obj();
      os_log_type_t v27 = type;
      BOOL v34 = os_log_type_enabled(v26, type);
      if (backtrace_string)
      {
        if (v34)
        {
          *(_DWORD *)__int128 buf = 136446466;
          __int128 v44 = "nw_protocol_test_disconnected";
          __int16 v45 = 2082;
          int v46 = (nw_protocol *)backtrace_string;
          _os_log_impl( &dword_181A5C000,  v26,  v27,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_105:
        if (!v25) {
          return;
        }
        goto LABEL_106;
      }

      if (!v34) {
        goto LABEL_105;
      }
      *(_DWORD *)__int128 buf = 136446210;
      __int128 v44 = "nw_protocol_test_disconnected";
      __int16 v28 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      os_log_type_t v26 = (os_log_s *)__nwlog_obj();
      os_log_type_t v27 = type;
      if (!os_log_type_enabled(v26, type)) {
        goto LABEL_105;
      }
      *(_DWORD *)__int128 buf = 136446210;
      __int128 v44 = "nw_protocol_test_disconnected";
      __int16 v28 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_104;
  }

  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    __int128 v44 = "nw_protocol_test_disconnected";
    __int128 v25 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v41)
      {
        os_log_type_t v26 = (os_log_s *)__nwlog_obj();
        os_log_type_t v27 = type;
        if (!os_log_type_enabled(v26, type)) {
          goto LABEL_105;
        }
        *(_DWORD *)__int128 buf = 136446210;
        __int128 v44 = "nw_protocol_test_disconnected";
        __int16 v28 = "%{public}s called with null test, backtrace limit exceeded";
        goto LABEL_104;
      }

      __int128 v35 = (char *)__nw_create_backtrace_string();
      os_log_type_t v26 = (os_log_s *)__nwlog_obj();
      os_log_type_t v27 = type;
      BOOL v36 = os_log_type_enabled(v26, type);
      if (!v35)
      {
        if (!v36) {
          goto LABEL_105;
        }
        *(_DWORD *)__int128 buf = 136446210;
        __int128 v44 = "nw_protocol_test_disconnected";
        __int16 v28 = "%{public}s called with null test, no backtrace";
        goto LABEL_104;
      }

      if (v36)
      {
        *(_DWORD *)__int128 buf = 136446466;
        __int128 v44 = "nw_protocol_test_disconnected";
        __int16 v45 = 2082;
        int v46 = (nw_protocol *)v35;
        os_log_type_t v37 = "%{public}s called with null test, dumping backtrace:%{public}s";
LABEL_78:
        _os_log_impl(&dword_181A5C000, v26, v27, v37, buf, 0x16u);
      }

void nw_protocol_test_output_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v103 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    __int16 v96 = "nw_protocol_test_output_finished";
    __int16 v64 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v93 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v65 = (os_log_s *)__nwlog_obj();
      os_log_type_t v66 = type;
      if (!os_log_type_enabled(v65, type)) {
        goto LABEL_231;
      }
      *(_DWORD *)__int128 buf = 136446210;
      __int16 v96 = "nw_protocol_test_output_finished";
      __int16 v67 = "%{public}s called with null protocol";
    }

    else if (v93)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v65 = (os_log_s *)__nwlog_obj();
      os_log_type_t v66 = type;
      BOOL v76 = os_log_type_enabled(v65, type);
      if (backtrace_string)
      {
        if (v76)
        {
          *(_DWORD *)__int128 buf = 136446466;
          __int16 v96 = "nw_protocol_test_output_finished";
          __int16 v97 = 2082;
          __int16 v98 = (nw_protocol *)backtrace_string;
          _os_log_impl( &dword_181A5C000,  v65,  v66,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_231:
        if (!v64) {
          return;
        }
        goto LABEL_232;
      }

      if (!v76) {
        goto LABEL_231;
      }
      *(_DWORD *)__int128 buf = 136446210;
      __int16 v96 = "nw_protocol_test_output_finished";
      __int16 v67 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      BOOL v65 = (os_log_s *)__nwlog_obj();
      os_log_type_t v66 = type;
      if (!os_log_type_enabled(v65, type)) {
        goto LABEL_231;
      }
      *(_DWORD *)__int128 buf = 136446210;
      __int16 v96 = "nw_protocol_test_output_finished";
      __int16 v67 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_230;
  }

  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    __int16 v96 = "nw_protocol_test_output_finished";
    __int16 v64 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v93 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v93)
      {
        BOOL v65 = (os_log_s *)__nwlog_obj();
        os_log_type_t v66 = type;
        if (!os_log_type_enabled(v65, type)) {
          goto LABEL_231;
        }
        *(_DWORD *)__int128 buf = 136446210;
        __int16 v96 = "nw_protocol_test_output_finished";
        __int16 v67 = "%{public}s called with null test, backtrace limit exceeded";
        goto LABEL_230;
      }

      os_log_type_t v77 = (char *)__nw_create_backtrace_string();
      BOOL v65 = (os_log_s *)__nwlog_obj();
      os_log_type_t v66 = type;
      BOOL v78 = os_log_type_enabled(v65, type);
      if (!v77)
      {
        if (!v78) {
          goto LABEL_231;
        }
        *(_DWORD *)__int128 buf = 136446210;
        __int16 v96 = "nw_protocol_test_output_finished";
        __int16 v67 = "%{public}s called with null test, no backtrace";
        goto LABEL_230;
      }

      if (v78)
      {
        *(_DWORD *)__int128 buf = 136446466;
        __int16 v96 = "nw_protocol_test_output_finished";
        __int16 v97 = 2082;
        __int16 v98 = (nw_protocol *)v77;
        int v79 = "%{public}s called with null test, dumping backtrace:%{public}s";
LABEL_182:
        _os_log_impl(&dword_181A5C000, v65, v66, v79, buf, 0x16u);
      }

void nw_protocol_test_get_message_properties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v79 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    uint64_t v72 = "nw_protocol_test_get_message_properties";
    char v24 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v69 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (v69)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __int128 v25 = (os_log_s *)__nwlog_obj();
        os_log_type_t v26 = type;
        BOOL v62 = os_log_type_enabled(v25, type);
        if (backtrace_string)
        {
          if (v62)
          {
            *(_DWORD *)__int128 buf = 136446466;
            uint64_t v72 = "nw_protocol_test_get_message_properties";
            __int16 v73 = 2082;
            BOOL v74 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v25,  v26,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
        }

        else if (v62)
        {
          *(_DWORD *)__int128 buf = 136446210;
          uint64_t v72 = "nw_protocol_test_get_message_properties";
          os_log_type_t v27 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_88;
        }
      }

      else
      {
        __int128 v25 = (os_log_s *)__nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          uint64_t v72 = "nw_protocol_test_get_message_properties";
          os_log_type_t v27 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_88;
        }
      }

      goto LABEL_89;
    }

    __int128 v25 = (os_log_s *)__nwlog_obj();
    os_log_type_t v26 = type;
    if (!os_log_type_enabled(v25, type)) {
      goto LABEL_89;
    }
    *(_DWORD *)__int128 buf = 136446210;
    uint64_t v72 = "nw_protocol_test_get_message_properties";
    os_log_type_t v27 = "%{public}s called with null protocol";
LABEL_88:
    _os_log_impl(&dword_181A5C000, v25, v26, v27, buf, 0xCu);
    goto LABEL_89;
  }

  if (*(_UNKNOWN **)(a1 + 40) != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    uint64_t v72 = "nw_protocol_test_get_message_properties";
    char v24 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v69 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (v69)
      {
        uint64_t v40 = (char *)__nw_create_backtrace_string();
        __int128 v25 = (os_log_s *)__nwlog_obj();
        os_log_type_t v26 = type;
        BOOL v63 = os_log_type_enabled(v25, type);
        if (v40)
        {
          if (v63)
          {
            *(_DWORD *)__int128 buf = 136446466;
            uint64_t v72 = "nw_protocol_test_get_message_properties";
            __int16 v73 = 2082;
            BOOL v74 = v40;
            os_log_type_t v42 = "%{public}s called with null test, dumping backtrace:%{public}s";
            goto LABEL_63;
          }

uint64_t nw_protocol_test_create(const nw_protocol_identifier *a1, nw_endpoint *a2, nw_parameters *a3)
{
  uint64_t v3 = nw_protocol_new(120LL, (uint64_t)a3, (uint64_t)&g_test_protocol_identifier, (uint64_t)&g_test_protocol_callbacks);
  *(void *)uint64_t v3 = 0LL;
  *(void *)(v3 + 8) = 0LL;
  *(_BYTE *)(v3 + 117) &= 0xFCu;
  *(void *)(v3 + 16) = v3 + 8;
  *(_BYTE *)(v3 + 116) = 0;
  return v3 - 96;
}

uint64_t ___ZL39nw_protocol_test_get_message_propertiesP11nw_protocolS0_P30nw_protocol_message_properties_block_invoke( uint64_t a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  int v19 = 0;
  __int16 v18 = 0;
  unsigned __int8 v17 = 0;
  if (nw_protocol_options_is_test_protocol(a2))
  {
    *(void *)uint64_t v28 = 0LL;
    *(void *)&v28[8] = v28;
    *(void *)&v28[16] = 0x2000000000LL;
    char v29 = 0;
    *(void *)__int128 buf = MEMORY[0x1895F87A8];
    *(void *)&buf[8] = 0x40000000LL;
    *(void *)&buf[16] = ___ZL47nw_protocol_test_options_get_message_propertiesP19nw_protocol_optionsPjPbS2_S2__block_invoke;
    *(void *)&__int128 v23 = &unk_189BC8588;
    *((void *)&v23 + 1) = v28;
    char v24 = &v19;
    __int128 v25 = (char *)&v18 + 1;
    os_log_type_t v26 = &v18;
    os_log_type_t v27 = &v17;
    nw_protocol_options_access_handle(a2, buf);
    int v4 = *(unsigned __int8 *)(*(void *)&v28[8] + 24LL);
    _Block_object_dispose(v28, 8);
    if (v4)
    {
      if (gLogDatapath)
      {
        uint64_t v12 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v13 = *(void *)(a1 + 32);
          if (v13) {
            size_t v14 = (const char *)(v13 + 32);
          }
          else {
            size_t v14 = "";
          }
          *(_DWORD *)__int128 buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_protocol_test_get_message_properties_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v14;
          *(_WORD *)&buf[22] = 1024;
          LODWORD(v23) = v19;
          WORD2(v23) = 1024;
          *(_DWORD *)((char *)&v23 + 6) = HIBYTE(v18);
          WORD5(v23) = 1024;
          HIDWORD(v23) = v18;
          LOWORD(v24) = 1024;
          *(_DWORD *)((char *)&v24 + 2) = v17;
          _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s setting maximum_message_size %u, frame_as_message %{BOOL}d, allow_discontiguous_messag es %{BOOL}d, receive_single_message %{BOOL}d",  buf,  0x2Eu);
        }
      }

      uint64_t v5 = *(_DWORD **)(a1 + 40);
      unsigned int v6 = v5[1] & 0xFFFFFFFE | HIBYTE(v18);
      *uint64_t v5 = v19;
      v5[1] = v6;
      *(_DWORD *)(*(void *)(a1 + 40) + 4LL) = *(_DWORD *)(*(void *)(a1 + 40) + 4LL) & 0xFFFFFFFD | (2 * v18);
      *(_DWORD *)(*(void *)(a1 + 40) + 4LL) = *(_DWORD *)(*(void *)(a1 + 40) + 4LL) & 0xFFFFFFFB | (4 * v17);
    }

    return 1LL;
  }

  __nwlog_obj();
  *(_DWORD *)uint64_t v28 = 136446210;
  *(void *)&v28[4] = "nw_protocol_test_options_get_message_properties";
  int v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v8, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_25;
      }
      *(_DWORD *)uint64_t v28 = 136446210;
      *(void *)&v28[4] = "nw_protocol_test_options_get_message_properties";
      uint64_t v11 = "%{public}s protocol options are not test protocol";
      goto LABEL_24;
    }

    if (!v20)
    {
      int v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_25;
      }
      *(_DWORD *)uint64_t v28 = 136446210;
      *(void *)&v28[4] = "nw_protocol_test_options_get_message_properties";
      uint64_t v11 = "%{public}s protocol options are not test protocol, backtrace limit exceeded";
      goto LABEL_24;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v16 = os_log_type_enabled(v9, type);
    if (backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)uint64_t v28 = 136446466;
        *(void *)&v28[4] = "nw_protocol_test_options_get_message_properties";
        *(_WORD *)&v28[12] = 2082;
        *(void *)&v28[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s protocol options are not test protocol, dumping backtrace:%{public}s",  v28,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_25;
    }

    if (v16)
    {
      *(_DWORD *)uint64_t v28 = 136446210;
      *(void *)&v28[4] = "nw_protocol_test_options_get_message_properties";
      uint64_t v11 = "%{public}s protocol options are not test protocol, no backtrace";
LABEL_24:
      _os_log_impl(&dword_181A5C000, v9, v10, v11, v28, 0xCu);
    }
  }

BOOL nw_protocol_options_is_test_protocol(void *a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    v1 = a1;
    id v2 = v1[1];

    if (nw_protocol_copy_test_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_test_definition::onceToken, &__block_literal_global_83889);
    }
    if (nw_protocol_copy_test_definition::test_definition) {
      uint64_t v3 = os_retain((void *)nw_protocol_copy_test_definition::test_definition);
    }
    else {
      uint64_t v3 = 0LL;
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v2, (uint64_t)v3);
    if (v2) {
      os_release(v2);
    }
    if (v3) {
      os_release(v3);
    }
    return is_equal_unsafe;
  }

  __nwlog_obj();
  *(_DWORD *)__int128 buf = 136446210;
  os_log_type_t v15 = "nw_protocol_options_is_test_protocol";
  unsigned int v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v15 = "nw_protocol_options_is_test_protocol";
        int v9 = "%{public}s called with null options";
LABEL_25:
        _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      }
    }

    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          os_log_type_t v15 = "nw_protocol_options_is_test_protocol";
          __int16 v16 = 2082;
          unsigned __int8 v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_26;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v15 = "nw_protocol_options_is_test_protocol";
        int v9 = "%{public}s called with null options, no backtrace";
        goto LABEL_25;
      }
    }

    else
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v15 = "nw_protocol_options_is_test_protocol";
        int v9 = "%{public}s called with null options, backtrace limit exceeded";
        goto LABEL_25;
      }
    }
  }

uint64_t ___ZL47nw_protocol_test_options_get_message_propertiesP19nw_protocol_optionsPjPbS2_S2__block_invoke( uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_BYTE *)(a2 + 44) & 1;
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    id v2 = *(BOOL **)(a1 + 48);
    **(_DWORD **)(a1 + 40) = *(_DWORD *)(a2 + 40);
    *id v2 = (*(_BYTE *)(a2 + 44) & 2) != 0;
    uint64_t v3 = *(BOOL **)(a1 + 64);
    **(_BYTE **)(a1 + 56) = (*(_BYTE *)(a2 + 44) & 4) != 0;
    *uint64_t v3 = (*(_BYTE *)(a2 + 44) & 8) != 0;
  }

  return 1LL;
}

uint64_t ___ZL32nw_protocol_test_output_finishedP11nw_protocolS0__block_invoke(uint64_t a1, void *a2)
{
  uint64_t event_handler = nw_protocol_test_options_get_event_handler(a2, 1);
  if (event_handler) {
    (*(void (**)(uint64_t, void, void))(event_handler + 16))( event_handler,  *(void *)(a1 + 32),  *(void *)(a1 + 40));
  }
  return 1LL;
}

uint64_t nw_protocol_test_options_get_event_handler(void *a1, int a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_event_handler";
    unsigned int v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_45;
      }
      *(_DWORD *)__int128 buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_event_handler";
      int v9 = "%{public}s called with null options";
LABEL_44:
      _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      goto LABEL_45;
    }

    if (!v17)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_event_handler";
        int v9 = "%{public}s called with null options, backtrace limit exceeded";
        goto LABEL_44;
      }

      goto LABEL_45;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v11 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_event_handler";
        int v9 = "%{public}s called with null options, no backtrace";
        goto LABEL_44;
      }

      goto LABEL_45;
    }

    if (!v11) {
      goto LABEL_31;
    }
    *(_DWORD *)__int128 buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_event_handler";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    char v12 = "%{public}s called with null options, dumping backtrace:%{public}s";
LABEL_30:
    _os_log_impl(&dword_181A5C000, v7, v8, v12, buf, 0x16u);
    goto LABEL_31;
  }

  char v2 = a2;
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_event_handler";
    unsigned int v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_45;
      }
      *(_DWORD *)__int128 buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_event_handler";
      int v9 = "%{public}s called with null event";
      goto LABEL_44;
    }

    if (!v17)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_event_handler";
        int v9 = "%{public}s called with null event, backtrace limit exceeded";
        goto LABEL_44;
      }

      goto LABEL_45;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v13 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_event_handler";
        int v9 = "%{public}s called with null event, no backtrace";
        goto LABEL_44;
      }

      goto LABEL_45;
    }

    if (!v13) {
      goto LABEL_31;
    }
    *(_DWORD *)__int128 buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_event_handler";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    char v12 = "%{public}s called with null event, dumping backtrace:%{public}s";
    goto LABEL_30;
  }

  if (nw_protocol_options_is_test_protocol(a1))
  {
    *(void *)__int128 buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3002000000LL;
    char v20 = __Block_byref_object_copy__84013;
    uint64_t v21 = __Block_byref_object_dispose__84014;
    uint64_t v22 = 0LL;
    v15[0] = MEMORY[0x1895F87A8];
    v15[1] = 0x40000000LL;
    v15[2] = __nw_protocol_test_options_get_event_handler_block_invoke;
    v15[3] = &unk_189BC8370;
    char v16 = v2;
    v15[4] = buf;
    nw_protocol_options_access_handle(a1, v15);
    uint64_t v4 = *(void *)(*(void *)&buf[8] + 40LL);
    _Block_object_dispose(buf, 8);
    return v4;
  }

  __nwlog_obj();
  *(_DWORD *)__int128 buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_event_handler";
  unsigned int v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v17)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_event_handler";
        int v9 = "%{public}s protocol options are not test protocol, backtrace limit exceeded";
        goto LABEL_44;
      }

      goto LABEL_45;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v14 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_event_handler";
        int v9 = "%{public}s protocol options are not test protocol, no backtrace";
        goto LABEL_44;
      }

      goto LABEL_45;
    }

    if (v14)
    {
      *(_DWORD *)__int128 buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_event_handler";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      char v12 = "%{public}s protocol options are not test protocol, dumping backtrace:%{public}s";
      goto LABEL_30;
    }

void __Block_byref_object_copy__84013(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__84014(uint64_t a1)
{
}

uint64_t __nw_protocol_test_options_get_event_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 40) == 1)
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL) = *(void *)(a2 + 24);
    return 1LL;
  }

  if (!*(_BYTE *)(a1 + 40))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)__int128 buf = 136446210;
    char v12 = "nw_protocol_test_options_get_event_handler_block_invoke";
    char v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v9 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v3 = (os_log_s *)gLogObj;
      os_log_type_t v4 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)__int128 buf = 136446210;
      char v12 = "nw_protocol_test_options_get_event_handler_block_invoke";
      uint64_t v5 = "%{public}s Invalid event supplied";
    }

    else if (v9)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v3 = (os_log_s *)gLogObj;
      os_log_type_t v4 = type;
      BOOL v7 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)__int128 buf = 136446466;
          char v12 = "nw_protocol_test_options_get_event_handler_block_invoke";
          __int16 v13 = 2082;
          BOOL v14 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v3,  v4,  "%{public}s Invalid event supplied, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_18;
      }

      if (!v7)
      {
LABEL_18:
        if (v2) {
          free(v2);
        }
        return 1LL;
      }

      *(_DWORD *)__int128 buf = 136446210;
      char v12 = "nw_protocol_test_options_get_event_handler_block_invoke";
      uint64_t v5 = "%{public}s Invalid event supplied, no backtrace";
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v3 = (os_log_s *)gLogObj;
      os_log_type_t v4 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)__int128 buf = 136446210;
      char v12 = "nw_protocol_test_options_get_event_handler_block_invoke";
      uint64_t v5 = "%{public}s Invalid event supplied, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v3, v4, v5, buf, 0xCu);
    goto LABEL_18;
  }

  return 1LL;
}

uint64_t ___ZL39nw_protocol_test_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke( uint64_t a1, void *a2)
{
  uint64_t finalize_output_frames_handler = nw_protocol_test_options_get_finalize_output_frames_handler(a2);
  if (finalize_output_frames_handler) {
    (*(void (**)(uint64_t, void))(finalize_output_frames_handler + 16))( finalize_output_frames_handler,  *(void *)(a1 + 32));
  }
  return 1LL;
}

uint64_t nw_protocol_test_options_get_finalize_output_frames_handler(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (nw_protocol_options_is_test_protocol(a1))
  {
    *(void *)__int128 buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3002000000LL;
    BOOL v14 = __Block_byref_object_copy__84013;
    uint64_t v15 = __Block_byref_object_dispose__84014;
    uint64_t v16 = 0LL;
    v10[0] = MEMORY[0x1895F87A8];
    v10[1] = 0x40000000LL;
    v10[2] = __nw_protocol_test_options_get_finalize_output_frames_handler_block_invoke;
    v10[3] = &unk_189BC8320;
    v10[4] = buf;
    nw_protocol_options_access_handle(a1, v10);
    uint64_t v2 = *(void *)(*(void *)&buf[8] + 40LL);
    _Block_object_dispose(buf, 8);
    return v2;
  }

  __nwlog_obj();
  *(_DWORD *)__int128 buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_finalize_output_frames_handler";
  os_log_type_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_finalize_output_frames_handler";
        BOOL v7 = "%{public}s protocol options are not test protocol";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0xCu);
      }
    }

    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)__int128 buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_finalize_output_frames_handler";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s protocol options are not test protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_18;
      }

      if (v9)
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_finalize_output_frames_handler";
        BOOL v7 = "%{public}s protocol options are not test protocol, no backtrace";
        goto LABEL_17;
      }
    }

    else
    {
      uint64_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_finalize_output_frames_handler";
        BOOL v7 = "%{public}s protocol options are not test protocol, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }

uint64_t __nw_protocol_test_options_get_finalize_output_frames_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL) = *(void *)(a2 + 8);
  return 1LL;
}

void ___ZL34nw_protocol_test_get_output_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke( uint64_t a1)
{
  uint64_t v53 = *MEMORY[0x1895F89C0];
  if (gLogDatapath)
  {
    char v24 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v25 = *(void *)(a1 + 32);
      if (v25) {
        os_log_type_t v26 = (const char *)(v25 + 32);
      }
      else {
        os_log_type_t v26 = "";
      }
      *(_DWORD *)__int128 buf = 136446466;
      BOOL v46 = "nw_protocol_test_get_output_frames_block_invoke";
      __int16 v47 = 2082;
      uint64_t v48 = (void *)v26;
      _os_log_impl( &dword_181A5C000,  v24,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s Calling output_available",  buf,  0x16u);
    }
  }

  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    BOOL v46 = "__nw_protocol_get_input_handler";
    os_log_type_t v27 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v28 = (os_log_s *)__nwlog_obj();
      os_log_type_t v29 = type;
      if (!os_log_type_enabled(v28, type)) {
        goto LABEL_79;
      }
      *(_DWORD *)__int128 buf = 136446210;
      BOOL v46 = "__nw_protocol_get_input_handler";
      uint64_t v30 = "%{public}s called with null protocol";
    }

    else if (v43)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v28 = (os_log_s *)__nwlog_obj();
      os_log_type_t v29 = type;
      BOOL v35 = os_log_type_enabled(v28, type);
      if (backtrace_string)
      {
        if (v35)
        {
          *(_DWORD *)__int128 buf = 136446466;
          BOOL v46 = "__nw_protocol_get_input_handler";
          __int16 v47 = 2082;
          uint64_t v48 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v28,  v29,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_79;
      }

      if (!v35)
      {
LABEL_79:
        if (v27) {
          free(v27);
        }
        goto LABEL_81;
      }

      *(_DWORD *)__int128 buf = 136446210;
      BOOL v46 = "__nw_protocol_get_input_handler";
      uint64_t v30 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      uint64_t v28 = (os_log_s *)__nwlog_obj();
      os_log_type_t v29 = type;
      if (!os_log_type_enabled(v28, type)) {
        goto LABEL_79;
      }
      *(_DWORD *)__int128 buf = 136446210;
      BOOL v46 = "__nw_protocol_get_input_handler";
      uint64_t v30 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v28, v29, v30, buf, 0xCu);
    goto LABEL_79;
  }

  uint64_t v3 = *(void *)(v2 + 48);
  if (v3)
  {
    os_log_type_t v4 = *(void **)(v3 + 40);
    if (v4 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v5 = *(void *)(v3 + 88);
      if (v5) {
        *(void *)(v3 + 88) = v5 + 1;
      }
    }

    os_log_type_t v6 = *(void **)(v2 + 40);
    if (v6 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v7 = *(void *)(v2 + 88);
      if (v7) {
        *(void *)(v2 + 88) = v7 + 1;
      }
    }

    uint64_t v8 = *(void *)(v3 + 24);
    if (v8)
    {
      BOOL v9 = *(void (**)(uint64_t, uint64_t))(v8 + 72);
      if (v9)
      {
        v9(v3, v2);
        goto LABEL_13;
      }
    }

    __nwlog_obj();
    uint64_t v18 = *(const char **)(v3 + 16);
    *(_DWORD *)__int128 buf = 136446722;
    BOOL v46 = "__nw_protocol_output_available";
    if (!v18) {
      uint64_t v18 = "invalid";
    }
    __int16 v47 = 2082;
    uint64_t v48 = (void *)v18;
    __int16 v49 = 2048;
    uint64_t v50 = v3;
    int v19 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (__nwlog_fault(v19, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v20 = (os_log_s *)__nwlog_obj();
        os_log_type_t v21 = type;
        if (!os_log_type_enabled(v20, type)) {
          goto LABEL_72;
        }
        uint64_t v22 = *(const char **)(v3 + 16);
        if (!v22) {
          uint64_t v22 = "invalid";
        }
        *(_DWORD *)__int128 buf = 136446722;
        BOOL v46 = "__nw_protocol_output_available";
        __int16 v47 = 2082;
        uint64_t v48 = (void *)v22;
        __int16 v49 = 2048;
        uint64_t v50 = v3;
        uint64_t v23 = "%{public}s protocol %{public}s (%p) has invalid output_available callback";
        goto LABEL_71;
      }

      if (!v43)
      {
        char v20 = (os_log_s *)__nwlog_obj();
        os_log_type_t v21 = type;
        if (!os_log_type_enabled(v20, type)) {
          goto LABEL_72;
        }
        BOOL v36 = *(const char **)(v3 + 16);
        if (!v36) {
          BOOL v36 = "invalid";
        }
        *(_DWORD *)__int128 buf = 136446722;
        BOOL v46 = "__nw_protocol_output_available";
        __int16 v47 = 2082;
        uint64_t v48 = (void *)v36;
        __int16 v49 = 2048;
        uint64_t v50 = v3;
        uint64_t v23 = "%{public}s protocol %{public}s (%p) has invalid output_available callback, backtrace limit exceeded";
        goto LABEL_71;
      }

      BOOL v31 = (char *)__nw_create_backtrace_string();
      char v20 = (os_log_s *)__nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v32 = os_log_type_enabled(v20, type);
      if (v31)
      {
        if (v32)
        {
          BOOL v33 = *(const char **)(v3 + 16);
          if (!v33) {
            BOOL v33 = "invalid";
          }
          *(_DWORD *)__int128 buf = 136446978;
          BOOL v46 = "__nw_protocol_output_available";
          __int16 v47 = 2082;
          uint64_t v48 = (void *)v33;
          __int16 v49 = 2048;
          uint64_t v50 = v3;
          __int16 v51 = 2082;
          uint64_t v52 = v31;
          _os_log_impl( &dword_181A5C000,  v20,  v21,  "%{public}s protocol %{public}s (%p) has invalid output_available callback, dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(v31);
        goto LABEL_72;
      }

      if (v32)
      {
        os_log_type_t v37 = *(const char **)(v3 + 16);
        if (!v37) {
          os_log_type_t v37 = "invalid";
        }
        *(_DWORD *)__int128 buf = 136446722;
        BOOL v46 = "__nw_protocol_output_available";
        __int16 v47 = 2082;
        uint64_t v48 = (void *)v37;
        __int16 v49 = 2048;
        uint64_t v50 = v3;
        uint64_t v23 = "%{public}s protocol %{public}s (%p) has invalid output_available callback, no backtrace";
LABEL_71:
        _os_log_impl(&dword_181A5C000, v20, v21, v23, buf, 0x20u);
      }
    }

__n128 __Block_byref_object_copy__24(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t ___ZL34nw_protocol_test_get_output_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_38( void *a1, uint64_t a2)
{
  uint64_t v2 = (_DWORD *)a2;
  uint64_t v35 = *MEMORY[0x1895F89C0];
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void **)(a2 + 40);
  if (v4)
  {
    *(void *)(v4 + 40) = v5;
    uint64_t v5 = *(void **)(a2 + 40);
  }

  else
  {
    *(void *)(*(void *)(a1[4] + 8LL) + 48LL) = v5;
  }

  *uint64_t v5 = v4;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  unsigned int v6 = nw_frame_unclaimed_length((_DWORD *)a2);
  char v24 = v2;
  if (gLogDatapath)
  {
    uint64_t v17 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v18 = a1[6];
      BOOL v19 = v18 == 0;
      *(_DWORD *)__int128 buf = 136446978;
      char v20 = (const char *)(v18 + 32);
      os_log_type_t v26 = "nw_protocol_test_get_output_frames_block_invoke";
      if (v19) {
        char v20 = "";
      }
      __int16 v27 = 2082;
      uint64_t v28 = v20;
      __int16 v29 = 1024;
      unsigned int v30 = v6;
      __int16 v31 = 1024;
      int v32 = 11;
      _os_log_impl( &dword_181A5C000,  v17,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s Splitting frame of size %u into chunks of size %u",  buf,  0x22u);
    }
  }

  if (v6 >= 0xC)
  {
    do
    {
      uint64_t v7 = nw_frame_split((uint64_t *)&v24, 0xBu);
      unsigned int v8 = nw_frame_unclaimed_length(v24);
      uint64_t v9 = a1[7];
      *(void *)(v7 + 32) = 0LL;
      uint64_t v10 = *(uint64_t **)(v9 + 8);
      *(void *)(v7 + 40) = v10;
      *uint64_t v10 = v7;
      *(void *)(v9 + 8) = v7 + 32;
      ++*(_DWORD *)(*(void *)(a1[5] + 8LL) + 24LL);
      if (gLogDatapath)
      {
        os_log_t log = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v11 = a1[6];
          if (v11) {
            char v12 = (const char *)(v11 + 32);
          }
          else {
            char v12 = "";
          }
          os_log_type_t v21 = v12;
          unsigned int v22 = *(_DWORD *)(*(void *)(a1[5] + 8LL) + 24LL);
          int v13 = nw_frame_unclaimed_length((_DWORD *)v7);
          *(_DWORD *)__int128 buf = 136447234;
          os_log_type_t v26 = "nw_protocol_test_get_output_frames_block_invoke";
          __int16 v27 = 2082;
          uint64_t v28 = v21;
          __int16 v29 = 1024;
          unsigned int v30 = v22;
          __int16 v31 = 1024;
          int v32 = v13;
          __int16 v33 = 1024;
          unsigned int v34 = v8;
          _os_log_impl( &dword_181A5C000,  log,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s Split frame into small frame %u of size %u, remaining frame of size %u",  buf,  0x28u);
        }
      }
    }

    while (v8 > 0xB);
    uint64_t v2 = v24;
  }

  uint64_t v14 = a1[7];
  *((void *)v2 + 4) = 0LL;
  uint64_t v15 = *(void **)(v14 + 8);
  *((void *)v2 + 5) = v15;
  *uint64_t v15 = v2;
  *(void *)(v14 + 8) = v2 + 8;
  ++*(_DWORD *)(*(void *)(a1[5] + 8LL) + 24LL);
  return 1LL;
}

void __nw_frame_malloc_finalizer(nw_frame *a1, BOOL a2, void *a3)
{
  buffer = (void *)nw_frame_get_buffer((uint64_t)a1, 0LL);
  if (buffer) {
    free(buffer);
  }
  nw_frame_reset((uint64_t)a1, 0LL, 0, 0LL, 0LL);
  if (a1) {
    os_release(a1);
  }
}

uint64_t ___ZL33nw_protocol_test_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke( void *a1, uint64_t a2)
{
  uint64_t v2 = (_DWORD *)a2;
  uint64_t v35 = *MEMORY[0x1895F89C0];
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void **)(a2 + 40);
  if (v4)
  {
    *(void *)(v4 + 40) = v5;
    uint64_t v5 = *(void **)(a2 + 40);
  }

  else
  {
    *(void *)(*(void *)(a1[4] + 8LL) + 48LL) = v5;
  }

  *uint64_t v5 = v4;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  unsigned int v6 = nw_frame_unclaimed_length((_DWORD *)a2);
  char v24 = v2;
  if (gLogDatapath)
  {
    uint64_t v17 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v18 = a1[6];
      BOOL v19 = v18 == 0;
      *(_DWORD *)__int128 buf = 136446978;
      char v20 = (const char *)(v18 + 32);
      os_log_type_t v26 = "nw_protocol_test_get_input_frames_block_invoke";
      if (v19) {
        char v20 = "";
      }
      __int16 v27 = 2082;
      uint64_t v28 = v20;
      __int16 v29 = 1024;
      unsigned int v30 = v6;
      __int16 v31 = 1024;
      int v32 = 11;
      _os_log_impl( &dword_181A5C000,  v17,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s Splitting frame of size %u into chunks of size %u",  buf,  0x22u);
    }
  }

  if (v6 >= 0xC)
  {
    do
    {
      uint64_t v7 = nw_frame_split((uint64_t *)&v24, 0xBu);
      unsigned int v8 = nw_frame_unclaimed_length(v24);
      uint64_t v9 = a1[7];
      *(void *)(v7 + 32) = 0LL;
      uint64_t v10 = *(uint64_t **)(v9 + 8);
      *(void *)(v7 + 40) = v10;
      *uint64_t v10 = v7;
      *(void *)(v9 + 8) = v7 + 32;
      ++*(_DWORD *)(*(void *)(a1[5] + 8LL) + 24LL);
      if (gLogDatapath)
      {
        os_log_t log = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v11 = a1[6];
          if (v11) {
            char v12 = (const char *)(v11 + 32);
          }
          else {
            char v12 = "";
          }
          os_log_type_t v21 = v12;
          unsigned int v22 = *(_DWORD *)(*(void *)(a1[5] + 8LL) + 24LL);
          int v13 = nw_frame_unclaimed_length((_DWORD *)v7);
          *(_DWORD *)__int128 buf = 136447234;
          os_log_type_t v26 = "nw_protocol_test_get_input_frames_block_invoke";
          __int16 v27 = 2082;
          uint64_t v28 = v21;
          __int16 v29 = 1024;
          unsigned int v30 = v22;
          __int16 v31 = 1024;
          int v32 = v13;
          __int16 v33 = 1024;
          unsigned int v34 = v8;
          _os_log_impl( &dword_181A5C000,  log,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s Split frame into small frame %u of size %u, remaining frame of size %u",  buf,  0x28u);
        }
      }
    }

    while (v8 > 0xB);
    uint64_t v2 = v24;
  }

  uint64_t v14 = a1[7];
  *((void *)v2 + 4) = 0LL;
  uint64_t v15 = *(void **)(v14 + 8);
  *((void *)v2 + 5) = v15;
  *uint64_t v15 = v2;
  *(void *)(v14 + 8) = v2 + 8;
  ++*(_DWORD *)(*(void *)(a1[5] + 8LL) + 24LL);
  return 1LL;
}

BOOL ___ZL33nw_protocol_test_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_28( void *a1, uint64_t a2)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void **)(a2 + 40);
  if (v4)
  {
    *(void *)(v4 + 40) = v5;
    uint64_t v5 = *(void **)(a2 + 40);
  }

  else
  {
    *(void *)(*(void *)(a1[4] + 8LL) + 48LL) = v5;
  }

  *uint64_t v5 = v4;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  if (!*(void *)(a2 + 112)
    || (*(_WORD *)(a2 + 204) & 0x100) != 0
    && g_channel_check_validity
    && !g_channel_check_validity(a2, *(void *)(a2 + 88)))
  {
    uint64_t v9 = 0LL;
    unsigned int v8 = 0;
LABEL_13:
    size_t v10 = 1LL;
    int v11 = 1;
    goto LABEL_14;
  }

  int v6 = *(_DWORD *)(a2 + 52);
  if (!v6)
  {
    unsigned int v8 = 0;
    uint64_t v9 = (const void *)(*(void *)(a2 + 112) + *(unsigned int *)(a2 + 56));
    goto LABEL_13;
  }

  uint64_t v7 = *(unsigned int *)(a2 + 56);
  unsigned int v8 = v6 - (v7 + *(_DWORD *)(a2 + 60));
  uint64_t v9 = (const void *)(*(void *)(a2 + 112) + v7);
  size_t v10 = v8 + 1;
  if (v8 == -1)
  {
    char v24 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__int128 buf = 136446210;
    __int16 v27 = "strict_malloc";
    uint64_t v25 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v25);
    if (result) {
      goto LABEL_30;
    }
    free(v25);
    size_t v10 = 0LL;
    int v11 = 0;
    unsigned int v8 = -1;
  }

  else
  {
    int v11 = v8 + 1;
  }

uint64_t ___ZL33nw_protocol_test_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_30( void *a1, _DWORD *a2)
{
  uint64_t v58 = *MEMORY[0x1895F89C0];
  int v3 = nw_frame_unclaimed_length(a2);
  if (gLogDatapath)
  {
    os_log_type_t v21 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v22 = a1[4];
      *(_DWORD *)__int128 buf = 136446722;
      __int16 v51 = "nw_protocol_test_get_input_frames_block_invoke";
      if (v22) {
        uint64_t v23 = (const char *)(v22 + 32);
      }
      else {
        uint64_t v23 = "";
      }
      __int16 v52 = 2082;
      uint64_t v53 = (void *)v23;
      __int16 v54 = 1024;
      LODWORD(v55) = v3;
      _os_log_impl( &dword_181A5C000,  v21,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s Disconnect on input: frame_length %u",  buf,  0x1Cu);
    }
  }

  if (v3 && (*(_BYTE *)(a1[4] + 117LL) & 1) == 0)
  {
    if (gLogDatapath)
    {
      __int16 v30 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v31 = a1[4];
        if (v31) {
          __int16 v32 = (const char *)(v31 + 32);
        }
        else {
          __int16 v32 = "";
        }
        *(_DWORD *)__int128 buf = 136446466;
        __int16 v51 = "nw_protocol_test_get_input_frames_block_invoke";
        __int16 v52 = 2082;
        uint64_t v53 = (void *)v32;
        _os_log_impl( &dword_181A5C000,  v30,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s Disconnecting on input",  buf,  0x16u);
      }
    }

    uint64_t v4 = a1[5];
    if (v4)
    {
      uint64_t v5 = a1[6];
      int v6 = *(void **)(v4 + 40);
      if (v6 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v7 = *(void *)(v4 + 88);
        if (v7) {
          *(void *)(v4 + 88) = v7 + 1;
        }
      }

      if (v5)
      {
        unsigned int v8 = *(void **)(v5 + 40);
        if (v8 == &nw_protocol_ref_counted_handle)
        {
          uint64_t v9 = *(void *)(v5 + 88);
          if (v9) {
            *(void *)(v5 + 88) = v9 + 1;
          }
        }

        uint64_t v10 = *(void *)(v4 + 24);
        if (v10)
        {
          int v11 = *(void (**)(uint64_t, uint64_t))(v10 + 48);
          if (v11)
          {
            v11(v4, v5);
LABEL_16:
            if (v8 != &nw_protocol_ref_counted_handle) {
              goto LABEL_18;
            }
            if (*(_UNKNOWN **)(v5 + 40) != &nw_protocol_ref_counted_handle) {
              goto LABEL_18;
            }
            uint64_t v17 = *(void *)(v5 + 88);
            if (!v17) {
              goto LABEL_18;
            }
            uint64_t v18 = v17 - 1;
            *(void *)(v5 + 88) = v18;
            if (v18) {
              goto LABEL_18;
            }
            BOOL v19 = *(void (***)(void))(v5 + 64);
            if (v19)
            {
              *(void *)(v5 + 64) = 0LL;
              v19[2](v19);
              _Block_release(v19);
            }

            if ((*(_BYTE *)(v5 + 72) & 1) != 0)
            {
              char v20 = *(const void **)(v5 + 64);
              if (v20) {
                _Block_release(v20);
              }
            }

            goto LABEL_37;
          }
        }

        __nwlog_obj();
        char v24 = *(const char **)(v4 + 16);
        *(_DWORD *)__int128 buf = 136446722;
        __int16 v51 = "__nw_protocol_disconnected";
        if (!v24) {
          char v24 = "invalid";
        }
        __int16 v52 = 2082;
        uint64_t v53 = (void *)v24;
        __int16 v54 = 2048;
        uint64_t v55 = v4;
        uint64_t v25 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v48 = 0;
        if (__nwlog_fault(v25, &type, &v48))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            os_log_type_t v26 = (os_log_s *)__nwlog_obj();
            os_log_type_t v27 = type;
            if (!os_log_type_enabled(v26, type)) {
              goto LABEL_92;
            }
            __int16 v28 = *(const char **)(v4 + 16);
            if (!v28) {
              __int16 v28 = "invalid";
            }
            *(_DWORD *)__int128 buf = 136446722;
            __int16 v51 = "__nw_protocol_disconnected";
            __int16 v52 = 2082;
            uint64_t v53 = (void *)v28;
            __int16 v54 = 2048;
            uint64_t v55 = v4;
            size_t v29 = "%{public}s protocol %{public}s (%p) has invalid disconnected callback";
            goto LABEL_91;
          }

          if (!v48)
          {
            os_log_type_t v26 = (os_log_s *)__nwlog_obj();
            os_log_type_t v27 = type;
            if (!os_log_type_enabled(v26, type)) {
              goto LABEL_92;
            }
            BOOL v46 = *(const char **)(v4 + 16);
            if (!v46) {
              BOOL v46 = "invalid";
            }
            *(_DWORD *)__int128 buf = 136446722;
            __int16 v51 = "__nw_protocol_disconnected";
            __int16 v52 = 2082;
            uint64_t v53 = (void *)v46;
            __int16 v54 = 2048;
            uint64_t v55 = v4;
            size_t v29 = "%{public}s protocol %{public}s (%p) has invalid disconnected callback, backtrace limit exceeded";
            goto LABEL_91;
          }

          backtrace_string = (char *)__nw_create_backtrace_string();
          os_log_type_t v26 = (os_log_s *)__nwlog_obj();
          os_log_type_t v27 = type;
          BOOL v40 = os_log_type_enabled(v26, type);
          if (backtrace_string)
          {
            if (v40)
            {
              BOOL v41 = *(const char **)(v4 + 16);
              if (!v41) {
                BOOL v41 = "invalid";
              }
              *(_DWORD *)__int128 buf = 136446978;
              __int16 v51 = "__nw_protocol_disconnected";
              __int16 v52 = 2082;
              uint64_t v53 = (void *)v41;
              __int16 v54 = 2048;
              uint64_t v55 = v4;
              __int16 v56 = 2082;
              BOOL v57 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v26,  v27,  "%{public}s protocol %{public}s (%p) has invalid disconnected callback, dumping backtrace:%{public}s",  buf,  0x2Au);
            }

            free(backtrace_string);
            goto LABEL_92;
          }

          if (v40)
          {
            __int16 v47 = *(const char **)(v4 + 16);
            if (!v47) {
              __int16 v47 = "invalid";
            }
            *(_DWORD *)__int128 buf = 136446722;
            __int16 v51 = "__nw_protocol_disconnected";
            __int16 v52 = 2082;
            uint64_t v53 = (void *)v47;
            __int16 v54 = 2048;
            uint64_t v55 = v4;
            size_t v29 = "%{public}s protocol %{public}s (%p) has invalid disconnected callback, no backtrace";
LABEL_91:
            _os_log_impl(&dword_181A5C000, v26, v27, v29, buf, 0x20u);
          }
        }

uint64_t *nw::retained_ptr<nw_protocol *>::~retained_ptr(uint64_t *a1)
{
  if ((a1[1] & 1) != 0)
  {
    uint64_t v2 = *a1;
    if (*a1)
    {
      if (*(_UNKNOWN **)(v2 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v4 = *(void *)(v2 + 88);
        if (v4)
        {
          uint64_t v5 = v4 - 1;
          *(void *)(v2 + 88) = v5;
          if (!v5)
          {
            int v6 = *(void (***)(void))(v2 + 64);
            if (v6)
            {
              *(void *)(v2 + 64) = 0LL;
              v6[2](v6);
              _Block_release(v6);
            }

            if ((*(_BYTE *)(v2 + 72) & 1) != 0)
            {
              uint64_t v7 = *(const void **)(v2 + 64);
              if (v7) {
                _Block_release(v7);
              }
            }

            free((void *)v2);
          }
        }
      }
    }
  }

  *a1 = 0LL;
  return a1;
}

uint64_t ___ZL33nw_protocol_test_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_32( void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  uint64_t v4 = *(void **)(a2 + 40);
  uint64_t v2 = (void *)(a2 + 32);
  if (v3)
  {
    *(void *)(v3 + 40) = v4;
    uint64_t v4 = *(void **)(a2 + 40);
  }

  else
  {
    *(void *)(*(void *)(a1[4] + 8LL) + 48LL) = v4;
  }

  *uint64_t v4 = v3;
  *uint64_t v2 = 0LL;
  *(void *)(a2 + 40) = 0LL;
  uint64_t v5 = a1[6];
  int v6 = *(void **)(v5 + 8);
  *(void *)(a2 + 40) = v6;
  *int v6 = a2;
  *(void *)(v5 + 8) = v2;
  ++*(_DWORD *)(*(void *)(a1[5] + 8LL) + 24LL);
  return 1LL;
}

uint64_t ___ZL33nw_protocol_test_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_34( void *a1, _DWORD *a2)
{
  uint64_t v53 = *MEMORY[0x1895F89C0];
  BOOL v42 = a2;
  uint64_t v3 = nw_frame_split((uint64_t *)&v42, 0);
  if (gLogDatapath)
  {
    uint64_t v35 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v36 = a1[6];
      if (v36) {
        os_log_type_t v37 = (const char *)(v36 + 32);
      }
      else {
        os_log_type_t v37 = "";
      }
      os_log_type_t v38 = v42;
      int v39 = nw_frame_unclaimed_length(v42);
      *(_DWORD *)__int128 buf = 136447234;
      BOOL v44 = "nw_protocol_test_get_input_frames_block_invoke";
      __int16 v45 = 2082;
      BOOL v46 = v37;
      __int16 v47 = 2048;
      uint64_t v48 = v3;
      __int16 v49 = 2048;
      uint64_t v50 = v38;
      __int16 v51 = 1024;
      LODWORD(v52) = v39;
      _os_log_impl( &dword_181A5C000,  v35,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s inserting empty frame %p before existing frame %p (%u bytes)",  buf,  0x30u);
    }
  }

  uint64_t v4 = *(void *)(*(void *)(a1[4] + 8LL) + 24LL);
  uint64_t v5 = (uint64_t *)a1[7];
  uint64_t v6 = v3 + 32;
  if (v4)
  {
    uint64_t v7 = v5 + 1;
    uint64_t v9 = *(void *)(v4 + 32);
    unsigned int v8 = (uint64_t *)(v4 + 32);
    *(void *)(v3 + 32) = v9;
    uint64_t v10 = (uint64_t *)(v9 + 40);
    if (v9) {
      uint64_t v7 = v10;
    }
    *uint64_t v7 = v6;
    *unsigned int v8 = v3;
    *(void *)(v3 + 40) = v8;
    uint64_t v11 = *(void *)(a1[5] + 8LL);
    uint64_t v12 = *(unsigned int *)(v11 + 24) + 1LL;
    uint64_t v13 = v12 << 31 >> 31;
    *(_DWORD *)(v11 + 24) = v12;
    if (v13 != v12 || v13 < 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v14 = (_DWORD *)*(unsigned int *)(*(void *)(a1[5] + 8LL) + 24LL);
      *(_DWORD *)__int128 buf = 136446978;
      BOOL v44 = "nw_protocol_test_get_input_frames_block_invoke";
      __int16 v45 = 2082;
      BOOL v46 = "count";
      __int16 v47 = 2048;
      uint64_t v48 = 1LL;
      __int16 v49 = 2048;
      uint64_t v50 = v14;
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v40 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v16 = (os_log_s *)gLogObj;
        os_log_type_t v17 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_40;
        }
LABEL_10:
        uint64_t v18 = (_DWORD *)*(unsigned int *)(*(void *)(a1[5] + 8LL) + 24LL);
        *(_DWORD *)__int128 buf = 136446978;
        BOOL v44 = "nw_protocol_test_get_input_frames_block_invoke";
        __int16 v45 = 2082;
        BOOL v46 = "count";
        __int16 v47 = 2048;
        uint64_t v48 = 1LL;
        __int16 v49 = 2048;
        uint64_t v50 = v18;
        BOOL v19 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_39:
        _os_log_impl(&dword_181A5C000, v16, v17, v19, buf, 0x2Au);
        goto LABEL_40;
      }

      if (v40)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v16 = (os_log_s *)gLogObj;
        os_log_type_t v17 = type;
        BOOL v27 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (backtrace_string)
        {
          if (v27)
          {
            __int16 v28 = (_DWORD *)*(unsigned int *)(*(void *)(a1[5] + 8LL) + 24LL);
            *(_DWORD *)__int128 buf = 136447234;
            BOOL v44 = "nw_protocol_test_get_input_frames_block_invoke";
            __int16 v45 = 2082;
            BOOL v46 = "count";
            __int16 v47 = 2048;
            uint64_t v48 = 1LL;
            __int16 v49 = 2048;
            uint64_t v50 = v28;
            __int16 v51 = 2082;
            __int16 v52 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v16,  v17,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
          }

          free(backtrace_string);
          goto LABEL_40;
        }

        if (!v27) {
          goto LABEL_40;
        }
        goto LABEL_38;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v16 = (os_log_s *)gLogObj;
      os_log_type_t v17 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_40;
      }
      goto LABEL_32;
    }
  }

  else
  {
    uint64_t v20 = *v5;
    *(void *)(v3 + 32) = *v5;
    if (v20) {
      os_log_type_t v21 = (uint64_t *)(v20 + 40);
    }
    else {
      os_log_type_t v21 = v5 + 1;
    }
    *os_log_type_t v21 = v6;
    *uint64_t v5 = v3;
    *(void *)(v3 + 40) = v5;
    uint64_t v22 = *(void *)(a1[5] + 8LL);
    uint64_t v23 = *(unsigned int *)(v22 + 24) + 1LL;
    uint64_t v24 = v23 << 31 >> 31;
    *(_DWORD *)(v22 + 24) = v23;
    if (v24 != v23 || v24 < 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v25 = (_DWORD *)*(unsigned int *)(*(void *)(a1[5] + 8LL) + 24LL);
      *(_DWORD *)__int128 buf = 136446978;
      BOOL v44 = "nw_protocol_test_get_input_frames_block_invoke";
      __int16 v45 = 2082;
      BOOL v46 = "count";
      __int16 v47 = 2048;
      uint64_t v48 = 1LL;
      __int16 v49 = 2048;
      uint64_t v50 = v25;
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v40 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v16 = (os_log_s *)gLogObj;
        os_log_type_t v17 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_40;
        }
        goto LABEL_10;
      }

      if (v40)
      {
        size_t v29 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v16 = (os_log_s *)gLogObj;
        os_log_type_t v17 = type;
        BOOL v30 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v29)
        {
          if (v30)
          {
            uint64_t v31 = (_DWORD *)*(unsigned int *)(*(void *)(a1[5] + 8LL) + 24LL);
            *(_DWORD *)__int128 buf = 136447234;
            BOOL v44 = "nw_protocol_test_get_input_frames_block_invoke";
            __int16 v45 = 2082;
            BOOL v46 = "count";
            __int16 v47 = 2048;
            uint64_t v48 = 1LL;
            __int16 v49 = 2048;
            uint64_t v50 = v31;
            __int16 v51 = 2082;
            __int16 v52 = v29;
            _os_log_impl( &dword_181A5C000,  v16,  v17,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
          }

          free(v29);
          if (!v15) {
            goto LABEL_42;
          }
          goto LABEL_41;
        }

        if (!v30)
        {
LABEL_40:
          if (!v15)
          {
LABEL_42:
            *(_DWORD *)(*(void *)(a1[5] + 8LL) + 24LL) = -1;
            goto LABEL_43;
          }

uint64_t ___ZL38nw_protocol_test_options_get_test_modeP19nw_protocol_options_block_invoke( uint64_t a1, void *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *a2;
  return 1LL;
}

NWConcrete_nw_protocol_options *nw_protocol_test_create_options()
{
  if (nw_protocol_copy_test_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_test_definition::onceToken, &__block_literal_global_83889);
  }
  if (!nw_protocol_copy_test_definition::test_definition) {
    return nw_protocol_create_options(0LL);
  }
  int v0 = os_retain((void *)nw_protocol_copy_test_definition::test_definition);
  options = nw_protocol_create_options(v0);
  if (v0) {
    os_release(v0);
  }
  return options;
}

void nw_protocol_test_options_set_test_mode(void *a1, int a2, char a3)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if (nw_protocol_options_is_test_protocol(a1))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 0x40000000LL;
    v12[2] = __nw_protocol_test_options_set_test_mode_block_invoke;
    v12[3] = &__block_descriptor_tmp_4_84309;
    char v14 = a3;
    int v13 = a2;
    nw_protocol_options_access_handle(a1, v12);
    return;
  }

  __nwlog_obj();
  *(_DWORD *)__int128 buf = 136446210;
  uint64_t v18 = "nw_protocol_test_options_set_test_mode";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v16 = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &v16, &v15))
  {
    if (v16 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = v16;
      if (!os_log_type_enabled(v7, v16)) {
        goto LABEL_18;
      }
      *(_DWORD *)__int128 buf = 136446210;
      uint64_t v18 = "nw_protocol_test_options_set_test_mode";
      uint64_t v9 = "%{public}s protocol options are not test protocol";
      goto LABEL_17;
    }

    if (!v15)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = v16;
      if (!os_log_type_enabled(v7, v16)) {
        goto LABEL_18;
      }
      *(_DWORD *)__int128 buf = 136446210;
      uint64_t v18 = "nw_protocol_test_options_set_test_mode";
      uint64_t v9 = "%{public}s protocol options are not test protocol, backtrace limit exceeded";
      goto LABEL_17;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = v16;
    BOOL v11 = os_log_type_enabled(v7, v16);
    if (backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446466;
        uint64_t v18 = "nw_protocol_test_options_set_test_mode";
        __int16 v19 = 2082;
        uint64_t v20 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s protocol options are not test protocol, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_18;
    }

    if (v11)
    {
      *(_DWORD *)__int128 buf = 136446210;
      uint64_t v18 = "nw_protocol_test_options_set_test_mode";
      uint64_t v9 = "%{public}s protocol options are not test protocol, no backtrace";
LABEL_17:
      _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
    }
  }

uint64_t __nw_protocol_test_options_set_test_mode_block_invoke(uint64_t a1, void *a2)
{
  if (*(_BYTE *)(a1 + 36)) {
    uint64_t v2 = *a2 | (1 << *(_DWORD *)(a1 + 32));
  }
  else {
    uint64_t v2 = 0LL;
  }
  *a2 = v2;
  return 1LL;
}

BOOL nw_protocol_test_options_get_test_mode_enabled(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    if (nw_protocol_options_is_test_protocol(a1))
    {
      *(void *)__int128 buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2000000000LL;
      char v19 = 0;
      v14[0] = MEMORY[0x1895F87A8];
      v14[1] = 0x40000000LL;
      v14[2] = __nw_protocol_test_options_get_test_mode_enabled_block_invoke;
      v14[3] = &unk_189BC82D0;
      v14[4] = buf;
      int v15 = a2;
      nw_protocol_options_access_handle(a1, v14);
      BOOL v4 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
      _Block_object_dispose(buf, 8);
      return v4;
    }

    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_test_mode_enabled";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_test_mode_enabled";
        uint64_t v9 = "%{public}s protocol options are not test protocol";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (!v16)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_test_mode_enabled";
        uint64_t v9 = "%{public}s protocol options are not test protocol, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v13 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_test_mode_enabled";
        uint64_t v9 = "%{public}s protocol options are not test protocol, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v13)
    {
      *(_DWORD *)__int128 buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_test_mode_enabled";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      uint64_t v12 = "%{public}s protocol options are not test protocol, dumping backtrace:%{public}s";
      goto LABEL_21;
    }

    goto LABEL_22;
  }

  __nwlog_obj();
  *(_DWORD *)__int128 buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_test_mode_enabled";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v16)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_test_mode_enabled";
        uint64_t v9 = "%{public}s called with null mode, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v11 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_test_mode_enabled";
        uint64_t v9 = "%{public}s called with null mode, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v11)
    {
      *(_DWORD *)__int128 buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_test_mode_enabled";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      uint64_t v12 = "%{public}s called with null mode, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v7, v8, v12, buf, 0x16u);
    }

uint64_t __nw_protocol_test_options_get_test_mode_enabled_block_invoke(uint64_t a1, void *a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (*a2 & (1 << *(_DWORD *)(a1 + 40))) != 0LL;
  return 1LL;
}

void nw_protocol_test_options_set_finalize_output_frames_handler(void *a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (nw_protocol_options_is_test_protocol(a1))
  {
    v10[0] = MEMORY[0x1895F87A8];
    v10[1] = 0x40000000LL;
    v10[2] = __nw_protocol_test_options_set_finalize_output_frames_handler_block_invoke;
    v10[3] = &unk_189BC82F8;
    v10[4] = a2;
    nw_protocol_options_access_handle(a1, v10);
    return;
  }

  __nwlog_obj();
  *(_DWORD *)__int128 buf = 136446210;
  char v14 = "nw_protocol_test_options_set_finalize_output_frames_handler";
  BOOL v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v12 = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &v12, &v11))
  {
    if (v12 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = v12;
      if (!os_log_type_enabled(v5, v12)) {
        goto LABEL_18;
      }
      *(_DWORD *)__int128 buf = 136446210;
      char v14 = "nw_protocol_test_options_set_finalize_output_frames_handler";
      uint64_t v7 = "%{public}s protocol options are not test protocol";
      goto LABEL_17;
    }

    if (!v11)
    {
      uint64_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = v12;
      if (!os_log_type_enabled(v5, v12)) {
        goto LABEL_18;
      }
      *(_DWORD *)__int128 buf = 136446210;
      char v14 = "nw_protocol_test_options_set_finalize_output_frames_handler";
      uint64_t v7 = "%{public}s protocol options are not test protocol, backtrace limit exceeded";
      goto LABEL_17;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v5 = (os_log_s *)__nwlog_obj();
    os_log_type_t v6 = v12;
    BOOL v9 = os_log_type_enabled(v5, v12);
    if (backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)__int128 buf = 136446466;
        char v14 = "nw_protocol_test_options_set_finalize_output_frames_handler";
        __int16 v15 = 2082;
        char v16 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s protocol options are not test protocol, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_18;
    }

    if (v9)
    {
      *(_DWORD *)__int128 buf = 136446210;
      char v14 = "nw_protocol_test_options_set_finalize_output_frames_handler";
      uint64_t v7 = "%{public}s protocol options are not test protocol, no backtrace";
LABEL_17:
      _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0xCu);
    }
  }

uint64_t __nw_protocol_test_options_set_finalize_output_frames_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const void **)(a1 + 32);
  if (v3)
  {
    BOOL v4 = _Block_copy(v3);
    char v5 = *(_BYTE *)(a2 + 16);
    if ((v5 & 1) == 0) {
      goto LABEL_7;
    }
  }

  else
  {
    BOOL v4 = 0LL;
    char v5 = *(_BYTE *)(a2 + 16);
    if ((v5 & 1) == 0) {
      goto LABEL_7;
    }
  }

  os_log_type_t v6 = *(const void **)(a2 + 8);
  if (v6)
  {
    _Block_release(v6);
    char v5 = *(_BYTE *)(a2 + 16);
  }

void nw_protocol_test_options_set_event_handler(void *a1, int a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    uint64_t v21 = "nw_protocol_test_options_set_event_handler";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v19 = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (v19 != OS_LOG_TYPE_FAULT)
    {
      if (!v18)
      {
        uint64_t v7 = (os_log_s *)__nwlog_obj();
        os_log_type_t v8 = v19;
        if (!os_log_type_enabled(v7, v19)) {
          goto LABEL_47;
        }
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v21 = "nw_protocol_test_options_set_event_handler";
        BOOL v9 = "%{public}s called with null options, backtrace limit exceeded";
        goto LABEL_46;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = v19;
      BOOL v11 = os_log_type_enabled(v7, v19);
      if (!backtrace_string)
      {
        if (!v11) {
          goto LABEL_47;
        }
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v21 = "nw_protocol_test_options_set_event_handler";
        BOOL v9 = "%{public}s called with null options, no backtrace";
        goto LABEL_46;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446466;
        uint64_t v21 = "nw_protocol_test_options_set_event_handler";
        __int16 v22 = 2082;
        uint64_t v23 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_47;
    }

    uint64_t v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = v19;
    if (!os_log_type_enabled(v7, v19)) {
      goto LABEL_47;
    }
    *(_DWORD *)__int128 buf = 136446210;
    uint64_t v21 = "nw_protocol_test_options_set_event_handler";
    BOOL v9 = "%{public}s called with null options";
LABEL_46:
    _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
    goto LABEL_47;
  }

  char v3 = a2;
  if (a2)
  {
    if (nw_protocol_options_is_test_protocol(a1))
    {
      v16[0] = MEMORY[0x1895F87A8];
      v16[1] = 0x40000000LL;
      v16[2] = __nw_protocol_test_options_set_event_handler_block_invoke;
      v16[3] = &unk_189BC8348;
      char v17 = v3;
      v16[4] = a3;
      nw_protocol_options_access_handle(a1, v16);
      return;
    }

    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    uint64_t v21 = "nw_protocol_test_options_set_event_handler";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v19 = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v6, &v19, &v18))
    {
      if (v19 == OS_LOG_TYPE_FAULT)
      {
        uint64_t v7 = (os_log_s *)__nwlog_obj();
        os_log_type_t v8 = v19;
        if (!os_log_type_enabled(v7, v19)) {
          goto LABEL_47;
        }
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v21 = "nw_protocol_test_options_set_event_handler";
        BOOL v9 = "%{public}s protocol options are not test protocol";
        goto LABEL_46;
      }

      if (!v18)
      {
        uint64_t v7 = (os_log_s *)__nwlog_obj();
        os_log_type_t v8 = v19;
        if (!os_log_type_enabled(v7, v19)) {
          goto LABEL_47;
        }
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v21 = "nw_protocol_test_options_set_event_handler";
        BOOL v9 = "%{public}s protocol options are not test protocol, backtrace limit exceeded";
        goto LABEL_46;
      }

      os_log_type_t v12 = (char *)__nw_create_backtrace_string();
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = v19;
      BOOL v15 = os_log_type_enabled(v7, v19);
      if (!v12)
      {
        if (!v15) {
          goto LABEL_47;
        }
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v21 = "nw_protocol_test_options_set_event_handler";
        BOOL v9 = "%{public}s protocol options are not test protocol, no backtrace";
        goto LABEL_46;
      }

      if (v15)
      {
        *(_DWORD *)__int128 buf = 136446466;
        uint64_t v21 = "nw_protocol_test_options_set_event_handler";
        __int16 v22 = 2082;
        uint64_t v23 = v12;
        char v14 = "%{public}s protocol options are not test protocol, dumping backtrace:%{public}s";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

uint64_t __nw_protocol_test_options_set_event_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 40) == 1)
  {
    uint64_t v7 = *(const void **)(a1 + 32);
    if (v7)
    {
      os_log_type_t v8 = _Block_copy(v7);
      char v9 = *(_BYTE *)(a2 + 32);
      if ((v9 & 1) == 0) {
        goto LABEL_18;
      }
    }

    else
    {
      os_log_type_t v8 = 0LL;
      char v9 = *(_BYTE *)(a2 + 32);
      if ((v9 & 1) == 0)
      {
LABEL_18:
        *(void *)(a2 + 24) = v8;
        *(_BYTE *)(a2 + 32) = v9 | 1;
        return 1LL;
      }
    }

    os_log_type_t v12 = *(const void **)(a2 + 24);
    if (v12)
    {
      _Block_release(v12);
      char v9 = *(_BYTE *)(a2 + 32);
    }

    goto LABEL_18;
  }

  if (*(_BYTE *)(a1 + 40)) {
    return 1LL;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)__int128 buf = 136446210;
  char v17 = "nw_protocol_test_options_set_event_handler_block_invoke";
  uint64_t v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v2, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v3 = (os_log_s *)gLogObj;
      os_log_type_t v4 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_24;
      }
      *(_DWORD *)__int128 buf = 136446210;
      char v17 = "nw_protocol_test_options_set_event_handler_block_invoke";
      char v5 = "%{public}s Invalid event supplied";
      goto LABEL_23;
    }

    if (!v14)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v3 = (os_log_s *)gLogObj;
      os_log_type_t v4 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_24;
      }
      *(_DWORD *)__int128 buf = 136446210;
      char v17 = "nw_protocol_test_options_set_event_handler_block_invoke";
      char v5 = "%{public}s Invalid event supplied, backtrace limit exceeded";
      goto LABEL_23;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v3 = (os_log_s *)gLogObj;
    os_log_type_t v4 = type;
    BOOL v11 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446466;
        char v17 = "nw_protocol_test_options_set_event_handler_block_invoke";
        __int16 v18 = 2082;
        os_log_type_t v19 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v3,  v4,  "%{public}s Invalid event supplied, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_24;
    }

    if (v11)
    {
      *(_DWORD *)__int128 buf = 136446210;
      char v17 = "nw_protocol_test_options_set_event_handler_block_invoke";
      char v5 = "%{public}s Invalid event supplied, no backtrace";
LABEL_23:
      _os_log_impl(&dword_181A5C000, v3, v4, v5, buf, 0xCu);
    }
  }

void nw_protocol_test_options_set_message_properties(void *a1, int a2, char a3, char a4, char a5)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  if (nw_protocol_options_is_test_protocol(a1))
  {
    v16[0] = MEMORY[0x1895F87A8];
    v16[1] = 0x40000000LL;
    v16[2] = __nw_protocol_test_options_set_message_properties_block_invoke;
    v16[3] = &__block_descriptor_tmp_10_84353;
    int v17 = a2;
    char v18 = a3;
    char v19 = a4;
    char v20 = a5;
    nw_protocol_options_access_handle(a1, v16);
    return;
  }

  __nwlog_obj();
  *(_DWORD *)__int128 buf = 136446210;
  uint64_t v24 = "nw_protocol_test_options_set_message_properties";
  uint64_t v10 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (__nwlog_fault(v10, &type, &v21))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)__int128 buf = 136446210;
      uint64_t v24 = "nw_protocol_test_options_set_message_properties";
      BOOL v13 = "%{public}s protocol options are not test protocol";
      goto LABEL_17;
    }

    if (!v21)
    {
      BOOL v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)__int128 buf = 136446210;
      uint64_t v24 = "nw_protocol_test_options_set_message_properties";
      BOOL v13 = "%{public}s protocol options are not test protocol, backtrace limit exceeded";
      goto LABEL_17;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v11 = (os_log_s *)__nwlog_obj();
    os_log_type_t v12 = type;
    BOOL v15 = os_log_type_enabled(v11, type);
    if (backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)__int128 buf = 136446466;
        uint64_t v24 = "nw_protocol_test_options_set_message_properties";
        __int16 v25 = 2082;
        os_log_type_t v26 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s protocol options are not test protocol, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_18;
    }

    if (v15)
    {
      *(_DWORD *)__int128 buf = 136446210;
      uint64_t v24 = "nw_protocol_test_options_set_message_properties";
      BOOL v13 = "%{public}s protocol options are not test protocol, no backtrace";
LABEL_17:
      _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
    }
  }

uint64_t __nw_protocol_test_options_set_message_properties_block_invoke(uint64_t a1, uint64_t a2)
{
  char v2 = *(_BYTE *)(a2 + 44) | 1;
  *(_BYTE *)(a2 + 44) = v2;
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 32);
  char v3 = v2 & 0xFD | (2 * *(_BYTE *)(a1 + 36));
  *(_BYTE *)(a2 + 44) = v3;
  char v4 = v3 & 0xFB | (4 * *(_BYTE *)(a1 + 37));
  *(_BYTE *)(a2 + 44) = v4;
  *(_BYTE *)(a2 + 44) = v4 & 0xF7 | (8 * *(_BYTE *)(a1 + 38));
  return 1LL;
}

id *nw_protocol_test_create_metadata()
{
  if (nw_protocol_copy_test_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_test_definition::onceToken, &__block_literal_global_83889);
  }
  if (!nw_protocol_copy_test_definition::test_definition) {
    return nw_protocol_metadata_create_singleton(0LL);
  }
  int v0 = os_retain((void *)nw_protocol_copy_test_definition::test_definition);
  singleton = nw_protocol_metadata_create_singleton(v0);
  if (v0) {
    os_release(v0);
  }
  return singleton;
}

BOOL nw_protocol_metadata_is_test_protocol(void *a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    v1 = a1;
    id v2 = v1[1];

    if (nw_protocol_copy_test_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_test_definition::onceToken, &__block_literal_global_83889);
    }
    if (nw_protocol_copy_test_definition::test_definition) {
      char v3 = os_retain((void *)nw_protocol_copy_test_definition::test_definition);
    }
    else {
      char v3 = 0LL;
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v2, (uint64_t)v3);
    if (v2) {
      os_release(v2);
    }
    if (v3) {
      os_release(v3);
    }
    return is_equal_unsafe;
  }

  __nwlog_obj();
  *(_DWORD *)__int128 buf = 136446210;
  BOOL v15 = "nw_protocol_metadata_is_test_protocol";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v15 = "nw_protocol_metadata_is_test_protocol";
        char v9 = "%{public}s called with null metadata";
LABEL_25:
        _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      }
    }

    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          BOOL v15 = "nw_protocol_metadata_is_test_protocol";
          __int16 v16 = 2082;
          int v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_26;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v15 = "nw_protocol_metadata_is_test_protocol";
        char v9 = "%{public}s called with null metadata, no backtrace";
        goto LABEL_25;
      }
    }

    else
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v15 = "nw_protocol_metadata_is_test_protocol";
        char v9 = "%{public}s called with null metadata, backtrace limit exceeded";
        goto LABEL_25;
      }
    }
  }

void sub_1825F1798( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1825F2110(_Unwind_Exception *a1)
{
}

void sub_1825F2168(_Unwind_Exception *a1)
{
}

void sub_1825F21D4(_Unwind_Exception *a1)
{
}

void sub_1825F2460(_Unwind_Exception *a1)
{
}

const char *nw_browse_descriptor_get_description(void *a1, int a2)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  char v3 = a1;
  char v4 = v3;
  if (!v3)
  {
    os_log_type_t v8 = "<NULL>";
    goto LABEL_15;
  }

  uint64_t v5 = 8LL;
  if (a2) {
    uint64_t v5 = 10LL;
  }
  os_log_type_t v6 = (const char **)&v3[v5];
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 3221225472LL;
  aBlock[2] = __nw_browse_descriptor_get_description_block_invoke;
  aBlock[3] = &unk_189BC8600;
  __int16 v22 = &v3[v5];
  char v21 = v3;
  char v23 = a2;
  uint64_t v7 = (void (**)(void))_Block_copy(aBlock);
  os_unfair_lock_lock(v4 + 12);
  v7[2](v7);
  os_unfair_lock_unlock(v4 + 12);

  os_log_type_t v8 = *v6;
  if (!*v6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v9 = (id)gLogObj;
    *(_DWORD *)__int128 buf = 136446210;
    __int16 v25 = "nw_browse_descriptor_get_description";
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v10, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v11 = (os_log_s *)(id)gLogObj;
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          __int16 v25 = "nw_browse_descriptor_get_description";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s description is NULL", buf, 0xCu);
        }
      }

      else if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v11 = (os_log_s *)(id)gLogObj;
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)__int128 buf = 136446466;
            __int16 v25 = "nw_browse_descriptor_get_description";
            __int16 v26 = 2082;
            uint64_t v27 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v11,  v15,  "%{public}s description is NULL, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          if (!v10) {
            goto LABEL_12;
          }
          goto LABEL_11;
        }

        if (v16)
        {
          *(_DWORD *)__int128 buf = 136446210;
          __int16 v25 = "nw_browse_descriptor_get_description";
          _os_log_impl(&dword_181A5C000, v11, v15, "%{public}s description is NULL, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v11 = (os_log_s *)(id)gLogObj;
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          __int16 v25 = "nw_browse_descriptor_get_description";
          _os_log_impl( &dword_181A5C000,  v11,  v17,  "%{public}s description is NULL, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v10)
    {
LABEL_12:
      os_log_type_t v8 = "?";
      goto LABEL_13;
    }

void sub_1825F2C68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_browse_descriptor_get_description_block_invoke(uint64_t result)
{
  v1 = *(char ***)(result + 40);
  if (!*v1)
  {
    uint64_t v2 = *(void *)(result + 32);
    int v3 = *(_DWORD *)(v2 + 8);
    if (v3 == 2)
    {
      return asprintf(v1, "<nw_browse_descriptor application_service %s bundle_id=%s device_types=%x>");
    }

    else if (v3 == 1)
    {
      char v4 = *(const char **)(v2 + 24);
      return asprintf(v1, "<nw_browse_descriptor bonjour %s.%s %s>");
    }

    else if (v3)
    {
      return asprintf(v1, "<nw_browse_descriptor custom type %d>");
    }

    else
    {
      return asprintf(*(char ***)(result + 40), "<nw_browse_descriptor invalid>");
    }
  }

  return result;
}

nw_browse_descriptor_t nw_browse_descriptor_create_bonjour_service(const char *type, const char *domain)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  if (!type)
  {
    __nwlog_obj();
    char v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    os_log_type_t v34 = "nw_browse_descriptor_create_bonjour_service";
    char v20 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t typea = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (__nwlog_fault(v20, &typea, &v31))
    {
      if (typea == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        char v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v22 = typea;
        if (os_log_type_enabled(v21, typea))
        {
          *(_DWORD *)__int128 buf = 136446210;
          os_log_type_t v34 = "nw_browse_descriptor_create_bonjour_service";
          _os_log_impl(&dword_181A5C000, v21, v22, "%{public}s called with null type", buf, 0xCu);
        }
      }

      else if (v31)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        char v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v26 = typea;
        BOOL v27 = os_log_type_enabled(v21, typea);
        if (backtrace_string)
        {
          if (v27)
          {
            *(_DWORD *)__int128 buf = 136446466;
            os_log_type_t v34 = "nw_browse_descriptor_create_bonjour_service";
            __int16 v35 = 2082;
            uint64_t v36 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v21,  v26,  "%{public}s called with null type, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_51;
        }

        if (v27)
        {
          *(_DWORD *)__int128 buf = 136446210;
          os_log_type_t v34 = "nw_browse_descriptor_create_bonjour_service";
          _os_log_impl(&dword_181A5C000, v21, v26, "%{public}s called with null type, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        char v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v30 = typea;
        if (os_log_type_enabled(v21, typea))
        {
          *(_DWORD *)__int128 buf = 136446210;
          os_log_type_t v34 = "nw_browse_descriptor_create_bonjour_service";
          _os_log_impl( &dword_181A5C000,  v21,  v30,  "%{public}s called with null type, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

const char *__cdecl nw_browse_descriptor_get_bonjour_service_type(nw_browse_descriptor_t descriptor)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_browse_descriptor_t v1 = descriptor;
  nw_browse_descriptor_t v2 = v1;
  if (v1)
  {
    int v3 = (const char *)*((void *)v1 + 2);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  os_log_type_t v16 = "nw_browse_descriptor_get_bonjour_service_type";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      size_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_get_bonjour_service_type";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      size_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          os_log_type_t v16 = "nw_browse_descriptor_get_bonjour_service_type";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null descriptor, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_get_bonjour_service_type";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      size_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_get_bonjour_service_type";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null descriptor, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

const char *__cdecl nw_browse_descriptor_get_bonjour_service_domain(nw_browse_descriptor_t descriptor)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_browse_descriptor_t v1 = descriptor;
  nw_browse_descriptor_t v2 = v1;
  if (v1)
  {
    int v3 = (const char *)*((void *)v1 + 3);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  os_log_type_t v16 = "nw_browse_descriptor_get_bonjour_service_domain";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      size_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_get_bonjour_service_domain";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      size_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          os_log_type_t v16 = "nw_browse_descriptor_get_bonjour_service_domain";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null descriptor, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_get_bonjour_service_domain";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      size_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_get_bonjour_service_domain";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null descriptor, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL nw_browse_descriptor_create_application_service_with_bundle_id(const char *a1, const char *a2)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    os_log_type_t v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    uint64_t v33 = "nw_browse_descriptor_create_application_service_with_bundle_id";
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (__nwlog_fault(v19, &type, &v30))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        char v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          uint64_t v33 = "nw_browse_descriptor_create_application_service_with_bundle_id";
          _os_log_impl(&dword_181A5C000, v20, v21, "%{public}s called with null application_service_name", buf, 0xCu);
        }
      }

      else if (v30)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        char v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v25 = type;
        BOOL v26 = os_log_type_enabled(v20, type);
        if (backtrace_string)
        {
          if (v26)
          {
            *(_DWORD *)__int128 buf = 136446466;
            uint64_t v33 = "nw_browse_descriptor_create_application_service_with_bundle_id";
            __int16 v34 = 2082;
            __int16 v35 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v20,  v25,  "%{public}s called with null application_service_name, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_50;
        }

        if (v26)
        {
          *(_DWORD *)__int128 buf = 136446210;
          uint64_t v33 = "nw_browse_descriptor_create_application_service_with_bundle_id";
          _os_log_impl( &dword_181A5C000,  v20,  v25,  "%{public}s called with null application_service_name, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        char v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          uint64_t v33 = "nw_browse_descriptor_create_application_service_with_bundle_id";
          _os_log_impl( &dword_181A5C000,  v20,  v29,  "%{public}s called with null application_service_name, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

nw_browse_descriptor_t nw_browse_descriptor_create_application_service(const char *application_service_name)
{
  if (nw_utilities_get_self_name::onceToken != -1) {
    dispatch_once(&nw_utilities_get_self_name::onceToken, &__block_literal_global_8_44151);
  }
  return (nw_browse_descriptor_t)nw_browse_descriptor_create_application_service_with_bundle_id( application_service_name,  (const char *)nw_utilities_get_self_name::name);
}

const char *__cdecl nw_browse_descriptor_get_application_service_name(nw_browse_descriptor_t descriptor)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  nw_browse_descriptor_t v1 = descriptor;
  nw_browse_descriptor_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    char v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    os_log_type_t v22 = "nw_browse_descriptor_get_application_service_name";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v5, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_get_application_service_name";
          _os_log_impl(&dword_181A5C000, v6, v14, "%{public}s called with null descriptor", buf, 0xCu);
        }

uint64_t nw_browse_descriptor_get_type(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_browse_descriptor_t v1 = a1;
  nw_browse_descriptor_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[2];
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  os_log_type_t v16 = "nw_browse_descriptor_get_type";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_get_type";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          os_log_type_t v16 = "nw_browse_descriptor_get_type";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null descriptor, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_get_type";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_get_type";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null descriptor, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_browse_descriptor_get_bundle_id(void *a1)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_browse_descriptor_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    char v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    os_log_type_t v22 = "nw_browse_descriptor_get_bundle_id";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v5, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_get_bundle_id";
          _os_log_impl(&dword_181A5C000, v6, v14, "%{public}s called with null descriptor", buf, 0xCu);
        }

void nw_browse_descriptor_set_device_types(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    char v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    os_log_type_t v22 = "nw_browse_descriptor_set_device_types";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v6, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_set_device_types";
          _os_log_impl(&dword_181A5C000, v7, v14, "%{public}s called with null descriptor", buf, 0xCu);
        }

        goto LABEL_20;
      }

      if (!v19)
      {
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_set_device_types";
          _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s called with null descriptor, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_20;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)__int128 buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_set_device_types";
          _os_log_impl(&dword_181A5C000, v7, v16, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
        }

        goto LABEL_20;
      }

      if (v17)
      {
        *(_DWORD *)__int128 buf = 136446466;
        os_log_type_t v22 = "nw_browse_descriptor_set_device_types";
        __int16 v23 = 2082;
        uint64_t v24 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v7,  v16,  "%{public}s called with null descriptor, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
    }

uint64_t nw_browse_descriptor_get_device_types(void *a1)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_browse_descriptor_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    char v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    os_log_type_t v22 = "nw_browse_descriptor_get_device_types";
    id v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v5, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_get_device_types";
          _os_log_impl(&dword_181A5C000, v6, v14, "%{public}s called with null descriptor", buf, 0xCu);
        }

BOOL nw_browse_descriptor_is_device_type_set(void *a1, int a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    BOOL v5 = (*((_DWORD *)v3 + 22) & a2) != 0;
    goto LABEL_3;
  }

  __nwlog_obj();
  os_log_type_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  os_log_type_t v18 = "nw_browse_descriptor_is_device_type_set";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v18 = "nw_browse_descriptor_is_device_type_set";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)__int128 buf = 136446466;
          os_log_type_t v18 = "nw_browse_descriptor_is_device_type_set";
          __int16 v19 = 2082;
          char v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null descriptor, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v13)
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v18 = "nw_browse_descriptor_is_device_type_set";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v18 = "nw_browse_descriptor_is_device_type_set";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null descriptor, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_browse_descriptor_set_browse_scope(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    BOOL v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    os_log_type_t v22 = "nw_browse_descriptor_set_browse_scope";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v6, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_set_browse_scope";
          _os_log_impl(&dword_181A5C000, v7, v14, "%{public}s called with null descriptor", buf, 0xCu);
        }

        goto LABEL_20;
      }

      if (!v19)
      {
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_set_browse_scope";
          _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s called with null descriptor, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_20;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)__int128 buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_set_browse_scope";
          _os_log_impl(&dword_181A5C000, v7, v16, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
        }

        goto LABEL_20;
      }

      if (v17)
      {
        *(_DWORD *)__int128 buf = 136446466;
        os_log_type_t v22 = "nw_browse_descriptor_set_browse_scope";
        __int16 v23 = 2082;
        uint64_t v24 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v7,  v16,  "%{public}s called with null descriptor, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
    }

uint64_t nw_browse_descriptor_get_browse_scope(void *a1)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_browse_descriptor_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    BOOL v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    os_log_type_t v22 = "nw_browse_descriptor_get_browse_scope";
    id v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v5, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_get_browse_scope";
          _os_log_impl(&dword_181A5C000, v6, v14, "%{public}s called with null descriptor", buf, 0xCu);
        }

BOOL nw_browse_descriptor_is_browse_scope_set(void *a1, int a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    BOOL v5 = (*((_DWORD *)v3 + 23) & a2) != 0;
    goto LABEL_3;
  }

  __nwlog_obj();
  os_log_type_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  os_log_type_t v18 = "nw_browse_descriptor_is_browse_scope_set";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v18 = "nw_browse_descriptor_is_browse_scope_set";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)__int128 buf = 136446466;
          os_log_type_t v18 = "nw_browse_descriptor_is_browse_scope_set";
          __int16 v19 = 2082;
          char v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null descriptor, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v13)
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v18 = "nw_browse_descriptor_is_browse_scope_set";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v18 = "nw_browse_descriptor_is_browse_scope_set";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null descriptor, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_browse_descriptor_add_device_filter(void *a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    uint64_t v25 = "nw_browse_descriptor_add_device_filter";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v25 = "nw_browse_descriptor_add_device_filter";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }

    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)__int128 buf = 136446466;
          uint64_t v25 = "nw_browse_descriptor_add_device_filter";
          __int16 v26 = 2082;
          BOOL v27 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null descriptor, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9) {
          goto LABEL_6;
        }
LABEL_41:
        free(v9);
        goto LABEL_6;
      }

      if (v16)
      {
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v25 = "nw_browse_descriptor_add_device_filter";
        _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v25 = "nw_browse_descriptor_add_device_filter";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null descriptor, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_1825F6A9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_browse_descriptor_get_device_filter_count(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    id v3 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    os_log_type_t v14 = "nw_browse_descriptor_get_device_filter_count";
    id v4 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (__nwlog_fault(v4, &type, &v11))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v6 = type;
        if (os_log_type_enabled(v5, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          os_log_type_t v14 = "nw_browse_descriptor_get_device_filter_count";
          _os_log_impl(&dword_181A5C000, v5, v6, "%{public}s called with null descriptor", buf, 0xCu);
        }
      }

      else if (v11)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        BOOL v9 = os_log_type_enabled(v5, type);
        if (backtrace_string)
        {
          if (v9)
          {
            *(_DWORD *)__int128 buf = 136446466;
            os_log_type_t v14 = "nw_browse_descriptor_get_device_filter_count";
            __int16 v15 = 2082;
            BOOL v16 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v5,  v8,  "%{public}s called with null descriptor, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }

        if (v9)
        {
          *(_DWORD *)__int128 buf = 136446210;
          os_log_type_t v14 = "nw_browse_descriptor_get_device_filter_count";
          _os_log_impl(&dword_181A5C000, v5, v8, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v5, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          os_log_type_t v14 = "nw_browse_descriptor_get_device_filter_count";
          _os_log_impl( &dword_181A5C000,  v5,  v10,  "%{public}s called with null descriptor, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void nw_browse_descriptor_enumerate_device_filters(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  BOOL v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    __int16 v26 = "nw_browse_descriptor_enumerate_device_filters";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        __int16 v26 = "nw_browse_descriptor_enumerate_device_filters";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)__int128 buf = 136446466;
          __int16 v26 = "nw_browse_descriptor_enumerate_device_filters";
          __int16 v27 = 2082;
          uint64_t v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null descriptor, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8) {
          goto LABEL_4;
        }
LABEL_39:
        free(v8);
        goto LABEL_4;
      }

      if (v15)
      {
        *(_DWORD *)__int128 buf = 136446210;
        __int16 v26 = "nw_browse_descriptor_enumerate_device_filters";
        _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        __int16 v26 = "nw_browse_descriptor_enumerate_device_filters";
        _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s called with null descriptor, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_browse_descriptor_enumerate_device_filters_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  [v4 cStringUsingEncoding:1];
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();

  return v5;
}

void sub_1825F7280(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_browse_descriptor_clear_device_filters(void *a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_browse_descriptor_t v2 = v1;
  if (v1)
  {
    id v3 = (void *)*((void *)v1 + 13);
    *((void *)v1 + 13) = 0LL;

    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  BOOL v15 = "nw_browse_descriptor_clear_device_filters";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v15 = "nw_browse_descriptor_clear_device_filters";
        _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }

    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)__int128 buf = 136446466;
          BOOL v15 = "nw_browse_descriptor_clear_device_filters";
          __int16 v16 = 2082;
          os_log_type_t v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null descriptor, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v15 = "nw_browse_descriptor_clear_device_filters";
        _os_log_impl(&dword_181A5C000, v6, v9, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v15 = "nw_browse_descriptor_clear_device_filters";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null descriptor, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

NWConcrete_nw_browse_descriptor *nw_browse_descriptor_create_custom(unsigned int a1, void *a2, void *a3)
{
  *(void *)&v46[13] = *MEMORY[0x1895F89C0];
  os_log_type_t v6 = a2;
  id v7 = a3;
  if (v6)
  {
    if (a1 <= 0x3E7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v8 = (id)gLogObj;
      *(_DWORD *)__int128 buf = 136446466;
      BOOL v44 = "nw_browse_descriptor_create_custom";
      __int16 v45 = 1024;
      *(_DWORD *)BOOL v46 = 1000;
      os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v41 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v10 = (os_log_s *)(id)gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)__int128 buf = 136446466;
          BOOL v44 = "nw_browse_descriptor_create_custom";
          __int16 v45 = 1024;
          *(_DWORD *)BOOL v46 = 1000;
          _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s Custom browse descriptor type values must start at %d",  buf,  0x12u);
        }

void sub_1825F7FA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_browse_descriptor_copy_custom_data(void *a1)
{
  *(void *)&v24[13] = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_browse_descriptor_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    os_log_type_t v22 = "nw_browse_descriptor_copy_custom_data";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v5, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_copy_custom_data";
          _os_log_impl(&dword_181A5C000, v6, v14, "%{public}s called with null descriptor", buf, 0xCu);
        }

BOOL nw_browse_descriptor_is_custom_type(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_browse_descriptor_t v2 = v1;
  if (v1)
  {
    BOOL v3 = *((_DWORD *)v1 + 2) > 0x3E7u;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  os_log_type_t v16 = "nw_browse_descriptor_is_custom_type";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_is_custom_type";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          os_log_type_t v16 = "nw_browse_descriptor_is_custom_type";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null descriptor, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_is_custom_type";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_is_custom_type";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null descriptor, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void *nw_browse_descriptor_copy_custom_browse_block(void *a1)
{
  *(void *)&v24[13] = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_browse_descriptor_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    char v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    os_log_type_t v22 = "nw_browse_descriptor_copy_custom_browse_block";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v5, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_copy_custom_browse_block";
          _os_log_impl(&dword_181A5C000, v6, v14, "%{public}s called with null descriptor", buf, 0xCu);
        }

BOOL nw_browse_descriptor_is_meta_query(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_browse_descriptor_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    BOOL v17 = "nw_browse_descriptor_is_meta_query";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          BOOL v17 = "nw_browse_descriptor_is_meta_query";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null descriptor", buf, 0xCu);
        }
      }

      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)__int128 buf = 136446466;
            BOOL v17 = "nw_browse_descriptor_is_meta_query";
            __int16 v18 = 2082;
            char v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null descriptor, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }

        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446210;
          BOOL v17 = "nw_browse_descriptor_is_meta_query";
          _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          BOOL v17 = "nw_browse_descriptor_is_meta_query";
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null descriptor, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void nw_browse_descriptor_set_include_txt_record(nw_browse_descriptor_t descriptor, BOOL include_txt_record)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_browse_descriptor_t v3 = descriptor;
  nw_browse_descriptor_t v4 = v3;
  if (v3)
  {
    *((_BYTE *)v3 + 112) = *((_BYTE *)v3 + 112) & 0xFE | include_txt_record;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  os_log_type_t v16 = "nw_browse_descriptor_set_include_txt_record";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_set_include_txt_record";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          os_log_type_t v16 = "nw_browse_descriptor_set_include_txt_record";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null descriptor, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_set_include_txt_record";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_set_include_txt_record";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null descriptor, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL nw_browse_descriptor_get_include_txt_record(nw_browse_descriptor_t descriptor)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_browse_descriptor_t v1 = descriptor;
  nw_browse_descriptor_t v2 = v1;
  if (v1)
  {
    BOOL v3 = *((_BYTE *)v1 + 112) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  os_log_type_t v16 = "nw_browse_descriptor_get_include_txt_record";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_get_include_txt_record";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          os_log_type_t v16 = "nw_browse_descriptor_get_include_txt_record";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null descriptor, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_get_include_txt_record";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_get_include_txt_record";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null descriptor, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_browse_descriptor_set_sign_results(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_browse_descriptor_t v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 2;
    }
    else {
      char v5 = 0;
    }
    *((_BYTE *)v3 + 112) = *((_BYTE *)v3 + 112) & 0xFD | v5;
    goto LABEL_6;
  }

  __nwlog_obj();
  os_log_type_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  __int16 v17 = "nw_browse_descriptor_set_sign_results";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        __int16 v17 = "nw_browse_descriptor_set_sign_results";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)__int128 buf = 136446466;
          __int16 v17 = "nw_browse_descriptor_set_sign_results";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null descriptor, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v12)
      {
        *(_DWORD *)__int128 buf = 136446210;
        __int16 v17 = "nw_browse_descriptor_set_sign_results";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        __int16 v17 = "nw_browse_descriptor_set_sign_results";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null descriptor, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_browse_descriptor_get_sign_results(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_browse_descriptor_t v1 = a1;
  nw_browse_descriptor_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[112] >> 1) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  char v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  os_log_type_t v16 = "nw_browse_descriptor_get_sign_results";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_get_sign_results";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          os_log_type_t v16 = "nw_browse_descriptor_get_sign_results";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null descriptor, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_get_sign_results";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_get_sign_results";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null descriptor, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_browse_descriptor_set_discover_application_service_endpoints_only(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_browse_descriptor_t v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 4;
    }
    else {
      char v5 = 0;
    }
    *((_BYTE *)v3 + 112) = *((_BYTE *)v3 + 112) & 0xFB | v5;
    goto LABEL_6;
  }

  __nwlog_obj();
  os_log_type_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  __int16 v17 = "nw_browse_descriptor_set_discover_application_service_endpoints_only";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        __int16 v17 = "nw_browse_descriptor_set_discover_application_service_endpoints_only";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)__int128 buf = 136446466;
          __int16 v17 = "nw_browse_descriptor_set_discover_application_service_endpoints_only";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null descriptor, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v12)
      {
        *(_DWORD *)__int128 buf = 136446210;
        __int16 v17 = "nw_browse_descriptor_set_discover_application_service_endpoints_only";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        __int16 v17 = "nw_browse_descriptor_set_discover_application_service_endpoints_only";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null descriptor, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_browse_descriptor_get_discover_application_service_endpoints_only(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_browse_descriptor_t v1 = a1;
  nw_browse_descriptor_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[112] >> 2) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  char v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  os_log_type_t v16 = "nw_browse_descriptor_get_discover_application_service_endpoints_only";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_get_discover_application_service_endpoints_only";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          os_log_type_t v16 = "nw_browse_descriptor_get_discover_application_service_endpoints_only";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null descriptor, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_get_discover_application_service_endpoints_only";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_get_discover_application_service_endpoints_only";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null descriptor, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_browse_descriptor_set_invitation_scope(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  nw_browse_descriptor_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    char v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    os_log_type_t v22 = "nw_browse_descriptor_set_invitation_scope";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v6, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_set_invitation_scope";
          _os_log_impl(&dword_181A5C000, v7, v14, "%{public}s called with null descriptor", buf, 0xCu);
        }

        goto LABEL_20;
      }

      if (!v19)
      {
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_set_invitation_scope";
          _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s called with null descriptor, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_20;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)__int128 buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_set_invitation_scope";
          _os_log_impl(&dword_181A5C000, v7, v16, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
        }

        goto LABEL_20;
      }

      if (v17)
      {
        *(_DWORD *)__int128 buf = 136446466;
        os_log_type_t v22 = "nw_browse_descriptor_set_invitation_scope";
        __int16 v23 = 2082;
        id v24 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v7,  v16,  "%{public}s called with null descriptor, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
    }

uint64_t nw_browse_descriptor_get_invitation_scope(void *a1)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  nw_browse_descriptor_t v1 = a1;
  nw_browse_descriptor_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    char v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    os_log_type_t v22 = "nw_browse_descriptor_get_invitation_scope";
    id v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v5, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_get_invitation_scope";
          _os_log_impl(&dword_181A5C000, v6, v14, "%{public}s called with null descriptor", buf, 0xCu);
        }

void sub_1825FAD60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_association *nw_association_create(void *a1, void *a2)
{
  uint64_t v45 = *MEMORY[0x1895F89C0];
  id v4 = a1;
  id v5 = a2;
  os_log_type_t v6 = objc_alloc(&OBJC_CLASS___NWConcrete_nw_association);
  id v7 = v4;
  id v8 = v5;
  os_log_type_t v9 = v8;
  if (v6)
  {
    if (v7)
    {
      if (v8)
      {
        v39.os_log_type_t receiver = v6;
        v39.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_association;
        BOOL v10 = (NWConcrete_nw_association *)objc_msgSendSuper2(&v39, sel_init);
        os_log_type_t v6 = v10;
        if (v10)
        {
          objc_storeStrong((id *)&v10->endpoint, a1);
          os_log_type_t v11 = (OS_nw_path_parameters *)nw_parameters_copy_path_parameters(v9, 1);
          path_parameters = v6->path_parameters;
          v6->path_parameters = v11;

          *((_BYTE *)v6 + 76) |= 1u;
          goto LABEL_6;
        }

        __nwlog_obj();
        os_log_type_t v22 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v42 = "-[NWConcrete_nw_association initWithEndpoint:parameters:]";
        __int16 v23 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v38 = 0;
        if ((__nwlog_fault(v23, &type, &v38) & 1) == 0) {
          goto LABEL_61;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v25 = type;
          if (os_log_type_enabled(v24, type))
          {
            *(_DWORD *)__int128 buf = 136446210;
            BOOL v42 = "-[NWConcrete_nw_association initWithEndpoint:parameters:]";
            _os_log_impl(&dword_181A5C000, v24, v25, "%{public}s [super init] failed", buf, 0xCu);
          }
        }

        else if (v38)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v33 = type;
          BOOL v34 = os_log_type_enabled(v24, type);
          if (backtrace_string)
          {
            if (v34)
            {
              *(_DWORD *)__int128 buf = 136446466;
              BOOL v42 = "-[NWConcrete_nw_association initWithEndpoint:parameters:]";
              __int16 v43 = 2082;
              BOOL v44 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v24,  v33,  "%{public}s [super init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(backtrace_string);
            goto LABEL_61;
          }

          if (v34)
          {
            *(_DWORD *)__int128 buf = 136446210;
            BOOL v42 = "-[NWConcrete_nw_association initWithEndpoint:parameters:]";
            _os_log_impl(&dword_181A5C000, v24, v33, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v37 = type;
          if (os_log_type_enabled(v24, type))
          {
            *(_DWORD *)__int128 buf = 136446210;
            BOOL v42 = "-[NWConcrete_nw_association initWithEndpoint:parameters:]";
            _os_log_impl( &dword_181A5C000,  v24,  v37,  "%{public}s [super init] failed, backtrace limit exceeded",  buf,  0xCu);
          }
        }

LABEL_61:
        if (v23) {
          free(v23);
        }
        goto LABEL_63;
      }

      __nwlog_obj();
      os_log_type_t v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)__int128 buf = 136446210;
      BOOL v42 = "-[NWConcrete_nw_association initWithEndpoint:parameters:]";
      char v19 = (char *)_os_log_send_and_compose_impl();

      LOBYTE(v39.receiver) = 16;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      if (LOBYTE(v39.receiver) == 17)
      {
        __nwlog_obj();
        uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t receiver = (os_log_type_t)v39.receiver;
        if (os_log_type_enabled(v20, (os_log_type_t)v39.receiver))
        {
          *(_DWORD *)__int128 buf = 136446210;
          BOOL v42 = "-[NWConcrete_nw_association initWithEndpoint:parameters:]";
          _os_log_impl(&dword_181A5C000, v20, receiver, "%{public}s called with null _parameters", buf, 0xCu);
        }
      }

      else if (type)
      {
        os_log_type_t v29 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v30 = (os_log_type_t)v39.receiver;
        BOOL v31 = os_log_type_enabled(v20, (os_log_type_t)v39.receiver);
        if (v29)
        {
          if (v31)
          {
            *(_DWORD *)__int128 buf = 136446466;
            BOOL v42 = "-[NWConcrete_nw_association initWithEndpoint:parameters:]";
            __int16 v43 = 2082;
            BOOL v44 = v29;
            _os_log_impl( &dword_181A5C000,  v20,  v30,  "%{public}s called with null _parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v29);
          goto LABEL_55;
        }

        if (v31)
        {
          *(_DWORD *)__int128 buf = 136446210;
          BOOL v42 = "-[NWConcrete_nw_association initWithEndpoint:parameters:]";
          _os_log_impl(&dword_181A5C000, v20, v30, "%{public}s called with null _parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v36 = (os_log_type_t)v39.receiver;
        if (os_log_type_enabled(v20, (os_log_type_t)v39.receiver))
        {
          *(_DWORD *)__int128 buf = 136446210;
          BOOL v42 = "-[NWConcrete_nw_association initWithEndpoint:parameters:]";
          _os_log_impl( &dword_181A5C000,  v20,  v36,  "%{public}s called with null _parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }

LABEL_55:
      if (v19) {
        free(v19);
      }
LABEL_51:

LABEL_63:
      os_log_type_t v6 = 0LL;
      goto LABEL_6;
    }

    __nwlog_obj();
    os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    BOOL v42 = "-[NWConcrete_nw_association initWithEndpoint:parameters:]";
    BOOL v15 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v39.receiver) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v15, &v39, &type))
    {
      if (LOBYTE(v39.receiver) == 17)
      {
        __nwlog_obj();
        os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v17 = (os_log_type_t)v39.receiver;
        if (os_log_type_enabled(v16, (os_log_type_t)v39.receiver))
        {
          *(_DWORD *)__int128 buf = 136446210;
          BOOL v42 = "-[NWConcrete_nw_association initWithEndpoint:parameters:]";
          _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s called with null _endpoint", buf, 0xCu);
        }
      }

      else if (type)
      {
        __int16 v26 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v27 = (os_log_type_t)v39.receiver;
        BOOL v28 = os_log_type_enabled(v16, (os_log_type_t)v39.receiver);
        if (v26)
        {
          if (v28)
          {
            *(_DWORD *)__int128 buf = 136446466;
            BOOL v42 = "-[NWConcrete_nw_association initWithEndpoint:parameters:]";
            __int16 v43 = 2082;
            BOOL v44 = v26;
            _os_log_impl( &dword_181A5C000,  v16,  v27,  "%{public}s called with null _endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v26);
          goto LABEL_49;
        }

        if (v28)
        {
          *(_DWORD *)__int128 buf = 136446210;
          BOOL v42 = "-[NWConcrete_nw_association initWithEndpoint:parameters:]";
          _os_log_impl(&dword_181A5C000, v16, v27, "%{public}s called with null _endpoint, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v35 = (os_log_type_t)v39.receiver;
        if (os_log_type_enabled(v16, (os_log_type_t)v39.receiver))
        {
          *(_DWORD *)__int128 buf = 136446210;
          BOOL v42 = "-[NWConcrete_nw_association initWithEndpoint:parameters:]";
          _os_log_impl( &dword_181A5C000,  v16,  v35,  "%{public}s called with null _endpoint, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_1825FB4D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1825FB4E4()
{
  JUMPOUT(0x1825FB4D4LL);
}

void __nw_association_create_with_evaluator_block_invoke(uint64_t a1, void *a2)
{
}

void nw_association_update_paths(void *a1, void *a2)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    os_log_type_t v40 = "nw_association_update_paths";
    BOOL v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v38 = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (v38 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = v38;
      if (os_log_type_enabled(v16, v38))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v40 = "nw_association_update_paths";
        _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s called with null association", buf, 0xCu);
      }
    }

    else if (v37)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = v38;
      BOOL v22 = os_log_type_enabled(v16, v38);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)__int128 buf = 136446466;
          os_log_type_t v40 = "nw_association_update_paths";
          __int16 v41 = 2082;
          BOOL v42 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v16,  v21,  "%{public}s called with null association, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_45:
        if (!v15) {
          goto LABEL_11;
        }
LABEL_46:
        free(v15);
        goto LABEL_11;
      }

      if (v22)
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v40 = "nw_association_update_paths";
        _os_log_impl(&dword_181A5C000, v16, v21, "%{public}s called with null association, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v26 = v38;
      if (os_log_type_enabled(v16, v38))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v40 = "nw_association_update_paths";
        _os_log_impl( &dword_181A5C000,  v16,  v26,  "%{public}s called with null association, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_1825FBAEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL27nw_association_update_pathsP25NWConcrete_nw_associationPU21objcproto10OS_nw_path8NSObject_block_invoke( uint64_t a1, uint64_t a2)
{
  uint64_t v54 = *MEMORY[0x1895F89C0];
  nw_hash_node_get_object(a2);
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t extra = nw_hash_node_get_extra(a2);
  id v6 = (uint64_t *)extra;
  uint64_t v43 = v4;
  if (!*(void *)(extra + 32)) {
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(extra + 40);
  time_t v8 = time(0LL);
  time_t v9 = v6[4];
  int v10 = v8 > v9;
  os_log_type_t v11 = *(void **)(a1 + 40);
  int v12 = *(void **)(*(void *)(a1 + 32) + 32LL);
  BOOL v13 = v4;
  id v14 = v12;
  id v15 = v11;
  if (!v13)
  {
    __nwlog_obj();
    id v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    __int16 v47 = "nw_protocol_definition_should_flush_cache";
    id v36 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (__nwlog_fault(v36, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        char v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v38 = type;
        if (os_log_type_enabled(v37, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          __int16 v47 = "nw_protocol_definition_should_flush_cache";
          _os_log_impl(&dword_181A5C000, v37, v38, "%{public}s called with null definition", buf, 0xCu);
        }
      }

      else if (v44)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        char v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v40 = type;
        BOOL v41 = os_log_type_enabled(v37, type);
        if (backtrace_string)
        {
          if (v41)
          {
            *(_DWORD *)__int128 buf = 136446466;
            __int16 v47 = "nw_protocol_definition_should_flush_cache";
            __int16 v48 = 2082;
            __int16 v49 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v37,  v40,  "%{public}s called with null definition, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_57;
        }

        if (v41)
        {
          *(_DWORD *)__int128 buf = 136446210;
          __int16 v47 = "nw_protocol_definition_should_flush_cache";
          _os_log_impl(&dword_181A5C000, v37, v40, "%{public}s called with null definition, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        char v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v42 = type;
        if (os_log_type_enabled(v37, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          __int16 v47 = "nw_protocol_definition_should_flush_cache";
          _os_log_impl( &dword_181A5C000,  v37,  v42,  "%{public}s called with null definition, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_1825FC214( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL27nw_association_update_pathsP25NWConcrete_nw_associationPU21objcproto10OS_nw_path8NSObject_block_invoke_82( uint64_t a1, uint64_t a2)
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t extra = nw_hash_node_get_extra(a2);
  if ((*(_BYTE *)(extra + 8) & 1) != 0)
  {
    id v6 = (void (**)(void *, void *, void))_Block_copy(*(const void **)extra);
    v6[2](v6, v4, *(void *)(a1 + 32));
  }

  return 1LL;
}

void sub_1825FC2D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL27nw_association_update_pathsP25NWConcrete_nw_associationPU21objcproto10OS_nw_path8NSObject_block_invoke_2( uint64_t a1, uint64_t a2)
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t extra = nw_hash_node_get_extra(a2);
  if (!*(_BYTE *)(a1 + 40) || (*(_BYTE *)(extra + 8) & 1) == 0)
  {
    id v6 = (void (**)(void *, void *, void))_Block_copy(*(const void **)extra);
    v6[2](v6, v4, *(void *)(a1 + 32));
  }

  return 1LL;
}

void sub_1825FC364(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_association_update_with_evaluator_block_invoke(uint64_t a1, void *a2)
{
}

id nw_association_copy_endpoint(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_browse_descriptor_t v1 = a1;
  nw_browse_descriptor_t v2 = v1;
  if (v1)
  {
    id v3 = v1[1];
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  uint64_t v16 = "nw_association_copy_endpoint";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v16 = "nw_association_copy_endpoint";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null association", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          uint64_t v16 = "nw_association_copy_endpoint";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null association, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v16 = "nw_association_copy_endpoint";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null association, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v16 = "nw_association_copy_endpoint";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null association, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_association_register_internal(void *a1, void *a2, void *a3, int a4, int a5, void *a6)
{
  uint64_t v111 = *MEMORY[0x1895F89C0];
  id v11 = a1;
  id v97 = a2;
  id v12 = a3;
  id v13 = a6;
  if (!v11)
  {
    BOOL v70 = v13;
    __nwlog_obj();
    BOOL v71 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    BOOL v102 = "nw_association_register_internal";
    uint64_t v72 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v99 = OS_LOG_TYPE_DEFAULT;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v73 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v74 = type;
      if (os_log_type_enabled(v73, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v102 = "nw_association_register_internal";
        _os_log_impl(&dword_181A5C000, v73, v74, "%{public}s called with null association", buf, 0xCu);
      }

      goto LABEL_141;
    }

    if (v99 == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      __int16 v73 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v92 = type;
      if (os_log_type_enabled(v73, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v102 = "nw_association_register_internal";
        _os_log_impl( &dword_181A5C000,  v73,  v92,  "%{public}s called with null association, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_141;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    BOOL v82 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v83 = type;
    BOOL v84 = os_log_type_enabled(v82, type);
    if (backtrace_string)
    {
      if (v84)
      {
        *(_DWORD *)__int128 buf = 136446466;
        BOOL v102 = "nw_association_register_internal";
        __int16 v103 = 2082;
        int v104 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v82,  v83,  "%{public}s called with null association, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
LABEL_151:
      if (!v72) {
        goto LABEL_104;
      }
LABEL_152:
      free(v72);
      goto LABEL_104;
    }

    if (v84)
    {
      *(_DWORD *)__int128 buf = 136446210;
      BOOL v102 = "nw_association_register_internal";
      _os_log_impl(&dword_181A5C000, v82, v83, "%{public}s called with null association, no backtrace", buf, 0xCu);
    }

void sub_1825FD900( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

BOOL nw_association_matches_key(const void *a1, const void *a2)
{
  return a1 == a2;
}

void nw_association_activate(void *a1, void *a2, int a3, int a4)
{
  id v7 = a1;
  id v9 = a2;
  uint64_t v10 = *((void *)v7 + 8);
  if (v10)
  {
    nw_queue_cancel_source(v10, v8);
    *((void *)v7 + 8) = 0LL;
  }

  if ((*((_BYTE *)v7 + 76) & 1) != 0)
  {
    *((_BYTE *)v7 + 76) &= ~1u;
    evaluator_for_endpoint = nw_path_create_evaluator_for_endpoint(*((void **)v7 + 1), v9);
    id v12 = (void *)*((void *)v7 + 3);
    *((void *)v7 + 3) = evaluator_for_endpoint;

    id v13 = (os_unfair_lock_s *)*((void *)v7 + 3);
    if (v13)
    {
      id v14 = v13 + 24;
      id v15 = v13;
      os_unfair_lock_lock(v14);
      id v16 = v15[6];
      os_unfair_lock_unlock(v14);
    }

    else
    {
      id v16 = 0LL;
    }

    uint64_t v17 = nw_path_copy_without_parameters(v16);
    uint64_t v18 = (void *)*((void *)v7 + 4);
    *((void *)v7 + 4) = v17;

    nw_path_evaluator_set_logging(*((void **)v7 + 3));
    id v19 = (void *)*((void *)v7 + 3);
    v21[0] = MEMORY[0x1895F87A8];
    v21[1] = 3221225472LL;
    v21[2] = ___ZL23nw_association_activateP25NWConcrete_nw_associationPU27objcproto16OS_nw_parameters8NSObjectbb_block_invoke;
    v21[3] = &unk_189BC8678;
    uint64_t v20 = (NWConcrete_nw_association *)v7;
    BOOL v22 = v20;
    nw_path_evaluator_set_update_handler(v19, 0LL, v21);
    if (a4) {
      nw_association_schedule_deactivation(v20);
    }
  }

  else if (a3)
  {
    nw_path_evaluator_force_update(*((void **)v7 + 3), 0LL);
  }
}

void sub_1825FDB18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void ___ZL23nw_association_activateP25NWConcrete_nw_associationPU27objcproto16OS_nw_parameters8NSObjectbb_block_invoke( uint64_t a1, void *a2)
{
}

void nw_association_schedule_deactivation(NWConcrete_nw_association *a1)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  nw_browse_descriptor_t v1 = a1;
  nw_browse_descriptor_t v2 = (uint64_t *)v1;
  if ((*((_BYTE *)v1 + 76) & 1) == 0)
  {
    handles = v1->handles;
    if (!handles || !*((_DWORD *)handles + 10))
    {
      id v4 = nw_path_parameters_copy_context(v1->path_parameters);
      v13[0] = MEMORY[0x1895F87A8];
      v13[1] = 3221225472LL;
      v13[2] = ___ZL36nw_association_schedule_deactivationP25NWConcrete_nw_association_block_invoke;
      v13[3] = &unk_189BC9238;
      id v5 = v4;
      id v14 = v5;
      id v6 = v2;
      id v15 = v6;
      v6[8] = nw_queue_context_create_source(v5, 2, 3, 0, v13, 0LL);
      uint64_t association_dormant_delay = nw_context_get_association_dormant_delay(v5);
      if (!association_dormant_delay) {
        uint64_t association_dormant_delay = 1000
      }
                                  * networkd_settings_get_int64_with_default( (const char *)nw_setting_association_dormant_delay,  10LL);
      uint64_t v8 = v6[8];
      dispatch_time_t v9 = dispatch_time(0x8000000000000000LL, 1000000 * association_dormant_delay);
      nw_queue_set_timer_values(v8, v9, 0xFFFFFFFFFFFFFFFFLL, 0x989680uLL);
      nw_queue_activate_source(v6[8], v10);
      if (!nw_path_parameters_get_logging_disabled(v2[2]))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        id v11 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          logging_description = nw_endpoint_get_logging_description((void *)v6[1]);
          *(_DWORD *)__int128 buf = 136446722;
          uint64_t v17 = "nw_association_schedule_deactivation";
          __int16 v18 = 2082;
          id v19 = logging_description;
          __int16 v20 = 2048;
          uint64_t v21 = association_dormant_delay;
          _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_INFO,  "%{public}s <nw_association %{public}s> will become dormant after %lldms of inactivity",  buf,  0x20u);
        }
      }
    }
  }
}

void sub_1825FDD68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void ___ZL36nw_association_schedule_deactivationP25NWConcrete_nw_association_block_invoke(uint64_t a1)
{
  uint64_t v53 = *MEMORY[0x1895F89C0];
  nw_context_assert_queue(*(void **)(a1 + 32));
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(v3 + 40);
  if (v4 && *(_DWORD *)(v4 + 40))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (os_log_s *)(id)gLogObj;
    os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    id v6 = *(const char **)(a1 + 40);
    *(_DWORD *)__int128 buf = 136446466;
    __int16 v48 = "nw_association_schedule_deactivation_block_invoke";
    __int16 v49 = 2114;
    id v50 = v6;
    id v7 = (void *)_os_log_send_and_compose_impl();

    free(v7);
    uint64_t v3 = *(void *)(a1 + 40);
  }

  if ((*(_BYTE *)(v3 + 76) & 1) == 0) {
    goto LABEL_8;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v8 = (os_log_s *)(id)gLogObj;
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  dispatch_time_t v9 = *(const char **)(a1 + 40);
  *(_DWORD *)__int128 buf = 136446466;
  __int16 v48 = "nw_association_schedule_deactivation_block_invoke";
  __int16 v49 = 2114;
  id v50 = v9;
  uint64_t v10 = (void *)_os_log_send_and_compose_impl();

  if (__nwlog_abort((uint64_t)v10))
  {
LABEL_79:
    __break(1u);
    return;
  }

  free(v10);
  uint64_t v3 = *(void *)(a1 + 40);
LABEL_8:
  uint64_t v11 = *(void *)(v3 + 64);
  if (v11)
  {
    nw_queue_cancel_source(v11, v2);
    *(void *)(*(void *)(a1 + 40) + 64LL) = 0LL;
    uint64_t v3 = *(void *)(a1 + 40);
  }

  if (!nw_path_parameters_get_logging_disabled(*(void *)(v3 + 16)))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    id v12 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      logging_description = nw_endpoint_get_logging_description(*(void **)(*(void *)(a1 + 40) + 8LL));
      *(_DWORD *)__int128 buf = 136446466;
      __int16 v48 = "nw_association_schedule_deactivation_block_invoke";
      __int16 v49 = 2082;
      id v50 = logging_description;
      _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_INFO,  "%{public}s <nw_association %{public}s> becoming dormant",  buf,  0x16u);
    }
  }

  *(_BYTE *)(*(void *)(a1 + 40) + 76LL) |= 1u;
  nw_path_evaluator_cancel(*(void **)(*(void *)(a1 + 40) + 24LL));
  id v14 = *(void **)(*(void *)(a1 + 40) + 24LL);
  *(void *)(*(void *)(a1 + 40) + 24LL) = 0LL;

  id v16 = *(os_unfair_lock_s **)(*(void *)(a1 + 40) + 48LL);
  if (v16)
  {
    if (v16[10]._os_unfair_lock_opaque)
    {
      if (nw_path_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 40) + 16LL))) {
        goto LABEL_31;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      id v17 = (id)gconnectionLogObj;
      __int16 v18 = nw_endpoint_get_logging_description(*(void **)(*(void *)(a1 + 40) + 8LL));
      *(_DWORD *)__int128 buf = 136446466;
      __int16 v48 = "nw_association_schedule_deactivation_block_invoke";
      __int16 v49 = 2082;
      id v50 = v18;
      id v19 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v45 = 0;
      if ((__nwlog_fault(v19, &type, &v45) & 1) == 0)
      {
LABEL_28:
        if (!v19) {
          goto LABEL_31;
        }
        goto LABEL_29;
      }

      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        __int16 v20 = (os_log_s *)(id)gconnectionLogObj;
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          uint64_t v22 = nw_endpoint_get_logging_description(*(void **)(*(void *)(a1 + 40) + 8LL));
          *(_DWORD *)__int128 buf = 136446466;
          __int16 v48 = "nw_association_schedule_deactivation_block_invoke";
          __int16 v49 = 2082;
          id v50 = v22;
          _os_log_impl( &dword_181A5C000,  v20,  v21,  "%{public}s <nw_association %{public}s> dormant, but connected flow handles is non-empty",  buf,  0x16u);
        }

void sub_1825FE714(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_association_mark_flow_disconnected(void *a1, void *a2)
{
  uint64_t v78 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    BOOL v57 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    BOOL v71 = "nw_association_mark_flow_disconnected";
    id v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v68 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v58 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v71 = "nw_association_mark_flow_disconnected";
        _os_log_impl(&dword_181A5C000, v17, v58, "%{public}s called with null association", buf, 0xCu);
      }
    }

    else if (v68)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v62 = type;
      BOOL v63 = os_log_type_enabled(v17, type);
      if (backtrace_string)
      {
        if (v63)
        {
          *(_DWORD *)__int128 buf = 136446466;
          BOOL v71 = "nw_association_mark_flow_disconnected";
          __int16 v72 = 2082;
          __int16 v73 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v17,  v62,  "%{public}s called with null association, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_106;
      }

      if (v63)
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v71 = "nw_association_mark_flow_disconnected";
        _os_log_impl(&dword_181A5C000, v17, v62, "%{public}s called with null association, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v66 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v71 = "nw_association_mark_flow_disconnected";
        _os_log_impl( &dword_181A5C000,  v17,  v66,  "%{public}s called with null association, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_1825FF7E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_association_get_connected_flow_count(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    id v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    os_log_type_t v18 = "nw_association_get_connected_flow_count";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v7, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          os_log_type_t v18 = "nw_association_get_connected_flow_count";
          _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null association", buf, 0xCu);
        }
      }

      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        BOOL v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)__int128 buf = 136446466;
            os_log_type_t v18 = "nw_association_get_connected_flow_count";
            __int16 v19 = 2082;
            __int16 v20 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null association, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }

        if (v12)
        {
          *(_DWORD *)__int128 buf = 136446210;
          os_log_type_t v18 = "nw_association_get_connected_flow_count";
          _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null association, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          os_log_type_t v18 = "nw_association_get_connected_flow_count";
          _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null association, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_1825FFB24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_path_flow_registration *nw_association_create_flow( uint64_t a1, int a2, int a3, int a4, int a5, _OWORD *a6, _DWORD *a7)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if (a1) {
    return nw_path_evaluator_create_flow_inner(*(void **)(a1 + 24), a2, a3, a5, a4, a6, 0LL, 0, a7);
  }
  __nwlog_obj();
  id v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  __int16 v19 = "nw_association_create_flow";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        __int16 v19 = "nw_association_create_flow";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null association", buf, 0xCu);
      }
    }

    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)__int128 buf = 136446466;
          __int16 v19 = "nw_association_create_flow";
          __int16 v20 = 2082;
          uint64_t v21 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null association, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_19;
      }

      if (v14)
      {
        *(_DWORD *)__int128 buf = 136446210;
        __int16 v19 = "nw_association_create_flow";
        _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null association, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        __int16 v19 = "nw_association_create_flow";
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null association, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_association_clear_cached_content_for_protocol(void *a1, void *a2)
{
}

NWConcrete_nw_interface_status_monitor *nw_connection_create_interface_status_monitor(void *a1)
{
  uint64_t v57 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = (id *)v1;
    id v4 = v3[2];

    id v5 = nw_parameters_copy_context(v4);
    id v6 = v5;
    if (!v5)
    {
      __nwlog_obj();
      id v25 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)__int128 buf = 136446210;
      uint64_t v54 = "nw_connection_create_interface_status_monitor";
      os_log_type_t v26 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v51 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          uint64_t v54 = "nw_connection_create_interface_status_monitor";
          _os_log_impl(&dword_181A5C000, v27, v28, "%{public}s called with null context", buf, 0xCu);
        }
      }

      else if (v51)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v39 = type;
        BOOL v40 = os_log_type_enabled(v27, type);
        if (backtrace_string)
        {
          if (v40)
          {
            *(_DWORD *)__int128 buf = 136446466;
            uint64_t v54 = "nw_connection_create_interface_status_monitor";
            __int16 v55 = 2082;
            os_log_type_t v56 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v27,  v39,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          if (!v26) {
            goto LABEL_89;
          }
          goto LABEL_88;
        }

        if (v40)
        {
          *(_DWORD *)__int128 buf = 136446210;
          uint64_t v54 = "nw_connection_create_interface_status_monitor";
          _os_log_impl(&dword_181A5C000, v27, v39, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v48 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          uint64_t v54 = "nw_connection_create_interface_status_monitor";
          _os_log_impl( &dword_181A5C000,  v27,  v48,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
        }
      }

      goto LABEL_86;
    }

    uint64_t v7 = (dispatch_queue_t *)v5;
    id v8 = v7;
    if (((_BYTE)v7[17] & 8) == 0) {
      dispatch_assert_queue_V2(v7[1]);
    }

    if ((*((_BYTE *)v3 + 109) & 0x40) != 0)
    {
      os_log_type_t v9 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_interface_status_monitor);
      if (v9)
      {
        uint64_t v10 = (OS_nw_channel *)nw_endpoint_handler_copy_channel(v3[18]);
        channel = v9->channel;
        v9->channel = v10;

        if (v9->channel)
        {
          BOOL v12 = (void *)nw_endpoint_handler_copy_connected_path(v3[18]);
          os_log_type_t v13 = v12;
          if (v12)
          {
            BOOL v14 = (OS_nw_interface *)nw_path_copy_interface(v12);
            interface = v9->interface;
            v9->interface = v14;
          }

          char v16 = v9;

          goto LABEL_19;
        }

        id v17 = v3[2];
        if (v17 && !nw_path_parameters_get_logging_disabled(v17[13]))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          os_log_type_t v18 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            int v19 = *((_DWORD *)v3 + 112);
            *(_DWORD *)__int128 buf = 136446466;
            uint64_t v54 = "nw_connection_create_interface_status_monitor";
            __int16 v55 = 1024;
            LODWORD(v56) = v19;
            _os_log_impl( &dword_181A5C000,  v18,  OS_LOG_TYPE_INFO,  "%{public}s [C%u] Cannot start an interface monitor, channel is not available",  buf,  0x12u);
          }
        }

void sub_182600B84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_interface_status_monitor_copy_interface(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[1];
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  char v16 = "nw_interface_status_monitor_copy_interface";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        char v16 = "nw_interface_status_monitor_copy_interface";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null monitor", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          char v16 = "nw_interface_status_monitor_copy_interface";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null monitor, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        char v16 = "nw_interface_status_monitor_copy_interface";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null monitor, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        char v16 = "nw_interface_status_monitor_copy_interface";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null monitor, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_interface_status_monitor_cancel(void *a1)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *((_BYTE *)v1 + 72) |= 1u;
    id v3 = (void *)v1[2];
    v1[2] = 0LL;

    uint64_t v5 = v2[7];
    if (v5)
    {
      nw_queue_cancel_source(v5, v4);
      v2[7] = 0LL;
    }

    uint64_t v6 = v2[8];
    if (v6)
    {
      nw_queue_cancel_source(v6, v4);
      v2[8] = 0LL;
    }

    uint64_t v7 = (const void *)v2[5];
    if (v7 && v2[6])
    {
      os_log_type_t v8 = _Block_copy(v7);
      os_log_type_t v9 = (dispatch_queue_s *)v2[6];
      block[0] = MEMORY[0x1895F87A8];
      block[1] = 3221225472LL;
      block[2] = __nw_interface_status_monitor_cancel_block_invoke;
      block[3] = &unk_189BC8740;
      id v30 = v8;
      id v10 = v8;
      dispatch_async(v9, block);
    }

    BOOL v11 = (const void *)v2[3];
    if (v11 && v2[4])
    {
      os_log_type_t v12 = _Block_copy(v11);
      char v13 = (dispatch_queue_s *)v2[4];
      v27[0] = MEMORY[0x1895F87A8];
      v27[1] = 3221225472LL;
      v27[2] = __nw_interface_status_monitor_cancel_block_invoke_2;
      v27[3] = &unk_189BC8740;
      id v28 = v12;
      id v14 = v12;
      dispatch_async(v13, v27);
    }

    os_log_type_t v15 = (void *)v2[5];
    v2[5] = 0LL;

    char v16 = (void *)v2[6];
    v2[6] = 0LL;

    __int16 v17 = (void *)v2[3];
    v2[3] = 0LL;

    os_log_type_t v18 = (void *)v2[4];
    v2[4] = 0LL;

    goto LABEL_13;
  }

  __nwlog_obj();
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  os_log_type_t v34 = "nw_interface_status_monitor_cancel";
  __int16 v20 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v32 = OS_LOG_TYPE_ERROR;
  char v31 = 0;
  if (__nwlog_fault(v20, &v32, &v31))
  {
    if (v32 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = v32;
      if (os_log_type_enabled(v21, v32))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v34 = "nw_interface_status_monitor_cancel";
        _os_log_impl(&dword_181A5C000, v21, v22, "%{public}s called with null monitor", buf, 0xCu);
      }
    }

    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v24 = v32;
      BOOL v25 = os_log_type_enabled(v21, v32);
      if (backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)__int128 buf = 136446466;
          os_log_type_t v34 = "nw_interface_status_monitor_cancel";
          __int16 v35 = 2082;
          os_log_type_t v36 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v21,  v24,  "%{public}s called with null monitor, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_30;
      }

      if (v25)
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v34 = "nw_interface_status_monitor_cancel";
        _os_log_impl(&dword_181A5C000, v21, v24, "%{public}s called with null monitor, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v26 = v32;
      if (os_log_type_enabled(v21, v32))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v34 = "nw_interface_status_monitor_cancel";
        _os_log_impl( &dword_181A5C000,  v21,  v26,  "%{public}s called with null monitor, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182601224(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_interface_status_monitor_cancel_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t __nw_interface_status_monitor_cancel_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void nw_interface_status_monitor_set_update_handler(void *a1, void *a2, void *a3)
{
  uint64_t v67 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  uint64_t v6 = a2;
  id v7 = a3;
  os_log_type_t v8 = v7;
  if (!v5)
  {
    __nwlog_obj();
    __int16 v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_update_handler";
    uint64_t v21 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v63[0] = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = type[0];
      if (os_log_type_enabled(v22, type[0]))
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_update_handler";
        _os_log_impl(&dword_181A5C000, v22, v23, "%{public}s called with null monitor", buf, 0xCu);
      }
    }

    else if (v63[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v29 = type[0];
      BOOL v30 = os_log_type_enabled(v22, type[0]);
      if (backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)__int128 buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_update_handler";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v22,  v29,  "%{public}s called with null monitor, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_70:
        if (!v21) {
          goto LABEL_14;
        }
LABEL_71:
        free(v21);
        goto LABEL_14;
      }

      if (v30)
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_update_handler";
        _os_log_impl(&dword_181A5C000, v22, v29, "%{public}s called with null monitor, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v36 = type[0];
      if (os_log_type_enabled(v22, type[0]))
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_update_handler";
        _os_log_impl( &dword_181A5C000,  v22,  v36,  "%{public}s called with null monitor, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_interface_status_monitor_set_update_handler_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void __nw_interface_status_monitor_set_update_handler_block_invoke_2( uint64_t a1, void *a2, uint64_t a3, int a4)
{
  os_log_type_t v8 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 40LL));
  os_log_type_t v9 = v8;
  if (v8 && (id v10 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 48LL)) != 0LL)
  {
    v16[0] = 0LL;
    v16[1] = v16;
    v16[2] = 0x2020000000LL;
    v16[3] = a2;
    v11[0] = MEMORY[0x1895F87A8];
    v11[1] = 3221225472LL;
    v11[2] = __nw_interface_status_monitor_set_update_handler_block_invoke_3;
    v11[3] = &unk_189BC8768;
    id v12 = v8;
    int v13 = v16;
    uint64_t v14 = a3;
    int v15 = a4;
    dispatch_async(v10, v11);

    _Block_object_dispose(v16, 8);
  }

  else if (a2)
  {
    free(a2);
  }
}

uint64_t __nw_interface_status_monitor_set_update_handler_block_invoke_4(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 40);
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 22LL;
  }
  return (*(uint64_t (**)(void, void, void, uint64_t))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  0LL,  0LL,  v2);
}

void __nw_interface_status_monitor_set_update_handler_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  if (v2)
  {
    free(v2);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0LL;
  }

void nw_interface_status_monitor_set_packet_event_handler(void *a1, void *a2, void *a3)
{
  uint64_t v66 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  uint64_t v6 = a2;
  id v7 = a3;
  os_log_type_t v8 = v7;
  if (!v5)
  {
    __nwlog_obj();
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_packet_event_handler";
    __int16 v20 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v62[0] = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = type[0];
      if (os_log_type_enabled(v21, type[0]))
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_packet_event_handler";
        _os_log_impl(&dword_181A5C000, v21, v22, "%{public}s called with null monitor", buf, 0xCu);
      }
    }

    else if (v62[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = type[0];
      BOOL v29 = os_log_type_enabled(v21, type[0]);
      if (backtrace_string)
      {
        if (v29)
        {
          *(_DWORD *)__int128 buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_packet_event_handler";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v21,  v28,  "%{public}s called with null monitor, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_68:
        if (!v20) {
          goto LABEL_13;
        }
LABEL_69:
        free(v20);
        goto LABEL_13;
      }

      if (v29)
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_packet_event_handler";
        _os_log_impl(&dword_181A5C000, v21, v28, "%{public}s called with null monitor, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v35 = type[0];
      if (os_log_type_enabled(v21, type[0]))
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_packet_event_handler";
        _os_log_impl( &dword_181A5C000,  v21,  v35,  "%{public}s called with null monitor, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_interface_status_monitor_set_packet_event_handler_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void __nw_interface_status_monitor_set_packet_event_handler_block_invoke_2( uint64_t a1, int a2, void *a3, uint64_t a4, int a5)
{
  id v10 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 24LL));
  uint64_t v11 = v10;
  if (v10 && (uint64_t v12 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 32LL)) != 0LL)
  {
    v19[0] = 0LL;
    v19[1] = v19;
    v19[2] = 0x2020000000LL;
    v19[3] = a3;
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    v13[2] = __nw_interface_status_monitor_set_packet_event_handler_block_invoke_3;
    v13[3] = &unk_189BC87E0;
    id v14 = v10;
    int v15 = v19;
    uint64_t v16 = a4;
    int v17 = a2;
    int v18 = a5;
    dispatch_async(v12, v13);

    _Block_object_dispose(v19, 8);
  }

  else if (a3)
  {
    free(a3);
  }
}

uint64_t __nw_interface_status_monitor_set_packet_event_handler_block_invoke_4(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 40);
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 22LL;
  }
  return (*(uint64_t (**)(void, void, void, void, uint64_t))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  0LL,  0LL,  0LL,  v2);
}

void __nw_interface_status_monitor_set_packet_event_handler_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  if (v2)
  {
    free(v2);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0LL;
  }

BOOL __nw_protocol_ip_identifier_block_invoke()
{
  unk_18C45F2DB = 0LL;
  unk_18C45F2D3 = 0LL;
  qword_18C45F2E8 = 0LL;
  unk_18C45F2E3 = 0LL;
  strcpy((char *)&nw_protocol_ip_identifier::identifier, "ip");
  qword_18C45F2F0 = 0x100000002LL;
  flowhash_seed = arc4random();
  return nw_protocol_register_extended(&nw_protocol_ip_identifier::identifier, (uint64_t)nw_protocol_ip_create);
}

void ___ZL26nw_protocol_ipv6_callbacksv_block_invoke()
{
  nw_protocol_ipv6_callbacks(void)::callbacks = nw_protocol_one_to_one_callbacks_new();
  nw_protocol_callbacks_set_add_input_handler( (void *)nw_protocol_ipv6_callbacks(void)::callbacks,  (uint64_t)nw_protocol_ipv6_add_input_handler);
  nw_protocol_callbacks_set_replace_input_handler( nw_protocol_ipv6_callbacks(void)::callbacks,  (uint64_t)nw_protocol_ipv6_replace_input_handler);
  nw_protocol_callbacks_set_remove_input_handler( nw_protocol_ipv6_callbacks(void)::callbacks,  (uint64_t)nw_protocol_ipv6_remove_input_handler);
  nw_protocol_callbacks_set_get_input_frames( nw_protocol_ipv6_callbacks(void)::callbacks,  (uint64_t)nw_protocol_ipv6_get_input_frames);
  nw_protocol_callbacks_set_get_output_frames( nw_protocol_ipv6_callbacks(void)::callbacks,  (uint64_t)nw_protocol_ipv6_get_output_frames);
  nw_protocol_callbacks_set_finalize_output_frames( nw_protocol_ipv6_callbacks(void)::callbacks,  (uint64_t)nw_protocol_ipv6_finalize_output_frames);
  nw_protocol_callbacks_set_connected(nw_protocol_ipv6_callbacks(void)::callbacks, (uint64_t)nw_protocol_ipv6_connected);
  nw_protocol_callbacks_set_disconnected( nw_protocol_ipv6_callbacks(void)::callbacks,  (uint64_t)nw_protocol_ipv6_disconnected);
  nw_protocol_callbacks_set_get_message_properties( nw_protocol_ipv6_callbacks(void)::callbacks,  (uint64_t)nw_protocol_ipv6_get_message_properties);
  nw_protocol_callbacks_set_copy_info(nw_protocol_ipv6_callbacks(void)::callbacks, (uint64_t)nw_protocol_ipv6_copy_info);
  nw_protocol_callbacks_set_updated_path( nw_protocol_ipv6_callbacks(void)::callbacks,  (uint64_t)nw_protocol_ipv6_updated_path);
  nw_protocol_callbacks_set_notify(nw_protocol_ipv6_callbacks(void)::callbacks, (uint64_t)nw_protocol_ipv6_notify);
  nw_protocol_callbacks_set_error(nw_protocol_ipv6_callbacks(void)::callbacks, (uint64_t)nw_protocol_ipv6_error);
}

uint64_t nw_protocol_ipv6_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v164 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    int v157 = "nw_protocol_ipv6_add_input_handler";
    char v68 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v154 = OS_LOG_TYPE_DEFAULT;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (v154 == OS_LOG_TYPE_DEFAULT)
      {
        char v69 = (os_log_s *)__nwlog_obj();
        os_log_type_t v70 = type[0];
        if (os_log_type_enabled(v69, type[0]))
        {
          *(_DWORD *)__int128 buf = 136446210;
          int v157 = "nw_protocol_ipv6_add_input_handler";
          BOOL v71 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_362;
        }

        goto LABEL_363;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      char v69 = (os_log_s *)__nwlog_obj();
      os_log_type_t v70 = type[0];
      BOOL v79 = os_log_type_enabled(v69, type[0]);
      if (!backtrace_string)
      {
        if (v79)
        {
          *(_DWORD *)__int128 buf = 136446210;
          int v157 = "nw_protocol_ipv6_add_input_handler";
          BOOL v71 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_362;
        }

        goto LABEL_363;
      }

      if (!v79) {
        goto LABEL_187;
      }
      *(_DWORD *)__int128 buf = 136446466;
      int v157 = "nw_protocol_ipv6_add_input_handler";
      __int16 v158 = 2082;
      uint64_t v159 = (nw_protocol_identifier *)backtrace_string;
      os_log_type_t v80 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_186;
    }

    char v69 = (os_log_s *)__nwlog_obj();
    os_log_type_t v70 = type[0];
    if (!os_log_type_enabled(v69, type[0])) {
      goto LABEL_363;
    }
    *(_DWORD *)__int128 buf = 136446210;
    int v157 = "nw_protocol_ipv6_add_input_handler";
    BOOL v71 = "%{public}s called with null protocol";
LABEL_362:
    _os_log_impl(&dword_181A5C000, v69, v70, v71, buf, 0xCu);
    goto LABEL_363;
  }

  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    int v157 = "nw_protocol_ipv6_add_input_handler";
    char v68 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v154 = OS_LOG_TYPE_DEFAULT;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (v154 == OS_LOG_TYPE_DEFAULT)
      {
        char v69 = (os_log_s *)__nwlog_obj();
        os_log_type_t v70 = type[0];
        if (os_log_type_enabled(v69, type[0]))
        {
          *(_DWORD *)__int128 buf = 136446210;
          int v157 = "nw_protocol_ipv6_add_input_handler";
          BOOL v71 = "%{public}s called with null ipv6, backtrace limit exceeded";
          goto LABEL_362;
        }

        goto LABEL_363;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      char v69 = (os_log_s *)__nwlog_obj();
      os_log_type_t v70 = type[0];
      BOOL v81 = os_log_type_enabled(v69, type[0]);
      if (!backtrace_string)
      {
        if (v81)
        {
          *(_DWORD *)__int128 buf = 136446210;
          int v157 = "nw_protocol_ipv6_add_input_handler";
          BOOL v71 = "%{public}s called with null ipv6, no backtrace";
          goto LABEL_362;
        }

        goto LABEL_363;
      }

      if (!v81) {
        goto LABEL_187;
      }
      *(_DWORD *)__int128 buf = 136446466;
      int v157 = "nw_protocol_ipv6_add_input_handler";
      __int16 v158 = 2082;
      uint64_t v159 = (nw_protocol_identifier *)backtrace_string;
      os_log_type_t v80 = "%{public}s called with null ipv6, dumping backtrace:%{public}s";
      goto LABEL_186;
    }

    char v69 = (os_log_s *)__nwlog_obj();
    os_log_type_t v70 = type[0];
    if (!os_log_type_enabled(v69, type[0])) {
      goto LABEL_363;
    }
    *(_DWORD *)__int128 buf = 136446210;
    int v157 = "nw_protocol_ipv6_add_input_handler";
    BOOL v71 = "%{public}s called with null ipv6";
    goto LABEL_362;
  }

  if (a1->default_input_handler)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    int v157 = "nw_protocol_ipv6_add_input_handler";
    char v68 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v154 = OS_LOG_TYPE_DEFAULT;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      char v69 = (os_log_s *)__nwlog_obj();
      os_log_type_t v70 = type[0];
      if (!os_log_type_enabled(v69, type[0])) {
        goto LABEL_363;
      }
      *(_DWORD *)__int128 buf = 136446210;
      int v157 = "nw_protocol_ipv6_add_input_handler";
      BOOL v71 = "%{public}s Default input handler already exists";
      goto LABEL_362;
    }

    if (v154 == OS_LOG_TYPE_DEFAULT)
    {
      char v69 = (os_log_s *)__nwlog_obj();
      os_log_type_t v70 = type[0];
      if (os_log_type_enabled(v69, type[0]))
      {
        *(_DWORD *)__int128 buf = 136446210;
        int v157 = "nw_protocol_ipv6_add_input_handler";
        BOOL v71 = "%{public}s Default input handler already exists, backtrace limit exceeded";
        goto LABEL_362;
      }

      goto LABEL_363;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    char v69 = (os_log_s *)__nwlog_obj();
    os_log_type_t v70 = type[0];
    BOOL v82 = os_log_type_enabled(v69, type[0]);
    if (!backtrace_string)
    {
      if (v82)
      {
        *(_DWORD *)__int128 buf = 136446210;
        int v157 = "nw_protocol_ipv6_add_input_handler";
        BOOL v71 = "%{public}s Default input handler already exists, no backtrace";
        goto LABEL_362;
      }

      goto LABEL_363;
    }

    if (!v82) {
      goto LABEL_187;
    }
    *(_DWORD *)__int128 buf = 136446466;
    int v157 = "nw_protocol_ipv6_add_input_handler";
    __int16 v158 = 2082;
    uint64_t v159 = (nw_protocol_identifier *)backtrace_string;
    os_log_type_t v80 = "%{public}s Default input handler already exists, dumping backtrace:%{public}s";
LABEL_186:
    _os_log_impl(&dword_181A5C000, v69, v70, v80, buf, 0x16u);
    goto LABEL_187;
  }

  if (!a2)
  {
    if (!strncmp("invalid", "quic", 4uLL)) {
      goto LABEL_152;
    }
    nw_protocol_set_flow_id_from_protocol(a1, 0LL);
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    int v157 = "__nw_protocol_get_output_handler";
    id v7 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v154 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v7, type, &v154))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v8 = (os_log_s *)__nwlog_obj();
        os_log_type_t v9 = type[0];
        if (!os_log_type_enabled(v8, type[0])) {
          goto LABEL_57;
        }
        *(_DWORD *)__int128 buf = 136446210;
        int v157 = "__nw_protocol_get_output_handler";
        id v10 = "%{public}s called with null protocol";
LABEL_56:
        _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
        goto LABEL_57;
      }

      if (v154 == OS_LOG_TYPE_DEFAULT)
      {
        os_log_type_t v8 = (os_log_s *)__nwlog_obj();
        os_log_type_t v9 = type[0];
        if (!os_log_type_enabled(v8, type[0])) {
          goto LABEL_57;
        }
        *(_DWORD *)__int128 buf = 136446210;
        int v157 = "__nw_protocol_get_output_handler";
        id v10 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_56;
      }

      os_log_type_t v25 = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type[0];
      BOOL v26 = os_log_type_enabled(v8, type[0]);
      if (!v25)
      {
        if (!v26) {
          goto LABEL_57;
        }
        *(_DWORD *)__int128 buf = 136446210;
        int v157 = "__nw_protocol_get_output_handler";
        id v10 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_56;
      }

      if (v26)
      {
        *(_DWORD *)__int128 buf = 136446466;
        int v157 = "__nw_protocol_get_output_handler";
        __int16 v158 = 2082;
        uint64_t v159 = (nw_protocol_identifier *)v25;
        _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v25);
    }

LABEL_344:
  if (v129) {
    free(v129);
  }
  uint64_t v55 = 0LL;
  if (v23)
  {
LABEL_226:
    if (a2->handle == &nw_protocol_ref_counted_handle)
    {
      uint32_t v114 = a2[1].callbacks;
      if (v114)
      {
        uint64_t v115 = (nw_protocol_callbacks *)((char *)v114 - 1);
        a2[1].callbacks = v115;
        if (!v115)
        {
          int v116 = *(void (***)(void))a2[1].flow_id;
          if (v116)
          {
            *(void *)a2[1].flow_id = 0LL;
            v116[2](v116);
            _Block_release(v116);
          }

          if ((a2[1].flow_id[8] & 1) != 0)
          {
            uint64_t v117 = *(const void **)a2[1].flow_id;
            if (v117) {
              _Block_release(v117);
            }
          }

          free(a2);
        }
      }
    }
  }

uint64_t nw_protocol_ipv6_replace_input_handler(nw_protocol *a1, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v20)
      {
        os_log_type_t v9 = (os_log_s *)__nwlog_obj();
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_75;
        }
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
        uint64_t v11 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_74;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (!v13) {
          goto LABEL_75;
        }
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
        uint64_t v11 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_74;
      }

      if (v13)
      {
        *(_DWORD *)__int128 buf = 136446466;
        BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
        __int16 v24 = 2082;
        os_log_type_t v25 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_75;
    }

    os_log_type_t v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_75;
    }
    *(_DWORD *)__int128 buf = 136446210;
    BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
    uint64_t v11 = "%{public}s called with null protocol";
    goto LABEL_74;
  }

  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v20)
      {
        os_log_type_t v9 = (os_log_s *)__nwlog_obj();
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_75;
        }
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
        uint64_t v11 = "%{public}s called with null ipv6, backtrace limit exceeded";
        goto LABEL_74;
      }

      id v14 = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (!v14)
      {
        if (!v15) {
          goto LABEL_75;
        }
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
        uint64_t v11 = "%{public}s called with null ipv6, no backtrace";
        goto LABEL_74;
      }

      if (!v15) {
        goto LABEL_52;
      }
      *(_DWORD *)__int128 buf = 136446466;
      BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
      __int16 v24 = 2082;
      os_log_type_t v25 = v14;
      uint64_t v16 = "%{public}s called with null ipv6, dumping backtrace:%{public}s";
      goto LABEL_51;
    }

    os_log_type_t v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_75;
    }
    *(_DWORD *)__int128 buf = 136446210;
    BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
    uint64_t v11 = "%{public}s called with null ipv6";
LABEL_74:
    _os_log_impl(&dword_181A5C000, v9, v10, v11, buf, 0xCu);
    goto LABEL_75;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v20)
      {
        os_log_type_t v9 = (os_log_s *)__nwlog_obj();
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_75;
        }
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
        uint64_t v11 = "%{public}s called with null old_input_protocol, backtrace limit exceeded";
        goto LABEL_74;
      }

      id v14 = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (!v14)
      {
        if (!v17) {
          goto LABEL_75;
        }
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
        uint64_t v11 = "%{public}s called with null old_input_protocol, no backtrace";
        goto LABEL_74;
      }

      if (!v17) {
        goto LABEL_52;
      }
      *(_DWORD *)__int128 buf = 136446466;
      BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
      __int16 v24 = 2082;
      os_log_type_t v25 = v14;
      uint64_t v16 = "%{public}s called with null old_input_protocol, dumping backtrace:%{public}s";
      goto LABEL_51;
    }

    os_log_type_t v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_75;
    }
    *(_DWORD *)__int128 buf = 136446210;
    BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
    uint64_t v11 = "%{public}s called with null old_input_protocol";
    goto LABEL_74;
  }

  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_75;
      }
      *(_DWORD *)__int128 buf = 136446210;
      BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
      uint64_t v11 = "%{public}s called with null new_input_protocol";
      goto LABEL_74;
    }

    if (!v20)
    {
      os_log_type_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_75;
      }
      *(_DWORD *)__int128 buf = 136446210;
      BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
      uint64_t v11 = "%{public}s called with null new_input_protocol, backtrace limit exceeded";
      goto LABEL_74;
    }

    id v14 = (char *)__nw_create_backtrace_string();
    os_log_type_t v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v18 = os_log_type_enabled(v9, type);
    if (!v14)
    {
      if (!v18) {
        goto LABEL_75;
      }
      *(_DWORD *)__int128 buf = 136446210;
      BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
      uint64_t v11 = "%{public}s called with null new_input_protocol, no backtrace";
      goto LABEL_74;
    }

    if (!v18) {
      goto LABEL_52;
    }
    *(_DWORD *)__int128 buf = 136446466;
    BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
    __int16 v24 = 2082;
    os_log_type_t v25 = v14;
    uint64_t v16 = "%{public}s called with null new_input_protocol, dumping backtrace:%{public}s";
LABEL_51:
    _os_log_impl(&dword_181A5C000, v9, v10, v16, buf, 0x16u);
    goto LABEL_52;
  }

  if (a3->identifier) {
    identifier = a3->identifier;
  }
  else {
    identifier = (nw_protocol_identifier *)"invalid";
  }
  if (strncmp(identifier->name, "quic", 4uLL)) {
    return nw_protocol_common_replace_input_handler((uint64_t)a1, a2, (uint64_t)a3);
  }
  __nwlog_obj();
  *(_DWORD *)__int128 buf = 136446210;
  BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v8, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_75;
      }
      *(_DWORD *)__int128 buf = 136446210;
      BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
      uint64_t v11 = "%{public}s Attempt to add quic to ip";
      goto LABEL_74;
    }

    if (!v20)
    {
      os_log_type_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_75;
      }
      *(_DWORD *)__int128 buf = 136446210;
      BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
      uint64_t v11 = "%{public}s Attempt to add quic to ip, backtrace limit exceeded";
      goto LABEL_74;
    }

    id v14 = (char *)__nw_create_backtrace_string();
    os_log_type_t v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v19 = os_log_type_enabled(v9, type);
    if (!v14)
    {
      if (!v19) {
        goto LABEL_75;
      }
      *(_DWORD *)__int128 buf = 136446210;
      BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
      uint64_t v11 = "%{public}s Attempt to add quic to ip, no backtrace";
      goto LABEL_74;
    }

    if (v19)
    {
      *(_DWORD *)__int128 buf = 136446466;
      BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
      __int16 v24 = 2082;
      os_log_type_t v25 = v14;
      uint64_t v16 = "%{public}s Attempt to add quic to ip, dumping backtrace:%{public}s";
      goto LABEL_51;
    }

uint64_t nw_protocol_ipv6_remove_input_handler(nw_protocol *a1, nw_protocol *a2, uint64_t a3)
{
  uint64_t v62 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    os_log_type_t v59 = "nw_protocol_ipv6_remove_input_handler";
    BOOL v44 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v56 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v56)
      {
        os_log_type_t v41 = (os_log_s *)__nwlog_obj();
        os_log_type_t v42 = type;
        if (!os_log_type_enabled(v41, type)) {
          goto LABEL_117;
        }
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v59 = "nw_protocol_ipv6_remove_input_handler";
        BOOL v43 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_116;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v41 = (os_log_s *)__nwlog_obj();
      os_log_type_t v42 = type;
      BOOL v51 = os_log_type_enabled(v41, type);
      if (!backtrace_string)
      {
        if (!v51) {
          goto LABEL_117;
        }
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v59 = "nw_protocol_ipv6_remove_input_handler";
        BOOL v43 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_116;
      }

      if (v51)
      {
        *(_DWORD *)__int128 buf = 136446466;
        os_log_type_t v59 = "nw_protocol_ipv6_remove_input_handler";
        __int16 v60 = 2082;
        uint64_t v61 = backtrace_string;
        uint64_t v52 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_99:
        _os_log_impl(&dword_181A5C000, v41, v42, v52, buf, 0x16u);
      }

uint64_t nw_protocol_ipv6_get_input_frames( nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v206 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_get_input_frames";
    os_log_type_t v125 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v192) = 16;
    v188[0] = OS_LOG_TYPE_DEFAULT;
    if (v192 == 17)
    {
      v122 = (os_log_s *)__nwlog_obj();
      os_log_type_t v123 = v192;
      if (os_log_type_enabled(v122, (os_log_type_t)v192))
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_get_input_frames";
        uint32_t v124 = "%{public}s called with null protocol";
LABEL_244:
        _os_log_impl(&dword_181A5C000, v122, v123, v124, buf, 0xCu);
      }

uint64_t nw_protocol_ipv6_get_output_frames( nw_protocol *a1, nw_protocol *a2, size_t __count, unsigned int a4, int a5, nw_frame_array_s *a6)
{
  uint64_t v86 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if (a1->handle == &nw_protocol_ref_counted_handle)
    {
      int v8 = __count;
      if (a5
        && LODWORD(a1[3].output_handler_context) < __count
        && (BYTE6(a1[3].output_handler_context) & 8) == 0)
      {
        BOOL v9 = nw_calloc_type<unsigned char>(__count);
        uint64_t v10 = nw_frame_create( 0,  v9,  v8,  (uint64_t)nw_protocol_ipv6_frame_output_finalizer,  (uint64_t)&a1[1].output_handler);
        uint64_t v11 = v10;
        if (v10)
        {
          *(_WORD *)(v10 + 204) |= 1u;
          *(void *)(v10 + 16) = 0LL;
          output_handler = a1[3].output_handler;
          *(void *)(v10 + 24) = output_handler;
          *(void *)output_handler->flow_id = v10;
          a1[3].output_handler = (nw_protocol *)(v10 + 16);
LABEL_65:
          *(void *)(v11 + 32) = 0LL;
          tqh_last = a6->tqh_last;
          *(void *)(v11 + 40) = tqh_last;
          *tqh_last = (nw_frame *)v11;
          a6->tqh_last = (nw_frame **)(v11 + 32);
          return 1LL;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)__int128 buf = 136446466;
        BOOL v81 = "nw_protocol_ipv6_create_output_frame";
        __int16 v82 = 1024;
        *(_DWORD *)BOOL v83 = v8;
        int v33 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v78 = 0;
        if (__nwlog_fault(v33, &type, &v78))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v34 = (os_log_s *)gLogObj;
            os_log_type_t v35 = type;
            if (os_log_type_enabled((os_log_t)gLogObj, type))
            {
              *(_DWORD *)__int128 buf = 136446466;
              BOOL v81 = "nw_protocol_ipv6_create_output_frame";
              __int16 v82 = 1024;
              *(_DWORD *)BOOL v83 = v8;
              char v36 = "%{public}s nw_frame_create(%u) failed";
LABEL_60:
              _os_log_impl(&dword_181A5C000, v34, v35, v36, buf, 0x12u);
            }
          }

          else if (v78)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v34 = (os_log_s *)gLogObj;
            os_log_type_t v35 = type;
            BOOL v38 = os_log_type_enabled((os_log_t)gLogObj, type);
            if (backtrace_string)
            {
              if (v38)
              {
                *(_DWORD *)__int128 buf = 136446722;
                BOOL v81 = "nw_protocol_ipv6_create_output_frame";
                __int16 v82 = 1024;
                *(_DWORD *)BOOL v83 = v8;
                *(_WORD *)&v83[4] = 2082;
                *(void *)&v83[6] = backtrace_string;
                _os_log_impl( &dword_181A5C000,  v34,  v35,  "%{public}s nw_frame_create(%u) failed, dumping backtrace:%{public}s",  buf,  0x1Cu);
              }

              free(backtrace_string);
              goto LABEL_61;
            }

            if (v38)
            {
              *(_DWORD *)__int128 buf = 136446466;
              BOOL v81 = "nw_protocol_ipv6_create_output_frame";
              __int16 v82 = 1024;
              *(_DWORD *)BOOL v83 = v8;
              char v36 = "%{public}s nw_frame_create(%u) failed, no backtrace";
              goto LABEL_60;
            }
          }

          else
          {
            uint64_t v34 = (os_log_s *)__nwlog_obj();
            os_log_type_t v35 = type;
            if (os_log_type_enabled(v34, type))
            {
              *(_DWORD *)__int128 buf = 136446466;
              BOOL v81 = "nw_protocol_ipv6_create_output_frame";
              __int16 v82 = 1024;
              *(_DWORD *)BOOL v83 = v8;
              char v36 = "%{public}s nw_frame_create(%u) failed, backtrace limit exceeded";
              goto LABEL_60;
            }
          }
        }

uint64_t nw_protocol_ipv6_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  uint64_t v54 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    int v47 = "nw_protocol_ipv6_finalize_output_frames";
    char v24 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v25 = (os_log_s *)__nwlog_obj();
      os_log_type_t v26 = type;
      if (!os_log_type_enabled(v25, type)) {
        goto LABEL_90;
      }
      *(_DWORD *)__int128 buf = 136446210;
      int v47 = "nw_protocol_ipv6_finalize_output_frames";
      os_log_type_t v27 = "%{public}s called with null protocol";
LABEL_89:
      _os_log_impl(&dword_181A5C000, v25, v26, v27, buf, 0xCu);
      goto LABEL_90;
    }

    if (!v44)
    {
      int v25 = (os_log_s *)__nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        int v47 = "nw_protocol_ipv6_finalize_output_frames";
        os_log_type_t v27 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_89;
      }

      goto LABEL_90;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v25 = (os_log_s *)__nwlog_obj();
    os_log_type_t v26 = type;
    BOOL v32 = os_log_type_enabled(v25, type);
    if (!backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)__int128 buf = 136446210;
        int v47 = "nw_protocol_ipv6_finalize_output_frames";
        os_log_type_t v27 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_89;
      }

      goto LABEL_90;
    }

    if (!v32) {
      goto LABEL_63;
    }
    *(_DWORD *)__int128 buf = 136446466;
    int v47 = "nw_protocol_ipv6_finalize_output_frames";
    __int16 v48 = 2082;
    os_log_type_t v49 = backtrace_string;
    int v33 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_62:
    _os_log_impl(&dword_181A5C000, v25, v26, v33, buf, 0x16u);
    goto LABEL_63;
  }

  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    int v47 = "nw_protocol_ipv6_finalize_output_frames";
    char v24 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v25 = (os_log_s *)__nwlog_obj();
      os_log_type_t v26 = type;
      if (!os_log_type_enabled(v25, type)) {
        goto LABEL_90;
      }
      *(_DWORD *)__int128 buf = 136446210;
      int v47 = "nw_protocol_ipv6_finalize_output_frames";
      os_log_type_t v27 = "%{public}s called with null ipv6";
      goto LABEL_89;
    }

    if (!v44)
    {
      int v25 = (os_log_s *)__nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        int v47 = "nw_protocol_ipv6_finalize_output_frames";
        os_log_type_t v27 = "%{public}s called with null ipv6, backtrace limit exceeded";
        goto LABEL_89;
      }

      goto LABEL_90;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v25 = (os_log_s *)__nwlog_obj();
    os_log_type_t v26 = type;
    BOOL v34 = os_log_type_enabled(v25, type);
    if (!backtrace_string)
    {
      if (v34)
      {
        *(_DWORD *)__int128 buf = 136446210;
        int v47 = "nw_protocol_ipv6_finalize_output_frames";
        os_log_type_t v27 = "%{public}s called with null ipv6, no backtrace";
        goto LABEL_89;
      }

      goto LABEL_90;
    }

    if (!v34) {
      goto LABEL_63;
    }
    *(_DWORD *)__int128 buf = 136446466;
    int v47 = "nw_protocol_ipv6_finalize_output_frames";
    __int16 v48 = 2082;
    os_log_type_t v49 = backtrace_string;
    int v33 = "%{public}s called with null ipv6, dumping backtrace:%{public}s";
    goto LABEL_62;
  }

  v38[0] = MEMORY[0x1895F87A8];
  v38[1] = 0x40000000LL;
  char v39 = ___ZL39nw_protocol_ipv6_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke;
  os_log_type_t v40 = &__block_descriptor_tmp_49_85642;
  p_output_handler = &a1[1].output_handler;
  os_log_type_t v42 = a2;
  BOOL v43 = a1;
  tqh_first = a2->tqh_first;
  do
  {
    if (!tqh_first) {
      break;
    }
    id v5 = (nw_frame *)*((void *)tqh_first + 4);
    char v6 = ((uint64_t (*)(void *))v39)(v38);
    tqh_first = v5;
  }

  while ((v6 & 1) != 0);
  output_handler = a1->output_handler;
  if (!output_handler)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    int v47 = "__nw_protocol_finalize_output_frames";
    char v24 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v25 = (os_log_s *)__nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        int v47 = "__nw_protocol_finalize_output_frames";
        os_log_type_t v27 = "%{public}s called with null protocol";
        goto LABEL_89;
      }

void nw_protocol_ipv6_connected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v94 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_connected";
    BOOL v55 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v83 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v56 = (os_log_s *)__nwlog_obj();
      os_log_type_t v57 = type;
      if (!os_log_type_enabled(v56, type)) {
        goto LABEL_171;
      }
      *(_DWORD *)__int128 buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_connected";
      BOOL v58 = "%{public}s called with null protocol";
      goto LABEL_170;
    }

    if (!v83)
    {
      os_log_type_t v56 = (os_log_s *)__nwlog_obj();
      os_log_type_t v57 = type;
      if (!os_log_type_enabled(v56, type)) {
        goto LABEL_171;
      }
      *(_DWORD *)__int128 buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_connected";
      BOOL v58 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_170;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v56 = (os_log_s *)__nwlog_obj();
    os_log_type_t v57 = type;
    BOOL v67 = os_log_type_enabled(v56, type);
    if (!backtrace_string)
    {
      if (!v67) {
        goto LABEL_171;
      }
      *(_DWORD *)__int128 buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_connected";
      BOOL v58 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_170;
    }

    if (v67)
    {
      *(_DWORD *)__int128 buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_connected";
      __int16 v86 = 2082;
      BOOL v87 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v56,  v57,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
LABEL_171:
    if (!v55) {
      return;
    }
    goto LABEL_172;
  }

  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_connected";
    BOOL v55 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v83 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v56 = (os_log_s *)__nwlog_obj();
      os_log_type_t v57 = type;
      if (!os_log_type_enabled(v56, type)) {
        goto LABEL_171;
      }
      *(_DWORD *)__int128 buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_connected";
      BOOL v58 = "%{public}s called with null ipv6";
      goto LABEL_170;
    }

    if (!v83)
    {
      os_log_type_t v56 = (os_log_s *)__nwlog_obj();
      os_log_type_t v57 = type;
      if (!os_log_type_enabled(v56, type)) {
        goto LABEL_171;
      }
      *(_DWORD *)__int128 buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_connected";
      BOOL v58 = "%{public}s called with null ipv6, backtrace limit exceeded";
      goto LABEL_170;
    }

    char v68 = (char *)__nw_create_backtrace_string();
    os_log_type_t v56 = (os_log_s *)__nwlog_obj();
    os_log_type_t v57 = type;
    BOOL v69 = os_log_type_enabled(v56, type);
    if (v68)
    {
      if (v69)
      {
        *(_DWORD *)__int128 buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_connected";
        __int16 v86 = 2082;
        BOOL v87 = v68;
        _os_log_impl( &dword_181A5C000,  v56,  v57,  "%{public}s called with null ipv6, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v68);
      if (!v55) {
        return;
      }
LABEL_172:
      os_log_type_t v42 = (nw_protocol *)v55;
LABEL_88:
      free(v42);
      return;
    }

    if (v69)
    {
      *(_DWORD *)__int128 buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_connected";
      BOOL v58 = "%{public}s called with null ipv6, no backtrace";
LABEL_170:
      _os_log_impl(&dword_181A5C000, v56, v57, v58, buf, 0xCu);
      goto LABEL_171;
    }

    goto LABEL_171;
  }

  if ((BYTE6(a1[3].output_handler_context) & 1) == 0)
  {
    if (gLogDatapath)
    {
      os_log_type_t v59 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_connected";
        __int16 v86 = 2082;
        BOOL v87 = (char *)&a1[3].output_handler_context + 7;
        __int16 v88 = 2080;
        uint64_t v89 = " ";
        __int16 v90 = 2048;
        p_output_handler = (char *)&a1[1].output_handler;
        _os_log_impl( &dword_181A5C000,  v59,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s%p Got a connected event from the lower layer",  buf,  0x2Au);
      }
    }
  }

  default_input_handler = a1->default_input_handler;
  if (a1->output_handler != a2)
  {
    if (!default_input_handler) {
      return;
    }
    callbacks = default_input_handler->callbacks;
    if (!callbacks) {
      return;
    }
    if (!a2) {
      return;
    }
    connected = (void (*)(nw_protocol *, nw_protocol *))callbacks->connected;
    if (!connected) {
      return;
    }
    uint64_t handle = default_input_handler->handle;
    if (handle == &nw_protocol_ref_counted_handle)
    {
      int v8 = default_input_handler[1].callbacks;
      if (v8) {
        default_input_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&v8->add_input_handler + 1);
      }
    }

    if (a2->handle != &nw_protocol_ref_counted_handle)
    {
      connected(default_input_handler, a2);
      goto LABEL_77;
    }

    int v23 = a2[1].callbacks;
    if (v23) {
      a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v23->add_input_handler + 1);
    }
    connected(default_input_handler, a2);
    if (a2->handle == &nw_protocol_ref_counted_handle)
    {
      char v24 = a2[1].callbacks;
      if (v24)
      {
        int v25 = (nw_protocol_callbacks *)((char *)v24 - 1);
        a2[1].callbacks = v25;
        if (!v25)
        {
          os_log_type_t v26 = *(void (***)(void))a2[1].flow_id;
          if (v26)
          {
            *(void *)a2[1].flow_id = 0LL;
            v26[2](v26);
            _Block_release(v26);
          }

          if ((a2[1].flow_id[8] & 1) != 0)
          {
            os_log_type_t v27 = *(const void **)a2[1].flow_id;
            if (v27) {
              _Block_release(v27);
            }
          }

          os_log_type_t v28 = a2;
LABEL_76:
          free(v28);
          goto LABEL_77;
        }
      }
    }

    goto LABEL_77;
  }

  if (!default_input_handler)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
    BOOL v70 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v83 = 0;
    if (__nwlog_fault(v70, &type, &v83))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v71 = (os_log_s *)__nwlog_obj();
        os_log_type_t v72 = type;
        if (os_log_type_enabled(v71, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
          BOOL v73 = "%{public}s called with null protocol";
LABEL_188:
          _os_log_impl(&dword_181A5C000, v71, v72, v73, buf, 0xCu);
        }
      }

      else if (v83)
      {
        int v77 = (char *)__nw_create_backtrace_string();
        os_log_type_t v71 = (os_log_s *)__nwlog_obj();
        os_log_type_t v72 = type;
        BOOL v78 = os_log_type_enabled(v71, type);
        if (v77)
        {
          if (v78)
          {
            *(_DWORD *)__int128 buf = 136446466;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
            __int16 v86 = 2082;
            BOOL v87 = v77;
            _os_log_impl( &dword_181A5C000,  v71,  v72,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v77);
          goto LABEL_189;
        }

        if (v78)
        {
          *(_DWORD *)__int128 buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
          BOOL v73 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_188;
        }
      }

      else
      {
        os_log_type_t v71 = (os_log_s *)__nwlog_obj();
        os_log_type_t v72 = type;
        if (os_log_type_enabled(v71, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
          BOOL v73 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_188;
        }
      }
    }

void nw_protocol_ipv6_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    os_log_type_t v27 = "nw_protocol_ipv6_disconnected";
    uint64_t default_input_handler = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v24)
      {
        BOOL v17 = (os_log_s *)__nwlog_obj();
        os_log_type_t v18 = type;
        if (!os_log_type_enabled(v17, type)) {
          goto LABEL_59;
        }
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v27 = "nw_protocol_ipv6_disconnected";
        int v19 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_58;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v21 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (!v21) {
          goto LABEL_59;
        }
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v27 = "nw_protocol_ipv6_disconnected";
        int v19 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_58;
      }

      if (!v21)
      {
LABEL_48:
        free(backtrace_string);
        if (!default_input_handler) {
          return;
        }
LABEL_30:
        free((void *)default_input_handler);
        return;
      }

      *(_DWORD *)__int128 buf = 136446466;
      os_log_type_t v27 = "nw_protocol_ipv6_disconnected";
      __int16 v28 = 2082;
      BOOL v29 = backtrace_string;
      char v22 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_47:
      _os_log_impl(&dword_181A5C000, v17, v18, v22, buf, 0x16u);
      goto LABEL_48;
    }

    BOOL v17 = (os_log_s *)__nwlog_obj();
    os_log_type_t v18 = type;
    if (!os_log_type_enabled(v17, type)) {
      goto LABEL_59;
    }
    *(_DWORD *)__int128 buf = 136446210;
    os_log_type_t v27 = "nw_protocol_ipv6_disconnected";
    int v19 = "%{public}s called with null protocol";
LABEL_58:
    _os_log_impl(&dword_181A5C000, v17, v18, v19, buf, 0xCu);
LABEL_59:
    if (!default_input_handler) {
      return;
    }
    goto LABEL_30;
  }

  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    os_log_type_t v27 = "nw_protocol_ipv6_disconnected";
    uint64_t default_input_handler = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_59;
      }
      *(_DWORD *)__int128 buf = 136446210;
      os_log_type_t v27 = "nw_protocol_ipv6_disconnected";
      int v19 = "%{public}s called with null ipv6";
      goto LABEL_58;
    }

    if (!v24)
    {
      BOOL v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_59;
      }
      *(_DWORD *)__int128 buf = 136446210;
      os_log_type_t v27 = "nw_protocol_ipv6_disconnected";
      int v19 = "%{public}s called with null ipv6, backtrace limit exceeded";
      goto LABEL_58;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v17 = (os_log_s *)__nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v23 = os_log_type_enabled(v17, type);
    if (backtrace_string)
    {
      if (!v23) {
        goto LABEL_48;
      }
      *(_DWORD *)__int128 buf = 136446466;
      os_log_type_t v27 = "nw_protocol_ipv6_disconnected";
      __int16 v28 = 2082;
      BOOL v29 = backtrace_string;
      char v22 = "%{public}s called with null ipv6, dumping backtrace:%{public}s";
      goto LABEL_47;
    }

    if (!v23) {
      goto LABEL_59;
    }
    *(_DWORD *)__int128 buf = 136446210;
    os_log_type_t v27 = "nw_protocol_ipv6_disconnected";
    int v19 = "%{public}s called with null ipv6, no backtrace";
    goto LABEL_58;
  }

  a1[2].identifier = 0LL;
  uint64_t default_input_handler = (uint64_t)a1->default_input_handler;
  if (default_input_handler)
  {
    uint64_t v4 = *(void *)(default_input_handler + 24);
    if (v4)
    {
      id v5 = *(void (**)(uint64_t, nw_protocol *))(v4 + 48);
      if (v5)
      {
        char v6 = *(void **)(default_input_handler + 40);
        if (v6 == &nw_protocol_ref_counted_handle)
        {
          uint64_t v7 = *(void *)(default_input_handler + 88);
          if (v7) {
            *(void *)(default_input_handler + 88) = v7 + 1;
          }
        }

        callbacks = a1[1].callbacks;
        if (callbacks) {
          a1[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
        }
        v5(default_input_handler, a1);
        if (a1->handle == &nw_protocol_ref_counted_handle)
        {
          BOOL v9 = a1[1].callbacks;
          if (v9)
          {
            uint64_t v10 = (nw_protocol_callbacks *)((char *)v9 - 1);
            a1[1].callbacks = v10;
            if (!v10)
            {
              uint64_t v11 = *(void (***)(void))a1[1].flow_id;
              if (v11)
              {
                *(void *)a1[1].flow_id = 0LL;
                v11[2](v11);
                _Block_release(v11);
              }

              if ((a1[1].flow_id[8] & 1) != 0)
              {
                uint64_t v12 = *(const void **)a1[1].flow_id;
                if (v12) {
                  _Block_release(v12);
                }
              }

              free(a1);
            }
          }
        }

        if (v6 == &nw_protocol_ref_counted_handle
          && *(_UNKNOWN **)(default_input_handler + 40) == &nw_protocol_ref_counted_handle)
        {
          uint64_t v13 = *(void *)(default_input_handler + 88);
          if (v13)
          {
            uint64_t v14 = v13 - 1;
            *(void *)(default_input_handler + 88) = v14;
            if (!v14)
            {
              id v15 = *(void (***)(void))(default_input_handler + 64);
              if (v15)
              {
                *(void *)(default_input_handler + 64) = 0LL;
                v15[2](v15);
                _Block_release(v15);
              }

              if ((*(_BYTE *)(default_input_handler + 72) & 1) != 0)
              {
                uint64_t v16 = *(const void **)(default_input_handler + 64);
                if (v16) {
                  _Block_release(v16);
                }
              }

              goto LABEL_30;
            }
          }
        }
      }
    }
  }

void nw_protocol_ipv6_get_message_properties(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    id v15 = "nw_protocol_ipv6_get_message_properties";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)__int128 buf = 136446210;
      id v15 = "nw_protocol_ipv6_get_message_properties";
      uint64_t v7 = "%{public}s called with null protocol";
    }

    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)__int128 buf = 136446466;
          id v15 = "nw_protocol_ipv6_get_message_properties";
          __int16 v16 = 2082;
          BOOL v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_34:
        if (!v4) {
          return;
        }
LABEL_35:
        free(v4);
        return;
      }

      if (!v9) {
        goto LABEL_34;
      }
      *(_DWORD *)__int128 buf = 136446210;
      id v15 = "nw_protocol_ipv6_get_message_properties";
      uint64_t v7 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      id v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)__int128 buf = 136446210;
      id v15 = "nw_protocol_ipv6_get_message_properties";
      uint64_t v7 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

BOOL nw_protocol_ipv6_copy_info(uint64_t a1, int a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    char v20 = "nw_protocol_ipv6_copy_info";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v17)
      {
        uint64_t v7 = (os_log_s *)__nwlog_obj();
        os_log_type_t v8 = type;
        if (!os_log_type_enabled(v7, type)) {
          goto LABEL_36;
        }
        *(_DWORD *)__int128 buf = 136446210;
        char v20 = "nw_protocol_ipv6_copy_info";
        BOOL v9 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_35;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (!v11) {
          goto LABEL_36;
        }
        *(_DWORD *)__int128 buf = 136446210;
        char v20 = "nw_protocol_ipv6_copy_info";
        BOOL v9 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_35;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446466;
        char v20 = "nw_protocol_ipv6_copy_info";
        __int16 v21 = 2082;
        uint64_t v22 = (uint64_t)backtrace_string;
        char v12 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_25:
        _os_log_impl(&dword_181A5C000, v7, v8, v12, buf, 0x16u);
      }

uint64_t nw_protocol_ipv6_updated_path(nw_protocol *a1, nw_protocol *a2, nw_path *a3)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    uint64_t v18 = "nw_protocol_ipv6_updated_path";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_45;
      }
      *(_DWORD *)__int128 buf = 136446210;
      uint64_t v18 = "nw_protocol_ipv6_updated_path";
      BOOL v9 = "%{public}s called with null protocol";
LABEL_44:
      _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      goto LABEL_45;
    }

    if (!v15)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v18 = "nw_protocol_ipv6_updated_path";
        BOOL v9 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_44;
      }

      goto LABEL_45;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v11 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v18 = "nw_protocol_ipv6_updated_path";
        BOOL v9 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_44;
      }

      goto LABEL_45;
    }

    if (!v11) {
      goto LABEL_31;
    }
    *(_DWORD *)__int128 buf = 136446466;
    uint64_t v18 = "nw_protocol_ipv6_updated_path";
    __int16 v19 = 2082;
    char v20 = backtrace_string;
    char v12 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_30:
    _os_log_impl(&dword_181A5C000, v7, v8, v12, buf, 0x16u);
    goto LABEL_31;
  }

  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    uint64_t v18 = "nw_protocol_ipv6_updated_path";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_45;
      }
      *(_DWORD *)__int128 buf = 136446210;
      uint64_t v18 = "nw_protocol_ipv6_updated_path";
      BOOL v9 = "%{public}s called with null ipv6";
      goto LABEL_44;
    }

    if (!v15)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v18 = "nw_protocol_ipv6_updated_path";
        BOOL v9 = "%{public}s called with null ipv6, backtrace limit exceeded";
        goto LABEL_44;
      }

      goto LABEL_45;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v13 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v18 = "nw_protocol_ipv6_updated_path";
        BOOL v9 = "%{public}s called with null ipv6, no backtrace";
        goto LABEL_44;
      }

      goto LABEL_45;
    }

    if (!v13) {
      goto LABEL_31;
    }
    *(_DWORD *)__int128 buf = 136446466;
    uint64_t v18 = "nw_protocol_ipv6_updated_path";
    __int16 v19 = 2082;
    char v20 = backtrace_string;
    char v12 = "%{public}s called with null ipv6, dumping backtrace:%{public}s";
    goto LABEL_30;
  }

  if (a3)
  {
    LODWORD(a1[3].output_handler_context) = nw_path_get_maximum_packet_size(a3);
    LODWORD(a1[3].handle) = nw_path_get_mtu(a3);
    return 1LL;
  }

  __nwlog_obj();
  *(_DWORD *)__int128 buf = 136446210;
  uint64_t v18 = "nw_protocol_ipv6_updated_path";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v15)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v18 = "nw_protocol_ipv6_updated_path";
        BOOL v9 = "%{public}s called with null path, backtrace limit exceeded";
        goto LABEL_44;
      }

      goto LABEL_45;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v14 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v18 = "nw_protocol_ipv6_updated_path";
        BOOL v9 = "%{public}s called with null path, no backtrace";
        goto LABEL_44;
      }

      goto LABEL_45;
    }

    if (v14)
    {
      *(_DWORD *)__int128 buf = 136446466;
      uint64_t v18 = "nw_protocol_ipv6_updated_path";
      __int16 v19 = 2082;
      char v20 = backtrace_string;
      char v12 = "%{public}s called with null path, dumping backtrace:%{public}s";
      goto LABEL_30;
    }

void nw_protocol_ipv6_notify(uint64_t a1, uint64_t a2, unsigned int a3, _BYTE *a4, uint64_t a5)
{
  uint64_t v58 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    os_log_type_t v49 = "nw_protocol_ipv6_notify";
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v23 = (os_log_s *)__nwlog_obj();
      os_log_type_t v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_131;
      }
      *(_DWORD *)__int128 buf = 136446210;
      os_log_type_t v49 = "nw_protocol_ipv6_notify";
      uint64_t v25 = "%{public}s called with null protocol";
    }

    else if (v46)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v23 = (os_log_s *)__nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v27 = os_log_type_enabled(v23, type);
      if (backtrace_string)
      {
        if (v27)
        {
          *(_DWORD *)__int128 buf = 136446466;
          os_log_type_t v49 = "nw_protocol_ipv6_notify";
          __int16 v50 = 2082;
          BOOL v51 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v23,  v24,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_131:
        if (!v22) {
          return;
        }
        goto LABEL_132;
      }

      if (!v27) {
        goto LABEL_131;
      }
      *(_DWORD *)__int128 buf = 136446210;
      os_log_type_t v49 = "nw_protocol_ipv6_notify";
      uint64_t v25 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      __int16 v23 = (os_log_s *)__nwlog_obj();
      os_log_type_t v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_131;
      }
      *(_DWORD *)__int128 buf = 136446210;
      os_log_type_t v49 = "nw_protocol_ipv6_notify";
      uint64_t v25 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_130;
  }

  if (*(_UNKNOWN **)(a1 + 40) != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    os_log_type_t v49 = "nw_protocol_ipv6_notify";
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v46)
      {
        __int16 v23 = (os_log_s *)__nwlog_obj();
        os_log_type_t v24 = type;
        if (!os_log_type_enabled(v23, type)) {
          goto LABEL_131;
        }
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v49 = "nw_protocol_ipv6_notify";
        uint64_t v25 = "%{public}s called with null ipv6, backtrace limit exceeded";
        goto LABEL_130;
      }

      __int16 v28 = (char *)__nw_create_backtrace_string();
      __int16 v23 = (os_log_s *)__nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v29 = os_log_type_enabled(v23, type);
      if (!v28)
      {
        if (!v29) {
          goto LABEL_131;
        }
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v49 = "nw_protocol_ipv6_notify";
        uint64_t v25 = "%{public}s called with null ipv6, no backtrace";
        goto LABEL_130;
      }

      if (!v29) {
        goto LABEL_99;
      }
      *(_DWORD *)__int128 buf = 136446466;
      os_log_type_t v49 = "nw_protocol_ipv6_notify";
      __int16 v50 = 2082;
      BOOL v51 = v28;
      uint64_t v30 = "%{public}s called with null ipv6, dumping backtrace:%{public}s";
      goto LABEL_98;
    }

    __int16 v23 = (os_log_s *)__nwlog_obj();
    os_log_type_t v24 = type;
    if (!os_log_type_enabled(v23, type)) {
      goto LABEL_131;
    }
    *(_DWORD *)__int128 buf = 136446210;
    os_log_type_t v49 = "nw_protocol_ipv6_notify";
    uint64_t v25 = "%{public}s called with null ipv6";
LABEL_130:
    _os_log_impl(&dword_181A5C000, v23, v24, v25, buf, 0xCu);
    goto LABEL_131;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    os_log_type_t v49 = "nw_protocol_ipv6_notify";
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v46)
      {
        __int16 v23 = (os_log_s *)__nwlog_obj();
        os_log_type_t v24 = type;
        if (!os_log_type_enabled(v23, type)) {
          goto LABEL_131;
        }
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v49 = "nw_protocol_ipv6_notify";
        uint64_t v25 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_130;
      }

      __int16 v28 = (char *)__nw_create_backtrace_string();
      __int16 v23 = (os_log_s *)__nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v31 = os_log_type_enabled(v23, type);
      if (!v28)
      {
        if (!v31) {
          goto LABEL_131;
        }
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v49 = "nw_protocol_ipv6_notify";
        uint64_t v25 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_130;
      }

      if (!v31) {
        goto LABEL_99;
      }
      *(_DWORD *)__int128 buf = 136446466;
      os_log_type_t v49 = "nw_protocol_ipv6_notify";
      __int16 v50 = 2082;
      BOOL v51 = v28;
      uint64_t v30 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_98;
    }

    __int16 v23 = (os_log_s *)__nwlog_obj();
    os_log_type_t v24 = type;
    if (!os_log_type_enabled(v23, type)) {
      goto LABEL_131;
    }
    *(_DWORD *)__int128 buf = 136446210;
    os_log_type_t v49 = "nw_protocol_ipv6_notify";
    uint64_t v25 = "%{public}s called with null other_protocol";
    goto LABEL_130;
  }

  uint64_t v8 = a1 + 96;
  if (a3 == 17)
  {
    if (*(void *)(a1 + 32) != a2) {
      goto LABEL_13;
    }
    char v12 = *(void **)(a2 + 40);
    if (v12 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v13 = *(void *)(a2 + 88);
      if (v13) {
        *(void *)(a2 + 88) = v13 + 1;
      }
    }

    uint64_t v14 = *(void *)(a2 + 24);
    if (v14)
    {
      char v15 = *(uint64_t (**)(uint64_t))(v14 + 200);
      if (v15)
      {
        BOOL v16 = (nw_endpoint *)v15(a2);
        if (v12 != &nw_protocol_ref_counted_handle)
        {
LABEL_22:
          if (v16)
          {
            if (nw_endpoint_get_address_family(v16) == 30)
            {
              *(sockaddr *)(a1 + 152) = *(sockaddr *)&nw_endpoint_get_address(v16)->sa_data[6];
              if ((*(_BYTE *)(a1 + 254) & 1) == 0)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                char v17 = (os_log_s *)gLogObj;
                if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)__int128 buf = 136446978;
                  os_log_type_t v49 = "nw_protocol_ipv6_notify";
                  __int16 v50 = 2082;
                  BOOL v51 = (void *)(a1 + 255);
                  __int16 v52 = 2080;
                  os_log_type_t v53 = " ";
                  __int16 v54 = 2048;
                  BOOL v55 = (char *)v8;
                  _os_log_impl( &dword_181A5C000,  v17,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s%p updated local address",  buf,  0x2Au);
                }
              }
            }
          }

          goto LABEL_13;
        }

void nw_protocol_ipv6_error(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v48 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    BOOL v41 = "nw_protocol_ipv6_error";
    uint64_t default_input_handler = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (v38)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v14 = (os_log_s *)__nwlog_obj();
        os_log_type_t v15 = type;
        BOOL v33 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v33)
          {
            *(_DWORD *)__int128 buf = 136446466;
            BOOL v41 = "nw_protocol_ipv6_error";
            __int16 v42 = 2082;
            BOOL v43 = backtrace_string;
            uint64_t v19 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
            goto LABEL_33;
          }

uint64_t ___ZL39nw_protocol_ipv6_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke( uint64_t a1, uint64_t a2)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  if (nw_frame_get_finalizer_context(a2) == *(void *)(a1 + 32))
  {
    uint64_t v11 = *(void *)(a2 + 32);
    char v12 = *(void **)(a2 + 40);
    if (v11)
    {
      *(void *)(v11 + 40) = v12;
      char v12 = *(void **)(a2 + 40);
    }

    else
    {
      *(void *)(*(void *)(a1 + 40) + 8LL) = v12;
    }

    *char v12 = v11;
    *(void *)(a2 + 32) = 0LL;
    *(void *)(a2 + 40) = 0LL;
    nw_frame_finalize(a2);
  }

  else
  {
    nw_frame_unclaim(a2, v4, 0x28u, 0);
    int v30 = 0;
    uint64_t v5 = (_DWORD *)nw_frame_unclaimed_bytes(a2, &v30);
    uint64_t v6 = *(void *)(a1 + 32);
    if (v5)
    {
      uint64_t v7 = v5;
      uint64_t v8 = *(void *)(v6 + 48);
      if (v8) {
        ++*(void *)(v8 + 192);
      }
      unsigned int v9 = *(_DWORD *)(v6 + 144) & 0xFFFFFF0F;
      *uint64_t v5 = v9;
      if (a2)
      {
        int v10 = v9 | ((*(_BYTE *)(a2 + 186) & 3) << 12);
        *uint64_t v5 = v10;
        if (*(_BYTE *)(a2 + 184))
        {
          unsigned int v9 = v10 | bswap32((*(_BYTE *)(a2 + 184) & 0x3F) << 22);
          *uint64_t v5 = v9;
        }

void nw_protocol_ipv6_frame_output_finalizer(nw_frame *a1, int a2, void *a3)
{
  uint64_t v128 = *MEMORY[0x1895F89C0];
  if (!a2) {
    goto LABEL_49;
  }
  unsigned int v113 = 0;
  uint64_t v5 = nw_frame_unclaimed_bytes((uint64_t)a1, &v113);
  if (!v5 || !v113) {
    goto LABEL_49;
  }
  uint64_t v6 = v5;
  v111[0] = 0LL;
  v111[1] = v111;
  int v112 = 0;
  v111[2] = 0x2000000000LL;
  uint32_t v7 = arc4random();
  v110[0] = 0LL;
  v110[1] = v110;
  uint64_t v8 = *(a3 - 8);
  uint64_t v9 = MEMORY[0x1895F87A8];
  int v10 = (void *)&unk_182665000;
  if (!v8)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    uint64_t v117 = "__nw_protocol_get_output_frames";
    __int16 v60 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v115 = OS_LOG_TYPE_ERROR;
    char v114 = 0;
    if (v115 == OS_LOG_TYPE_FAULT)
    {
      BOOL v61 = (os_log_s *)__nwlog_obj();
      os_log_type_t v62 = v115;
      if (!os_log_type_enabled(v61, v115)) {
        goto LABEL_152;
      }
      *(_DWORD *)__int128 buf = 136446210;
      uint64_t v117 = "__nw_protocol_get_output_frames";
      os_log_type_t v63 = "%{public}s called with null protocol";
    }

    else if (v114)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v61 = (os_log_s *)__nwlog_obj();
      os_log_type_t v62 = v115;
      BOOL v74 = os_log_type_enabled(v61, v115);
      if (backtrace_string)
      {
        if (v74)
        {
          *(_DWORD *)__int128 buf = 136446466;
          uint64_t v117 = "__nw_protocol_get_output_frames";
          __int16 v118 = 2082;
          BOOL v119 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v61,  v62,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        int v10 = (void *)&unk_182665000;
        goto LABEL_152;
      }

      int v10 = (void *)&unk_182665000;
      if (!v74)
      {
LABEL_152:
        if (v60) {
          free(v60);
        }
        goto LABEL_27;
      }

      *(_DWORD *)__int128 buf = 136446210;
      uint64_t v117 = "__nw_protocol_get_output_frames";
      os_log_type_t v63 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      BOOL v61 = (os_log_s *)__nwlog_obj();
      os_log_type_t v62 = v115;
      if (!os_log_type_enabled(v61, v115)) {
        goto LABEL_152;
      }
      *(_DWORD *)__int128 buf = 136446210;
      uint64_t v117 = "__nw_protocol_get_output_frames";
      os_log_type_t v63 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v61, v62, v63, buf, 0xCu);
    goto LABEL_152;
  }

  uint32_t v11 = v7;
  unsigned int v12 = *((_DWORD *)a3 + 38);
  int v13 = *((_DWORD *)a3 + 35);
  uint64_t v14 = *(void **)(v8 + 40);
  if (v14 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v15 = *(void *)(v8 + 88);
    if (v15) {
      *(void *)(v8 + 88) = v15 + 1;
    }
  }

  BOOL v16 = (void *)*(a3 - 7);
  if (v16 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v17 = *(a3 - 1);
    if (v17) {
      *(a3 - 1) = v17 + 1;
    }
  }

  uint64_t v18 = *(void *)(v8 + 24);
  if (v18)
  {
    uint64_t v19 = *(uint64_t (**)(uint64_t, void *, void, void, uint64_t, void *))(v18 + 88);
    if (v19)
    {
      unsigned int v20 = v19(v8, a3 - 12, v13 + v13 * (v113 / v12), v13 + v13 * (v113 / v12), 32LL, v110);
      if (v16 != &nw_protocol_ref_counted_handle) {
        goto LABEL_15;
      }
      goto LABEL_14;
    }
  }

  __nwlog_obj();
  __int16 v54 = *(const char **)(v8 + 16);
  *(_DWORD *)__int128 buf = 136446722;
  uint64_t v117 = "__nw_protocol_get_output_frames";
  if (!v54) {
    __int16 v54 = "invalid";
  }
  __int16 v118 = 2082;
  BOOL v119 = (char *)v54;
  __int16 v120 = 2048;
  v121 = (const char *)v8;
  BOOL v55 = (const char *)_os_log_send_and_compose_impl();
  os_log_type_t v115 = OS_LOG_TYPE_ERROR;
  char v114 = 0;
  int v95 = (char *)v55;
  if (__nwlog_fault(v55, &v115, &v114))
  {
    if (v115 == OS_LOG_TYPE_FAULT)
    {
      __int16 v56 = (os_log_s *)__nwlog_obj();
      os_log_type_t v57 = v115;
      os_log_t log = v56;
      if (!os_log_type_enabled(v56, v115)) {
        goto LABEL_129;
      }
      uint64_t v58 = *(const char **)(v8 + 16);
      if (!v58) {
        uint64_t v58 = "invalid";
      }
      *(_DWORD *)__int128 buf = 136446722;
      uint64_t v117 = "__nw_protocol_get_output_frames";
      __int16 v118 = 2082;
      BOOL v119 = (char *)v58;
      __int16 v120 = 2048;
      v121 = (const char *)v8;
      os_log_type_t v59 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback";
LABEL_127:
      uint32_t v85 = log;
      os_log_type_t v86 = v57;
LABEL_128:
      _os_log_impl(&dword_181A5C000, v85, v86, v59, buf, 0x20u);
      goto LABEL_129;
    }

    if (!v114)
    {
      char v83 = (os_log_s *)__nwlog_obj();
      os_log_type_t v57 = v115;
      os_log_t log = v83;
      if (!os_log_type_enabled(v83, v115)) {
        goto LABEL_129;
      }
      __int16 v84 = *(const char **)(v8 + 16);
      if (!v84) {
        __int16 v84 = "invalid";
      }
      *(_DWORD *)__int128 buf = 136446722;
      uint64_t v117 = "__nw_protocol_get_output_frames";
      __int16 v118 = 2082;
      BOOL v119 = (char *)v84;
      __int16 v120 = 2048;
      v121 = (const char *)v8;
      os_log_type_t v59 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, backtrace limit exceeded";
      goto LABEL_127;
    }

    __int16 v64 = (char *)__nw_create_backtrace_string();
    os_log_t loga = (os_log_s *)__nwlog_obj();
    os_log_type_t type = v115;
    BOOL v65 = os_log_type_enabled(loga, v115);
    if (v64)
    {
      if (v65)
      {
        uint64_t v66 = *(const char **)(v8 + 16);
        if (!v66) {
          uint64_t v66 = "invalid";
        }
        *(_DWORD *)__int128 buf = 136446978;
        uint64_t v117 = "__nw_protocol_get_output_frames";
        __int16 v118 = 2082;
        BOOL v119 = (char *)v66;
        __int16 v120 = 2048;
        v121 = (const char *)v8;
        __int16 v122 = 2082;
        os_log_type_t v123 = v64;
        _os_log_impl( &dword_181A5C000,  loga,  type,  "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, dumping backtrace:%{public}s",  buf,  0x2Au);
      }

      free(v64);
    }

    else if (v65)
    {
      BOOL v87 = *(const char **)(v8 + 16);
      if (!v87) {
        BOOL v87 = "invalid";
      }
      *(_DWORD *)__int128 buf = 136446722;
      uint64_t v117 = "__nw_protocol_get_output_frames";
      __int16 v118 = 2082;
      BOOL v119 = (char *)v87;
      __int16 v120 = 2048;
      v121 = (const char *)v8;
      os_log_type_t v59 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, no backtrace";
      uint32_t v85 = loga;
      os_log_type_t v86 = type;
      goto LABEL_128;
    }
  }

uint64_t ___ZL34nw_protocol_ipv6_get_output_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke( uint64_t a1, _DWORD *a2)
{
  if ((*(_BYTE *)(*(void *)(a1 + 32) + 158LL) & 2) != 0)
  {
    unsigned int v4 = nw_frame_unclaimed_length(a2);
    if (v4 >= 0x500) {
      int v3 = v4 - 1280;
    }
    else {
      int v3 = 0;
    }
  }

  else
  {
    int v3 = 0;
  }

  nw_frame_claim((uint64_t)a2, (uint64_t)a2, 40, v3);
  return 1LL;
}

uint64_t ___ZL39nw_protocol_ipv6_frame_output_finalizerP8nw_framebPv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  int v3 = *(void **)(a2 + 40);
  if (v2)
  {
    *(void *)(v2 + 40) = v3;
    int v3 = *(void **)(a2 + 40);
  }

  else
  {
    *(void *)(*(void *)(a1 + 32) + 8LL) = v3;
  }

  *int v3 = v2;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  nw_frame_finalize(a2);
  return 1LL;
}

uint64_t ___ZL39nw_protocol_ipv6_frame_output_finalizerP8nw_framebPv_block_invoke_47(uint64_t a1, uint64_t a2)
{
  uint64_t v57 = *MEMORY[0x1895F89C0];
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) >= *(_DWORD *)(a1 + 72)
    || (v40 = 0, unsigned int v4 = (unsigned int *)nw_frame_unclaimed_bytes(a2, &v40), v5 = v40, v40 <= 0x2F))
  {
    uint64_t v6 = *(void *)(a2 + 32);
    uint32_t v7 = *(void **)(a2 + 40);
    if (v6)
    {
      *(void *)(v6 + 40) = v7;
      uint32_t v7 = *(void **)(a2 + 40);
    }

    else
    {
      *(void *)(*(void *)(a1 + 40) + 8LL) = v7;
    }

    *uint32_t v7 = v6;
    *(void *)(a2 + 32) = 0LL;
    *(void *)(a2 + 40) = 0LL;
    nw_frame_finalize(a2);
    return 1LL;
  }

  uint64_t v8 = v4;
  uint64_t v9 = *(void *)(a1 + 48);
  if (v4)
  {
    unsigned int v10 = *(_DWORD *)(v9 + 136);
    if (v40 > v10)
    {
      unsigned int v40 = *(_DWORD *)(v9 + 136);
      unsigned int v5 = v10;
    }

    unint64_t v11 = v5 - 48LL;
    unint64_t v12 = (*(_DWORD *)(a1 + 72) - *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
    else {
      size_t v13 = v11 & 0xFFFFFFF8;
    }
    uint64_t v14 = *(void *)(v9 + 48);
    if (v14) {
      ++*(void *)(v14 + 232);
    }
    unsigned int v15 = *(_DWORD *)(v9 + 144) & 0xFFFFFF0F;
    *unsigned int v4 = v15;
    uint64_t v16 = *(void *)(a1 + 56);
    if (v16)
    {
      unsigned int v17 = (*(_BYTE *)(v16 + 186) & 3) << 20;
LABEL_17:
      *uint64_t v8 = v15 | bswap32(v17);
      *(_BYTE *)uint64_t v8 = v15 & 0xF | 0x60;
      *((_BYTE *)v8 + 6) = 44;
      *((_BYTE *)v8 + 7) = *(_BYTE *)(*(void *)(a1 + 48) + 157LL);
      *(_OWORD *)(v8 + 2) = *(_OWORD *)(*(void *)(a1 + 48) + 56LL);
      *(_OWORD *)(v8 + 6) = *(_OWORD *)(*(void *)(a1 + 48) + 72LL);
      *((_WORD *)v8 + 2) = bswap32(v13 + 8) >> 16;
      uint64_t v18 = *(void *)(a1 + 48);
      *((_BYTE *)v8 + 40) = *(_BYTE *)(v18 + 156);
      *((_BYTE *)v8 + 41) = 0;
      v8[11] = *(_DWORD *)(a1 + 76);
      *((_WORD *)v8 + 21) = (bswap32(*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) >> 16) | ((v11 <= v12) << 8);
      ++*(void *)v18;
      if ((*(_BYTE *)(v18 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          uint64_t v30 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v31 = *(void *)(a1 + 48);
            uint64_t v32 = (const char *)(v31 + 159);
            uint64_t v33 = "";
            if (!v31) {
              uint64_t v32 = "";
            }
            int v34 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
            if (v31) {
              uint64_t v33 = " ";
            }
            int v35 = *(_DWORD *)(a1 + 76);
            *(_DWORD *)__int128 buf = 136447746;
            __int16 v44 = "nw_protocol_ipv6_frame_output_finalizer_block_invoke";
            __int16 v45 = 2082;
            uint64_t v46 = (void *)v32;
            __int16 v47 = 2080;
            uint64_t v48 = v33;
            __int16 v49 = 2048;
            uint64_t v50 = v31;
            __int16 v51 = 1024;
            int v52 = v13;
            __int16 v53 = 1024;
            int v54 = v34;
            __int16 v55 = 1024;
            int v56 = v35;
            _os_log_impl( &dword_181A5C000,  v30,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s%p Writing fragment of length %u at offset %u with ID %u",  buf,  0x3Cu);
          }
        }
      }

      memcpy( v8 + 12,  (const void *)(*(void *)(a1 + 64) + *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)),  v13);
      nw_frame_claim(a2, v19, v13 + 48, 0);
      nw_frame_collapse(a2);
      nw_frame_unclaim(a2, v20, v13 + 48, 0);
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += v13;
      return 1LL;
    }

    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    __int16 v44 = "__nw_frame_get_ecn_flag";
    unsigned int v26 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    __int16 v39 = (char *)v26;
    if (__nwlog_fault(v26, &type, &v41))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v27 = (os_log_s *)__nwlog_obj();
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          __int16 v44 = "__nw_frame_get_ecn_flag";
          uint64_t v29 = "%{public}s called with null frame";
LABEL_49:
          _os_log_impl(&dword_181A5C000, v27, v28, v29, buf, 0xCu);
        }
      }

      else
      {
        unint64_t v36 = v11;
        if (v41)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          int v27 = (os_log_s *)__nwlog_obj();
          os_log_type_t v28 = type;
          BOOL v38 = os_log_type_enabled(v27, type);
          if (backtrace_string)
          {
            if (v38)
            {
              *(_DWORD *)__int128 buf = 136446466;
              __int16 v44 = "__nw_frame_get_ecn_flag";
              __int16 v45 = 2082;
              uint64_t v46 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v27,  v28,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(backtrace_string);
            unint64_t v11 = v36;
            goto LABEL_50;
          }

          unint64_t v11 = v36;
          if (v38)
          {
            *(_DWORD *)__int128 buf = 136446210;
            __int16 v44 = "__nw_frame_get_ecn_flag";
            uint64_t v29 = "%{public}s called with null frame, no backtrace";
            goto LABEL_49;
          }
        }

        else
        {
          int v27 = (os_log_s *)__nwlog_obj();
          os_log_type_t v28 = type;
          if (os_log_type_enabled(v27, type))
          {
            *(_DWORD *)__int128 buf = 136446210;
            __int16 v44 = "__nw_frame_get_ecn_flag";
            uint64_t v29 = "%{public}s called with null frame, backtrace limit exceeded";
            goto LABEL_49;
          }
        }
      }
    }

uint64_t ___ZL33nw_protocol_ipv6_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke( void *a1, uint64_t a2, __n128 a3, __n128 a4)
{
  uint64_t v50 = *MEMORY[0x1895F89C0];
  uint64_t v6 = *(void *)(a1[4] + 8LL);
  if (!*(_BYTE *)(v6 + 24))
  {
    if (a2)
    {
      unsigned int v8 = *(unsigned __int16 *)(a2 + 204) | (*(unsigned __int8 *)(a2 + 206) << 16);
      goto LABEL_12;
    }

uint64_t nw_protocol_ipv6_process_reassembly(uint64_t a1, int a2, uint64_t a3, int a4, _BYTE *a5)
{
  uint64_t v95 = *MEMORY[0x1895F89C0];
  uint64_t v8 = *(void *)(a1 + 88);
  if (!v8)
  {
    uint64_t v12 = 0LL;
    goto LABEL_82;
  }

  if (!a5 && *(_DWORD *)(a1 + 148) == a2 && a4 == 0)
  {
    uint64_t v12 = 0LL;
LABEL_83:
    *(_DWORD *)(a1 + 148) = a2;
    return v12;
  }

  if (!a3)
  {
    uint64_t v12 = 0LL;
    if (!a4) {
      goto LABEL_82;
    }
    goto LABEL_75;
  }

  uint64_t v88 = 0LL;
  BOOL v89 = &v88;
  uint64_t v90 = 0x2000000000LL;
  char v91 = 0;
  uint64_t v84 = 0LL;
  uint32_t v85 = &v84;
  uint64_t v86 = 0x2000000000LL;
  __int16 v87 = 0;
  uint64_t v13 = MEMORY[0x1895F87A8];
  v78[0] = MEMORY[0x1895F87A8];
  v78[1] = 0x40000000LL;
  BOOL v79 = (uint64_t (*)(void *))___ZL43nw_protocol_ipv6_append_reassembled_packetsP16nw_protocol_ipv6P16nw_frame_array_sPb_block_invoke;
  os_log_type_t v80 = &unk_189BC8B18;
  __int16 v82 = &v88;
  uint64_t v83 = a1;
  BOOL v81 = &v84;
  do
  {
    if (!v8) {
      break;
    }
    uint64_t v14 = *(void *)(v8 + 32);
    char v15 = v79(v78);
    uint64_t v8 = v14;
  }

  while ((v15 & 1) != 0);
  if (!*((_BYTE *)v89 + 24))
  {
    if ((*(_BYTE *)(a1 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        os_log_type_t v62 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
        {
          int v63 = *(_DWORD *)(a1 + 148);
          *(_DWORD *)__int128 buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_append_reassembled_packets";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = a1 + 159;
          *(_WORD *)&buf[22] = 2080;
          *(void *)&_BYTE buf[24] = " ";
          LOWORD(v93) = 2048;
          *(void *)((char *)&v93 + 2) = a1;
          WORD5(v93) = 1024;
          HIDWORD(v93) = v63;
          _os_log_impl( &dword_181A5C000,  v62,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s%p Fragments for IPv6 Fragment ID %u incomplete",  buf,  0x30u);
        }
      }
    }

    uint64_t v12 = 0LL;
    if (a5) {
      *a5 = 1;
    }
    goto LABEL_74;
  }

  int v16 = *((unsigned __int16 *)v85 + 12) + 40;
  uint64_t v17 = nw_calloc_type<unsigned char>(*((unsigned __int16 *)v85 + 12) + 40LL);
  uint64_t v18 = nw_frame_create(0, v17, v16, (uint64_t)nw_protocol_ipv6_frame_input_finalizer, a1);
  if (!v18)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_append_reassembled_packets";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = v16;
    BOOL v31 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v75[0]) = 0;
    if (__nwlog_fault(v31, type, v75))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v32 = (os_log_s *)__nwlog_obj();
        os_log_type_t v33 = type[0];
        if (os_log_type_enabled(v32, type[0]))
        {
          *(_DWORD *)__int128 buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_append_reassembled_packets";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = v16;
          os_log_type_t v34 = "%{public}s nw_frame_create(%u) failed";
LABEL_54:
          _os_log_impl(&dword_181A5C000, v32, v33, v34, buf, 0x12u);
        }
      }

      else if (LOBYTE(v75[0]))
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v32 = (os_log_s *)__nwlog_obj();
        os_log_type_t v33 = type[0];
        BOOL v36 = os_log_type_enabled(v32, type[0]);
        if (backtrace_string)
        {
          if (v36)
          {
            *(_DWORD *)__int128 buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_append_reassembled_packets";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = v16;
            *(_WORD *)&buf[18] = 2082;
            *(void *)&buf[20] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v32,  v33,  "%{public}s nw_frame_create(%u) failed, dumping backtrace:%{public}s",  buf,  0x1Cu);
          }

          free(backtrace_string);
          goto LABEL_55;
        }

        if (v36)
        {
          *(_DWORD *)__int128 buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_append_reassembled_packets";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = v16;
          os_log_type_t v34 = "%{public}s nw_frame_create(%u) failed, no backtrace";
          goto LABEL_54;
        }
      }

      else
      {
        uint64_t v32 = (os_log_s *)__nwlog_obj();
        os_log_type_t v33 = type[0];
        if (os_log_type_enabled(v32, type[0]))
        {
          *(_DWORD *)__int128 buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_append_reassembled_packets";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = v16;
          os_log_type_t v34 = "%{public}s nw_frame_create(%u) failed, backtrace limit exceeded";
          goto LABEL_54;
        }
      }
    }

uint64_t ___ZL33nw_protocol_ipv6_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_36( void *a1, uint64_t a2, __n128 a3, __n128 a4)
{
  if (!nw_protocol_ipv6_process_input_frame( a1[7],  a2,  a1[8],  a1[9],  (_DWORD *)(*(void *)(a1[4] + 8LL) + 24LL),  (_DWORD *)(*(void *)(a1[5] + 8LL) + 24LL),  a3,  a4))
  {
    --*(_DWORD *)(*(void *)(a1[4] + 8LL) + 24LL);
    uint64_t v6 = *(void *)(a2 + 32);
    int v7 = *(void **)(a2 + 40);
    if (v6)
    {
      *(void *)(v6 + 40) = v7;
      int v7 = *(void **)(a2 + 40);
    }

    else
    {
      *(void *)(a1[8] + 8LL) = v7;
    }

    *int v7 = v6;
    *(void *)(a2 + 32) = 0LL;
    *(void *)(a2 + 40) = 0LL;
    nw_frame_finalize(a2);
    *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
  }

  return 1LL;
}

uint64_t ___ZL33nw_protocol_ipv6_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_2( uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t v3 = *(void *)(a2 + 32);
  unsigned int v4 = *(void **)(a2 + 40);
  if (v3)
  {
    *(void *)(v3 + 40) = v4;
    unsigned int v4 = *(void **)(a2 + 40);
  }

  else
  {
    *(void *)(*(void *)(a1 + 32) + 8LL) = v4;
  }

  *unsigned int v4 = v3;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  nw_frame_finalize(a2);
  uint64_t v5 = *(void *)(a1 + 40);
  if (!v5 || (*(_BYTE *)(v5 + 158) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v6 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      uint64_t v8 = (const char *)(v7 + 159);
      if (!v7) {
        uint64_t v8 = "";
      }
      int v11 = 136446978;
      uint64_t v12 = "nw_protocol_ipv6_get_input_frames_block_invoke_2";
      __int16 v13 = 2082;
      uint64_t v14 = v8;
      if (v7) {
        uint64_t v9 = " ";
      }
      else {
        uint64_t v9 = "";
      }
      __int16 v15 = 2080;
      int v16 = v9;
      __int16 v17 = 2048;
      uint64_t v18 = v7;
      _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s%p Dropping unused IPv6 extra fragment",  (uint8_t *)&v11,  0x2Au);
    }
  }

  return 1LL;
}

BOOL nw_protocol_ipv6_process_input_frame( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, _DWORD *a6, __n128 a7, __n128 a8)
{
  uint64_t v151 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
    uint64_t v95 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v144 = OS_LOG_TYPE_ERROR;
    char v143 = 0;
    if (v144 == OS_LOG_TYPE_FAULT)
    {
      __int16 v96 = (os_log_s *)__nwlog_obj();
      os_log_type_t v97 = v144;
      if (!os_log_type_enabled(v96, v144)) {
        goto LABEL_232;
      }
      *(_DWORD *)__int128 buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
      os_log_type_t v98 = "%{public}s called with null ipv6";
      goto LABEL_231;
    }

    if (!v143)
    {
      __int16 v96 = (os_log_s *)__nwlog_obj();
      os_log_type_t v97 = v144;
      if (!os_log_type_enabled(v96, v144)) {
        goto LABEL_232;
      }
      *(_DWORD *)__int128 buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
      os_log_type_t v98 = "%{public}s called with null ipv6, backtrace limit exceeded";
      goto LABEL_231;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v96 = (os_log_s *)__nwlog_obj();
    os_log_type_t v97 = v144;
    BOOL v113 = os_log_type_enabled(v96, v144);
    if (!backtrace_string)
    {
      if (!v113) {
        goto LABEL_232;
      }
      *(_DWORD *)__int128 buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
      os_log_type_t v98 = "%{public}s called with null ipv6, no backtrace";
      goto LABEL_231;
    }

    if (!v113) {
      goto LABEL_214;
    }
    *(_DWORD *)__int128 buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    char v114 = "%{public}s called with null ipv6, dumping backtrace:%{public}s";
LABEL_213:
    _os_log_impl(&dword_181A5C000, v96, v97, v114, buf, 0x16u);
    goto LABEL_214;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
    uint64_t v95 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v144 = OS_LOG_TYPE_ERROR;
    char v143 = 0;
    if (v144 == OS_LOG_TYPE_FAULT)
    {
      __int16 v96 = (os_log_s *)__nwlog_obj();
      os_log_type_t v97 = v144;
      if (!os_log_type_enabled(v96, v144)) {
        goto LABEL_232;
      }
      *(_DWORD *)__int128 buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
      os_log_type_t v98 = "%{public}s called with null frame";
      goto LABEL_231;
    }

    if (!v143)
    {
      __int16 v96 = (os_log_s *)__nwlog_obj();
      os_log_type_t v97 = v144;
      if (!os_log_type_enabled(v96, v144)) {
        goto LABEL_232;
      }
      *(_DWORD *)__int128 buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
      os_log_type_t v98 = "%{public}s called with null frame, backtrace limit exceeded";
      goto LABEL_231;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v96 = (os_log_s *)__nwlog_obj();
    os_log_type_t v97 = v144;
    BOOL v115 = os_log_type_enabled(v96, v144);
    if (!backtrace_string)
    {
      if (!v115) {
        goto LABEL_232;
      }
      *(_DWORD *)__int128 buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
      os_log_type_t v98 = "%{public}s called with null frame, no backtrace";
      goto LABEL_231;
    }

    if (!v115) {
      goto LABEL_214;
    }
    *(_DWORD *)__int128 buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    char v114 = "%{public}s called with null frame, dumping backtrace:%{public}s";
    goto LABEL_213;
  }

  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
    uint64_t v95 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v144 = OS_LOG_TYPE_ERROR;
    char v143 = 0;
    if (v144 == OS_LOG_TYPE_FAULT)
    {
      __int16 v96 = (os_log_s *)__nwlog_obj();
      os_log_type_t v97 = v144;
      if (!os_log_type_enabled(v96, v144)) {
        goto LABEL_232;
      }
      *(_DWORD *)__int128 buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
      os_log_type_t v98 = "%{public}s called with null count";
      goto LABEL_231;
    }

    if (!v143)
    {
      __int16 v96 = (os_log_s *)__nwlog_obj();
      os_log_type_t v97 = v144;
      if (!os_log_type_enabled(v96, v144)) {
        goto LABEL_232;
      }
      *(_DWORD *)__int128 buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
      os_log_type_t v98 = "%{public}s called with null count, backtrace limit exceeded";
      goto LABEL_231;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v96 = (os_log_s *)__nwlog_obj();
    os_log_type_t v97 = v144;
    BOOL v116 = os_log_type_enabled(v96, v144);
    if (!backtrace_string)
    {
      if (!v116) {
        goto LABEL_232;
      }
      *(_DWORD *)__int128 buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
      os_log_type_t v98 = "%{public}s called with null count, no backtrace";
      goto LABEL_231;
    }

    if (!v116) {
      goto LABEL_214;
    }
    *(_DWORD *)__int128 buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    char v114 = "%{public}s called with null count, dumping backtrace:%{public}s";
    goto LABEL_213;
  }

  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
    uint64_t v95 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v144 = OS_LOG_TYPE_ERROR;
    char v143 = 0;
    if (v144 == OS_LOG_TYPE_FAULT)
    {
      __int16 v96 = (os_log_s *)__nwlog_obj();
      os_log_type_t v97 = v144;
      if (!os_log_type_enabled(v96, v144)) {
        goto LABEL_232;
      }
      *(_DWORD *)__int128 buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
      os_log_type_t v98 = "%{public}s called with null reassembly_count";
      goto LABEL_231;
    }

    if (!v143)
    {
      __int16 v96 = (os_log_s *)__nwlog_obj();
      os_log_type_t v97 = v144;
      if (!os_log_type_enabled(v96, v144)) {
        goto LABEL_232;
      }
      *(_DWORD *)__int128 buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
      os_log_type_t v98 = "%{public}s called with null reassembly_count, backtrace limit exceeded";
      goto LABEL_231;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v96 = (os_log_s *)__nwlog_obj();
    os_log_type_t v97 = v144;
    BOOL v117 = os_log_type_enabled(v96, v144);
    if (backtrace_string)
    {
      if (v117)
      {
        *(_DWORD *)__int128 buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        char v114 = "%{public}s called with null reassembly_count, dumping backtrace:%{public}s";
        goto LABEL_213;
      }

uint64_t ___ZL36nw_protocol_ipv6_process_input_frameP16nw_protocol_ipv6P8nw_frameP16nw_frame_array_sS4_PjS5__block_invoke( uint64_t a1, uint64_t a2)
{
  unsigned __int16 v13 = 0;
  int v12 = 0;
  uint64_t v11 = 0LL;
  int fragment_values_for_frame = nw_protocol_ipv6_get_fragment_values_for_frame( *(void *)(a1 + 40),  a2,  0LL,  &v13,  0LL,  &v11,  &v12);
  uint64_t result = 0LL;
  if (fragment_values_for_frame)
  {
    uint64_t result = 1LL;
    if (v12 + v13 == *(unsigned __int16 *)(a1 + 56))
    {
      uint64_t v6 = *(void *)(a1 + 48);
      uint64_t v7 = (void *)(*(void *)(a1 + 40) + 96LL);
      uint64_t v9 = *(void *)(a2 + 32);
      uint64_t v8 = (void *)(a2 + 32);
      *(void *)(v6 + 32) = v9;
      int v10 = (void *)(v9 + 40);
      if (v9) {
        uint64_t v7 = v10;
      }
      *uint64_t v7 = v6 + 32;
      *uint64_t v8 = v6;
      *(void *)(v6 + 40) = v8;
      *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
      return 0LL;
    }
  }

  return result;
}

uint64_t nw_protocol_ipv6_get_fragment_values_for_frame( uint64_t a1, uint64_t a2, _BYTE *a3, _WORD *a4, _DWORD *a5, void *a6, _DWORD *a7)
{
  *(void *)&v56[7] = *MEMORY[0x1895F89C0];
  unsigned int v46 = 0;
  uint64_t v12 = nw_frame_unclaimed_bytes(a2, &v46);
  if (!v12)
  {
    if (!a1 || (*(_BYTE *)(a1 + 158) & 1) == 0)
    {
      uint64_t v31 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        os_log_type_t v32 = (const char *)(a1 + 159);
        if (!a1) {
          os_log_type_t v32 = "";
        }
        *(_DWORD *)__int128 buf = 136446978;
        int v48 = "nw_protocol_ipv6_get_fragment_values_for_frame";
        __int16 v49 = 2082;
        uint64_t v50 = v32;
        os_log_type_t v33 = " ";
        if (!a1) {
          os_log_type_t v33 = "";
        }
        __int16 v51 = 2080;
        unsigned int v52 = v33;
        __int16 v53 = 2048;
        uint64_t v54 = a1;
        _os_log_impl( &dword_181A5C000,  v31,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s%p Frame is no longer valid",  buf,  0x2Au);
      }
    }

    char v18 = 0;
    *(void *)(a1 + 48) = 0LL;
    return v18 & 1;
  }

  unsigned int v13 = v46;
  if (v46 <= 0x27)
  {
    if (a1)
    {
      if ((*(_BYTE *)(a1 + 158) & 1) != 0)
      {
LABEL_79:
        char v18 = 0;
        return v18 & 1;
      }

      os_log_type_t v34 = " ";
    }

    else
    {
      os_log_type_t v34 = "";
    }

    __nwlog_obj();
    if (a1) {
      int v35 = (const char *)(a1 + 159);
    }
    else {
      int v35 = "";
    }
    *(_DWORD *)__int128 buf = 136447234;
    int v48 = "nw_protocol_ipv6_get_fragment_values_for_frame";
    __int16 v49 = 2082;
    uint64_t v50 = v35;
    __int16 v51 = 2080;
    unsigned int v52 = v34;
    __int16 v53 = 2048;
    uint64_t v54 = a1;
    __int16 v55 = 1024;
    v56[0] = v46;
    os_log_type_t v36 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (__nwlog_fault(v36, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v37 = (os_log_s *)__nwlog_obj();
        os_log_type_t v38 = type;
        if (!os_log_type_enabled(v37, type)) {
          goto LABEL_77;
        }
        *(_DWORD *)__int128 buf = 136447234;
        int v48 = "nw_protocol_ipv6_get_fragment_values_for_frame";
        __int16 v49 = 2082;
        uint64_t v50 = v35;
        __int16 v51 = 2080;
        unsigned int v52 = v34;
        __int16 v53 = 2048;
        uint64_t v54 = a1;
        __int16 v55 = 1024;
        v56[0] = v46;
        os_log_type_t v39 = "%{public}s %{public}s%s%p IPv6 fragment header cannot fit in packet length %u";
        goto LABEL_76;
      }

      if (!v44)
      {
        BOOL v37 = (os_log_s *)__nwlog_obj();
        os_log_type_t v38 = type;
        if (!os_log_type_enabled(v37, type)) {
          goto LABEL_77;
        }
        *(_DWORD *)__int128 buf = 136447234;
        int v48 = "nw_protocol_ipv6_get_fragment_values_for_frame";
        __int16 v49 = 2082;
        uint64_t v50 = v35;
        __int16 v51 = 2080;
        unsigned int v52 = v34;
        __int16 v53 = 2048;
        uint64_t v54 = a1;
        __int16 v55 = 1024;
        v56[0] = v46;
        os_log_type_t v39 = "%{public}s %{public}s%s%p IPv6 fragment header cannot fit in packet length %u, backtrace limit exceeded";
        goto LABEL_76;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v37 = (os_log_s *)__nwlog_obj();
      os_log_type_t v38 = type;
      BOOL v41 = os_log_type_enabled(v37, type);
      if (backtrace_string)
      {
        if (v41)
        {
          *(_DWORD *)__int128 buf = 136447490;
          int v48 = "nw_protocol_ipv6_get_fragment_values_for_frame";
          __int16 v49 = 2082;
          uint64_t v50 = v35;
          __int16 v51 = 2080;
          unsigned int v52 = v34;
          __int16 v53 = 2048;
          uint64_t v54 = a1;
          __int16 v55 = 1024;
          v56[0] = v46;
          LOWORD(v56[1]) = 2082;
          *(void *)((char *)&v56[1] + 2) = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v37,  v38,  "%{public}s %{public}s%s%p IPv6 fragment header cannot fit in packet length %u, dumping backtrace:%{public}s",  buf,  0x3Au);
        }

        free(backtrace_string);
        goto LABEL_77;
      }

      if (v41)
      {
        *(_DWORD *)__int128 buf = 136447234;
        int v48 = "nw_protocol_ipv6_get_fragment_values_for_frame";
        __int16 v49 = 2082;
        uint64_t v50 = v35;
        __int16 v51 = 2080;
        unsigned int v52 = v34;
        __int16 v53 = 2048;
        uint64_t v54 = a1;
        __int16 v55 = 1024;
        v56[0] = v46;
        os_log_type_t v39 = "%{public}s %{public}s%s%p IPv6 fragment header cannot fit in packet length %u, no backtrace";
LABEL_76:
        _os_log_impl(&dword_181A5C000, v37, v38, v39, buf, 0x30u);
      }
    }

uint64_t ___ZL43nw_protocol_ipv6_append_reassembled_packetsP16nw_protocol_ipv6P16nw_frame_array_sPb_block_invoke( void *a1, uint64_t a2)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  char v24 = 0;
  unsigned __int16 v23 = 0;
  int v22 = 0;
  uint64_t v21 = 0LL;
  int v20 = 0;
  int fragment_values_for_frame = nw_protocol_ipv6_get_fragment_values_for_frame(a1[6], a2, &v24, &v23, &v22, &v21, &v20);
  uint64_t result = 0LL;
  if (fragment_values_for_frame)
  {
    uint64_t v5 = a1[6];
    if (!v5 || (*(_BYTE *)(v5 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        uint64_t v15 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v16 = a1[6];
          int v17 = "";
          char v18 = (const char *)(v16 + 159);
          if (v16) {
            int v17 = " ";
          }
          else {
            char v18 = "";
          }
          int v19 = *(unsigned __int16 *)(*(void *)(a1[4] + 8LL) + 24LL);
          *(_DWORD *)__int128 buf = 136448002;
          int v26 = "nw_protocol_ipv6_append_reassembled_packets_block_invoke";
          __int16 v27 = 2082;
          int v28 = v18;
          __int16 v29 = 2080;
          uint64_t v30 = v17;
          __int16 v31 = 2048;
          uint64_t v32 = v16;
          __int16 v33 = 1024;
          int v34 = v22;
          __int16 v35 = 1024;
          int v36 = v20;
          __int16 v37 = 1024;
          int v38 = v23;
          __int16 v39 = 1024;
          int v40 = v19;
          _os_log_impl( &dword_181A5C000,  v15,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s%p Examining fragment for IPv6 Fragment ID %u, length %u offset %u aggregate length %u",  buf,  0x42u);
        }
      }
    }

    uint64_t v6 = *(void *)(a1[4] + 8LL);
    if (v23 == *(unsigned __int16 *)(v6 + 24))
    {
      BOOL v7 = __CFADD__(v23, v20);
      unsigned int v8 = v23 + v20;
      *(_WORD *)(v6 + 24) = v8;
      if (!v7 && v8 < 0x10000)
      {
        uint64_t result = 1LL;
        if (v24) {
          return result;
        }
        goto LABEL_18;
      }

      uint64_t v9 = a1[6];
      if (!v9 || (*(_BYTE *)(v9 + 158) & 1) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v10 = (os_log_s *)gLogObj;
        LODWORD(result) = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
        if (!(_DWORD)result)
        {
LABEL_18:
          *(_BYTE *)(*(void *)(a1[5] + 8LL) + 24LL) = result;
          return 0LL;
        }

        uint64_t v11 = a1[6];
        uint64_t v12 = "";
        unsigned int v13 = (const char *)(v11 + 159);
        if (v11) {
          uint64_t v12 = " ";
        }
        else {
          unsigned int v13 = "";
        }
        int v14 = *(unsigned __int16 *)(*(void *)(a1[4] + 8LL) + 24LL);
        *(_DWORD *)__int128 buf = 136447490;
        int v26 = "nw_protocol_ipv6_append_reassembled_packets_block_invoke";
        __int16 v27 = 2082;
        int v28 = v13;
        __int16 v29 = 2080;
        uint64_t v30 = v12;
        __int16 v31 = 2048;
        uint64_t v32 = v11;
        __int16 v33 = 1024;
        int v34 = v20;
        __int16 v35 = 1024;
        int v36 = v14;
        _os_log_impl( &dword_181A5C000,  v10,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s%p Cannot add %u to existing offset %u",  buf,  0x36u);
      }
    }

    LOBYTE(result) = 0;
    goto LABEL_18;
  }

  return result;
}

void nw_protocol_ipv6_frame_input_finalizer(nw_frame *a1, BOOL a2, void *a3)
{
  uint64_t v5 = *((void *)a1 + 2);
  uint64_t v6 = (void *)*((void *)a1 + 3);
  if (v5)
  {
    *(void *)(v5 + 24) = v6;
    uint64_t v6 = (void *)*((void *)a1 + 3);
  }

  else
  {
    a3[14] = v6;
  }

  *uint64_t v6 = v5;
  *((void *)a1 + 2) = 0LL;
  *((void *)a1 + 3) = 0LL;
  os_release(a1);
}

uint64_t ___ZL43nw_protocol_ipv6_append_reassembled_packetsP16nw_protocol_ipv6P16nw_frame_array_sPb_block_invoke_41( uint64_t a1, uint64_t a2)
{
  uint64_t v82 = *MEMORY[0x1895F89C0];
  __int16 v67 = 0;
  *(void *)&__n[1] = 0LL;
  __n[0] = 0;
  int fragment_values_for_frame = nw_protocol_ipv6_get_fragment_values_for_frame( *(void *)(a1 + 40),  a2,  0LL,  &v67,  0LL,  &__n[1],  __n);
  uint64_t result = 0LL;
  if (fragment_values_for_frame)
  {
    uint64_t v5 = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
    if ((__n[0] + v5) <= *(_DWORD *)(a1 + 56))
    {
      memcpy((void *)(*(void *)(a1 + 48) + v5), *(const void **)&__n[1], __n[0]);
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
      int v7 = *(_DWORD *)(v6 + 24);
      BOOL v8 = __CFADD__(v7, __n[0]);
      *(_DWORD *)(v6 + 24) = v7 + __n[0];
      if (!v8) {
        return 1LL;
      }
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9 && (*(_BYTE *)(v9 + 158) & 1) != 0) {
        return 0LL;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v10 = *(void *)(a1 + 40);
      uint64_t v11 = (const char *)(v10 + 159);
      if (v10)
      {
        uint64_t v12 = " ";
      }

      else
      {
        uint64_t v11 = "";
        uint64_t v12 = "";
      }

      int v13 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
      *(_DWORD *)__int128 buf = 136447490;
      BOOL v69 = "nw_protocol_ipv6_append_reassembled_packets_block_invoke";
      __int16 v70 = 2082;
      uint32_t v71 = v11;
      __int16 v72 = 2080;
      os_log_type_t v73 = v12;
      __int16 v74 = 2048;
      uint64_t v75 = v10;
      __int16 v76 = 1024;
      int v77 = __n[0];
      __int16 v78 = 1024;
      int v79 = v13;
      int v14 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v64 = 0;
      if (__nwlog_fault(v14, &type, &v64))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v15 = (os_log_s *)gLogObj;
          os_log_type_t v16 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_36;
          }
          uint64_t v17 = *(void *)(a1 + 40);
          char v18 = (const char *)(v17 + 159);
          if (v17)
          {
            int v19 = " ";
          }

          else
          {
            char v18 = "";
            int v19 = "";
          }

          int v20 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
          *(_DWORD *)__int128 buf = 136447490;
          BOOL v69 = "nw_protocol_ipv6_append_reassembled_packets_block_invoke";
          __int16 v70 = 2082;
          uint32_t v71 = v18;
          __int16 v72 = 2080;
          os_log_type_t v73 = v19;
          __int16 v74 = 2048;
          uint64_t v75 = v17;
          __int16 v76 = 1024;
          int v77 = __n[0];
          __int16 v78 = 1024;
          int v79 = v20;
          uint64_t v21 = "%{public}s %{public}s%s%p Cannot add %u to new frame offset %u";
          goto LABEL_35;
        }

        if (!v64)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v15 = (os_log_s *)gLogObj;
          os_log_type_t v16 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_36;
          }
          uint64_t v28 = *(void *)(a1 + 40);
          __int16 v29 = (const char *)(v28 + 159);
          if (v28)
          {
            uint64_t v30 = " ";
          }

          else
          {
            __int16 v29 = "";
            uint64_t v30 = "";
          }

          int v31 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
          *(_DWORD *)__int128 buf = 136447490;
          BOOL v69 = "nw_protocol_ipv6_append_reassembled_packets_block_invoke";
          __int16 v70 = 2082;
          uint32_t v71 = v29;
          __int16 v72 = 2080;
          os_log_type_t v73 = v30;
          __int16 v74 = 2048;
          uint64_t v75 = v28;
          __int16 v76 = 1024;
          int v77 = __n[0];
          __int16 v78 = 1024;
          int v79 = v31;
          uint64_t v21 = "%{public}s %{public}s%s%p Cannot add %u to new frame offset %u, backtrace limit exceeded";
          goto LABEL_35;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v15 = (os_log_s *)gLogObj;
        os_log_type_t v16 = type;
        BOOL v23 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (!backtrace_string)
        {
          if (!v23) {
            goto LABEL_36;
          }
          uint64_t v32 = *(void *)(a1 + 40);
          __int16 v33 = (const char *)(v32 + 159);
          if (v32)
          {
            int v34 = " ";
          }

          else
          {
            __int16 v33 = "";
            int v34 = "";
          }

          int v35 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
          *(_DWORD *)__int128 buf = 136447490;
          BOOL v69 = "nw_protocol_ipv6_append_reassembled_packets_block_invoke";
          __int16 v70 = 2082;
          uint32_t v71 = v33;
          __int16 v72 = 2080;
          os_log_type_t v73 = v34;
          __int16 v74 = 2048;
          uint64_t v75 = v32;
          __int16 v76 = 1024;
          int v77 = __n[0];
          __int16 v78 = 1024;
          int v79 = v35;
          uint64_t v21 = "%{public}s %{public}s%s%p Cannot add %u to new frame offset %u, no backtrace";
          goto LABEL_35;
        }

        if (v23)
        {
          uint64_t v24 = *(void *)(a1 + 40);
          uint64_t v25 = (const char *)(v24 + 159);
          if (v24)
          {
            int v26 = " ";
          }

          else
          {
            uint64_t v25 = "";
            int v26 = "";
          }

          int v27 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
          *(_DWORD *)__int128 buf = 136447746;
          BOOL v69 = "nw_protocol_ipv6_append_reassembled_packets_block_invoke";
          __int16 v70 = 2082;
          uint32_t v71 = v25;
          __int16 v72 = 2080;
          os_log_type_t v73 = v26;
          __int16 v74 = 2048;
          uint64_t v75 = v24;
          __int16 v76 = 1024;
          int v77 = __n[0];
          __int16 v78 = 1024;
          int v79 = v27;
          __int16 v80 = 2082;
          uint64_t v81 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v15,  v16,  "%{public}s %{public}s%s%p Cannot add %u to new frame offset %u, dumping backtrace:%{public}s",  buf,  0x40u);
        }

        free(backtrace_string);
      }

uint64_t ___ZL43nw_protocol_ipv6_append_reassembled_packetsP16nw_protocol_ipv6P16nw_frame_array_sPb_block_invoke_43( uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  uint64_t v3 = *(void **)(a2 + 40);
  if (v2)
  {
    *(void *)(v2 + 40) = v3;
    uint64_t v3 = *(void **)(a2 + 40);
  }

  else
  {
    *(void *)(*(void *)(a1 + 32) + 96LL) = v3;
  }

  *uint64_t v3 = v2;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  nw_frame_finalize(a2);
  return 1LL;
}

void nw_protocol_ip_register_segmentation_offload_notification(nw_protocol *a1, int a2)
{
  uint64_t default_input_handler = a1->default_input_handler;
  if (!a2)
  {
    if (!default_input_handler) {
      return;
    }
    callbacks = default_input_handler->callbacks;
    if (!callbacks) {
      return;
    }
    unregister_notification = (void (*)(nw_protocol *, nw_protocol *, uint64_t))callbacks->unregister_notification;
    if (!unregister_notification) {
      return;
    }
    uint64_t handle = default_input_handler->handle;
    if (handle == &nw_protocol_ref_counted_handle)
    {
      uint64_t v10 = default_input_handler[1].callbacks;
      if (v10) {
        default_input_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&v10->add_input_handler + 1);
      }
    }

    if (a1->handle != &nw_protocol_ref_counted_handle)
    {
      unregister_notification(default_input_handler, a1, 14LL);
      goto LABEL_25;
    }

    uint64_t v12 = a1[1].callbacks;
    if (v12) {
      a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v12->add_input_handler + 1);
    }
    unregister_notification(default_input_handler, a1, 14LL);
LABEL_24:
    if (a1->handle == &nw_protocol_ref_counted_handle)
    {
      uint64_t v17 = a1[1].callbacks;
      if (v17)
      {
        char v18 = (nw_protocol_callbacks *)((char *)v17 - 1);
        a1[1].callbacks = v18;
        if (!v18)
        {
          int v19 = *(void (***)(void))a1[1].flow_id;
          if (v19)
          {
            *(void *)a1[1].flow_id = 0LL;
            v19[2](v19);
            _Block_release(v19);
          }

          if ((a1[1].flow_id[8] & 1) != 0)
          {
            int v20 = *(const void **)a1[1].flow_id;
            if (v20) {
              _Block_release(v20);
            }
          }

          free(a1);
        }
      }
    }

    goto LABEL_25;
  }

  if (!default_input_handler) {
    return;
  }
  unsigned int v4 = default_input_handler->callbacks;
  if (!v4) {
    return;
  }
  register_notification = (void (*)(void, void, void, void, void))v4->register_notification;
  if (!register_notification) {
    return;
  }
  uint64_t handle = default_input_handler->handle;
  if (handle == &nw_protocol_ref_counted_handle)
  {
    int v7 = default_input_handler[1].callbacks;
    if (v7) {
      default_input_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&v7->add_input_handler + 1);
    }
  }

  if (a1->handle == &nw_protocol_ref_counted_handle)
  {
    uint64_t v11 = a1[1].callbacks;
    if (v11) {
      a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v11->add_input_handler + 1);
    }
    register_notification(default_input_handler, a1, 14LL, 0LL, 0LL);
    goto LABEL_24;
  }

  register_notification(default_input_handler, a1, 14LL, 0LL, 0LL);
LABEL_25:
  if (handle == &nw_protocol_ref_counted_handle && default_input_handler->handle == &nw_protocol_ref_counted_handle)
  {
    int v13 = default_input_handler[1].callbacks;
    if (v13)
    {
      int v14 = (nw_protocol_callbacks *)((char *)v13 - 1);
      default_input_handler[1].callbacks = v14;
      if (!v14)
      {
        uint64_t v15 = *(void (***)(void))default_input_handler[1].flow_id;
        if (v15)
        {
          *(void *)default_input_handler[1].flow_id = 0LL;
          v15[2](v15);
          _Block_release(v15);
        }

        if ((default_input_handler[1].flow_id[8] & 1) != 0)
        {
          os_log_type_t v16 = *(const void **)default_input_handler[1].flow_id;
          if (v16) {
            _Block_release(v16);
          }
        }

        free(default_input_handler);
      }
    }
  }

void ___ZL26nw_protocol_ipv4_callbacksv_block_invoke()
{
  nw_protocol_ipv4_callbacks(void)::callbacks = nw_protocol_one_to_one_callbacks_new();
  nw_protocol_callbacks_set_add_input_handler( (void *)nw_protocol_ipv4_callbacks(void)::callbacks,  (uint64_t)nw_protocol_ipv4_add_input_handler);
  nw_protocol_callbacks_set_replace_input_handler( nw_protocol_ipv4_callbacks(void)::callbacks,  (uint64_t)nw_protocol_ipv4_replace_input_handler);
  nw_protocol_callbacks_set_remove_input_handler( nw_protocol_ipv4_callbacks(void)::callbacks,  (uint64_t)nw_protocol_ipv4_remove_input_handler);
  nw_protocol_callbacks_set_get_input_frames( nw_protocol_ipv4_callbacks(void)::callbacks,  (uint64_t)nw_protocol_ipv4_get_input_frames);
  nw_protocol_callbacks_set_get_output_frames( nw_protocol_ipv4_callbacks(void)::callbacks,  (uint64_t)nw_protocol_ipv4_get_output_frames);
  nw_protocol_callbacks_set_finalize_output_frames( nw_protocol_ipv4_callbacks(void)::callbacks,  (uint64_t)nw_protocol_ipv4_finalize_output_frames);
  nw_protocol_callbacks_set_connected(nw_protocol_ipv4_callbacks(void)::callbacks, (uint64_t)nw_protocol_ipv4_connected);
  nw_protocol_callbacks_set_disconnected( nw_protocol_ipv4_callbacks(void)::callbacks,  (uint64_t)nw_protocol_ipv4_disconnected);
  nw_protocol_callbacks_set_get_message_properties( nw_protocol_ipv4_callbacks(void)::callbacks,  (uint64_t)nw_protocol_ipv4_get_message_properties);
  nw_protocol_callbacks_set_copy_info(nw_protocol_ipv4_callbacks(void)::callbacks, (uint64_t)nw_protocol_ipv4_copy_info);
  nw_protocol_callbacks_set_updated_path( nw_protocol_ipv4_callbacks(void)::callbacks,  (uint64_t)nw_protocol_ipv4_updated_path);
  nw_protocol_callbacks_set_notify(nw_protocol_ipv4_callbacks(void)::callbacks, (uint64_t)nw_protocol_ipv4_notify);
  nw_protocol_callbacks_set_error(nw_protocol_ipv4_callbacks(void)::callbacks, (uint64_t)nw_protocol_ipv4_error);
}

uint64_t nw_protocol_ipv4_replace_input_handler(nw_protocol *a1, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    BOOL v23 = "nw_protocol_ipv4_replace_input_handler";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v20)
      {
        uint64_t v9 = (os_log_s *)__nwlog_obj();
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_75;
        }
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v23 = "nw_protocol_ipv4_replace_input_handler";
        uint64_t v11 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_74;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (!v13) {
          goto LABEL_75;
        }
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v23 = "nw_protocol_ipv4_replace_input_handler";
        uint64_t v11 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_74;
      }

      if (v13)
      {
        *(_DWORD *)__int128 buf = 136446466;
        BOOL v23 = "nw_protocol_ipv4_replace_input_handler";
        __int16 v24 = 2082;
        uint64_t v25 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_75;
    }

    uint64_t v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_75;
    }
    *(_DWORD *)__int128 buf = 136446210;
    BOOL v23 = "nw_protocol_ipv4_replace_input_handler";
    uint64_t v11 = "%{public}s called with null protocol";
    goto LABEL_74;
  }

  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    BOOL v23 = "nw_protocol_ipv4_replace_input_handler";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v20)
      {
        uint64_t v9 = (os_log_s *)__nwlog_obj();
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_75;
        }
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v23 = "nw_protocol_ipv4_replace_input_handler";
        uint64_t v11 = "%{public}s called with null ipv4, backtrace limit exceeded";
        goto LABEL_74;
      }

      int v14 = (char *)__nw_create_backtrace_string();
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (!v14)
      {
        if (!v15) {
          goto LABEL_75;
        }
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v23 = "nw_protocol_ipv4_replace_input_handler";
        uint64_t v11 = "%{public}s called with null ipv4, no backtrace";
        goto LABEL_74;
      }

      if (!v15) {
        goto LABEL_52;
      }
      *(_DWORD *)__int128 buf = 136446466;
      BOOL v23 = "nw_protocol_ipv4_replace_input_handler";
      __int16 v24 = 2082;
      uint64_t v25 = v14;
      os_log_type_t v16 = "%{public}s called with null ipv4, dumping backtrace:%{public}s";
      goto LABEL_51;
    }

    uint64_t v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_75;
    }
    *(_DWORD *)__int128 buf = 136446210;
    BOOL v23 = "nw_protocol_ipv4_replace_input_handler";
    uint64_t v11 = "%{public}s called with null ipv4";
LABEL_74:
    _os_log_impl(&dword_181A5C000, v9, v10, v11, buf, 0xCu);
    goto LABEL_75;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    BOOL v23 = "nw_protocol_ipv4_replace_input_handler";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v20)
      {
        uint64_t v9 = (os_log_s *)__nwlog_obj();
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_75;
        }
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v23 = "nw_protocol_ipv4_replace_input_handler";
        uint64_t v11 = "%{public}s called with null old_input_protocol, backtrace limit exceeded";
        goto LABEL_74;
      }

      int v14 = (char *)__nw_create_backtrace_string();
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (!v14)
      {
        if (!v17) {
          goto LABEL_75;
        }
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v23 = "nw_protocol_ipv4_replace_input_handler";
        uint64_t v11 = "%{public}s called with null old_input_protocol, no backtrace";
        goto LABEL_74;
      }

      if (!v17) {
        goto LABEL_52;
      }
      *(_DWORD *)__int128 buf = 136446466;
      BOOL v23 = "nw_protocol_ipv4_replace_input_handler";
      __int16 v24 = 2082;
      uint64_t v25 = v14;
      os_log_type_t v16 = "%{public}s called with null old_input_protocol, dumping backtrace:%{public}s";
      goto LABEL_51;
    }

    uint64_t v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_75;
    }
    *(_DWORD *)__int128 buf = 136446210;
    BOOL v23 = "nw_protocol_ipv4_replace_input_handler";
    uint64_t v11 = "%{public}s called with null old_input_protocol";
    goto LABEL_74;
  }

  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    BOOL v23 = "nw_protocol_ipv4_replace_input_handler";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_75;
      }
      *(_DWORD *)__int128 buf = 136446210;
      BOOL v23 = "nw_protocol_ipv4_replace_input_handler";
      uint64_t v11 = "%{public}s called with null new_input_protocol";
      goto LABEL_74;
    }

    if (!v20)
    {
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_75;
      }
      *(_DWORD *)__int128 buf = 136446210;
      BOOL v23 = "nw_protocol_ipv4_replace_input_handler";
      uint64_t v11 = "%{public}s called with null new_input_protocol, backtrace limit exceeded";
      goto LABEL_74;
    }

    int v14 = (char *)__nw_create_backtrace_string();
    uint64_t v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v18 = os_log_type_enabled(v9, type);
    if (!v14)
    {
      if (!v18) {
        goto LABEL_75;
      }
      *(_DWORD *)__int128 buf = 136446210;
      BOOL v23 = "nw_protocol_ipv4_replace_input_handler";
      uint64_t v11 = "%{public}s called with null new_input_protocol, no backtrace";
      goto LABEL_74;
    }

    if (!v18) {
      goto LABEL_52;
    }
    *(_DWORD *)__int128 buf = 136446466;
    BOOL v23 = "nw_protocol_ipv4_replace_input_handler";
    __int16 v24 = 2082;
    uint64_t v25 = v14;
    os_log_type_t v16 = "%{public}s called with null new_input_protocol, dumping backtrace:%{public}s";
LABEL_51:
    _os_log_impl(&dword_181A5C000, v9, v10, v16, buf, 0x16u);
    goto LABEL_52;
  }

  if (a3->identifier) {
    identifier = a3->identifier;
  }
  else {
    identifier = (nw_protocol_identifier *)"invalid";
  }
  if (strncmp(identifier->name, "quic", 4uLL)) {
    return nw_protocol_common_replace_input_handler((uint64_t)a1, a2, (uint64_t)a3);
  }
  __nwlog_obj();
  *(_DWORD *)__int128 buf = 136446210;
  BOOL v23 = "nw_protocol_ipv4_replace_input_handler";
  BOOL v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v8, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_75;
      }
      *(_DWORD *)__int128 buf = 136446210;
      BOOL v23 = "nw_protocol_ipv4_replace_input_handler";
      uint64_t v11 = "%{public}s Attempt to add quic to ip";
      goto LABEL_74;
    }

    if (!v20)
    {
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_75;
      }
      *(_DWORD *)__int128 buf = 136446210;
      BOOL v23 = "nw_protocol_ipv4_replace_input_handler";
      uint64_t v11 = "%{public}s Attempt to add quic to ip, backtrace limit exceeded";
      goto LABEL_74;
    }

    int v14 = (char *)__nw_create_backtrace_string();
    uint64_t v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v19 = os_log_type_enabled(v9, type);
    if (!v14)
    {
      if (!v19) {
        goto LABEL_75;
      }
      *(_DWORD *)__int128 buf = 136446210;
      BOOL v23 = "nw_protocol_ipv4_replace_input_handler";
      uint64_t v11 = "%{public}s Attempt to add quic to ip, no backtrace";
      goto LABEL_74;
    }

    if (v19)
    {
      *(_DWORD *)__int128 buf = 136446466;
      BOOL v23 = "nw_protocol_ipv4_replace_input_handler";
      __int16 v24 = 2082;
      uint64_t v25 = v14;
      os_log_type_t v16 = "%{public}s Attempt to add quic to ip, dumping backtrace:%{public}s";
      goto LABEL_51;
    }

void nw_protocol_ipv4_get_message_properties(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    BOOL v15 = "nw_protocol_ipv4_get_message_properties";
    unsigned int v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)__int128 buf = 136446210;
      BOOL v15 = "nw_protocol_ipv4_get_message_properties";
      int v7 = "%{public}s called with null protocol";
    }

    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)__int128 buf = 136446466;
          BOOL v15 = "nw_protocol_ipv4_get_message_properties";
          __int16 v16 = 2082;
          BOOL v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_34:
        if (!v4) {
          return;
        }
LABEL_35:
        free(v4);
        return;
      }

      if (!v9) {
        goto LABEL_34;
      }
      *(_DWORD *)__int128 buf = 136446210;
      BOOL v15 = "nw_protocol_ipv4_get_message_properties";
      int v7 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      uint64_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)__int128 buf = 136446210;
      BOOL v15 = "nw_protocol_ipv4_get_message_properties";
      int v7 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

uint64_t nw_protocol_ipv4_updated_path(nw_protocol *a1, nw_protocol *a2, nw_path *a3)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    uint64_t v18 = "nw_protocol_ipv4_updated_path";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_45;
      }
      *(_DWORD *)__int128 buf = 136446210;
      uint64_t v18 = "nw_protocol_ipv4_updated_path";
      BOOL v9 = "%{public}s called with null protocol";
LABEL_44:
      _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      goto LABEL_45;
    }

    if (!v15)
    {
      int v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v18 = "nw_protocol_ipv4_updated_path";
        BOOL v9 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_44;
      }

      goto LABEL_45;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v11 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v18 = "nw_protocol_ipv4_updated_path";
        BOOL v9 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_44;
      }

      goto LABEL_45;
    }

    if (!v11) {
      goto LABEL_31;
    }
    *(_DWORD *)__int128 buf = 136446466;
    uint64_t v18 = "nw_protocol_ipv4_updated_path";
    __int16 v19 = 2082;
    char v20 = backtrace_string;
    char v12 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_30:
    _os_log_impl(&dword_181A5C000, v7, v8, v12, buf, 0x16u);
    goto LABEL_31;
  }

  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    uint64_t v18 = "nw_protocol_ipv4_updated_path";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_45;
      }
      *(_DWORD *)__int128 buf = 136446210;
      uint64_t v18 = "nw_protocol_ipv4_updated_path";
      BOOL v9 = "%{public}s called with null ipv4";
      goto LABEL_44;
    }

    if (!v15)
    {
      int v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v18 = "nw_protocol_ipv4_updated_path";
        BOOL v9 = "%{public}s called with null ipv4, backtrace limit exceeded";
        goto LABEL_44;
      }

      goto LABEL_45;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v13 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v18 = "nw_protocol_ipv4_updated_path";
        BOOL v9 = "%{public}s called with null ipv4, no backtrace";
        goto LABEL_44;
      }

      goto LABEL_45;
    }

    if (!v13) {
      goto LABEL_31;
    }
    *(_DWORD *)__int128 buf = 136446466;
    uint64_t v18 = "nw_protocol_ipv4_updated_path";
    __int16 v19 = 2082;
    char v20 = backtrace_string;
    char v12 = "%{public}s called with null ipv4, dumping backtrace:%{public}s";
    goto LABEL_30;
  }

  if (a3)
  {
    LODWORD(a1[3].identifier) = nw_path_get_maximum_packet_size(a3);
    HIDWORD(a1[3].identifier) = nw_path_get_mtu(a3);
    return 1LL;
  }

  __nwlog_obj();
  *(_DWORD *)__int128 buf = 136446210;
  uint64_t v18 = "nw_protocol_ipv4_updated_path";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v15)
    {
      int v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v18 = "nw_protocol_ipv4_updated_path";
        BOOL v9 = "%{public}s called with null path, backtrace limit exceeded";
        goto LABEL_44;
      }

      goto LABEL_45;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v14 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v18 = "nw_protocol_ipv4_updated_path";
        BOOL v9 = "%{public}s called with null path, no backtrace";
        goto LABEL_44;
      }

      goto LABEL_45;
    }

    if (v14)
    {
      *(_DWORD *)__int128 buf = 136446466;
      uint64_t v18 = "nw_protocol_ipv4_updated_path";
      __int16 v19 = 2082;
      char v20 = backtrace_string;
      char v12 = "%{public}s called with null path, dumping backtrace:%{public}s";
      goto LABEL_30;
    }

void nw_protocol_ipv4_error(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v48 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    int v41 = "nw_protocol_ipv4_error";
    uint64_t default_input_handler = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (v38)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v14 = (os_log_s *)__nwlog_obj();
        os_log_type_t v15 = type;
        BOOL v33 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v33)
          {
            *(_DWORD *)__int128 buf = 136446466;
            int v41 = "nw_protocol_ipv4_error";
            __int16 v42 = 2082;
            unsigned int v43 = backtrace_string;
            __int16 v19 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
            goto LABEL_33;
          }

uint64_t ___ZL39nw_protocol_ipv4_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke( uint64_t a1, uint64_t a2)
{
  uint64_t v63 = *MEMORY[0x1895F89C0];
  if (nw_frame_get_finalizer_context(a2) == *(void *)(a1 + 32))
  {
    uint64_t v14 = *(void *)(a2 + 32);
    os_log_type_t v15 = *(void **)(a2 + 40);
    if (v14)
    {
      *(void *)(v14 + 40) = v15;
      os_log_type_t v15 = *(void **)(a2 + 40);
    }

    else
    {
      *(void *)(*(void *)(a1 + 40) + 8LL) = v15;
    }

    *os_log_type_t v15 = v14;
    *(void *)(a2 + 32) = 0LL;
    *(void *)(a2 + 40) = 0LL;
    nw_frame_finalize(a2);
  }

  else
  {
    nw_frame_unclaim(a2, v4, 0x14u, 0);
    int v52 = 0;
    uint64_t v5 = nw_frame_unclaimed_bytes(a2, &v52);
    uint64_t v6 = *(void *)(a1 + 32);
    if (v5)
    {
      uint64_t v7 = v5;
      uint64_t v8 = *(void *)(v6 + 48);
      if (v8) {
        ++*(void *)(v8 + 232);
      }
      *(void *)(v5 + 12) = *(void *)(v6 + 56);
      *(_BYTE *)(v5 + 9) = *(_BYTE *)(v6 + 134);
      *(_BYTE *)(v5 + 8) = *(_BYTE *)(v6 + 135);
      *(_BYTE *)uint64_t v5 = 69;
      *(_WORD *)(v5 + 2) = bswap32((unsigned __int16)v52) >> 16;
      if (a2)
      {
        char v9 = *(_BYTE *)(a2 + 186) & 3;
        *(_BYTE *)(v5 + 1) = v9;
        if (*(_BYTE *)(a2 + 184)) {
          *(_BYTE *)(v5 + 1) = v9 | (4 * *(_BYTE *)(a2 + 184));
        }
        int v10 = *(_DWORD *)(a2 + 180);
        if (v10 == 2) {
          goto LABEL_11;
        }
        uint64_t v11 = *(void *)(a1 + 32);
        if (v10)
        {
LABEL_76:
          int v13 = 0;
          *(_DWORD *)(v7 + 4) = 0x400000;
          goto LABEL_77;
        }

uint64_t nw_ipv4_checksum(unsigned __int16 *a1)
{
  if ((a1 & 3) != 0)
  {
    unsigned int v1 = vaddlvq_u16(*(uint16x8_t *)a1) + a1[8] + a1[9];
    LODWORD(v2) = HIWORD(v1) + (unsigned __int16)v1 + ((HIWORD(v1) + (unsigned __int16)v1) >> 16);
  }

  else
  {
    unint64_t v3 = vaddlvq_u32(*(uint32x4_t *)a1);
    unint64_t v4 = ((v3 + *((unsigned int *)a1 + 4)) >> 32) + (v3 + *((_DWORD *)a1 + 4));
    unint64_t v2 = (((v4 >> 16) + (unsigned __int16)v4) >> 16) + (unsigned __int16)(WORD1(v4) + v4);
    LOWORD(v2) = WORD1(v2) + v2;
  }

  return (unsigned __int16)~(_WORD)v2;
}

void nw_protocol_ipv4_frame_output_finalizer(nw_frame *a1, int a2, void *a3)
{
  uint64_t v126 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    unsigned int v111 = 0;
    uint64_t v5 = nw_frame_unclaimed_bytes((uint64_t)a1, &v111);
    if (v5)
    {
      if (v111)
      {
        uint64_t v6 = v5;
        v109[0] = 0LL;
        v109[1] = v109;
        int v110 = 0;
        v109[2] = 0x2000000000LL;
        ____int128 buf = 0;
        arc4random_buf(&__buf, 2uLL);
        v107[0] = 0LL;
        v107[1] = v107;
        uint64_t v7 = *(a3 - 8);
        if (v7)
        {
          unsigned int v8 = *((_DWORD *)a3 + 28);
          int v9 = *((_DWORD *)a3 + 30);
          int v10 = *(void **)(v7 + 40);
          if (v10 == &nw_protocol_ref_counted_handle)
          {
            uint64_t v11 = *(void *)(v7 + 88);
            if (v11) {
              *(void *)(v7 + 88) = v11 + 1;
            }
          }

          int v12 = (void *)*(a3 - 7);
          if (v12 == &nw_protocol_ref_counted_handle)
          {
            uint64_t v13 = *(a3 - 1);
            if (v13) {
              *(a3 - 1) = v13 + 1;
            }
          }

          uint64_t v14 = *(void *)(v7 + 24);
          if (v14)
          {
            os_log_type_t v15 = *(uint64_t (**)(uint64_t, void *, void, void, uint64_t, void *))(v14 + 88);
            if (v15)
            {
              unsigned int v16 = v15(v7, a3 - 12, v9 + v9 * (v111 / v8), v9 + v9 * (v111 / v8), 32LL, v107);
              if (v12 != &nw_protocol_ref_counted_handle) {
                goto LABEL_15;
              }
              goto LABEL_14;
            }
          }

          __nwlog_obj();
          BOOL v51 = *(const char **)(v7 + 16);
          *(_DWORD *)__int128 buf = 136446722;
          BOOL v115 = "__nw_protocol_get_output_frames";
          if (!v51) {
            BOOL v51 = "invalid";
          }
          __int16 v116 = 2082;
          BOOL v117 = (char *)v51;
          __int16 v118 = 2048;
          unsigned int v119 = (const char *)v7;
          int v52 = (const char *)_os_log_send_and_compose_impl();
          os_log_type_t v113 = OS_LOG_TYPE_ERROR;
          char v112 = 0;
          __int16 v92 = (char *)v52;
          if (__nwlog_fault(v52, &v113, &v112))
          {
            if (v113 == OS_LOG_TYPE_FAULT)
            {
              char v53 = (os_log_s *)__nwlog_obj();
              os_log_type_t v54 = v113;
              os_log_t log = v53;
              if (!os_log_type_enabled(v53, v113)) {
                goto LABEL_131;
              }
              __int16 v55 = *(const char **)(v7 + 16);
              if (!v55) {
                __int16 v55 = "invalid";
              }
              *(_DWORD *)__int128 buf = 136446722;
              BOOL v115 = "__nw_protocol_get_output_frames";
              __int16 v116 = 2082;
              BOOL v117 = (char *)v55;
              __int16 v118 = 2048;
              unsigned int v119 = (const char *)v7;
              __int16 v56 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback";
LABEL_129:
              uint64_t v82 = log;
              os_log_type_t v83 = v54;
LABEL_130:
              _os_log_impl(&dword_181A5C000, v82, v83, v56, buf, 0x20u);
              goto LABEL_131;
            }

            if (!v112)
            {
              __int16 v80 = (os_log_s *)__nwlog_obj();
              os_log_type_t v54 = v113;
              os_log_t log = v80;
              if (!os_log_type_enabled(v80, v113)) {
                goto LABEL_131;
              }
              uint64_t v81 = *(const char **)(v7 + 16);
              if (!v81) {
                uint64_t v81 = "invalid";
              }
              *(_DWORD *)__int128 buf = 136446722;
              BOOL v115 = "__nw_protocol_get_output_frames";
              __int16 v116 = 2082;
              BOOL v117 = (char *)v81;
              __int16 v118 = 2048;
              unsigned int v119 = (const char *)v7;
              __int16 v56 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, backtrace limit exceeded";
              goto LABEL_129;
            }

            backtrace_string = (char *)__nw_create_backtrace_string();
            os_log_t loga = (os_log_s *)__nwlog_obj();
            os_log_type_t type = v113;
            BOOL v62 = os_log_type_enabled(loga, v113);
            if (backtrace_string)
            {
              if (v62)
              {
                uint64_t v63 = *(const char **)(v7 + 16);
                if (!v63) {
                  uint64_t v63 = "invalid";
                }
                *(_DWORD *)__int128 buf = 136446978;
                BOOL v115 = "__nw_protocol_get_output_frames";
                __int16 v116 = 2082;
                BOOL v117 = (char *)v63;
                __int16 v118 = 2048;
                unsigned int v119 = (const char *)v7;
                __int16 v120 = 2082;
                v121 = backtrace_string;
                _os_log_impl( &dword_181A5C000,  loga,  type,  "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, dumping backtrace:%{public}s",  buf,  0x2Au);
              }

              free(backtrace_string);
            }

            else if (v62)
            {
              char v84 = *(const char **)(v7 + 16);
              if (!v84) {
                char v84 = "invalid";
              }
              *(_DWORD *)__int128 buf = 136446722;
              BOOL v115 = "__nw_protocol_get_output_frames";
              __int16 v116 = 2082;
              BOOL v117 = (char *)v84;
              __int16 v118 = 2048;
              unsigned int v119 = (const char *)v7;
              __int16 v56 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, no backtrace";
              uint64_t v82 = loga;
              os_log_type_t v83 = type;
              goto LABEL_130;
            }
          }

uint64_t ___ZL34nw_protocol_ipv4_get_output_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke( uint64_t a1, uint64_t a2)
{
  return 1LL;
}

uint64_t ___ZL39nw_protocol_ipv4_frame_output_finalizerP8nw_framebPv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  unint64_t v3 = *(void **)(a2 + 40);
  if (v2)
  {
    *(void *)(v2 + 40) = v3;
    unint64_t v3 = *(void **)(a2 + 40);
  }

  else
  {
    *(void *)(*(void *)(a1 + 32) + 8LL) = v3;
  }

  *unint64_t v3 = v2;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  nw_frame_finalize(a2);
  return 1LL;
}

uint64_t ___ZL39nw_protocol_ipv4_frame_output_finalizerP8nw_framebPv_block_invoke_30(uint64_t a1, uint64_t a2)
{
  uint64_t v70 = *MEMORY[0x1895F89C0];
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) >= *(_DWORD *)(a1 + 72)
    || (v53 = 0, uint64_t v4 = nw_frame_unclaimed_bytes(a2, &v53), v5 = v53, v53 <= 0x13))
  {
    uint64_t v6 = *(void *)(a2 + 32);
    uint64_t v7 = *(void **)(a2 + 40);
    if (v6)
    {
      *(void *)(v6 + 40) = v7;
      uint64_t v7 = *(void **)(a2 + 40);
    }

    else
    {
      *(void *)(*(void *)(a1 + 40) + 8LL) = v7;
    }

    *uint64_t v7 = v6;
    *(void *)(a2 + 32) = 0LL;
    *(void *)(a2 + 40) = 0LL;
    nw_frame_finalize(a2);
    return 1LL;
  }

  unsigned int v8 = (unsigned __int16 *)v4;
  uint64_t v9 = *(void *)(a1 + 48);
  if (v4)
  {
    unsigned int v10 = *(_DWORD *)(v9 + 116);
    if (v53 > v10)
    {
      unsigned int v53 = *(_DWORD *)(v9 + 116);
      unsigned int v5 = v10;
    }

    unint64_t v11 = v5 - 20LL;
    unint64_t v12 = (*(_DWORD *)(a1 + 72) - *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
    else {
      size_t v13 = v11 & 0xFFFFFFF8;
    }
    uint64_t v14 = *(void *)(v9 + 48);
    if (v14) {
      ++*(void *)(v14 + 232);
    }
    *(void *)(v4 + 12) = *(void *)(v9 + 56);
    *(_BYTE *)(v4 + 9) = *(_BYTE *)(v9 + 134);
    *(_BYTE *)(v4 + 8) = *(_BYTE *)(v9 + 135);
    *(_BYTE *)uint64_t v4 = 69;
    *(_WORD *)(v4 + 2) = bswap32(v13 + 20) >> 16;
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15)
    {
      char v16 = *(_BYTE *)(v15 + 186) & 3;
      goto LABEL_17;
    }

    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    __int16 v57 = "__nw_frame_get_ecn_flag";
    uint64_t v33 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v54 = 0;
    int v52 = (char *)v33;
    if (__nwlog_fault(v33, &type, &v54))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v34 = (os_log_s *)__nwlog_obj();
        os_log_type_t v35 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          __int16 v57 = "__nw_frame_get_ecn_flag";
          uint64_t v36 = "%{public}s called with null frame";
LABEL_67:
          _os_log_impl(&dword_181A5C000, v34, v35, v36, buf, 0xCu);
        }
      }

      else
      {
        unint64_t v47 = v12;
        if (v54)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          uint64_t v34 = (os_log_s *)__nwlog_obj();
          os_log_type_t v35 = type;
          BOOL v49 = os_log_type_enabled(v34, type);
          if (backtrace_string)
          {
            if (v49)
            {
              *(_DWORD *)__int128 buf = 136446466;
              __int16 v57 = "__nw_frame_get_ecn_flag";
              __int16 v58 = 2082;
              os_log_type_t v59 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v34,  v35,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(backtrace_string);
            unint64_t v12 = v47;
            goto LABEL_68;
          }

          unint64_t v12 = v47;
          if (v49)
          {
            *(_DWORD *)__int128 buf = 136446210;
            __int16 v57 = "__nw_frame_get_ecn_flag";
            uint64_t v36 = "%{public}s called with null frame, no backtrace";
            goto LABEL_67;
          }
        }

        else
        {
          uint64_t v34 = (os_log_s *)__nwlog_obj();
          os_log_type_t v35 = type;
          if (os_log_type_enabled(v34, type))
          {
            *(_DWORD *)__int128 buf = 136446210;
            __int16 v57 = "__nw_frame_get_ecn_flag";
            uint64_t v36 = "%{public}s called with null frame, backtrace limit exceeded";
            goto LABEL_67;
          }
        }
      }
    }

uint64_t ___ZL33nw_protocol_ipv4_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke( void *a1, uint64_t a2)
{
  uint64_t v48 = *MEMORY[0x1895F89C0];
  uint64_t v4 = *(void *)(a1[4] + 8LL);
  if (!*(_BYTE *)(v4 + 24))
  {
    if (a2)
    {
      unsigned int v6 = *(unsigned __int16 *)(a2 + 204) | (*(unsigned __int8 *)(a2 + 206) << 16);
      goto LABEL_12;
    }

uint64_t ___ZL33nw_protocol_ipv4_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_19( void *a1, uint64_t a2)
{
  if (!nw_protocol_ipv4_process_input_frame( a1[7],  a2,  a1[8],  a1[9],  (_DWORD *)(*(void *)(a1[4] + 8LL) + 24LL),  (_DWORD *)(*(void *)(a1[5] + 8LL) + 24LL)))
  {
    --*(_DWORD *)(*(void *)(a1[4] + 8LL) + 24LL);
    uint64_t v4 = *(void *)(a2 + 32);
    int v5 = *(void **)(a2 + 40);
    if (v4)
    {
      *(void *)(v4 + 40) = v5;
      int v5 = *(void **)(a2 + 40);
    }

    else
    {
      *(void *)(a1[8] + 8LL) = v5;
    }

    *int v5 = v4;
    *(void *)(a2 + 32) = 0LL;
    *(void *)(a2 + 40) = 0LL;
    nw_frame_finalize(a2);
    *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
  }

  return 1LL;
}

uint64_t ___ZL33nw_protocol_ipv4_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_2( uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t v3 = *(void *)(a2 + 32);
  uint64_t v4 = *(void **)(a2 + 40);
  if (v3)
  {
    *(void *)(v3 + 40) = v4;
    uint64_t v4 = *(void **)(a2 + 40);
  }

  else
  {
    *(void *)(*(void *)(a1 + 32) + 8LL) = v4;
  }

  *uint64_t v4 = v3;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  nw_frame_finalize(a2);
  uint64_t v5 = *(void *)(a1 + 40);
  if (!v5 || (*(_BYTE *)(v5 + 136) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unsigned int v6 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      int v8 = (const char *)(v7 + 137);
      if (!v7) {
        int v8 = "";
      }
      int v11 = 136446978;
      os_log_type_t v12 = "nw_protocol_ipv4_get_input_frames_block_invoke_2";
      __int16 v13 = 2082;
      uint64_t v14 = v8;
      if (v7) {
        uint64_t v9 = " ";
      }
      else {
        uint64_t v9 = "";
      }
      __int16 v15 = 2080;
      uint64_t v16 = v9;
      __int16 v17 = 2048;
      uint64_t v18 = v7;
      _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s%p Dropping unused IPv4 extra fragment",  (uint8_t *)&v11,  0x2Au);
    }
  }

  return 1LL;
}

uint64_t ___ZL36nw_protocol_ipv4_process_input_frameP16nw_protocol_ipv4P8nw_frameP16nw_frame_array_sS4_PjS5__block_invoke( uint64_t a1, uint64_t a2)
{
  uint64_t v54 = *MEMORY[0x1895F89C0];
  unsigned int v41 = 0;
  uint64_t v4 = nw_frame_unclaimed_bytes(a2, &v41);
  if (v4)
  {
    if (v41 > 0x13)
    {
      uint64_t v5 = v41 + ((bswap32(*(unsigned __int16 *)(v4 + 6)) >> 13) & 0xFFF8LL) - 20;
      uint64_t result = 1LL;
      uint64_t v7 = *(void *)(a1 + 48);
      int v8 = (void *)(*(void *)(a1 + 40) + 72LL);
      uint64_t v10 = *(void *)(a2 + 32);
      uint64_t v9 = (void *)(a2 + 32);
      *(void *)(v7 + 32) = v10;
      int v11 = (void *)(v10 + 40);
      if (v10) {
        int v8 = v11;
      }
      *int v8 = v7 + 32;
      *uint64_t v9 = v7;
      *(void *)(v7 + 40) = v9;
      *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
      return 0LL;
    }

    uint64_t v17 = *(void *)(a1 + 40);
    if (v17 && (*(_BYTE *)(v17 + 136) & 1) != 0) {
      return 0LL;
    }
    __nwlog_obj();
    uint64_t v18 = *(void *)(a1 + 40);
    uint64_t v19 = (const char *)(v18 + 137);
    *(_DWORD *)__int128 buf = 136447234;
    uint64_t v43 = "nw_protocol_ipv4_process_input_frame_block_invoke";
    __int16 v44 = 2082;
    if (v18)
    {
      BOOL v20 = " ";
    }

    else
    {
      uint64_t v19 = "";
      BOOL v20 = "";
    }

    uint64_t v45 = v19;
    __int16 v46 = 2080;
    unint64_t v47 = v20;
    __int16 v48 = 2048;
    uint64_t v49 = v18;
    __int16 v50 = 1024;
    unsigned int v51 = v41;
    uint64_t v21 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (__nwlog_fault(v21, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v22 = (os_log_s *)__nwlog_obj();
        os_log_type_t v23 = type;
        if (!os_log_type_enabled(v22, type)) {
          goto LABEL_49;
        }
        uint64_t v24 = *(void *)(a1 + 40);
        uint64_t v25 = (const char *)(v24 + 137);
        if (v24)
        {
          os_log_type_t v26 = " ";
        }

        else
        {
          uint64_t v25 = "";
          os_log_type_t v26 = "";
        }

        *(_DWORD *)__int128 buf = 136447234;
        uint64_t v43 = "nw_protocol_ipv4_process_input_frame_block_invoke";
        __int16 v44 = 2082;
        uint64_t v45 = v25;
        __int16 v46 = 2080;
        unint64_t v47 = v26;
        __int16 v48 = 2048;
        uint64_t v49 = v24;
        __int16 v50 = 1024;
        unsigned int v51 = v41;
        uint64_t v27 = "%{public}s %{public}s%s%p Invalid IP reassembly frame for ordering (length %u)";
        goto LABEL_48;
      }

      if (!v39)
      {
        uint64_t v22 = (os_log_s *)__nwlog_obj();
        os_log_type_t v23 = type;
        if (!os_log_type_enabled(v22, type)) {
          goto LABEL_49;
        }
        uint64_t v33 = *(void *)(a1 + 40);
        uint64_t v34 = (const char *)(v33 + 137);
        if (v33)
        {
          BOOL v35 = " ";
        }

        else
        {
          uint64_t v34 = "";
          BOOL v35 = "";
        }

        *(_DWORD *)__int128 buf = 136447234;
        uint64_t v43 = "nw_protocol_ipv4_process_input_frame_block_invoke";
        __int16 v44 = 2082;
        uint64_t v45 = v34;
        __int16 v46 = 2080;
        unint64_t v47 = v35;
        __int16 v48 = 2048;
        uint64_t v49 = v33;
        __int16 v50 = 1024;
        unsigned int v51 = v41;
        uint64_t v27 = "%{public}s %{public}s%s%p Invalid IP reassembly frame for ordering (length %u), backtrace limit exceeded";
        goto LABEL_48;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      BOOL v29 = os_log_type_enabled(v22, type);
      if (backtrace_string)
      {
        if (v29)
        {
          uint64_t v30 = *(void *)(a1 + 40);
          uint64_t v31 = (const char *)(v30 + 137);
          os_log_type_t v32 = "";
          if (v30) {
            os_log_type_t v32 = " ";
          }
          else {
            uint64_t v31 = "";
          }
          *(_DWORD *)__int128 buf = 136447490;
          uint64_t v43 = "nw_protocol_ipv4_process_input_frame_block_invoke";
          __int16 v44 = 2082;
          uint64_t v45 = v31;
          __int16 v46 = 2080;
          unint64_t v47 = v32;
          __int16 v48 = 2048;
          uint64_t v49 = v30;
          __int16 v50 = 1024;
          unsigned int v51 = v41;
          __int16 v52 = 2082;
          unsigned int v53 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s %{public}s%s%p Invalid IP reassembly frame for ordering (length %u), dumping backtrace:%{public}s",  buf,  0x3Au);
        }

        free(backtrace_string);
        goto LABEL_49;
      }

      char v36 = "";
      if (v29)
      {
        uint64_t v37 = *(void *)(a1 + 40);
        uint64_t v38 = (const char *)(v37 + 137);
        if (v37) {
          char v36 = " ";
        }
        else {
          uint64_t v38 = "";
        }
        *(_DWORD *)__int128 buf = 136447234;
        uint64_t v43 = "nw_protocol_ipv4_process_input_frame_block_invoke";
        __int16 v44 = 2082;
        uint64_t v45 = v38;
        __int16 v46 = 2080;
        unint64_t v47 = v36;
        __int16 v48 = 2048;
        uint64_t v49 = v37;
        __int16 v50 = 1024;
        unsigned int v51 = v41;
        uint64_t v27 = "%{public}s %{public}s%s%p Invalid IP reassembly frame for ordering (length %u), no backtrace";
LABEL_48:
        _os_log_impl(&dword_181A5C000, v22, v23, v27, buf, 0x30u);
      }
    }

uint64_t ___ZL43nw_protocol_ipv4_append_reassembled_packetsP16nw_protocol_ipv4P16nw_frame_array_sPb_block_invoke( void *a1, uint64_t a2)
{
  uint64_t v44 = *MEMORY[0x1895F89C0];
  unsigned int v28 = 0;
  uint64_t v3 = nw_frame_unclaimed_bytes(a2, &v28);
  if (v3)
  {
    uint64_t v4 = v3;
    unsigned int v5 = (bswap32(*(unsigned __int16 *)(v3 + 6)) >> 13) & 0x7FFF8;
    uint64_t v6 = bswap32(*(unsigned __int16 *)(v3 + 2)) >> 16;
    uint64_t v7 = a1[6];
    if (!v7 || (*(_BYTE *)(v7 + 136) & 1) == 0)
    {
      if (gLogDatapath)
      {
        uint64_t v22 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v23 = a1[6];
          uint64_t v24 = (const char *)(v23 + 137);
          uint64_t v25 = "";
          if (!v23) {
            uint64_t v24 = "";
          }
          int v26 = *(unsigned __int16 *)(v23 + 132);
          if (v23) {
            uint64_t v25 = " ";
          }
          int v27 = *(unsigned __int16 *)(*(void *)(a1[4] + 8LL) + 24LL);
          *(_DWORD *)__int128 buf = 136448258;
          uint64_t v30 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
          __int16 v31 = 2082;
          os_log_type_t v32 = v24;
          __int16 v33 = 2080;
          uint64_t v34 = v25;
          __int16 v35 = 2048;
          uint64_t v36 = v23;
          __int16 v37 = 1024;
          *(_DWORD *)uint64_t v38 = v26;
          *(_WORD *)&v38[4] = 1024;
          *(_DWORD *)&v38[6] = v28;
          *(_WORD *)char v39 = 1024;
          *(_DWORD *)&v39[2] = v6;
          __int16 v40 = 1024;
          int v41 = (unsigned __int16)v5;
          __int16 v42 = 1024;
          int v43 = v27;
          _os_log_impl( &dword_181A5C000,  v22,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s%p Examining fragment for IP ID %u, length %u ip_len %u offset %u aggregate length %u",  buf,  0x48u);
        }
      }
    }

    uint64_t v8 = *(void *)(a1[4] + 8LL);
    if (*(unsigned __int16 *)(v8 + 24) == (unsigned __int16)v5)
    {
      unint64_t v9 = v6 - 20 + (unsigned __int16)v5;
      *(_WORD *)(v8 + 24) = v9;
      if (!__CFADD__(v6 - 20, (unsigned __int16)v5) && v9 < 0x10000)
      {
        uint64_t result = 1LL;
        if ((*(_WORD *)(v4 + 6) & 0x20) == 0)
        {
          *(_BYTE *)(*(void *)(a1[5] + 8LL) + 24LL) = 1;
          return 0LL;
        }

        return result;
      }

      uint64_t v11 = a1[6];
      if (!v11 || (*(_BYTE *)(v11 + 136) & 1) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v12 = (os_log_s *)gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          uint64_t v13 = a1[6];
          BOOL v14 = (const char *)(v13 + 137);
          __int16 v15 = "";
          if (v13) {
            __int16 v15 = " ";
          }
          else {
            BOOL v14 = "";
          }
          int v16 = *(unsigned __int16 *)(*(void *)(a1[4] + 8LL) + 24LL);
          *(_DWORD *)__int128 buf = 136447490;
          uint64_t v30 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
          __int16 v31 = 2082;
          os_log_type_t v32 = v14;
          __int16 v33 = 2080;
          uint64_t v34 = v15;
          __int16 v35 = 2048;
          uint64_t v36 = v13;
          __int16 v37 = 2048;
          *(void *)uint64_t v38 = v28 - 20LL;
          *(_WORD *)&v38[8] = 1024;
          *(_DWORD *)char v39 = v16;
          _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s%p Cannot add %lu to existing offset %u",  buf,  0x3Au);
        }
      }
    }

    uint64_t result = 0LL;
    *(_BYTE *)(*(void *)(a1[5] + 8LL) + 24LL) = 0;
    return result;
  }

  uint64_t v17 = a1[6];
  if (!v17 || (*(_BYTE *)(v17 + 136) & 1) == 0)
  {
    uint64_t v18 = (os_log_s *)__nwlog_obj();
    BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_INFO);
    uint64_t v17 = a1[6];
    if (v19)
    {
      BOOL v20 = (const char *)(v17 + 137);
      if (!v17) {
        BOOL v20 = "";
      }
      *(_DWORD *)__int128 buf = 136446978;
      uint64_t v30 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
      __int16 v31 = 2082;
      os_log_type_t v32 = v20;
      uint64_t v21 = " ";
      if (!v17) {
        uint64_t v21 = "";
      }
      __int16 v33 = 2080;
      uint64_t v34 = v21;
      __int16 v35 = 2048;
      uint64_t v36 = v17;
      _os_log_impl( &dword_181A5C000,  v18,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s%p Frame is no longer valid",  buf,  0x2Au);
      uint64_t v17 = a1[6];
    }
  }

  uint64_t result = 0LL;
  *(void *)(v17 + 48) = 0LL;
  return result;
}

void nw_protocol_ipv4_frame_input_finalizer(nw_frame *a1, BOOL a2, void *a3)
{
  buffer = (void *)nw_frame_get_buffer((uint64_t)a1, 0LL);
  if (buffer) {
    free(buffer);
  }
  uint64_t v6 = *((void *)a1 + 2);
  uint64_t v7 = (void *)*((void *)a1 + 3);
  if (v6)
  {
    *(void *)(v6 + 24) = v7;
    uint64_t v7 = (void *)*((void *)a1 + 3);
  }

  else
  {
    a3[11] = v7;
  }

  *uint64_t v7 = v6;
  *((void *)a1 + 2) = 0LL;
  *((void *)a1 + 3) = 0LL;
  os_release(a1);
}

uint64_t ___ZL43nw_protocol_ipv4_append_reassembled_packetsP16nw_protocol_ipv4P16nw_frame_array_sPb_block_invoke_24( uint64_t a1, uint64_t a2)
{
  *(void *)&v130[11] = *MEMORY[0x1895F89C0];
  unsigned int v118 = 0;
  uint64_t v3 = nw_frame_unclaimed_bytes(a2, &v118);
  if (v3)
  {
    if (v118 <= 0x13)
    {
      uint64_t v43 = *(void *)(a1 + 40);
      if (v43 && (*(_BYTE *)(v43 + 136) & 1) != 0) {
        return 0LL;
      }
      __nwlog_obj();
      uint64_t v44 = *(void *)(a1 + 40);
      uint64_t v45 = (const char *)(v44 + 137);
      *(_DWORD *)__int128 buf = 136447234;
      __int16 v120 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
      __int16 v121 = 2082;
      if (v44)
      {
        __int16 v46 = " ";
      }

      else
      {
        uint64_t v45 = "";
        __int16 v46 = "";
      }

      __int16 v122 = v45;
      __int16 v123 = 2080;
      __int16 v124 = v46;
      __int16 v125 = 2048;
      uint64_t v126 = v44;
      __int16 v127 = 1024;
      unsigned int v128 = v118;
      unint64_t v47 = (const char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v116 = 0;
      if (__nwlog_fault(v47, &type, &v116))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __int16 v48 = (os_log_s *)__nwlog_obj();
          os_log_type_t v49 = type;
          if (!os_log_type_enabled(v48, type)) {
            goto LABEL_143;
          }
          uint64_t v50 = *(void *)(a1 + 40);
          unsigned int v51 = (const char *)(v50 + 137);
          if (v50)
          {
            __int16 v52 = " ";
          }

          else
          {
            unsigned int v51 = "";
            __int16 v52 = "";
          }

          *(_DWORD *)__int128 buf = 136447234;
          __int16 v120 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
          __int16 v121 = 2082;
          __int16 v122 = v51;
          __int16 v123 = 2080;
          __int16 v124 = v52;
          __int16 v125 = 2048;
          uint64_t v126 = v50;
          __int16 v127 = 1024;
          unsigned int v128 = v118;
          unsigned int v53 = "%{public}s %{public}s%s%p Invalid IP reassembly frame (length %u)";
        }

        else if (v116)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __int16 v48 = (os_log_s *)__nwlog_obj();
          os_log_type_t v49 = type;
          BOOL v75 = os_log_type_enabled(v48, type);
          if (backtrace_string)
          {
            if (v75)
            {
              uint64_t v76 = *(void *)(a1 + 40);
              int v77 = (const char *)(v76 + 137);
              if (v76)
              {
                BOOL v78 = " ";
              }

              else
              {
                int v77 = "";
                BOOL v78 = "";
              }

              *(_DWORD *)__int128 buf = 136447490;
              __int16 v120 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
              __int16 v121 = 2082;
              __int16 v122 = v77;
              __int16 v123 = 2080;
              __int16 v124 = v78;
              __int16 v125 = 2048;
              uint64_t v126 = v76;
              __int16 v127 = 1024;
              unsigned int v128 = v118;
              __int16 v129 = 2082;
              *(void *)int v130 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v48,  v49,  "%{public}s %{public}s%s%p Invalid IP reassembly frame (length %u), dumping backtrace:%{public}s",  buf,  0x3Au);
            }

            free(backtrace_string);
            goto LABEL_143;
          }

          if (!v75) {
            goto LABEL_143;
          }
          uint64_t v102 = *(void *)(a1 + 40);
          uint64_t v103 = (const char *)(v102 + 137);
          if (v102)
          {
            unsigned int v104 = " ";
          }

          else
          {
            uint64_t v103 = "";
            unsigned int v104 = "";
          }

          *(_DWORD *)__int128 buf = 136447234;
          __int16 v120 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
          __int16 v121 = 2082;
          __int16 v122 = v103;
          __int16 v123 = 2080;
          __int16 v124 = v104;
          __int16 v125 = 2048;
          uint64_t v126 = v102;
          __int16 v127 = 1024;
          unsigned int v128 = v118;
          unsigned int v53 = "%{public}s %{public}s%s%p Invalid IP reassembly frame (length %u), no backtrace";
        }

        else
        {
          __int16 v48 = (os_log_s *)__nwlog_obj();
          os_log_type_t v49 = type;
          if (!os_log_type_enabled(v48, type)) {
            goto LABEL_143;
          }
          uint64_t v91 = *(void *)(a1 + 40);
          __int16 v92 = (const char *)(v91 + 137);
          if (v91)
          {
            __int128 v93 = " ";
          }

          else
          {
            __int16 v92 = "";
            __int128 v93 = "";
          }

          *(_DWORD *)__int128 buf = 136447234;
          __int16 v120 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
          __int16 v121 = 2082;
          __int16 v122 = v92;
          __int16 v123 = 2080;
          __int16 v124 = v93;
          __int16 v125 = 2048;
          uint64_t v126 = v91;
          __int16 v127 = 1024;
          unsigned int v128 = v118;
          unsigned int v53 = "%{public}s %{public}s%s%p Invalid IP reassembly frame (length %u), backtrace limit exceeded";
        }

        uint32_t v105 = v48;
        os_log_type_t v106 = v49;
        uint32_t v107 = 48;
LABEL_142:
        _os_log_impl(&dword_181A5C000, v105, v106, v53, buf, v107);
      }
    }

    else
    {
      unsigned int v4 = bswap32(*(unsigned __int16 *)(v3 + 2)) >> 16;
      if (v118 >= v4)
      {
        unsigned int v5 = v4 - 20;
        uint64_t v6 = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
        if (v6 + v4 - 20 <= *(_DWORD *)(a1 + 56))
        {
          memcpy((void *)(*(void *)(a1 + 48) + v6), (const void *)(v3 + 20), v4 - 20);
          uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8LL);
          int v8 = *(_DWORD *)(v7 + 24);
          *(_DWORD *)(v7 + 24) = v8 + v5;
          if (!__CFADD__(v8, v5)) {
            return 1LL;
          }
          uint64_t v9 = *(void *)(a1 + 40);
          if (v9 && (*(_BYTE *)(v9 + 136) & 1) != 0) {
            return 0LL;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v10 = *(void *)(a1 + 40);
          uint64_t v11 = (const char *)(v10 + 137);
          if (v10)
          {
            uint64_t v12 = " ";
          }

          else
          {
            uint64_t v11 = "";
            uint64_t v12 = "";
          }

          int v13 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
          *(_DWORD *)__int128 buf = 136447490;
          __int16 v120 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
          __int16 v121 = 2082;
          __int16 v122 = v11;
          __int16 v123 = 2080;
          __int16 v124 = v12;
          __int16 v125 = 2048;
          uint64_t v126 = v10;
          __int16 v127 = 1024;
          unsigned int v128 = v4 - 20;
          __int16 v129 = 1024;
          *(_DWORD *)int v130 = v13;
          BOOL v14 = (const char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v116 = 0;
          if (__nwlog_fault(v14, &type, &v116))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              __int16 v15 = (os_log_s *)gLogObj;
              os_log_type_t v16 = type;
              if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
                goto LABEL_38;
              }
              uint64_t v17 = *(void *)(a1 + 40);
              uint64_t v18 = (const char *)(v17 + 137);
              if (v17)
              {
                BOOL v19 = " ";
              }

              else
              {
                uint64_t v18 = "";
                BOOL v19 = "";
              }

              int v20 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
              *(_DWORD *)__int128 buf = 136447490;
              __int16 v120 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
              __int16 v121 = 2082;
              __int16 v122 = v18;
              __int16 v123 = 2080;
              __int16 v124 = v19;
              __int16 v125 = 2048;
              uint64_t v126 = v17;
              __int16 v127 = 1024;
              unsigned int v128 = v4 - 20;
              __int16 v129 = 1024;
              *(_DWORD *)int v130 = v20;
              uint64_t v21 = "%{public}s %{public}s%s%p Cannot add %u to new frame offset %u";
              goto LABEL_37;
            }

            if (!v116)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              __int16 v15 = (os_log_s *)gLogObj;
              os_log_type_t v16 = type;
              if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
                goto LABEL_38;
              }
              uint64_t v29 = *(void *)(a1 + 40);
              uint64_t v30 = (const char *)(v29 + 137);
              if (v29)
              {
                __int16 v31 = " ";
              }

              else
              {
                uint64_t v30 = "";
                __int16 v31 = "";
              }

              int v32 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
              *(_DWORD *)__int128 buf = 136447490;
              __int16 v120 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
              __int16 v121 = 2082;
              __int16 v122 = v30;
              __int16 v123 = 2080;
              __int16 v124 = v31;
              __int16 v125 = 2048;
              uint64_t v126 = v29;
              __int16 v127 = 1024;
              unsigned int v128 = v4 - 20;
              __int16 v129 = 1024;
              *(_DWORD *)int v130 = v32;
              uint64_t v21 = "%{public}s %{public}s%s%p Cannot add %u to new frame offset %u, backtrace limit exceeded";
              goto LABEL_37;
            }

            uint64_t v23 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            __int16 v15 = (os_log_s *)gLogObj;
            os_log_type_t v16 = type;
            BOOL v24 = os_log_type_enabled((os_log_t)gLogObj, type);
            if (!v23)
            {
              if (!v24) {
                goto LABEL_38;
              }
              uint64_t v33 = *(void *)(a1 + 40);
              uint64_t v34 = (const char *)(v33 + 137);
              if (v33)
              {
                __int16 v35 = " ";
              }

              else
              {
                uint64_t v34 = "";
                __int16 v35 = "";
              }

              int v36 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
              *(_DWORD *)__int128 buf = 136447490;
              __int16 v120 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
              __int16 v121 = 2082;
              __int16 v122 = v34;
              __int16 v123 = 2080;
              __int16 v124 = v35;
              __int16 v125 = 2048;
              uint64_t v126 = v33;
              __int16 v127 = 1024;
              unsigned int v128 = v5;
              __int16 v129 = 1024;
              *(_DWORD *)int v130 = v36;
              uint64_t v21 = "%{public}s %{public}s%s%p Cannot add %u to new frame offset %u, no backtrace";
              goto LABEL_37;
            }

            if (v24)
            {
              uint64_t v25 = *(void *)(a1 + 40);
              int v26 = (const char *)(v25 + 137);
              if (v25)
              {
                int v27 = " ";
              }

              else
              {
                int v26 = "";
                int v27 = "";
              }

              int v28 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
              *(_DWORD *)__int128 buf = 136447746;
              __int16 v120 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
              __int16 v121 = 2082;
              __int16 v122 = v26;
              __int16 v123 = 2080;
              __int16 v124 = v27;
              __int16 v125 = 2048;
              uint64_t v126 = v25;
              __int16 v127 = 1024;
              unsigned int v128 = v5;
              __int16 v129 = 1024;
              *(_DWORD *)int v130 = v28;
              v130[2] = 2082;
              *(void *)&v130[3] = v23;
              _os_log_impl( &dword_181A5C000,  v15,  v16,  "%{public}s %{public}s%s%p Cannot add %u to new frame offset %u, dumping backtrace:%{public}s",  buf,  0x40u);
            }

            free(v23);
          }

uint64_t ___ZL43nw_protocol_ipv4_append_reassembled_packetsP16nw_protocol_ipv4P16nw_frame_array_sPb_block_invoke_26( uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  uint64_t v3 = *(void **)(a2 + 40);
  if (v2)
  {
    *(void *)(v2 + 40) = v3;
    uint64_t v3 = *(void **)(a2 + 40);
  }

  else
  {
    *(void *)(*(void *)(a1 + 32) + 72LL) = v3;
  }

  *uint64_t v3 = v2;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  nw_frame_finalize(a2);
  return 1LL;
}

void sub_182618E24(_Unwind_Exception *a1)
{
}

void sub_18261A438(_Unwind_Exception *a1)
{
}

void sub_18261A4B4(_Unwind_Exception *a1)
{
}

void sub_18261AE34( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, id location)
{
}

void sub_18261B97C(_Unwind_Exception *a1)
{
}

void sub_18261BF28(_Unwind_Exception *a1)
{
}

BOOL __nw_xpc_retain_array_with_validated_types_block_invoke(uint64_t a1, int a2, id a3)
{
  return object_getClass(a3) == *(Class *)(a1 + 32);
}

uint64_t nw_create_control_socket(uint64_t a1)
{
  uint64_t v66 = *MEMORY[0x1895F89C0];
  uint64_t v2 = socket(32, 2, 2);
  uint64_t v3 = v2;
  if ((v2 & 0x80000000) != 0)
  {
    int v4 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)__int128 buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_create_control_socket";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = v4;
    unsigned int v5 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v48[0] = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v6 = gLogObj;
      os_log_type_t v7 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_33;
      }
      *(_DWORD *)__int128 buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_create_control_socket";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = v4;
      int v8 = "%{public}s socket(PF_SYSTEM, SOCK_DGRAM, SYSPROTO_CONTROL) failed %{darwin.errno}d";
    }

    else if (v48[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v6 = gLogObj;
      os_log_type_t v7 = type[0];
      BOOL v17 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
      if (backtrace_string)
      {
        if (!v17) {
          goto LABEL_25;
        }
        *(_DWORD *)__int128 buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_create_control_socket";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = v4;
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = backtrace_string;
        uint64_t v18 = "%{public}s socket(PF_SYSTEM, SOCK_DGRAM, SYSPROTO_CONTROL) failed %{darwin.errno}d, dumping backtrace:%{public}s";
        BOOL v19 = buf;
        int v20 = (os_log_s *)v6;
        os_log_type_t v21 = v7;
        uint32_t v22 = 28;
        goto LABEL_24;
      }

      if (!v17) {
        goto LABEL_33;
      }
      *(_DWORD *)__int128 buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_create_control_socket";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = v4;
      int v8 = "%{public}s socket(PF_SYSTEM, SOCK_DGRAM, SYSPROTO_CONTROL) failed %{darwin.errno}d, no backtrace";
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v6 = gLogObj;
      os_log_type_t v7 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_33;
      }
      *(_DWORD *)__int128 buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_create_control_socket";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = v4;
      int v8 = "%{public}s socket(PF_SYSTEM, SOCK_DGRAM, SYSPROTO_CONTROL) failed %{darwin.errno}d, backtrace limit exceeded";
    }

    uint64_t v23 = buf;
    BOOL v24 = (os_log_s *)v6;
    os_log_type_t v25 = v7;
    uint32_t v26 = 18;
LABEL_32:
    _os_log_impl(&dword_181A5C000, v24, v25, v8, v23, v26);
    goto LABEL_33;
  }

  int v51 = 1;
  if (setsockopt(v2, 0xFFFF, 4130, &v51, 4u))
  {
LABEL_3:
    close(v3);
    return 0xFFFFFFFFLL;
  }

  int v65 = 0;
  __int128 v63 = 0u;
  __int128 v64 = 0u;
  __int128 v62 = 0u;
  __int128 v61 = 0u;
  memset(buf, 0, sizeof(buf));
  if (a1)
  {
LABEL_9:
    uint64_t v9 = 0LL;
    while (1)
    {
      int v10 = *(unsigned __int8 *)(a1 + v9);
      buf[v9 + 4] = v10;
      if (!v10) {
        break;
      }
      if (++v9 == 95)
      {
        HIBYTE(v65) = 0;
        break;
      }
    }

    if (ioctl(v3, 0xC0644E03uLL, buf, v43) < 0) {
      goto LABEL_3;
    }
    *(_DWORD *)__int16 v48 = 139296;
    *(_DWORD *)&void v48[4] = *(_DWORD *)buf;
    *(_DWORD *)&v48[8] = 0;
    *(void *)&v48[12] = 0LL;
    uint64_t v49 = 0LL;
    int v50 = 0;
    if (connect(v3, (const sockaddr *)v48, 0x20u)) {
      goto LABEL_3;
    }
    int v47 = 0x20000;
    if (!setsockopt(v3, 0xFFFF, 4098, &v47, 4u)) {
      goto LABEL_48;
    }
    int v11 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)os_log_type_t type = 136446978;
    unsigned int v53 = "nw_create_control_socket";
    __int16 v54 = 1024;
    int v55 = v3;
    __int16 v56 = 1024;
    int v57 = v47;
    __int16 v58 = 1024;
    LODWORD(v59[0]) = v11;
    LODWORD(v44) = 30;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v46 = OS_LOG_TYPE_ERROR;
    char v45 = 0;
    if (__nwlog_fault(v12, &v46, &v45))
    {
      if (v46 == OS_LOG_TYPE_FAULT)
      {
        int v13 = (os_log_s *)__nwlog_obj();
        os_log_type_t v14 = v46;
        if (!os_log_type_enabled(v13, v46)) {
          goto LABEL_46;
        }
        *(_DWORD *)os_log_type_t type = 136446978;
        unsigned int v53 = "nw_create_control_socket";
        __int16 v54 = 1024;
        int v55 = v3;
        __int16 v56 = 1024;
        int v57 = v47;
        __int16 v58 = 1024;
        LODWORD(v59[0]) = v11;
        __int16 v15 = "%{public}s setsockopt(%d, SOL_SOCKET, SO_RCVBUF, %d) %{darwin.errno}d";
        goto LABEL_45;
      }

      if (!v45)
      {
        int v13 = (os_log_s *)__nwlog_obj();
        os_log_type_t v14 = v46;
        if (!os_log_type_enabled(v13, v46)) {
          goto LABEL_46;
        }
        *(_DWORD *)os_log_type_t type = 136446978;
        unsigned int v53 = "nw_create_control_socket";
        __int16 v54 = 1024;
        int v55 = v3;
        __int16 v56 = 1024;
        int v57 = v47;
        __int16 v58 = 1024;
        LODWORD(v59[0]) = v11;
        __int16 v15 = "%{public}s setsockopt(%d, SOL_SOCKET, SO_RCVBUF, %d) %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_45;
      }

      int v28 = (char *)__nw_create_backtrace_string();
      int v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = v46;
      BOOL v29 = os_log_type_enabled(v13, v46);
      if (v28)
      {
        if (v29)
        {
          *(_DWORD *)os_log_type_t type = 136447234;
          unsigned int v53 = "nw_create_control_socket";
          __int16 v54 = 1024;
          int v55 = v3;
          __int16 v56 = 1024;
          int v57 = v47;
          __int16 v58 = 1024;
          LODWORD(v59[0]) = v11;
          WORD2(v59[0]) = 2082;
          *(void *)((char *)v59 + 6) = v28;
          _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s setsockopt(%d, SOL_SOCKET, SO_RCVBUF, %d) %{darwin.errno}d, dumping backtrace:%{public}s",  (uint8_t *)type,  0x28u);
        }

        free(v28);
        goto LABEL_46;
      }

      if (v29)
      {
        *(_DWORD *)os_log_type_t type = 136446978;
        unsigned int v53 = "nw_create_control_socket";
        __int16 v54 = 1024;
        int v55 = v3;
        __int16 v56 = 1024;
        int v57 = v47;
        __int16 v58 = 1024;
        LODWORD(v59[0]) = v11;
        __int16 v15 = "%{public}s setsockopt(%d, SOL_SOCKET, SO_RCVBUF, %d) %{darwin.errno}d, no backtrace";
LABEL_45:
        _os_log_impl(&dword_181A5C000, v13, v14, v15, (uint8_t *)type, 0x1Eu);
      }
    }

uint64_t nw_throughput_to_bucket(unint64_t a1)
{
  unsigned __int8 v1 = 49 - __clz(a1);
  if (a1 >= 0x10000) {
    unsigned __int8 v2 = v1;
  }
  else {
    unsigned __int8 v2 = 1;
  }
  if (!a1) {
    return 0;
  }
  return v2;
}

uint64_t nw_bucket_to_throughput(unsigned int a1)
{
  uint64_t v1 = 0x8000LL << a1;
  if (a1 > 0x30) {
    uint64_t v1 = -1LL;
  }
  if (a1) {
    return v1;
  }
  else {
    return 0LL;
  }
}

uint64_t __nw_channel_purge_idle_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 1LL;
}

uint64_t nw_channel_check_defunct(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    uint64_t v12 = "nw_channel_check_defunct";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v9 = 0;
    if (__nwlog_fault(v3, &type, &v9))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v4 = (os_log_s *)__nwlog_obj();
        os_log_type_t v5 = type;
        if (os_log_type_enabled(v4, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          uint64_t v12 = "nw_channel_check_defunct";
          uint64_t v6 = "%{public}s called with null channel";
LABEL_26:
          _os_log_impl(&dword_181A5C000, v4, v5, v6, buf, 0xCu);
        }
      }

      else if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        int v4 = (os_log_s *)__nwlog_obj();
        os_log_type_t v5 = type;
        BOOL v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)__int128 buf = 136446466;
            uint64_t v12 = "nw_channel_check_defunct";
            __int16 v13 = 2082;
            os_log_type_t v14 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null channel, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_27;
        }

        if (v8)
        {
          *(_DWORD *)__int128 buf = 136446210;
          uint64_t v12 = "nw_channel_check_defunct";
          uint64_t v6 = "%{public}s called with null channel, no backtrace";
          goto LABEL_26;
        }
      }

      else
      {
        int v4 = (os_log_s *)__nwlog_obj();
        os_log_type_t v5 = type;
        if (os_log_type_enabled(v4, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          uint64_t v12 = "nw_channel_check_defunct";
          uint64_t v6 = "%{public}s called with null channel, backtrace limit exceeded";
          goto LABEL_26;
        }
      }
    }

void nw_channel_handle_defunct(uint64_t a1)
{
  uint64_t v46 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    out[0] = 136446210;
    *(void *)&out[1] = "nw_channel_handle_defunct";
    BOOL v29 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    char v38 = 0;
    if (buf[0] == 17)
    {
      int v30 = (os_log_s *)__nwlog_obj();
      os_log_type_t v31 = buf[0];
      if (!os_log_type_enabled(v30, (os_log_type_t)buf[0])) {
        goto LABEL_72;
      }
      out[0] = 136446210;
      *(void *)&out[1] = "nw_channel_handle_defunct";
      int v32 = "%{public}s called with null channel";
    }

    else if (v38)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v30 = (os_log_s *)__nwlog_obj();
      os_log_type_t v31 = buf[0];
      BOOL v34 = os_log_type_enabled(v30, (os_log_type_t)buf[0]);
      if (backtrace_string)
      {
        if (v34)
        {
          out[0] = 136446466;
          *(void *)&out[1] = "nw_channel_handle_defunct";
          LOWORD(out[3]) = 2082;
          *(void *)((char *)&out[3] + 2) = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v30,  v31,  "%{public}s called with null channel, dumping backtrace:%{public}s",  (uint8_t *)out,  0x16u);
        }

        free(backtrace_string);
LABEL_72:
        if (!v29) {
          return;
        }
LABEL_73:
        free(v29);
        return;
      }

      if (!v34) {
        goto LABEL_72;
      }
      out[0] = 136446210;
      *(void *)&out[1] = "nw_channel_handle_defunct";
      int v32 = "%{public}s called with null channel, no backtrace";
    }

    else
    {
      int v30 = (os_log_s *)__nwlog_obj();
      os_log_type_t v31 = buf[0];
      if (!os_log_type_enabled(v30, (os_log_type_t)buf[0])) {
        goto LABEL_72;
      }
      out[0] = 136446210;
      *(void *)&out[1] = "nw_channel_handle_defunct";
      int v32 = "%{public}s called with null channel, backtrace limit exceeded";
    }

uint64_t ___ZL25nw_channel_handle_defunctP10nw_channel_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t extra = nw_hash_node_get_extra(a2);
  nw_channel_disconnect_flow(*(void *)(a1 + 32), extra);
  return 1LL;
}

BOOL ___ZL24__nw_signpost_is_enabledv_block_invoke_86712()
{
  BOOL result = networkd_settings_get_BOOL((const char *)nw_setting_enable_signposts);
  _nw_signposts_enabled = result;
  return result;
}

BOOL ___ZL22nw_channel_get_globalsP10nw_context_block_invoke(uint64_t a1, void *a2)
{
  *a2 = nw_dictionary_create();
  BOOL result = nw_array_create();
  a2[1] = result;
  a2[2] = 0LL;
  return result;
}

void nw_channel_set_no_close_delay(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    *(_WORD *)(a1 + 444) |= 0x40u;
    return;
  }

  __nwlog_obj();
  *(_DWORD *)__int128 buf = 136446210;
  uint64_t v10 = "nw_channel_set_no_close_delay";
  uint64_t v1 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v1, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned __int8 v2 = (os_log_s *)__nwlog_obj();
      os_log_type_t v3 = type;
      if (!os_log_type_enabled(v2, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)__int128 buf = 136446210;
      uint64_t v10 = "nw_channel_set_no_close_delay";
      uint64_t v4 = "%{public}s called with null channel";
      goto LABEL_17;
    }

    if (!v7)
    {
      unsigned __int8 v2 = (os_log_s *)__nwlog_obj();
      os_log_type_t v3 = type;
      if (!os_log_type_enabled(v2, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)__int128 buf = 136446210;
      uint64_t v10 = "nw_channel_set_no_close_delay";
      uint64_t v4 = "%{public}s called with null channel, backtrace limit exceeded";
      goto LABEL_17;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    unsigned __int8 v2 = (os_log_s *)__nwlog_obj();
    os_log_type_t v3 = type;
    BOOL v6 = os_log_type_enabled(v2, type);
    if (backtrace_string)
    {
      if (v6)
      {
        *(_DWORD *)__int128 buf = 136446466;
        uint64_t v10 = "nw_channel_set_no_close_delay";
        __int16 v11 = 2082;
        int v12 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v2,  v3,  "%{public}s called with null channel, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_18;
    }

    if (v6)
    {
      *(_DWORD *)__int128 buf = 136446210;
      uint64_t v10 = "nw_channel_set_no_close_delay";
      uint64_t v4 = "%{public}s called with null channel, no backtrace";
LABEL_17:
      _os_log_impl(&dword_181A5C000, v2, v3, v4, buf, 0xCu);
    }
  }

uint64_t __nw_channel_create_event_source_block_invoke(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x1895F89C0];
  if (!*(void *)(*(void *)(a1 + 40) + 136LL)) {
    return (*(uint64_t (**)(void, void, void, void, uint64_t))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  0LL,  0LL,  0LL,  6LL);
  }
  while (1)
  {
    uint64_t result = os_channel_get_next_event_handle();
    if ((_DWORD)result) {
      break;
    }
    os_channel_packet_free();
  }

  if ((_DWORD)result != 96) {
    return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))(*(void *)(a1 + 32), 0LL);
  }
  return result;
}

void __nw_channel_create_event_source_block_invoke_8(uint64_t a1)
{
}

uint64_t __nw_channel_create_interface_advisory_source_block_invoke(uint64_t a1)
{
  if (!*(void *)(*(void *)(a1 + 40) + 136LL))
  {
    unsigned __int8 v2 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL);
    return v2();
  }

  if (calloc(1uLL, 0x60uLL))
  {
LABEL_3:
    os_channel_get_interface_advisory();
    unsigned __int8 v2 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL);
    return v2();
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  uint64_t v4 = (void *)_os_log_send_and_compose_impl();
  uint64_t result = __nwlog_abort((uint64_t)v4);
  if (!(_DWORD)result)
  {
    free(v4);
    goto LABEL_3;
  }

  __break(1u);
  return result;
}

void __nw_channel_create_interface_advisory_source_block_invoke_2(uint64_t a1)
{
}

void nw_channel_set_keep_path_flow_registration_open(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    int v16 = "nw_channel_set_keep_path_flow_registration_open";
    BOOL v6 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v19) = 16;
    char v14 = 0;
    if (v19 == 17)
    {
      char v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = v19;
      if (!os_log_type_enabled(v7, (os_log_type_t)v19)) {
        goto LABEL_38;
      }
      *(_DWORD *)__int128 buf = 136446210;
      int v16 = "nw_channel_set_keep_path_flow_registration_open";
      uint64_t v9 = "%{public}s called with null channel";
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = v19;
      BOOL v11 = os_log_type_enabled(v7, (os_log_type_t)v19);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          int v16 = "nw_channel_set_keep_path_flow_registration_open";
          __int16 v17 = 2082;
          v18[0] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null channel, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6) {
          return;
        }
LABEL_39:
        free(v6);
        return;
      }

      if (!v11) {
        goto LABEL_38;
      }
      *(_DWORD *)__int128 buf = 136446210;
      int v16 = "nw_channel_set_keep_path_flow_registration_open";
      uint64_t v9 = "%{public}s called with null channel, no backtrace";
    }

    else
    {
      char v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = v19;
      if (!os_log_type_enabled(v7, (os_log_type_t)v19)) {
        goto LABEL_38;
      }
      *(_DWORD *)__int128 buf = 136446210;
      int v16 = "nw_channel_set_keep_path_flow_registration_open";
      uint64_t v9 = "%{public}s called with null channel, backtrace limit exceeded";
    }

void sub_18261E2C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_channel_allocate_frames(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  unint64_t v2 = a1[15];
  unint64_t v1 = a1[16];
  BOOL v3 = v1 > v2;
  unint64_t v4 = v1 - v2;
  if (v3)
  {
    uint64_t v5 = v4 >= 0x20 ? 32LL : v4;
    if (v5)
    {
      while (1)
      {
        uint64_t v7 = nw_frame_create(32, 0LL, 0, 0LL, 0LL);
        if (!v7) {
          break;
        }
        *(_WORD *)(v7 + 204) |= 0x100u;
        *(void *)(v7 + 16) = 0LL;
        os_log_type_t v8 = (uint64_t *)a1[37];
        *(void *)(v7 + 24) = v8;
        *os_log_type_t v8 = v7;
        a1[37] = v7 + 16;
        ++a1[15];
        if (!--v5) {
          return;
        }
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)__int128 buf = 136446210;
      uint64_t v18 = "nw_channel_create_frame";
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v15 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v10 = (os_log_s *)gLogObj;
        os_log_type_t v11 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_24;
        }
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v18 = "nw_channel_create_frame";
        int v12 = "%{public}s nw_frame_create failed";
      }

      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v10 = (os_log_s *)gLogObj;
        os_log_type_t v11 = type;
        BOOL v14 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)__int128 buf = 136446466;
            uint64_t v18 = "nw_channel_create_frame";
            __int16 v19 = 2082;
            uint64_t v20 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s nw_frame_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }

        if (!v14)
        {
LABEL_24:
          if (v9) {
            free(v9);
          }
          return;
        }

        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v18 = "nw_channel_create_frame";
        int v12 = "%{public}s nw_frame_create failed, no backtrace";
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v10 = (os_log_s *)gLogObj;
        os_log_type_t v11 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_24;
        }
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v18 = "nw_channel_create_frame";
        int v12 = "%{public}s nw_frame_create failed, backtrace limit exceeded";
      }

      _os_log_impl(&dword_181A5C000, v10, v11, v12, buf, 0xCu);
      goto LABEL_24;
    }
  }

void ___ZL17nw_channel_createP10nw_contextPhjPvjbbPb_block_invoke(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  memset(out, 0, 48);
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  int v3 = *(_DWORD *)(v2 + 428);
  uuid_unparse((const unsigned __int8 *)(v2 + 88), out);
  snprintf(&out[36], 0xCuLL, "-%u", v3);
  uint64_t v4 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) + 152LL);
  if (!v4 || *(_DWORD *)(v4 + 124) != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v5 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      int v6 = *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) + 432LL);
      *(_DWORD *)__int128 buf = 136446722;
      uint64_t v9 = "nw_channel_create_block_invoke";
      __int16 v10 = 2082;
      os_log_type_t v11 = out;
      __int16 v12 = 1024;
      int v13 = v6;
      _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_INFO,  "%{public}s Channel destroyed with key: %{public}s and fd: %d",  buf,  0x1Cu);
    }
  }

  os_channel_destroy();
  *(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) + 136LL) = 0LL;
  *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) + 432LL) = -1;
  uint64_t v7 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  if (v7)
  {
    os_release(v7);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0LL;
  }

void ___ZL17nw_channel_createP10nw_contextPhjPvjbbPb_block_invoke_35(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40) && *(void *)(*(void *)(a1 + 32) + 136LL)) {
    os_channel_sync();
  }
  *(_WORD *)(*(void *)(a1 + 32) + 444LL) |= 4u;
  nw_channel_update_input_source(*(void *)(a1 + 32), 0LL, 1);
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(unsigned __int16 *)(v2 + 444);
  unsigned int v4 = v3 & 0xFFFFFFFB | (*(unsigned __int8 *)(v2 + 446) << 16);
  *(_WORD *)(v2 + 444) = v3 & 0xFFFB;
  *(_BYTE *)(v2 + 446) = BYTE2(v4);
}

void ___ZL17nw_channel_createP10nw_contextPhjPvjbbPb_block_invoke_2(uint64_t a1)
{
}

void ___ZL17nw_channel_createP10nw_contextPhjPvjbbPb_block_invoke_3(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40) && *(void *)(*(void *)(a1 + 32) + 136LL)) {
    os_channel_sync();
  }
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(unsigned __int16 *)(v2 + 444);
  int v4 = v3 | (*(unsigned __int8 *)(v2 + 446) << 16);
  if ((v3 & 2) == 0 && *(void *)(v2 + 176))
  {
    uint64_t v5 = (_WORD *)(v2 + 444);
    *(_BYTE *)(v2 + 446) = BYTE2(v4);
    *(_WORD *)(v2 + 444) = v4 | 2;
    unsigned int v7 = os_channel_available_slot_count();
    if (v7 || (nw_channel_check_defunct(v2) & 1) == 0)
    {
      if (*(_DWORD *)(v2 + 420) - 1 >= v7) {
        int v8 = 0;
      }
      else {
        int v8 = *(_DWORD *)(v2 + 420);
      }
      int v9 = *(unsigned __int16 *)(v2 + 444) | (*(unsigned __int8 *)(v2 + 446) << 16);
      if (v7 == v8)
      {
        if ((*(_WORD *)(v2 + 444) & 0x10) != 0)
        {
          int v10 = *(_WORD *)(v2 + 444) & 0xFFEF | (*(unsigned __int8 *)(v2 + 446) << 16);
          *uint64_t v5 = *(_WORD *)(v2 + 444) & 0xFFEF;
          *(_BYTE *)(v2 + 446) = BYTE2(v10);
          nw_queue_resume_source(*(void *)(v2 + 176), v6);
        }
      }

      else if ((*(_WORD *)(v2 + 444) & 0x10) == 0)
      {
        *(_BYTE *)(v2 + 446) = BYTE2(v9);
        *uint64_t v5 = v9 | 0x10;
        nw_queue_suspend_source(*(void *)(v2 + 176));
      }
    }

    int v11 = (unsigned __int16)*v5;
    unsigned int v12 = v11 & 0xFFFFFFFD | (*(unsigned __int8 *)(v2 + 446) << 16);
    *uint64_t v5 = v11 & 0xFFFD;
    *(_BYTE *)(v2 + 446) = BYTE2(v12);
    uint64_t v2 = *(void *)(a1 + 32);
  }

  if (*(void *)(v2 + 136) && *(void *)(v2 + 216))
  {
    unsigned int v13 = os_channel_available_slot_count();
    int v14 = *(_DWORD *)(v2 + 420);
    if (v14 - 1 >= v13) {
      int v14 = 0;
    }
    if (v13 != v14)
    {
      uint64_t v15 = *(char **)(v2 + 280);
      if (v15)
      {
        v16[0] = MEMORY[0x1895F87A8];
        v16[1] = 0x40000000LL;
        v16[2] = ___ZL34nw_channel_notify_output_availableP10nw_channel_block_invoke;
        v16[3] = &__block_descriptor_tmp_62_86906;
        void v16[4] = v2;
        nw_hash_table_apply(v15, (uint64_t)v16);
      }
    }
  }

void ___ZL17nw_channel_createP10nw_contextPhjPvjbbPb_block_invoke_4(uint64_t a1)
{
}

void ___ZL17nw_channel_createP10nw_contextPhjPvjbbPb_block_invoke_5(uint64_t a1)
{
  v56[3] = *MEMORY[0x1895F89C0];
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 136))
  {
    if (*(void *)(v1 + 216))
    {
      uint64_t v2 = *(void *)(v1 + 384);
      if (v2)
      {
        while (1)
        {
          if (!*(void *)(v1 + 136) || !*(void *)(v1 + 216)) {
            return;
          }
          uint64_t v3 = v2;
          uint64_t v2 = *(void *)(v2 + 56);
          uint64_t v4 = *(void *)(v3 + 24);
          int v5 = os_channel_flow_admissible();
          if (!v5) {
            break;
          }
          int v12 = v5;
          if (v5 != 55)
          {
            if (v5 == 2)
            {
              if (gLogDatapath)
              {
                unsigned int v13 = (os_log_s *)__nwlog_obj();
                if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)__int128 buf = 136446466;
                  __int16 v52 = "nw_channel_check_flows_allowed";
                  __int16 v53 = 2082;
                  __int16 v54 = (const char *)(v3 + 84);
                  _os_log_impl( &dword_181A5C000,  v13,  OS_LOG_TYPE_DEBUG,  "%{public}s Flow(%{public}s) is no longer present",  buf,  0x16u);
                }
              }
            }

            else
            {
              if (!*(void *)(v1 + 136))
              {
                if (_nw_signposts_once != -1) {
                  dispatch_once(&_nw_signposts_once, &__block_literal_global_65_86685);
                }
                goto LABEL_18;
              }

              if (((*(unsigned __int16 *)(v1 + 444) | (*(unsigned __int8 *)(v1 + 446) << 16)) & 0x80000) == 0)
              {
                if (!os_channel_is_defunct())
                {
                  __nwlog_obj();
                  *(_DWORD *)__int128 buf = 136446722;
                  unsigned int v28 = (const char *)(v3 + 84);
                  __int16 v52 = "nw_channel_check_flows_allowed";
                  __int16 v53 = 2082;
                  __int16 v54 = v28;
                  __int16 v55 = 1024;
                  LODWORD(v56[0]) = v12;
                  BOOL v29 = (const char *)_os_log_send_and_compose_impl();
                  os_log_type_t type = OS_LOG_TYPE_ERROR;
                  char v49 = 0;
                  __int16 v48 = (char *)v29;
                  if (type == OS_LOG_TYPE_FAULT)
                  {
                    int v30 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v31 = type;
                    os_log_t logc = v30;
                    if (os_log_type_enabled(v30, type))
                    {
                      *(_DWORD *)__int128 buf = 136446722;
                      __int16 v52 = "nw_channel_check_flows_allowed";
                      __int16 v53 = 2082;
                      __int16 v54 = v28;
                      __int16 v55 = 1024;
                      LODWORD(v56[0]) = v12;
                      int v32 = logc;
                      os_log_type_t v33 = v31;
                      BOOL v34 = "%{public}s Flow admissible check failed %{public}s %{darwin.errno}d";
                      goto LABEL_87;
                    }

                    goto LABEL_88;
                  }

                  if (v49)
                  {
                    backtrace_string = (char *)__nw_create_backtrace_string();
                    BOOL v39 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v41 = type;
                    BOOL v36 = os_log_type_enabled(v39, type);
                    if (backtrace_string)
                    {
                      if (v36)
                      {
                        *(_DWORD *)__int128 buf = 136446978;
                        __int16 v52 = "nw_channel_check_flows_allowed";
                        __int16 v53 = 2082;
                        __int16 v54 = v28;
                        __int16 v55 = 1024;
                        LODWORD(v56[0]) = v12;
                        WORD2(v56[0]) = 2082;
                        *(void *)((char *)v56 + 6) = backtrace_string;
                        _os_log_impl( &dword_181A5C000,  v39,  v41,  "%{public}s Flow admissible check failed %{public}s %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x26u);
                      }

                      free(backtrace_string);
                      goto LABEL_88;
                    }

                    if (!v36)
                    {
LABEL_88:
                      if (v48) {
                        free(v48);
                      }
                      goto LABEL_18;
                    }

                    *(_DWORD *)__int128 buf = 136446722;
                    __int16 v52 = "nw_channel_check_flows_allowed";
                    __int16 v53 = 2082;
                    __int16 v54 = v28;
                    __int16 v55 = 1024;
                    LODWORD(v56[0]) = v12;
                    int v32 = v39;
                    os_log_type_t v33 = v41;
                    BOOL v34 = "%{public}s Flow admissible check failed %{public}s %{darwin.errno}d, no backtrace";
                  }

                  else
                  {
                    os_log_type_t v37 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v38 = type;
                    os_log_t logd = v37;
                    if (!os_log_type_enabled(v37, type)) {
                      goto LABEL_88;
                    }
                    *(_DWORD *)__int128 buf = 136446722;
                    __int16 v52 = "nw_channel_check_flows_allowed";
                    __int16 v53 = 2082;
                    __int16 v54 = v28;
                    __int16 v55 = 1024;
                    LODWORD(v56[0]) = v12;
                    int v32 = logd;
                    os_log_type_t v33 = v38;
                    BOOL v34 = "%{public}s Flow admissible check failed %{public}s %{darwin.errno}d, backtrace limit exceeded";
                  }

void ___ZL17nw_channel_createP10nw_contextPhjPvjbbPb_block_invoke_6(uint64_t a1)
{
}

uint64_t __nw_channel_create_with_attributes_block_invoke(uint64_t a1, const char *a2)
{
  return 1LL;
}

uint64_t ___ZL34nw_channel_notify_output_availableP10nw_channel_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t object = (void *)nw_hash_node_get_object(a2);
  uint64_t v4 = *(void *)(a1 + 32);
  if (object)
  {
    int v5 = object;
    uint64_t v6 = object[3];
    if (v6)
    {
      uint64_t v7 = *(void (**)(void *, uint64_t))(v6 + 72);
      if (v7)
      {
        int v8 = (void *)object[5];
        if (v8 == &nw_protocol_ref_counted_handle)
        {
          uint64_t v9 = object[11];
          if (v9) {
            object[11] = v9 + 1;
          }
        }

        if (*(_UNKNOWN **)(v4 + 64) == &nw_protocol_ref_counted_handle)
        {
          uint64_t v10 = *(void *)(v4 + 112);
          if (v10) {
            *(void *)(v4 + 112) = v10 + 1;
          }
          v7(object, v4 + 24);
          if (*(_UNKNOWN **)(v4 + 64) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v14 = *(void *)(v4 + 112);
            if (v14)
            {
              uint64_t v15 = v14 - 1;
              *(void *)(v4 + 112) = v15;
              if (!v15)
              {
                os_log_type_t v16 = *(void (***)(void))(v4 + 88);
                if (v16)
                {
                  *(void *)(v4 + 88) = 0LL;
                  v16[2](v16);
                  _Block_release(v16);
                }

                if ((*(_BYTE *)(v4 + 96) & 1) != 0)
                {
                  __int16 v17 = *(const void **)(v4 + 88);
                  if (v17) {
                    _Block_release(v17);
                  }
                }

                free((void *)(v4 + 24));
              }
            }
          }
        }

        else
        {
          v7(object, v4 + 24);
        }

        if (v8 == &nw_protocol_ref_counted_handle && (_UNKNOWN *)v5[5] == &nw_protocol_ref_counted_handle)
        {
          uint64_t v18 = v5[11];
          if (v18)
          {
            uint64_t v19 = v18 - 1;
            v5[11] = v19;
            if (!v19)
            {
              uint64_t v20 = (void (**)(void))v5[8];
              if (v20)
              {
                v5[8] = 0LL;
                v20[2](v20);
                _Block_release(v20);
              }

              if ((v5[9] & 1) != 0)
              {
                uint64_t v21 = (const void *)v5[8];
                if (v21) {
                  _Block_release(v21);
                }
              }

              free(v5);
            }
          }
        }

        uint64_t v4 = *(void *)(a1 + 32);
      }
    }
  }

  if (!*(void *)(v4 + 176)) {
    return 0LL;
  }
  uint64_t result = *(void *)(v4 + 216);
  if (result)
  {
    unsigned int v12 = os_channel_available_slot_count();
    int v13 = *(_DWORD *)(*(void *)(a1 + 32) + 420LL);
    if (v13 - 1 >= v12) {
      int v13 = 0;
    }
    return v12 != v13;
  }

  return result;
}

uint64_t ___ZL30nw_channel_update_input_sourceP10nw_channelP11nw_protocolb_block_invoke( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  int v5 = *(void **)(a2 + 40);
  if (v4)
  {
    *(void *)(v4 + 40) = v5;
    int v5 = *(void **)(a2 + 40);
  }

  else
  {
    *(void *)(*(void *)(a1 + 32) + 344LL) = v5;
  }

  *int v5 = v4;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  return 1LL;
}

uint64_t nw_channel_add_input_frames(uint64_t a1, uint64_t a2)
{
  v258[32] = *MEMORY[0x1895F89C0];
  if (!*(void *)(a1 + 136) || !*(void *)(a1 + 224) || !os_channel_available_slot_count())
  {
    char v166 = 0;
    return v166 & 1;
  }

  __int128 v250 = 0u;
  __int128 v251 = 0u;
  __int128 v248 = 0u;
  __int128 v249 = 0u;
  uint64_t v3 = *(void *)(a1 + 288);
  uint64_t next_slot = os_channel_get_next_slot();
  uint64_t v245 = a1;
  int v5 = (unsigned __int16 *)(a1 + 444);
  if (!next_slot)
  {
    BOOL v168 = 0;
    char v166 = 0;
    int v169 = *v5 | (*(unsigned __int8 *)(a1 + 446) << 16) | 0x8000;
    int v170 = 1;
    goto LABEL_357;
  }

  char v239 = 0;
  unint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  BOOL v238 = (unsigned __int16 *)(a1 + 444);
  while (1)
  {
    uint64_t v8 = next_slot;
    if (!v3)
    {
      nw_channel_allocate_frames((void *)v245);
      uint64_t v3 = *(void *)(v245 + 288);
      if (!v3)
      {
        uint64_t v8 = v7;
        goto LABEL_269;
      }
    }

    uint64_t v237 = v7;
    uint64_t packet = os_channel_slot_get_packet();
    uint64_t v243 = v3;
    if (!packet)
    {
      uint64_t v130 = v8;
      if ((nw_channel_check_defunct(v245) & 1) != 0) {
        goto LABEL_381;
      }
      __nwlog_obj();
      *(_DWORD *)__int128 buf = 136446210;
      v254 = "nw_channel_add_input_frames";
      uint64_t v131 = (char *)_os_log_send_and_compose_impl();
      v257[0] = OS_LOG_TYPE_ERROR;
      type[0] = OS_LOG_TYPE_DEFAULT;
      if (v257[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v132 = (os_log_s *)__nwlog_obj();
        os_log_type_t v133 = v257[0];
        if (os_log_type_enabled(v132, v257[0]))
        {
          *(_DWORD *)__int128 buf = 136446210;
          v254 = "nw_channel_add_input_frames";
          uint64_t v134 = v132;
          os_log_type_t v135 = v133;
          os_log_type_t v136 = "%{public}s failed to get packet from channel";
          goto LABEL_261;
        }

        goto LABEL_262;
      }

      if (type[0])
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __int16 v149 = (os_log_s *)__nwlog_obj();
        os_log_type_t v150 = v257[0];
        BOOL v151 = os_log_type_enabled(v149, v257[0]);
        if (backtrace_string)
        {
          if (v151)
          {
            *(_DWORD *)__int128 buf = 136446466;
            v254 = "nw_channel_add_input_frames";
            __int16 v255 = 2082;
            v256[0] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v149,  v150,  "%{public}s failed to get packet from channel, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_262;
        }

        if (!v151) {
          goto LABEL_262;
        }
        *(_DWORD *)__int128 buf = 136446210;
        v254 = "nw_channel_add_input_frames";
        uint64_t v134 = v149;
        os_log_type_t v135 = v150;
        os_log_type_t v136 = "%{public}s failed to get packet from channel, no backtrace";
      }

      else
      {
        __int16 v160 = (os_log_s *)__nwlog_obj();
        os_log_type_t v161 = v257[0];
        if (!os_log_type_enabled(v160, v257[0])) {
          goto LABEL_262;
        }
        *(_DWORD *)__int128 buf = 136446210;
        v254 = "nw_channel_add_input_frames";
        uint64_t v134 = v160;
        os_log_type_t v135 = v161;
        os_log_type_t v136 = "%{public}s failed to get packet from channel, backtrace limit exceeded";
      }

      goto LABEL_261;
    }

    uint64_t v10 = packet;
    if ((*v5 & 0x1000) != 0 && os_channel_slot_detach_packet())
    {
      uint64_t v130 = v8;
      if ((nw_channel_check_defunct(v245) & 1) != 0) {
        goto LABEL_381;
      }
      __nwlog_obj();
      *(_DWORD *)__int128 buf = 136446210;
      v254 = "nw_channel_add_input_frames";
      uint64_t v131 = (char *)_os_log_send_and_compose_impl();
      v257[0] = OS_LOG_TYPE_ERROR;
      type[0] = OS_LOG_TYPE_DEFAULT;
      if (v257[0] == OS_LOG_TYPE_FAULT)
      {
        BOOL v146 = (os_log_s *)__nwlog_obj();
        os_log_type_t v147 = v257[0];
        if (os_log_type_enabled(v146, v257[0]))
        {
          *(_DWORD *)__int128 buf = 136446210;
          v254 = "nw_channel_add_input_frames";
          uint64_t v134 = v146;
          os_log_type_t v135 = v147;
          os_log_type_t v136 = "%{public}s failed to detach packet";
          goto LABEL_261;
        }

void ___ZL15nw_channel_initv_block_invoke()
{
  g_channel_check_validity = (uint64_t (*)(void, void))nw_channel_frame_check_validity;
  g_channel_reclassifier = (uint64_t (*)(void, void, void))nw_channel_reclassify_input;
  g_channel_set_flow_handler = (uint64_t (*)(void, void))nw_channel_set_flow_handler;
  g_channel_get_flow_handler = (uint64_t (*)(void, void))nw_channel_get_flow_handler;
  g_channel_set_internet_checksum_handler = nw_channel_set_internet_checksum_handler;
  g_channel_get_internet_checksum_handler = (uint64_t (*)(void, void, void, void))nw_channel_get_internet_checksum_handler;
  g_channel_protocol_callbacks = (uint64_t)nw_channel_add_input_handler;
  *(void *)algn_18C45F108 = nw_channel_remove_input_handler;
  qword_18C45F150 = (uint64_t)nw_channel_get_input_frames;
  unk_18C45F158 = nw_channel_get_output_frames;
  qword_18C45F160 = (uint64_t)nw_channel_finalize_output_frames;
  qword_18C45F110 = (uint64_t)nw_channel_replace_input_handler;
  unk_18C45F118 = nw_channel_connect;
  qword_18C45F120 = (uint64_t)nw_channel_disconnect;
  qword_18C45F1A8 = (uint64_t)nw_channel_updated_path;
  qword_18C45F1C0 = (uint64_t)nw_channel_output_finished;
  qword_18C45F1F8 = (uint64_t)nw_channel_get_message_properties;
}

void nw_channel_reclassify_input(nw_frame *a1, unsigned __int8 *uu, char *a3)
{
  uint64_t v78 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_channel_reclassify_input";
    uint64_t v47 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v75 = 0;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (v75)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v48 = (os_log_s *)__nwlog_obj();
        os_log_type_t v49 = type[0];
        BOOL v67 = os_log_type_enabled(v48, type[0]);
        if (backtrace_string)
        {
          if (v67)
          {
            *(_DWORD *)__int128 buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_channel_reclassify_input";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v48,  v49,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
        }

        else if (v67)
        {
          *(_DWORD *)__int128 buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_channel_reclassify_input";
          os_log_type_t v50 = "%{public}s called with null frame, no backtrace";
          goto LABEL_108;
        }
      }

      else
      {
        BOOL v48 = (os_log_s *)__nwlog_obj();
        os_log_type_t v49 = type[0];
        if (os_log_type_enabled(v48, type[0]))
        {
          *(_DWORD *)__int128 buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_channel_reclassify_input";
          os_log_type_t v50 = "%{public}s called with null frame, backtrace limit exceeded";
          goto LABEL_108;
        }
      }

      goto LABEL_109;
    }

    BOOL v48 = (os_log_s *)__nwlog_obj();
    os_log_type_t v49 = type[0];
    if (!os_log_type_enabled(v48, type[0])) {
      goto LABEL_109;
    }
    *(_DWORD *)__int128 buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_channel_reclassify_input";
    os_log_type_t v50 = "%{public}s called with null frame";
LABEL_108:
    _os_log_impl(&dword_181A5C000, v48, v49, v50, buf, 0xCu);
    goto LABEL_109;
  }

  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_channel_reclassify_input";
    uint64_t v47 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v75 = 0;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (v75)
      {
        uint64_t v59 = (char *)__nw_create_backtrace_string();
        BOOL v48 = (os_log_s *)__nwlog_obj();
        os_log_type_t v49 = type[0];
        BOOL v68 = os_log_type_enabled(v48, type[0]);
        if (v59)
        {
          if (v68)
          {
            *(_DWORD *)__int128 buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_channel_reclassify_input";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&buf[14] = v59;
            uint64_t v61 = "%{public}s called with null context, dumping backtrace:%{public}s";
            goto LABEL_93;
          }

uint64_t nw_channel_set_flow_handler(nw_frame *a1, unsigned __int8 *a2)
{
  uint64_t result = nw_frame_get_metadata((uint64_t)a1);
  if (result) {
    return os_packet_set_flow_uuid();
  }
  return result;
}

double nw_channel_get_flow_handler(nw_frame *a1, unsigned __int8 *a2)
{
  if (nw_frame_get_metadata((uint64_t)a1))
  {
    os_packet_get_flow_uuid();
    double result = *(double *)&v4;
    *(_OWORD *)a2 = v4;
  }

  return result;
}

BOOL nw_channel_replace_input_handler(nw_protocol *a1, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v87 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    os_log_type_t v80 = "nw_channel_replace_input_handler";
    int v23 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v78 = OS_LOG_TYPE_DEFAULT;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v24 = (os_log_s *)__nwlog_obj();
      os_log_type_t v25 = type[0];
      if (!os_log_type_enabled(v24, type[0])) {
        goto LABEL_110;
      }
      *(_DWORD *)__int128 buf = 136446210;
      os_log_type_t v80 = "nw_channel_replace_input_handler";
      os_log_type_t v26 = "%{public}s called with null channel_protocol";
      goto LABEL_109;
    }

    if (v78 == OS_LOG_TYPE_DEFAULT)
    {
      uint64_t v24 = (os_log_s *)__nwlog_obj();
      os_log_type_t v25 = type[0];
      if (!os_log_type_enabled(v24, type[0])) {
        goto LABEL_110;
      }
      *(_DWORD *)__int128 buf = 136446210;
      os_log_type_t v80 = "nw_channel_replace_input_handler";
      os_log_type_t v26 = "%{public}s called with null channel_protocol, backtrace limit exceeded";
      goto LABEL_109;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v24 = (os_log_s *)__nwlog_obj();
    os_log_type_t v25 = type[0];
    BOOL v68 = os_log_type_enabled(v24, type[0]);
    if (!backtrace_string)
    {
      if (!v68) {
        goto LABEL_110;
      }
      *(_DWORD *)__int128 buf = 136446210;
      os_log_type_t v80 = "nw_channel_replace_input_handler";
      os_log_type_t v26 = "%{public}s called with null channel_protocol, no backtrace";
      goto LABEL_109;
    }

    if (!v68) {
      goto LABEL_49;
    }
    *(_DWORD *)__int128 buf = 136446466;
    os_log_type_t v80 = "nw_channel_replace_input_handler";
    __int16 v81 = 2082;
    *(void *)os_log_type_t v82 = backtrace_string;
    uint64_t v34 = "%{public}s called with null channel_protocol, dumping backtrace:%{public}s";
    goto LABEL_48;
  }

  uint64_t handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    os_log_type_t v80 = "nw_channel_replace_input_handler";
    int v23 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v78 = OS_LOG_TYPE_DEFAULT;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v24 = (os_log_s *)__nwlog_obj();
      os_log_type_t v25 = type[0];
      if (!os_log_type_enabled(v24, type[0])) {
        goto LABEL_110;
      }
      *(_DWORD *)__int128 buf = 136446210;
      os_log_type_t v80 = "nw_channel_replace_input_handler";
      os_log_type_t v26 = "%{public}s called with null channel";
      goto LABEL_109;
    }

    if (v78 == OS_LOG_TYPE_DEFAULT)
    {
      uint64_t v24 = (os_log_s *)__nwlog_obj();
      os_log_type_t v25 = type[0];
      if (!os_log_type_enabled(v24, type[0])) {
        goto LABEL_110;
      }
      *(_DWORD *)__int128 buf = 136446210;
      os_log_type_t v80 = "nw_channel_replace_input_handler";
      os_log_type_t v26 = "%{public}s called with null channel, backtrace limit exceeded";
      goto LABEL_109;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v24 = (os_log_s *)__nwlog_obj();
    os_log_type_t v25 = type[0];
    BOOL v69 = os_log_type_enabled(v24, type[0]);
    if (!backtrace_string)
    {
      if (!v69) {
        goto LABEL_110;
      }
      *(_DWORD *)__int128 buf = 136446210;
      os_log_type_t v80 = "nw_channel_replace_input_handler";
      os_log_type_t v26 = "%{public}s called with null channel, no backtrace";
      goto LABEL_109;
    }

    if (!v69) {
      goto LABEL_49;
    }
    *(_DWORD *)__int128 buf = 136446466;
    os_log_type_t v80 = "nw_channel_replace_input_handler";
    __int16 v81 = 2082;
    *(void *)os_log_type_t v82 = backtrace_string;
    uint64_t v34 = "%{public}s called with null channel, dumping backtrace:%{public}s";
    goto LABEL_48;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    os_log_type_t v80 = "nw_channel_replace_input_handler";
    int v23 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v78 = OS_LOG_TYPE_DEFAULT;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v24 = (os_log_s *)__nwlog_obj();
      os_log_type_t v25 = type[0];
      if (!os_log_type_enabled(v24, type[0])) {
        goto LABEL_110;
      }
      *(_DWORD *)__int128 buf = 136446210;
      os_log_type_t v80 = "nw_channel_replace_input_handler";
      os_log_type_t v26 = "%{public}s called with null old_input_handler";
      goto LABEL_109;
    }

    if (v78 == OS_LOG_TYPE_DEFAULT)
    {
      uint64_t v24 = (os_log_s *)__nwlog_obj();
      os_log_type_t v25 = type[0];
      if (!os_log_type_enabled(v24, type[0])) {
        goto LABEL_110;
      }
      *(_DWORD *)__int128 buf = 136446210;
      os_log_type_t v80 = "nw_channel_replace_input_handler";
      os_log_type_t v26 = "%{public}s called with null old_input_handler, backtrace limit exceeded";
      goto LABEL_109;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v24 = (os_log_s *)__nwlog_obj();
    os_log_type_t v25 = type[0];
    BOOL v70 = os_log_type_enabled(v24, type[0]);
    if (!backtrace_string)
    {
      if (!v70) {
        goto LABEL_110;
      }
      *(_DWORD *)__int128 buf = 136446210;
      os_log_type_t v80 = "nw_channel_replace_input_handler";
      os_log_type_t v26 = "%{public}s called with null old_input_handler, no backtrace";
      goto LABEL_109;
    }

    if (!v70) {
      goto LABEL_49;
    }
    *(_DWORD *)__int128 buf = 136446466;
    os_log_type_t v80 = "nw_channel_replace_input_handler";
    __int16 v81 = 2082;
    *(void *)os_log_type_t v82 = backtrace_string;
    uint64_t v34 = "%{public}s called with null old_input_handler, dumping backtrace:%{public}s";
    goto LABEL_48;
  }

  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    os_log_type_t v80 = "nw_channel_replace_input_handler";
    int v23 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v78 = OS_LOG_TYPE_DEFAULT;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v24 = (os_log_s *)__nwlog_obj();
      os_log_type_t v25 = type[0];
      if (!os_log_type_enabled(v24, type[0])) {
        goto LABEL_110;
      }
      *(_DWORD *)__int128 buf = 136446210;
      os_log_type_t v80 = "nw_channel_replace_input_handler";
      os_log_type_t v26 = "%{public}s called with null new_input_handler";
      goto LABEL_109;
    }

    if (v78 == OS_LOG_TYPE_DEFAULT)
    {
      uint64_t v24 = (os_log_s *)__nwlog_obj();
      os_log_type_t v25 = type[0];
      if (!os_log_type_enabled(v24, type[0])) {
        goto LABEL_110;
      }
      *(_DWORD *)__int128 buf = 136446210;
      os_log_type_t v80 = "nw_channel_replace_input_handler";
      os_log_type_t v26 = "%{public}s called with null new_input_handler, backtrace limit exceeded";
      goto LABEL_109;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v24 = (os_log_s *)__nwlog_obj();
    os_log_type_t v25 = type[0];
    BOOL v71 = os_log_type_enabled(v24, type[0]);
    if (!backtrace_string)
    {
      if (!v71) {
        goto LABEL_110;
      }
      *(_DWORD *)__int128 buf = 136446210;
      os_log_type_t v80 = "nw_channel_replace_input_handler";
      os_log_type_t v26 = "%{public}s called with null new_input_handler, no backtrace";
      goto LABEL_109;
    }

    if (!v71) {
      goto LABEL_49;
    }
    *(_DWORD *)__int128 buf = 136446466;
    os_log_type_t v80 = "nw_channel_replace_input_handler";
    __int16 v81 = 2082;
    *(void *)os_log_type_t v82 = backtrace_string;
    uint64_t v34 = "%{public}s called with null new_input_handler, dumping backtrace:%{public}s";
    goto LABEL_48;
  }

  if (*(void *)a2->flow_id != *(void *)a3->flow_id || *(void *)&a2->flow_id[8] != *(void *)&a3->flow_id[8])
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)__int128 buf = 136447234;
    os_log_type_t v80 = "nw_channel_replace_input_handler";
    __int16 v81 = 1042;
    *(_DWORD *)os_log_type_t v82 = 16;
    *(_WORD *)&v82[4] = 2098;
    *(void *)&v82[6] = a2;
    __int16 v83 = 1042;
    *(_DWORD *)char v84 = 16;
    *(_WORD *)&uint8_t v84[4] = 2098;
    *(void *)&v84[6] = a3;
    __int128 v17 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v78 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v17, type, &v78))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v18 = (os_log_s *)gLogObj;
        os_log_type_t v19 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          *(_DWORD *)__int128 buf = 136447234;
          os_log_type_t v80 = "nw_channel_replace_input_handler";
          __int16 v81 = 1042;
          *(_DWORD *)os_log_type_t v82 = 16;
          *(_WORD *)&v82[4] = 2098;
          *(void *)&v82[6] = a2;
          __int16 v83 = 1042;
          *(_DWORD *)char v84 = 16;
          *(_WORD *)&uint8_t v84[4] = 2098;
          *(void *)&v84[6] = a3;
          uint64_t v20 = "%{public}s New input handler does not have matching flow ID (%{public,uuid_t}.16Ps != %{public,uuid_t}.16P)";
LABEL_35:
          _os_log_impl(&dword_181A5C000, v18, v19, v20, buf, 0x2Cu);
        }
      }

      else if (v78)
      {
        uint64_t v21 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v18 = (os_log_s *)gLogObj;
        os_log_type_t v19 = type[0];
        BOOL v22 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
        if (v21)
        {
          if (v22)
          {
            *(_DWORD *)__int128 buf = 136447490;
            os_log_type_t v80 = "nw_channel_replace_input_handler";
            __int16 v81 = 1042;
            *(_DWORD *)os_log_type_t v82 = 16;
            *(_WORD *)&v82[4] = 2098;
            *(void *)&v82[6] = a2;
            __int16 v83 = 1042;
            *(_DWORD *)char v84 = 16;
            *(_WORD *)&uint8_t v84[4] = 2098;
            *(void *)&v84[6] = a3;
            __int16 v85 = 2082;
            os_log_type_t v86 = v21;
            _os_log_impl( &dword_181A5C000,  v18,  v19,  "%{public}s New input handler does not have matching flow ID (%{public,uuid_t}.16Ps != %{public,uuid_t}.16P), dumping backtrace:%{public}s",  buf,  0x36u);
          }

          free(v21);
          goto LABEL_36;
        }

        if (v22)
        {
          *(_DWORD *)__int128 buf = 136447234;
          os_log_type_t v80 = "nw_channel_replace_input_handler";
          __int16 v81 = 1042;
          *(_DWORD *)os_log_type_t v82 = 16;
          *(_WORD *)&v82[4] = 2098;
          *(void *)&v82[6] = a2;
          __int16 v83 = 1042;
          *(_DWORD *)char v84 = 16;
          *(_WORD *)&uint8_t v84[4] = 2098;
          *(void *)&v84[6] = a3;
          uint64_t v20 = "%{public}s New input handler does not have matching flow ID (%{public,uuid_t}.16Ps != %{public,uuid_t}.1"
                "6P), no backtrace";
          goto LABEL_35;
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v18 = (os_log_s *)gLogObj;
        os_log_type_t v19 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          *(_DWORD *)__int128 buf = 136447234;
          os_log_type_t v80 = "nw_channel_replace_input_handler";
          __int16 v81 = 1042;
          *(_DWORD *)os_log_type_t v82 = 16;
          *(_WORD *)&v82[4] = 2098;
          *(void *)&v82[6] = a2;
          __int16 v83 = 1042;
          *(_DWORD *)char v84 = 16;
          *(_WORD *)&uint8_t v84[4] = 2098;
          *(void *)&v84[6] = a3;
          uint64_t v20 = "%{public}s New input handler does not have matching flow ID (%{public,uuid_t}.16Ps != %{public,uuid_t}.1"
                "6P), backtrace limit exceeded";
          goto LABEL_35;
        }
      }
    }

uint64_t nw_channel_updated_path(nw_protocol *a1, nw_protocol *a2, nw_path *a3)
{
  return 1LL;
}

uint64_t ___ZL33nw_channel_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke( uint64_t a1, uint64_t a2)
{
  if (_nw_signposts_once != -1) {
    dispatch_once(&_nw_signposts_once, &__block_literal_global_65_86685);
  }
  nw_frame_finalize(a2);
  return 1LL;
}

uint64_t ___ZL27nw_channel_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke( uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8LL);
  unsigned int v3 = *(_DWORD *)(v2 + 24);
  if (v3 >= *(_DWORD *)(a1 + 64) || *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) >= *(_DWORD *)(a1 + 68)) {
    return 0LL;
  }
  *(_DWORD *)(v2 + 24) = v3 + 1;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) += nw_frame_unclaimed_length((_DWORD *)a2);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void **)(a2 + 40);
  uint64_t v6 = (void *)(a2 + 32);
  if (v7)
  {
    *(void *)(v7 + 40) = v8;
    uint64_t v8 = *(void **)(a2 + 40);
  }

  else
  {
    *(void *)(*(void *)(a1 + 48) + 8LL) = v8;
  }

  *uint64_t v8 = v7;
  *uint64_t v6 = 0LL;
  *(void *)(a2 + 40) = 0LL;
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = *(void **)(v10 + 8);
  *(void *)(a2 + 40) = v11;
  *uint64_t v11 = a2;
  *(void *)(v10 + 8) = v6;
  return 1LL;
}

void ___ZL31nw_channel_remove_input_handlerP11nw_protocolS0_b_block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v2 = (os_log_s *)gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 136446210;
    uint64_t v6 = "nw_channel_remove_input_handler_block_invoke";
    _os_log_impl( &dword_181A5C000,  v2,  OS_LOG_TYPE_DEBUG,  "%{public}s Tearing down defunct channel",  (uint8_t *)&v5,  0xCu);
  }

  nw_channel_close(*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL), v3);
  __int128 v4 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  if (v4)
  {
    os_release(v4);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0LL;
  }

void nw_channel_close(uint64_t a1, uint64_t a2)
{
  uint64_t v51 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 280);
    if (v3 && *(_DWORD *)(v3 + 40))
    {
      uint64_t v4 = *(void *)(a1 + 152);
      if (!v4 || *(_DWORD *)(v4 + 124) != 4)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v5 = (os_log_s *)gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int128 buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_channel_close";
          _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_INFO,  "%{public}s Cannot close channel, input client table is non-empty",  buf,  0xCu);
        }
      }

      return;
    }

    if (_nw_signposts_once != -1) {
      dispatch_once(&_nw_signposts_once, &__block_literal_global_65_86685);
    }
    if (_nw_signposts_enabled && kdebug_is_enabled())
    {
      kdebug_trace();
      uint64_t v6 = *(void *)(a1 + 192);
      if (!v6)
      {
LABEL_14:
        uint64_t v7 = *(void *)(a1 + 200);
        if (v7)
        {
          nw_queue_cancel_source(v7, a2);
          *(void *)(a1 + 200) = 0LL;
        }

        uint64_t v8 = *(void *)(a1 + 184);
        if (v8)
        {
          nw_queue_cancel_source(v8, a2);
          *(void *)(a1 + 184) = 0LL;
        }

        uint64_t v9 = *(void *)(a1 + 168);
        if (v9)
        {
          nw_queue_cancel_source(*(void *)(a1 + 168), a2);
          *(void *)(a1 + 168) = 0LL;
          if ((*(_WORD *)(a1 + 444) & 8) != 0)
          {
            nw_queue_resume_source(v9, a2);
            int v10 = *(unsigned __int16 *)(a1 + 444);
            unsigned int v11 = v10 & 0xFFFFFFF7 | (*(unsigned __int8 *)(a1 + 446) << 16);
            *(_WORD *)(a1 + 444) = v10 & 0xFFF7;
            *(_BYTE *)(a1 + 446) = BYTE2(v11);
          }
        }

        uint64_t v12 = *(void *)(a1 + 176);
        if (v12)
        {
          nw_queue_cancel_source(*(void *)(a1 + 176), a2);
          *(void *)(a1 + 176) = 0LL;
          if ((*(_WORD *)(a1 + 444) & 0x10) != 0)
          {
            nw_queue_resume_source(v12, v13);
            int v14 = *(unsigned __int16 *)(a1 + 444);
            unsigned int v15 = v14 & 0xFFFFFFEF | (*(unsigned __int8 *)(a1 + 446) << 16);
            *(_WORD *)(a1 + 444) = v14 & 0xFFEF;
            *(_BYTE *)(a1 + 446) = BYTE2(v15);
          }
        }

        __int128 v50 = 0u;
        memset(buf, 0, sizeof(buf));
        int v16 = *(_DWORD *)(a1 + 428);
        uuid_unparse((const unsigned __int8 *)(a1 + 88), (char *)buf);
        snprintf((char *)&v50 + 4, 0xCuLL, "-%u", v16);
        if (*(void *)(a1 + 136))
        {
          __int128 v17 = *(dispatch_group_s **)(a1 + 208);
          if (v17)
          {
            dispatch_group_leave(v17);
          }

          else
          {
            uint64_t v18 = *(void *)(a1 + 152);
            if (!v18 || *(_DWORD *)(v18 + 124) != 4)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v19 = (os_log_s *)gLogObj;
              if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
              {
                int v20 = *(_DWORD *)(a1 + 432);
                *(_DWORD *)char v43 = 136446722;
                uint64_t v44 = "nw_channel_close";
                __int16 v45 = 2082;
                os_log_type_t v46 = buf;
                __int16 v47 = 1024;
                int v48 = v20;
                _os_log_impl( &dword_181A5C000,  v19,  OS_LOG_TYPE_INFO,  "%{public}s Channel destroyed with key: %{public}s and fd: %d",  v43,  0x1Cu);
              }
            }

            os_channel_destroy();
          }

          *(void *)(a1 + 136) = 0LL;
        }

        if (*(void *)(a1 + 144))
        {
          os_channel_attr_destroy();
          *(void *)(a1 + 144) = 0LL;
        }

        uint64_t v21 = *(void **)(a1 + 152);
        if (!v21) {
          goto LABEL_53;
        }
        BOOL globals_for_channel = nw_context_get_globals_for_channel(v21);
        uint64_t v23 = globals_for_channel;
        uint64_t v24 = (__int16 *)(a1 + 444);
        __int16 v25 = *(_WORD *)(a1 + 444);
        if ((v25 & 0x2000) != 0)
        {
          os_unfair_lock_lock((os_unfair_lock_t)(globals_for_channel + 16));
          int v26 = (unsigned __int16)*v24;
          if ((v26 & 0x2000) != 0)
          {
            unsigned int v27 = v26 & 0xFFFFDFFF | (*(unsigned __int8 *)(a1 + 446) << 16);
            *uint64_t v24 = v26 & 0xDFFF;
            *(_BYTE *)(a1 + 446) = BYTE2(v27);
            nw_dictionary_set_value(*(void *)v23, (const char *)buf, 0LL);
          }

          os_unfair_lock_unlock((os_unfair_lock_t)(v23 + 16));
          __int16 v25 = *v24;
        }

        if ((v25 & 0x4000) == 0) {
          goto LABEL_53;
        }
        os_unfair_lock_lock((os_unfair_lock_t)(v23 + 20));
        int v28 = (unsigned __int16)*v24;
        if ((v28 & 0x4000) != 0)
        {
          unsigned int v29 = v28 & 0xFFFFBFFF | (*(unsigned __int8 *)(a1 + 446) << 16);
          *uint64_t v24 = v28 & 0xBFFF;
          *(_BYTE *)(a1 + 446) = BYTE2(v29);
          uint64_t v30 = *(void **)(v23 + 8);
          if (!v30 || v30[2] == v30[3])
          {
            BOOL v31 = nw_array_create();
          }

          else
          {
            BOOL v31 = nw_array_create();
            std::vector<nw_object_wrapper_t>::reserve(v31 + 16, ((uint64_t)(v30[3] - v30[2]) >> 3) - 1);
            uint64_t v32 = (void **)v30[2];
            BOOL v33 = (void **)v30[3];
            if (v32 == v33)
            {
              *(void *)(v23 + 8) = v31;
LABEL_51:
              os_release(v30);
              goto LABEL_52;
            }

            do
            {
              ++v32;
            }

            while (v32 != v33);
          }

          *(void *)(v23 + 8) = v31;
          if (v30) {
            goto LABEL_51;
          }
        }

void ___ZL31nw_channel_remove_input_handlerP11nw_protocolS0_b_block_invoke_52(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  uint64_t v4 = *(void *)(v3 + 200);
  if (v4)
  {
    if ((*(_WORD *)(v3 + 444) & 0x20) != 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v5 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        int v7 = 136446210;
        uint64_t v8 = "nw_channel_remove_input_handler_block_invoke";
        _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_DEBUG,  "%{public}s Tearing down channel after inactivity",  (uint8_t *)&v7,  0xCu);
      }

      nw_channel_close(*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL), v6);
    }

    else
    {
      nw_queue_cancel_source(v4, a2);
      *(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) + 200LL) = 0LL;
    }
  }

void ___ZL31nw_channel_remove_input_handlerP11nw_protocolS0_b_block_invoke_54(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  if (v2)
  {
    os_release(v2);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0LL;
  }

uint64_t ___ZL27nw_channel_reclassify_inputP8nw_framePhPv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  int v5 = *(void **)(a2 + 40);
  if (v4)
  {
    *(void *)(v4 + 40) = v5;
    int v5 = *(void **)(a2 + 40);
  }

  else
  {
    *(void *)(*(void *)(a1 + 32) + 344LL) = v5;
  }

  *int v5 = v4;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  return 1LL;
}

void ___ZL27nw_channel_reclassify_inputP8nw_framePhPv_block_invoke_2(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v2 = (os_log_s *)gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 136446210;
    uint64_t v13 = "nw_channel_reclassify_input_block_invoke_2";
    _os_log_impl( &dword_181A5C000,  v2,  OS_LOG_TYPE_DEBUG,  "%{public}s reclassify is finalizing pending frames that have timed out",  buf,  0xCu);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  v8[0] = MEMORY[0x1895F87A8];
  v8[1] = 0x40000000LL;
  uint64_t v9 = ___ZL27nw_channel_reclassify_inputP8nw_framePhPv_block_invoke_46;
  int v10 = &__block_descriptor_tmp_47_87401;
  uint64_t v11 = v3;
  uint64_t v4 = *(void *)(v3 + 336);
  do
  {
    if (!v4) {
      break;
    }
    uint64_t v5 = *(void *)(v4 + 32);
    char v6 = ((uint64_t (*)(void *))v9)(v8);
    uint64_t v4 = v5;
  }

  while ((v6 & 1) != 0);
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 192LL);
  if (v7)
  {
    nw_queue_cancel_source(v7, v4);
    *(void *)(*(void *)(a1 + 32) + 192LL) = 0LL;
  }

uint64_t ___ZL27nw_channel_reclassify_inputP8nw_framePhPv_block_invoke_46(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void **)(a2 + 40);
  if (v4)
  {
    *(void *)(v4 + 40) = v5;
    uint64_t v5 = *(void **)(a2 + 40);
  }

  else
  {
    *(void *)(*(void *)(a1 + 32) + 344LL) = v5;
  }

  *uint64_t v5 = v4;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  return 1LL;
}

BOOL nw_channel_create_with_nexus(unsigned __int8 *a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  v7[0] = a3;
  v7[1] = a4;
  if (nw_context_copy_implicit_context::onceToken != -1) {
    dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
  }
  return nw_channel_create_with_attributes( (id)nw_context_copy_implicit_context::implicit_context,  a1,  a2,  (uint64_t)v7);
}

void nw_channel_simulate_defunct_all(void *a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    v8[0] = MEMORY[0x1895F87A8];
    v8[1] = 0x40000000LL;
    void v8[2] = __nw_channel_simulate_defunct_all_block_invoke;
    v8[3] = &unk_189BC8EB0;
    v8[4] = a2;
    v8[5] = a1;
    nw_queue_context_async(a1, v8);
    return;
  }

  __nwlog_obj();
  *(_DWORD *)__int128 buf = 136446210;
  uint64_t v12 = "nw_channel_simulate_defunct_all";
  uint64_t v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v10 = OS_LOG_TYPE_ERROR;
  char v9 = 0;
  if (__nwlog_fault(v2, &v10, &v9))
  {
    if (v10 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = v10;
      if (!os_log_type_enabled(v3, v10)) {
        goto LABEL_18;
      }
      *(_DWORD *)__int128 buf = 136446210;
      uint64_t v12 = "nw_channel_simulate_defunct_all";
      uint64_t v5 = "%{public}s called with null context";
      goto LABEL_17;
    }

    if (!v9)
    {
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = v10;
      if (!os_log_type_enabled(v3, v10)) {
        goto LABEL_18;
      }
      *(_DWORD *)__int128 buf = 136446210;
      uint64_t v12 = "nw_channel_simulate_defunct_all";
      uint64_t v5 = "%{public}s called with null context, backtrace limit exceeded";
      goto LABEL_17;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v3 = (os_log_s *)__nwlog_obj();
    os_log_type_t v4 = v10;
    BOOL v7 = os_log_type_enabled(v3, v10);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)__int128 buf = 136446466;
        uint64_t v12 = "nw_channel_simulate_defunct_all";
        __int16 v13 = 2082;
        uint64_t v14 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v3,  v4,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_18;
    }

    if (v7)
    {
      *(_DWORD *)__int128 buf = 136446210;
      uint64_t v12 = "nw_channel_simulate_defunct_all";
      uint64_t v5 = "%{public}s called with null context, no backtrace";
LABEL_17:
      _os_log_impl(&dword_181A5C000, v3, v4, v5, buf, 0xCu);
    }
  }

void __nw_channel_simulate_defunct_all_block_invoke(uint64_t a1)
{
  BOOL globals_for_channel = nw_context_get_globals_for_channel(*(void **)(a1 + 40));
  uint64_t v13 = 0LL;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2000000000LL;
  uint64_t v16 = 0LL;
  uint64_t v3 = (os_unfair_lock_s *)(globals_for_channel + 16);
  v12[0] = MEMORY[0x1895F87A8];
  v12[1] = 0x40000000LL;
  v12[2] = __nw_channel_simulate_defunct_all_block_invoke_2;
  v12[3] = &unk_189BC8E48;
  void v12[4] = &v13;
  v12[5] = globals_for_channel;
  os_unfair_lock_lock((os_unfair_lock_t)(globals_for_channel + 16));
  __nw_channel_simulate_defunct_all_block_invoke_2((uint64_t)v12);
  os_unfair_lock_unlock(v3);
  char v9 = (unsigned __int8 *)v14[3];
  if (v9)
  {
    nw_array_apply(v9, (uint64_t)&__block_literal_global_19_87434);
    os_log_type_t v10 = (void *)v14[3];
    if (v10)
    {
      os_release(v10);
      v14[3] = 0LL;
    }
  }

  uint64_t v11 = *(void *)(a1 + 32);
  if (v11) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 16))(v11, v4, v5, v6, v7, v8);
  }
  _Block_object_dispose(&v13, 8);
}

uint64_t __nw_channel_simulate_defunct_all_block_invoke_2(uint64_t a1)
{
  uint64_t result = **(void **)(a1 + 40);
  if (result)
  {
    v3[0] = MEMORY[0x1895F87A8];
    v3[1] = 0x40000000LL;
    v3[2] = __nw_channel_simulate_defunct_all_block_invoke_3;
    v3[3] = &unk_189BC8E20;
    v3[4] = *(void *)(a1 + 32);
    return nw_dictionary_apply(result, (uint64_t)v3);
  }

  return result;
}

uint64_t __nw_channel_simulate_defunct_all_block_invoke_17(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  if (((*(unsigned __int16 *)(a3 + 444) | (*(unsigned __int8 *)(a3 + 446) << 16)) & 0x80000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v4 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136446466;
      uint64_t v7 = "nw_channel_simulate_defunct_all_block_invoke";
      __int16 v8 = 2048;
      uint64_t v9 = a3;
      _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_DEFAULT,  "%{public}s Simulating channel defunct for %p",  (uint8_t *)&v6,  0x16u);
    }

    nw_channel_handle_defunct(a3);
  }

  return 1LL;
}

uint64_t __nw_channel_simulate_defunct_all_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  if (*(void *)(a3 + 136))
  {
    *(_BYTE *)(a3 + 446) = (*(unsigned __int16 *)(a3 + 444) | (*(unsigned __int8 *)(a3 + 446) << 16) | 0x40000u) >> 16;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v5 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v9 = 136446210;
      uint64_t v10 = "nw_channel_simulate_defunct_all_block_invoke_3";
      _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_DEBUG,  "%{public}s Purging channel packet pool before defunct",  (uint8_t *)&v9,  0xCu);
    }

    os_channel_packet_pool_purge();
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
    if (!v6)
    {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = nw_array_create();
      uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
    }

    nw_array_append(v6, (void *)a3);
  }

  unsigned int v7 = (*(unsigned __int16 *)(a3 + 444) | (*(unsigned __int8 *)(a3 + 446) << 16)) & 0xFFFDFFFF;
  *(_WORD *)(a3 + 444) = *(_WORD *)(a3 + 444);
  *(_BYTE *)(a3 + 446) = BYTE2(v7);
  return 1LL;
}

void nw_channel_release_frame_array(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (_WORD *)(a1 + 444);
  while (1)
  {
    uint64_t v5 = (void *)*a2;
    if (!*a2) {
      break;
    }
    if ((*v4 & 0x1000) != 0)
    {
      metadata = (void *)nw_frame_get_metadata(*a2);
      if (metadata)
      {
        unsigned int v7 = metadata;
        if (*metadata)
        {
          *unsigned int v7 = 0LL;
          v7[1] = 0LL;
        }
      }
    }

    uint64_t v8 = v5[2];
    int v9 = (void *)v5[3];
    if (v8)
    {
      *(void *)(v8 + 24) = v9;
      int v9 = (void *)v5[3];
    }

    else
    {
      a2[1] = (uint64_t)v9;
    }

    *int v9 = v8;
    v5[2] = 0LL;
    v5[3] = 0LL;
    os_release(v5);
  }

uint64_t nw_channel_get_nexus_instance(uint64_t a1, _OWORD *a2, _DWORD *a3)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)__int128 buf = 136446210;
    uint64_t v16 = "nw_channel_get_nexus_instance";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = (os_log_s *)gLogObj;
      os_log_type_t v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_44;
      }
      *(_DWORD *)__int128 buf = 136446210;
      uint64_t v16 = "nw_channel_get_nexus_instance";
      unsigned int v7 = "%{public}s called with null channel";
LABEL_43:
      _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0xCu);
      goto LABEL_44;
    }

    if (!v13)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = (os_log_s *)gLogObj;
      os_log_type_t v6 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v16 = "nw_channel_get_nexus_instance";
        unsigned int v7 = "%{public}s called with null channel, backtrace limit exceeded";
        goto LABEL_43;
      }

      goto LABEL_44;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v5 = (os_log_s *)gLogObj;
    os_log_type_t v6 = type;
    BOOL v9 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v16 = "nw_channel_get_nexus_instance";
        unsigned int v7 = "%{public}s called with null channel, no backtrace";
        goto LABEL_43;
      }

      goto LABEL_44;
    }

    if (!v9) {
      goto LABEL_30;
    }
    *(_DWORD *)__int128 buf = 136446466;
    uint64_t v16 = "nw_channel_get_nexus_instance";
    __int16 v17 = 2082;
    uint64_t v18 = backtrace_string;
    uint64_t v10 = "%{public}s called with null channel, dumping backtrace:%{public}s";
LABEL_29:
    _os_log_impl(&dword_181A5C000, v5, v6, v10, buf, 0x16u);
    goto LABEL_30;
  }

  if (!a2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)__int128 buf = 136446210;
    uint64_t v16 = "nw_channel_get_nexus_instance";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = (os_log_s *)gLogObj;
      os_log_type_t v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_44;
      }
      *(_DWORD *)__int128 buf = 136446210;
      uint64_t v16 = "nw_channel_get_nexus_instance";
      unsigned int v7 = "%{public}s called with null nexus_instance";
      goto LABEL_43;
    }

    if (!v13)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = (os_log_s *)gLogObj;
      os_log_type_t v6 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v16 = "nw_channel_get_nexus_instance";
        unsigned int v7 = "%{public}s called with null nexus_instance, backtrace limit exceeded";
        goto LABEL_43;
      }

      goto LABEL_44;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v5 = (os_log_s *)gLogObj;
    os_log_type_t v6 = type;
    BOOL v11 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v16 = "nw_channel_get_nexus_instance";
        unsigned int v7 = "%{public}s called with null nexus_instance, no backtrace";
        goto LABEL_43;
      }

      goto LABEL_44;
    }

    if (!v11) {
      goto LABEL_30;
    }
    *(_DWORD *)__int128 buf = 136446466;
    uint64_t v16 = "nw_channel_get_nexus_instance";
    __int16 v17 = 2082;
    uint64_t v18 = backtrace_string;
    uint64_t v10 = "%{public}s called with null nexus_instance, dumping backtrace:%{public}s";
    goto LABEL_29;
  }

  if (a3)
  {
    *a2 = *(_OWORD *)(a1 + 88);
    *a3 = *(_DWORD *)(a1 + 428);
    return 1LL;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)__int128 buf = 136446210;
  uint64_t v16 = "nw_channel_get_nexus_instance";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v13)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = (os_log_s *)gLogObj;
      os_log_type_t v6 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v16 = "nw_channel_get_nexus_instance";
        unsigned int v7 = "%{public}s called with null port, backtrace limit exceeded";
        goto LABEL_43;
      }

      goto LABEL_44;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v5 = (os_log_s *)gLogObj;
    os_log_type_t v6 = type;
    BOOL v12 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v16 = "nw_channel_get_nexus_instance";
        unsigned int v7 = "%{public}s called with null port, no backtrace";
        goto LABEL_43;
      }

      goto LABEL_44;
    }

    if (v12)
    {
      *(_DWORD *)__int128 buf = 136446466;
      uint64_t v16 = "nw_channel_get_nexus_instance";
      __int16 v17 = 2082;
      uint64_t v18 = backtrace_string;
      uint64_t v10 = "%{public}s called with null port, dumping backtrace:%{public}s";
      goto LABEL_29;
    }

uint64_t nw_channel_get_key(uint64_t a1, _DWORD *a2)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)__int128 buf = 136446210;
    uint64_t v14 = "nw_channel_get_key";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = (os_log_s *)gLogObj;
      os_log_type_t v7 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_20;
      }
      *(_DWORD *)__int128 buf = 136446210;
      uint64_t v14 = "nw_channel_get_key";
      uint64_t v8 = "%{public}s called with null channel";
    }

    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = (os_log_s *)gLogObj;
      os_log_type_t v7 = type;
      BOOL v10 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)__int128 buf = 136446466;
          uint64_t v14 = "nw_channel_get_key";
          __int16 v15 = 2082;
          uint64_t v16 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null channel, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (!v10)
      {
LABEL_20:
        if (v5) {
          free(v5);
        }
        return 0LL;
      }

      *(_DWORD *)__int128 buf = 136446210;
      uint64_t v14 = "nw_channel_get_key";
      uint64_t v8 = "%{public}s called with null channel, no backtrace";
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = (os_log_s *)gLogObj;
      os_log_type_t v7 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_20;
      }
      *(_DWORD *)__int128 buf = 136446210;
      uint64_t v14 = "nw_channel_get_key";
      uint64_t v8 = "%{public}s called with null channel, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v6, v7, v8, buf, 0xCu);
    goto LABEL_20;
  }

  uint64_t result = *(void *)(a1 + 16);
  if (!result) {
    return result;
  }
  int v4 = *(_DWORD *)(a1 + 424);
  if (!v4) {
    return 0LL;
  }
  if (a2) {
    *a2 = v4;
  }
  return result;
}

uint64_t nw_channel_has_partial_checksum_offload(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if (a1) {
    return (*(unsigned __int16 *)(a1 + 444) >> 11) & 1;
  }
  __nwlog_obj();
  *(_DWORD *)__int128 buf = 136446210;
  char v11 = "nw_channel_has_partial_checksum_offload";
  uint64_t v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        char v11 = "nw_channel_has_partial_checksum_offload";
        uint64_t v5 = "%{public}s called with null channel";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v3, v4, v5, buf, 0xCu);
      }
    }

    else if (v8)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)__int128 buf = 136446466;
          char v11 = "nw_channel_has_partial_checksum_offload";
          __int16 v12 = 2082;
          char v13 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v3,  v4,  "%{public}s called with null channel, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_18;
      }

      if (v7)
      {
        *(_DWORD *)__int128 buf = 136446210;
        char v11 = "nw_channel_has_partial_checksum_offload";
        uint64_t v5 = "%{public}s called with null channel, no backtrace";
        goto LABEL_17;
      }
    }

    else
    {
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        char v11 = "nw_channel_has_partial_checksum_offload";
        uint64_t v5 = "%{public}s called with null channel, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }

id nw_masque_server_create(void *a1, void *a2, void *a3)
{
  uint64_t v79 = *MEMORY[0x1895F89C0];
  id v69 = a1;
  id v70 = a2;
  id v5 = a3;
  nw_allow_use_of_dispatch_internal();
  if (v5)
  {
    os_log_type_t v6 = objc_alloc(&OBJC_CLASS___NWConcrete_nw_masque_server);
    id v7 = v69;
    id v8 = v70;
    id v9 = v5;
    if (!v6)
    {
LABEL_109:
      id v21 = 0LL;
LABEL_47:

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v39 = (os_log_s *)(id)gLogObj;
      uint64_t v40 = v39;
      if (v21)
      {
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)label = 136446466;
          *(void *)&label[4] = "nw_masque_server_create";
          *(_WORD *)&label[12] = 2114;
          *(void *)&label[14] = v21;
          _os_log_impl( &dword_181A5C000,  v40,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}@ created",  (uint8_t *)label,  0x16u);
        }

        id v41 = v21;
        goto LABEL_70;
      }

      *(_DWORD *)label = 136446210;
      *(void *)&label[4] = "nw_masque_server_create";
      char v42 = (char *)_os_log_send_and_compose_impl();

      buf[0] = 16;
      LOBYTE(v73.receiver) = 0;
      if (__nwlog_fault(v42, buf, &v73))
      {
        if (buf[0] == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v43 = (os_log_s *)(id)gLogObj;
          os_log_type_t v44 = buf[0];
          if (os_log_type_enabled(v43, (os_log_type_t)buf[0]))
          {
            *(_DWORD *)label = 136446210;
            *(void *)&label[4] = "nw_masque_server_create";
            _os_log_impl( &dword_181A5C000,  v43,  v44,  "%{public}s [nw_masque_server initWithParameters:clientQueue:] failed",  (uint8_t *)label,  0xCu);
          }

void sub_182626824( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void nw_masque_server_set_state_changed_handler(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    id v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    unsigned int v27 = "nw_masque_server_set_state_changed_handler";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v25 = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (v25 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = v25;
      if (os_log_type_enabled(v9, v25))
      {
        *(_DWORD *)__int128 buf = 136446210;
        unsigned int v27 = "nw_masque_server_set_state_changed_handler";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null server", buf, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = v25;
      BOOL v15 = os_log_type_enabled(v9, v25);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)__int128 buf = 136446466;
          unsigned int v27 = "nw_masque_server_set_state_changed_handler";
          __int16 v28 = 2082;
          BOOL v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null server, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8) {
          goto LABEL_4;
        }
LABEL_39:
        free(v8);
        goto LABEL_4;
      }

      if (v15)
      {
        *(_DWORD *)__int128 buf = 136446210;
        unsigned int v27 = "nw_masque_server_set_state_changed_handler";
        _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null server, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = v25;
      if (os_log_type_enabled(v9, v25))
      {
        *(_DWORD *)__int128 buf = 136446210;
        unsigned int v27 = "nw_masque_server_set_state_changed_handler";
        _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s called with null server, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_182626DA0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_masque_server_set_state_changed_handler_block_invoke(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 48);
  *(void *)(v3 + 48) = v2;
}

void nw_masque_server_set_error_handler(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    id v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    unsigned int v27 = "nw_masque_server_set_error_handler";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v25 = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (v25 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = v25;
      if (os_log_type_enabled(v9, v25))
      {
        *(_DWORD *)__int128 buf = 136446210;
        unsigned int v27 = "nw_masque_server_set_error_handler";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null server", buf, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = v25;
      BOOL v15 = os_log_type_enabled(v9, v25);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)__int128 buf = 136446466;
          unsigned int v27 = "nw_masque_server_set_error_handler";
          __int16 v28 = 2082;
          BOOL v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null server, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8) {
          goto LABEL_4;
        }
LABEL_39:
        free(v8);
        goto LABEL_4;
      }

      if (v15)
      {
        *(_DWORD *)__int128 buf = 136446210;
        unsigned int v27 = "nw_masque_server_set_error_handler";
        _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null server, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = v25;
      if (os_log_type_enabled(v9, v25))
      {
        *(_DWORD *)__int128 buf = 136446210;
        unsigned int v27 = "nw_masque_server_set_error_handler";
        _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s called with null server, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_18262732C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_masque_server_set_error_handler_block_invoke(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 56);
  *(void *)(v3 + 56) = v2;
}

void nw_masque_server_set_outer_connection_handler(void *a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = a2;
  if (v3)
  {
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = __nw_masque_server_set_outer_connection_handler_block_invoke;
    aBlock[3] = &unk_189BC91E8;
    BOOL v15 = v3;
    id v16 = v4;
    id v5 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v3 + 4);
    v5[2](v5);
    os_unfair_lock_unlock(v3 + 4);

    goto LABEL_3;
  }

  __nwlog_obj();
  os_log_type_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  os_log_type_t v20 = "nw_masque_server_set_outer_connection_handler";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v18 = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &v18, &v17))
  {
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v20 = "nw_masque_server_set_outer_connection_handler";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null server", buf, 0xCu);
      }
    }

    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = v18;
      BOOL v12 = os_log_type_enabled(v8, v18);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)__int128 buf = 136446466;
          os_log_type_t v20 = "nw_masque_server_set_outer_connection_handler";
          __int16 v21 = 2082;
          id v22 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null server, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v12)
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v20 = "nw_masque_server_set_outer_connection_handler";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null server, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v20 = "nw_masque_server_set_outer_connection_handler";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null server, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1826276A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_masque_server_set_outer_connection_handler_block_invoke(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 96);
  *(void *)(v3 + 96) = v2;
}

void nw_masque_server_set_proxy_client_connection_event_handler(void *a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = a2;
  if (v3)
  {
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = __nw_masque_server_set_proxy_client_connection_event_handler_block_invoke;
    aBlock[3] = &unk_189BC91E8;
    BOOL v15 = v3;
    id v16 = v4;
    id v5 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v3 + 4);
    v5[2](v5);
    os_unfair_lock_unlock(v3 + 4);

    goto LABEL_3;
  }

  __nwlog_obj();
  os_log_type_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  os_log_type_t v20 = "nw_masque_server_set_proxy_client_connection_event_handler";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v18 = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &v18, &v17))
  {
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v20 = "nw_masque_server_set_proxy_client_connection_event_handler";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null server", buf, 0xCu);
      }
    }

    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = v18;
      BOOL v12 = os_log_type_enabled(v8, v18);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)__int128 buf = 136446466;
          os_log_type_t v20 = "nw_masque_server_set_proxy_client_connection_event_handler";
          __int16 v21 = 2082;
          id v22 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null server, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v12)
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v20 = "nw_masque_server_set_proxy_client_connection_event_handler";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null server, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v20 = "nw_masque_server_set_proxy_client_connection_event_handler";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null server, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182627A1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_masque_server_set_proxy_client_connection_event_handler_block_invoke(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 88);
  *(void *)(v3 + 88) = v2;
}

id nw_masque_server_copy_parameters(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[4];
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  id v16 = "nw_masque_server_copy_parameters";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        id v16 = "nw_masque_server_copy_parameters";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null server", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          id v16 = "nw_masque_server_copy_parameters";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null server, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        id v16 = "nw_masque_server_copy_parameters";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null server, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        id v16 = "nw_masque_server_copy_parameters";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null server, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_masque_server_get_port(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *(void *)__int128 buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    __int16 v20 = 0;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = __nw_masque_server_get_port_block_invoke;
    aBlock[3] = &unk_189BC9210;
    id v16 = buf;
    BOOL v15 = v1;
    id v3 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v2 + 4);
    v3[2](v3);
    os_unfair_lock_unlock(v2 + 4);

    uint64_t v4 = *(unsigned __int16 *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  os_log_type_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_masque_server_get_port";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_server_get_port";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null server", buf, 0xCu);
      }
    }

    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)__int128 buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_masque_server_get_port";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null server, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v12)
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_server_get_port";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null server, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_server_get_port";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null server, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182628044( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_masque_server_get_port_block_invoke(uint64_t a1)
{
  uint64_t result = nw_listener_get_port(*(nw_listener_t *)(*(void *)(a1 + 32) + 64LL));
  *(_WORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

void nw_masque_server_set_outbound_interface(void *a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = __nw_masque_server_set_outbound_interface_block_invoke;
    aBlock[3] = &unk_189BC9238;
    BOOL v15 = v3;
    id v16 = v4;
    id v5 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v3 + 4);
    v5[2](v5);
    os_unfair_lock_unlock(v3 + 4);

    goto LABEL_3;
  }

  __nwlog_obj();
  os_log_type_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  __int16 v20 = "nw_masque_server_set_outbound_interface";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v18 = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &v18, &v17))
  {
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)__int128 buf = 136446210;
        __int16 v20 = "nw_masque_server_set_outbound_interface";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null server", buf, 0xCu);
      }
    }

    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = v18;
      BOOL v12 = os_log_type_enabled(v8, v18);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)__int128 buf = 136446466;
          __int16 v20 = "nw_masque_server_set_outbound_interface";
          __int16 v21 = 2082;
          id v22 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null server, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v12)
      {
        *(_DWORD *)__int128 buf = 136446210;
        __int16 v20 = "nw_masque_server_set_outbound_interface";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null server, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)__int128 buf = 136446210;
        __int16 v20 = "nw_masque_server_set_outbound_interface";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null server, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1826283C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_masque_server_set_outbound_interface_block_invoke(uint64_t a1)
{
}

uint64_t __Block_byref_object_copy__87670(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__87671(uint64_t a1)
{
}

void __nw_masque_server_copy_client_queue_block_invoke(uint64_t a1)
{
}

void nw_masque_server_start(void *a1)
{
  uint64_t v51 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (v1)
  {
    nw_parameters_t secure_udp = nw_parameters_create_secure_udp(&__block_literal_global_18956, &__block_literal_global_87677);
    nw_parameters_set_data_mode(secure_udp, 2u);
    nw_parameters_set_server_mode(secure_udp, 1);
    nw_parameters_set_attach_protocol_listener(secure_udp, 1);
    id v3 = (void *)*((void *)v1 + 4);
    if (v3)
    {
      id v4 = v3;
      id v5 = (nw_endpoint *)*(id *)(v4[13] + 160LL);

      if (v5) {
        nw_parameters_set_local_endpoint(secure_udp, v5);
      }
      os_log_type_t v6 = nw_parameters_copy_required_interface(*((nw_parameters_t *)v1 + 4));
      if (v6) {
        nw_parameters_require_interface(secure_udp, v6);
      }
      required_interface_subos_log_type_t type = nw_parameters_get_required_interface_subtype(*((void **)v1 + 4));
    }

    os_log_type_t v8 = nw_parameters_copy_default_protocol_stack(secure_udp);
    if (nw_protocol_demux_copy_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_5_25952);
    }
    if (nw_protocol_demux_copy_definition::definition)
    {
      os_log_type_t v9 = os_retain((void *)nw_protocol_demux_copy_definition::definition);
      options = nw_protocol_create_options(v9);
      if (v9) {
        os_release(v9);
      }
    }

    else
    {
      options = nw_protocol_create_options(0LL);
    }

    nw_protocol_stack_prepend_application_protocol(v8, (nw_protocol_options_t)options);

    if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55294);
    }
    os_log_type_t v11 = nw_protocol_create_options((void *)nw_protocol_copy_quic_stream_definition::quic_definition);
    id v12 = nw_quic_stream_copy_shared_connection_options(v11);
    os_log_type_t v13 = v12;
    os_log_type_t v14 = (void *)*((void *)v1 + 16);
    if (v14) {
      nw_quic_connection_set_sec_protocol_options(v12, v14);
    }
    BOOL v15 = (sec_protocol_options *)nw_quic_connection_copy_sec_protocol_options(v13);
    sec_protocol_options_append_tls_ciphersuite_group(v15, tls_ciphersuite_group_default);
    sec_protocol_options_add_tls_application_protocol(v15, "h3");
    nw_quic_connection_set_initial_max_streams_bidirectional(v13, 0xFFFFFFFFLL);
    nw_quic_connection_set_max_datagram_frame_size(v13, 1460);
    nw_quic_connection_set_max_udp_payload_size(v13, 1472);
    nw_quic_connection_set_datagram_variant_flow_id_enabled(v13, 1);
    nw_quic_connection_set_pmtud_for_non_transport(v13, 1);
    nw_quic_connection_set_datagram_quarter_stream_id(v13, 1);
    nw_quic_connection_set_datagram_context_id(v13, 1);
    nw_protocol_stack_prepend_application_protocol(v8, (nw_protocol_options_t)v11);
    if (nw_protocol_copy_http3_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http3_definition_onceToken, &__block_literal_global_10_72547);
    }
    id v16 = nw_protocol_create_options((void *)nw_protocol_copy_http3_definition_http3_definition);
    nw_protocol_stack_prepend_application_protocol(v8, (nw_protocol_options_t)v16);
    nw_listener_t v17 = nw_listener_create(secure_udp);
    os_log_type_t v18 = (void *)*((void *)v1 + 8);
    *((void *)v1 + 8) = v17;

    uint64_t v19 = (void *)*((void *)v1 + 8);
    if (v19)
    {
      nw_listener_allow_new_connection_inline(v19);
      __int16 v20 = (nw_listener *)*((void *)v1 + 8);
      uint64_t v21 = MEMORY[0x1895F87A8];
      handler[0] = MEMORY[0x1895F87A8];
      handler[1] = 3221225472LL;
      handler[2] = __nw_masque_server_start_block_invoke_6;
      handler[3] = &unk_189BC92C8;
      id v22 = v1;
      id v44 = v22;
      nw_listener_set_new_connection_group_handler(v20, handler);
      uint64_t v23 = (nw_listener *)*((void *)v1 + 8);
      v41[0] = v21;
      v41[1] = 3221225472LL;
      v41[2] = __nw_masque_server_start_block_invoke_8;
      v41[3] = &unk_189BC9318;
      char v24 = (dispatch_queue_t *)v22;
      char v42 = v24;
      nw_listener_set_state_changed_handler(v23, v41);
      nw_listener_set_queue(*((nw_listener_t *)v1 + 8), v24[3]);
      nw_listener_start(*((nw_listener_t *)v1 + 8));

LABEL_47:
      goto LABEL_48;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v25 = (id)gLogObj;
    *(_DWORD *)__int128 buf = 136446210;
    BOOL v48 = "nw_masque_server_start";
    int v26 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v45 = 0;
    if (__nwlog_fault(v26, &type, &v45))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unsigned int v27 = (os_log_s *)(id)gLogObj;
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          BOOL v48 = "nw_masque_server_start";
          _os_log_impl(&dword_181A5C000, v27, v28, "%{public}s nw_listener_create failed", buf, 0xCu);
        }
      }

      else if (v45)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unsigned int v27 = (os_log_s *)(id)gLogObj;
        os_log_type_t v40 = type;
        BOOL v30 = os_log_type_enabled(v27, type);
        if (backtrace_string)
        {
          if (v30)
          {
            *(_DWORD *)__int128 buf = 136446466;
            BOOL v48 = "nw_masque_server_start";
            __int16 v49 = 2082;
            __int128 v50 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v27,  v40,  "%{public}s nw_listener_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          if (!v26) {
            goto LABEL_47;
          }
          goto LABEL_46;
        }

        if (v30)
        {
          *(_DWORD *)__int128 buf = 136446210;
          BOOL v48 = "nw_masque_server_start";
          _os_log_impl(&dword_181A5C000, v27, v40, "%{public}s nw_listener_create failed, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        unsigned int v27 = (os_log_s *)(id)gLogObj;
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          BOOL v48 = "nw_masque_server_start";
          _os_log_impl( &dword_181A5C000,  v27,  v31,  "%{public}s nw_listener_create failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v26) {
      goto LABEL_47;
    }
LABEL_46:
    free(v26);
    goto LABEL_47;
  }

  __nwlog_obj();
  uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  BOOL v48 = "nw_masque_server_start";
  BOOL v33 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v45 = 0;
  if (__nwlog_fault(v33, &type, &v45))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v35 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v48 = "nw_masque_server_start";
        _os_log_impl(&dword_181A5C000, v34, v35, "%{public}s called with null server", buf, 0xCu);
      }
    }

    else if (v45)
    {
      os_log_type_t v36 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v37 = type;
      BOOL v38 = os_log_type_enabled(v34, type);
      if (v36)
      {
        if (v38)
        {
          *(_DWORD *)__int128 buf = 136446466;
          BOOL v48 = "nw_masque_server_start";
          __int16 v49 = 2082;
          __int128 v50 = v36;
          _os_log_impl( &dword_181A5C000,  v34,  v37,  "%{public}s called with null server, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v36);
        goto LABEL_65;
      }

      if (v38)
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v48 = "nw_masque_server_start";
        _os_log_impl(&dword_181A5C000, v34, v37, "%{public}s called with null server, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v39 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v48 = "nw_masque_server_start";
        _os_log_impl( &dword_181A5C000,  v34,  v39,  "%{public}s called with null server, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182628C94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_masque_server_start_block_invoke_6(uint64_t a1, void *a2)
{
  uint64_t v42 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v4 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_masque_server_start_block_invoke";
    *(_WORD *)&_BYTE buf[12] = 2112;
    *(void *)&buf[14] = v3;
    _os_log_impl(&dword_181A5C000, v4, OS_LOG_TYPE_INFO, "%{public}s new connection group %@", buf, 0x16u);
  }

  id v5 = (dispatch_queue_t *)*(id *)(a1 + 32);
  os_log_type_t v6 = (nw_connection_group *)v3;
  id v7 = v6;
  if (!v5)
  {
    __nwlog_obj();
    id v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_masque_connection_group_start";
    nw_listener_t v17 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(state_changed_handler[0]) = 16;
    LOBYTE(aBlock[0]) = 0;
    if (LOBYTE(state_changed_handler[0]) == 17)
    {
      __nwlog_obj();
      os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = state_changed_handler[0];
      if (os_log_type_enabled(v18, state_changed_handler[0]))
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_connection_group_start";
        _os_log_impl(&dword_181A5C000, v18, v19, "%{public}s called with null server", buf, 0xCu);
      }
    }

    else if (LOBYTE(aBlock[0]))
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = state_changed_handler[0];
      BOOL v24 = os_log_type_enabled(v18, state_changed_handler[0]);
      if (backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)__int128 buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_masque_connection_group_start";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v18,  v23,  "%{public}s called with null server, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v17) {
          goto LABEL_6;
        }
LABEL_41:
        free(v17);
        goto LABEL_6;
      }

      if (v24)
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_connection_group_start";
        _os_log_impl(&dword_181A5C000, v18, v23, "%{public}s called with null server, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = state_changed_handler[0];
      if (os_log_type_enabled(v18, state_changed_handler[0]))
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_connection_group_start";
        _os_log_impl( &dword_181A5C000,  v18,  v28,  "%{public}s called with null server, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_182629408( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, void *a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, void *a30)
{
  _Unwind_Resume(a1);
}

void __nw_masque_server_start_block_invoke_8(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  os_log_type_t v6 = *(os_unfair_lock_s **)(a1 + 32);
  id v7 = v6 + 4;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 3221225472LL;
  aBlock[2] = __nw_masque_server_start_block_invoke_2;
  aBlock[3] = &unk_189BC92F0;
  os_log_type_t v11 = v6;
  int v13 = a2;
  id v8 = v5;
  id v12 = v8;
  os_log_type_t v9 = (void (**)(void))_Block_copy(aBlock);
  os_unfair_lock_lock(v7);
  v9[2](v9);
  os_unfair_lock_unlock(v7);
}

void sub_182629554( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void __nw_masque_server_start_block_invoke_2(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  int v2 = *(_DWORD *)(a1 + 48);
  id v3 = *(void **)(a1 + 40);
  id v4 = *(id *)(a1 + 32);
  id v5 = v3;
  os_log_type_t v6 = (const void *)v4[6];
  if (v6)
  {
    id v7 = _Block_copy(v6);
    if (v2 == 4)
    {
      id v8 = (void *)v4[6];
      v4[6] = 0LL;
    }

    os_log_type_t v9 = (dispatch_queue_s *)v4[5];
    *(void *)&__int128 v15 = MEMORY[0x1895F87A8];
    *((void *)&v15 + 1) = 3221225472LL;
    id v16 = ___ZL42nw_masque_server_call_state_handler_lockedP27NWConcrete_nw_masque_server19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke;
    nw_listener_t v17 = &unk_189BC9440;
    id v19 = v7;
    int v20 = v2;
    id v18 = v5;
    id v10 = v7;
    dispatch_async(v9, &v15);
  }

  if (*(_DWORD *)(a1 + 48) == 3)
  {
    uint64_t v11 = *(void *)(a1 + 40);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v12 = (os_log_s *)(id)gLogObj;
    BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    if (v11)
    {
      if (v13)
      {
        LODWORD(v15) = 136446210;
        *(void *)((char *)&v15 + 4) = "nw_masque_server_start_block_invoke";
        os_log_type_t v14 = "%{public}s listener reported state of failed with error";
LABEL_11:
        _os_log_impl(&dword_181A5C000, v12, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v15, 0xCu);
      }
    }

    else if (v13)
    {
      LODWORD(v15) = 136446210;
      *(void *)((char *)&v15 + 4) = "nw_masque_server_start_block_invoke_2";
      os_log_type_t v14 = "%{public}s listener reported state of failed with NULL error";
      goto LABEL_11;
    }
  }

uint64_t ___ZL42nw_masque_server_call_state_handler_lockedP27NWConcrete_nw_masque_server19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke( uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(unsigned int *)(a1 + 48),  *(void *)(a1 + 32));
}

void ___ZL32nw_masque_connection_group_startP27NWConcrete_nw_masque_serverPU33objcproto22OS_nw_connection_group8NSObject_block_invoke( uint64_t a1, void *a2)
{
  uint64_t v123 = *MEMORY[0x1895F89C0];
  id v4 = a2;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v5 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_masque_connection_group_start_block_invoke";
    *(_WORD *)&_BYTE buf[12] = 2112;
    *(void *)&buf[14] = v4;
    _os_log_impl(&dword_181A5C000, v5, OS_LOG_TYPE_INFO, "%{public}s new inner connection %@", buf, 0x16u);
  }

  os_log_type_t v6 = *(void **)(a1 + 32);
  id v7 = *(void **)(a1 + 40);
  id v8 = v6;
  id v9 = v4;
  id v99 = v7;
  unsigned int v104 = v8;
  os_log_type_t v105 = v9;
  if (!v8)
  {
    __nwlog_obj();
    os_log_type_t v68 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_masque_inner_connection_start";
    id v69 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(aBlock.receiver) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (LOBYTE(aBlock.receiver) == 17)
    {
      __nwlog_obj();
      id v70 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t receiver = (os_log_type_t)aBlock.receiver;
      if (os_log_type_enabled(v70, (os_log_type_t)aBlock.receiver))
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_inner_connection_start";
        _os_log_impl(&dword_181A5C000, v70, receiver, "%{public}s called with null server", buf, 0xCu);
      }
    }

    else if (type[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v70 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v83 = (os_log_type_t)aBlock.receiver;
      BOOL v84 = os_log_type_enabled(v70, (os_log_type_t)aBlock.receiver);
      if (backtrace_string)
      {
        if (v84)
        {
          *(_DWORD *)__int128 buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_masque_inner_connection_start";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v70,  v83,  "%{public}s called with null server, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_118:
        if (!v69) {
          goto LABEL_58;
        }
LABEL_119:
        free(v69);
        goto LABEL_58;
      }

      if (v84)
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_inner_connection_start";
        _os_log_impl(&dword_181A5C000, v70, v83, "%{public}s called with null server, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v70 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v94 = (os_log_type_t)aBlock.receiver;
      if (os_log_type_enabled(v70, (os_log_type_t)aBlock.receiver))
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_inner_connection_start";
        _os_log_impl( &dword_181A5C000,  v70,  v94,  "%{public}s called with null server, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_18262AAA4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, void *a30, void *a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, void *a36, void *a37)
{
  _Unwind_Resume(a1);
}

void ___ZL32nw_masque_connection_group_startP27NWConcrete_nw_masque_serverPU33objcproto22OS_nw_connection_group8NSObject_block_invoke_100( uint64_t a1, int a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v5 = a3;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v6 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136446722;
    BOOL v13 = "nw_masque_connection_group_start_block_invoke";
    __int16 v14 = 1024;
    int v15 = a2;
    __int16 v16 = 2112;
    id v17 = v5;
    _os_log_impl(&dword_181A5C000, v6, OS_LOG_TYPE_INFO, "%{public}s group state %u, error %@", buf, 0x1Cu);
  }

  if ((a2 - 3) > 1)
  {
    if (a2 == 2) {
      nw_masque_server_call_proxy_client_connection_event_handler(*(void **)(a1 + 32), *(void **)(a1 + 40), 2, 0LL);
    }
  }

  else
  {
    id v7 = *(os_unfair_lock_s **)(a1 + 32);
    v9[0] = MEMORY[0x1895F87A8];
    v9[1] = 3221225472LL;
    v9[2] = ___ZL32nw_masque_connection_group_startP27NWConcrete_nw_masque_serverPU33objcproto22OS_nw_connection_group8NSObject_block_invoke_101;
    v9[3] = &unk_189BC9238;
    id v10 = v7;
    id v11 = *(id *)(a1 + 40);
    id v8 = (void (**)(void))_Block_copy(v9);
    v7 += 4;
    os_unfair_lock_lock(v7);
    v8[2](v8);
    os_unfair_lock_unlock(v7);

    nw_connection_group_cancel(*(nw_connection_group_t *)(a1 + 40));
    if (a2 == 4) {
      nw_masque_server_call_proxy_client_connection_event_handler(*(void **)(a1 + 32), *(void **)(a1 + 40), 3, 0LL);
    }
  }
}

void sub_18262AD34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL32nw_masque_connection_group_startP27NWConcrete_nw_masque_serverPU33objcproto22OS_nw_connection_group8NSObject_block_invoke_2( uint64_t a1)
{
}

void ___ZL32nw_masque_connection_group_startP27NWConcrete_nw_masque_serverPU33objcproto22OS_nw_connection_group8NSObject_block_invoke_3( uint64_t a1)
{
}

void nw_masque_server_call_proxy_client_connection_event_handler(void *a1, void *a2, int a3, void *a4)
{
  uint64_t v56 = *MEMORY[0x1895F89C0];
  id v7 = a1;
  id v8 = a2;
  id v9 = a4;
  if (!v7)
  {
    __nwlog_obj();
    BOOL v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_masque_server_call_proxy_client_connection_event_handler";
    __int16 v14 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v40[0]) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type[0];
      if (os_log_type_enabled(v15, type[0]))
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_server_call_proxy_client_connection_event_handler";
        _os_log_impl(&dword_181A5C000, v15, v16, "%{public}s called with null server", buf, 0xCu);
      }
    }

    else if (LOBYTE(v40[0]))
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type[0];
      BOOL v21 = os_log_type_enabled(v15, type[0]);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)__int128 buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_masque_server_call_proxy_client_connection_event_handler";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v15,  v20,  "%{public}s called with null server, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_43:
        if (!v14) {
          goto LABEL_9;
        }
LABEL_44:
        free(v14);
        goto LABEL_9;
      }

      if (v21)
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_server_call_proxy_client_connection_event_handler";
        _os_log_impl(&dword_181A5C000, v15, v20, "%{public}s called with null server, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type[0];
      if (os_log_type_enabled(v15, type[0]))
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_server_call_proxy_client_connection_event_handler";
        _os_log_impl( &dword_181A5C000,  v15,  v25,  "%{public}s called with null server, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_18262B424( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void *a27, void *a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, id a38, char a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, id a44)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a39, 8);

  _Block_object_dispose((const void *)(v47 - 208), 8);
  _Block_object_dispose((const void *)(v47 - 176), 8);

  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__102_87709(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__103_87710(uint64_t a1)
{
}

void ___ZL59nw_masque_server_call_proxy_client_connection_event_handlerP27NWConcrete_nw_masque_serverPU33objcproto22OS_nw_connection_group8NSObject41nw_masque_proxy_client_connection_event_tU13block_pointerFvvE_block_invoke( uint64_t a1)
{
  int v2 = *(const void **)(*(void *)(a1 + 32) + 88LL);
  if (v2)
  {
    id v3 = _Block_copy(v2);
    uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;

    *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = nw_connection_group_get_id(*(void **)(a1 + 40));
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL), *(id *)(*(void *)(a1 + 32) + 40LL));
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL), *(id *)(*(void *)(a1 + 32) + 24LL));
  }

void ___ZL59nw_masque_server_call_proxy_client_connection_event_handlerP27NWConcrete_nw_masque_serverPU33objcproto22OS_nw_connection_group8NSObject41nw_masque_proxy_client_connection_event_tU13block_pointerFvvE_block_invoke_2( void *a1)
{
  int v2 = (void *)a1[4];
  if (v2) {
    dispatch_async(*(dispatch_queue_t *)(*(void *)(a1[7] + 8LL) + 40LL), v2);
  }
}

BOOL ___ZL32nw_masque_connection_group_startP27NWConcrete_nw_masque_serverPU33objcproto22OS_nw_connection_group8NSObject_block_invoke_101( BOOL result)
{
  if (*(void *)(*(void *)(result + 32) + 72LL)) {
    return nw_array_remove_object(*(void *)(*(void *)(result + 32) + 72LL), *(void *)(result + 40));
  }
  return result;
}

void ___ZL32nw_masque_inner_connection_startP27NWConcrete_nw_masque_serverPU27objcproto16OS_nw_connection8NSObjectPU33objcproto22OS_nw_connection_groupS1__block_invoke( uint64_t a1)
{
}

void ___ZL32nw_masque_inner_connection_startP27NWConcrete_nw_masque_serverPU27objcproto16OS_nw_connection8NSObjectPU33objcproto22OS_nw_connection_groupS1__block_invoke_2( uint64_t a1)
{
  int v2 = *(os_unfair_lock_s **)(a1 + 32);
  id v3 = v2 + 4;
  v5[0] = MEMORY[0x1895F87A8];
  v5[1] = 3221225472LL;
  v5[2] = ___ZL32nw_masque_inner_connection_startP27NWConcrete_nw_masque_serverPU27objcproto16OS_nw_connection8NSObjectPU33objcproto22OS_nw_connection_groupS1__block_invoke_3;
  v5[3] = &unk_189BC9238;
  os_log_type_t v6 = v2;
  id v7 = *(id *)(a1 + 40);
  uint64_t v4 = (void (**)(void))_Block_copy(v5);
  os_unfair_lock_lock(v3);
  v4[2](v4);
  os_unfair_lock_unlock(v3);
}

void sub_18262B694( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void ___ZL32nw_masque_inner_connection_startP27NWConcrete_nw_masque_serverPU27objcproto16OS_nw_connection8NSObjectPU33objcproto22OS_nw_connection_groupS1__block_invoke_3( uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  BOOL v2 = nw_array_duplicate_array_without_object(*(void *)(*(void *)(a1 + 32) + 104LL), *(void **)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 104);
  *(void *)(v3 + 104) = v2;

  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 104LL);
  if (v5) {
    uint64_t v6 = (uint64_t)(*(void *)(v5 + 24) - *(void *)(v5 + 16)) >> 3;
  }
  else {
    uint64_t v6 = 0LL;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v7 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    int v10 = 136446978;
    id v11 = "nw_masque_inner_connection_start_block_invoke_3";
    __int16 v12 = 2112;
    uint64_t v13 = v8;
    __int16 v14 = 2112;
    uint64_t v15 = v9;
    __int16 v16 = 2048;
    uint64_t v17 = v6;
    _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_DEFAULT,  "%{public}s %@ cancelled connection %@, %zu remaining",  (uint8_t *)&v10,  0x2Au);
  }
}

void __nw_masque_server_start_block_invoke(uint64_t a1, void *a2)
{
}

void nw_masque_server_cancel(void *a1)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  BOOL v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    os_log_type_t v23 = "nw_masque_server_cancel";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v23 = "nw_masque_server_cancel";
        _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s called with null server", buf, 0xCu);
      }
    }

    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)__int128 buf = 136446466;
          os_log_type_t v23 = "nw_masque_server_cancel";
          __int16 v24 = 2082;
          os_log_type_t v25 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null server, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v5) {
          goto LABEL_4;
        }
LABEL_39:
        free(v5);
        goto LABEL_4;
      }

      if (v12)
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v23 = "nw_masque_server_cancel";
        _os_log_impl(&dword_181A5C000, v6, v11, "%{public}s called with null server, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v23 = "nw_masque_server_cancel";
        _os_log_impl( &dword_181A5C000,  v6,  v16,  "%{public}s called with null server, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void __nw_masque_server_cancel_block_invoke(uint64_t a1)
{
  id v1 = *(os_unfair_lock_s **)(a1 + 32);
  BOOL v2 = v1 + 4;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 3221225472LL;
  aBlock[2] = __nw_masque_server_cancel_block_invoke_2;
  aBlock[3] = &unk_189BC93A0;
  uint64_t v5 = v1;
  uint64_t v3 = (void (**)(void))_Block_copy(aBlock);
  os_unfair_lock_lock(v2);
  v3[2](v3);
  os_unfair_lock_unlock(v2);
}

void sub_18262BD64( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

unsigned __int8 *__nw_masque_server_cancel_block_invoke_2(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 32);
  uint64_t v3 = (nw_listener *)v2[8];
  if (v3)
  {
    nw_listener_cancel(v3);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 64);
    *(void *)(v4 + 64) = 0LL;

    BOOL v2 = *(void **)(a1 + 32);
  }

  uint64_t v6 = (unsigned __int8 *)v2[13];
  if (v6)
  {
    nw_array_apply(v6, (uint64_t)&__block_literal_global_10_87742);
    BOOL v2 = *(void **)(a1 + 32);
  }

  uint64_t result = (unsigned __int8 *)v2[9];
  if (result) {
    return (unsigned __int8 *)nw_array_apply(result, (uint64_t)&__block_literal_global_11_87743);
  }
  return result;
}

uint64_t __nw_masque_server_cancel_block_invoke_4(int a1, int a2, nw_connection_group_t group)
{
  return 1LL;
}

uint64_t __nw_masque_server_cancel_block_invoke_3(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a3;
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = (dispatch_queue_s *)v3[4];
    *(void *)block = MEMORY[0x1895F87A8];
    *(void *)&block[8] = 3221225472LL;
    *(void *)&block[16] = __nw_masque_connection_cancel_block_invoke;
    uint64_t v18 = &unk_189BC93A0;
    id v19 = v3;
    dispatch_async(v5, block);

    goto LABEL_3;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v7 = (id)gLogObj;
  *(_DWORD *)block = 136446210;
  *(void *)&void block[4] = "nw_masque_connection_cancel";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v9 = (os_log_s *)(id)gLogObj;
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)block = 136446210;
        *(void *)&void block[4] = "nw_masque_connection_cancel";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null connection", block, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v9 = (os_log_s *)(id)gLogObj;
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)block = 136446466;
          *(void *)&void block[4] = "nw_masque_connection_cancel";
          *(_WORD *)&block[12] = 2082;
          *(void *)&block[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null connection, dumping backtrace:%{public}s",  block,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v13)
      {
        *(_DWORD *)block = 136446210;
        *(void *)&void block[4] = "nw_masque_connection_cancel";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null connection, no backtrace", block, 0xCu);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v9 = (os_log_s *)(id)gLogObj;
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)block = 136446210;
        *(void *)&void block[4] = "nw_masque_connection_cancel";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null connection, backtrace limit exceeded",  block,  0xCu);
      }
    }
  }

id nw_masque_server_copy_connection_group_with_identifier(void *a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    *(void *)__int128 buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    os_log_type_t v23 = __Block_byref_object_copy__87670;
    __int16 v24 = __Block_byref_object_dispose__87671;
    id v25 = 0LL;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = __nw_masque_server_copy_connection_group_with_identifier_block_invoke;
    aBlock[3] = &unk_189BC93F0;
    uint64_t v18 = buf;
    uint64_t v19 = a2;
    os_log_type_t v17 = v3;
    uint64_t v5 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v4 + 4);
    v5[2](v5);
    os_unfair_lock_unlock(v4 + 4);

    id v6 = *(id *)(*(void *)&buf[8] + 40LL);
    _Block_object_dispose(buf, 8);

    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_masque_server_copy_connection_group_with_identifier";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v9, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_server_copy_connection_group_with_identifier";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null server", buf, 0xCu);
      }
    }

    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)__int128 buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_masque_server_copy_connection_group_with_identifier";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null server, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v14)
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_server_copy_connection_group_with_identifier";
        _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null server, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_server_copy_connection_group_with_identifier";
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null server, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18262C49C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, id a26)
{
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

BOOL __nw_masque_server_copy_connection_group_with_identifier_block_invoke(void *a1)
{
  v5[0] = MEMORY[0x1895F87A8];
  v5[2] = __nw_masque_server_copy_connection_group_with_identifier_block_invoke_2;
  v5[3] = &unk_189BC93C8;
  uint64_t v1 = a1[5];
  BOOL v2 = *(unsigned __int8 **)(a1[4] + 72LL);
  v5[1] = 3221225472LL;
  uint64_t v3 = a1[6];
  void v5[4] = v1;
  v5[5] = v3;
  return nw_array_apply(v2, (uint64_t)v5);
}

BOOL __nw_masque_server_copy_connection_group_with_identifier_block_invoke_2( uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t id = nw_connection_group_get_id(v5);
  if (v6 == id) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), a3);
  }

  return v6 != id;
}

void __nw_masque_server_set_listener_association_port_block_invoke(uint64_t a1)
{
  BOOL v2 = *(void **)(*(void *)(a1 + 32) + 120LL);
  if (!v2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0LL, 0LL, 0LL);
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 120);
    *(void *)(v4 + 120) = v3;

    BOOL v2 = *(void **)(*(void *)(a1 + 32) + 120LL);
  }

  xpc_dictionary_set_uint64(v2, *(const char **)(a1 + 40), *(unsigned __int16 *)(a1 + 48));
}

void *__nw_masque_server_get_listener_association_port_block_invoke(uint64_t a1)
{
  uint64_t result = *(void **)(*(void *)(a1 + 32) + 120LL);
  if (result)
  {
    uint64_t result = (void *)xpc_dictionary_get_uint64(result, *(const char **)(a1 + 48));
    *(_WORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = (_WORD)result;
  }

  return result;
}

void sub_18262C94C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18262CA60( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)&OBJC_CLASS___nw_interpose_flow;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_18262CD3C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
}

void sub_18262D038(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18262D1D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18262D444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18262DC74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18262DD78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_interface *nw_interface_create_with_index_and_name(unsigned int a1, unsigned __int8 *a2)
{
  uint64_t v75 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    os_log_type_t v58 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_interface_create_with_index_and_name";
    BOOL v59 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v72 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v61 = type;
      if (os_log_type_enabled(v60, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_create_with_index_and_name";
        _os_log_impl(&dword_181A5C000, v60, v61, "%{public}s called with null interface_index", buf, 0xCu);
      }
    }

    else if (v72)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v65 = type;
      BOOL v66 = os_log_type_enabled(v60, type);
      if (backtrace_string)
      {
        if (v66)
        {
          *(_DWORD *)__int128 buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_interface_create_with_index_and_name";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v60,  v65,  "%{public}s called with null interface_index, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_145;
      }

      if (v66)
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_create_with_index_and_name";
        _os_log_impl(&dword_181A5C000, v60, v65, "%{public}s called with null interface_index, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v60 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v70 = type;
      if (os_log_type_enabled(v60, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_create_with_index_and_name";
        _os_log_impl( &dword_181A5C000,  v60,  v70,  "%{public}s called with null interface_index, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_18262EC60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_interface *nw_interface_create_with_name(char *a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    int v15 = "nw_interface_create_with_name";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        int v15 = "nw_interface_create_with_name";
        int v9 = "%{public}s called with null interface_name";
LABEL_21:
        _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      }
    }

    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)__int128 buf = 136446466;
            int v15 = "nw_interface_create_with_name";
            __int16 v16 = 2082;
            int v17 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null interface_name, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }

        if (!v11) {
          goto LABEL_22;
        }
        *(_DWORD *)__int128 buf = 136446210;
        int v15 = "nw_interface_create_with_name";
        int v9 = "%{public}s called with null interface_name, no backtrace";
        goto LABEL_21;
      }

      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        int v15 = "nw_interface_create_with_name";
        int v9 = "%{public}s called with null interface_name, backtrace limit exceeded";
        goto LABEL_21;
      }
    }

NWConcrete_nw_interface *nw_interface_create_with_index(unsigned int a1)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    int v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    int v27 = "nw_interface_create_with_index";
    int v10 = (char *)_os_log_send_and_compose_impl();

    v30[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v10, v30, &type))
    {
      if (v30[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = v30[0];
        if (!os_log_type_enabled(v11, v30[0])) {
          goto LABEL_30;
        }
        *(_DWORD *)__int128 buf = 136446210;
        int v27 = "nw_interface_create_with_index";
        int v13 = "%{public}s called with null interface_index";
      }

      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = v30[0];
        BOOL v23 = os_log_type_enabled(v11, v30[0]);
        if (backtrace_string)
        {
          if (v23)
          {
            *(_DWORD *)__int128 buf = 136446466;
            int v27 = "nw_interface_create_with_index";
            __int16 v28 = 2082;
            v29[0] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s called with null interface_index, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_31;
        }

        if (!v23) {
          goto LABEL_30;
        }
        *(_DWORD *)__int128 buf = 136446210;
        int v27 = "nw_interface_create_with_index";
        int v13 = "%{public}s called with null interface_index, no backtrace";
      }

      else
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = v30[0];
        if (!os_log_type_enabled(v11, v30[0])) {
          goto LABEL_30;
        }
        *(_DWORD *)__int128 buf = 136446210;
        int v27 = "nw_interface_create_with_index";
        int v13 = "%{public}s called with null interface_index, backtrace limit exceeded";
      }

      int v17 = v11;
      os_log_type_t v18 = v21;
      uint32_t v19 = 12;
      goto LABEL_29;
    }

    goto LABEL_31;
  }

  if (a1 >= 0x7FFFFFFF)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unsigned int v2 = (os_log_s *)(id)gLogObj;
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
LABEL_6:

      return 0LL;
    }

    *(_DWORD *)__int128 buf = 136446722;
    int v27 = "nw_interface_create_with_index";
    __int16 v28 = 1024;
    LODWORD(v29[0]) = a1;
    WORD2(v29[0]) = 1024;
    *(_DWORD *)((char *)v29 + 6) = 0x7FFFFFFF;
    xpc_object_t v3 = "%{public}s refusing to create an interface with index %u too high (>=%u)";
    uint64_t v4 = v2;
    uint32_t v5 = 24;
LABEL_5:
    _os_log_impl(&dword_181A5C000, v4, OS_LOG_TYPE_ERROR, v3, buf, v5);
    goto LABEL_6;
  }

  if (!if_indextoname(a1, (char *)v30))
  {
    int v7 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v8 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136446722;
      int v27 = "nw_interface_create_with_index";
      __int16 v28 = 1024;
      LODWORD(v29[0]) = a1;
      WORD2(v29[0]) = 1024;
      *(_DWORD *)((char *)v29 + 6) = v7;
      _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_ERROR,  "%{public}s if_indextoname failed for interface index %u: %{darwin.errno}d",  buf,  0x18u);
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v9 = (os_log_s *)(id)gLogObj;
    unsigned int v2 = v9;
    if (v7 == 6)
    {
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        goto LABEL_6;
      }
      *(_DWORD *)__int128 buf = 136446466;
      int v27 = "nw_interface_create_with_index";
      __int16 v28 = 1024;
      LODWORD(v29[0]) = 6;
      xpc_object_t v3 = "%{public}s if_indextoname %{darwin.errno}d";
      uint64_t v4 = v2;
      uint32_t v5 = 18;
      goto LABEL_5;
    }

    *(_DWORD *)__int128 buf = 136446466;
    int v27 = "nw_interface_create_with_index";
    __int16 v28 = 1024;
    LODWORD(v29[0]) = v7;
    int v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v10, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v11 = (os_log_s *)(id)gLogObj;
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)__int128 buf = 136446466;
          int v27 = "nw_interface_create_with_index";
          __int16 v28 = 1024;
          LODWORD(v29[0]) = v7;
          int v13 = "%{public}s if_indextoname %{darwin.errno}d";
LABEL_27:
          int v17 = v11;
          os_log_type_t v18 = v12;
LABEL_28:
          uint32_t v19 = 18;
LABEL_29:
          _os_log_impl(&dword_181A5C000, v17, v18, v13, buf, v19);
        }
      }

      else
      {
        if (v24)
        {
          int v14 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v11 = (os_log_s *)(id)gLogObj;
          os_log_type_t v15 = type;
          BOOL v16 = os_log_type_enabled(v11, type);
          if (v14)
          {
            if (v16)
            {
              *(_DWORD *)__int128 buf = 136446722;
              int v27 = "nw_interface_create_with_index";
              __int16 v28 = 1024;
              LODWORD(v29[0]) = v7;
              WORD2(v29[0]) = 2082;
              *(void *)((char *)v29 + 6) = v14;
              _os_log_impl( &dword_181A5C000,  v11,  v15,  "%{public}s if_indextoname %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
            }

            free(v14);
            goto LABEL_31;
          }

          if (!v16) {
            goto LABEL_30;
          }
          *(_DWORD *)__int128 buf = 136446466;
          int v27 = "nw_interface_create_with_index";
          __int16 v28 = 1024;
          LODWORD(v29[0]) = v7;
          int v13 = "%{public}s if_indextoname %{darwin.errno}d, no backtrace";
          int v17 = v11;
          os_log_type_t v18 = v15;
          goto LABEL_28;
        }

        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)__int128 buf = 136446466;
          int v27 = "nw_interface_create_with_index";
          __int16 v28 = 1024;
          LODWORD(v29[0]) = v7;
          int v13 = "%{public}s if_indextoname %{darwin.errno}d, backtrace limit exceeded";
          goto LABEL_27;
        }
      }

NWConcrete_nw_interface *nw_interface_create_static( unsigned __int8 *a1, unsigned int a2, int a3, int a4, unsigned int a5, unsigned int a6, __int16 a7, int a8, unsigned int a9, unsigned int a10, unsigned int a11)
{
  uint64_t v63 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint32_t v19 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_interface);
    int v20 = v19;
    if (v19)
    {
      int v21 = *a1;
      v19->name[0] = v21;
      if (v21)
      {
        int v22 = a1[1];
        v19->name[1] = v22;
        if (v22)
        {
          int v23 = a1[2];
          v19->name[2] = v23;
          if (v23)
          {
            int v24 = a1[3];
            v19->name[3] = v24;
            if (v24)
            {
              int v25 = a1[4];
              v19->name[4] = v25;
              if (v25)
              {
                int v26 = a1[5];
                v19->name[5] = v26;
                if (v26)
                {
                  int v27 = a1[6];
                  v19->name[6] = v27;
                  if (v27)
                  {
                    int v28 = a1[7];
                    v19->name[7] = v28;
                    if (v28)
                    {
                      int v29 = a1[8];
                      v19->name[8] = v29;
                      if (v29)
                      {
                        int v30 = a1[9];
                        v19->name[9] = v30;
                        if (v30)
                        {
                          int v31 = a1[10];
                          v19->name[10] = v31;
                          if (v31)
                          {
                            int v32 = a1[11];
                            v19->name[11] = v32;
                            if (v32)
                            {
                              int v33 = a1[12];
                              v19->name[12] = v33;
                              if (v33)
                              {
                                int v34 = a1[13];
                                v19->name[13] = v34;
                                if (v34)
                                {
                                  int v35 = a1[14];
                                  v19->name[14] = v35;
                                  if (v35)
                                  {
                                    int v36 = a1[15];
                                    v19->name[15] = v36;
                                    if (v36)
                                    {
                                      int v37 = a1[16];
                                      v19->name[16] = v37;
                                      if (v37)
                                      {
                                        int v38 = a1[17];
                                        v19->name[17] = v38;
                                        if (v38)
                                        {
                                          int v39 = a1[18];
                                          v19->name[18] = v39;
                                          if (v39)
                                          {
                                            int v40 = a1[19];
                                            v19->name[19] = v40;
                                            if (v40)
                                            {
                                              int v41 = a1[20];
                                              v19->name[20] = v41;
                                              if (v41)
                                              {
                                                int v42 = a1[21];
                                                v19->name[21] = v42;
                                                if (v42)
                                                {
                                                  int v43 = a1[22];
                                                  v19->name[22] = v43;
                                                  if (v43)
                                                  {
                                                    int v44 = a1[23];
                                                    v19->name[23] = v44;
                                                    if (v44) {
                                                      v19->name[24] = 0;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      v19->index = a2;
      v19->os_log_type_t type = a3;
      v19->subos_log_type_t type = a4;
      v19->delegate_index = a6;
      v19->generation = a5;
      if (a8) {
        __int16 v45 = 2;
      }
      else {
        __int16 v45 = 0;
      }
      __int16 v46 = v45 | a7 | *(_WORD *)((char *)&v19->details + 73) & 0xFFFC;
      *(_WORD *)((char *)&v19->details + 73) = v46;
      v19->details.mtu = a9;
      if (a10)
      {
        v46 |= 0x80u;
        *(_WORD *)((char *)&v19->details + 73) = v46;
        v19->details.ipv4_netmask = a10;
      }

      if (a11)
      {
        *(_WORD *)((char *)&v19->details + 73) = v46 | 0x100;
        v19->details.ipv4_broadcast = a11;
      }

      os_log_type_t v47 = v19;
    }

    return v20;
  }

  __nwlog_obj();
  __int16 v49 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  id v60 = "nw_interface_create_static";
  uint64_t v50 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v57 = 0;
  if (__nwlog_fault(v50, &type, &v57))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v52 = type;
      if (os_log_type_enabled(v51, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        id v60 = "nw_interface_create_static";
        _os_log_impl(&dword_181A5C000, v51, v52, "%{public}s called with null name", buf, 0xCu);
      }
    }

    else if (v57)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v54 = type;
      BOOL v55 = os_log_type_enabled(v51, type);
      if (backtrace_string)
      {
        if (v55)
        {
          *(_DWORD *)__int128 buf = 136446466;
          id v60 = "nw_interface_create_static";
          __int16 v61 = 2082;
          BOOL v62 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v51,  v54,  "%{public}s called with null name, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_54;
      }

      if (v55)
      {
        *(_DWORD *)__int128 buf = 136446210;
        id v60 = "nw_interface_create_static";
        _os_log_impl(&dword_181A5C000, v51, v54, "%{public}s called with null name, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v56 = type;
      if (os_log_type_enabled(v51, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        id v60 = "nw_interface_create_static";
        _os_log_impl( &dword_181A5C000,  v51,  v56,  "%{public}s called with null name, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

NWConcrete_nw_interface *nw_interface_create_from_dictionary(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    unsigned int v2 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_interface);
    if (v2)
    {
      v2->os_log_type_t type = xpc_dictionary_get_uint64(v1, "type");
      v2->subos_log_type_t type = xpc_dictionary_get_uint64(v1, "subtype");
      v2->index = xpc_dictionary_get_uint64(v1, "index");
      v2->generation = xpc_dictionary_get_uint64(v1, "generation");
      v2->delegate_index = xpc_dictionary_get_uint64(v1, "delegate_index");
      string = (unsigned __int8 *)xpc_dictionary_get_string(v1, "name");
      if (string)
      {
        int v4 = *string;
        v2->name[0] = v4;
        if (v4)
        {
          int v5 = string[1];
          v2->name[1] = v5;
          if (v5)
          {
            int v6 = string[2];
            v2->name[2] = v6;
            if (v6)
            {
              int v7 = string[3];
              v2->name[3] = v7;
              if (v7)
              {
                int v8 = string[4];
                v2->name[4] = v8;
                if (v8)
                {
                  int v9 = string[5];
                  v2->name[5] = v9;
                  if (v9)
                  {
                    int v10 = string[6];
                    v2->name[6] = v10;
                    if (v10)
                    {
                      int v11 = string[7];
                      v2->name[7] = v11;
                      if (v11)
                      {
                        int v12 = string[8];
                        v2->name[8] = v12;
                        if (v12)
                        {
                          int v13 = string[9];
                          v2->name[9] = v13;
                          if (v13)
                          {
                            int v14 = string[10];
                            v2->name[10] = v14;
                            if (v14)
                            {
                              int v15 = string[11];
                              v2->name[11] = v15;
                              if (v15)
                              {
                                int v16 = string[12];
                                v2->name[12] = v16;
                                if (v16)
                                {
                                  int v17 = string[13];
                                  v2->name[13] = v17;
                                  if (v17)
                                  {
                                    int v18 = string[14];
                                    v2->name[14] = v18;
                                    if (v18)
                                    {
                                      int v19 = string[15];
                                      v2->name[15] = v19;
                                      if (v19)
                                      {
                                        int v20 = string[16];
                                        v2->name[16] = v20;
                                        if (v20)
                                        {
                                          int v21 = string[17];
                                          v2->name[17] = v21;
                                          if (v21)
                                          {
                                            int v22 = string[18];
                                            v2->name[18] = v22;
                                            if (v22)
                                            {
                                              int v23 = string[19];
                                              v2->name[19] = v23;
                                              if (v23)
                                              {
                                                int v24 = string[20];
                                                v2->name[20] = v24;
                                                if (v24)
                                                {
                                                  int v25 = string[21];
                                                  v2->name[21] = v25;
                                                  if (v25)
                                                  {
                                                    int v26 = string[22];
                                                    v2->name[22] = v26;
                                                    if (v26)
                                                    {
                                                      int v27 = string[23];
                                                      v2->name[23] = v27;
                                                      if (v27) {
                                                        v2->name[24] = 0;
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      size_t length = 0LL;
      data = xpc_dictionary_get_data(v1, "details", &length);
      if (data && length == 76)
      {
        *(_OWORD *)v2->details.ipv4_signature.signature = *data;
        __int128 v29 = data[1];
        __int128 v30 = data[2];
        __int128 v31 = data[3];
        *(_OWORD *)&v2->details.ipv4_netmask = *(_OWORD *)((char *)data + 60);
        *(_OWORD *)&v2->details.mtu = v31;
        *(_OWORD *)&v2->details.ipv6_signature.signature[8] = v30;
        *(_OWORD *)&v2->details.ipv4_signature.signature[16] = v29;
      }
    }
  }

  else
  {
    unsigned int v2 = 0LL;
  }

  return v2;
}

void sub_18262FC74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *nw_interface_copy_dictionary(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    xpc_object_t v2 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_object_t v3 = v2;
    uint64_t v4 = *((unsigned int *)v1 + 24);
    if ((_DWORD)v4) {
      xpc_dictionary_set_uint64(v2, "type", v4);
    }
    uint64_t v5 = *((unsigned int *)v1 + 25);
    if ((_DWORD)v5) {
      xpc_dictionary_set_uint64(v3, "subtype", v5);
    }
    xpc_dictionary_set_string(v3, "name", v1 + 104);
    uint64_t v6 = *((unsigned int *)v1 + 2);
    if ((_DWORD)v6) {
      xpc_dictionary_set_uint64(v3, "index", v6);
    }
    uint64_t v7 = *((unsigned int *)v1 + 23);
    if ((_DWORD)v7) {
      xpc_dictionary_set_uint64(v3, "generation", v7);
    }
    uint64_t v8 = *((unsigned int *)v1 + 22);
    if ((_DWORD)v8) {
      xpc_dictionary_set_uint64(v3, "delegate_index", v8);
    }
    xpc_dictionary_set_data(v3, "details", v1 + 12, 0x4CuLL);
  }

  else
  {
    xpc_object_t v3 = 0LL;
  }

  return v3;
}

void sub_18262FD8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint32_t nw_interface_get_index(nw_interface_t interface)
{
  return interface;
}

uint64_t nw_interface_get_generation(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[23];
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  int v16 = "nw_interface_get_generation";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        int v16 = "nw_interface_get_generation";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null interface", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          int v16 = "nw_interface_get_generation";
          __int16 v17 = 2082;
          int v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null interface, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        int v16 = "nw_interface_get_generation";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        int v16 = "nw_interface_get_generation";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null interface, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_interface_get_mtu(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[15];
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  int v16 = "nw_interface_get_mtu";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        int v16 = "nw_interface_get_mtu";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null interface", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          int v16 = "nw_interface_get_mtu";
          __int16 v17 = 2082;
          int v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null interface, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        int v16 = "nw_interface_get_mtu";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        int v16 = "nw_interface_get_mtu";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null interface, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_interface_get_ipv6_network_signature(void *a1, void *a2, _BYTE *a3)
{
  *(void *)&v45[13] = *MEMORY[0x1895F89C0];
  uint64_t v5 = a1;
  uint64_t v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    int v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    int v43 = "nw_interface_get_ipv6_network_signature";
    int v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        int v43 = "nw_interface_get_ipv6_network_signature";
        _os_log_impl(&dword_181A5C000, v24, v25, "%{public}s called with null interface", buf, 0xCu);
      }

      goto LABEL_74;
    }

    if (!v40)
    {
      __nwlog_obj();
      int v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v37 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        int v43 = "nw_interface_get_ipv6_network_signature";
        _os_log_impl( &dword_181A5C000,  v24,  v37,  "%{public}s called with null interface, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_74;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    int v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v31 = type;
    BOOL v32 = os_log_type_enabled(v24, type);
    if (!backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)__int128 buf = 136446210;
        int v43 = "nw_interface_get_ipv6_network_signature";
        _os_log_impl(&dword_181A5C000, v24, v31, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }

      goto LABEL_74;
    }

    if (v32)
    {
      *(_DWORD *)__int128 buf = 136446466;
      int v43 = "nw_interface_get_ipv6_network_signature";
      __int16 v44 = 2082;
      *(void *)__int16 v45 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v24,  v31,  "%{public}s called with null interface, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_56;
  }

  if (!a2)
  {
    __nwlog_obj();
    int v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    int v43 = "nw_interface_get_ipv6_network_signature";
    int v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        int v43 = "nw_interface_get_ipv6_network_signature";
        _os_log_impl(&dword_181A5C000, v24, v27, "%{public}s called with null signature", buf, 0xCu);
      }

      goto LABEL_74;
    }

    if (!v40)
    {
      __nwlog_obj();
      int v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v38 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        int v43 = "nw_interface_get_ipv6_network_signature";
        _os_log_impl( &dword_181A5C000,  v24,  v38,  "%{public}s called with null signature, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_74;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    int v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v33 = type;
    BOOL v34 = os_log_type_enabled(v24, type);
    if (!backtrace_string)
    {
      if (v34)
      {
        *(_DWORD *)__int128 buf = 136446210;
        int v43 = "nw_interface_get_ipv6_network_signature";
        _os_log_impl(&dword_181A5C000, v24, v33, "%{public}s called with null signature, no backtrace", buf, 0xCu);
      }

      goto LABEL_74;
    }

    if (v34)
    {
      *(_DWORD *)__int128 buf = 136446466;
      int v43 = "nw_interface_get_ipv6_network_signature";
      __int16 v44 = 2082;
      *(void *)__int16 v45 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v24,  v33,  "%{public}s called with null signature, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_56;
  }

  if (!a3)
  {
    __nwlog_obj();
    int v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    int v43 = "nw_interface_get_ipv6_network_signature";
    int v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        int v43 = "nw_interface_get_ipv6_network_signature";
        _os_log_impl(&dword_181A5C000, v24, v29, "%{public}s called with null signature_len", buf, 0xCu);
      }

uint64_t nw_interface_get_ipv4_netmask(void *a1, BOOL *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    id v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    int v18 = "nw_interface_get_ipv4_netmask";
    int v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v8, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          int v18 = "nw_interface_get_ipv4_netmask";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null interface", buf, 0xCu);
        }
      }

      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)__int128 buf = 136446466;
            int v18 = "nw_interface_get_ipv4_netmask";
            __int16 v19 = 2082;
            int v20 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null interface, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }

        if (v13)
        {
          *(_DWORD *)__int128 buf = 136446210;
          int v18 = "nw_interface_get_ipv4_netmask";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null interface, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          int v18 = "nw_interface_get_ipv4_netmask";
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null interface, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

nw_endpoint_t nw_interface_copy_ipv4_netmask_endpoint(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)address = 136446210;
    *(void *)&address[4] = "nw_interface_copy_ipv4_netmask_endpoint";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v7, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)address = 136446210;
          *(void *)&address[4] = "nw_interface_copy_ipv4_netmask_endpoint";
          _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null interface", address, 0xCu);
        }
      }

      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        BOOL v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)address = 136446466;
            *(void *)&address[4] = "nw_interface_copy_ipv4_netmask_endpoint";
            *(_WORD *)&address[12] = 2082;
            *(void *)&address[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null interface, dumping backtrace:%{public}s",  address,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }

        if (v12)
        {
          *(_DWORD *)address = 136446210;
          *(void *)&address[4] = "nw_interface_copy_ipv4_netmask_endpoint";
          _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null interface, no backtrace", address, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)address = 136446210;
          *(void *)&address[4] = "nw_interface_copy_ipv4_netmask_endpoint";
          _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null interface, backtrace limit exceeded",  address,  0xCu);
        }
      }
    }

void sub_182631194(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_interface_get_ipv4_broadcast(void *a1, _BYTE *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  nw_endpoint_t v3 = a1;
  int v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    id v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    int v18 = "nw_interface_get_ipv4_broadcast";
    int v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v8, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          int v18 = "nw_interface_get_ipv4_broadcast";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null interface", buf, 0xCu);
        }
      }

      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)__int128 buf = 136446466;
            int v18 = "nw_interface_get_ipv4_broadcast";
            __int16 v19 = 2082;
            int v20 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null interface, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }

        if (v13)
        {
          *(_DWORD *)__int128 buf = 136446210;
          int v18 = "nw_interface_get_ipv4_broadcast";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null interface, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          int v18 = "nw_interface_get_ipv4_broadcast";
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null interface, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

nw_endpoint_t nw_interface_copy_ipv4_broadcast_endpoint(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)address = 136446210;
    *(void *)&address[4] = "nw_interface_copy_ipv4_broadcast_endpoint";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v7, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)address = 136446210;
          *(void *)&address[4] = "nw_interface_copy_ipv4_broadcast_endpoint";
          _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null interface", address, 0xCu);
        }
      }

      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        BOOL v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)address = 136446466;
            *(void *)&address[4] = "nw_interface_copy_ipv4_broadcast_endpoint";
            *(_WORD *)&address[12] = 2082;
            *(void *)&address[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null interface, dumping backtrace:%{public}s",  address,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }

        if (v12)
        {
          *(_DWORD *)address = 136446210;
          *(void *)&address[4] = "nw_interface_copy_ipv4_broadcast_endpoint";
          _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null interface, no backtrace", address, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)address = 136446210;
          *(void *)&address[4] = "nw_interface_copy_ipv4_broadcast_endpoint";
          _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null interface, backtrace limit exceeded",  address,  0xCu);
        }
      }
    }

void sub_182631714(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_interface *nw_interface_copy_delegate_interface(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    uint64_t v17 = "nw_interface_copy_delegate_interface";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          uint64_t v17 = "nw_interface_copy_delegate_interface";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null interface", buf, 0xCu);
        }
      }

      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)__int128 buf = 136446466;
            uint64_t v17 = "nw_interface_copy_delegate_interface";
            __int16 v18 = 2082;
            __int16 v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null interface, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }

        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446210;
          uint64_t v17 = "nw_interface_copy_delegate_interface";
          _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null interface, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          uint64_t v17 = "nw_interface_copy_delegate_interface";
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null interface, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_1826319C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_interface_is_expensive(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *(_WORD *)((_BYTE *)v1 + 85) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  os_log_type_t v16 = "nw_interface_is_expensive";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_interface_is_expensive";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null interface", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          os_log_type_t v16 = "nw_interface_is_expensive";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null interface, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_interface_is_expensive";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_interface_is_expensive";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null interface, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_interface_is_constrained(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(v1 + 85) >> 1) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  os_log_type_t v16 = "nw_interface_is_constrained";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_interface_is_constrained";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null interface", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          os_log_type_t v16 = "nw_interface_is_constrained";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null interface, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_interface_is_constrained";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_interface_is_constrained";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null interface, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_interface_is_ultra_constrained(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(v1 + 85) >> 2) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  os_log_type_t v16 = "nw_interface_is_ultra_constrained";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_interface_is_ultra_constrained";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null interface", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          os_log_type_t v16 = "nw_interface_is_ultra_constrained";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null interface, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_interface_is_ultra_constrained";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_interface_is_ultra_constrained";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null interface, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_interface_is_multilayer_packet_logging_enabled(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(v1 + 85) >> 6) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  os_log_type_t v16 = "nw_interface_is_multilayer_packet_logging_enabled";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_interface_is_multilayer_packet_logging_enabled";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null interface", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          os_log_type_t v16 = "nw_interface_is_multilayer_packet_logging_enabled";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null interface, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_interface_is_multilayer_packet_logging_enabled";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_interface_is_multilayer_packet_logging_enabled";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null interface, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_interface_supports_multicast(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(v1 + 85) >> 9) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  os_log_type_t v16 = "nw_interface_supports_multicast";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_interface_supports_multicast";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null interface", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          os_log_type_t v16 = "nw_interface_supports_multicast";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null interface, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_interface_supports_multicast";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_interface_supports_multicast";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null interface, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_interface_has_dns(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(v1 + 85) >> 10) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  os_log_type_t v16 = "nw_interface_has_dns";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_interface_has_dns";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null interface", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          os_log_type_t v16 = "nw_interface_has_dns";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null interface, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_interface_has_dns";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_interface_has_dns";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null interface, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_interface_has_nat64(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(v1 + 85) >> 11) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  os_log_type_t v16 = "nw_interface_has_nat64";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_interface_has_nat64";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null interface", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          os_log_type_t v16 = "nw_interface_has_nat64";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null interface, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_interface_has_nat64";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_interface_has_nat64";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null interface, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_interface_is_ipv4_routable(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(v1 + 85) >> 12) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  os_log_type_t v16 = "nw_interface_is_ipv4_routable";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_interface_is_ipv4_routable";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null interface", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          os_log_type_t v16 = "nw_interface_is_ipv4_routable";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null interface, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_interface_is_ipv4_routable";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_interface_is_ipv4_routable";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null interface, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_interface_is_ipv6_routable(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(v1 + 85) >> 13) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  os_log_type_t v16 = "nw_interface_is_ipv6_routable";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_interface_is_ipv6_routable";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null interface", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          os_log_type_t v16 = "nw_interface_is_ipv6_routable";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null interface, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_interface_is_ipv6_routable";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_interface_is_ipv6_routable";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null interface, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_interface_get_tso_max_segment_size_v4(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[16];
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  os_log_type_t v16 = "nw_interface_get_tso_max_segment_size_v4";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_interface_get_tso_max_segment_size_v4";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null interface", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          os_log_type_t v16 = "nw_interface_get_tso_max_segment_size_v4";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null interface, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_interface_get_tso_max_segment_size_v4";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_interface_get_tso_max_segment_size_v4";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null interface, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_interface_get_tso_max_segment_size_v6(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[17];
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  os_log_type_t v16 = "nw_interface_get_tso_max_segment_size_v6";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_interface_get_tso_max_segment_size_v6";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null interface", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          os_log_type_t v16 = "nw_interface_get_tso_max_segment_size_v6";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null interface, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_interface_get_tso_max_segment_size_v6";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_interface_get_tso_max_segment_size_v6";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null interface, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_interface_get_csum_flags(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[20];
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  os_log_type_t v16 = "nw_interface_get_csum_flags";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_interface_get_csum_flags";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null interface", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          os_log_type_t v16 = "nw_interface_get_csum_flags";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null interface, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_interface_get_csum_flags";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v16 = "nw_interface_get_csum_flags";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null interface, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_interface_type_to_functional_type(unsigned int a1, int a2)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  if (a2 <= 1001)
  {
    if (!a2) {
      goto LABEL_27;
    }
    if (a2 == 1001)
    {
      LOBYTE(v4) = 3;
      return v4;
    }
  }

  else
  {
    switch(a2)
    {
      case 5001:
        LOBYTE(v4) = 7;
        return v4;
      case 4001:
        LOBYTE(v4) = 6;
        return v4;
      case 1002:
        LOBYTE(v4) = 4;
        return v4;
    }
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v5 = (id)gLogObj;
  *(_DWORD *)__int128 buf = 136446466;
  os_log_type_t v29 = "nw_interface_type_to_functional_type";
  __int16 v30 = 1024;
  unsigned int v31 = a2;
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v26 = 0;
  if (__nwlog_fault(v6, &type, &v26))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v7 = (os_log_s *)(id)gLogObj;
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446466;
        os_log_type_t v29 = "nw_interface_type_to_functional_type";
        __int16 v30 = 1024;
        unsigned int v31 = a2;
        os_log_type_t v9 = "%{public}s Unknown interface_subtype %d";
LABEL_22:
        char v13 = v7;
        os_log_type_t v14 = v8;
LABEL_23:
        _os_log_impl(&dword_181A5C000, v13, v14, v9, buf, 0x12u);
      }
    }

    else
    {
      if (v26)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v7 = (os_log_s *)(id)gLogObj;
        os_log_type_t v11 = type;
        BOOL v12 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)__int128 buf = 136446722;
            os_log_type_t v29 = "nw_interface_type_to_functional_type";
            __int16 v30 = 1024;
            unsigned int v31 = a2;
            __int16 v32 = 2082;
            os_log_type_t v33 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v11,  "%{public}s Unknown interface_subtype %d, dumping backtrace:%{public}s",  buf,  0x1Cu);
          }

          free(backtrace_string);
          goto LABEL_25;
        }

        if (!v12) {
          goto LABEL_24;
        }
        *(_DWORD *)__int128 buf = 136446466;
        os_log_type_t v29 = "nw_interface_type_to_functional_type";
        __int16 v30 = 1024;
        unsigned int v31 = a2;
        os_log_type_t v9 = "%{public}s Unknown interface_subtype %d, no backtrace";
        char v13 = v7;
        os_log_type_t v14 = v11;
        goto LABEL_23;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v7 = (os_log_s *)(id)gLogObj;
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446466;
        os_log_type_t v29 = "nw_interface_type_to_functional_type";
        __int16 v30 = 1024;
        unsigned int v31 = a2;
        os_log_type_t v9 = "%{public}s Unknown interface_subtype %d, backtrace limit exceeded";
        goto LABEL_22;
      }
    }

uint64_t nw_interface_functional_type_to_interface_type(int a1)
{
  else {
    return dword_18272D740[a1 - 1];
  }
}

uint64_t nw_interface_functional_type_to_interface_subtype(int a1)
{
  else {
    return dword_18272D758[a1 - 3];
  }
}

const char *nw_interface_type_get_description(unsigned int a1)
{
  if (a1 > 4) {
    return "unknown";
  }
  else {
    return off_189BC9540[a1];
  }
}

const char *nw_interface_subtype_get_description(int a1)
{
  if (a1 <= 1001)
  {
    if (!a1) {
      return "other";
    }
    if (a1 == 1001) {
      return "wifi_infrastructure";
    }
  }

  else
  {
    switch(a1)
    {
      case 1002:
        return "wifi_awdl";
      case 4001:
        return "coprocessor";
      case 5001:
        return "companion";
    }
  }

  return "unknown";
}

nw_endpoint_t nw_interface_copy_local_address_for_remote_address(void *a1, void *a2)
{
  uint64_t v50 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    int v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)&__dst[0].size_t sa_len = 136446210;
    *(void *)&__dst[0].sa_data[2] = "nw_interface_copy_local_address_for_remote_address";
    id v15 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    LOBYTE(v42) = 0;
    if (buf[0] == 17)
    {
      __nwlog_obj();
      os_log_type_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = buf[0];
      if (os_log_type_enabled(v24, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)&__dst[0].size_t sa_len = 136446210;
        *(void *)&__dst[0].sa_data[2] = "nw_interface_copy_local_address_for_remote_address";
        _os_log_impl(&dword_181A5C000, v24, v25, "%{public}s called with null interface", &__dst[0].sa_len, 0xCu);
      }

      goto LABEL_83;
    }

    if (!(_BYTE)v42)
    {
      __nwlog_obj();
      os_log_type_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v37 = buf[0];
      if (os_log_type_enabled(v24, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)&__dst[0].size_t sa_len = 136446210;
        *(void *)&__dst[0].sa_data[2] = "nw_interface_copy_local_address_for_remote_address";
        _os_log_impl( &dword_181A5C000,  v24,  v37,  "%{public}s called with null interface, backtrace limit exceeded",  &__dst[0].sa_len,  0xCu);
      }

      goto LABEL_83;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v31 = buf[0];
    BOOL v32 = os_log_type_enabled(v24, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)&__dst[0].size_t sa_len = 136446210;
        *(void *)&__dst[0].sa_data[2] = "nw_interface_copy_local_address_for_remote_address";
        _os_log_impl( &dword_181A5C000,  v24,  v31,  "%{public}s called with null interface, no backtrace",  &__dst[0].sa_len,  0xCu);
      }

      goto LABEL_83;
    }

    if (v32)
    {
      *(_DWORD *)&__dst[0].size_t sa_len = 136446466;
      *(void *)&__dst[0].sa_data[2] = "nw_interface_copy_local_address_for_remote_address";
      *(_WORD *)&__dst[0].sa_data[10] = 2082;
      *(void *)&__dst[0].sa_data[12] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v24,  v31,  "%{public}s called with null interface, dumping backtrace:%{public}s",  &__dst[0].sa_len,  0x16u);
    }

    goto LABEL_65;
  }

  if (!v4)
  {
    __nwlog_obj();
    char v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)&__dst[0].size_t sa_len = 136446210;
    *(void *)&__dst[0].sa_data[2] = "nw_interface_copy_local_address_for_remote_address";
    id v15 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    LOBYTE(v42) = 0;
    if (buf[0] == 17)
    {
      __nwlog_obj();
      os_log_type_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = buf[0];
      if (os_log_type_enabled(v24, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)&__dst[0].size_t sa_len = 136446210;
        *(void *)&__dst[0].sa_data[2] = "nw_interface_copy_local_address_for_remote_address";
        _os_log_impl(&dword_181A5C000, v24, v27, "%{public}s called with null remote_endpoint", &__dst[0].sa_len, 0xCu);
      }

      goto LABEL_83;
    }

    if (!(_BYTE)v42)
    {
      __nwlog_obj();
      os_log_type_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v38 = buf[0];
      if (os_log_type_enabled(v24, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)&__dst[0].size_t sa_len = 136446210;
        *(void *)&__dst[0].sa_data[2] = "nw_interface_copy_local_address_for_remote_address";
        _os_log_impl( &dword_181A5C000,  v24,  v38,  "%{public}s called with null remote_endpoint, backtrace limit exceeded",  &__dst[0].sa_len,  0xCu);
      }

      goto LABEL_83;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v33 = buf[0];
    BOOL v34 = os_log_type_enabled(v24, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v34)
      {
        *(_DWORD *)&__dst[0].size_t sa_len = 136446210;
        *(void *)&__dst[0].sa_data[2] = "nw_interface_copy_local_address_for_remote_address";
        _os_log_impl( &dword_181A5C000,  v24,  v33,  "%{public}s called with null remote_endpoint, no backtrace",  &__dst[0].sa_len,  0xCu);
      }

      goto LABEL_83;
    }

    if (v34)
    {
      *(_DWORD *)&__dst[0].size_t sa_len = 136446466;
      *(void *)&__dst[0].sa_data[2] = "nw_interface_copy_local_address_for_remote_address";
      *(_WORD *)&__dst[0].sa_data[10] = 2082;
      *(void *)&__dst[0].sa_data[12] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v24,  v33,  "%{public}s called with null remote_endpoint, dumping backtrace:%{public}s",  &__dst[0].sa_len,  0x16u);
    }

    goto LABEL_65;
  }

  id v6 = v4;
  int v7 = [v6 type];

  if (v7 != 1)
  {
    __nwlog_obj();
    int v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)&__dst[0].size_t sa_len = 136446210;
    *(void *)&__dst[0].sa_data[2] = "nw_interface_copy_local_address_for_remote_address";
    id v15 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    LOBYTE(v42) = 0;
    if (buf[0] == 17)
    {
      __nwlog_obj();
      os_log_type_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v29 = buf[0];
      if (os_log_type_enabled(v24, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)&__dst[0].size_t sa_len = 136446210;
        *(void *)&__dst[0].sa_data[2] = "nw_interface_copy_local_address_for_remote_address";
        _os_log_impl( &dword_181A5C000,  v24,  v29,  "%{public}s called with null (nw_endpoint_get_type(remote_endpoint) == nw_endpoint_type_address)",  &__dst[0].sa_len,  0xCu);
      }

void sub_182634A24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_interface *nw_interface_create_from_necp(uint64_t a1, unsigned int a2)
{
  uint64_t v79 = *MEMORY[0x1895F89C0];
  if (!a2)
  {
    __nwlog_obj();
    os_log_type_t v58 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_interface_create_from_necp";
    BOOL v36 = (char *)_os_log_send_and_compose_impl();

    v68[0] = 16;
    LOBYTE(v67) = 0;
    if (v68[0] == 17)
    {
      __nwlog_obj();
      BOOL v59 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v60 = v68[0];
      if (os_log_type_enabled(v59, (os_log_type_t)v68[0]))
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_create_from_necp";
        _os_log_impl(&dword_181A5C000, v59, v60, "%{public}s called with null interface_index", buf, 0xCu);
      }
    }

    else if ((_BYTE)v67)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v59 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v62 = v68[0];
      BOOL v63 = os_log_type_enabled(v59, (os_log_type_t)v68[0]);
      if (backtrace_string)
      {
        if (v63)
        {
          *(_DWORD *)__int128 buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_interface_create_from_necp";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v59,  v62,  "%{public}s called with null interface_index, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_69;
      }

      if (v63)
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_create_from_necp";
        _os_log_impl(&dword_181A5C000, v59, v62, "%{public}s called with null interface_index, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v59 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v64 = v68[0];
      if (os_log_type_enabled(v59, (os_log_type_t)v68[0]))
      {
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_create_from_necp";
        _os_log_impl( &dword_181A5C000,  v59,  v64,  "%{public}s called with null interface_index, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_69;
  }

  if (a2 >= 0x7FFFFFFF)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v3 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_interface_create_from_necp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = a2;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 0x7FFFFFFF;
      _os_log_impl( &dword_181A5C000,  v3,  OS_LOG_TYPE_ERROR,  "%{public}s refusing to create an interface with index %u too high (>=%u)",  buf,  0x18u);
    }

    return 0LL;
  }

  unsigned int v67 = a2;
  int v78 = 0;
  __int128 v77 = 0u;
  *(_OWORD *)__n = 0u;
  *(_OWORD *)__int16 v76 = 0u;
  __int128 v73 = 0u;
  __int128 v74 = 0u;
  memset(buf, 0, sizeof(buf));
  if (!necp_client_action())
  {
    if (!*(_DWORD *)&buf[24])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v6 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)os_log_type_t v68 = 136446466;
        BOOL v69 = "nw_interface_create_from_necp";
        __int16 v70 = 1024;
        LODWORD(v71[0]) = a2;
        _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_ERROR,  "%{public}s Copy interface failed to find valid interface for index %u",  v68,  0x12u);
      }

      goto LABEL_10;
    }

    int v7 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_interface);
    os_log_type_t v8 = v7;
    if (v7)
    {
      int v9 = buf[0];
      v7->name[0] = buf[0];
      if (v9)
      {
        int v10 = buf[1];
        v7->name[1] = buf[1];
        if (v10)
        {
          int v11 = buf[2];
          v7->name[2] = buf[2];
          if (v11)
          {
            int v12 = buf[3];
            v7->name[3] = buf[3];
            if (v12)
            {
              int v13 = buf[4];
              v7->name[4] = buf[4];
              if (v13)
              {
                int v14 = buf[5];
                v7->name[5] = buf[5];
                if (v14)
                {
                  int v15 = buf[6];
                  v7->name[6] = buf[6];
                  if (v15)
                  {
                    int v16 = buf[7];
                    v7->name[7] = buf[7];
                    if (v16)
                    {
                      int v17 = buf[8];
                      v7->name[8] = buf[8];
                      if (v17)
                      {
                        int v18 = buf[9];
                        v7->name[9] = buf[9];
                        if (v18)
                        {
                          int v19 = buf[10];
                          v7->name[10] = buf[10];
                          if (v19)
                          {
                            int v20 = buf[11];
                            v7->name[11] = buf[11];
                            if (v20)
                            {
                              int v21 = buf[12];
                              v7->name[12] = buf[12];
                              if (v21)
                              {
                                int v22 = buf[13];
                                v7->name[13] = buf[13];
                                if (v22)
                                {
                                  int v23 = buf[14];
                                  v7->name[14] = buf[14];
                                  if (v23)
                                  {
                                    int v24 = buf[15];
                                    v7->name[15] = buf[15];
                                    if (v24)
                                    {
                                      int v25 = buf[16];
                                      v7->name[16] = buf[16];
                                      if (v25)
                                      {
                                        int v26 = buf[17];
                                        v7->name[17] = buf[17];
                                        if (v26)
                                        {
                                          int v27 = buf[18];
                                          v7->name[18] = buf[18];
                                          if (v27)
                                          {
                                            int v28 = buf[19];
                                            v7->name[19] = buf[19];
                                            if (v28)
                                            {
                                              int v29 = buf[20];
                                              v7->name[20] = buf[20];
                                              if (v29)
                                              {
                                                int v30 = buf[21];
                                                v7->name[21] = buf[21];
                                                if (v30)
                                                {
                                                  int v31 = buf[22];
                                                  v7->name[22] = buf[22];
                                                  if (v31) {
                                                    v7->name[23] = 0;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      v7->index = *(_DWORD *)&buf[24];
      int v32 = v73;
      int v33 = 4;
      int v34 = 2;
      switch((int)v73)
      {
        case 1:
        case 6:
          goto LABEL_74;
        case 2:
          int v34 = 3;
          goto LABEL_78;
        case 3:
        case 4:
          v7->os_log_type_t type = 1;
          unsigned int v35 = v32 - 3;
          goto LABEL_75;
        case 5:
LABEL_78:
          unsigned int v51 = 0;
          v7->os_log_type_t type = v34;
          break;
        default:
          int v33 = 0;
LABEL_74:
          v7->os_log_type_t type = v33;
          unsigned int v35 = v32 - 3;
          if (v35 > 4) {
            unsigned int v51 = 0;
          }
          else {
LABEL_75:
          }
            unsigned int v51 = dword_18272D758[v35];
          break;
      }

      v7->subos_log_type_t type = v51;
      unsigned int v52 = *(_DWORD *)&buf[28];
      v7->delegate_index = DWORD1(v73);
      v7->generation = v52;
      v7->details.mtu = HIDWORD(v73);
      *(void *)&v7->details.tso_max_segment_size_int v4 = *(void *)((char *)&v77 + 4);
      v7->details.hwcsum_flags = HIDWORD(v77);
      *(_WORD *)((char *)&v7->details + 73) = (*(_WORD *)((char *)&v7->details + 73) & 0xFF80 | BYTE8(v73) & 1 | (WORD4(v73) >> 5) & 2 | (WORD4(v73) >> 12) & 4 | (8 * ((WORD4(v73) >> 1) & 7)) & 0xFFBF | (((WORD4(v73) >> 5) & 1) << 6)) ^ 0x10;
      memcpy(&v7->details, &v74, BYTE4(__n[0]));
      v8->details.ipv4_signature.signature_len = BYTE4(__n[0]);
      memcpy(&v8->details.ipv6_signature, (char *)__n + 5, BYTE1(v76[1]));
      v8->details.ipv6_signature.signature_len = BYTE1(v76[1]);
      __int16 v53 = WORD4(v73);
      __int16 v54 = *(_WORD *)((char *)&v8->details + 73) & 0xFF7F | BYTE8(v73) & 0x80;
      *(_WORD *)((char *)&v8->details + 73) = v54;
      if ((v53 & 0x80) != 0) {
        v8->details.ipv4_netmask = HIDWORD(v76[1]);
      }
      __int16 v55 = v54 & 0xFEFF | v53 & 0x100;
      *(_WORD *)((char *)&v8->details + 73) = v55;
      if ((v53 & 0x100) != 0) {
        v8->details.ipv4_broadcast = v77;
      }
      *(_WORD *)((char *)&v8->details + 73) = v55 & 0xC1FF | v53 & 0x3E00;
      v8->details.radio_os_log_type_t type = v78;
      os_log_type_t v56 = v8;
LABEL_92:

      return v8;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v42 = (id)gLogObj;
    *(_DWORD *)os_log_type_t v68 = 136446210;
    BOOL v69 = "nw_interface_create_from_necp";
    int v43 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v65 = 0;
    if (__nwlog_fault(v43, &type, &v65))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v44 = (os_log_s *)(id)gLogObj;
        os_log_type_t v45 = type;
        if (os_log_type_enabled(v44, type))
        {
          *(_DWORD *)os_log_type_t v68 = 136446210;
          BOOL v69 = "nw_interface_create_from_necp";
          _os_log_impl(&dword_181A5C000, v44, v45, "%{public}s nw_interface_create failed", v68, 0xCu);
        }
      }

      else if (v65)
      {
        __int16 v47 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        __int16 v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v48 = type;
        BOOL v49 = os_log_type_enabled(v44, type);
        if (v47)
        {
          if (v49)
          {
            *(_DWORD *)os_log_type_t v68 = 136446466;
            BOOL v69 = "nw_interface_create_from_necp";
            __int16 v70 = 2082;
            v71[0] = v47;
            _os_log_impl( &dword_181A5C000,  v44,  v48,  "%{public}s nw_interface_create failed, dumping backtrace:%{public}s",  v68,  0x16u);
          }

          free(v47);
          goto LABEL_90;
        }

        if (v49)
        {
          *(_DWORD *)os_log_type_t v68 = 136446210;
          BOOL v69 = "nw_interface_create_from_necp";
          _os_log_impl(&dword_181A5C000, v44, v48, "%{public}s nw_interface_create failed, no backtrace", v68, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        __int16 v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v57 = type;
        if (os_log_type_enabled(v44, type))
        {
          *(_DWORD *)os_log_type_t v68 = 136446210;
          BOOL v69 = "nw_interface_create_from_necp";
          _os_log_impl( &dword_181A5C000,  v44,  v57,  "%{public}s nw_interface_create failed, backtrace limit exceeded",  v68,  0xCu);
        }
      }
    }

uint64_t nw_interface_get_loopback_index()
{
  return nw_interface_get_loopback_index::index;
}

void __nw_interface_get_loopback_index_block_invoke()
{
  uint64_t v3 = *MEMORY[0x1895F89C0];
  nw_interface_get_loopback_index::index = if_nametoindex("lo0");
  if (!nw_interface_get_loopback_index::index)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v0 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
    {
      int v1 = 136446210;
      xpc_object_t v2 = "nw_interface_get_loopback_index_block_invoke";
      _os_log_impl( &dword_181A5C000,  v0,  OS_LOG_TYPE_ERROR,  "%{public}s Unable to determine interface index for lo0, using 1",  (uint8_t *)&v1,  0xCu);
    }

    nw_interface_get_loopback_index::index = 1;
  }

const char *nw_interface_radio_type_to_string(int a1)
{
  int v1 = a1 - 1;
  uint64_t result = "802.11b";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "802.11a";
      break;
    case 2:
      uint64_t result = "802.11g";
      break;
    case 3:
      uint64_t result = "802.11n";
      break;
    case 4:
      uint64_t result = "802.11ac";
      break;
    case 5:
      uint64_t result = "802.11ax";
      break;
    case 127:
      uint64_t result = "lte";
      break;
    case 128:
      uint64_t result = "endc_sub6";
      break;
    case 129:
      uint64_t result = "endc_mmw";
      break;
    case 130:
      uint64_t result = "nr_sa_sub6";
      break;
    case 131:
      uint64_t result = "nr_sa_mmw";
      break;
    case 132:
      uint64_t result = "wcdma";
      break;
    case 133:
      uint64_t result = "gsm";
      break;
    case 134:
      uint64_t result = "cdma";
      break;
    case 135:
      uint64_t result = "evdo";
      break;
    default:
      uint64_t result = "";
      break;
  }

  return result;
}

uint64_t nw_interface_radio_type_from_string(const char *a1)
{
  if (!strncasecmp(a1, "802.11b", 8uLL)) {
    return 1LL;
  }
  if (!strncasecmp(a1, "802.11a", 8uLL)) {
    return 2LL;
  }
  if (!strncasecmp(a1, "802.11g", 8uLL)) {
    return 3LL;
  }
  if (!strncasecmp(a1, "802.11n", 8uLL)) {
    return 4LL;
  }
  if (!strncasecmp(a1, "802.11ac", 9uLL)) {
    return 5LL;
  }
  if (!strncasecmp(a1, "802.11ax", 9uLL)) {
    return 6LL;
  }
  if (!strncasecmp(a1, "lte", 4uLL)) {
    return 128LL;
  }
  if (!strncasecmp(a1, "endc_sub6", 0xAuLL)) {
    return 129LL;
  }
  if (!strncasecmp(a1, "endc_mmw", 9uLL)) {
    return 130LL;
  }
  if (!strncasecmp(a1, "nr_sa_sub6", 0xBuLL)) {
    return 131LL;
  }
  if (!strncasecmp(a1, "nr_sa_mmw", 0xAuLL)) {
    return 132LL;
  }
  if (!strncasecmp(a1, "wcdma", 6uLL)) {
    return 133LL;
  }
  if (!strncasecmp(a1, "gsm", 4uLL)) {
    return 134LL;
  }
  if (!strncasecmp(a1, "cdma", 5uLL)) {
    return 135LL;
  }
  if (!strncasecmp(a1, "evdo", 5uLL)) {
    return 136LL;
  }
  return 0LL;
}

NWConcrete_nw_interface_option_details *nw_interface_option_details_create( void *a1, _OWORD *a2, void *a3, char a4, void *a5, int a6)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  id v12 = a1;
  id v13 = a3;
  id v14 = a5;
  if (a2)
  {
    int v15 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_interface_option_details);
    int v16 = v15;
    if (v15)
    {
      objc_storeStrong((id *)&v15->interface, a1);
      *(_OWORD *)v16->nexus_agent = *a2;
      objc_storeStrong((id *)&v16->remote, a3);
      v16->priority = a4;
      objc_storeStrong((id *)&v16->initial_data, a5);
      v16->sockfd = a6;
      int v17 = v16;
LABEL_11:

      goto LABEL_12;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v18 = (id)gLogObj;
    *(_DWORD *)__int128 buf = 136446210;
    os_log_type_t v38 = "nw_interface_option_details_create";
    int v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (__nwlog_fault(v19, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v20 = (os_log_s *)(id)gLogObj;
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          os_log_type_t v38 = "nw_interface_option_details_create";
          _os_log_impl( &dword_181A5C000,  v20,  v21,  "%{public}s [[NW_CONCRETE_CLASS_NAME(interface_option_details) alloc] init] failed",  buf,  0xCu);
        }
      }

      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v20 = (os_log_s *)(id)gLogObj;
        os_log_type_t v24 = type;
        BOOL v25 = os_log_type_enabled(v20, type);
        if (backtrace_string)
        {
          if (v25)
          {
            *(_DWORD *)__int128 buf = 136446466;
            os_log_type_t v38 = "nw_interface_option_details_create";
            __int16 v39 = 2082;
            os_log_type_t v40 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v20,  v24,  "%{public}s [[NW_CONCRETE_CLASS_NAME(interface_option_details) alloc] init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          if (!v19) {
            goto LABEL_11;
          }
          goto LABEL_10;
        }

        if (v25)
        {
          *(_DWORD *)__int128 buf = 136446210;
          os_log_type_t v38 = "nw_interface_option_details_create";
          _os_log_impl( &dword_181A5C000,  v20,  v24,  "%{public}s [[NW_CONCRETE_CLASS_NAME(interface_option_details) alloc] init] failed, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v20 = (os_log_s *)(id)gLogObj;
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)__int128 buf = 136446210;
          os_log_type_t v38 = "nw_interface_option_details_create";
          _os_log_impl( &dword_181A5C000,  v20,  v26,  "%{public}s [[NW_CONCRETE_CLASS_NAME(interface_option_details) alloc] init] failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v19) {
      goto LABEL_11;
    }
LABEL_10:
    free(v19);
    goto LABEL_11;
  }

  __nwlog_obj();
  int v27 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  os_log_type_t v38 = "nw_interface_option_details_create";
  int v28 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v35 = 0;
  if (__nwlog_fault(v28, &type, &v35))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v38 = "nw_interface_option_details_create";
        _os_log_impl(&dword_181A5C000, v29, v30, "%{public}s called with null nexus_agent", buf, 0xCu);
      }
    }

    else if (v35)
    {
      int v31 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v32 = type;
      BOOL v33 = os_log_type_enabled(v29, type);
      if (v31)
      {
        if (v33)
        {
          *(_DWORD *)__int128 buf = 136446466;
          os_log_type_t v38 = "nw_interface_option_details_create";
          __int16 v39 = 2082;
          os_log_type_t v40 = v31;
          _os_log_impl( &dword_181A5C000,  v29,  v32,  "%{public}s called with null nexus_agent, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v31);
        goto LABEL_41;
      }

      if (v33)
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v38 = "nw_interface_option_details_create";
        _os_log_impl(&dword_181A5C000, v29, v32, "%{public}s called with null nexus_agent, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v34 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        os_log_type_t v38 = "nw_interface_option_details_create";
        _os_log_impl( &dword_181A5C000,  v29,  v34,  "%{public}s called with null nexus_agent, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182635FC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_interface_option_details_copy_interface(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  int v1 = a1;
  xpc_object_t v2 = v1;
  if (v1)
  {
    id v3 = v1[1];
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  int v16 = "nw_interface_option_details_copy_interface";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        int v16 = "nw_interface_option_details_copy_interface";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null interface_option_details", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          int v16 = "nw_interface_option_details_copy_interface";
          __int16 v17 = 2082;
          id v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null interface_option_details, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        int v16 = "nw_interface_option_details_copy_interface";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null interface_option_details, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        int v16 = "nw_interface_option_details_copy_interface";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null interface_option_details, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_interface_option_details_set_interface(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    objc_storeStrong(v3 + 1, a2);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  int v16 = "nw_interface_option_details_set_interface";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        int v16 = "nw_interface_option_details_set_interface";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null details", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          int v16 = "nw_interface_option_details_set_interface";
          __int16 v17 = 2082;
          id v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null details, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        int v16 = "nw_interface_option_details_set_interface";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null details, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        int v16 = "nw_interface_option_details_set_interface";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null details, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_interface_option_details_get_nexus_agent(void *a1, _OWORD *a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    int v22 = "nw_interface_option_details_get_nexus_agent";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        int v22 = "nw_interface_option_details_get_nexus_agent";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null interface_option_details", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)__int128 buf = 136446466;
          int v22 = "nw_interface_option_details_get_nexus_agent";
          __int16 v23 = 2082;
          os_log_type_t v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null interface_option_details, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6) {
          goto LABEL_4;
        }
LABEL_39:
        free(v6);
        goto LABEL_4;
      }

      if (v13)
      {
        *(_DWORD *)__int128 buf = 136446210;
        int v22 = "nw_interface_option_details_get_nexus_agent";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null interface_option_details, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        int v22 = "nw_interface_option_details_get_nexus_agent";
        _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s called with null interface_option_details, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void nw_interface_option_details_set_nexus_agent(void *a1, _OWORD *a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__int128 buf = 136446210;
    int v22 = "nw_interface_option_details_set_nexus_agent";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        int v22 = "nw_interface_option_details_set_nexus_agent";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null details", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)__int128 buf = 136446466;
          int v22 = "nw_interface_option_details_set_nexus_agent";
          __int16 v23 = 2082;
          os_log_type_t v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null details, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6) {
          goto LABEL_4;
        }
LABEL_39:
        free(v6);
        goto LABEL_4;
      }

      if (v13)
      {
        *(_DWORD *)__int128 buf = 136446210;
        int v22 = "nw_interface_option_details_set_nexus_agent";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null details, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        int v22 = "nw_interface_option_details_set_nexus_agent";
        _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s called with null details, backtrace limit exceeded",  buf,  0xCu);
      }
    }

id nw_interface_option_details_copy_remote_endpoint(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  int v1 = a1;
  xpc_object_t v2 = v1;
  if (v1)
  {
    id v3 = v1[3];
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  BOOL v16 = "nw_interface_option_details_copy_remote_endpoint";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v16 = "nw_interface_option_details_copy_remote_endpoint";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null interface_option_details", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          BOOL v16 = "nw_interface_option_details_copy_remote_endpoint";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null interface_option_details, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v16 = "nw_interface_option_details_copy_remote_endpoint";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null interface_option_details, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v16 = "nw_interface_option_details_copy_remote_endpoint";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null interface_option_details, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_interface_option_details_get_priority(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (v1)
  {
    char v3 = *((_BYTE *)v1 + 48);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  BOOL v16 = "nw_interface_option_details_get_priority";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v16 = "nw_interface_option_details_get_priority";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null interface_option_details", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          BOOL v16 = "nw_interface_option_details_get_priority";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null interface_option_details, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v16 = "nw_interface_option_details_get_priority";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null interface_option_details, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v16 = "nw_interface_option_details_get_priority";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null interface_option_details, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

id nw_interface_option_details_copy_local_cid(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (v1)
  {
    id v3 = v1[7];
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  BOOL v16 = "nw_interface_option_details_copy_local_cid";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v16 = "nw_interface_option_details_copy_local_cid";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null interface_option_details", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          BOOL v16 = "nw_interface_option_details_copy_local_cid";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null interface_option_details, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v16 = "nw_interface_option_details_copy_local_cid";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null interface_option_details, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v16 = "nw_interface_option_details_copy_local_cid";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null interface_option_details, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_interface_option_details_set_local_cid(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    objc_storeStrong(v3 + 7, a2);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  BOOL v16 = "nw_interface_option_details_set_local_cid";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v16 = "nw_interface_option_details_set_local_cid";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null details", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          BOOL v16 = "nw_interface_option_details_set_local_cid";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null details, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v16 = "nw_interface_option_details_set_local_cid";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null details, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v16 = "nw_interface_option_details_set_local_cid";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null details, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

id nw_interface_option_details_copy_remote_cid(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (v1)
  {
    id v3 = v1[8];
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  BOOL v16 = "nw_interface_option_details_copy_remote_cid";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v16 = "nw_interface_option_details_copy_remote_cid";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null interface_option_details", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          BOOL v16 = "nw_interface_option_details_copy_remote_cid";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null interface_option_details, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v16 = "nw_interface_option_details_copy_remote_cid";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null interface_option_details, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v16 = "nw_interface_option_details_copy_remote_cid";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null interface_option_details, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_interface_option_details_set_remote_cid(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    objc_storeStrong(v3 + 8, a2);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  BOOL v16 = "nw_interface_option_details_set_remote_cid";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v16 = "nw_interface_option_details_set_remote_cid";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null details", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          BOOL v16 = "nw_interface_option_details_set_remote_cid";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null details, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v16 = "nw_interface_option_details_set_remote_cid";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null details, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v16 = "nw_interface_option_details_set_remote_cid";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null details, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

id nw_interface_option_details_copy_initial_data(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (v1)
  {
    id v3 = v1[9];
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  BOOL v16 = "nw_interface_option_details_copy_initial_data";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v16 = "nw_interface_option_details_copy_initial_data";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null interface_option_details", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          BOOL v16 = "nw_interface_option_details_copy_initial_data";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null interface_option_details, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v16 = "nw_interface_option_details_copy_initial_data";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null interface_option_details, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v16 = "nw_interface_option_details_copy_initial_data";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null interface_option_details, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_interface_option_details_get_sockfd(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[20];
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  BOOL v16 = "nw_interface_option_details_get_sockfd";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v16 = "nw_interface_option_details_get_sockfd";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null interface_option_details", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          BOOL v16 = "nw_interface_option_details_get_sockfd";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null interface_option_details, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v16 = "nw_interface_option_details_get_sockfd";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null interface_option_details, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v16 = "nw_interface_option_details_get_sockfd";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null interface_option_details, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

id nw_interface_option_details_copy_evaluator(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t v2 = v1;
  if (v1)
  {
    id v3 = v1[2];
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  BOOL v16 = "nw_interface_option_details_copy_evaluator";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v16 = "nw_interface_option_details_copy_evaluator";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null details", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          BOOL v16 = "nw_interface_option_details_copy_evaluator";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null details, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v16 = "nw_interface_option_details_copy_evaluator";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null details, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v16 = "nw_interface_option_details_copy_evaluator";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null details, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_interface_option_details_set_evaluator(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    objc_storeStrong(v3 + 2, a2);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__int128 buf = 136446210;
  BOOL v16 = "nw_interface_option_details_set_evaluator";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v16 = "nw_interface_option_details_set_evaluator";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null details", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)__int128 buf = 136446466;
          BOOL v16 = "nw_interface_option_details_set_evaluator";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null details, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v16 = "nw_interface_option_details_set_evaluator";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null details, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)__int128 buf = 136446210;
        BOOL v16 = "nw_interface_option_details_set_evaluator";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null details, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_settings_setup_atfork()
{
  return pthread_once(&nw_settings_setup_atfork::pOnce, (void (*)(void))nw_settings_setup_atfork_inner);
}

uint64_t nw_settings_setup_atfork_inner(void)
{
  return pthread_atfork( (void (*)(void))nw_settings_prepare_fork,  nw_settings_parent_has_forked,  nw_settings_child_has_forked);
}

uint64_t nw_settings_prepare_fork(void)
{
  return pthread_mutex_lock(&sSettingsMutex);
}

void nw_settings_parent_has_forked(void)
{
}

void nw_settings_child_has_forked(void)
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  sNWIsBetweenForkAndExec = 1;
  gHasForked = 1;
  gLogLock = 0;
  uint64_t v0 = MEMORY[0x1895F8DA0];
  gLogObuint64_t j = MEMORY[0x1895F8DA0];
  gactivityLogObuint64_t j = MEMORY[0x1895F8DA0];
  gbrowserLogObuint64_t j = MEMORY[0x1895F8DA0];
  gcandidate_managerLogObuint64_t j = MEMORY[0x1895F8DA0];
  gconnectionLogObuint64_t j = MEMORY[0x1895F8DA0];
  gconnection_groupLogObuint64_t j = MEMORY[0x1895F8DA0];
  ghttpLogObuint64_t j = MEMORY[0x1895F8DA0];
  glistenerLogObuint64_t j = MEMORY[0x1895F8DA0];
  gmetricsLogObuint64_t j = MEMORY[0x1895F8DA0];
  gpathLogObuint64_t j = MEMORY[0x1895F8DA0];
  gtcpLogObuint64_t j = MEMORY[0x1895F8DA0];
  gprivacy_proxyLogObuint64_t j = MEMORY[0x1895F8DA0];
  gnetwork_testLogObuint64_t j = MEMORY[0x1895F8DA0];
  gmetricstreamLogObuint64_t j = MEMORY[0x1895F8DA0];
  gurlLogObuint64_t j = MEMORY[0x1895F8DA0];
  if (sNWDispatchAllowedNow == 1)
  {
    sNWDispatchAllowedNow = 0;
    sNWParentAllowedDispatch = 1;
  }

  pthread_mutexattr_init(&v3);
  pthread_mutexattr_settype(&v3, 2);
  pthread_mutex_init(&sSettingsMutex, &v3);
  if (nw_context_copy_implicit_context::onceToken != -1) {
    dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
  }
  id v1 = (id)nw_context_copy_implicit_context::implicit_context;
  BOOL globals_for_path = nw_context_get_globals_for_path(v1);

  nw_path_release_globals(globals_for_path, 1LL);
  cache_lock = 0;
  gMpklHasForked = 1;
  gMpklLogObuint64_t j = v0;
  if (sCachedSettings)
  {
    xpc_release((xpc_object_t)sCachedSettings);
    sCachedSettings = 0LL;
  }

  sCachedHash = 0LL;
}

void sub_182638AB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void networkd_settings_read_from_file(void)
{
  uint64_t v80 = *MEMORY[0x1895F89C0];
  if (sCachedSettings)
  {
    xpc_release((xpc_object_t)sCachedSettings);
    sCachedSettings = 0LL;
  }

  int v0 = open((const char *)nw_file_path_settings, 0);
  if (v0 != -1)
  {
    int v1 = v0;
    memset(&v79, 0, sizeof(v79));
    if (fstat(v0, &v79))
    {
      int v2 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      uint64_t v3 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init(v3);
      *(_DWORD *)__int128 buf = 136446466;
      __int16 v76 = "networkd_settings_read_from_file";
      __int16 v77 = 1024;
      *(_DWORD *)int v78 = v2;
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v73 = 0;
      if (__nwlog_fault(v4, &type, &v73))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v5 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init(v5);
          id v6 = (os_log_s *)gLogObj;
          os_log_type_t v7 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            *(_DWORD *)__int128 buf = 136446466;
            __int16 v76 = "networkd_settings_read_from_file";
            __int16 v77 = 1024;
            *(_DWORD *)int v78 = v2;
            os_log_type_t v8 = "%{public}s networkd settings fstat failed %{darwin.errno}d";
LABEL_40:
            _os_log_impl(&dword_181A5C000, v6, v7, v8, buf, 0x12u);
          }
        }

        else if (v73)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          uint64_t v21 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init(v21);
          id v6 = (os_log_s *)gLogObj;
          os_log_type_t v7 = type;
          BOOL v22 = os_log_type_enabled((os_log_t)gLogObj, type);
          if (backtrace_string)
          {
            if (v22)
            {
              *(_DWORD *)__int128 buf = 136446722;
              __int16 v76 = "networkd_settings_read_from_file";
              __int16 v77 = 1024;
              *(_DWORD *)int v78 = v2;
              *(_WORD *)&v78[4] = 2082;
              *(void *)&v78[6] = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s networkd settings fstat failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
            }

            free(backtrace_string);
            goto LABEL_41;
          }

          if (v22)
          {
            *(_DWORD *)__int128 buf = 136446466;
            __int16 v76 = "networkd_settings_read_from_file";
            __int16 v77 = 1024;
            *(_DWORD *)int v78 = v2;
            os_log_type_t v8 = "%{public}s networkd settings fstat failed %{darwin.errno}d, no backtrace";
            goto LABEL_40;
          }
        }

        else
        {
          uint64_t v29 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init(v29);
          id v6 = (os_log_s *)gLogObj;
          os_log_type_t v7 = type;
          if (os_log_type_enabled((os_log_t)gLogObj, type))
          {
            *(_DWORD *)__int128 buf = 136446466;
            __int16 v76 = "networkd_settings_read_from_file";
            __int16 v77 = 1024;
            *(_DWORD *)int v78 = v2;
            os_log_type_t v8 = "%{public}s networkd settings fstat failed %{darwin.errno}d, backtrace limit exceeded";
            goto LABEL_40;
          }
        }
      }

void networkd_settings_update_from_token(int a1)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  uint64_t state64 = 0LL;
  uint32_t state = notify_get_state(a1, &state64);
  if (state)
  {
    uint32_t v2 = state;
    uint64_t v3 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init(v3);
    *(_DWORD *)__int128 buf = 136446466;
    uint64_t v31 = "networkd_settings_update_from_token";
    __int16 v32 = 1024;
    uint32_t v33 = v2;
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init(v5);
      id v6 = (os_log_s *)gLogObj;
      os_log_type_t v7 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_23;
      }
      *(_DWORD *)__int128 buf = 136446466;
      uint64_t v31 = "networkd_settings_update_from_token";
      __int16 v32 = 1024;
      uint32_t v33 = v2;
      os_log_type_t v8 = "%{public}s notify_get_state(settings) failed: %u";
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v11 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init(v11);
      id v6 = (os_log_s *)gLogObj;
      os_log_type_t v7 = type;
      BOOL v12 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)__int128 buf = 136446722;
          uint64_t v31 = "networkd_settings_update_from_token";
          __int16 v32 = 1024;
          uint32_t v33 = v2;
          __int16 v34 = 2082;
          char v35 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s notify_get_state(settings) failed: %u, dumping backtrace:%{public}s",  buf,  0x1Cu);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (!v12)
      {
LABEL_23:
        if (v4) {
          free(v4);
        }
        return;
      }

      *(_DWORD *)__int128 buf = 136446466;
      uint64_t v31 = "networkd_settings_update_from_token";
      __int16 v32 = 1024;
      uint32_t v33 = v2;
      os_log_type_t v8 = "%{public}s notify_get_state(settings) failed: %u, no backtrace";
    }

    else
    {
      uint64_t v14 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init(v14);
      id v6 = (os_log_s *)gLogObj;
      os_log_type_t v7 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_23;
      }
      *(_DWORD *)__int128 buf = 136446466;
      uint64_t v31 = "networkd_settings_update_from_token";
      __int16 v32 = 1024;
      uint32_t v33 = v2;
      os_log_type_t v8 = "%{public}s notify_get_state(settings) failed: %u, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v6, v7, v8, buf, 0x12u);
    goto LABEL_23;
  }

  pthread_mutex_lock(&sSettingsMutex);
  uint64_t v9 = state64;
  if (state64 == sCachedHash)
  {
    if (state64)
    {
      pthread_mutex_unlock(&sSettingsMutex);
      sCachedHash = state64;
      return;
    }

    goto LABEL_19;
  }

  if ((state64 & 0xFFFFFFFFFFFE0000LL) == (sCachedHash & 0xFFFFFFFFFFFE0000LL))
  {
    char v13 = (void *)sCachedSettings;
LABEL_28:
    xpc_object_t v15 = nw_settings_add_settings_from_bitmask(v13, v9);
    sCachedSettings = (uint64_t)v15;
    goto LABEL_29;
  }

  if ((state64 & 0xFFFFFFFFFFFE0000LL) == 0)
  {
    if (sCachedSettings)
    {
      xpc_release((xpc_object_t)sCachedSettings);
      sCachedSettings = 0LL;
      uint64_t v9 = state64;
    }

    char v13 = 0LL;
    goto LABEL_28;
  }

uint64_t ___ZL45nw_settings_should_be_able_to_use_notify_apisv_block_invoke()
{
  uint64_t result = sandbox_check();
  if ((_DWORD)result) {
    nw_settings_should_be_able_to_use_notify_apis(void)::has_notify_apis = 1;
  }
  return result;
}

xpc_object_t nw_settings_add_settings_from_bitmask(xpc_object_t xdict, uint64_t a2)
{
  v25[30] = *MEMORY[0x1895F89C0];
  uint64_t v3 = (const char *)nw_setting_libnetcore_datapath_debug;
  v25[0] = 8LL;
  v25[1] = nw_setting_libnetcore_datapath_debug;
  v25[2] = 16LL;
  v25[3] = nw_setting_tcpconn_disable_simulate_crash;
  v25[4] = 32LL;
  void v25[5] = nw_setting_boringssl_log_debug;
  v25[6] = 64LL;
  v25[7] = nw_setting_tcp_enable_auto_tfo;
  v25[8] = 128LL;
  v25[9] = nw_setting_disable_dns_xpc;
  v25[10] = 256LL;
  v25[11] = nw_setting_tcpconn_enable_tls_tickets;
  v25[12] = 512LL;
  v25[13] = nw_setting_channel_enable_qos_override;
  v25[14] = 1024LL;
  v25[15] = nw_setting_disable_ddr;
  v25[16] = 2048LL;
  v25[17] = nw_setting_tcpconn_enable_tls_esni;
  v25[18] = 4096LL;
  v25[19] = nw_setting_context_timer_disable_qos_override;
  v25[20] = 0x2000LL;
  v25[21] = nw_setting_tcpconn_enable_tls_experiments;
  v25[22] = 0x4000LL;
  v25[23] = nw_setting_tcpconn_enable_tls_keylog;
  v25[24] = 0x8000LL;
  v25[25] = nw_setting_disable_swift_tls_privacy_proxy;
  v25[26] = 0x10000LL;
  v25[28] = 0LL;
  v25[29] = 0LL;
  v25[27] = nw_setting_disable_l4s_aqm;
  if (!nw_setting_libnetcore_datapath_debug) {
    return xdict;
  }
  unsigned int v5 = 1;
  id v6 = v25;
  while (1)
  {
    if ((*v6 & ~a2) != 0)
    {
      if (xdict) {
        xpc_dictionary_set_value(xdict, v3, 0LL);
      }
      goto LABEL_5;
    }

    if (!xdict)
    {
      xdict = xpc_dictionary_create(0LL, 0LL, 0LL);
      if (!xdict) {
        break;
      }
    }

    xpc_dictionary_set_BOOL(xdict, v3, 1);
LABEL_5:
    id v6 = &v25[2 * v5];
    uint64_t v3 = (const char *)v6[1];
    ++v5;
    if (!v3) {
      return xdict;
    }
  }

  uint64_t v7 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init(v7);
  *(_DWORD *)__int128 buf = 136446210;
  uint64_t v22 = "nw_settings_add_settings_from_bitmask";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  uint64_t v9 = __nwlog_fault(v8, &type, &v19);
  if (!(_DWORD)v9) {
    goto LABEL_24;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v16 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init(v16);
      BOOL v12 = (os_log_s *)gLogObj;
      os_log_type_t v13 = type;
      BOOL v17 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)__int128 buf = 136446466;
          uint64_t v22 = "nw_settings_add_settings_from_bitmask";
          __int16 v23 = 2082;
          os_log_type_t v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v13,  "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }

      if (!v17) {
        goto LABEL_24;
      }
      *(_DWORD *)__int128 buf = 136446210;
      uint64_t v22 = "nw_settings_add_settings_from_bitmask";
      uint64_t v14 = "%{public}s xpc_dictionary_create failed, no backtrace";
    }

    else
    {
      BOOL v12 = (os_log_s *)__nwlog_obj(v9, v10);
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_24;
      }
      *(_DWORD *)__int128 buf = 136446210;
      uint64_t v22 = "nw_settings_add_settings_from_bitmask";
      uint64_t v14 = "%{public}s xpc_dictionary_create failed, backtrace limit exceeded";
    }

uint64_t ___ZL35networkd_settings_update_from_tokeni_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(unsigned __int8 *)(a1 + 40));
}

uint64_t ___ZL35networkd_settings_update_from_tokeni_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(unsigned __int8 *)(a1 + 40));
}

uint64_t ___ZL32networkd_settings_read_from_filev_block_invoke(int a1, char *__s1, void *a3)
{
  return 1LL;
}

void ___ZL36networkd_settings_setup_notify_watchv_block_invoke(int a1, int a2)
{
}

int64_t networkd_settings_get_int64(const char *a1)
{
  if (!sCachedSettings) {
    return 0LL;
  }
  pthread_mutex_lock(&sSettingsMutex);
  if (sCachedSettings) {

  }
    int64_t int64 = xpc_dictionary_get_int64((xpc_object_t)sCachedSettings, a1);
  else {
    int64_t int64 = 0LL;
  }
  pthread_mutex_unlock(&sSettingsMutex);
  return int64;
}

BOOL networkd_settings_get_BOOL_with_default(const char *a1, BOOL a2)
{
  if (sCachedSettings)
  {
    pthread_mutex_lock(&sSettingsMutex);
    uint64_t v4 = (void *)sCachedSettings;
    if (sCachedSettings)
    {
      Class Class = object_getClass((id)sCachedSettings);
      if (a1)
      {
        if (Class == (Class)MEMORY[0x1895F9250])
        {
          xpc_object_t value = xpc_dictionary_get_value(v4, a1);
          if (value)
          {
            uint64_t v7 = value;
            if (object_getClass(value) == (Class)MEMORY[0x1895F9228]) {
              a2 = xpc_BOOL_get_value(v7);
            }
          }
        }
      }
    }

    pthread_mutex_unlock(&sSettingsMutex);
  }

  return a2;
}

BOOL networkd_settings_copy_string(const char *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  networkd_settings_init();
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__int128 buf = 136446210;
    uint64_t v16 = "networkd_settings_copy_string";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_24;
      }
      *(_DWORD *)__int128 buf = 136446210;
      uint64_t v16 = "networkd_settings_copy_string";
      uint64_t v10 = "%{public}s called with null name";
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)__int128 buf = 136446466;
          uint64_t v16 = "networkd_settings_copy_string";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null name, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }

      if (!v12)
      {
LABEL_24:
        if (v7) {
          free(v7);
        }
        return 0LL;
      }

      *(_DWORD *)__int128 buf = 136446210;
      uint64_t v16 = "networkd_settings_copy_string";
      uint64_t v10 = "%{public}s called with null name, no backtrace";
    }

    else
    {
      os_log_type_t v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_24;
      }
      *(_DWORD *)__int128 buf = 136446210;
      uint64_t v16 = "networkd_settings_copy_string";
      uint64_t v10 = "%{public}s called with null name, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
    goto LABEL_24;
  }

  if (!sCachedSettings) {
    return 0LL;
  }
  pthread_mutex_lock(&sSettingsMutex);
  if (!sCachedSettings) {
    goto LABEL_8;
  }
  string = xpc_dictionary_get_string((xpc_object_t)sCachedSettings, a1);
  if (!string) {
    goto LABEL_8;
  }
  uint64_t v3 = strdup(string);
  if (v3)
  {
LABEL_9:
    pthread_mutex_unlock(&sSettingsMutex);
    return (BOOL)v3;
  }

  uint64_t v4 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  *(_DWORD *)__int128 buf = 136446210;
  uint64_t v16 = "strict_strdup";
  unsigned int v5 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_8:
    uint64_t v3 = 0LL;
    goto LABEL_9;
  }

  __break(1u);
  return result;
}

uint64_t nw_is_dispatch_allowed()
{
  if (sNWIsBetweenForkAndExec == 1 && (sNWParentAllowedDispatch & 1) != 0) {
    return 0LL;
  }
  if ((sNWDispatchAllowedNow & 1) != 0) {
    return 1LL;
  }
  if ((_dispatch_is_fork_of_multithreaded_parent() & 1) != 0 || (_dispatch_is_multithreaded() & 1) == 0)
  {
    getpid();
  }

  uint64_t result = 1LL;
  sNWDispatchAllowedNow = 1;
  return result;
}

uint64_t nw_settings_register_networkd_privileged()
{
  if ((gIsHelper & 1) == 0)
  {
    gIsHelper = 1;
    nw_allow_use_of_dispatch_internal();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    return networkd_settings_init();
  }

  return result;
}

BOOL nw_settings_register_boringssl_log_debug_updates(void *a1)
{
  uint32_t v2 = (const void *)sBoringSSLUpdateBlock;
  if ((void *)sBoringSSLUpdateBlock != a1)
  {
    if (a1)
    {
      a1 = _Block_copy(a1);
      uint32_t v2 = (const void *)sBoringSSLUpdateBlock;
    }

    if (v2) {
      _Block_release(v2);
    }
    sBoringSSLUpdateBlock = (uint64_t)a1;
  }

  pthread_mutex_unlock(&sSettingsMutex);
  uint64_t v3 = (const char *)nw_setting_boringssl_log_debug;
  networkd_settings_init();
  if (!sCachedSettings) {
    return 0LL;
  }
  pthread_mutex_lock(&sSettingsMutex);
  uint64_t v4 = (void *)sCachedSettings;
  if (!sCachedSettings) {
    goto LABEL_13;
  }
  Class Class = object_getClass((id)sCachedSettings);
  BOOL v6 = 0LL;
  if (!v3 || Class != (Class)MEMORY[0x1895F9250]) {
    goto LABEL_14;
  }
  xpc_object_t value = xpc_dictionary_get_value(v4, v3);
  if (value && (os_log_type_t v8 = value, object_getClass(value) == (Class)MEMORY[0x1895F9228])) {
    BOOL v6 = xpc_BOOL_get_value(v8);
  }
  else {
LABEL_13:
  }
    BOOL v6 = 0LL;
LABEL_14:
  pthread_mutex_unlock(&sSettingsMutex);
  return v6;
}

BOOL nw_settings_register_quic_log_debug_updates(void *a1)
{
  uint32_t v2 = (const void *)sQUICUpdateBlock;
  if ((void *)sQUICUpdateBlock != a1)
  {
    if (a1)
    {
      a1 = _Block_copy(a1);
      uint32_t v2 = (const void *)sQUICUpdateBlock;
    }

    if (v2) {
      _Block_release(v2);
    }
    sQUICUpdateBlock = (uint64_t)a1;
  }

  pthread_mutex_unlock(&sSettingsMutex);
  uint64_t v3 = (const char *)nw_setting_libnetcore_datapath_debug;
  networkd_settings_init();
  if (!sCachedSettings) {
    return 0LL;
  }
  pthread_mutex_lock(&sSettingsMutex);
  uint64_t v4 = (void *)sCachedSettings;
  if (!sCachedSettings) {
    goto LABEL_13;
  }
  Class Class = object_getClass((id)sCachedSettings);
  BOOL v6 = 0LL;
  if (!v3 || Class != (Class)MEMORY[0x1895F9250]) {
    goto LABEL_14;
  }
  xpc_object_t value = xpc_dictionary_get_value(v4, v3);
  if (value && (os_log_type_t v8 = value, object_getClass(value) == (Class)MEMORY[0x1895F9228])) {
    BOOL v6 = xpc_BOOL_get_value(v8);
  }
  else {
LABEL_13:
  }
    BOOL v6 = 0LL;
LABEL_14:
  pthread_mutex_unlock(&sSettingsMutex);
  return v6;
}

uint64_t ___ZL24__nw_signpost_is_enabledv_block_invoke_88557()
{
  int v0 = (const char *)nw_setting_enable_signposts;
  uint64_t result = networkd_settings_init();
  if (!sCachedSettings)
  {
    BOOL v4 = 0;
    goto LABEL_10;
  }

  pthread_mutex_lock(&sSettingsMutex);
  uint32_t v2 = (void *)sCachedSettings;
  if (!sCachedSettings) {
    goto LABEL_7;
  }
  Class Class = object_getClass((id)sCachedSettings);
  BOOL v4 = 0;
  if (!v0 || Class != (Class)MEMORY[0x1895F9250]) {
    goto LABEL_8;
  }
  xpc_object_t value = xpc_dictionary_get_value(v2, v0);
  if (value && (BOOL v6 = value, object_getClass(value) == (Class)MEMORY[0x1895F9228])) {
    BOOL v4 = xpc_BOOL_get_value(v6);
  }
  else {
LABEL_7:
  }
    BOOL v4 = 0;
LABEL_8:
  uint64_t result = pthread_mutex_unlock(&sSettingsMutex);
LABEL_10:
  _nw_signposts_enabled = v4;
  return result;
}

BOOL nw_settings_get_ddr_enabled()
{
  int v0 = (const char *)nw_setting_disable_ddr;
  networkd_settings_init();
  if (!sCachedSettings)
  {
    BOOL v3 = 0;
    return !v3;
  }

  pthread_mutex_lock(&sSettingsMutex);
  int v1 = (void *)sCachedSettings;
  if (!sCachedSettings) {
    goto LABEL_7;
  }
  Class Class = object_getClass((id)sCachedSettings);
  BOOL v3 = 0;
  if (!v0 || Class != (Class)MEMORY[0x1895F9250]) {
    goto LABEL_8;
  }
  xpc_object_t value = xpc_dictionary_get_value(v1, v0);
  if (value && (unsigned int v5 = value, object_getClass(value) == (Class)MEMORY[0x1895F9228])) {
    BOOL v3 = xpc_BOOL_get_value(v5);
  }
  else {
LABEL_7:
  }
    BOOL v3 = 0;
LABEL_8:
  pthread_mutex_unlock(&sSettingsMutex);
  return !v3;
}

uint64_t nw_settings_get_flow_report_numerator()
{
  int v0 = (const char *)nw_setting_flow_report_numerator;
  networkd_settings_init();
  if (!sCachedSettings) {
    return 1LL;
  }
  pthread_mutex_lock(&sSettingsMutex);
  int v1 = (void *)sCachedSettings;
  if (!sCachedSettings) {
    goto LABEL_7;
  }
  Class Class = object_getClass((id)sCachedSettings);
  int64_t v3 = 1LL;
  if (!v0 || Class != (Class)MEMORY[0x1895F9250]) {
    goto LABEL_8;
  }
  xpc_object_t value = xpc_dictionary_get_value(v1, v0);
  if (value && (unsigned int v5 = value, object_getClass(value) == (Class)MEMORY[0x1895F9280])) {
    int64_t v3 = xpc_int64_get_value(v5);
  }
  else {
LABEL_7:
  }
    int64_t v3 = 1LL;
LABEL_8:
  pthread_mutex_unlock(&sSettingsMutex);
  return v3;
}

int64_t nw_settings_get_flow_report_denominator()
{
  int64_t v0 = 500000LL;
  int v1 = (const char *)nw_setting_flow_report_denominator;
  networkd_settings_init();
  if (sCachedSettings)
  {
    pthread_mutex_lock(&sSettingsMutex);
    uint32_t v2 = (void *)sCachedSettings;
    if (sCachedSettings)
    {
      Class Class = object_getClass((id)sCachedSettings);
      if (v1)
      {
        if (Class == (Class)MEMORY[0x1895F9250])
        {
          xpc_object_t value = xpc_dictionary_get_value(v2, v1);
          if (value)
          {
            unsigned int v5 = value;
            if (object_getClass(value) == (Class)MEMORY[0x1895F9280]) {
              int64_t v0 = xpc_int64_get_value(v5);
            }
          }
        }
      }
    }

    pthread_mutex_unlock(&sSettingsMutex);
  }

  return v0;
}

BOOL nw_settings_networkscore_metrics_enabled()
{
  int64_t v0 = (const char *)nw_setting_enable_networkscore_metrics;
  networkd_settings_init();
  if (!sCachedSettings) {
    return 0LL;
  }
  pthread_mutex_lock(&sSettingsMutex);
  int v1 = (void *)sCachedSettings;
  if (!sCachedSettings) {
    goto LABEL_7;
  }
  Class Class = object_getClass((id)sCachedSettings);
  BOOL v3 = 0LL;
  if (!v0 || Class != (Class)MEMORY[0x1895F9250]) {
    goto LABEL_8;
  }
  xpc_object_t value = xpc_dictionary_get_value(v1, v0);
  if (value && (unsigned int v5 = value, object_getClass(value) == (Class)MEMORY[0x1895F9228])) {
    BOOL v3 = xpc_BOOL_get_value(v5);
  }
  else {
LABEL_7:
  }
    BOOL v3 = 0LL;
LABEL_8:
  pthread_mutex_unlock(&sSettingsMutex);
  return v3;
}

void nw_settings_set_networkscore_sampling_rate_denominator(int64_t value)
{
  int v1 = (const char *)nw_setting_networkscore_sampling_rate_denominator;
  id v2 = xpc_int64_create(value);
  networkd_privileged_set_settings(v1, v2, 0LL);
}

void sub_18263AD4C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

int64_t nw_settings_get_networkscore_sampling_rate_denominator()
{
  int64_t v0 = networkd_settings_copy_value_of_type((const char *)nw_setting_networkscore_sampling_rate_denominator, 0LL);
  int v1 = v0;
  if (v0 && object_getClass(v0) == (Class)MEMORY[0x1895F9280]) {
    int64_t value = xpc_int64_get_value(v1);
  }
  else {
    int64_t value = 0LL;
  }

  return value;
}

void sub_18263ADC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_settings_get_unified_http_enabled()
{
  int64_t v0 = (const char *)nw_setting_enable_unified_http;
  networkd_settings_init();
  if (!sCachedSettings) {
    return 1LL;
  }
  pthread_mutex_lock(&sSettingsMutex);
  int v1 = (void *)sCachedSettings;
  if (!sCachedSettings) {
    goto LABEL_7;
  }
  Class Class = object_getClass((id)sCachedSettings);
  BOOL v3 = 1LL;
  if (!v0) {
    goto LABEL_8;
  }
  if (Class != (Class)MEMORY[0x1895F9250]) {
    goto LABEL_8;
  }
  xpc_object_t value = xpc_dictionary_get_value(v1, v0);
  if (!value) {
    goto LABEL_8;
  }
  unsigned int v5 = value;
  if (object_getClass(value) == (Class)MEMORY[0x1895F9228]) {
    BOOL v3 = xpc_BOOL_get_value(v5);
  }
  else {
LABEL_7:
  }
    BOOL v3 = 1LL;
LABEL_8:
  pthread_mutex_unlock(&sSettingsMutex);
  return v3;
}

void __cxx_global_var_init()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_86()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_87()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_88()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_239()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_240()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_241()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_318()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_319()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_320()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_491()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_492()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_493()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_919()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_920()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_921()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_1142()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_1143()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_1144()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_1957()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_1958()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_1959()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_2633()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_2634()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_2635()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_3141()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_3142()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_3143()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_3586()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_3587()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_3588()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_3780()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_3781()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_3782()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_4266()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_4267()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_4268()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_5542()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_5543()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_5544()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_6483()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_6484()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_6485()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_7148()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_7149()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_7150()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_7598()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_7599()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_7600()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_8139()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_8140()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_8141()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_8365()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_8366()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_8367()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_10707()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_10708()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_10709()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_10849()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_10850()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_10851()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_11091()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_11092()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_11093()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_11378()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_11379()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_11380()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_13787()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_13788()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_13789()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_14368()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_14369()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_14370()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_14510()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_14511()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_14512()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_14774()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_14775()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_14776()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_15063()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_15064()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_15065()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_15650()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_15651()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_15652()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_15910()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_15911()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_15912()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_16254()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_16255()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_16256()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_16388()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_16389()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_16390()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_17271()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_17272()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_17273()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_18099()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_18100()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_18101()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_18976()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_18977()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_18978()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_22195()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_22196()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_22197()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_22848()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_22849()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_22850()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_22927()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_22928()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_22929()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_23129()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_23130()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_23131()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_24183()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_24184()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_24185()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_25681()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_25682()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_25683()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_25758()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_25759()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_25760()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_26624()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_26625()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_26626()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_26849()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_26850()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_26851()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_26991()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_26992()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_26993()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_28164()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_28165()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_28166()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_28429()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_28430()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_28431()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_29303()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_29304()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_29305()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_30270()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_30271()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_30272()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_30609()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_30610()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_30611()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_31440()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_31441()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_31442()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_31633()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_31634()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_31635()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_32791()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_32792()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_32793()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_33075()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_33076()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_33077()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_33326()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_33327()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_33328()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_33469()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_33470()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_33471()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_34940()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_34941()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_34942()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_35359()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_35360()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_35361()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_36719()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_36720()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_36721()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_36912()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_36913()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_36914()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_38515()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_38516()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_38517()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_39624()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_39625()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_39626()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_41146()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_41147()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_41148()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_41572()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_41573()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_41574()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_41650()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_41651()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_41652()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_41914()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_41915()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_41916()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_43711()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_43712()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_43713()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_44235()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_44236()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_44237()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_44407()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_44408()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_44409()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_46240()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_46241()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_46242()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_47149()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_47150()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_47151()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_48556()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_48557()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_48558()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_48909()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_48910()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_48911()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_50148()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_50149()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_50150()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_50443()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_50444()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_50445()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_51710()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_51711()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_51712()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_51847()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_51848()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_51849()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_52218()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_52219()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_52220()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_52945()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_52946()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_52947()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_54218()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_54219()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_54220()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_55093()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_55094()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_55095()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_56555()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_56556()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_56557()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_57071()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_57072()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_57073()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_57400()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_57401()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_57402()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_58399()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_58400()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_58401()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_59683()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_59684()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_59685()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_60017()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_60018()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_60019()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_60054()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_60055()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_60056()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_60240()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_60241()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_60242()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_62315()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_62316()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_62317()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_62436()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_62437()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_62438()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_62797()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_62798()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_62799()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_62949()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_62950()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_62951()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_63806()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_63807()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_63808()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_63929()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_63930()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_63931()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_65412()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_65413()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_65414()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_66194()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_66195()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_66196()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_67057()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_67058()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_67059()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_67715()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_67716()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_67717()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_70613()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_70614()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_70615()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_70758()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_70759()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_70760()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_71312()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_71313()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_71314()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_75975()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_75976()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_75977()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_3()
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  {
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }

      nw_string::_class(void)::instance = (uint64_t)"OS_nw_string";
      *(void *)algn_18C45F558 = 12LL;
      xmmword_18C45F560 = 0u;
      unk_18C45F570 = 0u;
      xmmword_18C45F580 = 0u;
      xmmword_18C45F5A0 = 0u;
      *(_OWORD *)&qword_18C45F5B0 = 0u;
      qword_18C45F5C0 = (uint64_t)&nw::object::_class(void)::instance;
      unk_18C45F5C8 = 4096LL;
      qword_18C45F5D0 = 0LL;
      qword_18C45F5D8 = 0LL;
      qword_18C45F5E0 = (uint64_t)&qword_18C45F5E0;
      qword_18C45F5E8 = (uint64_t)&qword_18C45F5E0;
      qword_18C45F5F0 = 0LL;
      dword_18C45F5F8 = 0;
      xmmword_18C45F590 = 0u;
      nw::object::class_def::setup(&nw::object::_class(void)::instance, (int64x2_t *)&xmmword_18C45F590);
    }

    if ((_BYTE)qword_18C45F470)
    {
      if (nw::object::__destroy_def_instance < (unint64_t)qword_18C45F5B8)
      {
        uint64_t v2 = (void (**)(nw_string *))(*(void *)(*((void *)&xmmword_18C45F590 + 1)
                                                           + (((unint64_t)(qword_18C45F5B0
                                                                                + nw::object::__destroy_def_instance) >> 5) & 0x7FFFFFFFFFFFFF8LL))
                                               + 16LL
                                               * (qword_18C45F5B0 + nw::object::__destroy_def_instance));
        *uint64_t v2 = nw_string::_destroy;
        v2[1] = 0LL;
LABEL_7:
        return;
      }

      __nwlog_obj();
      *(_DWORD *)__int128 buf = 136446210;
      xpc_object_t v15 = "register_override_method_def";
      BOOL v3 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v12 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v4 = (os_log_s *)__nwlog_obj();
        os_log_type_t v5 = type;
        if (!os_log_type_enabled(v4, type)) {
          goto LABEL_37;
        }
        *(_DWORD *)__int128 buf = 136446210;
        xpc_object_t v15 = "register_override_method_def";
        BOOL v6 = "%{public}s called with null (def.slot().value() < m_method_table.size())";
        goto LABEL_36;
      }

      if (!v12)
      {
        BOOL v4 = (os_log_s *)__nwlog_obj();
        os_log_type_t v5 = type;
        if (!os_log_type_enabled(v4, type)) {
          goto LABEL_37;
        }
        *(_DWORD *)__int128 buf = 136446210;
        xpc_object_t v15 = "register_override_method_def";
        BOOL v6 = "%{public}s called with null (def.slot().value() < m_method_table.size()), backtrace limit exceeded";
        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v10 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)__int128 buf = 136446466;
          xpc_object_t v15 = "register_override_method_def";
          __int16 v16 = 2082;
          __int16 v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null (def.slot().value() < m_method_table.size()), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v3) {
          goto LABEL_7;
        }
        goto LABEL_38;
      }

      if (v10)
      {
        *(_DWORD *)__int128 buf = 136446210;
        xpc_object_t v15 = "register_override_method_def";
        BOOL v6 = "%{public}s called with null (def.slot().value() < m_method_table.size()), no backtrace";
LABEL_36:
        _os_log_impl(&dword_181A5C000, v4, v5, v6, buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      *(_DWORD *)__int128 buf = 136446210;
      xpc_object_t v15 = "register_override_method_def";
      BOOL v3 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v12 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v4 = (os_log_s *)__nwlog_obj();
        os_log_type_t v5 = type;
        if (!os_log_type_enabled(v4, type)) {
          goto LABEL_37;
        }
        *(_DWORD *)__int128 buf = 136446210;
        xpc_object_t v15 = "register_override_method_def";
        BOOL v6 = "%{public}s called with null (def.slot())";
        goto LABEL_36;
      }

      if (!v12)
      {
        BOOL v4 = (os_log_s *)__nwlog_obj();
        os_log_type_t v5 = type;
        if (!os_log_type_enabled(v4, type)) {
          goto LABEL_37;
        }
        *(_DWORD *)__int128 buf = 136446210;
        xpc_object_t v15 = "register_override_method_def";
        BOOL v6 = "%{public}s called with null (def.slot()), backtrace limit exceeded";
        goto LABEL_36;
      }

      uint64_t v7 = (char *)__nw_create_backtrace_string();
      BOOL v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (!v7)
      {
        if (!v8) {
          goto LABEL_37;
        }
        *(_DWORD *)__int128 buf = 136446210;
        xpc_object_t v15 = "register_override_method_def";
        BOOL v6 = "%{public}s called with null (def.slot()), no backtrace";
        goto LABEL_36;
      }

      if (v8)
      {
        *(_DWORD *)__int128 buf = 136446466;
        xpc_object_t v15 = "register_override_method_def";
        __int16 v16 = 2082;
        __int16 v17 = v7;
        _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null (def.slot()), dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v7);
    }

void __cxx_global_var_init_76160()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_76161()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_76162()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_77165()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_77166()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_77167()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_77750()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_77751()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_77752()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_78189()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_78190()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_78191()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_79167()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_79168()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_79169()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_80778()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_80779()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_80780()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_81630()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_81631()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_81632()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_83821()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_83822()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_83823()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_83885()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_83886()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_83887()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_84564()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_84565()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_84566()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_84948()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_84949()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_84950()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_85331()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_85332()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_85333()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_85441()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_85442()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_85443()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_86657()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_86658()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_86659()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_87533()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_87534()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_87535()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_87821()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_87822()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_87823()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

void __cxx_global_var_init_87900()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F480,  (uint64_t)nw::object::_description,  0LL);
    qword_18C45F480 = v2;
  }

void __cxx_global_var_init_1_87901()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F498,  (uint64_t)nw::object::_redacted_description,  0LL);
    qword_18C45F498 = v2;
  }

void __cxx_global_var_init_2_87902()
{
  {
    if ((v1 & 1) == 0)
    {
      {
        nw::object::_class(void)::instance = (uint64_t)"object";
        *(void *)algn_18C45F4A8 = 6LL;
        xmmword_18C45F4B0 = 0u;
        unk_18C45F4C0 = 0u;
        xmmword_18C45F4D0 = 0u;
        *(_OWORD *)&qword_18C45F4E0 = 0u;
        *(__int128 *)((char *)&xmmword_18C45F4E8 + 8) = 0u;
        *(_OWORD *)&qword_18C45F500 = 0u;
        xmmword_18C45F510 = 0u;
        unk_18C45F520 = 0u;
        qword_18C45F530 = (uint64_t)&qword_18C45F530;
        unk_18C45F538 = &qword_18C45F530;
        qword_18C45F540 = 0LL;
        dword_18C45F548 = 0;
      }
    }

    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def( qword_18C45F470,  (uint64_t)nw::object::_destroy,  0LL);
    qword_18C45F470 = v2;
  }

uint64_t sub_18264E3B8()
{
  return MEMORY[0x189606000]();
}

uint64_t sub_18264E3C4()
{
  return MEMORY[0x189606010]();
}

uint64_t sub_18264E3D0()
{
  return MEMORY[0x189606018]();
}

uint64_t sub_18264E3DC()
{
  return MEMORY[0x189606028]();
}

uint64_t sub_18264E3E8()
{
  return MEMORY[0x1896060A8]();
}

uint64_t sub_18264E3F4()
{
  return MEMORY[0x1896060B0]();
}

uint64_t sub_18264E400()
{
  return MEMORY[0x1896060C0]();
}

uint64_t sub_18264E40C()
{
  return MEMORY[0x1896060D0]();
}

uint64_t sub_18264E418()
{
  return MEMORY[0x1896060D8]();
}

uint64_t sub_18264E424()
{
  return MEMORY[0x1896060E0]();
}

uint64_t sub_18264E430()
{
  return MEMORY[0x1896060E8]();
}

uint64_t sub_18264E43C()
{
  return MEMORY[0x1896061C0]();
}

uint64_t sub_18264E448()
{
  return MEMORY[0x1896061D0]();
}

uint64_t sub_18264E454()
{
  return MEMORY[0x1896061D8]();
}

uint64_t sub_18264E460()
{
  return MEMORY[0x1896061E0]();
}

uint64_t sub_18264E46C()
{
  return MEMORY[0x1896061F0]();
}

uint64_t sub_18264E478()
{
  return MEMORY[0x189606200]();
}

uint64_t sub_18264E484()
{
  return MEMORY[0x189606208]();
}

uint64_t sub_18264E490()
{
  return MEMORY[0x189606218]();
}

uint64_t sub_18264E49C()
{
  return MEMORY[0x189606230]();
}

uint64_t sub_18264E4A8()
{
  return MEMORY[0x189606240]();
}

uint64_t sub_18264E4B4()
{
  return MEMORY[0x189606248]();
}

uint64_t sub_18264E4C0()
{
  return MEMORY[0x189606260]();
}

uint64_t sub_18264E4CC()
{
  return MEMORY[0x189606318]();
}

uint64_t sub_18264E4D8()
{
  return MEMORY[0x189606928]();
}

uint64_t sub_18264E4E4()
{
  return MEMORY[0x189606940]();
}

uint64_t sub_18264E4F0()
{
  return MEMORY[0x189606948]();
}

uint64_t sub_18264E4FC()
{
  return MEMORY[0x189606988]();
}

uint64_t sub_18264E508()
{
  return MEMORY[0x1896069A0]();
}

uint64_t sub_18264E514()
{
  return MEMORY[0x1896069E0]();
}

uint64_t sub_18264E520()
{
  return MEMORY[0x1896069E8]();
}

uint64_t sub_18264E52C()
{
  return MEMORY[0x189606A20]();
}

uint64_t sub_18264E538()
{
  return MEMORY[0x189606A48]();
}

uint64_t sub_18264E544()
{
  return MEMORY[0x189606A60]();
}

uint64_t sub_18264E550()
{
  return MEMORY[0x189606A68]();
}

uint64_t sub_18264E55C()
{
  return MEMORY[0x189606A80]();
}

uint64_t sub_18264E568()
{
  return MEMORY[0x189606A90]();
}

uint64_t sub_18264E574()
{
  return MEMORY[0x189606AF8]();
}

uint64_t sub_18264E580()
{
  return MEMORY[0x189606B20]();
}

uint64_t sub_18264E58C()
{
  return MEMORY[0x189606B48]();
}

uint64_t sub_18264E598()
{
  return MEMORY[0x189606B80]();
}

uint64_t sub_18264E5A4()
{
  return MEMORY[0x189606B90]();
}

uint64_t sub_18264E5B0()
{
  return MEMORY[0x189606BA8]();
}

uint64_t sub_18264E5BC()
{
  return MEMORY[0x189606BD0]();
}

uint64_t sub_18264E5C8()
{
  return MEMORY[0x189606BE8]();
}

uint64_t sub_18264E5D4()
{
  return MEMORY[0x189606BF0]();
}

uint64_t sub_18264E5E0()
{
  return MEMORY[0x189606C50]();
}

uint64_t sub_18264E5EC()
{
  return MEMORY[0x189606C58]();
}

uint64_t sub_18264E5F8()
{
  return MEMORY[0x189606CA0]();
}

uint64_t sub_18264E604()
{
  return MEMORY[0x189606CA8]();
}

uint64_t sub_18264E610()
{
  return MEMORY[0x189606CF8]();
}

uint64_t sub_18264E61C()
{
  return MEMORY[0x189606D08]();
}

uint64_t sub_18264E628()
{
  return MEMORY[0x189606DB8]();
}

uint64_t sub_18264E634()
{
  return MEMORY[0x189606DC0]();
}

uint64_t sub_18264E640()
{
  return MEMORY[0x189606EB8]();
}

uint64_t sub_18264E64C()
{
  return MEMORY[0x189606EC8]();
}

uint64_t sub_18264E658()
{
  return MEMORY[0x189606EE8]();
}

uint64_t sub_18264E664()
{
  return MEMORY[0x189606F00]();
}

uint64_t sub_18264E670()
{
  return MEMORY[0x189606F08]();
}

uint64_t sub_18264E67C()
{
  return MEMORY[0x189606F10]();
}

uint64_t sub_18264E688()
{
  return MEMORY[0x189606F20]();
}

uint64_t sub_18264E694()
{
  return MEMORY[0x189606F80]();
}

uint64_t sub_18264E6A0()
{
  return MEMORY[0x18961BA60]();
}

uint64_t sub_18264E6AC()
{
  return MEMORY[0x18961BA68]();
}

uint64_t sub_18264E6B8()
{
  return MEMORY[0x18961BA80]();
}

uint64_t sub_18264E6C4()
{
  return MEMORY[0x18961BA88]();
}

uint64_t sub_18264E6D0()
{
  return MEMORY[0x18961BA90]();
}

uint64_t sub_18264E6DC()
{
  return MEMORY[0x18961BAA0]();
}

uint64_t sub_18264E6E8()
{
  return MEMORY[0x18961BAA8]();
}

uint64_t sub_18264E6F4()
{
  return MEMORY[0x18961BAB0]();
}

uint64_t sub_18264E700()
{
  return MEMORY[0x1896100E0]();
}

uint64_t sub_18264E70C()
{
  return MEMORY[0x1896100F8]();
}

uint64_t sub_18264E718()
{
  return MEMORY[0x189610100]();
}

uint64_t sub_18264E724()
{
  return MEMORY[0x189610130]();
}

uint64_t sub_18264E730()
{
  return MEMORY[0x189610140]();
}

uint64_t sub_18264E73C()
{
  return MEMORY[0x189610150]();
}

uint64_t sub_18264E748()
{
  return MEMORY[0x189610168]();
}

uint64_t sub_18264E754()
{
  return MEMORY[0x189610170]();
}

uint64_t sub_18264E760()
{
  return MEMORY[0x189610180]();
}

uint64_t sub_18264E76C()
{
  return MEMORY[0x189610198]();
}

uint64_t sub_18264E778()
{
  return MEMORY[0x1896101A8]();
}

uint64_t sub_18264E784()
{
  return MEMORY[0x1896101B8]();
}

uint64_t sub_18264E790()
{
  return MEMORY[0x1896101C8]();
}

uint64_t sub_18264E79C()
{
  return MEMORY[0x1896101D0]();
}

uint64_t sub_18264E7A8()
{
  return MEMORY[0x1896101D8]();
}

uint64_t sub_18264E7B4()
{
  return MEMORY[0x1896101F0]();
}

uint64_t sub_18264E7C0()
{
  return MEMORY[0x1896101F8]();
}

uint64_t sub_18264E7CC()
{
  return MEMORY[0x189610208]();
}

uint64_t sub_18264E7D8()
{
  return MEMORY[0x189610220]();
}

uint64_t sub_18264E7E4()
{
  return MEMORY[0x189610230]();
}

uint64_t sub_18264E7F0()
{
  return MEMORY[0x189610238]();
}

uint64_t sub_18264E7FC()
{
  return MEMORY[0x189610248]();
}

uint64_t sub_18264E808()
{
  return MEMORY[0x189610270]();
}

uint64_t sub_18264E814()
{
  return MEMORY[0x189610278]();
}

uint64_t sub_18264E820()
{
  return MEMORY[0x189610280]();
}

uint64_t sub_18264E82C()
{
  return MEMORY[0x189610290]();
}

uint64_t sub_18264E838()
{
  return MEMORY[0x189610298]();
}

uint64_t sub_18264E844()
{
  return MEMORY[0x1896102A0]();
}

uint64_t sub_18264E850()
{
  return MEMORY[0x1896102B0]();
}

uint64_t sub_18264E85C()
{
  return MEMORY[0x1896102B8]();
}

uint64_t sub_18264E868()
{
  return MEMORY[0x1896102E0]();
}

uint64_t sub_18264E874()
{
  return MEMORY[0x189610300]();
}

uint64_t sub_18264E880()
{
  return MEMORY[0x189610318]();
}

uint64_t sub_18264E88C()
{
  return MEMORY[0x18961D158]();
}

uint64_t sub_18264E898()
{
  return MEMORY[0x18961D160]();
}

uint64_t sub_18264E8A4()
{
  return MEMORY[0x18961D168]();
}

uint64_t sub_18264E8B0()
{
  return MEMORY[0x18961D170]();
}

uint64_t sub_18264E8BC()
{
  return MEMORY[0x18961D178]();
}

uint64_t sub_18264E8C8()
{
  return MEMORY[0x18961D180]();
}

uint64_t sub_18264E8D4()
{
  return MEMORY[0x18961D190]();
}

uint64_t sub_18264E8E0()
{
  return MEMORY[0x18961D1A0]();
}

uint64_t sub_18264E8EC()
{
  return MEMORY[0x18961D1B0]();
}

uint64_t sub_18264E8F8()
{
  return MEMORY[0x18961D1B8]();
}

uint64_t sub_18264E904()
{
  return MEMORY[0x18961D1C0]();
}

uint64_t sub_18264E910()
{
  return MEMORY[0x18961D1D0]();
}

uint64_t sub_18264E91C()
{
  return MEMORY[0x18961D1D8]();
}

uint64_t sub_18264E928()
{
  return MEMORY[0x18961D1E0]();
}

uint64_t sub_18264E934()
{
  return MEMORY[0x18961D1F0]();
}

uint64_t sub_18264E940()
{
  return MEMORY[0x18961D200]();
}

uint64_t sub_18264E94C()
{
  return MEMORY[0x18961D0F0]();
}

uint64_t sub_18264E958()
{
  return MEMORY[0x18961D0F8]();
}

uint64_t sub_18264E964()
{
  return MEMORY[0x18961B6A0]();
}

uint64_t sub_18264E970()
{
  return MEMORY[0x18961B6E8]();
}

uint64_t sub_18264E97C()
{
  return MEMORY[0x18961B708]();
}

uint64_t sub_18264E988()
{
  return MEMORY[0x18961B720]();
}

uint64_t sub_18264E994()
{
  return MEMORY[0x18961B728]();
}

uint64_t sub_18264E9A0()
{
  return MEMORY[0x18961B740]();
}

uint64_t sub_18264E9AC()
{
  return MEMORY[0x189617790]();
}

uint64_t sub_18264E9B8()
{
  return MEMORY[0x18961BC90]();
}

uint64_t sub_18264E9C4()
{
  return MEMORY[0x189617818]();
}

uint64_t sub_18264E9D0()
{
  return MEMORY[0x189617828]();
}

uint64_t sub_18264E9DC()
{
  return MEMORY[0x1896179F8]();
}

uint64_t sub_18264E9E8()
{
  return MEMORY[0x189617A00]();
}

uint64_t sub_18264E9F4()
{
  return MEMORY[0x189617B30]();
}

uint64_t sub_18264EA00()
{
  return MEMORY[0x189617B50]();
}

uint64_t sub_18264EA0C()
{
  return MEMORY[0x189617B80]();
}

uint64_t sub_18264EA18()
{
  return MEMORY[0x189617B88]();
}

uint64_t sub_18264EA24()
{
  return MEMORY[0x189617C20]();
}

uint64_t sub_18264EA30()
{
  return MEMORY[0x189617C30]();
}

uint64_t sub_18264EA3C()
{
  return MEMORY[0x1896070D8]();
}

uint64_t sub_18264EA48()
{
  return MEMORY[0x189607100]();
}

uint64_t sub_18264EA54()
{
  return MEMORY[0x189607118]();
}

uint64_t sub_18264EA60()
{
  return MEMORY[0x189607120]();
}

uint64_t sub_18264EA6C()
{
  return MEMORY[0x189607128]();
}

uint64_t sub_18264EA78()
{
  return MEMORY[0x189607138]();
}

uint64_t sub_18264EA84()
{
  return MEMORY[0x189607150]();
}

uint64_t sub_18264EA90()
{
  return MEMORY[0x189607168]();
}

uint64_t sub_18264EA9C()
{
  return MEMORY[0x189607178]();
}

uint64_t sub_18264EAA8()
{
  return MEMORY[0x189617C90]();
}

uint64_t sub_18264EAB4()
{
  return MEMORY[0x189617C98]();
}

uint64_t sub_18264EAC0()
{
  return MEMORY[0x189617CA0]();
}

uint64_t sub_18264EACC()
{
  return MEMORY[0x189617CB0]();
}

uint64_t sub_18264EAD8()
{
  return MEMORY[0x189617CE0]();
}

uint64_t sub_18264EAE4()
{
  return MEMORY[0x189617CF0]();
}

uint64_t sub_18264EAF0()
{
  return MEMORY[0x189617CF8]();
}

uint64_t sub_18264EAFC()
{
  return MEMORY[0x189617D20]();
}

uint64_t sub_18264EB08()
{
  return MEMORY[0x189617D28]();
}

uint64_t sub_18264EB14()
{
  return MEMORY[0x189617D38]();
}

uint64_t sub_18264EB20()
{
  return MEMORY[0x189617D78]();
}

uint64_t sub_18264EB2C()
{
  return MEMORY[0x189617D80]();
}

uint64_t sub_18264EB38()
{
  return MEMORY[0x189617DA8]();
}

uint64_t sub_18264EB44()
{
  return MEMORY[0x189617DD8]();
}

uint64_t sub_18264EB50()
{
  return MEMORY[0x189617E20]();
}

uint64_t sub_18264EB5C()
{
  return MEMORY[0x189617E28]();
}

uint64_t sub_18264EB68()
{
  return MEMORY[0x189617E38]();
}

uint64_t sub_18264EB74()
{
  return MEMORY[0x189617E70]();
}

uint64_t sub_18264EB80()
{
  return MEMORY[0x189617E90]();
}

uint64_t sub_18264EB8C()
{
  return MEMORY[0x189617EB0]();
}

uint64_t sub_18264EB98()
{
  return MEMORY[0x189617EB8]();
}

uint64_t sub_18264EBA4()
{
  return MEMORY[0x189617EC0]();
}

uint64_t sub_18264EBB0()
{
  return MEMORY[0x189617ED0]();
}

uint64_t sub_18264EBBC()
{
  return MEMORY[0x189617ED8]();
}

uint64_t sub_18264EBC8()
{
  return MEMORY[0x189617EE0]();
}

uint64_t sub_18264EBD4()
{
  return MEMORY[0x189617F48]();
}

uint64_t sub_18264EBE0()
{
  return MEMORY[0x189617F78]();
}

uint64_t sub_18264EBEC()
{
  return MEMORY[0x189618040]();
}

uint64_t sub_18264EBF8()
{
  return MEMORY[0x189618070]();
}

uint64_t sub_18264EC04()
{
  return MEMORY[0x189618078]();
}

uint64_t sub_18264EC10()
{
  return MEMORY[0x189618080]();
}

uint64_t sub_18264EC1C()
{
  return MEMORY[0x189618098]();
}

uint64_t sub_18264EC28()
{
  return MEMORY[0x1896180A8]();
}

uint64_t sub_18264EC34()
{
  return MEMORY[0x1896180C8]();
}

uint64_t sub_18264EC40()
{
  return MEMORY[0x1896180E0]();
}

uint64_t sub_18264EC4C()
{
  return MEMORY[0x1896180F8]();
}

uint64_t sub_18264EC58()
{
  return MEMORY[0x189618118]();
}

uint64_t sub_18264EC64()
{
  return MEMORY[0x189618158]();
}

uint64_t sub_18264EC70()
{
  return MEMORY[0x1896181A0]();
}

uint64_t sub_18264EC7C()
{
  return MEMORY[0x1896181B0]();
}

uint64_t sub_18264EC88()
{
  return MEMORY[0x1896181F0]();
}

uint64_t sub_18264EC94()
{
  return MEMORY[0x189618288]();
}

uint64_t sub_18264ECA0()
{
  return MEMORY[0x1896182E8]();
}

uint64_t sub_18264ECAC()
{
  return MEMORY[0x189618308]();
}

uint64_t sub_18264ECB8()
{
  return MEMORY[0x1896071D0]();
}

uint64_t sub_18264ECC4()
{
  return MEMORY[0x1896071E0]();
}

uint64_t sub_18264ECD0()
{
  return MEMORY[0x189618318]();
}

uint64_t sub_18264ECDC()
{
  return MEMORY[0x189618320]();
}

uint64_t sub_18264ECE8()
{
  return MEMORY[0x189618338]();
}

uint64_t sub_18264ECF4()
{
  return MEMORY[0x189618340]();
}

uint64_t sub_18264ED00()
{
  return MEMORY[0x189618358]();
}

uint64_t sub_18264ED0C()
{
  return MEMORY[0x189618378]();
}

uint64_t sub_18264ED18()
{
  return MEMORY[0x189618390]();
}

uint64_t sub_18264ED24()
{
  return MEMORY[0x1896183A0]();
}

uint64_t sub_18264ED30()
{
  return MEMORY[0x1896183C8]();
}

uint64_t sub_18264ED3C()
{
  return MEMORY[0x1896183E8]();
}

uint64_t sub_18264ED48()
{
  return MEMORY[0x1896183F0]();
}

uint64_t sub_18264ED54()
{
  return MEMORY[0x189618410]();
}

uint64_t sub_18264ED60()
{
  return MEMORY[0x1896184A8]();
}

uint64_t sub_18264ED6C()
{
  return MEMORY[0x18961BC98]();
}

uint64_t sub_18264ED78()
{
  return MEMORY[0x18961BCA0]();
}

uint64_t sub_18264ED84()
{
  return MEMORY[0x18961BCA8]();
}

uint64_t sub_18264ED90()
{
  return MEMORY[0x18961BCB0]();
}

uint64_t sub_18264ED9C()
{
  return MEMORY[0x18961BCB8]();
}

uint64_t sub_18264EDA8()
{
  return MEMORY[0x18961BCE8]();
}

uint64_t sub_18264EDB4()
{
  return MEMORY[0x18961BD08]();
}

uint64_t sub_18264EDC0()
{
  return MEMORY[0x18961BD20]();
}

uint64_t sub_18264EDCC()
{
  return MEMORY[0x18961BD28]();
}

uint64_t sub_18264EDD8()
{
  return MEMORY[0x18961BD30]();
}

uint64_t sub_18264EDE4()
{
  return MEMORY[0x18961BD40]();
}

uint64_t sub_18264EDF0()
{
  return MEMORY[0x18961BD58]();
}

uint64_t sub_18264EDFC()
{
  return MEMORY[0x18961BD68]();
}

uint64_t sub_18264EE08()
{
  return MEMORY[0x18961BD70]();
}

uint64_t sub_18264EE14()
{
  return MEMORY[0x18961BD78]();
}

uint64_t sub_18264EE20()
{
  return MEMORY[0x18961BD88]();
}

uint64_t sub_18264EE2C()
{
  return MEMORY[0x18961BDA0]();
}

uint64_t sub_18264EE38()
{
  return MEMORY[0x18961BDB0]();
}

uint64_t sub_18264EE44()
{
  return MEMORY[0x18961BDC8]();
}

uint64_t sub_18264EE50()
{
  return MEMORY[0x18961BDD0]();
}

uint64_t sub_18264EE5C()
{
  return MEMORY[0x18961BDD8]();
}

uint64_t sub_18264EE68()
{
  return MEMORY[0x18961BDE0]();
}

uint64_t sub_18264EE74()
{
  return MEMORY[0x18961BDE8]();
}

uint64_t sub_18264EE80()
{
  return MEMORY[0x18961BE28]();
}

uint64_t sub_18264EE8C()
{
  return MEMORY[0x18961BE38]();
}

uint64_t sub_18264EE98()
{
  return MEMORY[0x18961BE40]();
}

uint64_t sub_18264EEA4()
{
  return MEMORY[0x18961BE48]();
}

uint64_t sub_18264EEB0()
{
  return MEMORY[0x18961BE58]();
}

uint64_t sub_18264EEBC()
{
  return MEMORY[0x18961BE68]();
}

uint64_t sub_18264EEC8()
{
  return MEMORY[0x18961BE78]();
}

uint64_t sub_18264EED4()
{
  return MEMORY[0x18961BE80]();
}

uint64_t sub_18264EEE0()
{
  return MEMORY[0x18961BE88]();
}

uint64_t sub_18264EEEC()
{
  return MEMORY[0x18961BE98]();
}

uint64_t sub_18264EEF8()
{
  return MEMORY[0x18961BEA0]();
}

uint64_t sub_18264EF04()
{
  return MEMORY[0x18961BEB0]();
}

uint64_t sub_18264EF10()
{
  return MEMORY[0x18961BED8]();
}

uint64_t sub_18264EF1C()
{
  return MEMORY[0x18961BEE0]();
}

uint64_t sub_18264EF28()
{
  return MEMORY[0x1896185D0]();
}

uint64_t sub_18264EF34()
{
  return MEMORY[0x1896186E0]();
}

uint64_t sub_18264EF40()
{
  return MEMORY[0x1896186E8]();
}

uint64_t sub_18264EF4C()
{
  return MEMORY[0x1896187F8]();
}

uint64_t sub_18264EF58()
{
  return MEMORY[0x189618808]();
}

uint64_t sub_18264EF64()
{
  return MEMORY[0x189618810]();
}

uint64_t sub_18264EF70()
{
  return MEMORY[0x189618818]();
}

uint64_t sub_18264EF7C()
{
  return MEMORY[0x189618820]();
}

uint64_t sub_18264EF88()
{
  return MEMORY[0x18961D078]();
}

uint64_t sub_18264EF94()
{
  return MEMORY[0x1896188B8]();
}

uint64_t sub_18264EFA0()
{
  return MEMORY[0x1896188C8]();
}

uint64_t sub_18264EFAC()
{
  return MEMORY[0x1896188F8]();
}

uint64_t sub_18264EFB8()
{
  return MEMORY[0x189618940]();
}

uint64_t sub_18264EFC4()
{
  return MEMORY[0x1896189B0]();
}

uint64_t sub_18264EFD0()
{
  return MEMORY[0x1896189B8]();
}

uint64_t sub_18264EFDC()
{
  return MEMORY[0x1896189C8]();
}

uint64_t sub_18264EFE8()
{
  return MEMORY[0x189618A18]();
}

uint64_t sub_18264EFF4()
{
  return MEMORY[0x18961D220]();
}

uint64_t sub_18264F000()
{
  return MEMORY[0x18961D228]();
}

uint64_t sub_18264F00C()
{
  return MEMORY[0x18961D238]();
}

uint64_t sub_18264F018()
{
  return MEMORY[0x18961D248]();
}

uint64_t sub_18264F024()
{
  return MEMORY[0x1896072C8]();
}

uint64_t sub_18264F030()
{
  return MEMORY[0x18961B8A8]();
}

uint64_t sub_18264F03C()
{
  return MEMORY[0x18961B920]();
}

uint64_t sub_18264F048()
{
  return MEMORY[0x18961B928]();
}

uint64_t sub_18264F054()
{
  return MEMORY[0x18961B948]();
}

uint64_t sub_18264F060()
{
  return MEMORY[0x18961B958]();
}

uint64_t sub_18264F06C()
{
  return MEMORY[0x18961D258]();
}

uint64_t sub_18264F078()
{
  return MEMORY[0x18961D260]();
}

uint64_t sub_18264F084()
{
  return MEMORY[0x18961D268]();
}

uint64_t sub_18264F090()
{
  return MEMORY[0x18961D270]();
}

uint64_t sub_18264F09C()
{
  return MEMORY[0x189618AC0]();
}

uint64_t sub_18264F0A8()
{
  return MEMORY[0x189618C38]();
}

uint64_t sub_18264F0B4()
{
  return MEMORY[0x189618C98]();
}

uint64_t sub_18264F0C0()
{
  return MEMORY[0x189618CB0]();
}

uint64_t sub_18264F0CC()
{
  return MEMORY[0x189618D30]();
}

uint64_t sub_18264F0D8()
{
  return MEMORY[0x189618D50]();
}

uint64_t sub_18264F0E4()
{
  return MEMORY[0x189607348]();
}

uint64_t sub_18264F0F0()
{
  return MEMORY[0x189618EE0]();
}

uint64_t sub_18264F0FC()
{
  return MEMORY[0x189619010]();
}

uint64_t sub_18264F108()
{
  return MEMORY[0x189619018]();
}

uint64_t sub_18264F114()
{
  return MEMORY[0x189619020]();
}

uint64_t sub_18264F120()
{
  return MEMORY[0x189619028]();
}

uint64_t sub_18264F12C()
{
  return MEMORY[0x189619188]();
}

uint64_t sub_18264F138()
{
  return MEMORY[0x189619190]();
}

uint64_t sub_18264F144()
{
  return MEMORY[0x1896191C0]();
}

uint64_t sub_18264F150()
{
  return MEMORY[0x1896191D0]();
}

uint64_t sub_18264F15C()
{
  return MEMORY[0x1896191E0]();
}

uint64_t sub_18264F168()
{
  return MEMORY[0x1896191E8]();
}

uint64_t sub_18264F174()
{
  return MEMORY[0x1896191F0]();
}

uint64_t sub_18264F180()
{
  return MEMORY[0x189619200]();
}

uint64_t sub_18264F18C()
{
  return MEMORY[0x189619230]();
}

uint64_t sub_18264F198()
{
  return MEMORY[0x189619240]();
}

uint64_t sub_18264F1A4()
{
  return MEMORY[0x1896192F8]();
}

uint64_t sub_18264F1B0()
{
  return MEMORY[0x189619300]();
}

uint64_t sub_18264F1BC()
{
  return MEMORY[0x189619308]();
}

uint64_t sub_18264F1C8()
{
  return MEMORY[0x189619318]();
}

uint64_t sub_18264F1D4()
{
  return MEMORY[0x189619338]();
}

uint64_t sub_18264F1E0()
{
  return MEMORY[0x189619340]();
}

uint64_t sub_18264F1EC()
{
  return MEMORY[0x189619348]();
}

uint64_t sub_18264F1F8()
{
  return MEMORY[0x189619378]();
}

uint64_t sub_18264F204()
{
  return MEMORY[0x1896193A0]();
}

uint64_t sub_18264F210()
{
  return MEMORY[0x1896193C0]();
}

uint64_t sub_18264F21C()
{
  return MEMORY[0x1896193D0]();
}

uint64_t sub_18264F228()
{
  return MEMORY[0x189619440]();
}

uint64_t sub_18264F234()
{
  return MEMORY[0x1896194A0]();
}

uint64_t sub_18264F240()
{
  return MEMORY[0x1896194C0]();
}

uint64_t sub_18264F24C()
{
  return MEMORY[0x1896194D8]();
}

uint64_t sub_18264F258()
{
  return MEMORY[0x1896194F8]();
}

uint64_t sub_18264F264()
{
  return MEMORY[0x189619500]();
}

uint64_t sub_18264F270()
{
  return MEMORY[0x189619550]();
}

uint64_t sub_18264F27C()
{
  return MEMORY[0x18961BEF0]();
}

uint64_t sub_18264F288()
{
  return MEMORY[0x18961BEF8]();
}

uint64_t sub_18264F294()
{
  return MEMORY[0x18961BF00]();
}

uint64_t sub_18264F2A0()
{
  return MEMORY[0x18961BF18]();
}

uint64_t sub_18264F2AC()
{
  return MEMORY[0x18961BF20]();
}

uint64_t sub_18264F2B8()
{
  return MEMORY[0x1896195E8]();
}

uint64_t sub_18264F2C4()
{
  return MEMORY[0x189619600]();
}

uint64_t sub_18264F2D0()
{
  return MEMORY[0x189619638]();
}

uint64_t sub_18264F2DC()
{
  return MEMORY[0x189619660]();
}

uint64_t sub_18264F2E8()
{
  return MEMORY[0x1896196D8]();
}

uint64_t sub_18264F2F4()
{
  return MEMORY[0x18961BAB8]();
}

uint64_t sub_18264F300()
{
  return MEMORY[0x1896196E0]();
}

uint64_t sub_18264F30C()
{
  return MEMORY[0x1896196E8]();
}

uint64_t sub_18264F318()
{
  return MEMORY[0x1896198A0]();
}

uint64_t sub_18264F324()
{
  return MEMORY[0x1896198A8]();
}

uint64_t sub_18264F330()
{
  return MEMORY[0x189619930]();
}

uint64_t sub_18264F33C()
{
  return MEMORY[0x189619948]();
}

uint64_t sub_18264F348()
{
  return MEMORY[0x189619950]();
}

uint64_t sub_18264F354()
{
  return MEMORY[0x189619960]();
}

uint64_t sub_18264F360()
{
  return MEMORY[0x189619978]();
}

uint64_t sub_18264F36C()
{
  return MEMORY[0x1896199A0]();
}

uint64_t sub_18264F378()
{
  return MEMORY[0x1896199A8]();
}

uint64_t sub_18264F384()
{
  return MEMORY[0x1896199E0]();
}

uint64_t sub_18264F390()
{
  return MEMORY[0x189619A40]();
}

uint64_t sub_18264F39C()
{
  return MEMORY[0x189619A68]();
}

uint64_t sub_18264F3A8()
{
  return MEMORY[0x189619A70]();
}

uint64_t sub_18264F3B4()
{
  return MEMORY[0x189619AA0]();
}

uint64_t sub_18264F3C0()
{
  return MEMORY[0x189619AB0]();
}

uint64_t sub_18264F3CC()
{
  return MEMORY[0x189619AD8]();
}

uint64_t sub_18264F3D8()
{
  return MEMORY[0x189619AF8]();
}

uint64_t sub_18264F3E4()
{
  return MEMORY[0x189619B18]();
}

uint64_t sub_18264F3F0()
{
  return MEMORY[0x189619B28]();
}

uint64_t sub_18264F3FC()
{
  return MEMORY[0x189619B38]();
}

uint64_t sub_18264F408()
{
  return MEMORY[0x189619B58]();
}

uint64_t sub_18264F414()
{
  return MEMORY[0x189619B80]();
}

uint64_t sub_18264F420()
{
  return MEMORY[0x189619B98]();
}

uint64_t sub_18264F42C()
{
  return MEMORY[0x189619BC8]();
}

uint64_t sub_18264F438()
{
  return MEMORY[0x189619BD8]();
}

uint64_t sub_18264F444()
{
  return MEMORY[0x189619BF0]();
}

uint64_t sub_18264F450()
{
  return MEMORY[0x189619C10]();
}

uint64_t sub_18264F45C()
{
  return MEMORY[0x189619C20]();
}

uint64_t sub_18264F468()
{
  return MEMORY[0x189619C40]();
}

uint64_t sub_18264F474()
{
  return MEMORY[0x189619C48]();
}

uint64_t sub_18264F480()
{
  return MEMORY[0x189619CC8]();
}

uint64_t sub_18264F48C()
{
  return MEMORY[0x189619D38]();
}

uint64_t sub_18264F498()
{
  return MEMORY[0x189619D58]();
}

uint64_t sub_18264F4A4()
{
  return MEMORY[0x189619D80]();
}

uint64_t sub_18264F4B0()
{
  return MEMORY[0x189619E48]();
}

uint64_t sub_18264F4BC()
{
  return MEMORY[0x189619E78]();
}

uint64_t sub_18264F4C8()
{
  return MEMORY[0x189619F40]();
}

uint64_t sub_18264F4D4()
{
  return MEMORY[0x189619FC0]();
}

uint64_t sub_18264F4E0()
{
  return MEMORY[0x18961A040]();
}

uint64_t sub_18264F4EC()
{
  return MEMORY[0x18961A050]();
}

uint64_t sub_18264F4F8()
{
  return MEMORY[0x18961BF58]();
}

uint64_t sub_18264F504()
{
  return MEMORY[0x18961A070]();
}

uint64_t sub_18264F510()
{
  return MEMORY[0x18961A0C8]();
}

uint64_t sub_18264F51C()
{
  return MEMORY[0x18961A168]();
}

uint64_t sub_18264F528()
{
  return MEMORY[0x18961A170]();
}

uint64_t sub_18264F534()
{
  return MEMORY[0x18961A178]();
}

uint64_t sub_18264F540()
{
  return MEMORY[0x18961A188]();
}

uint64_t sub_18264F54C()
{
  return MEMORY[0x18961A190]();
}

uint64_t sub_18264F558()
{
  return MEMORY[0x18961A198]();
}

uint64_t sub_18264F564()
{
  return MEMORY[0x18961A1B8]();
}

uint64_t sub_18264F570()
{
  return MEMORY[0x18961A1E0]();
}

uint64_t sub_18264F57C()
{
  return MEMORY[0x18961A1F0]();
}

uint64_t sub_18264F588()
{
  return MEMORY[0x18961A1F8]();
}

uint64_t sub_18264F594()
{
  return MEMORY[0x18961BF68]();
}

uint64_t sub_18264F5A0()
{
  return MEMORY[0x18961A2E8]();
}

uint64_t sub_18264F5AC()
{
  return MEMORY[0x18961A318]();
}

uint64_t sub_18264F5B8()
{
  return MEMORY[0x18961A398]();
}

uint64_t sub_18264F5C4()
{
  return MEMORY[0x18961A3A0]();
}

uint64_t sub_18264F5D0()
{
  return MEMORY[0x18961BF78]();
}

uint64_t sub_18264F5DC()
{
  return MEMORY[0x18961BF80]();
}

uint64_t sub_18264F5E8()
{
  return MEMORY[0x1896073A0]();
}

uint64_t sub_18264F5F4()
{
  return MEMORY[0x1896073B0]();
}

uint64_t sub_18264F600()
{
  return MEMORY[0x18961A3C0]();
}

uint64_t sub_18264F60C()
{
  return MEMORY[0x18961A3C8]();
}

uint64_t sub_18264F618()
{
  return MEMORY[0x18961A3D0]();
}

uint64_t sub_18264F624()
{
  return MEMORY[0x18961A3D8]();
}

uint64_t sub_18264F630()
{
  return MEMORY[0x18961A668]();
}

uint64_t sub_18264F63C()
{
  return MEMORY[0x18961A678]();
}

uint64_t sub_18264F648()
{
  return MEMORY[0x18961A680]();
}

uint64_t sub_18264F654()
{
  return MEMORY[0x18961A690]();
}

uint64_t sub_18264F660()
{
  return MEMORY[0x18961A698]();
}

uint64_t sub_18264F66C()
{
  return MEMORY[0x18961A6A0]();
}

uint64_t sub_18264F678()
{
  return MEMORY[0x18961A6A8]();
}

uint64_t sub_18264F684()
{
  return MEMORY[0x18961A6C0]();
}

uint64_t sub_18264F690()
{
  return MEMORY[0x18961A6F0]();
}

uint64_t sub_18264F69C()
{
  return MEMORY[0x18961A758]();
}

uint64_t sub_18264F6A8()
{
  return MEMORY[0x18961A760]();
}

uint64_t sub_18264F6B4()
{
  return MEMORY[0x18961A788]();
}

uint64_t sub_18264F6C0()
{
  return MEMORY[0x18961A938]();
}

uint64_t sub_18264F6CC()
{
  return MEMORY[0x18961A940]();
}

uint64_t sub_18264F6D8()
{
  return MEMORY[0x18961A948]();
}

uint64_t sub_18264F6E4()
{
  return MEMORY[0x18961A950]();
}

uint64_t sub_18264F6F0()
{
  return MEMORY[0x18961A960]();
}

uint64_t sub_18264F6FC()
{
  return MEMORY[0x18961A968]();
}

uint64_t sub_18264F708()
{
  return MEMORY[0x18961A970]();
}

uint64_t sub_18264F714()
{
  return MEMORY[0x18961A978]();
}

uint64_t sub_18264F720()
{
  return MEMORY[0x18961AE58]();
}

uint64_t sub_18264F72C()
{
  return MEMORY[0x18961AF48]();
}

uint64_t sub_18264F738()
{
  return MEMORY[0x18961AF60]();
}

uint64_t sub_18264F744()
{
  return MEMORY[0x18961AF68]();
}

uint64_t sub_18264F750()
{
  return MEMORY[0x18961BF90]();
}

uint64_t sub_18264F75C()
{
  return MEMORY[0x18961BF98]();
}

uint64_t sub_18264F768()
{
  return MEMORY[0x18961BFA0]();
}

uint64_t sub_18264F774()
{
  return MEMORY[0x18961AF88]();
}

unsigned __int8 *__cdecl CC_SHA1(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1895F8290](data, *(void *)&len, md);
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x1895F82D8](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x1895F82E0](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1895F82E8](c, data, *(void *)&len);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  return result;
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x189602630](theArray, range.location, range.length, value);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x189602640](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable( CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x189602648](allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return (CFMutableArrayRef)MEMORY[0x189602658](allocator, capacity, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x189602660](theArray);
}

CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x189602678](theArray, range.location, range.length, value);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x189602698](theArray, idx);
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1896027C8]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1896027D0](BOOLean);
}

CFStringRef CFBundleGetIdentifier(CFBundleRef bundle)
{
  return (CFStringRef)MEMORY[0x1896028D0](bundle);
}

CFDictionaryRef CFBundleGetInfoDictionary(CFBundleRef bundle)
{
  return (CFDictionaryRef)MEMORY[0x1896028D8](bundle);
}

CFBundleRef CFBundleGetMainBundle(void)
{
  return (CFBundleRef)MEMORY[0x1896028F0]();
}

CFTypeRef CFBundleGetValueForInfoDictionaryKey(CFBundleRef bundle, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x189602908](bundle, key);
}

void CFCharacterSetAddCharactersInString(CFMutableCharacterSetRef theSet, CFStringRef theString)
{
}

CFMutableCharacterSetRef CFCharacterSetCreateMutableCopy(CFAllocatorRef alloc, CFCharacterSetRef theSet)
{
  return (CFMutableCharacterSetRef)MEMORY[0x189602998](alloc, theSet);
}

void CFCharacterSetRemoveCharactersInString(CFMutableCharacterSetRef theSet, CFStringRef theString)
{
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x189602A58](allocator, bytes, length);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x189602A98](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x189602AB0](theData);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

CFDictionaryRef CFDictionaryCreate( CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x189602BA8](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable( CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x189602BB8](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x189602BD0](theDict);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x189602BF0]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x189602C00](theDict, key);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x189602C38](cf1, cf2);
}

CFErrorRef CFErrorCreate( CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, CFDictionaryRef userInfo)
{
  return (CFErrorRef)MEMORY[0x189602C60](allocator, domain, code, userInfo);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x189602C70](err);
}

CFErrorDomain CFErrorGetDomain(CFErrorRef err)
{
  return (CFErrorDomain)MEMORY[0x189602C78](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x189602D30](cf);
}

Boolean CFHTTPAuthenticationAppliesToRequest(CFHTTPAuthenticationRef auth, CFHTTPMessageRef request)
{
  return MEMORY[0x189601D00](auth, request);
}

CFHTTPAuthenticationRef CFHTTPAuthenticationCreateFromResponse(CFAllocatorRef alloc, CFHTTPMessageRef response)
{
  return (CFHTTPAuthenticationRef)MEMORY[0x189601D08](alloc, response);
}

Boolean CFHTTPAuthenticationIsValid(CFHTTPAuthenticationRef auth, CFStreamError *error)
{
  return MEMORY[0x189601D10](auth, error);
}

Boolean CFHTTPMessageAppendBytes(CFHTTPMessageRef message, const UInt8 *newBytes, CFIndex numBytes)
{
  return MEMORY[0x189601D18](message, newBytes, numBytes);
}

Boolean CFHTTPMessageApplyCredentials( CFHTTPMessageRef request, CFHTTPAuthenticationRef auth, CFStringRef username, CFStringRef password, CFStreamError *error)
{
  return MEMORY[0x189601D20](request, auth, username, password, error);
}

CFDictionaryRef CFHTTPMessageCopyAllHeaderFields(CFHTTPMessageRef message)
{
  return (CFDictionaryRef)MEMORY[0x189601D28](message);
}

CFDataRef CFHTTPMessageCopyBody(CFHTTPMessageRef message)
{
  return (CFDataRef)MEMORY[0x189601D30](message);
}

CFStringRef CFHTTPMessageCopyHeaderFieldValue(CFHTTPMessageRef message, CFStringRef headerField)
{
  return (CFStringRef)MEMORY[0x189601D38](message, headerField);
}

CFURLRef CFHTTPMessageCopyRequestURL(CFHTTPMessageRef request)
{
  return (CFURLRef)MEMORY[0x189601D48](request);
}

CFStringRef CFHTTPMessageCopyResponseStatusLine(CFHTTPMessageRef response)
{
  return (CFStringRef)MEMORY[0x189601D50](response);
}

CFDataRef CFHTTPMessageCopySerializedMessage(CFHTTPMessageRef message)
{
  return (CFDataRef)MEMORY[0x189601D58](message);
}

CFStringRef CFHTTPMessageCopyVersion(CFHTTPMessageRef message)
{
  return (CFStringRef)MEMORY[0x189601D60](message);
}

CFHTTPMessageRef CFHTTPMessageCreateCopy(CFAllocatorRef alloc, CFHTTPMessageRef message)
{
  return (CFHTTPMessageRef)MEMORY[0x189601D68](alloc, message);
}

CFHTTPMessageRef CFHTTPMessageCreateEmpty(CFAllocatorRef alloc, Boolean isRequest)
{
  return (CFHTTPMessageRef)MEMORY[0x189601D70](alloc, isRequest);
}

CFHTTPMessageRef CFHTTPMessageCreateRequest( CFAllocatorRef alloc, CFStringRef requestMethod, CFURLRef url, CFStringRef httpVersion)
{
  return (CFHTTPMessageRef)MEMORY[0x189601D78](alloc, requestMethod, url, httpVersion);
}

CFHTTPMessageRef CFHTTPMessageCreateResponse( CFAllocatorRef alloc, CFIndex statusCode, CFStringRef statusDescription, CFStringRef httpVersion)
{
  return (CFHTTPMessageRef)MEMORY[0x189601D80](alloc, statusCode, statusDescription, httpVersion);
}

CFIndex CFHTTPMessageGetResponseStatusCode(CFHTTPMessageRef response)
{
  return MEMORY[0x189601D88](response);
}

Boolean CFHTTPMessageIsHeaderComplete(CFHTTPMessageRef message)
{
  return MEMORY[0x189601D98](message);
}

void CFHTTPMessageSetHeaderFieldValue(CFHTTPMessageRef message, CFStringRef headerField, CFStringRef value)
{
}

CFRunLoopSourceRef CFNetworkExecuteProxyAutoConfigurationScript( CFStringRef proxyAutoConfigurationScript, CFURLRef targetURL, CFProxyAutoConfigurationResultCallback cb, CFStreamClientContext *clientContext)
{
  return (CFRunLoopSourceRef)MEMORY[0x189601DD8](proxyAutoConfigurationScript, targetURL, cb, clientContext);
}

CFRunLoopSourceRef CFNetworkExecuteProxyAutoConfigurationURL( CFURLRef proxyAutoConfigURL, CFURLRef targetURL, CFProxyAutoConfigurationResultCallback cb, CFStreamClientContext *clientContext)
{
  return (CFRunLoopSourceRef)MEMORY[0x189601DE0](proxyAutoConfigURL, targetURL, cb, clientContext);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x189602EA0](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x189602F08]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x189602F10](number, theType, valuePtr);
}

Boolean CFPreferencesGetAppBooleanValue( CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x189602F98](key, applicationID, keyExistsAndHasValidFormat);
}

CFDataRef CFPropertyListCreateData( CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x189602FD0](allocator, propertyList, format, options, error);
}

CFPropertyListRef CFPropertyListCreateWithData( CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x189602FF0](allocator, data, options, format, error);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1896030F0](cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

void CFRunLoopAddTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFRunLoopMode mode)
{
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x189603138]();
}

void CFRunLoopPerformBlock(CFRunLoopRef rl, CFTypeRef mode, void *block)
{
}

void CFRunLoopSourceInvalidate(CFRunLoopSourceRef source)
{
}

CFRunLoopTimerRef CFRunLoopTimerCreate( CFAllocatorRef allocator, CFAbsoluteTime fireDate, CFTimeInterval interval, CFOptionFlags flags, CFIndex order, CFRunLoopTimerCallBack callout, CFRunLoopTimerContext *context)
{
  return (CFRunLoopTimerRef)MEMORY[0x1896031D8](allocator, flags, order, callout, context, fireDate, interval);
}

void CFRunLoopTimerInvalidate(CFRunLoopTimerRef timer)
{
}

void CFRunLoopWakeUp(CFRunLoopRef rl)
{
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
}

void CFStringAppendCharacters(CFMutableStringRef theString, const UniChar *chars, CFIndex numChars)
{
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
}

CFComparisonResult CFStringCompare( CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1896033C0](theString1, theString2, compareOptions);
}

CFComparisonResult CFStringCompareWithOptions( CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1896033C8](theString1, theString2, rangeToCompare.location, rangeToCompare.length, compareOptions);
}

CFArrayRef CFStringCreateArrayBySeparatingStrings( CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return (CFArrayRef)MEMORY[0x189603400](alloc, theString, separatorString);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x189603430](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x189603438](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithBytes( CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x189603450](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithBytesNoCopy( CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x189603458]( alloc,  bytes,  numBytes,  *(void *)&encoding,  isExternalRepresentation,  contentsDeallocator);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x189603468](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithCStringNoCopy( CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x189603470](alloc, cStr, *(void *)&encoding, contentsDeallocator);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x189603490](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1896034A8](alloc, str, range.location, range.length);
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3 = MEMORY[0x1896034C0](theString, stringToFind, compareOptions);
  result.size_t length = v4;
  result.location = v3;
  return result;
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1896034F8](theString, buffer, bufferSize, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x189603500](theString, *(void *)&encoding);
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return MEMORY[0x189603540](str);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x189603548](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x189603558](length, *(void *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x189603590]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1896035A0](theString, prefix);
}

Boolean CFStringHasSuffix(CFStringRef theString, CFStringRef suffix)
{
  return MEMORY[0x1896035A8](theString, suffix);
}

void CFStringTrimWhitespace(CFMutableStringRef theString)
{
}

CFURLRef CFURLCopyAbsoluteURL(CFURLRef relativeURL)
{
  return (CFURLRef)MEMORY[0x1896036B0](relativeURL);
}

CFStringRef CFURLCopyHostName(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1896036C8](anURL);
}

CFStringRef CFURLCopyPath(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1896036F0](anURL);
}

CFStringRef CFURLCopyScheme(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x189603718](anURL);
}

CFURLRef CFURLCreateAbsoluteURLWithBytes( CFAllocatorRef alloc, const UInt8 *relativeURLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL, Boolean useCompatibilityMode)
{
  return (CFURLRef)MEMORY[0x189603730]( alloc,  relativeURLBytes,  length,  *(void *)&encoding,  baseURL,  useCompatibilityMode);
}

Boolean CFURLCreateDataAndPropertiesFromResource( CFAllocatorRef alloc, CFURLRef url, CFDataRef *resourceData, CFDictionaryRef *properties, CFArrayRef desiredProperties, SInt32 *errorCode)
{
  return MEMORY[0x189603768](alloc, url, resourceData, properties, desiredProperties, errorCode);
}

CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1896037D0](allocator, URLString, baseURL);
}

uint64_t CFURLCredentialCopyPassword()
{
  return MEMORY[0x189601DE8]();
}

uint64_t CFURLCredentialGetUsername()
{
  return MEMORY[0x189601DF0]();
}

CFRange CFURLGetByteRangeForComponent( CFURLRef url, CFURLComponentType component, CFRange *rangeIncludingSeparators)
{
  CFIndex v3 = MEMORY[0x189603808](url, component, rangeIncludingSeparators);
  result.size_t length = v4;
  result.location = v3;
  return result;
}

CFIndex CFURLGetBytes(CFURLRef url, UInt8 *buffer, CFIndex bufferLength)
{
  return MEMORY[0x189603810](url, buffer, bufferLength);
}

SInt32 CFURLGetPortNumber(CFURLRef anURL)
{
  return MEMORY[0x189603820](anURL);
}

uint64_t CFURLProtectionSpaceCreate()
{
  return MEMORY[0x189601DF8]();
}

uint64_t CFURLRequestCopyHTTPCookieStorage()
{
  return MEMORY[0x189601E00]();
}

uint64_t CFURLRequestCopyHTTPRequest()
{
  return MEMORY[0x189601E08]();
}

uint64_t CFURLRequestCreateHTTPRequest()
{
  return MEMORY[0x189601E10]();
}

uint64_t CFURLRequestGetProxySettings()
{
  return MEMORY[0x189601E18]();
}

uint64_t CFURLResponseCreateWithHTTPResponse()
{
  return MEMORY[0x189601E28]();
}

uint64_t CFURLResponseGetExpirationTime()
{
  return MEMORY[0x189601E30]();
}

uint64_t CFURLResponseGetHTTPResponse()
{
  return MEMORY[0x189601E38]();
}

uint64_t DNSServiceAttrSetValidationData()
{
  return MEMORY[0x1895F8390]();
}

DNSServiceAttributeRef DNSServiceAttributeCreate(void)
{
  return (DNSServiceAttributeRef)MEMORY[0x1895F8398]();
}

void DNSServiceAttributeDeallocate(DNSServiceAttributeRef attr)
{
}

uint64_t DNSServiceBrowseEx()
{
  return MEMORY[0x1895F83B0]();
}

DNSServiceErrorType DNSServiceConstructFullName( char *const fullName, const char *const service, const char *const regtype, const char *const domain)
{
  return MEMORY[0x1895F83B8](fullName, service, regtype, domain);
}

DNSServiceErrorType DNSServiceCreateConnection(DNSServiceRef *sdRef)
{
  return MEMORY[0x1895F83C0](sdRef);
}

uint64_t DNSServiceCreateDelegateConnection()
{
  return MEMORY[0x1895F83C8]();
}

DNSServiceErrorType DNSServiceEnumerateDomains( DNSServiceRef *sdRef, DNSServiceFlags flags, uint32_t interfaceIndex, DNSServiceDomainEnumReply callBack, void *context)
{
  return MEMORY[0x1895F83D0](sdRef, *(void *)&flags, *(void *)&interfaceIndex, callBack, context);
}

uint64_t DNSServiceErrorCodeToString()
{
  return MEMORY[0x1895F83D8]();
}

DNSServiceErrorType DNSServiceGetAddrInfo( DNSServiceRef *sdRef, DNSServiceFlags flags, uint32_t interfaceIndex, DNSServiceProtocol protocol, const char *hostname, DNSServiceGetAddrInfoReply callBack, void *context)
{
  return MEMORY[0x1895F83E0]( sdRef,  *(void *)&flags,  *(void *)&interfaceIndex,  *(void *)&protocol,  hostname,  callBack,  context);
}

uint64_t DNSServiceGetAddrInfoEx()
{
  return MEMORY[0x1895F83E8]();
}

uint64_t DNSServiceGetValidationData()
{
  return MEMORY[0x1895F83F0]();
}

DNSServiceErrorType DNSServiceProcessResult(DNSServiceRef sdRef)
{
  return MEMORY[0x1895F83F8](sdRef);
}

DNSServiceErrorType DNSServiceQueryRecordWithAttribute( DNSServiceRef *sdRef, DNSServiceFlags flags, uint32_t ifindex, const char *name, uint16_t rrtype, uint16_t rrclass, const DNSServiceAttribute *attr, DNSServiceQueryRecordReply callback, void *context)
{
  return MEMORY[0x1895F8408](sdRef, *(void *)&flags, *(void *)&ifindex, name, rrtype, rrclass, attr, callback);
}

void DNSServiceRefDeallocate(DNSServiceRef sdRef)
{
}

dnssd_sock_t DNSServiceRefSockFD(DNSServiceRef sdRef)
{
  return MEMORY[0x1895F8420](sdRef);
}

DNSServiceErrorType DNSServiceRegister( DNSServiceRef *sdRef, DNSServiceFlags flags, uint32_t interfaceIndex, const char *name, const char *regtype, const char *domain, const char *host, uint16_t port, uint16_t txtLen, const void *txtRecord, DNSServiceRegisterReply callBack, void *context)
{
  return MEMORY[0x1895F8428](sdRef, *(void *)&flags, *(void *)&interfaceIndex, name, regtype, domain, host, port);
}

uint64_t DNSServiceResolveEx()
{
  return MEMORY[0x1895F8440]();
}

DNSServiceErrorType DNSServiceSetDispatchQueue(DNSServiceRef service, dispatch_queue_t queue)
{
  return MEMORY[0x1895F8448](service, queue);
}

uint64_t DNSServiceSetResolverDefaults()
{
  return MEMORY[0x1895F8450]();
}

DNSServiceErrorType DNSServiceSleepKeepalive( DNSServiceRef *sdRef, DNSServiceFlags flags, int fd, unsigned int timeout, DNSServiceSleepKeepaliveReply callBack, void *context)
{
  return MEMORY[0x1895F8458](sdRef, *(void *)&flags, *(void *)&fd, *(void *)&timeout, callBack, context);
}

DNSServiceErrorType DNSServiceUpdateRecord( DNSServiceRef sdRef, DNSRecordRef RecordRef, DNSServiceFlags flags, uint16_t rdlen, const void *rdata, uint32_t ttl)
{
  return MEMORY[0x1895F8460](sdRef, RecordRef, *(void *)&flags, rdlen, rdata, *(void *)&ttl);
}

IOReturn IOAllowPowerChange(io_connect_t kernelPort, intptr_t notificationID)
{
  return MEMORY[0x189607C78](*(void *)&kernelPort, notificationID);
}

IOReturn IODeregisterForSystemPower(io_object_t *notifier)
{
  return MEMORY[0x189607D90](notifier);
}

void IONotificationPortDestroy(IONotificationPortRef notify)
{
}

void IONotificationPortSetDispatchQueue(IONotificationPortRef notify, dispatch_queue_t queue)
{
}

IOReturn IOPMAssertionCreateWithProperties(CFDictionaryRef AssertionProperties, IOPMAssertionID *AssertionID)
{
  return MEMORY[0x1896083B8](AssertionProperties, AssertionID);
}

IOReturn IOPMAssertionRelease(IOPMAssertionID AssertionID)
{
  return MEMORY[0x1896083C8](*(void *)&AssertionID);
}

io_connect_t IORegisterForSystemPower( void *refcon, IONotificationPortRef *thePortRef, IOServiceInterestCallback callback, io_object_t *notifier)
{
  return MEMORY[0x189608440](refcon, thePortRef, callback, notifier);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return MEMORY[0x189608550](*(void *)&connect);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1896136F0]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x189613710]();
}

uint64_t NEHelperCacheCopyAppUUIDMappingExtended()
{
  return MEMORY[0x1895F8478]();
}

uint64_t NEHelperCacheCopySigningIdentifierMapping()
{
  return MEMORY[0x1895F8488]();
}

uint64_t NEHelperCopyDataForCertificate()
{
  return MEMORY[0x1895F84A8]();
}

uint64_t NEHelperCopyPerAppDomains()
{
  return MEMORY[0x1895F84B0]();
}

uint64_t NEHelperCopyXPCEndpointForIdentityProxy()
{
  return MEMORY[0x1895F84B8]();
}

uint64_t NEHelperCopyXPCEndpointForIdentityProxyExtended()
{
  return MEMORY[0x1895F84C0]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x189607458](aClassName);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1896076F0](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x189607700](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x189607718](aSelector);
}

uint64_t PBDataWriterWriteBOOLField()
{
  return MEMORY[0x189611CF8]();
}

uint64_t PBDataWriterWriteDataField()
{
  return MEMORY[0x189611D00]();
}

uint64_t PBDataWriterWriteInt32Field()
{
  return MEMORY[0x189611D10]();
}

uint64_t PBDataWriterWriteStringField()
{
  return MEMORY[0x189611D20]();
}

uint64_t PBDataWriterWriteSubmessage()
{
  return MEMORY[0x189611D28]();
}

uint64_t PBDataWriterWriteUint32Field()
{
  return MEMORY[0x189611D30]();
}

uint64_t PBReaderPlaceMark()
{
  return MEMORY[0x189611D40]();
}

uint64_t PBReaderReadData()
{
  return MEMORY[0x189611D48]();
}

uint64_t PBReaderReadString()
{
  return MEMORY[0x189611D50]();
}

uint64_t PBReaderRecallMark()
{
  return MEMORY[0x189611D58]();
}

uint64_t PBReaderSkipValueWithTag()
{
  return MEMORY[0x189611D60]();
}

uint64_t PBRepeatedInt32Add()
{
  return MEMORY[0x189611D68]();
}

uint64_t PBRepeatedInt32Clear()
{
  return MEMORY[0x189611D70]();
}

uint64_t PBRepeatedInt32Copy()
{
  return MEMORY[0x189611D78]();
}

uint64_t PBRepeatedInt32Hash()
{
  return MEMORY[0x189611D80]();
}

uint64_t PBRepeatedInt32IsEqual()
{
  return MEMORY[0x189611D88]();
}

SecAccessControlRef SecAccessControlCreateWithFlags( CFAllocatorRef allocator, CFTypeRef protection, SecAccessControlCreateFlags flags, CFErrorRef *error)
{
  return (SecAccessControlRef)MEMORY[0x18960B1C8](allocator, protection, flags, error);
}

uint64_t SecCertificateCopyDNSNames()
{
  return MEMORY[0x18960B258]();
}

SecKeyRef SecCertificateCopyKey(SecCertificateRef certificate)
{
  return (SecKeyRef)MEMORY[0x18960B290](certificate);
}

uint64_t SecCertificateCreateWithBytes()
{
  return MEMORY[0x18960B2E0]();
}

CFStringRef SecCopyErrorMessageString(OSStatus status, void *reserved)
{
  return (CFStringRef)MEMORY[0x18960B370](*(void *)&status, reserved);
}

uint64_t SecGenerateSelfSignedCertificate()
{
  return MEMORY[0x18960B3D0]();
}

OSStatus SecIdentityCopyCertificate(SecIdentityRef identityRef, SecCertificateRef *certificateRef)
{
  return MEMORY[0x18960B3D8](identityRef, certificateRef);
}

OSStatus SecIdentityCopyPrivateKey(SecIdentityRef identityRef, SecKeyRef *privateKeyRef)
{
  return MEMORY[0x18960B3E0](identityRef, privateKeyRef);
}

uint64_t SecIdentityCreate()
{
  return MEMORY[0x18960B3E8]();
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return MEMORY[0x18960B400](query, result);
}

uint64_t SecKeyCopyPublicBytes()
{
  return MEMORY[0x18960B448]();
}

SecKeyRef SecKeyCopyPublicKey(SecKeyRef key)
{
  return (SecKeyRef)MEMORY[0x18960B450](key);
}

uint64_t SecKeyCopySubjectPublicKeyInfo()
{
  return MEMORY[0x18960B468]();
}

SecKeyRef SecKeyCreateRandomKey(CFDictionaryRef parameters, CFErrorRef *error)
{
  return (SecKeyRef)MEMORY[0x18960B4B8](parameters, error);
}

CFDataRef SecKeyCreateSignature( SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef dataToSign, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x18960B4C0](key, algorithm, dataToSign, error);
}

SecKeyRef SecKeyCreateWithData(CFDataRef keyData, CFDictionaryRef attributes, CFErrorRef *error)
{
  return (SecKeyRef)MEMORY[0x18960B4C8](keyData, attributes, error);
}

Boolean SecKeyVerifySignature( SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef signedData, CFDataRef signature, CFErrorRef *error)
{
  return MEMORY[0x18960B510](key, algorithm, signedData, signature, error);
}

uint64_t SecPolicySetATSPinning()
{
  return MEMORY[0x18960B5C8]();
}

uint64_t SecPolicySetSSLHostname()
{
  return MEMORY[0x18960B5D0]();
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x18960B640](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x18960B658](allocator);
}

CFArrayRef SecTrustCopyCertificateChain(SecTrustRef trust)
{
  return (CFArrayRef)MEMORY[0x18960B680](trust);
}

CFDataRef SecTrustCopyExceptions(SecTrustRef trust)
{
  return (CFDataRef)MEMORY[0x18960B688](trust);
}

SecKeyRef SecTrustCopyKey(SecTrustRef trust)
{
  return (SecKeyRef)MEMORY[0x18960B690](trust);
}

OSStatus SecTrustCopyPolicies(SecTrustRef trust, CFArrayRef *policies)
{
  return MEMORY[0x18960B698](trust, policies);
}

OSStatus SecTrustEvaluateAsyncWithError( SecTrustRef trust, dispatch_queue_t queue, SecTrustWithErrorCallback result)
{
  return MEMORY[0x18960B6D0](trust, queue, result);
}

BOOL SecTrustEvaluateWithError(SecTrustRef trust, CFErrorRef *error)
{
  return MEMORY[0x18960B6E0](trust, error);
}

BOOL SecTrustSetExceptions(SecTrustRef trust, CFDataRef exceptions)
{
  return MEMORY[0x18960B720](trust, exceptions);
}

uint64_t SecTrustSetPinningPolicyName()
{
  return MEMORY[0x18960B730]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1895F8720](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFGetProgname()
{
  return MEMORY[0x189604310]();
}

uint64_t _CFHTTPAuthenticationAppSSOIsPerformDefaultHandlingError()
{
  return MEMORY[0x189601F70]();
}

uint64_t _CFHTTPAuthenticationAppSSOShouldManageURL()
{
  return MEMORY[0x189601F78]();
}

uint64_t _CFHTTPAuthenticationApplyProxyAuthorizationToRequest()
{
  return MEMORY[0x189601F80]();
}

uint64_t _CFHTTPAuthenticationAskAccountsForCreds()
{
  return MEMORY[0x189601F88]();
}

uint64_t _CFHTTPAuthenticationCanRecoverFromKerberosFailure()
{
  return MEMORY[0x189601F90]();
}

uint64_t _CFHTTPAuthenticationCheckOriginAllowedAsThirdParty()
{
  return MEMORY[0x189601F98]();
}

uint64_t _CFHTTPAuthenticationClearAccountRefreshState()
{
  return MEMORY[0x189601FA0]();
}

uint64_t _CFHTTPAuthenticationCopySortedAuthSchemes()
{
  return MEMORY[0x189601FA8]();
}

uint64_t _CFHTTPAuthenticationCreateFromResponseWithFlags()
{
  return MEMORY[0x189601FB0]();
}

uint64_t _CFHTTPAuthenticationCreateNTLMHeaderForRequest()
{
  return MEMORY[0x189601FB8]();
}

uint64_t _CFHTTPAuthenticationCreateNegotiateHeaderForRequest()
{
  return MEMORY[0x189601FC0]();
}

uint64_t _CFHTTPAuthenticationDisableAppSSO()
{
  return MEMORY[0x189601FC8]();
}

uint64_t _CFHTTPAuthenticationFailedToGetKerberosTicket()
{
  return MEMORY[0x189601FD0]();
}

uint64_t _CFHTTPAuthenticationFetchProxyCredentialFromAuthBroker()
{
  return MEMORY[0x189601FD8]();
}

uint64_t _CFHTTPAuthenticationGetAuthHeadersFromAppSSO()
{
  return MEMORY[0x189601FE0]();
}

uint64_t _CFHTTPAuthenticationGetPATAuthHeaders()
{
  return MEMORY[0x189601FE8]();
}

uint64_t _CFHTTPAuthenticationGetPATSchemes()
{
  return MEMORY[0x189601FF0]();
}

uint64_t _CFHTTPAuthenticationGetSchemesDict()
{
  return MEMORY[0x189601FF8]();
}

uint64_t _CFHTTPAuthenticationIsSecondNTLMTransaction()
{
  return MEMORY[0x189602000]();
}

uint64_t _CFHTTPAuthenticationSetPreferredScheme()
{
  return MEMORY[0x189602008]();
}

uint64_t _CFHTTPAuthenticationUpdateFromResponse()
{
  return MEMORY[0x189602010]();
}

uint64_t _CFHTTPAuthenticationUsingAppSSO()
{
  return MEMORY[0x189602018]();
}

uint64_t _CFHTTPMessageAddHeaderFieldValue()
{
  return MEMORY[0x189602020]();
}

uint64_t _CFHTTPMessageSetResponseProxyURL()
{
  return MEMORY[0x189602028]();
}

uint64_t _CFHTTPMessageSetResponseURL()
{
  return MEMORY[0x189602030]();
}

uint64_t _CFHostGetTopLevelDomain()
{
  return MEMORY[0x189602038]();
}

uint64_t _CFNetworkCopyPreferredLanguageCode()
{
  return MEMORY[0x189602040]();
}

uint64_t _CFNetworkErrorCopyLocalizedDescriptionWithHostname()
{
  return MEMORY[0x189602048]();
}

uint64_t _CFNetworkErrorGetLocalizedFailureReason()
{
  return MEMORY[0x189602050]();
}

uint64_t _CFNetworkErrorGetLocalizedRecoverySuggestion()
{
  return MEMORY[0x189602058]();
}

uint64_t _CFNetworkExecuteProxyAutoConfigurationURLDelegated()
{
  return MEMORY[0x189602060]();
}

uint64_t _CFStringCreateByAddingPercentEncodingWithAllowedCharacters()
{
  return MEMORY[0x189604590]();
}

uint64_t _CFStringCreateByRemovingPercentEncoding()
{
  return MEMORY[0x189604598]();
}

uint64_t _CFURLComponentsGetURLPathAllowedCharacterSet()
{
  return MEMORY[0x189604648]();
}

uint64_t _CFURLRequestCopyProtocolPropertyForKey()
{
  return MEMORY[0x189602068]();
}

uint64_t _CFURLResponseMustRevalidate()
{
  return MEMORY[0x189602078]();
}

uint64_t _CFXPCCreateCFObjectFromXPCObject()
{
  return MEMORY[0x189604828]();
}

uint64_t _CFXPCCreateXPCObjectFromCFObject()
{
  return MEMORY[0x189604838]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1896141C8](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1896141D0](this);
}

void std::__call_once(unint64_t *a1, void *a2, void (__cdecl *a3)(void *))
{
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1896142A0](__n);
}

std::string *__cdecl std::string::append( std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1896142D8](this, __s, __n);
}

uint64_t std::ostream::put()
{
  return MEMORY[0x1896143B0]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x1896143B8]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x1896143C0]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1896143C8]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1896143D0]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1896143D8]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1896143E0]();
}

{
  return MEMORY[0x189614400]();
}

{
  return MEMORY[0x189614408]();
}

{
  return MEMORY[0x189614418]();
}

{
  return MEMORY[0x189614428]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x189614470]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x189614478]();
}

void std::__libcpp_verbose_abort(const char *__format, ...)
{
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x1896145B8](this, a2);
}

void std::locale::~locale(std::locale *this)
{
}

const std::locale *__cdecl std::locale::operator=(std::locale *this, const std::locale *a2)
{
  return (const std::locale *)MEMORY[0x1896145D0](this, a2);
}

unint64_t std::stoull(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x1896145D8](__str, __idx, *(void *)&__base);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::move(std::ios_base *this, std::ios_base *a2)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x189614638]();
}

void std::terminate(void)
{
}

void operator delete(void *__p)
{
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_189BA6AF8(__sz);
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1896147B8](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1896147F0](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

int *__error(void)
{
  return (int *)MEMORY[0x1895F8898]();
}

double __exp10(double a1)
{
  return result;
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1895F8918](*(void *)&a1, a2);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1895F8930]();
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1895F8A08]();
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1895F8A28](*(void *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1895F8A30](*(void *)&a1);
}

uint64_t _class_setCustomDeallocInitiation()
{
  return MEMORY[0x189616360]();
}

uint64_t _dispatch_is_fork_of_multithreaded_parent()
{
  return MEMORY[0x1895F8AD0]();
}

uint64_t _dispatch_is_multithreaded()
{
  return MEMORY[0x1895F8AD8]();
}

uint64_t _dispatch_source_will_reenable_kevent_4NW()
{
  return MEMORY[0x1895F8B98]();
}

uint64_t _os_assert_log()
{
  return MEMORY[0x1895F8D68]();
}

uint64_t _os_crash()
{
  return MEMORY[0x1895F8D78]();
}

uint64_t _os_crash_msg()
{
  return MEMORY[0x1895F8D80]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1895F8D88]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _os_log_send_and_compose_impl()
{
  return MEMORY[0x1895F8DE0]();
}

uint64_t _os_object_alloc()
{
  return MEMORY[0x1895F8E10]();
}

void _os_signpost_emit_with_name_impl( void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_isClassOrObjCExistentialType()
{
  return MEMORY[0x18961B018]();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x18961B048]();
}

uint64_t _swift_stdlib_strtod_clocale()
{
  return MEMORY[0x18961B060]();
}

uint64_t _swift_stdlib_strtof_clocale()
{
  return MEMORY[0x18961B068]();
}

uint64_t _symptoms_daemon_fallback_initial_disposition()
{
  return MEMORY[0x1895F9158]();
}

uint64_t _symptoms_daemon_fallback_subseq_disposition()
{
  return MEMORY[0x1895F9160]();
}

uint64_t _symptoms_is_daemon_fallback_blacklisted()
{
  return MEMORY[0x1895F9168]();
}

void abort(void)
{
}

int accept(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x1895F9320](*(void *)&a1, a2, a3);
}

uint32_t arc4random(void)
{
  return MEMORY[0x1895F94C0]();
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x1895F94D8](*(void *)&__upper_bound);
}

int asprintf(char **a1, const char *a2, ...)
{
  return MEMORY[0x1895F9540](a1, a2);
}

int atexit(void (*a1)(void))
{
  return MEMORY[0x1895F9588](a1);
}

int atoi(const char *a1)
{
  return MEMORY[0x1895F95A0](a1);
}

int backtrace(void **a1, int a2)
{
  return MEMORY[0x1895F95D0](a1, *(void *)&a2);
}

char **__cdecl backtrace_symbols(void *const *a1, int a2)
{
  return (char **)MEMORY[0x1895F95E0](a1, *(void *)&a2);
}

int bind(int a1, const sockaddr *a2, socklen_t a3)
{
  return MEMORY[0x1895F9608](*(void *)&a1, a2, *(void *)&a3);
}

kern_return_t bootstrap_look_up(mach_port_t bp, const name_t service_name, mach_port_t *sp)
{
  return MEMORY[0x1895F9618](*(void *)&bp, service_name, sp);
}

void bzero(void *a1, size_t a2)
{
}

void *__cdecl calloc(size_t __count, size_t __size)
{
  return (void *)MEMORY[0x1895F9710](__count, __size);
}

uint64_t cc_cmp_safe()
{
  return MEMORY[0x1895F9750]();
}

uint64_t ccaes_gcm_decrypt_mode()
{
  return MEMORY[0x1895F9790]();
}

uint64_t ccaes_gcm_encrypt_mode()
{
  return MEMORY[0x1895F9798]();
}

uint64_t ccgcm_one_shot()
{
  return MEMORY[0x1895F9D70]();
}

uint64_t cchkdf_expand()
{
  return MEMORY[0x1895F9F10]();
}

uint64_t cchkdf_extract()
{
  return MEMORY[0x1895F9F18]();
}

uint64_t cchpke_initiator_encrypt()
{
  return MEMORY[0x1895F9F40]();
}

uint64_t cchpke_initiator_export()
{
  return MEMORY[0x1895F9F48]();
}

uint64_t cchpke_initiator_setup()
{
  return MEMORY[0x1895F9F50]();
}

uint64_t cchpke_params_sizeof_aead_key()
{
  return MEMORY[0x1895F9F58]();
}

uint64_t cchpke_params_sizeof_aead_nonce()
{
  return MEMORY[0x1895F9F60]();
}

uint64_t cchpke_params_sizeof_aead_tag()
{
  return MEMORY[0x1895F9F68]();
}

uint64_t cchpke_params_sizeof_kdf_hash()
{
  return MEMORY[0x1895F9F70]();
}

uint64_t cchpke_params_sizeof_kem_enc()
{
  return MEMORY[0x1895F9F78]();
}

uint64_t cchpke_params_x25519_AESGCM128_HKDF_SHA256()
{
  return MEMORY[0x1895F9F80]();
}

uint64_t cchpke_responder_decrypt()
{
  return MEMORY[0x1895F9F88]();
}

uint64_t cchpke_responder_export()
{
  return MEMORY[0x1895F9F90]();
}

uint64_t cchpke_responder_setup()
{
  return MEMORY[0x1895F9F98]();
}

uint64_t ccrng()
{
  return MEMORY[0x1895FA118]();
}

uint64_t ccsha256_di()
{
  return MEMORY[0x1895FA278]();
}

uint64_t change_fdguard_np()
{
  return MEMORY[0x1895FA520]();
}

BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types)
{
  return MEMORY[0x189616460](cls, name, imp, types);
}

Method *__cdecl class_copyMethodList(Class cls, unsigned int *outCount)
{
  return (Method *)MEMORY[0x189616480](cls, outCount);
}

id class_createInstance(Class cls, size_t extraBytes)
{
  return (id)MEMORY[0x189616498](cls, extraBytes);
}

Method class_getInstanceMethod(Class cls, SEL name)
{
  return (Method)MEMORY[0x1896164B0](cls, name);
}

size_t class_getInstanceSize(Class cls)
{
  return MEMORY[0x1896164B8](cls);
}

Ivar class_getInstanceVariable(Class cls, const char *name)
{
  return (Ivar)MEMORY[0x1896164C0](cls, name);
}

IMP class_replaceMethod(Class cls, SEL name, IMP imp, const char *types)
{
  return (IMP)MEMORY[0x1896164F8](cls, name, imp, types);
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return MEMORY[0x1895FA578](*(void *)&__clock_id);
}

int close(int a1)
{
  return MEMORY[0x1895FA590](*(void *)&a1);
}

compression_status compression_stream_destroy(compression_stream *stream)
{
  return MEMORY[0x1896149B8](stream);
}

compression_status compression_stream_init( compression_stream *stream, compression_stream_operation operation, compression_algorithm algorithm)
{
  return MEMORY[0x1896149D0](stream, *(void *)&operation, *(void *)&algorithm);
}

compression_status compression_stream_process(compression_stream *stream, int flags)
{
  return MEMORY[0x1896149E0](stream, *(void *)&flags);
}

uint64_t config_agent_copy_dns_information()
{
  return MEMORY[0x1895FA5C0]();
}

uint64_t config_agent_copy_proxy_information()
{
  return MEMORY[0x1895FA5C8]();
}

uint64_t config_agent_free_dns_information()
{
  return MEMORY[0x1895FA5D0]();
}

uint64_t config_agent_free_proxy_information()
{
  return MEMORY[0x1895FA5D8]();
}

uint64_t config_agent_update_proxy_information()
{
  return MEMORY[0x1895FA5E0]();
}

int connect(int a1, const sockaddr *a2, socklen_t a3)
{
  return MEMORY[0x1895FA5F0](*(void *)&a1, a2, *(void *)&a3);
}

int connectx( int a1, const sa_endpoints_t *a2, sae_associd_t a3, unsigned int a4, const iovec *a5, unsigned int a6, size_t *a7, sae_connid_t *a8)
{
  return MEMORY[0x1895FA5F8](*(void *)&a1, a2, *(void *)&a3, *(void *)&a4, a5, *(void *)&a6, a7, a8);
}

int deflate(z_streamp strm, int flush)
{
  return MEMORY[0x189617580](strm, *(void *)&flush);
}

int deflateEnd(z_streamp strm)
{
  return MEMORY[0x189617590](strm);
}

int deflateInit2_( z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char *version, int stream_size)
{
  return MEMORY[0x189617598]( strm,  *(void *)&level,  *(void *)&method,  *(void *)&windowBits,  *(void *)&memLevel,  *(void *)&strategy,  version,  *(void *)&stream_size);
}

int deflateReset(z_streamp strm)
{
  return MEMORY[0x1896175A8](strm);
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1895FABB0](flags, block);
}

dispatch_block_t dispatch_block_create_with_qos_class( dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1895FABB8](flags, *(void *)&qos_class, *(void *)&relative_priority, block);
}

BOOL dispatch_data_apply(dispatch_data_t data, dispatch_data_applier_t applier)
{
  return MEMORY[0x1895FABE8](data, applier);
}

dispatch_data_t dispatch_data_create( const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return (dispatch_data_t)MEMORY[0x1895FABF8](buffer, size, queue, destructor);
}

uint64_t dispatch_data_create_alloc()
{
  return MEMORY[0x1895FAC00]();
}

dispatch_data_t dispatch_data_create_concat(dispatch_data_t data1, dispatch_data_t data2)
{
  return (dispatch_data_t)MEMORY[0x1895FAC08](data1, data2);
}

dispatch_data_t dispatch_data_create_map(dispatch_data_t data, const void **buffer_ptr, size_t *size_ptr)
{
  return (dispatch_data_t)MEMORY[0x1895FAC10](data, buffer_ptr, size_ptr);
}

dispatch_data_t dispatch_data_create_subrange(dispatch_data_t data, size_t offset, size_t length)
{
  return (dispatch_data_t)MEMORY[0x1895FAC18](data, offset, length);
}

uint64_t dispatch_data_create_with_transform()
{
  return MEMORY[0x1895FAC20]();
}

size_t dispatch_data_get_size(dispatch_data_t data)
{
  return MEMORY[0x1895FAC28](data);
}

dispatch_queue_global_t dispatch_get_global_queue(uint64_t identifier, unint64_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1895FAC40](identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1895FAC60]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_io_close(dispatch_io_t channel, dispatch_io_close_flags_t flags)
{
}

dispatch_io_t dispatch_io_create( dispatch_io_type_t type, dispatch_fd_t fd, dispatch_queue_t queue, void *cleanup_handler)
{
  return (dispatch_io_t)MEMORY[0x1895FAC98](type, *(void *)&fd, queue, cleanup_handler);
}

void dispatch_io_read( dispatch_io_t channel, off_t offset, size_t length, dispatch_queue_t queue, dispatch_io_handler_t io_handler)
{
}

void dispatch_io_set_low_water(dispatch_io_t channel, size_t low_water)
{
}

void dispatch_io_write( dispatch_io_t channel, off_t offset, dispatch_data_t data, dispatch_queue_t queue, dispatch_io_handler_t io_handler)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency( dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1895FAD68](attr, frequency);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1895FAD80](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2( const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1895FAD90](label, attr, target);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

void dispatch_retain(dispatch_object_t object)
{
}

void dispatch_set_context(dispatch_object_t object, void *context)
{
}

uint64_t dispatch_set_qos_class_fallback()
{
  return MEMORY[0x1895FAE30]();
}

void dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue)
{
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create( dispatch_source_type_t type, uintptr_t handle, unint64_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1895FAE50](type, handle, mask, queue);
}

unint64_t dispatch_source_get_data(dispatch_source_t source)
{
  return MEMORY[0x1895FAE58](source);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer( dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_suspend(dispatch_object_t object)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1895FAEE8](when, delta);
}

dispatch_time_t dispatch_walltime(const timespec *when, int64_t delta)
{
  return MEMORY[0x1895FAEF0](when, delta);
}

uint64_t dispatch_workloop_copy_current()
{
  return MEMORY[0x1895FAEF8]();
}

dispatch_workloop_t dispatch_workloop_create_inactive(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x1895FAF08](label);
}

uint64_t dispatch_workloop_is_current()
{
  return MEMORY[0x1895FAF10]();
}

uint64_t dispatch_workloop_set_cpupercent()
{
  return MEMORY[0x1895FAF20]();
}

uint64_t dispatch_workloop_set_scheduler_priority()
{
  return MEMORY[0x1895FAF30]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1895FAF60](__path, *(void *)&__mode);
}

uint64_t dnssd_cname_array_get_cname()
{
  return MEMORY[0x189615028]();
}

uint64_t dnssd_cname_array_get_count()
{
  return MEMORY[0x189615030]();
}

uint64_t dnssd_getaddrinfo_activate()
{
  return MEMORY[0x189615038]();
}

uint64_t dnssd_getaddrinfo_add_resolver_uuid()
{
  return MEMORY[0x189615040]();
}

uint64_t dnssd_getaddrinfo_create()
{
  return MEMORY[0x189615048]();
}

uint64_t dnssd_getaddrinfo_invalidate()
{
  return MEMORY[0x189615050]();
}

uint64_t dnssd_getaddrinfo_prohibit_encrypted_dns()
{
  return MEMORY[0x189615058]();
}

uint64_t dnssd_getaddrinfo_result_enumerate_alpn_values()
{
  return MEMORY[0x189615060]();
}

uint64_t dnssd_getaddrinfo_result_enumerate_service_address_hints()
{
  return MEMORY[0x189615068]();
}

uint64_t dnssd_getaddrinfo_result_get_actual_hostname()
{
  return MEMORY[0x189615070]();
}

uint64_t dnssd_getaddrinfo_result_get_address()
{
  return MEMORY[0x189615078]();
}

uint64_t dnssd_getaddrinfo_result_get_cnames()
{
  return MEMORY[0x189615080]();
}

uint64_t dnssd_getaddrinfo_result_get_doh_uri()
{
  return MEMORY[0x189615088]();
}

uint64_t dnssd_getaddrinfo_result_get_ech_config()
{
  return MEMORY[0x189615090]();
}

uint64_t dnssd_getaddrinfo_result_get_extended_dns_error_code()
{
  return MEMORY[0x189615098]();
}

uint64_t dnssd_getaddrinfo_result_get_extended_dns_error_text()
{
  return MEMORY[0x1896150A0]();
}

uint64_t dnssd_getaddrinfo_result_get_hostname()
{
  return MEMORY[0x1896150A8]();
}

uint64_t dnssd_getaddrinfo_result_get_interface_index()
{
  return MEMORY[0x1896150B0]();
}

uint64_t dnssd_getaddrinfo_result_get_negative_reason()
{
  return MEMORY[0x1896150B8]();
}

uint64_t dnssd_getaddrinfo_result_get_protocol()
{
  return MEMORY[0x1896150C0]();
}

uint64_t dnssd_getaddrinfo_result_get_provider_name()
{
  return MEMORY[0x1896150C8]();
}

uint64_t dnssd_getaddrinfo_result_get_service_name()
{
  return MEMORY[0x1896150D0]();
}

uint64_t dnssd_getaddrinfo_result_get_service_port()
{
  return MEMORY[0x1896150D8]();
}

uint64_t dnssd_getaddrinfo_result_get_service_priority()
{
  return MEMORY[0x1896150E0]();
}

uint64_t dnssd_getaddrinfo_result_get_tracker_can_block_request()
{
  return MEMORY[0x1896150E8]();
}

uint64_t dnssd_getaddrinfo_result_get_tracker_hostname()
{
  return MEMORY[0x1896150F0]();
}

uint64_t dnssd_getaddrinfo_result_get_tracker_is_approved()
{
  return MEMORY[0x1896150F8]();
}

uint64_t dnssd_getaddrinfo_result_get_tracker_owner()
{
  return MEMORY[0x189615100]();
}

uint64_t dnssd_getaddrinfo_result_get_type()
{
  return MEMORY[0x189615108]();
}

uint64_t dnssd_getaddrinfo_result_get_validation_data()
{
  return MEMORY[0x189615110]();
}

uint64_t dnssd_getaddrinfo_result_has_extended_dns_error()
{
  return MEMORY[0x189615118]();
}

uint64_t dnssd_getaddrinfo_result_is_from_cache()
{
  return MEMORY[0x189615120]();
}

uint64_t dnssd_getaddrinfo_result_service_is_valid()
{
  return MEMORY[0x189615128]();
}

uint64_t dnssd_getaddrinfo_set_account_id()
{
  return MEMORY[0x189615130]();
}

uint64_t dnssd_getaddrinfo_set_delegate_audit_token()
{
  return MEMORY[0x189615138]();
}

uint64_t dnssd_getaddrinfo_set_delegate_pid()
{
  return MEMORY[0x189615140]();
}

uint64_t dnssd_getaddrinfo_set_delegate_uuid()
{
  return MEMORY[0x189615148]();
}

uint64_t dnssd_getaddrinfo_set_event_handler()
{
  return MEMORY[0x189615150]();
}

uint64_t dnssd_getaddrinfo_set_flags()
{
  return MEMORY[0x189615158]();
}

uint64_t dnssd_getaddrinfo_set_hostname()
{
  return MEMORY[0x189615160]();
}

uint64_t dnssd_getaddrinfo_set_interface_index()
{
  return MEMORY[0x189615168]();
}

uint64_t dnssd_getaddrinfo_set_log_privacy_level()
{
  return MEMORY[0x189615170]();
}

uint64_t dnssd_getaddrinfo_set_need_encrypted_query()
{
  return MEMORY[0x189615178]();
}

uint64_t dnssd_getaddrinfo_set_protocols()
{
  return MEMORY[0x189615180]();
}

uint64_t dnssd_getaddrinfo_set_queue()
{
  return MEMORY[0x189615188]();
}

uint64_t dnssd_getaddrinfo_set_result_handler()
{
  return MEMORY[0x189615190]();
}

uint64_t dnssd_getaddrinfo_set_service_scheme()
{
  return MEMORY[0x189615198]();
}

uint64_t dnssd_getaddrinfo_set_use_failover()
{
  return MEMORY[0x1896151A0]();
}

uint64_t dnssd_getaddrinfo_set_validation_data()
{
  return MEMORY[0x1896151A8]();
}

int dprintf(int a1, const char *a2, ...)
{
  return MEMORY[0x1895FAF98](*(void *)&a1, a2);
}

int dup(int a1)
{
  return MEMORY[0x1895FAFA8](*(void *)&a1);
}

uint64_t dyld_image_path_containing_address()
{
  return MEMORY[0x1895FB030]();
}

uint64_t dyld_program_minos_at_least()
{
  return MEMORY[0x1895FB080]();
}

void exit(int a1)
{
}

int fchmod(int a1, mode_t a2)
{
  return MEMORY[0x1895FB1E0](*(void *)&a1, a2);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1895FB210](*(void *)&a1, *(void *)&a2);
}

int ffsctl(int a1, unint64_t a2, void *a3, unsigned int a4)
{
  return MEMORY[0x1895FB270](*(void *)&a1, a2, a3, *(void *)&a4);
}

int flsll(uint64_t a1)
{
  return MEMORY[0x1895FB310](a1);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1895FB360](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1895FB370](*(void *)&a1, a2);
}

void free(void *a1)
{
}

void freeaddrinfo(addrinfo *a1)
{
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1895FB448](*(void *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1895FB4C8](__ptr, __size, __nitems, __stream);
}

const char *__cdecl gai_strerror(int a1)
{
  return (const char *)MEMORY[0x1895FB4D8](*(void *)&a1);
}

int getaddrinfo(const char *a1, const char *a2, const addrinfo *a3, addrinfo **a4)
{
  return MEMORY[0x1895FB4E0](a1, a2, a3, a4);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1895FB538](a1);
}

int getnameinfo(const sockaddr *a1, socklen_t a2, char *a3, socklen_t a4, char *a5, socklen_t a6, int a7)
{
  return MEMORY[0x1895FB5D8](a1, *(void *)&a2, a3, *(void *)&a4, a5, *(void *)&a6, *(void *)&a7);
}

int getpeername(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x1895FB610](*(void *)&a1, a2, a3);
}

pid_t getpid(void)
{
  return MEMORY[0x1895FB628]();
}

const char *getprogname(void)
{
  return (const char *)MEMORY[0x1895FB638]();
}

int getrlimit(int a1, rlimit *a2)
{
  return MEMORY[0x1895FB680](*(void *)&a1, a2);
}

servent *__cdecl getservbyport(int a1, const char *a2)
{
  return (servent *)MEMORY[0x1895FB6C0](*(void *)&a1, a2);
}

int getsockname(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x1895FB6D0](*(void *)&a1, a2, a3);
}

int getsockopt(int a1, int a2, int a3, void *a4, socklen_t *a5)
{
  return MEMORY[0x1895FB6D8](*(void *)&a1, *(void *)&a2, *(void *)&a3, a4, a5);
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1895FB6E0](a1, a2);
}

uid_t getuid(void)
{
  return MEMORY[0x1895FB6E8]();
}

uint64_t guarded_close_np()
{
  return MEMORY[0x1895FB730]();
}

char *__cdecl if_indextoname(unsigned int a1, char *a2)
{
  return (char *)MEMORY[0x1895FB7C8](*(void *)&a1, a2);
}

unsigned int if_nametoindex(const char *a1)
{
  return MEMORY[0x1895FB7D8](a1);
}

IMP imp_implementationWithBlock(id block)
{
  return (IMP)MEMORY[0x189616518](block);
}

const char *__cdecl inet_ntop(int a1, const void *a2, char *a3, socklen_t a4)
{
  return (const char *)MEMORY[0x1895FB838](*(void *)&a1, a2, a3, *(void *)&a4);
}

int inet_pton(int a1, const char *a2, void *a3)
{
  return MEMORY[0x1895FB840](*(void *)&a1, a2, a3);
}

int inflate(z_streamp strm, int flush)
{
  return MEMORY[0x189617608](strm, *(void *)&flush);
}

int inflateEnd(z_streamp strm)
{
  return MEMORY[0x189617610](strm);
}

int inflateInit2_(z_streamp strm, int windowBits, const char *version, int stream_size)
{
  return MEMORY[0x189617618](strm, *(void *)&windowBits, version, *(void *)&stream_size);
}

int inflateReset(z_streamp strm)
{
  return MEMORY[0x189617628](strm);
}

int ioctl(int a1, unint64_t a2, ...)
{
  return MEMORY[0x1895FB850](*(void *)&a1, a2);
}

uint64_t is_config_agent_type_dns()
{
  return MEMORY[0x1895FB858]();
}

uint64_t is_config_agent_type_proxy()
{
  return MEMORY[0x1895FB860]();
}

ptrdiff_t ivar_getOffset(Ivar v)
{
  return MEMORY[0x189616538](v);
}

uint64_t kdebug_is_enabled()
{
  return MEMORY[0x1895FB8B0]();
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1895FB8C0]();
}

int launch_activate_socket(const char *name, int **fds, size_t *cnt)
{
  return MEMORY[0x1895FB918](name, fds, cnt);
}

int listen(int a1, int a2)
{
  return MEMORY[0x1895FB9F8](*(void *)&a1, *(void *)&a2);
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x1895FBA20](a1, a2);
}

double log10(double a1)
{
  return result;
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x1895FBA80](*(void *)&a1, a2, *(void *)&a3);
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1895FBA98]();
}

uint64_t mach_boottime_usec()
{
  return MEMORY[0x1895FBAA0]();
}

uint64_t mach_continuous_approximate_time(void)
{
  return MEMORY[0x1895FBAA8]();
}

uint64_t mach_continuous_time(void)
{
  return MEMORY[0x1895FBAB0]();
}

uint64_t mach_get_times()
{
  return MEMORY[0x1895FBAC8]();
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x1895FBB28](*(void *)&task, *(void *)&name);
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1895FBBF8](info);
}

kern_return_t mach_vm_allocate(vm_map_t target, mach_vm_address_t *address, mach_vm_size_t size, int flags)
{
  return MEMORY[0x1895FBC00](*(void *)&target, address, size, *(void *)&flags);
}

kern_return_t mach_vm_deallocate(vm_map_t target, mach_vm_address_t address, mach_vm_size_t size)
{
  return MEMORY[0x1895FBC10](*(void *)&target, address, size);
}

kern_return_t mach_vm_purgable_control( vm_map_t target_task, mach_vm_address_t address, vm_purgable_t control, int *state)
{
  return MEMORY[0x1895FBC30](*(void *)&target_task, address, *(void *)&control, state);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1895FBC88](__size);
}

malloc_zone_t *__cdecl malloc_create_zone(vm_size_t start_size, unsigned int flags)
{
  return (malloc_zone_t *)MEMORY[0x1895FBC98](start_size, *(void *)&flags);
}

void malloc_set_zone_name(malloc_zone_t *zone, const char *name)
{
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1895FBCE0](ptr);
}

void *__cdecl malloc_zone_calloc(malloc_zone_t *zone, size_t num_items, size_t size)
{
  return (void *)MEMORY[0x1895FBD10](zone, num_items, size);
}

void malloc_zone_free(malloc_zone_t *zone, void *ptr)
{
}

void *__cdecl malloc_zone_memalign(malloc_zone_t *zone, size_t alignment, size_t size)
{
  return (void *)MEMORY[0x1895FBD40](zone, alignment, size);
}

void *__cdecl memchr(const void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1895FBE00](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1895FBE08](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1895FBE18](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1895FBE30](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1895FBE48](__b, *(void *)&__c, __len);
}

IMP method_getImplementation(Method m)
{
  return (IMP)MEMORY[0x189616570](m);
}

SEL method_getName(Method m)
{
  return (SEL)MEMORY[0x189616578](m);
}

const char *__cdecl method_getTypeEncoding(Method m)
{
  return (const char *)MEMORY[0x189616590](m);
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x1895FBEF0](a1, a2);
}

int mkstemps(char *a1, int a2)
{
  return MEMORY[0x1895FBF48](a1, *(void *)&a2);
}

uint64_t ne_session_agent_get_advisory()
{
  return MEMORY[0x1895FBFC8]();
}

uint64_t ne_session_always_on_vpn_configs_present()
{
  return MEMORY[0x1895FBFD0]();
}

uint64_t ne_session_app_vpn_configs_present()
{
  return MEMORY[0x1895FBFD8]();
}

uint64_t ne_session_copy_app_data_from_flow_divert_socket()
{
  return MEMORY[0x1895FBFE8]();
}

uint64_t ne_session_get_config_id_from_network_agent()
{
  return MEMORY[0x1895FC000]();
}

uint64_t ne_session_policy_copy_flow_divert_token()
{
  return MEMORY[0x1895FC020]();
}

uint64_t ne_session_service_get_dns_service_id_for_interface()
{
  return MEMORY[0x1895FC060]();
}

uint64_t ne_session_service_matches_address_for_interface()
{
  return MEMORY[0x1895FC068]();
}

uint64_t ne_tracker_check_is_hostname_blocked()
{
  return MEMORY[0x1895FC0A8]();
}

uint64_t ne_tracker_copy_current_stacktrace()
{
  return MEMORY[0x1895FC0E0]();
}

uint64_t ne_tracker_create_xcode_issue()
{
  return MEMORY[0x1895FC0E8]();
}

uint64_t ne_tracker_get_disposition()
{
  return MEMORY[0x1895FC0F0]();
}

uint64_t ne_tracker_should_save_stacktrace()
{
  return MEMORY[0x1895FC100]();
}

uint64_t necp_client_action()
{
  return MEMORY[0x1895FC118]();
}

uint64_t necp_open()
{
  return MEMORY[0x1895FC128]();
}

uint64_t nghttp2_http2_strerror()
{
  return MEMORY[0x189613B58]();
}

uint64_t nghttp2_option_del()
{
  return MEMORY[0x189613B60]();
}

uint64_t nghttp2_option_new()
{
  return MEMORY[0x189613B68]();
}

uint64_t nghttp2_option_set_no_auto_window_update()
{
  return MEMORY[0x189613B70]();
}

uint64_t nghttp2_option_set_no_closed_streams()
{
  return MEMORY[0x189613B78]();
}

uint64_t nghttp2_option_set_no_http_messaging()
{
  return MEMORY[0x189613B80]();
}

uint64_t nghttp2_option_set_no_http_semantics()
{
  return MEMORY[0x189613B88]();
}

uint64_t nghttp2_option_set_no_rfc9113_leading_and_trailing_ws_validation()
{
  return MEMORY[0x189613B90]();
}

uint64_t nghttp2_option_set_peer_max_concurrent_streams()
{
  return MEMORY[0x189613B98]();
}

uint64_t nghttp2_priority_spec_init()
{
  return MEMORY[0x189613BA0]();
}

uint64_t nghttp2_session_callbacks_del()
{
  return MEMORY[0x189613BA8]();
}

uint64_t nghttp2_session_callbacks_new()
{
  return MEMORY[0x189613BB0]();
}

uint64_t nghttp2_session_callbacks_set_before_frame_send_callback()
{
  return MEMORY[0x189613BB8]();
}

uint64_t nghttp2_session_callbacks_set_error_callback2()
{
  return MEMORY[0x189613BC0]();
}

uint64_t nghttp2_session_callbacks_set_on_begin_headers_callback()
{
  return MEMORY[0x189613BC8]();
}

uint64_t nghttp2_session_callbacks_set_on_data_chunk_recv_callback()
{
  return MEMORY[0x189613BD0]();
}

uint64_t nghttp2_session_callbacks_set_on_frame_not_send_callback()
{
  return MEMORY[0x189613BD8]();
}

uint64_t nghttp2_session_callbacks_set_on_frame_recv_callback()
{
  return MEMORY[0x189613BE0]();
}

uint64_t nghttp2_session_callbacks_set_on_frame_send_callback()
{
  return MEMORY[0x189613BE8]();
}

uint64_t nghttp2_session_callbacks_set_on_header_callback()
{
  return MEMORY[0x189613BF0]();
}

uint64_t nghttp2_session_callbacks_set_on_invalid_frame_recv_callback()
{
  return MEMORY[0x189613BF8]();
}

uint64_t nghttp2_session_callbacks_set_on_stream_close_callback()
{
  return MEMORY[0x189613C08]();
}

uint64_t nghttp2_session_callbacks_set_send_callback()
{
  return MEMORY[0x189613C10]();
}

uint64_t nghttp2_session_callbacks_set_send_data_callback()
{
  return MEMORY[0x189613C18]();
}

uint64_t nghttp2_session_client_new2()
{
  return MEMORY[0x189613C20]();
}

uint64_t nghttp2_session_consume_connection()
{
  return MEMORY[0x189613C28]();
}

uint64_t nghttp2_session_consume_stream()
{
  return MEMORY[0x189613C30]();
}

uint64_t nghttp2_session_del()
{
  return MEMORY[0x189613C38]();
}

uint64_t nghttp2_session_get_remote_window_size()
{
  return MEMORY[0x189613C50]();
}

uint64_t nghttp2_session_get_stream_remote_window_size()
{
  return MEMORY[0x189613C58]();
}

uint64_t nghttp2_session_mem_recv()
{
  return MEMORY[0x189613C68]();
}

uint64_t nghttp2_session_send()
{
  return MEMORY[0x189613C80]();
}

uint64_t nghttp2_session_server_new2()
{
  return MEMORY[0x189613C88]();
}

uint64_t nghttp2_session_set_local_window_size()
{
  return MEMORY[0x189613C90]();
}

uint64_t nghttp2_session_want_write()
{
  return MEMORY[0x189613CB8]();
}

uint64_t nghttp2_set_debug_vprintf_callback()
{
  return MEMORY[0x189613CC0]();
}

uint64_t nghttp2_strerror()
{
  return MEMORY[0x189613CC8]();
}

uint64_t nghttp2_submit_data()
{
  return MEMORY[0x189613CD0]();
}

uint64_t nghttp2_submit_goaway()
{
  return MEMORY[0x189613CD8]();
}

uint64_t nghttp2_submit_headers()
{
  return MEMORY[0x189613CE0]();
}

uint64_t nghttp2_submit_ping()
{
  return MEMORY[0x189613CE8]();
}

uint64_t nghttp2_submit_rst_stream()
{
  return MEMORY[0x189613D00]();
}

uint64_t nghttp2_submit_settings()
{
  return MEMORY[0x189613D08]();
}

uint64_t nghttp2_submit_window_update()
{
  return MEMORY[0x189613D10]();
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1895FC188](*(void *)&token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1895FC198](*(void *)&token, state64);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1895FC1B0](name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x1895FC1B8](name, out_token);
}

uint32_t notify_register_dispatch( const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1895FC1C0](name, out_token, queue, handler);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return MEMORY[0x1895FC1E8](*(void *)&token, state64);
}

uint64_t nw_protocol_boringssl_copy_definition()
{
  return MEMORY[0x1896140C8]();
}

uint64_t nw_protocol_boringssl_identifier()
{
  return MEMORY[0x1896140D0]();
}

uint64_t nw_protocol_tcp_identifier()
{
  return MEMORY[0x1896173A8]();
}

uint64_t nw_tcp_destroy_globals()
{
  return MEMORY[0x1896173B0]();
}

uint64_t nw_tcp_init_globals()
{
  return MEMORY[0x1896173B8]();
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1896165B0](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1896165B8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1896165C0]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1896165D8](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1896165F0](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1896165F8](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x189616600]();
}

id objc_constructInstance(Class cls, void *bytes)
{
  return (id)MEMORY[0x189616608](cls, bytes);
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void *__cdecl objc_destructInstance(id obj)
{
  return (void *)MEMORY[0x189616668](obj);
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_rethrow(void)
{
}

void objc_exception_throw(id exception)
{
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1896166B8](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1896166C8](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1896166D8](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x189616700](location);
}

void objc_moveWeak(id *to, id *from)
{
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x189616718](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x189616728](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x189616730]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x189616738]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x189616740]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x189616748]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x189616750]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x189616818](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x189616820](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x189616828](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x189616830](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x189616838](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x189616968](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x189616978](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x189616980](obj);
}

void objc_terminate(void)
{
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x189616990](a1);
}

Class object_getClass(id a1)
{
  return (Class)MEMORY[0x1896169A8](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1895FC248](a1, *(void *)&a2);
}

uint64_t os_buflet_get_data_length()
{
  return MEMORY[0x1895FC2C8]();
}

uint64_t os_buflet_get_data_limit()
{
  return MEMORY[0x1895FC2D0]();
}

uint64_t os_buflet_get_data_offset()
{
  return MEMORY[0x1895FC2D8]();
}

uint64_t os_buflet_get_object_address()
{
  return MEMORY[0x1895FC2E0]();
}

uint64_t os_buflet_set_data_length()
{
  return MEMORY[0x1895FC2E8]();
}

uint64_t os_channel_advance_slot()
{
  return MEMORY[0x1895FC2F0]();
}

uint64_t os_channel_attr_create()
{
  return MEMORY[0x1895FC2F8]();
}

uint64_t os_channel_attr_destroy()
{
  return MEMORY[0x1895FC300]();
}

uint64_t os_channel_attr_get()
{
  return MEMORY[0x1895FC308]();
}

uint64_t os_channel_attr_set()
{
  return MEMORY[0x1895FC310]();
}

uint64_t os_channel_attr_set_key()
{
  return MEMORY[0x1895FC318]();
}

uint64_t os_channel_available_slot_count()
{
  return MEMORY[0x1895FC320]();
}

uint64_t os_channel_configure_interface_advisory()
{
  return MEMORY[0x1895FC328]();
}

uint64_t os_channel_create_extended()
{
  return MEMORY[0x1895FC330]();
}

uint64_t os_channel_destroy()
{
  return MEMORY[0x1895FC338]();
}

uint64_t os_channel_event_free()
{
  return MEMORY[0x1895FC340]();
}

uint64_t os_channel_event_get_event_data()
{
  return MEMORY[0x1895FC348]();
}

uint64_t os_channel_event_get_next_event()
{
  return MEMORY[0x1895FC350]();
}

uint64_t os_channel_flow_admissible()
{
  return MEMORY[0x1895FC358]();
}

uint64_t os_channel_flow_adv_get_ce_count()
{
  return MEMORY[0x1895FC360]();
}

uint64_t os_channel_get_advisory_region()
{
  return MEMORY[0x1895FC368]();
}

uint64_t os_channel_get_fd()
{
  return MEMORY[0x1895FC370]();
}

uint64_t os_channel_get_interface_advisory()
{
  return MEMORY[0x1895FC378]();
}

uint64_t os_channel_get_next_event_handle()
{
  return MEMORY[0x1895FC380]();
}

uint64_t os_channel_get_next_slot()
{
  return MEMORY[0x1895FC388]();
}

uint64_t os_channel_get_stats_region()
{
  return MEMORY[0x1895FC390]();
}

uint64_t os_channel_is_defunct()
{
  return MEMORY[0x1895FC398]();
}

uint64_t os_channel_large_packet_alloc()
{
  return MEMORY[0x1895FC3A0]();
}

uint64_t os_channel_packet_alloc()
{
  return MEMORY[0x1895FC3A8]();
}

uint64_t os_channel_packet_free()
{
  return MEMORY[0x1895FC3B0]();
}

uint64_t os_channel_packet_pool_purge()
{
  return MEMORY[0x1895FC3B8]();
}

uint64_t os_channel_read_attr()
{
  return MEMORY[0x1895FC3C0]();
}

uint64_t os_channel_ring_id()
{
  return MEMORY[0x1895FC3C8]();
}

uint64_t os_channel_rx_ring()
{
  return MEMORY[0x1895FC3D0]();
}

uint64_t os_channel_slot_attach_packet()
{
  return MEMORY[0x1895FC3E0]();
}

uint64_t os_channel_slot_detach_packet()
{
  return MEMORY[0x1895FC3E8]();
}

uint64_t os_channel_slot_get_packet()
{
  return MEMORY[0x1895FC3F0]();
}

uint64_t os_channel_sync()
{
  return MEMORY[0x1895FC3F8]();
}

uint64_t os_channel_tx_ring()
{
  return MEMORY[0x1895FC400]();
}

uint64_t os_inet_checksum()
{
  return MEMORY[0x1895FC418]();
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1895FC440](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1895FC470](oslog, type);
}

uint64_t os_nexus_attr_create()
{
  return MEMORY[0x1895FC488]();
}

uint64_t os_nexus_attr_destroy()
{
  return MEMORY[0x1895FC490]();
}

uint64_t os_nexus_attr_get()
{
  return MEMORY[0x1895FC498]();
}

uint64_t os_nexus_attr_set()
{
  return MEMORY[0x1895FC4A0]();
}

uint64_t os_nexus_controller_alloc_provider_instance()
{
  return MEMORY[0x1895FC4A8]();
}

uint64_t os_nexus_controller_bind_provider_instance()
{
  return MEMORY[0x1895FC4B0]();
}

uint64_t os_nexus_controller_create()
{
  return MEMORY[0x1895FC4B8]();
}

uint64_t os_nexus_controller_destroy()
{
  return MEMORY[0x1895FC4C0]();
}

uint64_t os_nexus_controller_free_provider_instance()
{
  return MEMORY[0x1895FC4C8]();
}

uint64_t os_nexus_controller_read_provider_attr()
{
  return MEMORY[0x1895FC4D0]();
}

uint64_t os_nexus_controller_register_provider()
{
  return MEMORY[0x1895FC4D8]();
}

uint64_t os_packet_add_inet_csum_flags()
{
  return MEMORY[0x1895FC4E8]();
}

uint64_t os_packet_decrement_use_count()
{
  return MEMORY[0x1895FC4F0]();
}

uint64_t os_packet_finalize()
{
  return MEMORY[0x1895FC4F8]();
}

uint64_t os_packet_get_aggregation_type()
{
  return MEMORY[0x1895FC500]();
}

uint64_t os_packet_get_buflet_count()
{
  return MEMORY[0x1895FC508]();
}

uint64_t os_packet_get_data_length()
{
  return MEMORY[0x1895FC510]();
}

uint64_t os_packet_get_flow_uuid()
{
  return MEMORY[0x1895FC518]();
}

uint64_t os_packet_get_inet_checksum()
{
  return MEMORY[0x1895FC520]();
}

uint64_t os_packet_get_next_buflet()
{
  return MEMORY[0x1895FC528]();
}

uint64_t os_packet_get_segment_count()
{
  return MEMORY[0x1895FC530]();
}

uint64_t os_packet_get_trace_id()
{
  return MEMORY[0x1895FC538]();
}

uint64_t os_packet_get_wake_flag()
{
  return MEMORY[0x1895FC540]();
}

uint64_t os_packet_increment_use_count()
{
  return MEMORY[0x1895FC548]();
}

uint64_t os_packet_set_app_metadata()
{
  return MEMORY[0x1895FC550]();
}

uint64_t os_packet_set_compression_generation_count()
{
  return MEMORY[0x1895FC558]();
}

uint64_t os_packet_set_expire_time()
{
  return MEMORY[0x1895FC560]();
}

uint64_t os_packet_set_flow_uuid()
{
  return MEMORY[0x1895FC568]();
}

uint64_t os_packet_set_inet_checksum()
{
  return MEMORY[0x1895FC570]();
}

uint64_t os_packet_set_keep_alive()
{
  return MEMORY[0x1895FC578]();
}

uint64_t os_packet_set_l4s_flag()
{
  return MEMORY[0x1895FC580]();
}

uint64_t os_packet_set_packetid()
{
  return MEMORY[0x1895FC588]();
}

uint64_t os_packet_set_protocol_segment_size()
{
  return MEMORY[0x1895FC590]();
}

uint64_t os_packet_set_service_class()
{
  return MEMORY[0x1895FC598]();
}

uint64_t os_packet_set_transport_last_packet()
{
  return MEMORY[0x1895FC5A0]();
}

uint64_t os_packet_set_transport_retransmit()
{
  return MEMORY[0x1895FC5A8]();
}

uint64_t os_packet_set_transport_traffic_background()
{
  return MEMORY[0x1895FC5B0]();
}

uint64_t os_packet_set_transport_traffic_realtime()
{
  return MEMORY[0x1895FC5B8]();
}

uint64_t os_packet_set_tso_flags()
{
  return MEMORY[0x1895FC5C0]();
}

uint64_t os_packet_set_tx_timestamp()
{
  return MEMORY[0x1895FC5C8]();
}

uint64_t os_packet_trace_event()
{
  return MEMORY[0x1895FC5D0]();
}

void os_release(void *object)
{
}

void *__cdecl os_retain(void *object)
{
  return (void *)MEMORY[0x1895FC5F8](object);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1895FC600](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1895FC608](log);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1895FC640]();
}

void os_unfair_lock_assert_owner(os_unfair_lock_t lock)
{
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_allows_internal_security_policies()
{
  return MEMORY[0x1895FC6A8]();
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x1895FC6C0]();
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1895FC6C8]();
}

int posix_memalign(void **__memptr, size_t __alignment, size_t __size)
{
  return MEMORY[0x1895FC7D8](__memptr, __alignment, __size);
}

ssize_t pread(int __fd, void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x1895FC880](*(void *)&__fd, __buf, __nbyte, a4);
}

int proc_pidinfo(int pid, int flavor, uint64_t arg, void *buffer, int buffersize)
{
  return MEMORY[0x1895FC8E0](*(void *)&pid, *(void *)&flavor, arg, buffer, *(void *)&buffersize);
}

int pthread_atfork(void (*a1)(void), void (*a2)(void), void (*a3)(void))
{
  return MEMORY[0x1895FC938](a1, a2, a3);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1895FCA90](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1895FCA98](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1895FCAA8](a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1895FCAB8](a1);
}

int pthread_mutexattr_settype(pthread_mutexattr_t *a1, int a2)
{
  return MEMORY[0x1895FCAC0](a1, *(void *)&a2);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x1895FCAC8](a1, a2);
}

int pthread_rwlock_unlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1895FCB10](a1);
}

int pthread_rwlock_wrlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1895FCB18](a1);
}

int pthread_threadid_np(pthread_t a1, __uint64_t *a2)
{
  return MEMORY[0x1895FCB68](a1, a2);
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x1895FCBB8]();
}

uint64_t qpod_conn_create()
{
  return MEMORY[0x189617028]();
}

uint64_t qpod_conn_decode_datagram()
{
  return MEMORY[0x189617030]();
}

uint64_t qpod_conn_encode_datagram()
{
  return MEMORY[0x189617038]();
}

uint64_t qpod_conn_free()
{
  return MEMORY[0x189617040]();
}

uint64_t quic_fillout_definition_callbacks()
{
  return MEMORY[0x189617048]();
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1895FCC38](*(void *)&a1, a2, a3);
}

void *__cdecl realloc(void *__ptr, size_t __size)
{
  return (void *)MEMORY[0x1895FCC68](__ptr, __size);
}

void *__cdecl reallocf(void *__ptr, size_t __size)
{
  return (void *)MEMORY[0x1895FCC70](__ptr, __size);
}

ssize_t recv(int a1, void *a2, size_t a3, int a4)
{
  return MEMORY[0x1895FCCA8](*(void *)&a1, a2, a3, *(void *)&a4);
}

ssize_t recvmsg(int a1, msghdr *a2, int a3)
{
  return MEMORY[0x1895FCCB8](*(void *)&a1, a2, *(void *)&a3);
}

uint64_t sandbox_check()
{
  return MEMORY[0x1895FCD90]();
}

SecCertificateRef sec_certificate_copy_ref(sec_certificate_t certificate)
{
  return (SecCertificateRef)MEMORY[0x18960BEB8](certificate);
}

uint64_t sec_experiment_run_async_with_sampling_disabled()
{
  return MEMORY[0x18960BEC8]();
}

SecIdentityRef sec_identity_copy_ref(sec_identity_t identity)
{
  return (SecIdentityRef)MEMORY[0x18960BED8](identity);
}

sec_identity_t sec_identity_create(SecIdentityRef identity)
{
  return (sec_identity_t)MEMORY[0x18960BEE0](identity);
}

sec_identity_t sec_identity_create_with_certificates(SecIdentityRef identity, CFArrayRef certificates)
{
  return (sec_identity_t)MEMORY[0x18960BEF0](identity, certificates);
}

uint64_t sec_protocol_configuration_copy_singleton()
{
  return MEMORY[0x18960BEF8]();
}

uint64_t sec_protocol_configuration_copy_transformed_options_for_host()
{
  return MEMORY[0x18960BF00]();
}

uint64_t sec_protocol_configuration_tls_required()
{
  return MEMORY[0x18960BF08]();
}

uint64_t sec_protocol_configuration_tls_required_for_host()
{
  return MEMORY[0x18960BF10]();
}

BOOL sec_protocol_metadata_access_distinguished_names(sec_protocol_metadata_t metadata, void *handler)
{
  return MEMORY[0x18960BF20](metadata, handler);
}

BOOL sec_protocol_metadata_access_peer_certificate_chain(sec_protocol_metadata_t metadata, void *handler)
{
  return MEMORY[0x18960BF28](metadata, handler);
}

uint64_t sec_protocol_metadata_copy_authenticator()
{
  return MEMORY[0x18960BF40]();
}

uint64_t sec_protocol_metadata_copy_authenticator_trust()
{
  return MEMORY[0x18960BF48]();
}

uint64_t sec_protocol_metadata_copy_connection_id()
{
  return MEMORY[0x18960BF50]();
}

uint64_t sec_protocol_metadata_copy_sec_trust()
{
  return MEMORY[0x18960BF68]();
}

dispatch_data_t sec_protocol_metadata_create_secret( sec_protocol_metadata_t metadata, size_t label_len, const char *label, size_t exporter_length)
{
  return (dispatch_data_t)MEMORY[0x18960BF78](metadata, label_len, label, exporter_length);
}

const char *__cdecl sec_protocol_metadata_get_negotiated_protocol(sec_protocol_metadata_t metadata)
{
  return (const char *)MEMORY[0x18960BF90](metadata);
}

SSLProtocol sec_protocol_metadata_get_negotiated_protocol_version(sec_protocol_metadata_t metadata)
{
  return MEMORY[0x18960BF98](metadata);
}

tls_ciphersuite_t sec_protocol_metadata_get_negotiated_tls_ciphersuite(sec_protocol_metadata_t metadata)
{
  return (unsigned __int16)MEMORY[0x18960BFA0](metadata);
}

tls_protocol_version_t sec_protocol_metadata_get_negotiated_tls_protocol_version( sec_protocol_metadata_t metadata)
{
  return (unsigned __int16)MEMORY[0x18960BFA8](metadata);
}

BOOL sec_protocol_metadata_peers_are_equal( sec_protocol_metadata_t metadataA, sec_protocol_metadata_t metadataB)
{
  return MEMORY[0x18960BFB0](metadataA, metadataB);
}

uint64_t sec_protocol_options_access_handle()
{
  return MEMORY[0x18960BFB8]();
}

void sec_protocol_options_add_tls_application_protocol( sec_protocol_options_t options, const char *application_protocol)
{
}

uint64_t sec_protocol_options_add_tls_key_exchange_group()
{
  return MEMORY[0x18960BFE0]();
}

uint64_t sec_protocol_options_add_transport_specific_application_protocol()
{
  return MEMORY[0x18960BFE8]();
}

void sec_protocol_options_append_tls_ciphersuite(sec_protocol_options_t options, tls_ciphersuite_t ciphersuite)
{
}

void sec_protocol_options_append_tls_ciphersuite_group( sec_protocol_options_t options, tls_ciphersuite_group_t group)
{
}

uint64_t sec_protocol_options_apply_config()
{
  return MEMORY[0x18960C000]();
}

uint64_t sec_protocol_options_clear_tls_application_protocols()
{
  return MEMORY[0x18960C008]();
}

uint64_t sec_protocol_options_copy_transport_specific_application_protocol()
{
  return MEMORY[0x18960C018]();
}

BOOL sec_protocol_options_get_enable_encrypted_client_hello(sec_protocol_options_t options)
{
  return MEMORY[0x18960C030](options);
}

uint64_t sec_protocol_options_matches_config()
{
  return MEMORY[0x18960C040]();
}

void sec_protocol_options_set_challenge_block( sec_protocol_options_t options, sec_protocol_challenge_t challenge_block, dispatch_queue_t challenge_queue)
{
}

uint64_t sec_protocol_options_set_client_raw_public_key_certificates()
{
  return MEMORY[0x18960C058]();
}

uint64_t sec_protocol_options_set_connection_id()
{
  return MEMORY[0x18960C060]();
}

void sec_protocol_options_set_enable_encrypted_client_hello( sec_protocol_options_t options, BOOL enable_encrypted_client_hello)
{
}

uint64_t sec_protocol_options_set_experiment_identifier()
{
  return MEMORY[0x18960C070]();
}

void sec_protocol_options_set_local_identity(sec_protocol_options_t options, sec_identity_t identity)
{
}

void sec_protocol_options_set_max_tls_protocol_version( sec_protocol_options_t options, tls_protocol_version_t version)
{
}

void sec_protocol_options_set_min_tls_protocol_version( sec_protocol_options_t options, tls_protocol_version_t version)
{
}

uint64_t sec_protocol_options_set_new_session_ticket_request()
{
  return MEMORY[0x18960C090]();
}

uint64_t sec_protocol_options_set_nw_protocol_joining_context()
{
  return MEMORY[0x18960C098]();
}

void sec_protocol_options_set_peer_authentication_required( sec_protocol_options_t options, BOOL peer_authentication_required)
{
}

uint64_t sec_protocol_options_set_resumed_session_ticket_request()
{
  return MEMORY[0x18960C0C8]();
}

uint64_t sec_protocol_options_set_server_raw_public_key_certificates()
{
  return MEMORY[0x18960C0D0]();
}

uint64_t sec_protocol_options_set_tls_early_data_enabled()
{
  return MEMORY[0x18960C0F8]();
}

void sec_protocol_options_set_tls_max_version(sec_protocol_options_t options, SSLProtocol version)
{
}

void sec_protocol_options_set_tls_min_version(sec_protocol_options_t options, SSLProtocol version)
{
}

void sec_protocol_options_set_tls_server_name(sec_protocol_options_t options, const char *server_name)
{
}

void sec_protocol_options_set_tls_tickets_enabled(sec_protocol_options_t options, BOOL tickets_enabled)
{
}

void sec_protocol_options_set_verify_block( sec_protocol_options_t options, sec_protocol_verify_t verify_block, dispatch_queue_t verify_block_queue)
{
}

SecTrustRef sec_trust_copy_ref(sec_trust_t trust)
{
  return (SecTrustRef)MEMORY[0x18960C168](trust);
}

const char *__cdecl sel_getName(SEL sel)
{
  return (const char *)MEMORY[0x189616A48](sel);
}

SEL sel_registerName(const char *str)
{
  return (SEL)MEMORY[0x189616A68](str);
}

ssize_t send(int a1, const void *a2, size_t a3, int a4)
{
  return MEMORY[0x1895FCE30](*(void *)&a1, a2, a3, *(void *)&a4);
}

ssize_t sendmsg(int a1, const msghdr *a2, int a3)
{
  return MEMORY[0x1895FCE38](*(void *)&a1, a2, *(void *)&a3);
}

ssize_t sendto(int a1, const void *a2, size_t a3, int a4, const sockaddr *a5, socklen_t a6)
{
  return MEMORY[0x1895FCE48](*(void *)&a1, a2, a3, *(void *)&a4, a5, *(void *)&a6);
}

int setrlimit(int a1, const rlimit *a2)
{
  return MEMORY[0x1895FCEB8](*(void *)&a1, a2);
}

int setsockopt(int a1, int a2, int a3, const void *a4, socklen_t a5)
{
  return MEMORY[0x1895FCEC8](*(void *)&a1, *(void *)&a2, *(void *)&a3, a4, *(void *)&a5);
}

int shutdown(int a1, int a2)
{
  return MEMORY[0x1895FCEF8](*(void *)&a1, *(void *)&a2);
}

uint64_t si_set_nat64_v4_requires_synthesis()
{
  return MEMORY[0x1895FCF30]();
}

uint64_t si_set_nat64_v4_synthesize()
{
  return MEMORY[0x1895FCF38]();
}

uint64_t si_set_path_check()
{
  return MEMORY[0x1895FCF40]();
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1895FCF90](__str, __size, __format);
}

int socket(int a1, int a2, int a3)
{
  return MEMORY[0x1895FCFA0](*(void *)&a1, *(void *)&a2, *(void *)&a3);
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1896170C0](a1, *(void *)&a2, a3, *(void *)&n, a5);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1896170F8](a1, *(void *)&a2, a3, *(void *)&a4, a5);
}

int sqlite3_busy_timeout(sqlite3 *a1, int ms)
{
  return MEMORY[0x189617108](a1, *(void *)&ms);
}

int sqlite3_close(sqlite3 *a1)
{
  return MEMORY[0x189617120](a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return (const void *)MEMORY[0x189617130](a1, *(void *)&iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x189617138](a1, *(void *)&iCol);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return (const unsigned __int8 *)MEMORY[0x189617178](a1, *(void *)&iCol);
}

int sqlite3_exec( sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return MEMORY[0x1896171D8](a1, sql, callback, a4, errmsg);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return MEMORY[0x189617200](pStmt);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return MEMORY[0x189617260](filename, ppDb, *(void *)&flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x189617270](db, zSql, *(void *)&nByte, ppStmt, pzTail);
}

int sqlite3_reset(sqlite3_stmt *pStmt)
{
  return MEMORY[0x189617288](pStmt);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return MEMORY[0x189617300](a1);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1895FD010](a1, a2);
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x1895FD030](a1, a2);
}

char *__cdecl strcasestr(const char *__big, const char *__little)
{
  return (char *)MEMORY[0x1895FD038](__big, __little);
}

char *__cdecl strchr(const char *__s, int __c)
{
  return (char *)MEMORY[0x1895FD048](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1895FD050](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1895FD078](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1895FD080](*(void *)&__errnum);
}

int strerror_r(int __errnum, char *__strerrbuf, size_t __buflen)
{
  return MEMORY[0x1895FD088](*(void *)&__errnum, __strerrbuf, __buflen);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x1895FD090](a1, a2, a3, a4);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1895FD0B0](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1895FD0B8](__s);
}

int strncasecmp(const char *a1, const char *a2, size_t a3)
{
  return MEMORY[0x1895FD0D0](a1, a2, a3);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1895FD0E8](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1895FD0F0](__dst, __src, __n);
}

char *__cdecl strndup(const char *__s1, size_t __n)
{
  return (char *)MEMORY[0x1895FD0F8](__s1, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1895FD100](__s1, __n);
}

char *__cdecl strnstr(const char *__big, const char *__little, size_t __len)
{
  return (char *)MEMORY[0x1895FD108](__big, __little, __len);
}

char *__cdecl strstr(const char *__big, const char *__little)
{
  return (char *)MEMORY[0x1895FD148](__big, __little);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1895FD180](__str, __endptr, *(void *)&__base);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1895FD1C8](__str, __endptr, *(void *)&__base);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x18961B0A0]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x18961B0A8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x18961B0B0]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x18961B0B8]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x18961B0C0]();
}

uint64_t swift_allocateMetadataPack()
{
  return MEMORY[0x18961B0C8]();
}

uint64_t swift_allocateWitnessTablePack()
{
  return MEMORY[0x18961B0D0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x18961B0D8]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x18961B0E0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x18961B0E8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x18961B0F0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x18961B0F8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x18961B108]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x18961B110]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x18961B118]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x18961B120]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x18961B128]();
}

uint64_t swift_conformsToProtocol()
{
  return MEMORY[0x18961B138]();
}

uint64_t swift_conformsToProtocol2()
{
  return MEMORY[0x18961B140]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x18961B150]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x18961B158]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x18961B160]();
}

uint64_t swift_defaultActor_deallocate()
{
  return MEMORY[0x18961BFE0]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x18961BFE8]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x18961BFF0]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x18961B180]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x18961B188]();
}

uint64_t swift_dynamicCastClassUnconditional()
{
  return MEMORY[0x18961B190]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x18961B198]();
}

uint64_t swift_dynamicCastObjCClassUnconditional()
{
  return MEMORY[0x18961B1B0]();
}

uint64_t swift_dynamicCastUnknownClassUnconditional()
{
  return MEMORY[0x18961B1D0]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x18961B1D8]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x18961B1E8]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x18961B1F0]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x18961B218]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x18961B220]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x18961B248]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x18961B250]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x18961B258]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x18961B270]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x18961B290]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x18961B2A0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x18961B2B8]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x18961B2C0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x18961B2D0]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x18961B2E0]();
}

uint64_t swift_getTupleTypeLayout3()
{
  return MEMORY[0x18961B2E8]();
}

uint64_t swift_getTupleTypeMetadata()
{
  return MEMORY[0x18961B2F0]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x18961B2F8]();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return MEMORY[0x18961B300]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x18961B310]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x18961B318]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x18961B328]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x18961B330]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x18961B338]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x18961B348]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x18961B358]();
}

uint64_t swift_isClassType()
{
  return MEMORY[0x18961B360]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x18961B368]();
}

uint64_t swift_isUniquelyReferenced_native()
{
  return MEMORY[0x18961B378]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x18961B388]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x18961B390]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x18961B3A0]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x18961B3A8]();
}

uint64_t swift_once()
{
  return MEMORY[0x18961B3B8]();
}

uint64_t swift_release()
{
  return MEMORY[0x18961B3C8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x18961B3D0]();
}

uint64_t swift_retain()
{
  return MEMORY[0x18961B3E0]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x18961B3E8]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x18961B408]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x18961B410]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x18961B418]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x18961B420]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x18961B428]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x18961B430]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x18961B438]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x18961C008]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x18961C010]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x18961C018]();
}

uint64_t swift_task_localValuePop()
{
  return MEMORY[0x18961C028]();
}

uint64_t swift_task_localValuePush()
{
  return MEMORY[0x18961C030]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x18961C038]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x18961B450]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x18961B458]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x18961B460]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x18961B468]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x18961B470]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x18961B478]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x18961B490]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x18961B498]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x18961B4A0]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x18961B4D0]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x18961B4F0]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x18961B4F8]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x18961B500]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x18961B518]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x18961B520]();
}

uint64_t symptom_framework_init()
{
  return MEMORY[0x1895FD250]();
}

uint64_t symptom_new()
{
  return MEMORY[0x1895FD258]();
}

uint64_t symptom_send()
{
  return MEMORY[0x1895FD260]();
}

uint64_t symptom_send_immediate()
{
  return MEMORY[0x1895FD268]();
}

uint64_t symptom_set_additional_qualifier()
{
  return MEMORY[0x1895FD270]();
}

uint64_t symptom_set_qualifier()
{
  return MEMORY[0x1895FD278]();
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1895FD2B0](a1, *(void *)&a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1895FD2B8](a1, a2, a3, a4, a5);
}

kern_return_t task_info( task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x1895FD320](*(void *)&target_task, *(void *)&flavor, task_info_out, task_info_outCnt);
}

time_t time(time_t *a1)
{
  return MEMORY[0x1895FD400](a1);
}

uint64_t tls_helper_SSLProtocol_from_version()
{
  return MEMORY[0x189614CC8]();
}

void tzset(void)
{
}

const char *__cdecl u_errorName(UErrorCode code)
{
  return (const char *)MEMORY[0x189615420](*(void *)&code);
}

int32_t uidna_nameToASCII( const UIDNA *idna, const UChar *name, int32_t length, UChar *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)
{
  return MEMORY[0x1896158F0](idna, name, *(void *)&length, dest, *(void *)&capacity, pInfo, pErrorCode);
}

UIDNA *__cdecl uidna_openUTS46(uint32_t options, UErrorCode *pErrorCode)
{
  return (UIDNA *)MEMORY[0x189615910](*(void *)&options, pErrorCode);
}

int unlink(const char *a1)
{
  return MEMORY[0x1895FD468](a1);
}

void uuid_clear(uuid_t uu)
{
}

int uuid_compare(const uuid_t uu1, const uuid_t uu2)
{
  return MEMORY[0x1895FD4B8](uu1, uu2);
}

void uuid_generate(uuid_t out)
{
}

void uuid_generate_random(uuid_t out)
{
}

int uuid_is_null(const uuid_t uu)
{
  return MEMORY[0x1895FD4E0](uu);
}

int uuid_parse(const uuid_string_t in, uuid_t uu)
{
  return MEMORY[0x1895FD4E8](in, uu);
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
}

void uuid_unparse_upper(const uuid_t uu, uuid_string_t out)
{
}

int vasprintf(char **a1, const char *a2, va_list a3)
{
  return MEMORY[0x1895FD510](a1, a2, a3);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1895FD750](*(void *)&__fd, __buf, __nbyte);
}

void xpc_array_append_value(xpc_object_t xarray, xpc_object_t value)
{
}

BOOL xpc_array_apply(xpc_object_t xarray, xpc_array_applier_t applier)
{
  return MEMORY[0x1895FD7C8](xarray, applier);
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x1895FD7D8](objects, count);
}

xpc_object_t xpc_array_create_empty(void)
{
  return (xpc_object_t)MEMORY[0x1895FD7E8]();
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return MEMORY[0x1895FD808](xarray);
}

int64_t xpc_array_get_int64(xpc_object_t xarray, size_t index)
{
  return MEMORY[0x1895FD830](xarray, index);
}

const char *__cdecl xpc_array_get_string(xpc_object_t xarray, size_t index)
{
  return (const char *)MEMORY[0x1895FD840](xarray, index);
}

uint64_t xpc_array_get_uint64(xpc_object_t xarray, size_t index)
{
  return MEMORY[0x1895FD848](xarray, index);
}

const uint8_t *__cdecl xpc_array_get_uuid(xpc_object_t xarray, size_t index)
{
  return (const uint8_t *)MEMORY[0x1895FD850](xarray, index);
}

xpc_object_t xpc_array_get_value(xpc_object_t xarray, size_t index)
{
  return (xpc_object_t)MEMORY[0x1895FD860](xarray, index);
}

void xpc_array_set_data(xpc_object_t xarray, size_t index, const void *bytes, size_t length)
{
}

void xpc_array_set_int64(xpc_object_t xarray, size_t index, int64_t value)
{
}

void xpc_array_set_string(xpc_object_t xarray, size_t index, const char *string)
{
}

void xpc_array_set_uint64(xpc_object_t xarray, size_t index, uint64_t value)
{
}

void xpc_array_set_uuid(xpc_object_t xarray, size_t index, const unsigned __int8 *uuid)
{
}

void xpc_array_set_value(xpc_object_t xarray, size_t index, xpc_object_t value)
{
}

xpc_object_t xpc_BOOL_create(BOOL value)
{
  return (xpc_object_t)MEMORY[0x1895FD8B0](value);
}

BOOL xpc_BOOL_get_value(xpc_object_t xBOOL)
{
  return MEMORY[0x1895FD8C0](xBOOL);
}

void xpc_connection_cancel(xpc_connection_t connection)
{
}

uint64_t xpc_connection_copy_entitlement_value()
{
  return MEMORY[0x1895FD930]();
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x1895FD968](name, targetq, flags);
}

pid_t xpc_connection_get_pid(xpc_connection_t connection)
{
  return MEMORY[0x1895FD9A8](connection);
}

void xpc_connection_resume(xpc_connection_t connection)
{
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
}

void xpc_connection_send_message_with_reply( xpc_connection_t connection, xpc_object_t message, dispatch_queue_t replyq, xpc_handler_t handler)
{
}

xpc_object_t xpc_connection_send_message_with_reply_sync(xpc_connection_t connection, xpc_object_t message)
{
  return (xpc_object_t)MEMORY[0x1895FD9F0](connection, message);
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
}

void xpc_connection_set_target_queue(xpc_connection_t connection, dispatch_queue_t targetq)
{
}

xpc_object_t xpc_copy(xpc_object_t object)
{
  return (xpc_object_t)MEMORY[0x1895FDA70](object);
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return (char *)MEMORY[0x1895FDA98](object);
}

uint64_t xpc_create_from_plist()
{
  return MEMORY[0x1895FDAE0]();
}

xpc_object_t xpc_data_create(const void *bytes, size_t length)
{
  return (xpc_object_t)MEMORY[0x1895FDB00](bytes, length);
}

xpc_object_t xpc_data_create_with_dispatch_data(dispatch_data_t ddata)
{
  return (xpc_object_t)MEMORY[0x1895FDB08](ddata);
}

size_t xpc_data_get_bytes(xpc_object_t xdata, void *buffer, size_t off, size_t length)
{
  return MEMORY[0x1895FDB10](xdata, buffer, off, length);
}

const void *__cdecl xpc_data_get_bytes_ptr(xpc_object_t xdata)
{
  return (const void *)MEMORY[0x1895FDB20](xdata);
}

size_t xpc_data_get_length(xpc_object_t xdata)
{
  return MEMORY[0x1895FDB30](xdata);
}

BOOL xpc_dictionary_apply(xpc_object_t xdict, xpc_dictionary_applier_t applier)
{
  return MEMORY[0x1895FDB78](xdict, applier);
}

uint64_t xpc_dictionary_copy_basic_description()
{
  return MEMORY[0x1895FDB80]();
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1895FDB98](keys, values, count);
}

xpc_object_t xpc_dictionary_create_reply(xpc_object_t original)
{
  return (xpc_object_t)MEMORY[0x1895FDBB0](original);
}

int xpc_dictionary_dup_fd(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1895FDBB8](xdict, key);
}

xpc_object_t xpc_dictionary_get_array(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1895FDBD0](xdict, key);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1895FDBE8](xdict, key);
}

size_t xpc_dictionary_get_count(xpc_object_t xdict)
{
  return MEMORY[0x1895FDBF8](xdict);
}

const void *__cdecl xpc_dictionary_get_data(xpc_object_t xdict, const char *key, size_t *length)
{
  return (const void *)MEMORY[0x1895FDC00](xdict, key, length);
}

xpc_object_t xpc_dictionary_get_dictionary(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1895FDC10](xdict, key);
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1895FDC20](xdict, key);
}

uint64_t xpc_dictionary_get_pointer()
{
  return MEMORY[0x1895FDC28]();
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x1895FDC48](xdict, key);
}

uint64_t xpc_dictionary_get_uint64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1895FDC50](xdict, key);
}

const uint8_t *__cdecl xpc_dictionary_get_uuid(xpc_object_t xdict, const char *key)
{
  return (const uint8_t *)MEMORY[0x1895FDC58](xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1895FDC68](xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_data(xpc_object_t xdict, const char *key, const void *bytes, size_t length)
{
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
}

uint64_t xpc_dictionary_set_pointer()
{
  return MEMORY[0x1895FDD00]();
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
}

void xpc_dictionary_set_uuid(xpc_object_t xdict, const char *key, const unsigned __int8 *uuid)
{
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

xpc_object_t xpc_double_create(double value)
{
  return (xpc_object_t)MEMORY[0x1895FDD50](value);
}

double xpc_double_get_value(xpc_object_t xdouble)
{
  return result;
}

BOOL xpc_equal(xpc_object_t object1, xpc_object_t object2)
{
  return MEMORY[0x1895FDD88](object1, object2);
}

xpc_object_t xpc_fd_create(int fd)
{
  return (xpc_object_t)MEMORY[0x1895FDDF8](*(void *)&fd);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1895FDE70](object);
}

size_t xpc_hash(xpc_object_t object)
{
  return MEMORY[0x1895FDE88](object);
}

xpc_object_t xpc_int64_create(int64_t value)
{
  return (xpc_object_t)MEMORY[0x1895FDEB0](value);
}

int64_t xpc_int64_get_value(xpc_object_t xint)
{
  return MEMORY[0x1895FDEC8](xint);
}

uint64_t xpc_pointer_get_value()
{
  return MEMORY[0x1895FDF70]();
}

void xpc_release(xpc_object_t object)
{
}

xpc_object_t xpc_retain(xpc_object_t object)
{
  return (xpc_object_t)MEMORY[0x1895FDF88](object);
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
}

xpc_object_t xpc_string_create(const char *string)
{
  return (xpc_object_t)MEMORY[0x1895FE050](string);
}

xpc_object_t xpc_string_create_with_format(const char *fmt, ...)
{
  return (xpc_object_t)MEMORY[0x1895FE060](fmt);
}

size_t xpc_string_get_length(xpc_object_t xstring)
{
  return MEMORY[0x1895FE070](xstring);
}

const char *__cdecl xpc_string_get_string_ptr(xpc_object_t xstring)
{
  return (const char *)MEMORY[0x1895FE080](xstring);
}

xpc_object_t xpc_uint64_create(uint64_t value)
{
  return (xpc_object_t)MEMORY[0x1895FE0D0](value);
}

uint64_t xpc_uint64_get_value(xpc_object_t xuint)
{
  return MEMORY[0x1895FE0E0](xuint);
}

xpc_object_t xpc_uuid_create(const unsigned __int8 *uuid)
{
  return (xpc_object_t)MEMORY[0x1895FE0F8](uuid);
}

const uint8_t *__cdecl xpc_uuid_get_bytes(xpc_object_t xuuid)
{
  return (const uint8_t *)MEMORY[0x1895FE110](xuuid);
}

const char *__cdecl zError(int a1)
{
  return (const char *)MEMORY[0x189617640](*(void *)&a1);
}

uint64_t perform_first_network_use_flow_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_libcupolicy_dylib)) {
    dlopenHelper_libcupolicy_dylib(a1);
  }
  return MEMORY[0x189615020]();
}

uint64_t network_usage_policy_create_client_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_libcupolicy_dylib)) {
    dlopenHelper_libcupolicy_dylib(a1);
  }
  return MEMORY[0x189615018]();
}

uint64_t analytics_send_event_delayInitStub(double a1)
{
  return MEMORY[0x18960DAC0]();
}

uint64_t nwrapport_copy_protocol_definition_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_Rapport)) {
    dlopenHelper_Rapport(a1);
  }
  return MEMORY[0x189611DE0]();
}

uint64_t pcap_create_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_libpcap_A_dylib)) {
    dlopenHelper_libpcap_A_dylib(a1);
  }
  return MEMORY[0x189616A98]();
}

uint64_t pcap_activate_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_libpcap_A_dylib)) {
    dlopenHelper_libpcap_A_dylib(a1);
  }
  return MEMORY[0x189616A80]();
}

uint64_t pcap_ng_dump_open_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_libpcap_A_dylib)) {
    dlopenHelper_libpcap_A_dylib(a1);
  }
  return MEMORY[0x189616AE8]();
}

uint64_t pcap_ng_dump_close_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_libpcap_A_dylib)) {
    dlopenHelper_libpcap_A_dylib(a1);
  }
  return MEMORY[0x189616AE0]();
}

uint64_t pcap_close_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_libpcap_A_dylib)) {
    dlopenHelper_libpcap_A_dylib(a1);
  }
  return MEMORY[0x189616A90]();
}

uint64_t pcap_ng_block_alloc_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_libpcap_A_dylib)) {
    dlopenHelper_libpcap_A_dylib(a1);
  }
  return MEMORY[0x189616AC0]();
}

uint64_t pcap_ng_block_reset_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_libpcap_A_dylib)) {
    dlopenHelper_libpcap_A_dylib(a1);
  }
  return MEMORY[0x189616AD0]();
}

uint64_t pcap_ng_get_enhanced_packet_fields_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_libpcap_A_dylib)) {
    dlopenHelper_libpcap_A_dylib(a1);
  }
  return MEMORY[0x189616AF8]();
}

uint64_t pcap_ng_block_packet_set_data_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_libpcap_A_dylib)) {
    dlopenHelper_libpcap_A_dylib(a1);
  }
  return MEMORY[0x189616AC8]();
}

uint64_t pcap_ng_dump_block_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_libpcap_A_dylib)) {
    dlopenHelper_libpcap_A_dylib(a1);
  }
  return MEMORY[0x189616AD8]();
}

uint64_t pcap_ng_free_block_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_libpcap_A_dylib)) {
    dlopenHelper_libpcap_A_dylib(a1);
  }
  return MEMORY[0x189616AF0]();
}

uint64_t NEFlowDirectorDestroy_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_libnetworkextension_dylib)) {
    dlopenHelper_libnetworkextension_dylib(a1);
  }
  return MEMORY[0x189616190]();
}

uint64_t NEFlowDirectorCreateBridge_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_libnetworkextension_dylib)) {
    dlopenHelper_libnetworkextension_dylib(a1);
  }
  return MEMORY[0x189616188]();
}

uint64_t NEFlowDirectorStart_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_libnetworkextension_dylib)) {
    dlopenHelper_libnetworkextension_dylib(a1);
  }
  return MEMORY[0x1896161E0]();
}

uint64_t ne_filter_protocol_identifier_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_libnetworkextension_dylib)) {
    dlopenHelper_libnetworkextension_dylib(a1);
  }
  return MEMORY[0x189616288]();
}

double __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> dlopenHelper_Rapport( double a1)
{
  return a1;
}

double __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> dlopenHelper_AssertionServices( double a1)
{
  return a1;
}

double __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> dlopenHelper_CoreAnalytics( double a1)
{
  return a1;
}

double __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> dlopenHelper_libnetworkextension_dylib( double a1)
{
  return a1;
}

double __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> dlopenHelper_libcupolicy_dylib( double a1)
{
  return a1;
}

double __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> dlopenHelper_MobileAsset( double a1)
{
  return a1;
}

double __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> dlopenHelper_libpcap_A_dylib( double a1)
{
  return a1;
}

double __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> dlopenHelper_LoggingSupport( double a1)
{
  return a1;
}

double __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> dlopenHelper_RunningBoardServices( double a1)
{
  return a1;
}

double __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> dlopenHelper_SymptomAnalytics( double a1)
{
  return a1;
}

double __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> dlopenHelper_UserManagement( double a1)
{
  return a1;
}

double __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> dlopenHelper_CoreWiFi( double a1)
{
  return a1;
}

double gotLoadHelper_x8__OBJC_CLASS___BKSApplicationStateMonitor(double result)
{
  if (!atomic_load(&dlopenHelperFlag_AssertionServices)) {
    return dlopenHelper_AssertionServices(result);
  }
  return result;
}

double gotLoadHelper_x8__BKSApplicationStateDisplayIDKey(double result)
{
  if (!atomic_load(&dlopenHelperFlag_AssertionServices)) {
    return dlopenHelper_AssertionServices(result);
  }
  return result;
}

double gotLoadHelper_x8__BKSApplicationStateProcessIDKey(double result)
{
  if (!atomic_load(&dlopenHelperFlag_AssertionServices)) {
    return dlopenHelper_AssertionServices(result);
  }
  return result;
}

double gotLoadHelper_x8__BKSApplicationStateKey(double result)
{
  if (!atomic_load(&dlopenHelperFlag_AssertionServices)) {
    return dlopenHelper_AssertionServices(result);
  }
  return result;
}

void gotLoadHelper_x21__OBJC_CLASS___BKSApplicationStateMonitor(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_AssertionServices)) {
    dlopenHelper_AssertionServices(a1);
  }
}

double gotLoadHelper_x8__network_usage_policy_create_client(double result)
{
  if (!atomic_load(&dlopenHelperFlag_libcupolicy_dylib)) {
    return dlopenHelper_libcupolicy_dylib(result);
  }
  return result;
}

double gotLoadHelper_x8__OBJC_CLASS___RPFileTransferSession(double result)
{
  if (!atomic_load(&dlopenHelperFlag_Rapport)) {
    return dlopenHelper_Rapport(result);
  }
  return result;
}

double gotLoadHelper_x8__OBJC_CLASS___RPFileTransferItem(double result)
{
  if (!atomic_load(&dlopenHelperFlag_Rapport)) {
    return dlopenHelper_Rapport(result);
  }
  return result;
}

void gotLoadHelper_x19__OBJC_CLASS___OSLogPreferencesSubsystem(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_LoggingSupport)) {
    dlopenHelper_LoggingSupport(a1);
  }
}

double gotLoadHelper_x8__OBJC_CLASS___MAAssetQuery(double result)
{
  return result;
}

void gotLoadHelper_x26__OBJC_CLASS___MAAsset(double a1)
{
}

void gotLoadHelper_x24__OBJC_CLASS___CWFInterface(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_CoreWiFi)) {
    dlopenHelper_CoreWiFi(a1);
  }
}

double gotLoadHelper_x8__OBJC_CLASS___OSLogEventLiveStream(double result)
{
  if (!atomic_load(&dlopenHelperFlag_LoggingSupport)) {
    return dlopenHelper_LoggingSupport(result);
  }
  return result;
}

void gotLoadHelper_x19__OBJC_CLASS___OSLogEventLiveSource(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_LoggingSupport)) {
    dlopenHelper_LoggingSupport(a1);
  }
}

void gotLoadHelper_x19__OBJC_CLASS___RBSProcessHandle(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_RunningBoardServices)) {
    dlopenHelper_RunningBoardServices(a1);
  }
}

void gotLoadHelper_x22__OBJC_CLASS___UMUserPersona(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_UserManagement)) {
    dlopenHelper_UserManagement(a1);
  }
}

void gotLoadHelper_x20__OBJC_CLASS___NWActivityXPC(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_SymptomAnalytics)) {
    dlopenHelper_SymptomAnalytics(a1);
  }
}

double gotLoadHelper_x8__nwrapport_copy_protocol_definition(double result)
{
  if (!atomic_load(&dlopenHelperFlag_Rapport)) {
    return dlopenHelper_Rapport(result);
  }
  return result;
}

double gotLoadHelper_x8__NEFlowDirectorCreateBridge(double result)
{
  if (!atomic_load(&dlopenHelperFlag_libnetworkextension_dylib)) {
    return dlopenHelper_libnetworkextension_dylib(result);
  }
  return result;
}

void gotLoadHelper_x19__OBJC_CLASS___UMUserManager(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_UserManagement)) {
    dlopenHelper_UserManagement(a1);
  }
}

double gotLoadHelper_x8__ne_filter_protocol_identifier(double result)
{
  if (!atomic_load(&dlopenHelperFlag_libnetworkextension_dylib)) {
    return dlopenHelper_libnetworkextension_dylib(result);
  }
  return result;
}

void gotLoadHelper_x19__ne_filter_protocol_identifier(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_libnetworkextension_dylib)) {
    dlopenHelper_libnetworkextension_dylib(a1);
  }
}

void gotLoadHelper_x20__ne_filter_protocol_identifier(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_libnetworkextension_dylib)) {
    dlopenHelper_libnetworkextension_dylib(a1);
  }
}

uint64_t objc_msgSend_URLSession_downloadTask_didWriteData_totalBytesWritten_totalBytesExpectedToWrite_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718](a1, sel_URLSession_downloadTask_didWriteData_totalBytesWritten_totalBytesExpectedToWrite_);
}

uint64_t objc_msgSend_URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718](a1, sel_URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_);
}

uint64_t objc_msgSend_URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718](a1, sel_URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_);
}

uint64_t objc_msgSend__getCookiesForURL_mainDocumentURL_partition_policyProperties_completionHandler_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718](a1, sel__getCookiesForURL_mainDocumentURL_partition_policyProperties_completionHandler_);
}

uint64_t objc_msgSend_getBytes_maxLength_usedLength_encoding_options_range_remainingRange_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718](a1, sel_getBytes_maxLength_usedLength_encoding_options_range_remainingRange_);
}

uint64_t objc_msgSend_handlePeerCertificateTrustEvaluationWithMetadata_trust_completionHandler_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718](a1, sel_handlePeerCertificateTrustEvaluationWithMetadata_trust_completionHandler_);
}

uint64_t objc_msgSend_initWithProtectionSpace_proposedCredential_previousFailureCount_failureResponse_error_sender_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718]( a1,  sel_initWithProtectionSpace_proposedCredential_previousFailureCount_failureResponse_error_sender_);
}

uint64_t objc_msgSend_loaderConnectedWithHTTPConnectionMetadata_CNAMEChain_unlistedTracker_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718](a1, sel_loaderConnectedWithHTTPConnectionMetadata_CNAMEChain_unlistedTracker_);
}

uint64_t objc_msgSend_loaderDidReceiveServerTrustChallenge_secProtocolMetadata_completionHandler_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718](a1, sel_loaderDidReceiveServerTrustChallenge_secProtocolMetadata_completionHandler_);
}

uint64_t objc_msgSend_loaderDidSendBodyData_totalBytesSent_totalBytesExpectedToSend_completionHandler_( void *a1, const char *a2, ...)
{
  return MEMORY[0x189616718](a1, sel_loaderDidSendBodyData_totalBytesSent_totalBytesExpectedToSend_completionHandler_);
}