LABEL_44:
    if (v11) {
      free(v11);
    }
    return 0LL;
  }

  v4 = strdup(a2);
  if (v4)
  {
LABEL_5:
    *((void *)v2 + 2) = v4;
    *((_DWORD *)v2 + 31) = 2;
    *((_DWORD *)v2 + 21) = networkd_settings_get_int64_with_default( (const char *)nw_setting_context_max_cache_entries,  200LL);
    *((_DWORD *)v2 + 22) = networkd_settings_get_int64_with_default( (const char *)nw_setting_context_target_cache_entries,  150LL);
    *((_DWORD *)v2 + 23) = networkd_settings_get_int64_with_default( (const char *)nw_setting_context_max_idle_cache_entries,  20LL);
    return (BOOL)v2;
  }

  __nwlog_obj();
  v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  v28 = "strict_strdup";
  v15 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v15);
  if (!result)
  {
    free(v15);
    goto LABEL_5;
  }

  __break(1u);
  return result;
}

      if (nw_activity_label_is_valid(*((_DWORD *)v11 + 29), *((_DWORD *)v11 + 28))) {
        goto LABEL_58;
      }
      goto LABEL_52;
    }

    __nwlog_obj();
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = "nw_activity_make_reporting_decision";
    v22 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(__upper_bound[0]) = 0;
    if (__nwlog_fault(v22, type, __upper_bound))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v47 = type[0];
        if (os_log_type_enabled(v23, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_activity_make_reporting_decision";
          _os_log_impl(&dword_181A5C000, v23, v47, "%{public}s called with null activity", buf, 0xCu);
        }
      }

      else if (LOBYTE(__upper_bound[0]))
      {
        v54 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v55 = type[0];
        v56 = os_log_type_enabled(v23, type[0]);
        if (v54)
        {
          if (v56)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&buf[4] = "nw_activity_make_reporting_decision";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v54;
            _os_log_impl( &dword_181A5C000,  v23,  v55,  "%{public}s called with null activity, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v54);
          if (!v22) {
            goto LABEL_57;
          }
          goto LABEL_84;
        }

        if (v56)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_activity_make_reporting_decision";
          _os_log_impl(&dword_181A5C000, v23, v55, "%{public}s called with null activity, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v59 = type[0];
        if (os_log_type_enabled(v23, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_activity_make_reporting_decision";
          _os_log_impl( &dword_181A5C000,  v23,  v59,  "%{public}s called with null activity, backtrace limit exceeded",  buf,  0xCu);
        }
      }

      goto LABEL_82;
    }

    goto LABEL_83;
  }

  __nwlog_obj();
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446466;
  *(void *)&buf[4] = "nw_activity_activate_block_invoke";
  *(_WORD *)&buf[12] = 2082;
  *(void *)&buf[14] = "Cannot activate lightweight representation of an activity";
  v43 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(__upper_bound[0]) = 0;
  if (__nwlog_fault(v43, type, __upper_bound))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v45 = type[0];
      if (os_log_type_enabled(v44, type[0]))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&buf[4] = "nw_activity_activate_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = "Cannot activate lightweight representation of an activity";
        _os_log_impl(&dword_181A5C000, v44, v45, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s", buf, 0x16u);
      }
    }

    else if (LOBYTE(__upper_bound[0]))
    {
      v51 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v52 = type[0];
      v53 = os_log_type_enabled(v44, type[0]);
      if (v51)
      {
        if (v53)
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&buf[4] = "nw_activity_activate_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "Cannot activate lightweight representation of an activity";
          *(_WORD *)&buf[22] = 2082;
          v64 = v51;
          _os_log_impl( &dword_181A5C000,  v44,  v52,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(v51);
        goto LABEL_138;
      }

      if (v53)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&buf[4] = "nw_activity_activate_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = "Cannot activate lightweight representation of an activity";
        _os_log_impl( &dword_181A5C000,  v44,  v52,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, no backtrace",  buf,  0x16u);
      }
    }

    else
    {
      __nwlog_obj();
      v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v58 = type[0];
      if (os_log_type_enabled(v44, type[0]))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&buf[4] = "nw_activity_activate_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = "Cannot activate lightweight representation of an activity";
        _os_log_impl( &dword_181A5C000,  v44,  v58,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, backtrace limit exceeded",  buf,  0x16u);
      }
    }
  }

  if (v18) {
    free(v18);
  }
  return 0LL;
}

    goto LABEL_52;
  }

  uuid_generate_random(a2);
  v5 = v4;
  v6 = v5;
  v7 = v5[4];
  if (v7)
  {
    v8 = v7;
    v9 = v8[12];

    if ((v9 & 0x4000000000LL) != 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v23 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        v55 = nw_endpoint_handler_get_id_string(v6);
        v56 = nw_endpoint_handler_dry_run_string(v6);
        v57 = nw_endpoint_handler_copy_endpoint(v6);
        v58 = nw_endpoint_get_logging_description(v57);
        v59 = nw_endpoint_handler_state_string(v6);
        v60 = nw_endpoint_handler_mode_string(v6);
        v61 = nw_endpoint_handler_copy_current_path(v6);
        *(_DWORD *)buf = 136448258;
        v69 = "nw_endpoint_handler_get_client_id";
        v70 = 2082;
        v71 = (void *)v55;
        v72 = 2082;
        v73 = v56;
        v74 = 2082;
        v75 = v58;
        v76 = 2082;
        v77 = v59;
        v78 = 2082;
        v79 = v60;
        v80 = 2114;
        v81 = v61;
        v82 = 1042;
        v83 = 16;
        v84 = 2098;
        v85 = a2;
        _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Generated client ID %{public, uuid_t}.16P for non-path based handler",  buf,  0x58u);
      }

      goto LABEL_51;
    }

    if ((*((_BYTE *)v6 + 268) & 0x20) != 0) {
      goto LABEL_52;
    }
LABEL_24:
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    v23 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      if ((*((_BYTE *)v6 + 268) & 1) != 0) {
        v24 = "dry-run ";
      }
      else {
        v24 = "";
      }
      v25 = nw_endpoint_handler_copy_endpoint(v6);
      v26 = nw_endpoint_get_logging_description(v25);
      v27 = v6 + 21;
      v28 = *((unsigned int *)v6 + 30);
      v64 = v26;
      else {
        v29 = off_189BBBBF0[v28];
      }
      v63 = v29;
      v33 = v6;
      v34 = "path";
      switch(*((_DWORD *)v4 + 29))
      {
        case 0:
          break;
        case 1:
          v34 = "resolver";
          break;
        case 2:
          v34 = nw_endpoint_flow_mode_string(v4[31]);
          break;
        case 3:
          v34 = "proxy";
          break;
        case 4:
          v34 = "fallback";
          break;
        case 5:
          v34 = "transform";
          break;
        default:
          v34 = "unknown-mode";
          break;
      }

      v38 = v33 + 28;
      v39 = v33;
      os_unfair_lock_lock(v33 + 28);
      v40 = v39[8];
      os_unfair_lock_unlock(v38);

      *(_DWORD *)buf = 136448258;
      v69 = "nw_endpoint_handler_get_client_id";
      v70 = 2082;
      v71 = v27;
      v72 = 2082;
      v73 = v24;
      v74 = 2082;
      v75 = v64;
      v76 = 2082;
      v77 = v63;
      v78 = 2082;
      v79 = v34;
      v80 = 2114;
      v81 = v40;
      v82 = 1042;
      v83 = 16;
      v84 = 2098;
      v85 = a2;
      _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Generated client ID %{public,uu id_t}.16P for non-path based handler",  buf,  0x58u);
    }

  if (v13) {
    free(v13);
  }
  v9 = 0LL;
LABEL_14:

  return v9;
}

    if (v19) {
      free(v19);
    }
    v7 = 0LL;
    goto LABEL_4;
  }

  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&buf[4] = "nw_endpoint_flow_expected_to_join";
  v15 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v38[0]) = 0;
  if (__nwlog_fault(v15, type, v38))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v17 = type[0];
      if (os_log_type_enabled(v16, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_endpoint_flow_expected_to_join";
        _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s called with null flow", buf, 0xCu);
      }
    }

    else if (LOBYTE(v38[0]))
    {
      v22 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v23 = type[0];
      v24 = os_log_type_enabled(v16, type[0]);
      if (v22)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&buf[4] = "nw_endpoint_flow_expected_to_join";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v22;
          _os_log_impl( &dword_181A5C000,  v16,  v23,  "%{public}s called with null flow, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v22);
        goto LABEL_38;
      }

      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_endpoint_flow_expected_to_join";
        _os_log_impl(&dword_181A5C000, v16, v23, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v28 = type[0];
      if (os_log_type_enabled(v16, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_endpoint_flow_expected_to_join";
        _os_log_impl( &dword_181A5C000,  v16,  v28,  "%{public}s called with null flow, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

    if (v25) {
      free(v25);
    }
    return 0LL;
  }

  if ((*(_WORD *)(a1 + 204) & 0x80) == 0) {
    goto LABEL_21;
  }
  if (a4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    v34 = "__nw_frame_unclaim_internal";
    v35 = 1024;
    *(_DWORD *)v36 = a4;
    v7 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (os_log_s *)gLogObj;
      v9 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446466;
      v34 = "__nw_frame_unclaim_internal";
      v35 = 1024;
      *(_DWORD *)v36 = a4;
      v10 = "%{public}s Trying to unclaim at the end %u bytes from a single-IP aggregate";
    }

    else if (v31)
    {
      v11 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (os_log_s *)gLogObj;
      v9 = type;
      v12 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v11)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446722;
          v34 = "__nw_frame_unclaim_internal";
          v35 = 1024;
          *(_DWORD *)v36 = a4;
          v36[2] = 2082;
          *(void *)&v36[3] = v11;
          _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s Trying to unclaim at the end %u bytes from a single-IP aggregate, dumping backtrace:%{public}s",  buf,  0x1Cu);
        }

        free(v11);
        goto LABEL_18;
      }

      if (!v12)
      {
LABEL_18:
        if (v7) {
          free(v7);
        }
        goto LABEL_20;
      }

      *(_DWORD *)buf = 136446466;
      v34 = "__nw_frame_unclaim_internal";
      v35 = 1024;
      *(_DWORD *)v36 = a4;
      v10 = "%{public}s Trying to unclaim at the end %u bytes from a single-IP aggregate, no backtrace";
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (os_log_s *)gLogObj;
      v9 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446466;
      v34 = "__nw_frame_unclaim_internal";
      v35 = 1024;
      *(_DWORD *)v36 = a4;
      v10 = "%{public}s Trying to unclaim at the end %u bytes from a single-IP aggregate, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0x12u);
    goto LABEL_18;
  }

    free(v10);
    goto LABEL_45;
  }

  v5 = nw_endpoint_handler_copy_flow(v3);
  os_unfair_lock_lock((os_unfair_lock_t)v5 + 220);
  if ((*((_BYTE *)v5 + 32) & 2) != 0 || (*((_BYTE *)v5 + 33) & 1) != 0)
  {
    v6 = v3;
  }

  else
  {
    if (!*((void *)v5 + 117))
    {
      v9 = 0LL;
      goto LABEL_11;
    }

    v6 = (NWConcrete_nw_endpoint_handler *)nw_endpoint_handler_copy_connected_flow_handler();
  }

  v9 = v6;
LABEL_11:
  os_unfair_lock_unlock((os_unfair_lock_t)v5 + 220);

LABEL_46:
  return v9;
}

    free(v24);
    goto LABEL_45;
  }

  mode = v1->mode;

  if (mode != 1) {
    goto LABEL_38;
  }
  v4 = (id *)nw_endpoint_handler_copy_resolver(v2);
  v5 = v4[1];
  v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v36 = "nw_resolver_get_resolution_source";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (__nwlog_fault(v13, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_resolver_get_resolution_source";
          _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s called with null resolver", buf, 0xCu);
        }
      }

      else if (v33)
      {
        v19 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v20 = type;
        v21 = os_log_type_enabled(v14, type);
        if (v19)
        {
          if (v21)
          {
            *(_DWORD *)buf = 136446466;
            v36 = "nw_resolver_get_resolution_source";
            v37 = 2082;
            v38 = v19;
            _os_log_impl( &dword_181A5C000,  v14,  v20,  "%{public}s called with null resolver, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v19);
          goto LABEL_65;
        }

        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_resolver_get_resolution_source";
          _os_log_impl(&dword_181A5C000, v14, v20, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v32 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_resolver_get_resolution_source";
          _os_log_impl( &dword_181A5C000,  v14,  v32,  "%{public}s called with null resolver, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    free(v18);
    goto LABEL_45;
  }

  mode = v1->mode;

  if (mode != 1) {
    goto LABEL_26;
  }
  v4 = nw_endpoint_handler_copy_resolver(v2);
  v5 = *((void *)v4 + 5);
  if (!v5 || *(void *)(v5 + 24) == *(void *)(v5 + 16))
  {
    v8 = 0LL;
  }

  else
  {
    v6 = nw_array_create();
    v7 = (unsigned __int8 *)*((void *)v4 + 5);
    v26[0] = MEMORY[0x1895F87A8];
    v26[1] = 3221225472LL;
    v26[2] = __nw_endpoint_handler_copy_resolved_endpoints_block_invoke;
    v26[3] = &unk_189BC85B0;
    v8 = (id)v6;
    v27 = v8;
    nw_array_apply(v7, (uint64_t)v26);
  }

LABEL_46:
  return v8;
}

        if (!v23)
        {
LABEL_46:
          v18 = 0;
LABEL_47:

          v20 = 0;
          v19 = v13;
          v172 = v13;
          v11 = v173;
          v175 = v13;
          if (!v173) {
            goto LABEL_53;
          }
LABEL_48:
          if (v19)
          {
            v35 = v11;
            v36 = v35[94];

            if (v36 == 1)
            {
              v37 = v175;
              v38 = (nw_endpoint *)v37;
              if (v37[66] != 4)
              {

LABEL_64:
                if (!is_viable || (v49 = v38, v50 = *((_DWORD *)v49 + 94), v49, v50 == 2))
                {
                  v51 = v174;
                  v52 = v51;
                  v53 = v51[4];
                  if (v53)
                  {
                    v54 = v53;
                    v55 = (v54[12] & 0x4000000000LL) == 0;

                    if (v55)
                    {
                      if ((*((_BYTE *)v52 + 268) & 0x20) != 0) {
                        goto LABEL_191;
                      }
                      goto LABEL_83;
                    }

                    if ((nw_endpoint_handler_get_logging_disabled(v52) & 1) == 0)
                    {
                      if (__nwlog_connection_log::onceToken != -1) {
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                      }
                      v56 = (os_log_s *)(id)gconnectionLogObj;
                      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
                      {
                        id_string = nw_endpoint_handler_get_id_string(v52);
                        v143 = nw_endpoint_handler_dry_run_string(v52);
                        v144 = nw_endpoint_handler_copy_endpoint(v52);
                        logging_description = nw_endpoint_get_logging_description(v144);
                        v146 = nw_endpoint_handler_state_string(v52);
                        v147 = nw_endpoint_handler_mode_string(v52);
                        v148 = nw_endpoint_handler_copy_current_path(v52);
                        *(_DWORD *)buf = 136448258;
                        v179 = "nw_endpoint_handler_get_alternate_path_state";
                        v180 = 2082;
                        v181 = (void *)id_string;
                        v182 = 2082;
                        v183 = v143;
                        v184 = 2082;
                        v185 = (void *)logging_description;
                        v186 = 2082;
                        v187 = v146;
                        v188 = 2082;
                        v189 = v147;
                        v190 = 2114;
                        v191 = v148;
                        v192 = 2114;
                        v193 = (nw_endpoint *)v35;
                        v194 = 2114;
                        v195 = v38;
                        _os_log_impl( &dword_181A5C000,  v56,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] better path % {public}@ due to non-viable current path %{public}@",  buf,  0x5Cu);
                      }

    if (v24) {
      free(v24);
    }
    v5 = 0;
    goto LABEL_25;
  }

  if (interface_type != nw_interface_type_cellular)
  {
    if (interface_type == nw_interface_type_wifi && (*((_BYTE *)v3 + 475) & 0x40) != 0)
    {
      v5 = 1;
      goto LABEL_25;
    }

    v5 = 0;
LABEL_7:
    v6 = nw_path_copy_connected_interface(v3);
    v7 = v6;
    if (v6)
    {
      v8 = v6;
      v9 = *((_DWORD *)v8 + 24);
    }

    v10 = *((_DWORD *)v4 + 94);
    v11 = !v5;
    if (v10 != 3) {
      v11 = 1;
    }
    if ((v11 & 1) == 0)
    {
      if (nw_path_has_unsatisfied_cellular_agent(v4, 0)) {
        goto LABEL_23;
      }
      v10 = *((_DWORD *)v4 + 94);
    }

    if (v10 != 1)
    {
      v5 = 0;
      v12 = *((_DWORD *)v4 + 95);
      if (v12 == 4 || v12 == 30) {
        goto LABEL_24;
      }
    }

    v13 = (void *)*((void *)v4 + 12);
    if (!v13 || (v14 = v13, v15 = v14[24], v14, v15 != interface_type))
    {
      v16 = (void *)*((void *)v4 + 13);
      if (!v16 || (v17 = v16, v18 = v17[24], v17, v18 != interface_type))
      {
        v19 = (void *)*((void *)v4 + 14);
        if (!v19 || (v20 = v19, v21 = v20[24], v20, v21 != interface_type))
        {
          v5 = 0;
          goto LABEL_24;
        }
      }
    }
          }
        }

        else if ((v33 & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          v34 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
          {
            v35 = nw_endpoint_handler_get_id_string(v4);
            v36 = nw_endpoint_handler_dry_run_string(v4);
            v37 = v34;
            v38 = nw_endpoint_handler_copy_endpoint(v4);
            v39 = nw_endpoint_get_logging_description(v38);
            v40 = nw_endpoint_handler_state_string(v4);
            v41 = nw_endpoint_handler_mode_string(v4);
            v42 = nw_endpoint_handler_copy_current_path(v78);
            *(_DWORD *)buf = 136448002;
            v87 = "nw_flow_copy_write_request";
            v88 = 2082;
            v89 = (void *)v35;
            v90 = 2082;
            v91 = v36;
            v92 = 2082;
            v93 = v39;
            v94 = 2082;
            v95 = v40;
            v96 = 2082;
            v97 = v41;
            v4 = v78;
            v98 = 2114;
            v99 = v42;
            v100 = 2112;
            v101 = v10;
            v34 = v37;
            _os_log_impl( &dword_181A5C000,  v37,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Send context %@ has antec edent error, failing request",  buf,  0x52u);
          }

          goto LABEL_44;
        }

        nw_write_request_report_error_with_override(v83, 0LL, v31);

        goto LABEL_56;
      }
    }

    if ((*(_BYTE *)(a2 + 4) & 1) == 0) {
      goto LABEL_90;
    }
    v43 = v83;
    v44 = *((_BYTE *)v43 + 128);

    if ((v44 & 1) != 0)
    {
      v83 = v43;
LABEL_90:

      goto LABEL_91;
    }

    if ((nw_endpoint_handler_get_logging_disabled(v4) & 1) != 0)
    {
      v28 = 45;
      goto LABEL_55;
    }

    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    v21 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v45 = nw_endpoint_handler_get_id_string(v4);
      v46 = nw_endpoint_handler_dry_run_string(v4);
      v47 = nw_endpoint_handler_copy_endpoint(v4);
      v48 = nw_endpoint_get_logging_description(v47);
      v49 = nw_endpoint_handler_state_string(v4);
      v50 = nw_endpoint_handler_mode_string(v4);
      v51 = nw_endpoint_handler_copy_current_path(v78);
      *(_DWORD *)buf = 136447746;
      v87 = "nw_flow_copy_write_request";
      v88 = 2082;
      v89 = (void *)v45;
      v90 = 2082;
      v91 = v46;
      v92 = 2082;
      v93 = v48;
      v94 = 2082;
      v95 = v49;
      v96 = 2082;
      v97 = v50;
      v4 = v78;
      v98 = 2114;
      v99 = v51;
      _os_log_impl( &dword_181A5C000,  v21,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Protocol does not support sendi ng incomplete send content",  buf,  0x48u);
    }

    v28 = 45;
LABEL_54:

LABEL_55:
    nw_write_request_fail(v83, v28);
LABEL_56:

    v3 = v79;
    v5 = *(void **)(v79 + 192);
    v6 = *(void **)(v79 + 200);
    if (v5) {
      goto LABEL_2;
    }
LABEL_4:
    if (!v6) {
      goto LABEL_88;
    }
  }

  v5 = *(void **)(v3 + 192);
  if (!v5) {
    goto LABEL_88;
  }
LABEL_7:
  v7 = nw_write_request_copy_next_incomplete_request( v5,  (*(_DWORD *)(a2 + 4) & 2) != 0,  (*(unsigned __int16 *)(v3 + 332) >> 1) & 1,  *(void **)(v3 + 224));
  if (v7) {
    goto LABEL_8;
  }
LABEL_88:
  v83 = 0LL;
LABEL_91:

  return v83;
}

            goto LABEL_45;
          }

          if (!v105)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v48 = (os_log_s *)(id)gLogObj;
            v60 = type;
            if (os_log_type_enabled(v48, type))
            {
              *(_DWORD *)buf = 136446210;
              v123 = "nw_read_request_start_file_updates";
              _os_log_impl( &dword_181A5C000,  v48,  v60,  "%{public}s call to nw_queue_context_create_source(timer) for read request updates failed, backtrace limit exceeded",  buf,  0xCu);
            }

            goto LABEL_44;
          }

          v56 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v57 = (os_log_s *)(id)gLogObj;
          v58 = type;
          v59 = os_log_type_enabled(v57, type);
          if (v56)
          {
            if (v59)
            {
              *(_DWORD *)buf = 136446466;
              v123 = "nw_read_request_start_file_updates";
              v124 = 2082;
              *(void *)v125 = v56;
              _os_log_impl( &dword_181A5C000,  v57,  v58,  "%{public}s call to nw_queue_context_create_source(timer) for read request updates failed, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            v12 = v89;
            free(v56);
            if (!v47) {
              goto LABEL_47;
            }
LABEL_46:
            free(v47);
            goto LABEL_47;
          }

          if (v59)
          {
            *(_DWORD *)buf = 136446210;
            v123 = "nw_read_request_start_file_updates";
            _os_log_impl( &dword_181A5C000,  v57,  v58,  "%{public}s call to nw_queue_context_create_source(timer) for read request updates failed, no backtrace",  buf,  0xCu);
          }

          v12 = v89;
        }

LABEL_45:
    if (!v19) {
      goto LABEL_47;
    }
LABEL_46:
    free(v19);
    goto LABEL_47;
  }

  if (!v31)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v20 = (os_log_s *)(id)gLogObj;
    v25 = type;
    if (os_log_type_enabled(v20, type))
    {
      *(_DWORD *)buf = 136446210;
      v35 = "-[NWConcrete_nw_endpoint copyDictionary]";
      _os_log_impl( &dword_181A5C000,  v20,  v25,  "%{public}s xpc_dictionary_create failed, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_44;
  }

  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v20 = (os_log_s *)(id)gLogObj;
  v23 = type;
  v24 = os_log_type_enabled(v20, type);
  if (!backtrace_string)
  {
    if (v24)
    {
      *(_DWORD *)buf = 136446210;
      v35 = "-[NWConcrete_nw_endpoint copyDictionary]";
      _os_log_impl(&dword_181A5C000, v20, v23, "%{public}s xpc_dictionary_create failed, no backtrace", buf, 0xCu);
    }

    goto LABEL_44;
  }

  if (v24)
  {
    *(_DWORD *)buf = 136446466;
    v35 = "-[NWConcrete_nw_endpoint copyDictionary]";
    v36 = 2082;
    v37 = backtrace_string;
    _os_log_impl( &dword_181A5C000,  v20,  v23,  "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(backtrace_string);
  if (v19) {
    goto LABEL_46;
  }
LABEL_47:

  return v3;
}

    v114[0] = MEMORY[0x1895F87A8];
    v114[1] = 0x40000000LL;
    v115 = (uint64_t (*)(void *))___ZL32nw_protocol_udp_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke;
    v116 = &unk_189BB55C8;
    v119 = a1;
    v120 = a6;
    v117 = v121;
    v118 = v113;
    v30 = v125[0];
    do
    {
      if (!v30) {
        break;
      }
      v31 = *(void *)(v30 + 32);
      v32 = v115(v114);
      v30 = v31;
    }

    while ((v32 & 1) != 0);
    if (*((_DWORD *)v122 + 6) || v21 == 0) {
      break;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v34 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v129 = "nw_protocol_udp_get_input_frames";
      v130 = 2082;
      v131 = v112;
      _os_log_impl( &dword_181A5C000,  v34,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s Dropped inbound packets, checking for more",  buf,  0x16u);
    }
  }

  if (_nw_signposts_once != -1) {
    dispatch_once(&_nw_signposts_once, &__block_literal_global_13);
  }
  v88 = *((unsigned int *)v122 + 6);
  _Block_object_dispose(v121, 8);
  return v88;
}

    v50 = ~(_WORD)v13;
    if (v13 == 0xFFFF) {
      return 1LL;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v27 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      v28 = (const char *)(a6 + 96);
      if (!a6) {
        v28 = "";
      }
      *(_DWORD *)buf = 136447490;
      v56 = "udp_validate_cksum_internal";
      v57 = 2082;
      v58 = (void *)v28;
      v29 = "IPv6";
      if (!a5) {
        v29 = "IPv4";
      }
      v59 = 2082;
      v60 = v29;
      v30 = "non-offload";
      v61 = 2082;
      if (v52) {
        v30 = "offload";
      }
      v62 = v30;
      v63 = 1024;
      v64 = v50;
      v65 = 1024;
      v66 = a2;
      _os_log_impl( &dword_181A5C000,  v27,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s udp incorrect %{public}s-UDP %{public}s checksum 0x%x ulen %u",  buf,  0x36u);
    }

    if (a6)
    {
      v31 = *(void *)(a6 + 64);
      if (v31)
      {
        result = 0LL;
        ++*(void *)(v31 + 16);
        return result;
      }
    }

    return 0LL;
  }

  v32 = (os_log_s *)__nwlog_obj();
  if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
  {
    v33 = "";
    if (a6) {
      v33 = (const char *)(a6 + 96);
    }
    *(_DWORD *)buf = 136446466;
    v56 = "udp_validate_cksum_internal";
    v57 = 2082;
    v58 = (void *)v33;
    v34 = "%{public}s %{public}s Frame buffer no longer valid for UDP";
LABEL_61:
    _os_log_impl(&dword_181A5C000, v32, OS_LOG_TYPE_INFO, v34, buf, 0x16u);
  }

    if (v17) {
      free(v17);
    }
    v3 = 0LL;
    goto LABEL_7;
  }

  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v32 = "nw_browse_result_create";
  v13 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v30.receiver) = 16;
  type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v13, &v30, &type))
  {
    if (LOBYTE(v30.receiver) == 17)
    {
      __nwlog_obj();
      v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      receiver = (os_log_type_t)v30.receiver;
      if (os_log_type_enabled(v14, (os_log_type_t)v30.receiver))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_browse_result_create";
        _os_log_impl(&dword_181A5C000, v14, receiver, "%{public}s called with null _endpoint", buf, 0xCu);
      }
    }

    else if (type)
    {
      v20 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v21 = (os_log_type_t)v30.receiver;
      v22 = os_log_type_enabled(v14, (os_log_type_t)v30.receiver);
      if (v20)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          v32 = "nw_browse_result_create";
          v33 = 2082;
          v34 = v20;
          _os_log_impl( &dword_181A5C000,  v14,  v21,  "%{public}s called with null _endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v20);
        goto LABEL_38;
      }

      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_browse_result_create";
        _os_log_impl(&dword_181A5C000, v14, v21, "%{public}s called with null _endpoint, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v26 = (os_log_type_t)v30.receiver;
      if (os_log_type_enabled(v14, (os_log_type_t)v30.receiver))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_browse_result_create";
        _os_log_impl( &dword_181A5C000,  v14,  v26,  "%{public}s called with null _endpoint, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

  for (i = *(void *)(a1 + 120); v4 != i; i = *(void *)(a1 + 120))
  {
    if (gLogDatapath)
    {
      log = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        v28 = "nw_shoes_read_into_buffer";
        v29 = 2082;
        v30 = a1 + 151;
        v31 = 2048;
        v32[0] = i;
        _os_log_impl( &dword_181A5C000,  log,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s Finished reading from frame %p",  buf,  0x20u);
      }
    }

    v22 = *(void *)(i + 32);
    v23 = *(void **)(i + 40);
    if (v22)
    {
      *(void *)(v22 + 40) = v23;
      v23 = *(void **)(i + 40);
    }

    else
    {
      *(void *)(a1 + 128) = v23;
    }

    *v23 = v22;
    *(void *)(i + 32) = 0LL;
    *(void *)(i + 40) = 0LL;
    nw_frame_finalize(i);
  }

  if (v7 >= a3) {
    return 1LL;
  }
  if (!gLogDatapath) {
    return 0LL;
  }
  v25 = (os_log_s *)__nwlog_obj();
  result = os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    *(_DWORD *)buf = 136446978;
    v28 = "nw_shoes_read_into_buffer";
    v29 = 2082;
    v30 = a1 + 151;
    v31 = 1024;
    LODWORD(v32[0]) = v7;
    WORD2(v32[0]) = 1024;
    *(_DWORD *)((char *)v32 + 6) = a3;
    _os_log_impl( &dword_181A5C000,  v25,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s Read incomplete (%u < %u)",  buf,  0x22u);
    return 0LL;
  }

  return result;
}

      goto LABEL_45;
    }
  }

  v8 = -[NWConcrete_nw_candidate_manager init:]( objc_alloc(&OBJC_CLASS___NWConcrete_nw_candidate_manager),  "init:",  v3->parameters);
  nw_candidate_manager_set_bonjour_service(v8, v5);
  v9 = nw_parameters_copy_description_internal(*((NWConcrete_nw_parameters **)v8 + 10), 1);
  if (__nwlog_candidate_manager_log::onceToken != -1) {
    dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
  }
  v10 = (os_log_s *)(id)gcandidate_managerLogObj;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = (char *)*((void *)v8 + 1);
    *(_DWORD *)buf = 136446978;
    v30 = "nw_candidate_manager_create_with_connection";
    v31 = 2048;
    v32 = v11;
    v33 = 2112;
    v34 = v8;
    v35 = 2082;
    v36 = v9;
    _os_log_impl( &dword_181A5C000,  v10,  OS_LOG_TYPE_DEFAULT,  "%{public}s [CM%zu] Creating candidate_manager %@ with parameters %{public}s",  buf,  0x2Au);
  }

  if (v9) {
    free(v9);
  }
  nw_candidate_manager_set_connection((NWConcrete_nw_candidate_manager *)v8, v3);
  nw_candidate_manager_set_state(v8, 2LL);
LABEL_11:

  return v8;
}

          if (v12) {
            free(v12);
          }
          goto LABEL_11;
        }
      }
    }
  }

    if (v13) {
      free(v13);
    }
    v6 = 0LL;
    goto LABEL_6;
  }

  v6 = *((void *)v4 + 11) == (void)nw_framer_allocate_options;
LABEL_6:

LABEL_8:
  return v6;
}

LABEL_45:
      if (v12) {
        free(v12);
      }
      goto LABEL_9;
    }

    if (!v25)
    {
      __nwlog_obj();
      v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_framer_message_copy_original_message";
        _os_log_impl( &dword_181A5C000,  v13,  v23,  "%{public}s called with null nw_protocol_metadata_is_framer_message(reply), backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_44;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v20 = type;
    v21 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_framer_message_copy_original_message";
        _os_log_impl( &dword_181A5C000,  v13,  v20,  "%{public}s called with null nw_protocol_metadata_is_framer_message(reply), no backtrace",  buf,  0xCu);
      }

      goto LABEL_44;
    }

    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&buf[4] = "nw_framer_message_copy_original_message";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v13,  v20,  "%{public}s called with null nw_protocol_metadata_is_framer_message(reply), dumping backtrace:%{public}s",  buf,  0x16u);
    }

      goto LABEL_45;
    }

    if (!v30)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = (os_log_s *)(id)gLogObj;
      v26 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_endpoint_append_public_key_block_invoke";
        _os_log_impl( &dword_181A5C000,  v5,  v26,  "%{public}s Adding key would exceed maximum count, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_44;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (os_log_s *)(id)gLogObj;
    v17 = type;
    v18 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_endpoint_append_public_key_block_invoke";
        _os_log_impl( &dword_181A5C000,  v5,  v17,  "%{public}s Adding key would exceed maximum count, no backtrace",  buf,  0xCu);
      }

      goto LABEL_44;
    }

    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      v33 = "nw_endpoint_append_public_key_block_invoke";
      v34 = 2082;
      v35 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v5,  v17,  "%{public}s Adding key would exceed maximum count, dumping backtrace:%{public}s",  buf,  0x16u);
    }
  }

  free(backtrace_string);
  if (!v4) {
    return;
  }
LABEL_46:
  free(v4);
}

    free(backtrace_string);
    goto LABEL_57;
  }

  v5 = v4;
  if (*((_DWORD *)v4 + 11) <= path_index)
  {
    v6 = 0LL;
  }

  else if (path_index)
  {
    v6 = *((void *)v5 + 52) + 360LL * (path_index - 1);
  }

  else
  {
    v6 = (uint64_t)v5 + 56;
  }

  v7 = *(void *)(v6 + 168);
LABEL_14:

  return v7;
}

    free(backtrace_string);
    goto LABEL_57;
  }

  v5 = v4;
  if (*((_DWORD *)v4 + 11) <= path_index)
  {
    v6 = 0LL;
  }

  else if (path_index)
  {
    v6 = *((void *)v5 + 52) + 360LL * (path_index - 1);
  }

  else
  {
    v6 = (uint64_t)v5 + 56;
  }

  v7 = *(void *)(v6 + 160);
LABEL_14:

  return v7;
}

    free(backtrace_string);
    goto LABEL_57;
  }

  v5 = v4;
  if (*((_DWORD *)v4 + 11) <= path_index)
  {
    v6 = 0LL;
  }

  else if (path_index)
  {
    v6 = *((void *)v5 + 52) + 360LL * (path_index - 1);
  }

  else
  {
    v6 = (uint64_t)v5 + 56;
  }

  v7 = *(void *)(v6 + 64);
LABEL_14:

  return v7;
}

    free(backtrace_string);
    goto LABEL_57;
  }

  v5 = v4;
  if (*((_DWORD *)v4 + 11) <= path_index)
  {
    v6 = 0LL;
  }

  else if (path_index)
  {
    v6 = *((void *)v5 + 52) + 360LL * (path_index - 1);
  }

  else
  {
    v6 = (uint64_t)v5 + 56;
  }

  v7 = *(void *)(v6 + 72);
LABEL_14:

  return v7;
}

    free(backtrace_string);
    goto LABEL_57;
  }

  v5 = v4;
  if (*((_DWORD *)v4 + 11) <= path_index)
  {
    v6 = 0LL;
  }

  else if (path_index)
  {
    v6 = *((void *)v5 + 52) + 360LL * (path_index - 1);
  }

  else
  {
    v6 = (uint64_t)v5 + 56;
  }

  v7 = *(void *)(v6 + 40);
LABEL_14:

  return v7;
}

    free(backtrace_string);
    goto LABEL_57;
  }

  v5 = v4;
  if (*((_DWORD *)v4 + 11) <= path_index)
  {
    v6 = 0LL;
  }

  else if (path_index)
  {
    v6 = *((void *)v5 + 52) + 360LL * (path_index - 1);
  }

  else
  {
    v6 = (uint64_t)v5 + 56;
  }

  v7 = *(void *)(v6 + 48);
LABEL_14:

  return v7;
}

    free(backtrace_string);
    goto LABEL_57;
  }

  v5 = v4;
  if (*((_DWORD *)v4 + 11) <= path_index)
  {
    v6 = 0LL;
  }

  else if (path_index)
  {
    v6 = *((void *)v5 + 52) + 360LL * (path_index - 1);
  }

  else
  {
    v6 = (uint64_t)v5 + 56;
  }

  v7 = *(void *)(v6 + 56);
LABEL_14:

  return v7;
}

    free(backtrace_string);
    goto LABEL_57;
  }

  v5 = v4;
  if (*((_DWORD *)v4 + 11) <= path_index)
  {
    v6 = 0LL;
  }

  else if (path_index)
  {
    v6 = *((void *)v5 + 52) + 360LL * (path_index - 1);
  }

  else
  {
    v6 = (uint64_t)v5 + 56;
  }

  v7 = *(void *)(v6 + 32);
LABEL_14:

  return v7;
}

    free(backtrace_string);
    goto LABEL_57;
  }

  v5 = v4;
  if (*((_DWORD *)v4 + 11) <= path_index)
  {
    v6 = 0LL;
  }

  else if (path_index)
  {
    v6 = (uint64_t *)(v5[52] + 360LL * (path_index - 1));
  }

  else
  {
    v6 = v5 + 7;
  }

  v7 = *v6;
LABEL_14:

  return v7;
}

    free(backtrace_string);
    goto LABEL_57;
  }

  v5 = v4;
  if (*((_DWORD *)v4 + 11) <= a2)
  {
    v6 = 0LL;
  }

  else if (a2)
  {
    v6 = *((void *)v5 + 52) + 360LL * (a2 - 1);
  }

  else
  {
    v6 = (uint64_t)v5 + 56;
  }

  v7 = *(void *)(v6 + 80);
LABEL_14:

  return v7;
}

    free(backtrace_string);
    goto LABEL_57;
  }

  v5 = v4;
  if (*((_DWORD *)v4 + 11) <= a2)
  {
    v6 = 0LL;
  }

  else if (a2)
  {
    v6 = *((void *)v5 + 52) + 360LL * (a2 - 1);
  }

  else
  {
    v6 = (uint64_t)v5 + 56;
  }

  v7 = *(void *)(v6 + 88);
LABEL_14:

  return v7;
}

    free(backtrace_string);
    goto LABEL_57;
  }

  v5 = v4;
  if (*((_DWORD *)v4 + 11) <= a2)
  {
    v6 = 0LL;
  }

  else if (a2)
  {
    v6 = *((void *)v5 + 52) + 360LL * (a2 - 1);
  }

  else
  {
    v6 = (uint64_t)v5 + 56;
  }

  v7 = *(void *)(v6 + 96);
LABEL_14:

  return v7;
}

    free(backtrace_string);
    goto LABEL_57;
  }

  v5 = v4;
  if (*((_DWORD *)v4 + 11) <= a2)
  {
    v6 = 0LL;
  }

  else if (a2)
  {
    v6 = *((void *)v5 + 52) + 360LL * (a2 - 1);
  }

  else
  {
    v6 = (uint64_t)v5 + 56;
  }

  v7 = *(void *)(v6 + 104);
LABEL_14:

  return v7;
}

    goto LABEL_45;
  }

  if (v4)
  {
    *(void *)v35 = 0LL;
    *(void *)&v35[8] = v35;
    *(void *)&v35[16] = 0x2020000000LL;
    v36 = 0;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = __nw_connection_group_set_queue_block_invoke;
    aBlock[3] = &unk_189BBEEE8;
    v6 = v3;
    v25 = v6;
    v26 = v5;
    v27 = v35;
    v7 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v3 + 43);
    v7[2](v7);
    os_unfair_lock_unlock(v3 + 43);

    if (*(_BYTE *)(*(void *)&v35[8] + 24LL)
      && !nw_parameters_get_logging_disabled(*(void *)&v6[14]._os_unfair_lock_opaque))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
      }
      v8 = (os_log_s *)(id)gconnection_groupLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        os_unfair_lock_opaque = v6[42]._os_unfair_lock_opaque;
        *(_DWORD *)buf = 136446722;
        v30 = "nw_connection_group_set_queue";
        v31 = 1024;
        v32 = os_unfair_lock_opaque;
        v33 = 2080;
        v34 = "set queue";
        _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_ERROR,  "%{public}s [G%u] failed to %s because group has already been started",  buf,  0x1Cu);
      }
    }

    _Block_object_dispose(v35, 8);
    goto LABEL_11;
  }

  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)v35 = 136446210;
  *(void *)&v35[4] = "nw_connection_group_set_queue";
  v11 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  v28 = 0;
  if (buf[0] == 17)
  {
    __nwlog_obj();
    v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v15 = buf[0];
    if (os_log_type_enabled(v12, (os_log_type_t)buf[0]))
    {
      *(_DWORD *)v35 = 136446210;
      *(void *)&v35[4] = "nw_connection_group_set_queue";
      _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null queue", v35, 0xCu);
    }

    goto LABEL_44;
  }

  if (!v28)
  {
    __nwlog_obj();
    v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v23 = buf[0];
    if (os_log_type_enabled(v12, (os_log_type_t)buf[0]))
    {
      *(_DWORD *)v35 = 136446210;
      *(void *)&v35[4] = "nw_connection_group_set_queue";
      _os_log_impl(&dword_181A5C000, v12, v23, "%{public}s called with null queue, backtrace limit exceeded", v35, 0xCu);
    }

    goto LABEL_44;
  }

  v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v20 = buf[0];
  v21 = os_log_type_enabled(v12, (os_log_type_t)buf[0]);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)v35 = 136446210;
      *(void *)&v35[4] = "nw_connection_group_set_queue";
      _os_log_impl(&dword_181A5C000, v12, v20, "%{public}s called with null queue, no backtrace", v35, 0xCu);
    }

    goto LABEL_44;
  }

  if (v21)
  {
    *(_DWORD *)v35 = 136446466;
    *(void *)&v35[4] = "nw_connection_group_set_queue";
    *(_WORD *)&v35[12] = 2082;
    *(void *)&v35[14] = v19;
    _os_log_impl( &dword_181A5C000,  v12,  v20,  "%{public}s called with null queue, dumping backtrace:%{public}s",  v35,  0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_46;
  }
LABEL_11:
}

    goto LABEL_45;
  }

  if (v4)
  {
    *(void *)v35 = 0LL;
    *(void *)&v35[8] = v35;
    *(void *)&v35[16] = 0x2020000000LL;
    v36 = 0;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = __nw_connection_group_set_membership_changed_handler_block_invoke;
    aBlock[3] = &unk_189BB7150;
    v6 = v3;
    v25 = v6;
    v26 = v5;
    v27 = v35;
    v7 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v3 + 43);
    v7[2](v7);
    os_unfair_lock_unlock(v3 + 43);

    if (*(_BYTE *)(*(void *)&v35[8] + 24LL)
      && !nw_parameters_get_logging_disabled(*(void *)&v6[14]._os_unfair_lock_opaque))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
      }
      v8 = (os_log_s *)(id)gconnection_groupLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        os_unfair_lock_opaque = v6[42]._os_unfair_lock_opaque;
        *(_DWORD *)buf = 136446722;
        v30 = "nw_connection_group_set_membership_changed_handler";
        v31 = 1024;
        v32 = os_unfair_lock_opaque;
        v33 = 2080;
        v34 = "set membership changed handler";
        _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_ERROR,  "%{public}s [G%u] failed to %s because group has already been started",  buf,  0x1Cu);
      }
    }

    _Block_object_dispose(v35, 8);
    goto LABEL_11;
  }

  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)v35 = 136446210;
  *(void *)&v35[4] = "nw_connection_group_set_membership_changed_handler";
  v11 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  v28 = 0;
  if (buf[0] == 17)
  {
    __nwlog_obj();
    v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v15 = buf[0];
    if (os_log_type_enabled(v12, (os_log_type_t)buf[0]))
    {
      *(_DWORD *)v35 = 136446210;
      *(void *)&v35[4] = "nw_connection_group_set_membership_changed_handler";
      _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null membership_change_handler", v35, 0xCu);
    }

    goto LABEL_44;
  }

  if (!v28)
  {
    __nwlog_obj();
    v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v23 = buf[0];
    if (os_log_type_enabled(v12, (os_log_type_t)buf[0]))
    {
      *(_DWORD *)v35 = 136446210;
      *(void *)&v35[4] = "nw_connection_group_set_membership_changed_handler";
      _os_log_impl( &dword_181A5C000,  v12,  v23,  "%{public}s called with null membership_change_handler, backtrace limit exceeded",  v35,  0xCu);
    }

    goto LABEL_44;
  }

  v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v20 = buf[0];
  v21 = os_log_type_enabled(v12, (os_log_type_t)buf[0]);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)v35 = 136446210;
      *(void *)&v35[4] = "nw_connection_group_set_membership_changed_handler";
      _os_log_impl( &dword_181A5C000,  v12,  v20,  "%{public}s called with null membership_change_handler, no backtrace",  v35,  0xCu);
    }

    goto LABEL_44;
  }

  if (v21)
  {
    *(_DWORD *)v35 = 136446466;
    *(void *)&v35[4] = "nw_connection_group_set_membership_changed_handler";
    *(_WORD *)&v35[12] = 2082;
    *(void *)&v35[14] = v19;
    _os_log_impl( &dword_181A5C000,  v12,  v20,  "%{public}s called with null membership_change_handler, dumping backtrace:%{public}s",  v35,  0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_46;
  }
LABEL_11:
}

LABEL_45:
      if (v14) {
        free(v14);
      }
      goto LABEL_11;
    }

    if (!v26)
    {
      __nwlog_obj();
      v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_protocol_instance_access_flow_state";
        _os_log_impl( &dword_181A5C000,  v15,  v25,  "%{public}s called with null access_block, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_44;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v22 = type;
    v23 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_protocol_instance_access_flow_state";
        _os_log_impl(&dword_181A5C000, v15, v22, "%{public}s called with null access_block, no backtrace", buf, 0xCu);
      }

      goto LABEL_44;
    }

    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      v29 = "nw_protocol_instance_access_flow_state";
      v30 = 2082;
      v31 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v15,  v22,  "%{public}s called with null access_block, dumping backtrace:%{public}s",  buf,  0x16u);
    }

  if (v12) {
    free(v12);
  }
  return 0LL;
}

    goto LABEL_45;
  }

  v5 = *(void *)(v3[13] + 176LL);
  if (v5)
  {
    v6 = *(xpc_object_t **)(v5 + 72);
    if (!v6) {
      goto LABEL_7;
    }
    goto LABEL_8;
  }

  v7 = calloc(1uLL, 0x90uLL);
  if (v7)
  {
LABEL_6:
    *(void *)(v4[13] + 176LL) = v7;
    v6 = *(xpc_object_t **)(*(void *)(v4[13] + 176LL) + 72LL);
    if (!v6)
    {
LABEL_7:
      v8 = xpc_array_create(v6, 0LL);
      v9 = *(void *)(v4[13] + 176LL);
      v10 = *(void **)(v9 + 72);
      *(void *)(v9 + 72) = v8;

      v6 = *(xpc_object_t **)(*(void *)(v4[13] + 176LL) + 72LL);
      if (v6) {
        goto LABEL_8;
      }
      __nwlog_obj();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v30 = "nw_parameters_require_netagent_uuid";
      v12 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v27 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_parameters_require_netagent_uuid";
          _os_log_impl( &dword_181A5C000,  v13,  v21,  "%{public}s called with null parameters->path_parameters->extended_objects->required_netagent_uuids",  buf,  0xCu);
        }
      }

      else if (v27)
      {
        v23 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v24 = type;
        v25 = os_log_type_enabled(v13, type);
        if (v23)
        {
          if (v25)
          {
            *(_DWORD *)buf = 136446466;
            v30 = "nw_parameters_require_netagent_uuid";
            v31 = 2082;
            v32 = (uint64_t)v23;
            _os_log_impl( &dword_181A5C000,  v13,  v24,  "%{public}s called with null parameters->path_parameters->extended_objects->required_netagent_uuids, dumpin g backtrace:%{public}s",  buf,  0x16u);
          }

          free(v23);
          if (!v12) {
            goto LABEL_9;
          }
          goto LABEL_46;
        }

        if (v25)
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_parameters_require_netagent_uuid";
          _os_log_impl( &dword_181A5C000,  v13,  v24,  "%{public}s called with null parameters->path_parameters->extended_objects->required_netagent_uuids, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v26 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_parameters_require_netagent_uuid";
          _os_log_impl( &dword_181A5C000,  v13,  v26,  "%{public}s called with null parameters->path_parameters->extended_objects->required_netagent_uuids, backtrac e limit exceeded",  buf,  0xCu);
        }
      }

      goto LABEL_44;
    }

    goto LABEL_45;
  }

  if (service_class < 0xFF)
  {
    *((_BYTE *)v3 + 94) = service_class;
    switch(service_class)
    {
      case nw_service_class_best_effort:
        *(_DWORD *)(*((void *)v3 + 13) + 72LL) = 0;
        goto LABEL_11;
      case nw_service_class_background:
        v5 = *((void *)v3 + 13);
        v6 = 200;
        goto LABEL_10;
      case nw_service_class_interactive_video:
        v5 = *((void *)v3 + 13);
        v6 = 700;
        goto LABEL_10;
      case nw_service_class_interactive_voice:
        v5 = *((void *)v3 + 13);
        v6 = 800;
        goto LABEL_10;
      case nw_service_class_responsive_data:
        v5 = *((void *)v3 + 13);
        v6 = 300;
        goto LABEL_10;
      case nw_service_class_signaling:
        v5 = *((void *)v3 + 13);
        v6 = 10002;
LABEL_10:
        *(_DWORD *)(v5 + 72) = v6;
        break;
      default:
        goto LABEL_11;
    }

    goto LABEL_11;
  }

  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v24 = "nw_parameters_set_service_class";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_parameters_set_service_class";
      _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null (static_cast<uint32_t>(service_class) < UINT8_MAX)",  buf,  0xCu);
    }

    goto LABEL_44;
  }

  if (!v21)
  {
    __nwlog_obj();
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_parameters_set_service_class";
      _os_log_impl( &dword_181A5C000,  v9,  v20,  "%{public}s called with null (static_cast<uint32_t>(service_class) < UINT8_MAX), backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_44;
  }

  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_parameters_set_service_class";
      _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s called with null (static_cast<uint32_t>(service_class) < UINT8_MAX), no backtrace",  buf,  0xCu);
    }

    goto LABEL_44;
  }

  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v24 = "nw_parameters_set_service_class";
    v25 = 2082;
    v26 = v16;
    _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s called with null (static_cast<uint32_t>(service_class) < UINT8_MAX), dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_46;
  }
LABEL_11:
}

      free(v34);
    }
  }

  if (a2->output_handler != handle)
  {
    if (!*(void *)&handle[2].flow_id[8]) {
      goto LABEL_48;
    }
    return 1LL;
  }

  nw_protocol_set_output_handler((uint64_t)a2, 0LL);
  if (*(void *)&handle[2].flow_id[8]) {
    return 1LL;
  }
LABEL_48:
  if (handle->default_input_handler
    || handle[2].output_handler_context != *(void **)handle[3].flow_id
    || (BYTE6(handle[4].output_handler) & 8) != 0)
  {
    return 1LL;
  }

  if (a3) {
    v33 = 8;
  }
  else {
    v33 = 0;
  }
  BYTE6(handle[4].output_handler) = BYTE6(handle[4].output_handler) & 0xF7 | v33;
  output_handler = (uint64_t)handle->output_handler;
  if (output_handler) {
    v35 = nw_protocol_remove_input_handler(output_handler, (uint64_t)handle);
  }
  else {
    v35 = 1LL;
  }
  if (a3)
  {
    nw_protocol_remove_instance((uint64_t)handle);
    handle->handle = 0LL;
    nw_http_client_bottom_destroy((uint64_t)handle);
  }

  return v35;
}

        free(v28);
        goto LABEL_45;
      }

      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v29 = (id)gLogObj;
        v30 = type;
        if (!os_log_type_enabled((os_log_t)v29, type))
        {
LABEL_42:

          goto LABEL_43;
        }

        *(_DWORD *)buf = 136446210;
        v57 = "nwphReportCheck";
        v31 = "%{public}s xpc_dictionary_create failed";
      }

      else
      {
        if (v54)
        {
          v53 = v11;
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v44 = (os_log_s *)(id)gLogObj;
          v45 = type;
          v46 = os_log_type_enabled(v44, type);
          if (backtrace_string)
          {
            if (v46)
            {
              *(_DWORD *)buf = 136446466;
              v57 = "nwphReportCheck";
              v58 = 2082;
              v59 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v44,  v45,  "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(backtrace_string);
            v11 = v53;
            if (!v28) {
              goto LABEL_45;
            }
          }

          else
          {
            if (v46)
            {
              *(_DWORD *)buf = 136446210;
              v57 = "nwphReportCheck";
              _os_log_impl( &dword_181A5C000,  v44,  v45,  "%{public}s xpc_dictionary_create failed, no backtrace",  buf,  0xCu);
            }

            v11 = v53;
            if (!v28) {
              goto LABEL_45;
            }
          }

          goto LABEL_44;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v29 = (id)gLogObj;
        v30 = type;
        if (!os_log_type_enabled((os_log_t)v29, type)) {
          goto LABEL_42;
        }
        *(_DWORD *)buf = 136446210;
        v57 = "nwphReportCheck";
        v31 = "%{public}s xpc_dictionary_create failed, backtrace limit exceeded";
      }

      _os_log_impl(&dword_181A5C000, (os_log_t)v29, v30, v31, buf, 0xCu);
      goto LABEL_42;
    }

    v47 = v15;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v16 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      v57 = "nwphShouldRunCheck";
      v58 = 2080;
      v48 = "settings";
      *(_DWORD *)buf = 136447234;
      if (a4) {
        v48 = "asset";
      }
      v59 = (void *)v48;
      v60 = 2114;
      v61 = (int64_t)v13;
      v62 = 2048;
      v63 = *(void *)&v47;
      v64 = 2048;
      v65 = a6;
      v42 = "%{public}s last %s success was at %{public}@ (%f < %f), skipping";
LABEL_37:
      _os_log_impl(&dword_181A5C000, v16, OS_LOG_TYPE_DEBUG, v42, buf, 0x34u);
    }
  }

  v49 = 0LL;
LABEL_46:

  return v49;
}

  if (v8) {
LABEL_45:
  }
    free(v8);
LABEL_46:
  close(v6);
  return 0LL;
}

          if (v18)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v34 = (os_log_s *)(id)gLogObj;
            if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)v52 = 136446210;
              v53 = "nw_endpoint_proxy_copy_synthesized_url";
              _os_log_impl( &dword_181A5C000,  v34,  OS_LOG_TYPE_DEBUG,  "%{public}s Overrode to https://, adding port number to URL",  v52,  0xCu);
            }

            v35 = v9;
            v36 = [v35 port];

            CFStringAppendFormat(Mutable, 0LL, @":%u", __rev16(v36));
          }

          v12 = CFURLCreateWithString(v13, Mutable, 0LL);
          CFRelease(Mutable);
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v37 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v52 = 136446466;
            v53 = "nw_endpoint_proxy_copy_synthesized_url";
            v54 = 2114;
            v55 = v12;
            _os_log_impl(&dword_181A5C000, v37, OS_LOG_TYPE_DEBUG, "%{public}s Synthesized URL %{public}@", v52, 0x16u);
          }

LABEL_60:
          _Block_object_dispose(buf, 8);
          goto LABEL_61;
        }

    if (v14) {
      free(v14);
    }
    goto LABEL_34;
  }

  v5 = v3;
  v6 = v5[7];

  if (!v6)
  {
LABEL_33:

LABEL_34:
    return;
  }

  cached_content_for_protocol = (unsigned int *)nw_association_get_cached_content_for_protocol( v6,  (void *)nw_protocol_copy_proxy_definition(void)::proxy_definition);
  if (cached_content_for_protocol || (cached_content_for_protocol = (unsigned int *)calloc(1uLL, 8uLL)) != 0LL)
  {
    if (a2)
    {
LABEL_8:
      v8 = *cached_content_for_protocol + 1LL;
      v9 = v8 << 31 >> 31;
      *cached_content_for_protocol = v8;
      if (v9 != v8 || v9 < 0)
      {
        v10 = cached_content_for_protocol;
        if (gLogDatapath)
        {
          __nwlog_obj();
          v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
          {
            v12 = *cached_content_for_protocol;
            *(_DWORD *)buf = 136446978;
            v32 = "nw_endpoint_proxy_record_result";
            v33 = 2082;
            v34 = "result_cache->success_count";
            v35 = 2048;
            v36 = 1LL;
            v37 = 2048;
            v38 = v12;
            _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_DEBUG,  "%{public}s Overflow: %{public}s, increment %llu, result %llu",  buf,  0x2Au);
          }

          v10 = cached_content_for_protocol;
LABEL_40:

          goto LABEL_29;
        }

        goto LABEL_29;
      }

      goto LABEL_30;
    }

    *(_DWORD *)buf = 0;
    nw_frame_array_get_frame_count((uint64_t *)a1, 0, buf);
    v28 = *(_DWORD *)buf;
    if (*(_DWORD *)buf <= *(_DWORD *)(a1 + 32))
    {
LABEL_51:
      if (gLogDatapath)
      {
        v32 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        {
          v33 = *(_DWORD *)(a1 + 24);
          *(_DWORD *)buf = 136446466;
          v76 = "frame_cache_purge_if_necessary";
          v77 = 1024;
          *(_DWORD *)v78 = v33;
          _os_log_impl( &dword_181A5C000,  v32,  OS_LOG_TYPE_DEBUG,  "%{public}s total %u empty frames in cache (final)",  buf,  0x12u);
        }
      }

      return;
    }

    while (1)
    {
      if (gLogDatapath)
      {
        v30 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
        {
          v31 = *(_DWORD *)(a1 + 32);
          *(_DWORD *)buf = 136446722;
          v76 = "frame_cache_purge_if_necessary";
          v77 = 1024;
          *(_DWORD *)v78 = v28;
          *(_WORD *)&v78[4] = 1024;
          *(_DWORD *)&v78[6] = v31;
          _os_log_impl( &dword_181A5C000,  v30,  OS_LOG_TYPE_DEBUG,  "%{public}s too many bytes in frame cache (%u > %u), pruning",  buf,  0x18u);
        }
      }

      v29 = **(void ***)(*(void *)v9 + 8LL);
      if (!v29) {
        break;
      }
      frame_cache_remove_from_cache(a1, v29);
      *(_DWORD *)buf = 0;
      nw_frame_array_get_frame_count((uint64_t *)a1, 0, buf);
      v28 = *(_DWORD *)buf;
      if (*(_DWORD *)buf <= *(_DWORD *)(a1 + 32)) {
        goto LABEL_51;
      }
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v40 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)buf = 136446722;
    v76 = "frame_cache_purge_if_necessary";
    v77 = 1024;
    *(_DWORD *)v78 = v28;
    *(_WORD *)&v78[4] = 1024;
    *(_DWORD *)&v78[6] = v40;
    v35 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v73 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v41 = gLogObj;
      v42 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_83;
      }
      v43 = *(_DWORD *)(a1 + 24);
      *(_DWORD *)buf = 136446722;
      v76 = "frame_cache_purge_if_necessary";
      v77 = 1024;
      *(_DWORD *)v78 = v28;
      *(_WORD *)&v78[4] = 1024;
      *(_DWORD *)&v78[6] = v43;
      v39 = "%{public}s no more frames in frame cache, we thought we had %u bytes in %u frames";
    }

    else if (v73)
    {
      v44 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v41 = gLogObj;
      v42 = type;
      v51 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v44)
      {
        if (v51)
        {
          v52 = *(_DWORD *)(a1 + 24);
          *(_DWORD *)buf = 136446978;
          v76 = "frame_cache_purge_if_necessary";
          v77 = 1024;
          *(_DWORD *)v78 = v28;
          *(_WORD *)&v78[4] = 1024;
          *(_DWORD *)&v78[6] = v52;
          *(_WORD *)&v78[10] = 2082;
          *(void *)&v78[12] = v44;
          v47 = "%{public}s no more frames in frame cache, we thought we had %u bytes in %u frames, dumping backtrace:%{public}s";
          v48 = (os_log_s *)v41;
          v49 = v42;
          v50 = 34;
          goto LABEL_70;
        }

  if (v27) {
    free(v27);
  }
LABEL_3:

  if (a3 == 6)
  {
    secure_tcp = nw_parameters_create_secure_tcp(&__block_literal_global_18956, &__block_literal_global_91);
  }

  else if (a3 == 17)
  {
    secure_tcp = nw_parameters_create_secure_udp(&__block_literal_global_18956, &__block_literal_global_91);
  }

  else
  {
    secure_tcp = nw_parameters_create_custom_ip(a3, &__block_literal_global_91);
  }

  v13 = secure_tcp;
  v57 = 0LL;
  v58 = &v57;
  v59 = 0x3032000000LL;
  v60 = __Block_byref_object_copy__248;
  v61 = __Block_byref_object_dispose__249;
  v62 = 0LL;
  aBlock[0] = v11;
  aBlock[1] = 3221225472LL;
  aBlock[2] = ___ZL48nw_masque_connection_pair_setup_outer_connectionP36NWConcrete_nw_masque_connection_pairPU25objcproto14OS_nw_endpoint8NSObjecthPU29objcproto18OS_nw_http_requestS1__block_invoke;
  aBlock[3] = &unk_189BC9210;
  v56 = &v57;
  v14 = v9;
  v55 = v14;
  v15 = (void (**)(void))_Block_copy(aBlock);
  os_unfair_lock_lock(v9 + 2);
  v15[2](v15);
  os_unfair_lock_unlock(v9 + 2);

  v16 = (os_unfair_lock_s *)objc_loadWeakRetained((id *)(*(void *)&v14[4]._os_unfair_lock_opaque + 40LL));
  v17 = v16;
  if (v16)
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    v68 = __Block_byref_object_copy__87670;
    v69 = __Block_byref_object_dispose__87671;
    v70 = 0LL;
    v63[0] = v11;
    v63[1] = 3221225472LL;
    v63[2] = __nw_masque_server_copy_client_queue_block_invoke;
    v63[3] = &unk_189BC9210;
    v65 = buf;
    v64 = v16;
    v18 = (void (**)(void))_Block_copy(v63);
    os_unfair_lock_lock(v17 + 4);
    v18[2](v18);
    os_unfair_lock_unlock(v17 + 4);

    v19 = (dispatch_queue_s *)*(id *)(*(void *)&buf[8] + 40LL);
    _Block_object_dispose(buf, 8);

    goto LABEL_10;
  }

  __nwlog_obj();
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&buf[4] = "nw_masque_server_copy_client_queue";
  v42 = (const char *)_os_log_send_and_compose_impl();

  LOBYTE(v63[0]) = 16;
  v66 = 0;
  v31 = (char *)v42;
  if (__nwlog_fault(v42, v63, &v66))
  {
    if (LOBYTE(v63[0]) == 17)
    {
      __nwlog_obj();
      v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v33 = v63[0];
      if (os_log_type_enabled(v32, v63[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_masque_server_copy_client_queue";
        _os_log_impl(&dword_181A5C000, v32, v33, "%{public}s called with null server", buf, 0xCu);
      }
    }

    else if (v66)
    {
      v37 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      type = v63[0];
      v38 = os_log_type_enabled(v32, v63[0]);
      if (v37)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&buf[4] = "nw_masque_server_copy_client_queue";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v37;
          _os_log_impl( &dword_181A5C000,  v32,  type,  "%{public}s called with null server, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v37);
        goto LABEL_49;
      }

      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_masque_server_copy_client_queue";
        _os_log_impl(&dword_181A5C000, v32, type, "%{public}s called with null server, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v40 = v63[0];
      if (os_log_type_enabled(v32, v63[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_masque_server_copy_client_queue";
        _os_log_impl( &dword_181A5C000,  v32,  v40,  "%{public}s called with null server, backtrace limit exceeded",  buf,  0xCu);
      }
    }

LABEL_49:
    v31 = (char *)v42;
  }

  if (v31) {
    free(v31);
  }
  v19 = 0LL;
LABEL_10:

  if (v58[5] && v19)
  {
    v20 = *(void *)&v14[4]._os_unfair_lock_opaque;
    v21 = *(void *)(v20 + 16);
    v22 = nw_connection_copy_endpoint(*(nw_connection_t *)(v20 + 48));
    v23 = *(id *)(*(void *)&v14[4]._os_unfair_lock_opaque + 32LL);
    block[0] = v11;
    block[1] = 3221225472LL;
    block[2] = ___ZL48nw_masque_connection_pair_setup_outer_connectionP36NWConcrete_nw_masque_connection_pairPU25objcproto14OS_nw_endpoint8NSObjecthPU29objcproto18OS_nw_http_requestS1__block_invoke_2;
    block[3] = &unk_189BBB6A8;
    v51 = &v57;
    v52 = v21;
    v45 = v43;
    v46 = v13;
    v47 = v22;
    v48 = v10;
    v49 = v23;
    v50 = v14;
    v53 = a3;
    v24 = v23;
    v25 = v22;
    dispatch_async(v19, block);
  }

  else
  {
    nw_masque_connection_pair_setup_outer_connection_inner(v14, v43, a3, v13);
  }

  _Block_object_dispose(&v57, 8);
}

  if (v18) {
    free(v18);
  }
  v5 = 0LL;
LABEL_8:

LABEL_9:
}

    free(backtrace_string);
    goto LABEL_54;
  }

  v21 = (os_log_s *)__nwlog_obj();
  v22 = type;
  if (os_log_type_enabled(v21, type))
  {
    *(_DWORD *)buf = 136446210;
    v31 = "nw_protocol_ethernet_add_input_handler";
    v23 = "%{public}s called with null protocol";
LABEL_53:
    _os_log_impl(&dword_181A5C000, v21, v22, v23, buf, 0xCu);
  }

    *(_DWORD *)buf = 136447234;
    v29 = "tcp_connection_fillout_event_locked";
    v30 = 2048;
    v31 = v19;
    v32 = 2082;
    v33 = v20;
    v34 = 2082;
    v35 = a6;
    v36 = 1024;
    v37 = v15;
    _os_log_impl( &dword_181A5C000,  v18,  OS_LOG_TYPE_DEBUG,  "%{public}s %llu event: %{public}s, reason: %{public}s, should deliver: %{BOOL}d",  buf,  0x30u);
  }

  if (!v15) {
    goto LABEL_50;
  }
  if (!a4)
  {
    v21 = 0LL;
    goto LABEL_52;
  }

  if (!a5)
  {
    __nwlog_obj();
    v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v29 = "strict_malloc";
    v25 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v25);
    if (result) {
      goto LABEL_58;
    }
    free(v25);
  }

  v21 = malloc(a5);
  if (v21)
  {
LABEL_49:
    memcpy(v21, a4, a5);
LABEL_52:
    *(_DWORD *)(a2 + 8) = a3;
    *(void *)a2 = v21;
    v22 = 1LL;
    goto LABEL_53;
  }

  __nwlog_obj();
  v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v26, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v29 = "strict_malloc";
  v30 = 2048;
  v31 = a5;
  v27 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v27);
  if (!result)
  {
    free(v27);
    goto LABEL_49;
  }

    v13 = a3;
LABEL_45:
    if (a3)
    {
      if (v13) {
        *a2 = 0;
      }
    }

    goto LABEL_48;
  }

  __break(1u);
  return result;
}

    free(v18);
    if (!v11) {
      return;
    }
LABEL_64:
    free(v11);
    return;
  }

  if (gLogDatapath)
  {
    v15 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      v28 = "nw_protocol_http2_transport_notify";
      v29 = 2082;
      v30 = (char *)(v5 + 205);
      _os_log_impl(&dword_181A5C000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }

  v10 = *(char **)(v5 + 112);
  v23[0] = MEMORY[0x1895F87A8];
  v23[1] = 0x40000000LL;
  v23[2] = ___ZL34nw_protocol_http2_transport_notifyP11nw_protocolS0_31nw_protocol_notification_type_tPvm_block_invoke;
  v23[3] = &__block_descriptor_tmp_43_37761;
  v23[4] = v5;
  v23[5] = a2;
  v24 = a3;
  v23[6] = a4;
  v23[7] = a5;
  nw_hash_table_apply(v10, (uint64_t)v23);
}

        free(v33);
        goto LABEL_72;
      }

      if (!v34) {
        goto LABEL_72;
      }
      v53 = *(_DWORD *)(a2 + 8);
      buf = 136446722;
      v137 = "send_data_callback";
      v138 = 2082;
      v139 = v20;
      v140 = 1024;
      *(_DWORD *)v141 = v53;
      v19 = "%{public}s %{public}s asked to send 0 bytes on stream %d, no backtrace";
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v22 = gLogObj;
      v23 = v130;
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v130)) {
        goto LABEL_72;
      }
      v42 = *(_DWORD *)(a2 + 8);
      buf = 136446722;
      v137 = "send_data_callback";
      v138 = 2082;
      v139 = v20;
      v140 = 1024;
      *(_DWORD *)v141 = v42;
      v19 = "%{public}s %{public}s asked to send 0 bytes on stream %d, backtrace limit exceeded";
    }

    v54 = (os_log_s *)v22;
    v55 = v23;
    v56 = 28;
LABEL_71:
    _os_log_impl(&dword_181A5C000, v54, v55, v19, (uint8_t *)&buf, v56);
    goto LABEL_72;
  }

  v11 = *(void *)(a2 + 16);
  if (v11) {
    v12 = 10;
  }
  else {
    v12 = 9;
  }
  if (v11 <= 1) {
    v13 = 0;
  }
  else {
    v13 = v11 - 1;
  }
  v14 = (v13 + v12);
  if (0xFFFFFFFFLL - a4 < v14)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v15 = a6 + 205;
    buf = 136446466;
    v137 = "send_data_callback";
    v138 = 2082;
    v139 = a6 + 205;
    v16 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v130) = 16;
    LOBYTE(v126) = 0;
    if (v130 == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v17 = gLogObj;
      v18 = v130;
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v130)) {
        goto LABEL_72;
      }
      buf = 136446466;
      v137 = "send_data_callback";
      v138 = 2082;
      v139 = v15;
      v19 = "%{public}s %{public}s bytes_to_send overflow";
LABEL_70:
      v54 = (os_log_s *)v17;
      v55 = v18;
      v56 = 22;
      goto LABEL_71;
    }

    if (!(_BYTE)v126)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v17 = gLogObj;
      v18 = v130;
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v130)) {
        goto LABEL_72;
      }
      buf = 136446466;
      v137 = "send_data_callback";
      v138 = 2082;
      v139 = v15;
      v19 = "%{public}s %{public}s bytes_to_send overflow, backtrace limit exceeded";
      goto LABEL_70;
    }

    v33 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = gLogObj;
    v18 = v130;
    v40 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v130);
    if (!v33)
    {
      if (!v40) {
        goto LABEL_72;
      }
      buf = 136446466;
      v137 = "send_data_callback";
      v138 = 2082;
      v139 = v15;
      v19 = "%{public}s %{public}s bytes_to_send overflow, no backtrace";
      goto LABEL_70;
    }

    if (v40)
    {
      buf = 136446722;
      v137 = "send_data_callback";
      v138 = 2082;
      v139 = v15;
      v140 = 2082;
      *(void *)v141 = v33;
      v36 = "%{public}s %{public}s bytes_to_send overflow, dumping backtrace:%{public}s";
      v37 = (os_log_s *)v17;
      v38 = v18;
      v39 = 32;
      goto LABEL_43;
    }

    goto LABEL_44;
  }

  v25 = *a5;
  if (!*a5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v41 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      buf = 136446466;
      v137 = "send_data_callback";
      v138 = 2082;
      v139 = a6 + 205;
      _os_log_impl( &dword_181A5C000,  v41,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s Received unexpected NULL frame from data source",  (uint8_t *)&buf,  0x16u);
    }

    return 4294966775LL;
  }

  v26 = *(_DWORD *)(v25 + 52);
  if (v26) {
    v26 -= *(_DWORD *)(v25 + 56) + *(_DWORD *)(v25 + 60);
  }
  if (v26 != (_DWORD)a4)
  {
    if (gLogDatapath)
    {
      v88 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v88, OS_LOG_TYPE_DEBUG))
      {
        v89 = *(_DWORD *)(v25 + 52);
        if (v89) {
          v89 -= *(_DWORD *)(v25 + 56) + *(_DWORD *)(v25 + 60);
        }
        buf = 136446978;
        v137 = "send_data_callback";
        v138 = 2082;
        v139 = a6 + 205;
        v140 = 1024;
        *(_DWORD *)v141 = v89;
        *(_WORD *)&v141[4] = 1024;
        *(_DWORD *)&v141[6] = a4;
        _os_log_impl( &dword_181A5C000,  v88,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s source frame length %u, asked to send %u",  (uint8_t *)&buf,  0x22u);
      }
    }
  }

  v135[0] = 0LL;
  v135[1] = (uint64_t)v135;
  v134[0] = 0LL;
  v134[1] = v134;
  v27 = *(void *)(a6 + 32);
  if (v27)
  {
    v28 = *(void *)(v27 + 24);
    if (v28)
    {
      v29 = *(uint64_t (**)(void, uint64_t, void, void, uint64_t, uint64_t *))(v28 + 88);
      if (v29)
      {
        v30 = v14 + a4;
        v31 = v29(*(void *)(a6 + 32), a6, (v14 + a4), (v14 + a4), 0xFFFFFFFFLL, v135);
        v32 = 4294966792LL;
        if (!v31 || !v135[0]) {
          return v32;
        }
        buf = 0;
        nw_frame_array_get_frame_count(v135, 1, &buf);
        if (buf < v30)
        {
          if (!gLogDatapath) {
            return 4294966792LL;
          }
          v96 = (os_log_s *)__nwlog_obj();
          if (!os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG)) {
            return 4294966792LL;
          }
          buf = 136446466;
          v137 = "send_data_callback";
          v138 = 2082;
          v139 = a6 + 205;
          _os_log_impl( &dword_181A5C000,  v96,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s got back fewer bytes than necessary, returing E_WOULDBLOCK",  (uint8_t *)&buf,  0x16u);
          return 4294966792LL;
        }

        v130 = 0LL;
        v131 = &v130;
        v133 = 0;
        v132 = 0x2000000000LL;
        v126 = 0LL;
        v127 = &v126;
        v129 = 0;
        v128 = 0x2000000000LL;
        v124[0] = 0LL;
        v125 = 0;
        v124[1] = v124;
        v124[2] = 0x2000000000LL;
        v110[0] = MEMORY[0x1895F87A8];
        v110[1] = 0x40000000LL;
        v111 = ___ZL18send_data_callbackP15nghttp2_sessionP13nghttp2_framePKhmP19nghttp2_data_sourcePv_block_invoke;
        v112 = &unk_189BBCF88;
        v117 = a6;
        v118 = a2;
        v123 = v30;
        v113 = &v130;
        v114 = &v126;
        v119 = a4;
        v120 = v25;
        v115 = v124;
        v116 = a3;
        v121 = v135;
        v122 = v134;
        v43 = v135[0];
        do
        {
          if (!v43) {
            break;
          }
          v44 = *(void *)(v43 + 32);
          v45 = ((uint64_t (*)(void *))v111)(v110);
          v43 = v44;
        }

        while ((v45 & 1) != 0);
        v46 = *(void *)(v27 + 24);
        if (v46)
        {
          v47 = *(void (**)(uint64_t, void *))(v46 + 96);
          if (v47)
          {
            v47(v27, v134);
            goto LABEL_57;
          }
        }

        __nwlog_obj();
        v90 = *(const char **)(v27 + 16);
        if (!v90) {
          v90 = "invalid";
        }
        buf = 136446466;
        v137 = "send_data_callback";
        v138 = 2082;
        v139 = (uint64_t)v90;
        v91 = (char *)_os_log_send_and_compose_impl();
        type = OS_LOG_TYPE_ERROR;
        v108 = 0;
        if (__nwlog_fault(v91, &type, &v108))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            v92 = (os_log_s *)__nwlog_obj();
            v93 = type;
            if (!os_log_type_enabled(v92, type)) {
              goto LABEL_204;
            }
            v94 = *(const char **)(v27 + 16);
            if (!v94) {
              v94 = "invalid";
            }
            buf = 136446466;
            v137 = "send_data_callback";
            v138 = 2082;
            v139 = (uint64_t)v94;
            v95 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback";
            goto LABEL_203;
          }

          if (!v108)
          {
            v92 = (os_log_s *)__nwlog_obj();
            v93 = type;
            if (!os_log_type_enabled(v92, type)) {
              goto LABEL_204;
            }
            v102 = *(const char **)(v27 + 16);
            if (!v102) {
              v102 = "invalid";
            }
            buf = 136446466;
            v137 = "send_data_callback";
            v138 = 2082;
            v139 = (uint64_t)v102;
            v95 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback, backtrace limit exceeded";
            goto LABEL_203;
          }

          v99 = (char *)__nw_create_backtrace_string();
          v92 = (os_log_s *)__nwlog_obj();
          v93 = type;
          v100 = os_log_type_enabled(v92, type);
          if (v99)
          {
            if (v100)
            {
              v101 = *(const char **)(v27 + 16);
              if (!v101) {
                v101 = "invalid";
              }
              buf = 136446722;
              v137 = "send_data_callback";
              v138 = 2082;
              v139 = (uint64_t)v101;
              v140 = 2082;
              *(void *)v141 = v99;
              _os_log_impl( &dword_181A5C000,  v92,  v93,  "%{public}s protocol %{public}s has invalid finalize_output_frames callback, dumping backtrace:%{public}s",  (uint8_t *)&buf,  0x20u);
            }

            free(v99);
            goto LABEL_204;
          }

          if (v100)
          {
            v105 = *(const char **)(v27 + 16);
            if (!v105) {
              v105 = "invalid";
            }
            buf = 136446466;
            v137 = "send_data_callback";
            v138 = 2082;
            v139 = (uint64_t)v105;
            v95 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback, no backtrace";
LABEL_203:
            _os_log_impl(&dword_181A5C000, v92, v93, v95, (uint8_t *)&buf, 0x16u);
          }
        }

  v24 = *(char **)(a1 + 112);
  if (v24)
  {
    v49[0] = v4;
    v49[1] = 0x40000000LL;
    v49[2] = ___ZL35nw_http2_transport_connection_closeP27nw_protocol_http2_transport_block_invoke_18;
    v49[3] = &__block_descriptor_tmp_19_37072;
    v49[4] = a1;
    nw_hash_table_apply(v24, (uint64_t)v49);
    return;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v25 = a1 + 205;
  *(_DWORD *)buf = 136446466;
  v54 = "nw_http2_transport_connection_close";
  v55 = 2082;
  v56 = a1 + 205;
  v26 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v51 = 0;
  if (!__nwlog_fault(v26, &type, &v51))
  {
LABEL_62:
    if (!v26) {
      return;
    }
    goto LABEL_63;
  }

  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v27 = (os_log_s *)gLogObj;
    v28 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
      goto LABEL_62;
    }
    *(_DWORD *)buf = 136446466;
    v54 = "nw_http2_transport_connection_close";
    v55 = 2082;
    v56 = v25;
    v29 = "%{public}s %{public}s protocol table is NULL, cannot notify input handlers";
LABEL_60:
    v32 = v27;
    v33 = v28;
    v34 = 22;
LABEL_61:
    _os_log_impl(&dword_181A5C000, v32, v33, v29, buf, v34);
    goto LABEL_62;
  }

  if (!v51)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v27 = (os_log_s *)gLogObj;
    v28 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
      goto LABEL_62;
    }
    *(_DWORD *)buf = 136446466;
    v54 = "nw_http2_transport_connection_close";
    v55 = 2082;
    v56 = v25;
    v29 = "%{public}s %{public}s protocol table is NULL, cannot notify input handlers, backtrace limit exceeded";
    goto LABEL_60;
  }

  v30 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v27 = (os_log_s *)gLogObj;
  v28 = type;
  v31 = os_log_type_enabled((os_log_t)gLogObj, type);
  if (!v30)
  {
    if (!v31) {
      goto LABEL_62;
    }
    *(_DWORD *)buf = 136446466;
    v54 = "nw_http2_transport_connection_close";
    v55 = 2082;
    v56 = v25;
    v29 = "%{public}s %{public}s protocol table is NULL, cannot notify input handlers, no backtrace";
    goto LABEL_60;
  }

  if (v31)
  {
    *(_DWORD *)buf = 136446722;
    v54 = "nw_http2_transport_connection_close";
    v55 = 2082;
    v56 = v25;
    v57 = 2082;
    *(void *)v58 = v30;
    _os_log_impl( &dword_181A5C000,  v27,  v28,  "%{public}s %{public}s protocol table is NULL, cannot notify input handlers, dumping backtrace:%{public}s",  buf,  0x20u);
  }

  free(v30);
  if (v26) {
LABEL_63:
  }
    free(v26);
}

    _os_log_impl(&dword_181A5C000, v10, v11, v12, buf, 0xCu);
    goto LABEL_45;
  }

  if (a2)
  {
    v4 = *(void *)(a2 + 24);
    if (v4)
    {
      v5 = *(void (**)(uint64_t, uint64_t))(v4 + 184);
      if (!v5 || (v5(a2, a1), (v4 = *(void *)(a2 + 24)) != 0))
      {
        v6 = *(void (**)(uint64_t, uint64_t))(v4 + 48);
        if (v6) {
          v6(a2, a1);
        }
      }
    }

    if (gLogDatapath)
    {
      v13 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        v21 = "nw_http2_transport_protocol_close";
        v22 = 2082;
        v23 = (void *)(a1 + 205);
        v24 = 2048;
        v25 = a2;
        _os_log_impl( &dword_181A5C000,  v13,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s sent input_finished and disconnected to protocol %p",  buf,  0x20u);
      }
    }

    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v21 = "nw_http2_transport_protocol_close";
  v9 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v18 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v10 = (os_log_s *)__nwlog_obj();
    v11 = type;
    if (!os_log_type_enabled(v10, type)) {
      goto LABEL_45;
    }
    *(_DWORD *)buf = 136446210;
    v21 = "nw_http2_transport_protocol_close";
    v12 = "%{public}s called with null input_protocol";
    goto LABEL_44;
  }

  if (!v18)
  {
    v10 = (os_log_s *)__nwlog_obj();
    v11 = type;
    if (!os_log_type_enabled(v10, type)) {
      goto LABEL_45;
    }
    *(_DWORD *)buf = 136446210;
    v21 = "nw_http2_transport_protocol_close";
    v12 = "%{public}s called with null input_protocol, backtrace limit exceeded";
    goto LABEL_44;
  }

  v16 = (char *)__nw_create_backtrace_string();
  v10 = (os_log_s *)__nwlog_obj();
  v11 = type;
  v17 = os_log_type_enabled(v10, type);
  if (!v16)
  {
    if (!v17) {
      goto LABEL_45;
    }
    *(_DWORD *)buf = 136446210;
    v21 = "nw_http2_transport_protocol_close";
    v12 = "%{public}s called with null input_protocol, no backtrace";
    goto LABEL_44;
  }

  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    v21 = "nw_http2_transport_protocol_close";
    v22 = 2082;
    v23 = v16;
    _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s called with null input_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v9) {
    goto LABEL_46;
  }
}

  if (v14) {
    free(v14);
  }
  v6 = 0LL;
LABEL_8:

  return v6;
}

        goto LABEL_45;
      }

      if (!v24)
      {
        __nwlog_obj();
        v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v23 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_proxy_config_should_proxy_transport_at_level";
          _os_log_impl( &dword_181A5C000,  v13,  v23,  "%{public}s called with null protocol_name, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_44;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v20 = type;
      v21 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_proxy_config_should_proxy_transport_at_level";
          _os_log_impl(&dword_181A5C000, v13, v20, "%{public}s called with null protocol_name, no backtrace", buf, 0xCu);
        }

        goto LABEL_44;
      }

      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        v27 = "nw_proxy_config_should_proxy_transport_at_level";
        v28 = 2082;
        v29 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v13,  v20,  "%{public}s called with null protocol_name, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_32;
    }
  }

  else
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_proxy_config_should_proxy_transport_at_level";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v12, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_proxy_config_should_proxy_transport_at_level";
          _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null config", buf, 0xCu);
        }

        goto LABEL_44;
      }

      if (!v24)
      {
        __nwlog_obj();
        v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v22 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_proxy_config_should_proxy_transport_at_level";
          _os_log_impl( &dword_181A5C000,  v13,  v22,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_44;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_proxy_config_should_proxy_transport_at_level";
          _os_log_impl(&dword_181A5C000, v13, v18, "%{public}s called with null config, no backtrace", buf, 0xCu);
        }

        goto LABEL_44;
      }

      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        v27 = "nw_proxy_config_should_proxy_transport_at_level";
        v28 = 2082;
        v29 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
      }

    free(v29);
    if (!v19) {
      goto LABEL_14;
    }
LABEL_65:
    v17 = (char *)v19;
LABEL_13:
    free(v17);
    goto LABEL_14;
  }

  v11 = (char *)v9;
  v12 = v11 + 8;

  *(void *)key = 0LL;
  asprintf((char **)key, "%s%s", "LISTEN-", v12);
  if (v8) {
    goto LABEL_8;
  }
  v13 = v7[1];
  v8 = nw_dictionary_copy_value(v13, nw_proxy_config_default_transport(void)::default_transport_string);
  if (v8)
  {
LABEL_8:
    nw_dictionary_set_value(v7[1], *(const char **)key, v8);
    if (a4 - 2 <= 2)
    {
      v14 = (void *)v7[2];
      if (!v14)
      {
        v15 = xpc_dictionary_create(0LL, 0LL, 0LL);
        v16 = (void *)v7[2];
        v7[2] = (uint64_t)v15;

        v14 = (void *)v7[2];
      }

      xpc_dictionary_set_uint64(v14, *(const char **)key, a4);
    }
  }

  v17 = *(char **)key;
  if (*(void *)key) {
    goto LABEL_13;
  }
LABEL_14:
}

  if (v15) {
    free(v15);
  }
  v10 = 0LL;
LABEL_14:

  return (nw_proxy_config_t)v10;
}

  if (v16) {
    free(v16);
  }
  return 0LL;
}

    LOBYTE(v8) = 0;
  }

        *(void *)(v25 + 40) = v26;
        v26 = *(void **)(v9 + 40);
LABEL_9:
        *v26 = v25;
        *(void *)(v9 + 32) = 0LL;
        *(void *)(v9 + 40) = 0LL;
        nw_frame_finalize(v9);

        v9 = (uint64_t)v11;
      }

      while (v11);
      if (v6)
      {
        v2 = v30;
        if (v5)
        {
          [v35 createSendDataMessageForClientID:v5 data:v6 receiveWindow:0];
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          [v33 addObject:v29];

LABEL_4:
          v6 = 0LL;
        }
      }

      else
      {
        v2 = v30;
      }

      objc_msgSend(v35, "delegate", v30);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      [v7 sendRemoteCommands:v33];

      result = (*(uint64_t (**)(void))(*(void *)(a2 + 24) + 80LL))();
    }

    while ((_DWORD)result);
  }

  return result;
}

      if (v15) {
        free(v15);
      }
LABEL_46:
      os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_registrar_lock);
      return v10;
    }
  }

  v19 = calloc(1uLL, 0x78uLL);
  if (v19)
  {
LABEL_27:
    v20 = *(_OWORD *)a1;
    v21 = *(_OWORD *)(a1 + 16);
    v19[8] = *(void *)(a1 + 32);
    *((_OWORD *)v19 + 2) = v20;
    *((_OWORD *)v19 + 3) = v21;
    v19[12] = a3;
    v22 = os_retain(a2);
    v19[13] = v8;
    v19[14] = v22;
    v23 = g_registration_list;
    *v19 = g_registration_list;
    if (v23) {
      *(void *)(v23 + 8) = v19;
    }
    g_registration_list = (uint64_t)v19;
    v19[1] = &g_registration_list;
    if (v8)
    {
      v24 = g_many_to_one_list;
      v19[2] = g_many_to_one_list;
      if (v24) {
        *(void *)(v24 + 24) = v19 + 2;
      }
      g_many_to_one_list = (uint64_t)v19;
      v19[3] = &g_many_to_one_list;
    }

    v19[9] = nw_array_create();
    goto LABEL_46;
  }

  v32 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v32, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v41 = "strict_calloc";
  v42 = 2048;
  v43 = 1LL;
  v44 = 2048;
  v45 = 120LL;
  v33 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v33);
  if (!result)
  {
    free(v33);
    goto LABEL_27;
  }

  __break(1u);
  return result;
}

    if (v15) {
      free(v15);
    }
    return 0LL;
  }

  if (!a2)
  {
    __nwlog_obj();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = "nw_string_is_ip_address";
    v15 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v15, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_string_is_ip_address";
          v18 = "%{public}s called with null addr";
          goto LABEL_42;
        }

        goto LABEL_43;
      }

      if (!v24)
      {
        __nwlog_obj();
        v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_string_is_ip_address";
          v18 = "%{public}s called with null addr, backtrace limit exceeded";
          goto LABEL_42;
        }

        goto LABEL_43;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v17 = type;
      v23 = os_log_type_enabled(v16, type);
      if (!backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = "nw_string_is_ip_address";
          v18 = "%{public}s called with null addr, no backtrace";
          goto LABEL_42;
        }

        goto LABEL_43;
      }

      if (!v23) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&buf[4] = "nw_string_is_ip_address";
      v27 = 2082;
      v28 = backtrace_string;
      v22 = "%{public}s called with null addr, dumping backtrace:%{public}s";
LABEL_32:
      _os_log_impl(&dword_181A5C000, v16, v17, v22, buf, 0x16u);
LABEL_33:

      free(backtrace_string);
      goto LABEL_44;
    }

    goto LABEL_44;
  }

  *(void *)buf = 0LL;
  v5 = getaddrinfo(a1, 0LL, &nw_string_is_ip_address::hints, (addrinfo **)buf);
  v6 = v5 == 0;
  if (!v5)
  {
    v7 = *(addrinfo **)buf;
    if (*(void *)buf)
    {
      v8 = *(void *)buf;
      while (1)
      {
        v9 = *(unsigned __int8 **)(v8 + 32);
        v10 = v9[1];
        if (v10 == 30 || v10 == 2) {
          break;
        }
        v8 = *(void *)(v8 + 40);
        if (!v8) {
          goto LABEL_14;
        }
      }

      v12 = *v9;
      if (v12 <= a3) {
        memcpy(a2, v9, v12);
      }
LABEL_14:
      freeaddrinfo(v7);
    }
  }

  return v6;
}

    free(backtrace_string);
    goto LABEL_55;
  }

  if (a2)
  {
    v4 = strlen(a1);
    *a2 = 0LL;
    if (v4 <= 1)
    {
      __nwlog_obj();
      v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      v31 = "strict_calloc";
      v20 = (void *)_os_log_send_and_compose_impl();

      result = __nwlog_abort((uint64_t)v20);
      if (result)
      {
LABEL_58:
        __break(1u);
        return result;
      }

      free(v20);
    }

    v5 = calloc(1uLL, v4 >> 1);
    if (v5)
    {
      if (v4)
      {
LABEL_6:
        v6 = 0LL;
        while (1)
        {
          v9 = a1[v6];
          v10 = v9 - 48;
          if ((v9 - 65) > 5)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v11 = (os_log_s *)(id)gLogObj;
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            {
              v12 = a1[v6];
              *(_DWORD *)buf = 136446466;
              v31 = "nw_utilities_convert_hex_string_to_bytes";
              v32 = 1024;
              LODWORD(v33) = v12;
              _os_log_impl(&dword_181A5C000, v11, OS_LOG_TYPE_ERROR, "%{public}s Not hex character: %c", buf, 0x12u);
            }

            if (v5)
            {
              free(v5);
              return 0LL;
            }

            return (BOOL)v5;
          }

          v10 = v9 - 55;
          if ((v6 & 1) == 0)
          {
LABEL_13:
            v8 = 16 * v10;
            v7 = v6 >> 1;
            goto LABEL_8;
          }

        if (v15) {
          free(v15);
        }
        v9 = 0LL;
        goto LABEL_47;
      }

      v12 = *v13;
    }

    if (!sqlite3_bind_text(v12, 1, a2, -1, 0LL))
    {
      v9 = nw_dictionary_create();
      while (1)
      {
        v20 = sqlite3_step(*v13);
        v21 = *v13;
        if (v20 != 100) {
          break;
        }
        v22 = sqlite3_column_text(v21, 0);
        v23 = *(uint64_t (**)(const void *, void))(a4 + 40);
        v24 = sqlite3_column_blob(*v13, 1);
        v25 = sqlite3_column_bytes(*v13, 1);
        v26 = (void *)v23(v24, v25);
        nw_dictionary_set_value((uint64_t)v9, (const char *)v22, v26);
      }

      sqlite3_reset(v21);
LABEL_47:

      nw_dictionary_set_value(v8[8], a2, v9);
      goto LABEL_48;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v52 = "nw_storage_load_canvases_for_key";
    v15 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v49 = 0;
    if (__nwlog_fault(v15, &type, &v49))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = (os_log_s *)(id)gLogObj;
        v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          v52 = "nw_storage_load_canvases_for_key";
          v18 = "%{public}s Failed to bind variable";
LABEL_41:
          v32 = v16;
          v33 = v17;
LABEL_42:
          _os_log_impl(&dword_181A5C000, v32, v33, v18, buf, 0xCu);
          goto LABEL_43;
        }

        goto LABEL_43;
      }

      if (!v49)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = (os_log_s *)(id)gLogObj;
        v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          v52 = "nw_storage_load_canvases_for_key";
          v18 = "%{public}s Failed to bind variable, backtrace limit exceeded";
          goto LABEL_41;
        }

        goto LABEL_43;
      }

      v27 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v16 = (os_log_s *)(id)gLogObj;
      v28 = type;
      v29 = os_log_type_enabled(v16, type);
      if (v27)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446466;
          v52 = "nw_storage_load_canvases_for_key";
          v53 = 2082;
          v54 = v27;
          v30 = "%{public}s Failed to bind variable, dumping backtrace:%{public}s";
LABEL_33:
          _os_log_impl(&dword_181A5C000, v16, v28, v30, buf, 0x16u);
          goto LABEL_34;
        }

        goto LABEL_34;
      }

      if (!v29) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 136446210;
      v52 = "nw_storage_load_canvases_for_key";
      v18 = "%{public}s Failed to bind variable, no backtrace";
      goto LABEL_54;
    }

    goto LABEL_44;
  }

  __nwlog_obj();
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v52 = "nw_storage_fault_in_canvas";
  v38 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v49 = 0;
  if (__nwlog_fault(v38, &type, &v49))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v40 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 136446210;
        v52 = "nw_storage_fault_in_canvas";
        v41 = "%{public}s called with null provider";
        goto LABEL_93;
      }

        v36 = (char *)calloc(1uLL, v35);
        if (v36) {
          goto LABEL_45;
        }
        __nwlog_obj();
        v89 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_enabled(v89, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136446722;
        *(void *)&buf[4] = "strict_calloc";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = 1LL;
        *(_WORD *)&buf[22] = 2048;
        *(void *)v128 = v35;
        LODWORD(v102) = 32;
        v101 = buf;
        v90 = (void *)_os_log_send_and_compose_impl();

        if (!__nwlog_abort((uint64_t)v90))
        {
          free(v90);
LABEL_45:
          start_time = nw_http_client_metadata_get_start_time(Property[2]);
          v38 = dword_18C45F3A4;
          if (!dword_18C45F3A4)
          {
            mach_timebase_info((mach_timebase_info_t)&time_base);
            v38 = dword_18C45F3A4;
          }

          v39 = time_base;
          *(void *)v36 = 0LL;
          end_time = nw_http_client_metadata_get_end_time(Property[2]);
          v41 = (start_time * v39 / (unint64_t)v38 * (unsigned __int128)0x431BDE82D7B634DBuLL) >> 64;
          if (!end_time)
          {
            v42 = mach_continuous_time();
            if (v42 <= 1) {
              end_time = 1LL;
            }
            else {
              end_time = v42;
            }
          }

          v43 = v41 >> 18;
          v44 = dword_18C45F3A4;
          if (!dword_18C45F3A4)
          {
            mach_timebase_info((mach_timebase_info_t)&time_base);
            v44 = dword_18C45F3A4;
          }

          *((void *)v36 + 1) = end_time * (unint64_t)time_base / v44 / 0xF4240 - v43;
          objc_msgSend(self, "error", v101, v102);
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          *((void *)v36 + 3) = [v45 code];
          [v45 userInfo];
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          [v46 objectForKeyedSubscript:*MEMORY[0x189607798]];
          v107 = (void *)objc_claimAutoreleasedReturnValue();

          *((void *)v36 + 4) = [v107 code];
          nw_activity_get_token(v108, (_OWORD *)v36 + 4);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v47 = v45;
            v48 = 3;
          }

          else
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              v47 = v45;
              v48 = 2;
            }

            else
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                v47 = v45;
                v48 = 4;
              }

              else
              {
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                {
                  v47 = v45;
                  v48 = 5;
                }

                else
                {
                  objc_opt_class();
                  v47 = v45;
                  if ((objc_opt_isKindOfClass() & 1) != 0) {
                    v48 = 6;
                  }
                  else {
                    v48 = 1;
                  }
                }
              }
            }
          }

          *((_DWORD *)v36 + 24) = v48;
          *((_WORD *)v36 + 50) = 256;
          v36[102] = 0;
          v117 = 0LL;
          v118 = &v117;
          v119 = 0x2020000000LL;
          v120 = 0LL;
          v113 = 0LL;
          v114 = &v113;
          v115 = 0x2020000000LL;
          v116 = 0LL;
          v112[0] = 0LL;
          v112[1] = v112;
          v112[2] = 0x2020000000LL;
          v112[3] = 0LL;
          v49 = xdict[2];
          *(void *)buf = MEMORY[0x1895F87A8];
          *(void *)&buf[8] = 3221225472LL;
          *(void *)&buf[16] = __53__NWURLSessionTaskMetrics_reportToSymptoms_activity___block_invoke;
          *(void *)v128 = &unk_189BBAD68;
          *(void *)&v128[16] = v112;
          v129 = &v117;
          v130 = &v113;
          v131 = v36;
          v132 = v43;
          v50 = self;
          *(void *)&v128[8] = v50;
          nw_http_client_metadata_enumerate_transactions(v49, buf);

          v51 = v47;
          *((void *)v36 + 2) = v114[3];
          *((void *)v36 + 6) = v118[3];
          *((void *)v36 + 7) = v105;
          if (reportToSymptoms_activity__onceToken != -1) {
            dispatch_once(&reportToSymptoms_activity__onceToken, &__block_literal_global_28339);
          }
          symptom_new();
          symptom_set_qualifier();
          symptom_set_additional_qualifier();
          if (!os_variant_has_internal_diagnostics()
            || !networkd_settings_get_BOOL((const char *)nw_setting_activity_write_metric_stream_to_log))
          {
            symptom_send();
LABEL_104:
            free(v36);

            _Block_object_dispose(v112, 8);
            _Block_object_dispose(&v113, 8);
            _Block_object_dispose(&v117, 8);

            v29 = v108;
LABEL_105:

            v81 = *(void **)(a1 + 408);
            *(void *)(a1 + 408) = 0LL;

            [self setSecTrust:0];
            objc_setProperty_atomic_copy(self, v82, 0LL, 304LL);
            -[NWURLSession taskCompleted:](self[50], self);

            return;
          }

          v111 = 0LL;
          v52 = v50;
          v106 = v108;
          v53 = xpc_dictionary_create(0LL, 0LL, 0LL);
          memset(out, 0, sizeof(out));
          uuid_unparse((const unsigned __int8 *)v36 + 64, out);
          xpc_dictionary_set_string(v53, "activityUUID", out);
          label = nw_activity_get_label(v106);
          xpc_dictionary_set_uint64(v53, "activityLabel", label);
          domain = nw_activity_get_domain(v106);
          xpc_dictionary_set_uint64(v53, "activityDomain", domain);
          investigation_identifier = nw_activity_get_investigation_identifier(v106);
          xpc_dictionary_set_uint64(v53, "identifier", investigation_identifier);
          [v52 description];
          v103 = (void *)objc_claimAutoreleasedReturnValue();
          xpc_dictionary_set_string(v53, "taskUUID", (const char *)[v103 UTF8String]);
          xpc_dictionary_set_uint64(v53, "didCompleteWithError", *((void *)v36 + 1));
          xpc_dictionary_set_uint64(v53, "numberOfRetries", *((void *)v36 + 2));
          xpc_dictionary_set_uint64(v53, "numberOfRedirects", *((void *)v36 + 6));
          xpc_dictionary_set_int64(v53, "error", *((void *)v36 + 3));
          xpc_dictionary_set_int64(v53, "underlyingError", *((void *)v36 + 4));
          xpc_dictionary_set_int64(v53, "underlyingErrorDomain", *((void *)v36 + 5));
          v57 = *((_DWORD *)v36 + 24) - 1;
          if (v57 > 5) {
            v58 = "UNKNOWN";
          }
          else {
            v58 = off_189BBADA8[v57];
          }
          xpc_dictionary_set_string(v53, "taskType", v58);
          xpc_dictionary_set_BOOL(v53, "isBackground", v36[100]);
          xpc_dictionary_set_BOOL(v53, "usedUnifiedStack", 1);
          xpc_dictionary_set_BOOL(v53, "apSleepWakeMonitored", v36[102]);
          empty = xpc_array_create_empty();
          if (*((void *)v36 + 7))
          {
            v60 = 0LL;
            v61 = (BOOL *)(v36 + 216);
            do
            {
              v62 = xpc_dictionary_create(0LL, 0LL, 0LL);
              xpc_dictionary_set_uint64(v62, "requestStart", *((void *)v61 - 14));
              xpc_dictionary_set_uint64(v62, "requestEnd", *((void *)v61 - 13));
              xpc_dictionary_set_uint64(v62, "responseStart", *((void *)v61 - 12));
              xpc_dictionary_set_uint64(v62, "responseEnd", *((void *)v61 - 11));
              xpc_dictionary_set_uint64(v62, "totalBytesWritten", *((void *)v61 - 10));
              xpc_dictionary_set_uint64(v62, "totalBytesRead", *((void *)v61 - 9));
              memset(string, 0, 37);
              uuid_unparse((const unsigned __int8 *)v61 - 64, (char *)string);
              xpc_dictionary_set_string(v62, "connectionUUID", (const char *)string);
              v63 = *((void *)v61 - 6) - 1LL;
              v64 = "UNKNOWN";
              if (v63 <= 2) {
                v64 = off_189BBADD8[v63];
              }
              xpc_dictionary_set_string(v62, "networkLoadType", v64);
              v65 = *((void *)v61 - 5) - 1LL;
              v66 = "UNKNOWN";
              if (v65 <= 4) {
                v66 = off_189BBADF0[v65];
              }
              xpc_dictionary_set_string(v62, "schedulingTier", v66);
              v67 = *((void *)v61 - 4) - 1LL;
              v68 = "UNKNOWN";
              if (v67 <= 4) {
                v68 = off_189BBAE18[v67];
              }
              xpc_dictionary_set_string(v62, "http3Status", v68);
              v69 = *((_DWORD *)v61 - 6) - 1;
              v70 = "UNKNOWN";
              if (v69 <= 4) {
                v70 = off_189BBAE40[v69];
              }
              xpc_dictionary_set_string(v62, "networkProtocolName", v70);
              xpc_dictionary_set_BOOL(v62, "reusedConnection", *(v61 - 20));
              xpc_dictionary_set_BOOL(v62, "isRedirected", *(v61 - 19));
              xpc_dictionary_set_BOOL(v62, "proxied", *(v61 - 18));
              v71 = *((void *)v61 - 2) - 1LL;
              v72 = "UNKNOWN";
              if (v71 <= 0xC) {
                v72 = off_189BBAE68[v71];
              }
              xpc_dictionary_set_string(v62, "httpServerType", v72);
              [v52 response];
              v73 = (void *)objc_claimAutoreleasedReturnValue();
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0) {
                v74 = [v73 statusCode];
              }
              else {
                v74 = 0;
              }
              xpc_dictionary_set_int64(v62, "statusCode", v74);

              xpc_dictionary_set_uint64(v62, "reusedAfterTime", *((void *)v61 - 1));
              xpc_dictionary_set_BOOL(v62, "reusedAfterSleepWake", *v61);
              xpc_array_append_value(empty, v62);

              ++v60;
              v61 += 120;
            }

            while (v60 < *((void *)v36 + 7));
          }

          xpc_dictionary_set_value(v53, "transactionMetrics", empty);

          is_valid = nw_activity_metric_object_is_valid(v53, 0, (const char **)&v111);
          if (v111) {
            v76 = is_valid;
          }
          else {
            v76 = 0;
          }
          if (v76)
          {
            if (__nwlog_metricstream_log::onceToken != -1) {
              dispatch_once(&__nwlog_metricstream_log::onceToken, &__block_literal_global_51_44361);
            }
            v77 = (os_log_s *)(id)gmetricstreamLogObj;
            if (!os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_101;
            }
            *(_DWORD *)out = 136446210;
            *(void *)&out[4] = v111;
            v78 = "%{public}s";
            v79 = v77;
            v80 = 12;
          }

          else
          {
            if (__nwlog_url_log::onceToken != -1) {
              dispatch_once(&__nwlog_url_log::onceToken, &__block_literal_global_54_44366);
            }
            v77 = (os_log_s *)(id)gurlLogObj;
            if (!os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_101;
            }
            *(_WORD *)out = 0;
            v78 = "There was an issue with either validating the dictionary or the description being null";
            v79 = v77;
            v80 = 2;
          }

          _os_log_impl(&dword_181A5C000, v79, OS_LOG_TYPE_DEFAULT, v78, (uint8_t *)out, v80);
LABEL_101:

          if (v111)
          {
            free(v111);
            v111 = 0LL;
          }

          goto LABEL_104;
        }

    goto LABEL_45;
  }

  if (!v4)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nwsc_unique_connection_shutdown_socket";
    v14 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nwsc_unique_connection_shutdown_socket";
        _os_log_impl(&dword_181A5C000, v15, v18, "%{public}s called with null uniqueConnection", buf, 0xCu);
      }
    }

    else if (v27)
    {
      v22 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v23 = type;
      v24 = os_log_type_enabled(v15, type);
      if (v22)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          v30 = "nwsc_unique_connection_shutdown_socket";
          v31 = 2082;
          v32 = v22;
          _os_log_impl( &dword_181A5C000,  v15,  v23,  "%{public}s called with null uniqueConnection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v22);
        if (!v14) {
          goto LABEL_11;
        }
LABEL_46:
        free(v14);
        goto LABEL_11;
      }

      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nwsc_unique_connection_shutdown_socket";
        _os_log_impl( &dword_181A5C000,  v15,  v23,  "%{public}s called with null uniqueConnection, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nwsc_unique_connection_shutdown_socket";
        _os_log_impl( &dword_181A5C000,  v15,  v26,  "%{public}s called with null uniqueConnection, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_44;
  }

  dupedSocketFD = v4->dupedSocketFD;
  if ((dupedSocketFD & 0x80000000) == 0)
  {
    if (shutdown(dupedSocketFD, 2))
    {
      v7 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446978;
        v30 = "nwsc_unique_connection_shutdown_socket";
        v31 = 2114;
        v32 = v3;
        v33 = 2114;
        v34 = v5;
        v35 = 1024;
        v36 = v7;
        v9 = "%{public}s %{public}@ failed to shutdown socket on %{public}@ %{darwin.errno}d";
        v10 = v8;
        v11 = OS_LOG_TYPE_ERROR;
        v12 = 38;
LABEL_9:
        _os_log_impl(&dword_181A5C000, v10, v11, v9, buf, v12);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446722;
        v30 = "nwsc_unique_connection_shutdown_socket";
        v31 = 2114;
        v32 = v3;
        v33 = 2114;
        v34 = v5;
        v9 = "%{public}s %{public}@ shutdown socket on %{public}@";
        v10 = v8;
        v11 = OS_LOG_TYPE_DEFAULT;
        v12 = 32;
        goto LABEL_9;
      }
    }

    close(v5[124]);
    v5[124] = -1;
  }

  if (v13) {
LABEL_45:
  }
    free(v13);
LABEL_46:
  v16 = 0LL;
LABEL_56:

  return v16;
}

  if (v16) {
    free(v16);
  }
  Data = 0LL;
LABEL_15:

  return Data;
}

  if (v11) {
    free(v11);
  }
  v8 = 0LL;
LABEL_5:

  return v8;
}

  if (v15) {
    free(v15);
  }
  v12 = 0LL;
LABEL_5:

  return v12;
}

  if (v11) {
    free(v11);
  }
  v4 = 0LL;
LABEL_11:

  return v4;
}

      free(v10);
      goto LABEL_45;
    }

    v14 = *(unsigned int *)(cached_content_for_protocol + 40) + 1LL;
    v15 = v14 << 31 >> 31;
    *(_DWORD *)(cached_content_for_protocol + 40) = v14;
    if (v15 == v14 && (v15 & 0x8000000000000000LL) == 0) {
      goto LABEL_52;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v16 = (id)gLogObj;
    v17 = *(unsigned int *)(cached_content_for_protocol + 40);
    *(_DWORD *)buf = 136446978;
    v69 = "nw_quic_report_application_result_on_queue";
    v70 = 2082;
    v71 = "association_cache->application_failure_count";
    v72 = 2048;
    v73 = 1LL;
    v74 = 2048;
    *(void *)v75 = v17;
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v66 = 0;
    if (__nwlog_fault(v18, &type, &v66))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = (os_log_s *)(id)gLogObj;
        v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          v21 = *(unsigned int *)(cached_content_for_protocol + 40);
          *(_DWORD *)buf = 136446978;
          v69 = "nw_quic_report_application_result_on_queue";
          v70 = 2082;
          v71 = "association_cache->application_failure_count";
          v72 = 2048;
          v73 = 1LL;
          v74 = 2048;
          *(void *)v75 = v21;
          _os_log_impl( &dword_181A5C000,  v19,  v20,  "%{public}s Overflow: %{public}s, increment %llu, result %llu",  buf,  0x2Au);
        }
      }

      else if (v66)
      {
        v26 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = (os_log_s *)(id)gLogObj;
        v27 = type;
        v28 = os_log_type_enabled(v19, type);
        if (v26)
        {
          if (v28)
          {
            v29 = *(unsigned int *)(cached_content_for_protocol + 40);
            *(_DWORD *)buf = 136447234;
            v69 = "nw_quic_report_application_result_on_queue";
            v70 = 2082;
            v71 = "association_cache->application_failure_count";
            v72 = 2048;
            v73 = 1LL;
            v74 = 2048;
            *(void *)v75 = v29;
            *(_WORD *)&v75[8] = 2082;
            v76 = v26;
            _os_log_impl( &dword_181A5C000,  v19,  v27,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
          }

          free(v26);
          if (!v18) {
            goto LABEL_51;
          }
          goto LABEL_50;
        }

        if (v28)
        {
          v35 = *(unsigned int *)(cached_content_for_protocol + 40);
          *(_DWORD *)buf = 136446978;
          v69 = "nw_quic_report_application_result_on_queue";
          v70 = 2082;
          v71 = "association_cache->application_failure_count";
          v72 = 2048;
          v73 = 1LL;
          v74 = 2048;
          *(void *)v75 = v35;
          _os_log_impl( &dword_181A5C000,  v19,  v27,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace",  buf,  0x2Au);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = (os_log_s *)(id)gLogObj;
        v32 = type;
        if (os_log_type_enabled(v19, type))
        {
          v33 = *(unsigned int *)(cached_content_for_protocol + 40);
          *(_DWORD *)buf = 136446978;
          v69 = "nw_quic_report_application_result_on_queue";
          v70 = 2082;
          v71 = "association_cache->application_failure_count";
          v72 = 2048;
          v73 = 1LL;
          v74 = 2048;
          *(void *)v75 = v33;
          _os_log_impl( &dword_181A5C000,  v19,  v32,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded",  buf,  0x2Au);
        }
      }
    }

    if (!v18)
    {
LABEL_51:
      *(_DWORD *)(cached_content_for_protocol + 40) = -1;
      goto LABEL_52;
    }

LABEL_45:
      if (v12) {
        free(v12);
      }
      goto LABEL_47;
    }

    if (!v26)
    {
      __nwlog_obj();
      v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v24 = type[0];
      if (os_log_type_enabled(v13, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_txt_record_access_key";
        _os_log_impl( &dword_181A5C000,  v13,  v24,  "%{public}s called with null access_value, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_44;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v21 = type[0];
    v22 = os_log_type_enabled(v13, type[0]);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_txt_record_access_key";
        _os_log_impl(&dword_181A5C000, v13, v21, "%{public}s called with null access_value, no backtrace", buf, 0xCu);
      }

      goto LABEL_44;
    }

    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&buf[4] = "nw_txt_record_access_key";
      v28 = 2082;
      v29 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v13,  v21,  "%{public}s called with null access_value, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_45;
  }

  if ((*(_BYTE *)(v2 + 140) & 8) != 0)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446466;
    v26 = "nw_activity_complete_with_reason_and_underlying_error_string_internal_block_invoke";
    v27 = 2082;
    v28 = "Cannot complete activity more than once";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446466;
        v26 = "nw_activity_complete_with_reason_and_underlying_error_string_internal_block_invoke";
        v27 = 2082;
        v28 = "Cannot complete activity more than once";
        v15 = "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s";
        goto LABEL_43;
      }
    }

    else
    {
      if (v23)
      {
        v21 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v14 = type;
        v22 = os_log_type_enabled(v13, type);
        if (v21)
        {
          if (v22)
          {
            *(_DWORD *)buf = 136446722;
            v26 = "nw_activity_complete_with_reason_and_underlying_error_string_internal_block_invoke";
            v27 = 2082;
            v28 = "Cannot complete activity more than once";
            v29 = 2082;
            v30[0] = v21;
            _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v21);
          if (!v12) {
            goto LABEL_47;
          }
          goto LABEL_46;
        }

        if (!v22) {
          goto LABEL_44;
        }
        *(_DWORD *)buf = 136446466;
        v26 = "nw_activity_complete_with_reason_and_underlying_error_string_internal_block_invoke";
        v27 = 2082;
        v28 = "Cannot complete activity more than once";
        v15 = "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, no backtrace";
        goto LABEL_43;
      }

      __nwlog_obj();
      v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446466;
        v26 = "nw_activity_complete_with_reason_and_underlying_error_string_internal_block_invoke";
        v27 = 2082;
        v28 = "Cannot complete activity more than once";
        v15 = "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, backtrace limit exceeded";
        goto LABEL_43;
      }
    }

    goto LABEL_44;
  }

  *(_BYTE *)(v2 + 140) |= 8u;
  v3 = *(const char **)(a1 + 48);
  if (!v3)
  {
    *(_DWORD *)(*(void *)(a1 + 32) + 124LL) = *(_DWORD *)(a1 + 56);
LABEL_12:
    *(_DWORD *)(*(void *)(a1 + 32) + 128LL) = *(_DWORD *)(a1 + 60);
    return;
  }

  v4 = *(void *)(a1 + 32);
  v5 = *(void **)(v4 + 72);
  v6 = strndup(v3, 0x100uLL);
  if (v6)
  {
    *(void *)(v4 + 72) = v6;
    if (!v5) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  __nwlog_obj();
  v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  v26 = "strict_strndup";
  v18 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v18))
  {
    free(v18);
    *(void *)(*(void *)(a1 + 32) + 72LL) = 0LL;
    if (!v5)
    {
LABEL_7:
      if (*(_DWORD *)(a1 + 56))
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v7 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        {
          v8 = *(const char **)(a1 + 32);
          v9 = *(_DWORD *)(a1 + 56);
          v10 = *(void *)(a1 + 48);
          *(_DWORD *)buf = 136446978;
          v26 = "nw_activity_complete_with_reason_and_underlying_error_string_internal_block_invoke";
          v27 = 2112;
          v28 = v8;
          v29 = 1024;
          LODWORD(v30[0]) = v9;
          WORD2(v30[0]) = 2080;
          *(void *)((char *)v30 + 6) = v10;
          _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_DEBUG,  "%{public}s %@ ignoring error domain %d because error domain string %s is set",  buf,  0x26u);
        }
      }

      goto LABEL_12;
    }

            free(v21);
            goto LABEL_45;
          }

          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v22 = (os_log_s *)(id)gLogObj;
          v30 = v178[0];
          if (os_log_type_enabled(v22, (os_log_type_t)v178[0]))
          {
            *(_DWORD *)buf = 136446978;
            *(void *)&buf[4] = "nw_necp_buffer_get_tlv_value";
            *(_WORD *)&buf[12] = 2048;
            *(void *)&buf[14] = v11;
            *(_WORD *)&buf[22] = 2048;
            *(void *)&buf[24] = a3;
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v18;
            _os_log_impl( &dword_181A5C000,  v22,  v30,  "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, backtrace limit exceeded",  buf,  0x26u);
          }
        }
      }

      if (v21) {
        goto LABEL_44;
      }
    }

    free(backtrace_string);
    goto LABEL_58;
  }

  v13 = (os_log_s *)__nwlog_obj();
  v14 = type;
  if (os_log_type_enabled(v13, type))
  {
    *(_DWORD *)buf = 136446210;
    v25 = "nw_protocol_http_early_data_reset";
    v15 = "%{public}s called with null other_protocol";
    goto LABEL_57;
  }

  if (v26) {
    free(v26);
  }
}

    free(v15);
    goto LABEL_45;
  }

LABEL_45:
    if (!v13) {
      goto LABEL_47;
    }
LABEL_46:
    free(v13);
    goto LABEL_47;
  }

  if (!v36)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (os_log_s *)(id)gLogObj;
    v25 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)buf = 136446210;
      v39 = "nw_path_necp_update_evaluator";
      _os_log_impl(&dword_181A5C000, v14, v25, "%{public}s nw_path_create failed, backtrace limit exceeded", buf, 0xCu);
    }

    goto LABEL_44;
  }

  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v14 = (os_log_s *)(id)gLogObj;
  v18 = type;
  v19 = os_log_type_enabled(v14, type);
  if (!backtrace_string)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v39 = "nw_path_necp_update_evaluator";
      _os_log_impl(&dword_181A5C000, v14, v18, "%{public}s nw_path_create failed, no backtrace", buf, 0xCu);
    }

    goto LABEL_44;
  }

  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v39 = "nw_path_necp_update_evaluator";
    v40 = 2082;
    *(void *)v41 = backtrace_string;
    _os_log_impl( &dword_181A5C000,  v14,  v18,  "%{public}s nw_path_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(backtrace_string);
  if (v13) {
    goto LABEL_46;
  }
LABEL_47:
}

    goto LABEL_45;
  }

  if (!v4)
  {
    __nwlog_obj();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_path_apply_override_interface_types_from_path";
    v21 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_path_apply_override_interface_types_from_path";
        _os_log_impl(&dword_181A5C000, v22, v25, "%{public}s called with null other_path", buf, 0xCu);
      }
    }

    else if (v35)
    {
      v29 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v30 = type;
      v31 = os_log_type_enabled(v22, type);
      if (v29)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          v38 = "nw_path_apply_override_interface_types_from_path";
          v39 = 2082;
          v40 = v29;
          _os_log_impl( &dword_181A5C000,  v22,  v30,  "%{public}s called with null other_path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v29);
        if (!v21) {
          goto LABEL_11;
        }
LABEL_46:
        free(v21);
        goto LABEL_11;
      }

      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_path_apply_override_interface_types_from_path";
        _os_log_impl(&dword_181A5C000, v22, v30, "%{public}s called with null other_path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v33 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_path_apply_override_interface_types_from_path";
        _os_log_impl( &dword_181A5C000,  v22,  v33,  "%{public}s called with null other_path, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_44;
  }

  v11 = v3[475];
  v12 = *((_BYTE *)v4 + 475) & 8 | v11;
  v3[475] = v12;
  v13 = (*((_BYTE *)v4 + 475) | v11) & 0x40;
  v3[475] = v13 | v12 & 0xBF;
  v14 = (*((_BYTE *)v4 + 475) | v11) & 0x80 | v13 & 0x7F | v12 & 0x3F;
  v3[475] = v14;
  v15 = (*((_BYTE *)v4 + 475) | v11) & 0x10;
  v16 = v14 & 0xEF | v15;
  v3[475] = v16;
  v17 = *((_BYTE *)v4 + 476) & 2 | v3[476];
  v3[476] = v17;
  if ((v17 & 2) != 0)
  {
    v18 = "Proxy used prohibited interface type";
    v19 = 6;
    if (v13 || v16 < 0) {
      goto LABEL_10;
    }
    if ((v12 & 8) != 0)
    {
      v18 = "Proxy used prohibited expensive path";
      v19 = 5;
      goto LABEL_10;
    }

    if (v15)
    {
      v18 = "Proxy used prohibited constrained path";
      v19 = 26;
LABEL_10:
      nw_path_set_reason(v3, v19, v18, v5, v6, v7, v8, v9, v34);
    }
  }

        free(v8);
        goto LABEL_45;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_path_voluntary_agent_matches_address";
        _os_log_impl(&dword_181A5C000, v9, v17, "%{public}s called with null address, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v20 = type[0];
      if (os_log_type_enabled(v9, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_path_voluntary_agent_matches_address";
        _os_log_impl( &dword_181A5C000,  v9,  v20,  "%{public}s called with null address, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_45;
  }

  if (v4)
  {
    if ((v3[5] || v3[6]) && *((_DWORD *)v3 + 86))
    {
      v6 = 0LL;
      v7 = 8LL;
      do
      {
        v5[2](v5, v3[38] + v7);
        ++v6;
        v7 += 24LL;
      }

      while (v6 < *((unsigned int *)v3 + 86));
    }

    else
    {
      v8 = (void *)v3[28];
      if (v8)
      {
        applier[0] = MEMORY[0x1895F87A8];
        applier[1] = 3221225472LL;
        applier[2] = __nw_path_enumerate_browse_options_block_invoke;
        applier[3] = &unk_189BC5208;
        v24 = v4;
        xpc_dictionary_apply(v8, applier);
      }
    }

    goto LABEL_11;
  }

  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v28 = "nw_path_enumerate_browse_options";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_path_enumerate_browse_options";
      _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null enumerate_block", buf, 0xCu);
    }

    goto LABEL_44;
  }

  if (!v25)
  {
    __nwlog_obj();
    v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_path_enumerate_browse_options";
      _os_log_impl( &dword_181A5C000,  v11,  v22,  "%{public}s called with null enumerate_block, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_44;
  }

  v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v19 = type;
  v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_path_enumerate_browse_options";
      _os_log_impl(&dword_181A5C000, v11, v19, "%{public}s called with null enumerate_block, no backtrace", buf, 0xCu);
    }

    goto LABEL_44;
  }

  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    v28 = "nw_path_enumerate_browse_options";
    v29 = 2082;
    v30 = v18;
    _os_log_impl( &dword_181A5C000,  v11,  v19,  "%{public}s called with null enumerate_block, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_46;
  }
LABEL_11:
}

    if (v12) {
      free(v12);
    }
    goto LABEL_7;
  }

  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&buf[4] = "nw_http_connection_metadata_get_path";
  v8 = (char *)_os_log_send_and_compose_impl();

  v30[0] = 16;
  type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v8, v30, &type))
  {
    if (v30[0] == 17)
    {
      __nwlog_obj();
      v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v10 = v30[0];
      if (os_log_type_enabled(v9, (os_log_type_t)v30[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_http_connection_metadata_get_path";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s metadata must be http_connection", buf, 0xCu);
      }
    }

    else if (type)
    {
      v15 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v16 = v30[0];
      v17 = os_log_type_enabled(v9, (os_log_type_t)v30[0]);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&buf[4] = "nw_http_connection_metadata_get_path";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v15;
          _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s metadata must be http_connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v15);
        goto LABEL_38;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_http_connection_metadata_get_path";
        _os_log_impl(&dword_181A5C000, v9, v16, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v21 = v30[0];
      if (os_log_type_enabled(v9, (os_log_type_t)v30[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_http_connection_metadata_get_path";
        _os_log_impl( &dword_181A5C000,  v9,  v21,  "%{public}s metadata must be http_connection, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

    if (v12) {
      free(v12);
    }
    goto LABEL_7;
  }

  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&buf[4] = "nw_http_connection_metadata_get_establishment_report";
  v8 = (char *)_os_log_send_and_compose_impl();

  v30[0] = 16;
  type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v8, v30, &type))
  {
    if (v30[0] == 17)
    {
      __nwlog_obj();
      v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v10 = v30[0];
      if (os_log_type_enabled(v9, (os_log_type_t)v30[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_http_connection_metadata_get_establishment_report";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s metadata must be http_connection", buf, 0xCu);
      }
    }

    else if (type)
    {
      v15 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v16 = v30[0];
      v17 = os_log_type_enabled(v9, (os_log_type_t)v30[0]);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&buf[4] = "nw_http_connection_metadata_get_establishment_report";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v15;
          _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s metadata must be http_connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v15);
        goto LABEL_38;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_http_connection_metadata_get_establishment_report";
        _os_log_impl(&dword_181A5C000, v9, v16, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v21 = v30[0];
      if (os_log_type_enabled(v9, (os_log_type_t)v30[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_http_connection_metadata_get_establishment_report";
        _os_log_impl( &dword_181A5C000,  v9,  v21,  "%{public}s metadata must be http_connection, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

    if (v12) {
      free(v12);
    }
    goto LABEL_7;
  }

  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&buf[4] = "nw_http_connection_metadata_get_sec_metadata";
  v8 = (char *)_os_log_send_and_compose_impl();

  v30[0] = 16;
  type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v8, v30, &type))
  {
    if (v30[0] == 17)
    {
      __nwlog_obj();
      v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v10 = v30[0];
      if (os_log_type_enabled(v9, (os_log_type_t)v30[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_http_connection_metadata_get_sec_metadata";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s metadata must be http_connection", buf, 0xCu);
      }
    }

    else if (type)
    {
      v15 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v16 = v30[0];
      v17 = os_log_type_enabled(v9, (os_log_type_t)v30[0]);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&buf[4] = "nw_http_connection_metadata_get_sec_metadata";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v15;
          _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s metadata must be http_connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v15);
        goto LABEL_38;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_http_connection_metadata_get_sec_metadata";
        _os_log_impl(&dword_181A5C000, v9, v16, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v21 = v30[0];
      if (os_log_type_enabled(v9, (os_log_type_t)v30[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_http_connection_metadata_get_sec_metadata";
        _os_log_impl( &dword_181A5C000,  v9,  v21,  "%{public}s metadata must be http_connection, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

    if (v12) {
      free(v12);
    }
    goto LABEL_7;
  }

  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&buf[4] = "nw_http_connection_metadata_get_privacy_stance";
  v8 = (char *)_os_log_send_and_compose_impl();

  v28[0] = 16;
  type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v8, v28, &type))
  {
    if (v28[0] == 17)
    {
      __nwlog_obj();
      v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v10 = v28[0];
      if (os_log_type_enabled(v9, (os_log_type_t)v28[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_http_connection_metadata_get_privacy_stance";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s metadata must be http_connection", buf, 0xCu);
      }
    }

    else if (type)
    {
      v15 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v16 = v28[0];
      v17 = os_log_type_enabled(v9, (os_log_type_t)v28[0]);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&buf[4] = "nw_http_connection_metadata_get_privacy_stance";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v15;
          _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s metadata must be http_connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v15);
        goto LABEL_38;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_http_connection_metadata_get_privacy_stance";
        _os_log_impl(&dword_181A5C000, v9, v16, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v21 = v28[0];
      if (os_log_type_enabled(v9, (os_log_type_t)v28[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_http_connection_metadata_get_privacy_stance";
        _os_log_impl( &dword_181A5C000,  v9,  v21,  "%{public}s metadata must be http_connection, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

    if (v12) {
      free(v12);
    }
    goto LABEL_7;
  }

  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&buf[4] = "nw_http_connection_metadata_find_or_create_pat_timestamps_array";
  v8 = (char *)_os_log_send_and_compose_impl();

  v28[0] = 16;
  type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v8, v28, &type))
  {
    if (v28[0] == 17)
    {
      __nwlog_obj();
      v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v10 = v28[0];
      if (os_log_type_enabled(v9, (os_log_type_t)v28[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_http_connection_metadata_find_or_create_pat_timestamps_array";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s metadata must be http_connection", buf, 0xCu);
      }
    }

    else if (type)
    {
      v15 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v16 = v28[0];
      v17 = os_log_type_enabled(v9, (os_log_type_t)v28[0]);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&buf[4] = "nw_http_connection_metadata_find_or_create_pat_timestamps_array";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v15;
          _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s metadata must be http_connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v15);
        goto LABEL_38;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_http_connection_metadata_find_or_create_pat_timestamps_array";
        _os_log_impl(&dword_181A5C000, v9, v16, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v21 = v28[0];
      if (os_log_type_enabled(v9, (os_log_type_t)v28[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_http_connection_metadata_find_or_create_pat_timestamps_array";
        _os_log_impl( &dword_181A5C000,  v9,  v21,  "%{public}s metadata must be http_connection, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

    if (v12) {
      free(v12);
    }
    goto LABEL_7;
  }

  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&buf[4] = "nw_http_connection_metadata_get_last_application_stream_id";
  v8 = (char *)_os_log_send_and_compose_impl();

  v28[0] = 16;
  type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v8, v28, &type))
  {
    if (v28[0] == 17)
    {
      __nwlog_obj();
      v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v10 = v28[0];
      if (os_log_type_enabled(v9, (os_log_type_t)v28[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_http_connection_metadata_get_last_application_stream_id";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s metadata must be http_connection", buf, 0xCu);
      }
    }

    else if (type)
    {
      v15 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v16 = v28[0];
      v17 = os_log_type_enabled(v9, (os_log_type_t)v28[0]);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&buf[4] = "nw_http_connection_metadata_get_last_application_stream_id";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v15;
          _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s metadata must be http_connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v15);
        goto LABEL_38;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_http_connection_metadata_get_last_application_stream_id";
        _os_log_impl(&dword_181A5C000, v9, v16, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v21 = v28[0];
      if (os_log_type_enabled(v9, (os_log_type_t)v28[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&buf[4] = "nw_http_connection_metadata_get_last_application_stream_id";
        _os_log_impl( &dword_181A5C000,  v9,  v21,  "%{public}s metadata must be http_connection, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

    if (!v8) {
      return;
    }
    v7 = (char *)v8;
    goto LABEL_46;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v40 = "nw_parallel_array_remove_at_index";
  v6 = (const char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v37 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v30 = (os_log_s *)__nwlog_obj();
    v31 = type;
    if (!os_log_type_enabled(v30, type)) {
      goto LABEL_76;
    }
    *(_DWORD *)buf = 136446210;
    v40 = "nw_parallel_array_remove_at_index";
    v32 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size())";
    goto LABEL_75;
  }

  if (!v37)
  {
    v30 = (os_log_s *)__nwlog_obj();
    v31 = type;
    if (!os_log_type_enabled(v30, type)) {
      goto LABEL_76;
    }
    *(_DWORD *)buf = 136446210;
    v40 = "nw_parallel_array_remove_at_index";
    v32 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), backtrace limit exceeded";
    goto LABEL_75;
  }

  v35 = (char *)__nw_create_backtrace_string();
  v30 = (os_log_s *)__nwlog_obj();
  v31 = type;
  v36 = os_log_type_enabled(v30, type);
  if (!v35)
  {
    if (!v36) {
      goto LABEL_76;
    }
    *(_DWORD *)buf = 136446210;
    v40 = "nw_parallel_array_remove_at_index";
    v32 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), no backtrace";
    goto LABEL_75;
  }

  if (v36)
  {
    *(_DWORD *)buf = 136446466;
    v40 = "nw_parallel_array_remove_at_index";
    v41 = 2082;
    v42 = v35;
    _os_log_impl( &dword_181A5C000,  v30,  v31,  "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v35);
  if (v6) {
    goto LABEL_6;
  }
}

      if (v36) {
        free(v36);
      }
      v7 = 0LL;
      v8 = 0;
      v9 = 0LL;
      v10 = 0LL;
      v11 = 0LL;
      v12 = 0LL;
      v13 = 0LL;
      v14 = 0LL;
      v43 = 0LL;
      goto LABEL_5;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v15 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v49 = "nw_endpoint_handler_get_transform_details";
    v16 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v46 = 0;
    if (__nwlog_fault(v16, &type, &v46))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (os_log_s *)(id)gLogObj;
        v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v49 = "nw_endpoint_handler_get_transform_details";
          _os_log_impl(&dword_181A5C000, v17, v18, "%{public}s Endpoint handler is not a transform", buf, 0xCu);
        }
      }

      else if (v46)
      {
        v31 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (os_log_s *)(id)gLogObj;
        v32 = type;
        v33 = os_log_type_enabled(v17, type);
        if (v31)
        {
          if (v33)
          {
            *(_DWORD *)buf = 136446466;
            v49 = "nw_endpoint_handler_get_transform_details";
            v50 = 2082;
            v51 = v31;
            _os_log_impl( &dword_181A5C000,  v17,  v32,  "%{public}s Endpoint handler is not a transform, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v31);
          if (!v16) {
            goto LABEL_13;
          }
          goto LABEL_12;
        }

        if (v33)
        {
          *(_DWORD *)buf = 136446210;
          v49 = "nw_endpoint_handler_get_transform_details";
          _os_log_impl( &dword_181A5C000,  v17,  v32,  "%{public}s Endpoint handler is not a transform, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (os_log_s *)(id)gLogObj;
        v34 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v49 = "nw_endpoint_handler_get_transform_details";
          _os_log_impl( &dword_181A5C000,  v17,  v34,  "%{public}s Endpoint handler is not a transform, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v16)
    {
LABEL_13:
      v7 = 0LL;
      v8 = 0;
      v9 = 0LL;
      v10 = 0LL;
      v11 = 0LL;
      v12 = 0LL;
      v13 = 0LL;
      v14 = 0LL;
      v43 = 0LL;
      goto LABEL_14;
    }

    free(backtrace_string);
    goto LABEL_71;
  }

  if (!v6)
  {
    __nwlog_obj();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v47 = "nw_agent_send_error_response";
    v17 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v47 = "nw_agent_send_error_response";
        _os_log_impl(&dword_181A5C000, v18, v21, "%{public}s called with null client", buf, 0xCu);
      }

      goto LABEL_70;
    }

    if (!v44)
    {
      __nwlog_obj();
      v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v41 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v47 = "nw_agent_send_error_response";
        _os_log_impl( &dword_181A5C000,  v18,  v41,  "%{public}s called with null client, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_70;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v33 = type;
    v34 = os_log_type_enabled(v18, type);
    if (!backtrace_string)
    {
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        v47 = "nw_agent_send_error_response";
        _os_log_impl(&dword_181A5C000, v18, v33, "%{public}s called with null client, no backtrace", buf, 0xCu);
      }

      goto LABEL_70;
    }

    if (v34)
    {
      *(_DWORD *)buf = 136446466;
      v47 = "nw_agent_send_error_response";
      v48 = 2082;
      v49 = (uint64_t)backtrace_string;
      _os_log_impl( &dword_181A5C000,  v18,  v33,  "%{public}s called with null client, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_44;
  }

  if (!v7)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v47 = "nw_agent_send_error_response";
    v17 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (__nwlog_fault(v17, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v23 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_agent_send_error_response";
          _os_log_impl(&dword_181A5C000, v18, v23, "%{public}s called with null error", buf, 0xCu);
        }

    if (v15) {
      free(v15);
    }
    v7 = 0LL;
LABEL_8:

    goto LABEL_9;
  }

  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v29 = "nw_endpoint_handler_access_parent_flow_handler";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v26 = 0;
  if (__nwlog_fault(v11, &type, &v26))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_endpoint_handler_access_parent_flow_handler";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null accessor", buf, 0xCu);
      }
    }

    else if (v26)
    {
      v18 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v19 = type;
      v20 = os_log_type_enabled(v12, type);
      if (v18)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          v29 = "nw_endpoint_handler_access_parent_flow_handler";
          v30 = 2082;
          v31 = v18;
          _os_log_impl( &dword_181A5C000,  v12,  v19,  "%{public}s called with null accessor, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v18);
        goto LABEL_39;
      }

      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_endpoint_handler_access_parent_flow_handler";
        _os_log_impl(&dword_181A5C000, v12, v19, "%{public}s called with null accessor, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_endpoint_handler_access_parent_flow_handler";
        _os_log_impl( &dword_181A5C000,  v12,  v24,  "%{public}s called with null accessor, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

    free(v13);
    goto LABEL_45;
  }

  v5 = v3;
  v6 = v5->parameters;

  v7 = nw_parameters_copy_context(v6);
  nw_context_assert_queue(v7);

  v8 = nw_endpoint_handler_copy_flow(v5);
  v9 = v8;
  if ((*((_BYTE *)v8 + 32) & 2) != 0 || (*((_BYTE *)v8 + 33) & 1) != 0)
  {
    v10 = *((id *)v8 + 113);
  }

  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)v8 + 220);
    if (*((void *)v9 + 117)) {
      v10 = (id)nw_endpoint_handler_copy_channel();
    }
    else {
      v10 = 0LL;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)v9 + 220);
  }

LABEL_46:
  return v10;
}

    free(backtrace_string);
    goto LABEL_54;
  }

  v8 = (os_log_s *)__nwlog_obj();
  v9 = type;
  if (os_log_type_enabled(v8, type))
  {
    *(_DWORD *)buf = 136446210;
    v22 = "nw_protocol_http2_remove_listen_handler";
    v10 = "%{public}s called with null protocol";
LABEL_53:
    _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
  }

  if (v12) {
    free(v12);
  }
  return 1LL;
}

      if (v4) {
        free(v4);
      }
      return 22LL;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (os_log_s *)gLogObj;
    v6 = type[0];
    v11 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_network_agent_remove_from_interface";
        v7 = "%{public}s called with null netagent_uuid, no backtrace";
        goto LABEL_43;
      }

      goto LABEL_44;
    }

    if (!v11)
    {
LABEL_17:
      free(backtrace_string);
      goto LABEL_44;
    }

    *(_DWORD *)buf = 136446466;
    v39 = "nw_network_agent_remove_from_interface";
    v40 = 2082;
    *(void *)v41 = backtrace_string;
    v12 = "%{public}s called with null netagent_uuid, dumping backtrace:%{public}s";
LABEL_16:
    _os_log_impl(&dword_181A5C000, v5, v6, v12, buf, 0x16u);
    goto LABEL_17;
  }

  if (getuid())
  {
    v8 = 0LL;
    if (!networkd_privileged_set_agent_on_interface_internal((const char *)a1, uu, 1, 0))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v39 = "nw_network_agent_remove_from_interface";
        v40 = 2082;
        *(void *)v41 = a1;
        _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_ERROR,  "%{public}s networkd_privileged_set_agent_on_interface(%{public}s, remove) failed",  buf,  0x16u);
      }

      return 0xFFFFFFFFLL;
    }

    return v8;
  }

  v13 = socket(2, 2, 0);
  if ((v13 & 0x80000000) == 0)
  {
    v14 = v13;
    memset(&type[1], 0, 15);
    type[0] = *(os_log_type_t *)a1;
    if (type[0])
    {
      type[1] = *(os_log_type_t *)(a1 + 1);
      if (type[1])
      {
        type[2] = *(os_log_type_t *)(a1 + 2);
        if (type[2])
        {
          type[3] = *(os_log_type_t *)(a1 + 3);
          if (type[3])
          {
            type[4] = *(os_log_type_t *)(a1 + 4);
            if (type[4])
            {
              type[5] = *(os_log_type_t *)(a1 + 5);
              if (type[5])
              {
                type[6] = *(os_log_type_t *)(a1 + 6);
                if (type[6])
                {
                  type[7] = *(os_log_type_t *)(a1 + 7);
                  if (type[7])
                  {
                    type[8] = *(os_log_type_t *)(a1 + 8);
                    if (type[8])
                    {
                      type[9] = *(os_log_type_t *)(a1 + 9);
                      if (type[9])
                      {
                        type[10] = *(os_log_type_t *)(a1 + 10);
                        if (type[10])
                        {
                          type[11] = *(os_log_type_t *)(a1 + 11);
                          if (type[11])
                          {
                            type[12] = *(os_log_type_t *)(a1 + 12);
                            if (type[12])
                            {
                              type[13] = *(os_log_type_t *)(a1 + 13);
                              if (type[13]) {
                                type[14] = *(os_log_type_t *)(a1 + 14);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    v47 = *(_OWORD *)uu;
    if (!ioctl(v13, 0xC02069A6uLL, type))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v26 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v39 = "nw_network_agent_remove_from_interface";
        v40 = 2082;
        *(void *)v41 = a1;
        v17 = "%{public}s Successfully removed agent from %{public}s";
        v18 = (os_log_s *)v26;
        v19 = OS_LOG_TYPE_DEFAULT;
        v20 = 22;
        goto LABEL_54;
      }

  free(v28);
  if (v16) {
LABEL_62:
  }
    free(v16);
LABEL_80:
  output_handler = a1->output_handler;
  if (!output_handler)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v96 = "__nw_protocol_output_finished";
    v64 = (const char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v93 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v65 = (os_log_s *)__nwlog_obj();
      v66 = type;
      if (!os_log_type_enabled(v65, type)) {
        goto LABEL_231;
      }
      *(_DWORD *)buf = 136446210;
      v96 = "__nw_protocol_output_finished";
      v67 = "%{public}s called with null protocol";
      goto LABEL_230;
    }

    if (!v93)
    {
      v65 = (os_log_s *)__nwlog_obj();
      v66 = type;
      if (!os_log_type_enabled(v65, type)) {
        goto LABEL_231;
      }
      *(_DWORD *)buf = 136446210;
      v96 = "__nw_protocol_output_finished";
      v67 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_230;
    }

    v77 = (char *)__nw_create_backtrace_string();
    v65 = (os_log_s *)__nwlog_obj();
    v66 = type;
    v82 = os_log_type_enabled(v65, type);
    if (!v77)
    {
      if (!v82) {
        goto LABEL_231;
      }
      *(_DWORD *)buf = 136446210;
      v96 = "__nw_protocol_output_finished";
      v67 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_230;
    }

    if (v82)
    {
      *(_DWORD *)buf = 136446466;
      v96 = "__nw_protocol_output_finished";
      v97 = 2082;
      v98 = (nw_protocol *)v77;
      v79 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_182;
    }

    goto LABEL_183;
  }

  handle = output_handler->handle;
  if (handle == &nw_protocol_ref_counted_handle)
  {
    v38 = output_handler[1].callbacks;
    if (v38) {
      output_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&v38->add_input_handler + 1);
    }
  }

  v39 = a1->handle;
  if (v39 == &nw_protocol_ref_counted_handle)
  {
    v40 = a1[1].callbacks;
    if (v40) {
      a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v40->add_input_handler + 1);
    }
  }

  v41 = output_handler->callbacks;
  if (v41)
  {
    output_finished = (void (*)(nw_protocol *, nw_protocol *))v41->output_finished;
    if (output_finished)
    {
      output_finished(output_handler, a1);
      goto LABEL_90;
    }
  }

  __nwlog_obj();
  name = output_handler->identifier->name;
  *(_DWORD *)buf = 136446722;
  v96 = "__nw_protocol_output_finished";
  if (!name) {
    name = "invalid";
  }
  v97 = 2082;
  v98 = (nw_protocol *)name;
  v99 = 2048;
  v100 = output_handler;
  v59 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v93 = 0;
  if (__nwlog_fault(v59, &type, &v93))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v60 = (os_log_s *)__nwlog_obj();
      v61 = type;
      if (!os_log_type_enabled(v60, type)) {
        goto LABEL_210;
      }
      v62 = output_handler->identifier->name;
      if (!v62) {
        v62 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      v96 = "__nw_protocol_output_finished";
      v97 = 2082;
      v98 = (nw_protocol *)v62;
      v99 = 2048;
      v100 = output_handler;
      v63 = "%{public}s protocol %{public}s (%p) has invalid output_finished callback";
      goto LABEL_209;
    }

    if (!v93)
    {
      v60 = (os_log_s *)__nwlog_obj();
      v61 = type;
      if (!os_log_type_enabled(v60, type)) {
        goto LABEL_210;
      }
      v85 = output_handler->identifier->name;
      if (!v85) {
        v85 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      v96 = "__nw_protocol_output_finished";
      v97 = 2082;
      v98 = (nw_protocol *)v85;
      v99 = 2048;
      v100 = output_handler;
      v63 = "%{public}s protocol %{public}s (%p) has invalid output_finished callback, backtrace limit exceeded";
      goto LABEL_209;
    }

    v72 = (char *)__nw_create_backtrace_string();
    v60 = (os_log_s *)__nwlog_obj();
    v61 = type;
    v73 = os_log_type_enabled(v60, type);
    if (v72)
    {
      if (v73)
      {
        v74 = output_handler->identifier->name;
        if (!v74) {
          v74 = "invalid";
        }
        *(_DWORD *)buf = 136446978;
        v96 = "__nw_protocol_output_finished";
        v97 = 2082;
        v98 = (nw_protocol *)v74;
        v99 = 2048;
        v100 = output_handler;
        v101 = 2082;
        v102 = v72;
        _os_log_impl( &dword_181A5C000,  v60,  v61,  "%{public}s protocol %{public}s (%p) has invalid output_finished callback, dumping backtrace:%{public}s",  buf,  0x2Au);
      }

      free(v72);
      goto LABEL_210;
    }

    if (v73)
    {
      v87 = output_handler->identifier->name;
      if (!v87) {
        v87 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      v96 = "__nw_protocol_output_finished";
      v97 = 2082;
      v98 = (nw_protocol *)v87;
      v99 = 2048;
      v100 = output_handler;
      v63 = "%{public}s protocol %{public}s (%p) has invalid output_finished callback, no backtrace";
LABEL_209:
      _os_log_impl(&dword_181A5C000, v60, v61, v63, buf, 0x20u);
    }
  }

    goto LABEL_45;
  }

  if (v4)
  {
    v6 = nw_path_parameters_copy_context(*((void **)v3 + 2));
    nw_context_assert_queue(v6);
    v7 = MEMORY[0x1895F87A8];
    if (*((void *)v3 + 4))
    {
      v8 = (char *)*((void *)v3 + 7);
      if (v8)
      {
        v33[0] = MEMORY[0x1895F87A8];
        v33[1] = 3221225472LL;
        v33[2] = ___ZL27nw_association_update_pathsP25NWConcrete_nw_associationPU21objcproto10OS_nw_path8NSObject_block_invoke;
        v33[3] = &unk_189BC86C8;
        v34 = v3;
        v35 = v5;
        v36 = v6;
        nw_hash_table_apply(v8, (uint64_t)v33);
      }
    }

    v9 = nw_path_copy_without_parameters(v5);
    v10 = (void *)*((void *)v3 + 4);
    *((void *)v3 + 4) = v9;

    v11 = (char *)*((void *)v3 + 5);
    if (v11)
    {
      v12 = *((_DWORD *)v3 + 18);
      v13 = v12 != 0;
      if (v12)
      {
        v31[0] = v7;
        v31[1] = 3221225472LL;
        v31[2] = ___ZL27nw_association_update_pathsP25NWConcrete_nw_associationPU21objcproto10OS_nw_path8NSObject_block_invoke_82;
        v31[3] = &unk_189BC86F0;
        v32 = v5;
        nw_hash_table_apply(v11, (uint64_t)v31);

        v11 = (char *)*((void *)v3 + 5);
      }

      v28[0] = v7;
      v28[1] = 3221225472LL;
      v28[2] = ___ZL27nw_association_update_pathsP25NWConcrete_nw_associationPU21objcproto10OS_nw_path8NSObject_block_invoke_2;
      v28[3] = &unk_189BC8718;
      v30 = v13;
      v29 = v5;
      nw_hash_table_apply(v11, (uint64_t)v28);
    }

    goto LABEL_11;
  }

  __nwlog_obj();
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v40 = "nw_association_update_paths";
  v15 = (char *)_os_log_send_and_compose_impl();

  v38 = OS_LOG_TYPE_ERROR;
  v37 = 0;
  if (v38 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v19 = v38;
    if (os_log_type_enabled(v16, v38))
    {
      *(_DWORD *)buf = 136446210;
      v40 = "nw_association_update_paths";
      _os_log_impl(&dword_181A5C000, v16, v19, "%{public}s called with null path", buf, 0xCu);
    }

    goto LABEL_44;
  }

  if (!v37)
  {
    __nwlog_obj();
    v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v27 = v38;
    if (os_log_type_enabled(v16, v38))
    {
      *(_DWORD *)buf = 136446210;
      v40 = "nw_association_update_paths";
      _os_log_impl(&dword_181A5C000, v16, v27, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
    }

    goto LABEL_44;
  }

  v23 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  v24 = v38;
  v25 = os_log_type_enabled(v16, v38);
  if (!v23)
  {
    if (v25)
    {
      *(_DWORD *)buf = 136446210;
      v40 = "nw_association_update_paths";
      _os_log_impl(&dword_181A5C000, v16, v24, "%{public}s called with null path, no backtrace", buf, 0xCu);
    }

    goto LABEL_44;
  }

  if (v25)
  {
    *(_DWORD *)buf = 136446466;
    v40 = "nw_association_update_paths";
    v41 = 2082;
    v42 = v23;
    _os_log_impl( &dword_181A5C000,  v16,  v24,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v23);
  if (v15) {
    goto LABEL_46;
  }
LABEL_11:
}

    free(v31);
    if (!v21) {
      goto LABEL_14;
    }
    goto LABEL_71;
  }

  if ((*((_BYTE *)v5 + 72) & 1) != 0 || !*((void *)v5 + 2))
  {
    v50[0] = MEMORY[0x1895F87A8];
    v50[1] = 3221225472LL;
    v50[2] = __nw_interface_status_monitor_set_update_handler_block_invoke;
    v50[3] = &unk_189BC8740;
    v51 = v7;
    dispatch_async(v6, v50);

    goto LABEL_14;
  }

  v9 = _Block_copy(v7);
  v10 = (void *)*((void *)v5 + 5);
  *((void *)v5 + 5) = v9;

  objc_storeStrong((id *)v5 + 6, a2);
  if (!*((void *)v5 + 8))
  {
    v11 = *((void *)v5 + 2);
    v12 = MEMORY[0x1895F87A8];
    v48[0] = MEMORY[0x1895F87A8];
    v48[1] = 3221225472LL;
    v48[2] = __nw_interface_status_monitor_set_update_handler_block_invoke_2;
    v48[3] = &unk_189BC8790;
    v49 = v5;
    if (v11)
    {
      nw_context_assert_queue(*(void **)(v11 + 152));
      if (*(void *)(v11 + 136))
      {
        v13 = os_channel_configure_interface_advisory();
        if (v13)
        {
          LODWORD(source) = v13;
          *((void *)v5 + 8) = 0LL;
        }

        else
        {
          dispatch_group_enter(*(dispatch_group_t *)(v11 + 208));
          v14 = *(void **)(v11 + 152);
          v15 = *(_DWORD *)(v11 + 432);
          *(void *)buf = v12;
          *(void *)&buf[8] = 0x40000000LL;
          *(void *)&buf[16] = __nw_channel_create_interface_advisory_source_block_invoke;
          v60 = &unk_189BC8DB0;
          v61 = v48;
          v62 = v11;
          *(void *)type = v12;
          v53 = 0x40000000LL;
          v54 = __nw_channel_create_interface_advisory_source_block_invoke_2;
          v55 = &__block_descriptor_tmp_11_86819;
          v56 = v11;
          source = nw_queue_context_create_source(v14, v15, 5, 4u, buf, type);
          nw_queue_activate_source(source, v17);
          *((void *)v5 + 8) = source;
          if (source)
          {
LABEL_12:

            goto LABEL_14;
          }
        }
      }

      else
      {
        LODWORD(source) = 6;
        *((void *)v5 + 8) = 0LL;
      }

  if (v4) {
    free(v4);
  }
  return 0LL;
}

        free(v23);
        goto LABEL_45;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v22 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v75 = "-[NWConcrete_nw_masque_server initWithParameters:securityOptions:clientQueue:]";
      v23 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v71 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v24 = (os_log_s *)(id)gLogObj;
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v75 = "-[NWConcrete_nw_masque_server initWithParameters:securityOptions:clientQueue:]";
          _os_log_impl(&dword_181A5C000, v24, v25, "%{public}s dispatch_queue_create failed", buf, 0xCu);
        }
      }

      else
      {
        if (v71)
        {
          v26 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v27 = (os_log_s *)(id)gLogObj;
          v28 = type;
          v29 = os_log_type_enabled(v27, type);
          if (v26)
          {
            if (v29)
            {
              *(_DWORD *)buf = 136446466;
              v75 = "-[NWConcrete_nw_masque_server initWithParameters:securityOptions:clientQueue:]";
              v76 = 2082;
              v77 = v26;
              _os_log_impl( &dword_181A5C000,  v27,  v28,  "%{public}s dispatch_queue_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v26);
            if (!v23) {
              goto LABEL_45;
            }
            goto LABEL_44;
          }

          if (v29)
          {
            *(_DWORD *)buf = 136446210;
            v75 = "-[NWConcrete_nw_masque_server initWithParameters:securityOptions:clientQueue:]";
            _os_log_impl(&dword_181A5C000, v27, v28, "%{public}s dispatch_queue_create failed, no backtrace", buf, 0xCu);
          }

          goto LABEL_43;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v24 = (os_log_s *)(id)gLogObj;
        v36 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v75 = "-[NWConcrete_nw_masque_server initWithParameters:securityOptions:clientQueue:]";
          _os_log_impl( &dword_181A5C000,  v24,  v36,  "%{public}s dispatch_queue_create failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }

void sub_181A671E8(_Unwind_Exception *exception_object)
{
}

int64_t networkd_settings_get_int64_with_default(const char *a1, int64_t a2)
{
  if (sCachedSettings)
  {
    pthread_mutex_lock(&sSettingsMutex);
    v4 = (void *)sCachedSettings;
    if (sCachedSettings)
    {
      Class Class = object_getClass((id)sCachedSettings);
      if (a1)
      {
        if (Class == (Class)MEMORY[0x1895F9250])
        {
          xpc_object_t value = xpc_dictionary_get_value(v4, a1);
          if (value)
          {
            v7 = value;
            if (object_getClass(value) == (Class)MEMORY[0x1895F9280]) {
              a2 = xpc_int64_get_value(v7);
            }
          }
        }
      }
    }

    pthread_mutex_unlock(&sSettingsMutex);
  }

  return a2;
}

uint64_t networkd_settings_init()
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  uint64_t result = pthread_once(&nw_settings_setup_atfork::pOnce, (void (*)(void))nw_settings_setup_atfork_inner);
  if (sSettingsInitState != 2)
  {
    pthread_mutex_lock(&sSettingsMutex);
    if (sSettingsInitState) {
      return pthread_mutex_unlock(&sSettingsMutex);
    }
    sSettingsInitState = 1;
    networkd_settings_setup_notify_watch();
    networkd_settings_read_from_file();
    int out_token = -1;
    uint32_t v1 = notify_register_check((const char *)nw_notification_name_settings, &out_token);
    if (!v1 && out_token != -1)
    {
      networkd_settings_update_from_token(out_token);
LABEL_19:
      if (out_token != -1) {
        notify_cancel(out_token);
      }
      sSettingsInitState = 2;
      return pthread_mutex_unlock(&sSettingsMutex);
    }

    char v2 = nw_settings_should_be_able_to_use_notify_apis(void)::has_notify_apis;
    uint64_t v3 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init(v3);
    uint64_t v4 = gLogObj;
    if (v1 == 1000000 && (v2 & 1) != 0)
    {
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_19;
      }
      v5 = "";
      *(_DWORD *)buf = 136447234;
      if (sNWIsBetweenForkAndExec) {
        v5 = " (forked)";
      }
      v12 = "networkd_settings_init";
      __int16 v13 = 2082;
      uint64_t v14 = nw_notification_name_settings;
      __int16 v15 = 1024;
      int v16 = 1000000;
      __int16 v17 = 1024;
      int v18 = out_token;
      __int16 v19 = 2082;
      v20 = v5;
      v6 = "%{public}s [sandboxed: ok] notify_register_check(%{public}s) status %u token %d%{public}s failed";
      v7 = (os_log_s *)v4;
      os_log_type_t v8 = OS_LOG_TYPE_DEFAULT;
    }

    else
    {
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
        goto LABEL_19;
      }
      v9 = "";
      *(_DWORD *)buf = 136447234;
      if (sNWIsBetweenForkAndExec) {
        v9 = " (forked)";
      }
      v12 = "networkd_settings_init";
      __int16 v13 = 2082;
      uint64_t v14 = nw_notification_name_settings;
      __int16 v15 = 1024;
      int v16 = v1;
      __int16 v17 = 1024;
      int v18 = out_token;
      __int16 v19 = 2082;
      v20 = v9;
      v6 = "%{public}s notify_register_check(%{public}s) status %u token %d%{public}s";
      v7 = (os_log_s *)v4;
      os_log_type_t v8 = OS_LOG_TYPE_ERROR;
    }

    _os_log_impl(&dword_181A5C000, v7, v8, v6, buf, 0x2Cu);
    goto LABEL_19;
  }

  return result;
}

void nw_context_set_isolate_protocol_cache(void *a1, int a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_context_set_isolate_protocol_cache";
    v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v10, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_context_set_isolate_protocol_cache";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null context", buf, 0xCu);
        }
      }

      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        BOOL v15 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            v20 = "nw_context_set_isolate_protocol_cache";
            __int16 v21 = 2082;
            v22 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v11,  v14,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_26;
        }

        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_context_set_isolate_protocol_cache";
          _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_context_set_isolate_protocol_cache";
          _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void nw_context_set_privacy_level(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    nw_context_set_privacy_level_internal(v3, a2, a2 == 4);
    goto LABEL_3;
  }

  __nwlog_obj();
  char v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_context_set_privacy_level";
  v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_context_set_privacy_level";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_context_set_privacy_level";
          __int16 v17 = 2082;
          int v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_context_set_privacy_level";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_context_set_privacy_level";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181A67B34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_context_set_privacy_level_internal(void *a1, int a2, char a3)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  char v5 = a1;
  id v6 = v5;
  if (v5)
  {
    if ((v5[136] & 0x48) == 0x40 && !dispatch_workloop_is_current())
    {
      v16[0] = MEMORY[0x1895F87A8];
      v16[1] = 3221225472LL;
      v16[2] = __nw_context_set_privacy_level_internal_block_invoke;
      v16[3] = &unk_189BB5FF0;
      id v17 = v6;
      int v18 = a2;
      char v19 = a3;
      nw_queue_context_async(v17, v16);
    }

    else
    {
      *((_DWORD *)v6 + 31) = a2;
      *((_BYTE *)v6 + 137) = *((_BYTE *)v6 + 137) & 0xFE | a3;
      uint64_t v7 = *((void *)v6 + 5);
      if (v7)
      {
        *(_DWORD *)(v7 + 124) = a2;
        *(_BYTE *)(*((void *)v6 + 5) + 137LL) = *(_BYTE *)(*((void *)v6 + 5) + 137LL) & 0xFE | a3;
      }
    }

    goto LABEL_7;
  }

  __nwlog_obj();
  os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v23 = "nw_context_set_privacy_level_internal";
  v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v9, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_context_set_privacy_level_internal";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v23 = "nw_context_set_privacy_level_internal";
          __int16 v24 = 2082;
          v25 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }

      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_context_set_privacy_level_internal";
        _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_context_set_privacy_level_internal";
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181A67E7C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void nw_context_activate(void *a1)
{
  uint64_t v115 = *MEMORY[0x1895F89C0];
  uint32_t v1 = a1;
  char v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v108 = "nw_context_activate";
    v69 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v104) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v69, &v104, &type))
    {
      if (v104 == 17)
      {
        __nwlog_obj();
        v70 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v71 = v104;
        if (os_log_type_enabled(v70, (os_log_type_t)v104))
        {
          *(_DWORD *)buf = 136446210;
          v108 = "nw_context_activate";
          _os_log_impl(&dword_181A5C000, v70, v71, "%{public}s called with null context", buf, 0xCu);
        }
      }

      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v70 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v89 = v104;
        BOOL v90 = os_log_type_enabled(v70, (os_log_type_t)v104);
        if (backtrace_string)
        {
          if (v90)
          {
            *(_DWORD *)buf = 136446466;
            v108 = "nw_context_activate";
            __int16 v109 = 2082;
            __uint64_t v110 = (__uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v70,  v89,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_171;
        }

        if (v90)
        {
          *(_DWORD *)buf = 136446210;
          v108 = "nw_context_activate";
          _os_log_impl(&dword_181A5C000, v70, v89, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v70 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v91 = v104;
        if (os_log_type_enabled(v70, (os_log_type_t)v104))
        {
          *(_DWORD *)buf = 136446210;
          v108 = "nw_context_activate";
          _os_log_impl( &dword_181A5C000,  v70,  v91,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

LABEL_171:
    if (v69) {
      free(v69);
    }
    goto LABEL_132;
  }

  os_unfair_lock_lock(v1 + 20);
  __uint64_t v104 = 0LL;
  pthread_threadid_np(0LL, &v104);
  if (v2[30]._os_unfair_lock_opaque == 4)
  {
    p_char os_unfair_lock_opaque = (unint64_t *)&v2[28]._os_unfair_lock_opaque;
    __uint64_t v73 = v104;
    while (1)
    {
      unint64_t v74 = __ldaxr(p_os_unfair_lock_opaque);
      if (v74) {
        break;
      }
      if (!__stlxr(v73, p_os_unfair_lock_opaque))
      {
        char v75 = 1;
        goto LABEL_147;
      }
    }

    char v75 = 0;
    __clrex();
LABEL_147:
    if ((v75 & 1) == 0)
    {
      __nwlog_obj();
      v80 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446722;
      v108 = "nw_context_activate";
      __int16 v109 = 2048;
      __uint64_t v110 = v104;
      __int16 v111 = 2048;
      uint64_t v112 = v74;
      v81 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v105 = 0;
      if (__nwlog_fault(v81, &type, &v105))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v82 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v83 = type;
          if (os_log_type_enabled(v82, type))
          {
            *(_DWORD *)buf = 136446722;
            v108 = "nw_context_activate";
            __int16 v109 = 2048;
            __uint64_t v110 = v104;
            __int16 v111 = 2048;
            uint64_t v112 = v74;
            _os_log_impl( &dword_181A5C000,  v82,  v83,  "%{public}s Entering call, current TID=%llu, inline TID is already set to %llu",  buf,  0x20u);
          }
        }

        else if (v105)
        {
          v96 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v82 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v97 = type;
          BOOL v98 = os_log_type_enabled(v82, type);
          if (v96)
          {
            if (v98)
            {
              *(_DWORD *)buf = 136446978;
              v108 = "nw_context_activate";
              __int16 v109 = 2048;
              __uint64_t v110 = v104;
              __int16 v111 = 2048;
              uint64_t v112 = v74;
              __int16 v113 = 2082;
              v114 = v96;
              _os_log_impl( &dword_181A5C000,  v82,  v97,  "%{public}s Entering call, current TID=%llu, inline TID is already set to %llu, dumping backtrace:%{public}s",  buf,  0x2Au);
            }

            free(v96);
            goto LABEL_196;
          }

          if (v98)
          {
            *(_DWORD *)buf = 136446722;
            v108 = "nw_context_activate";
            __int16 v109 = 2048;
            __uint64_t v110 = v104;
            __int16 v111 = 2048;
            uint64_t v112 = v74;
            _os_log_impl( &dword_181A5C000,  v82,  v97,  "%{public}s Entering call, current TID=%llu, inline TID is already set to %llu, no backtrace",  buf,  0x20u);
          }
        }

        else
        {
          __nwlog_obj();
          v82 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v102 = type;
          if (os_log_type_enabled(v82, type))
          {
            *(_DWORD *)buf = 136446722;
            v108 = "nw_context_activate";
            __int16 v109 = 2048;
            __uint64_t v110 = v104;
            __int16 v111 = 2048;
            uint64_t v112 = v74;
            _os_log_impl( &dword_181A5C000,  v82,  v102,  "%{public}s Entering call, current TID=%llu, inline TID is already set to %llu, backtrace limit exceeded",  buf,  0x20u);
          }
        }
      }

    if (v97) {
      free(v97);
    }
    mode = 0;
LABEL_174:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v125 = (id)gLogObj;
    if (mode > 5) {
      v126 = "unknown-mode";
    }
    else {
      v126 = off_189BBBBC0[mode];
    }
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v126;
    *(_WORD *)&buf[22] = 2082;
    v367 = "flow";
    v127 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v377[0] = 0;
    if (__nwlog_fault(v127, type, v377))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v128 = (os_log_s *)(id)gLogObj;
        v129 = type[0];
        if (os_log_type_enabled(v128, type[0]))
        {
          if (mode > 5) {
            v130 = "unknown-mode";
          }
          else {
            v130 = off_189BBBBC0[mode];
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v130;
          *(_WORD *)&buf[22] = 2082;
          v367 = "flow";
          _os_log_impl( &dword_181A5C000,  v128,  v129,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
        }
      }

      else if (v377[0])
      {
        v131 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v128 = (os_log_s *)(id)gLogObj;
        v132 = type[0];
        v133 = os_log_type_enabled(v128, type[0]);
        if (v131)
        {
          if (v133)
          {
            if (mode > 5) {
              v134 = "unknown-mode";
            }
            else {
              v134 = off_189BBBBC0[mode];
            }
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v134;
            *(_WORD *)&buf[22] = 2082;
            v367 = "flow";
            *(_WORD *)v368 = 2082;
            *(void *)&v368[2] = v131;
            _os_log_impl( &dword_181A5C000,  v128,  v132,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v131);
          if (!v127) {
            goto LABEL_208;
          }
          goto LABEL_207;
        }

        if (v133)
        {
          if (mode > 5) {
            v137 = "unknown-mode";
          }
          else {
            v137 = off_189BBBBC0[mode];
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v137;
          *(_WORD *)&buf[22] = 2082;
          v367 = "flow";
          _os_log_impl( &dword_181A5C000,  v128,  v132,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v128 = (os_log_s *)(id)gLogObj;
        v135 = type[0];
        if (os_log_type_enabled(v128, type[0]))
        {
          if (mode > 5) {
            v136 = "unknown-mode";
          }
          else {
            v136 = off_189BBBBC0[mode];
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v136;
          *(_WORD *)&buf[22] = 2082;
          v367 = "flow";
          _os_log_impl( &dword_181A5C000,  v128,  v135,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
        }
      }
    }

    if (!v127)
    {
LABEL_208:
      LOBYTE(v64) = 0;
      goto LABEL_209;
    }

        if (v87) {
          free(v87);
        }
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
        v93 = (char *)_os_log_send_and_compose_impl();
        type[0] = 16;
        v151 = OS_LOG_TYPE_DEFAULT;
        if (type[0] == 17)
        {
          v94 = (os_log_s *)__nwlog_obj();
          v95 = type[0];
          if (!os_log_type_enabled(v94, (os_log_type_t)type[0])) {
            goto LABEL_187;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
          v96 = "%{public}s called with null protocol";
        }

        else if (v151)
        {
          os_log_type_t v97 = (char *)__nw_create_backtrace_string();
          v94 = (os_log_s *)__nwlog_obj();
          v95 = type[0];
          BOOL v98 = os_log_type_enabled(v94, (os_log_type_t)type[0]);
          if (v97)
          {
            if (v98)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v97;
              _os_log_impl( &dword_181A5C000,  v94,  v95,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v97);
            goto LABEL_187;
          }

          if (!v98)
          {
LABEL_187:
            if (v93) {
              free(v93);
            }
            goto LABEL_189;
          }

          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
          v96 = "%{public}s called with null protocol, no backtrace";
        }

        else
        {
          v94 = (os_log_s *)__nwlog_obj();
          v95 = type[0];
          if (!os_log_type_enabled(v94, (os_log_type_t)type[0])) {
            goto LABEL_187;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_remote_endpoint";
          v96 = "%{public}s called with null protocol, backtrace limit exceeded";
        }

        _os_log_impl(&dword_181A5C000, v94, v95, v96, buf, 0xCu);
        goto LABEL_187;
      }

      if (!v76) {
        goto LABEL_139;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_handler";
      int v16 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      BOOL v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type[0];
      if (!os_log_type_enabled(v14, (os_log_type_t)type[0])) {
        goto LABEL_139;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_handler";
      int v16 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v14, v15, v16, buf, 0xCu);
    goto LABEL_139;
  }

  if (default_input_handler)
  {
    if (default_input_handler->handle == &nw_protocol_ref_counted_handle)
    {
      callbacks = default_input_handler[1].callbacks;
      if (callbacks)
      {
        id v18 = (nw_protocol_callbacks *)((char *)callbacks - 1);
        default_input_handler[1].callbacks = v18;
        if (!v18)
        {
          char v19 = *(void (***)(void))default_input_handler[1].flow_id;
          if (v19)
          {
            *(void *)default_input_handler[1].flow_id = 0LL;
            v19[2](v19);
            _Block_release(v19);
          }

          if ((default_input_handler[1].flow_id[8] & 1) != 0)
          {
            char v20 = *(const void **)default_input_handler[1].flow_id;
            if (v20) {
              _Block_release(v20);
            }
          }

          free(default_input_handler);
        }
      }
    }
  }

  a1->default_input_handler = a2;
  if (!a2)
  {
    nw_protocol_set_flow_id_from_protocol(a1, 0LL);
    goto LABEL_25;
  }

  if (a2->handle == &nw_protocol_ref_counted_handle)
  {
    char v5 = a2[1].callbacks;
    if (v5) {
      a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v5->add_input_handler + 1);
    }
  }

  nw_protocol_set_flow_id_from_protocol(a1, a2);
LABEL_12:
  if (!a2->output_handler)
  {
    a2->output_handler = a1;
    if (a1->handle == &nw_protocol_ref_counted_handle)
    {
      id v6 = a1[1].callbacks;
      if (v6) {
        a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v6->add_input_handler + 1);
      }
    }
  }

  handle = a2->handle;
  if (handle == &nw_protocol_ref_counted_handle)
  {
    char v8 = a2[1].callbacks;
    if (v8) {
      a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v8->add_input_handler + 1);
    }
  }

  BOOL v9 = a2->callbacks;
  if (v9)
  {
    get_local_endpoint = (uint64_t (*)(nw_protocol *))v9->get_local_endpoint;
    if (get_local_endpoint)
    {
      os_log_type_t v11 = (void *)get_local_endpoint(a2);
      if (handle != &nw_protocol_ref_counted_handle) {
        goto LABEL_45;
      }
      goto LABEL_22;
    }
  }

  __nwlog_obj();
  identifier = a2->identifier;
  *(_DWORD *)buf = 136446722;
  *(void *)&uint8_t buf[4] = "__nw_protocol_get_local_endpoint";
  if (!identifier) {
    identifier = (nw_protocol_identifier *)"invalid";
  }
  *(_WORD *)&buf[12] = 2082;
  *(void *)&buf[14] = identifier;
  *(_WORD *)&buf[22] = 2048;
  v153 = a2;
  v107 = (char *)_os_log_send_and_compose_impl();
  type[0] = 16;
  v151 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v107, type, &v151))
  {
    if (type[0] == 17)
    {
      v108 = (os_log_s *)__nwlog_obj();
      __int16 v109 = type[0];
      if (!os_log_type_enabled(v108, (os_log_type_t)type[0])) {
        goto LABEL_309;
      }
      __uint64_t v110 = a2->identifier;
      if (!v110) {
        __uint64_t v110 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "__nw_protocol_get_local_endpoint";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v110;
      *(_WORD *)&buf[22] = 2048;
      v153 = a2;
      __int16 v111 = "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback";
LABEL_308:
      _os_log_impl(&dword_181A5C000, v108, v109, v111, buf, 0x20u);
      goto LABEL_309;
    }

    if (v151 == OS_LOG_TYPE_DEFAULT)
    {
      v108 = (os_log_s *)__nwlog_obj();
      __int16 v109 = type[0];
      if (!os_log_type_enabled(v108, (os_log_type_t)type[0])) {
        goto LABEL_309;
      }
      v140 = a2->identifier;
      if (!v140) {
        v140 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "__nw_protocol_get_local_endpoint";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v140;
      *(_WORD *)&buf[22] = 2048;
      v153 = a2;
      __int16 v111 = "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback, backtrace limit exceeded";
      goto LABEL_308;
    }

    v124 = (char *)__nw_create_backtrace_string();
    v108 = (os_log_s *)__nwlog_obj();
    __int16 v109 = type[0];
    v125 = os_log_type_enabled(v108, (os_log_type_t)type[0]);
    if (!v124)
    {
      if (!v125) {
        goto LABEL_309;
      }
      v146 = a2->identifier;
      if (!v146) {
        v146 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "__nw_protocol_get_local_endpoint";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v146;
      *(_WORD *)&buf[22] = 2048;
      v153 = a2;
      __int16 v111 = "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback, no backtrace";
      goto LABEL_308;
    }

    if (v125)
    {
      v126 = a2->identifier;
      if (!v126) {
        v126 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "__nw_protocol_get_local_endpoint";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v126;
      *(_WORD *)&buf[22] = 2048;
      v153 = a2;
      LOWORD(v154[0]) = 2082;
      *(void *)((char *)v154 + 2) = v124;
      _os_log_impl( &dword_181A5C000,  v108,  v109,  "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback, dumping backtrace:%{public}s",  buf,  0x2Au);
    }

    free(v124);
  }

    if (v143) {
      free(v143);
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = -1;
  }

  return 1LL;
}

  if (v54) {
    free(v54);
  }
  return 1LL;
}

        free(v71);
        if (!v11) {
          goto LABEL_117;
        }
        goto LABEL_116;
      }
    }

    if (*(_UNKNOWN **)(v17 + 40) == &nw_protocol_ref_counted_handle)
    {
      v25 = *(void *)(v17 + 88);
      if (v25) {
        *(void *)(v17 + 88) = v25 + 1;
      }
      id v18 = -1;
    }

    else
    {
      id v18 = 0;
    }

    *(void *)os_log_type_t type = v17;
    v107 = v18;
    if (*((_UNKNOWN **)v6 - 7) == &nw_protocol_ref_counted_handle)
    {
      id v27 = *((void *)v6 - 1);
      if (v27) {
        *((void *)v6 - 1) = v27 + 1;
      }
      os_log_type_t v26 = -1;
    }

    else
    {
      os_log_type_t v26 = 0;
    }

    __uint64_t v104 = v6 - 96;
    char v105 = v26;
    os_log_type_t v28 = *(void *)(v17 + 24);
    if (v28)
    {
      os_log_type_t v29 = *(void (**)(uint64_t, char *))(v28 + 184);
      if (v29)
      {
        v29(v17, v6 - 96);
        os_log_type_t v26 = v105;
LABEL_55:
        if ((v26 & 1) != 0) {
          nw::release_if_needed<nw_protocol *>((uint64_t *)&v104);
        }
        if ((v107 & 1) != 0) {
          nw::release_if_needed<nw_protocol *>((uint64_t *)type);
        }
        goto LABEL_117;
      }
    }

    __nwlog_obj();
    unint64_t v78 = (void *)objc_claimAutoreleasedReturnValue();
    char v79 = *(const char **)(v17 + 16);
    *(_DWORD *)buf = 136446722;
    __int16 v109 = "__nw_protocol_input_finished";
    if (!v79) {
      char v79 = "invalid";
    }
    __uint64_t v110 = 2082;
    __int16 v111 = (char *)v79;
    uint64_t v112 = 2048;
    __int16 v113 = v17;
    v80 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v103 = OS_LOG_TYPE_ERROR;
    os_log_type_t v102 = 0;
    if (__nwlog_fault(v80, &v103, &v102))
    {
      if (v103 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v81 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v82 = v103;
        if (os_log_type_enabled(v81, v103))
        {
          os_log_type_t v83 = *(const char **)(v17 + 16);
          if (!v83) {
            os_log_type_t v83 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          __int16 v109 = "__nw_protocol_input_finished";
          __uint64_t v110 = 2082;
          __int16 v111 = (char *)v83;
          uint64_t v112 = 2048;
          __int16 v113 = v17;
          _os_log_impl( &dword_181A5C000,  v81,  v82,  "%{public}s protocol %{public}s (%p) has invalid input_finished callback",  buf,  0x20u);
        }
      }

      else if (v102)
      {
        os_log_type_t v87 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v81 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v88 = v103;
        os_log_type_t v89 = os_log_type_enabled(v81, v103);
        if (v87)
        {
          if (v89)
          {
            BOOL v90 = *(const char **)(v17 + 16);
            if (!v90) {
              BOOL v90 = "invalid";
            }
            *(_DWORD *)buf = 136446978;
            __int16 v109 = "__nw_protocol_input_finished";
            __uint64_t v110 = 2082;
            __int16 v111 = (char *)v90;
            uint64_t v112 = 2048;
            __int16 v113 = v17;
            v114 = 2082;
            uint64_t v115 = v87;
            _os_log_impl( &dword_181A5C000,  v81,  v88,  "%{public}s protocol %{public}s (%p) has invalid input_finished callback, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v87);
          goto LABEL_244;
        }

        if (v89)
        {
          os_log_type_t v100 = *(const char **)(v17 + 16);
          if (!v100) {
            os_log_type_t v100 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          __int16 v109 = "__nw_protocol_input_finished";
          __uint64_t v110 = 2082;
          __int16 v111 = (char *)v100;
          uint64_t v112 = 2048;
          __int16 v113 = v17;
          _os_log_impl( &dword_181A5C000,  v81,  v88,  "%{public}s protocol %{public}s (%p) has invalid input_finished callback, no backtrace",  buf,  0x20u);
        }
      }

      else
      {
        __nwlog_obj();
        v81 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v98 = v103;
        if (os_log_type_enabled(v81, v103))
        {
          v99 = *(const char **)(v17 + 16);
          if (!v99) {
            v99 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          __int16 v109 = "__nw_protocol_input_finished";
          __uint64_t v110 = 2082;
          __int16 v111 = (char *)v99;
          uint64_t v112 = 2048;
          __int16 v113 = v17;
          _os_log_impl( &dword_181A5C000,  v81,  v98,  "%{public}s protocol %{public}s (%p) has invalid input_finished callback, backtrace limit exceeded",  buf,  0x20u);
        }
      }
    }

        free(v43);
        goto LABEL_172;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v37 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v163 = "nw_parameters_create_secure_http_messaging";
      v38 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v160 = 0;
      if (__nwlog_fault(v38, &type, &v160))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v39 = (os_log_s *)(id)gLogObj;
          v40 = type;
          if (os_log_type_enabled(v39, type))
          {
            *(_DWORD *)buf = 136446210;
            v163 = "nw_parameters_create_secure_http_messaging";
            _os_log_impl(&dword_181A5C000, v39, v40, "%{public}s nw_tls_create_options failed", buf, 0xCu);
          }
        }

        else if (v160)
        {
          v50 = __nw_create_backtrace_string();
          if (v50)
          {
            v51 = (char *)v50;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v52 = (os_log_s *)(id)gLogObj;
            v53 = type;
            if (os_log_type_enabled(v52, type))
            {
              *(_DWORD *)buf = 136446466;
              v163 = "nw_parameters_create_secure_http_messaging";
              v164 = 2082;
              v165 = v51;
              _os_log_impl( &dword_181A5C000,  v52,  v53,  "%{public}s nw_tls_create_options failed, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v51);
            if (!v38) {
              goto LABEL_152;
            }
            goto LABEL_151;
          }

          __nwlog_obj();
          os_log_type_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          BOOL v98 = type;
          if (os_log_type_enabled(v39, type))
          {
            *(_DWORD *)buf = 136446210;
            v163 = "nw_parameters_create_secure_http_messaging";
            _os_log_impl(&dword_181A5C000, v39, v98, "%{public}s nw_tls_create_options failed, no backtrace", buf, 0xCu);
          }
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v39 = (os_log_s *)(id)gLogObj;
          os_log_type_t v91 = type;
          if (os_log_type_enabled(v39, type))
          {
            *(_DWORD *)buf = 136446210;
            v163 = "nw_parameters_create_secure_http_messaging";
            _os_log_impl( &dword_181A5C000,  v39,  v91,  "%{public}s nw_tls_create_options failed, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

      if (!v38)
      {
LABEL_152:
        v69 = 0LL;
LABEL_204:

LABEL_205:
        goto LABEL_206;
      }

    if (v146) {
      free(v146);
    }
    char v2 = 0LL;
    goto LABEL_144;
  }

  id v3 = v1;
  mode = v3->mode;

  if ((_DWORD)mode == 3)
  {
    v192 = v3;
    char v5 = nw_endpoint_handler_copy_proxy(v3);
    v206 = 0;
    v189 = v2;
    has_unresolved_proxies = nw_endpoint_proxy_has_unresolved_proxies(v3, &v206);
    if (!has_unresolved_proxies)
    {
      v3->event = (nw_endpoint_handler_event_s)262148;
      nw_endpoint_handler_report(v3, 0LL, &v3->event.domain, 0LL);
      uint64_t v23 = v3;
      __int16 v24 = (*((_BYTE *)v23 + 268) & 0x20) == 0;

      if (!v24) {
        goto LABEL_85;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      parameters = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(parameters, OS_LOG_TYPE_DEBUG))
      {
        v25 = v23;

        os_log_type_t v26 = v25;
        id v27 = (*((_BYTE *)v23 + 268) & 1) == 0;

        if (v27) {
          os_log_type_t v28 = "";
        }
        else {
          os_log_type_t v28 = "dry-run ";
        }
        os_log_type_t v29 = nw_endpoint_handler_copy_endpoint(v26);
        logging_description = nw_endpoint_get_logging_description(v29);
        v31 = v26;
        os_log_type_t v32 = v31;
        BOOL v33 = v31[30];
        else {
          dispatch_workloop_t v34 = off_189BBBBF0[v33];
        }

        v48 = v32;
        id v49 = v48;
        v50 = "path";
        switch(v192->mode)
        {
          case 0:
            break;
          case 1:
            v50 = "resolver";
            break;
          case 2:
            v50 = nw_endpoint_flow_mode_string(v48[31]);
            break;
          case 3:
            v50 = "proxy";
            break;
          case 4:
            v50 = "fallback";
            break;
          case 5:
            v50 = "transform";
            break;
          default:
            v50 = "unknown-mode";
            break;
        }

        v68 = v29;
        v69 = v34;
        v70 = logging_description;
        os_log_type_t v71 = v5;
        v72 = v49;
        os_unfair_lock_lock((os_unfair_lock_t)v72 + 28);
        __uint64_t v73 = v72[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v72 + 28);

        char v5 = v71;
        *(_DWORD *)buf = 136447746;
        *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_complete_resolve";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v25->id_str;
        *(_WORD *)&buf[22] = 2082;
        v208 = (uint64_t (*)(uint64_t, uint64_t))v28;
        *(_WORD *)v209 = 2082;
        *(void *)&v209[2] = v70;
        *(_WORD *)&v209[10] = 2082;
        *(void *)&v209[12] = v69;
        v210 = 2082;
        v211 = (void *)v50;
        v212 = 2114;
        v213 = v73;
        _os_log_impl( &dword_181A5C000,  parameters,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] resolved all proxies",  buf,  0x48u);
      }

      if (v69) {
        free(v69);
      }
    }

    BOOL v9 = v348;
    if ((*(_BYTE *)(v348 + 158) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __uint64_t v110 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        __int16 v111 = *(void *)(v348 + 488);
        if (v111) {
          LODWORD(v111) = *(_DWORD *)(v111 + 424);
        }
        uint64_t v112 = *(_DWORD *)(*(void *)(v348 + 480) + 372LL);
        __int16 v113 = *(_DWORD *)(v348 + 860);
        *(_DWORD *)buf = 136447746;
        v364 = "nw_http1_connection_send_bytes";
        v365 = 2082;
        *(void *)v366 = v347;
        *(_WORD *)&v366[8] = 2080;
        *(void *)&v366[10] = " ";
        v367 = 1024;
        *(_DWORD *)v368 = v112;
        *(_WORD *)&v368[4] = 1024;
        *(_DWORD *)&v368[6] = v113;
        LOWORD(v369) = 1024;
        *(_DWORD *)((char *)&v369 + 2) = v111;
        HIWORD(v369) = 1024;
        *(_DWORD *)v370 = v18;
        _os_log_impl( &dword_181A5C000,  v110,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> output handler refused frame request for frames of length %u",  buf,  0x38u);
      }
    }

    LODWORD(v18) = v18 - v22;
LABEL_179:
    os_log_type_t v11 = v343;
LABEL_180:
    if ((_DWORD)v18 == __len[0])
    {
      nw_http_transaction_metadata_increment_outbound_body_transfer_size( *(void **)(*(void *)(v9 + 488) + 352LL),  v18);
      v114 = *(void *)(v9 + 488);
      uint64_t v115 = __len[0];
      v116 = *(void *)(v114 + 176);
      v93 = __CFADD__(v116, __len[0]);
      *(void *)(v114 + 176) = v116 + __len[0];
      if (v93)
      {
        if (gLogDatapath)
        {
          v188 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v188, OS_LOG_TYPE_DEBUG))
          {
            v189 = *(void *)(v114 + 176);
            *(_DWORD *)buf = 136446978;
            v364 = "increment_outbound_body_size";
            v365 = 2082;
            *(void *)v366 = "outbound_body_size";
            *(_WORD *)&v366[8] = 2048;
            *(void *)&v366[10] = v115;
            v367 = 2048;
            *(void *)v368 = v189;
            _os_log_impl( &dword_181A5C000,  v188,  OS_LOG_TYPE_DEBUG,  "%{public}s Overflow: %{public}s, increment %llu, result %llu",  buf,  0x2Au);
          }
        }

        *(void *)(v114 + 176) = -1LL;
      }

      v117 = v345;
      if (nw_frame_is_metadata_complete(v11))
      {
        *(_WORD *)(*(void *)(v9 + 488) + 428LL) |= 0x400u;
        *v340 |= 0x20u;
        nw_http_transaction_metadata_mark_outbound_message_end(*(void **)(*(void *)(v9 + 488) + 352LL));
        v118 = *(void *)(v9 + 488);
        if (*(_BYTE *)(v118 + 168))
        {
          if (*(void *)(v118 + 160) != *(void *)(v118 + 176))
          {
            if ((*(_BYTE *)(v118 + 158) & 1) == 0)
            {
              v238 = (os_log_s *)__nwlog_obj();
              v239 = os_log_type_enabled(v238, OS_LOG_TYPE_ERROR);
              v118 = *(void *)(v9 + 488);
              if (v239)
              {
                v240 = *(void *)(v118 + 256);
                if (v240) {
                  LODWORD(v240) = *(_DWORD *)(v240 + 860);
                }
                v241 = *(_DWORD *)(*(void *)(v118 + 248) + 372LL);
                v242 = *(_DWORD *)(v118 + 424);
                if (*(_BYTE *)(v118 + 168)) {
                  v243 = *(void *)(v118 + 160);
                }
                else {
                  v243 = -1LL;
                }
                v244 = *(void *)(v118 + 176);
                *(_DWORD *)buf = 136448002;
                v364 = "nw_http1_connection_drain_outbound_frames";
                v365 = 2082;
                *(void *)v366 = v118 + 74;
                *(_WORD *)&v366[8] = 2080;
                *(void *)&v366[10] = " ";
                v367 = 1024;
                *(_DWORD *)v368 = v241;
                *(_WORD *)&v368[4] = 1024;
                *(_DWORD *)&v368[6] = v240;
                LOWORD(v369) = 1024;
                *(_DWORD *)((char *)&v369 + 2) = v242;
                HIWORD(v369) = 2048;
                *(void *)v370 = v243;
                *(_WORD *)&v370[8] = 2048;
                v371 = v244;
                _os_log_impl( &dword_181A5C000,  v238,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:c%u:s%u> Content length header %llu does not equal body size %llu",  buf,  0x46u);
                v118 = *(void *)(v9 + 488);
              }
            }

            nw_protocol_error(*(void **)(v118 + 48), v118);
            nw_protocol_disconnected(*(void **)(*(void *)(v9 + 488) + 48LL), *(void *)(v9 + 488));
            goto LABEL_370;
          }
        }
      }

          if (v74) {
            free(v74);
          }
          goto LABEL_109;
        }
      }
    }

    else
    {
      v25 = 0LL;
      os_log_type_t v28 = *(uint64_t (**)(nw_protocol_identifier *))(v23 + 136);
      if (v28) {
        goto LABEL_54;
      }
    }

    LODWORD(v29) = 0;
    if (v25) {
      goto LABEL_62;
    }
    goto LABEL_63;
  }

  if (!v8)
  {
    os_log_type_t v11 = 2;
    if (!identifier) {
      goto LABEL_173;
    }
    goto LABEL_45;
  }

  if ((*(_WORD *)&a1[6].flow_id[13] & 0x80) != 0)
  {
    char v8 = 0;
    os_log_type_t v11 = 2;
    if (!identifier) {
      goto LABEL_173;
    }
    goto LABEL_45;
  }

  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
  }
  os_log_type_t v12 = (os_log_s *)gconnectionLogObj;
  os_log_type_t v11 = 2;
  if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_socket_initialize_socket";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = (char *)a1 + 404;
    _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s Multipath not supported for datagram connections",  buf,  0x16u);
  }

  char v8 = 0;
  if (identifier) {
    goto LABEL_45;
  }
LABEL_173:
  LODWORD(v29) = 0;
  v31 = *(_DWORD *)&a1[4].flow_id[12];
  if ((v31 & 0x80000000) == 0) {
    goto LABEL_64;
  }
LABEL_174:
  LOBYTE(a1[6].identifier) = (_BYTE)v29;
  if (v8)
  {
    os_log_type_t v83 = socket(39, v11, 0);
    *(_DWORD *)&a1[4].flow_id[12] = v83;
    if ((v83 & 0x80000000) == 0)
    {
      a1[6].flow_id[15] = (*(unsigned __int16 *)&a1[6].flow_id[13] | (a1[6].flow_id[15] << 16) | 0x20000u) >> 16;
      goto LABEL_184;
    }

    if (**(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) != 43)
    {
LABEL_206:
      v53 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v96 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(void *)&uint8_t buf[4] = "nw_socket_initialize_socket";
        *(_WORD *)&buf[12] = 2080;
        *(_DWORD *)buf = 136447234;
        if (v8) {
          os_log_type_t v97 = 39;
        }
        else {
          os_log_type_t v97 = (int)v29;
        }
        *(void *)&buf[14] = (char *)a1 + 404;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = v97;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = v11;
        *(_WORD *)&buf[34] = 1024;
        *(_DWORD *)&buf[36] = v53;
        _os_log_impl( &dword_181A5C000,  v96,  OS_LOG_TYPE_ERROR,  "%{public}s %s Failed to create socket(%d,%d) %{darwin.errno}d",  buf,  0x28u);
      }

      else if (v8)
      {
        os_log_type_t v97 = 39;
      }

      else
      {
        os_log_type_t v97 = (int)v29;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_socket_initialize_socket";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v97;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v11;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = v53;
      BOOL v54 = (char *)_os_log_send_and_compose_impl();
      out[0] = 16;
      type[0] = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v54, out, type))
      {
        if (out[0] == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v98 = (os_log_s *)gLogObj;
          v99 = out[0];
          if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)out[0])) {
            goto LABEL_235;
          }
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_socket_initialize_socket";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v97;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v11;
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = v53;
          BOOL v57 = "%{public}s Failed to create socket(%d,%d) %{darwin.errno}d";
LABEL_233:
          unint64_t v78 = v98;
          char v79 = v99;
          v80 = 30;
          goto LABEL_234;
        }

        if (type[0] == OS_LOG_TYPE_DEFAULT)
        {
          BOOL v98 = (os_log_s *)__nwlog_obj();
          v99 = out[0];
          if (!os_log_type_enabled(v98, (os_log_type_t)out[0])) {
            goto LABEL_235;
          }
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_socket_initialize_socket";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v97;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v11;
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = v53;
          BOOL v57 = "%{public}s Failed to create socket(%d,%d) %{darwin.errno}d, backtrace limit exceeded";
          goto LABEL_233;
        }

        os_log_type_t v100 = (char *)__nw_create_backtrace_string();
        BOOL v98 = (os_log_s *)__nwlog_obj();
        v99 = out[0];
        BOOL v101 = os_log_type_enabled(v98, (os_log_type_t)out[0]);
        if (!v100)
        {
          if (!v101) {
            goto LABEL_235;
          }
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_socket_initialize_socket";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v97;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v11;
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = v53;
          BOOL v57 = "%{public}s Failed to create socket(%d,%d) %{darwin.errno}d, no backtrace";
          goto LABEL_233;
        }

        if (v101)
        {
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_socket_initialize_socket";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v97;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v11;
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = v53;
          *(_WORD *)&buf[30] = 2082;
          *(void *)&buf[32] = v100;
          _os_log_impl( &dword_181A5C000,  v98,  v99,  "%{public}s Failed to create socket(%d,%d) %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x28u);
        }

        free(v100);
      }

          goto LABEL_172;
        }

        if (!(_BYTE)v214)
        {
          __nwlog_obj();
          v119 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v138 = type[0];
          if (os_log_type_enabled(v119, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v219 = "nw_endpoint_handler_get_state";
            _os_log_impl( &dword_181A5C000,  v119,  v138,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_171;
        }

        v127 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v119 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v128 = type[0];
        v129 = os_log_type_enabled(v119, type[0]);
        if (!v127)
        {
          if (v129)
          {
            *(_DWORD *)buf = 136446210;
            v219 = "nw_endpoint_handler_get_state";
            _os_log_impl(&dword_181A5C000, v119, v128, "%{public}s called with null handler, no backtrace", buf, 0xCu);
          }

          goto LABEL_171;
        }

        if (v129)
        {
          *(_DWORD *)buf = 136446466;
          v219 = "nw_endpoint_handler_get_state";
          v220 = 2082;
          v221 = v127;
          _os_log_impl( &dword_181A5C000,  v119,  v128,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v127);
      }

LABEL_196:
      if (v81) {
        free(v81);
      }
    }
  }

  char os_unfair_lock_opaque = v2[34]._os_unfair_lock_opaque;
  if ((os_unfair_lock_opaque & 0x40) != 0)
  {
LABEL_130:
    if ((os_unfair_lock_opaque & 8) == 0) {
      goto LABEL_131;
    }
    __uint64_t v76 = v104;
    v77 = (unint64_t *)&v2[28]._os_unfair_lock_opaque;
    while (1)
    {
      unint64_t v78 = __ldaxr(v77);
      if (v78 != v76) {
        break;
      }
      if (!__stlxr(0LL, v77))
      {
        char v79 = 1;
        goto LABEL_154;
      }
    }

    char v79 = 0;
    __clrex();
LABEL_154:
    if ((v79 & 1) != 0) {
      goto LABEL_131;
    }
    __nwlog_obj();
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446722;
    v108 = "nw_context_activate";
    __int16 v109 = 2048;
    __uint64_t v110 = v104;
    __int16 v111 = 2048;
    uint64_t v112 = v78;
    v85 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v105 = 0;
    if (__nwlog_fault(v85, &type, &v105))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v86 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v87 = type;
        if (os_log_type_enabled(v86, type))
        {
          *(_DWORD *)buf = 136446722;
          v108 = "nw_context_activate";
          __int16 v109 = 2048;
          __uint64_t v110 = v104;
          __int16 v111 = 2048;
          uint64_t v112 = v78;
          _os_log_impl( &dword_181A5C000,  v86,  v87,  "%{public}s Exiting call, expected inline TID to be %llu but got %llu",  buf,  0x20u);
        }
      }

      else if (v105)
      {
        v99 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v86 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v100 = type;
        BOOL v101 = os_log_type_enabled(v86, type);
        if (v99)
        {
          if (v101)
          {
            *(_DWORD *)buf = 136446978;
            v108 = "nw_context_activate";
            __int16 v109 = 2048;
            __uint64_t v110 = v104;
            __int16 v111 = 2048;
            uint64_t v112 = v78;
            __int16 v113 = 2082;
            v114 = v99;
            _os_log_impl( &dword_181A5C000,  v86,  v100,  "%{public}s Exiting call, expected inline TID to be %llu but got %llu, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v99);
          goto LABEL_201;
        }

        if (v101)
        {
          *(_DWORD *)buf = 136446722;
          v108 = "nw_context_activate";
          __int16 v109 = 2048;
          __uint64_t v110 = v104;
          __int16 v111 = 2048;
          uint64_t v112 = v78;
          _os_log_impl( &dword_181A5C000,  v86,  v100,  "%{public}s Exiting call, expected inline TID to be %llu but got %llu, no backtrace",  buf,  0x20u);
        }
      }

      else
      {
        __nwlog_obj();
        v86 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v103 = type;
        if (os_log_type_enabled(v86, type))
        {
          *(_DWORD *)buf = 136446722;
          v108 = "nw_context_activate";
          __int16 v109 = 2048;
          __uint64_t v110 = v104;
          __int16 v111 = 2048;
          uint64_t v112 = v78;
          _os_log_impl( &dword_181A5C000,  v86,  v103,  "%{public}s Exiting call, expected inline TID to be %llu but got %llu, backtrace limit exceeded",  buf,  0x20u);
        }
      }
    }

        v151 = log;
LABEL_197:

        goto LABEL_198;
      }

    if (v131) {
      free(v131);
    }
    os_log_type_t v11 = 0LL;
    goto LABEL_174;
  }

  id v6 = (NWConcrete_nw_endpoint_handler *)v4;
  mode = v6->mode;

  if ((_DWORD)mode == 2)
  {
    v187 = v6;
    char v8 = nw_endpoint_handler_copy_flow(v6);
    BOOL v9 = (void *)*((void *)v8 + 104);
    v189 = v8;
    v181 = self;
    if (v9)
    {
      obj = (id)nw_path_flow_registration_copy_path(v9);
    }

    else
    {
      os_log_type_t v21 = v6;
      os_unfair_lock_lock(&v21->lock);
      obj = v21->current_path;
      os_unfair_lock_unlock(&v21->lock);
    }

    v186 = v5;
    uint64_t v23 = (id *)((char *)v8 + 16);
    v22 = *((void *)v8 + 2);
    if (v22) {
      __int16 v24 = *(_DWORD *)(v22 + 272);
    }
    else {
      __int16 v24 = 0;
    }
    v25 = (os_unfair_lock_s *)((char *)v8 + 880);
    os_unfair_lock_lock((os_unfair_lock_t)v8 + 220);
    objc_storeStrong((id *)v8 + 2, obj);
    os_unfair_lock_unlock((os_unfair_lock_t)v8 + 220);
    if (*((void *)v8 + 109)) {
      *((_BYTE *)v8 + 36) |= 1u;
    }
    if (v22)
    {
      if ((*((_BYTE *)v8 + 32) & 0x40) != 0)
      {
        if (*v23)
        {
          os_log_type_t v26 = *((_DWORD *)*v23 + 68);
          if (v26)
          {
            if (v24 != v26 && (v26 & 0x20000000) == 0)
            {
              if (nw_endpoint_handler_get_minimize_logging(v187))
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                os_log_type_t v29 = (os_log_s *)(id)gconnectionLogObj;
                if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
                {
                  id_string = nw_endpoint_handler_get_id_string(v187);
                  v164 = nw_endpoint_handler_dry_run_string(v187);
                  v165 = nw_endpoint_handler_copy_endpoint(v187);
                  logging_description = nw_endpoint_get_logging_description(v165);
                  v167 = nw_endpoint_handler_state_string(v187);
                  v168 = nw_endpoint_handler_mode_string(v187);
                  v169 = nw_endpoint_handler_copy_current_path(v187);
                  *(_DWORD *)buf = 136448258;
                  v202 = "-[NWConcrete_nw_endpoint_flow updatePathWithHandler:]";
                  v203 = 2082;
                  v204 = (char *)id_string;
                  v205 = 2082;
                  v206 = v164;
                  v207 = 2082;
                  v208 = (void *)logging_description;
                  v209 = 2082;
                  v210 = v167;
                  v211 = 2082;
                  v212 = v168;
                  v213 = 2114;
                  v214 = v169;
                  v215 = 1024;
                  v216 = v24;
                  v217 = 1024;
                  v218 = v26;
                  _os_log_impl( &dword_181A5C000,  v29,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] filter state change d (%X --> %X), drop flow",  buf,  0x54u);
                }
              }

              else
              {
                id v27 = v187;
                os_log_type_t v28 = *((_BYTE *)v27 + 268);

                if ((v28 & 0x20) != 0)
                {
LABEL_171:
                  v129 = v187;
                  v126 = (NWConcrete_nw_endpoint_mode_handler *)v129[5];

                  v193[0] = MEMORY[0x1895F87A8];
                  v193[1] = 3221225472LL;
                  v193[2] = __53__NWConcrete_nw_endpoint_flow_updatePathWithHandler___block_invoke;
                  v193[3] = &unk_189BC93A0;
                  v194 = v129;
                  nw_queue_context_async(v126, v193);
                  v125 = (id *)&v194;
                  goto LABEL_172;
                }

                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                os_log_type_t v29 = (os_log_s *)(id)gconnectionLogObj;
                if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
                {
                  os_log_type_t v30 = v27;

                  v31 = v30;
                  os_log_type_t v32 = *((_BYTE *)v27 + 268);

                  if ((v32 & 1) != 0) {
                    BOOL v33 = "dry-run ";
                  }
                  else {
                    BOOL v33 = "";
                  }
                  dispatch_workloop_t v34 = nw_endpoint_handler_copy_endpoint(v31);
                  v179 = nw_endpoint_get_logging_description(v34);
                  v182 = v33;
                  id_str = v30->id_str;
                  id v36 = v31;
                  v37 = v36;
                  v38 = v36[30];
                  else {
                    os_log_type_t v39 = off_189BBBBF0[v38];
                  }

                  v116 = v37;
                  v117 = v116;
                  v118 = "path";
                  switch(v187->mode)
                  {
                    case 0:
                      break;
                    case 1:
                      v118 = "resolver";
                      break;
                    case 2:
                      v118 = nw_endpoint_flow_mode_string(v116[31]);
                      break;
                    case 3:
                      v118 = "proxy";
                      break;
                    case 4:
                      v118 = "fallback";
                      break;
                    case 5:
                      v118 = "transform";
                      break;
                    default:
                      v118 = "unknown-mode";
                      break;
                  }

                  v127 = v117;
                  os_unfair_lock_lock((os_unfair_lock_t)v127 + 28);
                  v128 = v127[8];
                  os_unfair_lock_unlock((os_unfair_lock_t)v127 + 28);

                  *(_DWORD *)buf = 136448258;
                  v202 = "-[NWConcrete_nw_endpoint_flow updatePathWithHandler:]";
                  v203 = 2082;
                  v204 = id_str;
                  v205 = 2082;
                  v206 = v182;
                  v207 = 2082;
                  v208 = (void *)v179;
                  v209 = 2082;
                  v210 = v39;
                  v211 = 2082;
                  v212 = v118;
                  v213 = 2114;
                  v214 = v128;
                  v215 = 1024;
                  v216 = v24;
                  v217 = 1024;
                  v218 = v26;
                  _os_log_impl( &dword_181A5C000,  v29,  OS_LOG_TYPE_DEFAULT,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] filter state change d (%X --> %X), drop flow",  buf,  0x54u);
                }
              }

              goto LABEL_171;
            }
          }
        }
      }
    }

    if ((*((_BYTE *)v189 + 33) & 4) != 0)
    {
      os_unfair_lock_lock(v25);
      objc_storeStrong((id *)v189 + 1, *((id *)v189 + 2));
      os_unfair_lock_unlock(v25);
      v40 = v187;
      nw_endpoint_flow_connected_path_change(v187);
    }

    else
    {
      v40 = v187;
      if ((*((_BYTE *)v189 + 34) & 0x40) == 0)
      {
        os_log_type_t v41 = v187;
        BOOL v42 = *((_BYTE *)v41 + 268);

        if ((v42 & 8) != 0)
        {
          if (nw_endpoint_handler_get_minimize_logging(v41))
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            v45 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
            {
              v151 = nw_endpoint_handler_get_id_string(v41);
              v152 = nw_endpoint_handler_dry_run_string(v41);
              v153 = nw_endpoint_handler_copy_endpoint(v41);
              v154 = nw_endpoint_get_logging_description(v153);
              v155 = nw_endpoint_handler_state_string(v41);
              v156 = nw_endpoint_handler_mode_string(v41);
              v157 = nw_endpoint_handler_copy_current_path(v41);
              *(_DWORD *)buf = 136447746;
              v202 = "-[NWConcrete_nw_endpoint_flow updatePathWithHandler:]";
              v203 = 2082;
              v204 = (char *)v151;
              v205 = 2082;
              v206 = v152;
              v207 = 2082;
              v208 = (void *)v154;
              v209 = 2082;
              v210 = v155;
              v211 = 2082;
              v212 = v156;
              v213 = 2114;
              v214 = v157;
              _os_log_impl( &dword_181A5C000,  v45,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] better path detected du ring establishment, will try to reset",  buf,  0x48u);
            }
          }

          else
          {
            char v43 = v41;
            dispatch_workloop_t v44 = *((_BYTE *)v41 + 268);

            if ((v44 & 0x20) != 0)
            {
LABEL_163:
              v123 = v41;
              v124 = v123[5];

              v190[0] = MEMORY[0x1895F87A8];
              v190[1] = 3221225472LL;
              v190[2] = __53__NWConcrete_nw_endpoint_flow_updatePathWithHandler___block_invoke_5;
              v190[3] = &unk_189BC9238;
              v191 = v123;
              v192 = v189;
              nw_queue_context_async(v124, v190);

              v125 = (id *)&v191;
              v126 = v192;
LABEL_172:

              goto LABEL_173;
            }

            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            v45 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
            {
              os_log_type_t v46 = v43;

              os_log_type_t v47 = v46;
              v48 = *((_BYTE *)v41 + 268);

              if ((v48 & 1) != 0) {
                id v49 = "dry-run ";
              }
              else {
                id v49 = "";
              }
              v50 = nw_endpoint_handler_copy_endpoint(v47);
              v183 = nw_endpoint_get_logging_description(v50);
              v51 = v46 + 168;
              os_log_type_t v52 = v47;
              v53 = v52;
              BOOL v54 = v52[30];
              else {
                uint64_t v55 = off_189BBBBF0[v54];
              }

              __int16 v113 = v53;
              v114 = v113;
              uint64_t v115 = "path";
              switch(v187->mode)
              {
                case 0:
                  break;
                case 1:
                  uint64_t v115 = "resolver";
                  break;
                case 2:
                  uint64_t v115 = nw_endpoint_flow_mode_string(v113[31]);
                  break;
                case 3:
                  uint64_t v115 = "proxy";
                  break;
                case 4:
                  uint64_t v115 = "fallback";
                  break;
                case 5:
                  uint64_t v115 = "transform";
                  break;
                default:
                  uint64_t v115 = "unknown-mode";
                  break;
              }

              v121 = v114;
              os_unfair_lock_lock((os_unfair_lock_t)v121 + 28);
              v122 = v121[8];
              os_unfair_lock_unlock((os_unfair_lock_t)v121 + 28);

              *(_DWORD *)buf = 136447746;
              v202 = "-[NWConcrete_nw_endpoint_flow updatePathWithHandler:]";
              v203 = 2082;
              v204 = v51;
              v205 = 2082;
              v206 = v49;
              v207 = 2082;
              v208 = (void *)v183;
              v209 = 2082;
              v210 = v55;
              v211 = 2082;
              v212 = v115;
              v213 = 2114;
              v214 = v122;
              _os_log_impl( &dword_181A5C000,  v45,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] better path detected du ring establishment, will try to reset",  buf,  0x48u);
            }
          }

          goto LABEL_163;
        }
      }
    }

    v56 = v40;
    BOOL v57 = *((_BYTE *)v56 + 268);

    if ((v57 & 0x20) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v58 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
      {
        v59 = v56;

        os_log_type_t v60 = v59;
        BOOL v61 = *((_BYTE *)v56 + 268);

        if ((v61 & 1) != 0) {
          v62 = "dry-run ";
        }
        else {
          v62 = "";
        }
        os_log_type_t v63 = nw_endpoint_handler_copy_endpoint(v60);
        os_log_type_t v64 = nw_endpoint_get_logging_description(v63);
        v180 = v59 + 168;
        os_log_type_t v65 = v60;
        BOOL v66 = v65;
        os_log_type_t v67 = v65[30];
        else {
          v68 = off_189BBBBF0[v67];
        }
        *(void *)v177 = v68;

        v69 = v66;
        v70 = v69;
        os_log_type_t v71 = "path";
        switch(v187->mode)
        {
          case 0:
            break;
          case 1:
            os_log_type_t v71 = "resolver";
            break;
          case 2:
            os_log_type_t v71 = nw_endpoint_flow_mode_string(v69[31]);
            break;
          case 3:
            os_log_type_t v71 = "proxy";
            break;
          case 4:
            os_log_type_t v71 = "fallback";
            break;
          case 5:
            os_log_type_t v71 = "transform";
            break;
          default:
            os_log_type_t v71 = "unknown-mode";
            break;
        }

        char v75 = v70;
        os_unfair_lock_lock((os_unfair_lock_t)v75 + 28);
        __uint64_t v76 = v75[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v75 + 28);

        *(_DWORD *)buf = 136447746;
        v202 = "-[NWConcrete_nw_endpoint_flow updatePathWithHandler:]";
        v203 = 2082;
        v204 = v180;
        v205 = 2082;
        v206 = v62;
        v207 = 2082;
        v208 = (void *)v64;
        v209 = 2082;
        v210 = *(const char **)v177;
        v211 = 2082;
        v212 = v71;
        v213 = 2114;
        v214 = v76;
        _os_log_impl( &dword_181A5C000,  v58,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ",  buf,  0x48u);
      }
    }

    v77 = v56;
    unint64_t v78 = (*((_BYTE *)v56 + 268) & 1) == 0;

    if (v78)
    {
      char v79 = v77;
      state = v79->state;

      if (state == 5) {
        goto LABEL_135;
      }
      output_handler = v181->shared_protocol.protocol.output_handler;
      v82 = *v23;
      os_log_type_t v83 = v82;
      if (!output_handler) {
        goto LABEL_134;
      }
      callbacks = output_handler->callbacks;
      if (!callbacks) {
        goto LABEL_134;
      }
      if (callbacks->updated_path) {
        v85 = v82 == 0LL;
      }
      else {
        v85 = 1;
      }
      v86 = !v85;

      if (!v86)
      {
LABEL_135:
        if ((*((_BYTE *)v181 + 33) & 0x40) != 0) {
          nw_endpoint_flow_setup_channel(v79);
        }
        goto LABEL_173;
      }

      os_log_type_t v87 = *v23;
      os_log_type_t v83 = v87;
      handle = output_handler->handle;
      if (handle == &nw_protocol_ref_counted_handle)
      {
        v107 = output_handler[1].callbacks;
        if (v107) {
          output_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&v107->add_input_handler + 1);
        }
        os_log_type_t v89 = -1;
      }

      else
      {
        os_log_type_t v89 = 0;
      }

      *(void *)os_log_type_t type = output_handler;
      v200 = v89;
      v108 = v181->shared_protocol.protocol.handle;
      if (v108 == &nw_protocol_ref_counted_handle)
      {
        __uint64_t v110 = (char *)v181->shared_protocol.listen_protocol.handle;
        if (v110) {
          v181->shared_protocol.listen_protocol.handle = v110 + 1;
        }
        __int16 v109 = -1;
      }

      else
      {
        __int16 v109 = 0;
      }

      p_shared_protocol = &v181->shared_protocol;
      v198 = v109;
      if (v87)
      {
        __int16 v111 = output_handler->callbacks;
        if (v111)
        {
          updated_path = (void (*)(nw_protocol *, nw_flow_protocol *, id))v111->updated_path;
          if (updated_path)
          {
            updated_path(output_handler, &v181->shared_protocol, v87);
LABEL_130:
            if (v108 == &nw_protocol_ref_counted_handle) {
              nw::release_if_needed<nw_protocol *>((uint64_t *)&p_shared_protocol);
            }
            if (handle == &nw_protocol_ref_counted_handle) {
              nw::release_if_needed<nw_protocol *>((uint64_t *)type);
            }
LABEL_134:

            goto LABEL_135;
          }
        }

        __nwlog_obj();
        v145 = (void *)objc_claimAutoreleasedReturnValue();
        name = output_handler->identifier->name;
        *(_DWORD *)buf = 136446722;
        v202 = "__nw_protocol_updated_path";
        if (!name) {
          name = "invalid";
        }
        v203 = 2082;
        v204 = (char *)name;
        v205 = 2048;
        v206 = (const char *)output_handler;
        v147 = (char *)_os_log_send_and_compose_impl();

        v196 = OS_LOG_TYPE_ERROR;
        v195 = 0;
        if (v196 == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v148 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v149 = v196;
          if (os_log_type_enabled(v148, v196))
          {
            v150 = output_handler->identifier->name;
            if (!v150) {
              v150 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            v202 = "__nw_protocol_updated_path";
            v203 = 2082;
            v204 = (char *)v150;
            v205 = 2048;
            v206 = (const char *)output_handler;
            _os_log_impl( &dword_181A5C000,  v148,  v149,  "%{public}s protocol %{public}s (%p) has invalid updated_path callback",  buf,  0x20u);
          }
        }

        else
        {
          if (v195)
          {
            v160 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v161 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v178 = v196;
            v162 = os_log_type_enabled(v161, v196);
            if (v160)
            {
              if (v162)
              {
                v163 = output_handler->identifier->name;
                if (!v163) {
                  v163 = "invalid";
                }
                *(_DWORD *)buf = 136446978;
                v202 = "__nw_protocol_updated_path";
                v203 = 2082;
                v204 = (char *)v163;
                v205 = 2048;
                v206 = (const char *)output_handler;
                v207 = 2082;
                v208 = v160;
                _os_log_impl( &dword_181A5C000,  v161,  v178,  "%{public}s protocol %{public}s (%p) has invalid updated_path callback, dumping backtrace:%{public}s",  buf,  0x2Au);
              }

              free(v160);
            }

            else
            {
              if (v162)
              {
                v175 = output_handler->identifier->name;
                if (!v175) {
                  v175 = "invalid";
                }
                *(_DWORD *)buf = 136446722;
                v202 = "__nw_protocol_updated_path";
                v203 = 2082;
                v204 = (char *)v175;
                v205 = 2048;
                v206 = (const char *)output_handler;
                _os_log_impl( &dword_181A5C000,  v161,  v178,  "%{public}s protocol %{public}s (%p) has invalid updated_path callback, no backtrace",  buf,  0x20u);
              }
            }

      os_log_type_t v100 = v88;
      goto LABEL_197;
    }

    nw_frame_reset( v42,  object_address + data_offset,  data_limit,  (uint64_t)nw_channel_finalize_output_frame,  (uint64_t)handle);
    os_packet_set_flow_uuid();
    os_log_type_t v11 = v52;
    if ((*(_WORD *)(v42 + 204) & 4) != 0)
    {
      *(void *)(v42 + 208) = packet;
      *(void *)(v42 + 216) = v50;
      *(void *)(v42 + 224) = v46;
      *(_BYTE *)(v42 + 232) = *(_BYTE *)(v42 + 232) & 0xFE | ((*v52 & 0x400) != 0);
    }

    BOOL v57 = *(void *)(v42 + 16);
    v58 = *(void **)(v42 + 24);
    v56 = (void *)(v42 + 16);
    if (*(_OWORD *)(v42 + 16) == 0LL)
    {
      v58 = 0LL;
      v59 = 0LL;
    }

    else
    {
      v59 = *(void *)(v42 + 16);
    }

    if (v57)
    {
      *(void *)(v57 + 24) = v58;
      v58 = *(void **)(v42 + 24);
    }

    else
    {
      *((void *)handle + 37) = v58;
    }

    void *v58 = v57;
    void *v56 = 0LL;
    *(void *)(v42 + 24) = 0LL;
    os_log_type_t v60 = (uint64_t *)*((void *)handle + 39);
    *(void *)(v42 + 24) = v60;
    *os_log_type_t v60 = v42;
    *((void *)handle + 39) = v56;
    ++*((_DWORD *)handle + 105);
    *(void *)(v42 + 32) = 0LL;
    tqh_last = a6->tqh_last;
    *(void *)(v42 + 40) = tqh_last;
    *tqh_last = (nw_frame *)v42;
    a6->tqh_last = (nw_frame **)(v42 + 32);
    dispatch_workloop_t v44 = v104 + 1;
    next_slot = os_channel_get_next_slot();
    if (next_slot)
    {
      v45 = v46;
      BOOL v42 = v59;
    }

    goto LABEL_130;
  }

  __nwlog_obj();
  *(_DWORD *)os_log_type_t type = 136446210;
  __int16 v109 = "nw_channel_get_output_frames";
  os_log_type_t v87 = (char *)_os_log_send_and_compose_impl();
  v106 = OS_LOG_TYPE_ERROR;
  char v105 = 0;
  if (v106 != OS_LOG_TYPE_FAULT)
  {
    if (v105)
    {
      v95 = (char *)__nw_create_backtrace_string();
      v88 = (os_log_s *)__nwlog_obj();
      os_log_type_t v89 = v106;
      v96 = os_log_type_enabled(v88, v106);
      if (v95)
      {
        if (v96)
        {
          *(_DWORD *)os_log_type_t type = 136446466;
          __int16 v109 = "nw_channel_get_output_frames";
          __uint64_t v110 = 2082;
          v111[0] = v95;
          _os_log_impl( &dword_181A5C000,  v88,  v89,  "%{public}s failed to get buflet from packet, dumping backtrace:%{public}s",  (uint8_t *)type,  0x16u);
        }

        free(v95);
        goto LABEL_198;
      }

      if (!v96) {
        goto LABEL_198;
      }
      *(_DWORD *)os_log_type_t type = 136446210;
      __int16 v109 = "nw_channel_get_output_frames";
      BOOL v90 = "%{public}s failed to get buflet from packet, no backtrace";
    }

    else
    {
      v88 = (os_log_s *)__nwlog_obj();
      os_log_type_t v89 = v106;
      if (!os_log_type_enabled(v88, v106)) {
        goto LABEL_198;
      }
      *(_DWORD *)os_log_type_t type = 136446210;
      __int16 v109 = "nw_channel_get_output_frames";
      BOOL v90 = "%{public}s failed to get buflet from packet, backtrace limit exceeded";
    }

    goto LABEL_196;
  }

  v88 = (os_log_s *)__nwlog_obj();
  os_log_type_t v89 = v106;
  if (os_log_type_enabled(v88, v106))
  {
    *(_DWORD *)os_log_type_t type = 136446210;
    __int16 v109 = "nw_channel_get_output_frames";
    BOOL v90 = "%{public}s failed to get buflet from packet";
    goto LABEL_196;
  }

    __uint64_t v110 = *(void *)(a1 + 48);
    if (v110)
    {
      uint64_t result = 0LL;
      ++*(void *)(v110 + 72);
      return result;
    }

    return 0LL;
  }

  if (v15->i32[3] == *(_DWORD *)(a1 + 60))
  {
    id v17 = v15[1].i32[0];
    if (v17 == *(_DWORD *)(a1 + 56)
      || v17 == -1
      || (v15[1].i32[0] & 0xF0) == 0xE0
      || (id v18 = *(_DWORD *)(a1 + 128)) != 0 && v17 == v18
      || v18 && (char v19 = *(_DWORD *)(a1 + 124)) != 0 && v17 == (v19 & v18))
    {
      char v20 = bswap32(v15->u16[1]) >> 16;
      os_log_type_t v21 = v14 - v20;
      if (v14 < v20)
      {
        if ((*(_BYTE *)(a1 + 136) & 1) == 0)
        {
          v107 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136447490;
            *(void *)&uint8_t buf[4] = "nw_protocol_ipv4_process_input_frame";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = a1 + 137;
            *(_WORD *)&buf[22] = 2080;
            v149 = " ";
            v150 = 2048;
            v151 = a1;
            v152 = 1024;
            v153 = v20;
            v154 = 1024;
            *(_DWORD *)v155 = v14;
            _os_log_impl( &dword_181A5C000,  v107,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s%p Received IPv4 packet with incorrect length, expected %u received %u",  buf,  0x36u);
          }
        }

        v108 = *(void *)(a1 + 48);
        if (v108)
        {
          uint64_t result = 0LL;
          ++*(void *)(v108 + 64);
          return result;
        }

        return 0LL;
      }

      if (v14 != v20 && (*(_BYTE *)(a1 + 136) & 1) == 0)
      {
        if (gLogDatapath)
        {
          loga = (os_log_s *)__nwlog_obj();
          __int16 v109 = os_log_type_enabled(loga, OS_LOG_TYPE_DEBUG);
          os_log_type_t v21 = v14 - v20;
          if (v109)
          {
            *(_DWORD *)buf = 136447490;
            *(void *)&uint8_t buf[4] = "nw_protocol_ipv4_process_input_frame";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = a1 + 137;
            *(_WORD *)&buf[22] = 2080;
            v149 = " ";
            v150 = 2048;
            v151 = a1;
            v152 = 1024;
            v153 = v20;
            v154 = 1024;
            *(_DWORD *)v155 = v14;
            _os_log_impl( &dword_181A5C000,  loga,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s%p Received length mismatch with IP total length %u != %u",  buf,  0x36u);
            os_log_type_t v21 = v14 - v20;
          }
        }
      }

      if (v16 <= v20)
      {
        if ((v15->i16[3] & 0xFF3F) != 0)
        {
          if ((*(_WORD *)(a2 + 204) & 0x80) == 0)
          {
            *a6 += nw_protocol_ipv4_process_reassembly(a1, v15->u16[2], a4, 0, 0LL);
            if ((*(_WORD *)(a2 + 204) & 0x100) == 0
              || !g_channel_check_validity
              || (g_channel_check_validity(a2, *(void *)(a2 + 88)) & 1) != 0)
            {
              v22 = (bswap32(v15->u16[3]) >> 13) & 0x7FFF8;
              if ((*(_BYTE *)(a1 + 136) & 1) == 0)
              {
                if (gLogDatapath)
                {
                  v121 = (os_log_s *)__nwlog_obj();
                  if (os_log_type_enabled(v121, OS_LOG_TYPE_DEBUG))
                  {
                    v122 = v15->u16[2];
                    *(_DWORD *)buf = 136447490;
                    *(void *)&uint8_t buf[4] = "nw_protocol_ipv4_process_input_frame";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = a1 + 137;
                    *(_WORD *)&buf[22] = 2080;
                    v149 = " ";
                    v150 = 2048;
                    v151 = a1;
                    v152 = 1024;
                    v153 = v122;
                    v154 = 1024;
                    *(_DWORD *)v155 = (unsigned __int16)v22;
                    _os_log_impl( &dword_181A5C000,  v121,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s%p Got fragment for IP ID %u at offset %u",  buf,  0x36u);
                  }
                }
              }

              uint64_t v23 = *(void *)(a2 + 32);
              __int16 v24 = *(void **)(a2 + 40);
              v25 = (void *)(a2 + 32);
              if (v23)
              {
                *(void *)(v23 + 40) = v24;
                __int16 v24 = *(void **)(a2 + 40);
              }

              else
              {
                *(void *)(a3 + 8) = v24;
              }

              *__int16 v24 = v23;
              os_log_s *v25 = 0LL;
              *(void *)(a2 + 40) = 0LL;
              v45 = v15->u16[3];
              if ((v45 & 0xFFFFFF1F) != 0)
              {
                if ((v45 & 0x20) != 0)
                {
                  *(void *)buf = 0LL;
                  *(void *)&buf[8] = buf;
                  *(void *)&buf[16] = 0x2000000000LL;
                  LOBYTE(v149) = 0;
                  v140[0] = MEMORY[0x1895F87A8];
                  v140[1] = 0x40000000LL;
                  v141 = ___ZL36nw_protocol_ipv4_process_input_frameP16nw_protocol_ipv4P8nw_frameP16nw_frame_array_sS4_PjS5__block_invoke;
                  v142 = &unk_189BC8920;
                  v146 = v22;
                  v144 = a1;
                  v145 = a2;
                  v143 = buf;
                  v51 = *(void *)(a1 + 64);
                  do
                  {
                    if (!v51) {
                      break;
                    }
                    os_log_type_t v52 = *(void *)(v51 + 32);
                    v53 = ((uint64_t (*)(void *))v141)(v140);
                    v51 = v52;
                  }

                  while ((v53 & 1) != 0);
                  if (!*(_BYTE *)(*(void *)&buf[8] + 24LL))
                  {
                    *(void *)(a2 + 32) = 0LL;
                    BOOL v54 = *(uint64_t **)(a1 + 72);
                    *(void *)(a2 + 40) = v54;
                    *BOOL v54 = a2;
                    *(void *)(a1 + 72) = v25;
                  }

                  _Block_object_dispose(buf, 8);
                }

                else
                {
                  os_log_type_t v46 = *(uint64_t **)(a1 + 72);
                  *(void *)(a2 + 40) = v46;
                  *os_log_type_t v46 = a2;
                  *(void *)(a1 + 72) = v25;
                }
              }

              else
              {
                v48 = *(void *)(a1 + 64);
                os_log_type_t v47 = (uint64_t *)(a1 + 64);
                *(void *)(a2 + 32) = v48;
                id v49 = (void *)(v48 + 40);
                if (v48) {
                  v50 = v49;
                }
                else {
                  v50 = v47 + 1;
                }
                char *v50 = v25;
                *os_log_type_t v47 = a2;
                *(void *)(a2 + 40) = v47;
              }

              --*a5;
              return 1LL;
            }

            if ((*(_BYTE *)(a1 + 136) & 1) != 0
              || (v93 = (os_log_s *)__nwlog_obj(), !os_log_type_enabled(v93, OS_LOG_TYPE_INFO)))
            {
LABEL_227:
              uint64_t result = 0LL;
              *(void *)(a1 + 48) = 0LL;
              return result;
            }

        goto LABEL_214;
      }

      if (!v130)
      {
        __nwlog_obj();
        v108 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v115 = v131;
        if (os_log_type_enabled(v108, v131))
        {
          v116 = default_input_handler->protocol.identifier->name;
          if (!v116) {
            v116 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "__nw_protocol_notify";
          v137 = 2082;
          v138 = (void *)v116;
          v139 = 2048;
          v140 = (const char *)default_input_handler;
          _os_log_impl( &dword_181A5C000,  v108,  v115,  "%{public}s protocol %{public}s (%p) has invalid notify callback, backtrace limit exceeded",  buf,  0x20u);
        }

        goto LABEL_196;
      }

      __int16 v111 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v112 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v125 = v131;
      __int16 v113 = os_log_type_enabled(v112, v131);
      if (v111)
      {
        if (v113)
        {
          v114 = default_input_handler->protocol.identifier->name;
          if (!v114) {
            v114 = "invalid";
          }
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "__nw_protocol_notify";
          v137 = 2082;
          v138 = (void *)v114;
          v139 = 2048;
          v140 = (const char *)default_input_handler;
          v141 = 2082;
          v142 = v111;
          _os_log_impl( &dword_181A5C000,  v112,  v125,  "%{public}s protocol %{public}s (%p) has invalid notify callback, dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(v111);
      }

      else
      {
        if (v113)
        {
          v117 = default_input_handler->protocol.identifier->name;
          if (!v117) {
            v117 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "__nw_protocol_notify";
          v137 = 2082;
          v138 = (void *)v117;
          v139 = 2048;
          v140 = (const char *)default_input_handler;
          _os_log_impl( &dword_181A5C000,  v112,  v125,  "%{public}s protocol %{public}s (%p) has invalid notify callback, no backtrace",  buf,  0x20u);
        }
      }
    }

          if (v50) {
            free(v50);
          }
          BOOL v33 = 0LL;
          dispatch_workloop_t v34 = *(void **)(v17 + 64);
          if ((v92 & 4) != 0) {
            goto LABEL_199;
          }
          goto LABEL_86;
        }

  if (v75) {
    free(v75);
  }
LABEL_40:

  if (v33[9])
  {
    v35 = *(char **)(*((void *)v6 + 3) + 32LL);
    id v36 = v33;
    v37 = v36;
    if (v35)
    {
      *(void *)os_log_type_t type = 0LL;
      v130 = type;
      v131 = 0x2020000000LL;
      v132 = 0LL;
      *(void *)buf = v27;
      *(void *)&buf[8] = 3221225472LL;
      *(void *)&buf[16] = ___ZL51nw_context_get_active_instance_count_for_hash_tableP21NWConcrete_nw_contextP13nw_hash_table_block_invoke;
      *(void *)&v135 = &unk_189BC8650;
      v136 = type;
      *((void *)&v135 + 1) = v36;
      nw_hash_table_apply(v35, (uint64_t)buf);
      v124 = *((void *)v130 + 3);

      _Block_object_dispose(type, 8);
      goto LABEL_43;
    }

    __nwlog_obj();
    unint64_t v78 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_context_get_active_instance_count_for_hash_table";
    v125 = (const char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v133 = 0;
    char v79 = (char *)v125;
    if (!__nwlog_fault(v125, type, &v133))
    {
LABEL_211:
      if (v79) {
        free(v79);
      }
      v124 = 0LL;
LABEL_43:

      v38 = *(char **)(*((void *)v6 + 3) + 40LL);
      os_log_type_t v39 = v37;
      v40 = v39;
      if (v38)
      {
        *(void *)os_log_type_t type = 0LL;
        v130 = type;
        v131 = 0x2020000000LL;
        v132 = 0LL;
        *(void *)buf = v27;
        *(void *)&buf[8] = 3221225472LL;
        *(void *)&buf[16] = ___ZL51nw_context_get_active_instance_count_for_hash_tableP21NWConcrete_nw_contextP13nw_hash_table_block_invoke;
        *(void *)&v135 = &unk_189BC8650;
        v136 = type;
        *((void *)&v135 + 1) = v39;
        nw_hash_table_apply(v38, (uint64_t)buf);
        os_log_type_t v41 = *((void *)v130 + 3);

        _Block_object_dispose(type, 8);
        goto LABEL_45;
      }

      __nwlog_obj();
      v82 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_context_get_active_instance_count_for_hash_table";
      v123 = (const char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v133 = 0;
      os_log_type_t v83 = (char *)v123;
      if (!__nwlog_fault(v123, type, &v133))
      {
LABEL_218:
        if (v83) {
          free(v83);
        }
        os_log_type_t v41 = 0LL;
LABEL_45:

        BOOL v42 = *(char **)(*((void *)v6 + 3) + 48LL);
        char v43 = v40;
        dispatch_workloop_t v44 = v43;
        if (v42)
        {
          *(void *)os_log_type_t type = 0LL;
          v130 = type;
          v131 = 0x2020000000LL;
          v132 = 0LL;
          *(void *)buf = v27;
          *(void *)&buf[8] = 3221225472LL;
          *(void *)&buf[16] = ___ZL51nw_context_get_active_instance_count_for_hash_tableP21NWConcrete_nw_contextP13nw_hash_table_block_invoke;
          *(void *)&v135 = &unk_189BC8650;
          v136 = type;
          *((void *)&v135 + 1) = v43;
          nw_hash_table_apply(v42, (uint64_t)buf);
          v45 = *((void *)v130 + 3);

          _Block_object_dispose(type, 8);
LABEL_47:

          os_log_type_t v46 = v41 + v124 + v45;
          if ((*((_BYTE *)v44 + 137) & 2) != 0 && !v46 || (*((_BYTE *)v44 + 137) & 2) == 0 && v46)
          {
            if (v44[8])
            {
              os_log_type_t v47 = _Block_copy(v33[9]);
              v48 = v44[8];
              block[0] = v27;
              block[1] = 3221225472LL;
              block[2] = ___ZL26nw_context_purge_endpointsP21NWConcrete_nw_contextb_block_invoke;
              block[3] = &unk_189BC71E8;
              block[4] = v47;
              v128 = v46 == 0;
              dispatch_async(v48, block);
            }

            else
            {
              (*((void (**)(const void *, BOOL))v33[9] + 2))(v33[9], v46 == 0);
            }
          }

          *((_BYTE *)v44 + 137) = *((_BYTE *)v44 + 137) & 0xFD | (2 * (v46 != 0));
          goto LABEL_55;
        }

        __nwlog_obj();
        v86 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_context_get_active_instance_count_for_hash_table";
        os_log_type_t v87 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        v133 = 0;
        if (__nwlog_fault(v87, type, &v133))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v88 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v89 = type[0];
            if (os_log_type_enabled(v88, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_context_get_active_instance_count_for_hash_table";
              _os_log_impl(&dword_181A5C000, v88, v89, "%{public}s called with null hash_table", buf, 0xCu);
            }
          }

          else if (v133)
          {
            __int16 v109 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v88 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v122 = type[0];
            __uint64_t v110 = os_log_type_enabled(v88, type[0]);
            if (v109)
            {
              if (v110)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_context_get_active_instance_count_for_hash_table";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v109;
                _os_log_impl( &dword_181A5C000,  v88,  v122,  "%{public}s called with null hash_table, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v109);
              goto LABEL_224;
            }

            if (v110)
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_context_get_active_instance_count_for_hash_table";
              _os_log_impl( &dword_181A5C000,  v88,  v122,  "%{public}s called with null hash_table, no backtrace",  buf,  0xCu);
            }
          }

          else
          {
            __nwlog_obj();
            v88 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v119 = type[0];
            if (os_log_type_enabled(v88, type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_context_get_active_instance_count_for_hash_table";
              _os_log_impl( &dword_181A5C000,  v88,  v119,  "%{public}s called with null hash_table, backtrace limit exceeded",  buf,  0xCu);
            }
          }
        }

      if (v161) {
        free(v161);
      }
      goto LABEL_13;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
    v81 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v165 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v81, type, &v165))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v82 = (os_log_s *)__nwlog_obj();
        os_log_type_t v83 = type[0];
        if (os_log_type_enabled(v82, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
          v84 = "%{public}s called with null other_protocol";
LABEL_214:
          v118 = v82;
LABEL_215:
          _os_log_impl(&dword_181A5C000, v118, v83, v84, buf, 0xCu);
        }
      }

      else if (v165)
      {
        os_log_type_t v97 = (char *)__nw_create_backtrace_string();
        BOOL v98 = (os_log_s *)__nwlog_obj();
        os_log_type_t v83 = type[0];
        v159 = v98;
        v99 = os_log_type_enabled(v98, type[0]);
        if (v97)
        {
          if (v99)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v97;
            _os_log_impl( &dword_181A5C000,  v159,  v83,  "%{public}s called with null other_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v97);
          goto LABEL_216;
        }

        if (v99)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
          v84 = "%{public}s called with null other_protocol, no backtrace";
          v118 = v159;
          goto LABEL_215;
        }
      }

      else
      {
        v82 = (os_log_s *)__nwlog_obj();
        os_log_type_t v83 = type[0];
        if (os_log_type_enabled(v82, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_connected";
          v84 = "%{public}s called with null other_protocol, backtrace limit exceeded";
          goto LABEL_214;
        }
      }
    }

      if (v80) {
        free(v80);
      }
      goto LABEL_59;
    }

    if (!nw_parameters_get_logging_disabled(*((void *)v3 + 7)))
    {
      if (__nwlog_connection_group_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
      }
      os_log_type_t v32 = (os_log_s *)(id)gconnection_groupLogObj;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        BOOL v33 = *((_DWORD *)v3 + 42);
        dispatch_workloop_t v34 = *((void *)v3 + 7);
        *(_DWORD *)handler = 136446722;
        *(void *)&handler[4] = "nw_connection_group_create_listener_from_connection_locked";
        *(_WORD *)&handler[12] = 1024;
        *(_DWORD *)&handler[14] = v33;
        *(_WORD *)&handler[18] = 2112;
        *(void *)&handler[20] = v34;
        _os_log_impl( &dword_181A5C000,  v32,  OS_LOG_TYPE_ERROR,  "%{public}s [G%u] failed to create listener with parameters %@",  handler,  0x1Cu);
      }
    }

    v35 = -[NWConcrete_nw_error initWithDomain:code:](objc_alloc(&OBJC_CLASS___NWConcrete_nw_error), 1, 22);
    nw_connection_group_set_state_locked(v3, 3, v35);
  }

              goto LABEL_197;
            }

            v58 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_protocol_transform);
            if (v58)
            {
              v59 = v58;
              *((_BYTE *)v59 + 8) |= 2u;

              nw_protocol_transform_append_protocol(v59, 3, v26);
              os_log_type_t v60 = v59;
              v60->fallback_mode = 2;

              nw_protocol_transform_add_match_url_scheme(v60, "https");
              nw_protocol_transform_add_match_url_scheme(v60, "wss");
              BOOL v61 = v60;
              *((_BYTE *)v59 + 8) |= 0x10u;

              nw_array_append(v57, v61);
              goto LABEL_88;
            }

            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v70 = (id)gLogObj;
            *(_DWORD *)buf = 136446210;
            v163 = "nw_parameters_create_secure_http_messaging";
            os_log_type_t v71 = (const char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            v160 = 0;
            v72 = v71;
            if (!__nwlog_fault(v71, &type, &v160))
            {
LABEL_186:
              if (v72)
              {
                v106 = (char *)v72;
LABEL_199:
                free(v106);
              }

        if ((*(_BYTE *)(v12 + 158) & 1) != 0) {
          goto LABEL_131;
        }
        goto LABEL_197;
      }

      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_recover_incomplete_header";
      v208 = (char *)_os_log_send_and_compose_impl();
      v237[0] = 16;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v208, v237, &type))
      {
        if (v237[0] == 17)
        {
          v209 = (os_log_s *)__nwlog_obj();
          v210 = v237[0];
          if (!os_log_type_enabled(v209, (os_log_type_t)v237[0])) {
            goto LABEL_447;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_recover_incomplete_header";
          v211 = "%{public}s called with null http1_stream";
LABEL_446:
          _os_log_impl(&dword_181A5C000, v209, v210, v211, buf, 0xCu);
          goto LABEL_447;
        }

        if (type == OS_LOG_TYPE_DEFAULT)
        {
          v209 = (os_log_s *)__nwlog_obj();
          v210 = v237[0];
          if (!os_log_type_enabled(v209, (os_log_type_t)v237[0])) {
            goto LABEL_447;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_recover_incomplete_header";
          v211 = "%{public}s called with null http1_stream, backtrace limit exceeded";
          goto LABEL_446;
        }

        v219 = (char *)__nw_create_backtrace_string();
        v209 = (os_log_s *)__nwlog_obj();
        v210 = v237[0];
        v220 = os_log_type_enabled(v209, (os_log_type_t)v237[0]);
        if (!v219)
        {
          if (!v220) {
            goto LABEL_447;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_recover_incomplete_header";
          v211 = "%{public}s called with null http1_stream, no backtrace";
          goto LABEL_446;
        }

        if (v220)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_recover_incomplete_header";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v219;
          _os_log_impl( &dword_181A5C000,  v209,  v210,  "%{public}s called with null http1_stream, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v219);
      }

      free(v137);
      if (!v77) {
        return 0LL;
      }
      goto LABEL_214;
    }

    unint64_t v78 = (os_log_s *)__nwlog_obj();
    char v79 = type[0];
    if (!os_log_type_enabled(v78, type[0])) {
      goto LABEL_213;
    }
    *(_DWORD *)buf = 136446210;
    v156 = "nw_mem_buffer_manager_initialize";
    v80 = "%{public}s called with null (obj_size > 0)";
LABEL_212:
    _os_log_impl(&dword_181A5C000, v78, v79, v80, buf, 0xCu);
    goto LABEL_213;
  }

  char v5 = a4;
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v156 = "nw_mem_buffer_manager_initialize";
    v77 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v153 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      unint64_t v78 = (os_log_s *)__nwlog_obj();
      char v79 = type[0];
      if (!os_log_type_enabled(v78, type[0])) {
        goto LABEL_213;
      }
      *(_DWORD *)buf = 136446210;
      v156 = "nw_mem_buffer_manager_initialize";
      v80 = "%{public}s called with null (obj_cnt > 0)";
      goto LABEL_212;
    }

    if (!v153)
    {
      unint64_t v78 = (os_log_s *)__nwlog_obj();
      char v79 = type[0];
      if (!os_log_type_enabled(v78, type[0])) {
        goto LABEL_213;
      }
      *(_DWORD *)buf = 136446210;
      v156 = "nw_mem_buffer_manager_initialize";
      v80 = "%{public}s called with null (obj_cnt > 0), backtrace limit exceeded";
      goto LABEL_212;
    }

    v137 = (char *)__nw_create_backtrace_string();
    unint64_t v78 = (os_log_s *)__nwlog_obj();
    char v79 = type[0];
    v140 = os_log_type_enabled(v78, type[0]);
    if (!v137)
    {
      if (!v140) {
        goto LABEL_213;
      }
      *(_DWORD *)buf = 136446210;
      v156 = "nw_mem_buffer_manager_initialize";
      v80 = "%{public}s called with null (obj_cnt > 0), no backtrace";
      goto LABEL_212;
    }

    if (v140)
    {
      *(_DWORD *)buf = 136446466;
      v156 = "nw_mem_buffer_manager_initialize";
      v157 = 2082;
      *(void *)v158 = v137;
      v139 = "%{public}s called with null (obj_cnt > 0), dumping backtrace:%{public}s";
      goto LABEL_195;
    }

    goto LABEL_196;
  }

  if (nw_mem_buffer_manager_initialize::onceToken != -1) {
    dispatch_once(&nw_mem_buffer_manager_initialize::onceToken, &__block_literal_global_63602);
  }
  char v8 = calloc(1uLL, 0xA0uLL);
  if (!v8)
  {
    v81 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v81, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    v156 = "strict_calloc";
    v157 = 2048;
    *(void *)v158 = 1LL;
    *(_WORD *)&v158[8] = 2048;
    *(void *)v159 = 160LL;
    v82 = (void *)_os_log_send_and_compose_impl();
    uint64_t result = __nwlog_abort((uint64_t)v82);
    if (result) {
      goto LABEL_216;
    }
    free(v82);
  }

  *((_OWORD *)v8 + 2) = xmmword_189BB9250;
  *((_OWORD *)v8 + 3) = unk_189BB9260;
  *(_OWORD *)char v8 = nw_mem_regions;
  *((_OWORD *)v8 + 1) = unk_189BB9240;
  *((void *)&v9 + 1) = 0LL;
  *((_OWORD *)v8 + 4) = xmmword_189BB9270;
  v8[5] = a3;
  v8[6] = v5;
  *((_DWORD *)v8 + 3) = 32 * (nw_mem_debug & 1);
  os_log_type_t v10 = nw_mem_buf_seg_size;
  v8[2] = nw_mem_buf_seg_size;
  os_log_type_t v11 = nw_mem_seg_min_buf_cnt;
  if (nw_mem_seg_min_buf_cnt < v5 && v10 / a3 < nw_mem_seg_min_buf_cnt)
  {
    os_log_type_t v10 = -(uint64_t)(-(nw_mem_seg_min_buf_cnt * a3) & 0xFFFFFFFFFFFFC000LL);
    v8[2] = v10;
    char v5 = v11 + v5 / v11 * v11;
  }

  if (!v10 || (v10 & 0x3FFF) != 0)
  {
    v125 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v125, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446466;
    v156 = "nw_mem_region_params_config";
    v157 = 2082;
    *(void *)v158 = "VERIFY seglim != 0 && (seglim % NW_MEM_PAGE_SIZE) == 0 failed";
    v126 = (void *)_os_log_send_and_compose_impl();
    uint64_t result = __nwlog_abort((uint64_t)v126);
    if (result) {
      goto LABEL_216;
    }
    free(v126);
  }

  if (gLogDatapath)
  {
    os_log_type_t v83 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
    {
      v84 = *v8;
      *(_DWORD *)buf = 136447234;
      v156 = "nw_mem_region_params_config";
      v157 = 2082;
      *(void *)v158 = v84;
      *(_WORD *)&v158[8] = 2048;
      *(void *)v159 = v10;
      *(_WORD *)&v159[8] = 2048;
      *(void *)&v159[10] = a3;
      *(_WORD *)v160 = 2048;
      *(void *)&v160[2] = v5;
      _os_log_impl( &dword_181A5C000,  v83,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s: seglim %zu objsize %zu objcnt %zu",  buf,  0x34u);
    }
  }

  v152 = a1;
  os_log_type_t v12 = -(uint64_t)(-a3 & 0xFFFFFFFFFFFFFF80LL);
  if (v10 > v12)
  {
    *(void *)&BOOL v9 = 136446978LL;
    do
    {
      if (!(v10 % v12)) {
        break;
      }
      if (gLogDatapath)
      {
        v148 = v9;
        log = (os_log_s *)__nwlog_obj();
        os_log_type_t v13 = os_log_type_enabled(log, OS_LOG_TYPE_DEBUG);
        BOOL v9 = v148;
        if (v13)
        {
          BOOL v14 = *v8;
          *(_DWORD *)buf = v148;
          v156 = "nw_mem_region_params_config";
          v157 = 2082;
          *(void *)v158 = v14;
          *(_WORD *)&v158[8] = 2048;
          *(void *)v159 = v12;
          *(_WORD *)&v159[8] = 2048;
          *(void *)&v159[10] = v12 + 128;
          _os_log_impl( &dword_181A5C000,  log,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s: objsize %zu -> %zu",  buf,  0x2Au);
          BOOL v9 = v148;
        }
      }

      v12 += 128LL;
    }

    while (v12 < v10);
  }

  if (v12 > v10)
  {
    *(void *)&BOOL v9 = 136446978LL;
    do
    {
      if (gLogDatapath)
      {
        v149 = v9;
        loga = (os_log_s *)__nwlog_obj();
        os_log_type_t v15 = os_log_type_enabled(loga, OS_LOG_TYPE_DEBUG);
        BOOL v9 = v149;
        if (v15)
        {
          int v16 = *v8;
          *(_DWORD *)buf = v149;
          v156 = "nw_mem_region_params_config";
          v157 = 2082;
          *(void *)v158 = v16;
          *(_WORD *)&v158[8] = 2048;
          *(void *)v159 = v10;
          *(_WORD *)&v159[8] = 2048;
          *(void *)&v159[10] = v10 + 0x4000;
          _os_log_impl( &dword_181A5C000,  loga,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s: seglim %zu -> %zu",  buf,  0x2Au);
          BOOL v9 = v149;
        }
      }

      v10 += 0x4000LL;
    }

    while (v12 > v10);
  }

  id v17 = -(uint64_t)(v5 * v12) & 0xFFFFFFFFFFFFC000LL;
  id v18 = -(uint64_t)v17;
  if (v10 <= -(uint64_t)v17)
  {
    if (v10 >= -(uint64_t)v17)
    {
      char v20 = -(uint64_t)v17;
    }

    else
    {
      v25 = v10 + (v10 >> 1);
      *(void *)&BOOL v9 = 136447746LL;
      do
      {
        if (v10 >= v18 || !(v18 % v10)) {
          break;
        }
        if (gLogDatapath)
        {
          v151 = v9;
          logc = (os_log_s *)__nwlog_obj();
          os_log_type_t v26 = os_log_type_enabled(logc, OS_LOG_TYPE_DEBUG);
          BOOL v9 = v151;
          if (v26)
          {
            id v27 = *v8;
            *(_DWORD *)buf = v151;
            v156 = "nw_mem_region_params_config";
            v157 = 2082;
            *(void *)v158 = v27;
            *(_WORD *)&v158[8] = 2048;
            *(void *)v159 = -(uint64_t)v17;
            *(_WORD *)&v159[8] = 2048;
            *(void *)&v159[10] = v12;
            *(_WORD *)v160 = 2048;
            *(void *)&v160[2] = v5;
            v161 = 2048;
            v162 = v10;
            v163 = 2048;
            v164 = v10 + 0x4000;
            _os_log_impl( &dword_181A5C000,  logc,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s: segsize %zu (%zu*%zu) seglim [+] %zu -> %zu",  buf,  0x48u);
            BOOL v9 = v151;
          }
        }

        v10 += 0x4000LL;
      }

      while (v10 < v25);
      if (v18 % v10) {
        char v20 = v10 - v17 - v18 % v10;
      }
      else {
        char v20 = -(uint64_t)v17;
      }
    }
  }

  else
  {
    if (v18 <= 0x4000) {
      char v19 = 0x4000LL;
    }
    else {
      char v19 = -(uint64_t)v17;
    }
    if (v10 <= v19)
    {
      char v20 = v10;
    }

    else
    {
      *(void *)&BOOL v9 = 136447746LL;
      char v20 = v10;
      os_log_type_t v21 = "%{public}s %{public}s: segsize %zu (%zu*%zu) seglim [-] %zu -> %zu";
      do
      {
        if (gLogDatapath)
        {
          v150 = v9;
          v22 = v21;
          logb = (os_log_s *)__nwlog_obj();
          uint64_t v23 = os_log_type_enabled(logb, OS_LOG_TYPE_DEBUG);
          os_log_type_t v21 = v22;
          BOOL v9 = v150;
          if (v23)
          {
            __int16 v24 = *v8;
            *(_DWORD *)buf = v150;
            v156 = "nw_mem_region_params_config";
            v157 = 2082;
            *(void *)v158 = v24;
            *(_WORD *)&v158[8] = 2048;
            *(void *)v159 = v18;
            *(_WORD *)&v159[8] = 2048;
            *(void *)&v159[10] = v12;
            *(_WORD *)v160 = 2048;
            *(void *)&v160[2] = v5;
            v161 = 2048;
            v162 = v20;
            v163 = 2048;
            v164 = -(uint64_t)((0x4000 - v20) & 0xFFFFFFFFFFFFC000LL);
            _os_log_impl(&dword_181A5C000, logb, OS_LOG_TYPE_DEBUG, v22, buf, 0x48u);
            os_log_type_t v21 = v22;
            BOOL v9 = v150;
          }
        }

        char v20 = -(uint64_t)((0x4000 - v20) & 0xFFFFFFFFFFFFC000LL);
        os_log_type_t v10 = v20;
      }

      while (v19 < v20);
    }
  }

  if (gLogDatapath)
  {
    v85 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
    {
      v86 = *v8;
      *(_DWORD *)buf = 136446978;
      v156 = "nw_mem_region_params_config";
      v157 = 2082;
      *(void *)v158 = v86;
      *(_WORD *)&v158[8] = 2048;
      *(void *)v159 = v20;
      *(_WORD *)&v159[8] = 2048;
      *(void *)&v159[10] = v10;
      _os_log_impl( &dword_181A5C000,  v85,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s: segsize %zu seglim %zu",  buf,  0x2Au);
    }
  }

  if ((*((_BYTE *)v8 + 12) & 0x10) != 0)
  {
    os_log_type_t v28 = 1LL;
  }

  else
  {
    if (v10 <= v20) {
      os_log_type_t v28 = v20 / v10;
    }
    else {
      os_log_type_t v28 = 1LL;
    }
    v20 /= v28;
  }

  if (gLogDatapath)
  {
    os_log_type_t v87 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG))
    {
      v88 = *v8;
      *(_DWORD *)buf = 136446978;
      v156 = "nw_mem_region_params_config";
      v157 = 2082;
      *(void *)v158 = v88;
      *(_WORD *)&v158[8] = 2048;
      *(void *)v159 = v28;
      *(_WORD *)&v159[8] = 2048;
      *(void *)&v159[10] = v20;
      _os_log_impl( &dword_181A5C000,  v87,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s: segcnt %zu segsize %zu",  buf,  0x2Au);
    }
  }

  v8[7] = v12;
  v8[8] = v20 * v28 / v12;
  v8[3] = v20;
  v8[4] = v28;
  if (gLogDatapath)
  {
    os_log_type_t v89 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
    {
      BOOL v90 = *v8;
      *(_DWORD *)buf = 136447490;
      v156 = "nw_mem_region_params_config";
      v157 = 2082;
      *(void *)v158 = v90;
      *(_WORD *)&v158[8] = 2048;
      *(void *)v159 = v12;
      *(_WORD *)&v159[8] = 2048;
      *(void *)&v159[10] = v20 * v28 / v12;
      *(_WORD *)v160 = 2048;
      *(void *)&v160[2] = v28;
      v161 = 2048;
      v162 = v20;
      _os_log_impl( &dword_181A5C000,  v89,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s: objsize %zu objcnt %zu segcnt %zu segsize %zu",  buf,  0x3Eu);
    }

    if (gLogDatapath)
    {
      os_log_type_t v91 = *((_DWORD *)v8 + 2);
      v92 = "";
      if (v91 == 1) {
        v92 = "REGIONS";
      }
      if (v91) {
        v93 = v92;
      }
      else {
        v93 = "BUF";
      }
      snprintf((char *)type, 0x20uLL, "REGION_%s:", v93);
      if (gLogDatapath)
      {
        v94 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
        {
          v96 = v8[5];
          v95 = v8[6];
          BOOL v98 = v8[7];
          os_log_type_t v97 = v8[8];
          *(_DWORD *)buf = 136447490;
          v156 = "nw_mem_region_params_config";
          v157 = 2080;
          *(void *)v158 = type;
          *(_WORD *)&v158[8] = 1024;
          *(_DWORD *)v159 = v95;
          *(_WORD *)&v159[4] = 1024;
          *(_DWORD *)&v159[6] = v96;
          *(_WORD *)&v159[10] = 1024;
          *(_DWORD *)&v159[12] = v97;
          *(_WORD *)&v159[16] = 1024;
          *(_DWORD *)v160 = v98;
          _os_log_impl( &dword_181A5C000,  v94,  OS_LOG_TYPE_DEBUG,  "%{public}s %-16s o:[%4u x %6u -> %4u x %6u]",  buf,  0x2Eu);
        }

        if (gLogDatapath)
        {
          v99 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
          {
            os_log_type_t v100 = v8[7];
            BOOL v101 = v8[8];
            os_log_type_t v102 = v8[5];
            os_log_type_t v103 = v8[6];
            *(_DWORD *)buf = 136447234;
            v156 = "nw_mem_buffer_manager_initialize";
            v157 = 2048;
            *(void *)v158 = v100;
            *(_WORD *)&v158[8] = 2048;
            *(void *)v159 = v102;
            *(_WORD *)&v159[8] = 2048;
            *(void *)&v159[10] = v101;
            *(_WORD *)v160 = 2048;
            *(void *)&v160[2] = v103;
            _os_log_impl( &dword_181A5C000,  v99,  OS_LOG_TYPE_DEBUG,  "%{public}s   obj size %6zu (was %6zu) cnt %6zu (was %6zu) for REGION_BUF",  buf,  0x34u);
          }
        }
      }
    }
  }

  if (v8[7])
  {
    os_log_type_t v29 = *((_DWORD *)v8 + 3);
    if ((v29 & 0x20) == 0) {
      goto LABEL_64;
    }
    goto LABEL_157;
  }

  __uint64_t v104 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v104, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v156 = "nw_mem_buffer_manager_initialize";
  v157 = 2082;
  *(void *)v158 = "VERIFY buffer_manager->nrp[NW_MEM_REGION_BUF].nrp_c_obj_size != 0 failed";
  char v105 = (void *)_os_log_send_and_compose_impl();
  uint64_t result = __nwlog_abort((uint64_t)v105);
  if (result) {
    goto LABEL_216;
  }
  free(v105);
  os_log_type_t v29 = *((_DWORD *)v8 + 3);
  if ((v29 & 0x20) != 0)
  {
LABEL_157:
    v106 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v106, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446466;
    v156 = "nw_mem_buffer_manager_initialize";
    v157 = 2082;
    *(void *)v158 = "VERIFY !(buffer_manager->nrp[NW_MEM_REGION_BUF].nrp_cflags & NW_MEM_REGION_CR_NOCACHE) failed";
    v107 = (void *)_os_log_send_and_compose_impl();
    uint64_t result = __nwlog_abort((uint64_t)v107);
    if (result) {
      goto LABEL_216;
    }
    free(v107);
    os_log_type_t v29 = *((_DWORD *)v8 + 3);
  }

        *(void *)(v4 + 48) = *(void *)(a1 + 96);
        *(void *)(v4 + 72) = *(void *)(a1 + 104);
        goto LABEL_197;
      }

      uint64_t v4 = (uint64_t)calloc(1uLL, 0xB8uLL);
      if (!v4)
      {
        __uint64_t v76 = (os_log_s *)__nwlog_obj();
        os_log_type_enabled(v76, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "strict_calloc";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = 1LL;
        *(_WORD *)&buf[22] = 2048;
        *(void *)&buf[24] = 184LL;
        v77 = (void *)_os_log_send_and_compose_impl();
        free(v77);
      }

      __uint64_t v110 = 0LL;
      v108 = 0u;
      __int16 v109 = 0u;
      v106 = 0u;
      v107 = 0u;
      __uint64_t v104 = 0u;
      char v105 = 0u;
      os_log_type_t v102 = 0u;
      os_log_type_t v103 = 0u;
      os_log_type_t v100 = 0u;
      BOOL v101 = 0u;
      BOOL v98 = 0u;
      v99 = 0u;
      v96 = 0u;
      os_log_type_t v97 = 0u;
      v94 = 0u;
      v95 = 0u;
      memset(v93, 0, sizeof(v93));
      memset(v92, 0, sizeof(v92));
      BOOL v90 = 0u;
      os_log_type_t v91 = 0u;
      memset(buf, 0, sizeof(buf));
      v84 = 408;
      if (!getsockopt(*(_DWORD *)(a1 + 268), 6, 512, buf, &v84))
      {
        *(void *)(v4 + 72) = *(void *)((char *)v92 + 12);
        *(_OWORD *)(v4 + 48) = *(_OWORD *)&v93[3];
        *(void *)(v4 + 64) = *(void *)&v93[7];
        *(void *)(v4 + 80) = *(void *)((char *)&v92[1] + 4);
        *(void *)(v4 + 8) = *(void *)&v93[1];
        *(void *)(v4 + 40) = *(void *)((char *)v92 + 4);
        char v43 = *(unsigned int *)&buf[20];
        v45 = *(unsigned int *)&buf[28];
        dispatch_workloop_t v44 = v90;
        *(void *)(v4 + 120) = *(unsigned int *)&buf[24];
        *(void *)(v4 + 128) = v44;
        *(void *)(v4 + 136) = v43;
        *(void *)(v4 + 144) = v45;
        v46.i64[0] = DWORD1(v90);
        v46.i64[1] = DWORD2(v90);
        *(int8x16_t *)(v4 + 152) = vextq_s8(v46, v46, 8uLL);
        *(_OWORD *)(v4 + 88) = v104;
        *(_OWORD *)(v4 + 104) = v105;
        goto LABEL_197;
      }

      os_log_type_t v29 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      os_log_type_t v30 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v86 = 136446722;
        *(void *)&v86[4] = "nw_socket_copy_info";
        os_log_type_t v87 = 2080;
        *(void *)v88 = a1 + 404;
        *(_WORD *)&v88[8] = 1024;
        *(_DWORD *)&v88[10] = v29;
        _os_log_impl( &dword_181A5C000,  v30,  OS_LOG_TYPE_ERROR,  "%{public}s %s getsockopt TCP_INFO failed %{darwin.errno}d",  v86,  0x1Cu);
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v31 = (os_log_s *)gLogObj;
      if (v29 == 102)
      {
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v86 = 136446466;
          *(void *)&v86[4] = "nw_socket_copy_info";
          os_log_type_t v87 = 1024;
          *(_DWORD *)v88 = 102;
          _os_log_impl( &dword_181A5C000,  v31,  OS_LOG_TYPE_ERROR,  "%{public}s getsockopt TCP_INFO failed %{darwin.errno}d",  v86,  0x12u);
        }

        goto LABEL_196;
      }

      *(_DWORD *)v86 = 136446466;
      *(void *)&v86[4] = "nw_socket_copy_info";
      os_log_type_t v87 = 1024;
      *(_DWORD *)v88 = v29;
      v38 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v82 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        v53 = (os_log_s *)__nwlog_obj();
        BOOL v54 = type;
        if (!os_log_type_enabled(v53, type)) {
          goto LABEL_194;
        }
        *(_DWORD *)v86 = 136446466;
        *(void *)&v86[4] = "nw_socket_copy_info";
        os_log_type_t v87 = 1024;
        *(_DWORD *)v88 = v29;
        uint64_t v55 = "%{public}s getsockopt TCP_INFO failed %{darwin.errno}d";
      }

      else if (v82)
      {
        BOOL v66 = (char *)__nw_create_backtrace_string();
        v53 = (os_log_s *)__nwlog_obj();
        BOOL v54 = type;
        os_log_type_t v67 = os_log_type_enabled(v53, type);
        if (v66)
        {
          if (v67)
          {
            *(_DWORD *)v86 = 136446722;
            *(void *)&v86[4] = "nw_socket_copy_info";
            os_log_type_t v87 = 1024;
            *(_DWORD *)v88 = v29;
            *(_WORD *)&v88[4] = 2082;
            *(void *)&v88[6] = v66;
            _os_log_impl( &dword_181A5C000,  v53,  v54,  "%{public}s getsockopt TCP_INFO failed %{darwin.errno}d, dumping backtrace:%{public}s",  v86,  0x1Cu);
          }

          free(v66);
          if (!v38) {
            goto LABEL_196;
          }
          goto LABEL_195;
        }

        if (!v67)
        {
LABEL_194:
          if (v38)
          {
LABEL_195:
            free(v38);
            goto LABEL_196;
          }

          goto LABEL_196;
        }

        *(_DWORD *)v86 = 136446466;
        *(void *)&v86[4] = "nw_socket_copy_info";
        os_log_type_t v87 = 1024;
        *(_DWORD *)v88 = v29;
        uint64_t v55 = "%{public}s getsockopt TCP_INFO failed %{darwin.errno}d, no backtrace";
      }

      else
      {
        v53 = (os_log_s *)__nwlog_obj();
        BOOL v54 = type;
        if (!os_log_type_enabled(v53, type)) {
          goto LABEL_194;
        }
        *(_DWORD *)v86 = 136446466;
        *(void *)&v86[4] = "nw_socket_copy_info";
        os_log_type_t v87 = 1024;
        *(_DWORD *)v88 = v29;
        uint64_t v55 = "%{public}s getsockopt TCP_INFO failed %{darwin.errno}d, backtrace limit exceeded";
      }

      _os_log_impl(&dword_181A5C000, v53, v54, v55, v86, 0x12u);
      goto LABEL_194;
    case 6:
      id v18 = *(void **)(a1 + 160);
      if (!v18) {
        return 0LL;
      }
      return os_retain(v18);
    default:
      if (a2 != 254)
      {
        if (a2 != 255) {
          return (void *)v4;
        }
        if (*(void *)(a1 + 152))
        {
          uint64_t v4 = nw_array_create();
          nw_array_append(v4, *(void **)(a1 + 152));
          return (void *)v4;
        }

        return 0LL;
      }

      if (*(_DWORD *)(a1 + 272) != 2) {
        return 0LL;
      }
      char v20 = (id)g_tcp_definition;
      os_log_type_t v21 = nw_protocol_establishment_report_create(v20, *(void *)(a1 + 136), *(void *)(a1 + 136));
      if (v20) {
        os_release(v20);
      }
      __uint64_t v110 = 0LL;
      v108 = 0u;
      __int16 v109 = 0u;
      v106 = 0u;
      v107 = 0u;
      __uint64_t v104 = 0u;
      char v105 = 0u;
      os_log_type_t v102 = 0u;
      os_log_type_t v103 = 0u;
      os_log_type_t v100 = 0u;
      BOOL v101 = 0u;
      BOOL v98 = 0u;
      v99 = 0u;
      v96 = 0u;
      os_log_type_t v97 = 0u;
      v94 = 0u;
      v95 = 0u;
      memset(v93, 0, sizeof(v93));
      memset(v92, 0, sizeof(v92));
      BOOL v90 = 0u;
      os_log_type_t v91 = 0u;
      memset(buf, 0, sizeof(buf));
      v85[0] = 408;
      if (!getsockopt(*(_DWORD *)(a1 + 268), 6, 512, buf, v85))
      {
        else {
          v35 = DWORD2(v103);
        }
        else {
          id v36 = HIDWORD(v103);
        }
        nw_protocol_establishment_report_set_client_accurate_ecn_state(v21, v35);
        nw_protocol_establishment_report_set_server_accurate_ecn_state(v21, v36);
LABEL_189:
        uint64_t v4 = nw_array_create();
        nw_array_append(v4, v21);
        if (v21) {
          os_release(v21);
        }
        return (void *)v4;
      }

      v22 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v23 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v86 = 136446722;
        *(void *)&v86[4] = "nw_socket_copy_info";
        os_log_type_t v87 = 2080;
        *(void *)v88 = a1 + 404;
        *(_WORD *)&v88[8] = 1024;
        *(_DWORD *)&v88[10] = v22;
        _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_ERROR,  "%{public}s %s getsockopt TCP_INFO failed %{darwin.errno}d",  v86,  0x1Cu);
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v24 = (os_log_s *)gLogObj;
      if (v22 == 102)
      {
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v86 = 136446466;
          *(void *)&v86[4] = "nw_socket_copy_info";
          os_log_type_t v87 = 1024;
          *(_DWORD *)v88 = 102;
          _os_log_impl( &dword_181A5C000,  v24,  OS_LOG_TYPE_ERROR,  "%{public}s getsockopt TCP_INFO failed %{darwin.errno}d",  v86,  0x12u);
        }

        goto LABEL_189;
      }

      *(_DWORD *)v86 = 136446466;
      *(void *)&v86[4] = "nw_socket_copy_info";
      os_log_type_t v87 = 1024;
      *(_DWORD *)v88 = v22;
      os_log_type_t v39 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(v84) = 16;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      if (v84 == 17)
      {
        v40 = (os_log_s *)__nwlog_obj();
        os_log_type_t v41 = v84;
        if (!os_log_type_enabled(v40, (os_log_type_t)v84)) {
          goto LABEL_187;
        }
        *(_DWORD *)v86 = 136446466;
        *(void *)&v86[4] = "nw_socket_copy_info";
        os_log_type_t v87 = 1024;
        *(_DWORD *)v88 = v22;
        BOOL v42 = "%{public}s getsockopt TCP_INFO failed %{darwin.errno}d";
      }

      else if (type)
      {
        os_log_type_t v60 = (char *)__nw_create_backtrace_string();
        v40 = (os_log_s *)__nwlog_obj();
        os_log_type_t v41 = v84;
        BOOL v61 = os_log_type_enabled(v40, (os_log_type_t)v84);
        if (v60)
        {
          if (v61)
          {
            *(_DWORD *)v86 = 136446722;
            *(void *)&v86[4] = "nw_socket_copy_info";
            os_log_type_t v87 = 1024;
            *(_DWORD *)v88 = v22;
            *(_WORD *)&v88[4] = 2082;
            *(void *)&v88[6] = v60;
            _os_log_impl( &dword_181A5C000,  v40,  v41,  "%{public}s getsockopt TCP_INFO failed %{darwin.errno}d, dumping backtrace:%{public}s",  v86,  0x1Cu);
          }

          free(v60);
          goto LABEL_187;
        }

        if (!v61)
        {
LABEL_187:
          if (v39) {
            free(v39);
          }
          goto LABEL_189;
        }

        *(_DWORD *)v86 = 136446466;
        *(void *)&v86[4] = "nw_socket_copy_info";
        os_log_type_t v87 = 1024;
        *(_DWORD *)v88 = v22;
        BOOL v42 = "%{public}s getsockopt TCP_INFO failed %{darwin.errno}d, no backtrace";
      }

      else
      {
        v40 = (os_log_s *)__nwlog_obj();
        os_log_type_t v41 = v84;
        if (!os_log_type_enabled(v40, (os_log_type_t)v84)) {
          goto LABEL_187;
        }
        *(_DWORD *)v86 = 136446466;
        *(void *)&v86[4] = "nw_socket_copy_info";
        os_log_type_t v87 = 1024;
        *(_DWORD *)v88 = v22;
        BOOL v42 = "%{public}s getsockopt TCP_INFO failed %{darwin.errno}d, backtrace limit exceeded";
      }

      _os_log_impl(&dword_181A5C000, v40, v41, v42, v86, 0x12u);
      goto LABEL_187;
  }

                              free(v79);
                              goto LABEL_197;
                            }

                            if (v92)
                            {
                              *(_DWORD *)buf = 136446978;
                              *(void *)&uint8_t buf[4] = "nw_path_message_request_in_process_flow_divert";
                              *(_WORD *)&buf[12] = 2048;
                              *(void *)&buf[14] = v76;
                              *(_WORD *)&buf[22] = 2048;
                              v153 = v63;
                              v154 = 2048;
                              *(void *)v155 = v13;
                              _os_log_impl( &dword_181A5C000,  v80,  v91,  "%{public}s TLV length (%zu) at offset %zu goes beyond total length (%zu), no backtrace",  buf,  0x2Au);
                            }
                          }

                          else
                          {
                            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                            networkd_settings_init();
                            v80 = (os_log_s *)(id)gLogObj;
                            v93 = type;
                            if (os_log_type_enabled(v80, type))
                            {
                              *(_DWORD *)buf = 136446978;
                              *(void *)&uint8_t buf[4] = "nw_path_message_request_in_process_flow_divert";
                              *(_WORD *)&buf[12] = 2048;
                              *(void *)&buf[14] = v76;
                              *(_WORD *)&buf[22] = 2048;
                              v153 = v63;
                              v154 = 2048;
                              *(void *)v155 = v13;
                              _os_log_impl( &dword_181A5C000,  v80,  v93,  "%{public}s TLV length (%zu) at offset %zu goes beyond total length (%zu), backtrace limit exceeded",  buf,  0x2Au);
                            }
                          }

LABEL_201:
    if (v85) {
      free(v85);
    }
LABEL_131:
    os_unfair_lock_unlock(v2 + 20);
LABEL_132:

    return;
  }

  char v5 = (void **)&v2[2];
  uint64_t v4 = *(dispatch_object_s **)&v2[2]._os_unfair_lock_opaque;
  if (v4) {
    goto LABEL_12;
  }
  if ((v2[34]._os_unfair_lock_opaque & 4) != 0)
  {
    dispatch_workloop_t inactive = dispatch_workloop_create_inactive("com.apple.network.connections");
    uint64_t v7 = *v5;
    _BYTE *v5 = inactive;
  }

  else
  {
    if ((v2[34]._os_unfair_lock_opaque & 1) != 0)
    {
      switch(v2[30]._os_unfair_lock_opaque)
      {
        case 1u:
        case 2u:
        case 3u:
          dispatch_workloop_t v34 = dispatch_workloop_create_inactive(*(const char **)&v2[4]._os_unfair_lock_opaque);
          v35 = *(void **)&v2[2]._os_unfair_lock_opaque;
          *(void *)&v2[2]._char os_unfair_lock_opaque = v34;

          dispatch_workloop_set_scheduler_priority();
          dispatch_workloop_set_cpupercent();
          uint64_t v4 = (dispatch_object_s *)*v5;
          if (!*v5) {
            goto LABEL_53;
          }
          goto LABEL_12;
        case 4u:
          *(void *)&v2[2]._char os_unfair_lock_opaque = 0LL;
          char v43 = os_unfair_lock_opaque | 8;
          LOBYTE(v2[34]._os_unfair_lock_opaque) = v43;
          if ((v43 & 8) == 0) {
            goto LABEL_54;
          }
          break;
        default:
          dispatch_workloop_t v44 = dispatch_workloop_create_inactive(*(const char **)&v2[4]._os_unfair_lock_opaque);
          v45 = *(void **)&v2[2]._os_unfair_lock_opaque;
          *(void *)&v2[2]._char os_unfair_lock_opaque = v44;

          goto LABEL_11;
      }

      goto LABEL_13;
    }

    if (nw_context_copy_implicit_context::onceToken != -1) {
      dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
    }
    objc_storeStrong((id *)&v2[2], *(id *)(nw_context_copy_implicit_context::implicit_context + 8));
  }

            free(v90);
            goto LABEL_210;
          }

          if (!v92) {
            goto LABEL_210;
          }
          *(_DWORD *)v122 = 136446210;
          *(void *)&v122[4] = "nw_http_redirect_copy_metadata";
          os_log_type_t v87 = "%{public}s called with null endpoint, no backtrace";
        }

        v96 = log;
        goto LABEL_209;
      }

      __nwlog_obj();
      *(_DWORD *)v122 = 136446210;
      *(void *)&v122[4] = "nw_http_redirect_process";
      v80 = (char *)_os_log_send_and_compose_impl();
      type[0] = OS_LOG_TYPE_ERROR;
      buf[0] = 0;
      if (__nwlog_fault(v80, type, buf))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          v81 = (os_log_s *)__nwlog_obj();
          v82 = type[0];
          if (!os_log_type_enabled(v81, type[0])) {
            goto LABEL_216;
          }
          *(_DWORD *)v122 = 136446210;
          *(void *)&v122[4] = "nw_http_redirect_process";
          os_log_type_t v83 = "%{public}s called with null request";
          goto LABEL_215;
        }

        if (!buf[0])
        {
          v81 = (os_log_s *)__nwlog_obj();
          v82 = type[0];
          if (!os_log_type_enabled(v81, type[0])) {
            goto LABEL_216;
          }
          *(_DWORD *)v122 = 136446210;
          *(void *)&v122[4] = "nw_http_redirect_process";
          os_log_type_t v83 = "%{public}s called with null request, backtrace limit exceeded";
          goto LABEL_215;
        }

        v88 = (char *)__nw_create_backtrace_string();
        v81 = (os_log_s *)__nwlog_obj();
        v82 = type[0];
        os_log_type_t v89 = os_log_type_enabled(v81, type[0]);
        if (v88)
        {
          if (v89)
          {
            *(_DWORD *)v122 = 136446466;
            *(void *)&v122[4] = "nw_http_redirect_process";
            *(_WORD *)&v122[12] = 2082;
            *(void *)&v122[14] = v88;
            _os_log_impl( &dword_181A5C000,  v81,  v82,  "%{public}s called with null request, dumping backtrace:%{public}s",  v122,  0x16u);
          }

          free(v88);
          goto LABEL_216;
        }

        if (v89)
        {
          *(_DWORD *)v122 = 136446210;
          *(void *)&v122[4] = "nw_http_redirect_process";
          os_log_type_t v83 = "%{public}s called with null request, no backtrace";
LABEL_215:
          _os_log_impl(&dword_181A5C000, v81, v82, v83, v122, 0xCu);
        }
      }

        if (v84) {
          free(v84);
        }
        BOOL v14 = 0LL;
LABEL_14:

        nw_listener_set_queue(v9, (dispatch_queue_t)v14);
        int v16 = (nw_listener *)*((void *)v3 + 11);
        id v17 = MEMORY[0x1895F87A8];
        *(void *)handler = MEMORY[0x1895F87A8];
        *(void *)&handler[8] = 3221225472LL;
        *(void *)&handler[16] = ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke;
        *(void *)&handler[24] = &unk_189BC9318;
        id v18 = v136;
        v150 = v18;
        nw_listener_set_state_changed_handler(v16, handler);
        char v19 = v18[8];
        if (!v19) {
          goto LABEL_39;
        }
        char v20 = v19;
        os_log_type_t v21 = v20[2];

        if (v21 == 1)
        {
          v22 = (void *)*((void *)v3 + 11);
          *(void *)buf = v17;
          *(void *)&buf[8] = 3221225472LL;
          *(void *)&buf[16] = ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_2;
          v147 = (char *)&unk_189BB73D8;
          uint64_t v23 = v18;
          v148 = v23;
          nw_listener_set_new_packet_handler(v22, buf);
          if (!v23[12])
          {
LABEL_23:

LABEL_58:
            *((_BYTE *)v18 + 190) |= 8u;
            nw_listener_start(*((nw_listener_t *)v3 + 11));

LABEL_59:
            goto LABEL_60;
          }

          listener = v23[12];
          v134 = v23;
          __int16 v24 = *((id *)v3 + 7);
          v133 = v24;
          if (v24)
          {
            v25 = v24;
            os_log_type_t v26 = *(id *)(v25[13] + 136LL);

            if (v26)
            {
              id v27 = nw_context_copy_workloop(v26);
              if (v27
                || (v28 = nw_context_copy_implicit_context(), id v27 = nw_context_copy_workloop(v28),
                                                              v28,
                                                              v27))
              {
LABEL_21:

LABEL_22:
                nw_listener_set_queue(listener, (dispatch_queue_t)v27);

                os_log_type_t v29 = v23[12];
                *(void *)os_log_type_t type = v17;
                *(void *)&type[8] = 3221225472LL;
                *(void *)&type[16] = ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_3;
                v144 = &unk_189BB7400;
                os_log_type_t v30 = v134;
                v145 = v30;
                nw_listener_set_new_connection_handler(v29, type);
                v31 = v23[12];
                *(void *)v137 = v17;
                v138 = 3221225472LL;
                v139 = ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_4;
                v140 = &unk_189BC9318;
                v141 = v30;
                nw_listener_set_state_changed_handler(v31, v137);
                nw_listener_start(v23[12]);

                goto LABEL_23;
              }

              __nwlog_obj();
              v114 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)os_log_type_t type = 136446210;
              *(void *)&type[4] = "nw_connection_group_copy_workloop";
              v131 = (char *)_os_log_send_and_compose_impl();

              v137[0] = OS_LOG_TYPE_ERROR;
              v142 = 0;
              if (__nwlog_fault(v131, v137, &v142))
              {
                if (v137[0] == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  uint64_t v112 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  uint64_t v115 = v137[0];
                  if (os_log_type_enabled(v112, v137[0]))
                  {
                    *(_DWORD *)os_log_type_t type = 136446210;
                    *(void *)&type[4] = "nw_connection_group_copy_workloop";
                    _os_log_impl(&dword_181A5C000, v112, v115, "%{public}s called with null workloop", type, 0xCu);
                  }

                goto LABEL_202;
              }

              if (!(_BYTE)v279)
              {
                __nwlog_obj();
                dispatch_workloop_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v102 = type[0];
                if (os_log_type_enabled(v44, (os_log_type_t)type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_handler";
                  _os_log_impl( &dword_181A5C000,  v44,  v102,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
                }

                goto LABEL_201;
              }

              BOOL v61 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              dispatch_workloop_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              v62 = type[0];
              os_log_type_t v63 = os_log_type_enabled(v44, (os_log_type_t)type[0]);
              if (!v61)
              {
                if (v63)
                {
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_handler";
                  _os_log_impl( &dword_181A5C000,  v44,  v62,  "%{public}s called with null protocol, no backtrace",  buf,  0xCu);
                }

                goto LABEL_201;
              }

              if (v63)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "__nw_protocol_get_output_handler";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v61;
                _os_log_impl( &dword_181A5C000,  v44,  v62,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v61);
            }

                  if (v152) {
                    free(v152);
                  }
                  goto LABEL_203;
                }

                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                v132 = (os_log_s *)(id)gconnectionLogObj;
                if (os_log_type_enabled(v132, OS_LOG_TYPE_DEBUG))
                {
                  v218 = nw_endpoint_handler_get_id_string(locka);
                  v219 = nw_endpoint_handler_dry_run_string(locka);
                  v220 = nw_endpoint_handler_copy_endpoint(locka);
                  v221 = nw_endpoint_get_logging_description(v220);
                  v222 = nw_endpoint_handler_state_string(locka);
                  v223 = nw_endpoint_handler_mode_string(locka);
                  v224 = nw_endpoint_handler_copy_current_path(locka);
                  *(void *)&uint8_t buf[4] = "nw_endpoint_fallback_start_timer";
                  v225 = v235[3];
                  *(_DWORD *)buf = 136448002;
                  *(void *)&buf[14] = v218;
                  *(_WORD *)&buf[12] = 2082;
                  *(_WORD *)&buf[22] = 2082;
                  *(void *)&buf[24] = v219;
                  *(_WORD *)&buf[32] = 2082;
                  *(void *)&buf[34] = v221;
                  *(_WORD *)&buf[42] = 2082;
                  *(void *)&buf[44] = v222;
                  *(_WORD *)&buf[52] = 2082;
                  *(void *)&buf[54] = v223;
                  *(_WORD *)&buf[62] = 2114;
                  *(void *)v277 = v224;
                  *(_WORD *)&v277[8] = 2048;
                  *(void *)&v277[10] = v225 / 0xF4240;
                  _os_log_impl( &dword_181A5C000,  v132,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] starting fallback e ndpoint in %llums",  buf,  0x52u);

                  __int16 v109 = v233;
                }

                else
                {
                  __int16 v109 = v233;
                }
              }

              else
              {
                if ((logging_disabled & 1) != 0) {
                  goto LABEL_156;
                }
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                v132 = (os_log_s *)(id)gconnectionLogObj;
                if (os_log_type_enabled(v132, OS_LOG_TYPE_INFO))
                {
                  v133 = nw_endpoint_handler_get_id_string(locka);
                  v134 = nw_endpoint_handler_dry_run_string(locka);
                  v135 = nw_endpoint_handler_copy_endpoint(locka);
                  v136 = nw_endpoint_get_logging_description(v135);
                  v137 = nw_endpoint_handler_state_string(locka);
                  v138 = nw_endpoint_handler_mode_string(locka);
                  v139 = nw_endpoint_handler_copy_current_path(locka);
                  *(void *)&uint8_t buf[4] = "nw_endpoint_fallback_start_timer";
                  v140 = v235[3];
                  *(_DWORD *)buf = 136448002;
                  *(void *)&buf[14] = v133;
                  *(_WORD *)&buf[12] = 2082;
                  *(_WORD *)&buf[22] = 2082;
                  *(void *)&buf[24] = v134;
                  *(_WORD *)&buf[32] = 2082;
                  *(void *)&buf[34] = v136;
                  *(_WORD *)&buf[42] = 2082;
                  *(void *)&buf[44] = v137;
                  *(_WORD *)&buf[52] = 2082;
                  *(void *)&buf[54] = v138;
                  *(_WORD *)&buf[62] = 2114;
                  *(void *)v277 = v139;
                  *(_WORD *)&v277[8] = 2048;
                  *(void *)&v277[10] = v140 / 0xF4240;
                  _os_log_impl( &dword_181A5C000,  v132,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] starting fallback e ndpoint in %llums",  buf,  0x52u);

                  __int16 v109 = v233;
                }
              }

              v129 = v235;
              goto LABEL_156;
            }

            v114 = &nw_default_strong_fallback_delay_ms;
            uint64_t v115 = &nw_setting_tcpconn_strong_fallback_delay;
          }

          v116 = networkd_settings_get_int64_with_default(*v115, *v114);
          goto LABEL_141;
        }

        if (nw_endpoint_handler_get_minimize_logging(v252))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          v95 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
          {
            v205 = nw_endpoint_handler_get_id_string(v252);
            v206 = nw_endpoint_handler_dry_run_string(v252);
            v207 = nw_endpoint_handler_copy_endpoint(v252);
            v208 = nw_endpoint_get_logging_description(v207);
            v209 = nw_endpoint_handler_state_string(v252);
            v210 = nw_endpoint_handler_mode_string(v252);
            v211 = nw_endpoint_handler_copy_current_path(v252);
            *(_DWORD *)buf = 136447746;
            *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_endpoint_fallback startWithHandler:]";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v205;
            *(_WORD *)&buf[22] = 2082;
            *(void *)&buf[24] = v206;
            *(_WORD *)&buf[32] = 2082;
            *(void *)&buf[34] = v208;
            *(_WORD *)&buf[42] = 2082;
            *(void *)&buf[44] = v209;
            *(_WORD *)&buf[52] = 2082;
            *(void *)&buf[54] = v210;
            *(_WORD *)&buf[62] = 2114;
            *(void *)v277 = v211;
            _os_log_impl( &dword_181A5C000,  v95,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] fallback advisory is forced",  buf,  0x48u);
          }
        }

        else
        {
          v93 = v252;
          v94 = (v248[67] & 0x20) == 0;

          if (!v94)
          {
LABEL_190:
            v166 = (NWConcrete_nw_endpoint_handler *)nw_endpoint_handler_create_inner( v244,  (void *)v246,  nw_endpoint_fallback_receive_report,  v252,  v252,  0,  0);
            v167 = self->primary_child;
            self->primary_child = v166;

LABEL_205:
            v171 = v252;
            v243[30] = 2;

            *((_DWORD *)v171 + 20) = 65541;
            nw_endpoint_handler_report(v171, 0LL, (_WORD *)v171 + 40, 0LL);
            nw_endpoint_handler_start(self->primary_child);

            char v5 = v239;
            goto LABEL_206;
          }

          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          v95 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v95, OS_LOG_TYPE_INFO))
          {
            v96 = v93;

            os_log_type_t v97 = v96;
            BOOL v98 = (v248[67] & 1) == 0;

            if (v98) {
              v99 = "";
            }
            else {
              v99 = "dry-run ";
            }
            os_log_type_t v100 = nw_endpoint_handler_copy_endpoint(v97);
            BOOL v101 = nw_endpoint_get_logging_description(v100);
            os_log_type_t v102 = v97;
            os_log_type_t v103 = v102;
            __uint64_t v104 = v243[30];
            else {
              char v105 = off_189BBBBF0[v104];
            }
            v236 = v105;

            v147 = v103;
            v148 = v147;
            v149 = v6[29];
            v150 = "path";
            switch(v149)
            {
              case 0u:
                break;
              case 1u:
                v150 = "resolver";
                break;
              case 2u:
                v150 = nw_endpoint_flow_mode_string(v147[31]);
                break;
              case 3u:
                v150 = "proxy";
                break;
              case 4u:
                v150 = "fallback";
                break;
              case 5u:
                v150 = "transform";
                break;
              default:
                v150 = "unknown-mode";
                break;
            }

            v164 = v148;
            os_unfair_lock_lock(lock);
            v165 = *((id *)v48 + 8);
            os_unfair_lock_unlock(lock);

            *(_DWORD *)buf = 136447746;
            *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_endpoint_fallback startWithHandler:]";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v96 + 21;
            *(_WORD *)&buf[22] = 2082;
            *(void *)&buf[24] = v99;
            *(_WORD *)&buf[32] = 2082;
            *(void *)&buf[34] = v101;
            *(_WORD *)&buf[42] = 2082;
            *(void *)&buf[44] = v236;
            *(_WORD *)&buf[52] = 2082;
            *(void *)&buf[54] = v150;
            *(_WORD *)&buf[62] = 2114;
            *(void *)v277 = v165;
            _os_log_impl( &dword_181A5C000,  v95,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] fallback advisory is forced",  buf,  0x48u);
          }
        }

        goto LABEL_190;
      }

          v126 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v126, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_finalize_master_frame_array";
            _os_log_impl(&dword_181A5C000, v126, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
          }

          goto LABEL_91;
        }

        if (*(void *)(v44 + 248))
        {
          if ((*(_BYTE *)(v44 + 158) & 1) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v45 = (os_log_s *)gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
            {
              os_log_type_t v46 = *(void *)(v44 + 256);
              os_log_type_t v47 = *(_DWORD *)(*(void *)(v44 + 248) + 372LL);
              if (v46) {
                LODWORD(v46) = *(_DWORD *)(v46 + 860);
              }
              v48 = *(_DWORD *)(v44 + 424);
              *(_DWORD *)buf = 136448002;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v44 + 74;
              *(_WORD *)&buf[22] = 2080;
              v137 = (uint64_t)" ";
              *(_WORD *)v138 = 1024;
              *(_DWORD *)&v138[2] = v47;
              *(_WORD *)&v138[6] = 1024;
              *(_DWORD *)&v138[8] = v46;
              *(_WORD *)&v138[12] = 1024;
              *(_DWORD *)&v138[14] = v48;
              *(_WORD *)&v138[18] = 2048;
              *(void *)&v138[20] = v44;
              v139 = 2048;
              v140 = v2;
              _os_log_impl( &dword_181A5C000,  v45,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:c%u:s%u> stream (%p) finished with connection %p",  buf,  0x46u);
            }
          }

          if (gLogDatapath)
          {
            v125 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v125, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
              _os_log_impl(&dword_181A5C000, v125, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
            }
          }

          *(void *)buf = v4;
          *(void *)&buf[8] = 0x40000000LL;
          *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_39716;
          v137 = (uint64_t)&__block_descriptor_tmp_55_39717;
          *(void *)v138 = v2 + 632;
          v138[8] = 0;
          id v49 = *(void *)(v2 + 632);
          do
          {
            if (!v49) {
              break;
            }
            v50 = *(void *)(v49 + 32);
            v51 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
            id v49 = v50;
          }

          while ((v51 & 1) != 0);
          *(void *)(v44 + 256) = 0LL;
          *(void *)(v2 + 488) = 0LL;
          nw_protocol_set_output_handler(v44, 0LL);
          nw_protocol_set_input_handler(v2, 0LL);
          goto LABEL_84;
        }

        v120 = v4;
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
        v121 = (char *)_os_log_send_and_compose_impl();
        LOBYTE(v141) = 16;
        v131 = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v121, &v141, &v131))
        {
          if (v141 == 17)
          {
            v122 = (os_log_s *)__nwlog_obj();
            v123 = v141;
            if (os_log_type_enabled(v122, (os_log_type_t)v141))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
              v124 = "%{public}s called with null http1_stream->protocol_http1";
LABEL_217:
              _os_log_impl(&dword_181A5C000, v122, v123, v124, buf, 0xCu);
            }
          }

          else if (v131)
          {
            v127 = (char *)__nw_create_backtrace_string();
            v122 = (os_log_s *)__nwlog_obj();
            v123 = v141;
            v128 = os_log_type_enabled(v122, (os_log_type_t)v141);
            if (v127)
            {
              if (v128)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v127;
                _os_log_impl( &dword_181A5C000,  v122,  v123,  "%{public}s called with null http1_stream->protocol_http1, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v127);
              goto LABEL_218;
            }

            if (v128)
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
              v124 = "%{public}s called with null http1_stream->protocol_http1, no backtrace";
              goto LABEL_217;
            }
          }

          else
          {
            v122 = (os_log_s *)__nwlog_obj();
            v123 = v141;
            if (os_log_type_enabled(v122, (os_log_type_t)v141))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http1_stream_disassociate_from_connection";
              v124 = "%{public}s called with null http1_stream->protocol_http1, backtrace limit exceeded";
              goto LABEL_217;
            }
          }
        }

  if (v39) {
    free(v39);
  }
  __int16 v24 = 0LL;
LABEL_37:
  *(void *)(*(void *)(*(void *)v11 + 8LL) + 24LL) = v24;
  v25 = *(char **)(*(void *)(*(void *)v11 + 8LL) + 24LL);
  if (v25)
  {
    if (!a5) {
      goto LABEL_45;
    }
    if (a4)
    {
      os_log_type_t v26 = *(void *)(*(void *)v13 + 8LL);
      if (*(void *)(v26 + 24) >= a5)
      {
        memcpy(v25, a4, a5);
        id v27 = *(void *)(v26 + 24);
        *(void *)(v26 + 24) = v27 - a5;
        if (v27 < a5)
        {
          if (gLogDatapath)
          {
            __uint64_t v76 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
            {
              v77 = *(void *)(v26 + 24);
              *(_DWORD *)buf = 136446978;
              os_log_type_t v83 = "_http_safe_append";
              v84 = 2082;
              v85 = "*remaining";
              v86 = 2048;
              os_log_type_t v87 = a5;
              v88 = 2048;
              os_log_type_t v89 = v77;
              _os_log_impl( &dword_181A5C000,  v76,  OS_LOG_TYPE_DEBUG,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu",  buf,  0x2Au);
            }
          }

          *(void *)(v26 + 24) = 0LL;
        }

        v25 += a5;
        goto LABEL_45;
      }

      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      os_log_type_t v83 = "_http_safe_append";
      os_log_type_t v47 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(__src) = 16;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      if (__src == 17)
      {
        v48 = (os_log_s *)__nwlog_obj();
        id v49 = __src;
        if (os_log_type_enabled(v48, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v83 = "_http_safe_append";
          v50 = "%{public}s called with null (*remaining >= length)";
          goto LABEL_216;
        }

        goto LABEL_217;
      }

      if (type == OS_LOG_TYPE_DEFAULT)
      {
        v48 = (os_log_s *)__nwlog_obj();
        id v49 = __src;
        if (os_log_type_enabled(v48, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v83 = "_http_safe_append";
          v50 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
          goto LABEL_216;
        }

        goto LABEL_217;
      }

      __uint64_t v73 = (char *)__nw_create_backtrace_string();
      v48 = (os_log_s *)__nwlog_obj();
      id v49 = __src;
      unint64_t v78 = os_log_type_enabled(v48, (os_log_type_t)__src);
      if (!v73)
      {
        if (v78)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v83 = "_http_safe_append";
          v50 = "%{public}s called with null (*remaining >= length), no backtrace";
          goto LABEL_216;
        }

        goto LABEL_217;
      }

      if (v78)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v83 = "_http_safe_append";
        v84 = 2082;
        v85 = v73;
        char v75 = "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s";
        goto LABEL_155;
      }
    }

    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      os_log_type_t v83 = "_http_safe_append";
      os_log_type_t v47 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(__src) = 16;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      if (__src == 17)
      {
        v48 = (os_log_s *)__nwlog_obj();
        id v49 = __src;
        if (os_log_type_enabled(v48, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v83 = "_http_safe_append";
          v50 = "%{public}s called with null data";
LABEL_216:
          _os_log_impl(&dword_181A5C000, v48, v49, v50, buf, 0xCu);
        }

  if (v39) {
    free(v39);
  }
  __int16 v24 = 0LL;
LABEL_37:
  *(void *)(*(void *)(*(void *)v11 + 8LL) + 24LL) = v24;
  v25 = *(char **)(*(void *)(*(void *)v11 + 8LL) + 24LL);
  if (v25)
  {
    if (!a5) {
      goto LABEL_45;
    }
    if (a4)
    {
      os_log_type_t v26 = *(void *)(*(void *)v13 + 8LL);
      if (*(void *)(v26 + 24) >= a5)
      {
        memcpy(v25, a4, a5);
        id v27 = *(void *)(v26 + 24);
        *(void *)(v26 + 24) = v27 - a5;
        if (v27 < a5)
        {
          if (gLogDatapath)
          {
            __uint64_t v76 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
            {
              v77 = *(void *)(v26 + 24);
              *(_DWORD *)buf = 136446978;
              os_log_type_t v83 = "_http_safe_append";
              v84 = 2082;
              v85 = "*remaining";
              v86 = 2048;
              os_log_type_t v87 = a5;
              v88 = 2048;
              os_log_type_t v89 = v77;
              _os_log_impl( &dword_181A5C000,  v76,  OS_LOG_TYPE_DEBUG,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu",  buf,  0x2Au);
            }
          }

          *(void *)(v26 + 24) = 0LL;
        }

        v25 += a5;
        goto LABEL_45;
      }

      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      os_log_type_t v83 = "_http_safe_append";
      os_log_type_t v47 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(__src) = 16;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      if (__src == 17)
      {
        v48 = (os_log_s *)__nwlog_obj();
        id v49 = __src;
        if (os_log_type_enabled(v48, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v83 = "_http_safe_append";
          v50 = "%{public}s called with null (*remaining >= length)";
          goto LABEL_216;
        }

        goto LABEL_217;
      }

      if (type == OS_LOG_TYPE_DEFAULT)
      {
        v48 = (os_log_s *)__nwlog_obj();
        id v49 = __src;
        if (os_log_type_enabled(v48, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v83 = "_http_safe_append";
          v50 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
          goto LABEL_216;
        }

        goto LABEL_217;
      }

      __uint64_t v73 = (char *)__nw_create_backtrace_string();
      v48 = (os_log_s *)__nwlog_obj();
      id v49 = __src;
      unint64_t v78 = os_log_type_enabled(v48, (os_log_type_t)__src);
      if (!v73)
      {
        if (v78)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v83 = "_http_safe_append";
          v50 = "%{public}s called with null (*remaining >= length), no backtrace";
          goto LABEL_216;
        }

        goto LABEL_217;
      }

      if (v78)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v83 = "_http_safe_append";
        v84 = 2082;
        v85 = v73;
        char v75 = "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s";
        goto LABEL_155;
      }
    }

    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      os_log_type_t v83 = "_http_safe_append";
      os_log_type_t v47 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(__src) = 16;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      if (__src == 17)
      {
        v48 = (os_log_s *)__nwlog_obj();
        id v49 = __src;
        if (os_log_type_enabled(v48, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v83 = "_http_safe_append";
          v50 = "%{public}s called with null data";
LABEL_216:
          _os_log_impl(&dword_181A5C000, v48, v49, v50, buf, 0xCu);
        }

  if (v39) {
    free(v39);
  }
  __int16 v24 = 0LL;
LABEL_37:
  *(void *)(*(void *)(*(void *)v11 + 8LL) + 24LL) = v24;
  v25 = *(char **)(*(void *)(*(void *)v11 + 8LL) + 24LL);
  if (v25)
  {
    if (!a5) {
      goto LABEL_45;
    }
    if (a4)
    {
      os_log_type_t v26 = *(void *)(*(void *)v13 + 8LL);
      if (*(void *)(v26 + 24) >= a5)
      {
        memcpy(v25, a4, a5);
        id v27 = *(void *)(v26 + 24);
        *(void *)(v26 + 24) = v27 - a5;
        if (v27 < a5)
        {
          if (gLogDatapath)
          {
            __uint64_t v76 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
            {
              v77 = *(void *)(v26 + 24);
              *(_DWORD *)buf = 136446978;
              os_log_type_t v83 = "_http_safe_append";
              v84 = 2082;
              v85 = "*remaining";
              v86 = 2048;
              os_log_type_t v87 = a5;
              v88 = 2048;
              os_log_type_t v89 = v77;
              _os_log_impl( &dword_181A5C000,  v76,  OS_LOG_TYPE_DEBUG,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu",  buf,  0x2Au);
            }
          }

          *(void *)(v26 + 24) = 0LL;
        }

        v25 += a5;
        goto LABEL_45;
      }

      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      os_log_type_t v83 = "_http_safe_append";
      os_log_type_t v47 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(__src) = 16;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      if (__src == 17)
      {
        v48 = (os_log_s *)__nwlog_obj();
        id v49 = __src;
        if (os_log_type_enabled(v48, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v83 = "_http_safe_append";
          v50 = "%{public}s called with null (*remaining >= length)";
          goto LABEL_216;
        }

        goto LABEL_217;
      }

      if (type == OS_LOG_TYPE_DEFAULT)
      {
        v48 = (os_log_s *)__nwlog_obj();
        id v49 = __src;
        if (os_log_type_enabled(v48, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v83 = "_http_safe_append";
          v50 = "%{public}s called with null (*remaining >= length), backtrace limit exceeded";
          goto LABEL_216;
        }

        goto LABEL_217;
      }

      __uint64_t v73 = (char *)__nw_create_backtrace_string();
      v48 = (os_log_s *)__nwlog_obj();
      id v49 = __src;
      unint64_t v78 = os_log_type_enabled(v48, (os_log_type_t)__src);
      if (!v73)
      {
        if (v78)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v83 = "_http_safe_append";
          v50 = "%{public}s called with null (*remaining >= length), no backtrace";
          goto LABEL_216;
        }

        goto LABEL_217;
      }

      if (v78)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v83 = "_http_safe_append";
        v84 = 2082;
        v85 = v73;
        char v75 = "%{public}s called with null (*remaining >= length), dumping backtrace:%{public}s";
        goto LABEL_155;
      }
    }

    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      os_log_type_t v83 = "_http_safe_append";
      os_log_type_t v47 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(__src) = 16;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      if (__src == 17)
      {
        v48 = (os_log_s *)__nwlog_obj();
        id v49 = __src;
        if (os_log_type_enabled(v48, (os_log_type_t)__src))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v83 = "_http_safe_append";
          v50 = "%{public}s called with null data";
LABEL_216:
          _os_log_impl(&dword_181A5C000, v48, v49, v50, buf, 0xCu);
        }

    if (v72) {
      free(v72);
    }
    os_log_type_t v13 = 0LL;
    os_log_type_t v10 = 0LL;
    goto LABEL_81;
  }

  __nwlog_obj();
  os_log_type_t v46 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
  os_log_type_t v47 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v90 = 0;
  if (__nwlog_fault(v47, &type, &v90))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v48 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v49 = type;
      if (os_log_type_enabled(v48, type))
      {
        *(_DWORD *)buf = 136446210;
        v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
        _os_log_impl(&dword_181A5C000, v48, v49, "%{public}s new_results should not have invalid changes", buf, 0xCu);
      }
    }

    else if (v90)
    {
      v50 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v48 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v51 = type;
      os_log_type_t v52 = os_log_type_enabled(v48, type);
      if (v50)
      {
        if (v52)
        {
          *(_DWORD *)buf = 136446466;
          v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
          v94 = 2082;
          *(void *)v95 = v50;
          _os_log_impl( &dword_181A5C000,  v48,  v51,  "%{public}s new_results should not have invalid changes, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v50);
        goto LABEL_129;
      }

      if (v52)
      {
        *(_DWORD *)buf = 136446210;
        v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
        _os_log_impl( &dword_181A5C000,  v48,  v51,  "%{public}s new_results should not have invalid changes, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v48 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v59 = type;
      if (os_log_type_enabled(v48, type))
      {
        *(_DWORD *)buf = 136446210;
        v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
        _os_log_impl( &dword_181A5C000,  v48,  v59,  "%{public}s new_results should not have invalid changes, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

      if (v144) {
        free(v144);
      }
      goto LABEL_237;
    }

    __nwlog_obj();
    __int16 v113 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v219 = "nw_endpoint_flow_rebuild_stack";
    v114 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v214) = 0;
    if (__nwlog_fault(v114, type, &v214))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v115 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v116 = type[0];
        if (os_log_type_enabled(v115, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v219 = "nw_endpoint_flow_rebuild_stack";
          _os_log_impl(&dword_181A5C000, v115, v116, "%{public}s called with null endpoint_flow", buf, 0xCu);
        }
      }

      else if ((_BYTE)v214)
      {
        v124 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v115 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v125 = type[0];
        v126 = os_log_type_enabled(v115, type[0]);
        if (v124)
        {
          if (v126)
          {
            *(_DWORD *)buf = 136446466;
            v219 = "nw_endpoint_flow_rebuild_stack";
            v220 = 2082;
            v221 = v124;
            _os_log_impl( &dword_181A5C000,  v115,  v125,  "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v124);
          goto LABEL_167;
        }

        if (v126)
        {
          *(_DWORD *)buf = 136446210;
          v219 = "nw_endpoint_flow_rebuild_stack";
          _os_log_impl( &dword_181A5C000,  v115,  v125,  "%{public}s called with null endpoint_flow, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v115 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v137 = type[0];
        if (os_log_type_enabled(v115, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v219 = "nw_endpoint_flow_rebuild_stack";
          _os_log_impl( &dword_181A5C000,  v115,  v137,  "%{public}s called with null endpoint_flow, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

LABEL_11:
  uint64_t v4 = (dispatch_object_s *)*v5;
  if (*v5)
  {
LABEL_12:
    dispatch_activate(v4);
    goto LABEL_13;
  }
}

    char v8 = *((void *)v3 + 12);
    BOOL v9 = *((void *)v3 + 14) + a2;
    *((void *)v3 + 14) = v9;
    if (v9 >= v8)
    {
      *((_BYTE *)v3 + 128) |= 0x10u;
      goto LABEL_34;
    }

    if ((*((_BYTE *)v3 + 128) & 0x20) != 0)
    {
LABEL_65:
      if (_nw_signposts_once == -1)
      {
        if (_nw_signposts_enabled) {
          goto LABEL_67;
        }
      }

      else
      {
        dispatch_once(&_nw_signposts_once, &__block_literal_global_32859);
        if (_nw_signposts_enabled)
        {
LABEL_67:
        }
      }

      uint64_t v23 = 0LL;
      goto LABEL_70;
    }

    os_log_type_t v11 = v3;
    os_log_type_t v12 = v11[5];
    if (v12)
    {
      *((_BYTE *)v3 + 128) |= 0x20u;
      os_log_type_t v13 = *(void *)(v12 + 16);
      if (v13 && !nw_path_parameters_get_logging_disabled(*(void *)(v13 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        BOOL v14 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          os_log_type_t v15 = *(_DWORD *)(v11[5] + 448LL);
          int v16 = *((void *)v3 + 9);
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_write_request_start_file_updates";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v15;
          *(_WORD *)&buf[18] = 2112;
          *(void *)&buf[20] = v16;
          _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%u] Activating progress updates on write request on %@",  buf,  0x1Cu);
        }
      }

      id v17 = v11[10];
      if (v17)
      {
        nw_queue_cancel_source(v17, v10);
        v11[10] = 0LL;
      }

      objc_initWeak(&location, v11);
      id v18 = *(void **)(v11[5] + 24LL);
      *(void *)buf = MEMORY[0x1895F87A8];
      *(void *)&buf[8] = 3221225472LL;
      *(void *)&buf[16] = ___ZL35nw_write_request_start_file_updatesP27NWConcrete_nw_write_request_block_invoke;
      *(void *)&buf[24] = &unk_189BC0AE8;
      objc_copyWeak(v49, &location);
      source = nw_queue_context_create_source(v18, 2, 3, 0, buf, 0LL);
      v11[10] = source;
      if (source)
      {
        char v20 = dispatch_time(0x8000000000000000LL, 1000000LL);
        os_log_type_t v21 = 1000000LL * *((unsigned int *)v11 + 22);
        if (*(void *)source)
        {
          dispatch_source_set_timer(*(dispatch_source_t *)source, v20, v21, 0x3E8uLL);
        }

        else
        {
          *(void *)(source + 32) = v20;
          *(void *)(source + 40) = v21;
          if (*(_BYTE *)(source + 48) && *(_BYTE *)(source + 49)) {
            nw_queue_source_run_timer(source, v20);
          }
        }

        nw_queue_activate_source(v11[10], v20);
        goto LABEL_63;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v24 = (id)gLogObj;
      *(_DWORD *)dispatch_workloop_t v44 = 136446210;
      v45 = "nw_write_request_start_file_updates";
      v25 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      os_log_type_t v41 = 0;
      if (__nwlog_fault(v25, &type, &v41))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v26 = (os_log_s *)(id)gLogObj;
          id v27 = type;
          if (os_log_type_enabled(v26, type))
          {
            *(_DWORD *)dispatch_workloop_t v44 = 136446210;
            v45 = "nw_write_request_start_file_updates";
            _os_log_impl( &dword_181A5C000,  v26,  v27,  "%{public}s call to nw_queue_context_create_source(timer) for write request updates failed",  v44,  0xCu);
          }
        }

        else if (v41)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v29 = type;
          os_log_type_t v30 = os_log_type_enabled(v26, type);
          if (backtrace_string)
          {
            if (v30)
            {
              *(_DWORD *)dispatch_workloop_t v44 = 136446466;
              v45 = "nw_write_request_start_file_updates";
              os_log_type_t v46 = 2082;
              os_log_type_t v47 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v26,  v29,  "%{public}s call to nw_queue_context_create_source(timer) for write request updates failed, dumping backtrace:%{public}s",  v44,  0x16u);
            }

            free(backtrace_string);
            if (!v25) {
              goto LABEL_63;
            }
            goto LABEL_62;
          }

          if (v30)
          {
            *(_DWORD *)dispatch_workloop_t v44 = 136446210;
            v45 = "nw_write_request_start_file_updates";
            _os_log_impl( &dword_181A5C000,  v26,  v29,  "%{public}s call to nw_queue_context_create_source(timer) for write request updates failed, no backtrace",  v44,  0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          os_log_type_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v31 = type;
          if (os_log_type_enabled(v26, type))
          {
            *(_DWORD *)dispatch_workloop_t v44 = 136446210;
            v45 = "nw_write_request_start_file_updates";
            _os_log_impl( &dword_181A5C000,  v26,  v31,  "%{public}s call to nw_queue_context_create_source(timer) for write request updates failed, backtrace limit exceeded",  v44,  0xCu);
          }
        }
      }

      if (!v25)
      {
LABEL_63:
        objc_destroyWeak(v49);
        objc_destroyWeak(&location);
LABEL_64:

        goto LABEL_65;
      }

        os_log_type_t v15 = v6;
        int v16 = (*((_BYTE *)v15 + 268) & 0x20) == 0;

        if (v16)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          id v17 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
          {
            id v18 = v15;

            char v19 = v18;
            char v20 = (*((_BYTE *)v15 + 268) & 1) == 0;

            if (v20) {
              os_log_type_t v21 = "";
            }
            else {
              os_log_type_t v21 = "dry-run ";
            }
            v22 = nw_endpoint_handler_copy_endpoint(v19);
            uint64_t v23 = nw_endpoint_get_logging_description(v22);
            __int16 v24 = v19;
            v25 = v24;
            os_log_type_t v26 = v24[30];
            else {
              id v27 = off_189BBBBF0[v26];
            }

            v50 = v25;
            v51 = "path";
            switch(v6->mode)
            {
              case 0:
                break;
              case 1:
                v51 = "resolver";
                break;
              case 2:
                v51 = nw_endpoint_flow_mode_string(v50[31]);
                break;
              case 3:
                v51 = "proxy";
                break;
              case 4:
                v51 = "fallback";
                break;
              case 5:
                v51 = "transform";
                break;
              default:
                v51 = "unknown-mode";
                break;
            }

            loga = v51;

            os_log_type_t v52 = v50;
            v53 = v13;
            BOOL v54 = v27;
            uint64_t v55 = (id *)v52;
            v56 = v17;
            BOOL v57 = v18;
            v58 = v5;
            v59 = v22;
            os_log_type_t v60 = v23;
            BOOL v61 = v21;
            v62 = v52 + 28;
            os_unfair_lock_lock(v52 + 28);
            os_log_type_t v63 = v55[8];
            os_log_type_t v64 = v62;
            os_log_type_t v65 = v61;
            BOOL v66 = v60;
            os_log_type_t v67 = v59;
            char v5 = v58;
            v68 = v57;
            id v17 = v56;
            v69 = v63;
            os_unfair_lock_unlock(v64);

            v70 = v54;
            os_log_type_t v13 = v53;
            *(_DWORD *)buf = 136447746;
            __int16 v113 = "nw_flow_passthrough_disconnected";
            v114 = 2082;
            id_str = v68->id_str;
            v116 = 2082;
            v117 = v65;
            v118 = 2082;
            v119 = v66;
            v120 = 2082;
            v121 = v70;
            v122 = 2082;
            v123 = loga;
            v124 = 2114;
            v125 = v69;
            _os_log_impl( &dword_181A5C000,  v17,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] deferring fail on disconnected",  buf,  0x48u);
          }
        }

        *((_BYTE *)v13 + 35) |= 0x80u;
        goto LABEL_53;
      }

      __nwlog_obj();
      v85 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      __int16 v113 = "nw_flow_passthrough_should_fail_on_disconnected";
      v86 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      __uint64_t v110 = 0;
      if (__nwlog_fault(v86, &type, &v110))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          os_log_type_t v87 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v88 = type;
          if (os_log_type_enabled(v87, type))
          {
            *(_DWORD *)buf = 136446210;
            __int16 v113 = "nw_flow_passthrough_should_fail_on_disconnected";
            _os_log_impl(&dword_181A5C000, v87, v88, "%{public}s called with null endpoint_flow", buf, 0xCu);
          }
        }

        else if (v110)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v87 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          BOOL v90 = type;
          os_log_type_t v91 = os_log_type_enabled(v87, type);
          if (backtrace_string)
          {
            if (v91)
            {
              *(_DWORD *)buf = 136446466;
              __int16 v113 = "nw_flow_passthrough_should_fail_on_disconnected";
              v114 = 2082;
              id_str = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v87,  v90,  "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(backtrace_string);
            goto LABEL_109;
          }

          if (v91)
          {
            *(_DWORD *)buf = 136446210;
            __int16 v113 = "nw_flow_passthrough_should_fail_on_disconnected";
            _os_log_impl( &dword_181A5C000,  v87,  v90,  "%{public}s called with null endpoint_flow, no backtrace",  buf,  0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          os_log_type_t v87 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v94 = type;
          if (os_log_type_enabled(v87, type))
          {
            *(_DWORD *)buf = 136446210;
            __int16 v113 = "nw_flow_passthrough_should_fail_on_disconnected";
            _os_log_impl( &dword_181A5C000,  v87,  v94,  "%{public}s called with null endpoint_flow, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

            os_release(v6);
            output_handler_context[6] = 0LL;
            goto LABEL_12;
          }
        }

        else if ((*((_BYTE *)output_handler_context + 153) & 2) == 0)
        {
          goto LABEL_10;
        }

        os_log_type_t v32 = output_handler_context[11];
        BOOL v33 = (void *)output_handler_context[12];
        if (v32)
        {
          *(void *)(v32 + 64) = v33;
          BOOL v33 = (void *)output_handler_context[12];
        }

        else
        {
          handle[49] = v33;
        }

        *BOOL v33 = v32;
        *((_BYTE *)output_handler_context + 153) &= ~2u;
        id v6 = (void *)output_handler_context[6];
        if (!v6) {
          goto LABEL_12;
        }
        goto LABEL_11;
      }

  uint64_t result = sub_18264F318();
  __break(1u);
  return result;
}

    v22[(v16 >> 6) + 8] |= 1LL << v16;
    id v27 = (uint64_t *)(v22[6] + 16 * v16);
    *id v27 = a4;
    v27[1] = a5;
    os_log_type_t v28 = v22[7] + 24 * v16;
    *(void *)os_log_type_t v28 = a1;
    *(void *)(v28 + 8) = a2;
    *(_BYTE *)(v28 + 16) = a3;
    os_log_type_t v29 = v22[2];
    os_log_type_t v30 = __OFADD__(v29, 1LL);
    v31 = v29 + 1;
    if (!v30)
    {
      v22[2] = v31;
      return swift_bridgeObjectRetain();
    }

    goto LABEL_14;
  }

  sub_181C8D378(v19, a6 & 1);
  v25 = sub_181C8C078(a4, a5);
  if ((v20 & 1) == (v26 & 1))
  {
    int v16 = v25;
    v22 = (void *)*v7;
    if ((v20 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    free(v6);
    goto LABEL_13;
  }

    free(v6);
    goto LABEL_13;
  }

  __break(1u);
  return result;
}

  if (v8)
  {
    if (v6) {
      goto LABEL_22;
    }
  }

  else
  {
    __nwlog_obj();
    v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
    os_log_type_t v26 = (void *)_os_log_send_and_compose_impl();

    uint64_t result = __nwlog_abort((uint64_t)v26);
    if (result) {
      goto LABEL_52;
    }
    free(v26);
    if (v6) {
      goto LABEL_22;
    }
  }

  __nwlog_obj();
  os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  os_log_type_t v12 = (void *)_os_log_send_and_compose_impl();

  uint64_t result = __nwlog_abort((uint64_t)v12);
  if (result) {
    goto LABEL_52;
  }
  free(v12);
LABEL_22:
  if (a1[6] - 1LL <= a2) {
    goto LABEL_37;
  }
  int v16 = (_BYTE *)a1[5];
  id v17 = *(void *)(*(void *)(a1[4] + 8LL) + 24LL);
  if (v16)
  {
    if (v17) {
      goto LABEL_25;
    }
  }

  else
  {
    __nwlog_obj();
    id v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
    os_log_type_t v28 = (void *)_os_log_send_and_compose_impl();

    uint64_t result = __nwlog_abort((uint64_t)v28);
    if (result) {
      goto LABEL_52;
    }
    free(v28);
    if (v17)
    {
LABEL_25:
      id v18 = &v16[v17];
      while (*v16)
      {
        ++v16;
        if (!--v17)
        {
          int v16 = v18;
          goto LABEL_29;
        }
      }

      if (v17 >= 2)
      {
        *int v16 = 44;
        if (&asc_18275D580[v17 - 2] == ", ")
        {
          ++v16;
        }

        else
        {
          v16[1] = 32;
          v16 += 2;
        }
      }

      *int v16 = 0;
      goto LABEL_37;
    }
  }

    free(v4);
    goto LABEL_12;
  }

  *(void *)buf = 0LL;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3032000000LL;
  id v18 = __Block_byref_object_copy__642;
  char v19 = __Block_byref_object_dispose__643;
  char v20 = 0LL;
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 3221225472LL;
  block[2] = ___ZL35networkd_privileged_copy_connectionv_block_invoke;
  block[3] = &unk_189BC9210;
  os_log_type_t v13 = (dispatch_queue_s *)v0;
  BOOL v14 = buf;
  dispatch_sync(v13, block);
  char v2 = *(id *)(*(void *)&buf[8] + 40LL);

  _Block_object_dispose(buf, 8);
LABEL_13:

  return v2;
}
}

  os_unfair_lock_lock(v12 + 2);
  if (*(void *)&v12[14]._os_unfair_lock_opaque)
  {
    if (*(void *)&v12[38]._os_unfair_lock_opaque)
    {
      if (*(void *)&v12[44]._os_unfair_lock_opaque)
      {
        os_log_type_t v13 = os_channel_available_slot_count();
        if (v13)
        {
          BOOL v14 = *(void *)&v12[38]._os_unfair_lock_opaque;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v15 = (os_log_s *)(id)gLogObj;
          int v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG);
          if (v14)
          {
            if (v16)
            {
              id v17 = *(char **)&v12[6]._os_unfair_lock_opaque;
              char os_unfair_lock_opaque = v12[42]._os_unfair_lock_opaque;
              *(_DWORD *)buf = 136447490;
              v149 = "receiveFramesfromRings";
              v150 = 2080;
              v151 = v17;
              v152 = 1042;
              LODWORD(v153) = 16;
              WORD2(v153) = 2098;
              *(void *)((char *)&v153 + 6) = (char *)v12 + 115;
              HIWORD(v153) = 1024;
              LODWORD(v154) = os_unfair_lock_opaque;
              WORD2(v154) = 1024;
              *(_DWORD *)((char *)&v154 + 6) = v13;
              char v19 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>] receiveDatafromRing: avail slots %d";
              char v20 = v15;
              os_log_type_t v21 = 50;
LABEL_23:
              _os_log_impl(&dword_181A5C000, v20, OS_LOG_TYPE_DEBUG, v19, buf, v21);
            }
          }

          else if (v16)
          {
            *(_DWORD *)buf = 136446722;
            v149 = "receiveFramesfromRings";
            v150 = 2114;
            v151 = (char *)v12;
            v152 = 1024;
            LODWORD(v153) = v13;
            char v19 = "%{public}s [%{public}@] receiveDatafromRing: avail slots %d";
            char v20 = v15;
            os_log_type_t v21 = 28;
            goto LABEL_23;
          }

          for (i = 1; i; i = os_channel_available_slot_count())
          {
            v142 = v12;
            v146 = 0u;
            v147 = 0u;
            *(_OWORD *)os_log_type_t type = 0u;
            v145 = 0u;
            if (!os_channel_get_next_slot())
            {
              v45 = *(void *)&v12[38]._os_unfair_lock_opaque;
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v46 = (os_log_s *)(id)gLogObj;
              os_log_type_t v47 = os_log_type_enabled(v46, OS_LOG_TYPE_ERROR);
              if (v45)
              {
                if (v47)
                {
                  v48 = *(char **)&v12[6]._os_unfair_lock_opaque;
                  id v49 = v12[42]._os_unfair_lock_opaque;
                  *(_DWORD *)buf = 136447490;
                  v149 = "receiveOneFramefromRing_locked";
                  v150 = 2080;
                  v151 = v48;
                  v152 = 1042;
                  LODWORD(v153) = 16;
                  WORD2(v153) = 2098;
                  *(void *)((char *)&v153 + 6) = (char *)v12 + 115;
                  HIWORD(v153) = 1024;
                  LODWORD(v154) = v49;
                  WORD2(v154) = 2112;
                  *(void *)((char *)&v154 + 6) = @"NULL RX next slot";
                  v50 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>]  %@";
                  v51 = v46;
                  os_log_type_t v52 = 54;
                  goto LABEL_59;
                }
              }

              else if (v47)
              {
                *(_DWORD *)buf = 136446722;
                v149 = "receiveOneFramefromRing_locked";
                v150 = 2114;
                v151 = (char *)v12;
                v152 = 2112;
                *(void *)&v153 = @"NULL RX next slot";
                v50 = "%{public}s [%{public}@]  %@";
                v51 = v46;
                os_log_type_t v52 = 32;
LABEL_59:
                _os_log_impl(&dword_181A5C000, v51, OS_LOG_TYPE_ERROR, v50, buf, v52);
              }

              v53 = v142;
              if (*(void *)&v12[38]._os_unfair_lock_opaque) {
                goto LABEL_61;
              }
              goto LABEL_64;
            }

            if (!(void)v145)
            {
              os_log_type_t v65 = *(void *)&v12[38]._os_unfair_lock_opaque;
              __nwlog_obj();
              BOOL v66 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v67 = os_log_type_enabled(v66, OS_LOG_TYPE_ERROR);
              if (v65)
              {
                if (v67)
                {
                  v68 = *(char **)&v12[6]._os_unfair_lock_opaque;
                  v69 = v12[42]._os_unfair_lock_opaque;
                  *(_DWORD *)buf = 136447490;
                  v149 = "receiveOneFramefromRing_locked";
                  v150 = 2080;
                  v151 = v68;
                  v152 = 1042;
                  LODWORD(v153) = 16;
                  WORD2(v153) = 2098;
                  *(void *)((char *)&v153 + 6) = (char *)v12 + 115;
                  HIWORD(v153) = 1024;
                  LODWORD(v154) = v69;
                  WORD2(v154) = 2112;
                  *(void *)((char *)&v154 + 6) = @"NULL RX prop buf";
                  v70 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>]  %@";
                  os_log_type_t v71 = v66;
                  v72 = 54;
                  goto LABEL_94;
                }
              }

              else if (v67)
              {
                *(_DWORD *)buf = 136446722;
                v149 = "receiveOneFramefromRing_locked";
                v150 = 2114;
                v151 = (char *)v12;
                v152 = 2112;
                *(void *)&v153 = @"NULL RX prop buf";
                v70 = "%{public}s [%{public}@]  %@";
                os_log_type_t v71 = v66;
                v72 = 32;
LABEL_94:
                _os_log_impl(&dword_181A5C000, v71, OS_LOG_TYPE_ERROR, v70, buf, v72);
              }

              v53 = v142;
              if (*(void *)&v12[38]._os_unfair_lock_opaque) {
                goto LABEL_61;
              }
              goto LABEL_64;
            }

            if (!os_channel_slot_get_packet())
            {
              __uint64_t v73 = *(void *)&v12[38]._os_unfair_lock_opaque;
              __nwlog_obj();
              unint64_t v74 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              char v75 = os_log_type_enabled(v74, OS_LOG_TYPE_ERROR);
              if (v73)
              {
                if (v75)
                {
                  __uint64_t v76 = *(char **)&v12[6]._os_unfair_lock_opaque;
                  v77 = v12[42]._os_unfair_lock_opaque;
                  *(_DWORD *)buf = 136447490;
                  v149 = "receiveOneFramefromRing_locked";
                  v150 = 2080;
                  v151 = v76;
                  v152 = 1042;
                  LODWORD(v153) = 16;
                  WORD2(v153) = 2098;
                  *(void *)((char *)&v153 + 6) = (char *)v12 + 115;
                  HIWORD(v153) = 1024;
                  LODWORD(v154) = v77;
                  WORD2(v154) = 2112;
                  *(void *)((char *)&v154 + 6) = @"Bad RX pkt";
                  unint64_t v78 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>]  %@";
                  char v79 = v74;
                  v80 = 54;
                  goto LABEL_102;
                }
              }

              else if (v75)
              {
                *(_DWORD *)buf = 136446722;
                v149 = "receiveOneFramefromRing_locked";
                v150 = 2114;
                v151 = (char *)v12;
                v152 = 2112;
                *(void *)&v153 = @"Bad RX pkt";
                unint64_t v78 = "%{public}s [%{public}@]  %@";
                char v79 = v74;
                v80 = 32;
LABEL_102:
                _os_log_impl(&dword_181A5C000, v79, OS_LOG_TYPE_ERROR, v78, buf, v80);
              }

              v53 = v142;
              if (*(void *)&v12[38]._os_unfair_lock_opaque)
              {
LABEL_61:
                is_defunct = os_channel_is_defunct();
                goto LABEL_62;
              }

      if (v5)
      {
        char v8 = *(char *)(v5 + 212);
        if ((v8 & 0x80000000) == 0)
        {
          if ((v8 & 0x10) == 0)
          {
            if ((v8 & 1) == 0)
            {
              BOOL v9 = *(uint64_t (**)(nw_protocol *, nw_protocol *, BOOL))(v5 + 152);
              if (v9)
              {
                os_log_type_t v10 = v9(a1, a2, *(_DWORD *)(v5 + 208) != 0) ^ 1;
                goto LABEL_23;
              }

              goto LABEL_20;
            }

            if (gLogDatapath)
            {
              v40 = v5;
              os_log_type_t v41 = (os_log_s *)__nwlog_obj();
              BOOL v42 = os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG);
              char v5 = v40;
              if (v42)
              {
                *(_DWORD *)buf = 136446210;
                *(void *)&uint8_t buf[4] = "nw_protocol_plugin_retry_disconnected";
                _os_log_impl( &dword_181A5C000,  v41,  OS_LOG_TYPE_DEBUG,  "%{public}s holding onto disconnected because getting input frames",  buf,  0xCu);
                char v5 = v40;
              }
            }

            os_log_type_t v10 = 0;
            *(_BYTE *)(v5 + 212) |= 2u;
LABEL_23:
            os_log_type_t v11 = (nw_frame_array_s *)handle[9];
            if (v11)
            {
              if ((BYTE6(v11[8].tqh_last) & 1) != 0)
              {
                nw_protocol_plugin_metadata_deep_copy_input_frame_array((nw_frame_array_s *)handle[9]);
                nw_protocol_plugin_metadata_deep_copy_input_frame_array(v11 + 1);
                if ((v10 & 1) == 0) {
                  return;
                }
              }

              else
              {
                if (gLogDatapath)
                {
                  id v36 = (os_log_s *)__nwlog_obj();
                  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
                    _os_log_impl(&dword_181A5C000, v36, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
                  }
                }

                os_log_type_t v12 = MEMORY[0x1895F87A8];
                *(void *)buf = MEMORY[0x1895F87A8];
                *(void *)&buf[8] = 0x40000000LL;
                *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_3309;
                os_log_type_t v46 = (nw_protocol *)&__block_descriptor_tmp_34_3310;
                os_log_type_t v47 = v11;
                v48 = 0;
                tqh_first = v11->tqh_first;
                do
                {
                  if (!tqh_first) {
                    break;
                  }
                  BOOL v14 = (nw_frame *)*((void *)tqh_first + 4);
                  os_log_type_t v15 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
                  tqh_first = v14;
                }

                while ((v15 & 1) != 0);
                int v16 = v11 + 1;
                if (gLogDatapath)
                {
                  v37 = (os_log_s *)__nwlog_obj();
                  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136446210;
                    *(void *)&uint8_t buf[4] = "nw_protocol_finalize_temp_frame_array";
                    _os_log_impl(&dword_181A5C000, v37, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
                  }
                }

                *(void *)buf = v12;
                *(void *)&buf[8] = 0x40000000LL;
                *(void *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_3309;
                os_log_type_t v46 = (nw_protocol *)&__block_descriptor_tmp_34_3310;
                os_log_type_t v47 = v16;
                v48 = 0;
                id v17 = v16->tqh_first;
                do
                {
                  if (!v17) {
                    break;
                  }
                  id v18 = (nw_frame *)*((void *)v17 + 4);
                  char v19 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
                  id v17 = v18;
                }

                while ((v19 & 1) != 0);
                if ((v10 & 1) == 0) {
                  return;
                }
              }
            }

            else if (!v10)
            {
              return;
            }

  if (!v4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v49 = "nw_protocol_plugin_name_set_name";
    v25 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v46 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v26 = (os_log_s *)__nwlog_obj();
      id v27 = type;
      if (!os_log_type_enabled(v26, type)) {
        goto LABEL_89;
      }
      *(_DWORD *)buf = 136446210;
      id v49 = "nw_protocol_plugin_name_set_name";
      os_log_type_t v28 = "%{public}s called with null parameters";
      goto LABEL_88;
    }

    if (!v46)
    {
      os_log_type_t v26 = (os_log_s *)__nwlog_obj();
      id v27 = type;
      if (!os_log_type_enabled(v26, type)) {
        goto LABEL_89;
      }
      *(_DWORD *)buf = 136446210;
      id v49 = "nw_protocol_plugin_name_set_name";
      os_log_type_t v28 = "%{public}s called with null parameters, backtrace limit exceeded";
      goto LABEL_88;
    }

    v37 = (char *)__nw_create_backtrace_string();
    os_log_type_t v26 = (os_log_s *)__nwlog_obj();
    id v27 = type;
    v40 = os_log_type_enabled(v26, type);
    if (!v37)
    {
      if (!v40) {
        goto LABEL_89;
      }
      *(_DWORD *)buf = 136446210;
      id v49 = "nw_protocol_plugin_name_set_name";
      os_log_type_t v28 = "%{public}s called with null parameters, no backtrace";
      goto LABEL_88;
    }

    if (v40)
    {
      *(_DWORD *)buf = 136446466;
      id v49 = "nw_protocol_plugin_name_set_name";
      v50 = 2082;
      v51 = v37;
      os_log_type_t v39 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
      goto LABEL_62;
    }

    goto LABEL_63;
  }

  os_log_type_t v10 = *(void *)(a1 + 48);
LABEL_13:
  char v20 = *(void **)(a2 + 24);
  char v19 = a2 + 24;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = (*(_BYTE *)(v19 + 46) & 2) != 0;
  objc_storeStrong((id *)(v10 + 40), v20);
  os_log_type_t v11 = *(void **)v19;
  *(void *)char v19 = 0LL;
  os_log_type_t v21 = 1LL;
LABEL_14:

  return v21;
}

  v25 = 0LL;
LABEL_15:

  return v25;
}
}

  id v3 = *((void *)v2 + 17);
  if (v3) {
    goto LABEL_12;
  }
LABEL_13:
}

  id v3 = *((void *)v2 + 16);
  if (v3) {
    goto LABEL_12;
  }
LABEL_13:
}

  if (a3 < 0)
  {
    if (sa_family == 30)
    {
      if (v13)
      {
        v13->flags |= 0x40u;
        goto LABEL_32;
      }

      __int16 v24 = v15 | 0x40;
    }

    else
    {
      if (sa_family != 2) {
        goto LABEL_32;
      }
      if (v13)
      {
        v13->flags |= 0x20u;
        goto LABEL_32;
      }

      __int16 v24 = v15 | 0x20;
    }

    *((_WORD *)v44 + 44) = v24;
  }

  else
  {
    if (sa_family == 2)
    {
      if (v13 || (v15 & 0x20) == 0) {
        goto LABEL_32;
      }
      BOOL v42 = a6;
      char v43 = a7;
      id v18 = 2;
      char v19 = -38;
    }

    else
    {
      if (v13 || sa_family != 30 || (v15 & 0x40) == 0) {
        goto LABEL_32;
      }
      BOOL v42 = a6;
      char v43 = a7;
      id v18 = 30;
      char v19 = -75;
    }

    *((_WORD *)v44 + 44) = v15 & v19;
    char v20 = v44;
    id v49 = 0LL;
    v50 = &v49;
    v51 = 0x2020000000LL;
    os_log_type_t v52 = 0;
    os_log_type_t v21 = nw_array_create();
    v22 = (unsigned __int8 *)v20[18];
    v45[0] = MEMORY[0x1895F87A8];
    v45[1] = 3221225472LL;
    v45[2] = ___ZL35nw_resolver_remove_sa_family_lockedP22NWConcrete_nw_resolverh_block_invoke;
    v45[3] = &unk_189BB6B30;
    v48 = v18;
    os_log_type_t v47 = &v49;
    uint64_t v23 = (id)v21;
    os_log_type_t v46 = v23;
    nw_array_apply(v22, (uint64_t)v45);
    if (*((_BYTE *)v50 + 24)) {
      objc_storeStrong(v20 + 18, (id)v21);
    }

    _Block_object_dispose(&v49, 8);
    BOOL v14 = v44;
    a6 = v42;
    a7 = v43;
  }

  id v18 = (nw_connection *)nw_connection_group_copy_connection_for_message(v3, v5);
  char v19 = v18;
  if (v18)
  {
    os_log_type_t v11 = nw_connection_copy_current_path(v18);
  }

  else
  {
    os_log_type_t v11 = 0LL;
  }

  objc_sync_exit(v10);
  return v12;
}

LABEL_19:
  v22 = +[NWMonitor copySavedMonitorForNetworkDescriptionArray:endpoint:parameters:]( &OBJC_CLASS___NWMonitor,  "copySavedMonitorForNetworkDescriptionArray:endpoint:parameters:",  v11,  v9,  v10);
  uint64_t v23 = v22;
  if (v22)
  {
    [v22 privateDescription];
    __int16 v24 = (__CFString *)objc_claimAutoreleasedReturnValue();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v25 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      unint64_t v78 = "+[NWMonitor monitorWithNetworkDescriptionArray:endpoint:parameters:]";
      char v79 = 2114;
      v80 = v24;
      _os_log_impl(&dword_181A5C000, v25, OS_LOG_TYPE_DEBUG, "%{public}s found matching monitor %{public}@", buf, 0x16u);
    }

    os_log_type_t v26 = v23;
    goto LABEL_110;
  }

  v70.receiver = a1;
  v70.super_class = (Class)&OBJC_METACLASS___NWMonitor;
  v38 = (__CFString *)objc_msgSend(objc_msgSendSuper2(&v70, sel_alloc), "init");
  __int16 v24 = v38;
  if (!a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v49 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    unint64_t v78 = "+[NWMonitor monitorWithNetworkDescriptionArray:endpoint:parameters:]";
    v50 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v75 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v51 = (os_log_s *)(id)gLogObj;
      os_log_type_t v52 = type;
      if (os_log_type_enabled(v51, type))
      {
        *(_DWORD *)buf = 136446210;
        unint64_t v78 = "+[NWMonitor monitorWithNetworkDescriptionArray:endpoint:parameters:]";
        v53 = "%{public}s super alloc init failed";
        goto LABEL_105;
      }

      goto LABEL_106;
    }

    if (v75)
    {
      os_log_type_t v65 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v52 = type;
      BOOL v66 = os_log_type_enabled(v51, type);
      if (v65)
      {
        if (v66)
        {
          *(_DWORD *)buf = 136446466;
          unint64_t v78 = "+[NWMonitor monitorWithNetworkDescriptionArray:endpoint:parameters:]";
          char v79 = 2082;
          v80 = (const __CFString *)v65;
          os_log_type_t v67 = "%{public}s super alloc init failed, dumping backtrace:%{public}s";
LABEL_93:
          _os_log_impl(&dword_181A5C000, v51, v52, v67, buf, 0x16u);
        }

          free(v8);
          goto LABEL_12;
        }

        if (v40)
        {
          *(_DWORD *)buf = 136446722;
          v84 = "-[NWConcrete_nw_protocol_instance destroy]";
          v85 = 1024;
          *(_DWORD *)v86 = os_unfair_lock_opaque;
          *(_WORD *)&v86[4] = 2048;
          *(void *)&v86[6] = self;
          _os_log_impl( &dword_181A5C000,  v9,  v39,  "%{public}s Flow table is not empty (%u) when protocol instance %p is deallocated, no backtrace",  buf,  0x1Cu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v9 = (os_log_s *)(id)gLogObj;
        dispatch_workloop_t v44 = type[0];
        if (os_log_type_enabled(v9, type[0]))
        {
          *(_DWORD *)buf = 136446722;
          v84 = "-[NWConcrete_nw_protocol_instance destroy]";
          v85 = 1024;
          *(_DWORD *)v86 = os_unfair_lock_opaque;
          *(_WORD *)&v86[4] = 2048;
          *(void *)&v86[6] = self;
          _os_log_impl( &dword_181A5C000,  v9,  v44,  "%{public}s Flow table is not empty (%u) when protocol instance %p is deallocated, backtrace limit exceeded",  buf,  0x1Cu);
        }
      }
    }

    if (!v8) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }

      BOOL v9 = (void *)v4[7];
      goto LABEL_12;
    }

    if (a2 == -1) {
      goto LABEL_11;
    }
    __nwlog_obj();
    int v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v28 = "nw_protocol_instance_copy_options";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (__nwlog_fault(v13, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v17 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v28 = "nw_protocol_instance_copy_options";
          _os_log_impl( &dword_181A5C000,  v14,  v17,  "%{public}s called with null (flow == (_nw_protocol_default_flow))",  buf,  0xCu);
        }

    __break(1u);
  }

    uint64_t v7 = 0LL;
    goto LABEL_12;
  }

  __nwlog_obj();
  id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(void *)&applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(void *)&applier[14] = 1LL;
  *(_WORD *)&applier[22] = 2048;
  uint64_t v23 = 144LL;
  id v18 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v18))
  {
    free(v18);
    goto LABEL_7;
  }

  __break(1u);
}

    uint64_t v7 = 0LL;
    goto LABEL_12;
  }

  __nwlog_obj();
  id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(void *)&applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(void *)&applier[14] = 1LL;
  *(_WORD *)&applier[22] = 2048;
  uint64_t v23 = 144LL;
  id v18 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v18))
  {
    free(v18);
    goto LABEL_7;
  }

  __break(1u);
}

    uint64_t v7 = 0LL;
    goto LABEL_12;
  }

  __nwlog_obj();
  id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(void *)&applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(void *)&applier[14] = 1LL;
  *(_WORD *)&applier[22] = 2048;
  uint64_t v23 = 144LL;
  id v18 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v18))
  {
    free(v18);
    goto LABEL_7;
  }

  __break(1u);
}

    uint64_t v7 = 0LL;
    goto LABEL_12;
  }

  __nwlog_obj();
  id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(void *)&applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(void *)&applier[14] = 1LL;
  *(_WORD *)&applier[22] = 2048;
  uint64_t v23 = 144LL;
  id v18 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v18))
  {
    free(v18);
    goto LABEL_7;
  }

  __break(1u);
}

    uint64_t v7 = 0LL;
    goto LABEL_12;
  }

  __nwlog_obj();
  id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(void *)&applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(void *)&applier[14] = 1LL;
  *(_WORD *)&applier[22] = 2048;
  uint64_t v23 = 144LL;
  id v18 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v18))
  {
    free(v18);
    goto LABEL_7;
  }

  __break(1u);
}

    uint64_t v7 = 0LL;
    goto LABEL_12;
  }

  __nwlog_obj();
  id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(void *)&applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(void *)&applier[14] = 1LL;
  *(_WORD *)&applier[22] = 2048;
  uint64_t v23 = 144LL;
  id v18 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v18))
  {
    free(v18);
    goto LABEL_7;
  }

  __break(1u);
}

    uint64_t v7 = 0LL;
    goto LABEL_12;
  }

  __nwlog_obj();
  id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(void *)&applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(void *)&applier[14] = 1LL;
  *(_WORD *)&applier[22] = 2048;
  uint64_t v23 = 144LL;
  id v18 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v18))
  {
    free(v18);
    goto LABEL_7;
  }

  __break(1u);
}

    uint64_t v7 = 0LL;
    goto LABEL_12;
  }

  __nwlog_obj();
  id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(void *)&applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(void *)&applier[14] = 1LL;
  *(_WORD *)&applier[22] = 2048;
  uint64_t v23 = 144LL;
  id v18 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v18))
  {
    free(v18);
    goto LABEL_7;
  }

  __break(1u);
}

  BOOL v9 = 0LL;
LABEL_96:

  return v9;
}

  return 1LL;
}

        char v2 = 0LL;
LABEL_23:

LABEL_30:
        goto LABEL_31;
      }
    }

    char v2 = 0LL;
    goto LABEL_30;
  }

  char v2 = 0LL;
LABEL_31:

  return v2;
}

  nw_parameters_set_data_mode(v8, 2u);
  nw_parameters_set_https_proxy_is_opaque(*((void **)a1 + 6), 1);
  nw_parameters_set_no_fullstack_fallback(*((void **)a1 + 6), 1);
  a1[156] = 0;
  *(void *)(a1 + 116) = 0xFFFFFFFFLL;
LABEL_50:

  return a1;
}

      close(*(_DWORD *)(*(void *)fds + 4 * v8));
      goto LABEL_12;
    }

    if (!*(_WORD *)(a1 + 84))
    {
      BOOL v57 = 28;
      if (!getsockname(*(_DWORD *)(*(void *)fds + 4 * v8), (sockaddr *)buf, &v57))
      {
        BOOL v9 = buf[1];
        if (buf[1] == 2 || buf[1] == 30) {
          *(_WORD *)(a1 + 84) = *(_WORD *)&buf[2];
        }
      }
    }

    os_log_type_t v12 = tcp_listener_socket_create_with_fd(v9, a1, *(_DWORD *)(*(void *)fds + 4 * v8));
    if (!v12) {
      goto LABEL_11;
    }
    os_log_type_t v13 = v12;
    *(void *)os_log_type_t v12 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = v12;
    dispatch_resume(*(dispatch_object_t *)(v12 + 8));
    *(_BYTE *)(v13 + 20) = 1;
LABEL_12:
    ++v8;
  }

  while (v8 < cnt);
  if (*(void *)fds) {
    free(*(void **)fds);
  }
LABEL_35:
  if (!v7) {
    uint64_t v7 = 2;
  }
  if (*(void *)(a1 + 64))
  {
LABEL_38:
    *(_DWORD *)(a1 + 80) = 2;
    goto LABEL_82;
  }

      char v5 = (char *)*((void *)handle + 14);
      *(void *)buf = MEMORY[0x1895F87A8];
      *(void *)&buf[8] = 0x40000000LL;
      *(void *)&buf[16] = ___ZL38nw_http2_transport_drain_output_framesP27nw_protocol_http2_transport_block_invoke;
      char v19 = &__block_descriptor_tmp_35_38066;
      char v20 = handle;
      nw_hash_table_apply(v5, (uint64_t)buf);
      return;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_output_available";
    id v6 = (char *)_os_log_send_and_compose_impl();
    v21[0] = 16;
    id v17 = 0;
    if (__nwlog_fault(v6, v21, &v17))
    {
      if (v21[0] == 17)
      {
        uint64_t v7 = (os_log_s *)__nwlog_obj();
        char v8 = v21[0];
        if (!os_log_type_enabled(v7, (os_log_type_t)v21[0])) {
          goto LABEL_48;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_output_available";
        BOOL v9 = "%{public}s called with null http2_transport";
        goto LABEL_47;
      }

      if (!v17)
      {
        uint64_t v7 = (os_log_s *)__nwlog_obj();
        char v8 = v21[0];
        if (!os_log_type_enabled(v7, (os_log_type_t)v21[0])) {
          goto LABEL_48;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_output_available";
        BOOL v9 = "%{public}s called with null http2_transport, backtrace limit exceeded";
        goto LABEL_47;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      char v8 = v21[0];
      int v16 = os_log_type_enabled(v7, (os_log_type_t)v21[0]);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_output_available";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null http2_transport, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (v6) {
          goto LABEL_49;
        }
        return;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_output_available";
        BOOL v9 = "%{public}s called with null http2_transport, no backtrace";
LABEL_47:
        _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      }
    }
  }

  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_output_available";
    id v6 = (char *)_os_log_send_and_compose_impl();
    v21[0] = 16;
    id v17 = 0;
    if (v21[0] == 17)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      char v8 = v21[0];
      if (!os_log_type_enabled(v7, (os_log_type_t)v21[0])) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_output_available";
      BOOL v9 = "%{public}s called with null protocol";
      goto LABEL_47;
    }

    if (!v17)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      char v8 = v21[0];
      if (!os_log_type_enabled(v7, (os_log_type_t)v21[0])) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_output_available";
      BOOL v9 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_47;
    }

    os_log_type_t v13 = (char *)__nw_create_backtrace_string();
    uint64_t v7 = (os_log_s *)__nwlog_obj();
    char v8 = v21[0];
    BOOL v14 = os_log_type_enabled(v7, (os_log_type_t)v21[0]);
    if (!v13)
    {
      if (!v14) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_output_available";
      BOOL v9 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_47;
    }

    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_output_available";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v13;
      _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v13);
  }

  nw_http2_transport_session_send(a1);
}

  if (nw_proxy_config_get_int64(v5, (uint64_t)@"HTTPEnable", 1LL))
  {
    os_log_type_t v11 = nw_proxy_config_get_string(v5);
    int64 = nw_proxy_config_get_int64(v5, (uint64_t)@"HTTPPort", 80LL);
    if (v11)
    {
      if (int64)
      {
        host_with_numeric_port = nw_endpoint_create_host_with_numeric_port(v11, int64);
        if (nw_proxy_copy_http_connect_definition::onceToken != -1) {
          dispatch_once(&nw_proxy_copy_http_connect_definition::onceToken, &__block_literal_global_92);
        }
        BOOL v14 = (id)nw_proxy_copy_http_connect_definition::proxy_definition;
        options = nw_proxy_create_options(v14);
        int v16 = nw_proxy_config_create((void *)host_with_numeric_port, options);

        if (!v16) {
          goto LABEL_87;
        }
        v16->os_log_type_t type = 2001;
        nw_proxy_config_apply_common_keys(v16, v5, 1);
        nw_array_append(*(void *)(a1 + 32), v16);
      }
    }
  }

  if (nw_proxy_config_get_int64(v5, (uint64_t)@"HTTPSEnable", 1LL))
  {
    id v17 = nw_proxy_config_get_string(v5);
    id v18 = nw_proxy_config_get_int64(v5, (uint64_t)@"HTTPSPort", 443LL);
    if (v17)
    {
      char v19 = v18;
      if (v18)
      {
        char v20 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_protocol_stack);
        if (nw_proxy_copy_http_connect_definition::onceToken != -1) {
          dispatch_once(&nw_proxy_copy_http_connect_definition::onceToken, &__block_literal_global_92);
        }
        os_log_type_t v21 = (id)nw_proxy_copy_http_connect_definition::proxy_definition;
        v22 = nw_proxy_create_options(v21);
        nw_protocol_stack_append_application_protocol(v20, v22);

        if (nw_proxy_config_get_int64(v5, (uint64_t)@"HTTPSOverTLSEnable", 0LL))
        {
          uint64_t v23 = (void *)nw_protocol_boringssl_copy_definition();
          __int16 v24 = nw_protocol_create_options(v23);

          nw_protocol_stack_append_application_protocol(v20, v24);
          v25 = 4002;
        }

        else
        {
          v25 = 4001;
        }

        os_log_type_t v26 = nw_endpoint_create_host_with_numeric_port(v17, v19);
        id v27 = nw_proxy_config_create_with_stack((void *)v26, v20);

        if (!v27) {
          goto LABEL_86;
        }
        v27->os_log_type_t type = v25;
        nw_proxy_config_apply_common_keys(v27, v5, 1);
        if (nw_proxy_config_get_int64(v5, (uint64_t)@"HTTPSTransparentEnable", 0LL)
          || nw_proxy_config_get_int64(v5, (uint64_t)@"HTTPSOverTLSEnable", 0LL))
        {
          *((_BYTE *)v27 + 171) |= 0x10u;
        }

        os_log_type_t v28 = nw_proxy_config_get_string(v5);
        if (v28 || (os_log_type_t v28 = nw_proxy_config_get_string(v5)) != 0LL || (os_log_type_t v28 = nw_proxy_config_get_string(v5)) != 0LL)
        {
          os_log_type_t v29 = (OS_nw_authentication_credential *)-[NWConcrete_nw_authentication_credential initWithType:]( objc_alloc(&OBJC_CLASS___NWConcrete_nw_authentication_credential),  1);
          credential = v27->credential;
          v27->credential = v29;

          nw_authentication_credential_set_username(v27->credential, v28);
          v31 = nw_proxy_config_get_string(v5);
          if (v31 || (v31 = nw_proxy_config_get_string(v5)) != 0LL || (v31 = nw_proxy_config_get_string(v5)) != 0LL) {
            nw_authentication_credential_set_password(v27->credential, v31);
          }
        }

        nw_array_append(*(void *)(a1 + 32), v27);
      }
    }
  }

  if (nw_proxy_config_get_int64(v5, (uint64_t)@"SOCKSEnable", 1LL))
  {
    os_log_type_t v32 = nw_proxy_config_get_string(v5);
    BOOL v33 = nw_proxy_config_get_int64(v5, (uint64_t)@"SOCKSPort", 0LL);
    if (v32)
    {
      if (v33)
      {
        char v20 = (NWConcrete_nw_protocol_stack *)nw_endpoint_create_host_with_numeric_port(v32, v33);
        dispatch_workloop_t v34 = nw_proxy_config_get_string(v5);
        if (!v34) {
          goto LABEL_45;
        }
        v35 = (void *)_CFXPCCreateXPCObjectFromCFObject();
        string_ptr = xpc_string_get_string_ptr(v35);
        if (!strcmp(v34, string_ptr))
        {
          if (nw_protocol_socksv4_copy_definition::onceToken != -1) {
            dispatch_once(&nw_protocol_socksv4_copy_definition::onceToken, &__block_literal_global_44241);
          }
          if (nw_protocol_socksv4_copy_definition::definition) {
            v38 = (nw_protocol_definition *)os_retain((void *)nw_protocol_socksv4_copy_definition::definition);
          }
          else {
            v38 = 0LL;
          }
          BOOL v42 = nw_framer_create_options(v38);
          v40 = nw_proxy_config_create(v20, v42);

          if (v40)
          {
            v40->os_log_type_t type = 3001;
LABEL_72:

            goto LABEL_73;
          }
        }

        else
        {
          if (strcmp(v34, "shoes"))
          {

LABEL_45:
            if (nw_protocol_socksv5_copy_definition::onceToken[0] != -1) {
              dispatch_once(nw_protocol_socksv5_copy_definition::onceToken, &__block_literal_global_83827);
            }
            if (nw_protocol_socksv5_copy_definition::definition) {
              v37 = (nw_protocol_definition *)os_retain((void *)nw_protocol_socksv5_copy_definition::definition);
            }
            else {
              v37 = 0LL;
            }
            os_log_type_t v39 = nw_framer_create_options(v37);
            v40 = nw_proxy_config_create(v20, v39);

            if (v40)
            {
              v40->os_log_type_t type = 3002;
LABEL_73:
              nw_proxy_config_apply_common_keys(v40, v5, 1);
              *((_BYTE *)v40 + 170) |= 8u;
              uint64_t v55 = nw_proxy_config_get_string(v5);
              if (v55 || (uint64_t v55 = nw_proxy_config_get_string(v5)) != 0LL)
              {
                v56 = (OS_nw_authentication_credential *)-[NWConcrete_nw_authentication_credential initWithType:]( objc_alloc(&OBJC_CLASS___NWConcrete_nw_authentication_credential),  1);
                BOOL v57 = v40->credential;
                v40->credential = v56;

                nw_authentication_credential_set_username(v40->credential, v55);
                v58 = nw_proxy_config_get_string(v5);
                if (v58 || (v58 = nw_proxy_config_get_string(v5)) != 0LL) {
                  nw_authentication_credential_set_password(v40->credential, v58);
                }
              }

              nw_array_append(*(void *)(a1 + 32), v40);

              goto LABEL_79;
            }

            goto LABEL_86;
          }

          else {
            os_log_type_t v41 = 0LL;
          }
          char v43 = nw_protocol_create_options(v41);

          dispatch_workloop_t v44 = nw_proxy_config_create(v20, v43);
          v40 = v44;
          if (v44)
          {
            v44->os_log_type_t type = 3003;
            *((_BYTE *)v44 + 170) |= 0x10u;
            *((_BYTE *)v44 + 172) |= 2u;
            __uint64_t v76 = v43;
            v45 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_protocol_stack);
            os_log_type_t v46 = nw_protocol_shoes_copy_definition();
            os_log_type_t v47 = nw_protocol_create_options(v46);

            if (nw_proxy_config_get_int64(v5, (uint64_t)@"SHOESUDPAssociate", 0LL) >= 1LL
              && _os_feature_enabled_impl())
            {
              nw_protocol_shoes_parameters_set_udp_associate_supported(v47);
              v48 = nw_udp_create_options();
              id v49 = nw_protocol_copy_quic_definition();
              nw_proxy_config_set_alternate_protocol_stack(v40, v45, v49, 3u);
              v50 = v48;
            }

            else
            {
              v51 = (nw_protocol_definition *)nw_shoes_copy_udp_framer_definition();
              os_log_type_t v52 = nw_framer_create_options(v51);
              nw_protocol_stack_append_application_protocol(v45, v52);

              v50 = nw_tcp_create_options();
              nw_tcp_options_set_no_delay(v50, 1);
              id v49 = v51;
            }

            nw_protocol_shoes_parameters_set_udp(v47);
            nw_protocol_stack_append_application_protocol(v45, v47);
            nw_protocol_stack_set_transport_protocol((nw_protocol_stack_t)v45, v50);
            v53 = nw_protocol_copy_udp_definition();
            nw_proxy_config_set_alternate_protocol_stack(v40, v45, v53, 4u);

            BOOL v54 = (char *)nw_proxy_config_get_string(v5);
            if (v54)
            {
              nw_protocol_shoes_parameters_set_fixed_bundle_id(v76, v54);
              *((_BYTE *)v40 + 170) |= 0x40u;
            }

            goto LABEL_72;
          }
        }

LABEL_86:
        goto LABEL_87;
      }
    }
  }
}
}

  if (*(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL)) {
    return 0LL;
  }
  os_log_type_t v15 = *(void *)(a2 + 32);
  int v16 = *(void **)(a2 + 40);
  if (v15)
  {
    *(void *)(v15 + 40) = v16;
    int v16 = *(void **)(a2 + 40);
  }

  else
  {
    *(void *)(a1[9] + 24LL) = v16;
  }

  *int v16 = v15;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  nw_frame_finalize(a2);
  return *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) == 0;
}
}

  v15[0] = MEMORY[0x1895F87A8];
  v15[1] = 3221225472LL;
  v15[2] = __111__NWURLLoader_makeLoaderForRequest_bodyKnownSize_configuration_queue_client_protocolClasses_completionHandler___block_invoke_2;
  v15[3] = &unk_189BC91E8;
  os_log_type_t v12 = (dispatch_queue_s *)a1[9];
  os_log_type_t v13 = a1[10];
  int v16 = v2;
  id v17 = v13;
  BOOL v14 = v2;
  dispatch_async(v12, v15);
}

  os_log_type_t v12 = 0LL;
LABEL_12:
  os_log_type_t v13 = size + v8 + v10 + v12;
  BOOL v14 = v13 + 5;
  *a3 = v13 + 5;
  if (v13 == -5LL)
  {
    __nwlog_obj();
    v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v40, OS_LOG_TYPE_ERROR);
    *(_DWORD *)applier = 136446210;
    *(void *)&applier[4] = "strict_calloc";
    os_log_type_t v41 = (void *)_os_log_send_and_compose_impl();

    uint64_t result = __nwlog_abort((uint64_t)v41);
    if (result) {
      goto LABEL_86;
    }
    free(v41);
  }

  os_log_type_t v15 = (char *)calloc(1uLL, v14);
  if (v15)
  {
LABEL_14:
    int v16 = (dispatch_data_s *)*(id *)a2;
    id v17 = v16;
    if (size > 0xFF) {
      goto LABEL_22;
    }
    *os_log_type_t v15 = size;
    *(void *)os_log_type_t type = 0LL;
    v56 = type;
    BOOL v57 = 0x2000000000LL;
    v58 = 0LL;
    v51 = 0LL;
    os_log_type_t v52 = &v51;
    v53 = 0x2000000000LL;
    BOOL v54 = v15 + 1;
    if (v16)
    {
      *(void *)applier = MEMORY[0x1895F87A8];
      *(void *)&applier[8] = 0x40000000LL;
      *(void *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
      os_log_type_t v60 = &unk_189BBF598;
      v62 = &v51;
      os_log_type_t v63 = size;
      BOOL v61 = type;
      dispatch_data_apply(v16, applier);
      id v18 = *((void *)v56 + 3);
    }

    else
    {
      id v18 = 0LL;
    }

    _Block_object_dispose(&v51, 8);
    _Block_object_dispose(type, 8);
    if (v18 == size)
    {

      char v19 = (dispatch_data_s *)*(id *)(a2 + 8);
      char v20 = v19;
      if (v8 > 0xFF) {
        goto LABEL_31;
      }
      os_log_type_t v21 = &v15[size + 1];
      *os_log_type_t v21 = v8;
      v22 = v21 + 1;
      *(void *)os_log_type_t type = 0LL;
      v56 = type;
      BOOL v57 = 0x2000000000LL;
      v58 = 0LL;
      v51 = 0LL;
      os_log_type_t v52 = &v51;
      v53 = 0x2000000000LL;
      BOOL v54 = v22;
      if (v19)
      {
        *(void *)applier = MEMORY[0x1895F87A8];
        *(void *)&applier[8] = 0x40000000LL;
        *(void *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
        os_log_type_t v60 = &unk_189BBF598;
        v62 = &v51;
        os_log_type_t v63 = v8;
        BOOL v61 = type;
        dispatch_data_apply(v19, applier);
        uint64_t v23 = *((void *)v56 + 3);
      }

      else
      {
        uint64_t v23 = 0LL;
      }

      _Block_object_dispose(&v51, 8);
      _Block_object_dispose(type, 8);
      if (v23 == v8)
      {

        v25 = (dispatch_data_s *)*(id *)(a2 + 16);
        os_log_type_t v26 = v25;
        if (v10 > 0xFF) {
          goto LABEL_42;
        }
        v22[v8] = v10;
        id v27 = (uint64_t)&v22[v8 + 1];
        *(void *)os_log_type_t type = 0LL;
        v56 = type;
        BOOL v57 = 0x2000000000LL;
        v58 = 0LL;
        v51 = 0LL;
        os_log_type_t v52 = &v51;
        v53 = 0x2000000000LL;
        BOOL v54 = (char *)v27;
        if (v25)
        {
          *(void *)applier = MEMORY[0x1895F87A8];
          *(void *)&applier[8] = 0x40000000LL;
          *(void *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
          os_log_type_t v60 = &unk_189BBF598;
          v62 = &v51;
          os_log_type_t v63 = v10;
          BOOL v61 = type;
          dispatch_data_apply(v25, applier);
          os_log_type_t v28 = *((void *)v56 + 3);
        }

        else
        {
          os_log_type_t v28 = 0LL;
        }

        _Block_object_dispose(&v51, 8);
        _Block_object_dispose(type, 8);
        if (v28 == v10)
        {

          v31 = (dispatch_data_s *)*(id *)(a2 + 24);
          os_log_type_t v32 = v31;
          if (v12 <= 0xFF)
          {
            BOOL v33 = (_BYTE *)(v27 + v10);
            *BOOL v33 = v12;
            dispatch_workloop_t v34 = (uint64_t)(v33 + 1);
            if (nw_dispatch_data_copyout(v31, v34, v12) == v12)
            {

              *(_BYTE *)(v34 + v12) = *(_BYTE *)(a2 + 32);
              goto LABEL_36;
            }
          }

          __nwlog_obj();
          os_log_type_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)applier = 136446210;
            *(void *)&applier[4] = "qpod_options_serialize";
            _os_log_impl( &dword_181A5C000,  v29,  OS_LOG_TYPE_ERROR,  "%{public}s failed to serialize dcid in qpod options",  applier,  0xCu);
          }
        }

        else
        {
LABEL_42:

          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v29 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)applier = 136446210;
            *(void *)&applier[4] = "qpod_options_serialize";
            _os_log_impl( &dword_181A5C000,  v29,  OS_LOG_TYPE_ERROR,  "%{public}s failed to serialize scid in qpod options",  applier,  0xCu);
          }
        }
      }

      else
      {
LABEL_31:

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v29 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&applier[4] = "qpod_options_serialize";
          _os_log_impl( &dword_181A5C000,  v29,  OS_LOG_TYPE_ERROR,  "%{public}s failed to serialize server_secret in qpod options",  applier,  0xCu);
        }
      }
    }

    else
    {
LABEL_22:

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v24 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "qpod_options_serialize";
        _os_log_impl( &dword_181A5C000,  v24,  OS_LOG_TYPE_ERROR,  "%{public}s failed to serialize client_secret in qpod options",  applier,  0xCu);
      }

      if (!v15) {
        goto LABEL_35;
      }
    }

    free(backtrace_string);
    if (!v3) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }

  __nwlog_obj();
  os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v19 = "nw_queue_register_dispatch_queue";
  id v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  int v16 = 0;
  if (__nwlog_fault(v3, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        char v19 = "nw_queue_register_dispatch_queue";
        _os_log_impl(&dword_181A5C000, v4, v12, "%{public}s called with null queue", buf, 0xCu);
      }

      goto LABEL_18;
    }

    if (!v16)
    {
      __nwlog_obj();
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        char v19 = "nw_queue_register_dispatch_queue";
        _os_log_impl( &dword_181A5C000,  v4,  v15,  "%{public}s called with null queue, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_18;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v13 = type;
    BOOL v14 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        char v19 = "nw_queue_register_dispatch_queue";
        _os_log_impl(&dword_181A5C000, v4, v13, "%{public}s called with null queue, no backtrace", buf, 0xCu);
      }

      goto LABEL_18;
    }

    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      char v19 = "nw_queue_register_dispatch_queue";
      char v20 = 2082;
      os_log_type_t v21 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v4,  v13,  "%{public}s called with null queue, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_11;
  }

    free(v7);
    goto LABEL_12;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v11 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    os_log_type_t v12 = v2[2]._os_unfair_lock_opaque;
    *(_DWORD *)buf = 136446466;
    v35 = "nw_fd_wrapper_guard";
    id v36 = 1024;
    *(_DWORD *)v37 = v12;
    _os_log_impl(&dword_181A5C000, v11, OS_LOG_TYPE_ERROR, "%{public}s Cannot guard invalid fd %d", buf, 0x12u);
  }

  os_unfair_lock_unlock(v2 + 3);
  os_log_type_t v13 = 0LL;
LABEL_18:

  return v13;
}

  return v6;
}

    free(v9);
    goto LABEL_12;
  }

  os_log_type_t v12 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v13 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v23 = "nw_path_shared_necp_fd";
    __int16 v24 = 1024;
    v25 = v12;
    _os_log_impl(&dword_181A5C000, v13, OS_LOG_TYPE_ERROR, "%{public}s necp_open failed %{darwin.errno}d", buf, 0x12u);
  }

LABEL_2:
  uint64_t v4 = *(unsigned int *)(globals_for_path + 132);
  os_unfair_lock_unlock(v3);

  return v4;
}
}

          free(v8);
          goto LABEL_12;
        }

        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v32 = "nw_path_copy_description";
          _os_log_impl( &dword_181A5C000,  v9,  v18,  "%{public}s [desc getCString:maxLength:encoding:] failed, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v9 = (os_log_s *)(id)gLogObj;
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v32 = "nw_path_copy_description";
          _os_log_impl( &dword_181A5C000,  v9,  v21,  "%{public}s [desc getCString:maxLength:encoding:] failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v8) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }

  if (!a5)
  {
    if (!a6) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }

  v23 |= 8u;
  LOWORD(v61) = v23;
  if (a6) {
LABEL_15:
  }
    *(_OWORD *)out = *a6;
LABEL_16:
  if (!a2)
  {
    v25 = 36LL;
    if (!v17) {
      goto LABEL_38;
    }
    goto LABEL_29;
  }

  WORD1(v61) = 1;
  if (nw_parameters_get_upper_transport_protocol(*((void **)v16 + 1)) == 253)
  {
    __int16 v24 = 3;
LABEL_19:
    DWORD1(v61) = v24;
    *((void *)&v61 + 1) = 0x9800000001LL;
    goto LABEL_28;
  }

  if ((nw_path_get_nexus_protocol_level(*((void **)v16 + 6)) & 0xFFFFFFFE) == 2)
  {
    ip_protocol = a8;
    if (!a8) {
      ip_protocol = nw_parameters_get_ip_protocol(*((void **)v16 + 1));
    }
    if (ip_protocol == 6)
    {
      __int16 v24 = 1;
      goto LABEL_19;
    }

    if (ip_protocol == 17)
    {
      __int16 v24 = 2;
      goto LABEL_19;
    }
  }

  return v7;
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  if ((v3 & 0x20) != 0 && (BOOL v14 = *(unsigned __int8 *)(v2 + 712), *(_BYTE *)(v2 + 712)))
  {
    if (v14 >= 3)
    {
      int v16 = 0LL;
      id v17 = v14 & 1;
      if ((v14 & 1) == 0) {
        id v17 = 2LL;
      }
      os_log_type_t v15 = v14 - v17;
      id v18 = (__int32 *)(v2 + 380);
      char v19 = v15;
      do
      {
        v50.val[0].i32[0] = *(v18 - 7);
        v50.val[0].i32[1] = *(v18 - 1);
        v50.val[1].i32[0] = *(v18 - 6);
        v50.val[1].i32[1] = *v18;
        char v20 = (float *)&v49[4 * (v16 & 0xFFFFFFFC) + 44];
        vst2_f32(v20, v50);
        v18 += 12;
        v16 += 4LL;
        v19 -= 2LL;
      }

      while (v19);
    }

    else
    {
      os_log_type_t v15 = 0LL;
    }

    os_log_type_t v21 = 2 * v15;
    v22 = (uint64_t *)(v2 + 24 * v15 + 352);
    uint64_t v7 = 204LL;
    do
    {
      uint64_t v23 = *v22;
      v22 += 3;
      *(void *)&v49[4 * (v21 & 0xFFFFFFFE) + 44] = v23;
      ++v15;
      v21 += 2LL;
    }

    while (v15 < v14);
  }

  else
  {
    uint64_t v7 = 204LL;
  }

    free(v10);
    goto LABEL_12;
  }

      id v18 = (void *)*((void *)v5 + 5);
      *((void *)v5 + 5) = 0LL;

      char v19 = (void *)*((void *)v5 + 6);
      *((void *)v5 + 6) = 0LL;

      block[0] = v12;
      block[1] = 3221225472LL;
      block[2] = __nw_interface_status_monitor_set_update_handler_block_invoke_4;
      block[3] = &unk_189BC87B8;
      os_log_type_t v46 = v8;
      os_log_type_t v47 = source;
      dispatch_async(v6, block);

      goto LABEL_12;
    }

    __nwlog_obj();
    *(_DWORD *)os_log_type_t v63 = 136446210;
    os_log_type_t v64 = "nw_channel_create_interface_advisory_source";
    os_log_type_t v39 = (char *)_os_log_send_and_compose_impl();
    v58 = OS_LOG_TYPE_ERROR;
    BOOL v57 = 0;
    if (__nwlog_fault(v39, &v58, &v57))
    {
      if (v58 == OS_LOG_TYPE_FAULT)
      {
        v40 = (os_log_s *)__nwlog_obj();
        os_log_type_t v41 = v58;
        if (os_log_type_enabled(v40, v58))
        {
          *(_DWORD *)os_log_type_t v63 = 136446210;
          os_log_type_t v64 = "nw_channel_create_interface_advisory_source";
          BOOL v42 = "%{public}s called with null channel";
LABEL_81:
          _os_log_impl(&dword_181A5C000, v40, v41, v42, v63, 0xCu);
        }
      }

      else if (v57)
      {
        char v43 = (char *)__nw_create_backtrace_string();
        v40 = (os_log_s *)__nwlog_obj();
        os_log_type_t v41 = v58;
        dispatch_workloop_t v44 = os_log_type_enabled(v40, v58);
        if (v43)
        {
          if (v44)
          {
            *(_DWORD *)os_log_type_t v63 = 136446466;
            os_log_type_t v64 = "nw_channel_create_interface_advisory_source";
            os_log_type_t v65 = 2082;
            BOOL v66 = v43;
            _os_log_impl( &dword_181A5C000,  v40,  v41,  "%{public}s called with null channel, dumping backtrace:%{public}s",  v63,  0x16u);
          }

          free(v43);
          goto LABEL_82;
        }

        if (v44)
        {
          *(_DWORD *)os_log_type_t v63 = 136446210;
          os_log_type_t v64 = "nw_channel_create_interface_advisory_source";
          BOOL v42 = "%{public}s called with null channel, no backtrace";
          goto LABEL_81;
        }
      }

      else
      {
        v40 = (os_log_s *)__nwlog_obj();
        os_log_type_t v41 = v58;
        if (os_log_type_enabled(v40, v58))
        {
          *(_DWORD *)os_log_type_t v63 = 136446210;
          os_log_type_t v64 = "nw_channel_create_interface_advisory_source";
          BOOL v42 = "%{public}s called with null channel, backtrace limit exceeded";
          goto LABEL_81;
        }
      }
    }

  objc_sync_exit(v7);
  return v9;
}

LABEL_53:
  if ((v2[34]._os_unfair_lock_opaque & 8) != 0) {
    goto LABEL_13;
  }
LABEL_54:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v36 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v108 = "nw_context_activate";
  v37 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v105 = 0;
  if (__nwlog_fault(v37, &type, &v105))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v39 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)buf = 136446210;
        v108 = "nw_context_activate";
        _os_log_impl(&dword_181A5C000, v38, v39, "%{public}s dispatch_workloop_create failed", buf, 0xCu);
      }

    if (v19) {
      free(v19);
    }

LABEL_56:
    a1 = 0LL;
    goto LABEL_18;
  }

  *((_DWORD *)a1[13] + 16) = getpid();
  *((_DWORD *)a1[13] + 17) = getuid();
  uint64_t v7 = a1[13];
  a1[12] = (id)((unint64_t)a1[12] | 0x8000040);
  v37 = 0LL;
  memset(buffer, 0, sizeof(buffer));
  if (proc_pidinfo(v7[16], 17, 1uLL, buffer, 56) == 56)
  {
    char v8 = buffer[0];
    *(_OWORD *)((char *)a1[13] + 24) = buffer[0];
    *(_OWORD *)((char *)a1[13] + 8) = v8;
  }

  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v9 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      os_log_type_t v10 = *((_DWORD *)a1[13] + 16);
      *(_DWORD *)buf = 136446466;
      BOOL v33 = "-[NWConcrete_nw_parameters initWithStack:]";
      dispatch_workloop_t v34 = 1024;
      v35 = v10;
      _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_ERROR,  "%{public}s Failed to convert from local PID (%d) to UUID",  buf,  0x12u);
    }
  }

  os_log_type_t v11 = (const char *)nw_setting_multipath_service_type;
  networkd_settings_init();
  if (sCachedSettings)
  {
    pthread_mutex_lock(&sSettingsMutex);
    if (sCachedSettings) {

    }
      int64 = xpc_dictionary_get_int64((xpc_object_t)sCachedSettings, v11);
    else {
      int64 = 0;
    }
    pthread_mutex_unlock(&sSettingsMutex);
  }

  else
  {
    int64 = 0;
  }

  *(_DWORD *)((char *)a1[13] + 103) = int64;
  objc_storeStrong(a1 + 19, a2);
  if (nw_context_copy_implicit_context::onceToken != -1) {
    dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
  }
  objc_storeStrong((id *)a1[13] + 17, (id)nw_context_copy_implicit_context::implicit_context);
LABEL_18:

  return a1;
}

LABEL_54:
      if (v10) {
        free(v10);
      }
      return 0LL;
    }

    if (!v19)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_protocol_definition_is_equal_unsafe";
        os_log_type_t v13 = "%{public}s called with null definition1, backtrace limit exceeded";
        goto LABEL_52;
      }

      goto LABEL_53;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v12 = type;
    int v16 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_protocol_definition_is_equal_unsafe";
        os_log_type_t v13 = "%{public}s called with null definition1, no backtrace";
        goto LABEL_52;
      }

      goto LABEL_53;
    }

    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      v22 = "nw_protocol_definition_is_equal_unsafe";
      uint64_t v23 = 2082;
      __int16 v24 = backtrace_string;
      id v17 = "%{public}s called with null definition1, dumping backtrace:%{public}s";
LABEL_42:
      _os_log_impl(&dword_181A5C000, v11, v12, v17, buf, 0x16u);
    }

      free(v39);
    }
  }

    goto LABEL_54;
  }

  if (!(_BYTE)v67)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v41 = (os_log_s *)(id)gLogObj;
    v48 = type[0];
    if (os_log_type_enabled(v41, type[0]))
    {
      if (mode > 5) {
        id v49 = "unknown-mode";
      }
      else {
        id v49 = off_189BBBBC0[mode];
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_endpoint_transform_add_children";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v49;
      *(_WORD *)&buf[22] = 2082;
      __uint64_t v73 = (uint64_t (*)(uint64_t, uint64_t))"transform";
      _os_log_impl( &dword_181A5C000,  v41,  v48,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
    }

    goto LABEL_53;
  }

  dispatch_workloop_t v44 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v41 = (os_log_s *)(id)gLogObj;
  v45 = type[0];
  os_log_type_t v46 = os_log_type_enabled(v41, type[0]);
  if (!v44)
  {
    if (v46)
    {
      if (mode > 5) {
        v50 = "unknown-mode";
      }
      else {
        v50 = off_189BBBBC0[mode];
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_endpoint_transform_add_children";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v50;
      *(_WORD *)&buf[22] = 2082;
      __uint64_t v73 = (uint64_t (*)(uint64_t, uint64_t))"transform";
      _os_log_impl( &dword_181A5C000,  v41,  v45,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
    }

    goto LABEL_53;
  }

  if (v46)
  {
    if (mode > 5) {
      os_log_type_t v47 = "unknown-mode";
    }
    else {
      os_log_type_t v47 = off_189BBBBC0[mode];
    }
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_endpoint_transform_add_children";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v47;
    *(_WORD *)&buf[22] = 2082;
    __uint64_t v73 = (uint64_t (*)(uint64_t, uint64_t))"transform";
    LOWORD(v74) = 2082;
    *(void *)((char *)&v74 + 2) = v44;
    _os_log_impl( &dword_181A5C000,  v41,  v45,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
  }

  free(v44);
  if (v40) {
    goto LABEL_55;
  }
LABEL_56:
}

    free(backtrace_string);
    goto LABEL_66;
  }

  uint64_t v7 = nw_parameters_copy_context(v5[2]);
  char v8 = nw_path_shared_necp_fd(v7);

  if (v8 < 0)
  {
LABEL_68:
    os_log_type_t v10 = 0LL;
    goto LABEL_69;
  }

  os_log_type_t v52 = 0LL;
  v50 = 0u;
  v51 = 0u;
  memset(v49, 0, sizeof(v49));
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  BOOL v9 = necp_client_action();
  os_log_type_t v10 = v9 == 0;
  if (!v9)
  {
    BOOL v14 = *(_OWORD *)&v49[16];
    *(_OWORD *)a2 = *(_OWORD *)v49;
    *(_OWORD *)(a2 + 16) = v14;
    os_log_type_t v15 = *(void *)((char *)&v51 + 4);
    *(_DWORD *)(a2 + 108) = HIDWORD(v51);
    *(void *)(a2 + 100) = v15;
    if (a3) {
      *a3 = v52;
    }
    goto LABEL_69;
  }

  os_log_type_t v11 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  if (v11 == 45 || v11 == 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v13 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      dispatch_workloop_t v44 = "nw_path_fillout_route_stats";
      v45 = 1024;
      os_log_type_t v46 = v11;
      _os_log_impl( &dword_181A5C000,  v13,  OS_LOG_TYPE_DEBUG,  "%{public}s NECP_CLIENT_ACTION_COPY_ROUTE_STATISTICS %{darwin.errno}d",  buf,  0x12u);
    }

    goto LABEL_69;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  int v16 = (id)gLogObj;
  *(_DWORD *)buf = 136446466;
  dispatch_workloop_t v44 = "nw_path_fillout_route_stats";
  v45 = 1024;
  os_log_type_t v46 = v11;
  id v17 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v41 = 0;
  if (__nwlog_fault(v17, &type, &v41))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v19 = (os_log_s *)(id)gLogObj;
      char v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446466;
        dispatch_workloop_t v44 = "nw_path_fillout_route_stats";
        v45 = 1024;
        os_log_type_t v46 = v11;
        _os_log_impl( &dword_181A5C000,  v19,  v20,  "%{public}s NECP_CLIENT_ACTION_COPY_ROUTE_STATISTICS %{darwin.errno}d",  buf,  0x12u);
      }
    }

    else if (v41)
    {
      os_log_type_t v21 = __nw_create_backtrace_string();
      if (v21)
      {
        v22 = (char *)v21;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v23 = (os_log_s *)(id)gLogObj;
        __int16 v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446722;
          dispatch_workloop_t v44 = "nw_path_fillout_route_stats";
          v45 = 1024;
          os_log_type_t v46 = v11;
          os_log_type_t v47 = 2082;
          v48 = v22;
          _os_log_impl( &dword_181A5C000,  v23,  v24,  "%{public}s NECP_CLIENT_ACTION_COPY_ROUTE_STATISTICS %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
        }

        free(v22);
        if (v17) {
          goto LABEL_33;
        }
        goto LABEL_69;
      }

      __nwlog_obj();
      char v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446466;
        dispatch_workloop_t v44 = "nw_path_fillout_route_stats";
        v45 = 1024;
        os_log_type_t v46 = v11;
        _os_log_impl( &dword_181A5C000,  v19,  v26,  "%{public}s NECP_CLIENT_ACTION_COPY_ROUTE_STATISTICS %{darwin.errno}d, no backtrace",  buf,  0x12u);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v19 = (os_log_s *)(id)gLogObj;
      v25 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446466;
        dispatch_workloop_t v44 = "nw_path_fillout_route_stats";
        v45 = 1024;
        os_log_type_t v46 = v11;
        _os_log_impl( &dword_181A5C000,  v19,  v25,  "%{public}s NECP_CLIENT_ACTION_COPY_ROUTE_STATISTICS %{darwin.errno}d, backtrace limit exceeded",  buf,  0x12u);
      }
    }
  }

  if (v17) {
LABEL_33:
  }
    free(v17);
LABEL_69:

  return v10;
}

          if (!v19) {
            goto LABEL_58;
          }
          goto LABEL_54;
        }

    free(backtrace_string);
    goto LABEL_72;
  }

  if ((v1[140] & 2) != 0)
  {
    if (__nwlog_activity_log::onceToken != -1) {
      dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
    }
    char v8 = (os_log_s *)(id)gactivityLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      v31 = (const char *)v2;
      _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_DEBUG,  "Not checking duration threshold for lightweight activity %{public}@",  buf,  0xCu);
    }

    goto LABEL_16;
  }

  duration = nw_activity_get_duration(v1);
  uint64_t v4 = nw_activity_duration_threshold_for_label(v2[29], v2[28]);
  if (v4 == -1LL)
  {
    if (__nwlog_activity_log::onceToken != -1) {
      dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
    }
    char v8 = (os_log_s *)(id)gactivityLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      v31 = (const char *)v2;
      _os_log_impl(&dword_181A5C000, v8, OS_LOG_TYPE_DEBUG, "No threshold for activity %{public}@", buf, 0xCu);
    }

  if ((v5 & 0x80) != 0)
  {
    if (!a1->__r_.__value_.__l.__size_) {
LABEL_57:
    }
      std::string::__assign_external(a1, "application/octet-stream", 0x18uLL);
  }

  else if (!(_BYTE)v5)
  {
    goto LABEL_57;
  }

    free(v22);
    if (!v16) {
      return;
    }
LABEL_73:
    free(v16);
    return;
  }

  BOOL v9 = os_retain(object);
  os_log_type_t v10 = *(_BYTE *)(v5 + 568);
  if ((v10 & 1) != 0)
  {
    os_log_type_t v11 = *(void **)(v5 + 560);
    if (v11)
    {
      os_release(v11);
      os_log_type_t v10 = *(_BYTE *)(v5 + 568);
    }
  }

  *(void *)(v5 + 560) = v9;
  *(_BYTE *)(v5 + 568) = v10 | 1;
  os_log_type_t v12 = nw_http_metadata_copy_request(object);
  else {
    os_log_type_t v13 = 0;
  }
  *(_BYTE *)(v5 + 692) = *(_BYTE *)(v5 + 692) & 0xFD | v13;
  else {
    BOOL v14 = 0;
  }
  if (a4) {
    os_log_type_t v15 = 0;
  }
  else {
    os_log_type_t v15 = 8;
  }
  *(_BYTE *)(v5 + 692) = v14 | v15 | *(_BYTE *)(v5 + 692) & 0xF3;
  (*(void (**)(uint64_t, uint64_t, void *))(a5 + 16))(a5, 1LL, object);
  if (v12) {
    os_release(v12);
  }
}

    goto LABEL_54;
  }

  id v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(v6 + 24);
  if (!v7)
  {
    __nwlog_obj();
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v45 = "-[NWAccumulation updateWithState:atTime:]_block_invoke";
    BOOL v33 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v42 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      dispatch_workloop_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v35 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        v45 = "-[NWAccumulation updateWithState:atTime:]_block_invoke";
        id v36 = "%{public}s called with null _durations";
        goto LABEL_52;
      }
    }

    else
    {
      if (v42)
      {
        v40 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        dispatch_workloop_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v35 = type;
        os_log_type_t v41 = os_log_type_enabled(v34, type);
        if (v40)
        {
          if (v41)
          {
            *(_DWORD *)buf = 136446466;
            v45 = "-[NWAccumulation updateWithState:atTime:]_block_invoke";
            os_log_type_t v46 = 2082;
            os_log_type_t v47 = v40;
            _os_log_impl( &dword_181A5C000,  v34,  v35,  "%{public}s called with null _durations, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v40);
          if (!v33) {
            return;
          }
LABEL_55:
          free(v33);
          return;
        }

        if (!v41) {
          goto LABEL_53;
        }
        *(_DWORD *)buf = 136446210;
        v45 = "-[NWAccumulation updateWithState:atTime:]_block_invoke";
        id v36 = "%{public}s called with null _durations, no backtrace";
        goto LABEL_52;
      }

      __nwlog_obj();
      dispatch_workloop_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v35 = type;
      if (os_log_type_enabled(v34, type))
      {
        *(_DWORD *)buf = 136446210;
        v45 = "-[NWAccumulation updateWithState:atTime:]_block_invoke";
        id v36 = "%{public}s called with null _durations, backtrace limit exceeded";
        goto LABEL_52;
      }
    }

    goto LABEL_53;
  }

  if (!*(void *)(v6 + 32) || (char v8 = *(double *)(v6 + 40), v8 == 0.0))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v12 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      os_log_type_t v13 = *(char **)(a1 + 32);
      BOOL v14 = *(double *)(a1 + 40);
      os_log_type_t v15 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 136446978;
      v45 = "-[NWAccumulation updateWithState:atTime:]_block_invoke";
      os_log_type_t v46 = 2112;
      os_log_type_t v47 = v13;
      v48 = 2112;
      id v49 = v14;
      v50 = 2048;
      v51 = v15;
      _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_DEBUG,  "%{public}s %@ initial update, state: %@ at time %f",  buf,  0x2Au);
    }

    [MEMORY[0x189607968] numberWithUnsignedLongLong:0];
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    [*(id *)(*(void *)(a1 + 32) + 24) setObject:v10 forKeyedSubscript:*(void *)(a1 + 40)];
    goto LABEL_13;
  }

  BOOL v9 = *(double *)(a1 + 48) - v8;
  if (v9 < 0.0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v10 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      os_log_type_t v11 = *(char **)(a1 + 32);
      *(_DWORD *)buf = 136446722;
      v45 = "-[NWAccumulation updateWithState:atTime:]_block_invoke";
      os_log_type_t v46 = 2112;
      os_log_type_t v47 = v11;
      v48 = 2048;
      id v49 = v9;
      _os_log_impl(&dword_181A5C000, v10, OS_LOG_TYPE_ERROR, "%{public}s %@ negative time delta: %f", buf, 0x20u);
    }

    if (v21) {
      free(v21);
    }
    external = 0LL;
    goto LABEL_18;
  }

  os_log_type_t v11 = (void *)*((void *)v9 + 46);
  if (!v11)
  {
    __nwlog_obj();
    __int16 v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_framer_protocol_create_frame";
    os_log_type_t v21 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v21, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v25 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_framer_protocol_create_frame";
          _os_log_impl(&dword_181A5C000, v22, v25, "%{public}s called with null framer->context", buf, 0xCu);
        }

  if (v10) {
    free(v10);
  }
  return 0LL;
}

  if (v24) {
    free(v24);
  }
  uint64_t v7 = 0LL;
LABEL_3:

  if (gLogDatapath)
  {
    __nwlog_obj();
    id v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
    {
      logging_description = nw_endpoint_get_logging_description(*(void **)(a1 + 32));
      *(_DWORD *)buf = 136446722;
      os_log_type_t v39 = "nw_endpoint_enumerate_edges_block_invoke_2";
      v40 = 2080;
      os_log_type_t v41 = (void *)logging_description;
      BOOL v42 = 2112;
      char v43 = v6;
      _os_log_impl(&dword_181A5C000, v27, OS_LOG_TYPE_DEBUG, "%{public}s %s considering edge %@", buf, 0x20u);
    }
  }

  char v8 = *(uint64_t **)(a1 + 48);
  if (!v8)
  {
    if (!gLogDatapath) {
      goto LABEL_24;
    }
    __nwlog_obj();
    char v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      char v20 = nw_endpoint_get_logging_description(*(void **)(a1 + 32));
      *(_DWORD *)buf = 136446722;
      os_log_type_t v39 = "nw_endpoint_enumerate_edges_block_invoke";
      v40 = 2080;
      os_log_type_t v41 = (void *)v20;
      BOOL v42 = 2112;
      char v43 = v6;
      os_log_type_t v21 = "%{public}s %s no identifier specified for edge %@, calling enumerator";
LABEL_48:
      _os_log_impl(&dword_181A5C000, v19, OS_LOG_TYPE_DEBUG, v21, buf, 0x20u);
    }

    free(v28);
    if (!v12) {
      goto LABEL_8;
    }
    goto LABEL_88;
  }

  BOOL v9 = nw_protocol_instance_copy_association(v5);
  os_log_type_t v10 = v9;
  if (!v9)
  {
    __nwlog_obj();
    os_log_type_t v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v46 = "nw_protocol_instance_set_cached_content";
    v22 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (__nwlog_fault(v22, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        __int16 v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v46 = "nw_protocol_instance_set_cached_content";
          _os_log_impl(&dword_181A5C000, v23, v24, "%{public}s called with null association", buf, 0xCu);
        }
      }

      else if (v43)
      {
        v35 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v36 = type;
        v37 = os_log_type_enabled(v23, type);
        if (v35)
        {
          if (v37)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v46 = "nw_protocol_instance_set_cached_content";
            os_log_type_t v47 = 2082;
            v48 = v35;
            _os_log_impl( &dword_181A5C000,  v23,  v36,  "%{public}s called with null association, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v35);
          goto LABEL_92;
        }

        if (v37)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v46 = "nw_protocol_instance_set_cached_content";
          _os_log_impl(&dword_181A5C000, v23, v36, "%{public}s called with null association, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v42 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v46 = "nw_protocol_instance_set_cached_content";
          _os_log_impl( &dword_181A5C000,  v23,  v42,  "%{public}s called with null association, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (v21) {
      free(v21);
    }
    goto LABEL_30;
  }

  uint64_t v7 = (void *)v5[15];
  if (v7)
  {
    char v8 = v7;
    BOOL v9 = v8;
    if (((_BYTE)v8[17] & 8) == 0) {
      dispatch_assert_queue_V2(v8[1]);
    }
  }

  if ((v6[405] & 0x80000000) == 0 && gLogDatapath)
  {
    __nwlog_obj();
    __int16 v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      if (a2 > 0x1A) {
        v25 = "unknown";
      }
      else {
        v25 = off_189BBE330[a2];
      }
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_protocol_instance_notify_updated_internal";
      v38 = 2082;
      os_log_type_t v39 = v6 + 407;
      v40 = 2080;
      os_log_type_t v41 = " ";
      BOOL v42 = 2082;
      char v43 = v25;
      _os_log_impl( &dword_181A5C000,  v24,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sNotify updated %{public}s",  buf,  0x2Au);
    }
  }

  if (*(_DWORD *)(*((void *)v6 + 1) + 64LL) == 3)
  {
    os_log_type_t v10 = (char *)*((void *)v6 + 29);
    v30[0] = MEMORY[0x1895F87A8];
    v30[1] = 3221225472LL;
    v30[2] = ___ZL44nw_protocol_instance_notify_updated_internalP31NWConcrete_nw_protocol_instance31nw_protocol_notification_type_tb_block_invoke;
    v30[3] = &unk_189BB76E8;
    BOOL v33 = a3;
    v31 = v6;
    os_log_type_t v32 = a2;
    nw_hash_table_apply(v10, (uint64_t)v30);
  }

  else if (!a3 || v6[402] < 0)
  {
    os_log_type_t v11 = (void *)*((void *)v6 - 6);
    if (v11)
    {
      os_log_type_t v12 = v11[3];
      if (v12)
      {
        os_log_type_t v13 = *(void (**)(void))(v12 + 160);
        if (v13)
        {
          BOOL v14 = (void *)v11[5];
          if (v14 == &nw_protocol_ref_counted_handle)
          {
            int v16 = v11[11];
            if (v16) {
              v11[11] = v16 + 1;
            }
            os_log_type_t v15 = -1;
          }

          else
          {
            os_log_type_t v15 = 0;
          }

          *(void *)buf = v11;
          buf[8] = v15;
          id v17 = (void *)*((void *)v6 - 7);
          if (v17 == &nw_protocol_ref_counted_handle)
          {
            char v19 = *((void *)v6 - 1);
            if (v19) {
              *((void *)v6 - 1) = v19 + 1;
            }
            id v18 = -1;
          }

          else
          {
            id v18 = 0;
          }

          *(void *)os_log_type_t type = v6 - 96;
          id v36 = v18;
          v13();
          if (v17 == &nw_protocol_ref_counted_handle)
          {
            nw::release_if_needed<nw_protocol *>((uint64_t *)type);
            if (v14 != &nw_protocol_ref_counted_handle) {
              goto LABEL_30;
            }
          }

          else if (v14 != &nw_protocol_ref_counted_handle)
          {
            goto LABEL_30;
          }

          nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
        }
      }
    }
  }

LABEL_54:
      if (v13) {
        free(v13);
      }
      goto LABEL_13;
    }

    if (!v27)
    {
      __nwlog_obj();
      BOOL v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v30 = "nw_protocol_instance_get_flow_for_key";
        _os_log_impl(&dword_181A5C000, v14, v26, "%{public}s called with null key, backtrace limit exceeded", buf, 0xCu);
      }

      goto LABEL_53;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    BOOL v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v21 = type;
    v22 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v30 = "nw_protocol_instance_get_flow_for_key";
        _os_log_impl(&dword_181A5C000, v14, v21, "%{public}s called with null key, no backtrace", buf, 0xCu);
      }

      goto LABEL_53;
    }

    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v30 = "nw_protocol_instance_get_flow_for_key";
      v31 = 2082;
      os_log_type_t v32 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v14,  v21,  "%{public}s called with null key, dumping backtrace:%{public}s",  buf,  0x16u);
    }

LABEL_54:
      if (v14) {
        free(v14);
      }
      return 0LL;
    }

    if (!v33)
    {
      __nwlog_obj();
      id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v32 = typea;
      if (os_log_type_enabled(v18, typea))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "-[NWConcrete_nw_advertise_descriptor initWithName:type:domain:]";
        _os_log_impl(&dword_181A5C000, v18, v32, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
      }

      goto LABEL_53;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v29 = typea;
    os_log_type_t v30 = os_log_type_enabled(v18, typea);
    if (!backtrace_string)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        v37 = "-[NWConcrete_nw_advertise_descriptor initWithName:type:domain:]";
        _os_log_impl(&dword_181A5C000, v18, v29, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
      }

      goto LABEL_53;
    }

    if (v30)
    {
      *(_DWORD *)buf = 136446466;
      v37 = "-[NWConcrete_nw_advertise_descriptor initWithName:type:domain:]";
      v38 = 2082;
      os_log_type_t v39 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v18,  v29,  "%{public}s [super init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
    }

LABEL_41:
    free(backtrace_string);
    goto LABEL_54;
  }

  *((_DWORD *)v7 + 2) = 1;
  if (name)
  {
    BOOL v9 = strdup(name);
    if (!v9)
    {
      __nwlog_obj();
      v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      v37 = "strict_strdup";
      uint64_t v23 = (void *)_os_log_send_and_compose_impl();

      uint64_t result = (nw_advertise_descriptor_t)__nwlog_abort((uint64_t)v23);
      if ((_DWORD)result) {
        goto LABEL_57;
      }
      free(v23);
    }

    *((void *)v8 + 2) = v9;
  }

  os_log_type_t v10 = strdup(type);
  if (!v10)
  {
    __nwlog_obj();
    char v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v37 = "strict_strdup";
    os_log_type_t v21 = (void *)_os_log_send_and_compose_impl();

    uint64_t result = (nw_advertise_descriptor_t)__nwlog_abort((uint64_t)v21);
    if ((_DWORD)result) {
      goto LABEL_57;
    }
    free(v21);
  }

  *((void *)v8 + 3) = v10;
  if (v10[strlen(v10) - 1] == 46) {
    v10[strlen(type) - 1] = 0;
  }
  if (!domain) {
    goto LABEL_13;
  }
  os_log_type_t v11 = strdup(domain);
  if (v11)
  {
LABEL_12:
    *((void *)v8 + 4) = v11;
LABEL_13:
    *((_BYTE *)v8 + 72) &= ~1u;
    return (nw_advertise_descriptor_t)v8;
  }

  __nwlog_obj();
  __int16 v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  v37 = "strict_strdup";
  v25 = (void *)_os_log_send_and_compose_impl();

  uint64_t result = (nw_advertise_descriptor_t)__nwlog_abort((uint64_t)v25);
  if (!(_DWORD)result)
  {
    free(v25);
    goto LABEL_12;
  }

  if (v20) {
    free(v20);
  }
  return 0LL;
}

    if (v21) {
      free(v21);
    }
    goto LABEL_17;
  }

  __nwlog_obj();
  int v16 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  id v36 = "nw_flow_replay_get_message_properties";
  id v17 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v33 = 0;
  if (__nwlog_fault(v17, &type, &v33))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        id v36 = "nw_flow_replay_get_message_properties";
        _os_log_impl(&dword_181A5C000, v18, v19, "%{public}s called with null protocol", buf, 0xCu);
      }
    }

    else if (v33)
    {
      __int16 v24 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v25 = type;
      os_log_type_t v26 = os_log_type_enabled(v18, type);
      if (v24)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          id v36 = "nw_flow_replay_get_message_properties";
          v37 = 2082;
          v38 = v24;
          _os_log_impl( &dword_181A5C000,  v18,  v25,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v24);
        goto LABEL_45;
      }

      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        id v36 = "nw_flow_replay_get_message_properties";
        _os_log_impl(&dword_181A5C000, v18, v25, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        id v36 = "nw_flow_replay_get_message_properties";
        _os_log_impl( &dword_181A5C000,  v18,  v30,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

    if (v20) {
      free(v20);
    }
    goto LABEL_17;
  }

  __nwlog_obj();
  os_log_type_t v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v38 = "nw_flow_replay_disconnected";
  int v16 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  v35 = 0;
  if (__nwlog_fault(v16, &type, &v35))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_flow_replay_disconnected";
        _os_log_impl(&dword_181A5C000, v17, v18, "%{public}s called with null protocol", buf, 0xCu);
      }
    }

    else if (v35)
    {
      uint64_t v23 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v24 = type;
      v25 = os_log_type_enabled(v17, type);
      if (v23)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          v38 = "nw_flow_replay_disconnected";
          os_log_type_t v39 = 2082;
          v40 = v23;
          _os_log_impl( &dword_181A5C000,  v17,  v24,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v23);
        goto LABEL_48;
      }

      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_flow_replay_disconnected";
        _os_log_impl(&dword_181A5C000, v17, v24, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_flow_replay_disconnected";
        _os_log_impl( &dword_181A5C000,  v17,  v29,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

    if (v14) {
      free(v14);
    }
    goto LABEL_55;
  }

  if (v21) {
    free(v21);
  }
LABEL_18:
}

    goto LABEL_54;
  }

  if (v6)
  {
    char v8 = v5[1];
    if (v8)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      v50 = __Block_byref_object_copy__19159;
      v51 = __Block_byref_object_dispose__19160;
      os_log_type_t v52 = v8;
      BOOL v9 = (unsigned __int8 *)v5[1];
      v42[0] = MEMORY[0x1895F87A8];
      v42[1] = 3221225472LL;
      v42[2] = __nw_protocol_stack_replace_protocol_with_handle_block_invoke;
      v42[3] = &unk_189BB8C90;
      v45 = buf;
      os_log_type_t v46 = a2;
      char v43 = v5;
      dispatch_workloop_t v44 = v7;
      nw_array_apply(v9, (uint64_t)v42);
      os_log_type_t v10 = *(void **)(*(void *)&buf[8] + 40LL);
      if (v10) {
        objc_storeStrong(v5 + 1, v10);
      }

      _Block_object_dispose(buf, 8);
    }

    os_log_type_t v11 = v5[2];
    if (v11)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      v50 = __Block_byref_object_copy__19159;
      v51 = __Block_byref_object_dispose__19160;
      os_log_type_t v52 = v11;
      os_log_type_t v12 = (unsigned __int8 *)v5[2];
      v37[0] = MEMORY[0x1895F87A8];
      v37[1] = 3221225472LL;
      v37[2] = __nw_protocol_stack_replace_protocol_with_handle_block_invoke_3;
      v37[3] = &unk_189BB8C90;
      v40 = buf;
      os_log_type_t v41 = a2;
      v38 = v5;
      os_log_type_t v39 = v7;
      nw_array_apply(v12, (uint64_t)v37);
      os_log_type_t v13 = *(void **)(*(void *)&buf[8] + 40LL);
      if (v13) {
        objc_storeStrong(v5 + 2, v13);
      }

      _Block_object_dispose(buf, 8);
    }

    BOOL v14 = v5[3];
    if (v14)
    {
      os_log_type_t v15 = v14;
      int v16 = v15[2];

      if (v16 == a2) {
        objc_storeStrong(v5 + 3, a3);
      }
    }

    id v17 = v5[4];
    if (v17)
    {
      id v18 = v17;
      char v19 = v18[2];

      if (v19 == a2) {
        objc_storeStrong(v5 + 4, a3);
      }
    }

    char v20 = v5[6];
    if (v20)
    {
      os_log_type_t v21 = v20;
      v22 = v21[2];

      if (v22 == a2) {
        objc_storeStrong(v5 + 6, a3);
      }
    }

    goto LABEL_20;
  }

  __nwlog_obj();
  id v27 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_stack_replace_protocol_with_handle";
  __int16 v24 = (char *)_os_log_send_and_compose_impl();

  v48 = OS_LOG_TYPE_ERROR;
  os_log_type_t v47 = 0;
  if (v48 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v28 = v48;
    if (os_log_type_enabled(v25, v48))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_stack_replace_protocol_with_handle";
      _os_log_impl(&dword_181A5C000, v25, v28, "%{public}s called with null new_options", buf, 0xCu);
    }

    goto LABEL_53;
  }

  if (!v47)
  {
    __nwlog_obj();
    v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    id v36 = v48;
    if (os_log_type_enabled(v25, v48))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_stack_replace_protocol_with_handle";
      _os_log_impl( &dword_181A5C000,  v25,  v36,  "%{public}s called with null new_options, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_53;
  }

  os_log_type_t v32 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  BOOL v33 = v48;
  dispatch_workloop_t v34 = os_log_type_enabled(v25, v48);
  if (!v32)
  {
    if (v34)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_stack_replace_protocol_with_handle";
      _os_log_impl(&dword_181A5C000, v25, v33, "%{public}s called with null new_options, no backtrace", buf, 0xCu);
    }

    goto LABEL_53;
  }

  if (v34)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_stack_replace_protocol_with_handle";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v32;
    _os_log_impl( &dword_181A5C000,  v25,  v33,  "%{public}s called with null new_options, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v32);
  if (v24) {
    goto LABEL_55;
  }
LABEL_20:
}

      goto LABEL_54;
    }

    if (!v23)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_parameters_create_peer_to_peer_migrating_quic";
        _os_log_impl( &dword_181A5C000,  v7,  v22,  "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_default_configuration)), bac ktrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_53;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    id v18 = type;
    char v19 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_parameters_create_peer_to_peer_migrating_quic";
        _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_default_configuration)), no backtrace",  buf,  0xCu);
      }

      goto LABEL_53;
    }

    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v26 = "nw_parameters_create_peer_to_peer_migrating_quic";
      id v27 = 2082;
      os_log_type_t v28 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v7,  v18,  "%{public}s called with null (configure_quic != (_nw_parameters_configure_protocol_default_configuration)), dumpi ng backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_35;
  }

        xpc_dictionary_set_BOOL(v2, "use_long_outstanding_queries", 1);
        goto LABEL_54;
      }

LABEL_54:
            v25 = v81;
          }

          if (v35) {
            free(v35);
          }
          goto LABEL_57;
        }

        if ([*(id *)(*((void *)&v83 + 1) + 8 * k) hasPrefix:@"net."])
        {
          [v25 objectForKeyedSubscript:v30];
          v31 = (id)objc_claimAutoreleasedReturnValue();
          if (!v31 || (objc_opt_respondsToSelector() & 1) == 0 || (objc_opt_respondsToSelector() & 1) == 0)
          {

            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v41 = (os_log_s *)(id)gLogObj;
            if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
            {
              char v105 = 136446722;
              v106 = "-[ManagedNetworkSettings reloadMNS]";
              v107 = 2114;
              v108[0] = v31;
              LOWORD(v108[1]) = 2114;
              *(void *)((char *)&v108[1] + 2) = v30;
              BOOL v42 = v41;
              char v43 = OS_LOG_TYPE_ERROR;
              dispatch_workloop_t v44 = "%{public}s MNS observed invalid value %{public}@ for key %{public}@";
              v45 = 32;
              goto LABEL_24;
            }

LABEL_54:
    if (v12) {
      free(v12);
    }
  }

        if (v31) {
          free(v31);
        }
        goto LABEL_55;
      }
    }

    else
    {
    }
  }

    if (v5) {
LABEL_54:
    }
      free(v5);
    return 0LL;
  }

  nw_protocol_set_input_handler((uint64_t)a1, (uint64_t)a2);
  if (a2)
  {
    *(_OWORD *)a1->flow_id = *(_OWORD *)a2->flow_id;
    if (!a2->output_handler) {
      nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)a1);
    }
    callbacks = a2->callbacks;
    if (callbacks)
    {
      get_parameters = (uint64_t (*)(nw_protocol *))callbacks->get_parameters;
      if (!get_parameters) {
        goto LABEL_21;
      }
      os_log_type_t v12 = (void *)get_parameters(a2);
      os_log_type_t v13 = v12;
      if (v12) {
        os_log_type_t v12 = os_retain(v12);
      }
      *((void *)handle + 40) = v12;
      *((void *)handle + 41) = nw_parameters_copy_context(v13);
      callbacks = a2->callbacks;
      if (callbacks)
      {
LABEL_21:
        get_path = (uint64_t (*)(nw_protocol *))callbacks->get_path;
        if (get_path)
        {
          os_log_type_t v15 = (void *)get_path(a2);
          if (v15) {
            os_log_type_t v15 = os_retain(v15);
          }
          *((void *)handle + 42) = v15;
        }
      }
    }
  }

  int v16 = (void *)*((void *)handle + 40);
  if (!v16) {
    goto LABEL_200;
  }
  id v17 = nw_parameters_copy_protocol_options_legacy(v16, (nw_protocol *)handle);
  *((void *)handle + 43) = v17;
  nw_protocol_options_get_log_id_str(v17, handle + 531, 84LL);
  *((_DWORD *)handle + 126) = nw_masque_options_get_version(*((void **)handle + 43));
  id v18 = (void *)*((void *)handle + 43);
  if (v18)
  {
    else {
      char v19 = 4;
    }
    goto LABEL_30;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_masque_options_has_target_endpoint";
  char v43 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v111) = 0;
  if (__nwlog_fault(v43, type, &v111))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      dispatch_workloop_t v44 = (os_log_s *)__nwlog_obj();
      v45 = type[0];
      if (os_log_type_enabled(v44, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_options_has_target_endpoint";
        os_log_type_t v46 = "%{public}s called with null options";
LABEL_113:
        _os_log_impl(&dword_181A5C000, v44, v45, v46, buf, 0xCu);
      }
    }

    else if ((_BYTE)v111)
    {
      os_log_type_t v47 = (char *)__nw_create_backtrace_string();
      dispatch_workloop_t v44 = (os_log_s *)__nwlog_obj();
      v45 = type[0];
      v48 = os_log_type_enabled(v44, type[0]);
      if (v47)
      {
        if (v48)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_masque_options_has_target_endpoint";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v47;
          _os_log_impl( &dword_181A5C000,  v44,  v45,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v47);
        goto LABEL_114;
      }

      if (v48)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_options_has_target_endpoint";
        os_log_type_t v46 = "%{public}s called with null options, no backtrace";
        goto LABEL_113;
      }
    }

    else
    {
      dispatch_workloop_t v44 = (os_log_s *)__nwlog_obj();
      v45 = type[0];
      if (os_log_type_enabled(v44, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_options_has_target_endpoint";
        os_log_type_t v46 = "%{public}s called with null options, backtrace limit exceeded";
        goto LABEL_113;
      }
    }
  }

  if (v15) {
    free(v15);
  }
  return 0LL;
}

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(v1 + 32) + 72LL));
}

  if (v8) {
    free(v8);
  }
  return 0LL;
}

      v50 = v50;
      v53 = _nw_http_response_get_status_code();

      if (v49) {
        goto LABEL_56;
      }
LABEL_67:
      ___ZL50nw_http1_match_idle_connection_with_pending_streamP17nw_protocol_http1_block_invoke_48( (uint64_t)v58,  (uint64_t)"",  v53);
      BOOL v54 = 0LL;
      if (inbound_message) {
LABEL_57:
      }
        os_release(inbound_message);
LABEL_58:
      if (v48) {
        os_release(v48);
      }
      if (v50) {
        os_release(v50);
      }
      if (v54)
      {
        v37 = v54;
LABEL_64:
        os_release(v37);
      }

      return;
    default:
      return;
  }

      v50 = v50;
      v53 = _nw_http_response_get_status_code();

      if (v49) {
        goto LABEL_56;
      }
LABEL_67:
      ___ZL27nw_protocol_http1_connectedP11nw_protocolS0__block_invoke_82((uint64_t)v58, (uint64_t)"", v53);
      BOOL v54 = 0LL;
      if (inbound_message) {
LABEL_57:
      }
        os_release(inbound_message);
LABEL_58:
      if (v48) {
        os_release(v48);
      }
      if (v50) {
        os_release(v50);
      }
      if (v54)
      {
        v37 = v54;
LABEL_64:
        os_release(v37);
      }

      return;
    default:
      return;
  }

      v50 = v50;
      v53 = _nw_http_response_get_status_code();

      if (v49) {
        goto LABEL_56;
      }
LABEL_67:
      ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke_22((uint64_t)v58, (uint64_t)"", v53);
      BOOL v54 = 0LL;
      if (inbound_message) {
LABEL_57:
      }
        os_release(inbound_message);
LABEL_58:
      if (v48) {
        os_release(v48);
      }
      if (v50) {
        os_release(v50);
      }
      if (v54)
      {
        v37 = v54;
LABEL_64:
        os_release(v37);
      }

      return;
    default:
      return;
  }

      v50 = v50;
      v53 = _nw_http_response_get_status_code();

      if (v49) {
        goto LABEL_56;
      }
LABEL_67:
      ___ZL25nw_protocol_http1_connectP11nw_protocolS0__block_invoke_34((uint64_t)v58, (uint64_t)"", v53);
      BOOL v54 = 0LL;
      if (inbound_message) {
LABEL_57:
      }
        os_release(inbound_message);
LABEL_58:
      if (v48) {
        os_release(v48);
      }
      if (v50) {
        os_release(v50);
      }
      if (v54)
      {
        v37 = v54;
LABEL_64:
        os_release(v37);
      }

      return;
    default:
      return;
  }

  if (v19) {
    free(v19);
  }
  os_log_type_t v10 = 0LL;
LABEL_5:

  return v10;
}

      *((_BYTE *)&v68 + v19 + 4) = 0;
      LODWORD(v19) = v19 + 1;
      hostname = nw_endpoint_get_hostname((nw_endpoint_t)v13);
      if (!hostname) {
        goto LABEL_82;
      }
      id v36 = hostname;
      v37 = strlen(hostname);
      if (!v37) {
        goto LABEL_82;
      }
      v38 = v37;
      if (v37 < 0xFF)
      {
        memcpy((char *)&v68 + v19 + 4, v36, v37);
        LODWORD(v19) = v19 + v38;
        goto LABEL_82;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446466;
      v62 = "nw_socksv4_send_connect";
      os_log_type_t v63 = 2048;
      os_log_type_t v64 = v38;
      os_log_type_t v39 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v59 = 0;
      if (__nwlog_fault(v39, &type, &v59))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v40 = (os_log_s *)gLogObj;
          os_log_type_t v41 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_71;
          }
          *(_DWORD *)buf = 136446466;
          v62 = "nw_socksv4_send_connect";
          os_log_type_t v63 = 2048;
          os_log_type_t v64 = v38;
          BOOL v42 = "%{public}s SOCKS hostname has invalid length %zu";
          goto LABEL_70;
        }

        if (!v59)
        {
          v40 = (os_log_s *)__nwlog_obj();
          os_log_type_t v41 = type;
          if (!os_log_type_enabled(v40, type)) {
            goto LABEL_71;
          }
          *(_DWORD *)buf = 136446466;
          v62 = "nw_socksv4_send_connect";
          os_log_type_t v63 = 2048;
          os_log_type_t v64 = v38;
          BOOL v42 = "%{public}s SOCKS hostname has invalid length %zu, backtrace limit exceeded";
          goto LABEL_70;
        }

        char v43 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v40 = (os_log_s *)gLogObj;
        os_log_type_t v41 = type;
        dispatch_workloop_t v44 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v43)
        {
          if (v44)
          {
            *(_DWORD *)buf = 136446722;
            v62 = "nw_socksv4_send_connect";
            os_log_type_t v63 = 2048;
            os_log_type_t v64 = v38;
            os_log_type_t v65 = 2082;
            BOOL v66 = v43;
            _os_log_impl( &dword_181A5C000,  v40,  v41,  "%{public}s SOCKS hostname has invalid length %zu, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v43);
          goto LABEL_71;
        }

        if (v44)
        {
          *(_DWORD *)buf = 136446466;
          v62 = "nw_socksv4_send_connect";
          os_log_type_t v63 = 2048;
          os_log_type_t v64 = v38;
          BOOL v42 = "%{public}s SOCKS hostname has invalid length %zu, no backtrace";
LABEL_70:
          _os_log_impl(&dword_181A5C000, v40, v41, v42, buf, 0x16u);
        }
      }

    goto LABEL_54;
  }

  __nwlog_obj();
  char v19 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v35 = "nw_storage_register_provider";
  os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v33.receiver) = 16;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (LOBYTE(v33.receiver) == 17)
  {
    __nwlog_obj();
    int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    receiver = (os_log_type_t)v33.receiver;
    if (os_log_type_enabled(v16, (os_log_type_t)v33.receiver))
    {
      *(_DWORD *)buf = 136446210;
      v35 = "nw_storage_register_provider";
      id v18 = "%{public}s called with null provider";
      goto LABEL_46;
    }

    goto LABEL_47;
  }

  if (type == OS_LOG_TYPE_DEFAULT)
  {
    __nwlog_obj();
    int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    receiver = (os_log_type_t)v33.receiver;
    if (os_log_type_enabled(v16, (os_log_type_t)v33.receiver))
    {
      *(_DWORD *)buf = 136446210;
      v35 = "nw_storage_register_provider";
      id v18 = "%{public}s called with null provider, backtrace limit exceeded";
      goto LABEL_46;
    }

    goto LABEL_47;
  }

  id v27 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  receiver = (os_log_type_t)v33.receiver;
  os_log_type_t v28 = os_log_type_enabled(v16, (os_log_type_t)v33.receiver);
  if (!v27)
  {
    if (v28)
    {
      *(_DWORD *)buf = 136446210;
      v35 = "nw_storage_register_provider";
      id v18 = "%{public}s called with null provider, no backtrace";
      goto LABEL_46;
    }

    goto LABEL_47;
  }

  if (v28)
  {
    *(_DWORD *)buf = 136446466;
    v35 = "nw_storage_register_provider";
    id v36 = 2082;
    v37 = v27;
    _os_log_impl( &dword_181A5C000,  v16,  receiver,  "%{public}s called with null provider, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v27);
  if (v15) {
    goto LABEL_49;
  }
LABEL_7:
}

    goto LABEL_54;
  }

  if (sqlite3_exec( *v3,  "CREATE TABLE IF NOT EXISTS network_storage (\t\tkey TEXT NOT NULL,\t\ttype TEXT NOT NULL,\t\tcanvas BLOB NOT NU LL,\t\ttime INTEGER,\t\tPRIMARY KEY(key, type)\t\t);",
         0LL,
         0LL,
         &errmsg))
  {
    __nwlog_obj();
    os_log_type_t v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v27 = "nw_storage_open_db";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        id v27 = "nw_storage_open_db";
        os_log_type_t v10 = "%{public}s Failed to create tables";
        goto LABEL_51;
      }
    }

    else if (v23)
    {
      char v20 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v9 = type;
      os_log_type_t v21 = os_log_type_enabled(v8, type);
      if (v20)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          id v27 = "nw_storage_open_db";
          os_log_type_t v28 = 2082;
          os_log_type_t v29 = v20;
          _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s Failed to create tables, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v20);
LABEL_54:
        if (v7) {
LABEL_55:
        }
          free(v7);
LABEL_56:
        sqlite3_close(*v3);
        uint64_t v4 = 0LL;
        *id v3 = 0LL;
        goto LABEL_57;
      }

      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        id v27 = "nw_storage_open_db";
        os_log_type_t v10 = "%{public}s Failed to create tables, no backtrace";
        goto LABEL_51;
      }
    }

    else
    {
      __nwlog_obj();
      char v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        id v27 = "nw_storage_open_db";
        os_log_type_t v10 = "%{public}s Failed to create tables, backtrace limit exceeded";
        goto LABEL_51;
      }
    }

    goto LABEL_53;
  }
}

      goto LABEL_54;
    }

    if (!v30)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_service_connector_copy_active_request_for_connection";
        _os_log_impl( &dword_181A5C000,  v11,  v26,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_53;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v22 = type;
    uint64_t v23 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_service_connector_copy_active_request_for_connection";
        _os_log_impl(&dword_181A5C000, v11, v22, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }

      goto LABEL_53;
    }

    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_service_connector_copy_active_request_for_connection";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v11,  v22,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_35;
  }

  if (v12) {
    free(v12);
  }
}

  if (browser_key_for) {
LABEL_54:
  }
    free((void *)browser_key_for);
LABEL_55:
}

LABEL_54:
      if (v18) {
        free(v18);
      }
      goto LABEL_56;
    }

    if (!v31)
    {
      __nwlog_obj();
      char v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        dispatch_workloop_t v34 = "nw_txt_record_apply_internal_locked";
        _os_log_impl( &dword_181A5C000,  v19,  v30,  "%{public}s called with null applier_internal, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_53;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    char v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    id v27 = type;
    os_log_type_t v28 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        dispatch_workloop_t v34 = "nw_txt_record_apply_internal_locked";
        _os_log_impl( &dword_181A5C000,  v19,  v27,  "%{public}s called with null applier_internal, no backtrace",  buf,  0xCu);
      }

      goto LABEL_53;
    }

    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      dispatch_workloop_t v34 = "nw_txt_record_apply_internal_locked";
      v35 = 2082;
      id v36 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v19,  v27,  "%{public}s called with null applier_internal, dumping backtrace:%{public}s",  buf,  0x16u);
    }

          goto LABEL_54;
        }

        if (!v24)
        {
          __nwlog_obj();
          uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v23 = type;
          if (os_log_type_enabled(v7, type))
          {
            *(_DWORD *)buf = 136446466;
            id v27 = "nw_activity_get_activation_time";
            os_log_type_t v28 = 2082;
            os_log_type_t v29 = "Cannot get activation time from lightweight representation of an activity";
            _os_log_impl( &dword_181A5C000,  v7,  v23,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, backtrace limit exceeded",  buf,  0x16u);
          }

          goto LABEL_53;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v19 = type;
        char v20 = os_log_type_enabled(v7, type);
        if (!backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446466;
            id v27 = "nw_activity_get_activation_time";
            os_log_type_t v28 = 2082;
            os_log_type_t v29 = "Cannot get activation time from lightweight representation of an activity";
            _os_log_impl( &dword_181A5C000,  v7,  v19,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, no backtrace",  buf,  0x16u);
          }

          goto LABEL_53;
        }

        if (v20)
        {
          *(_DWORD *)buf = 136446722;
          id v27 = "nw_activity_get_activation_time";
          os_log_type_t v28 = 2082;
          os_log_type_t v29 = "Cannot get activation time from lightweight representation of an activity";
          os_log_type_t v30 = 2082;
          v31 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v19,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        goto LABEL_35;
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446466;
      id v27 = "nw_activity_get_activation_time";
      os_log_type_t v28 = 2082;
      os_log_type_t v29 = "Cannot get activation time before activation";
      id v6 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      __int16 v24 = 0;
      if (__nwlog_fault(v6, &type, &v24))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v10 = type;
          if (os_log_type_enabled(v7, type))
          {
            *(_DWORD *)buf = 136446466;
            id v27 = "nw_activity_get_activation_time";
            os_log_type_t v28 = 2082;
            os_log_type_t v29 = "Cannot get activation time before activation";
            _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s", buf, 0x16u);
          }

          goto LABEL_53;
        }

        if (!v24)
        {
          __nwlog_obj();
          uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v22 = type;
          if (os_log_type_enabled(v7, type))
          {
            *(_DWORD *)buf = 136446466;
            id v27 = "nw_activity_get_activation_time";
            os_log_type_t v28 = 2082;
            os_log_type_t v29 = "Cannot get activation time before activation";
            _os_log_impl( &dword_181A5C000,  v7,  v22,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, backtrace limit exceeded",  buf,  0x16u);
          }

          goto LABEL_53;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v17 = type;
        id v18 = os_log_type_enabled(v7, type);
        if (!backtrace_string)
        {
          if (v18)
          {
            *(_DWORD *)buf = 136446466;
            id v27 = "nw_activity_get_activation_time";
            os_log_type_t v28 = 2082;
            os_log_type_t v29 = "Cannot get activation time before activation";
            _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, no backtrace",  buf,  0x16u);
          }

          goto LABEL_53;
        }

        if (v18)
        {
          *(_DWORD *)buf = 136446722;
          id v27 = "nw_activity_get_activation_time";
          os_log_type_t v28 = 2082;
          os_log_type_t v29 = "Cannot get activation time before activation";
          os_log_type_t v30 = 2082;
          v31 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, dumping backtrace:%{public}s",  buf,  0x20u);
        }

    _os_log_impl(&dword_181A5C000, v18, v19, v20, buf, 0xCu);
    goto LABEL_54;
  }

  if (!nw_frame_uses_external_data(a5))
  {
    nw_frame_unclaim(a5, v9, a4, 0);
    LODWORD(__src) = 0;
    BOOL v14 = nw_frame_unclaimed_bytes(a5, &__src);
    if (v14)
    {
      os_log_type_t v15 = (char *)v14;
      *(void *)os_log_type_t type = 0LL;
      if (a2 > 0x3F)
      {
        if (a2 >> 14)
        {
          if (a2 >> 30)
          {
            if (a2 >> 62)
            {
              v40 = (os_log_s *)__nwlog_obj();
              os_log_type_enabled(v40, OS_LOG_TYPE_ERROR);
              *(_DWORD *)buf = 136446466;
              v56 = "_http_vle_encode";
              BOOL v57 = 2048;
              *(void *)v58 = a2;
              os_log_type_t v41 = (void *)_os_log_send_and_compose_impl();
              uint64_t result = __nwlog_abort((uint64_t)v41);
              if (result) {
                goto LABEL_114;
              }
              free(v41);
              int v16 = 0;
            }

            else
            {
              *(void *)os_log_type_t type = bswap64(a2 | 0xC000000000000000LL);
              int v16 = 8;
            }
          }

          else
          {
            *(void *)os_log_type_t type = bswap32(a2 | 0x80000000);
            int v16 = 4;
          }
        }

        else
        {
          *(void *)os_log_type_t type = bswap32(a2 | 0x4000) >> 16;
          int v16 = 2;
        }
      }

      else
      {
        *(void *)os_log_type_t type = a2;
        int v16 = 1;
      }

      BOOL v42 = v16;
      memcpy(v15, type, v16);
      if (a3 > 0x3F)
      {
        if (a3 >> 14)
        {
          if (a3 >> 30)
          {
            *(void *)os_log_type_t type = bswap64(a3 | 0xC000000000000000LL);
            char v43 = 8;
          }

          else
          {
            *(void *)os_log_type_t type = bswap32(a3 | 0x80000000);
            char v43 = 4;
          }
        }

        else
        {
          *(void *)os_log_type_t type = bswap32(a3 | 0x4000) >> 16;
          char v43 = 2;
        }
      }

      else
      {
        *(void *)os_log_type_t type = a3;
        char v43 = 1;
      }

      memcpy(&v15[v42], type, v43);
      os_log_type_t v26 = v43 + v42;
      memmove(&v15[v26], &v15[a4], __src - a4);
      dispatch_workloop_t v44 = a5;
      v45 = 0;
      os_log_type_t v46 = a4 - v26;
      goto LABEL_100;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v56 = "nw_http3_framer_write_http3_frame_header";
    id v17 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v51) = 0;
    if (__nwlog_fault(v17, type, &v51))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v18 = (os_log_s *)gLogObj;
        char v19 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
          goto LABEL_54;
        }
        *(_DWORD *)buf = 136446210;
        v56 = "nw_http3_framer_write_http3_frame_header";
        char v20 = "%{public}s Unable to fillout H3 frame header because nw_frame_unclaimed_bytes() returned NULL";
        goto LABEL_53;
      }

      if (!(_BYTE)v51)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v18 = (os_log_s *)gLogObj;
        char v19 = type[0];
        if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
          goto LABEL_54;
        }
        *(_DWORD *)buf = 136446210;
        v56 = "nw_http3_framer_write_http3_frame_header";
        char v20 = "%{public}s Unable to fillout H3 frame header because nw_frame_unclaimed_bytes() returned NULL, backtrace limit exceeded";
        goto LABEL_53;
      }

      __int16 v24 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v18 = (os_log_s *)gLogObj;
      char v19 = type[0];
      v25 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
      if (!v24)
      {
        if (!v25) {
          goto LABEL_54;
        }
        *(_DWORD *)buf = 136446210;
        v56 = "nw_http3_framer_write_http3_frame_header";
        char v20 = "%{public}s Unable to fillout H3 frame header because nw_frame_unclaimed_bytes() returned NULL, no backtrace";
        goto LABEL_53;
      }

      if (v25)
      {
        *(_DWORD *)buf = 136446466;
        v56 = "nw_http3_framer_write_http3_frame_header";
        BOOL v57 = 2082;
        *(void *)v58 = v24;
        _os_log_impl( &dword_181A5C000,  v18,  v19,  "%{public}s Unable to fillout H3 frame header because nw_frame_unclaimed_bytes() returned NULL, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v24);
    }

    goto LABEL_54;
  }

  nw_frame_unclaim(a5, v9, 0, a4);
  offset = 0LL;
  os_log_type_t v10 = (dispatch_data_s *)nw_frame_copy_external_data(a5, (_DWORD *)&offset + 1, &offset);
  os_log_type_t v11 = v10;
  if (HIDWORD(offset))
  {
    subrange = dispatch_data_create_subrange(v10, HIDWORD(offset), 0xFFFFFFFFFFFFFFFFLL);
    if (v11) {
      dispatch_release(v11);
    }
    if (subrange) {
      goto LABEL_7;
    }
LABEL_13:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v56 = "nw_http3_framer_write_http3_frame_header";
    id v17 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(__src) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v18 = (os_log_s *)gLogObj;
      char v19 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      v56 = "nw_http3_framer_write_http3_frame_header";
      char v20 = "%{public}s Unable to fillout H3 frame header because nw_frame_copy_external_data() returned NULL";
      goto LABEL_53;
    }

    if (!(_BYTE)__src)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v18 = (os_log_s *)gLogObj;
      char v19 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      v56 = "nw_http3_framer_write_http3_frame_header";
      char v20 = "%{public}s Unable to fillout H3 frame header because nw_frame_copy_external_data() returned NULL, backtrace limit exceeded";
      goto LABEL_53;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v18 = (os_log_s *)gLogObj;
    char v19 = type[0];
    v22 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
    if (!backtrace_string)
    {
      if (!v22) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      v56 = "nw_http3_framer_write_http3_frame_header";
      char v20 = "%{public}s Unable to fillout H3 frame header because nw_frame_copy_external_data() returned NULL, no backtrace";
      goto LABEL_53;
    }

    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      v56 = "nw_http3_framer_write_http3_frame_header";
      BOOL v57 = 2082;
      *(void *)v58 = backtrace_string;
      uint64_t v23 = "%{public}s Unable to fillout H3 frame header because nw_frame_copy_external_data() returned NULL, dumping ba"
            "cktrace:%{public}s";
LABEL_29:
      _os_log_impl(&dword_181A5C000, v18, v19, v23, buf, 0x16u);
      goto LABEL_30;
    }

    goto LABEL_30;
  }

  subrange = v10;
  if (!v10) {
    goto LABEL_13;
  }
LABEL_7:
  *(void *)os_log_type_t type = 0LL;
  if (a2 <= 0x3F)
  {
    *(void *)os_log_type_t type = a2;
    os_log_type_t v13 = 1;
    goto LABEL_59;
  }

  if (!(a2 >> 14))
  {
    *(void *)os_log_type_t type = bswap32(a2 | 0x4000) >> 16;
    os_log_type_t v13 = 2;
    goto LABEL_59;
  }

  if (!(a2 >> 30))
  {
    *(void *)os_log_type_t type = bswap32(a2 | 0x80000000);
    os_log_type_t v13 = 4;
    goto LABEL_59;
  }

  if (!(a2 >> 62))
  {
    *(void *)os_log_type_t type = bswap64(a2 | 0xC000000000000000LL);
    os_log_type_t v13 = 8;
    goto LABEL_59;
  }

  id v27 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v56 = "_http_vle_encode";
  BOOL v57 = 2048;
  *(void *)v58 = a2;
  os_log_type_t v28 = (void *)_os_log_send_and_compose_impl();
  uint64_t result = __nwlog_abort((uint64_t)v28);
  if (!result)
  {
    free(v28);
    os_log_type_t v13 = 0;
LABEL_59:
    if (a3 > 0x3F)
    {
      if (a3 >> 14)
      {
        if (a3 >> 30)
        {
          __src = bswap64(a3 | 0xC000000000000000LL);
          os_log_type_t v30 = 8;
        }

        else
        {
          __src = bswap32(a3 | 0x80000000);
          os_log_type_t v30 = 4;
        }
      }

      else
      {
        __src = bswap32(a3 | 0x4000) >> 16;
        os_log_type_t v30 = 2;
      }
    }

    else
    {
      __src = a3;
      os_log_type_t v30 = 1;
    }

    os_log_type_t v26 = v30 + v13;
    v51 = 0LL;
    alloc = (dispatch_data_s *)dispatch_data_create_alloc();
    memcpy((void *)(a4 - v26), type, v13);
    memcpy((void *)(a4 - (unint64_t)v30), &__src, v30);
    concat = dispatch_data_create_concat(alloc, subrange);
    if (alloc) {
      dispatch_release(alloc);
    }
    dispatch_release(subrange);
    v50 = 0;
    nw_frame_set_external_data(a5, concat, &v50);
    if (concat) {
      dispatch_release(concat);
    }
    if (v50 == (_DWORD)offset)
    {
LABEL_98:
      v45 = a4 - v26;
      if (a4 > v26)
      {
        dispatch_workloop_t v44 = a5;
        os_log_type_t v46 = 0;
LABEL_100:
        nw_frame_claim(v44, v33, v45, v46);
      }

      return v26;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446722;
    v56 = "nw_http3_framer_write_http3_frame_header";
    BOOL v57 = 1024;
    *(_DWORD *)v58 = v50;
    *(_WORD *)&v58[4] = 1024;
    *(_DWORD *)&v58[6] = offset;
    dispatch_workloop_t v34 = (char *)_os_log_send_and_compose_impl();
    id v49 = OS_LOG_TYPE_ERROR;
    v48 = 0;
    if (__nwlog_fault(v34, &v49, &v48))
    {
      if (v49 == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v35 = (os_log_s *)gLogObj;
        id v36 = v49;
        if (!os_log_type_enabled((os_log_t)gLogObj, v49)) {
          goto LABEL_96;
        }
        *(_DWORD *)buf = 136446722;
        v56 = "nw_http3_framer_write_http3_frame_header";
        BOOL v57 = 1024;
        *(_DWORD *)v58 = v50;
        *(_WORD *)&v58[4] = 1024;
        *(_DWORD *)&v58[6] = offset;
        v37 = "%{public}s Incorrect frame length set: %u != %u";
        goto LABEL_95;
      }

      if (!v48)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v35 = (os_log_s *)gLogObj;
        id v36 = v49;
        if (!os_log_type_enabled((os_log_t)gLogObj, v49)) {
          goto LABEL_96;
        }
        *(_DWORD *)buf = 136446722;
        v56 = "nw_http3_framer_write_http3_frame_header";
        BOOL v57 = 1024;
        *(_DWORD *)v58 = v50;
        *(_WORD *)&v58[4] = 1024;
        *(_DWORD *)&v58[6] = offset;
        v37 = "%{public}s Incorrect frame length set: %u != %u, backtrace limit exceeded";
        goto LABEL_95;
      }

      v38 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v35 = (os_log_s *)gLogObj;
      id v36 = v49;
      os_log_type_t v39 = os_log_type_enabled((os_log_t)gLogObj, v49);
      if (v38)
      {
        if (v39)
        {
          *(_DWORD *)buf = 136446978;
          v56 = "nw_http3_framer_write_http3_frame_header";
          BOOL v57 = 1024;
          *(_DWORD *)v58 = v50;
          *(_WORD *)&v58[4] = 1024;
          *(_DWORD *)&v58[6] = offset;
          v59 = 2082;
          os_log_type_t v60 = v38;
          _os_log_impl( &dword_181A5C000,  v35,  v36,  "%{public}s Incorrect frame length set: %u != %u, dumping backtrace:%{public}s",  buf,  0x22u);
        }

        free(v38);
        goto LABEL_96;
      }

      if (v39)
      {
        *(_DWORD *)buf = 136446722;
        v56 = "nw_http3_framer_write_http3_frame_header";
        BOOL v57 = 1024;
        *(_DWORD *)v58 = v50;
        *(_WORD *)&v58[4] = 1024;
        *(_DWORD *)&v58[6] = offset;
        v37 = "%{public}s Incorrect frame length set: %u != %u, no backtrace";
LABEL_95:
        _os_log_impl(&dword_181A5C000, v35, v36, v37, buf, 0x18u);
      }
    }

        if (v27)
        {
          os_log_type_t v47 = (char *)v27;
          goto LABEL_55;
        }

        goto LABEL_56;
      }
    }

    __nwlog_obj();
    os_log_type_t v97 = *(const char **)(v5 + 16);
    if (!v97) {
      os_log_type_t v97 = "invalid";
    }
    *(_DWORD *)v122 = 136446466;
    v123 = "nw_http3_encoder_stream_process_output";
    v124 = 2082;
    v125 = (void *)v97;
    BOOL v98 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    __uint64_t v110 = 0;
    if (__nwlog_fault(v98, &type, &v110))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v99 = (os_log_s *)__nwlog_obj();
        os_log_type_t v100 = type;
        if (!os_log_type_enabled(v99, type)) {
          goto LABEL_190;
        }
        BOOL v101 = *(const char **)(v5 + 16);
        if (!v101) {
          BOOL v101 = "invalid";
        }
        *(_DWORD *)v122 = 136446466;
        v123 = "nw_http3_encoder_stream_process_output";
        v124 = 2082;
        v125 = (void *)v101;
        os_log_type_t v102 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback";
        goto LABEL_189;
      }

      if (!v110)
      {
        v99 = (os_log_s *)__nwlog_obj();
        os_log_type_t v100 = type;
        if (!os_log_type_enabled(v99, type)) {
          goto LABEL_190;
        }
        v106 = *(const char **)(v5 + 16);
        if (!v106) {
          v106 = "invalid";
        }
        *(_DWORD *)v122 = 136446466;
        v123 = "nw_http3_encoder_stream_process_output";
        v124 = 2082;
        v125 = (void *)v106;
        os_log_type_t v102 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback, backtrace limit exceeded";
        goto LABEL_189;
      }

      os_log_type_t v103 = (char *)__nw_create_backtrace_string();
      v99 = (os_log_s *)__nwlog_obj();
      os_log_type_t v100 = type;
      __uint64_t v104 = os_log_type_enabled(v99, type);
      if (v103)
      {
        if (v104)
        {
          char v105 = *(const char **)(v5 + 16);
          if (!v105) {
            char v105 = "invalid";
          }
          *(_DWORD *)v122 = 136446722;
          v123 = "nw_http3_encoder_stream_process_output";
          v124 = 2082;
          v125 = (void *)v105;
          v126 = 2082;
          v127 = v103;
          _os_log_impl( &dword_181A5C000,  v99,  v100,  "%{public}s protocol %{public}s has invalid finalize_output_frames callback, dumping backtrace:%{public}s",  v122,  0x20u);
        }

        free(v103);
        goto LABEL_190;
      }

      if (v104)
      {
        v107 = *(const char **)(v5 + 16);
        if (!v107) {
          v107 = "invalid";
        }
        *(_DWORD *)v122 = 136446466;
        v123 = "nw_http3_encoder_stream_process_output";
        v124 = 2082;
        v125 = (void *)v107;
        os_log_type_t v102 = "%{public}s protocol %{public}s has invalid finalize_output_frames callback, no backtrace";
LABEL_189:
        _os_log_impl(&dword_181A5C000, v99, v100, v102, v122, 0x16u);
      }
    }

  if (v10) {
    free(v10);
  }
  return 0LL;
}

  if (v10) {
LABEL_54:
  }
    free(v10);
}

  if (v9) {
    free(v9);
  }
  return 0LL;
}

    _os_log_impl(&dword_181A5C000, v14, v15, v16, buf, 0xCu);
    goto LABEL_54;
  }

  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v24 = "nw_socket_get_parameters";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v24 = "nw_socket_get_parameters";
      int v16 = "%{public}s called with null socket_handler";
      goto LABEL_53;
    }

    if (!v21)
    {
      BOOL v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v24 = "nw_socket_get_parameters";
      int v16 = "%{public}s called with null socket_handler, backtrace limit exceeded";
      goto LABEL_53;
    }

    char v19 = (char *)__nw_create_backtrace_string();
    BOOL v14 = (os_log_s *)__nwlog_obj();
    os_log_type_t v15 = type;
    char v20 = os_log_type_enabled(v14, type);
    if (!v19)
    {
      if (!v20) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v24 = "nw_socket_get_parameters";
      int v16 = "%{public}s called with null socket_handler, no backtrace";
      goto LABEL_53;
    }

    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v24 = "nw_socket_get_parameters";
      v25 = 2082;
      os_log_type_t v26 = v19;
      _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s called with null socket_handler, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v19);
LABEL_54:
    if (!v13) {
      return 0LL;
    }
LABEL_55:
    free(v13);
    return 0LL;
  }

  identifier = a1[2].identifier;
  if (!identifier)
  {
    if ((*(_WORD *)&a1[6].flow_id[13] & 0x80) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      id v6 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        __int16 v24 = "nw_socket_get_parameters";
        v25 = 2082;
        os_log_type_t v26 = (char *)&a1[6].identifier + 4;
        _os_log_impl(&dword_181A5C000, v6, OS_LOG_TYPE_ERROR, "%{public}s %{public}s No input handler", buf, 0x16u);
      }
    }

    return 0LL;
  }

  id v3 = *(void *)&identifier->name[24];
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = *(uint64_t (**)(nw_protocol_identifier *))(v3 + 112);
  if (!v4) {
    return 0LL;
  }
  if (*(_UNKNOWN **)identifier[1].name != &nw_protocol_ref_counted_handle) {
    return v4(a1[2].identifier);
  }
  char v8 = *(void *)&identifier[2].name[8];
  if (v8) {
    *(void *)&identifier[2].name[8] = v8 + 1;
  }
  uint64_t v7 = v4(identifier);
  if (*(_UNKNOWN **)identifier[1].name == &nw_protocol_ref_counted_handle)
  {
    BOOL v9 = *(void *)&identifier[2].name[8];
    if (v9)
    {
      os_log_type_t v10 = v9 - 1;
      *(void *)&identifier[2].name[8] = v10;
      if (!v10)
      {
        os_log_type_t v11 = *(void (***)(void))&identifier[1].name[24];
        if (v11)
        {
          *(void *)&identifier[1].name[24] = 0LL;
          v11[2](v11);
          _Block_release(v11);
        }

        if ((identifier[1].level & 1) != 0)
        {
          os_log_type_t v12 = *(const void **)&identifier[1].name[24];
          if (v12) {
            _Block_release(v12);
          }
        }

        free(identifier);
      }
    }
  }

  return v7;
}

    _os_log_impl(&dword_181A5C000, v14, v15, v16, buf, 0xCu);
    goto LABEL_54;
  }

  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v24 = "nw_socket_get_path";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v24 = "nw_socket_get_path";
      int v16 = "%{public}s called with null socket_handler";
      goto LABEL_53;
    }

    if (!v21)
    {
      BOOL v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v24 = "nw_socket_get_path";
      int v16 = "%{public}s called with null socket_handler, backtrace limit exceeded";
      goto LABEL_53;
    }

    char v19 = (char *)__nw_create_backtrace_string();
    BOOL v14 = (os_log_s *)__nwlog_obj();
    os_log_type_t v15 = type;
    char v20 = os_log_type_enabled(v14, type);
    if (!v19)
    {
      if (!v20) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v24 = "nw_socket_get_path";
      int v16 = "%{public}s called with null socket_handler, no backtrace";
      goto LABEL_53;
    }

    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v24 = "nw_socket_get_path";
      v25 = 2082;
      os_log_type_t v26 = v19;
      _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s called with null socket_handler, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v19);
LABEL_54:
    if (!v13) {
      return 0LL;
    }
LABEL_55:
    free(v13);
    return 0LL;
  }

  identifier = a1[2].identifier;
  if (!identifier)
  {
    if ((*(_WORD *)&a1[6].flow_id[13] & 0x80) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      id v6 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        __int16 v24 = "nw_socket_get_path";
        v25 = 2082;
        os_log_type_t v26 = (char *)&a1[6].identifier + 4;
        _os_log_impl(&dword_181A5C000, v6, OS_LOG_TYPE_ERROR, "%{public}s %{public}s No input handler", buf, 0x16u);
      }
    }

    return 0LL;
  }

  id v3 = *(void *)&identifier->name[24];
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = *(uint64_t (**)(nw_protocol_identifier *))(v3 + 120);
  if (!v4) {
    return 0LL;
  }
  if (*(_UNKNOWN **)identifier[1].name != &nw_protocol_ref_counted_handle) {
    return v4(a1[2].identifier);
  }
  char v8 = *(void *)&identifier[2].name[8];
  if (v8) {
    *(void *)&identifier[2].name[8] = v8 + 1;
  }
  uint64_t v7 = v4(identifier);
  if (*(_UNKNOWN **)identifier[1].name == &nw_protocol_ref_counted_handle)
  {
    BOOL v9 = *(void *)&identifier[2].name[8];
    if (v9)
    {
      os_log_type_t v10 = v9 - 1;
      *(void *)&identifier[2].name[8] = v10;
      if (!v10)
      {
        os_log_type_t v11 = *(void (***)(void))&identifier[1].name[24];
        if (v11)
        {
          *(void *)&identifier[1].name[24] = 0LL;
          v11[2](v11);
          _Block_release(v11);
        }

        if ((identifier[1].level & 1) != 0)
        {
          os_log_type_t v12 = *(const void **)&identifier[1].name[24];
          if (v12) {
            _Block_release(v12);
          }
        }

        free(identifier);
      }
    }
  }

  return v7;
}

    _os_log_impl(&dword_181A5C000, v14, v15, v16, buf, 0xCu);
    goto LABEL_54;
  }

  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v24 = "nw_socket_get_local";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v24 = "nw_socket_get_local";
      int v16 = "%{public}s called with null socket_handler";
      goto LABEL_53;
    }

    if (!v21)
    {
      BOOL v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v24 = "nw_socket_get_local";
      int v16 = "%{public}s called with null socket_handler, backtrace limit exceeded";
      goto LABEL_53;
    }

    char v19 = (char *)__nw_create_backtrace_string();
    BOOL v14 = (os_log_s *)__nwlog_obj();
    os_log_type_t v15 = type;
    char v20 = os_log_type_enabled(v14, type);
    if (!v19)
    {
      if (!v20) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v24 = "nw_socket_get_local";
      int v16 = "%{public}s called with null socket_handler, no backtrace";
      goto LABEL_53;
    }

    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v24 = "nw_socket_get_local";
      v25 = 2082;
      os_log_type_t v26 = v19;
      _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s called with null socket_handler, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v19);
LABEL_54:
    if (!v13) {
      return 0LL;
    }
LABEL_55:
    free(v13);
    return 0LL;
  }

  identifier = a1[2].identifier;
  if (!identifier)
  {
    if ((*(_WORD *)&a1[6].flow_id[13] & 0x80) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      id v6 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        __int16 v24 = "nw_socket_get_local";
        v25 = 2082;
        os_log_type_t v26 = (char *)&a1[6].identifier + 4;
        _os_log_impl(&dword_181A5C000, v6, OS_LOG_TYPE_ERROR, "%{public}s %{public}s No input handler", buf, 0x16u);
      }
    }

    return 0LL;
  }

  id v3 = *(void *)&identifier->name[24];
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = *(uint64_t (**)(nw_protocol_identifier *))(v3 + 128);
  if (!v4) {
    return 0LL;
  }
  if (*(_UNKNOWN **)identifier[1].name != &nw_protocol_ref_counted_handle) {
    return v4(a1[2].identifier);
  }
  char v8 = *(void *)&identifier[2].name[8];
  if (v8) {
    *(void *)&identifier[2].name[8] = v8 + 1;
  }
  uint64_t v7 = v4(identifier);
  if (*(_UNKNOWN **)identifier[1].name == &nw_protocol_ref_counted_handle)
  {
    BOOL v9 = *(void *)&identifier[2].name[8];
    if (v9)
    {
      os_log_type_t v10 = v9 - 1;
      *(void *)&identifier[2].name[8] = v10;
      if (!v10)
      {
        os_log_type_t v11 = *(void (***)(void))&identifier[1].name[24];
        if (v11)
        {
          *(void *)&identifier[1].name[24] = 0LL;
          v11[2](v11);
          _Block_release(v11);
        }

        if ((identifier[1].level & 1) != 0)
        {
          os_log_type_t v12 = *(const void **)&identifier[1].name[24];
          if (v12) {
            _Block_release(v12);
          }
        }

        free(identifier);
      }
    }
  }

  return v7;
}

    _os_log_impl(&dword_181A5C000, v14, v15, v16, buf, 0xCu);
    goto LABEL_54;
  }

  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v24 = "nw_socket_get_remote";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v24 = "nw_socket_get_remote";
      int v16 = "%{public}s called with null socket_handler";
      goto LABEL_53;
    }

    if (!v21)
    {
      BOOL v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v24 = "nw_socket_get_remote";
      int v16 = "%{public}s called with null socket_handler, backtrace limit exceeded";
      goto LABEL_53;
    }

    char v19 = (char *)__nw_create_backtrace_string();
    BOOL v14 = (os_log_s *)__nwlog_obj();
    os_log_type_t v15 = type;
    char v20 = os_log_type_enabled(v14, type);
    if (!v19)
    {
      if (!v20) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v24 = "nw_socket_get_remote";
      int v16 = "%{public}s called with null socket_handler, no backtrace";
      goto LABEL_53;
    }

    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v24 = "nw_socket_get_remote";
      v25 = 2082;
      os_log_type_t v26 = v19;
      _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s called with null socket_handler, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v19);
LABEL_54:
    if (!v13) {
      return 0LL;
    }
LABEL_55:
    free(v13);
    return 0LL;
  }

  identifier = a1[2].identifier;
  if (!identifier)
  {
    if ((*(_WORD *)&a1[6].flow_id[13] & 0x80) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      id v6 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        __int16 v24 = "nw_socket_get_remote";
        v25 = 2082;
        os_log_type_t v26 = (char *)&a1[6].identifier + 4;
        _os_log_impl(&dword_181A5C000, v6, OS_LOG_TYPE_ERROR, "%{public}s %{public}s No input handler", buf, 0x16u);
      }
    }

    return 0LL;
  }

  id v3 = *(void *)&identifier->name[24];
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = *(uint64_t (**)(nw_protocol_identifier *))(v3 + 136);
  if (!v4) {
    return 0LL;
  }
  if (*(_UNKNOWN **)identifier[1].name != &nw_protocol_ref_counted_handle) {
    return v4(a1[2].identifier);
  }
  char v8 = *(void *)&identifier[2].name[8];
  if (v8) {
    *(void *)&identifier[2].name[8] = v8 + 1;
  }
  uint64_t v7 = v4(identifier);
  if (*(_UNKNOWN **)identifier[1].name == &nw_protocol_ref_counted_handle)
  {
    BOOL v9 = *(void *)&identifier[2].name[8];
    if (v9)
    {
      os_log_type_t v10 = v9 - 1;
      *(void *)&identifier[2].name[8] = v10;
      if (!v10)
      {
        os_log_type_t v11 = *(void (***)(void))&identifier[1].name[24];
        if (v11)
        {
          *(void *)&identifier[1].name[24] = 0LL;
          v11[2](v11);
          _Block_release(v11);
        }

        if ((identifier[1].level & 1) != 0)
        {
          os_log_type_t v12 = *(const void **)&identifier[1].name[24];
          if (v12) {
            _Block_release(v12);
          }
        }

        free(identifier);
      }
    }
  }

  return v7;
}

        if (v25) {
          goto LABEL_54;
        }
LABEL_55:
        os_log_type_t v28 = 0LL;
        char v19 = v6 - 5LL;
        char v8 = (unsigned __int8 *)v145;
        char v20 = v143;
LABEL_56:
        dispatch_workloop_t v34 = v22 + 5 + v18;
        if (v34 > v6)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          char v43 = (id)gLogObj;
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_client_id";
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v22 + 5;
          *(_WORD *)&buf[22] = 2048;
          v153 = v18;
          v154 = 2048;
          *(void *)v155 = v6;
          dispatch_workloop_t v44 = (void *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          v148 = 0;
          if (__nwlog_fault((const char *)v44, &type, &v148))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v45 = (os_log_s *)(id)gLogObj;
              os_log_type_t v46 = type;
              if (os_log_type_enabled(v45, type))
              {
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_client_id";
                *(_WORD *)&buf[12] = 2048;
                *(void *)&buf[14] = v22 + 5;
                *(_WORD *)&buf[22] = 2048;
                v153 = v18;
                v154 = 2048;
                *(void *)v155 = v6;
                _os_log_impl( &dword_181A5C000,  v45,  v46,  "%{public}s TLV length (%zu) at offset %zu goes beyond total length (%zu)",  buf,  0x2Au);
              }

              goto LABEL_129;
            }

            if (v148)
            {
              v51 = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v45 = (os_log_s *)(id)gLogObj;
              os_log_type_t v52 = type;
              v53 = os_log_type_enabled(v45, type);
              if (v51)
              {
                if (v53)
                {
                  *(_DWORD *)buf = 136447234;
                  *(void *)&uint8_t buf[4] = "nw_path_parse_necp_client_id";
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v22 + 5;
                  *(_WORD *)&buf[22] = 2048;
                  v153 = v18;
                  v154 = 2048;
                  *(void *)v155 = v6;
                  *(_WORD *)&v155[8] = 2082;
                  *(void *)&v155[10] = v51;
                  _os_log_impl( &dword_181A5C000,  v45,  v52,  "%{public}s TLV length (%zu) at offset %zu goes beyond total length (%zu), dumping backtrace:%{public}s",  buf,  0x34u);
                }

                free(v51);
                if (!v44)
                {
LABEL_132:
                  char v19 = v6 - 5LL;
                  char v8 = (unsigned __int8 *)v145;
                  char v20 = v143;
                  if (v34 == v6) {
                    goto LABEL_133;
                  }
LABEL_224:
                  __nwlog_obj();
                  v106 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "nw_path_parse_necp_client_id";
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v34;
                  *(_WORD *)&buf[22] = 2048;
                  v153 = v6;
                  v107 = (char *)_os_log_send_and_compose_impl();

                  os_log_type_t type = OS_LOG_TYPE_ERROR;
                  v148 = 0;
                  if (__nwlog_fault(v107, &type, &v148))
                  {
                    if (type == OS_LOG_TYPE_FAULT)
                    {
                      __nwlog_obj();
                      v108 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      __int16 v109 = type;
                      if (os_log_type_enabled(v108, type))
                      {
                        *(_DWORD *)buf = 136446722;
                        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_client_id";
                        *(_WORD *)&buf[12] = 2048;
                        *(void *)&buf[14] = v34;
                        *(_WORD *)&buf[22] = 2048;
                        v153 = v6;
                        _os_log_impl( &dword_181A5C000,  v108,  v109,  "%{public}s cursor has unexpected value %zu != %zu",  buf,  0x20u);
                      }

                      goto LABEL_285;
                    }

                    if (v148)
                    {
                      v119 = (char *)__nw_create_backtrace_string();
                      __nwlog_obj();
                      v108 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      v120 = type;
                      v121 = os_log_type_enabled(v108, type);
                      if (v119)
                      {
                        if (v121)
                        {
                          *(_DWORD *)buf = 136446978;
                          *(void *)&uint8_t buf[4] = "nw_path_parse_necp_client_id";
                          *(_WORD *)&buf[12] = 2048;
                          *(void *)&buf[14] = v34;
                          *(_WORD *)&buf[22] = 2048;
                          v153 = v6;
                          v154 = 2082;
                          *(void *)v155 = v119;
                          _os_log_impl( &dword_181A5C000,  v108,  v120,  "%{public}s cursor has unexpected value %zu != %zu, dumping backtrace:%{public}s",  buf,  0x2Au);
                        }

                        free(v119);
                        goto LABEL_286;
                      }

                      if (v121)
                      {
                        *(_DWORD *)buf = 136446722;
                        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_client_id";
                        *(_WORD *)&buf[12] = 2048;
                        *(void *)&buf[14] = v34;
                        *(_WORD *)&buf[22] = 2048;
                        v153 = v6;
                        _os_log_impl( &dword_181A5C000,  v108,  v120,  "%{public}s cursor has unexpected value %zu != %zu, no backtrace",  buf,  0x20u);
                      }
                    }

                    else
                    {
                      __nwlog_obj();
                      v108 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      v133 = type;
                      if (os_log_type_enabled(v108, type))
                      {
                        *(_DWORD *)buf = 136446722;
                        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_client_id";
                        *(_WORD *)&buf[12] = 2048;
                        *(void *)&buf[14] = v34;
                        *(_WORD *)&buf[22] = 2048;
                        v153 = v6;
                        _os_log_impl( &dword_181A5C000,  v108,  v133,  "%{public}s cursor has unexpected value %zu != %zu, backtrace limit exceeded",  buf,  0x20u);
                      }
                    }

  if (v22) {
    free(v22);
  }
  os_log_type_t v12 = 0LL;
LABEL_17:

  return v12;
}

  if (v12) {
    free(v12);
  }
  uint64_t v7 = 0LL;
LABEL_3:

  if (nw_protocol_copy_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v7,  nw_protocol_copy_http_definition_http_definition);

  if (is_equal_unsafe)
  {
    v35[0] = MEMORY[0x1895F87A8];
    v35[1] = 3221225472LL;
    v35[2] = __nw_http_metadata_set_request_block_invoke;
    v35[3] = &unk_189BC6260;
    BOOL v9 = v4;
    v35[4] = v9;
    if (v6)
    {
      os_log_type_t v10 = v6[4];
      if (v10) {
        __nw_http_metadata_set_request_block_invoke((uint64_t)v35, v10);
      }
LABEL_9:

      goto LABEL_10;
    }

    __nwlog_obj();
    char v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v39 = "nw_protocol_metadata_access_handle";
    char v20 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    id v36 = 0;
    if (__nwlog_fault(v20, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v39 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_181A5C000, v21, v22, "%{public}s called with null metadata", buf, 0xCu);
        }
      }

      else if (v36)
      {
        os_log_type_t v29 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v30 = type;
        v31 = os_log_type_enabled(v21, type);
        if (v29)
        {
          if (v31)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v39 = "nw_protocol_metadata_access_handle";
            v40 = 2082;
            os_log_type_t v41 = v29;
            _os_log_impl( &dword_181A5C000,  v21,  v30,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v29);
          goto LABEL_64;
        }

        if (v31)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v39 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_181A5C000, v21, v30, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        dispatch_workloop_t v34 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v39 = "nw_protocol_metadata_access_handle";
          _os_log_impl( &dword_181A5C000,  v21,  v34,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

  if (v12) {
    free(v12);
  }
  uint64_t v7 = 0LL;
LABEL_3:

  if (nw_protocol_copy_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v7,  nw_protocol_copy_http_definition_http_definition);

  if (is_equal_unsafe)
  {
    v35[0] = MEMORY[0x1895F87A8];
    v35[1] = 3221225472LL;
    v35[2] = __nw_http_metadata_enumerate_modern_header_fields_combined_block_invoke;
    v35[3] = &unk_189BC6110;
    BOOL v9 = v4;
    v35[4] = v9;
    if (v6)
    {
      os_log_type_t v10 = v6[4];
      if (v10) {
        __nw_http_metadata_enumerate_modern_header_fields_combined_block_invoke((uint64_t)v35, v10);
      }
LABEL_9:

      goto LABEL_10;
    }

    __nwlog_obj();
    char v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v39 = "nw_protocol_metadata_access_handle";
    char v20 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    id v36 = 0;
    if (__nwlog_fault(v20, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v39 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_181A5C000, v21, v22, "%{public}s called with null metadata", buf, 0xCu);
        }
      }

      else if (v36)
      {
        os_log_type_t v29 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v30 = type;
        v31 = os_log_type_enabled(v21, type);
        if (v29)
        {
          if (v31)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v39 = "nw_protocol_metadata_access_handle";
            v40 = 2082;
            os_log_type_t v41 = v29;
            _os_log_impl( &dword_181A5C000,  v21,  v30,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v29);
          goto LABEL_64;
        }

        if (v31)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v39 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_181A5C000, v21, v30, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        dispatch_workloop_t v34 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v39 = "nw_protocol_metadata_access_handle";
          _os_log_impl( &dword_181A5C000,  v21,  v34,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

  if (v9) {
    free(v9);
  }
  char v5 = 0LL;
LABEL_3:

  if (nw_protocol_copy_http_client_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v5,  nw_protocol_copy_http_client_definition_definition);

  if (!is_equal_unsafe)
  {
    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    dispatch_workloop_t v34 = "nw_http_client_metadata_set_sniffed_media_type";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        dispatch_workloop_t v34 = "nw_http_client_metadata_set_sniffed_media_type";
        _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s metadata must be http_client", buf, 0xCu);
      }
    }

    else if (v31)
    {
      os_log_type_t v21 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v22 = type;
      uint64_t v23 = os_log_type_enabled(v14, type);
      if (v21)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          dispatch_workloop_t v34 = "nw_http_client_metadata_set_sniffed_media_type";
          v35 = 2082;
          id v36 = v21;
          _os_log_impl( &dword_181A5C000,  v14,  v22,  "%{public}s metadata must be http_client, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v21);
LABEL_62:
        if (!v13) {
          goto LABEL_9;
        }
LABEL_63:
        free(v13);
        goto LABEL_9;
      }

      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        dispatch_workloop_t v34 = "nw_http_client_metadata_set_sniffed_media_type";
        _os_log_impl(&dword_181A5C000, v14, v22, "%{public}s metadata must be http_client, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        dispatch_workloop_t v34 = "nw_http_client_metadata_set_sniffed_media_type";
        _os_log_impl( &dword_181A5C000,  v14,  v28,  "%{public}s metadata must be http_client, backtrace limit exceeded",  buf,  0xCu);
      }
    }

  if (v9) {
    free(v9);
  }
  char v5 = 0LL;
LABEL_3:

  if (nw_protocol_copy_http_client_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v5,  nw_protocol_copy_http_client_definition_definition);

  if (!is_equal_unsafe)
  {
    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_http_client_metadata_set_client_error";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v32 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_http_client_metadata_set_client_error";
        _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s metadata must be http_client", buf, 0xCu);
      }
    }

    else if (v32)
    {
      os_log_type_t v21 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v22 = type;
      uint64_t v23 = os_log_type_enabled(v14, type);
      if (v21)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          v35 = "nw_http_client_metadata_set_client_error";
          id v36 = 2082;
          v37 = v21;
          _os_log_impl( &dword_181A5C000,  v14,  v22,  "%{public}s metadata must be http_client, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v21);
LABEL_62:
        if (!v13) {
          goto LABEL_9;
        }
LABEL_63:
        free(v13);
        goto LABEL_9;
      }

      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_http_client_metadata_set_client_error";
        _os_log_impl(&dword_181A5C000, v14, v22, "%{public}s metadata must be http_client, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_http_client_metadata_set_client_error";
        _os_log_impl( &dword_181A5C000,  v14,  v28,  "%{public}s metadata must be http_client, backtrace limit exceeded",  buf,  0xCu);
      }
    }

  if (v11) {
    free(v11);
  }
  uint64_t v7 = 0LL;
LABEL_3:

  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v7,  nw_protocol_copy_http_connection_definition_definition);

  if (!is_equal_unsafe)
  {
    __nwlog_obj();
    BOOL v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v36 = "nw_http_connection_metadata_set_cached_token";
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v33 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        id v36 = "nw_http_connection_metadata_set_cached_token";
        _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s metadata must be http_connection", buf, 0xCu);
      }
    }

    else if (v33)
    {
      uint64_t v23 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v24 = type;
      v25 = os_log_type_enabled(v16, type);
      if (v23)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          id v36 = "nw_http_connection_metadata_set_cached_token";
          v37 = 2082;
          v38 = v23;
          _os_log_impl( &dword_181A5C000,  v16,  v24,  "%{public}s metadata must be http_connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v23);
LABEL_62:
        if (!v15) {
          goto LABEL_9;
        }
LABEL_63:
        free(v15);
        goto LABEL_9;
      }

      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        id v36 = "nw_http_connection_metadata_set_cached_token";
        _os_log_impl(&dword_181A5C000, v16, v24, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        id v36 = "nw_http_connection_metadata_set_cached_token";
        _os_log_impl( &dword_181A5C000,  v16,  v30,  "%{public}s metadata must be http_connection, backtrace limit exceeded",  buf,  0xCu);
      }
    }

  if (v8) {
    free(v8);
  }
  id v3 = 0LL;
LABEL_3:

  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v3,  nw_protocol_copy_http_connection_definition_definition);

  if (!is_equal_unsafe)
  {
    __nwlog_obj();
    os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v32 = "nw_http_connection_metadata_mark_cached_token_failed";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v29 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v32 = "nw_http_connection_metadata_mark_cached_token_failed";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s metadata must be http_connection", buf, 0xCu);
      }
    }

    else if (v29)
    {
      char v20 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      v22 = os_log_type_enabled(v13, type);
      if (v20)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v32 = "nw_http_connection_metadata_mark_cached_token_failed";
          BOOL v33 = 2082;
          dispatch_workloop_t v34 = v20;
          _os_log_impl( &dword_181A5C000,  v13,  v21,  "%{public}s metadata must be http_connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v20);
LABEL_62:
        if (!v12) {
          goto LABEL_9;
        }
LABEL_63:
        free(v12);
        goto LABEL_9;
      }

      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v32 = "nw_http_connection_metadata_mark_cached_token_failed";
        _os_log_impl(&dword_181A5C000, v13, v21, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v27 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v32 = "nw_http_connection_metadata_mark_cached_token_failed";
        _os_log_impl( &dword_181A5C000,  v13,  v27,  "%{public}s metadata must be http_connection, backtrace limit exceeded",  buf,  0xCu);
      }
    }

  if (v9) {
    free(v9);
  }
  char v5 = 0LL;
LABEL_3:

  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v5,  nw_protocol_copy_http_connection_definition_definition);

  if (!is_equal_unsafe)
  {
    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    dispatch_workloop_t v34 = "nw_http_connection_metadata_get_uuid";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        dispatch_workloop_t v34 = "nw_http_connection_metadata_get_uuid";
        _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s metadata must be http_connection", buf, 0xCu);
      }
    }

    else if (v31)
    {
      os_log_type_t v21 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v22 = type;
      uint64_t v23 = os_log_type_enabled(v14, type);
      if (v21)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          dispatch_workloop_t v34 = "nw_http_connection_metadata_get_uuid";
          v35 = 2082;
          id v36 = v21;
          _os_log_impl( &dword_181A5C000,  v14,  v22,  "%{public}s metadata must be http_connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v21);
LABEL_62:
        if (!v13) {
          goto LABEL_9;
        }
LABEL_63:
        free(v13);
        goto LABEL_9;
      }

      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        dispatch_workloop_t v34 = "nw_http_connection_metadata_get_uuid";
        _os_log_impl(&dword_181A5C000, v14, v22, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        dispatch_workloop_t v34 = "nw_http_connection_metadata_get_uuid";
        _os_log_impl( &dword_181A5C000,  v14,  v28,  "%{public}s metadata must be http_connection, backtrace limit exceeded",  buf,  0xCu);
      }
    }

      *((void *)handle + 21) = v35;
      parameters = (void *)nw_protocol_get_parameters((uint64_t)v36);
      if (nw_protocol_http_messaging_accept((uint64_t)handle, *((void **)handle + 14), parameters)
        && (nw_http_messaging_add_to_version_specific_protocol((uint64_t)handle, (uint64_t)v36) & 1) != 0)
      {
        if (v37 == 1) {
          nw_protocol_connect(v36[4], (uint64_t)v36);
        }
      }

      else
      {
        if ((handle[272] & 2) == 0)
        {
          pthread_once(v29, v30);
          networkd_settings_init();
          os_log_type_t v47 = (os_log_s *)v31[131];
          if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136446722;
            BOOL v101 = v32;
            os_log_type_t v102 = 2082;
            os_log_type_t v103 = v28;
            __uint64_t v104 = 2080;
            char v105 = " ";
            _os_log_impl( &dword_181A5C000,  v47,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%sVersion specific protocol cannot accept stream",  buf,  0x20u);
          }
        }

        id v49 = (char *)*((void *)handle + 21);
        v48 = *((void *)handle + 22);
        if ((unint64_t)v49 >= v48)
        {
          os_log_type_t v97 = v28;
          v51 = (char *)*((void *)handle + 20);
          os_log_type_t v52 = (v49 - v51) >> 4;
          v53 = v52 + 1;
          BOOL v54 = v48 - (void)v51;
          if (v54 >> 3 > v53) {
            v53 = v54 >> 3;
          }
          uint64_t v55 = (unint64_t)v54 >= 0x7FFFFFFFFFFFFFF0LL;
          v56 = 0xFFFFFFFFFFFFFFFLL;
          if (!v55) {
            v56 = v53;
          }
          if (v56 >> 60) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          BOOL v57 = v32;
          v58 = v30;
          v59 = v29;
          os_log_type_t v60 = v31;
          BOOL v61 = 16 * v56;
          v62 = (char *)operator new(16 * v56);
          os_log_type_t v63 = &v62[16 * v52];
          *(void *)os_log_type_t v63 = v36;
          *((_DWORD *)v63 + 2) = 2;
          if (v49 == v51)
          {
            os_log_type_t v65 = &v62[16 * v52];
          }

          else
          {
            os_log_type_t v64 = &v62[16 * v52];
            do
            {
              os_log_type_t v65 = v64 - 16;
              *((_OWORD *)v64 - 1) = *((_OWORD *)v49 - 1);
              v49 -= 16;
              v64 -= 16;
            }

            while (v49 != v51);
          }

          v50 = v63 + 16;
          *((void *)handle + 20) = v65;
          *((void *)handle + 21) = v63 + 16;
          *((void *)handle + 22) = &v62[v61];
          if (v51) {
            operator delete(v51);
          }
          v31 = v60;
          os_log_type_t v29 = v59;
          os_log_type_t v30 = v58;
          os_log_type_t v32 = v57;
          os_log_type_t v28 = v97;
        }

        else
        {
          *(void *)id v49 = v36;
          *((_DWORD *)v49 + 2) = 2;
          v50 = v49 + 16;
        }

        *((void *)handle + 21) = v50;
        nw_protocol_error(v36, (uint64_t)handle);
        nw_protocol_disconnected(v36, (uint64_t)handle);
      }
    }
  }

LABEL_73:
  char v8 = v88;
  if (registered_endpoint)
  {
LABEL_74:
    if (nw_endpoint_flow_join_protocol( *(void **)(a1 + 32),  *(void **)(a1 + 48),  v8,  v7,  identifier,  a2,  registered_endpoint,  *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL),  *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL),  (_BYTE *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL)))
    {
      *(void *)(*(void *)(a1 + 56) + 736LL) = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL)
                                                            + 32LL);
      *(_BYTE *)(*(void *)(a1 + 56) + 33LL) |= 1u;
      while (1)
      {
        registered_endpoint = *(void *)(registered_endpoint + 32);
        if (*(_DWORD *)(*(void *)(registered_endpoint + 16) + 32LL) == 3)
        {
          os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 56) + 880LL));
          os_log_type_t v47 = *(void *)(a1 + 56);
          if (!*(void *)(v47 + 720))
          {
            if (*(_UNKNOWN **)(registered_endpoint + 40) == &nw_protocol_ref_counted_handle)
            {
              id v49 = *(void *)(registered_endpoint + 88);
              if (v49)
              {
                *(void *)(registered_endpoint + 88) = v49 + 1;
                os_log_type_t v47 = *(void *)(a1 + 56);
              }

              *(void *)buf = registered_endpoint;
              v48 = buf[8] | 1;
            }

            else
            {
              *(void *)buf = registered_endpoint;
              v48 = buf[8] & 0xFE;
            }

            buf[8] = v48;
            v50 = *(_BYTE *)(v47 + 728);
            if ((v50 & 1) != 0)
            {
              nw::release_if_needed<nw_protocol *>((uint64_t *)(v47 + 720));
              v50 = *(_BYTE *)(v47 + 728);
              registered_endpoint = *(void *)buf;
              v48 = buf[8];
            }

            *(void *)(v47 + 720) = registered_endpoint;
            *(_BYTE *)(v47 + 728) = v50 & 0xFE | v48 & 1;
            os_log_type_t v47 = *(void *)(a1 + 56);
          }

          os_unfair_lock_unlock((os_unfair_lock_t)(v47 + 880));
          break;
        }
      }
    }
  }

  return 0LL;
}

LABEL_73:
  if (registered_endpoint)
  {
LABEL_74:
    if (nw_endpoint_flow_join_protocol( *(void **)(a1 + 32),  *(void **)(a1 + 48),  v128,  v7,  identifier,  -1LL,  registered_endpoint,  *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL),  *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL),  (_BYTE *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL)))
    {
      *(void *)(*(void *)(a1 + 56) + 736LL) = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL)
                                                            + 32LL);
      *(_BYTE *)(*(void *)(a1 + 56) + 33LL) |= 1u;
      os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 56) + 880LL));
      v45 = *(void *)(a1 + 56);
      if (!*(void *)(v45 + 720))
      {
        if (*(_UNKNOWN **)(registered_endpoint + 40) == &nw_protocol_ref_counted_handle)
        {
          v53 = *(void *)(registered_endpoint + 88);
          if (v53)
          {
            *(void *)(registered_endpoint + 88) = v53 + 1;
            v45 = *(void *)(a1 + 56);
          }

          *(void *)buf = registered_endpoint;
          os_log_type_t v46 = buf[8] | 1;
        }

        else
        {
          *(void *)buf = registered_endpoint;
          os_log_type_t v46 = buf[8] & 0xFE;
        }

        buf[8] = v46;
        BOOL v54 = *(_BYTE *)(v45 + 728);
        if ((v54 & 1) != 0)
        {
          nw::release_if_needed<nw_protocol *>((uint64_t *)(v45 + 720));
          BOOL v54 = *(_BYTE *)(v45 + 728);
          registered_endpoint = *(void *)buf;
          os_log_type_t v46 = buf[8];
        }

        *(void *)(v45 + 720) = registered_endpoint;
        *(_BYTE *)(v45 + 728) = v54 & 0xFE | v46 & 1;
        v45 = *(void *)(a1 + 56);
      }

      os_unfair_lock_unlock((os_unfair_lock_t)(v45 + 880));
      v51 = 0LL;
      goto LABEL_107;
    }
  }

  os_log_type_t v47 = nw_endpoint_flow_add_one_protocol( *(void **)(a1 + 32),  (__int128 *)identifier,  v128,  v7,  *(void **)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL),  *(void **)(a1 + 48),  *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL));
  if (v47)
  {
    if (nw_protocol_definition_get_message_is_stream(v7))
    {
      v48 = *(void *)(a1 + 56);
      if (!*(void *)(v48 + 768))
      {
        objc_storeStrong((id *)(v48 + 768), a3);
        if (*(_UNKNOWN **)(v47 + 40) == &nw_protocol_ref_counted_handle)
        {
          os_log_type_t v67 = *(void *)(v47 + 88);
          if (v67) {
            *(void *)(v47 + 88) = v67 + 1;
          }
          *(void *)buf = v47;
          buf[8] |= 1u;
          os_log_type_t v52 = 1;
        }

        else
        {
          os_log_type_t v52 = 0;
          *(void *)buf = v47;
          buf[8] &= ~1u;
        }

        v68 = *(void *)(a1 + 56);
        v69 = *(_BYTE *)(v68 + 784);
        if ((v69 & 1) != 0)
        {
          nw::release_if_needed<nw_protocol *>((uint64_t *)(v68 + 776));
          v69 = *(_BYTE *)(v68 + 784);
        }

        *(void *)(v68 + 776) = v47;
        *(_BYTE *)(v68 + 784) = v52 | v69 & 0xFE;
        v70 = *(void *)(v47 + 24);
        if (v70)
        {
          os_log_type_t v71 = *(uint64_t (**)(uint64_t, uint64_t, void))(v70 + 232);
          if (v71)
          {
            v72 = *(void *)(a1 + 56) + 440LL;
            __uint64_t v73 = *(void **)(v47 + 40);
            if (v73 == &nw_protocol_ref_counted_handle)
            {
              char v75 = *(void *)(v47 + 88);
              if (v75) {
                *(void *)(v47 + 88) = v75 + 1;
              }
              *(void *)buf = v47;
              unint64_t v74 = buf[8] | 1;
            }

            else
            {
              *(void *)buf = v47;
              unint64_t v74 = buf[8] & 0xFE;
            }

            buf[8] = v74;
            __uint64_t v76 = v71(v47, v72, 0LL);
            if (v73 == &nw_protocol_ref_counted_handle) {
              nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
            }
            if ((v76 & 1) == 0 && (nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32)) & 1) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              v77 = (os_log_s *)(id)gconnectionLogObj;
              if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
              {
                unint64_t v78 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
                char v79 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
                v127 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
                v123 = nw_endpoint_get_logging_description(v127);
                v125 = v79;
                v80 = v78;
                v121 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
                v81 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
                v82 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
                os_log_type_t v83 = v82;
                v84 = "invalid";
                v85 = *(const char **)(*(void *)(a1 + 56) + 392LL);
                if (!v85) {
                  v85 = "invalid";
                }
                if (*(void *)(v47 + 16)) {
                  v84 = *(const char **)(v47 + 16);
                }
                *(_DWORD *)buf = 136448258;
                *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols_block_invoke";
                v132 = 2082;
                v133 = (void *)v80;
                v134 = 2082;
                v135 = v125;
                v136 = 2082;
                v137 = (void *)v123;
                v138 = 2082;
                v139 = v121;
                v140 = 2082;
                v141 = v81;
                v142 = 2114;
                v143 = v82;
                v144 = 2082;
                v145 = (void *)v85;
                v146 = 2082;
                v147 = (uint64_t)v84;
                _os_log_impl( &dword_181A5C000,  v77,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to add protoco l %{public}s as a listener to %{public}s",  buf,  0x5Cu);
              }
            }
          }
        }
      }
    }

    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 56) + 880LL));
    id v49 = *(void *)(a1 + 56);
    if (!*(void *)(v49 + 720))
    {
      if (*(_UNKNOWN **)(v47 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v55 = *(void *)(v47 + 88);
        if (v55)
        {
          *(void *)(v47 + 88) = v55 + 1;
          id v49 = *(void *)(a1 + 56);
        }

        *(void *)buf = v47;
        v50 = buf[8] | 1;
      }

      else
      {
        *(void *)buf = v47;
        v50 = buf[8] & 0xFE;
      }

      buf[8] = v50;
      v56 = *(_BYTE *)(v49 + 728);
      BOOL v57 = v47;
      if ((v56 & 1) != 0)
      {
        nw::release_if_needed<nw_protocol *>((uint64_t *)(v49 + 720));
        v56 = *(_BYTE *)(v49 + 728);
        BOOL v57 = *(void *)buf;
        v50 = buf[8];
      }

      *(void *)(v49 + 720) = v57;
      *(_BYTE *)(v49 + 728) = v56 & 0xFE | v50 & 1;
      id v49 = *(void *)(a1 + 56);
    }

    os_unfair_lock_unlock((os_unfair_lock_t)(v49 + 880));
    *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) = v47;
    if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32)) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v58 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
      {
        v59 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        os_log_type_t v60 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        BOOL v61 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        v62 = nw_endpoint_get_logging_description(v61);
        os_log_type_t v63 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        os_log_type_t v64 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        os_log_type_t v65 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        *(_DWORD *)buf = 136448002;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_attach_protocols_block_invoke";
        v132 = 2082;
        v133 = (void *)v59;
        v134 = 2082;
        v135 = v60;
        v136 = 2082;
        v137 = (void *)v62;
        v138 = 2082;
        v139 = v63;
        v140 = 2082;
        v141 = v64;
        v142 = 2114;
        v143 = v65;
        v144 = 2082;
        v145 = identifier;
        _os_log_impl( &dword_181A5C000,  v58,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Attached transport protocol: %{public}s",  buf,  0x52u);
      }
    }

    v51 = 1LL;
  }

  else
  {
    v51 = 0LL;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL) = 1;
  }

LABEL_74:
  uint64_t v7 = v98;
  if (registered_endpoint)
  {
LABEL_75:
    if (nw_endpoint_flow_join_protocol( *(void **)(a1 + 32),  *(void **)(a1 + 48),  v7,  v6,  identifier,  -1LL,  registered_endpoint,  *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL),  *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL),  (_BYTE *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL)))
    {
      os_log_type_t v47 = 0LL;
      *(_BYTE *)(*(void *)(a1 + 56) + 33LL) |= 1u;
      goto LABEL_85;
    }
  }

  v48 = nw_endpoint_flow_add_one_protocol( *(void **)(a1 + 32),  (__int128 *)identifier,  v7,  v6,  *(void **)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL),  *(void **)(a1 + 48),  *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL));
  if (v48)
  {
    *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) = v48;
    if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32)) & 1) != 0)
    {
      os_log_type_t v47 = 1LL;
    }

    else
    {
      v99 = v7;
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      id v49 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
      {
        v50 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        v51 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        os_log_type_t v52 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        v53 = nw_endpoint_get_logging_description(v52);
        BOOL v54 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        uint64_t v55 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        v56 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        *(_DWORD *)buf = 136448002;
        os_log_type_t v103 = "nw_endpoint_flow_attach_protocols_block_invoke";
        __uint64_t v104 = 2082;
        char v105 = (void *)v50;
        v106 = 2082;
        v107 = v51;
        v108 = 2082;
        __int16 v109 = (void *)v53;
        __uint64_t v110 = 2082;
        __int16 v111 = v54;
        uint64_t v112 = 2082;
        __int16 v113 = v55;
        v114 = 2114;
        uint64_t v115 = v56;
        v116 = 2082;
        v117 = identifier;
        _os_log_impl( &dword_181A5C000,  v49,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Attached internet protocol: %{public}s",  buf,  0x52u);
      }

      os_log_type_t v47 = 1LL;
      uint64_t v7 = v99;
    }
  }

  else
  {
    os_log_type_t v47 = 0LL;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL) = 1;
  }

LABEL_74:
  uint64_t v7 = v98;
  if (registered_endpoint)
  {
LABEL_75:
    if (nw_endpoint_flow_join_protocol( *(void **)(a1 + 32),  *(void **)(a1 + 48),  v7,  v6,  identifier,  -1LL,  registered_endpoint,  *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL),  *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL),  (_BYTE *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL)))
    {
      os_log_type_t v47 = 0LL;
      *(_BYTE *)(*(void *)(a1 + 56) + 33LL) |= 1u;
      goto LABEL_85;
    }
  }

  v48 = nw_endpoint_flow_add_one_protocol( *(void **)(a1 + 32),  (__int128 *)identifier,  v7,  v6,  *(void **)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL),  *(void **)(a1 + 48),  *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL));
  if (v48)
  {
    *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) = v48;
    if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32)) & 1) != 0)
    {
      os_log_type_t v47 = 1LL;
    }

    else
    {
      v99 = v7;
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      id v49 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
      {
        v50 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        v51 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        os_log_type_t v52 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        v53 = nw_endpoint_get_logging_description(v52);
        BOOL v54 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        uint64_t v55 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        v56 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        *(_DWORD *)buf = 136448002;
        os_log_type_t v103 = "nw_endpoint_flow_attach_protocols_block_invoke";
        __uint64_t v104 = 2082;
        char v105 = (void *)v50;
        v106 = 2082;
        v107 = v51;
        v108 = 2082;
        __int16 v109 = (void *)v53;
        __uint64_t v110 = 2082;
        __int16 v111 = v54;
        uint64_t v112 = 2082;
        __int16 v113 = v55;
        v114 = 2114;
        uint64_t v115 = v56;
        v116 = 2082;
        v117 = identifier;
        _os_log_impl( &dword_181A5C000,  v49,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Attached link-layer protocol: %{public}s",  buf,  0x52u);
      }

      os_log_type_t v47 = 1LL;
      uint64_t v7 = v99;
    }
  }

  else
  {
    os_log_type_t v47 = 0LL;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL) = 1;
  }

      goto LABEL_54;
    }

    goto LABEL_54;
  }

  uint64_t v7 = nw_endpoint_handler_copy_flow(v5);
  if ((*((_BYTE *)v7 + 32) & 2) == 0)
  {
    __nwlog_obj();
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v53 = "nw_endpoint_flow_pre_attach_protocols";
    os_log_type_t v39 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v50 = 0;
    if (__nwlog_fault(v39, &type, &v50))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v41 = type;
        if (os_log_type_enabled(v40, type))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_endpoint_flow_pre_attach_protocols";
          _os_log_impl( &dword_181A5C000,  v40,  v41,  "%{public}s called with null endpoint_flow->is_leaf_flow_handler",  buf,  0xCu);
        }
      }

      else if (v50)
      {
        v45 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v46 = type;
        os_log_type_t v47 = os_log_type_enabled(v40, type);
        if (v45)
        {
          if (v47)
          {
            *(_DWORD *)buf = 136446466;
            v53 = "nw_endpoint_flow_pre_attach_protocols";
            BOOL v54 = 2082;
            uint64_t v55 = v45;
            _os_log_impl( &dword_181A5C000,  v40,  v46,  "%{public}s called with null endpoint_flow->is_leaf_flow_handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v45);
          goto LABEL_91;
        }

        if (v47)
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_endpoint_flow_pre_attach_protocols";
          _os_log_impl( &dword_181A5C000,  v40,  v46,  "%{public}s called with null endpoint_flow->is_leaf_flow_handler, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v49 = type;
        if (os_log_type_enabled(v40, type))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_endpoint_flow_pre_attach_protocols";
          _os_log_impl( &dword_181A5C000,  v40,  v49,  "%{public}s called with null endpoint_flow->is_leaf_flow_handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    _os_log_impl(&dword_181A5C000, v23, v24, v25, buf, 0xCu);
    goto LABEL_54;
  }

  if (((*(unsigned __int16 *)(a2 + 188) | (*(unsigned __int8 *)(a2 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    v35 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      v37 = *(_DWORD *)(a2 + 176);
      id v36 = *(_DWORD *)(a2 + 180);
      *(_DWORD *)buf = 136447746;
      id v49 = "nw_http2_add_to_id_table";
      v50 = 2082;
      v51 = (char *)(a2 + 191);
      os_log_type_t v52 = 2080;
      v53 = " ";
      BOOL v54 = 1024;
      uint64_t v55 = v36;
      v56 = 1024;
      BOOL v57 = v37;
      v58 = 1024;
      *(_DWORD *)v59 = v37;
      *(_WORD *)&v59[4] = 2048;
      *(void *)&v59[6] = a2;
      _os_log_impl( &dword_181A5C000,  v35,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> called for stream %d (%p)",  buf,  0x3Cu);
    }
  }

  os_log_type_t v47 = OS_LOG_TYPE_DEFAULT;
  internal = *(void *)(a1 + 160);
  if (!internal)
  {
    internal = nw_hash_table_create_internal( 0x11u,  8,  (const void *(*)(const void *, unsigned int *))stream_get_key,  (unsigned int (*)(const void *, unsigned int))stream_key_hash,  (BOOL (*)(const void *, const void *, unsigned int))stream_matches_key,  0LL);
    if (internal)
    {
      *(_DWORD *)(internal + 48) &= ~2u;
      *(void *)(a1 + 160) = internal;
      goto LABEL_7;
    }

    *(void *)(a1 + 160) = 0LL;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    id v49 = "nw_http2_add_to_id_table";
    v22 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v45 = 0;
    if (__nwlog_fault(v22, &type, &v45))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v23 = (os_log_s *)gLogObj;
        __int16 v24 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_54;
        }
        *(_DWORD *)buf = 136446210;
        id v49 = "nw_http2_add_to_id_table";
        v25 = "%{public}s nw_hash_table_create_no_lock failed";
        goto LABEL_53;
      }

      if (!v45)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v23 = (os_log_s *)gLogObj;
        __int16 v24 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_54;
        }
        *(_DWORD *)buf = 136446210;
        id v49 = "nw_http2_add_to_id_table";
        v25 = "%{public}s nw_hash_table_create_no_lock failed, backtrace limit exceeded";
        goto LABEL_53;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v23 = (os_log_s *)gLogObj;
      __int16 v24 = type;
      id v27 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (!backtrace_string)
      {
        if (!v27) {
          goto LABEL_54;
        }
        *(_DWORD *)buf = 136446210;
        id v49 = "nw_http2_add_to_id_table";
        v25 = "%{public}s nw_hash_table_create_no_lock failed, no backtrace";
        goto LABEL_53;
      }

      if (!v27)
      {
LABEL_39:
        free(backtrace_string);
        goto LABEL_54;
      }

      *(_DWORD *)buf = 136446466;
      id v49 = "nw_http2_add_to_id_table";
      v50 = 2082;
      v51 = backtrace_string;
      os_log_type_t v28 = "%{public}s nw_hash_table_create_no_lock failed, dumping backtrace:%{public}s";
LABEL_38:
      _os_log_impl(&dword_181A5C000, v23, v24, v28, buf, 0x16u);
      goto LABEL_39;
    }

    goto LABEL_54;
  }

      free(v18);
      if (!v10) {
        return;
      }
LABEL_73:
      free(v10);
      return;
    }

    os_log_type_t v11 = (os_log_s *)__nwlog_obj();
    os_log_type_t v12 = type;
    if (!os_log_type_enabled(v11, type)) {
      goto LABEL_72;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v28 = "nw_protocol_http2_output_finished";
    os_log_type_t v13 = "%{public}s called with null http2";
LABEL_71:
    _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
    goto LABEL_72;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v28 = "nw_protocol_http2_output_finished";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_72;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v28 = "nw_protocol_http2_output_finished";
      os_log_type_t v13 = "%{public}s called with null other_protocol";
      goto LABEL_71;
    }

    if (!v25)
    {
      os_log_type_t v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_72;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v28 = "nw_protocol_http2_output_finished";
      os_log_type_t v13 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_71;
    }

    id v18 = (char *)__nw_create_backtrace_string();
    os_log_type_t v11 = (os_log_s *)__nwlog_obj();
    os_log_type_t v12 = type;
    os_log_type_t v21 = os_log_type_enabled(v11, type);
    if (!v18)
    {
      if (!v21) {
        goto LABEL_72;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v28 = "nw_protocol_http2_output_finished";
      os_log_type_t v13 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_71;
    }

    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v28 = "nw_protocol_http2_output_finished";
      os_log_type_t v29 = 2082;
      os_log_type_t v30 = v18;
      char v20 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_52;
    }

    goto LABEL_53;
  }

  if (((__int16)handle[97] & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    BOOL v14 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      os_log_type_t v15 = handle[92];
      *(_DWORD *)buf = 136446978;
      os_log_type_t v28 = "nw_protocol_http2_output_finished";
      os_log_type_t v29 = 2082;
      os_log_type_t v30 = (char *)handle + 390;
      v31 = 2080;
      os_log_type_t v32 = " ";
      BOOL v33 = 1024;
      dispatch_workloop_t v34 = v15;
      _os_log_impl(&dword_181A5C000, v14, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
    }
  }

  output_handler_context = a2->output_handler_context;
  if (output_handler_context)
  {
    char v5 = output_handler_context[4];
    if (v5)
    {
      if (((*(unsigned __int16 *)(v5 + 188) | (*(unsigned __int8 *)(v5 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        v22 = (os_log_s *)gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          __int16 v24 = *(_DWORD *)(v5 + 176);
          uint64_t v23 = *(_DWORD *)(v5 + 180);
          *(_DWORD *)buf = 136447234;
          os_log_type_t v28 = "nw_protocol_http2_output_finished";
          os_log_type_t v29 = 2082;
          os_log_type_t v30 = (char *)(v5 + 191);
          v31 = 2080;
          os_log_type_t v32 = " ";
          BOOL v33 = 1024;
          dispatch_workloop_t v34 = v23;
          v35 = 1024;
          id v36 = v24;
          _os_log_impl( &dword_181A5C000,  v22,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> sending non-deferred end stream",  buf,  0x2Cu);
        }
      }

      nw_http2_send_end_stream((uint64_t)handle, v5);
      return;
    }

    if (((__int16)handle[97] & 0x80000000) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      id v6 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        BOOL v9 = handle[92];
        *(_DWORD *)buf = 136446978;
        os_log_type_t v28 = "nw_protocol_http2_output_finished";
        os_log_type_t v29 = 2082;
        os_log_type_t v30 = (char *)handle + 390;
        v31 = 2080;
        os_log_type_t v32 = " ";
        BOOL v33 = 1024;
        dispatch_workloop_t v34 = v9;
        char v8 = "%{public}s %{public}s%s<i%u> couldn't get stream during output_finished";
        goto LABEL_21;
      }
    }
  }

  else if (((__int16)handle[97] & 0x80000000) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    id v6 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = handle[92];
      *(_DWORD *)buf = 136446978;
      os_log_type_t v28 = "nw_protocol_http2_output_finished";
      os_log_type_t v29 = 2082;
      os_log_type_t v30 = (char *)handle + 390;
      v31 = 2080;
      os_log_type_t v32 = " ";
      BOOL v33 = 1024;
      dispatch_workloop_t v34 = v7;
      char v8 = "%{public}s %{public}s%s<i%u> couldn't get output handler context during output_finished";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v6, OS_LOG_TYPE_ERROR, v8, buf, 0x26u);
    }
  }

  __break(1u);
  return result;
}

      if (v24) {
        free(v24);
      }
      LOBYTE(v9) = *(_BYTE *)v7;
      goto LABEL_8;
    }

    if (!v6 || (*(_BYTE *)(v6 + 158) & 1) == 0)
    {
      BOOL v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = os_log_type_enabled(v14, OS_LOG_TYPE_INFO);
      id v6 = *(void *)(a1 + 32);
      if (v15)
      {
        int v16 = (const char *)(v6 + 159);
        if (!v6) {
          int v16 = "";
        }
        *(_DWORD *)buf = 136446978;
        dispatch_workloop_t v34 = "nw_protocol_ipv6_finalize_output_frames_block_invoke";
        v35 = 2082;
        id v36 = (void *)v16;
        id v17 = " ";
        if (!v6) {
          id v17 = "";
        }
        v37 = 2080;
        v38 = v17;
        os_log_type_t v39 = 2048;
        v40 = v6;
        _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s%p Frame is no longer valid",  buf,  0x2Au);
        id v6 = *(void *)(a1 + 32);
      }
    }

    *(void *)(v6 + 48) = 0LL;
  }

  return 1LL;
}

LABEL_76:
  if (v37) {
    free(v37);
  }
  uint64_t v4 = (dispatch_object_s *)*v5;
  if (*v5) {
    goto LABEL_12;
  }
LABEL_13:
  char v8 = v2[34]._os_unfair_lock_opaque;
  if ((v8 & 0x24) == 0 && (v8 & 3) != 0)
  {
    BOOL v9 = -[NWConcrete_nw_context initWithIdentifier:]( objc_alloc(&OBJC_CLASS___NWConcrete_nw_context),  *(const char **)&v2[4]._os_unfair_lock_opaque);
    os_log_type_t v11 = (os_unfair_lock_s **)&v2[10];
    os_log_type_t v10 = *(void **)&v2[10]._os_unfair_lock_opaque;
    *(void *)&v2[10]._char os_unfair_lock_opaque = v9;

    LOBYTE((*v11)[34]._os_unfair_lock_opaque) = (*v11)[34]._os_unfair_lock_opaque & 0xFD | v2[34]._os_unfair_lock_opaque & 2;
    LOBYTE((*v11)[34]._os_unfair_lock_opaque) = (*v11)[34]._os_unfair_lock_opaque & 0xFE | v2[34]._os_unfair_lock_opaque & 1;
    (*v11)[31]._char os_unfair_lock_opaque = v2[31]._os_unfair_lock_opaque;
    LOBYTE((*v11)[34]._os_unfair_lock_opaque) = v2[34]._os_unfair_lock_opaque & 0x80 | (*v11)[34]._os_unfair_lock_opaque & 0x7F;
    objc_storeStrong((id *)(*(void *)&v2[10]._os_unfair_lock_opaque + 48LL), *(id *)&v2[12]._os_unfair_lock_opaque);
    objc_storeStrong((id *)(*(void *)&v2[10]._os_unfair_lock_opaque + 56LL), *(id *)&v2[14]._os_unfair_lock_opaque);
    (*v11)[30]._char os_unfair_lock_opaque = v2[30]._os_unfair_lock_opaque;
    (*v11)[21]._char os_unfair_lock_opaque = v2[21]._os_unfair_lock_opaque;
    (*v11)[22]._char os_unfair_lock_opaque = v2[22]._os_unfair_lock_opaque;
    (*v11)[23]._char os_unfair_lock_opaque = v2[23]._os_unfair_lock_opaque;
    LOBYTE((*v11)[34]._os_unfair_lock_opaque) |= 0x20u;
    objc_storeStrong((id *)(*(void *)&v2[10]._os_unfair_lock_opaque + 8LL), *(id *)&v2[2]._os_unfair_lock_opaque);
    objc_storeStrong((id *)(*(void *)&v2[10]._os_unfair_lock_opaque + 64LL), *(id *)&v2[16]._os_unfair_lock_opaque);
    os_log_type_t v12 = _Block_copy(*(const void **)&v2[18]._os_unfair_lock_opaque);
    os_log_type_t v13 = *(void **)(*(void *)&v2[10]._os_unfair_lock_opaque + 72LL);
    *(void *)&(*v11)[18]._char os_unfair_lock_opaque = v12;

    BYTE1((*v11)[34]._os_unfair_lock_opaque) = BYTE1((*v11)[34]._os_unfair_lock_opaque) & 0xFE | BYTE1(v2[34]._os_unfair_lock_opaque) & 1;
    BOOL v14 = _Block_copy(*(const void **)&v2[32]._os_unfair_lock_opaque);
    os_log_type_t v15 = *(void **)(*(void *)&v2[10]._os_unfair_lock_opaque + 128LL);
    *(void *)&(*v11)[32]._char os_unfair_lock_opaque = v14;

    nw_context_activate(*(void *)&v2[10]._os_unfair_lock_opaque);
LABEL_129:
    char os_unfair_lock_opaque = LOBYTE(v2[34]._os_unfair_lock_opaque) | 0x40;
    LOBYTE(v2[34]._os_unfair_lock_opaque) = os_unfair_lock_opaque;
    goto LABEL_130;
  }

  if ((v2[34]._os_unfair_lock_opaque & 4) == 0)
  {
    int v16 = 0;
    if ((v2[34]._os_unfair_lock_opaque & 0x20) == 0 || (v8 & 3) == 0) {
      goto LABEL_86;
    }
  }

  id v17 = v2;
  if (*(void *)&v17[6]._os_unfair_lock_opaque)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v18 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v108 = "nw_context_initialize_cache";
    char v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v105 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v20 = (os_log_s *)(id)gLogObj;
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v108 = "nw_context_initialize_cache";
        _os_log_impl(&dword_181A5C000, v20, v21, "%{public}s Cannot initialize cache twice", buf, 0xCu);
      }
    }

    else if (v105)
    {
      uint64_t v23 = __nw_create_backtrace_string();
      if (v23)
      {
        __int16 v24 = (char *)v23;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v25 = (os_log_s *)(id)gLogObj;
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446466;
          v108 = "nw_context_initialize_cache";
          __int16 v109 = 2082;
          __uint64_t v110 = (__uint64_t)v24;
          _os_log_impl( &dword_181A5C000,  v25,  v26,  "%{public}s Cannot initialize cache twice, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v24);
        if (!v19) {
          goto LABEL_85;
        }
        goto LABEL_84;
      }

      __nwlog_obj();
      char v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v108 = "nw_context_initialize_cache";
        _os_log_impl(&dword_181A5C000, v20, v30, "%{public}s Cannot initialize cache twice, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v20 = (os_log_s *)(id)gLogObj;
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v108 = "nw_context_initialize_cache";
        _os_log_impl( &dword_181A5C000,  v20,  v29,  "%{public}s Cannot initialize cache twice, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_82;
  }

  if ((v2[34]._os_unfair_lock_opaque & 7) != 0)
  {
    v22 = (char *)calloc(1uLL, 0x48uLL);
    if (!v22)
    {
      __nwlog_obj();
      v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v92, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446722;
      v108 = "strict_calloc";
      __int16 v109 = 2048;
      __uint64_t v110 = 1LL;
      __int16 v111 = 2048;
      uint64_t v112 = 72LL;
      v93 = (void *)_os_log_send_and_compose_impl();

      free(v93);
    }

    *(_OWORD *)(v22 + 56) = 0u;
    *(_OWORD *)(v22 + 40) = 0u;
    *(_OWORD *)(v22 + 24) = 0u;
    *(_OWORD *)(v22 + 8) = 0u;
    *(void *)&v17[6]._char os_unfair_lock_opaque = v22;
    *(void *)v22 = 0LL;
    *(void *)(*(void *)&v17[6]._os_unfair_lock_opaque + 8LL) = *(void *)&v17[6]._os_unfair_lock_opaque;
    *(void *)(*(void *)&v17[6]._os_unfair_lock_opaque + 16LL) = 0LL;
    *(void *)(*(void *)&v17[6]._os_unfair_lock_opaque + 24LL) = *(void *)&v17[6]._os_unfair_lock_opaque + 16LL;
    *(void *)(*(void *)&v17[6]._os_unfair_lock_opaque + 32LL) = nw_hash_table_create_internal( 0x11u,  0,  (const void *(*)(const void *, unsigned int *))nw_context_endpoint_table_get_key,  (unsigned int (*)(const void *, unsigned int))nw_context_endpoint_key_hash,  (BOOL (*)(const void *, const void *, unsigned int))nw_context_endpoint_table_matches_key,  (void (*)(void *))nw_context_endpoint_table_release);
    *(void *)(*(void *)&v17[6]._os_unfair_lock_opaque + 40LL) = nw_hash_table_create_internal( 0x11u,  0,  (const void *(*)(const void *, unsigned int *))nw_context_endpoint_table_get_key,  (unsigned int (*)(const void *, unsigned int))nw_context_endpoint_key_hash,  (BOOL (*)(const void *, const void *, unsigned int))nw_context_endpoint_table_matches_key,  (void (*)(void *))nw_context_endpoint_table_release);
    *(void *)(*(void *)&v17[6]._os_unfair_lock_opaque + 48LL) = nw_hash_table_create_internal( 0x11u,  0,  (const void *(*)(const void *, unsigned int *))nw_context_endpoint_table_get_key,  (unsigned int (*)(const void *, unsigned int))nw_context_endpoint_key_hash,  (BOOL (*)(const void *, const void *, unsigned int))nw_context_endpoint_table_matches_key,  (void (*)(void *))nw_context_endpoint_table_release);
    goto LABEL_85;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v27 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v108 = "nw_context_initialize_cache";
  char v19 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v105 = 0;
  if (__nwlog_fault(v19, &type, &v105))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v108 = "nw_context_initialize_cache";
        _os_log_impl( &dword_181A5C000,  v20,  v28,  "%{public}s Cannot initialize cache for non-isolated context",  buf,  0xCu);
      }
    }

    else if (v105)
    {
      v31 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v32 = type;
      BOOL v33 = os_log_type_enabled(v20, type);
      if (v31)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446466;
          v108 = "nw_context_initialize_cache";
          __int16 v109 = 2082;
          __uint64_t v110 = (__uint64_t)v31;
          _os_log_impl( &dword_181A5C000,  v20,  v32,  "%{public}s Cannot initialize cache for non-isolated context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v31);
        if (!v19) {
          goto LABEL_85;
        }
        goto LABEL_84;
      }

      if (v33)
      {
        *(_DWORD *)buf = 136446210;
        v108 = "nw_context_initialize_cache";
        _os_log_impl( &dword_181A5C000,  v20,  v32,  "%{public}s Cannot initialize cache for non-isolated context, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v47 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v108 = "nw_context_initialize_cache";
        _os_log_impl( &dword_181A5C000,  v20,  v47,  "%{public}s Cannot initialize cache for non-isolated context, backtrace limit exceeded",  buf,  0xCu);
      }
    }

  __break(1u);
  return result;
}

      if (!v9) {
        return;
      }
      goto LABEL_77;
    }
  }

  uint64_t v4 = *(void *)(a1 + 48);
  if (!v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v39 = "nw_protocol_common_notify";
    BOOL v9 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    id v36 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = (os_log_s *)__nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v39 = "nw_protocol_common_notify";
      os_log_type_t v12 = "%{public}s notify requires a default input handler";
      goto LABEL_75;
    }

    if (!v36)
    {
      os_log_type_t v10 = (os_log_s *)__nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v39 = "nw_protocol_common_notify";
      os_log_type_t v12 = "%{public}s notify requires a default input handler, backtrace limit exceeded";
      goto LABEL_75;
    }

    BOOL v14 = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = (os_log_s *)__nwlog_obj();
    os_log_type_t v11 = type;
    v31 = os_log_type_enabled(v10, type);
    if (!v14)
    {
      if (!v31) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v39 = "nw_protocol_common_notify";
      os_log_type_t v12 = "%{public}s notify requires a default input handler, no backtrace";
      goto LABEL_75;
    }

    if (v31)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v39 = "nw_protocol_common_notify";
      v40 = 2082;
      os_log_type_t v41 = v14;
      int v16 = "%{public}s notify requires a default input handler, dumping backtrace:%{public}s";
      goto LABEL_66;
    }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v29 = (os_log_s *)gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          os_log_type_t v30 = *(void *)(a1 + 48);
          *(_DWORD *)buf = 136446722;
          os_log_type_t v97 = "nw_protocol_udp_finalize_output_frames_block_invoke";
          if (v30) {
            v31 = (const char *)(v30 + 96);
          }
          else {
            v31 = "";
          }
          BOOL v98 = 2082;
          v99 = (void *)v31;
          os_log_type_t v100 = 1024;
          BOOL v101 = v28;
          _os_log_impl( &dword_181A5C000,  v29,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s udp set internet checksum offload failed (err %d)",  buf,  0x1Cu);
        }

        goto LABEL_46;
      }

      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      os_log_type_t v97 = "__nw_frame_set_internet_checksum";
      v62 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v94 = 0;
      if (__nwlog_fault(v62, &type, &v94))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v63 = (os_log_s *)__nwlog_obj();
          os_log_type_t v64 = type;
          if (os_log_type_enabled(v63, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v97 = "__nw_frame_set_internet_checksum";
            os_log_type_t v65 = "%{public}s called with null frame";
LABEL_217:
            _os_log_impl(&dword_181A5C000, v63, v64, v65, buf, 0xCu);
          }
        }

        else if (v94)
        {
          v80 = (char *)__nw_create_backtrace_string();
          os_log_type_t v63 = (os_log_s *)__nwlog_obj();
          os_log_type_t v64 = type;
          v81 = os_log_type_enabled(v63, type);
          if (v80)
          {
            if (v81)
            {
              *(_DWORD *)buf = 136446466;
              os_log_type_t v97 = "__nw_frame_set_internet_checksum";
              BOOL v98 = 2082;
              v99 = v80;
              _os_log_impl( &dword_181A5C000,  v63,  v64,  "%{public}s called with null frame, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v80);
            goto LABEL_218;
          }

          if (v81)
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v97 = "__nw_frame_set_internet_checksum";
            os_log_type_t v65 = "%{public}s called with null frame, no backtrace";
            goto LABEL_217;
          }
        }

        else
        {
          os_log_type_t v63 = (os_log_s *)__nwlog_obj();
          os_log_type_t v64 = type;
          if (os_log_type_enabled(v63, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v97 = "__nw_frame_set_internet_checksum";
            os_log_type_t v65 = "%{public}s called with null frame, backtrace limit exceeded";
            goto LABEL_217;
          }
        }
      }

            goto LABEL_77;
          }

          if (!v98)
          {
            __nwlog_obj();
            os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            __uint64_t v73 = type;
            if (os_log_type_enabled(v15, type))
            {
              *(_DWORD *)buf = 136446210;
              BOOL v101 = "networkd_privileged_teardown_feth_pair";
              _os_log_impl( &dword_181A5C000,  v15,  v73,  "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, backtrace limit exceeded",  buf,  0xCu);
            }

            goto LABEL_76;
          }

          uint64_t v23 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v62 = type;
          os_log_type_t v63 = os_log_type_enabled(v15, type);
          if (!v23)
          {
            if (v63)
            {
              *(_DWORD *)buf = 136446210;
              BOOL v101 = "networkd_privileged_teardown_feth_pair";
              _os_log_impl( &dword_181A5C000,  v15,  v62,  "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, no backtrace",  buf,  0xCu);
            }

            goto LABEL_76;
          }

          if (v63)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v101 = "networkd_privileged_teardown_feth_pair";
            os_log_type_t v102 = 2082;
            *(void *)os_log_type_t v103 = v23;
            _os_log_impl( &dword_181A5C000,  v15,  v62,  "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, dumping backtrace:%{public}s",  buf,  0x16u);
          }
        }

    if (v33) {
      free(v33);
    }
    goto LABEL_78;
  }

  if (!v10)
  {
    __nwlog_obj();
    id v36 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v61 = "-[NWTCPConnection initWithEndpoint:parameters:delegate:]";
    v37 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v58 = 0;
    if (__nwlog_fault(v37, &type, &v58))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v39 = type;
        if (os_log_type_enabled(v38, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v61 = "-[NWTCPConnection initWithEndpoint:parameters:delegate:]";
          _os_log_impl(&dword_181A5C000, v38, v39, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v58)
      {
        os_log_type_t v47 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v48 = type;
        id v49 = os_log_type_enabled(v38, type);
        if (v47)
        {
          if (v49)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v61 = "-[NWTCPConnection initWithEndpoint:parameters:delegate:]";
            v62 = 2082;
            os_log_type_t v63 = v47;
            _os_log_impl( &dword_181A5C000,  v38,  v48,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v47);
          goto LABEL_82;
        }

        if (v49)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v61 = "-[NWTCPConnection initWithEndpoint:parameters:delegate:]";
          _os_log_impl(&dword_181A5C000, v38, v48, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v54 = type;
        if (os_log_type_enabled(v38, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v61 = "-[NWTCPConnection initWithEndpoint:parameters:delegate:]";
          _os_log_impl( &dword_181A5C000,  v38,  v54,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    free(backtrace_string);
    goto LABEL_101;
  }

  char v5 = default_input_handler->handle;
  if (v5 == &nw_protocol_ref_counted_handle)
  {
    callbacks = default_input_handler[1].callbacks;
    if (callbacks) {
      default_input_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
    }
  }

  uint64_t v7 = default_input_handler->callbacks;
  if (v7)
  {
    get_parameters = (uint64_t (*)(nw_protocol *))v7->get_parameters;
    if (get_parameters)
    {
      id v3 = get_parameters(default_input_handler);
      if (v5 != &nw_protocol_ref_counted_handle) {
        return v3;
      }
      goto LABEL_12;
    }
  }

  __nwlog_obj();
  name = default_input_handler->identifier->name;
  *(_DWORD *)buf = 136446722;
  v38 = "__nw_protocol_get_parameters";
  if (!name) {
    name = "invalid";
  }
  os_log_type_t v39 = 2082;
  v40 = (void *)name;
  os_log_type_t v41 = 2048;
  BOOL v42 = default_input_handler;
  char v19 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  v35 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    char v20 = (os_log_s *)__nwlog_obj();
    os_log_type_t v21 = type;
    if (!os_log_type_enabled(v20, type)) {
      goto LABEL_92;
    }
    v22 = default_input_handler->identifier->name;
    if (!v22) {
      v22 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    v38 = "__nw_protocol_get_parameters";
    os_log_type_t v39 = 2082;
    v40 = (void *)v22;
    os_log_type_t v41 = 2048;
    BOOL v42 = default_input_handler;
    uint64_t v23 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback";
LABEL_91:
    _os_log_impl(&dword_181A5C000, v20, v21, v23, buf, 0x20u);
    goto LABEL_92;
  }

  if (!v35)
  {
    char v20 = (os_log_s *)__nwlog_obj();
    os_log_type_t v21 = type;
    if (!os_log_type_enabled(v20, type)) {
      goto LABEL_92;
    }
    BOOL v33 = default_input_handler->identifier->name;
    if (!v33) {
      BOOL v33 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    v38 = "__nw_protocol_get_parameters";
    os_log_type_t v39 = 2082;
    v40 = (void *)v33;
    os_log_type_t v41 = 2048;
    BOOL v42 = default_input_handler;
    uint64_t v23 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, backtrace limit exceeded";
    goto LABEL_91;
  }

  os_log_type_t v29 = (char *)__nw_create_backtrace_string();
  char v20 = (os_log_s *)__nwlog_obj();
  os_log_type_t v21 = type;
  os_log_type_t v30 = os_log_type_enabled(v20, type);
  if (!v29)
  {
    if (!v30) {
      goto LABEL_92;
    }
    dispatch_workloop_t v34 = default_input_handler->identifier->name;
    if (!v34) {
      dispatch_workloop_t v34 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    v38 = "__nw_protocol_get_parameters";
    os_log_type_t v39 = 2082;
    v40 = (void *)v34;
    os_log_type_t v41 = 2048;
    BOOL v42 = default_input_handler;
    uint64_t v23 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, no backtrace";
    goto LABEL_91;
  }

  if (v30)
  {
    v31 = default_input_handler->identifier->name;
    if (!v31) {
      v31 = "invalid";
    }
    *(_DWORD *)buf = 136446978;
    v38 = "__nw_protocol_get_parameters";
    os_log_type_t v39 = 2082;
    v40 = (void *)v31;
    os_log_type_t v41 = 2048;
    BOOL v42 = default_input_handler;
    char v43 = 2082;
    dispatch_workloop_t v44 = v29;
    _os_log_impl( &dword_181A5C000,  v20,  v21,  "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, dumping backtrace:%{public}s",  buf,  0x2Au);
  }

  free(v29);
LABEL_92:
  if (v19) {
    free(v19);
  }
  id v3 = 0LL;
  if (v5 == &nw_protocol_ref_counted_handle)
  {
LABEL_12:
    if (default_input_handler->handle == &nw_protocol_ref_counted_handle)
    {
      os_log_type_t v10 = default_input_handler[1].callbacks;
      if (v10)
      {
        os_log_type_t v11 = (nw_protocol_callbacks *)((char *)v10 - 1);
        default_input_handler[1].callbacks = v11;
        if (!v11)
        {
          os_log_type_t v12 = *(void (***)(void))default_input_handler[1].flow_id;
          if (v12)
          {
            *(void *)default_input_handler[1].flow_id = 0LL;
            v12[2](v12);
            _Block_release(v12);
          }

          if ((default_input_handler[1].flow_id[8] & 1) != 0)
          {
            os_log_type_t v13 = *(const void **)default_input_handler[1].flow_id;
            if (v13) {
              _Block_release(v13);
            }
          }

          free(default_input_handler);
        }
      }
    }
  }

  return v3;
}

    free(backtrace_string);
    goto LABEL_101;
  }

  char v5 = default_input_handler->handle;
  if (v5 == &nw_protocol_ref_counted_handle)
  {
    callbacks = default_input_handler[1].callbacks;
    if (callbacks) {
      default_input_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
    }
  }

  uint64_t v7 = default_input_handler->callbacks;
  if (v7)
  {
    get_remote_endpoint = (uint64_t (*)(nw_protocol *))v7->get_remote_endpoint;
    if (get_remote_endpoint)
    {
      id v3 = get_remote_endpoint(default_input_handler);
      if (v5 != &nw_protocol_ref_counted_handle) {
        return v3;
      }
      goto LABEL_12;
    }
  }

  __nwlog_obj();
  name = default_input_handler->identifier->name;
  *(_DWORD *)buf = 136446722;
  v38 = "__nw_protocol_get_remote_endpoint";
  if (!name) {
    name = "invalid";
  }
  os_log_type_t v39 = 2082;
  v40 = (void *)name;
  os_log_type_t v41 = 2048;
  BOOL v42 = default_input_handler;
  char v19 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  v35 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    char v20 = (os_log_s *)__nwlog_obj();
    os_log_type_t v21 = type;
    if (!os_log_type_enabled(v20, type)) {
      goto LABEL_92;
    }
    v22 = default_input_handler->identifier->name;
    if (!v22) {
      v22 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    v38 = "__nw_protocol_get_remote_endpoint";
    os_log_type_t v39 = 2082;
    v40 = (void *)v22;
    os_log_type_t v41 = 2048;
    BOOL v42 = default_input_handler;
    uint64_t v23 = "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback";
LABEL_91:
    _os_log_impl(&dword_181A5C000, v20, v21, v23, buf, 0x20u);
    goto LABEL_92;
  }

  if (!v35)
  {
    char v20 = (os_log_s *)__nwlog_obj();
    os_log_type_t v21 = type;
    if (!os_log_type_enabled(v20, type)) {
      goto LABEL_92;
    }
    BOOL v33 = default_input_handler->identifier->name;
    if (!v33) {
      BOOL v33 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    v38 = "__nw_protocol_get_remote_endpoint";
    os_log_type_t v39 = 2082;
    v40 = (void *)v33;
    os_log_type_t v41 = 2048;
    BOOL v42 = default_input_handler;
    uint64_t v23 = "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, backtrace limit exceeded";
    goto LABEL_91;
  }

  os_log_type_t v29 = (char *)__nw_create_backtrace_string();
  char v20 = (os_log_s *)__nwlog_obj();
  os_log_type_t v21 = type;
  os_log_type_t v30 = os_log_type_enabled(v20, type);
  if (!v29)
  {
    if (!v30) {
      goto LABEL_92;
    }
    dispatch_workloop_t v34 = default_input_handler->identifier->name;
    if (!v34) {
      dispatch_workloop_t v34 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    v38 = "__nw_protocol_get_remote_endpoint";
    os_log_type_t v39 = 2082;
    v40 = (void *)v34;
    os_log_type_t v41 = 2048;
    BOOL v42 = default_input_handler;
    uint64_t v23 = "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, no backtrace";
    goto LABEL_91;
  }

  if (v30)
  {
    v31 = default_input_handler->identifier->name;
    if (!v31) {
      v31 = "invalid";
    }
    *(_DWORD *)buf = 136446978;
    v38 = "__nw_protocol_get_remote_endpoint";
    os_log_type_t v39 = 2082;
    v40 = (void *)v31;
    os_log_type_t v41 = 2048;
    BOOL v42 = default_input_handler;
    char v43 = 2082;
    dispatch_workloop_t v44 = v29;
    _os_log_impl( &dword_181A5C000,  v20,  v21,  "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, dumping backtrace:%{public}s",  buf,  0x2Au);
  }

  free(v29);
LABEL_92:
  if (v19) {
    free(v19);
  }
  id v3 = 0LL;
  if (v5 == &nw_protocol_ref_counted_handle)
  {
LABEL_12:
    if (default_input_handler->handle == &nw_protocol_ref_counted_handle)
    {
      os_log_type_t v10 = default_input_handler[1].callbacks;
      if (v10)
      {
        os_log_type_t v11 = (nw_protocol_callbacks *)((char *)v10 - 1);
        default_input_handler[1].callbacks = v11;
        if (!v11)
        {
          os_log_type_t v12 = *(void (***)(void))default_input_handler[1].flow_id;
          if (v12)
          {
            *(void *)default_input_handler[1].flow_id = 0LL;
            v12[2](v12);
            _Block_release(v12);
          }

          if ((default_input_handler[1].flow_id[8] & 1) != 0)
          {
            os_log_type_t v13 = *(const void **)default_input_handler[1].flow_id;
            if (v13) {
              _Block_release(v13);
            }
          }

          free(default_input_handler);
        }
      }
    }
  }

  return v3;
}

      goto LABEL_50;
    }

    if (!v38)
    {
      __nwlog_obj();
      int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v36 = v39;
      if (os_log_type_enabled(v16, v39))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v41 = "nw_framer_message_access_value";
        _os_log_impl( &dword_181A5C000,  v16,  v36,  "%{public}s called with null access_value, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_76;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v31 = v39;
    os_log_type_t v32 = os_log_type_enabled(v16, v39);
    if (!backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v41 = "nw_framer_message_access_value";
        _os_log_impl(&dword_181A5C000, v16, v31, "%{public}s called with null access_value, no backtrace", buf, 0xCu);
      }

      goto LABEL_76;
    }

    if (v32)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v41 = "nw_framer_message_access_value";
      BOOL v42 = 2082;
      char v43 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v16,  v31,  "%{public}s called with null access_value, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_49;
  }

    if (Connection == -65569) {
      goto LABEL_15;
    }
    if (Connection)
    {
      char v5 = Connection;
      goto LABEL_278;
    }

      if (!v14) {
        goto LABEL_78;
      }
      goto LABEL_77;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "__nw_protocol_add_listen_handler";
    BOOL v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v23 = (os_log_s *)__nwlog_obj();
      __int16 v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      v40 = "__nw_protocol_add_listen_handler";
      id v18 = "%{public}s called with null listen_protocol";
    }

    else if (v37)
    {
      os_log_type_t v30 = (char *)__nw_create_backtrace_string();
      uint64_t v23 = (os_log_s *)__nwlog_obj();
      __int16 v24 = type;
      v31 = os_log_type_enabled(v23, type);
      if (v30)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          v40 = "__nw_protocol_add_listen_handler";
          os_log_type_t v41 = 2082;
          BOOL v42 = v30;
          _os_log_impl( &dword_181A5C000,  v23,  v24,  "%{public}s called with null listen_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v30);
        if (!v14)
        {
LABEL_78:
          uint64_t v7 = 0LL;
          if (v3 != &nw_protocol_ref_counted_handle) {
            return v7;
          }
LABEL_9:
          if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
          {
            BOOL v9 = *(void *)(a1 + 88);
            if (v9)
            {
              os_log_type_t v10 = v9 - 1;
              *(void *)(a1 + 88) = v10;
              if (!v10)
              {
                os_log_type_t v11 = *(void (***)(void))(a1 + 64);
                if (v11)
                {
                  *(void *)(a1 + 64) = 0LL;
                  v11[2](v11);
                  _Block_release(v11);
                }

                if ((*(_BYTE *)(a1 + 72) & 1) != 0)
                {
                  os_log_type_t v12 = *(const void **)(a1 + 64);
                  if (v12) {
                    _Block_release(v12);
                  }
                }

                free((void *)a1);
              }
            }
          }

          return v7;
        }

      if (!v14) {
        goto LABEL_78;
      }
      goto LABEL_77;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "__nw_protocol_remove_listen_handler";
    BOOL v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v23 = (os_log_s *)__nwlog_obj();
      __int16 v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      v40 = "__nw_protocol_remove_listen_handler";
      id v18 = "%{public}s called with null listen_protocol";
    }

    else if (v37)
    {
      os_log_type_t v30 = (char *)__nw_create_backtrace_string();
      uint64_t v23 = (os_log_s *)__nwlog_obj();
      __int16 v24 = type;
      v31 = os_log_type_enabled(v23, type);
      if (v30)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          v40 = "__nw_protocol_remove_listen_handler";
          os_log_type_t v41 = 2082;
          BOOL v42 = v30;
          _os_log_impl( &dword_181A5C000,  v23,  v24,  "%{public}s called with null listen_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v30);
        if (!v14)
        {
LABEL_78:
          uint64_t v7 = 0LL;
          if (v3 != &nw_protocol_ref_counted_handle) {
            return v7;
          }
LABEL_9:
          if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
          {
            BOOL v9 = *(void *)(a1 + 88);
            if (v9)
            {
              os_log_type_t v10 = v9 - 1;
              *(void *)(a1 + 88) = v10;
              if (!v10)
              {
                os_log_type_t v11 = *(void (***)(void))(a1 + 64);
                if (v11)
                {
                  *(void *)(a1 + 64) = 0LL;
                  v11[2](v11);
                  _Block_release(v11);
                }

                if ((*(_BYTE *)(a1 + 72) & 1) != 0)
                {
                  os_log_type_t v12 = *(const void **)(a1 + 64);
                  if (v12) {
                    _Block_release(v12);
                  }
                }

                free((void *)a1);
              }
            }
          }

          return v7;
        }

      if (!v14) {
        goto LABEL_78;
      }
      goto LABEL_77;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "__nw_protocol_finalize_output_frames";
    BOOL v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v23 = (os_log_s *)__nwlog_obj();
      __int16 v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      v40 = "__nw_protocol_finalize_output_frames";
      id v18 = "%{public}s called with null frames";
    }

    else if (v37)
    {
      os_log_type_t v30 = (char *)__nw_create_backtrace_string();
      uint64_t v23 = (os_log_s *)__nwlog_obj();
      __int16 v24 = type;
      v31 = os_log_type_enabled(v23, type);
      if (v30)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          v40 = "__nw_protocol_finalize_output_frames";
          os_log_type_t v41 = 2082;
          BOOL v42 = v30;
          _os_log_impl( &dword_181A5C000,  v23,  v24,  "%{public}s called with null frames, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v30);
        if (!v14)
        {
LABEL_78:
          uint64_t v7 = 0LL;
          if (v3 != &nw_protocol_ref_counted_handle) {
            return v7;
          }
LABEL_9:
          if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
          {
            BOOL v9 = *(void *)(a1 + 88);
            if (v9)
            {
              os_log_type_t v10 = v9 - 1;
              *(void *)(a1 + 88) = v10;
              if (!v10)
              {
                os_log_type_t v11 = *(void (***)(void))(a1 + 64);
                if (v11)
                {
                  *(void *)(a1 + 64) = 0LL;
                  v11[2](v11);
                  _Block_release(v11);
                }

                if ((*(_BYTE *)(a1 + 72) & 1) != 0)
                {
                  os_log_type_t v12 = *(const void **)(a1 + 64);
                  if (v12) {
                    _Block_release(v12);
                  }
                }

                free((void *)a1);
              }
            }
          }

          return v7;
        }

      if (!v14) {
        goto LABEL_78;
      }
      goto LABEL_77;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "__nw_protocol_copy_info";
    BOOL v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v23 = (os_log_s *)__nwlog_obj();
      __int16 v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      v40 = "__nw_protocol_copy_info";
      id v18 = "%{public}s called with null type";
    }

    else if (v37)
    {
      os_log_type_t v30 = (char *)__nw_create_backtrace_string();
      uint64_t v23 = (os_log_s *)__nwlog_obj();
      __int16 v24 = type;
      v31 = os_log_type_enabled(v23, type);
      if (v30)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          v40 = "__nw_protocol_copy_info";
          os_log_type_t v41 = 2082;
          BOOL v42 = v30;
          _os_log_impl( &dword_181A5C000,  v23,  v24,  "%{public}s called with null type, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v30);
        if (!v14)
        {
LABEL_78:
          uint64_t v7 = 0LL;
          if (v3 != &nw_protocol_ref_counted_handle) {
            return v7;
          }
LABEL_9:
          if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
          {
            BOOL v9 = *(void *)(a1 + 88);
            if (v9)
            {
              os_log_type_t v10 = v9 - 1;
              *(void *)(a1 + 88) = v10;
              if (!v10)
              {
                os_log_type_t v11 = *(void (***)(void))(a1 + 64);
                if (v11)
                {
                  *(void *)(a1 + 64) = 0LL;
                  v11[2](v11);
                  _Block_release(v11);
                }

                if ((*(_BYTE *)(a1 + 72) & 1) != 0)
                {
                  os_log_type_t v12 = *(const void **)(a1 + 64);
                  if (v12) {
                    _Block_release(v12);
                  }
                }

                free((void *)a1);
              }
            }
          }

          return v7;
        }

                    goto LABEL_77;
                  }

    goto LABEL_77;
  }

  __nwlog_obj();
  char v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v38 = "nw_protocol_implementation_input_available";
  BOOL v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  v35 = 0;
  if (__nwlog_fault(v9, &type, &v35))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_protocol_implementation_input_available";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null protocol", buf, 0xCu);
      }
    }

    else if (v35)
    {
      char v20 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      v22 = os_log_type_enabled(v10, type);
      if (v20)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          v38 = "nw_protocol_implementation_input_available";
          os_log_type_t v39 = 2082;
          v40 = v20;
          _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v20);
        goto LABEL_66;
      }

      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_protocol_implementation_input_available";
        _os_log_impl(&dword_181A5C000, v10, v21, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v31 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_protocol_implementation_input_available";
        _os_log_impl( &dword_181A5C000,  v10,  v31,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

LABEL_77:
                      if (*(_DWORD *)(*((void *)v13 + 1) + 64LL) == 3)
                      {
                        v50 = (char *)*((void *)v13 + 29);
                        v127[0] = MEMORY[0x1895F87A8];
                        v127[1] = 3221225472LL;
                        v127[2] = ___ZL33nw_protocol_implementation_notifyP11nw_protocolS0_31nw_protocol_notification_type_tPvm_block_invoke;
                        v127[3] = &__block_descriptor_60_e23_B16__0__nw_hash_node__8l;
                        v128 = a3;
                        v127[4] = a2;
                        v127[5] = a4;
                        v127[6] = a5;
                        nw_hash_table_apply(v50, (uint64_t)v127);
                        goto LABEL_122;
                      }

                      v51 = (void *)a1[6];
                      if (!v51) {
                        goto LABEL_122;
                      }
                      os_log_type_t v52 = v51[3];
                      if (!v52) {
                        goto LABEL_122;
                      }
                      v53 = *(void (**)(void *, nw_protocol *))(v52 + 160);
                      if (!v53) {
                        goto LABEL_122;
                      }
                      BOOL v54 = (void *)v51[5];
                      if (v54 == &nw_protocol_ref_counted_handle)
                      {
                        v56 = v51[11];
                        if (v56) {
                          v51[11] = v56 + 1;
                        }
                        uint64_t v55 = -1;
                      }

                      else
                      {
                        uint64_t v55 = 0;
                      }

                      *(void *)os_log_type_t type = v51;
                      v134 = v55;
                      BOOL v57 = a2->handle;
                      if (v57 == &nw_protocol_ref_counted_handle)
                      {
                        v59 = a2[1].callbacks;
                        if (v59) {
                          a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v59->add_input_handler + 1);
                        }
                        v58 = -1;
                      }

                      else
                      {
                        v58 = 0;
                      }

                      v131 = a2;
                      v132 = v58;
                      if (a3)
                      {
                        v53(v51, a2);
LABEL_94:
                        if (v57 == &nw_protocol_ref_counted_handle) {
                          nw::release_if_needed<nw_protocol *>((uint64_t *)&v131);
                        }
                        if (v54 == &nw_protocol_ref_counted_handle) {
                          nw::release_if_needed<nw_protocol *>((uint64_t *)type);
                        }
                        goto LABEL_122;
                      }

                      __nwlog_obj();
                      v107 = (void *)objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = "__nw_protocol_notify";
                      v108 = (char *)_os_log_send_and_compose_impl();

                      v130 = OS_LOG_TYPE_ERROR;
                      v129 = 0;
                      if (__nwlog_fault(v108, &v130, &v129))
                      {
                        if (v130 == OS_LOG_TYPE_FAULT)
                        {
                          __nwlog_obj();
                          __int16 v109 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                          __uint64_t v110 = v130;
                          if (os_log_type_enabled(v109, v130))
                          {
                            *(_DWORD *)buf = 136446210;
                            *(void *)&uint8_t buf[4] = "__nw_protocol_notify";
                            _os_log_impl(&dword_181A5C000, v109, v110, "%{public}s called with null type", buf, 0xCu);
                          }
                        }

                        else if (v129)
                        {
                          backtrace_string = (char *)__nw_create_backtrace_string();
                          __nwlog_obj();
                          __int16 v109 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                          v119 = v130;
                          v120 = os_log_type_enabled(v109, v130);
                          if (backtrace_string)
                          {
                            if (v120)
                            {
                              *(_DWORD *)buf = 136446466;
                              *(void *)&uint8_t buf[4] = "__nw_protocol_notify";
                              v136 = 2082;
                              v137 = backtrace_string;
                              _os_log_impl( &dword_181A5C000,  v109,  v119,  "%{public}s called with null type, dumping backtrace:%{public}s",  buf,  0x16u);
                            }

                            free(backtrace_string);
                            goto LABEL_275;
                          }

                          if (v120)
                          {
                            *(_DWORD *)buf = 136446210;
                            *(void *)&uint8_t buf[4] = "__nw_protocol_notify";
                            _os_log_impl( &dword_181A5C000,  v109,  v119,  "%{public}s called with null type, no backtrace",  buf,  0xCu);
                          }
                        }

                        else
                        {
                          __nwlog_obj();
                          __int16 v109 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                          v124 = v130;
                          if (os_log_type_enabled(v109, v130))
                          {
                            *(_DWORD *)buf = 136446210;
                            *(void *)&uint8_t buf[4] = "__nw_protocol_notify";
                            _os_log_impl( &dword_181A5C000,  v109,  v124,  "%{public}s called with null type, backtrace limit exceeded",  buf,  0xCu);
                          }
                        }
                      }

        free(backtrace_string);
        if (!v28) {
          goto LABEL_24;
        }
        goto LABEL_152;
      }
    }

    else
    {
      __nwlog_obj();
      id v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_local";
      os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v72 = OS_LOG_TYPE_DEFAULT;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v30 = type[0];
        if (os_log_type_enabled(v29, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_local";
          _os_log_impl(&dword_181A5C000, v29, v30, "%{public}s called with null instance", buf, 0xCu);
        }

        goto LABEL_150;
      }

      if (v72 == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        os_log_type_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v53 = type[0];
        if (os_log_type_enabled(v29, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_local";
          _os_log_impl( &dword_181A5C000,  v29,  v53,  "%{public}s called with null instance, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_150;
      }

      v38 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v39 = type[0];
      v40 = os_log_type_enabled(v29, type[0]);
      if (!v38)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_local";
          _os_log_impl(&dword_181A5C000, v29, v39, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }

        goto LABEL_150;
      }

      if (v40)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_local";
        unint64_t v74 = 2082;
        char v75 = v38;
        _os_log_impl( &dword_181A5C000,  v29,  v39,  "%{public}s called with null instance, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v38);
    }

        free(backtrace_string);
        if (!v28) {
          goto LABEL_24;
        }
        goto LABEL_152;
      }
    }

    else
    {
      __nwlog_obj();
      id v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_remote";
      os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v72 = OS_LOG_TYPE_DEFAULT;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v30 = type[0];
        if (os_log_type_enabled(v29, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_remote";
          _os_log_impl(&dword_181A5C000, v29, v30, "%{public}s called with null instance", buf, 0xCu);
        }

        goto LABEL_150;
      }

      if (v72 == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        os_log_type_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v53 = type[0];
        if (os_log_type_enabled(v29, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_remote";
          _os_log_impl( &dword_181A5C000,  v29,  v53,  "%{public}s called with null instance, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_150;
      }

      v38 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v39 = type[0];
      v40 = os_log_type_enabled(v29, type[0]);
      if (!v38)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_remote";
          _os_log_impl(&dword_181A5C000, v29, v39, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }

        goto LABEL_150;
      }

      if (v40)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_remote";
        unint64_t v74 = 2082;
        char v75 = v38;
        _os_log_impl( &dword_181A5C000,  v29,  v39,  "%{public}s called with null instance, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v38);
    }

        free(backtrace_string);
        if (!v29) {
          goto LABEL_24;
        }
        goto LABEL_152;
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_path";
      os_log_type_t v29 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      __uint64_t v73 = OS_LOG_TYPE_DEFAULT;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v31 = type[0];
        if (os_log_type_enabled(v30, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_path";
          _os_log_impl(&dword_181A5C000, v30, v31, "%{public}s called with null instance", buf, 0xCu);
        }

        goto LABEL_150;
      }

      if (v73 == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v54 = type[0];
        if (os_log_type_enabled(v30, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_path";
          _os_log_impl( &dword_181A5C000,  v30,  v54,  "%{public}s called with null instance, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_150;
      }

      os_log_type_t v39 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v40 = type[0];
      os_log_type_t v41 = os_log_type_enabled(v30, type[0]);
      if (!v39)
      {
        if (v41)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_path";
          _os_log_impl(&dword_181A5C000, v30, v40, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }

        goto LABEL_150;
      }

      if (v41)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_get_path";
        char v75 = 2082;
        __uint64_t v76 = v39;
        _os_log_impl( &dword_181A5C000,  v30,  v40,  "%{public}s called with null instance, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v39);
    }

          free(v16);
          goto LABEL_77;
        }

        if (v26)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v42 = "nw_protocol_create_outbound_data";
          _os_log_impl( &dword_181A5C000,  v17,  v25,  "%{public}s nw_frame_create_external failed, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v37 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v42 = "nw_protocol_create_outbound_data";
          _os_log_impl( &dword_181A5C000,  v17,  v37,  "%{public}s nw_frame_create_external failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }

      if (v13) {
        free(v13);
      }
      data_from_pool = 0LL;
      goto LABEL_47;
    }
  }

  os_log_type_t v11 = malloc(a2);
  if (v11)
  {
    os_log_type_t v10 = (BOOL)v11;
    BOOL v9 = 0LL;
    goto LABEL_31;
  }

  __nwlog_obj();
  uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  BOOL v42 = "strict_malloc";
  char v43 = 2048;
  dispatch_workloop_t v44 = a2;
  __int16 v24 = (void *)_os_log_send_and_compose_impl();

  uint64_t result = __nwlog_abort((uint64_t)v24);
  if (!result)
  {
    free(v24);
    goto LABEL_30;
  }

  __break(1u);
  return result;
}

  if (v26) {
LABEL_77:
  }
    free(v26);
LABEL_78:
  v31 = 0LL;
LABEL_112:

  return v31;
}

    goto LABEL_77;
  }

  if ((a2 & 0xFFFFFFFE) != 4) {
    goto LABEL_77;
  }
  char v20 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
  os_log_type_t v21 = *(void **)(a1 + 32);
  if (v20)
  {
    v22 = v21;
    uint64_t v23 = v20;
    if (v22)
    {
      nw_context_assert_queue(*((void **)v22 + 3));
      if (*((_DWORD *)v22 + 32) != 2 || (v22[302] & 1) != 0)
      {
        v38 = *((void *)v22 + 2);
        if (v38 && !nw_path_parameters_get_logging_disabled(*(void *)(v38 + 104)))
        {
          if (__nwlog_listener_log::onceToken != -1) {
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
          }
          os_log_type_t v39 = (os_log_s *)(id)glistenerLogObj;
          if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            BOOL v54 = "nw_listener_teardown_protocol_inbox";
            uint64_t v55 = 2082;
            v56 = v22 + 42;
            _os_log_impl( &dword_181A5C000,  v39,  OS_LOG_TYPE_ERROR,  "%{public}s [%{public}s] Listener is not ready, ignoring teardown protocol inbox",  buf,  0x16u);
          }
        }
      }

      else
      {
        __int16 v24 = *((void *)v22 + 2);
        if (v24 && !nw_path_parameters_get_logging_disabled(*(void *)(v24 + 104)))
        {
          if (__nwlog_listener_log::onceToken != -1) {
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
          }
          v25 = (os_log_s *)(id)glistenerLogObj;
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446466;
            BOOL v54 = "nw_listener_teardown_protocol_inbox";
            uint64_t v55 = 2082;
            v56 = v22 + 42;
            _os_log_impl( &dword_181A5C000,  v25,  OS_LOG_TYPE_DEBUG,  "%{public}s [%{public}s] tearing down protocol inbox",  buf,  0x16u);
          }
        }

        os_log_type_t v26 = *((void *)v22 + 18);
        if (v26 && nw_array_remove_object(v26, (uint64_t)v23))
        {
          id v27 = *((void *)v22 + 2);
          if (v27 && !nw_path_parameters_get_logging_disabled(*(void *)(v27 + 104)))
          {
            if (__nwlog_listener_log::onceToken != -1) {
              dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
            }
            os_log_type_t v28 = (os_log_s *)(id)glistenerLogObj;
            if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136446722;
              BOOL v54 = "nw_listener_teardown_protocol_inbox";
              uint64_t v55 = 2082;
              v56 = v22 + 42;
              BOOL v57 = 2114;
              v58 = v23;
              _os_log_impl( &dword_181A5C000,  v28,  OS_LOG_TYPE_DEFAULT,  "%{public}s [%{public}s] cancelling protocol inbox: %{public}@",  buf,  0x20u);
            }
          }

          nw_listener_resume_inbox((NWConcrete_nw_listener *)v22, v23);
          nw_listener_cancel_inbox_on_queue((NWConcrete_nw_listener *)v22, v23);
        }
      }

    if (v33) {
      free(v33);
    }
    goto LABEL_28;
  }

  __nwlog_obj();
  os_log_type_t v28 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_parameters_copy_protocol_options_internal";
  os_log_type_t v29 = (char *)_os_log_send_and_compose_impl();

  v53 = OS_LOG_TYPE_ERROR;
  os_log_type_t v52 = 0;
  if (__nwlog_fault(v29, &v53, &v52))
  {
    if (v53 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v31 = v53;
      if (os_log_type_enabled(v30, v53))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_parameters_copy_protocol_options_internal";
        _os_log_impl(&dword_181A5C000, v30, v31, "%{public}s called with null protocol_instance", buf, 0xCu);
      }
    }

    else if (v52)
    {
      id v36 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v37 = v53;
      v38 = os_log_type_enabled(v30, v53);
      if (v36)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_parameters_copy_protocol_options_internal";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v36;
          _os_log_impl( &dword_181A5C000,  v30,  v37,  "%{public}s called with null protocol_instance, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v36);
        goto LABEL_70;
      }

      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_parameters_copy_protocol_options_internal";
        _os_log_impl( &dword_181A5C000,  v30,  v37,  "%{public}s called with null protocol_instance, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v42 = v53;
      if (os_log_type_enabled(v30, v53))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_parameters_copy_protocol_options_internal";
        _os_log_impl( &dword_181A5C000,  v30,  v42,  "%{public}s called with null protocol_instance, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

        if (!v18) {
          goto LABEL_87;
        }
        goto LABEL_77;
      }

      os_log_type_t v21 = *(void *)&v13[4]._os_unfair_lock_opaque;
      if (v21 && !nw_path_parameters_get_logging_disabled(*(void *)(v21 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        v22 = (id)gconnectionLogObj;
        char os_unfair_lock_opaque = v13[112]._os_unfair_lock_opaque;
        *(_DWORD *)buf = 136446466;
        v94 = "nw_connection_read_buffer";
        v95 = 1024;
        *(_DWORD *)v96 = os_unfair_lock_opaque;
        __int16 v24 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        os_log_type_t v91 = 0;
        if (__nwlog_fault(v24, &type, &v91))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            v25 = (os_log_s *)(id)gconnectionLogObj;
            os_log_type_t v26 = type;
            if (os_log_type_enabled(v25, type))
            {
              id v27 = v13[112]._os_unfair_lock_opaque;
              *(_DWORD *)buf = 136446466;
              v94 = "nw_connection_read_buffer";
              v95 = 1024;
              *(_DWORD *)v96 = v27;
              _os_log_impl(&dword_181A5C000, v25, v26, "%{public}s [C%u] client_queue is nil", buf, 0x12u);
            }
          }

          else if (v91)
          {
            dispatch_workloop_t v34 = __nw_create_backtrace_string();
            if (v34)
            {
              v35 = (char *)v34;
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              id v36 = (os_log_s *)(id)gconnectionLogObj;
              v37 = type;
              if (os_log_type_enabled(v36, type))
              {
                v38 = v13[112]._os_unfair_lock_opaque;
                *(_DWORD *)buf = 136446722;
                v94 = "nw_connection_read_buffer";
                v95 = 1024;
                *(_DWORD *)v96 = v38;
                *(_WORD *)&v96[4] = 2082;
                *(void *)&v96[6] = v35;
                _os_log_impl( &dword_181A5C000,  v36,  v37,  "%{public}s [C%u] client_queue is nil, dumping backtrace:%{public}s",  buf,  0x1Cu);
              }

              free(v35);
              if (!v24) {
                goto LABEL_72;
              }
              goto LABEL_71;
            }

            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            v25 = (os_log_s *)(id)gconnectionLogObj;
            os_log_type_t v52 = type;
            if (os_log_type_enabled(v25, type))
            {
              v53 = v13[112]._os_unfair_lock_opaque;
              *(_DWORD *)buf = 136446466;
              v94 = "nw_connection_read_buffer";
              v95 = 1024;
              *(_DWORD *)v96 = v53;
              _os_log_impl(&dword_181A5C000, v25, v52, "%{public}s [C%u] client_queue is nil, no backtrace", buf, 0x12u);
            }
          }

          else
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            v25 = (os_log_s *)(id)gconnectionLogObj;
            os_log_type_t v46 = type;
            if (os_log_type_enabled(v25, type))
            {
              os_log_type_t v47 = v13[112]._os_unfair_lock_opaque;
              *(_DWORD *)buf = 136446466;
              v94 = "nw_connection_read_buffer";
              v95 = 1024;
              *(_DWORD *)v96 = v47;
              _os_log_impl( &dword_181A5C000,  v25,  v46,  "%{public}s [C%u] client_queue is nil, backtrace limit exceeded",  buf,  0x12u);
            }
          }
        }

        if (v24) {
LABEL_71:
        }
          free(v24);
      }

    free(backtrace_string);
    goto LABEL_94;
  }

  if (a1->default_input_handler != a2)
  {
    if ((handle[529] & 1) != 0) {
      return 0LL;
    }
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
    }
    uint64_t v7 = handle + 531;
    default_input_handler = a1->default_input_handler;
    *(_DWORD *)buf = 136447234;
    v40 = "nw_protocol_masque_replace_input_handler";
    os_log_type_t v41 = 2082;
    BOOL v42 = handle + 531;
    char v43 = 2080;
    dispatch_workloop_t v44 = " ";
    v45 = 2048;
    os_log_type_t v46 = default_input_handler;
    os_log_type_t v47 = 2048;
    v48 = a2;
    BOOL v9 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (__nwlog_fault(v9, &type, &v37))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
        }
        os_log_type_t v10 = (os_log_s *)gprivacy_proxyLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, type))
        {
          os_log_type_t v12 = a1->default_input_handler;
          *(_DWORD *)buf = 136447234;
          v40 = "nw_protocol_masque_replace_input_handler";
          os_log_type_t v41 = 2082;
          BOOL v42 = handle + 531;
          char v43 = 2080;
          dispatch_workloop_t v44 = " ";
          v45 = 2048;
          os_log_type_t v46 = v12;
          os_log_type_t v47 = 2048;
          v48 = a2;
          os_log_type_t v13 = "%{public}s %{public}s%sOld input handler does not match (%p != %p)";
LABEL_37:
          _os_log_impl(&dword_181A5C000, v10, v11, v13, buf, 0x34u);
        }
      }

      else if (v37)
      {
        os_log_type_t v21 = (char *)__nw_create_backtrace_string();
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
        }
        os_log_type_t v10 = (os_log_s *)gprivacy_proxyLogObj;
        os_log_type_t v11 = type;
        v22 = os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, type);
        if (!v21)
        {
          if (!v22) {
            goto LABEL_38;
          }
          v25 = a1->default_input_handler;
          *(_DWORD *)buf = 136447234;
          v40 = "nw_protocol_masque_replace_input_handler";
          os_log_type_t v41 = 2082;
          BOOL v42 = v7;
          char v43 = 2080;
          dispatch_workloop_t v44 = " ";
          v45 = 2048;
          os_log_type_t v46 = v25;
          os_log_type_t v47 = 2048;
          v48 = a2;
          os_log_type_t v13 = "%{public}s %{public}s%sOld input handler does not match (%p != %p), no backtrace";
          goto LABEL_37;
        }

        if (v22)
        {
          uint64_t v23 = a1->default_input_handler;
          *(_DWORD *)buf = 136447490;
          v40 = "nw_protocol_masque_replace_input_handler";
          os_log_type_t v41 = 2082;
          BOOL v42 = v7;
          char v43 = 2080;
          dispatch_workloop_t v44 = " ";
          v45 = 2048;
          os_log_type_t v46 = v23;
          os_log_type_t v47 = 2048;
          v48 = a2;
          id v49 = 2082;
          v50 = v21;
          _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s %{public}s%sOld input handler does not match (%p != %p), dumping backtrace:%{public}s",  buf,  0x3Eu);
        }

        free(v21);
      }

      else
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
        }
        os_log_type_t v10 = (os_log_s *)gprivacy_proxyLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, type))
        {
          __int16 v24 = a1->default_input_handler;
          *(_DWORD *)buf = 136447234;
          v40 = "nw_protocol_masque_replace_input_handler";
          os_log_type_t v41 = 2082;
          BOOL v42 = handle + 531;
          char v43 = 2080;
          dispatch_workloop_t v44 = " ";
          v45 = 2048;
          os_log_type_t v46 = v24;
          os_log_type_t v47 = 2048;
          v48 = a2;
          os_log_type_t v13 = "%{public}s %{public}s%sOld input handler does not match (%p != %p), backtrace limit exceeded";
          goto LABEL_37;
        }
      }
    }

  if (v22) {
    free(v22);
  }
}
}

  if (v35) {
    free(v35);
  }
  os_log_type_t v10 = 0LL;
LABEL_43:

  return v10;
}

  PBDataWriterWriteBOOLField();
  has = (__int16)self->_has;
  if ((has & 0x2000) == 0)
  {
LABEL_21:
    if ((has & 0x4000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_78;
  }

  if (v20) {
    free(v20);
  }
  return 0LL;
}

    if (v22) {
      free(v22);
    }
    int v16 = 0LL;
    goto LABEL_13;
  }

  char v5 = v3;
  id v6 = v5[19];

  if (!v6)
  {
    __nwlog_obj();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v57 = "nw_proxy_config_copy_parameters_to_proxy";
    os_log_type_t v26 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v54 = 0;
    if (__nwlog_fault(v26, &type, &v54))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v57 = "nw_proxy_config_copy_parameters_to_proxy";
          _os_log_impl(&dword_181A5C000, v27, v28, "%{public}s called with null new_stack", buf, 0xCu);
        }
      }

      else if (v54)
      {
        os_log_type_t v39 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v40 = type;
        os_log_type_t v41 = os_log_type_enabled(v27, type);
        if (v39)
        {
          if (v41)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v57 = "nw_proxy_config_copy_parameters_to_proxy";
            v58 = 2082;
            v59 = v39;
            _os_log_impl( &dword_181A5C000,  v27,  v40,  "%{public}s called with null new_stack, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v39);
          goto LABEL_82;
        }

        if (v41)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v57 = "nw_proxy_config_copy_parameters_to_proxy";
          _os_log_impl(&dword_181A5C000, v27, v40, "%{public}s called with null new_stack, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        id v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v48 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v57 = "nw_proxy_config_copy_parameters_to_proxy";
          _os_log_impl( &dword_181A5C000,  v27,  v48,  "%{public}s called with null new_stack, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

        goto LABEL_77;
      }

      if (!v41)
      {
        __nwlog_obj();
        uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        __int16 v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          dispatch_workloop_t v44 = "nw_necp_append_tlv";
          v25 = "%{public}s called with null tlv_start, backtrace limit exceeded";
          goto LABEL_75;
        }

        goto LABEL_76;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v24 = type;
      v31 = os_log_type_enabled(v23, type);
      if (!backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446210;
          dispatch_workloop_t v44 = "nw_necp_append_tlv";
          v25 = "%{public}s called with null tlv_start, no backtrace";
          goto LABEL_75;
        }

        goto LABEL_76;
      }

      if (!v31) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446466;
      dispatch_workloop_t v44 = "nw_necp_append_tlv";
      v45 = 2082;
      *(void *)os_log_type_t v46 = backtrace_string;
      os_log_type_t v32 = "%{public}s called with null tlv_start, dumping backtrace:%{public}s";
      goto LABEL_51;
    }

        goto LABEL_77;
      }

      if (!v41)
      {
        __nwlog_obj();
        uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        __int16 v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          dispatch_workloop_t v44 = "nw_necp_append_tlv";
          v25 = "%{public}s called with null tlv_start, backtrace limit exceeded";
          goto LABEL_75;
        }

        goto LABEL_76;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v24 = type;
      v31 = os_log_type_enabled(v23, type);
      if (!backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446210;
          dispatch_workloop_t v44 = "nw_necp_append_tlv";
          v25 = "%{public}s called with null tlv_start, no backtrace";
          goto LABEL_75;
        }

        goto LABEL_76;
      }

      if (!v31) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446466;
      dispatch_workloop_t v44 = "nw_necp_append_tlv";
      v45 = 2082;
      *(void *)os_log_type_t v46 = backtrace_string;
      os_log_type_t v32 = "%{public}s called with null tlv_start, dumping backtrace:%{public}s";
      goto LABEL_51;
    }

        goto LABEL_77;
      }

      if (!v41)
      {
        __nwlog_obj();
        uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        __int16 v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          dispatch_workloop_t v44 = "nw_necp_append_tlv";
          v25 = "%{public}s called with null tlv_start, backtrace limit exceeded";
          goto LABEL_75;
        }

        goto LABEL_76;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v24 = type;
      v31 = os_log_type_enabled(v23, type);
      if (!backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446210;
          dispatch_workloop_t v44 = "nw_necp_append_tlv";
          v25 = "%{public}s called with null tlv_start, no backtrace";
          goto LABEL_75;
        }

        goto LABEL_76;
      }

      if (!v31) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446466;
      dispatch_workloop_t v44 = "nw_necp_append_tlv";
      v45 = 2082;
      *(void *)os_log_type_t v46 = backtrace_string;
      os_log_type_t v32 = "%{public}s called with null tlv_start, dumping backtrace:%{public}s";
      goto LABEL_51;
    }

      free(v14);
      goto LABEL_77;
    }

    os_log_type_t v15 = (os_log_s *)__nwlog_obj();
    int v16 = type;
    if (!os_log_type_enabled(v15, type)) {
      goto LABEL_75;
    }
    *(_DWORD *)buf = 136446210;
    id v36 = "nw_http1_get_http1_protocol";
    id v17 = "%{public}s called with null handle";
    goto LABEL_74;
  }

  uint64_t v7 = handle[6];
  if (v7 == 1) {
    goto LABEL_10;
  }
  if (v7 != 2)
  {
    if (v7 != 3) {
      goto LABEL_77;
    }
    char v8 = *((void *)handle + 2);
    if (v8)
    {
      handle = (_DWORD *)(v8 + 480);
      goto LABEL_10;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v36 = "nw_http1_get_http1_protocol";
    BOOL v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v33 = 0;
    if (__nwlog_fault(v14, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v15 = (os_log_s *)__nwlog_obj();
        int v16 = type;
        if (!os_log_type_enabled(v15, type)) {
          goto LABEL_75;
        }
        *(_DWORD *)buf = 136446210;
        id v36 = "nw_http1_get_http1_protocol";
        id v17 = "%{public}s called with null handle->http1_connection";
        goto LABEL_74;
      }

      if (!v33)
      {
        os_log_type_t v15 = (os_log_s *)__nwlog_obj();
        int v16 = type;
        if (!os_log_type_enabled(v15, type)) {
          goto LABEL_75;
        }
        *(_DWORD *)buf = 136446210;
        id v36 = "nw_http1_get_http1_protocol";
        id v17 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
        goto LABEL_74;
      }

      char v20 = (char *)__nw_create_backtrace_string();
      os_log_type_t v15 = (os_log_s *)__nwlog_obj();
      int v16 = type;
      v25 = os_log_type_enabled(v15, type);
      if (!v20)
      {
        if (!v25) {
          goto LABEL_75;
        }
        *(_DWORD *)buf = 136446210;
        id v36 = "nw_http1_get_http1_protocol";
        id v17 = "%{public}s called with null handle->http1_connection, no backtrace";
        goto LABEL_74;
      }

      if (v25)
      {
        *(_DWORD *)buf = 136446466;
        id v36 = "nw_http1_get_http1_protocol";
        v37 = 2082;
        v38 = v20;
        v22 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
        goto LABEL_59;
      }

      goto LABEL_60;
    }

      free(v26);
      if (!v16) {
        goto LABEL_93;
      }
LABEL_92:
      free(v16);
      goto LABEL_93;
    }

    id v17 = (os_log_s *)__nwlog_obj();
    id v18 = type;
    if (!os_log_type_enabled(v17, type)) {
      goto LABEL_91;
    }
    *(_DWORD *)buf = 136446210;
    v40 = "nw_http1_get_http1_protocol";
    char v19 = "%{public}s called with null handle";
LABEL_90:
    _os_log_impl(&dword_181A5C000, v17, v18, v19, buf, 0xCu);
    goto LABEL_91;
  }

  uint64_t v4 = handle[6];
  if (v4 == 1) {
    goto LABEL_10;
  }
  if (v4 != 2)
  {
    if (v4 != 3) {
      goto LABEL_93;
    }
    char v5 = *((void *)handle + 2);
    if (v5)
    {
      handle = (_DWORD *)(v5 + 480);
      goto LABEL_10;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_http1_get_http1_protocol";
    int v16 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v17 = (os_log_s *)__nwlog_obj();
      id v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_91;
      }
      *(_DWORD *)buf = 136446210;
      v40 = "nw_http1_get_http1_protocol";
      char v19 = "%{public}s called with null handle->http1_connection";
      goto LABEL_90;
    }

    if (!v37)
    {
      id v17 = (os_log_s *)__nwlog_obj();
      id v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_91;
      }
      *(_DWORD *)buf = 136446210;
      v40 = "nw_http1_get_http1_protocol";
      char v19 = "%{public}s called with null handle->http1_connection, backtrace limit exceeded";
      goto LABEL_90;
    }

    os_log_type_t v26 = (char *)__nw_create_backtrace_string();
    id v17 = (os_log_s *)__nwlog_obj();
    id v18 = type;
    os_log_type_t v29 = os_log_type_enabled(v17, type);
    if (!v26)
    {
      if (!v29) {
        goto LABEL_91;
      }
      *(_DWORD *)buf = 136446210;
      v40 = "nw_http1_get_http1_protocol";
      char v19 = "%{public}s called with null handle->http1_connection, no backtrace";
      goto LABEL_90;
    }

    if (v29)
    {
      *(_DWORD *)buf = 136446466;
      v40 = "nw_http1_get_http1_protocol";
      os_log_type_t v41 = 2082;
      BOOL v42 = v26;
      os_log_type_t v28 = "%{public}s called with null handle->http1_connection, dumping backtrace:%{public}s";
      goto LABEL_75;
    }

    goto LABEL_76;
  }

  id v6 = *((void *)handle + 1);
  if (!v6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_http1_get_http1_protocol";
    int v16 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v17 = (os_log_s *)__nwlog_obj();
      id v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_91;
      }
      *(_DWORD *)buf = 136446210;
      v40 = "nw_http1_get_http1_protocol";
      char v19 = "%{public}s called with null handle->http1_stream";
      goto LABEL_90;
    }

    if (!v37)
    {
      id v17 = (os_log_s *)__nwlog_obj();
      id v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_91;
      }
      *(_DWORD *)buf = 136446210;
      v40 = "nw_http1_get_http1_protocol";
      char v19 = "%{public}s called with null handle->http1_stream, backtrace limit exceeded";
      goto LABEL_90;
    }

    os_log_type_t v26 = (char *)__nw_create_backtrace_string();
    id v17 = (os_log_s *)__nwlog_obj();
    id v18 = type;
    os_log_type_t v30 = os_log_type_enabled(v17, type);
    if (!v26)
    {
      if (!v30) {
        goto LABEL_91;
      }
      *(_DWORD *)buf = 136446210;
      v40 = "nw_http1_get_http1_protocol";
      char v19 = "%{public}s called with null handle->http1_stream, no backtrace";
      goto LABEL_90;
    }

    if (v30)
    {
      *(_DWORD *)buf = 136446466;
      v40 = "nw_http1_get_http1_protocol";
      os_log_type_t v41 = 2082;
      BOOL v42 = v26;
      os_log_type_t v28 = "%{public}s called with null handle->http1_stream, dumping backtrace:%{public}s";
      goto LABEL_75;
    }

    goto LABEL_76;
  }

  handle = (_DWORD *)(v6 + 248);
LABEL_10:
  uint64_t v7 = *(void *)handle;
  if (*(void *)handle)
  {
    if ((*(_BYTE *)(v7 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        char v20 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          os_log_type_t v21 = *(_DWORD *)(v7 + 372);
          *(_DWORD *)buf = 136447234;
          v40 = "nw_protocol_http1_remove_listen_handler";
          os_log_type_t v41 = 2082;
          BOOL v42 = (char *)(v7 + 74);
          char v43 = 2080;
          dispatch_workloop_t v44 = " ";
          v45 = 1024;
          os_log_type_t v46 = v21;
          os_log_type_t v47 = 2048;
          v48[0] = a2;
          _os_log_impl( &dword_181A5C000,  v20,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> called with listen_protocol %p",  buf,  0x30u);
        }
      }
    }

    if (*(nw_listen_protocol **)(v7 + 328) == a2)
    {
      *(void *)(v7 + 328) = 0LL;
      a2->protocol_handler = 0LL;
      if ((*(_BYTE *)(v7 + 158) & 1) != 0) {
        goto LABEL_18;
      }
    }

    else if ((*(_BYTE *)(v7 + 158) & 1) != 0)
    {
LABEL_18:
      if ((*(_BYTE *)(v7 + 376) & 1) == 0)
      {
        *(_BYTE *)(v7 + 376) |= 8u;
        char v8 = *(void *)(v7 + 208);
        while (v8)
        {
          BOOL v9 = v8;
          char v8 = *(void *)(v8 + 592);
          os_log_type_t v10 = *(void *)(v9 + 784);
          if (v10)
          {
            if (*(void *)v10)
            {
              dispatch_source_set_timer( *(dispatch_source_t *)v10,  0x8000000000000000LL,  0xFFFFFFFFFFFFFFFFLL,  0x3B9ACA00uLL);
            }

            else
            {
              *(_OWORD *)(v10 + 32) = xmmword_18272D790;
              if (*(_BYTE *)(v10 + 48))
              {
                if (*(_BYTE *)(v10 + 49)) {
                  nw_queue_source_run_timer(v10, (uint64_t)a2);
                }
              }
            }
          }

          else if ((*(_BYTE *)(v9 + 158) & 1) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v11 = (os_log_s *)gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
            {
              os_log_type_t v12 = *(void *)(v9 + 488);
              if (v12) {
                LODWORD(v12) = *(_DWORD *)(v12 + 424);
              }
              os_log_type_t v13 = *(_DWORD *)(*(void *)(v9 + 480) + 372LL);
              BOOL v14 = *(_DWORD *)(v9 + 860);
              *(_DWORD *)buf = 136447490;
              v40 = "nw_protocol_http1_remove_listen_handler";
              os_log_type_t v41 = 2082;
              BOOL v42 = (char *)(v9 + 74);
              char v43 = 2080;
              dispatch_workloop_t v44 = " ";
              v45 = 1024;
              os_log_type_t v46 = v13;
              os_log_type_t v47 = 1024;
              LODWORD(v48[0]) = v14;
              WORD2(v48[0]) = 1024;
              *(_DWORD *)((char *)v48 + 6) = v12;
              _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:c%u:s%u> no destroy timer on idle http1 connection when listen handler removed",  buf,  0x32u);
            }
          }
        }
      }

      return 1LL;
    }

    if (gLogDatapath)
    {
      v22 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v23 = *(_DWORD *)(v7 + 372);
        *(_DWORD *)buf = 136446978;
        v40 = "nw_protocol_http1_remove_listen_handler";
        os_log_type_t v41 = 2082;
        BOOL v42 = (char *)(v7 + 74);
        char v43 = 2080;
        dispatch_workloop_t v44 = " ";
        v45 = 1024;
        os_log_type_t v46 = v23;
        _os_log_impl( &dword_181A5C000,  v22,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> removed protocol listen handler",  buf,  0x26u);
      }
    }

    goto LABEL_18;
  }

          if (!v19) {
            goto LABEL_38;
          }
LABEL_77:
          free(v19);
          goto LABEL_38;
        }

        char v20 = (os_log_s *)__nwlog_obj();
        os_log_type_t v21 = type;
        if (!os_log_type_enabled(v20, type)) {
          goto LABEL_76;
        }
        v35 = nw_endpoint_get_logging_description(v16);
        *(_DWORD *)buf = 136446466;
        v59 = "nw_protocol_create_internal";
        os_log_type_t v60 = 2080;
        BOOL v61 = (uint64_t)v35;
        uint64_t v23 = "%{public}s endpoint %s is not registered, cannot add instance for joining, backtrace limit exceeded";
LABEL_69:
        os_log_type_t v39 = v20;
        v40 = v21;
        os_log_type_t v41 = 22;
LABEL_75:
        _os_log_impl(&dword_181A5C000, v39, v40, v23, buf, v41);
        goto LABEL_76;
      }

      if (gLogDatapath)
      {
        v53 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
        {
          BOOL v54 = v8[13];
          uint64_t v55 = nw_endpoint_get_logging_description(v16);
          *(_DWORD *)buf = 136447234;
          v59 = "nw_protocol_create_internal";
          os_log_type_t v60 = 2048;
          BOOL v61 = v14;
          v62 = 2080;
          logging_description = (const char *)a1;
          os_log_type_t v64 = 2048;
          os_log_type_t v65 = (const char *)v54;
          BOOL v66 = 2080;
          os_log_type_t v67 = v55;
          _os_log_impl( &dword_181A5C000,  v53,  OS_LOG_TYPE_DEBUG,  "%{public}s created protocol instance %p of %s with accept function %p to endpoint %s",  buf,  0x34u);
        }
      }

      v25 = v8[9];
      if (!v25) {
        goto LABEL_47;
      }
      id v27 = *(void **)(v25 + 16);
      os_log_type_t v26 = *(void **)(v25 + 24);
      if (v27 != v26)
      {
        while ((_BYTE *)*v27 != v16)
        {
          if (++v27 == v26)
          {
            id v27 = *(void **)(v25 + 24);
            break;
          }
        }
      }

      if (v27 == v26) {
LABEL_47:
      }
        nw_array_append(v25, v16);
      os_log_type_t v28 = nw_endpoint_copy_registrar_for_identifier(v16, (__int128 *)a1, 1);
      if (v28)
      {
        os_log_type_t v29 = v28;
        nw_protocol_instance_registrar_add_instance(v28, v14);
        os_release(v29);
        goto LABEL_38;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446210;
      v59 = "nw_protocol_create_internal";
      char v19 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v56 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v33 = (os_log_s *)__nwlog_obj();
        dispatch_workloop_t v34 = type;
        if (!os_log_type_enabled(v33, type)) {
          goto LABEL_76;
        }
        *(_DWORD *)buf = 136446210;
        v59 = "nw_protocol_create_internal";
        uint64_t v23 = "%{public}s nw_endpoint_get_registrar(endpoint, true) failed";
        goto LABEL_74;
      }

      if (v56)
      {
        id v36 = (char *)__nw_create_backtrace_string();
        BOOL v33 = (os_log_s *)__nwlog_obj();
        dispatch_workloop_t v34 = type;
        v37 = os_log_type_enabled(v33, type);
        if (v36)
        {
          if (v37)
          {
            *(_DWORD *)buf = 136446466;
            v59 = "nw_protocol_create_internal";
            os_log_type_t v60 = 2082;
            BOOL v61 = (uint64_t)v36;
            _os_log_impl( &dword_181A5C000,  v33,  v34,  "%{public}s nw_endpoint_get_registrar(endpoint, true) failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v36);
          if (v19) {
            goto LABEL_77;
          }
          goto LABEL_38;
        }

        if (!v37) {
          goto LABEL_76;
        }
        *(_DWORD *)buf = 136446210;
        v59 = "nw_protocol_create_internal";
        uint64_t v23 = "%{public}s nw_endpoint_get_registrar(endpoint, true) failed, no backtrace";
      }

      else
      {
        BOOL v33 = (os_log_s *)__nwlog_obj();
        dispatch_workloop_t v34 = type;
        if (!os_log_type_enabled(v33, type)) {
          goto LABEL_76;
        }
        *(_DWORD *)buf = 136446210;
        v59 = "nw_protocol_create_internal";
        uint64_t v23 = "%{public}s nw_endpoint_get_registrar(endpoint, true) failed, backtrace limit exceeded";
      }

      goto LABEL_77;
    }

    if (!v52)
    {
      __nwlog_obj();
      BOOL v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v46 = type;
      if (os_log_type_enabled(v33, type))
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_utilities_trust_ref_matches_public_key";
        _os_log_impl( &dword_181A5C000,  v33,  v46,  "%{public}s called with null keyInfo, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_76;
    }

    os_log_type_t v41 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    BOOL v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v42 = type;
    char v43 = os_log_type_enabled(v33, type);
    if (!v41)
    {
      if (v43)
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_utilities_trust_ref_matches_public_key";
        _os_log_impl(&dword_181A5C000, v33, v42, "%{public}s called with null keyInfo, no backtrace", buf, 0xCu);
      }

      goto LABEL_76;
    }

    if (v43)
    {
      *(_DWORD *)buf = 136446466;
      v56 = "nw_utilities_trust_ref_matches_public_key";
      BOOL v57 = 2082;
      v58 = (uint64_t)v41;
      _os_log_impl( &dword_181A5C000,  v33,  v42,  "%{public}s called with null keyInfo, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v41);
  }

      if (v15) {
        CFRelease(v15);
      }
      if (ArrayBySeparatingStrings) {
        CFRelease(ArrayBySeparatingStrings);
      }
    }
  }

  char v8 = 1LL;
LABEL_7:

  return v8;
}
}

    if (v41) {
      free(v41);
    }
LABEL_15:
    __int16 v24 = *(void *)(*(void *)(a1 + 32) + 96LL);
    if (v24)
    {
      v25 = (void *)nw_dictionary_copy(v24);
      v79[0] = v21;
      v79[1] = 3221225472LL;
      v79[2] = __nw_service_connector_cancel_block_invoke_104;
      v79[3] = &unk_189BC5058;
      v80 = *(id *)(a1 + 32);
      nw_dictionary_apply((uint64_t)v25, (uint64_t)v79);

      os_log_type_t v26 = *(void **)(*(void *)(a1 + 32) + 96LL);
      *(void *)(*(void *)(a1 + 32) + 96LL) = 0LL;

      goto LABEL_17;
    }

    __nwlog_obj();
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v46 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 136446466;
    v86 = "nw_service_connector_cancel_block_invoke_2";
    os_log_type_t v87 = 2114;
    v88 = v46;
    os_log_type_t v47 = (char *)_os_log_send_and_compose_impl();

    v84 = OS_LOG_TYPE_ERROR;
    os_log_type_t v83 = 0;
    if (__nwlog_fault(v47, &v84, &v83))
    {
      if (v84 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v48 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v49 = v84;
        if (os_log_type_enabled(v48, v84))
        {
          v50 = *(void *)(a1 + 32);
          *(_DWORD *)buf = 136446466;
          v86 = "nw_service_connector_cancel_block_invoke";
          os_log_type_t v87 = 2114;
          v88 = v50;
          _os_log_impl( &dword_181A5C000,  v48,  v49,  "%{public}s %{public}@ trying to apply NULL activeOutgoingRequests",  buf,  0x16u);
        }
      }

      else if (v83)
      {
        os_log_type_t v60 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v48 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v61 = v84;
        v62 = os_log_type_enabled(v48, v84);
        if (v60)
        {
          if (v62)
          {
            os_log_type_t v63 = *(void *)(a1 + 32);
            *(_DWORD *)buf = 136446722;
            v86 = "nw_service_connector_cancel_block_invoke";
            os_log_type_t v87 = 2114;
            v88 = v63;
            os_log_type_t v89 = 2082;
            BOOL v90 = v60;
            _os_log_impl( &dword_181A5C000,  v48,  v61,  "%{public}s %{public}@ trying to apply NULL activeOutgoingRequests, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v60);
          goto LABEL_81;
        }

        if (v62)
        {
          char v75 = *(void *)(a1 + 32);
          *(_DWORD *)buf = 136446466;
          v86 = "nw_service_connector_cancel_block_invoke";
          os_log_type_t v87 = 2114;
          v88 = v75;
          _os_log_impl( &dword_181A5C000,  v48,  v61,  "%{public}s %{public}@ trying to apply NULL activeOutgoingRequests, no backtrace",  buf,  0x16u);
        }
      }

      else
      {
        __nwlog_obj();
        v48 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v70 = v84;
        if (os_log_type_enabled(v48, v84))
        {
          os_log_type_t v71 = *(void *)(a1 + 32);
          *(_DWORD *)buf = 136446466;
          v86 = "nw_service_connector_cancel_block_invoke";
          os_log_type_t v87 = 2114;
          v88 = v71;
          _os_log_impl( &dword_181A5C000,  v48,  v70,  "%{public}s %{public}@ trying to apply NULL activeOutgoingRequests, backtrace limit exceeded",  buf,  0x16u);
        }
      }
    }

    free(v39);
    if (!v10) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }

  char v8 = strlen(a3);
  if (v8 < 0x101)
  {
    os_log_type_t v13 = v8;
    BOOL v14 = xpc_string_create(a3);
    os_log_type_t v15 = v14;
    if (v14)
    {
      int v16 = (dispatch_queue_s *)v5[4];
      block[0] = MEMORY[0x1895F87A8];
      block[1] = 3221225472LL;
      block[2] = __nw_service_connector_cancel_request_block_invoke;
      block[3] = &unk_189BC6E60;
      v48 = v14;
      id v49 = v5;
      v50 = v7;
      dispatch_async(v16, block);

LABEL_45:
      goto LABEL_46;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v20 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    BOOL v54 = "nw_service_connector_cancel_request";
    uint64_t v55 = 2048;
    v56 = v13;
    os_log_type_t v21 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v51 = 0;
    if (__nwlog_fault(v21, &type, &v51))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (os_log_s *)(id)gLogObj;
        uint64_t v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446466;
          BOOL v54 = "nw_service_connector_cancel_request";
          uint64_t v55 = 2048;
          v56 = v13;
          _os_log_impl(&dword_181A5C000, v22, v23, "%{public}s xpc_string_create(%zu) failed", buf, 0x16u);
        }
      }

      else if (v51)
      {
        v25 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (os_log_s *)(id)gLogObj;
        os_log_type_t v26 = type;
        id v27 = os_log_type_enabled(v22, type);
        if (v25)
        {
          if (v27)
          {
            *(_DWORD *)buf = 136446722;
            BOOL v54 = "nw_service_connector_cancel_request";
            uint64_t v55 = 2048;
            v56 = v13;
            BOOL v57 = 2082;
            v58[0] = v25;
            _os_log_impl( &dword_181A5C000,  v22,  v26,  "%{public}s xpc_string_create(%zu) failed, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v25);
          if (!v21) {
            goto LABEL_45;
          }
          goto LABEL_44;
        }

        if (v27)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v54 = "nw_service_connector_cancel_request";
          uint64_t v55 = 2048;
          v56 = v13;
          _os_log_impl(&dword_181A5C000, v22, v26, "%{public}s xpc_string_create(%zu) failed, no backtrace", buf, 0x16u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (os_log_s *)(id)gLogObj;
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446466;
          BOOL v54 = "nw_service_connector_cancel_request";
          uint64_t v55 = 2048;
          v56 = v13;
          _os_log_impl( &dword_181A5C000,  v22,  v28,  "%{public}s xpc_string_create(%zu) failed, backtrace limit exceeded",  buf,  0x16u);
        }
      }
    }

    if (!v21) {
      goto LABEL_45;
    }
LABEL_44:
    free(v21);
    goto LABEL_45;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v9 = (id)gLogObj;
  *(_DWORD *)buf = 136446722;
  BOOL v54 = "nw_service_connector_cancel_request";
  uint64_t v55 = 2082;
  v56 = (size_t)a3;
  BOOL v57 = 1024;
  LODWORD(v58[0]) = 256;
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  v51 = 0;
  if (__nwlog_fault(v10, &type, &v51))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v11 = (os_log_s *)(id)gLogObj;
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446722;
        BOOL v54 = "nw_service_connector_cancel_request";
        uint64_t v55 = 2082;
        v56 = (size_t)a3;
        BOOL v57 = 1024;
        LODWORD(v58[0]) = 256;
        _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s Service name %{public}s too long. Max allowed length is %d",  buf,  0x1Cu);
      }
    }

    else if (v51)
    {
      id v17 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v11 = (os_log_s *)(id)gLogObj;
      id v18 = type;
      char v19 = os_log_type_enabled(v11, type);
      if (v17)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446978;
          BOOL v54 = "nw_service_connector_cancel_request";
          uint64_t v55 = 2082;
          v56 = (size_t)a3;
          BOOL v57 = 1024;
          LODWORD(v58[0]) = 256;
          WORD2(v58[0]) = 2082;
          *(void *)((char *)v58 + 6) = v17;
          _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s Service name %{public}s too long. Max allowed length is %d, dumping backtrace:%{public}s",  buf,  0x26u);
        }

        free(v17);
        if (v10) {
          goto LABEL_36;
        }
        goto LABEL_46;
      }

      if (v19)
      {
        *(_DWORD *)buf = 136446722;
        BOOL v54 = "nw_service_connector_cancel_request";
        uint64_t v55 = 2082;
        v56 = (size_t)a3;
        BOOL v57 = 1024;
        LODWORD(v58[0]) = 256;
        _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s Service name %{public}s too long. Max allowed length is %d, no backtrace",  buf,  0x1Cu);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v11 = (os_log_s *)(id)gLogObj;
      __int16 v24 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446722;
        BOOL v54 = "nw_service_connector_cancel_request";
        uint64_t v55 = 2082;
        v56 = (size_t)a3;
        BOOL v57 = 1024;
        LODWORD(v58[0]) = 256;
        _os_log_impl( &dword_181A5C000,  v11,  v24,  "%{public}s Service name %{public}s too long. Max allowed length is %d, backtrace limit exceeded",  buf,  0x1Cu);
      }
    }
  }

    free(backtrace_string);
    if (!v4) {
      return;
    }
LABEL_25:
    free((void *)v4);
    return;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v42 = "nw_protocol_common_get_message_properties";
    uint64_t v4 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v39 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v25 = (os_log_s *)__nwlog_obj();
      os_log_type_t v26 = type;
      if (!os_log_type_enabled(v25, type)) {
        goto LABEL_104;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v42 = "nw_protocol_common_get_message_properties";
      id v27 = "%{public}s called with null other_protocol";
      goto LABEL_103;
    }

    if (!v39)
    {
      v25 = (os_log_s *)__nwlog_obj();
      os_log_type_t v26 = type;
      if (!os_log_type_enabled(v25, type)) {
        goto LABEL_104;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v42 = "nw_protocol_common_get_message_properties";
      id v27 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_103;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    v25 = (os_log_s *)__nwlog_obj();
    os_log_type_t v26 = type;
    dispatch_workloop_t v34 = os_log_type_enabled(v25, type);
    if (!backtrace_string)
    {
      if (!v34) {
        goto LABEL_104;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v42 = "nw_protocol_common_get_message_properties";
      id v27 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_103;
    }

    if (v34)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v42 = "nw_protocol_common_get_message_properties";
      char v43 = 2082;
      dispatch_workloop_t v44 = backtrace_string;
      BOOL v33 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_75;
    }

    goto LABEL_76;
  }

  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v42 = "nw_protocol_common_get_message_properties";
    uint64_t v4 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v39 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v25 = (os_log_s *)__nwlog_obj();
      os_log_type_t v26 = type;
      if (!os_log_type_enabled(v25, type)) {
        goto LABEL_104;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v42 = "nw_protocol_common_get_message_properties";
      id v27 = "%{public}s called with null message_properties";
      goto LABEL_103;
    }

    if (!v39)
    {
      v25 = (os_log_s *)__nwlog_obj();
      os_log_type_t v26 = type;
      if (!os_log_type_enabled(v25, type)) {
        goto LABEL_104;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v42 = "nw_protocol_common_get_message_properties";
      id v27 = "%{public}s called with null message_properties, backtrace limit exceeded";
      goto LABEL_103;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    v25 = (os_log_s *)__nwlog_obj();
    os_log_type_t v26 = type;
    v35 = os_log_type_enabled(v25, type);
    if (backtrace_string)
    {
      if (!v35) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446466;
      BOOL v42 = "nw_protocol_common_get_message_properties";
      char v43 = 2082;
      dispatch_workloop_t v44 = backtrace_string;
      BOOL v33 = "%{public}s called with null message_properties, dumping backtrace:%{public}s";
      goto LABEL_75;
    }

    if (!v35) {
      goto LABEL_104;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v42 = "nw_protocol_common_get_message_properties";
    id v27 = "%{public}s called with null message_properties, no backtrace";
LABEL_103:
    _os_log_impl(&dword_181A5C000, v25, v26, v27, buf, 0xCu);
LABEL_104:
    if (!v4) {
      return;
    }
    goto LABEL_25;
  }

  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    if (gLogDatapath)
    {
      id v36 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v42 = "nw_protocol_common_get_message_properties";
        _os_log_impl( &dword_181A5C000,  v36,  OS_LOG_TYPE_DEBUG,  "%{public}s get_message_properties requires an output handler",  buf,  0xCu);
      }
    }

    return;
  }

  char v5 = *(void **)(v4 + 40);
  if (v5 == &nw_protocol_ref_counted_handle)
  {
    id v6 = *(void *)(v4 + 88);
    if (v6) {
      *(void *)(v4 + 88) = v6 + 1;
    }
  }

  uint64_t v7 = *(void **)(a1 + 40);
  if (v7 == &nw_protocol_ref_counted_handle)
  {
    char v8 = *(void *)(a1 + 88);
    if (v8) {
      *(void *)(a1 + 88) = v8 + 1;
    }
  }

  BOOL v9 = *(void *)(v4 + 24);
  if (v9)
  {
    os_log_type_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 248);
    if (v10)
    {
      v10(v4, a1);
      goto LABEL_14;
    }
  }

  __nwlog_obj();
  char v19 = *(const char **)(v4 + 16);
  *(_DWORD *)buf = 136446722;
  BOOL v42 = "__nw_protocol_get_message_properties";
  if (!v19) {
    char v19 = "invalid";
  }
  char v43 = 2082;
  dispatch_workloop_t v44 = (void *)v19;
  v45 = 2048;
  os_log_type_t v46 = v4;
  char v20 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v39 = 0;
  if (__nwlog_fault(v20, &type, &v39))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v21 = (os_log_s *)__nwlog_obj();
      v22 = type;
      if (!os_log_type_enabled(v21, type)) {
        goto LABEL_95;
      }
      uint64_t v23 = *(const char **)(v4 + 16);
      if (!v23) {
        uint64_t v23 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      BOOL v42 = "__nw_protocol_get_message_properties";
      char v43 = 2082;
      dispatch_workloop_t v44 = (void *)v23;
      v45 = 2048;
      os_log_type_t v46 = v4;
      __int16 v24 = "%{public}s protocol %{public}s (%p) has invalid get_message_properties callback";
      goto LABEL_94;
    }

    if (!v39)
    {
      os_log_type_t v21 = (os_log_s *)__nwlog_obj();
      v22 = type;
      if (!os_log_type_enabled(v21, type)) {
        goto LABEL_95;
      }
      v37 = *(const char **)(v4 + 16);
      if (!v37) {
        v37 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      BOOL v42 = "__nw_protocol_get_message_properties";
      char v43 = 2082;
      dispatch_workloop_t v44 = (void *)v37;
      v45 = 2048;
      os_log_type_t v46 = v4;
      __int16 v24 = "%{public}s protocol %{public}s (%p) has invalid get_message_properties callback, backtrace limit exceeded";
      goto LABEL_94;
    }

    os_log_type_t v28 = (char *)__nw_create_backtrace_string();
    os_log_type_t v21 = (os_log_s *)__nwlog_obj();
    v22 = type;
    os_log_type_t v29 = os_log_type_enabled(v21, type);
    if (v28)
    {
      if (v29)
      {
        os_log_type_t v30 = *(const char **)(v4 + 16);
        if (!v30) {
          os_log_type_t v30 = "invalid";
        }
        *(_DWORD *)buf = 136446978;
        BOOL v42 = "__nw_protocol_get_message_properties";
        char v43 = 2082;
        dispatch_workloop_t v44 = (void *)v30;
        v45 = 2048;
        os_log_type_t v46 = v4;
        os_log_type_t v47 = 2082;
        v48 = v28;
        _os_log_impl( &dword_181A5C000,  v21,  v22,  "%{public}s protocol %{public}s (%p) has invalid get_message_properties callback, dumping backtrace:%{public}s",  buf,  0x2Au);
      }

      free(v28);
      goto LABEL_95;
    }

    if (v29)
    {
      v38 = *(const char **)(v4 + 16);
      if (!v38) {
        v38 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      BOOL v42 = "__nw_protocol_get_message_properties";
      char v43 = 2082;
      dispatch_workloop_t v44 = (void *)v38;
      v45 = 2048;
      os_log_type_t v46 = v4;
      __int16 v24 = "%{public}s protocol %{public}s (%p) has invalid get_message_properties callback, no backtrace";
LABEL_94:
      _os_log_impl(&dword_181A5C000, v21, v22, v24, buf, 0x20u);
    }
  }

          goto LABEL_77;
        }

        v45 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v27 = (os_log_s *)(id)gLogObj;
        os_log_type_t v28 = v68;
        os_log_type_t v46 = os_log_type_enabled(v27, v68);
        if (!v45)
        {
          if (v46)
          {
            v56 = *a1;
            *(_DWORD *)buf = 136447234;
            v70 = "nw_nat64_write_prefix_to_string";
            os_log_type_t v71 = 1024;
            *(_DWORD *)v72 = v56;
            *(_WORD *)&v72[4] = 1024;
            *(_DWORD *)&v72[6] = a3;
            *(_WORD *)&v72[10] = 2048;
            *(void *)&v72[12] = v14;
            __uint64_t v73 = 2082;
            unint64_t v74 = a2;
            os_log_type_t v30 = "%{public}s snprintf failed: prefix->length=%d, dst_length=%u strlen_dst=%zu, dst=%{public}s, no backtrace";
            goto LABEL_75;
          }

          goto LABEL_76;
        }

        if (v46)
        {
          os_log_type_t v47 = *a1;
          *(_DWORD *)buf = 136447490;
          v70 = "nw_nat64_write_prefix_to_string";
          os_log_type_t v71 = 1024;
          *(_DWORD *)v72 = v47;
          *(_WORD *)&v72[4] = 1024;
          *(_DWORD *)&v72[6] = a3;
          *(_WORD *)&v72[10] = 2048;
          *(void *)&v72[12] = v14;
          __uint64_t v73 = 2082;
          unint64_t v74 = a2;
          char v75 = 2082;
          __uint64_t v76 = v45;
          _os_log_impl( &dword_181A5C000,  v27,  v28,  "%{public}s snprintf failed: prefix->length=%d, dst_length=%u strlen_dst=%zu, dst=%{public}s, dumping bac ktrace:%{public}s",  buf,  0x36u);
        }

        free(v45);
      }

      if (v21) {
        free(v21);
      }
      goto LABEL_78;
    }

    __nwlog_obj();
    id v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    dispatch_workloop_t v44 = "nw_quic_is_above_failure_threshold";
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v41 = 0;
    if (__nwlog_fault(v15, &type, &v41))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v19 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          dispatch_workloop_t v44 = "nw_quic_is_above_failure_threshold";
          _os_log_impl(&dword_181A5C000, v16, v19, "%{public}s called with null application", buf, 0xCu);
        }

      goto LABEL_50;
    }

    if (!v35)
    {
      __nwlog_obj();
      BOOL v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      dispatch_workloop_t v34 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
        _os_log_impl( &dword_181A5C000,  v14,  v34,  "%{public}s called with null value_len, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_76;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    BOOL v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v29 = type;
    os_log_type_t v30 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
        _os_log_impl(&dword_181A5C000, v14, v29, "%{public}s called with null value_len, no backtrace", buf, 0xCu);
      }

      goto LABEL_76;
    }

    if (v30)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_txt_record_get_key";
      v38 = 2082;
      os_log_type_t v39 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v14,  v29,  "%{public}s called with null value_len, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_49;
  }

        port = nw_endpoint_get_port(v2->endpoint);
        if (port) {
          xpc_dictionary_set_int64(v6, "flow-host-port", port);
        }
LABEL_78:
        nw_parameters_get_effective_bundle_id(v2->parameters);
        multipath = nw_parameters_get_multipath(v2->parameters);
        xpc_dictionary_set_BOOL(v6, "flow-multipath-requested", multipath);
        os_log_type_t v39 = nw_parameters_copy_metadata(v2->parameters);
        if (v39) {
          xpc_dictionary_set_value(v6, "app-data", v39);
        }
        if ((_DWORD)flow_divert_aggregate_unit) {
          xpc_dictionary_set_uint64(v6, "aggregate_unit", flow_divert_aggregate_unit);
        }
        char v5 = ne_session_policy_copy_flow_divert_token();

        goto LABEL_83;
      }

      hostname = nw_endpoint_get_hostname(v2->endpoint);
      if (hostname)
      {
        xpc_dictionary_set_string(v6, "flow-host-name", hostname);
        goto LABEL_76;
      }

      __nwlog_obj();
      __int16 v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v53 = "nw_path_copy_flow_divert_token";
      v25 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      id v49 = 0;
      if (__nwlog_fault(v25, &type, &v49))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          os_log_type_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          id v27 = type;
          if (os_log_type_enabled(v26, type))
          {
            *(_DWORD *)buf = 136446210;
            v53 = "nw_path_copy_flow_divert_token";
            _os_log_impl(&dword_181A5C000, v26, v27, "%{public}s nw_endpoint_get_hostname failed", buf, 0xCu);
          }
        }

        else if (v49)
        {
          v31 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v32 = type;
          BOOL v33 = os_log_type_enabled(v26, type);
          if (v31)
          {
            if (v33)
            {
              *(_DWORD *)buf = 136446466;
              v53 = "nw_path_copy_flow_divert_token";
              BOOL v54 = 2082;
              uint64_t v55 = v31;
              _os_log_impl( &dword_181A5C000,  v26,  v32,  "%{public}s nw_endpoint_get_hostname failed, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v31);
            goto LABEL_74;
          }

          if (v33)
          {
            *(_DWORD *)buf = 136446210;
            v53 = "nw_path_copy_flow_divert_token";
            _os_log_impl( &dword_181A5C000,  v26,  v32,  "%{public}s nw_endpoint_get_hostname failed, no backtrace",  buf,  0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          os_log_type_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v35 = type;
          if (os_log_type_enabled(v26, type))
          {
            *(_DWORD *)buf = 136446210;
            v53 = "nw_path_copy_flow_divert_token";
            _os_log_impl( &dword_181A5C000,  v26,  v35,  "%{public}s nw_endpoint_get_hostname failed, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }
}

  os_log_type_t v39 = *(void *)(v3 + 312);
  v40 = *(void **)(v39 + 8 * v2);
  if (v40)
  {
    *os_log_type_t v13 = *v40;
  }

  else
  {
    os_log_type_t v41 = *(void *)(v3 + 328);
    *os_log_type_t v13 = v41;
    *(void *)(v3 + 328) = v13;
    *(void *)(v39 + 8 * v2) = v3 + 328;
    if (!v41) {
      goto LABEL_85;
    }
    BOOL v42 = *(void *)(v41 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v42 >= v7) {
        v42 %= v7;
      }
    }

    else
    {
      v42 &= v7 - 1;
    }

    v40 = (void *)(*(void *)(v3 + 312) + 8 * v42);
  }

  char *v40 = v13;
LABEL_85:
  ++*(void *)(v3 + 336);
  id v6 = *(void *)(v3 + 72);
LABEL_86:
  *(void *)buf = v6;
  nghttp2_submit_ping();
  ++*(void *)(v3 + 72);
  nw_http2_session_send(v3);
}

      free(backtrace_string);
      goto LABEL_99;
    }

    if (!v42) {
      goto LABEL_99;
    }
    *(_DWORD *)buf = 136446210;
    v51 = "nw_protocol_http2_replace_input_handler";
    dispatch_workloop_t v34 = "%{public}s called with null new_input_protocol, no backtrace";
LABEL_98:
    _os_log_impl(&dword_181A5C000, v32, v33, v34, buf, 0xCu);
LABEL_99:
    if (v31) {
      free(v31);
    }
    return 0LL;
  }

  uint64_t v7 = *(void *)(a2 + 56);
  if (!v7)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v23 = gconnectionLogObj;
    uint64_t result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    __int16 v24 = *(_DWORD *)(v4 + 368);
    *(_DWORD *)buf = 136446978;
    v51 = "nw_protocol_http2_replace_input_handler";
    os_log_type_t v52 = 2082;
    v53 = (char *)(v4 + 390);
    BOOL v54 = 2080;
    uint64_t v55 = " ";
    v56 = 1024;
    BOOL v57 = v24;
    v25 = "%{public}s %{public}s%s<i%u> Failed to find old node";
LABEL_29:
    os_log_type_t v26 = (os_log_s *)v23;
    id v27 = 38;
LABEL_36:
    _os_log_impl(&dword_181A5C000, v26, OS_LOG_TYPE_ERROR, v25, buf, v27);
    return 0LL;
  }

  char v8 = *(void *)(v7 + 32);
  v44[0] = MEMORY[0x1895F87A8];
  v44[1] = 0x40000000LL;
  v45 = ___ZL39nw_protocol_http2_replace_input_handlerP11nw_protocolS0_S0__block_invoke;
  os_log_type_t v46 = &__block_descriptor_tmp_59_83201;
  os_log_type_t v47 = a3;
  BOOL v9 = *(void *)(v8 + 16);
  do
  {
    if (!v9) {
      break;
    }
    os_log_type_t v10 = *(void *)(v9 + 16);
    os_log_type_t v11 = ((uint64_t (*)(void *))v45)(v44);
    BOOL v9 = v10;
  }

  while ((v11 & 1) != 0);
  nw_http2_remove_from_protocol_table(v4, a2);
  os_log_type_t v12 = nw_http2_add_to_protocol_table(v4, a3, v8);
  if (v12)
  {
    *(void *)(a3 + 56) = v12;
    nw_protocol_set_output_handler(a3, a1);
    if (*(void *)(a1 + 48) == a2)
    {
      nw_protocol_set_input_handler(a1, a3);
      *(_OWORD *)uint64_t v4 = *(_OWORD *)a3;
    }

    os_log_type_t v13 = *(_DWORD *)(v8 + 176);
    if (v13 != -1)
    {
      stream_node_from_id = nw_http2_get_stream_node_from_id(v4, v13);
      if (stream_node_from_id) {
        *(void *)(stream_node_from_id + 32) = a3;
      }
    }

    uint64_t result = 1LL;
    if (((*(unsigned __int16 *)(v8 + 188) | (*(unsigned __int8 *)(v8 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      int v16 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        id v18 = v8 + 191;
        os_log_type_t v21 = v8 + 176;
        char v19 = *(_DWORD *)(v8 + 176);
        char v20 = *(_DWORD *)(v21 + 4);
        v22 = nw_hash_table_count(*(void *)(v4 + 152), v17);
        *(_DWORD *)buf = 136447490;
        v51 = "nw_protocol_http2_replace_input_handler";
        os_log_type_t v52 = 2082;
        v53 = (char *)v18;
        BOOL v54 = 2080;
        uint64_t v55 = " ";
        v56 = 1024;
        BOOL v57 = v20;
        v58 = 1024;
        v59 = v19;
        os_log_type_t v60 = 1024;
        BOOL v61 = v22;
        _os_log_impl( &dword_181A5C000,  v16,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> replaced input handler, have %u input handlers",  buf,  0x32u);
      }

      return 1LL;
    }

    return result;
  }

  if (!v8)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v23 = gconnectionLogObj;
    uint64_t result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    char v43 = *(_DWORD *)(v4 + 368);
    *(_DWORD *)buf = 136446978;
    v51 = "nw_protocol_http2_replace_input_handler";
    os_log_type_t v52 = 2082;
    v53 = (char *)(v4 + 390);
    BOOL v54 = 2080;
    uint64_t v55 = " ";
    v56 = 1024;
    BOOL v57 = v43;
    v25 = "%{public}s %{public}s%s<i%u> could not add protocol to protocol based hash table, cannot replace input handler";
    goto LABEL_29;
  }

  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
  }
  os_log_type_t v28 = gconnectionLogObj;
  uint64_t result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR);
  if (result)
  {
    os_log_type_t v30 = *(_DWORD *)(v8 + 176);
    os_log_type_t v29 = *(_DWORD *)(v8 + 180);
    *(_DWORD *)buf = 136447234;
    v51 = "nw_protocol_http2_replace_input_handler";
    os_log_type_t v52 = 2082;
    v53 = (char *)(v8 + 191);
    BOOL v54 = 2080;
    uint64_t v55 = " ";
    v56 = 1024;
    BOOL v57 = v29;
    v58 = 1024;
    v59 = v30;
    v25 = "%{public}s %{public}s%s<i%u:s%d> could not add protocol to protocol based hash table, cannot replace input handler";
    os_log_type_t v26 = (os_log_s *)v28;
    id v27 = 44;
    goto LABEL_36;
  }

  return result;
}

  if (v41) {
    free(v41);
  }
LABEL_78:
  if ((*(__int16 *)(a1 + 388) & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    v53 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      BOOL v54 = *(_DWORD *)(a1 + 368);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_process_input";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = a1 + 390;
      *(_WORD *)&buf[22] = 2080;
      v69 = " ";
      LOWORD(v70) = 1024;
      *(_DWORD *)((char *)&v70 + 2) = v54;
      _os_log_impl( &dword_181A5C000,  v53,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> about to allow http2 to send pending data",  buf,  0x26u);
    }
  }

          if (v24) {
            free(v24);
          }
          goto LABEL_78;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446210;
        v96 = "nw_protocol_test_access_options";
        char v20 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        v93 = 0;
        if (__nwlog_fault(v20, &type, &v93))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v21 = (os_log_s *)gLogObj;
            v22 = type;
            if (os_log_type_enabled((os_log_t)gLogObj, type))
            {
              *(_DWORD *)buf = 136446210;
              v96 = "nw_protocol_test_access_options";
              uint64_t v23 = "%{public}s Failed to copy protocol options";
LABEL_69:
              _os_log_impl(&dword_181A5C000, v21, v22, v23, buf, 0xCu);
            }
          }

          else if (v93)
          {
            v31 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v21 = (os_log_s *)gLogObj;
            v22 = type;
            os_log_type_t v32 = os_log_type_enabled((os_log_t)gLogObj, type);
            if (v31)
            {
              if (v32)
              {
                *(_DWORD *)buf = 136446466;
                v96 = "nw_protocol_test_access_options";
                os_log_type_t v97 = 2082;
                BOOL v98 = (nw_protocol *)v31;
                _os_log_impl( &dword_181A5C000,  v21,  v22,  "%{public}s Failed to copy protocol options, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v31);
              goto LABEL_70;
            }

            if (v32)
            {
              *(_DWORD *)buf = 136446210;
              v96 = "nw_protocol_test_access_options";
              uint64_t v23 = "%{public}s Failed to copy protocol options, no backtrace";
              goto LABEL_69;
            }
          }

          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v21 = (os_log_s *)gLogObj;
            v22 = type;
            if (os_log_type_enabled((os_log_t)gLogObj, type))
            {
              *(_DWORD *)buf = 136446210;
              v96 = "nw_protocol_test_access_options";
              uint64_t v23 = "%{public}s Failed to copy protocol options, backtrace limit exceeded";
              goto LABEL_69;
            }
          }
        }

    if (v43) {
      free(v43);
    }
    char v19 = *(void *)(a1 + 48);
    goto LABEL_26;
  }

  if (!v9 || (*(_BYTE *)(v9 + 136) & 1) == 0)
  {
    os_log_type_t v29 = (os_log_s *)__nwlog_obj();
    os_log_type_t v30 = os_log_type_enabled(v29, OS_LOG_TYPE_INFO);
    BOOL v9 = *(void *)(a1 + 48);
    if (v30)
    {
      v31 = (const char *)(v9 + 137);
      if (!v9) {
        v31 = "";
      }
      *(_DWORD *)buf = 136446978;
      BOOL v57 = "nw_protocol_ipv4_frame_output_finalizer_block_invoke";
      v58 = 2082;
      v59 = (void *)v31;
      os_log_type_t v32 = " ";
      if (!v9) {
        os_log_type_t v32 = "";
      }
      os_log_type_t v60 = 2080;
      BOOL v61 = v32;
      v62 = 2048;
      os_log_type_t v63 = v9;
      _os_log_impl( &dword_181A5C000,  v29,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s%p Fragment frame is no longer valid",  buf,  0x2Au);
      BOOL v9 = *(void *)(a1 + 48);
    }
  }

  *(void *)(v9 + 48) = 0LL;
  return 1LL;
}

  if (v36) {
    free(v36);
  }
}

LABEL_82:
  }

            goto LABEL_83;
          }

          if (!LOBYTE(__upper_bound[0]))
          {
            __nwlog_obj();
            uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v37 = type[0];
            if (os_log_type_enabled(v23, type[0]))
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_activity_make_reporting_decision";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = "Unknown reporting strategy";
              _os_log_impl( &dword_181A5C000,  v23,  v37,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, backtrace limit exceeded",  buf,  0x16u);
            }

            goto LABEL_82;
          }

          dispatch_workloop_t v34 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v35 = type[0];
          id v36 = os_log_type_enabled(v23, type[0]);
          if (!v34)
          {
            if (v36)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_activity_make_reporting_decision";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = "Unknown reporting strategy";
              _os_log_impl( &dword_181A5C000,  v23,  v35,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, no backtrace",  buf,  0x16u);
            }

            goto LABEL_82;
          }

          if (v36)
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_activity_make_reporting_decision";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = "Unknown reporting strategy";
            *(_WORD *)&buf[22] = 2082;
            os_log_type_t v64 = v34;
            _os_log_impl( &dword_181A5C000,  v23,  v35,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v34);
LABEL_83:
          if (!v22) {
            goto LABEL_57;
          }
LABEL_84:
          free(v22);
          goto LABEL_57;
        }

        if (__nwlog_activity_log::onceToken != -1) {
          dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
        }
        char v20 = (os_log_s *)(id)gactivityLogObj;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138543362;
          *(void *)&uint8_t buf[4] = v11;
          _os_log_impl( &dword_181A5C000,  v20,  OS_LOG_TYPE_DEBUG,  "Suppressing reports for activity %{public}@",  buf,  0xCu);
        }

        is_selected_for_reporting = 0;
      }

        goto LABEL_83;
      }

      if (!v58)
      {
        __nwlog_obj();
        os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v47 = v59;
        if (os_log_type_enabled(v30, v59))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v61 = "nw_parameters_internal_iterate_protocol_stack";
          _os_log_impl( &dword_181A5C000,  v30,  v47,  "%{public}s called with null iterator, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_82;
      }

      v38 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v41 = v59;
      BOOL v42 = os_log_type_enabled(v30, v59);
      if (!v38)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v61 = "nw_parameters_internal_iterate_protocol_stack";
          _os_log_impl(&dword_181A5C000, v30, v41, "%{public}s called with null iterator, no backtrace", buf, 0xCu);
        }

        goto LABEL_82;
      }

      if (v42)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v61 = "nw_parameters_internal_iterate_protocol_stack";
        v62 = 2082;
        os_log_type_t v63 = v38;
        _os_log_impl( &dword_181A5C000,  v30,  v41,  "%{public}s called with null iterator, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_62;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v61 = "nw_parameters_internal_iterate_protocol_stack";
    os_log_type_t v29 = (char *)_os_log_send_and_compose_impl();

    v59 = OS_LOG_TYPE_ERROR;
    v58 = 0;
    if (__nwlog_fault(v29, &v59, &v58))
    {
      if (v59 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v31 = v59;
        if (os_log_type_enabled(v30, v59))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v61 = "nw_parameters_internal_iterate_protocol_stack";
          _os_log_impl(&dword_181A5C000, v30, v31, "%{public}s called with null parameters", buf, 0xCu);
        }

        goto LABEL_82;
      }

      if (!v58)
      {
        __nwlog_obj();
        os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v46 = v59;
        if (os_log_type_enabled(v30, v59))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v61 = "nw_parameters_internal_iterate_protocol_stack";
          _os_log_impl( &dword_181A5C000,  v30,  v46,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_82;
      }

      v38 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v39 = v59;
      v40 = os_log_type_enabled(v30, v59);
      if (!v38)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v61 = "nw_parameters_internal_iterate_protocol_stack";
          _os_log_impl(&dword_181A5C000, v30, v39, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }

        goto LABEL_82;
      }

      if (v40)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v61 = "nw_parameters_internal_iterate_protocol_stack";
        v62 = 2082;
        os_log_type_t v63 = v38;
        _os_log_impl( &dword_181A5C000,  v30,  v39,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
      }

  if (v20) {
    free(v20);
  }
  id v3 = 0LL;
  id v18 = 0LL;
LABEL_114:

  return v18;
}
    }
  }

    uint64_t v7 = 0LL;
    id v6 = v36;
  }

          if (v34) {
            free(v34);
          }
          *(_DWORD *)(v3 + 40) = 0;
LABEL_29:
          if ((*(_BYTE *)(v3 + 48) & 2) != 0) {
            os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 52));
          }
          return;
        }

        __nwlog_obj(a1, a2);
        *(_DWORD *)buf = 136446210;
        v58 = "nw_hash_table_release_all_objects";
        id v27 = (void *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        uint64_t v55 = 0;
        os_log_type_t v28 = __nwlog_fault(v27, &type, &v55);
        if ((_DWORD)v28)
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            os_log_type_t v30 = (os_log_s *)__nwlog_obj(v28, v29);
            v31 = type;
            if (!os_log_type_enabled(v30, type)) {
              goto LABEL_77;
            }
            *(_DWORD *)buf = 136446210;
            v58 = "nw_hash_table_release_all_objects";
            os_log_type_t v32 = "%{public}s called with invalid hash table";
            goto LABEL_76;
          }

          if (!v55)
          {
            os_log_type_t v30 = (os_log_s *)__nwlog_obj(v28, v29);
            v31 = type;
            if (!os_log_type_enabled(v30, type)) {
              goto LABEL_77;
            }
            *(_DWORD *)buf = 136446210;
            v58 = "nw_hash_table_release_all_objects";
            os_log_type_t v32 = "%{public}s called with invalid hash table, backtrace limit exceeded";
            goto LABEL_76;
          }

          dispatch_workloop_t v44 = (char *)__nw_create_backtrace_string();
          os_log_type_t v30 = (os_log_s *)__nwlog_obj(v44, v45);
          v31 = type;
          os_log_type_t v46 = os_log_type_enabled(v30, type);
          if (v44)
          {
            if (v46)
            {
              *(_DWORD *)buf = 136446466;
              v58 = "nw_hash_table_release_all_objects";
              v59 = 2082;
              *(void *)os_log_type_t v60 = v44;
              _os_log_impl( &dword_181A5C000,  v30,  v31,  "%{public}s called with invalid hash table, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v44);
            goto LABEL_77;
          }

          if (v46)
          {
            *(_DWORD *)buf = 136446210;
            v58 = "nw_hash_table_release_all_objects";
            os_log_type_t v32 = "%{public}s called with invalid hash table, no backtrace";
LABEL_76:
            _os_log_impl(&dword_181A5C000, v30, v31, v32, buf, 0xCu);
          }
        }

              os_log_type_t v32 = *(_DWORD *)(a2 + 52);
              if (v32)
              {
                BOOL v33 = (v32 - (*(_DWORD *)(a2 + 56) + *(_DWORD *)(a2 + 60)));
                dispatch_workloop_t v34 = *(void **)(v17 + 64);
                if ((v18 & 4) != 0)
                {
LABEL_199:
                  if (v34)
                  {
                    v85 = v34[17] + v33;
                    ++v34[16];
                    v34[17] = v85;
                  }

                  goto LABEL_31;
                }
              }

              else
              {
                BOOL v33 = 0LL;
                dispatch_workloop_t v34 = *(void **)(v17 + 64);
                if ((v18 & 4) != 0) {
                  goto LABEL_199;
                }
              }

      free(v42);
      if (!v18) {
        goto LABEL_140;
      }
LABEL_138:
      v70 = (char *)v18;
LABEL_139:
      free(v70);
      goto LABEL_140;
    }

    xpc_object_t value = xpc_int64_get_value(v16);
    v35 = value;
    if (value)
    {
      if (!(value >> 31))
      {
        __nwlog_obj();
        id v36 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446466;
        os_log_type_t v97 = "networkd_privileged_get_kernel_socket_internal";
        BOOL v98 = 1024;
        *(_DWORD *)v99 = v35;
        v37 = (const char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        v94 = 0;
        if (__nwlog_fault(v37, &type, &v94))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v39 = type;
            if (os_log_type_enabled(v38, type))
            {
              *(_DWORD *)buf = 136446466;
              os_log_type_t v97 = "networkd_privileged_get_kernel_socket_internal";
              BOOL v98 = 1024;
              *(_DWORD *)v99 = v35;
              _os_log_impl( &dword_181A5C000,  v38,  v39,  "%{public}s received failure result code %{darwin.errno}d",  buf,  0x12u);
            }
          }

          else if (v94)
          {
            v72 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            __uint64_t v73 = type;
            unint64_t v74 = os_log_type_enabled(v38, type);
            if (v72)
            {
              if (v74)
              {
                *(_DWORD *)buf = 136446722;
                os_log_type_t v97 = "networkd_privileged_get_kernel_socket_internal";
                BOOL v98 = 1024;
                *(_DWORD *)v99 = v35;
                *(_WORD *)&v99[4] = 2082;
                *(void *)&v99[6] = v72;
                _os_log_impl( &dword_181A5C000,  v38,  v73,  "%{public}s received failure result code %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
              }

              free(v72);
              if (!v37) {
                goto LABEL_140;
              }
LABEL_183:
              v70 = (char *)v37;
              goto LABEL_139;
            }

            if (v74)
            {
              *(_DWORD *)buf = 136446466;
              os_log_type_t v97 = "networkd_privileged_get_kernel_socket_internal";
              BOOL v98 = 1024;
              *(_DWORD *)v99 = v35;
              _os_log_impl( &dword_181A5C000,  v38,  v73,  "%{public}s received failure result code %{darwin.errno}d, no backtrace",  buf,  0x12u);
            }
          }

          else
          {
            __nwlog_obj();
            v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v80 = type;
            if (os_log_type_enabled(v38, type))
            {
              *(_DWORD *)buf = 136446466;
              os_log_type_t v97 = "networkd_privileged_get_kernel_socket_internal";
              BOOL v98 = 1024;
              *(_DWORD *)v99 = v35;
              _os_log_impl( &dword_181A5C000,  v38,  v80,  "%{public}s received failure result code %{darwin.errno}d, backtrace limit exceeded",  buf,  0x12u);
            }
          }
        }

      free(v17);
      goto LABEL_83;
    }

    __nwlog_obj();
    os_log_type_t v89 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v105 = "networkd_privileged_set_settings";
    BOOL v90 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v102 = 0;
    if (__nwlog_fault(v90, &type, &v102))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v91 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v92 = type;
        if (os_log_type_enabled(v91, type))
        {
          *(_DWORD *)buf = 136446210;
          char v105 = "networkd_privileged_set_settings";
          _os_log_impl(&dword_181A5C000, v91, v92, "%{public}s xpc_dictionary_create failed", buf, 0xCu);
        }
      }

      else if (v102)
      {
        v96 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v91 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v97 = type;
        BOOL v98 = os_log_type_enabled(v91, type);
        if (v96)
        {
          if (v98)
          {
            *(_DWORD *)buf = 136446466;
            char v105 = "networkd_privileged_set_settings";
            v106 = 2082;
            *(void *)v107 = v96;
            _os_log_impl( &dword_181A5C000,  v91,  v97,  "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v96);
          goto LABEL_226;
        }

        if (v98)
        {
          *(_DWORD *)buf = 136446210;
          char v105 = "networkd_privileged_set_settings";
          _os_log_impl(&dword_181A5C000, v91, v97, "%{public}s xpc_dictionary_create failed, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v91 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v100 = type;
        if (os_log_type_enabled(v91, type))
        {
          *(_DWORD *)buf = 136446210;
          char v105 = "networkd_privileged_set_settings";
          _os_log_impl( &dword_181A5C000,  v91,  v100,  "%{public}s xpc_dictionary_create failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

            if (v53) {
              free(v53);
            }
            goto LABEL_84;
          }

          if (!LOBYTE(v109[0]))
          {
            v85 = (os_log_s *)__nwlog_obj();
            v86 = type[0];
            if (os_log_type_enabled(v85, type[0]))
            {
              *(_DWORD *)v122 = 136446210;
              *(void *)&v122[4] = "nw_http_redirect_copy_metadata";
              os_log_type_t v87 = "%{public}s called with null endpoint, backtrace limit exceeded";
              goto LABEL_208;
            }

            goto LABEL_210;
          }

          BOOL v90 = (char *)__nw_create_backtrace_string();
          os_log_type_t v91 = (os_log_s *)__nwlog_obj();
          v86 = type[0];
          log = v91;
          v92 = os_log_type_enabled(v91, type[0]);
          if (v90)
          {
            if (v92)
            {
              *(_DWORD *)v122 = 136446466;
              *(void *)&v122[4] = "nw_http_redirect_copy_metadata";
              *(_WORD *)&v122[12] = 2082;
              *(void *)&v122[14] = v90;
              v93 = "%{public}s called with null endpoint, dumping backtrace:%{public}s";
LABEL_200:
              _os_log_impl(&dword_181A5C000, log, v86, v93, v122, 0x16u);
            }

    if (v33) {
      free(v33);
    }

    return 0LL;
  }

  v70 = 0LL;
  pthread_threadid_np(0LL, &v70);
  if (*(_DWORD *)(v3 + 120) == 4)
  {
    id v36 = (unint64_t *)(v3 + 112);
    v37 = v70;
    while (1)
    {
      v38 = __ldaxr(v36);
      if (v38) {
        break;
      }
      if (!__stlxr(v37, v36))
      {
        os_log_type_t v39 = 1;
        goto LABEL_45;
      }
    }

    os_log_type_t v39 = 0;
    __clrex();
LABEL_45:
    if ((v39 & 1) == 0)
    {
      __nwlog_obj();
      dispatch_workloop_t v44 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446722;
      __uint64_t v73 = "nw_context_run_queued_blocks_inline";
      unint64_t v74 = 2048;
      char v75 = v70;
      __uint64_t v76 = 2048;
      v77 = v38;
      v45 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v69 = 0;
      if (__nwlog_fault(v45, &type, &v69))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          os_log_type_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v47 = type;
          if (os_log_type_enabled(v46, type))
          {
            *(_DWORD *)buf = 136446722;
            __uint64_t v73 = "nw_context_run_queued_blocks_inline";
            unint64_t v74 = 2048;
            char v75 = v70;
            __uint64_t v76 = 2048;
            v77 = v38;
            _os_log_impl( &dword_181A5C000,  v46,  v47,  "%{public}s Entering call, current TID=%llu, inline TID is already set to %llu",  buf,  0x20u);
          }
        }

        else if (v69)
        {
          os_log_type_t v60 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          BOOL v61 = type;
          v62 = os_log_type_enabled(v46, type);
          if (v60)
          {
            if (v62)
            {
              *(_DWORD *)buf = 136446978;
              __uint64_t v73 = "nw_context_run_queued_blocks_inline";
              unint64_t v74 = 2048;
              char v75 = v70;
              __uint64_t v76 = 2048;
              v77 = v38;
              unint64_t v78 = 2082;
              char v79 = v60;
              _os_log_impl( &dword_181A5C000,  v46,  v61,  "%{public}s Entering call, current TID=%llu, inline TID is already set to %llu, dumping backtrace:%{public}s",  buf,  0x2Au);
            }

            free(v60);
            goto LABEL_105;
          }

          if (v62)
          {
            *(_DWORD *)buf = 136446722;
            __uint64_t v73 = "nw_context_run_queued_blocks_inline";
            unint64_t v74 = 2048;
            char v75 = v70;
            __uint64_t v76 = 2048;
            v77 = v38;
            _os_log_impl( &dword_181A5C000,  v46,  v61,  "%{public}s Entering call, current TID=%llu, inline TID is already set to %llu, no backtrace",  buf,  0x20u);
          }
        }

        else
        {
          __nwlog_obj();
          os_log_type_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          BOOL v66 = type;
          if (os_log_type_enabled(v46, type))
          {
            *(_DWORD *)buf = 136446722;
            __uint64_t v73 = "nw_context_run_queued_blocks_inline";
            unint64_t v74 = 2048;
            char v75 = v70;
            __uint64_t v76 = 2048;
            v77 = v38;
            _os_log_impl( &dword_181A5C000,  v46,  v66,  "%{public}s Entering call, current TID=%llu, inline TID is already set to %llu, backtrace limit exceeded",  buf,  0x20u);
          }
        }
      }

    if (v37) {
      free(v37);
    }
LABEL_78:

LABEL_90:
    v22 = 0LL;
    goto LABEL_33;
  }

  v57.receiver = self;
  v57.super_class = (Class)&OBJC_CLASS___NWTCPConnection;
  os_log_type_t v11 = -[NWTCPConnection init](&v57, sel_init);
  if (!v11)
  {
    __nwlog_obj();
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v61 = "-[NWTCPConnection initWithEndpoint:parameters:delegate:]";
    os_log_type_t v41 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v58 = 0;
    if (__nwlog_fault(v41, &type, &v58))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v42 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v43 = type;
        if (os_log_type_enabled(v42, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v61 = "-[NWTCPConnection initWithEndpoint:parameters:delegate:]";
          _os_log_impl(&dword_181A5C000, v42, v43, "%{public}s [super init] failed", buf, 0xCu);
        }
      }

      else if (v58)
      {
        v50 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v42 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v51 = type;
        os_log_type_t v52 = os_log_type_enabled(v42, type);
        if (v50)
        {
          if (v52)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v61 = "-[NWTCPConnection initWithEndpoint:parameters:delegate:]";
            v62 = 2082;
            os_log_type_t v63 = v50;
            _os_log_impl( &dword_181A5C000,  v42,  v51,  "%{public}s [super init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v50);
          goto LABEL_88;
        }

        if (v52)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v61 = "-[NWTCPConnection initWithEndpoint:parameters:delegate:]";
          _os_log_impl(&dword_181A5C000, v42, v51, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v42 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v55 = type;
        if (os_log_type_enabled(v42, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v61 = "-[NWTCPConnection initWithEndpoint:parameters:delegate:]";
          _os_log_impl( &dword_181A5C000,  v42,  v55,  "%{public}s [super init] failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

  if (v12) {
    free(v12);
  }
}

        goto LABEL_83;
      }

      if (!v40)
      {
        __nwlog_obj();
        v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v39 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          char v43 = "nw_framer_protocol_copy_info";
          _os_log_impl( &dword_181A5C000,  v25,  v39,  "%{public}s called with null framer->parent_definition, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_82;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v35 = type;
      id v36 = os_log_type_enabled(v25, type);
      if (!backtrace_string)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446210;
          char v43 = "nw_framer_protocol_copy_info";
          _os_log_impl( &dword_181A5C000,  v25,  v35,  "%{public}s called with null framer->parent_definition, no backtrace",  buf,  0xCu);
        }

        goto LABEL_82;
      }

      if (v36)
      {
        *(_DWORD *)buf = 136446466;
        char v43 = "nw_framer_protocol_copy_info";
        dispatch_workloop_t v44 = 2082;
        v45 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v25,  v35,  "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s",  buf,  0x16u);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      char v43 = "nw_framer_protocol_copy_info";
      __int16 v24 = (void *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v40 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          char v43 = "nw_framer_protocol_copy_info";
          _os_log_impl(&dword_181A5C000, v25, v26, "%{public}s called with null framer", buf, 0xCu);
        }

        goto LABEL_82;
      }

      if (!v40)
      {
        __nwlog_obj();
        v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v38 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          char v43 = "nw_framer_protocol_copy_info";
          _os_log_impl( &dword_181A5C000,  v25,  v38,  "%{public}s called with null framer, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_82;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v33 = type;
      dispatch_workloop_t v34 = os_log_type_enabled(v25, type);
      if (!backtrace_string)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446210;
          char v43 = "nw_framer_protocol_copy_info";
          _os_log_impl(&dword_181A5C000, v25, v33, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }

        goto LABEL_82;
      }

      if (v34)
      {
        *(_DWORD *)buf = 136446466;
        char v43 = "nw_framer_protocol_copy_info";
        dispatch_workloop_t v44 = 2082;
        v45 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v25,  v33,  "%{public}s called with null framer, dumping backtrace:%{public}s",  buf,  0x16u);
      }
    }

    free(backtrace_string);
    goto LABEL_83;
  }

  __nwlog_obj();
  char v19 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v43 = "nw_framer_protocol_copy_info";
  char v20 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  v40 = 0;
  if (__nwlog_fault(v20, &type, &v40))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        char v43 = "nw_framer_protocol_copy_info";
        _os_log_impl(&dword_181A5C000, v21, v22, "%{public}s called with null protocol", buf, 0xCu);
      }
    }

    else if (v40)
    {
      os_log_type_t v29 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v30 = type;
      v31 = os_log_type_enabled(v21, type);
      if (v29)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          char v43 = "nw_framer_protocol_copy_info";
          dispatch_workloop_t v44 = 2082;
          v45 = v29;
          _os_log_impl( &dword_181A5C000,  v21,  v30,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v29);
        goto LABEL_74;
      }

      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        char v43 = "nw_framer_protocol_copy_info";
        _os_log_impl(&dword_181A5C000, v21, v30, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v37 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        char v43 = "nw_framer_protocol_copy_info";
        _os_log_impl( &dword_181A5C000,  v21,  v37,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

          goto LABEL_83;
        }

        if (!(_BYTE)v163)
        {
          __nwlog_obj();
          v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v86 = v170[0];
          if (os_log_type_enabled(v37, (os_log_type_t)v170[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
            _os_log_impl( &dword_181A5C000,  v37,  v86,  "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_82;
        }

        os_log_type_t v71 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        __uint64_t v76 = v170[0];
        v77 = os_log_type_enabled(v37, (os_log_type_t)v170[0]);
        if (!v71)
        {
          if (v77)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
            _os_log_impl( &dword_181A5C000,  v37,  v76,  "%{public}s called with null instance->parent_definition->extended_state, no backtrace",  buf,  0xCu);
          }

          goto LABEL_82;
        }

        if (v77)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v71;
          _os_log_impl( &dword_181A5C000,  v37,  v76,  "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s",  buf,  0x16u);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v60 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
        id v36 = (char *)_os_log_send_and_compose_impl();

        v170[0] = 16;
        LOBYTE(v163) = 0;
        if (v170[0] == 17)
        {
          __nwlog_obj();
          v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          BOOL v61 = v170[0];
          if (os_log_type_enabled(v37, (os_log_type_t)v170[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
            _os_log_impl( &dword_181A5C000,  v37,  v61,  "%{public}s called with null instance->parent_definition",  buf,  0xCu);
          }

          goto LABEL_82;
        }

        if (!(_BYTE)v163)
        {
          __nwlog_obj();
          v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v85 = v170[0];
          if (os_log_type_enabled(v37, (os_log_type_t)v170[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
            _os_log_impl( &dword_181A5C000,  v37,  v85,  "%{public}s called with null instance->parent_definition, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_82;
        }

        os_log_type_t v71 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        unint64_t v74 = v170[0];
        char v75 = os_log_type_enabled(v37, (os_log_type_t)v170[0]);
        if (!v71)
        {
          if (v75)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
            _os_log_impl( &dword_181A5C000,  v37,  v74,  "%{public}s called with null instance->parent_definition, no backtrace",  buf,  0xCu);
          }

          goto LABEL_82;
        }

        if (v75)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v71;
          _os_log_impl( &dword_181A5C000,  v37,  v74,  "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s",  buf,  0x16u);
        }
      }
    }

    else
    {
      __nwlog_obj();
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
      id v36 = (char *)_os_log_send_and_compose_impl();

      v170[0] = 16;
      LOBYTE(v163) = 0;
      if (v170[0] == 17)
      {
        __nwlog_obj();
        v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v59 = v170[0];
        if (os_log_type_enabled(v37, (os_log_type_t)v170[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
          _os_log_impl(&dword_181A5C000, v37, v59, "%{public}s called with null instance", buf, 0xCu);
        }

        goto LABEL_82;
      }

      if (!(_BYTE)v163)
      {
        __nwlog_obj();
        v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v84 = v170[0];
        if (os_log_type_enabled(v37, (os_log_type_t)v170[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
          _os_log_impl( &dword_181A5C000,  v37,  v84,  "%{public}s called with null instance, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_82;
      }

      os_log_type_t v71 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v72 = v170[0];
      __uint64_t v73 = os_log_type_enabled(v37, (os_log_type_t)v170[0]);
      if (!v71)
      {
        if (v73)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
          _os_log_impl(&dword_181A5C000, v37, v72, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }

        goto LABEL_82;
      }

      if (v73)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v71;
        _os_log_impl( &dword_181A5C000,  v37,  v72,  "%{public}s called with null instance, dumping backtrace:%{public}s",  buf,  0x16u);
      }
    }

    free(v71);
    goto LABEL_83;
  }

  __nwlog_obj();
  BOOL v54 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
  uint64_t v55 = (char *)_os_log_send_and_compose_impl();

  v170[0] = 16;
  LOBYTE(v163) = 0;
  if (__nwlog_fault(v55, v170, &v163))
  {
    if (v170[0] == 17)
    {
      __nwlog_obj();
      v56 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v57 = v170[0];
      if (os_log_type_enabled(v56, (os_log_type_t)v170[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
        _os_log_impl(&dword_181A5C000, v56, v57, "%{public}s called with null protocol", buf, 0xCu);
      }
    }

    else if ((_BYTE)v163)
    {
      v68 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v56 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v69 = v170[0];
      v70 = os_log_type_enabled(v56, (os_log_type_t)v170[0]);
      if (v68)
      {
        if (v70)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v68;
          _os_log_impl( &dword_181A5C000,  v56,  v69,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v68);
        goto LABEL_166;
      }

      if (v70)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
        _os_log_impl(&dword_181A5C000, v56, v69, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v56 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v83 = v170[0];
      if (os_log_type_enabled(v56, (os_log_type_t)v170[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_remove_input_handler";
        _os_log_impl( &dword_181A5C000,  v56,  v83,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

          BOOL v9 = 0LL;
          goto LABEL_11;
        }

        __nwlog_obj();
        os_log_type_t v21 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v40 = "nw_protocol_implementation_waiting_for_output";
        int v16 = (void *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        v37 = 0;
        if (!__nwlog_fault((const char *)v16, &type, &v37))
        {
LABEL_80:
          if (v16) {
            free(v16);
          }
          goto LABEL_82;
        }

        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v22 = type;
          if (os_log_type_enabled(v17, type))
          {
            *(_DWORD *)buf = 136446210;
            v40 = "nw_protocol_implementation_waiting_for_output";
            _os_log_impl( &dword_181A5C000,  v17,  v22,  "%{public}s called with null instance->parent_definition->extended_state",  buf,  0xCu);
          }

        free(v35);
        if (!v18) {
          goto LABEL_111;
        }
        goto LABEL_110;
      }

          if (v18 != -1)
          {
            os_log_type_t v46 = 0;
            v38 = 0LL;
            goto LABEL_96;
          }

          goto LABEL_84;
        }

        __nwlog_obj();
        os_log_type_t v67 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_copy_info";
        v62 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        v96 = OS_LOG_TYPE_DEFAULT;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          os_log_type_t v63 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v68 = type[0];
          if (os_log_type_enabled(v63, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_copy_info";
            _os_log_impl( &dword_181A5C000,  v63,  v68,  "%{public}s called with null instance->parent_definition->extended_state",  buf,  0xCu);
          }

          goto LABEL_183;
        }

        if (v96 == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          os_log_type_t v63 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v83 = type[0];
          if (os_log_type_enabled(v63, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_copy_info";
            _os_log_impl( &dword_181A5C000,  v63,  v83,  "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_183;
        }

        char v75 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v63 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        unint64_t v78 = type[0];
        char v79 = os_log_type_enabled(v63, type[0]);
        if (!v75)
        {
          if (v79)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_copy_info";
            _os_log_impl( &dword_181A5C000,  v63,  v78,  "%{public}s called with null instance->parent_definition->extended_state, no backtrace",  buf,  0xCu);
          }

          goto LABEL_183;
        }

        if (v79)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_copy_info";
          os_log_type_t v100 = 2082;
          BOOL v101 = v75;
          _os_log_impl( &dword_181A5C000,  v63,  v78,  "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s",  buf,  0x16u);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v65 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_copy_info";
        v62 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        v96 = OS_LOG_TYPE_DEFAULT;
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          os_log_type_t v63 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          BOOL v66 = type[0];
          if (os_log_type_enabled(v63, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_copy_info";
            _os_log_impl( &dword_181A5C000,  v63,  v66,  "%{public}s called with null instance->parent_definition",  buf,  0xCu);
          }

          goto LABEL_183;
        }

        if (v96 == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          os_log_type_t v63 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v82 = type[0];
          if (os_log_type_enabled(v63, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_copy_info";
            _os_log_impl( &dword_181A5C000,  v63,  v82,  "%{public}s called with null instance->parent_definition, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_183;
        }

        char v75 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v63 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        __uint64_t v76 = type[0];
        v77 = os_log_type_enabled(v63, type[0]);
        if (!v75)
        {
          if (v77)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_protocol_implementation_copy_info";
            _os_log_impl( &dword_181A5C000,  v63,  v76,  "%{public}s called with null instance->parent_definition, no backtrace",  buf,  0xCu);
          }

          goto LABEL_183;
        }

        if (v77)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_copy_info";
          os_log_type_t v100 = 2082;
          BOOL v101 = v75;
          _os_log_impl( &dword_181A5C000,  v63,  v76,  "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s",  buf,  0x16u);
        }
      }

      free(v75);
      if (!v62) {
        goto LABEL_186;
      }
      goto LABEL_185;
    }

    __nwlog_obj();
    BOOL v61 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_implementation_copy_info";
    v62 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v96 = OS_LOG_TYPE_DEFAULT;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v63 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v64 = type[0];
      if (os_log_type_enabled(v63, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_copy_info";
        _os_log_impl(&dword_181A5C000, v63, v64, "%{public}s called with null instance", buf, 0xCu);
      }
    }

    else if (v96)
    {
      v72 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v63 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __uint64_t v73 = type[0];
      unint64_t v74 = os_log_type_enabled(v63, type[0]);
      if (v72)
      {
        if (v74)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_implementation_copy_info";
          os_log_type_t v100 = 2082;
          BOOL v101 = v72;
          _os_log_impl( &dword_181A5C000,  v63,  v73,  "%{public}s called with null instance, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v72);
LABEL_184:
        if (!v62) {
          goto LABEL_186;
        }
LABEL_185:
        free(v62);
        goto LABEL_186;
      }

      if (v74)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_copy_info";
        _os_log_impl(&dword_181A5C000, v63, v73, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v63 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v81 = type[0];
      if (os_log_type_enabled(v63, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_implementation_copy_info";
        _os_log_impl( &dword_181A5C000,  v63,  v81,  "%{public}s called with null instance, backtrace limit exceeded",  buf,  0xCu);
      }
    }

          if (v29) {
            free(v29);
          }
          v22 = 0LL;
          goto LABEL_27;
        }

        __nwlog_obj();
        dispatch_workloop_t v34 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v62 = "nw_protocol_implementation_updated_path";
        os_log_type_t v29 = (char *)_os_log_send_and_compose_impl();

        type[4] = OS_LOG_TYPE_ERROR;
        type[0] = OS_LOG_TYPE_DEFAULT;
        if (type[4] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v35 = type[4];
          if (os_log_type_enabled(v30, type[4]))
          {
            *(_DWORD *)buf = 136446210;
            v62 = "nw_protocol_implementation_updated_path";
            _os_log_impl( &dword_181A5C000,  v30,  v35,  "%{public}s called with null instance->parent_definition->extended_state",  buf,  0xCu);
          }

          goto LABEL_117;
        }

        if (type[0] == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          BOOL v54 = type[4];
          if (os_log_type_enabled(v30, type[4]))
          {
            *(_DWORD *)buf = 136446210;
            v62 = "nw_protocol_implementation_updated_path";
            _os_log_impl( &dword_181A5C000,  v30,  v54,  "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_117;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v47 = type[4];
        v48 = os_log_type_enabled(v30, type[4]);
        if (!backtrace_string)
        {
          if (v48)
          {
            *(_DWORD *)buf = 136446210;
            v62 = "nw_protocol_implementation_updated_path";
            _os_log_impl( &dword_181A5C000,  v30,  v47,  "%{public}s called with null instance->parent_definition->extended_state, no backtrace",  buf,  0xCu);
          }

          goto LABEL_117;
        }

        if (v48)
        {
          *(_DWORD *)buf = 136446466;
          v62 = "nw_protocol_implementation_updated_path";
          os_log_type_t v63 = 2082;
          os_log_type_t v64 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v30,  v47,  "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s",  buf,  0x16u);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v32 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v62 = "nw_protocol_implementation_updated_path";
        os_log_type_t v29 = (char *)_os_log_send_and_compose_impl();

        type[4] = OS_LOG_TYPE_ERROR;
        type[0] = OS_LOG_TYPE_DEFAULT;
        if (type[4] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          BOOL v33 = type[4];
          if (os_log_type_enabled(v30, type[4]))
          {
            *(_DWORD *)buf = 136446210;
            v62 = "nw_protocol_implementation_updated_path";
            _os_log_impl( &dword_181A5C000,  v30,  v33,  "%{public}s called with null instance->parent_definition",  buf,  0xCu);
          }

          goto LABEL_117;
        }

        if (type[0] == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v53 = type[4];
          if (os_log_type_enabled(v30, type[4]))
          {
            *(_DWORD *)buf = 136446210;
            v62 = "nw_protocol_implementation_updated_path";
            _os_log_impl( &dword_181A5C000,  v30,  v53,  "%{public}s called with null instance->parent_definition, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_117;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v45 = type[4];
        os_log_type_t v46 = os_log_type_enabled(v30, type[4]);
        if (!backtrace_string)
        {
          if (v46)
          {
            *(_DWORD *)buf = 136446210;
            v62 = "nw_protocol_implementation_updated_path";
            _os_log_impl( &dword_181A5C000,  v30,  v45,  "%{public}s called with null instance->parent_definition, no backtrace",  buf,  0xCu);
          }

          goto LABEL_117;
        }

        if (v46)
        {
          *(_DWORD *)buf = 136446466;
          v62 = "nw_protocol_implementation_updated_path";
          os_log_type_t v63 = 2082;
          os_log_type_t v64 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v30,  v45,  "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s",  buf,  0x16u);
        }
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v62 = "nw_protocol_implementation_updated_path";
      os_log_type_t v29 = (char *)_os_log_send_and_compose_impl();

      type[4] = OS_LOG_TYPE_ERROR;
      type[0] = OS_LOG_TYPE_DEFAULT;
      if (type[4] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v31 = type[4];
        if (os_log_type_enabled(v30, type[4]))
        {
          *(_DWORD *)buf = 136446210;
          v62 = "nw_protocol_implementation_updated_path";
          _os_log_impl(&dword_181A5C000, v30, v31, "%{public}s called with null instance", buf, 0xCu);
        }

        goto LABEL_117;
      }

      if (type[0] == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v52 = type[4];
        if (os_log_type_enabled(v30, type[4]))
        {
          *(_DWORD *)buf = 136446210;
          v62 = "nw_protocol_implementation_updated_path";
          _os_log_impl( &dword_181A5C000,  v30,  v52,  "%{public}s called with null instance, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_117;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v43 = type[4];
      dispatch_workloop_t v44 = os_log_type_enabled(v30, type[4]);
      if (!backtrace_string)
      {
        if (v44)
        {
          *(_DWORD *)buf = 136446210;
          v62 = "nw_protocol_implementation_updated_path";
          _os_log_impl(&dword_181A5C000, v30, v43, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }

        goto LABEL_117;
      }

      if (v44)
      {
        *(_DWORD *)buf = 136446466;
        v62 = "nw_protocol_implementation_updated_path";
        os_log_type_t v63 = 2082;
        os_log_type_t v64 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v30,  v43,  "%{public}s called with null instance, dumping backtrace:%{public}s",  buf,  0x16u);
      }
    }

            goto LABEL_83;
          }

          if (!v37)
          {
            __nwlog_obj();
            id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            id v36 = type;
            if (os_log_type_enabled(v17, type))
            {
              *(_DWORD *)buf = 136446210;
              v40 = "nw_protocol_implementation_remove_listen_handler";
              _os_log_impl( &dword_181A5C000,  v17,  v36,  "%{public}s called with null instance->parent_definition->extended_state, backtrace limit exceeded",  buf,  0xCu);
            }

            goto LABEL_82;
          }

          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v31 = type;
          os_log_type_t v32 = os_log_type_enabled(v17, type);
          if (!backtrace_string)
          {
            if (v32)
            {
              *(_DWORD *)buf = 136446210;
              v40 = "nw_protocol_implementation_remove_listen_handler";
              _os_log_impl( &dword_181A5C000,  v17,  v31,  "%{public}s called with null instance->parent_definition->extended_state, no backtrace",  buf,  0xCu);
            }

            goto LABEL_82;
          }

          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            v40 = "nw_protocol_implementation_remove_listen_handler";
            os_log_type_t v41 = 2082;
            BOOL v42 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v17,  v31,  "%{public}s called with null instance->parent_definition->extended_state, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          goto LABEL_55;
        }

      goto LABEL_59;
    }

    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v41 = (os_log_type_t)v45.receiver;
      if (os_log_type_enabled(v16, (os_log_type_t)v45.receiver))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v47 = "nw_ids_info_create";
        _os_log_impl( &dword_181A5C000,  v16,  v41,  "%{public}s called with null push_token, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_82;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v35 = (os_log_type_t)v45.receiver;
    id v36 = os_log_type_enabled(v16, (os_log_type_t)v45.receiver);
    if (!backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v47 = "nw_ids_info_create";
        _os_log_impl(&dword_181A5C000, v16, v35, "%{public}s called with null push_token, no backtrace", buf, 0xCu);
      }

      goto LABEL_82;
    }

    if (v36)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v47 = "nw_ids_info_create";
      v48 = 2082;
      id v49 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v16,  v35,  "%{public}s called with null push_token, dumping backtrace:%{public}s",  buf,  0x16u);
    }

            free(v34);
            goto LABEL_83;
          }

          if (__nwlog_listener_log::onceToken != -1) {
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
          }
          v35 = (os_log_s *)(id)glistenerLogObj;
          v45 = __str[0];
          if (os_log_type_enabled(v35, (os_log_type_t)__str[0]))
          {
            os_log_type_t v46 = nw_listener_get_id_string(*(void **)(a1 + 8));
            *(_DWORD *)buf = 136446722;
            os_log_type_t v67 = "-[_NWAdvertiser start]";
            v68 = 2082;
            v69 = v46;
            v70 = 2082;
            os_log_type_t v71 = (char *)v30 + 104;
            _os_log_impl( &dword_181A5C000,  v35,  v45,  "%{public}s [%{public}s] Client specified an interface (%{public}s) and RegisterP2P, no backtrace",  buf,  0x20u);
          }
        }

        else
        {
          if (__nwlog_listener_log::onceToken != -1) {
            dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
          }
          v35 = (os_log_s *)(id)glistenerLogObj;
          char v43 = __str[0];
          if (os_log_type_enabled(v35, (os_log_type_t)__str[0]))
          {
            dispatch_workloop_t v44 = nw_listener_get_id_string(*(void **)(a1 + 8));
            *(_DWORD *)buf = 136446722;
            os_log_type_t v67 = "-[_NWAdvertiser start]";
            v68 = 2082;
            v69 = v44;
            v70 = 2082;
            os_log_type_t v71 = (char *)v30 + 104;
            _os_log_impl( &dword_181A5C000,  v35,  v43,  "%{public}s [%{public}s] Client specified an interface (%{public}s) and RegisterP2P, backtrace limit exceeded",  buf,  0x20u);
          }
        }
      }

      if (!v34) {
        goto LABEL_83;
      }
      goto LABEL_82;
    }

    goto LABEL_83;
  }

  uint64_t v7 = *(void *)(*((void *)v3 + 13) + 176LL);
  if (v7)
  {
    char v8 = *(xpc_object_t **)(v7 + 24);
    if (!v8) {
      goto LABEL_9;
    }
    goto LABEL_10;
  }

  BOOL v9 = calloc(1uLL, 0x90uLL);
  if (v9)
  {
LABEL_8:
    *(void *)(*((void *)v3 + 13) + 176LL) = v9;
    char v8 = *(xpc_object_t **)(*(void *)(*((void *)v3 + 13) + 176LL) + 24LL);
    if (!v8)
    {
LABEL_9:
      os_log_type_t v10 = xpc_array_create(v8, 0LL);
      os_log_type_t v11 = *(void *)(*((void *)v3 + 13) + 176LL);
      os_log_type_t v12 = *(void **)(v11 + 24);
      *(void *)(v11 + 24) = v10;

      char v8 = *(xpc_object_t **)(*(void *)(*((void *)v3 + 13) + 176LL) + 24LL);
      if (v8) {
        goto LABEL_10;
      }
      __nwlog_obj();
      dispatch_workloop_t v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      os_log_type_t v46 = "nw_parameters_prohibit_interface";
      char v20 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v43 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v35 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v46 = "nw_parameters_prohibit_interface";
          _os_log_impl( &dword_181A5C000,  v21,  v35,  "%{public}s called with null parameters->path_parameters->extended_objects->prohibited_interfaces",  buf,  0xCu);
        }
      }

      else if (v43)
      {
        os_log_type_t v39 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v40 = type;
        os_log_type_t v41 = os_log_type_enabled(v21, type);
        if (v39)
        {
          if (v41)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v46 = "nw_parameters_prohibit_interface";
            os_log_type_t v47 = 2082;
            v48 = (uint64_t)v39;
            _os_log_impl( &dword_181A5C000,  v21,  v40,  "%{public}s called with null parameters->path_parameters->extended_objects->prohibited_interfaces, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v39);
          if (!v20) {
            goto LABEL_11;
          }
          goto LABEL_84;
        }

        if (v41)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v46 = "nw_parameters_prohibit_interface";
          _os_log_impl( &dword_181A5C000,  v21,  v40,  "%{public}s called with null parameters->path_parameters->extended_objects->prohibited_interfaces, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v42 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v46 = "nw_parameters_prohibit_interface";
          _os_log_impl( &dword_181A5C000,  v21,  v42,  "%{public}s called with null parameters->path_parameters->extended_objects->prohibited_interfaces, backtrace limit exceeded",  buf,  0xCu);
        }
      }

      goto LABEL_82;
    }

    if (v32) {
      free(v32);
    }
    cancel_group = (dispatch_group_s *)v3->cancel_group;
    goto LABEL_85;
  }

  id v6 = v3->parameters;
  if (v6 && !nw_path_parameters_get_logging_disabled(*((void *)v6 + 13)))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v7 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      char v8 = v3->top_id;
      *(_DWORD *)buf = 136446466;
      os_log_type_t v67 = "nw_connection_add_probe_locked";
      v68 = 1024;
      *(_DWORD *)v69 = v8;
      _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_INFO,  "%{public}s [C%u] Connection already cancelled, not adding probe",  buf,  0x12u);
    }
  }

    goto LABEL_83;
  }

  if (v9)
  {
    *(void *)os_log_type_t v64 = 0LL;
    os_log_type_t v65 = v64;
    BOOL v66 = 0x3032000000LL;
    os_log_type_t v67 = __Block_byref_object_copy__24148;
    v68 = __Block_byref_object_dispose__24149;
    v69 = 0LL;
    os_log_type_t v11 = open(a2, 525, 511LL);
    if (v11 == -1)
    {
      posix_error = nw_error_create_posix_error(**(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8));
      os_log_type_t v28 = (void *)*((void *)v65 + 5);
      *((void *)v65 + 5) = posix_error;

      os_log_type_t v12 = 0LL;
      os_log_type_t v13 = *((void *)v65 + 5);
    }

    else
    {
      os_log_type_t v12 = nw_fd_wrapper_create(v11);
      v63[0] = MEMORY[0x1895F87A8];
      v63[1] = 3221225472LL;
      v63[2] = __nw_connection_receive_file_at_path_with_progress_block_invoke;
      v63[3] = &unk_189BC78E8;
      v63[4] = v64;
      nw_fd_wrapper_get_fd(v12, v63);
      os_log_type_t v13 = *((void *)v65 + 5);
      if (!v13 && v12)
      {
        BOOL v14 = *((void *)v8 + 2);
        if (v14 && !nw_path_parameters_get_logging_disabled(*(void *)(v14 + 104)) && gLogDatapath)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          uint64_t v55 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
          {
            v56 = *((_DWORD *)v8 + 112);
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_connection_receive_file_at_path_with_progress";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v56;
            *(_WORD *)&buf[18] = 2112;
            *(void *)&buf[20] = v12;
            _os_log_impl( &dword_181A5C000,  v55,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%u] attempting file read request on fd: %@",  buf,  0x1Cu);
          }
        }

        os_log_type_t v15 = v8;
        int v16 = v12;
        id v17 = v10;
        id v18 = v16;
        char v19 = v15;
        char v20 = v17;
        os_log_type_t v21 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_read_request);
        v22 = v21;
        if (v21)
        {
          objc_storeStrong((id *)&v21->connection, a1);
          uint64_t v23 = qos_class_self();
          v22->min = a3;
          v22->max = a3;
          v22->qos_class = v23;
          v22->variant = 4;
          objc_storeStrong((id *)&v22->fd, v12);
          __int16 v24 = _Block_copy(v20);
          file_handler = v22->file_handler;
          v22->file_handler = v24;

          v22->progress_msecs = 200;
          *((_BYTE *)v22 + 176) &= ~4u;
          if (_nw_signposts_once != -1) {
            dispatch_once(&_nw_signposts_once, &__block_literal_global_51910);
          }
          os_log_type_t v26 = v22;
          goto LABEL_39;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v32 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_read_request_create_with_file";
        BOOL v33 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        v70 = 0;
        if ((__nwlog_fault(v33, &type, &v70) & 1) != 0)
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            dispatch_workloop_t v34 = (os_log_s *)(id)gLogObj;
            v35 = type;
            if (os_log_type_enabled(v34, type))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_read_request_create_with_file";
              _os_log_impl( &dword_181A5C000,  v34,  v35,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_read_request) alloc] init] failed",  buf,  0xCu);
            }
          }

          else if (v70)
          {
            id v36 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            dispatch_workloop_t v34 = (os_log_s *)(id)gLogObj;
            v59 = type;
            v37 = os_log_type_enabled(v34, type);
            if (v36)
            {
              if (v37)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_read_request_create_with_file";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v36;
                _os_log_impl( &dword_181A5C000,  v34,  v59,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_read_request) alloc] init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v36);
              if (!v33) {
                goto LABEL_39;
              }
              goto LABEL_38;
            }

            if (v37)
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_read_request_create_with_file";
              _os_log_impl( &dword_181A5C000,  v34,  v59,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_read_request) alloc] init] failed, no backtrace",  buf,  0xCu);
            }
          }

          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            dispatch_workloop_t v34 = (os_log_s *)(id)gLogObj;
            v38 = type;
            if (os_log_type_enabled(v34, type))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_read_request_create_with_file";
              _os_log_impl( &dword_181A5C000,  v34,  v38,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_read_request) alloc] init] failed, backtrace limit exceeded",  buf,  0xCu);
            }
          }
        }

        if (!v33)
        {
LABEL_39:

          if (v22)
          {
            nw_connection_add_read_request(v19, v22);
          }

          else
          {
            os_log_type_t v39 = -[NWConcrete_nw_error initWithDomain:code:](objc_alloc(&OBJC_CLASS___NWConcrete_nw_error), 1, 22);
            v40 = v19[48];
            *(void *)buf = MEMORY[0x1895F87A8];
            *(void *)&buf[8] = 3221225472LL;
            *(void *)&buf[16] = ___ZL35nw_connection_receive_file_internalP24NWConcrete_nw_connectionPU27objcproto16OS_nw_fd_wrapper8NSObjectmU13block_pointerFbmPU32objcproto21OS_nw_content_contextS1_bPU22objcproto11OS_nw_errorS1_E_block_invoke;
            *(void *)&buf[24] = &unk_189BC91E8;
            os_log_type_t v41 = v20;
            __uint64_t v73 = v39;
            unint64_t v74 = v41;
            BOOL v42 = v39;
            nw_connection_async_client_if_needed_with_override(v19, 0LL, v40, buf);
          }

LABEL_43:
          _Block_object_dispose(v64, 8);

          goto LABEL_44;
        }

        goto LABEL_83;
      }

      if (v59 == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v47 = buf[0];
        if (os_log_type_enabled(v37, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)BOOL v66 = 136446210;
          *(void *)&v66[4] = "nw_connection_write_multiple";
          _os_log_impl( &dword_181A5C000,  v37,  v47,  "%{public}s called with null handler, backtrace limit exceeded",  v66,  0xCu);
        }

        goto LABEL_82;
      }

      os_log_type_t v41 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      dispatch_workloop_t v44 = buf[0];
      v45 = os_log_type_enabled(v37, (os_log_type_t)buf[0]);
      if (!v41)
      {
        if (v45)
        {
          *(_DWORD *)BOOL v66 = 136446210;
          *(void *)&v66[4] = "nw_connection_write_multiple";
          _os_log_impl(&dword_181A5C000, v37, v44, "%{public}s called with null handler, no backtrace", v66, 0xCu);
        }

        goto LABEL_82;
      }

      if (v45)
      {
        *(_DWORD *)BOOL v66 = 136446466;
        *(void *)&v66[4] = "nw_connection_write_multiple";
        *(_WORD *)&v66[12] = 2082;
        *(void *)&v66[14] = v41;
        _os_log_impl( &dword_181A5C000,  v37,  v44,  "%{public}s called with null handler, dumping backtrace:%{public}s",  v66,  0x16u);
      }

      goto LABEL_70;
    }
  }

  else
  {
    __nwlog_obj();
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)BOOL v66 = 136446210;
    *(void *)&v66[4] = "nw_connection_write_multiple";
    id v36 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    v59 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v36, buf, &v59))
    {
      if (buf[0] == 17)
      {
        __nwlog_obj();
        v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v38 = buf[0];
        if (os_log_type_enabled(v37, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)BOOL v66 = 136446210;
          *(void *)&v66[4] = "nw_connection_write_multiple";
          _os_log_impl(&dword_181A5C000, v37, v38, "%{public}s called with null connection", v66, 0xCu);
        }

        goto LABEL_82;
      }

      if (v59 == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v46 = buf[0];
        if (os_log_type_enabled(v37, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)BOOL v66 = 136446210;
          *(void *)&v66[4] = "nw_connection_write_multiple";
          _os_log_impl( &dword_181A5C000,  v37,  v46,  "%{public}s called with null connection, backtrace limit exceeded",  v66,  0xCu);
        }

        goto LABEL_82;
      }

      os_log_type_t v41 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v42 = buf[0];
      char v43 = os_log_type_enabled(v37, (os_log_type_t)buf[0]);
      if (!v41)
      {
        if (v43)
        {
          *(_DWORD *)BOOL v66 = 136446210;
          *(void *)&v66[4] = "nw_connection_write_multiple";
          _os_log_impl(&dword_181A5C000, v37, v42, "%{public}s called with null connection, no backtrace", v66, 0xCu);
        }

        goto LABEL_82;
      }

      if (v43)
      {
        *(_DWORD *)BOOL v66 = 136446466;
        *(void *)&v66[4] = "nw_connection_write_multiple";
        *(_WORD *)&v66[12] = 2082;
        *(void *)&v66[14] = v41;
        _os_log_impl( &dword_181A5C000,  v37,  v42,  "%{public}s called with null connection, dumping backtrace:%{public}s",  v66,  0x16u);
      }

      nw_frame_finalize(v23);
      return;
    }

    if (*(void *)(*(void *)type + 112LL)
      && ((*(_WORD *)(*(void *)type + 204LL) & 0x100) == 0
       || !g_channel_check_validity
       || g_channel_check_validity(*(void *)type, *(void *)(*(void *)type + 88LL)))
      && (os_log_type_t v41 = *(_DWORD *)(v23 + 52)) != 0)
    {
      BOOL v42 = *(unsigned int *)(v23 + 56);
      char v43 = v41 - (v42 + *(_DWORD *)(v23 + 60));
      if (v43 > 0x27)
      {
        dispatch_workloop_t v44 = *(void *)(v23 + 112) + v42;
        *(void *)(v44 + 32) = 0LL;
        *(_OWORD *)dispatch_workloop_t v44 = 0u;
        *(_OWORD *)(v44 + 16) = 0u;
        *(_DWORD *)(v44 + 4) = -16378880;
        *(_OWORD *)(v44 + 8) = *(_OWORD *)(a4 + 8);
        *(_OWORD *)(v44 + 24) = *(_OWORD *)(a5 + 8);
        *(_BYTE *)dispatch_workloop_t v44 = 96;
        BOOL v33 = in6_pseudo((unsigned __int16 *)(a4 + 8), (unsigned __int16 *)(a5 + 8), 436207616);
        dispatch_workloop_t v34 = 40;
        goto LABEL_53;
      }
    }

    else
    {
      char v43 = 0;
    }

    v51 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      os_log_type_t v67 = "nw_tcp_respond_reset";
      v68 = 1024;
      *(_DWORD *)v69 = v43;
      *(_WORD *)&v69[4] = 2048;
      *(void *)&v69[6] = 40LL;
      goto LABEL_81;
    }

    goto LABEL_82;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v67 = "nw_tcp_respond_reset";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v64 = OS_LOG_TYPE_ERROR;
  BOOL v61 = 0;
  if (v64 == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v39 = (os_log_s *)gLogObj;
    v40 = v64;
    if (!os_log_type_enabled((os_log_t)gLogObj, v64)) {
      goto LABEL_39;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v67 = "nw_tcp_respond_reset";
    os_log_type_t v13 = "%{public}s nw_frame_array_first failed";
    goto LABEL_87;
  }

  if (!v61)
  {
    os_log_type_t v39 = (os_log_s *)__nwlog_obj();
    v40 = v64;
    if (!os_log_type_enabled(v39, v64)) {
      goto LABEL_39;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v67 = "nw_tcp_respond_reset";
    os_log_type_t v13 = "%{public}s nw_frame_array_first failed, backtrace limit exceeded";
    goto LABEL_87;
  }

  os_log_type_t v52 = (char *)__nw_create_backtrace_string();
  os_log_type_t v39 = (os_log_s *)__nwlog_obj();
  v40 = v64;
  v53 = os_log_type_enabled(v39, v64);
  if (!v52)
  {
    if (!v53) {
      goto LABEL_39;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v67 = "nw_tcp_respond_reset";
    os_log_type_t v13 = "%{public}s nw_frame_array_first failed, no backtrace";
LABEL_87:
    id v36 = v39;
    v37 = v40;
    v38 = 12;
    goto LABEL_38;
  }

  if (v53)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v67 = "nw_tcp_respond_reset";
    v68 = 2082;
    *(void *)v69 = v52;
    _os_log_impl( &dword_181A5C000,  v39,  v40,  "%{public}s nw_frame_array_first failed, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v52);
  if (v10) {
LABEL_40:
  }
    free(v10);
}
}

    free(backtrace_string);
    goto LABEL_101;
  }

  os_log_type_t v46 = v7;
  if (!v48) {
    goto LABEL_19;
  }
  BOOL v9 = (os_unfair_lock_s *)v48;
  if (v9 == (os_unfair_lock_s *)&__block_literal_global_5_41854)
  {

    goto LABEL_19;
  }

  os_log_type_t v10 = v9;
  if (v9 == (os_unfair_lock_s *)&__block_literal_global_4
    || v9 == (os_unfair_lock_s *)&__block_literal_global_3_41839
    || v9 == (os_unfair_lock_s *)&__block_literal_global_41831)
  {

    goto LABEL_14;
  }

  os_unfair_lock_lock(v9 + 28);
  os_log_type_t v11 = BYTE2(v10[29]._os_unfair_lock_opaque);
  os_unfair_lock_unlock(v10 + 28);

  if ((v11 & 0x40) != 0)
  {
LABEL_19:
    BOOL v14 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_write_request);
    os_log_type_t v13 = v14;
    uint64_t v7 = v46;
    if (v14)
    {
      if (v46) {
        os_log_type_t v15 = v46;
      }
      else {
        os_log_type_t v15 = (void *)MEMORY[0x1895F8AA8];
      }
      p_data = (dispatch_data_t *)&v14->data;
      objc_storeStrong((id *)&v14->data, v15);
      objc_storeStrong((id *)&v13->context, a2);
      objc_storeStrong((id *)&v13->original_message, a3);
      *((_BYTE *)v13 + 128) = *((_BYTE *)v13 + 128) & 0xFE | a4 | 4;
      id v17 = v47;
      id v18 = v17;
      char v19 = 0.5;
      if (v17 != (double *)&__block_literal_global_5_41854
        && v17 != (double *)&__block_literal_global_4
        && v17 != (double *)&__block_literal_global_3_41839
        && v17 != (double *)&__block_literal_global_41831
        && (*((_BYTE *)v17 + 118) & 1) == 0)
      {
        char v19 = v17[10];
      }

      char v20 = 0;
      v13->relative_priority = v19;
      if (!v46 && a4)
      {
        os_log_type_t v21 = v18;
        char v20 = 0;
        if (v18 != (double *)&__block_literal_global_41831 && v18 != (double *)&__block_literal_global_5_41854)
        {
          char v20 = 8;
        }
      }

      *((_BYTE *)v13 + 128) = *((_BYTE *)v13 + 128) & 0xF7 | v20;
      if (_nw_signposts_once != -1) {
        dispatch_once(&_nw_signposts_once, &__block_literal_global_32859);
      }
      if (_nw_signposts_enabled && kdebug_is_enabled())
      {
        if (*p_data) {
          dispatch_data_get_size(*p_data);
        }
        context = v13->context;
        if (context) {
          nw_content_context_get_is_final(context);
        }
        kdebug_trace();
      }

      v22 = v13;
      goto LABEL_61;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v23 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v52 = "nw_write_request_create_idempotent";
    __int16 v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    id v49 = 0;
    if (__nwlog_fault(v24, &type, &v49))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v25 = (os_log_s *)(id)gLogObj;
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v52 = "nw_write_request_create_idempotent";
          _os_log_impl( &dword_181A5C000,  v25,  v26,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_write_request) alloc] init] failed",  buf,  0xCu);
        }
      }

      else if (v49)
      {
        id v27 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v25 = (os_log_s *)(id)gLogObj;
        os_log_type_t v28 = type;
        os_log_type_t v29 = os_log_type_enabled(v25, type);
        if (v27)
        {
          if (v29)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v52 = "nw_write_request_create_idempotent";
            v53 = 2082;
            BOOL v54 = v27;
            _os_log_impl( &dword_181A5C000,  v25,  v28,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_write_request) alloc] init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v27);
          if (!v24) {
            goto LABEL_61;
          }
          goto LABEL_60;
        }

        if (v29)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v52 = "nw_write_request_create_idempotent";
          _os_log_impl( &dword_181A5C000,  v25,  v28,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_write_request) alloc] init] failed, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v25 = (os_log_s *)(id)gLogObj;
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v52 = "nw_write_request_create_idempotent";
          _os_log_impl( &dword_181A5C000,  v25,  v30,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_write_request) alloc] init] failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v24)
    {
LABEL_61:

      goto LABEL_62;
    }

              _os_log_impl(&dword_181A5C000, v37, OS_LOG_TYPE_ERROR, v38, buf, v39);
              goto LABEL_83;
            }

            if ((*(_BYTE *)(v94 + 548) & 2) != 0) {
              goto LABEL_83;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v48 = gLogObj;
            if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
              goto LABEL_83;
            }
          }

          id v49 = *(_DWORD *)(v40 + 460);
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_webtransport_http2_handle_capsules";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v93;
          *(_WORD *)&buf[22] = 2080;
          v151 = (uint64_t (*)(uint64_t, uint64_t))" ";
          LOWORD(v152) = 1024;
          *(_DWORD *)((char *)&v152 + 2) = v49;
          HIWORD(v152) = 2048;
          v153 = (uint64_t *)v28;
          v37 = (os_log_s *)v48;
          v38 = "%{public}s %{public}s%s<i%u> Failed to parse stream ID from capsule 0x%llx correctly.";
          os_log_type_t v39 = 48;
          goto LABEL_82;
        }
      }
    }
  }

  *((void *)handle + 11) = 0LL;
  v51 = v173;
  if (*(_DWORD *)(v173 + 444))
  {
    os_log_type_t v52 = *(void *)(v173 + 424);
    if (v52)
    {
LABEL_85:
      nw_protocol_set_input_handler(v51, v52);
      if ((*(_BYTE *)(v51 + 548) & 2) != 0) {
        goto LABEL_89;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v53 = (os_log_s *)v5[131];
      if (!os_log_type_enabled(v53, OS_LOG_TYPE_INFO)) {
        goto LABEL_89;
      }
      BOOL v54 = *(_DWORD *)(v51 + 460);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
      v188 = 2082;
      v189 = (const char *)(v51 + 464);
      v190 = 2080;
      v191 = (uint64_t)" ";
      v192 = 1024;
      *(_DWORD *)v193 = v54;
      uint64_t v55 = "%{public}s %{public}s%s<i%u> not destroying, still have datagram stream";
      goto LABEL_88;
    }
  }

  else
  {
    if ((*(_BYTE *)(v173 + 548) & 2) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v63 = (os_log_s *)v5[131];
      if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
      {
        os_log_type_t v64 = *(_DWORD *)(v173 + 460);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
        v188 = 2082;
        v189 = (const char *)(v173 + 464);
        v190 = 2080;
        v191 = (uint64_t)" ";
        v192 = 1024;
        *(_DWORD *)v193 = v64;
        _os_log_impl( &dword_181A5C000,  v63,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u> first input handler bailed, closing",  buf,  0x26u);
      }
    }

    v51 = v173;
    os_log_type_t v65 = *(void *)(v173 + 432);
    BOOL v66 = *(void **)(v173 + 392);
    v174[0] = MEMORY[0x1895F87A8];
    v174[1] = 0x40000000LL;
    v174[2] = ___ZL37nw_webtransport_session_remove_streamP23nw_webtransport_sessionP22nw_webtransport_stream_block_invoke;
    v174[3] = &unk_189BBC460;
    v174[4] = v65;
    nw_queue_context_async(v66, v174);
    os_log_type_t v52 = *(void *)(v173 + 424);
    if (v52) {
      goto LABEL_85;
    }
  }

  os_log_type_t v67 = *(os_unfair_lock_s **)(v51 + 184);
  if (v67 && v67[10]._os_unfair_lock_opaque)
  {
    some_node = nw_hash_table_get_some_node(v67);
    object = nw_hash_node_get_object(some_node);
    nw_protocol_set_input_handler(v173, object);
    if ((*(_BYTE *)(v173 + 548) & 2) != 0) {
      goto LABEL_89;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v53 = (os_log_s *)v5[131];
    if (!os_log_type_enabled(v53, OS_LOG_TYPE_INFO)) {
      goto LABEL_89;
    }
    v70 = *(_DWORD *)(v173 + 460);
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
    v188 = 2082;
    v189 = (const char *)(v173 + 464);
    v190 = 2080;
    v191 = (uint64_t)" ";
    v192 = 1024;
    *(_DWORD *)v193 = v70;
    uint64_t v55 = "%{public}s %{public}s%s<i%u> not destroying, still have active streams";
    goto LABEL_88;
  }

  unint64_t v78 = v173;
  if (!*(_DWORD *)(v173 + 456))
  {
    v81 = *(void *)(v173 + 416);
    if (v81)
    {
      nw_protocol_set_input_handler(v173, v81);
      if ((*(_BYTE *)(v173 + 548) & 2) != 0) {
        goto LABEL_89;
      }
      v53 = (os_log_s *)__nwlog_obj();
      if (!os_log_type_enabled(v53, OS_LOG_TYPE_INFO)) {
        goto LABEL_89;
      }
      v82 = *(_DWORD *)(v173 + 460);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_remove_stream";
      v188 = 2082;
      v189 = (const char *)(v173 + 464);
      v190 = 2080;
      v191 = (uint64_t)" ";
      v192 = 1024;
      *(_DWORD *)v193 = v82;
      uint64_t v55 = "%{public}s %{public}s%s<i%u> not destroying, still have placeholder stream";
      goto LABEL_88;
    }

    nw_protocol_set_input_handler(v173, 0LL);
    if ((*(_BYTE *)(v173 + 548) & 2) == 0)
    {
      os_log_type_t v83 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v83, OS_LOG_TYPE_INFO))
      {
        v84 = *(_DWORD *)(v173 + 460);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
        v188 = 2082;
        v189 = (const char *)(v173 + 464);
        v190 = 2080;
        v191 = (uint64_t)" ";
        v192 = 1024;
        *(_DWORD *)v193 = v84;
        _os_log_impl( &dword_181A5C000,  v83,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u> called, destroying session",  buf,  0x26u);
      }
    }

    *(void *)buf = 0LL;
    nw::retained_ptr<nw_endpoint *>::operator=(v173 + 344, buf);
    *(void *)buf = 0LL;
    nw::retained_ptr<nw_endpoint *>::operator=(v173 + 360, buf);
    *(void *)buf = 0LL;
    nw::retained_ptr<nw_endpoint *>::operator=(v173 + 376, buf);
    nw_http_capsule_framer_cleanup((void *)(v173 + 96), v85);
    v86 = *(void *)(v173 + 400);
    if (v86) {
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)v86 + 8LL))(v86, v173, 0LL);
    }
    if ((*(_BYTE *)(v173 + 548) & 4) != 0)
    {
      if ((nw_protocol_remove_listen_handler(*(void *)(v173 + 408), v173 + 64) & 1) == 0
        && (*(_BYTE *)(v173 + 548) & 2) == 0)
      {
        os_log_type_t v87 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
        {
          v88 = *(_DWORD *)(v173 + 460);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
          v188 = 2082;
          v189 = (const char *)(v173 + 464);
          v190 = 2080;
          v191 = (uint64_t)" ";
          v192 = 1024;
          *(_DWORD *)v193 = v88;
          _os_log_impl( &dword_181A5C000,  v87,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u> failed to remove listen handler",  buf,  0x26u);
        }
      }

      *(void *)(v173 + 408) = 0LL;
    }

    os_log_type_t v89 = *(void *)(v173 + 32);
    if (v89) {
      nw_protocol_remove_input_handler(v89, v173);
    }
    v181 = 0LL;
    v182 = &v181;
    v183 = 0x2000000000LL;
    v184 = 0LL;
    BOOL v90 = *(char **)(v173 + 184);
    if (v90)
    {
      *(void *)os_log_type_t type = MEMORY[0x1895F87A8];
      v176 = 0x40000000LL;
      v177 = ___ZL31nw_webtransport_session_destroyP23nw_webtransport_session_block_invoke;
      v178 = &unk_189BBC4A8;
      v179 = &v181;
      v180 = v173;
      nw_hash_table_apply(v90, (uint64_t)type);
      v92 = *(os_unfair_lock_s **)(v173 + 184);
      if (v92)
      {
        _nw_hash_table_release(v92, v91);
        *(void *)(v173 + 184) = 0LL;
      }
    }

    v93 = *(void *)(v173 + 328);
    v182[3] = v93;
    if (!v93)
    {
      (*(void (**)(void, void))(*(void *)(v173 + 432) + 16LL))(*(void *)(v173 + 432), 0LL);
      v138 = *(const void **)(v173 + 432);
      if (v138)
      {
        _Block_release(v138);
        *(void *)(v173 + 432) = 0LL;
      }

      std::destroy_at[abi:nn180100]<nw_webtransport_session,0>(v173);
      free((void *)v173);
      _Block_object_dispose(&v181, 8);
      goto LABEL_89;
    }

    while (1)
    {
      v93 = *(void *)(v93 + 112);
      if ((*(_BYTE *)(v78 + 548) & 2) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v94 = (os_log_s *)v5[131];
        if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
        {
          v95 = *(_DWORD *)(v78 + 460);
          v96 = v182[3];
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
          v188 = 2082;
          v189 = (const char *)(v173 + 464);
          v190 = 2080;
          v191 = (uint64_t)" ";
          v192 = 1024;
          *(_DWORD *)v193 = v95;
          *(_WORD *)&v193[4] = 2048;
          *(void *)&v193[6] = v96;
          _os_log_impl( &dword_181A5C000,  v94,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u> should not have stream %p left, destroying anyways",  buf,  0x30u);
        }
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
      os_log_type_t v97 = (char *)_os_log_send_and_compose_impl();
      v186 = OS_LOG_TYPE_ERROR;
      v185 = 0;
      if (__nwlog_fault(v97, &v186, &v185))
      {
        if (v186 == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v98 = gLogObj;
          v99 = v186;
          if (!os_log_type_enabled((os_log_t)gLogObj, v186)) {
            goto LABEL_170;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
          os_log_type_t v100 = (os_log_s *)v98;
          BOOL v101 = v99;
          os_log_type_t v102 = "%{public}s should not have streams left when destroying";
LABEL_169:
          _os_log_impl(&dword_181A5C000, v100, v101, v102, buf, 0xCu);
          goto LABEL_170;
        }

        if (!v185)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v107 = gLogObj;
          v108 = v186;
          if (!os_log_type_enabled((os_log_t)gLogObj, v186)) {
            goto LABEL_170;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
          os_log_type_t v100 = (os_log_s *)v107;
          BOOL v101 = v108;
          os_log_type_t v102 = "%{public}s should not have streams left when destroying, backtrace limit exceeded";
          goto LABEL_169;
        }

        os_log_type_t v103 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __uint64_t v104 = (os_log_s *)gLogObj;
        char v105 = v186;
        v106 = os_log_type_enabled((os_log_t)gLogObj, v186);
        if (!v103)
        {
          if (!v106) {
            goto LABEL_170;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
          os_log_type_t v100 = v104;
          BOOL v101 = v105;
          os_log_type_t v102 = "%{public}s should not have streams left when destroying, no backtrace";
          goto LABEL_169;
        }

        if (v106)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_webtransport_session_destroy";
          v188 = 2082;
          v189 = v103;
          _os_log_impl( &dword_181A5C000,  v104,  v105,  "%{public}s should not have streams left when destroying, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v103);
      }

  nw_http_connect_destroy((uint64_t)handle);
  return 0LL;
}

LABEL_83:
      if (v16) {
        free(v16);
      }
      goto LABEL_85;
    }

    if (!v42)
    {
      __nwlog_obj();
      id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v40 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v45 = "nw_proxy_config_copy_protocol_stack";
        _os_log_impl( &dword_181A5C000,  v17,  v40,  "%{public}s called with null transport_identifier, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_82;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v35 = type;
    id v36 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v45 = "nw_proxy_config_copy_protocol_stack";
        _os_log_impl( &dword_181A5C000,  v17,  v35,  "%{public}s called with null transport_identifier, no backtrace",  buf,  0xCu);
      }

      goto LABEL_82;
    }

    if (v36)
    {
      *(_DWORD *)buf = 136446466;
      v45 = "nw_proxy_config_copy_protocol_stack";
      os_log_type_t v46 = 2082;
      os_log_type_t v47 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v17,  v35,  "%{public}s called with null transport_identifier, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    if (v26) {
      free(v26);
    }
    int v16 = 0LL;
    goto LABEL_12;
  }

  uint64_t v7 = v2[1];
  char v8 = (nw_protocol_stack *)nw_dictionary_copy_value( v7,  nw_proxy_config_default_transport(void)::default_transport_string);
  if (!v8)
  {
    __nwlog_obj();
    os_log_type_t v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v57 = "nw_proxy_config_copy_parameters_to_proxy";
    os_log_type_t v30 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v54 = 0;
    if (__nwlog_fault(v30, &type, &v54))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v57 = "nw_proxy_config_copy_parameters_to_proxy";
          _os_log_impl(&dword_181A5C000, v31, v32, "%{public}s called with null proxy_stack", buf, 0xCu);
        }
      }

      else if (v54)
      {
        BOOL v42 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v43 = type;
        dispatch_workloop_t v44 = os_log_type_enabled(v31, type);
        if (v42)
        {
          if (v44)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v57 = "nw_proxy_config_copy_parameters_to_proxy";
            v58 = 2082;
            v59 = v42;
            _os_log_impl( &dword_181A5C000,  v31,  v43,  "%{public}s called with null proxy_stack, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v42);
          goto LABEL_88;
        }

        if (v44)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v57 = "nw_proxy_config_copy_parameters_to_proxy";
          _os_log_impl(&dword_181A5C000, v31, v43, "%{public}s called with null proxy_stack, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v49 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v57 = "nw_proxy_config_copy_parameters_to_proxy";
          _os_log_impl( &dword_181A5C000,  v31,  v49,  "%{public}s called with null proxy_stack, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

  if (v19) {
    free(v19);
  }
}

      free(v42);
      goto LABEL_83;
    }

    if (v91 == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_url_log::onceToken != -1) {
        dispatch_once(&__nwlog_url_log::onceToken, &__block_literal_global_54_44366);
      }
      char v43 = (os_log_s *)(id)gurlLogObj;
      dispatch_workloop_t v44 = v91;
      if (!os_log_type_enabled(v43, v91)) {
        goto LABEL_80;
      }
      v45 = -[__CFArray count](v24, "count", buf, v77);
      *(_DWORD *)buf = 136446466;
      v94 = "-[NWURLSessionTask loaderDidReceiveServerTrustChallenge:secProtocolMetadata:completionHandler:]";
      v95 = 2048;
      *(void *)v96 = v45;
      os_log_type_t v46 = "%{public}s SecTrust has an unexpected number of policies %lu";
    }

    else
    {
      if (v90)
      {
        os_log_type_t v47 = (char *)__nw_create_backtrace_string();
        v48 = v24;
        if (__nwlog_url_log::onceToken != -1) {
          dispatch_once(&__nwlog_url_log::onceToken, &__block_literal_global_54_44366);
        }
        id v49 = (os_log_s *)(id)gurlLogObj;
        v50 = v91;
        v51 = os_log_type_enabled(v49, v91);
        if (v47)
        {
          if (v51)
          {
            os_log_type_t v52 = -[__CFArray count](v48, "count", buf, v77);
            *(_DWORD *)buf = 136446722;
            v94 = "-[NWURLSessionTask loaderDidReceiveServerTrustChallenge:secProtocolMetadata:completionHandler:]";
            v95 = 2048;
            *(void *)v96 = v52;
            *(_WORD *)&v96[8] = 2082;
            *(void *)&v96[10] = v47;
            _os_log_impl( &dword_181A5C000,  v49,  v50,  "%{public}s SecTrust has an unexpected number of policies %lu, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v47);
        }

        else
        {
          if (v51)
          {
            v58 = -[__CFArray count](v48, "count", buf, v77);
            *(_DWORD *)buf = 136446466;
            v94 = "-[NWURLSessionTask loaderDidReceiveServerTrustChallenge:secProtocolMetadata:completionHandler:]";
            v95 = 2048;
            *(void *)v96 = v58;
            _os_log_impl( &dword_181A5C000,  v49,  v50,  "%{public}s SecTrust has an unexpected number of policies %lu, no backtrace",  buf,  0x16u);
          }
        }

        __int16 v24 = v48;
        if (!v42) {
          goto LABEL_83;
        }
        goto LABEL_82;
      }

      if (__nwlog_url_log::onceToken != -1) {
        dispatch_once(&__nwlog_url_log::onceToken, &__block_literal_global_54_44366);
      }
      char v43 = (os_log_s *)(id)gurlLogObj;
      dispatch_workloop_t v44 = v91;
      if (!os_log_type_enabled(v43, v91)) {
        goto LABEL_80;
      }
      BOOL v57 = -[__CFArray count](v24, "count", buf, v77);
      *(_DWORD *)buf = 136446466;
      v94 = "-[NWURLSessionTask loaderDidReceiveServerTrustChallenge:secProtocolMetadata:completionHandler:]";
      v95 = 2048;
      *(void *)v96 = v57;
      os_log_type_t v46 = "%{public}s SecTrust has an unexpected number of policies %lu, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v43, v44, v46, buf, 0x16u);
LABEL_80:

    goto LABEL_81;
  }

  -[__CFArray firstObject](v24, "firstObject");

  if ((SecPolicySetSSLHostname() & 1) == 0)
  {
    char v79 = v10;
    v25 = v24;
    if (__nwlog_url_log::onceToken != -1) {
      dispatch_once(&__nwlog_url_log::onceToken, &__block_literal_global_54_44366);
    }
    os_log_type_t v26 = (id)gurlLogObj;
    *(_DWORD *)buf = 136446210;
    v94 = "-[NWURLSessionTask loaderDidReceiveServerTrustChallenge:secProtocolMetadata:completionHandler:]";
    LODWORD(v77) = 12;
    __uint64_t v76 = buf;
    id v27 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t v91 = OS_LOG_TYPE_ERROR;
    BOOL v90 = 0;
    if (!__nwlog_fault((const char *)v27, &v91, &v90))
    {
LABEL_95:
      if (!v27)
      {
LABEL_97:
        os_log_type_t v10 = v79;
        goto LABEL_98;
      }

  char v19 = 0LL;
  uint64_t result = 0LL;
  if (!v4) {
    return result;
  }
LABEL_83:
  os_release(v4);
  return v19;
}

    if (v31) {
      free(v31);
    }

    return 0LL;
  }

  v3[75] = 0;
  char v5 = CFURLCopyAbsoluteURL(a2);
  *((void *)v4 + 29) = v5;
  if (!v5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v17 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      id v18 = (char *)*((void *)v4 + 31);
      *(_DWORD *)buf = 136446467;
      os_log_type_t v52 = "-[NWConcrete_nw_url_endpoint initWithURL:]";
      v53 = 2085;
      BOOL v54 = v18;
      _os_log_impl( &dword_181A5C000,  v17,  OS_LOG_TYPE_ERROR,  "%{public}s failed to create url from %{sensitive}s",  buf,  0x16u);
    }

    goto LABEL_27;
  }

  id v6 = CFURLGetBytes(v5, 0LL, 0LL);
  uint64_t v7 = nw_calloc_type<unsigned char>(v6 + 1);
  *((void *)v4 + 31) = v7;
  CFURLGetBytes(a2, (UInt8 *)v7, v6);
  char v8 = CFURLGetByteRangeForComponent((CFURLRef)*((void *)v4 + 29), kCFURLComponentScheme, 0LL);
  if (v8.location == -1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v17 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      char v19 = (char *)*((void *)v4 + 31);
      *(_DWORD *)buf = 136446467;
      os_log_type_t v52 = "-[NWConcrete_nw_url_endpoint initWithURL:]";
      v53 = 2085;
      BOOL v54 = v19;
      _os_log_impl( &dword_181A5C000,  v17,  OS_LOG_TYPE_ERROR,  "%{public}s failed to get scheme from %{sensitive}s",  buf,  0x16u);
    }

                              if (*((_BYTE *)a3 + *v9)) {
                                v59 = 0;
                              }
                              goto LABEL_84;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }

          *((_BYTE *)a3 + *v9) = 1;
          goto LABEL_82;
        }

        v93 = PBReaderSkipValueWithTag();
        if (!v93) {
          return v93;
        }
      }

  if (v33) {
    free(v33);
  }
LABEL_52:
}

    goto LABEL_83;
  }

  __break(1u);
  return result;
}

      free(v40);
      goto LABEL_83;
    }

    if (v27 - 1 >= v29)
    {
      char v43 = *(unsigned __int8 *)(v292 + v29);
      goto LABEL_93;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v35 = (id)gLogObj;
    *(_DWORD *)out = 136446722;
    *(void *)&out[4] = "nw_necp_buffer_get_tlv_type";
    *(_WORD *)&out[12] = 2048;
    *(void *)&out[14] = v29;
    *(_WORD *)&out[22] = 2048;
    *(void *)&out[24] = v27;
    id v36 = (void *)_os_log_send_and_compose_impl();

    v413[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault((const char *)v36, v413, &type))
    {
      if (v413[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v37 = (os_log_s *)(id)gLogObj;
        v38 = v413[0];
        if (os_log_type_enabled(v37, (os_log_type_t)v413[0]))
        {
          *(_DWORD *)out = 136446722;
          *(void *)&out[4] = "nw_necp_buffer_get_tlv_type";
          *(_WORD *)&out[12] = 2048;
          *(void *)&out[14] = v29;
          *(_WORD *)&out[22] = 2048;
          *(void *)&out[24] = v27;
          _os_log_impl( &dword_181A5C000,  v37,  v38,  "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu",  out,  0x20u);
        }
      }

      else if (type)
      {
        os_log_type_t v47 = __nw_create_backtrace_string();
        if (v47)
        {
          v48 = (char *)v47;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v49 = (os_log_s *)(id)gLogObj;
          v50 = v413[0];
          if (os_log_type_enabled(v49, (os_log_type_t)v413[0]))
          {
            *(_DWORD *)out = 136446978;
            *(void *)&out[4] = "nw_necp_buffer_get_tlv_type";
            *(_WORD *)&out[12] = 2048;
            *(void *)&out[14] = v29;
            *(_WORD *)&out[22] = 2048;
            *(void *)&out[24] = v27;
            *(_WORD *)&out[32] = 2082;
            *(void *)&out[34] = v48;
            _os_log_impl( &dword_181A5C000,  v49,  v50,  "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu, dumping backtrace:%{public}s",  out,  0x2Au);
          }

          free(v48);
          if (!v36) {
            goto LABEL_92;
          }
LABEL_91:
          free(v36);
          goto LABEL_92;
        }

        __nwlog_obj();
        v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v55 = v413[0];
        if (os_log_type_enabled(v37, (os_log_type_t)v413[0]))
        {
          *(_DWORD *)out = 136446722;
          *(void *)&out[4] = "nw_necp_buffer_get_tlv_type";
          *(_WORD *)&out[12] = 2048;
          *(void *)&out[14] = v29;
          *(_WORD *)&out[22] = 2048;
          *(void *)&out[24] = v27;
          _os_log_impl( &dword_181A5C000,  v37,  v55,  "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu, no backtrace",  out,  0x20u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v37 = (os_log_s *)(id)gLogObj;
        BOOL v54 = v413[0];
        if (os_log_type_enabled(v37, (os_log_type_t)v413[0]))
        {
          *(_DWORD *)out = 136446722;
          *(void *)&out[4] = "nw_necp_buffer_get_tlv_type";
          *(_WORD *)&out[12] = 2048;
          *(void *)&out[14] = v29;
          *(_WORD *)&out[22] = 2048;
          *(void *)&out[24] = v27;
          _os_log_impl( &dword_181A5C000,  v37,  v54,  "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu, backtrace limit exceeded",  out,  0x20u);
        }
      }
    }

    if (v36) {
      goto LABEL_91;
    }
LABEL_92:
    char v43 = 0;
LABEL_93:
    os_log_type_t v52 = *(unsigned int *)(v293 + v29);
    if ((_DWORD)v52)
    {
      if (v52 <= 0xFFFFFFF9 && v27 >= v52 + 5 && v27 - (v52 + 5) >= v29)
      {
        v53 = (char *)(v291 + v29);
        goto LABEL_120;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v57 = (id)gLogObj;
      *(_DWORD *)out = 136446978;
      *(void *)&out[4] = "nw_necp_buffer_get_tlv_value";
      *(_WORD *)&out[12] = 2048;
      *(void *)&out[14] = v29;
      *(_WORD *)&out[22] = 2048;
      *(void *)&out[24] = v27;
      *(_WORD *)&out[32] = 1024;
      *(_DWORD *)&out[34] = v52;
      v58 = (void *)_os_log_send_and_compose_impl();

      v413[0] = 16;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault((const char *)v58, v413, &type))
      {
        if (v413[0] == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v59 = (os_log_s *)(id)gLogObj;
          os_log_type_t v60 = v413[0];
          if (os_log_type_enabled(v59, (os_log_type_t)v413[0]))
          {
            *(_DWORD *)out = 136446978;
            *(void *)&out[4] = "nw_necp_buffer_get_tlv_value";
            *(_WORD *)&out[12] = 2048;
            *(void *)&out[14] = v29;
            *(_WORD *)&out[22] = 2048;
            *(void *)&out[24] = v27;
            *(_WORD *)&out[32] = 1024;
            *(_DWORD *)&out[34] = v52;
            _os_log_impl( &dword_181A5C000,  v59,  v60,  "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u",  out,  0x26u);
          }
        }

        else if (type)
        {
          BOOL v61 = __nw_create_backtrace_string();
          if (v61)
          {
            v62 = (char *)v61;
            v290 = v1;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v63 = (os_log_s *)(id)gLogObj;
            os_log_type_t v64 = v413[0];
            if (os_log_type_enabled(v63, (os_log_type_t)v413[0]))
            {
              *(_DWORD *)out = 136447234;
              *(void *)&out[4] = "nw_necp_buffer_get_tlv_value";
              *(_WORD *)&out[12] = 2048;
              *(void *)&out[14] = v29;
              *(_WORD *)&out[22] = 2048;
              *(void *)&out[24] = v27;
              *(_WORD *)&out[32] = 1024;
              *(_DWORD *)&out[34] = v52;
              *(_WORD *)&out[38] = 2082;
              *(void *)&out[40] = v62;
              _os_log_impl( &dword_181A5C000,  v63,  v64,  "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, dumping backtrace:%{public}s",  out,  0x30u);
            }

            uint32_t v1 = v290;
            free(v62);
            if (!v58) {
              goto LABEL_119;
            }
LABEL_118:
            free(v58);
            goto LABEL_119;
          }

          __nwlog_obj();
          v59 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          BOOL v66 = v413[0];
          if (os_log_type_enabled(v59, (os_log_type_t)v413[0]))
          {
            *(_DWORD *)out = 136446978;
            *(void *)&out[4] = "nw_necp_buffer_get_tlv_value";
            *(_WORD *)&out[12] = 2048;
            *(void *)&out[14] = v29;
            *(_WORD *)&out[22] = 2048;
            *(void *)&out[24] = v27;
            *(_WORD *)&out[32] = 1024;
            *(_DWORD *)&out[34] = v52;
            _os_log_impl( &dword_181A5C000,  v59,  v66,  "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, no backtrace",  out,  0x26u);
          }
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v59 = (os_log_s *)(id)gLogObj;
          os_log_type_t v65 = v413[0];
          if (os_log_type_enabled(v59, (os_log_type_t)v413[0]))
          {
            *(_DWORD *)out = 136446978;
            *(void *)&out[4] = "nw_necp_buffer_get_tlv_value";
            *(_WORD *)&out[12] = 2048;
            *(void *)&out[14] = v29;
            *(_WORD *)&out[22] = 2048;
            *(void *)&out[24] = v27;
            *(_WORD *)&out[32] = 1024;
            *(_DWORD *)&out[34] = v52;
            _os_log_impl( &dword_181A5C000,  v59,  v65,  "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, backtrace limit exceeded",  out,  0x26u);
          }
        }
      }

      if (v58) {
        goto LABEL_118;
      }
    }

  if (!nw_endpoint_flow_join_protocol( *(void **)(a1 + 32),  *(void **)(a1 + 48),  v8,  v7,  identifier,  -1LL,  v20,  *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL),  *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL),  (_BYTE *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL))) {
    goto LABEL_86;
  }
  *(void *)(*(void *)(a1 + 56) + 736LL) = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL)
                                                        + 32LL);
  *(_BYTE *)(*(void *)(a1 + 56) + 33LL) |= 1u;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 56) + 880LL));
  BOOL v57 = *(void *)(a1 + 56);
  if (!*(void *)(v57 + 720))
  {
    if (*(_UNKNOWN **)(v20 + 40) == &nw_protocol_ref_counted_handle)
    {
      os_log_type_t v65 = *(void *)(v20 + 88);
      if (v65)
      {
        *(void *)(v20 + 88) = v65 + 1;
        BOOL v57 = *(void *)(a1 + 56);
      }

      *(void *)buf = v20;
      v58 = buf[8] | 1;
    }

    else
    {
      *(void *)buf = v20;
      v58 = buf[8] & 0xFE;
    }

    buf[8] = v58;
    BOOL v66 = *(_BYTE *)(v57 + 728);
    if ((v66 & 1) != 0)
    {
      nw::release_if_needed<nw_protocol *>((uint64_t *)(v57 + 720));
      BOOL v66 = *(_BYTE *)(v57 + 728);
      char v20 = *(void *)buf;
      v58 = buf[8];
    }

    *(void *)(v57 + 720) = v20;
    *(_BYTE *)(v57 + 728) = v66 & 0xFE | v58 & 1;
    BOOL v57 = *(void *)(a1 + 56);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(v57 + 880));
  os_log_type_t v63 = 0LL;
LABEL_115:

  return v63;
}

    goto LABEL_83;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  char v20 = (id)gLogObj;
  else {
    os_log_type_t v21 = off_189BBBBC0[mode];
  }
  *(_DWORD *)buf = 136446722;
  BOOL v101 = "nw_endpoint_handler_reset_traffic_class";
  os_log_type_t v102 = 2082;
  os_log_type_t v103 = (void *)v21;
  __uint64_t v104 = 2082;
  char v105 = "flow";
  v22 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v96) = 0;
  if (__nwlog_fault(v22, type, &v96))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v23 = (os_log_s *)(id)gLogObj;
      __int16 v24 = type[0];
      if (os_log_type_enabled(v23, type[0]))
      {
        else {
          v25 = off_189BBBBC0[mode];
        }
        *(_DWORD *)buf = 136446722;
        BOOL v101 = "nw_endpoint_handler_reset_traffic_class";
        os_log_type_t v102 = 2082;
        os_log_type_t v103 = (void *)v25;
        __uint64_t v104 = 2082;
        char v105 = "flow";
        _os_log_impl( &dword_181A5C000,  v23,  v24,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
      }
    }

    else if ((_BYTE)v96)
    {
      os_log_type_t v26 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v23 = (os_log_s *)(id)gLogObj;
      id v27 = type[0];
      os_log_type_t v28 = os_log_type_enabled(v23, type[0]);
      if (v26)
      {
        if (v28)
        {
          else {
            os_log_type_t v29 = off_189BBBBC0[mode];
          }
          *(_DWORD *)buf = 136446978;
          BOOL v101 = "nw_endpoint_handler_reset_traffic_class";
          os_log_type_t v102 = 2082;
          os_log_type_t v103 = (void *)v29;
          __uint64_t v104 = 2082;
          char v105 = "flow";
          v106 = 2082;
          v107 = v26;
          _os_log_impl( &dword_181A5C000,  v23,  v27,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(v26);
        if (v22) {
          goto LABEL_75;
        }
        goto LABEL_84;
      }

      if (v28)
      {
        else {
          dispatch_workloop_t v44 = off_189BBBBC0[mode];
        }
        *(_DWORD *)buf = 136446722;
        BOOL v101 = "nw_endpoint_handler_reset_traffic_class";
        os_log_type_t v102 = 2082;
        os_log_type_t v103 = (void *)v44;
        __uint64_t v104 = 2082;
        char v105 = "flow";
        _os_log_impl( &dword_181A5C000,  v23,  v27,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v23 = (os_log_s *)(id)gLogObj;
      BOOL v42 = type[0];
      if (os_log_type_enabled(v23, type[0]))
      {
        else {
          char v43 = off_189BBBBC0[mode];
        }
        *(_DWORD *)buf = 136446722;
        BOOL v101 = "nw_endpoint_handler_reset_traffic_class";
        os_log_type_t v102 = 2082;
        os_log_type_t v103 = (void *)v43;
        __uint64_t v104 = 2082;
        char v105 = "flow";
        _os_log_impl( &dword_181A5C000,  v23,  v42,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
      }
    }

    goto LABEL_73;
  }

    if (v39) {
      free(v39);
    }
    LODWORD(source) = 0;
    os_log_type_t v12 = MEMORY[0x1895F87A8];
    *((void *)v5 + 8) = 0LL;
    goto LABEL_11;
  }

  if (!a5) {
    goto LABEL_83;
  }
  return v12;
}

LABEL_83:
  if (v19) {
LABEL_84:
  }
    free(v19);
LABEL_85:

  char v8 = v2[34]._os_unfair_lock_opaque;
  int v16 = v8 & 4;
LABEL_86:
  if (!v16 && (v8 & 0x21) != 0x21) {
    goto LABEL_129;
  }
  v48 = v2;
  if (*(void *)&v48[8]._os_unfair_lock_opaque)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v49 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v108 = "nw_context_initialize_globals";
    v50 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v105 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v51 = (os_log_s *)(id)gLogObj;
      os_log_type_t v52 = type;
      if (os_log_type_enabled(v51, type))
      {
        *(_DWORD *)buf = 136446210;
        v108 = "nw_context_initialize_globals";
        _os_log_impl(&dword_181A5C000, v51, v52, "%{public}s Cannot initialize globals twice", buf, 0xCu);
      }

  __break(1u);
}

    if (v57) {
      free(v57);
    }
    int v16 = v66;
    goto LABEL_28;
  }

  os_log_type_t v15 = 0LL;
LABEL_30:

  return v15;
}

    if (v30) {
      free(v30);
    }
    goto LABEL_35;
  }

  if (v6 >= 0x1D)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v15 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      BOOL v57 = "-[NWConcrete_nw_address_endpoint initWithAddress:overridePort:]";
      v58 = 1024;
      *(_DWORD *)v59 = v6;
      v59[2] = 2048;
      BOOL v14 = 28;
      *(void *)&v59[3] = 28LL;
      _os_log_impl( &dword_181A5C000,  v15,  OS_LOG_TYPE_ERROR,  "%{public}s Changing endpoint address length from %u to %lu, too long for family AF_INET6",  buf,  0x1Cu);
    }

    else
    {
      BOOL v14 = 28;
    }

    goto LABEL_38;
  }

  if (v6 != 28)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v33 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    BOOL v57 = "-[NWConcrete_nw_address_endpoint initWithAddress:overridePort:]";
    dispatch_workloop_t v34 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v53 = 0;
    if (__nwlog_fault(v34, &type, &v53))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v35 = (os_log_s *)(id)gLogObj;
        id v36 = type;
        if (os_log_type_enabled(v35, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v57 = "-[NWConcrete_nw_address_endpoint initWithAddress:overridePort:]";
          _os_log_impl(&dword_181A5C000, v35, v36, "%{public}s sockaddr_in6 too small", buf, 0xCu);
        }
      }

      else if (v53)
      {
        v40 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v41 = type;
        BOOL v42 = os_log_type_enabled(v35, type);
        if (v40)
        {
          if (v42)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v57 = "-[NWConcrete_nw_address_endpoint initWithAddress:overridePort:]";
            v58 = 2082;
            *(void *)v59 = v40;
            _os_log_impl( &dword_181A5C000,  v35,  v41,  "%{public}s sockaddr_in6 too small, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v40);
          goto LABEL_89;
        }

        if (v42)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v57 = "-[NWConcrete_nw_address_endpoint initWithAddress:overridePort:]";
          _os_log_impl(&dword_181A5C000, v35, v41, "%{public}s sockaddr_in6 too small, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        dispatch_workloop_t v44 = type;
        if (os_log_type_enabled(v35, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v57 = "-[NWConcrete_nw_address_endpoint initWithAddress:overridePort:]";
          _os_log_impl( &dword_181A5C000,  v35,  v44,  "%{public}s sockaddr_in6 too small, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

  if (v29) {
    free(v29);
  }
  os_log_type_t v21 = 0LL;
LABEL_104:

  return v21;
}

LABEL_84:
          if (!v31) {
            goto LABEL_87;
          }
          goto LABEL_85;
        }

        if (type == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          id v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v64 = buf[0];
          if (os_log_type_enabled(v36, (os_log_type_t)buf[0]))
          {
            *(_DWORD *)BOOL v90 = 136446210;
            os_log_type_t v91 = "nw_endpoint_copy_address_string";
            _os_log_impl( &dword_181A5C000,  v36,  v64,  "%{public}s endpoint sockaddr has invalid length, backtrace limit exceeded",  v90,  0xCu);
          }

          goto LABEL_83;
        }

        BOOL v57 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v58 = buf[0];
        v59 = os_log_type_enabled(v36, (os_log_type_t)buf[0]);
        if (!v57)
        {
          if (v59)
          {
            *(_DWORD *)BOOL v90 = 136446210;
            os_log_type_t v91 = "nw_endpoint_copy_address_string";
            _os_log_impl( &dword_181A5C000,  v36,  v58,  "%{public}s endpoint sockaddr has invalid length, no backtrace",  v90,  0xCu);
          }

          goto LABEL_83;
        }

        if (v59)
        {
          *(_DWORD *)BOOL v90 = 136446466;
          os_log_type_t v91 = "nw_endpoint_copy_address_string";
          v92 = 2082;
          v93[0] = v57;
          _os_log_impl( &dword_181A5C000,  v36,  v58,  "%{public}s endpoint sockaddr has invalid length, dumping backtrace:%{public}s",  v90,  0x16u);
        }

        free(v57);
        if (!v31)
        {
LABEL_87:
          os_log_type_t v29 = 0LL;
LABEL_88:

          goto LABEL_89;
        }
        }
      }

      else
      {
        __nwlog_obj();
        v69 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v96 = "nw_endpoint_handler_get_received_application_byte_count";
        v40 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        v93 = 0;
        if (__nwlog_fault(v40, &type, &v93))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            os_log_type_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v70 = type;
            if (os_log_type_enabled(v41, type))
            {
              *(_DWORD *)buf = 136446210;
              v96 = "nw_endpoint_handler_get_received_application_byte_count";
              _os_log_impl(&dword_181A5C000, v41, v70, "%{public}s called with null handler", buf, 0xCu);
            }
          }

          else if (v93)
          {
            v81 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            os_log_type_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v82 = type;
            os_log_type_t v83 = os_log_type_enabled(v41, type);
            if (v81)
            {
              if (v83)
              {
                *(_DWORD *)buf = 136446466;
                v96 = "nw_endpoint_handler_get_received_application_byte_count";
                os_log_type_t v97 = 2082;
                BOOL v98 = (uint64_t)v81;
                _os_log_impl( &dword_181A5C000,  v41,  v82,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v81);
              if (!v40) {
                goto LABEL_86;
              }
              goto LABEL_85;
            }

            if (v83)
            {
              *(_DWORD *)buf = 136446210;
              v96 = "nw_endpoint_handler_get_received_application_byte_count";
              _os_log_impl(&dword_181A5C000, v41, v82, "%{public}s called with null handler, no backtrace", buf, 0xCu);
            }
          }

          else
          {
            __nwlog_obj();
            os_log_type_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v91 = type;
            if (os_log_type_enabled(v41, type))
            {
              *(_DWORD *)buf = 136446210;
              v96 = "nw_endpoint_handler_get_received_application_byte_count";
              _os_log_impl( &dword_181A5C000,  v41,  v91,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
            }
          }

          goto LABEL_83;
        }
      }

      if (!v40)
      {
LABEL_86:
        v37 = 0LL;
        goto LABEL_87;
      }

    free(v50);
    if (!v40) {
      goto LABEL_16;
    }
    goto LABEL_104;
  }

  char v5 = v4;
  id v6 = v5;
  if (((_BYTE)v5[17] & 8) == 0) {
    dispatch_assert_queue_V2(v5[1]);
  }

  *(void *)os_log_type_t type = 0LL;
  v69 = type;
  v70 = 0x2020000000LL;
  uint64_t v7 = MEMORY[0x1895F87A8];
  os_log_type_t v71 = 0;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 3221225472LL;
  aBlock[2] = __nw_data_transfer_report_add_snapshot_on_nw_queue_block_invoke;
  aBlock[3] = &unk_189BC9210;
  os_log_type_t v67 = type;
  char v8 = (char *)v2;
  BOOL v66 = v8;
  BOOL v9 = (void (**)(void))_Block_copy(aBlock);
  os_unfair_lock_lock((os_unfair_lock_t)v2 + 10);
  v9[2](v9);
  os_unfair_lock_unlock((os_unfair_lock_t)v2 + 10);

  if (!*((_BYTE *)v69 + 24))
  {
    os_log_type_t v64 = 0LL;
    os_log_type_t v63 = 0;
    v62 = 0LL;
    nw_connection_fillout_data_transfer_snapshot_on_nw_queue(*((void **)v2 + 3), (uint64_t *)&v64, &v62, &v63, 0);
    if (!v64 || __ROR8__(0xD37A6F4DE9BD37A7LL * v62, 3) > 0x1642C8590B21642uLL) {
      goto LABEL_12;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v11 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446978;
      __uint64_t v73 = "nw_data_transfer_report_add_snapshot_on_nw_queue";
      unint64_t v74 = 2048;
      char v75 = v8;
      __uint64_t v76 = 2048;
      v77 = v64;
      unint64_t v78 = 2048;
      char v79 = v62 / 0xB8;
      _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_DEBUG,  "%{public}s report %p adding snapshot %p with snapshot path count %lu",  buf,  0x2Au);
    }

    os_log_type_t v12 = v62;
    if (v62 - 184 <= 0xB7)
    {
      os_log_type_t v13 = *((void *)v2 + 3);
      if ((*(_BYTE *)(v13 + 109) & 0x40) != 0)
      {
        os_log_type_t v28 = nw_endpoint_handler_copy_connected_flow_handler(*(void **)(v13 + 144));
        os_log_type_t v29 = nw_endpoint_handler_copy_current_path(v28);
        os_log_type_t v30 = nw_path_copy_interface(v29);

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v31 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
        {
          if (v30)
          {
            radio_os_log_type_t type = nw_interface_get_radio_type(v30);
            BOOL v33 = nw_interface_radio_type_to_string(radio_type);
          }

          else
          {
            BOOL v33 = "none";
          }

          dispatch_workloop_t v34 = *((void *)v8 + 4);
          if (v34)
          {
            v35 = nw_interface_get_radio_type(*((void **)v8 + 4));
            id v36 = nw_interface_radio_type_to_string(v35);
          }

          else
          {
            id v36 = "none";
          }

          *(_DWORD *)buf = 136447490;
          __uint64_t v73 = "nw_data_transfer_report_add_snapshot_on_nw_queue";
          unint64_t v74 = 2048;
          char v75 = v8;
          __uint64_t v76 = 2112;
          v77 = v30;
          unint64_t v78 = 2080;
          char v79 = (unint64_t)v33;
          v80 = 2112;
          v81 = v34;
          v82 = 2080;
          os_log_type_t v83 = v36;
          _os_log_impl( &dword_181A5C000,  v31,  OS_LOG_TYPE_DEBUG,  "%{public}s report %p got snapshot for interface %@[%s] (currently collecting interface: %@[%s])",  buf,  0x3Eu);
        }

        v58[0] = v7;
        v58[1] = 3221225472LL;
        v58[2] = __nw_data_transfer_report_add_snapshot_on_nw_queue_block_invoke_166;
        v58[3] = &unk_189BC75E8;
        v59 = v8;
        BOOL v61 = v64;
        v37 = v30;
        os_log_type_t v60 = v37;
        v38 = (void (**)(void))_Block_copy(v58);
        os_unfair_lock_lock((os_unfair_lock_t)v2 + 10);
        v38[2](v38);
        os_unfair_lock_unlock((os_unfair_lock_t)v2 + 10);

        goto LABEL_12;
      }
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v14 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      __uint64_t v73 = "nw_data_transfer_report_add_snapshot_on_nw_queue";
      unint64_t v74 = 2048;
      char v75 = v8;
      _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_DEBUG,  "%{public}s report %p adding multipath snapshot",  buf,  0x16u);
    }

    if (v12 < 0xB8)
    {
LABEL_12:
      if (v63 && v64) {
        free(v64);
      }
      goto LABEL_15;
    }

    os_log_type_t v15 = 0LL;
    if (v12 / 0xB8 <= 1) {
      int v16 = 1LL;
    }
    else {
      int v16 = v12 / 0xB8;
    }
    while (1)
    {
      id v18 = (nw_data_transfer_snapshot *)((char *)v64 + 184 * v15);
      var0 = v18->var0;
      id v17 = (nw_data_transfer_path_report *)(v8 + 56);
      if (v18->var0)
      {
        char v20 = (unsigned int *)*((void *)v8 + 51);
        os_log_type_t v21 = v20 ? v20[2] : 0LL;
        id v17 = (nw_data_transfer_path_report *)(v8 + 56);
        if (var0 != v21)
        {
          v22 = *((_DWORD *)v8 + 11);
          if (v22 < 2)
          {
LABEL_44:
            nw_data_transfer_add_initial_snapshot(v8, v20, (NWConcrete_nw_interface **)v64 + 23 * v15);
            goto LABEL_29;
          }

          uint64_t v23 = 0LL;
          __int16 v24 = *((void *)v8 + 52);
          LODWORD(v25) = v22 - 1;
          else {
            v25 = v25;
          }
          os_log_type_t v26 = (uint64_t *)(v24 + 352);
          while (1)
          {
            id v27 = *v26;
            if (*v26) {
              id v27 = *(unsigned int *)(v27 + 8);
            }
            if (var0 == v27) {
              break;
            }
            ++v23;
            v26 += 45;
            if (v25 == v23) {
              goto LABEL_44;
            }
          }

          id v17 = (nw_data_transfer_path_report *)(v24 + 360 * v23);
        }
      }

      nw_data_transfer_update_path_report_end(v17, (nw_data_transfer_snapshot *)v64 + v15);
      nw_data_transfer_update_path_report_begin(v17, v18);
LABEL_29:
      if (++v15 == v16) {
        goto LABEL_12;
      }
    }
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v10 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446466;
    __uint64_t v73 = "nw_data_transfer_report_add_snapshot_on_nw_queue";
    unint64_t v74 = 2048;
    char v75 = v8;
    _os_log_impl( &dword_181A5C000,  v10,  OS_LOG_TYPE_DEBUG,  "%{public}s skipping snapshot for collected report %p",  buf,  0x16u);
  }

LABEL_15:
  _Block_object_dispose(type, 8);
LABEL_16:
}

  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
  return result;
}

  *(void *)a3 = v8;
  *(void *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = result;
  *(void *)(a3 + 24) = v10;
  return result;
}

        free(v43);
        if (!v20) {
          goto LABEL_135;
        }
        goto LABEL_133;
      }

      xpc_object_t value = xpc_int64_get_value(v18);
      v37 = value;
      if (!value) {
        goto LABEL_135;
      }
      if (!(value >> 31))
      {
        __nwlog_obj();
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446466;
        BOOL v101 = "networkd_privileged_teardown_feth_pair";
        os_log_type_t v102 = 1024;
        *(_DWORD *)os_log_type_t v103 = v37;
        os_log_type_t v39 = (const char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        BOOL v98 = 0;
        if (__nwlog_fault(v39, &type, &v98))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v41 = type;
            if (os_log_type_enabled(v40, type))
            {
              *(_DWORD *)buf = 136446466;
              BOOL v101 = "networkd_privileged_teardown_feth_pair";
              os_log_type_t v102 = 1024;
              *(_DWORD *)os_log_type_t v103 = v37;
              _os_log_impl( &dword_181A5C000,  v40,  v41,  "%{public}s received failure result code %{darwin.errno}d",  buf,  0x12u);
            }
          }

          else if (v98)
          {
            BOOL v66 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v67 = type;
            v68 = os_log_type_enabled(v40, type);
            if (v66)
            {
              if (v68)
              {
                *(_DWORD *)buf = 136446722;
                BOOL v101 = "networkd_privileged_teardown_feth_pair";
                os_log_type_t v102 = 1024;
                *(_DWORD *)os_log_type_t v103 = v37;
                *(_WORD *)&v103[4] = 2082;
                *(void *)&v103[6] = v66;
                _os_log_impl( &dword_181A5C000,  v40,  v67,  "%{public}s received failure result code %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
              }

              free(v66);
              if (!v39) {
                goto LABEL_135;
              }
LABEL_178:
              os_log_type_t v65 = (char *)v39;
              goto LABEL_134;
            }

            if (v68)
            {
              *(_DWORD *)buf = 136446466;
              BOOL v101 = "networkd_privileged_teardown_feth_pair";
              os_log_type_t v102 = 1024;
              *(_DWORD *)os_log_type_t v103 = v37;
              _os_log_impl( &dword_181A5C000,  v40,  v67,  "%{public}s received failure result code %{darwin.errno}d, no backtrace",  buf,  0x12u);
            }
          }

          else
          {
            __nwlog_obj();
            v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            unint64_t v74 = type;
            if (os_log_type_enabled(v40, type))
            {
              *(_DWORD *)buf = 136446466;
              BOOL v101 = "networkd_privileged_teardown_feth_pair";
              os_log_type_t v102 = 1024;
              *(_DWORD *)os_log_type_t v103 = v37;
              _os_log_impl( &dword_181A5C000,  v40,  v74,  "%{public}s received failure result code %{darwin.errno}d, backtrace limit exceeded",  buf,  0x12u);
            }
          }
        }

    free(v40);
    if (!v18) {
      goto LABEL_137;
    }
    goto LABEL_136;
  }

  xpc_object_t value = xpc_int64_get_value(v16);
  id v36 = value;
  if (value)
  {
    if (!(value >> 31))
    {
      __nwlog_obj();
      v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v38 = v37;
      if ((_DWORD)v36 == 6)
      {
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
          v85 = 1024;
          *(_DWORD *)v86 = 6;
          _os_log_impl( &dword_181A5C000,  v38,  OS_LOG_TYPE_ERROR,  "%{public}s received failure result code %{darwin.errno}d",  buf,  0x12u);
        }

        goto LABEL_137;
      }

      *(_DWORD *)buf = 136446466;
      v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
      v85 = 1024;
      *(_DWORD *)v86 = v36;
      BOOL v57 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v81 = 0;
      if (__nwlog_fault(v57, &type, &v81))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          os_log_type_t v65 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          BOOL v66 = type;
          if (os_log_type_enabled(v65, type))
          {
            *(_DWORD *)buf = 136446466;
            v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
            v85 = 1024;
            *(_DWORD *)v86 = v36;
            _os_log_impl( &dword_181A5C000,  v65,  v66,  "%{public}s received failure result code %{darwin.errno}d",  buf,  0x12u);
          }
        }

        else if (v81)
        {
          char v75 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v65 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          __uint64_t v76 = type;
          v77 = os_log_type_enabled(v65, type);
          if (v75)
          {
            if (v77)
            {
              *(_DWORD *)buf = 136446722;
              v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
              v85 = 1024;
              *(_DWORD *)v86 = v36;
              *(_WORD *)&v86[4] = 2082;
              *(void *)&v86[6] = v75;
              _os_log_impl( &dword_181A5C000,  v65,  v76,  "%{public}s received failure result code %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
            }

            free(v75);
            if (!v57) {
              goto LABEL_137;
            }
            goto LABEL_189;
          }

          if (v77)
          {
            *(_DWORD *)buf = 136446466;
            v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
            v85 = 1024;
            *(_DWORD *)v86 = v36;
            _os_log_impl( &dword_181A5C000,  v65,  v76,  "%{public}s received failure result code %{darwin.errno}d, no backtrace",  buf,  0x12u);
          }
        }

        else
        {
          __nwlog_obj();
          os_log_type_t v65 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v80 = type;
          if (os_log_type_enabled(v65, type))
          {
            *(_DWORD *)buf = 136446466;
            v84 = "networkd_privileged_set_opportunistic_async_block_invoke";
            v85 = 1024;
            *(_DWORD *)v86 = v36;
            _os_log_impl( &dword_181A5C000,  v65,  v80,  "%{public}s received failure result code %{darwin.errno}d, backtrace limit exceeded",  buf,  0x12u);
          }
        }
      }

    goto LABEL_138;
  }

  id v6 = (char *)MEMORY[0x186E12534](v4);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v7 = (id)gLogObj;
  *(_DWORD *)buf = 136446466;
  v80 = "networkd_privileged_set_constrained_block_invoke";
  v81 = 2082;
  *(void *)v82 = v6;
  char v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  v77 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v9 = (os_log_s *)(id)gLogObj;
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446466;
      v80 = "networkd_privileged_set_constrained_block_invoke";
      v81 = 2082;
      *(void *)v82 = v6;
      _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s received unknown type XPC %{public}s", buf, 0x16u);
    }

    goto LABEL_138;
  }

  id v6 = (char *)MEMORY[0x186E12534](v4);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v7 = (id)gLogObj;
  *(_DWORD *)buf = 136446466;
  v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
  v81 = 2082;
  *(void *)v82 = v6;
  char v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  v77 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v9 = (os_log_s *)(id)gLogObj;
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446466;
      v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
      v81 = 2082;
      *(void *)v82 = v6;
      _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s received unknown type XPC %{public}s", buf, 0x16u);
    }

    goto LABEL_138;
  }

  id v6 = (char *)MEMORY[0x186E12534](v4);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v7 = (id)gLogObj;
  *(_DWORD *)buf = 136446466;
  v80 = "networkd_privileged_set_expensive_block_invoke";
  v81 = 2082;
  *(void *)v82 = v6;
  char v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  v77 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v9 = (os_log_s *)(id)gLogObj;
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446466;
      v80 = "networkd_privileged_set_expensive_block_invoke";
      v81 = 2082;
      *(void *)v82 = v6;
      _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s received unknown type XPC %{public}s", buf, 0x16u);
    }

    goto LABEL_136;
  }

  id v6 = (char *)MEMORY[0x186E12534](v4);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v7 = (id)gLogObj;
  *(_DWORD *)buf = 136446466;
  v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
  v81 = 2082;
  *(void *)v82 = v6;
  char v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  v77 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v9 = (os_log_s *)(id)gLogObj;
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446466;
      v80 = "networkd_privileged_set_throughput_estimates_block_invoke";
      v81 = 2082;
      *(void *)v82 = v6;
      _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s received unknown type XPC %{public}s", buf, 0x16u);
    }

    goto LABEL_136;
  }

  id v6 = (char *)MEMORY[0x186E12534](v4);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v7 = (id)gLogObj;
  *(_DWORD *)buf = 136446466;
  v80 = "networkd_privileged_set_radio_type_block_invoke";
  v81 = 2082;
  *(void *)v82 = v6;
  char v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  v77 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v9 = (os_log_s *)(id)gLogObj;
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446466;
      v80 = "networkd_privileged_set_radio_type_block_invoke";
      v81 = 2082;
      *(void *)v82 = v6;
      _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s received unknown type XPC %{public}s", buf, 0x16u);
    }

  __break(1u);
  return result;
}

    __break(1u);
    return;
  }

  char v5 = (uint64_t *)(a1 + 32);
  uint64_t v4 = *(dispatch_data_s **)(a1 + 32);
  id v6 = *(void *)(a1 + 80);
  *(void *)os_log_type_t type = 0LL;
  BOOL v61 = type;
  v62 = 0x2000000000LL;
  os_log_type_t v63 = 0LL;
  v59[0] = 0LL;
  v59[1] = v59;
  v59[2] = 0x2000000000LL;
  v59[3] = v3;
  if (v4)
  {
    *(void *)applier = MEMORY[0x1895F87A8];
    *(void *)&applier[8] = 0x40000000LL;
    *(void *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
    *(void *)&applier[24] = &unk_189BBF598;
    *(void *)&applier[40] = v59;
    *(void *)&applier[48] = v6;
    *(void *)&applier[32] = type;
    dispatch_data_apply(v4, applier);
    uint64_t v7 = *((void *)v61 + 3);
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  _Block_object_dispose(v59, 8);
  _Block_object_dispose(type, 8);
LABEL_7:
  if (v7 != *(void *)(a1 + 80))
  {
    if (nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 40) + 56LL))) {
      goto LABEL_42;
    }
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
    }
    BOOL v14 = (os_log_s *)(id)gconnection_groupLogObj;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      os_log_type_t v15 = *(void *)(a1 + 32);
      int v16 = *(_DWORD *)(*(void *)(a1 + 40) + 168LL);
      id v17 = *(void *)(a1 + 80);
      *(_DWORD *)applier = 136446978;
      *(void *)&applier[4] = "nw_connection_group_send_message_on_socket_block_invoke";
      *(_WORD *)&applier[12] = 1024;
      *(_DWORD *)&applier[14] = v16;
      *(_WORD *)&applier[18] = 2048;
      *(void *)&applier[20] = v17;
      *(_WORD *)&applier[28] = 2112;
      *(void *)&applier[30] = v15;
      _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_ERROR,  "%{public}s [G%u] Failed to copy %zu bytes of content from %@",  applier,  0x26u);
    }

    goto LABEL_22;
  }

  address = nw_endpoint_get_address(*(nw_endpoint_t *)(a1 + 48));
  logging_disabled = nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 40) + 56LL));
  if (!address)
  {
    if (logging_disabled) {
      goto LABEL_42;
    }
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
    }
    BOOL v14 = (os_log_s *)(id)gconnection_groupLogObj;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      id v18 = *(void *)(a1 + 48);
      char v19 = *(_DWORD *)(*(void *)(a1 + 40) + 168LL);
      *(_DWORD *)applier = 136446722;
      *(void *)&applier[4] = "nw_connection_group_send_message_on_socket_block_invoke";
      *(_WORD *)&applier[12] = 1024;
      *(_DWORD *)&applier[14] = v19;
      *(_WORD *)&applier[18] = 2112;
      *(void *)&applier[20] = v18;
      _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_ERROR,  "%{public}s [G%u] Failed to access address from %@",  applier,  0x1Cu);
    }

    if (v45) {
      free(v45);
    }
    goto LABEL_14;
  }

  os_log_type_t v15 = (void *)*((void *)v11 + 15);
  if (v15)
  {
    int v16 = v15;
    id v17 = v16;
    if (((_BYTE)v16[17] & 8) == 0) {
      dispatch_assert_queue_V2(v16[1]);
    }
  }

  if (nw_protocol_definition_get_variant(*((void **)v11 + 1)) == 3)
  {
    id v18 = *((id *)v11 + 6);
    char v19 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]( (id *)objc_alloc(&OBJC_CLASS___NWConcrete_nw_parameters),  v18,  0,  0);

    if (v19)
    {
      char v20 = (id)v19;
      os_log_type_t v21 = v20;
      if ((a2 & 1) != 0)
      {
        *(_DWORD *)(v20[13] + 84LL) = 0;
        v22 = v20[12] & 0xFFFFFFFFFFFFFF3FLL | 0x80;
        v20[12] = v22;
        uint64_t v23 = 0x8000LL;
      }

      else
      {
        uint64_t v23 = 0LL;
        v22 = v20[12];
      }

      v20[12] = v22 & 0xFFFFFFFFFFFF7FFFLL | v23;

      if (v13) {
        v13[2](v13, v21);
      }
      if (a3) {
        os_log_type_t v30 = 3;
      }
      else {
        os_log_type_t v30 = 1;
      }
      v11[404] = v30 | v11[404] & 0xFC;
      *((void *)v11 + 31) = 0LL;
      objc_storeStrong((id *)v11 + 32, a4);
      if (v14)
      {
        v31 = nw_connection_create_from_protocol_on_nw_queue(*((void **)v11 + 5), v21, (nw_protocol *)(v11 - 96));
        if (v31)
        {
          (*((void (**)(id, void, void *))v14 + 2))(v14, *((void *)v11 + 31), v31);

LABEL_34:
          v11[404] &= 0xFCu;
          dispatch_workloop_t v34 = (void *)*((void *)v11 + 32);
          *((void *)v11 + 32) = 0LL;

          v25 = *((void *)v11 + 31);
LABEL_65:

          goto LABEL_66;
        }

        if ((v11[405] & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v38 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            uint64_t v55 = "nw_protocol_instance_add_new_flow";
            v56 = 2082;
            BOOL v57 = v11 + 407;
            v58 = 2080;
            v59 = " ";
            _os_log_impl( &dword_181A5C000,  v38,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%snw_connection_create_from_protocol_on_nw_queue failed",  buf,  0x20u);
          }
        }
      }

      else
      {
        os_log_type_t v32 = (uint64_t (***)(void))*((void *)v11 + 3);
        if (v32)
        {
          if (*v32)
          {
            BOOL v33 = **v32;
            if (v33)
            {
              if ((v33() & 1) != 0) {
                goto LABEL_34;
              }
            }
          }

          if ((v11[405] & 0x80000000) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v40 = (os_log_s *)(id)gLogObj;
            if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446722;
              uint64_t v55 = "nw_protocol_instance_add_new_flow";
              v56 = 2082;
              BOOL v57 = v11 + 407;
              v58 = 2080;
              v59 = " ";
              _os_log_impl( &dword_181A5C000,  v40,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%sListener rejected new flow",  buf,  0x20u);
            }
          }
        }

        else if ((v11[405] & 0x80000000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v39 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            uint64_t v55 = "nw_protocol_instance_add_new_flow";
            v56 = 2082;
            BOOL v57 = v11 + 407;
            v58 = 2080;
            v59 = " ";
            _os_log_impl( &dword_181A5C000,  v39,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%sNo listener registered, cannot accept new flow",  buf,  0x20u);
          }
        }
      }

      v11[404] &= 0xFCu;
      os_log_type_t v41 = (void *)*((void *)v11 + 32);
      *((void *)v11 + 32) = 0LL;

LABEL_64:
      v25 = 0LL;
      goto LABEL_65;
    }

    if (v11[405] < 0) {
      goto LABEL_64;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v26 = (id)gLogObj;
    *(_DWORD *)buf = 136446722;
    uint64_t v55 = "nw_protocol_instance_add_new_flow";
    v56 = 2082;
    BOOL v57 = v11 + 407;
    v58 = 2080;
    v59 = " ";
    id v27 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v52 = 0;
    if (__nwlog_fault(v27, &type, &v52))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v28 = (os_log_s *)(id)gLogObj;
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446722;
          uint64_t v55 = "nw_protocol_instance_add_new_flow";
          v56 = 2082;
          BOOL v57 = v11 + 407;
          v58 = 2080;
          v59 = " ";
          _os_log_impl( &dword_181A5C000,  v28,  v29,  "%{public}s %{public}s%sInstance parameters are NULL when opening inbound flow",  buf,  0x20u);
        }
      }

      else if (v52)
      {
        v35 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v28 = (os_log_s *)(id)gLogObj;
        id v36 = type;
        v37 = os_log_type_enabled(v28, type);
        if (v35)
        {
          if (v37)
          {
            *(_DWORD *)buf = 136446978;
            uint64_t v55 = "nw_protocol_instance_add_new_flow";
            v56 = 2082;
            BOOL v57 = v11 + 407;
            v58 = 2080;
            v59 = " ";
            os_log_type_t v60 = 2082;
            BOOL v61 = v35;
            _os_log_impl( &dword_181A5C000,  v28,  v36,  "%{public}s %{public}s%sInstance parameters are NULL when opening inbound flow, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v35);
          if (!v27) {
            goto LABEL_64;
          }
          goto LABEL_63;
        }

        if (v37)
        {
          *(_DWORD *)buf = 136446722;
          uint64_t v55 = "nw_protocol_instance_add_new_flow";
          v56 = 2082;
          BOOL v57 = v11 + 407;
          v58 = 2080;
          v59 = " ";
          _os_log_impl( &dword_181A5C000,  v28,  v36,  "%{public}s %{public}s%sInstance parameters are NULL when opening inbound flow, no backtrace",  buf,  0x20u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v28 = (os_log_s *)(id)gLogObj;
        BOOL v42 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446722;
          uint64_t v55 = "nw_protocol_instance_add_new_flow";
          v56 = 2082;
          BOOL v57 = v11 + 407;
          v58 = 2080;
          v59 = " ";
          _os_log_impl( &dword_181A5C000,  v28,  v42,  "%{public}s %{public}s%sInstance parameters are NULL when opening inbound flow, backtrace limit exceeded",  buf,  0x20u);
        }
      }
    }

    if (!v27) {
      goto LABEL_64;
    }
LABEL_63:
    free(v27);
    goto LABEL_64;
  }

  if ((v11[405] & 0x80000000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v24 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      uint64_t v55 = "nw_protocol_instance_add_new_flow";
      v56 = 2082;
      BOOL v57 = v11 + 407;
      v58 = 2080;
      v59 = " ";
      _os_log_impl( &dword_181A5C000,  v24,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%sCannot add new flows to a non-multiplexing protocol",  buf,  0x20u);
    }
  }

                if (v36) {
LABEL_84:
                }
                  free(v36);
LABEL_306:
                os_log_type_t v91 = 0LL;
                goto LABEL_307;
              }

        free(v31);
        if (!v11) {
          goto LABEL_117;
        }
        goto LABEL_116;
      }

        if (v16) {
          free(v16);
        }
        BOOL v9 = 0LL;
        goto LABEL_14;
      }

      __nwlog_obj();
      char v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v40 = "nw_protocol_implementation_remove_listen_handler";
      int v16 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v37 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v20 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_protocol_implementation_remove_listen_handler";
          _os_log_impl(&dword_181A5C000, v17, v20, "%{public}s called with null instance->parent_definition", buf, 0xCu);
        }

        goto LABEL_82;
      }

      if (!v37)
      {
        __nwlog_obj();
        id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v35 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_protocol_implementation_remove_listen_handler";
          _os_log_impl( &dword_181A5C000,  v17,  v35,  "%{public}s called with null instance->parent_definition, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_82;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v29 = type;
      os_log_type_t v30 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_protocol_implementation_remove_listen_handler";
          _os_log_impl( &dword_181A5C000,  v17,  v29,  "%{public}s called with null instance->parent_definition, no backtrace",  buf,  0xCu);
        }

        goto LABEL_82;
      }

      if (v30)
      {
        *(_DWORD *)buf = 136446466;
        v40 = "nw_protocol_implementation_remove_listen_handler";
        os_log_type_t v41 = 2082;
        BOOL v42 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v17,  v29,  "%{public}s called with null instance->parent_definition, dumping backtrace:%{public}s",  buf,  0x16u);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v40 = "nw_protocol_implementation_remove_listen_handler";
      int v16 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v37 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_protocol_implementation_remove_listen_handler";
          _os_log_impl(&dword_181A5C000, v17, v18, "%{public}s called with null instance", buf, 0xCu);
        }

        goto LABEL_82;
      }

      if (!v37)
      {
        __nwlog_obj();
        id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        dispatch_workloop_t v34 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_protocol_implementation_remove_listen_handler";
          _os_log_impl( &dword_181A5C000,  v17,  v34,  "%{public}s called with null instance, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_82;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v27 = type;
      os_log_type_t v28 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          v40 = "nw_protocol_implementation_remove_listen_handler";
          _os_log_impl(&dword_181A5C000, v17, v27, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }

        goto LABEL_82;
      }

      if (v28)
      {
        *(_DWORD *)buf = 136446466;
        v40 = "nw_protocol_implementation_remove_listen_handler";
        os_log_type_t v41 = 2082;
        BOOL v42 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v17,  v27,  "%{public}s called with null instance, dumping backtrace:%{public}s",  buf,  0x16u);
      }
    }

    if (v26) {
      free(v26);
    }
    goto LABEL_18;
  }

  __nwlog_obj();
  os_log_type_t v21 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v51 = "__nw_protocol_disconnected";
  v22 = (char *)_os_log_send_and_compose_impl();

  v48[0] = OS_LOG_TYPE_ERROR;
  v45[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v22, v48, v45))
  {
    if (v48[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v24 = v48[0];
      if (os_log_type_enabled(v23, v48[0]))
      {
        *(_DWORD *)buf = 136446210;
        v51 = "__nw_protocol_disconnected";
        _os_log_impl(&dword_181A5C000, v23, v24, "%{public}s called with null protocol", buf, 0xCu);
      }
    }

    else if (v45[0])
    {
      BOOL v33 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      dispatch_workloop_t v34 = v48[0];
      v35 = os_log_type_enabled(v23, v48[0]);
      if (v33)
      {
        if (v35)
        {
          *(_DWORD *)buf = 136446466;
          v51 = "__nw_protocol_disconnected";
          os_log_type_t v52 = 2082;
          v53 = v33;
          _os_log_impl( &dword_181A5C000,  v23,  v34,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v33);
        goto LABEL_78;
      }

      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        v51 = "__nw_protocol_disconnected";
        _os_log_impl(&dword_181A5C000, v23, v34, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v42 = v48[0];
      if (os_log_type_enabled(v23, v48[0]))
      {
        *(_DWORD *)buf = 136446210;
        v51 = "__nw_protocol_disconnected";
        _os_log_impl( &dword_181A5C000,  v23,  v42,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

    if (v26) {
      free(v26);
    }
    goto LABEL_18;
  }

  __nwlog_obj();
  os_log_type_t v21 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v51 = "__nw_protocol_connected";
  v22 = (char *)_os_log_send_and_compose_impl();

  v48[0] = OS_LOG_TYPE_ERROR;
  v45[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v22, v48, v45))
  {
    if (v48[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v24 = v48[0];
      if (os_log_type_enabled(v23, v48[0]))
      {
        *(_DWORD *)buf = 136446210;
        v51 = "__nw_protocol_connected";
        _os_log_impl(&dword_181A5C000, v23, v24, "%{public}s called with null protocol", buf, 0xCu);
      }
    }

    else if (v45[0])
    {
      BOOL v33 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      dispatch_workloop_t v34 = v48[0];
      v35 = os_log_type_enabled(v23, v48[0]);
      if (v33)
      {
        if (v35)
        {
          *(_DWORD *)buf = 136446466;
          v51 = "__nw_protocol_connected";
          os_log_type_t v52 = 2082;
          v53 = v33;
          _os_log_impl( &dword_181A5C000,  v23,  v34,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v33);
        goto LABEL_78;
      }

      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        v51 = "__nw_protocol_connected";
        _os_log_impl(&dword_181A5C000, v23, v34, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v42 = v48[0];
      if (os_log_type_enabled(v23, v48[0]))
      {
        *(_DWORD *)buf = 136446210;
        v51 = "__nw_protocol_connected";
        _os_log_impl( &dword_181A5C000,  v23,  v42,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

    if (v34) {
      free(v34);
    }
    goto LABEL_97;
  }

  if (!a3)
  {
    __nwlog_obj();
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
    v38 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v65 = 0;
    if (__nwlog_fault(v38, &type, &v65))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v40 = type;
        if (os_log_type_enabled(v39, type))
        {
          *(_DWORD *)buf = 136446210;
          v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
          _os_log_impl(&dword_181A5C000, v39, v40, "%{public}s called with null experiment_identifier", buf, 0xCu);
        }
      }

      else if (v65)
      {
        v51 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v52 = type;
        v53 = os_log_type_enabled(v39, type);
        if (v51)
        {
          if (v53)
          {
            *(_DWORD *)buf = 136446466;
            v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
            v69 = 2082;
            v70 = v51;
            _os_log_impl( &dword_181A5C000,  v39,  v52,  "%{public}s called with null experiment_identifier, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v51);
          goto LABEL_89;
        }

        if (v53)
        {
          *(_DWORD *)buf = 136446210;
          v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
          _os_log_impl( &dword_181A5C000,  v39,  v52,  "%{public}s called with null experiment_identifier, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v59 = type;
        if (os_log_type_enabled(v39, type))
        {
          *(_DWORD *)buf = 136446210;
          v68 = "nw_connection_create_experimental_probe_configuration_block_for_protocol_locked";
          _os_log_impl( &dword_181A5C000,  v39,  v59,  "%{public}s called with null experiment_identifier, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

  if (v40) {
    free(v40);
  }
LABEL_63:
}

        goto LABEL_84;
      }

      if (!v42)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v7 = (os_log_s *)(id)gconnectionLogObj;
        BOOL v33 = type;
        if (os_log_type_enabled(v7, type))
        {
          dispatch_workloop_t v34 = *(_DWORD *)(*(void *)(a1 + 32) + 448LL);
          *(_DWORD *)buf = 136446466;
          v45 = "nw_connection_set_internet_fallback_endpoint_block_invoke";
          os_log_type_t v46 = 1024;
          os_log_type_t v47 = v34;
          _os_log_impl( &dword_181A5C000,  v7,  v33,  "%{public}s [C%u] Connection is local only, backtrace limit exceeded",  buf,  0x12u);
        }

        goto LABEL_83;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v7 = (os_log_s *)(id)gconnectionLogObj;
      v22 = type;
      uint64_t v23 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v23)
        {
          v38 = *(_DWORD *)(*(void *)(a1 + 32) + 448LL);
          *(_DWORD *)buf = 136446466;
          v45 = "nw_connection_set_internet_fallback_endpoint_block_invoke";
          os_log_type_t v46 = 1024;
          os_log_type_t v47 = v38;
          _os_log_impl(&dword_181A5C000, v7, v22, "%{public}s [C%u] Connection is local only, no backtrace", buf, 0x12u);
        }

        goto LABEL_83;
      }

      if (v23)
      {
        __int16 v24 = *(_DWORD *)(*(void *)(a1 + 32) + 448LL);
        *(_DWORD *)buf = 136446722;
        v45 = "nw_connection_set_internet_fallback_endpoint_block_invoke";
        os_log_type_t v46 = 1024;
        os_log_type_t v47 = v24;
        v48 = 2082;
        id v49 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v7,  v22,  "%{public}s [C%u] Connection is local only, dumping backtrace:%{public}s",  buf,  0x1Cu);
      }

      goto LABEL_71;
    }

  if (v36) {
    free(v36);
  }
  os_log_type_t v12 = 0LL;
LABEL_50:

  return v12;
}

    if (v39) {
      free(v39);
    }
    goto LABEL_56;
  }

  nw_context_assert_queue(v7[3]);
  if ((*((_BYTE *)v8 + 109) & 0x40) == 0)
  {
    BOOL v9 = v8[2];
    if (v9 && !nw_path_parameters_get_logging_disabled(v9[13]))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      os_log_type_t v10 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        os_log_type_t v11 = *((_DWORD *)v8 + 112);
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_start_throughput_monitor_on_nw_queue";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v11;
        _os_log_impl( &dword_181A5C000,  v10,  OS_LOG_TYPE_ERROR,  "%{public}s [C%u] Connection does not have a connected handler",  buf,  0x12u);
      }
    }

    goto LABEL_56;
  }

  int v16 = v8;
  id v17 = v16[2];

  multipath = nw_parameters_get_multipath(v17);
  if (multipath)
  {
    char v19 = v16[2];
    if (v19 && !nw_path_parameters_get_logging_disabled(v19[13]))
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      char v20 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        os_log_type_t v21 = *((_DWORD *)v16 + 112);
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_start_throughput_monitor_on_nw_queue";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v21;
        _os_log_impl( &dword_181A5C000,  v20,  OS_LOG_TYPE_ERROR,  "%{public}s [C%u] MPTCP incompatible with minimum throughput",  buf,  0x12u);
      }
    }

    goto LABEL_56;
  }

  *((_DWORD *)v16 + 94) = v5;
  if (!v16[46])
  {
    v69 = 0LL;
    memset(v68, 0, sizeof(v68));
    BOOL v66 = 0u;
    os_log_type_t v67 = 0u;
    memset(buf, 0, sizeof(buf));
    v22 = v16;
    nw_context_assert_queue(v8[3]);
    uint64_t v23 = v22;
    if (nw_parameters_get_ip_protocol(v16[2]) == 6)
    {
      __int16 v24 = nw_endpoint_handler_fillout_tcp_info(v23[18], buf);

      if (v24)
      {
        v23[42] = (void *)(*(void *)((char *)&v68[2] + 12) + *(void *)((char *)v68 + 12));
        v25 = mach_continuous_time();
        if (v25 <= 1) {
          os_log_type_t v26 = 1LL;
        }
        else {
          os_log_type_t v26 = v25;
        }
        v23[43] = (void *)v26;
        id v27 = v8[3];
        *(void *)v56 = MEMORY[0x1895F87A8];
        BOOL v57 = 3221225472LL;
        v58 = __nw_connection_start_throughput_monitor_on_nw_queue_block_invoke;
        v59 = &unk_189BC93A0;
        os_log_type_t v60 = v23;
        source = nw_queue_context_create_source(v27, 2, 3, 0, v56, 0LL);
        if (source)
        {
          os_log_type_t v29 = dispatch_time(0x8000000000000000LL, 1000000000LL);
          if (*(void *)source)
          {
            dispatch_source_set_timer(*(dispatch_source_t *)source, v29, 0x3B9ACA00uLL, 0xF4240uLL);
          }

          else
          {
            *(void *)(source + 32) = v29;
            *(void *)(source + 40) = 1000000000LL;
            if (*(_BYTE *)(source + 48) && *(_BYTE *)(source + 49)) {
              nw_queue_source_run_timer(source, v29);
            }
          }

          nw_queue_activate_source(source, v29);
          v16[46] = (id)source;
LABEL_55:

          goto LABEL_56;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v30 = (id)gLogObj;
        *(_DWORD *)BOOL v61 = 136446210;
        v62 = "nw_connection_start_throughput_monitor_on_nw_queue";
        v31 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        BOOL v54 = 0;
        if ((__nwlog_fault(v31, &type, &v54) & 1) != 0)
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v32 = (os_log_s *)(id)gLogObj;
            BOOL v33 = type;
            if (os_log_type_enabled(v32, type))
            {
              *(_DWORD *)BOOL v61 = 136446210;
              v62 = "nw_connection_start_throughput_monitor_on_nw_queue";
              _os_log_impl( &dword_181A5C000,  v32,  v33,  "%{public}s nw_queue_context_create_source(timer) failed",  v61,  0xCu);
            }
          }

          else if (v54)
          {
            dispatch_workloop_t v34 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v32 = (os_log_s *)(id)gLogObj;
            v35 = type;
            id v36 = os_log_type_enabled(v32, type);
            if (v34)
            {
              if (v36)
              {
                *(_DWORD *)BOOL v61 = 136446466;
                v62 = "nw_connection_start_throughput_monitor_on_nw_queue";
                os_log_type_t v63 = 2082;
                os_log_type_t v64 = v34;
                _os_log_impl( &dword_181A5C000,  v32,  v35,  "%{public}s nw_queue_context_create_source(timer) failed, dumping backtrace:%{public}s",  v61,  0x16u);
              }

              free(v34);
              goto LABEL_53;
            }

            if (v36)
            {
              *(_DWORD *)BOOL v61 = 136446210;
              v62 = "nw_connection_start_throughput_monitor_on_nw_queue";
              _os_log_impl( &dword_181A5C000,  v32,  v35,  "%{public}s nw_queue_context_create_source(timer) failed, no backtrace",  v61,  0xCu);
            }
          }

          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v32 = (os_log_s *)(id)gLogObj;
            v37 = type;
            if (os_log_type_enabled(v32, type))
            {
              *(_DWORD *)BOOL v61 = 136446210;
              v62 = "nw_connection_start_throughput_monitor_on_nw_queue";
              _os_log_impl( &dword_181A5C000,  v32,  v37,  "%{public}s nw_queue_context_create_source(timer) failed, backtrace limit exceeded",  v61,  0xCu);
            }
          }
        }

        if (v35) {
          free(v35);
        }
        *(_DWORD *)(a1 + 24) = 0;
        return;
      }

      dispatch_workloop_t v44 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v36 = gLogObj;
      v37 = type;
      v45 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (!v44)
      {
        if (v45)
        {
          uint64_t v55 = *(_DWORD *)(a1 + 24);
          *(_DWORD *)buf = 136446466;
          __uint64_t v76 = "frame_cache_purge_if_necessary";
          v77 = 1024;
          *(_DWORD *)unint64_t v78 = v55;
          os_log_type_t v39 = "%{public}s no more frames in frame cache, we thought we had %u frames, no backtrace";
          goto LABEL_78;
        }

        goto LABEL_83;
      }

      if (v45)
      {
        os_log_type_t v46 = *(_DWORD *)(a1 + 24);
        *(_DWORD *)buf = 136446722;
        __uint64_t v76 = "frame_cache_purge_if_necessary";
        v77 = 1024;
        *(_DWORD *)unint64_t v78 = v46;
        *(_WORD *)&v78[4] = 2082;
        *(void *)&v78[6] = v44;
        os_log_type_t v47 = "%{public}s no more frames in frame cache, we thought we had %u frames, dumping backtrace:%{public}s";
        v48 = (os_log_s *)v36;
        id v49 = v37;
        v50 = 28;
LABEL_70:
        _os_log_impl(&dword_181A5C000, v48, v49, v47, buf, v50);
        goto LABEL_71;
      }

      goto LABEL_71;
    }

          if (v41) {
            free(v41);
          }
          *(void *)(a2 + 200) = -1LL;
          goto LABEL_86;
        }

        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_create_standalone_aead_request";
        os_log_type_t v100 = (char *)_os_log_send_and_compose_impl();
        LOBYTE(v138) = 16;
        LOBYTE(v137) = 0;
        if (__nwlog_fault(v100, &v138, &v137))
        {
          if (v138 == 17)
          {
            BOOL v101 = (os_log_s *)__nwlog_obj();
            os_log_type_t v102 = v138;
            if (os_log_type_enabled(v101, (os_log_type_t)v138))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http_create_standalone_aead_request";
              os_log_type_t v103 = "%{public}s called with null body_content";
LABEL_217:
              _os_log_impl(&dword_181A5C000, v101, v102, v103, buf, 0xCu);
            }
          }

          else if ((_BYTE)v137)
          {
            __int16 v111 = (char *)__nw_create_backtrace_string();
            BOOL v101 = (os_log_s *)__nwlog_obj();
            os_log_type_t v102 = v138;
            uint64_t v112 = os_log_type_enabled(v101, (os_log_type_t)v138);
            if (v111)
            {
              if (v112)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http_create_standalone_aead_request";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v111;
                _os_log_impl( &dword_181A5C000,  v101,  v102,  "%{public}s called with null body_content, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v111);
              goto LABEL_218;
            }

            if (v112)
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http_create_standalone_aead_request";
              os_log_type_t v103 = "%{public}s called with null body_content, no backtrace";
              goto LABEL_217;
            }
          }

          else
          {
            BOOL v101 = (os_log_s *)__nwlog_obj();
            os_log_type_t v102 = v138;
            if (os_log_type_enabled(v101, (os_log_type_t)v138))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http_create_standalone_aead_request";
              os_log_type_t v103 = "%{public}s called with null body_content, backtrace limit exceeded";
              goto LABEL_217;
            }
          }
        }

              handle = (char *)v94;
              goto LABEL_26;
            }

            if (v28) {
              goto LABEL_83;
            }
            os_log_type_t v32 = *(void *)(v94 + 424);
            if (!v32 || *(_DWORD *)(v32 + 184) == 3)
            {
              v105[0] = MEMORY[0x1895F87A8];
              v105[1] = 0x40000000LL;
              v106 = ___ZL37nw_webtransport_http2_handle_capsulesP23nw_webtransport_session_block_invoke_2;
              v107 = &__block_descriptor_tmp_56_33732;
              v108 = v9;
              BOOL v33 = *(void *)(v94 + 112);
              do
              {
                if (!v33) {
                  break;
                }
                dispatch_workloop_t v34 = *(void *)(v33 + 32);
                v35 = ((uint64_t (*)(void *))v106)(v105);
                BOOL v33 = v34;
              }

              while ((v35 & 1) != 0);
              goto LABEL_83;
            }

            v100[0] = MEMORY[0x1895F87A8];
            v100[1] = 0x40000000LL;
            BOOL v101 = ___ZL37nw_webtransport_http2_handle_capsulesP23nw_webtransport_session_block_invoke_3;
            os_log_type_t v102 = &__block_descriptor_tmp_57_33733;
            os_log_type_t v103 = v9;
            __uint64_t v104 = v32;
            uint64_t v55 = *(void *)(v94 + 112);
            do
            {
              if (!v55) {
                break;
              }
              v56 = *(void *)(v55 + 32);
              BOOL v57 = ((uint64_t (*)(void *))v101)(v100);
              uint64_t v55 = v56;
            }

            while ((v57 & 1) != 0);
            BOOL v54 = (void *)v32;
LABEL_116:
            nw_protocol_input_available(v54, v94);
            goto LABEL_83;
          }

          if (v28 <= 420171064)
          {
            if ((unint64_t)(v28 - 16770304) >= 4)
            {
              if (v28 == 420171064)
              {
                v115[0] = MEMORY[0x1895F87A8];
                v115[1] = 0x40000000LL;
                v116 = ___ZL37nw_webtransport_http2_handle_capsulesP23nw_webtransport_session_block_invoke;
                v117 = &__block_descriptor_tmp_53_33724;
                v118 = v9;
                os_log_type_t v29 = *(void *)(v94 + 112);
                do
                {
                  if (!v29) {
                    break;
                  }
                  os_log_type_t v30 = *(void *)(v29 + 32);
                  v31 = ((uint64_t (*)(void *))v116)(v115);
                  os_log_type_t v29 = v30;
                }

                while ((v31 & 1) != 0);
              }

              goto LABEL_83;
            }

            goto LABEL_80;
          }

          if ((unint64_t)(v28 - 420171065) < 2)
          {
            *(void *)os_log_type_t type = -1LL;
            v40 = v94;
            if ((nw_http_capsule_framer_parse_vle_value((uint64_t)v9, v94, (uint64_t)type) & 1) != 0)
            {
              stream = nw_webtransport_session_get_stream(v94, *(uint64_t *)type);
              if (!stream) {
                goto LABEL_83;
              }
              v45 = stream;
              v139[0] = -1LL;
              if ((nw_http_capsule_framer_parse_vle_value((uint64_t)v9, v94, (uint64_t)v139) & 1) != 0)
              {
                if ((*(_BYTE *)(v45 + 276) & 0x10) == 0)
                {
                  log = (os_log_s *)__nwlog_obj();
                  if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
                  {
                    os_log_type_t v46 = *(void *)(v45 + 88);
                    if (v46) {
                      os_log_type_t v47 = *(_DWORD *)(v46 + 460);
                    }
                    else {
                      os_log_type_t v47 = -1;
                    }
                    os_log_type_t v65 = *(uint64_t **)(v45 + 64);
                    *(_DWORD *)buf = 136448002;
                    *(void *)&uint8_t buf[4] = "nw_webtransport_http2_handle_capsules";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v45 + 192;
                    *(_WORD *)&buf[22] = 2080;
                    v151 = (uint64_t (*)(uint64_t, uint64_t))" ";
                    LOWORD(v152) = 1024;
                    *(_DWORD *)((char *)&v152 + 2) = v47;
                    HIWORD(v152) = 2048;
                    v153 = v65;
                    *(_WORD *)v154 = 2048;
                    *(void *)&v154[2] = v28;
                    *(_WORD *)&v154[10] = 2048;
                    *(void *)&v154[12] = v65;
                    v155 = 2048;
                    v156 = v139[0];
                    _os_log_impl( &dword_181A5C000,  log,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:s%lld> Received 0x%llx capsule for stream ID %llu with error code %llu",  buf,  0x4Eu);
                  }
                }

                nw_protocol_webtransport_stream_error((nw_protocol *)v45, (nw_protocol *)v94);
                nw_protocol_webtransport_stream_disconnect((nw_protocol *)v45, v66);
                goto LABEL_83;
              }

              if ((*(_BYTE *)(v94 + 548) & 2) != 0) {
                goto LABEL_83;
              }
              v58 = (os_log_s *)__nwlog_obj();
              if (!os_log_type_enabled(v58, OS_LOG_TYPE_ERROR)) {
                goto LABEL_83;
              }
              v59 = *(_DWORD *)(v94 + 460);
              *(_DWORD *)buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_webtransport_http2_handle_capsules";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v93;
              *(_WORD *)&buf[22] = 2080;
              v151 = (uint64_t (*)(uint64_t, uint64_t))" ";
              LOWORD(v152) = 1024;
              *(_DWORD *)((char *)&v152 + 2) = v59;
              HIWORD(v152) = 2048;
              v153 = (uint64_t *)v28;
              v37 = v58;
              v38 = "%{public}s %{public}s%s<i%u> Failed to parse error code from capsule 0x%llx correctly";
              os_log_type_t v39 = 48;
              goto LABEL_82;
            }

            if ((*(_BYTE *)(v94 + 548) & 2) != 0) {
              goto LABEL_83;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v48 = gLogObj;
            if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
              goto LABEL_83;
            }
          }

          else
          {
            *(void *)os_log_type_t type = -1LL;
            v40 = v94;
            if ((nw_http_capsule_framer_parse_vle_value((uint64_t)v9, v94, (uint64_t)type) & 1) != 0)
            {
              if (*(void *)type >> 60)
              {
                LOBYTE(v41) = *(_BYTE *)(v94 + 548);
                goto LABEL_89;
              }

              v50 = nw_webtransport_session_get_stream(v94, *(uint64_t *)type);
              if (v50)
              {
LABEL_106:
                if (*(_DWORD *)(v50 + 184) == 3) {
                  goto LABEL_83;
                }
                v109[0] = MEMORY[0x1895F87A8];
                v109[1] = 0x40000000LL;
                __uint64_t v110 = ___ZL37nw_webtransport_http2_handle_capsulesP23nw_webtransport_session_block_invoke_54;
                __int16 v111 = &__block_descriptor_tmp_55_33731;
                v114 = v28 == 420171068;
                uint64_t v112 = v9;
                __int16 v113 = v50;
                v51 = *(void *)(v40 + 112);
                do
                {
                  if (!v51) {
                    break;
                  }
                  os_log_type_t v52 = *(void *)(v51 + 32);
                  v53 = ((uint64_t (*)(void *))v110)(v109);
                  v51 = v52;
                }

                while ((v53 & 1) != 0);
                BOOL v54 = (void *)v50;
                if (v28 == 420171068)
                {
                  nw_protocol_input_finished((void *)v50, v94);
                  goto LABEL_83;
                }

                goto LABEL_116;
              }

              os_log_type_t v60 = *(void *)type;
              os_log_type_t v41 = *(unsigned __int8 *)(v94 + 548);
              if (*(void *)type >> 60 || ((*(_DWORD *)type ^ v41) & 1) == 0)
              {
LABEL_89:
                if ((v41 & 2) != 0) {
                  goto LABEL_83;
                }
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                BOOL v42 = gLogObj;
                if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_83;
                }
                char v43 = *(_DWORD *)(v94 + 460);
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_webtransport_session_create_incoming_stream";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v93;
                *(_WORD *)&buf[22] = 2080;
                v151 = (uint64_t (*)(uint64_t, uint64_t))" ";
                LOWORD(v152) = 1024;
                *(_DWORD *)((char *)&v152 + 2) = v43;
                v37 = (os_log_s *)v42;
                v38 = "%{public}s %{public}s%s<i%u> Invalid incoming stream ID";
                os_log_type_t v39 = 38;
              }

              else
              {
                BOOL v61 = *(void ***)(v94 + 400);
                if (v61)
                {
                  v62 = *v61;
                  if (v62)
                  {
                    if (*v62)
                    {
                      os_log_type_t v63 = nw_parameters_copy(*(nw_parameters_t *)(v94 + 344));
                      *(_BYTE *)(v94 + 548) |= 0x20u;
                      *(void *)(v94 + 176) = v60;
                      os_log_type_t v64 = (***(uint64_t (****)(void, void, nw_parameters_t))(v94 + 400))( *(void *)(v94 + 400),  *(void *)(v94 + 360),  v63);
                      *(void *)(v94 + 176) = -1LL;
                      *(_BYTE *)(v94 + 548) &= ~0x20u;
                      if (v64) {
                        v50 = nw_webtransport_session_get_stream(v94, v60);
                      }
                      else {
                        v50 = 0LL;
                      }
                      if (v63) {
                        os_release(v63);
                      }
                      v40 = v94;
                      char v8 = &qword_18C45F000;
                      if (!v50) {
                        goto LABEL_83;
                      }
                      goto LABEL_106;
                    }
                  }
                }

                char v8 = &qword_18C45F000;
                if ((v41 & 2) != 0) {
                  goto LABEL_83;
                }
                os_log_type_t v67 = (os_log_s *)__nwlog_obj();
                if (!os_log_type_enabled(v67, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_83;
                }
                v68 = *(_DWORD *)(v94 + 460);
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_webtransport_session_create_incoming_stream";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v93;
                *(_WORD *)&buf[22] = 2080;
                v151 = (uint64_t (*)(uint64_t, uint64_t))" ";
                LOWORD(v152) = 1024;
                *(_DWORD *)((char *)&v152 + 2) = v68;
                v37 = v67;
                v38 = "%{public}s %{public}s%s<i%u> Listen handler not setup to accept inbound stream";
                os_log_type_t v39 = 38;
              }

        if (v37) {
          free(v37);
        }
        goto LABEL_14;
      }
    }
  }

  __nwlog_obj();
  os_log_type_t v21 = a5 + 205;
  LODWORD(buf[0]) = 136446466;
  *(void *)((char *)buf + 4) = "send_callback";
  WORD2(buf[1]) = 2082;
  *(void *)((char *)&buf[1] + 6) = a5 + 205;
  v22 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  os_log_type_t v63 = OS_LOG_TYPE_DEFAULT;
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    uint64_t v23 = (os_log_s *)__nwlog_obj();
    __int16 v24 = type[0];
    if (os_log_type_enabled(v23, type[0]))
    {
      LODWORD(buf[0]) = 136446466;
      *(void *)((char *)buf + 4) = "send_callback";
      WORD2(buf[1]) = 2082;
      *(void *)((char *)&buf[1] + 6) = v21;
      v25 = "%{public}s %{public}s output handler has no get_output_frames callback";
LABEL_64:
      v48 = v23;
      id v49 = v24;
      v50 = 22;
LABEL_74:
      _os_log_impl(&dword_181A5C000, v48, v49, v25, (uint8_t *)buf, v50);
      goto LABEL_75;
    }

    goto LABEL_75;
  }

  if (v63)
  {
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v23 = (os_log_s *)__nwlog_obj();
    __int16 v24 = type[0];
    id v27 = os_log_type_enabled(v23, type[0]);
    if (!backtrace_string)
    {
      if (v27)
      {
        LODWORD(buf[0]) = 136446466;
        *(void *)((char *)buf + 4) = "send_callback";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = v21;
        v25 = "%{public}s %{public}s output handler has no get_output_frames callback, no backtrace";
        goto LABEL_64;
      }

      goto LABEL_75;
    }

    if (v27)
    {
      LODWORD(buf[0]) = 136446722;
      *(void *)((char *)buf + 4) = "send_callback";
      WORD2(buf[1]) = 2082;
      *(void *)((char *)&buf[1] + 6) = v21;
      HIWORD(buf[2]) = 2082;
      __uint64_t v73 = backtrace_string;
      os_log_type_t v28 = "%{public}s %{public}s output handler has no get_output_frames callback, dumping backtrace:%{public}s";
      os_log_type_t v29 = v23;
      os_log_type_t v30 = v24;
      v31 = 32;
LABEL_51:
      _os_log_impl(&dword_181A5C000, v29, v30, v28, (uint8_t *)buf, v31);
      goto LABEL_52;
    }

    goto LABEL_52;
  }

  uint64_t v23 = (os_log_s *)__nwlog_obj();
  __int16 v24 = type[0];
  if (os_log_type_enabled(v23, type[0]))
  {
    LODWORD(buf[0]) = 136446466;
    *(void *)((char *)buf + 4) = "send_callback";
    WORD2(buf[1]) = 2082;
    *(void *)((char *)&buf[1] + 6) = v21;
    v25 = "%{public}s %{public}s output handler has no get_output_frames callback, backtrace limit exceeded";
    goto LABEL_64;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  v45 = "nw_protocol_http1_get_parameters";
  uint64_t v23 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v42 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v24 = (os_log_s *)gLogObj;
    v25 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
      goto LABEL_97;
    }
    *(_DWORD *)buf = 136446210;
    v45 = "nw_protocol_http1_get_parameters";
    os_log_type_t v26 = "%{public}s called with null http1";
    goto LABEL_96;
  }

  if (!v42)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v24 = (os_log_s *)gLogObj;
    v25 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
      goto LABEL_97;
    }
    *(_DWORD *)buf = 136446210;
    v45 = "nw_protocol_http1_get_parameters";
    os_log_type_t v26 = "%{public}s called with null http1, backtrace limit exceeded";
    goto LABEL_96;
  }

  id v27 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  __int16 v24 = (os_log_s *)gLogObj;
  v25 = type;
  os_log_type_t v28 = os_log_type_enabled((os_log_t)gLogObj, type);
  if (v27)
  {
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      v45 = "nw_protocol_http1_get_parameters";
      os_log_type_t v46 = 2082;
      os_log_type_t v47 = v27;
      _os_log_impl( &dword_181A5C000,  v24,  v25,  "%{public}s called with null http1, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v27);
    goto LABEL_97;
  }

  if (v28)
  {
    *(_DWORD *)buf = 136446210;
    v45 = "nw_protocol_http1_get_parameters";
    os_log_type_t v26 = "%{public}s called with null http1, no backtrace";
LABEL_96:
    _os_log_impl(&dword_181A5C000, v24, v25, v26, buf, 0xCu);
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  v45 = "nw_protocol_http1_get_remote_endpoint";
  uint64_t v23 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v42 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v24 = (os_log_s *)gLogObj;
    v25 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
      goto LABEL_97;
    }
    *(_DWORD *)buf = 136446210;
    v45 = "nw_protocol_http1_get_remote_endpoint";
    os_log_type_t v26 = "%{public}s called with null http1";
    goto LABEL_96;
  }

  if (!v42)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v24 = (os_log_s *)gLogObj;
    v25 = type;
    if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
      goto LABEL_97;
    }
    *(_DWORD *)buf = 136446210;
    v45 = "nw_protocol_http1_get_remote_endpoint";
    os_log_type_t v26 = "%{public}s called with null http1, backtrace limit exceeded";
    goto LABEL_96;
  }

  id v27 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  __int16 v24 = (os_log_s *)gLogObj;
  v25 = type;
  os_log_type_t v28 = os_log_type_enabled((os_log_t)gLogObj, type);
  if (v27)
  {
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      v45 = "nw_protocol_http1_get_remote_endpoint";
      os_log_type_t v46 = 2082;
      os_log_type_t v47 = v27;
      _os_log_impl( &dword_181A5C000,  v24,  v25,  "%{public}s called with null http1, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v27);
    goto LABEL_97;
  }

  if (v28)
  {
    *(_DWORD *)buf = 136446210;
    v45 = "nw_protocol_http1_get_remote_endpoint";
    os_log_type_t v26 = "%{public}s called with null http1, no backtrace";
LABEL_96:
    _os_log_impl(&dword_181A5C000, v24, v25, v26, buf, 0xCu);
  }

      goto LABEL_84;
    }

    if (!v54)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v24 = (os_log_s *)(id)gLogObj;
      v35 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v61 = "nw_ws_write_server_response";
        _os_log_impl( &dword_181A5C000,  v24,  v35,  "%{public}s CFHTTPMessageCreateResponse failed, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_83;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v24 = (os_log_s *)(id)gLogObj;
    os_log_type_t v29 = type;
    os_log_type_t v30 = os_log_type_enabled(v24, type);
    if (!backtrace_string)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v61 = "nw_ws_write_server_response";
        _os_log_impl( &dword_181A5C000,  v24,  v29,  "%{public}s CFHTTPMessageCreateResponse failed, no backtrace",  buf,  0xCu);
      }

      goto LABEL_83;
    }

    if (v30)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v61 = "nw_ws_write_server_response";
      v62 = 2082;
      os_log_type_t v63 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v24,  v29,  "%{public}s CFHTTPMessageCreateResponse failed, dumping backtrace:%{public}s",  buf,  0x16u);
    }

              free(v49);
              goto LABEL_107;
            }

            if (!v52) {
              goto LABEL_107;
            }
            goto LABEL_103;
          }

          v40 = (os_log_s *)__nwlog_obj();
          os_log_type_t v41 = type;
          if (!os_log_type_enabled(v40, type)) {
            goto LABEL_107;
          }
          goto LABEL_87;
        }

        __nwlog_obj();
        *(_DWORD *)buf = 136446466;
        os_log_type_t v67 = "nw_frame_split";
        v68 = 2048;
        v69 = v30;
        char v20 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        os_log_type_t v64 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          BOOL v42 = (os_log_s *)__nwlog_obj();
          char v43 = type;
          if (!os_log_type_enabled(v42, type)) {
            goto LABEL_107;
          }
          *(_DWORD *)buf = 136446466;
          os_log_type_t v67 = "nw_frame_split";
          v68 = 2048;
          v69 = v30;
          uint64_t v23 = "%{public}s frame %p has no split metadata";
LABEL_99:
          os_log_type_t v46 = v42;
          os_log_type_t v47 = v43;
LABEL_105:
          v48 = 22;
          goto LABEL_106;
        }

        if (!v64)
        {
          BOOL v42 = (os_log_s *)__nwlog_obj();
          char v43 = type;
          if (!os_log_type_enabled(v42, type)) {
            goto LABEL_107;
          }
          *(_DWORD *)buf = 136446466;
          os_log_type_t v67 = "nw_frame_split";
          v68 = 2048;
          v69 = v30;
          uint64_t v23 = "%{public}s frame %p has no split metadata, backtrace limit exceeded";
          goto LABEL_99;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v42 = (os_log_s *)__nwlog_obj();
        char v43 = type;
        v51 = os_log_type_enabled(v42, type);
        if (!backtrace_string)
        {
          if (!v51) {
            goto LABEL_107;
          }
          *(_DWORD *)buf = 136446466;
          os_log_type_t v67 = "nw_frame_split";
          v68 = 2048;
          v69 = v30;
          uint64_t v23 = "%{public}s frame %p has no split metadata, no backtrace";
          goto LABEL_99;
        }

        if (v51)
        {
          *(_DWORD *)buf = 136446722;
          os_log_type_t v67 = "nw_frame_split";
          v68 = 2048;
          v69 = v30;
          v70 = 2082;
          *(void *)os_log_type_t v71 = backtrace_string;
          os_log_type_t v26 = "%{public}s frame %p has no split metadata, dumping backtrace:%{public}s";
          id v27 = v42;
          os_log_type_t v28 = v43;
          os_log_type_t v29 = 32;
          goto LABEL_37;
        }

        if ((*((_BYTE *)v3 + 176) & 2) == 0 && !*((void *)v3 + 19)) {
          *((_BYTE *)v3 + 176) |= 2u;
        }
        v70 = *((id *)v3 + 17);
        os_log_type_t v71 = *((_BYTE *)v3 + 176);
        v72 = *((id *)v3 + 19);
        __uint64_t v73 = _Block_copy(*((const void **)v3 + 4));
        unint64_t v74 = (void *)*((void *)v3 + 7);
        char v75 = *((_DWORD *)v3 + 16);
        v125[0] = MEMORY[0x1895F87A8];
        v125[1] = 3221225472LL;
        v125[2] = ___ZL22nw_read_request_reportP26NWConcrete_nw_read_requestPU28objcproto17OS_dispatch_queue8NSObject_block_invoke_104;
        v125[3] = &unk_189BC0A70;
        v129 = v73;
        v126 = v3;
        v127 = v70;
        v130 = (v71 & 2) != 0;
        v128 = v72;
        __uint64_t v76 = v72;
        v77 = v70;
        unint64_t v78 = v73;
        nw_connection_async_client_if_needed_with_override(v74, v4, v75, v125);

LABEL_87:
        char v79 = *((void *)v3 + 13);
        if (v79)
        {
          nw_queue_cancel_source(v79, v43);
          *((void *)v3 + 13) = 0LL;
        }

        v80 = (void *)*((void *)v3 + 4);
        *((void *)v3 + 4) = 0LL;

        break;
      default:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v5 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        {
          BOOL v42 = *((_DWORD *)v3 + 17);
          *(_DWORD *)buf = 136446466;
          v163 = "nw_read_request_report";
          v164 = 1024;
          *(_DWORD *)v165 = v42;
          _os_log_impl(&dword_181A5C000, v5, OS_LOG_TYPE_ERROR, "%{public}s Unknown request type %d", buf, 0x12u);
        }

          goto LABEL_84;
        }

        v48 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v41 = (os_log_s *)(id)gLogObj;
        id v49 = type[0];
        v50 = os_log_type_enabled(v41, type[0]);
        if (!v48)
        {
          if (!v50) {
            goto LABEL_83;
          }
          os_log_type_t v60 = *a1;
          *(_DWORD *)buf = 136446466;
          v70 = "nw_nat64_write_prefix_to_string";
          os_log_type_t v71 = 1024;
          *(_DWORD *)v72 = v60;
          dispatch_workloop_t v44 = "%{public}s invalid prefix length %d, no backtrace";
          v58 = v41;
          v59 = v49;
          goto LABEL_82;
        }

        if (v50)
        {
          v51 = *a1;
          *(_DWORD *)buf = 136446722;
          v70 = "nw_nat64_write_prefix_to_string";
          os_log_type_t v71 = 1024;
          *(_DWORD *)v72 = v51;
          *(_WORD *)&v72[4] = 2082;
          *(void *)&v72[6] = v48;
          _os_log_impl( &dword_181A5C000,  v41,  v49,  "%{public}s invalid prefix length %d, dumping backtrace:%{public}s",  buf,  0x1Cu);
        }

LABEL_61:
        free(v48);
        if (!v39) {
          return 0LL;
        }
        goto LABEL_85;
      }

LABEL_84:
      if (!v15) {
        goto LABEL_35;
      }
      goto LABEL_34;
    }

    if (!(_BYTE)v51)
    {
      __nwlog_obj();
      id v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v50 = type[0];
      if (os_log_type_enabled(v36, type[0]))
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "qpod_options_serialize";
        _os_log_impl( &dword_181A5C000,  v36,  v50,  "%{public}s called with null out_length, backtrace limit exceeded",  applier,  0xCu);
      }

      goto LABEL_83;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v47 = type[0];
    v48 = os_log_type_enabled(v36, type[0]);
    if (!backtrace_string)
    {
      if (v48)
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "qpod_options_serialize";
        _os_log_impl(&dword_181A5C000, v36, v47, "%{public}s called with null out_length, no backtrace", applier, 0xCu);
      }

      goto LABEL_83;
    }

    if (v48)
    {
      *(_DWORD *)applier = 136446466;
      *(void *)&applier[4] = "qpod_options_serialize";
      *(_WORD *)&applier[12] = 2082;
      *(void *)&applier[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v36,  v47,  "%{public}s called with null out_length, dumping backtrace:%{public}s",  applier,  0x16u);
    }

    if (v39) {
      free(v39);
    }
    goto LABEL_53;
  }

  BOOL v14 = 0LL;
  os_log_type_t v15 = *(void *)(*((void *)v68 + 3) + 32LL);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  do
  {
    int v16 = v15 + v14;
    if (!*(_WORD *)(v15 + v14 + 40)) {
      goto LABEL_19;
    }
    *(void *)key = 0LL;
    __uint64_t v76 = 0LL;
    v77 = 0;
    if (if_indextoname(*(unsigned __int16 *)(v16 + 40), key))
    {
      xpc_dictionary_set_uint64(v13, key, *(unsigned __int16 *)(v15 + v14 + 42));
      goto LABEL_19;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v17 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      id v18 = *(unsigned __int16 *)(v16 + 40);
      *(_DWORD *)os_log_type_t v71 = 136446466;
      v72 = "nw_endpoint_flow_copy_multipath_subflow_counts";
      __uint64_t v73 = 1024;
      LODWORD(v74[0]) = v18;
      _os_log_impl( &dword_181A5C000,  v17,  OS_LOG_TYPE_ERROR,  "%{public}s if_indextoname failed for outif: %d",  v71,  0x12u);
    }

    char v19 = **(_DWORD **)(StatusReg + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v20 = (os_log_s *)(id)gLogObj;
    os_log_type_t v21 = v20;
    if (v19 == 6)
    {
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)os_log_type_t v71 = 136446466;
        v72 = "nw_endpoint_flow_copy_multipath_subflow_counts";
        __uint64_t v73 = 1024;
        LODWORD(v74[0]) = 6;
        _os_log_impl(&dword_181A5C000, v21, OS_LOG_TYPE_ERROR, "%{public}s if_indextoname %{darwin.errno}d", v71, 0x12u);
      }
    }

    else
    {
      *(_DWORD *)os_log_type_t v71 = 136446466;
      v72 = "nw_endpoint_flow_copy_multipath_subflow_counts";
      __uint64_t v73 = 1024;
      LODWORD(v74[0]) = v19;
      v22 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      os_log_type_t v65 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v23 = (os_log_s *)(id)gLogObj;
        __int16 v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)os_log_type_t v71 = 136446466;
          v72 = "nw_endpoint_flow_copy_multipath_subflow_counts";
          __uint64_t v73 = 1024;
          LODWORD(v74[0]) = v19;
          _os_log_impl(&dword_181A5C000, v23, v24, "%{public}s if_indextoname %{darwin.errno}d", v71, 0x12u);
        }

        goto LABEL_32;
      }

      if (!v65)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v23 = (os_log_s *)(id)gLogObj;
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)os_log_type_t v71 = 136446466;
          v72 = "nw_endpoint_flow_copy_multipath_subflow_counts";
          __uint64_t v73 = 1024;
          LODWORD(v74[0]) = v19;
          _os_log_impl( &dword_181A5C000,  v23,  v29,  "%{public}s if_indextoname %{darwin.errno}d, backtrace limit exceeded",  v71,  0x12u);
        }

      if (!v35)
      {
LABEL_22:

        if ((((unsigned __int16)*v9 | (v7[1375] << 16)) & 0x400000) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v23 = (os_log_s *)gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
          {
            __int16 v24 = v7 + 1289;
            v25 = *((_DWORD *)v7 + 320);
            *(void *)&uint8_t buf[4] = "nw_protocol_http3_create";
            *(_WORD *)&buf[12] = 2082;
            *(_DWORD *)buf = 136447234;
            if (!v7) {
              __int16 v24 = "";
            }
            *(void *)&buf[14] = v24;
            if (v7) {
              os_log_type_t v26 = " ";
            }
            else {
              os_log_type_t v26 = "";
            }
            *(_WORD *)&buf[22] = 2080;
            uint64_t v55 = (uint64_t)v26;
            LOWORD(v56) = 1024;
            *(_DWORD *)((char *)&v56 + 2) = v25;
            HIWORD(v56) = 2048;
            BOOL v57 = v7;
            _os_log_impl(&dword_181A5C000, v23, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s<i%u> created %p", buf, 0x30u);
          }
        }

        return (BOOL)v7;
      }

    free(backtrace_string);
    goto LABEL_127;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)aBlock = 136446210;
    *(void *)&aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
    v51 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v119) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v52 = (os_log_s *)__nwlog_obj();
      v53 = type[0];
      if (os_log_type_enabled(v52, type[0]))
      {
        *(_DWORD *)aBlock = 136446210;
        *(void *)&aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
        BOOL v54 = "%{public}s called with null http3";
        goto LABEL_126;
      }

      goto LABEL_127;
    }

    if (!(_BYTE)v119)
    {
      os_log_type_t v52 = (os_log_s *)__nwlog_obj();
      v53 = type[0];
      if (os_log_type_enabled(v52, type[0]))
      {
        *(_DWORD *)aBlock = 136446210;
        *(void *)&aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
        BOOL v54 = "%{public}s called with null http3, backtrace limit exceeded";
        goto LABEL_126;
      }

      goto LABEL_127;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v52 = (os_log_s *)__nwlog_obj();
    v53 = type[0];
    os_log_type_t v60 = os_log_type_enabled(v52, type[0]);
    if (!backtrace_string)
    {
      if (v60)
      {
        *(_DWORD *)aBlock = 136446210;
        *(void *)&aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
        BOOL v54 = "%{public}s called with null http3, no backtrace";
        goto LABEL_126;
      }

      goto LABEL_127;
    }

    if (v60)
    {
      *(_DWORD *)aBlock = 136446466;
      *(void *)&aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
      *(_WORD *)&aBlock[12] = 2082;
      *(void *)&aBlock[14] = backtrace_string;
      v59 = "%{public}s called with null http3, dumping backtrace:%{public}s";
      goto LABEL_82;
    }

    goto LABEL_83;
  }

  uint64_t v7 = handle + 1373;
  if (((*(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16)) & 0x400000) == 0)
  {
    if (gLogDatapath)
    {
      uint64_t v55 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
      {
        v56 = *((_DWORD *)handle + 320);
        *(_DWORD *)aBlock = 136447234;
        *(void *)&aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
        *(_WORD *)&aBlock[12] = 2082;
        *(void *)&aBlock[14] = handle + 1289;
        *(_WORD *)&aBlock[22] = 2080;
        v128 = (uint64_t)" ";
        LOWORD(v129) = 1024;
        *(_DWORD *)((char *)&v129 + 2) = v56;
        HIWORD(v129) = 2112;
        v130 = a2;
        _os_log_impl( &dword_181A5C000,  v55,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> creating new inbound flow from %@",  aBlock,  0x30u);
      }
    }
  }

  v119 = 0LL;
  v120 = &v119;
  v121 = 0x2000000000LL;
  v122 = 0LL;
  char v8 = *((void *)handle + 4);
  BOOL v9 = MEMORY[0x1895F87A8];
  if (v8)
  {
    os_log_type_t v10 = *(void *)(v8 + 24);
    if (v10)
    {
      os_log_type_t v11 = *(uint64_t (**)(void, uint64_t, void))(v10 + 224);
      if (v11)
      {
        os_log_type_t v12 = (unsigned __int8 *)v11(*((void *)handle + 4), 255LL, 0LL);
        v118[0] = v9;
        v118[1] = 0x40000000LL;
        v118[2] = ___ZL42nw_protocol_http3_listen_protocol_new_flowP18nw_listen_protocolP11nw_endpointP13nw_parameters_block_invoke;
        v118[3] = &unk_189BC4918;
        v118[4] = &v119;
        nw_array_apply(v12, (uint64_t)v118);
        if (v12) {
          os_release(v12);
        }
      }
    }
  }

  os_log_type_t v13 = (void *)v120[3];
  if (!v13) {
    goto LABEL_59;
  }
  has_datagram_variant_flow_id = nw_quic_stream_get_has_datagram_variant_flow_id(v13);
  os_log_type_t v15 = (void *)v120[3];
  if (has_datagram_variant_flow_id)
  {
    datagram_variant_flow_id = nw_quic_stream_get_datagram_variant_flow_id(v15);
    if ((((unsigned __int16)*v7 | (handle[1375] << 16)) & 0x400000) == 0)
    {
      if (gLogDatapath)
      {
        os_log_type_t v71 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
        {
          v72 = *((_DWORD *)handle + 320);
          *(_DWORD *)aBlock = 136447234;
          *(void *)&aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
          *(_WORD *)&aBlock[12] = 2082;
          *(void *)&aBlock[14] = handle + 1289;
          *(_WORD *)&aBlock[22] = 2080;
          v128 = (uint64_t)" ";
          LOWORD(v129) = 1024;
          *(_DWORD *)((char *)&v129 + 2) = v72;
          HIWORD(v129) = 2048;
          v130 = (nw_endpoint *)datagram_variant_flow_id;
          _os_log_impl( &dword_181A5C000,  v71,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> Received datagram flow %llu",  aBlock,  0x30u);
        }
      }
    }

    id v17 = *((void *)handle + 110);
    if (!v17)
    {
LABEL_15:
      if ((((unsigned __int16)*v7 | (handle[1375] << 16)) & 0x400000) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v18 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          char v19 = *((_DWORD *)handle + 320);
          *(_DWORD *)aBlock = 136447234;
          *(void *)&aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
          *(_WORD *)&aBlock[12] = 2082;
          *(void *)&aBlock[14] = handle + 1289;
          *(_WORD *)&aBlock[22] = 2080;
          v128 = (uint64_t)" ";
          LOWORD(v129) = 1024;
          *(_DWORD *)((char *)&v129 + 2) = v19;
          HIWORD(v129) = 2048;
          v130 = (nw_endpoint *)datagram_variant_flow_id;
          char v20 = "%{public}s %{public}s%s<i%u> Rejecting datagram flow ID %llu";
          os_log_type_t v21 = (os_log_s *)v18;
          v22 = 48;
LABEL_58:
          _os_log_impl(&dword_181A5C000, v21, OS_LOG_TYPE_ERROR, v20, aBlock, v22);
          os_log_type_t v47 = 0LL;
LABEL_62:
          _Block_object_dispose(&v119, 8);
          return v47;
        }
      }

      if (!v21) {
        return 0LL;
      }
      char v20 = (char *)v21;
      goto LABEL_29;
    }

    if (!v31)
    {
      v22 = (os_log_s *)__nwlog_obj();
      uint64_t v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        dispatch_workloop_t v34 = "nw_protocol_http3_stream_replace_input_handler";
        __int16 v24 = "%{public}s called with null new_input_handler, backtrace limit exceeded";
        goto LABEL_82;
      }

      goto LABEL_83;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    v22 = (os_log_s *)__nwlog_obj();
    uint64_t v23 = type;
    os_log_type_t v30 = os_log_type_enabled(v22, type);
    if (!backtrace_string)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        dispatch_workloop_t v34 = "nw_protocol_http3_stream_replace_input_handler";
        __int16 v24 = "%{public}s called with null new_input_handler, no backtrace";
        goto LABEL_82;
      }

      goto LABEL_83;
    }

    if (v30)
    {
      *(_DWORD *)buf = 136446466;
      dispatch_workloop_t v34 = "nw_protocol_http3_stream_replace_input_handler";
      v35 = 2082;
      id v36 = (nw_protocol *)backtrace_string;
      id v27 = "%{public}s called with null new_input_handler, dumping backtrace:%{public}s";
      goto LABEL_64;
    }

      if (v50) {
        free(v50);
      }
      BOOL v66 = (dispatch_object_s *)*((void *)v168 + 3);
      v31 = v49;
      if (v66)
      {
        dispatch_release(v66);
        *((void *)v168 + 3) = 0LL;
      }

      goto LABEL_87;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v175 = "nw_protocol_http3_stream_get_input_frames";
    os_log_type_t v83 = (char *)_os_log_send_and_compose_impl();
    v167[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v163) = 0;
    if (v167[0] == OS_LOG_TYPE_FAULT)
    {
      v84 = (os_log_s *)__nwlog_obj();
      v85 = v167[0];
      if (os_log_type_enabled(v84, v167[0]))
      {
        *(_DWORD *)buf = 136446210;
        v175 = "nw_protocol_http3_stream_get_input_frames";
        v86 = "%{public}s called with null http3_stream";
        goto LABEL_134;
      }

      goto LABEL_135;
    }

    if (!(_BYTE)v163)
    {
      v84 = (os_log_s *)__nwlog_obj();
      v85 = v167[0];
      if (os_log_type_enabled(v84, v167[0]))
      {
        *(_DWORD *)buf = 136446210;
        v175 = "nw_protocol_http3_stream_get_input_frames";
        v86 = "%{public}s called with null http3_stream, backtrace limit exceeded";
        goto LABEL_134;
      }

      goto LABEL_135;
    }

    BOOL v90 = (char *)__nw_create_backtrace_string();
    v84 = (os_log_s *)__nwlog_obj();
    v85 = v167[0];
    v93 = os_log_type_enabled(v84, v167[0]);
    if (!v90)
    {
      if (v93)
      {
        *(_DWORD *)buf = 136446210;
        v175 = "nw_protocol_http3_stream_get_input_frames";
        v86 = "%{public}s called with null http3_stream, no backtrace";
        goto LABEL_134;
      }

      goto LABEL_135;
    }

    if (v93)
    {
      *(_DWORD *)buf = 136446466;
      v175 = "nw_protocol_http3_stream_get_input_frames";
      v176 = 2082;
      v177 = v90;
      v92 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
      goto LABEL_122;
    }

    goto LABEL_123;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v175 = "nw_protocol_http3_stream_get_input_frames";
  os_log_type_t v83 = (char *)_os_log_send_and_compose_impl();
  v167[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v163) = 0;
  if (v167[0] != OS_LOG_TYPE_FAULT)
  {
    if (!(_BYTE)v163)
    {
      v84 = (os_log_s *)__nwlog_obj();
      v85 = v167[0];
      if (os_log_type_enabled(v84, v167[0]))
      {
        *(_DWORD *)buf = 136446210;
        v175 = "nw_protocol_http3_stream_get_input_frames";
        v86 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_134;
      }

      goto LABEL_135;
    }

    BOOL v90 = (char *)__nw_create_backtrace_string();
    v84 = (os_log_s *)__nwlog_obj();
    v85 = v167[0];
    os_log_type_t v91 = os_log_type_enabled(v84, v167[0]);
    if (!v90)
    {
      if (v91)
      {
        *(_DWORD *)buf = 136446210;
        v175 = "nw_protocol_http3_stream_get_input_frames";
        v86 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_134;
      }

      goto LABEL_135;
    }

    if (v91)
    {
      *(_DWORD *)buf = 136446466;
      v175 = "nw_protocol_http3_stream_get_input_frames";
      v176 = 2082;
      v177 = v90;
      v92 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_122:
      _os_log_impl(&dword_181A5C000, v84, v85, v92, buf, 0x16u);
    }

    free(v26);
    goto LABEL_84;
  }

  __nwlog_obj();
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__uint64_t v76 = 136446210;
  v77 = "nw_path_evaluator_evaluate";
  BOOL v57 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  LOBYTE(v67) = 0;
  if (__nwlog_fault(v57, buf, &v67))
  {
    if (buf[0] == 17)
    {
      __nwlog_obj();
      v58 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v59 = buf[0];
      if (os_log_type_enabled(v58, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)__uint64_t v76 = 136446210;
        v77 = "nw_path_evaluator_evaluate";
        _os_log_impl(&dword_181A5C000, v58, v59, "%{public}s called with null evaluator->parameters", v76, 0xCu);
      }
    }

    else if ((_BYTE)v67)
    {
      os_log_type_t v60 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v58 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v61 = buf[0];
      v62 = os_log_type_enabled(v58, (os_log_type_t)buf[0]);
      if (v60)
      {
        if (v62)
        {
          *(_DWORD *)__uint64_t v76 = 136446466;
          v77 = "nw_path_evaluator_evaluate";
          unint64_t v78 = 2082;
          char v79 = v60;
          _os_log_impl( &dword_181A5C000,  v58,  v61,  "%{public}s called with null evaluator->parameters, dumping backtrace:%{public}s",  v76,  0x16u);
        }

        free(v60);
        goto LABEL_122;
      }

      if (v62)
      {
        *(_DWORD *)__uint64_t v76 = 136446210;
        v77 = "nw_path_evaluator_evaluate";
        _os_log_impl( &dword_181A5C000,  v58,  v61,  "%{public}s called with null evaluator->parameters, no backtrace",  v76,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v58 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v63 = buf[0];
      if (os_log_type_enabled(v58, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)__uint64_t v76 = 136446210;
        v77 = "nw_path_evaluator_evaluate";
        _os_log_impl( &dword_181A5C000,  v58,  v63,  "%{public}s called with null evaluator->parameters, backtrace limit exceeded",  v76,  0xCu);
      }
    }
  }

              free(v44);
              goto LABEL_84;
            }

            if (v54)
            {
              LODWORD(length[0]) = 136446722;
              *(size_t *)((char *)length + 4) = (size_t)"nw_necp_buffer_get_tlv_value";
              WORD2(length[1]) = 2048;
              *(size_t *)((char *)&length[1] + 6) = v42;
              HIWORD(length[2]) = 2048;
              length[3] = v207;
              _os_log_impl( &dword_181A5C000,  v45,  v53,  "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu, no backtrace",  (uint8_t *)length,  0x20u);
            }
          }

          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v45 = (os_log_s *)(id)gLogObj;
            v58 = type;
            if (os_log_type_enabled(v45, (os_log_type_t)type))
            {
              LODWORD(length[0]) = 136446722;
              *(size_t *)((char *)length + 4) = (size_t)"nw_necp_buffer_get_tlv_value";
              WORD2(length[1]) = 2048;
              *(size_t *)((char *)&length[1] + 6) = v42;
              HIWORD(length[2]) = 2048;
              length[3] = v207;
              _os_log_impl( &dword_181A5C000,  v45,  v58,  "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu, backtrace limit exceeded",  (uint8_t *)length,  0x20u);
            }
          }
        }

        if (!v44) {
          goto LABEL_84;
        }
        goto LABEL_83;
      }

      if (v204 >= v42)
      {
        v51 = *((unsigned __int8 *)v199 + v42);
        goto LABEL_94;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v47 = (id)gLogObj;
      LODWORD(length[0]) = 136446722;
      *(size_t *)((char *)length + 4) = (size_t)"nw_necp_buffer_get_tlv_type";
      WORD2(length[1]) = 2048;
      *(size_t *)((char *)&length[1] + 6) = v42;
      HIWORD(length[2]) = 2048;
      length[3] = v207;
      v196 = length;
      v48 = (void *)_os_log_send_and_compose_impl();

      LOBYTE(type) = 16;
      LOBYTE(v236) = 0;
      if (__nwlog_fault((const char *)v48, &type, &v236))
      {
        if (type == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v49 = (os_log_s *)(id)gLogObj;
          v50 = type;
          if (os_log_type_enabled(v49, (os_log_type_t)type))
          {
            LODWORD(length[0]) = 136446722;
            *(size_t *)((char *)length + 4) = (size_t)"nw_necp_buffer_get_tlv_type";
            WORD2(length[1]) = 2048;
            *(size_t *)((char *)&length[1] + 6) = v42;
            HIWORD(length[2]) = 2048;
            length[3] = v207;
            _os_log_impl( &dword_181A5C000,  v49,  v50,  "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu",  (uint8_t *)length,  0x20u);
          }
        }

        else if ((_BYTE)v236)
        {
          uint64_t v55 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v49 = (os_log_s *)(id)gLogObj;
          v56 = type;
          BOOL v57 = os_log_type_enabled(v49, (os_log_type_t)type);
          if (v55)
          {
            if (v57)
            {
              LODWORD(length[0]) = 136446978;
              *(size_t *)((char *)length + 4) = (size_t)"nw_necp_buffer_get_tlv_type";
              WORD2(length[1]) = 2048;
              *(size_t *)((char *)&length[1] + 6) = v42;
              HIWORD(length[2]) = 2048;
              length[3] = v207;
              LOWORD(length[4]) = 2082;
              *(size_t *)((char *)&length[4] + 2) = (size_t)v55;
              _os_log_impl( &dword_181A5C000,  v49,  v56,  "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu, dumping backtrace:%{public}s",  (uint8_t *)length,  0x2Au);
            }

            free(v55);
            if (!v48) {
              goto LABEL_93;
            }
LABEL_92:
            free(v48);
            goto LABEL_93;
          }

          if (v57)
          {
            LODWORD(length[0]) = 136446722;
            *(size_t *)((char *)length + 4) = (size_t)"nw_necp_buffer_get_tlv_type";
            WORD2(length[1]) = 2048;
            *(size_t *)((char *)&length[1] + 6) = v42;
            HIWORD(length[2]) = 2048;
            length[3] = v207;
            _os_log_impl( &dword_181A5C000,  v49,  v56,  "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu, no backtrace",  (uint8_t *)length,  0x20u);
          }
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v49 = (os_log_s *)(id)gLogObj;
          v59 = type;
          if (os_log_type_enabled(v49, (os_log_type_t)type))
          {
            LODWORD(length[0]) = 136446722;
            *(size_t *)((char *)length + 4) = (size_t)"nw_necp_buffer_get_tlv_type";
            WORD2(length[1]) = 2048;
            *(size_t *)((char *)&length[1] + 6) = v42;
            HIWORD(length[2]) = 2048;
            length[3] = v207;
            _os_log_impl( &dword_181A5C000,  v49,  v59,  "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu, backtrace limit exceeded",  (uint8_t *)length,  0x20u);
          }
        }
      }

      if (v48) {
        goto LABEL_92;
      }
LABEL_93:
      v51 = 0;
LABEL_94:
      os_log_type_t v60 = *(unsigned int *)&v203[v42];
      if (!(_DWORD)v60) {
        goto LABEL_105;
      }
      if (v60 > 0xFFFFFFF9 || (v207 >= v60 + 5 ? (BOOL v61 = v207 - (v60 + 5) >= v42) : (BOOL v61 = 0), !v61))
      {
        v200 = v51;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v62 = (id)gLogObj;
        LODWORD(length[0]) = 136446978;
        *(size_t *)((char *)length + 4) = (size_t)"nw_necp_buffer_get_tlv_value";
        WORD2(length[1]) = 2048;
        *(size_t *)((char *)&length[1] + 6) = v42;
        HIWORD(length[2]) = 2048;
        length[3] = v207;
        LOWORD(length[4]) = 1024;
        *(_DWORD *)((char *)&length[4] + 2) = v60;
        v196 = length;
        os_log_type_t v63 = (void *)_os_log_send_and_compose_impl();

        LOBYTE(type) = 16;
        LOBYTE(v236) = 0;
        if (__nwlog_fault((const char *)v63, &type, &v236))
        {
          if (type == 17)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v64 = (os_log_s *)(id)gLogObj;
            os_log_type_t v65 = type;
            if (os_log_type_enabled(v64, (os_log_type_t)type))
            {
              LODWORD(length[0]) = 136446978;
              *(size_t *)((char *)length + 4) = (size_t)"nw_necp_buffer_get_tlv_value";
              WORD2(length[1]) = 2048;
              *(size_t *)((char *)&length[1] + 6) = v42;
              HIWORD(length[2]) = 2048;
              length[3] = v207;
              LOWORD(length[4]) = 1024;
              *(_DWORD *)((char *)&length[4] + 2) = v60;
              _os_log_impl( &dword_181A5C000,  v64,  v65,  "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u",  (uint8_t *)length,  0x26u);
            }

            goto LABEL_104;
          }

          if ((_BYTE)v236)
          {
            __uint64_t v76 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v77 = (os_log_s *)(id)gLogObj;
            v197 = type;
            unint64_t v78 = os_log_type_enabled(v77, (os_log_type_t)type);
            if (v76)
            {
              if (v78)
              {
                LODWORD(length[0]) = 136447234;
                *(size_t *)((char *)length + 4) = (size_t)"nw_necp_buffer_get_tlv_value";
                WORD2(length[1]) = 2048;
                *(size_t *)((char *)&length[1] + 6) = v42;
                HIWORD(length[2]) = 2048;
                length[3] = v207;
                LOWORD(length[4]) = 1024;
                *(_DWORD *)((char *)&length[4] + 2) = v60;
                HIWORD(length[4]) = 2082;
                length[5] = (size_t)v76;
                _os_log_impl( &dword_181A5C000,  v77,  v197,  "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, dumping backtrace:%{public}s",  (uint8_t *)length,  0x30u);
              }

              free(v76);
              v51 = v200;
              if (!v63) {
                goto LABEL_106;
              }
LABEL_138:
              free(v63);
LABEL_106:
              BOOL v66 = 0LL;
              goto LABEL_107;
            }

            if (v78)
            {
              LODWORD(length[0]) = 136446978;
              *(size_t *)((char *)length + 4) = (size_t)"nw_necp_buffer_get_tlv_value";
              WORD2(length[1]) = 2048;
              *(size_t *)((char *)&length[1] + 6) = v42;
              HIWORD(length[2]) = 2048;
              length[3] = v207;
              LOWORD(length[4]) = 1024;
              *(_DWORD *)((char *)&length[4] + 2) = v60;
              _os_log_impl( &dword_181A5C000,  v77,  v197,  "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, no backtrace",  (uint8_t *)length,  0x26u);
            }
          }

          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v64 = (os_log_s *)(id)gLogObj;
            char v79 = type;
            if (os_log_type_enabled(v64, (os_log_type_t)type))
            {
              LODWORD(length[0]) = 136446978;
              *(size_t *)((char *)length + 4) = (size_t)"nw_necp_buffer_get_tlv_value";
              WORD2(length[1]) = 2048;
              *(size_t *)((char *)&length[1] + 6) = v42;
              HIWORD(length[2]) = 2048;
              length[3] = v207;
              LOWORD(length[4]) = 1024;
              *(_DWORD *)((char *)&length[4] + 2) = v60;
              _os_log_impl( &dword_181A5C000,  v64,  v79,  "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, backtrace limit exceeded",  (uint8_t *)length,  0x26u);
            }
              }
            }

  if (v21) {
    free(v21);
  }
}

    if (!v48) {
      return 1LL;
    }
    os_log_type_t v39 = (char *)v48;
    goto LABEL_57;
  }

  uint64_t v4 = *(void *)(a2 + 16);
  if (!v4)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    char v8 = *(void *)(a1 + 32);
    BOOL v9 = (const char *)(v8 + 390);
    os_log_type_t v10 = v8 == 0;
    os_log_type_t v11 = *(_DWORD *)(v8 + 368);
    if (v10) {
      BOOL v9 = "";
    }
    *(_DWORD *)buf = 136447234;
    BOOL v57 = "nw_protocol_http2_notify_block_invoke";
    if (v10) {
      os_log_type_t v12 = "";
    }
    else {
      os_log_type_t v12 = " ";
    }
    v58 = 2082;
    v59 = (void *)v9;
    os_log_type_t v60 = 2080;
    BOOL v61 = v12;
    v62 = 1024;
    os_log_type_t v63 = v11;
    os_log_type_t v64 = 2048;
    os_log_type_t v65 = a2;
    os_log_type_t v13 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v54 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      BOOL v14 = (os_log_s *)gconnectionLogObj;
      os_log_type_t v15 = type;
      if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type)) {
        goto LABEL_55;
      }
      int v16 = *(void *)(a1 + 32);
      id v17 = (const char *)(v16 + 390);
      id v18 = v16 == 0;
      if (!v16) {
        id v17 = "";
      }
      char v19 = *(_DWORD *)(v16 + 368);
      if (v18) {
        char v20 = "";
      }
      else {
        char v20 = " ";
      }
      *(_DWORD *)buf = 136447234;
      BOOL v57 = "nw_protocol_http2_notify_block_invoke";
      v58 = 2082;
      v59 = (void *)v17;
      os_log_type_t v60 = 2080;
      BOOL v61 = v20;
      v62 = 1024;
      os_log_type_t v63 = v19;
      os_log_type_t v64 = 2048;
      os_log_type_t v65 = a2;
      os_log_type_t v21 = "%{public}s %{public}s%s<i%u> no object for hash node %p, skipping notify";
    }

    else if (v54)
    {
      v22 = (char *)__nw_create_backtrace_string();
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      BOOL v14 = (os_log_s *)gconnectionLogObj;
      os_log_type_t v15 = type;
      uint64_t v23 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
      if (v22)
      {
        if (v23)
        {
          __int16 v24 = *(void *)(a1 + 32);
          v25 = (const char *)(v24 + 390);
          os_log_type_t v26 = v24 == 0;
          if (!v24) {
            v25 = "";
          }
          id v27 = *(_DWORD *)(v24 + 368);
          if (v26) {
            os_log_type_t v28 = "";
          }
          else {
            os_log_type_t v28 = " ";
          }
          *(_DWORD *)buf = 136447490;
          BOOL v57 = "nw_protocol_http2_notify_block_invoke";
          v58 = 2082;
          v59 = (void *)v25;
          os_log_type_t v60 = 2080;
          BOOL v61 = v28;
          v62 = 1024;
          os_log_type_t v63 = v27;
          os_log_type_t v64 = 2048;
          os_log_type_t v65 = a2;
          BOOL v66 = 2082;
          os_log_type_t v67 = v22;
          _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s %{public}s%s<i%u> no object for hash node %p, skipping notify, dumping backtrace:%{public}s",  buf,  0x3Au);
        }

        free(v22);
        goto LABEL_55;
      }

      if (!v23)
      {
LABEL_55:
        if (!v13) {
          return 1LL;
        }
        os_log_type_t v39 = (char *)v13;
LABEL_57:
        free(v39);
        return 1LL;
      }

      dispatch_workloop_t v34 = *(void *)(a1 + 32);
      v35 = (const char *)(v34 + 390);
      id v36 = v34 == 0;
      if (!v34) {
        v35 = "";
      }
      v37 = *(_DWORD *)(v34 + 368);
      if (v36) {
        v38 = "";
      }
      else {
        v38 = " ";
      }
      *(_DWORD *)buf = 136447234;
      BOOL v57 = "nw_protocol_http2_notify_block_invoke";
      v58 = 2082;
      v59 = (void *)v35;
      os_log_type_t v60 = 2080;
      BOOL v61 = v38;
      v62 = 1024;
      os_log_type_t v63 = v37;
      os_log_type_t v64 = 2048;
      os_log_type_t v65 = a2;
      os_log_type_t v21 = "%{public}s %{public}s%s<i%u> no object for hash node %p, skipping notify, no backtrace";
    }

    else
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      BOOL v14 = (os_log_s *)gconnectionLogObj;
      os_log_type_t v15 = type;
      if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type)) {
        goto LABEL_55;
      }
      os_log_type_t v29 = *(void *)(a1 + 32);
      os_log_type_t v30 = (const char *)(v29 + 390);
      v31 = v29 == 0;
      if (!v29) {
        os_log_type_t v30 = "";
      }
      os_log_type_t v32 = *(_DWORD *)(v29 + 368);
      if (v31) {
        BOOL v33 = "";
      }
      else {
        BOOL v33 = " ";
      }
      *(_DWORD *)buf = 136447234;
      BOOL v57 = "nw_protocol_http2_notify_block_invoke";
      v58 = 2082;
      v59 = (void *)v30;
      os_log_type_t v60 = 2080;
      BOOL v61 = v33;
      v62 = 1024;
      os_log_type_t v63 = v32;
      os_log_type_t v64 = 2048;
      os_log_type_t v65 = a2;
      os_log_type_t v21 = "%{public}s %{public}s%s<i%u> no object for hash node %p, skipping notify, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v14, v15, v21, buf, 0x30u);
    goto LABEL_55;
  }

  char v5 = *(void *)(v4 + 24);
  if (v5 && (id v6 = *(void (**)(uint64_t, void, void, void, void))(v5 + 160)) != 0LL)
  {
    v6(v4, *(void *)(a1 + 40), *(unsigned int *)(a1 + 64), *(void *)(a1 + 48), *(void *)(a1 + 56));
  }

  else
  {
    os_log_type_t v41 = *(void *)(a1 + 32);
    if (!v41 || (*(__int16 *)(v41 + 388) & 0x80000000) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      BOOL v42 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO))
      {
        char v43 = *(void *)(a1 + 32);
        dispatch_workloop_t v44 = (const char *)(v43 + 390);
        v45 = "";
        os_log_type_t v46 = v43 == 0;
        os_log_type_t v47 = *(_DWORD *)(v43 + 368);
        BOOL v57 = "nw_protocol_http2_notify_block_invoke";
        if (v46) {
          dispatch_workloop_t v44 = "";
        }
        v58 = 2082;
        *(_DWORD *)buf = 136447234;
        if (!v46) {
          v45 = " ";
        }
        v59 = (void *)v44;
        os_log_type_t v60 = 2080;
        BOOL v61 = v45;
        v62 = 1024;
        os_log_type_t v63 = v47;
        os_log_type_t v64 = 2048;
        os_log_type_t v65 = v4;
        _os_log_impl( &dword_181A5C000,  v42,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u> notify callback not set on input handler %p, skipping notify",  buf,  0x30u);
      }
    }
  }

  return 1LL;
}

    if (v41) {
      free(v41);
    }
    return *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) == 0;
  }

  id v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void **)(a2 + 40);
  if (v6)
  {
    *(void *)(v6 + 40) = v7;
    uint64_t v7 = *(void **)(a2 + 40);
  }

  else
  {
    *(void *)(a1[12] + 8LL) = v7;
  }

  void *v7 = v6;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  char v5 = 1LL;
  nw_frame_finalize(a2);
  return v5;
}

      close(v14);
      return 0LL;
    }

    os_log_type_t v15 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (v15 == 6 || v15 == 102)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v16 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446978;
        os_log_type_t v39 = "nw_network_agent_remove_from_interface";
        v40 = 1024;
        *(_DWORD *)os_log_type_t v41 = v14;
        *(_WORD *)&v41[4] = 2082;
        *(void *)&v41[6] = a1;
        BOOL v42 = 1024;
        char v43 = v15;
        id v17 = "%{public}s ioctl(%d, SIOCDIFAGENTID, %{public}s) failed %{darwin.errno}d";
        id v18 = (os_log_s *)v16;
        char v19 = OS_LOG_TYPE_ERROR;
        char v20 = 34;
LABEL_54:
        _os_log_impl(&dword_181A5C000, v18, v19, v17, buf, v20);
        goto LABEL_83;
      }

      goto LABEL_83;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446978;
    os_log_type_t v39 = "nw_network_agent_remove_from_interface";
    v40 = 1024;
    *(_DWORD *)os_log_type_t v41 = v14;
    *(_WORD *)&v41[4] = 2082;
    *(void *)&v41[6] = a1;
    BOOL v42 = 1024;
    char v43 = v15;
    os_log_type_t v29 = (char *)_os_log_send_and_compose_impl();
    v37 = OS_LOG_TYPE_ERROR;
    id v36 = 0;
    if ((__nwlog_fault(v29, &v37, &v36) & 1) != 0)
    {
      if (v37 == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v30 = (os_log_s *)__nwlog_obj();
        v31 = v37;
        if (!os_log_type_enabled(v30, v37)) {
          goto LABEL_81;
        }
        *(_DWORD *)buf = 136446978;
        os_log_type_t v39 = "nw_network_agent_remove_from_interface";
        v40 = 1024;
        *(_DWORD *)os_log_type_t v41 = v14;
        *(_WORD *)&v41[4] = 2082;
        *(void *)&v41[6] = a1;
        BOOL v42 = 1024;
        char v43 = v15;
        os_log_type_t v32 = "%{public}s ioctl(%d, SIOCDIFAGENTID, %{public}s) failed %{darwin.errno}d";
        goto LABEL_80;
      }

      if (!v36)
      {
        os_log_type_t v30 = (os_log_s *)__nwlog_obj();
        v31 = v37;
        if (!os_log_type_enabled(v30, v37)) {
          goto LABEL_81;
        }
        *(_DWORD *)buf = 136446978;
        os_log_type_t v39 = "nw_network_agent_remove_from_interface";
        v40 = 1024;
        *(_DWORD *)os_log_type_t v41 = v14;
        *(_WORD *)&v41[4] = 2082;
        *(void *)&v41[6] = a1;
        BOOL v42 = 1024;
        char v43 = v15;
        os_log_type_t v32 = "%{public}s ioctl(%d, SIOCDIFAGENTID, %{public}s) failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_80;
      }

      BOOL v33 = (char *)__nw_create_backtrace_string();
      os_log_type_t v30 = (os_log_s *)__nwlog_obj();
      v31 = v37;
      dispatch_workloop_t v34 = os_log_type_enabled(v30, v37);
      if (v33)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136447234;
          os_log_type_t v39 = "nw_network_agent_remove_from_interface";
          v40 = 1024;
          *(_DWORD *)os_log_type_t v41 = v14;
          *(_WORD *)&v41[4] = 2082;
          *(void *)&v41[6] = a1;
          BOOL v42 = 1024;
          char v43 = v15;
          dispatch_workloop_t v44 = 2082;
          v45 = v33;
          _os_log_impl( &dword_181A5C000,  v30,  v31,  "%{public}s ioctl(%d, SIOCDIFAGENTID, %{public}s) failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x2Cu);
        }

        free(v33);
        goto LABEL_81;
      }

      if (v34)
      {
        *(_DWORD *)buf = 136446978;
        os_log_type_t v39 = "nw_network_agent_remove_from_interface";
        v40 = 1024;
        *(_DWORD *)os_log_type_t v41 = v14;
        *(_WORD *)&v41[4] = 2082;
        *(void *)&v41[6] = a1;
        BOOL v42 = 1024;
        char v43 = v15;
        os_log_type_t v32 = "%{public}s ioctl(%d, SIOCDIFAGENTID, %{public}s) failed %{darwin.errno}d, no backtrace";
LABEL_80:
        _os_log_impl(&dword_181A5C000, v30, v31, v32, buf, 0x22u);
      }
    }

                if (v28) {
                  free(v28);
                }
                goto LABEL_85;
              }

              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_protocol_test_access_options";
              __int16 v24 = (char *)_os_log_send_and_compose_impl();
              type[0] = OS_LOG_TYPE_ERROR;
              BOOL v66 = 0;
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v25 = (os_log_s *)gLogObj;
                os_log_type_t v26 = type[0];
                if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_protocol_test_access_options";
                  id v27 = "%{public}s Failed to copy protocol options";
LABEL_74:
                  _os_log_impl(&dword_181A5C000, v25, v26, v27, buf, 0xCu);
                }
              }

              else if (v66)
              {
                v35 = (char *)__nw_create_backtrace_string();
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v25 = (os_log_s *)gLogObj;
                os_log_type_t v26 = type[0];
                id v36 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
                if (v35)
                {
                  if (v36)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_protocol_test_access_options";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v35;
                    _os_log_impl( &dword_181A5C000,  v25,  v26,  "%{public}s Failed to copy protocol options, dumping backtrace:%{public}s",  buf,  0x16u);
                  }

                  free(v35);
                  goto LABEL_75;
                }

                if (v36)
                {
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_protocol_test_access_options";
                  id v27 = "%{public}s Failed to copy protocol options, no backtrace";
                  goto LABEL_74;
                }
              }

              else
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v25 = (os_log_s *)gLogObj;
                os_log_type_t v26 = type[0];
                if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(void *)&uint8_t buf[4] = "nw_protocol_test_access_options";
                  id v27 = "%{public}s Failed to copy protocol options, backtrace limit exceeded";
                  goto LABEL_74;
                }
              }

      goto LABEL_32;
    }

    if (!(_BYTE)v42)
    {
      __nwlog_obj();
      __int16 v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v39 = buf[0];
      if (os_log_type_enabled(v24, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)&__dst[0].sa_len = 136446210;
        *(void *)&__dst[0].sa_data[2] = "nw_interface_copy_local_address_for_remote_address";
        _os_log_impl( &dword_181A5C000,  v24,  v39,  "%{public}s called with null (nw_endpoint_get_type(remote_endpoint) == nw_endpoint_type_address), backtrace limit exceeded",  &__dst[0].sa_len,  0xCu);
      }

      goto LABEL_83;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    __int16 v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v35 = buf[0];
    id v36 = os_log_type_enabled(v24, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)&__dst[0].sa_len = 136446210;
        *(void *)&__dst[0].sa_data[2] = "nw_interface_copy_local_address_for_remote_address";
        _os_log_impl( &dword_181A5C000,  v24,  v35,  "%{public}s called with null (nw_endpoint_get_type(remote_endpoint) == nw_endpoint_type_address), no backtrace",  &__dst[0].sa_len,  0xCu);
      }

      goto LABEL_83;
    }

    if (v36)
    {
      *(_DWORD *)&__dst[0].sa_len = 136446466;
      *(void *)&__dst[0].sa_data[2] = "nw_interface_copy_local_address_for_remote_address";
      *(_WORD *)&__dst[0].sa_data[10] = 2082;
      *(void *)&__dst[0].sa_data[12] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v24,  v35,  "%{public}s called with null (nw_endpoint_get_type(remote_endpoint) == nw_endpoint_type_address), dumping backtrace:%{public}s",  &__dst[0].sa_len,  0x16u);
    }

      if (v39) {
LABEL_84:
      }
        free(v39);
LABEL_85:
      free(v15);
      goto LABEL_86;
    }

    BOOL v61 = (os_log_s *)__nwlog_obj(0LL, v14);
    os_log_type_enabled(v61, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446466;
    __uint64_t v76 = "strict_malloc";
    v77 = 2048;
    *(void *)unint64_t v78 = st_size;
    v62 = (void *)_os_log_send_and_compose_impl();
    if (__nwlog_abort((uint64_t)v62))
    {
      __break(1u);
      return;
    }

    free(v62);
    __nwlog_obj(v63, v64);
    *(_DWORD *)buf = 136446466;
    __uint64_t v76 = "networkd_settings_read_from_file";
    v77 = 2048;
    *(void *)unint64_t v78 = st_size;
    os_log_type_t v15 = (void *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    __uint64_t v73 = 0;
    os_log_type_t v65 = __nwlog_fault((const char *)v15, &type, &v73);
    if ((_DWORD)v65)
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v67 = (os_log_s *)__nwlog_obj(v65, v66);
        v68 = type;
        if (!os_log_type_enabled(v67, type)) {
          goto LABEL_105;
        }
        *(_DWORD *)buf = 136446466;
        __uint64_t v76 = "networkd_settings_read_from_file";
        v77 = 2048;
        *(void *)unint64_t v78 = st_size;
        v69 = "%{public}s malloc(%lld) failed";
LABEL_104:
        _os_log_impl(&dword_181A5C000, v67, v68, v69, buf, 0x16u);
        goto LABEL_105;
      }

      if (!v73)
      {
        os_log_type_t v67 = (os_log_s *)__nwlog_obj(v65, v66);
        v68 = type;
        if (!os_log_type_enabled(v67, type)) {
          goto LABEL_105;
        }
        *(_DWORD *)buf = 136446466;
        __uint64_t v76 = "networkd_settings_read_from_file";
        v77 = 2048;
        *(void *)unint64_t v78 = st_size;
        v69 = "%{public}s malloc(%lld) failed, backtrace limit exceeded";
        goto LABEL_104;
      }

      v70 = (char *)__nw_create_backtrace_string();
      os_log_type_t v67 = (os_log_s *)__nwlog_obj(v70, v71);
      v68 = type;
      v72 = os_log_type_enabled(v67, type);
      if (!v70)
      {
        if (!v72) {
          goto LABEL_105;
        }
        *(_DWORD *)buf = 136446466;
        __uint64_t v76 = "networkd_settings_read_from_file";
        v77 = 2048;
        *(void *)unint64_t v78 = st_size;
        v69 = "%{public}s malloc(%lld) failed, no backtrace";
        goto LABEL_104;
      }

      if (v72)
      {
        *(_DWORD *)buf = 136446722;
        __uint64_t v76 = "networkd_settings_read_from_file";
        v77 = 2048;
        *(void *)unint64_t v78 = st_size;
        *(_WORD *)&v78[8] = 2082;
        *(void *)&v78[10] = v70;
        _os_log_impl( &dword_181A5C000,  v67,  v68,  "%{public}s malloc(%lld) failed, dumping backtrace:%{public}s",  buf,  0x20u);
      }

      free(v70);
    }

LABEL_125:
LABEL_126:
      if (!v50)
      {
LABEL_128:

        goto LABEL_129;
      }

          free(v50);
          goto LABEL_126;
        }

        __nwlog_obj();
        __uint64_t v110 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        __int16 v111 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        v130 = 0;
        if (__nwlog_fault(v111, &type, &v130))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            uint64_t v112 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            __int16 v113 = type;
            if (os_log_type_enabled(v112, type))
            {
              *(_DWORD *)buf = 136446210;
              v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
              _os_log_impl(&dword_181A5C000, v112, v113, "%{public}s called with null stack", buf, 0xCu);
            }
          }

          else
          {
            if (v130)
            {
              v119 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v120 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              v121 = type;
              v122 = os_log_type_enabled(v120, type);
              if (v119)
              {
                if (v122)
                {
                  *(_DWORD *)buf = 136446466;
                  v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                  v134 = 2082;
                  v135 = v119;
                  _os_log_impl( &dword_181A5C000,  v120,  v121,  "%{public}s called with null stack, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                free(v119);
              }

              else
              {
                if (v122)
                {
                  *(_DWORD *)buf = 136446210;
                  v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                  _os_log_impl( &dword_181A5C000,  v120,  v121,  "%{public}s called with null stack, no backtrace",  buf,  0xCu);
                }
              }

              goto LABEL_253;
            }

            __nwlog_obj();
            uint64_t v112 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v123 = type;
            if (os_log_type_enabled(v112, type))
            {
              *(_DWORD *)buf = 136446210;
              v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
              _os_log_impl( &dword_181A5C000,  v112,  v123,  "%{public}s called with null stack, backtrace limit exceeded",  buf,  0xCu);
            }
          }
        }

      if (v29) {
        free(v29);
      }
LABEL_127:
      os_log_type_t v47 = *((unsigned __int16 *)a1 + 102);
      if ((v47 & 0x8000) != 0)
      {
        os_packet_set_keep_alive();
        if (((*((unsigned __int16 *)a1 + 102) | (*((unsigned __int8 *)a1 + 206) << 16)) & 0x10000) == 0)
        {
LABEL_129:
          if (!*((_WORD *)a1 + 99))
          {
LABEL_131:
            os_packet_add_inet_csum_flags();
            goto LABEL_132;
          }

      goto LABEL_55;
    }

          goto LABEL_126;
        }

        if (!(_BYTE)v154)
        {
          __nwlog_obj();
          v95 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v123 = type[0];
          if (os_log_type_enabled(v95, type[0]))
          {
            v124 = nw_group_descriptor_get_type(*((void **)a1 + 8));
            if (v124 > 4) {
              v125 = "unknown";
            }
            else {
              v125 = off_189BB74C8[v124];
            }
            *(_DWORD *)buf = 136446466;
            v164 = "-[NWConcrete_nw_connection_group initWithDescriptor:connection:parameters:]";
            v165 = 2080;
            *(void *)v166 = v125;
            _os_log_impl( &dword_181A5C000,  v95,  v123,  "%{public}s Unsupported group descriptor type: %s, backtrace limit exceeded",  buf,  0x16u);
          }

          goto LABEL_125;
        }

        v118 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v95 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v119 = type[0];
        v120 = os_log_type_enabled(v95, type[0]);
        if (!v118)
        {
          if (v120)
          {
            v132 = nw_group_descriptor_get_type(*((void **)a1 + 8));
            if (v132 > 4) {
              v133 = "unknown";
            }
            else {
              v133 = off_189BB74C8[v132];
            }
            *(_DWORD *)buf = 136446466;
            v164 = "-[NWConcrete_nw_connection_group initWithDescriptor:connection:parameters:]";
            v165 = 2080;
            *(void *)v166 = v133;
            _os_log_impl( &dword_181A5C000,  v95,  v119,  "%{public}s Unsupported group descriptor type: %s, no backtrace",  buf,  0x16u);
          }

          goto LABEL_125;
        }

        if (v120)
        {
          v121 = nw_group_descriptor_get_type(*((void **)a1 + 8));
          if (v121 > 4) {
            v122 = "unknown";
          }
          else {
            v122 = off_189BB74C8[v121];
          }
          *(_DWORD *)buf = 136446722;
          v164 = "-[NWConcrete_nw_connection_group initWithDescriptor:connection:parameters:]";
          v165 = 2080;
          *(void *)v166 = v122;
          *(_WORD *)&v166[8] = 2082;
          *(void *)&v166[10] = v118;
          _os_log_impl( &dword_181A5C000,  v95,  v119,  "%{public}s Unsupported group descriptor type: %s, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(v118);
      }

                nw::release_if_needed<nw_protocol *>((uint64_t *)type);
                if ((v37 & 1) != 0) {
                  goto LABEL_130;
                }
                goto LABEL_126;
              }

              if (v78 == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v52 = v78;
                if (os_log_type_enabled(v51, v78))
                {
                  v53 = (const char *)v15[2];
                  if (!v53) {
                    v53 = "invalid";
                  }
                  *(_DWORD *)buf = 136446722;
                  v84 = "__nw_protocol_remove_input_handler";
                  v85 = 2082;
                  *(void *)v86 = v53;
                  *(_WORD *)&v86[8] = 2048;
                  *(void *)&v86[10] = v15;
                  _os_log_impl( &dword_181A5C000,  v51,  v52,  "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback",  buf,  0x20u);
                }
              }

              else if (v77)
              {
                v58 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                char v75 = v78;
                v59 = os_log_type_enabled(v51, v78);
                if (v58)
                {
                  if (v59)
                  {
                    os_log_type_t v60 = (const char *)v15[2];
                    if (!v60) {
                      os_log_type_t v60 = "invalid";
                    }
                    *(_DWORD *)buf = 136446978;
                    v84 = "__nw_protocol_remove_input_handler";
                    v85 = 2082;
                    *(void *)v86 = v60;
                    *(_WORD *)&v86[8] = 2048;
                    *(void *)&v86[10] = v15;
                    *(_WORD *)&v86[18] = 2082;
                    *(void *)&v86[20] = v58;
                    _os_log_impl( &dword_181A5C000,  v51,  v75,  "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, dumping backtrace:%{public}s",  buf,  0x2Au);
                  }

                  free(v58);
                  goto LABEL_120;
                }

                if (v59)
                {
                  BOOL v66 = (const char *)v15[2];
                  if (!v66) {
                    BOOL v66 = "invalid";
                  }
                  *(_DWORD *)buf = 136446722;
                  v84 = "__nw_protocol_remove_input_handler";
                  v85 = 2082;
                  *(void *)v86 = v66;
                  *(_WORD *)&v86[8] = 2048;
                  *(void *)&v86[10] = v15;
                  _os_log_impl( &dword_181A5C000,  v51,  v75,  "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, no backtrace",  buf,  0x20u);
                }
              }

              else
              {
                __nwlog_obj();
                v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v64 = v78;
                if (os_log_type_enabled(v51, v78))
                {
                  os_log_type_t v65 = (const char *)v15[2];
                  if (!v65) {
                    os_log_type_t v65 = "invalid";
                  }
                  *(_DWORD *)buf = 136446722;
                  v84 = "__nw_protocol_remove_input_handler";
                  v85 = 2082;
                  *(void *)v86 = v65;
                  *(_WORD *)&v86[8] = 2048;
                  *(void *)&v86[10] = v15;
                  _os_log_impl( &dword_181A5C000,  v51,  v64,  "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, backtrace limit exceeded",  buf,  0x20u);
                }
              }

LABEL_120:
              v50 = (char *)v49;
              goto LABEL_121;
            }

            __nwlog_obj();
            BOOL v54 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            v84 = "__nw_protocol_remove_input_handler";
            uint64_t v55 = (char *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(p_paths_log_id_num) = 0;
            if (__nwlog_fault(v55, type, &p_paths_log_id_num))
            {
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v56 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                BOOL v57 = type[0];
                if (os_log_type_enabled(v56, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  v84 = "__nw_protocol_remove_input_handler";
                  _os_log_impl(&dword_181A5C000, v56, v57, "%{public}s called with null protocol", buf, 0xCu);
                }
              }

              else if ((_BYTE)p_paths_log_id_num)
              {
                BOOL v61 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v56 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                v62 = type[0];
                os_log_type_t v63 = os_log_type_enabled(v56, type[0]);
                if (v61)
                {
                  if (v63)
                  {
                    *(_DWORD *)buf = 136446466;
                    v84 = "__nw_protocol_remove_input_handler";
                    v85 = 2082;
                    *(void *)v86 = v61;
                    _os_log_impl( &dword_181A5C000,  v56,  v62,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
                  }

                  free(v61);
                  goto LABEL_150;
                }

                if (v63)
                {
                  *(_DWORD *)buf = 136446210;
                  v84 = "__nw_protocol_remove_input_handler";
                  _os_log_impl( &dword_181A5C000,  v56,  v62,  "%{public}s called with null protocol, no backtrace",  buf,  0xCu);
                }
              }

              else
              {
                __nwlog_obj();
                v56 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                unint64_t v74 = type[0];
                if (os_log_type_enabled(v56, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  v84 = "__nw_protocol_remove_input_handler";
                  _os_log_impl( &dword_181A5C000,  v56,  v74,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
                }
              }
            }

          goto LABEL_126;
        }

        if (!v66)
        {
          __nwlog_obj();
          os_log_type_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v56 = v67;
          if (os_log_type_enabled(v29, v67))
          {
            BOOL v57 = (const char *)v6[2];
            if (!v57) {
              BOOL v57 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            __uint64_t v73 = "__nw_protocol_get_message_properties";
            unint64_t v74 = 2082;
            char v75 = (void *)v57;
            __uint64_t v76 = 2048;
            v77 = v6;
            _os_log_impl( &dword_181A5C000,  v29,  v56,  "%{public}s protocol %{public}s (%p) has invalid get_message_properties callback, backtrace limit exceeded",  buf,  0x20u);
          }

          goto LABEL_125;
        }

        os_log_type_t v41 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v42 = v67;
        char v43 = os_log_type_enabled(v29, v67);
        if (!v41)
        {
          if (v43)
          {
            os_log_type_t v60 = (const char *)v6[2];
            if (!v60) {
              os_log_type_t v60 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            __uint64_t v73 = "__nw_protocol_get_message_properties";
            unint64_t v74 = 2082;
            char v75 = (void *)v60;
            __uint64_t v76 = 2048;
            v77 = v6;
            _os_log_impl( &dword_181A5C000,  v29,  v42,  "%{public}s protocol %{public}s (%p) has invalid get_message_properties callback, no backtrace",  buf,  0x20u);
          }

          goto LABEL_125;
        }

        if (v43)
        {
          dispatch_workloop_t v44 = (const char *)v6[2];
          if (!v44) {
            dispatch_workloop_t v44 = "invalid";
          }
          *(_DWORD *)buf = 136446978;
          __uint64_t v73 = "__nw_protocol_get_message_properties";
          unint64_t v74 = 2082;
          char v75 = (void *)v44;
          __uint64_t v76 = 2048;
          v77 = v6;
          unint64_t v78 = 2082;
          char v79 = v41;
          _os_log_impl( &dword_181A5C000,  v29,  v42,  "%{public}s protocol %{public}s (%p) has invalid get_message_properties callback, dumping backtrace:%{public}s",  buf,  0x2Au);
        }

            nw_socks5_connection_cancel_on_queue(v9, 0LL);
          }

          goto LABEL_102;
        }

        __nwlog_obj();
        id v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_socks5_connection_inner_connection_read_handler_on_queue";
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v9;
          *(_WORD *)&buf[22] = 2048;
          *(void *)&buf[24] = size;
          _os_log_impl( &dword_181A5C000,  v36,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}@ connection received unexpected number of bytes %zu",  buf,  0x20u);
        }

        goto LABEL_175;
      }

                xpc_dictionary_set_BOOL(v2, "prohibit_joining_protocols", 1);
                v35 = *((void *)v1 + 12);
                if ((v35 & 0x1000000) == 0)
                {
LABEL_90:
                  if ((v35 & 0x4000000) == 0) {
                    goto LABEL_91;
                  }
                  goto LABEL_127;
                }

              if (v98) {
                free(v98);
              }
              options = 0LL;
              goto LABEL_37;
            }

            v147 = v14;
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            char v20 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
            {
              BOOL v90 = nw_endpoint_handler_get_id_string(v11);
              os_log_type_t v91 = nw_endpoint_handler_dry_run_string(v11);
              v92 = nw_endpoint_handler_copy_endpoint(v11);
              v93 = nw_endpoint_get_logging_description(v92);
              v94 = nw_endpoint_handler_state_string(v11);
              v95 = nw_endpoint_handler_mode_string(v11);
              v96 = nw_endpoint_handler_copy_current_path(v11);
              *(_DWORD *)buf = 136447746;
              v173 = "nw_endpoint_proxy_add_config_if_applicable";
              v174 = 2082;
              v175 = (void *)v90;
              v176 = 2082;
              v177 = v91;
              v178 = 2082;
              v179 = v93;
              v180 = 2082;
              v181 = v94;
              v182 = 2082;
              v183 = v95;
              v184 = 2114;
              v185 = v96;
              _os_log_impl( &dword_181A5C000,  v20,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Running HTTP Connect proxy over TLS",  buf,  0x48u);

              BOOL v14 = v147;
            }
          }

          else
          {
            if ((logging_disabled & 1) != 0) {
              goto LABEL_13;
            }
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            char v20 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
            {
              v143 = v14;
              os_log_type_t v21 = nw_endpoint_handler_get_id_string(v11);
              v22 = nw_endpoint_handler_dry_run_string(v11);
              uint64_t v23 = nw_endpoint_handler_copy_endpoint(v11);
              __int16 v24 = nw_endpoint_get_logging_description(v23);
              v25 = nw_endpoint_handler_state_string(v11);
              os_log_type_t v26 = nw_endpoint_handler_mode_string(v11);
              id v27 = nw_endpoint_handler_copy_current_path(v11);
              *(_DWORD *)buf = 136447746;
              v173 = "nw_endpoint_proxy_add_config_if_applicable";
              v174 = 2082;
              v175 = (void *)v21;
              v176 = 2082;
              v177 = v22;
              v178 = 2082;
              v179 = v24;
              v180 = 2082;
              v181 = v25;
              v182 = 2082;
              v183 = v26;
              v184 = 2114;
              v185 = v27;
              _os_log_impl( &dword_181A5C000,  v20,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Running HTTP Connect proxy over TLS",  buf,  0x48u);

              BOOL v14 = v143;
            }
          }

          goto LABEL_13;
        }

        if (v17)
        {
          if (nw_proxy_config_override_opaque_https(*((void **)v165 + 5)))
          {
            v48 = nw_endpoint_handler_get_minimize_logging(v11);
            id v49 = nw_endpoint_handler_get_logging_disabled(v11);
            if (v48)
            {
              v149 = v14;
              if ((v49 & 1) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                v50 = (os_log_s *)(id)gconnectionLogObj;
                if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
                {
                  __int16 v113 = nw_endpoint_handler_get_id_string(v11);
                  v114 = nw_endpoint_handler_dry_run_string(v11);
                  uint64_t v115 = nw_endpoint_handler_copy_endpoint(v11);
                  v116 = nw_endpoint_get_logging_description(v115);
                  v117 = nw_endpoint_handler_state_string(v11);
                  v118 = nw_endpoint_handler_mode_string(v11);
                  v119 = nw_endpoint_handler_copy_current_path(v11);
                  *(_DWORD *)buf = 136447746;
                  v173 = "nw_endpoint_proxy_add_config_if_applicable";
                  v174 = 2082;
                  v175 = (void *)v113;
                  v176 = 2082;
                  v177 = v114;
                  v178 = 2082;
                  v179 = v116;
                  v180 = 2082;
                  v181 = v117;
                  v182 = 2082;
                  v183 = v118;
                  v184 = 2114;
                  v185 = v119;
                  _os_log_impl( &dword_181A5C000,  v50,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Client overrode HTT P Connect proxies to be transparent",  buf,  0x48u);

                  BOOL v14 = v149;
                }

                goto LABEL_33;
              }
            }

            else if ((v49 & 1) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              v50 = (os_log_s *)(id)gconnectionLogObj;
              if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
              {
                v145 = v14;
                v51 = nw_endpoint_handler_get_id_string(v11);
                os_log_type_t v52 = nw_endpoint_handler_dry_run_string(v11);
                v53 = nw_endpoint_handler_copy_endpoint(v11);
                BOOL v54 = nw_endpoint_get_logging_description(v53);
                uint64_t v55 = nw_endpoint_handler_state_string(v11);
                v56 = nw_endpoint_handler_mode_string(v11);
                BOOL v57 = nw_endpoint_handler_copy_current_path(v11);
                *(_DWORD *)buf = 136447746;
                v173 = "nw_endpoint_proxy_add_config_if_applicable";
                v174 = 2082;
                v175 = (void *)v51;
                v176 = 2082;
                v177 = v52;
                v178 = 2082;
                v179 = v54;
                v180 = 2082;
                v181 = v55;
                v182 = 2082;
                v183 = v56;
                v184 = 2114;
                v185 = v57;
                _os_log_impl( &dword_181A5C000,  v50,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Client overrode HTTP Connect proxies to be transparent",  buf,  0x48u);

                BOOL v14 = v145;
              }

          *(_DWORD *)v8 |= 0x3000u;
          nw_masque_mark_connected((uint64_t)handle);
          return;
        }

        if (strcmp(v29->identifier->name, "endpoint_flow") && strcmp(name, "flow_replay"))
        {
          if (!strncmp(name, "ohttp", 5uLL)) {
            goto LABEL_125;
          }
          goto LABEL_93;
        }

        if (nw_parameters_get_fast_open_enabled(*(nw_parameters_t *)handle[5].flow_id))
        {
          *(_DWORD *)v8 |= 0x800u;
          goto LABEL_104;
        }

    _OWORD *v53 = 0;
    v68 = v53 + 1;
    goto LABEL_126;
  }

  v84 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v84, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v126 = "strict_calloc";
  v127 = 2048;
  v128 = 1LL;
  v129 = 2048;
  v130 = v66;
  v85 = (void *)_os_log_send_and_compose_impl();
  uint64_t result = __nwlog_abort((uint64_t)v85);
  if (!result)
  {
    free(v85);
    v68 = 0LL;
    if (!a6) {
      goto LABEL_126;
    }
    goto LABEL_125;
  }

    if (v68) {
      free(v68);
    }
    os_log_type_t v21 = 12LL;
    goto LABEL_18;
  }

  __nwlog_obj();
  os_log_type_t v63 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446722;
  *(void *)&uint8_t buf[4] = "nw_service_connector_accept_connection_for_request";
  *(_WORD *)&buf[12] = 2114;
  *(void *)&buf[14] = v95;
  *(_WORD *)&buf[22] = 2114;
  *(void *)&buf[24] = v7;
  os_log_type_t v64 = (char *)_os_log_send_and_compose_impl();

  v100[0] = 16;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v64, v100, &type))
  {
    if (v100[0] == 17)
    {
      __nwlog_obj();
      os_log_type_t v65 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v66 = v100[0];
      if (os_log_type_enabled(v65, (os_log_type_t)v100[0]))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_service_connector_accept_connection_for_request";
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v95;
        *(_WORD *)&buf[22] = 2114;
        *(void *)&buf[24] = v7;
        _os_log_impl( &dword_181A5C000,  v65,  v66,  "%{public}s %{public}@ Expected completion block %{public}@",  buf,  0x20u);
      }
    }

    else if (type)
    {
      os_log_type_t v71 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v65 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v72 = v100[0];
      __uint64_t v73 = os_log_type_enabled(v65, (os_log_type_t)v100[0]);
      if (v71)
      {
        if (v73)
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_service_connector_accept_connection_for_request";
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v95;
          *(_WORD *)&buf[22] = 2114;
          *(void *)&buf[24] = v7;
          *(_WORD *)&buf[32] = 2082;
          *(void *)&buf[34] = v71;
          _os_log_impl( &dword_181A5C000,  v65,  v72,  "%{public}s %{public}@ Expected completion block %{public}@, dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(v71);
        goto LABEL_120;
      }

      if (v73)
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_service_connector_accept_connection_for_request";
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v95;
        *(_WORD *)&buf[22] = 2114;
        *(void *)&buf[24] = v7;
        _os_log_impl( &dword_181A5C000,  v65,  v72,  "%{public}s %{public}@ Expected completion block %{public}@, no backtrace",  buf,  0x20u);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v65 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v77 = v100[0];
      if (os_log_type_enabled(v65, (os_log_type_t)v100[0]))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_service_connector_accept_connection_for_request";
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v95;
        *(_WORD *)&buf[22] = 2114;
        *(void *)&buf[24] = v7;
        _os_log_impl( &dword_181A5C000,  v65,  v77,  "%{public}s %{public}@ Expected completion block %{public}@, backtrace limit exceeded",  buf,  0x20u);
      }
    }
  }

                  _os_log_impl(&dword_181A5C000, v73, v74, v75, buf, 0x16u);
                  goto LABEL_126;
                }

                v58 = (os_log_s *)__nwlog_obj();
                v59 = v118[0];
                if (os_log_type_enabled(v58, v118[0]))
                {
                  os_log_type_t v60 = *(void *)(v23 + 48);
                  if (v60)
                  {
                    BOOL v61 = *(const char **)(v60 + 16);
                    if (!v61) {
                      BOOL v61 = "invalid";
                    }
                  }

                  else
                  {
                    BOOL v61 = "invalid";
                  }

                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http3_stream_encoder_stream_output_available";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v61;
                  __uint64_t v73 = v58;
                  unint64_t v74 = v59;
                  char v75 = "%{public}s protocol %{public}s has invalid output_available callback";
                  goto LABEL_125;
                }
              }

    if (name2id_plus_one[v76 & 0x1FF])
    {
      v96 = name2id_plus_one[v76 & 0x1FF] - 1;
      if (LODWORD((&static_table)[3 * v96 + 2]) == (_DWORD)v63)
      {
        os_log_type_t v97 = memcmp((&static_table)[3 * v96], v313, v72);
        os_log_type_t v71 = (unint64_t)v310;
        __uint64_t v76 = v312;
        if (!v97)
        {
          if ((_DWORD)v26)
          {
            LODWORD(v26) = 1;
            if (qenc_has_or_can_evict_at_least(v68, v282))
            {
              __int16 v113 = *(void *)(v68 + 216);
              v114 = 1LL;
              os_log_type_t v71 = (unint64_t)v310;
              v82 = v96;
              if (v113)
              {
                uint64_t v115 = 228LL;
                if (!*(_DWORD *)(v68 + 232)) {
                  uint64_t v115 = 224LL;
                }
                v116 = v113 + 8LL * *(unsigned int *)(v68 + v115);
                *(_DWORD *)(v116 + 4) = v61;
                v117 = v113 - 8;
                do
                {
                  v118 = *(_DWORD *)(v117 + 12);
                  v117 += 8LL;
                }

                while (v118 != v61);
                v114 = v117 < v116;
              }

              if (v305) {
                v119 = v306 == 0;
              }
              else {
                v119 = 1;
              }
              v120 = !v119;
              v121 = (unsigned int *)((char *)&lsqpack_enc_encode_programs + 64 * v114 + 32 * v308 + 16 * v120);
              char v79 = *v121;
              os_log_type_t v83 = v121[1];
              v80 = v121[2];
              v81 = v121[3];
              LODWORD(v26) = 1;
            }

            else
            {
              v81 = 0;
              char v79 = 0LL;
              v80 = 0LL;
              os_log_type_t v71 = (unint64_t)v310;
              v82 = v96;
              os_log_type_t v83 = 3LL;
            }
          }

          else
          {
            v82 = v96;
            char v79 = 0LL;
            v81 = 0;
            LODWORD(v26) = 0;
            os_log_type_t v83 = 3LL;
            v80 = 0LL;
          }

          goto LABEL_195;
        }
      }
    }

    BOOL v98 = -1;
    if (!v305
      || (__int16 v24 = 0LL,
          v99 = *(void *)(v68 + 72),
          !*(void *)(v99 + 32LL * (v76 & ~(-1 << *(_DWORD *)(v68 + 52))))))
    {
LABEL_146:
      if (!(_DWORD)v26)
      {
        char v79 = 0LL;
        v81 = 0;
        v82 = v295;
        LODWORD(v26) = 0;
        os_log_type_t v83 = 6LL;
        v80 = 0LL;
        goto LABEL_164;
      }

      os_log_type_t v100 = *(void *)(v68 + 216);
      if (!v100) {
        goto LABEL_153;
      }
      BOOL v101 = 228LL;
      if (!*(_DWORD *)(v68 + 232)) {
        BOOL v101 = 224LL;
      }
      os_log_type_t v102 = v100 + 8LL * *(unsigned int *)(v68 + v101);
      *(_DWORD *)(v102 + 4) = v61;
      os_log_type_t v103 = v100 - 8;
      do
      {
        __uint64_t v104 = *(_DWORD *)(v103 + 12);
        v103 += 8LL;
      }

      while (v104 != v61);
      if (v103 >= v102)
      {
LABEL_155:
        v72 = v309;
        if (!v100) {
          goto LABEL_161;
        }
      }

      else
      {
LABEL_153:
        if ((v98 & 0x80000000) == 0)
        {
          if (!v98) {
            goto LABEL_155;
          }
LABEL_166:
          if (v305) {
            __int16 v111 = v306 == 0;
          }
          else {
            __int16 v111 = 1;
          }
          uint64_t v112 = !v111;
          __int16 v109 = (unsigned int *)((char *)&lsqpack_enc_encode_programs_20 + 32 * v308 + 16 * v112);
          char v79 = *v109;
          v80 = v109[2];
          v72 = v309;
LABEL_173:
          os_log_type_t v83 = v109[1];
          v81 = v109[3];
          LODWORD(v26) = 1;
          v82 = v295;
          goto LABEL_195;
        }

        __uint64_t v110 = qenc_has_or_can_evict_at_least(v68, v282);
        os_log_type_t v71 = (unint64_t)v310;
        __uint64_t v76 = v312;
        if (v110) {
          goto LABEL_166;
        }
        os_log_type_t v100 = *(void *)(v68 + 216);
        v72 = v309;
        if (!v100)
        {
LABEL_161:
          LODWORD(v26) = 1;
          if (!qenc_has_or_can_evict_at_least(v68, v274))
          {
            v81 = 0;
            char v79 = 0LL;
            v82 = v295;
            os_log_type_t v83 = 6LL;
            v80 = 0LL;
            os_log_type_t v71 = (unint64_t)v310;
            goto LABEL_195;
          }

          __int16 v109 = (unsigned int *)((char *)&lsqpack_enc_encode_programs_21 + 16 * v308);
          char v79 = 5LL;
          v80 = 2LL;
          os_log_type_t v71 = (unint64_t)v310;
          goto LABEL_173;
        }
      }

      char v105 = 228LL;
      if (!*(_DWORD *)(v68 + 232)) {
        char v105 = 224LL;
      }
      v106 = (int *)(v100 + 8LL * *(unsigned int *)(v68 + v105));
      *v106 = v76;
      v107 = v100 - 8;
      do
      {
        v108 = *(_DWORD *)(v107 + 8);
        v107 += 8LL;
      }

      while (v108 != v76);
      LODWORD(v26) = 1;
      if (v107 >= (unint64_t)v106)
      {
        v81 = 0;
        char v79 = 0LL;
        v82 = v295;
        os_log_type_t v83 = 6LL;
        v80 = 0LL;
        goto LABEL_195;
      }

      goto LABEL_161;
    }

    __int16 v24 = *(uint64_t **)(v99 + 32LL * (v76 & ~(-1 << *(_DWORD *)(v68 + 52))));
    while (2)
    {
      if (v76 != *((_DWORD *)v24 + 11)
        || (*((_DWORD *)v24 + 8)
                        + *((_DWORD *)v24 + 7)
                        + *(_DWORD *)(v68 + 20)
                        - (*(_DWORD *)(v68 + 32)
                         + *(_DWORD *)(v68 + 16))) < *(_DWORD *)(v68 + 20) >> 2
        || *((_DWORD *)v24 + 12) != (_DWORD)v63
        || !v308 && *((_DWORD *)v24 + 6) > *(_DWORD *)(v68 + 4))
      {
LABEL_135:
        __int16 v24 = (uint64_t *)v24[1];
        if (!v24) {
          goto LABEL_146;
        }
        continue;
      }

      break;
    }

    if ((_DWORD)v26)
    {
      if (v98 < 0)
      {
        if (!qenc_has_or_can_evict_at_least(v68, v282))
        {
          BOOL v98 = 0;
          goto LABEL_134;
        }
      }

      else if (!v98)
      {
LABEL_134:
        os_log_type_t v71 = (unint64_t)v310;
        __uint64_t v76 = v312;
        goto LABEL_135;
      }

      BOOL v98 = 1;
    }

    if (memcmp(v313, v24 + 7, v309)) {
      goto LABEL_134;
    }
    v82 = *((_DWORD *)v24 + 6);
    os_log_type_t v71 = (unint64_t)v310;
    if (!v308 || !(_DWORD)v26 || !v98) {
      goto LABEL_327;
    }
    v197 = *(void *)(v68 + 216);
    v81 = 6;
    v80 = 1LL;
    if (v197)
    {
      v198 = 228LL;
      if (!*(_DWORD *)(v68 + 232)) {
        v198 = 224LL;
      }
      v199 = v197 + 8LL * *(unsigned int *)(v68 + v198);
      *(_DWORD *)(v199 + 4) = v61;
      v200 = v197 - 8;
      do
      {
        v201 = *(_DWORD *)(v200 + 12);
        v200 += 8LL;
      }

      while (v201 != v61);
      v81 = 6;
      v80 = 1LL;
      v305 = 1;
      if (v200 < v199)
      {
        os_log_type_t v83 = 0LL;
        goto LABEL_355;
      }

    if (v17) {
      goto LABEL_126;
    }
    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v64 = "nw_protocol_http3_stream_notify";
  id v17 = (const char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v61 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    id v18 = (os_log_s *)__nwlog_obj();
    char v19 = type;
    if (!os_log_type_enabled(v18, type)) {
      goto LABEL_125;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v64 = "nw_protocol_http3_stream_notify";
    char v20 = "%{public}s called with null http3_stream";
    goto LABEL_109;
  }

  if (!v61)
  {
    id v18 = (os_log_s *)__nwlog_obj();
    char v19 = type;
    if (!os_log_type_enabled(v18, type)) {
      goto LABEL_125;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v64 = "nw_protocol_http3_stream_notify";
    char v20 = "%{public}s called with null http3_stream, backtrace limit exceeded";
    goto LABEL_109;
  }

  dispatch_workloop_t v34 = (char *)__nw_create_backtrace_string();
  id v18 = (os_log_s *)__nwlog_obj();
  char v19 = type;
  v35 = os_log_type_enabled(v18, type);
  if (!v34)
  {
    if (!v35) {
      goto LABEL_125;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v64 = "nw_protocol_http3_stream_notify";
    char v20 = "%{public}s called with null http3_stream, no backtrace";
    goto LABEL_109;
  }

  if (v35)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v64 = "nw_protocol_http3_stream_notify";
    os_log_type_t v65 = 2082;
    BOOL v66 = v34;
    id v36 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
LABEL_59:
    _os_log_impl(&dword_181A5C000, v18, v19, v36, buf, 0x16u);
  }

  if (!*(_BYTE *)(a1 + 206)) {
    goto LABEL_179;
  }
  v56 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
  BOOL v57 = *(unsigned __int8 *)(a1 + 207) - (_DWORD)v56;
  v58 = v57 >= v12 ? v12 : v57;
  if (!(_DWORD)v58) {
    goto LABEL_179;
  }
  memcpy(&v6[v8], (const void *)(a1 + v56 + 152), v58);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += v58;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) += v58;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) += v58;
  int v16 = v12 >= v58;
  v59 = (v12 - v58);
  LODWORD(v12) = v12 - v58;
  if (v16) {
    goto LABEL_175;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446978;
  v256 = "send_data_callback_block_invoke";
  v257 = 2082;
  v258 = "bodyCopySize";
  v259 = 2048;
  v260 = v58;
  v261 = 2048;
  *(void *)v262 = v59;
  os_log_type_t v60 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  v253 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v60, type, &v253))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v61 = (os_log_s *)__nwlog_obj();
      v62 = type[0];
      if (os_log_type_enabled(v61, type[0]))
      {
        *(_DWORD *)buf = 136446978;
        v256 = "send_data_callback_block_invoke";
        v257 = 2082;
        v258 = "bodyCopySize";
        v259 = 2048;
        v260 = v58;
        v261 = 2048;
        *(void *)v262 = v59;
        os_log_type_t v63 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_171:
        _os_log_impl(&dword_181A5C000, v61, v62, v63, buf, 0x2Au);
      }
    }

    else if (v253)
    {
      os_log_type_t v64 = (char *)__nw_create_backtrace_string();
      BOOL v61 = (os_log_s *)__nwlog_obj();
      v62 = type[0];
      os_log_type_t v65 = os_log_type_enabled(v61, type[0]);
      if (v64)
      {
        if (v65)
        {
          *(_DWORD *)buf = 136447234;
          v256 = "send_data_callback_block_invoke";
          v257 = 2082;
          v258 = "bodyCopySize";
          v259 = 2048;
          v260 = v58;
          v261 = 2048;
          *(void *)v262 = v59;
          *(_WORD *)&v262[8] = 2082;
          *(void *)&v262[10] = v64;
          _os_log_impl( &dword_181A5C000,  v61,  v62,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
        }

        free(v64);
        goto LABEL_172;
      }

      if (v65)
      {
        *(_DWORD *)buf = 136446978;
        v256 = "send_data_callback_block_invoke";
        v257 = 2082;
        v258 = "bodyCopySize";
        v259 = 2048;
        v260 = v58;
        v261 = 2048;
        *(void *)v262 = v59;
        os_log_type_t v63 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
        goto LABEL_171;
      }
    }

    else
    {
      BOOL v61 = (os_log_s *)__nwlog_obj();
      v62 = type[0];
      if (os_log_type_enabled(v61, type[0]))
      {
        *(_DWORD *)buf = 136446978;
        v256 = "send_data_callback_block_invoke";
        v257 = 2082;
        v258 = "bodyCopySize";
        v259 = 2048;
        v260 = v58;
        v261 = 2048;
        *(void *)v262 = v59;
        os_log_type_t v63 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
        goto LABEL_171;
      }
    }
  }

LABEL_127:
      free(v50);
      goto LABEL_128;
    }

    if (!v105)
    {
      __nwlog_obj();
      v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v64 = type;
      if (os_log_type_enabled(v51, type))
      {
        *(_DWORD *)buf = 136446210;
        v108 = "nw_context_initialize_globals";
        _os_log_impl( &dword_181A5C000,  v51,  v64,  "%{public}s Cannot initialize globals twice, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_125;
    }

    v59 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v60 = type;
    BOOL v61 = os_log_type_enabled(v51, type);
    if (!v59)
    {
      if (v61)
      {
        *(_DWORD *)buf = 136446210;
        v108 = "nw_context_initialize_globals";
        _os_log_impl(&dword_181A5C000, v51, v60, "%{public}s Cannot initialize globals twice, no backtrace", buf, 0xCu);
      }

      goto LABEL_125;
    }

    if (v61)
    {
      *(_DWORD *)buf = 136446466;
      v108 = "nw_context_initialize_globals";
      __int16 v109 = 2082;
      __uint64_t v110 = (__uint64_t)v59;
      _os_log_impl( &dword_181A5C000,  v51,  v60,  "%{public}s Cannot initialize globals twice, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v48);
    if (!v38) {
      return;
    }
LABEL_148:
    free(v38);
    return;
  }

  id v6 = a1 - 11;
  if (a1 - 11 > 0x32)
  {
    uint64_t v7 = 0;
    char v8 = 0;
  }

  else
  {
    uint64_t v7 = dword_18272C7B8[v6];
    char v8 = 1;
  }

  if (__nwlog_activity_log::onceToken != -1) {
    dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
  }
  BOOL v9 = (os_log_s *)(id)gactivityLogObj;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    if (v6 >= 0x33)
    {
      if (a1 - 900 >= 0x64)
      {
        os_log_type_t v10 = "invalid";
        if (a1 < 0xB) {
          os_log_type_t v10 = "reserved";
        }
      }

      else
      {
        os_log_type_t v10 = "experimental";
      }
    }

    else
    {
      os_log_type_t v10 = off_189BC1A90[v6];
    }

    *(_DWORD *)buf = 136315650;
    v59 = v10;
    os_log_type_t v60 = 1024;
    *(_DWORD *)BOOL v61 = v8;
    *(_WORD *)&v61[4] = 1024;
    *(_DWORD *)&v61[6] = v7;
    _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_DEBUG,  "Domain %s rate configured in registry as %u / %u",  buf,  0x18u);
  }

  int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_activity_default_numerator, v8);
  os_log_type_t v12 = networkd_settings_get_int64_with_default((const char *)nw_setting_activity_default_denominator, v7);
  if (__nwlog_activity_log::onceToken != -1) {
    dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
  }
  os_log_type_t v13 = (os_log_s *)(id)gactivityLogObj;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (v6 >= 0x33)
    {
      if (a1 - 900 >= 0x64)
      {
        BOOL v14 = "invalid";
        if (a1 < 0xB) {
          BOOL v14 = "reserved";
        }
      }

      else
      {
        BOOL v14 = "experimental";
      }
    }

    else
    {
      BOOL v14 = off_189BC1A90[v6];
    }

    *(_DWORD *)buf = 136315650;
    v59 = v14;
    os_log_type_t v60 = 1024;
    *(_DWORD *)BOOL v61 = int64_with_default;
    *(_WORD *)&v61[4] = 1024;
    *(_DWORD *)&v61[6] = v12;
    _os_log_impl( &dword_181A5C000,  v13,  OS_LOG_TYPE_DEBUG,  "Domain %s rate configured after remote default override as %u / %u",  buf,  0x18u);
  }

  if (v6 < 0x33)
  {
    os_log_type_t v15 = v6;
    int v16 = (const char **)off_189BC18F8[v15];
    int64_with_default = networkd_settings_get_int64_with_default( *(const char **)off_189BC1760[v15],  int64_with_default);
    os_log_type_t v12 = networkd_settings_get_int64_with_default(*v16, v12);
  }

  if (__nwlog_activity_log::onceToken != -1) {
    dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
  }
  id v17 = (os_log_s *)(id)gactivityLogObj;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    if (v6 >= 0x33)
    {
      if (a1 - 900 >= 0x64)
      {
        id v18 = "invalid";
        if (a1 < 0xB) {
          id v18 = "reserved";
        }
      }

      else
      {
        id v18 = "experimental";
      }
    }

    else
    {
      id v18 = off_189BC1A90[v6];
    }

    *(_DWORD *)buf = 136315650;
    v59 = v18;
    os_log_type_t v60 = 1024;
    *(_DWORD *)BOOL v61 = int64_with_default;
    *(_WORD *)&v61[4] = 1024;
    *(_DWORD *)&v61[6] = v12;
    _os_log_impl( &dword_181A5C000,  v17,  OS_LOG_TYPE_DEBUG,  "After reading settings plist, domain %s rate configured as %u / %u",  buf,  0x18u);
  }

  char v19 = a1 - 900;
  if (a1 - 900 >= 0x64 && v6 >= 0x33)
  {
    if (__nwlog_activity_log::onceToken != -1) {
      dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
    }
    os_log_type_t v21 = (os_log_s *)(id)gactivityLogObj;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      v22 = "invalid";
      *(_DWORD *)buf = 136315906;
      if (a1 < 0xB) {
        v22 = "reserved";
      }
      v59 = v22;
      os_log_type_t v60 = 1024;
      *(_DWORD *)BOOL v61 = a1;
      *(_WORD *)&v61[4] = 1024;
      *(_DWORD *)&v61[6] = 0;
      v62 = 1024;
      os_log_type_t v63 = 0;
      _os_log_impl(&dword_181A5C000, v21, OS_LOG_TYPE_INFO, "Invalid domain (%s: %u) sampled at %u / %u", buf, 0x1Eu);
    }

    os_log_type_t v12 = 0;
    int64_with_default = 0;
  }

  uint64_t v23 = (const char *)nw_setting_activity_report_numerator;
  networkd_settings_init();
  if (sCachedSettings)
  {
    pthread_mutex_lock(&sSettingsMutex);
    __int16 v24 = a2;
    if (sCachedSettings) {

    }
      int64 = xpc_dictionary_get_int64((xpc_object_t)sCachedSettings, v23);
    else {
      int64 = 0;
    }
    os_log_type_t v26 = a3;
    pthread_mutex_unlock(&sSettingsMutex);
  }

  else
  {
    __int16 v24 = a2;
    os_log_type_t v26 = a3;
    int64 = 0;
  }

  id v27 = (const char *)nw_setting_activity_report_denominator;
  networkd_settings_init();
  if (sCachedSettings)
  {
    pthread_mutex_lock(&sSettingsMutex);
    if (sCachedSettings) {
      os_log_type_t v28 = xpc_dictionary_get_int64((xpc_object_t)sCachedSettings, v27);
    }
    else {
      os_log_type_t v28 = 0;
    }
    pthread_mutex_unlock(&sSettingsMutex);
  }

  else
  {
    os_log_type_t v28 = 0;
  }

  else {
    os_log_type_t v29 = int64;
  }
  if (v19 >= 0x64) {
    os_log_type_t v29 = int64;
  }
  if (v28) {
    os_log_type_t v30 = 1;
  }
  else {
    os_log_type_t v30 = v19 >= 0x64;
  }
  if (v30) {
    v31 = v28;
  }
  else {
    v31 = 20000;
  }
  if (v29 != 0 && v31 != 0)
  {
    os_log_type_t v12 = v31;
    os_log_type_t v32 = v29;
  }

  else
  {
    os_log_type_t v32 = int64_with_default;
  }

  if (__nwlog_activity_log::onceToken != -1) {
    dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
  }
  BOOL v33 = (os_log_s *)(id)gactivityLogObj;
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
  {
    if (v6 >= 0x33)
    {
      if (v19 >= 0x64)
      {
        dispatch_workloop_t v34 = "invalid";
        if (a1 < 0xB) {
          dispatch_workloop_t v34 = "reserved";
        }
      }

      else
      {
        dispatch_workloop_t v34 = "experimental";
      }
    }

    else
    {
      dispatch_workloop_t v34 = off_189BC1A90[v6];
    }

    *(_DWORD *)buf = 136315650;
    v59 = v34;
    os_log_type_t v60 = 1024;
    *(_DWORD *)BOOL v61 = v32;
    *(_WORD *)&v61[4] = 1024;
    *(_DWORD *)&v61[6] = v12;
    _os_log_impl( &dword_181A5C000,  v33,  OS_LOG_TYPE_DEBUG,  "After settings override, domain %s rate configured as %u / %u",  buf,  0x18u);
  }

  if (__nwlog_activity_log::onceToken != -1) {
    dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
  }
  v35 = (os_log_s *)(id)gactivityLogObj;
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
  {
    if (v6 >= 0x33)
    {
      if (v19 >= 0x64)
      {
        id v36 = "invalid";
        if (a1 < 0xB) {
          id v36 = "reserved";
        }
      }

      else
      {
        id v36 = "experimental";
      }
    }

    else
    {
      id v36 = off_189BC1A90[v6];
    }

    *(_DWORD *)buf = 136315650;
    v59 = v36;
    os_log_type_t v60 = 1024;
    *(_DWORD *)BOOL v61 = v32;
    *(_WORD *)&v61[4] = 1024;
    *(_DWORD *)&v61[6] = v12;
    _os_log_impl(&dword_181A5C000, v35, OS_LOG_TYPE_DEBUG, "Final domain %s rate configured as %u / %u", buf, 0x18u);
  }

  *__int16 v24 = v32;
  *os_log_type_t v26 = v12;
}

      if (v66) {
        free(v66);
      }
      goto LABEL_129;
    }

    if (!*((void *)handle + 27)) {
      goto LABEL_77;
    }
    packet = os_channel_slot_get_packet();
    if (!packet)
    {
LABEL_77:
      v48 = 0;
      goto LABEL_100;
    }

    next_buflet = os_packet_get_next_buflet();
    if (!next_buflet) {
      break;
    }
    v50 = next_buflet;
    v51 = v45;
    os_log_type_t v52 = v11;
    data_offset = os_buflet_get_data_offset();
    object_address = os_buflet_get_object_address();
    data_limit = os_buflet_get_data_limit();
    if (!data_limit)
    {
      os_log_type_t v11 = v52;
      v45 = v51;
      __nwlog_obj();
      *(_DWORD *)os_log_type_t type = 136446210;
      __int16 v109 = "nw_channel_get_output_frames";
      os_log_type_t v87 = (char *)_os_log_send_and_compose_impl();
      v106 = OS_LOG_TYPE_ERROR;
      char v105 = 0;
      if (v106 == OS_LOG_TYPE_FAULT)
      {
        v88 = (os_log_s *)__nwlog_obj();
        os_log_type_t v89 = v106;
        if (!os_log_type_enabled(v88, v106)) {
          goto LABEL_198;
        }
        *(_DWORD *)os_log_type_t type = 136446210;
        __int16 v109 = "nw_channel_get_output_frames";
        BOOL v90 = "%{public}s invalid buflet size";
      }

      else
      {
        if (v105)
        {
          os_log_type_t v97 = (char *)__nw_create_backtrace_string();
          BOOL v98 = (os_log_s *)__nwlog_obj();
          os_log_type_t v89 = v106;
          v99 = os_log_type_enabled(v98, v106);
          if (v97)
          {
            if (v99)
            {
              *(_DWORD *)os_log_type_t type = 136446466;
              __int16 v109 = "nw_channel_get_output_frames";
              __uint64_t v110 = 2082;
              v111[0] = v97;
              _os_log_impl( &dword_181A5C000,  v98,  v89,  "%{public}s invalid buflet size, dumping backtrace:%{public}s",  (uint8_t *)type,  0x16u);
            }

            free(v97);
            os_log_type_t v11 = v52;
            v45 = v51;
            if (v87) {
              goto LABEL_199;
            }
            goto LABEL_200;
          }

          os_log_type_t v11 = v52;
          v45 = v51;
          if (!v99) {
            goto LABEL_198;
          }
          *(_DWORD *)os_log_type_t type = 136446210;
          __int16 v109 = "nw_channel_get_output_frames";
          BOOL v90 = "%{public}s invalid buflet size, no backtrace";
          os_log_type_t v100 = v98;
LABEL_197:
          _os_log_impl(&dword_181A5C000, v100, v89, v90, (uint8_t *)type, 0xCu);
          goto LABEL_198;
        }

        v88 = (os_log_s *)__nwlog_obj();
        os_log_type_t v89 = v106;
        if (!os_log_type_enabled(v88, v106)) {
          goto LABEL_198;
        }
        *(_DWORD *)os_log_type_t type = 136446210;
        __int16 v109 = "nw_channel_get_output_frames";
        BOOL v90 = "%{public}s invalid buflet size, backtrace limit exceeded";
      }

          if (v52) {
            free(v52);
          }
          *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = -1;
          char v8 = v50;
          goto LABEL_130;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v43 = (os_log_s *)v8[131];
        if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          __int16 v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
          uint64_t v112 = 2048;
          *(void *)__int16 v113 = a2;
          *(_WORD *)&v113[8] = 1024;
          LODWORD(v114) = v17;
          _os_log_impl( &dword_181A5C000,  v43,  OS_LOG_TYPE_ERROR,  "%{public}s failed to split frame %p at offset %u",  buf,  0x1Cu);
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446210;
        __int16 v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
        dispatch_workloop_t v44 = (char *)_os_log_send_and_compose_impl();
        __int16 v109 = OS_LOG_TYPE_ERROR;
        v107 = 0;
        if (__nwlog_fault(v44, &v109, &v107))
        {
          if (v109 == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v45 = (os_log_s *)v8[131];
            os_log_type_t v46 = v109;
            if (!os_log_type_enabled(v45, v109)) {
              goto LABEL_122;
            }
            *(_DWORD *)buf = 136446210;
            __int16 v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
            os_log_type_t v47 = "%{public}s nw_frame_split with partial frame failed";
            goto LABEL_121;
          }

          if (!v107)
          {
            v45 = (os_log_s *)__nwlog_obj();
            os_log_type_t v46 = v109;
            if (!os_log_type_enabled(v45, v109)) {
              goto LABEL_122;
            }
            *(_DWORD *)buf = 136446210;
            __int16 v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
            os_log_type_t v47 = "%{public}s nw_frame_split with partial frame failed, backtrace limit exceeded";
            goto LABEL_121;
          }

          BOOL v57 = (char *)__nw_create_backtrace_string();
          v45 = (os_log_s *)__nwlog_obj();
          os_log_type_t v46 = v109;
          v58 = os_log_type_enabled(v45, v109);
          if (v57)
          {
            if (v58)
            {
              *(_DWORD *)buf = 136446466;
              __int16 v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
              uint64_t v112 = 2082;
              *(void *)__int16 v113 = v57;
              _os_log_impl( &dword_181A5C000,  v45,  v46,  "%{public}s nw_frame_split with partial frame failed, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v57);
            goto LABEL_122;
          }

          if (v58)
          {
            *(_DWORD *)buf = 136446210;
            __int16 v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
            os_log_type_t v47 = "%{public}s nw_frame_split with partial frame failed, no backtrace";
LABEL_121:
            _os_log_impl(&dword_181A5C000, v45, v46, v47, buf, 0xCu);
          }
        }

        if (v56) {
          free(v56);
        }
        **(_DWORD **)(a1 + 104) = 0;
        goto LABEL_130;
      }

      if (gLogDatapath)
      {
        os_log_type_t v28 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
        {
          os_log_type_t v29 = **(_DWORD **)(a1 + 72);
          *(_DWORD *)buf = 136446722;
          v148 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
          v149 = 1024;
          *(_DWORD *)v150 = v11;
          *(_WORD *)&v150[4] = 1024;
          *(_DWORD *)&v150[6] = v29;
          _os_log_impl( &dword_181A5C000,  v28,  OS_LOG_TYPE_DEBUG,  "%{public}s not delivering frame with length %u maximum bytes %u",  buf,  0x18u);
        }
      }

        if (v41) {
          free(v41);
        }
        char v8 = 0LL;
        if (v11 != &nw_protocol_ref_counted_handle) {
          goto LABEL_12;
        }
        goto LABEL_22;
      }

      __nwlog_obj();
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      os_log_type_t v67 = "__nw_protocol_get_parameters";
      os_log_type_t v21 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      os_log_type_t v65 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v21, type, &v65))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          id v49 = type[0];
          if (os_log_type_enabled(v22, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v67 = "__nw_protocol_get_parameters";
            _os_log_impl(&dword_181A5C000, v22, v49, "%{public}s called with null protocol", buf, 0xCu);
          }

    goto LABEL_128;
  }

  if (!v11)
  {
    __nwlog_obj();
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_listener handleInboundPacket:length:from:to:interface:socket:]";
    dispatch_workloop_t v34 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v81[0] = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v38 = type[0];
      if (os_log_type_enabled(v35, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_listener handleInboundPacket:length:from:to:interface:socket:]";
        _os_log_impl(&dword_181A5C000, v35, v38, "%{public}s called with null length", buf, 0xCu);
      }

      goto LABEL_127;
    }

    if (!v81[0])
    {
      __nwlog_obj();
      v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v62 = type[0];
      if (os_log_type_enabled(v35, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_listener handleInboundPacket:length:from:to:interface:socket:]";
        _os_log_impl( &dword_181A5C000,  v35,  v62,  "%{public}s called with null length, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_127;
    }

    v50 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v51 = type[0];
    os_log_type_t v52 = os_log_type_enabled(v35, type[0]);
    if (!v50)
    {
      if (v52)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_listener handleInboundPacket:length:from:to:interface:socket:]";
        _os_log_impl(&dword_181A5C000, v35, v51, "%{public}s called with null length, no backtrace", buf, 0xCu);
      }

      goto LABEL_127;
    }

    if (v52)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_listener handleInboundPacket:length:from:to:interface:socket:]";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v50;
      _os_log_impl( &dword_181A5C000,  v35,  v51,  "%{public}s called with null length, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_90;
  }

  if (!v14)
  {
    __nwlog_obj();
    os_log_type_t v39 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_listener handleInboundPacket:length:from:to:interface:socket:]";
    dispatch_workloop_t v34 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v81[0] = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v40 = type[0];
      if (os_log_type_enabled(v35, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_listener handleInboundPacket:length:from:to:interface:socket:]";
        _os_log_impl(&dword_181A5C000, v35, v40, "%{public}s called with null source", buf, 0xCu);
      }

      goto LABEL_127;
    }

    if (!v81[0])
    {
      __nwlog_obj();
      v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v63 = type[0];
      if (os_log_type_enabled(v35, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_listener handleInboundPacket:length:from:to:interface:socket:]";
        _os_log_impl( &dword_181A5C000,  v35,  v63,  "%{public}s called with null source, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_127;
    }

    v50 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v53 = type[0];
    BOOL v54 = os_log_type_enabled(v35, type[0]);
    if (!v50)
    {
      if (v54)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_listener handleInboundPacket:length:from:to:interface:socket:]";
        _os_log_impl(&dword_181A5C000, v35, v53, "%{public}s called with null source, no backtrace", buf, 0xCu);
      }

      goto LABEL_127;
    }

    if (v54)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_listener handleInboundPacket:length:from:to:interface:socket:]";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v50;
      _os_log_impl( &dword_181A5C000,  v35,  v53,  "%{public}s called with null source, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_90;
  }

  if (!v15)
  {
    __nwlog_obj();
    os_log_type_t v41 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_listener handleInboundPacket:length:from:to:interface:socket:]";
    dispatch_workloop_t v34 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v81[0] = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v42 = type[0];
      if (os_log_type_enabled(v35, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_listener handleInboundPacket:length:from:to:interface:socket:]";
        _os_log_impl(&dword_181A5C000, v35, v42, "%{public}s called with null destination", buf, 0xCu);
      }

      goto LABEL_127;
    }

    if (!v81[0])
    {
      __nwlog_obj();
      v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v64 = type[0];
      if (os_log_type_enabled(v35, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_listener handleInboundPacket:length:from:to:interface:socket:]";
        _os_log_impl( &dword_181A5C000,  v35,  v64,  "%{public}s called with null destination, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_127;
    }

    v50 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v55 = type[0];
    v56 = os_log_type_enabled(v35, type[0]);
    if (!v50)
    {
      if (v56)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_listener handleInboundPacket:length:from:to:interface:socket:]";
        _os_log_impl(&dword_181A5C000, v35, v55, "%{public}s called with null destination, no backtrace", buf, 0xCu);
      }

      goto LABEL_127;
    }

    if (v56)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_listener handleInboundPacket:length:from:to:interface:socket:]";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v50;
      _os_log_impl( &dword_181A5C000,  v35,  v55,  "%{public}s called with null destination, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_90;
  }

  if (!v16)
  {
    __nwlog_obj();
    char v43 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_listener handleInboundPacket:length:from:to:interface:socket:]";
    dispatch_workloop_t v34 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v81[0] = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      dispatch_workloop_t v44 = type[0];
      if (os_log_type_enabled(v35, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_listener handleInboundPacket:length:from:to:interface:socket:]";
        _os_log_impl(&dword_181A5C000, v35, v44, "%{public}s called with null interface", buf, 0xCu);
      }

      goto LABEL_127;
    }

    if (!v81[0])
    {
      __nwlog_obj();
      v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v65 = type[0];
      if (os_log_type_enabled(v35, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_listener handleInboundPacket:length:from:to:interface:socket:]";
        _os_log_impl( &dword_181A5C000,  v35,  v65,  "%{public}s called with null interface, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_127;
    }

    v50 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v57 = type[0];
    v58 = os_log_type_enabled(v35, type[0]);
    if (!v50)
    {
      if (v58)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_listener handleInboundPacket:length:from:to:interface:socket:]";
        _os_log_impl(&dword_181A5C000, v35, v57, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }

      goto LABEL_127;
    }

    if (v58)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_listener handleInboundPacket:length:from:to:interface:socket:]";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v50;
      _os_log_impl( &dword_181A5C000,  v35,  v57,  "%{public}s called with null interface, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_90;
  }

  if (!v17)
  {
    __nwlog_obj();
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_listener handleInboundPacket:length:from:to:interface:socket:]";
    dispatch_workloop_t v34 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v81[0] = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v46 = type[0];
      if (os_log_type_enabled(v35, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_listener handleInboundPacket:length:from:to:interface:socket:]";
        _os_log_impl(&dword_181A5C000, v35, v46, "%{public}s called with null socket", buf, 0xCu);
      }

      goto LABEL_127;
    }

    if (!v81[0])
    {
      __nwlog_obj();
      v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v66 = type[0];
      if (os_log_type_enabled(v35, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_listener handleInboundPacket:length:from:to:interface:socket:]";
        _os_log_impl( &dword_181A5C000,  v35,  v66,  "%{public}s called with null socket, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_127;
    }

    v50 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v59 = type[0];
    os_log_type_t v60 = os_log_type_enabled(v35, type[0]);
    if (!v50)
    {
      if (v60)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_listener handleInboundPacket:length:from:to:interface:socket:]";
        _os_log_impl(&dword_181A5C000, v35, v59, "%{public}s called with null socket, no backtrace", buf, 0xCu);
      }

      goto LABEL_127;
    }

    if (v60)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_listener handleInboundPacket:length:from:to:interface:socket:]";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v50;
      _os_log_impl( &dword_181A5C000,  v35,  v59,  "%{public}s called with null socket, dumping backtrace:%{public}s",  buf,  0x16u);
    }

                xpc_dictionary_set_BOOL(v2, "allow_duplicate_state_updates", 1);
                v35 = *((void *)v1 + 12);
                if ((v35 & 0x8000000) == 0)
                {
LABEL_92:
                  if ((v35 & 0x10000000) == 0) {
                    goto LABEL_93;
                  }
                  goto LABEL_129;
                }

    if (v49) {
      free(v49);
    }
    char v20 = handle + 527;
LABEL_130:
    uint64_t v55 = a2->identifier;
    quic_stream_protocol_identifier = nw_protocol_get_quic_stream_protocol_identifier();
    if (nw_protocols_are_equal(v55, quic_stream_protocol_identifier)) {
      goto LABEL_36;
    }
    BOOL v57 = a2->identifier;
    quic_connection_protocol_identifier = nw_protocol_get_quic_connection_protocol_identifier();
    if (nw_protocols_are_equal(v57, quic_connection_protocol_identifier)) {
      goto LABEL_36;
    }
    v59 = a2->identifier;
    if (nw_protocol_demux_identifier::onceToken[0] != -1) {
      dispatch_once(nw_protocol_demux_identifier::onceToken, &__block_literal_global_25762);
    }
    if (nw_protocols_are_equal(v59, &g_demux_protocol_identifier))
    {
      default_input_handler = a2->default_input_handler;
      if (default_input_handler)
      {
        BOOL v61 = default_input_handler->identifier;
        v62 = nw_protocol_get_quic_stream_protocol_identifier();
        if (nw_protocols_are_equal(v61, v62)
          || (os_log_type_t v63 = a2->default_input_handler->identifier,
              os_log_type_t v64 = nw_protocol_get_quic_connection_protocol_identifier(),
              nw_protocols_are_equal(v63, v64)))
        {
LABEL_36:
          *(_DWORD *)v20 |= 8u;
          goto LABEL_145;
        }
      }
    }
  }

  os_log_type_t v65 = nw_parameters_copy_default_protocol_stack(*((nw_parameters_t *)handle + 40));
  if (!v65) {
    goto LABEL_145;
  }
  dispatch_workloop_t v34 = v65;
  BOOL v66 = (nw_protocol_options *)nw_protocol_stack_copy_original_proxied_transport_protocol(v65);
  if (v66)
  {
    id v36 = v66;
    if (nw_protocol_options_is_quic(v66) || nw_protocol_options_is_udp(v36)) {
      *(_DWORD *)v20 |= 8u;
    }
LABEL_143:
    os_release(v36);
  }

        if (!v3) {
          goto LABEL_130;
        }
        goto LABEL_128;
      }

      __uint64_t v76 = *(_DWORD *)(v77 + 527);
    }

    if ((v76 & 0x10000) != 0) {
      goto LABEL_127;
    }
    goto LABEL_126;
  }

  if (v29 || v3 && *v3)
  {
    if (!v30 && (!v3 || !*v3))
    {
      char v79 = *(void *)(a1 + 40);
      v80 = *(void **)(a1 + 48);
      v81 = nw_parameters_get_companion_proxy_required_interface_type(*(void *)(v79 + 320)) - 1;
      if (v81 <= 2)
      {
        v82 = (uint64_t)*off_189BBAC38[v81];
        if (v82) {
          nw_http_fields_append(v80, (uint64_t)"Require-Interface", v82);
        }
      }

      return 1LL;
    }

    if (!v31 && (!v3 || !*v3))
    {
      __int16 v109 = *(void *)(a1 + 40);
      v108 = *(void **)(a1 + 48);
      __dst[0] = 0LL;
      __dst[1] = (char *)__dst;
      v200 = 0x2000000000uLL;
      *(void *)&v196 = 0LL;
      *((void *)&v196 + 1) = &v196;
      v197 = 0x2000000000uLL;
      *(void *)&uu = 0LL;
      *((void *)&uu + 1) = &uu;
      v203 = 0x2000000000LL;
      v204 = 0LL;
      prohibit_expensive = nw_parameters_get_prohibit_expensive(*(nw_parameters_t *)(v109 + 320));
      __int16 v111 = prohibit_expensive;
      uint64_t v112 = 0LL;
      if (prohibit_expensive)
      {
        *(void *)(*((void *)&uu + 1) + 24LL) += 9LL;
        uint64_t v112 = "expensive";
      }

      prohibit_constrained = nw_parameters_get_prohibit_constrained(*(nw_parameters_t *)(v109 + 320));
      v114 = prohibit_constrained;
      if (prohibit_constrained)
      {
        uint64_t v115 = *((void *)&uu + 1);
        v116 = *(void *)(*((void *)&uu + 1) + 24LL);
        if (v116) {
          *(void *)(*((void *)&uu + 1) + 24LL) = ++v116;
        }
        *(void *)(v115 + 24) = v116 + 11;
        v117 = "constrained";
      }

      else
      {
        v117 = 0LL;
      }

      v126 = *(nw_parameters **)(v109 + 320);
      *(void *)buf = MEMORY[0x1895F87A8];
      *(void *)&buf[8] = 0x40000000LL;
      *(void *)&buf[16] = ___ZL50nw_masque_add_prohibit_interface_header_to_requestP9nw_masqueP14nw_http_fields_block_invoke;
      *(void *)&buf[24] = &unk_189BBA698;
      *(void *)&buf[32] = &uu;
      *(void *)&buf[40] = &v196;
      *(void *)&buf[48] = __dst;
      nw_parameters_iterate_prohibited_interface_types(v126, buf);
      v127 = *(void *)(*((void *)&uu + 1) + 24LL);
      if (!v127) {
        goto LABEL_340;
      }
      *(void *)(*((void *)&uu + 1) + 24LL) = v127 + 1;
      v128 = (void *)nw_calloc_type<unsigned char>(v127 + 1);
      v129 = v128;
      *(_BYTE *)v128 = 0;
      v130 = *(void *)(*((void *)&v196 + 1) + 24LL);
      if (v130)
      {
        v131 = *(void *)(*((void *)&uu + 1) + 24LL);
        if (v131)
        {
          v132 = v128;
          while (*v132)
          {
            ++v132;
            if (!--v131) {
              goto LABEL_272;
            }
          }

          if (v131 < 2)
          {
LABEL_271:
            *v132 = 0;
          }

          else
          {
            v137 = 0LL;
            while (1)
            {
              v138 = *(unsigned __int8 *)(v130 + v137);
              v132[v137] = v138;
              if (!v138) {
                break;
              }
              --v131;
              ++v137;
              if (v131 <= 1)
              {
                v132 += v137;
                goto LABEL_271;
              }
            }
          }
        }

  if (v31) {
LABEL_133:
  }
    free(v31);
LABEL_18:

  if (v8) {
    os_release(v8);
  }
}

    if (v34) {
      free(v34);
    }
    BOOL v33 = *((_WORD *)handle + 184);
    goto LABEL_130;
  }

  if ((*((_WORD *)handle + 184) & 0x80) == 0)
  {
    if (gLogDatapath)
    {
      char v43 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http_connect_process_inbound_data";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = handle + 284;
        *(_WORD *)&buf[22] = 2080;
        v172 = " ";
        dispatch_workloop_t v44 = "%{public}s %{public}s%sNo read frames, nothing to process";
LABEL_144:
        _os_log_impl(&dword_181A5C000, v43, OS_LOG_TYPE_DEBUG, v44, buf, 0x20u);
      }
    }
  }

        _os_log_impl(&dword_181A5C000, v39, v40, v41, buf, 0xCu);
LABEL_128:
        if (v38) {
          free(v38);
        }
        return 0LL;
      }

    __break(1u);
    return result;
  }

      if (v51) {
        free(v51);
      }
      return 0LL;
    }

    if (!(_BYTE)v119)
    {
      os_log_type_t v52 = (os_log_s *)__nwlog_obj();
      v53 = type[0];
      if (os_log_type_enabled(v52, type[0]))
      {
        *(_DWORD *)aBlock = 136446210;
        *(void *)&aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
        BOOL v54 = "%{public}s called with null listener, backtrace limit exceeded";
        goto LABEL_126;
      }

      goto LABEL_127;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v52 = (os_log_s *)__nwlog_obj();
    v53 = type[0];
    v58 = os_log_type_enabled(v52, type[0]);
    if (!backtrace_string)
    {
      if (v58)
      {
        *(_DWORD *)aBlock = 136446210;
        *(void *)&aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
        BOOL v54 = "%{public}s called with null listener, no backtrace";
        goto LABEL_126;
      }

      goto LABEL_127;
    }

    if (v58)
    {
      *(_DWORD *)aBlock = 136446466;
      *(void *)&aBlock[4] = "nw_protocol_http3_listen_protocol_new_flow";
      *(_WORD *)&aBlock[12] = 2082;
      *(void *)&aBlock[14] = backtrace_string;
      v59 = "%{public}s called with null listener, dumping backtrace:%{public}s";
LABEL_82:
      _os_log_impl(&dword_181A5C000, v52, v53, v59, aBlock, 0x16u);
    }

    os_log_type_t v65 = v72;
    BOOL v66 = v73;
    os_log_type_t v67 = 12;
LABEL_82:
    _os_log_impl(&dword_181A5C000, v65, v66, v17, buf, v67);
LABEL_83:
    if (v13) {
      free(v13);
    }
    return 0LL;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_get_output_frames";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v88 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v72 = (os_log_s *)__nwlog_obj();
      __uint64_t v73 = type;
      if (!os_log_type_enabled(v72, type)) {
        goto LABEL_83;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_get_output_frames";
      id v17 = "%{public}s called with null http3_stream";
      goto LABEL_127;
    }

    if (v88)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v72 = (os_log_s *)__nwlog_obj();
      __uint64_t v73 = type;
      v80 = os_log_type_enabled(v72, type);
      if (backtrace_string)
      {
        if (v80)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_get_output_frames";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          os_log_type_t v47 = "%{public}s called with null http3_stream, dumping backtrace:%{public}s";
LABEL_118:
          v48 = v72;
          id v49 = v73;
          v50 = 22;
LABEL_48:
          _os_log_impl(&dword_181A5C000, v48, v49, v47, buf, v50);
          goto LABEL_49;
        }

        goto LABEL_49;
      }

      if (!v80) {
        goto LABEL_83;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_get_output_frames";
      id v17 = "%{public}s called with null http3_stream, no backtrace";
    }

    else
    {
      v72 = (os_log_s *)__nwlog_obj();
      __uint64_t v73 = type;
      if (!os_log_type_enabled(v72, type)) {
        goto LABEL_83;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_get_output_frames";
      id v17 = "%{public}s called with null http3_stream, backtrace limit exceeded";
    }

    goto LABEL_127;
  }

  if ((*((_WORD *)handle + 368) & 0x800) == 0)
  {
    if (gLogDatapath)
    {
      unint64_t v74 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
      {
        char v75 = *(_DWORD *)(*((void *)handle + 42) + 1280LL);
        __uint64_t v76 = *((void *)handle + 30);
        v77 = *((_DWORD *)handle + 92);
        *(_DWORD *)buf = 136447490;
        *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_get_output_frames";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = handle + 636;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&buf[24] = " ";
        LOWORD(v91) = 1024;
        *(_DWORD *)((char *)&v91 + 2) = v75;
        WORD3(v91) = 2048;
        *((void *)&v91 + 1) = v76;
        v92 = 1024;
        v93 = v77;
        _os_log_impl( &dword_181A5C000,  v74,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%llu> called, state %u",  buf,  0x36u);
      }
    }
  }

  os_log_type_t v11 = 0LL;
  switch(*((_DWORD *)handle + 92))
  {
    case 0:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v12 = *((_DWORD *)handle + 92);
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_get_output_frames";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v12;
      os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v88 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v14 = gLogObj;
        os_log_type_t v15 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_83;
        }
        int v16 = *((_DWORD *)handle + 92);
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_get_output_frames";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v16;
        id v17 = "%{public}s Unexpected output state %d";
LABEL_81:
        os_log_type_t v65 = (os_log_s *)v14;
        BOOL v66 = v15;
        os_log_type_t v67 = 18;
        goto LABEL_82;
      }

      if (!v88)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v14 = gLogObj;
        os_log_type_t v15 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_83;
        }
        os_log_type_t v63 = *((_DWORD *)handle + 92);
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_get_output_frames";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v63;
        id v17 = "%{public}s Unexpected output state %d, backtrace limit exceeded";
        goto LABEL_81;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v14 = gLogObj;
      os_log_type_t v15 = type;
      v45 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (!backtrace_string)
      {
        if (!v45) {
          goto LABEL_83;
        }
        os_log_type_t v64 = *((_DWORD *)handle + 92);
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_get_output_frames";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v64;
        id v17 = "%{public}s Unexpected output state %d, no backtrace";
        goto LABEL_81;
      }

      if (!v45) {
        goto LABEL_49;
      }
      os_log_type_t v46 = *((_DWORD *)handle + 92);
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_get_output_frames";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v46;
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = backtrace_string;
      os_log_type_t v47 = "%{public}s Unexpected output state %d, dumping backtrace:%{public}s";
      v48 = (os_log_s *)v14;
      id v49 = v15;
      v50 = 28;
      goto LABEL_48;
    case 1:
      id v18 = *((void *)handle + 48);
      *(void *)(v18 + 32) = 0LL;
      tqh_last = a6->tqh_last;
      *(void *)(v18 + 40) = tqh_last;
      *tqh_last = (nw_frame *)v18;
      a6->tqh_last = (nw_frame **)(v18 + 32);
      *((_DWORD *)handle + 92) = 2;
      char v20 = *((void *)handle + 42);
      if (v20)
      {
        os_log_type_t v21 = *(unsigned __int16 *)(v20 + 1373);
        v22 = v21 | (*(unsigned __int8 *)(v20 + 1375) << 16);
        if ((v21 & 1) == 0)
        {
          uint64_t v23 = *(void *)(v20 + 1024);
          if ((v22 & 0x100000) == 0 && !v23)
          {
            uint64_t v23 = *(void *)(v20 + 1240);
            if (v23)
            {
              if (*(_DWORD *)(v20 + 1276))
              {
                if ((v22 & 0x400000) == 0)
                {
                  __int16 v24 = (os_log_s *)__nwlog_obj();
                  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
                  {
                    v25 = *(_DWORD *)(v20 + 1280);
                    *(_DWORD *)buf = 136446978;
                    *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_get_output_frames";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = v20 + 1289;
                    *(_WORD *)&buf[22] = 2080;
                    *(void *)&buf[24] = " ";
                    LOWORD(v91) = 1024;
                    *(_DWORD *)((char *)&v91 + 2) = v25;
                    _os_log_impl( &dword_181A5C000,  v24,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u> increasing QUIC keepalive frequency for requests",  buf,  0x26u);
                  }
                }

                *(_BYTE *)(v20 + 1375) |= 0x10u;
                nw_quic_connection_set_keepalive(*(void **)(v20 + 1240), 2);
                uint64_t v23 = *(void *)(v20 + 1024);
              }

              else
              {
                uint64_t v23 = 0LL;
              }
            }
          }

          os_log_type_t v28 = __CFADD__(v23, 1LL);
          v68 = v23 + 1;
          v69 = v28;
          v70 = v69 << 63 >> 63;
          *(void *)(v20 + 1024) = v68;
          if (v70 != v69 || v70 < 0)
          {
            if (gLogDatapath)
            {
              v86 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
              {
                os_log_type_t v87 = *(void *)(v20 + 1024);
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_protocol_http3_stream_get_output_frames";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = "http3->outstanding_sent_requests";
                *(_WORD *)&buf[22] = 2048;
                *(void *)&buf[24] = 1LL;
                LOWORD(v91) = 2048;
                *(void *)((char *)&v91 + 2) = v87;
                _os_log_impl( &dword_181A5C000,  v86,  OS_LOG_TYPE_DEBUG,  "%{public}s Overflow: %{public}s, increment %llu, result %llu",  buf,  0x2Au);
              }
            }

            *(void *)(v20 + 1024) = -1LL;
          }
        }

        nw_http_connection_metadata_increment_outbound_message_count(*(void **)(v20 + 1248));
      }

      return 1LL;
    case 3:
      os_log_type_t v26 = *((void *)handle + 20);
      if (v26)
      {
        id v27 = *(void *)(v26 + 24);
        if (v27)
        {
          if (*(void *)(v27 + 88))
          {
            if (a3 < 0x40)
            {
              os_log_type_t v28 = __CFADD__(a3, 2);
              os_log_type_t v29 = a3 + 2;
              if (!v28) {
                goto LABEL_63;
              }
LABEL_26:
              if (gLogDatapath)
              {
                v81 = (os_log_s *)__nwlog_obj();
                if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
                {
                  if (v29 >= 0x40)
                  {
                    if (v29 >= 0x4000)
                    {
                      v82 = 9LL;
                    }

                    else
                    {
                      v82 = 3LL;
                    }
                  }

                  else
                  {
                    v82 = 2LL;
                  }

                  *(_DWORD *)buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_http3_framer_get_output_frames_for_multiple_http3_frames";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = "minimum_bytes";
                  *(_WORD *)&buf[22] = 2048;
                  *(void *)&buf[24] = v82;
                  LOWORD(v91) = 2048;
                  *(void *)((char *)&v91 + 2) = v29;
                  _os_log_impl( &dword_181A5C000,  v81,  OS_LOG_TYPE_DEBUG,  "%{public}s Overflow: %{public}s, increment %llu, result %llu",  buf,  0x2Au);
                }
              }

              os_log_type_t v29 = 0xFFFFFFFFLL;
              if (a4 < 0x40)
              {
LABEL_64:
                os_log_type_t v28 = __CFADD__(a4, 2);
                os_log_type_t v30 = a4 + 2;
                if (!v28) {
                  goto LABEL_68;
                }
                goto LABEL_66;
              }

      goto LABEL_128;
    }

    goto LABEL_128;
  }

  if (!a5) {
    goto LABEL_128;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&nw_uuid_generate_insecure(unsigned char *)::uuid_lock);
  if ((void)nw_uuid_generate_insecure(unsigned char *)::last_used_uuid != -1LL)
  {
    *(void *)&nw_uuid_generate_insecure(unsigned char *)::last_used_uuid = nw_uuid_generate_insecure(unsigned char *)::last_used_uuid
                                                                           + 1;
    goto LABEL_121;
  }

  if (*((void *)&nw_uuid_generate_insecure(unsigned char *)::last_used_uuid + 1) == -1LL)
  {
LABEL_120:
    uuid_generate_random((unsigned __int8 *)&nw_uuid_generate_insecure(unsigned char *)::last_used_uuid);
    BYTE9(nw_uuid_generate_insecure(unsigned char *)::last_used_uuid) = -1;
  }

  else
  {
    ++*((void *)&nw_uuid_generate_insecure(unsigned char *)::last_used_uuid + 1);
  }

    if (!v18) {
      return 4294966775LL;
    }
    goto LABEL_139;
  }

  id v17 = *(_DWORD *)(a2 + 8);
  if ((v16 & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    os_log_type_t v91 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      v92 = *(_DWORD *)(a3 + 368);
      *(_DWORD *)buf = 136446978;
      v107 = "on_begin_headers_callback";
      v108 = 2082;
      __int16 v109 = a3 + 390;
      __uint64_t v110 = 2080;
      __int16 v111 = (uint64_t)" ";
      uint64_t v112 = 1024;
      __int16 v113 = v92;
      _os_log_impl( &dword_181A5C000,  v91,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> detected new stream initiated from remote side of the connection, allocating new stream",  buf,  0x26u);
    }
  }

  id v18 = (uint64_t)calloc(1uLL, 0x118uLL);
  if (!v18)
  {
    os_log_type_t v89 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v89, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    v107 = "strict_calloc";
    v108 = 2048;
    __int16 v109 = 1LL;
    __uint64_t v110 = 2048;
    __int16 v111 = 280LL;
    BOOL v90 = (void *)_os_log_send_and_compose_impl();
    uint64_t result = __nwlog_abort((uint64_t)v90);
    if ((_DWORD)result)
    {
      __break(1u);
      return result;
    }

    free(v90);
  }

  *(void *)(v18 + 272) = 0LL;
  *(_OWORD *)(v18 + 240) = 0u;
  *(_OWORD *)(v18 + 256) = 0u;
  *(_OWORD *)(v18 + 208) = 0u;
  *(_OWORD *)(v18 + 224) = 0u;
  *(_OWORD *)(v18 + 176) = 0u;
  *(_OWORD *)(v18 + 192) = 0u;
  *(_OWORD *)(v18 + 144) = 0u;
  *(_OWORD *)(v18 + 160) = 0u;
  *(_OWORD *)(v18 + 112) = 0u;
  *(_OWORD *)(v18 + 128) = 0u;
  *(_OWORD *)(v18 + 80) = 0u;
  *(_OWORD *)(v18 + 96) = 0u;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)(v18 + 64) = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)id v18 = 0u;
  char v19 = *(void **)(a3 + 104);
  if (!v19)
  {
    if (*(__int16 *)(a3 + 388) < 0)
    {
LABEL_138:
      std::destroy_at[abi:nn180100]<http2_stream,0>(v18);
LABEL_139:
      os_log_type_t v67 = (void *)v18;
      goto LABEL_140;
    }

    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    v51 = *(_DWORD *)(a3 + 368);
    *(_DWORD *)buf = 136446978;
    v107 = "on_begin_headers_callback";
    v108 = 2082;
    __int16 v109 = a3 + 390;
    __uint64_t v110 = 2080;
    __int16 v111 = (uint64_t)" ";
    uint64_t v112 = 1024;
    __int16 v113 = v51;
    os_log_type_t v52 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    __uint64_t v104 = 0;
    if (__nwlog_fault(v52, &type, &v104))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        v53 = (os_log_s *)gconnectionLogObj;
        BOOL v54 = type;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type)) {
          goto LABEL_136;
        }
        uint64_t v55 = *(_DWORD *)(a3 + 368);
        *(_DWORD *)buf = 136446978;
        v107 = "on_begin_headers_callback";
        v108 = 2082;
        __int16 v109 = a3 + 390;
        __uint64_t v110 = 2080;
        __int16 v111 = (uint64_t)" ";
        uint64_t v112 = 1024;
        __int16 v113 = v55;
        v56 = "%{public}s %{public}s%s<i%u> http2->parameters is NULL when opening responder stream";
        goto LABEL_135;
      }

      if (!v104)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        v53 = (os_log_s *)gconnectionLogObj;
        BOOL v54 = type;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, type)) {
          goto LABEL_136;
        }
        __uint64_t v73 = *(_DWORD *)(a3 + 368);
        *(_DWORD *)buf = 136446978;
        v107 = "on_begin_headers_callback";
        v108 = 2082;
        __int16 v109 = a3 + 390;
        __uint64_t v110 = 2080;
        __int16 v111 = (uint64_t)" ";
        uint64_t v112 = 1024;
        __int16 v113 = v73;
        v56 = "%{public}s %{public}s%s<i%u> http2->parameters is NULL when opening responder stream, backtrace limit exceeded";
        goto LABEL_135;
      }

      v68 = (char *)__nw_create_backtrace_string();
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v53 = (os_log_s *)gconnectionLogObj;
      BOOL v54 = type;
      v69 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
      if (v68)
      {
        if (v69)
        {
          v70 = *(_DWORD *)(a3 + 368);
          *(_DWORD *)buf = 136447234;
          v107 = "on_begin_headers_callback";
          v108 = 2082;
          __int16 v109 = a3 + 390;
          __uint64_t v110 = 2080;
          __int16 v111 = (uint64_t)" ";
          uint64_t v112 = 1024;
          __int16 v113 = v70;
          v114 = 2082;
          v115[0] = v68;
          _os_log_impl( &dword_181A5C000,  v53,  v54,  "%{public}s %{public}s%s<i%u> http2->parameters is NULL when opening responder stream, dumping backtrace:%{public}s",  buf,  0x30u);
        }

        free(v68);
        goto LABEL_136;
      }

      if (v69)
      {
        unint64_t v74 = *(_DWORD *)(a3 + 368);
        *(_DWORD *)buf = 136446978;
        v107 = "on_begin_headers_callback";
        v108 = 2082;
        __int16 v109 = a3 + 390;
        __uint64_t v110 = 2080;
        __int16 v111 = (uint64_t)" ";
        uint64_t v112 = 1024;
        __int16 v113 = v74;
        v56 = "%{public}s %{public}s%s<i%u> http2->parameters is NULL when opening responder stream, no backtrace";
LABEL_135:
        _os_log_impl(&dword_181A5C000, v53, v54, v56, buf, 0x26u);
      }
    }

          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          __uint64_t v76 = gconnectionLogObj;
          uint64_t result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO);
          if ((_DWORD)result)
          {
            v77 = *(_DWORD *)(a3 + 368);
            unint64_t v78 = *((_DWORD *)a2 + 2);
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "on_frame_recv_callback";
            v240 = 2082;
            v241 = (void *)(a3 + 390);
            v242 = 2080;
            v243 = " ";
            v244 = 1024;
            v245 = v77;
            v246 = 1024;
            *(_DWORD *)v247 = v78;
            id v17 = "%{public}s %{public}s%s<i%u> no input handler found for stream %d, ignoring RST_STREAM";
            id v18 = (os_log_s *)v76;
            char v19 = OS_LOG_TYPE_INFO;
            goto LABEL_132;
          }

          return result;
        }

        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        v51 = gconnectionLogObj;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO)) {
          goto LABEL_127;
        }
        os_log_type_t v52 = *(_DWORD *)(a3 + 368);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_http2_get_protocol_from_stream_id";
        v240 = 2082;
        v241 = (void *)(a3 + 390);
        v242 = 2080;
        v243 = " ";
        v244 = 1024;
        v245 = v52;
        v246 = 1024;
        *(_DWORD *)v247 = v21;
        dispatch_workloop_t v44 = "%{public}s %{public}s%s<i%u> could not find stream for stream %d";
        v45 = (os_log_s *)v51;
        os_log_type_t v46 = OS_LOG_TYPE_INFO;
        os_log_type_t v47 = 44;
      }

    if (v52) {
      free(v52);
    }
LABEL_28:
    if ((*(__int16 *)(a5 + 388) & 0x80000000) == 0)
    {
      if (gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        char v20 = gconnectionLogObj;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_99;
        }
        os_log_type_t v21 = *(_DWORD *)(a5 + 368);
        v22 = *((_DWORD *)v86 + 6);
        LODWORD(buf[0]) = 136447234;
        *(void *)((char *)buf + 4) = "send_callback";
        WORD2(buf[1]) = 2082;
        *(void *)((char *)&buf[1] + 6) = a5 + 390;
        HIWORD(buf[2]) = 2080;
        v92 = " ";
        LOWORD(v93) = 1024;
        *(_DWORD *)((char *)&v93 + 2) = v21;
        HIWORD(v93) = 1024;
        LODWORD(v94[0]) = v22;
        uint64_t v23 = "%{public}s %{public}s%s<i%u> wrote %u bytes";
        __int16 v24 = (os_log_s *)v20;
        v25 = 44;
        goto LABEL_98;
      }

      goto LABEL_37;
    }

  __break(1u);
  return result;
}

LABEL_102:
    free(v59);
    if (!v50) {
      goto LABEL_128;
    }
    goto LABEL_127;
  }

  if ((v2[34]._os_unfair_lock_opaque & 5) == 0)
  {
    __nwlog_obj();
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v108 = "nw_context_initialize_globals";
    v50 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v105 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v63 = type;
      if (os_log_type_enabled(v51, type))
      {
        *(_DWORD *)buf = 136446210;
        v108 = "nw_context_initialize_globals";
        _os_log_impl( &dword_181A5C000,  v51,  v63,  "%{public}s Cannot initialize globals for non-isolated context",  buf,  0xCu);
      }

      goto LABEL_125;
    }

    if (!v105)
    {
      __nwlog_obj();
      v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v67 = type;
      if (os_log_type_enabled(v51, type))
      {
        *(_DWORD *)buf = 136446210;
        v108 = "nw_context_initialize_globals";
        _os_log_impl( &dword_181A5C000,  v51,  v67,  "%{public}s Cannot initialize globals for non-isolated context, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_125;
    }

    v59 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v65 = type;
    BOOL v66 = os_log_type_enabled(v51, type);
    if (!v59)
    {
      if (v66)
      {
        *(_DWORD *)buf = 136446210;
        v108 = "nw_context_initialize_globals";
        _os_log_impl( &dword_181A5C000,  v51,  v65,  "%{public}s Cannot initialize globals for non-isolated context, no backtrace",  buf,  0xCu);
      }

      goto LABEL_125;
    }

    if (v66)
    {
      *(_DWORD *)buf = 136446466;
      v108 = "nw_context_initialize_globals";
      __int16 v109 = 2082;
      __uint64_t v110 = (__uint64_t)v59;
      _os_log_impl( &dword_181A5C000,  v51,  v65,  "%{public}s Cannot initialize globals for non-isolated context, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_102;
  }

  v53 = calloc(1uLL, 0xBCuLL);
  if (v53)
  {
LABEL_96:
    *(_OWORD *)((char *)v53 + 172) = 0u;
    v53[9] = 0u;
    v53[10] = 0u;
    v53[7] = 0u;
    v53[8] = 0u;
    v53[5] = 0u;
    v53[6] = 0u;
    v53[3] = 0u;
    v53[4] = 0u;
    v53[1] = 0u;
    v53[2] = 0u;
    _OWORD *v53 = 0u;
    *(void *)&v48[8]._char os_unfair_lock_opaque = v53;
    *((void *)v53 + 1) = 0LL;
    *(void *)(*(void *)&v48[8]._os_unfair_lock_opaque + 16LL) = *(void *)&v48[8]._os_unfair_lock_opaque + 8LL;
    *(void *)(*(void *)&v48[8]._os_unfair_lock_opaque + 52LL) = nw_hash_table_create_internal( 0x11u,  8,  (const void *(*)(const void *, unsigned int *))nw_context_object_get_key,  (unsigned int (*)(const void *, unsigned int))nw_context_object_key_hash,  (BOOL (*)(const void *, const void *, unsigned int))nw_context_object_matches_key,  (void (*)(void *))nw_context_object_release);
    *(void *)(*(void *)&v48[8]._os_unfair_lock_opaque + 24LL) = nw_hash_table_create_internal( 0x11u,  0,  (const void *(*)(const void *, unsigned int *))nw_context_timer_object_get_key,  (unsigned int (*)(const void *, unsigned int))nw_context_timer_object_key_hash,  (BOOL (*)(const void *, const void *, unsigned int))nw_context_timer_object_matches_key,  (void (*)(void *))nw_context_timer_object_release);
    if ((v2[34]._os_unfair_lock_opaque & 8) != 0)
    {
      BOOL v54 = nw_array_create();
      uint64_t v55 = *(void *)&v48[8]._os_unfair_lock_opaque;
      v56 = *(void **)(v55 + 100);
      *(void *)(v55 + 100) = v54;

      BOOL v57 = nw_array_create();
      v58 = *(void **)(*(void *)&v48[8]._os_unfair_lock_opaque + 116LL);
      *(void *)(*(void *)&v48[8]._os_unfair_lock_opaque + 116LL) = v57;
    }

    goto LABEL_128;
  }

  __nwlog_obj();
  v94 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v94, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v108 = "strict_calloc";
  __int16 v109 = 2048;
  __uint64_t v110 = 1LL;
  __int16 v111 = 2048;
  uint64_t v112 = 188LL;
  v95 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v95))
  {
    free(v95);
    goto LABEL_96;
  }

    free(v36);
    goto LABEL_103;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v31 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
  os_log_type_t v32 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  v130 = 0;
  if (__nwlog_fault(v32, &type, &v130))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v33 = (os_log_s *)(id)gLogObj;
      dispatch_workloop_t v34 = type;
      if (os_log_type_enabled(v33, type))
      {
        *(_DWORD *)buf = 136446210;
        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_181A5C000, v33, v34, "%{public}s nw_parameters_create failed", buf, 0xCu);
      }
    }

    else if (v130)
    {
      os_log_type_t v39 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v33 = (os_log_s *)(id)gLogObj;
      v40 = type;
      os_log_type_t v41 = os_log_type_enabled(v33, type);
      if (v39)
      {
        if (v41)
        {
          *(_DWORD *)buf = 136446466;
          v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
          v134 = 2082;
          v135 = v39;
          _os_log_impl( &dword_181A5C000,  v33,  v40,  "%{public}s nw_parameters_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v39);
        if (!v32) {
          goto LABEL_83;
        }
        goto LABEL_82;
      }

      if (v41)
      {
        *(_DWORD *)buf = 136446210;
        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_181A5C000, v33, v40, "%{public}s nw_parameters_create failed, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v33 = (os_log_s *)(id)gLogObj;
      BOOL v57 = type;
      if (os_log_type_enabled(v33, type))
      {
        *(_DWORD *)buf = 136446210;
        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl( &dword_181A5C000,  v33,  v57,  "%{public}s nw_parameters_create failed, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

  if (v32) {
LABEL_82:
  }
    free(v32);
LABEL_83:
  os_log_type_t v30 = 0LL;
LABEL_151:

LABEL_152:
  return v30;
}

            os_log_type_t v21 = 1LL;
            break;
          case 4:
            os_log_type_t v21 = v10[2];
            if (!v21) {
              goto LABEL_103;
            }
            v22 = v10[1];
            if (v22) {
              uint64_t v23 = (uint64_t)(*(void *)(v22 + 24) - *(void *)(v22 + 16)) >> 3;
            }
            else {
              uint64_t v23 = 0LL;
            }
            v53[0] = MEMORY[0x1895F87A8];
            v53[1] = 3221225472LL;
            v53[2] = __nw_parameters_internal_iterate_protocol_stack_block_invoke_2;
            v53[3] = &unk_189BB8D90;
            BOOL v54 = v9;
            uint64_t v55 = v23;
            nw_array_apply((unsigned __int8 *)v21, (uint64_t)v53);
            __int16 v24 = v54;
            goto LABEL_31;
          case 5:
            os_log_type_t v21 = v10[1];
            if (!v21) {
              goto LABEL_103;
            }
            v56[0] = MEMORY[0x1895F87A8];
            v56[1] = 3221225472LL;
            v56[2] = __nw_parameters_internal_iterate_protocol_stack_block_invoke;
            v56[3] = &unk_189BC8628;
            BOOL v57 = v9;
            nw_array_apply((unsigned __int8 *)v21, (uint64_t)v56);
            __int16 v24 = v57;
LABEL_31:

            goto LABEL_102;
          default:
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            BOOL v14 = (os_log_s *)(id)gLogObj;
            if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446466;
              BOOL v61 = "nw_parameters_internal_iterate_protocol_stack";
              v62 = 1024;
              LODWORD(v63) = a2;
              _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_ERROR,  "%{public}s Unsupported protocol level %u",  buf,  0x12u);
            }

            goto LABEL_91;
        }

        goto LABEL_103;
      }

      __nwlog_obj();
      dispatch_workloop_t v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      BOOL v61 = "nw_parameters_internal_iterate_protocol_stack";
      v35 = (char *)_os_log_send_and_compose_impl();

      v59 = OS_LOG_TYPE_ERROR;
      v58 = 0;
      if (__nwlog_fault(v35, &v59, &v58))
      {
        if (v59 == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          id v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v37 = v59;
          if (os_log_type_enabled(v36, v59))
          {
            *(_DWORD *)buf = 136446210;
            BOOL v61 = "nw_parameters_internal_iterate_protocol_stack";
            _os_log_impl(&dword_181A5C000, v36, v37, "%{public}s called with null stack", buf, 0xCu);
          }
        }

        else if (v58)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          id v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          dispatch_workloop_t v44 = v59;
          v45 = os_log_type_enabled(v36, v59);
          if (backtrace_string)
          {
            if (v45)
            {
              *(_DWORD *)buf = 136446466;
              BOOL v61 = "nw_parameters_internal_iterate_protocol_stack";
              v62 = 2082;
              os_log_type_t v63 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v36,  v44,  "%{public}s called with null stack, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(backtrace_string);
            goto LABEL_89;
          }

          if (v45)
          {
            *(_DWORD *)buf = 136446210;
            BOOL v61 = "nw_parameters_internal_iterate_protocol_stack";
            _os_log_impl(&dword_181A5C000, v36, v44, "%{public}s called with null stack, no backtrace", buf, 0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          id v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v48 = v59;
          if (os_log_type_enabled(v36, v59))
          {
            *(_DWORD *)buf = 136446210;
            BOOL v61 = "nw_parameters_internal_iterate_protocol_stack";
            _os_log_impl( &dword_181A5C000,  v36,  v48,  "%{public}s called with null stack, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

          v92 = v162;
          goto LABEL_156;
        }
              }
            }

    goto LABEL_103;
  }

  id v3 = v1[3];
  if (!v3)
  {
    __nwlog_obj();
    char v43 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __uint64_t v73 = "nw_data_transfer_report_add_snapshot_on_nw_queue";
    v40 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v64) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      dispatch_workloop_t v44 = type[0];
      if (os_log_type_enabled(v41, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        __uint64_t v73 = "nw_data_transfer_report_add_snapshot_on_nw_queue";
        _os_log_impl(&dword_181A5C000, v41, v44, "%{public}s called with null report->connection", buf, 0xCu);
      }

      goto LABEL_102;
    }

    if (!(_BYTE)v64)
    {
      __nwlog_obj();
      os_log_type_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v56 = type[0];
      if (os_log_type_enabled(v41, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        __uint64_t v73 = "nw_data_transfer_report_add_snapshot_on_nw_queue";
        _os_log_impl( &dword_181A5C000,  v41,  v56,  "%{public}s called with null report->connection, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_102;
    }

    v50 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v51 = type[0];
    os_log_type_t v52 = os_log_type_enabled(v41, type[0]);
    if (!v50)
    {
      if (v52)
      {
        *(_DWORD *)buf = 136446210;
        __uint64_t v73 = "nw_data_transfer_report_add_snapshot_on_nw_queue";
        _os_log_impl( &dword_181A5C000,  v41,  v51,  "%{public}s called with null report->connection, no backtrace",  buf,  0xCu);
      }

      goto LABEL_102;
    }

    if (v52)
    {
      *(_DWORD *)buf = 136446466;
      __uint64_t v73 = "nw_data_transfer_report_add_snapshot_on_nw_queue";
      unint64_t v74 = 2082;
      char v75 = v50;
      _os_log_impl( &dword_181A5C000,  v41,  v51,  "%{public}s called with null report->connection, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_83;
  }

  uint64_t v4 = *(void **)(v3 + 24);
  if (!v4)
  {
    __nwlog_obj();
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __uint64_t v73 = "nw_data_transfer_report_add_snapshot_on_nw_queue";
    v40 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v64) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v46 = type[0];
      if (os_log_type_enabled(v41, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        __uint64_t v73 = "nw_data_transfer_report_add_snapshot_on_nw_queue";
        _os_log_impl(&dword_181A5C000, v41, v46, "%{public}s called with null report->connection->context", buf, 0xCu);
      }

      goto LABEL_102;
    }

    if (!(_BYTE)v64)
    {
      __nwlog_obj();
      os_log_type_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v57 = type[0];
      if (os_log_type_enabled(v41, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        __uint64_t v73 = "nw_data_transfer_report_add_snapshot_on_nw_queue";
        _os_log_impl( &dword_181A5C000,  v41,  v57,  "%{public}s called with null report->connection->context, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_102;
    }

    v50 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v53 = type[0];
    BOOL v54 = os_log_type_enabled(v41, type[0]);
    if (!v50)
    {
      if (v54)
      {
        *(_DWORD *)buf = 136446210;
        __uint64_t v73 = "nw_data_transfer_report_add_snapshot_on_nw_queue";
        _os_log_impl( &dword_181A5C000,  v41,  v53,  "%{public}s called with null report->connection->context, no backtrace",  buf,  0xCu);
      }

      goto LABEL_102;
    }

    if (v54)
    {
      *(_DWORD *)buf = 136446466;
      __uint64_t v73 = "nw_data_transfer_report_add_snapshot_on_nw_queue";
      unint64_t v74 = 2082;
      char v75 = v50;
      _os_log_impl( &dword_181A5C000,  v41,  v53,  "%{public}s called with null report->connection->context, dumping backtrace:%{public}s",  buf,  0x16u);
    }

  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
  return result;
}

  os_log_type_t v46 = mime_type_to_class(void)::instance;
  os_log_type_t v47 = *(void **)(mime_type_to_class(void)::instance + 8 * v2);
  if (v47)
  {
    *(void *)uint64_t v23 = *v47;
LABEL_110:
    *os_log_type_t v47 = v23;
    goto LABEL_111;
  }

  v48 = qword_18C5A2818;
  *(void *)uint64_t v23 = qword_18C5A2818;
  qword_18C5A2818 = (uint64_t)v23;
  *(void *)(v46 + 8 * v2) = &qword_18C5A2818;
  if (v48)
  {
    id v49 = *(void *)(v48 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v49 >= v9) {
        v49 %= v9;
      }
    }

    else
    {
      v49 &= v9 - 1;
    }

    os_log_type_t v47 = (void *)(mime_type_to_class(void)::instance + 8 * v49);
    goto LABEL_110;
  }

        goto LABEL_103;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v83 = (os_log_s *)(id)gLogObj;
      if (!os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_102;
      }
      v92 = v8 + 26;
      v93 = *(void *)(a1 + 32);
      if (!v8) {
        v92 = 0LL;
      }
      *(_DWORD *)buf = 136447234;
      __int16 v109 = "nw_ethernet_channel_handle_path_update_locked_block_invoke";
      __uint64_t v110 = 2114;
      __int16 v111 = v93;
      uint64_t v112 = 1042;
      *(_DWORD *)__int16 v113 = 16;
      *(_WORD *)&v113[4] = 2098;
      *(void *)&v113[6] = &v107;
      v114 = 2080;
      *(void *)uint64_t v115 = v92;
      v88 = "%{public}s [%{public}@] Ethernet Channel handle update: added flow registration for nexus agent %{public,uuid_t}.16P on %s";
      os_log_type_t v89 = v83;
      BOOL v90 = OS_LOG_TYPE_DEBUG;
    }

    else
    {
      if (v80 && *(void *)(v80 + 152))
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v83 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
        {
          v94 = v8 + 26;
          v95 = *(void *)(a1 + 32);
          if (!v8) {
            v94 = 0LL;
          }
          v96 = *(_DWORD *)(v95 + 168);
          os_log_type_t v97 = *(void *)(v95 + 24);
          *(_DWORD *)buf = 136448002;
          __int16 v109 = "nw_ethernet_channel_handle_path_update_locked_block_invoke";
          __uint64_t v110 = 2080;
          __int16 v111 = v97;
          uint64_t v112 = 1042;
          *(_DWORD *)__int16 v113 = 16;
          *(_WORD *)&v113[4] = 2098;
          *(void *)&v113[6] = v95 + 115;
          v114 = 1024;
          *(_DWORD *)uint64_t v115 = v96;
          *(_WORD *)&v115[4] = 1042;
          *(_DWORD *)&v115[6] = 16;
          *(_WORD *)&v115[10] = 2098;
          *(void *)&v115[12] = &v107;
          v116 = 2080;
          *(void *)v117 = v94;
          v88 = "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>] Ethernet Channel handle update: failed to c"
                "reate flow registration for nexus agent %{public,uuid_t}.16P on %s";
          os_log_type_t v89 = v83;
          BOOL v90 = OS_LOG_TYPE_ERROR;
          os_log_type_t v91 = 70;
          goto LABEL_101;
        }

        goto LABEL_102;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v83 = (os_log_s *)(id)gLogObj;
      if (!os_log_type_enabled(v83, OS_LOG_TYPE_ERROR)) {
        goto LABEL_102;
      }
      BOOL v98 = v8 + 26;
      v99 = *(void *)(a1 + 32);
      if (!v8) {
        BOOL v98 = 0LL;
      }
      *(_DWORD *)buf = 136447234;
      __int16 v109 = "nw_ethernet_channel_handle_path_update_locked_block_invoke";
      __uint64_t v110 = 2114;
      __int16 v111 = v99;
      uint64_t v112 = 1042;
      *(_DWORD *)__int16 v113 = 16;
      *(_WORD *)&v113[4] = 2098;
      *(void *)&v113[6] = &v107;
      v114 = 2080;
      *(void *)uint64_t v115 = v98;
      v88 = "%{public}s [%{public}@] Ethernet Channel handle update: failed to create flow registration for nexus agent %"
            "{public,uuid_t}.16P on %s";
      os_log_type_t v89 = v83;
      BOOL v90 = OS_LOG_TYPE_ERROR;
    }

    os_log_type_t v91 = 48;
LABEL_101:
    _os_log_impl(&dword_181A5C000, v89, v90, v88, buf, v91);
    goto LABEL_102;
  }

  BOOL v66 = v65;
  os_log_type_t v67 = v66;
  if ((v66[148] & 4) == 0)
  {

    os_log_type_t v64 = *(void *)(a1 + 32);
    goto LABEL_66;
  }

  v68 = uuid_compare(v66 + 48, a3) == 0;

  os_log_type_t v64 = *(void *)(a1 + 32);
  if (!v68)
  {
LABEL_66:
    v107 = *(_OWORD *)a3;
    if (!v64) {
      goto LABEL_72;
    }
    goto LABEL_67;
  }

  if (v64 && *(void *)(v64 + 152))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v100 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG))
    {
      BOOL v101 = v8 + 26;
      os_log_type_t v102 = *(void *)(a1 + 32);
      if (!v8) {
        BOOL v101 = 0LL;
      }
      os_log_type_t v103 = *(_DWORD *)(v102 + 168);
      __uint64_t v104 = *(void *)(v102 + 24);
      *(_DWORD *)buf = 136448002;
      __int16 v109 = "nw_ethernet_channel_handle_path_update_locked_block_invoke";
      __uint64_t v110 = 2080;
      __int16 v111 = v104;
      uint64_t v112 = 1042;
      *(_DWORD *)__int16 v113 = 16;
      *(_WORD *)&v113[4] = 2098;
      *(void *)&v113[6] = v102 + 115;
      v114 = 1024;
      *(_DWORD *)uint64_t v115 = v103;
      *(_WORD *)&v115[4] = 1042;
      *(_DWORD *)&v115[6] = 16;
      *(_WORD *)&v115[10] = 2098;
      *(void *)&v115[12] = a3;
      v116 = 2080;
      *(void *)v117 = v101;
      _os_log_impl( &dword_181A5C000,  v100,  OS_LOG_TYPE_DEBUG,  "%{public}s [%s: nexus instance %{public,uuid_t}.16P <fd %d>] Ethernet Channel handle update: flow registration a lready exists for nexus agent %{public,uuid_t}.16P on %s",  buf,  0x46u);
    }
  }

  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v100 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG))
    {
      char v105 = v8 + 26;
      v106 = *(void *)(a1 + 32);
      if (!v8) {
        char v105 = 0LL;
      }
      *(_DWORD *)buf = 136447234;
      __int16 v109 = "nw_ethernet_channel_handle_path_update_locked_block_invoke";
      __uint64_t v110 = 2114;
      __int16 v111 = v106;
      uint64_t v112 = 1042;
      *(_DWORD *)__int16 v113 = 16;
      *(_WORD *)&v113[4] = 2098;
      *(void *)&v113[6] = a3;
      v114 = 2080;
      *(void *)uint64_t v115 = v105;
      _os_log_impl( &dword_181A5C000,  v100,  OS_LOG_TYPE_DEBUG,  "%{public}s [%{public}@] Ethernet Channel handle update: flow registration already exists for nexus agent %{publi c,uuid_t}.16P on %s",  buf,  0x30u);
    }
  }

LABEL_103:
}

    free(backtrace_string);
    if (!v5) {
      return;
    }
LABEL_37:
    free((void *)v5);
    return;
  }

  char v5 = *(void *)(v4 + 48);
  if (!v5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v47 = "__nw_protocol_output_available";
    char v5 = _os_log_send_and_compose_impl();
    v45 = OS_LOG_TYPE_ERROR;
    dispatch_workloop_t v44 = 0;
    if (v45 == OS_LOG_TYPE_FAULT)
    {
      char v20 = (os_log_s *)__nwlog_obj();
      os_log_type_t v21 = v45;
      if (!os_log_type_enabled(v20, v45)) {
        goto LABEL_130;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v47 = "__nw_protocol_output_available";
      v22 = "%{public}s called with null protocol";
      goto LABEL_129;
    }

    if (!v44)
    {
      char v20 = (os_log_s *)__nwlog_obj();
      os_log_type_t v21 = v45;
      if (!os_log_type_enabled(v20, v45)) {
        goto LABEL_130;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v47 = "__nw_protocol_output_available";
      v22 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_129;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    char v20 = (os_log_s *)__nwlog_obj();
    os_log_type_t v21 = v45;
    os_log_type_t v39 = os_log_type_enabled(v20, v45);
    if (backtrace_string)
    {
      if (!v39) {
        goto LABEL_102;
      }
      *(_DWORD *)buf = 136446466;
      os_log_type_t v47 = "__nw_protocol_output_available";
      v48 = 2082;
      id v49 = backtrace_string;
      os_log_type_t v32 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_101;
    }

    if (!v39) {
      goto LABEL_130;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v47 = "__nw_protocol_output_available";
    v22 = "%{public}s called with null protocol, no backtrace";
LABEL_129:
    _os_log_impl(&dword_181A5C000, v20, v21, v22, buf, 0xCu);
LABEL_130:
    if (!v5) {
      return;
    }
    goto LABEL_37;
  }

  id v6 = *(void **)(v5 + 40);
  if (v6 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v7 = *(void *)(v5 + 88);
    if (v7) {
      *(void *)(v5 + 88) = v7 + 1;
    }
  }

  char v8 = *(void **)(v4 + 40);
  if (v8 == &nw_protocol_ref_counted_handle)
  {
    BOOL v9 = *(void *)(v4 + 88);
    if (v9) {
      *(void *)(v4 + 88) = v9 + 1;
    }
  }

  os_log_type_t v10 = *(void *)(v5 + 24);
  if (v10)
  {
    os_log_type_t v11 = *(void (**)(uint64_t, uint64_t))(v10 + 72);
    if (v11)
    {
      v11(v5, v4);
      goto LABEL_17;
    }
  }

  __nwlog_obj();
  __int16 v24 = *(const char **)(v5 + 16);
  *(_DWORD *)buf = 136446722;
  os_log_type_t v47 = "__nw_protocol_output_available";
  if (!v24) {
    __int16 v24 = "invalid";
  }
  v48 = 2082;
  id v49 = (void *)v24;
  v50 = 2048;
  v51 = v5;
  v25 = (char *)_os_log_send_and_compose_impl();
  v45 = OS_LOG_TYPE_ERROR;
  dispatch_workloop_t v44 = 0;
  if (__nwlog_fault(v25, &v45, &v44))
  {
    if (v45 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v26 = (os_log_s *)__nwlog_obj();
      id v27 = v45;
      if (!os_log_type_enabled(v26, v45)) {
        goto LABEL_119;
      }
      os_log_type_t v28 = *(const char **)(v5 + 16);
      if (!v28) {
        os_log_type_t v28 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      os_log_type_t v47 = "__nw_protocol_output_available";
      v48 = 2082;
      id v49 = (void *)v28;
      v50 = 2048;
      v51 = v5;
      os_log_type_t v29 = "%{public}s protocol %{public}s (%p) has invalid output_available callback";
      goto LABEL_118;
    }

    if (!v44)
    {
      os_log_type_t v26 = (os_log_s *)__nwlog_obj();
      id v27 = v45;
      if (!os_log_type_enabled(v26, v45)) {
        goto LABEL_119;
      }
      v40 = *(const char **)(v5 + 16);
      if (!v40) {
        v40 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      os_log_type_t v47 = "__nw_protocol_output_available";
      v48 = 2082;
      id v49 = (void *)v40;
      v50 = 2048;
      v51 = v5;
      os_log_type_t v29 = "%{public}s protocol %{public}s (%p) has invalid output_available callback, backtrace limit exceeded";
      goto LABEL_118;
    }

    v35 = (char *)__nw_create_backtrace_string();
    os_log_type_t v26 = (os_log_s *)__nwlog_obj();
    id v27 = v45;
    id v36 = os_log_type_enabled(v26, v45);
    if (v35)
    {
      if (v36)
      {
        v37 = *(const char **)(v5 + 16);
        if (!v37) {
          v37 = "invalid";
        }
        *(_DWORD *)buf = 136446978;
        os_log_type_t v47 = "__nw_protocol_output_available";
        v48 = 2082;
        id v49 = (void *)v37;
        v50 = 2048;
        v51 = v5;
        os_log_type_t v52 = 2082;
        v53 = v35;
        _os_log_impl( &dword_181A5C000,  v26,  v27,  "%{public}s protocol %{public}s (%p) has invalid output_available callback, dumping backtrace:%{public}s",  buf,  0x2Au);
      }

      free(v35);
      goto LABEL_119;
    }

    if (v36)
    {
      os_log_type_t v41 = *(const char **)(v5 + 16);
      if (!v41) {
        os_log_type_t v41 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      os_log_type_t v47 = "__nw_protocol_output_available";
      v48 = 2082;
      id v49 = (void *)v41;
      v50 = 2048;
      v51 = v5;
      os_log_type_t v29 = "%{public}s protocol %{public}s (%p) has invalid output_available callback, no backtrace";
LABEL_118:
      _os_log_impl(&dword_181A5C000, v26, v27, v29, buf, 0x20u);
    }
  }

      free(v24);
      goto LABEL_18;
    }

    __nwlog_obj();
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_remove_connection_locked";
    __int16 v24 = (char *)_os_log_send_and_compose_impl();

    v56[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (v56[0] == 17)
    {
      __nwlog_obj();
      v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v26 = v56[0];
      if (os_log_type_enabled(v25, (os_log_type_t)v56[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_remove_connection_locked";
        _os_log_impl(&dword_181A5C000, v25, v26, "%{public}s called with null group", buf, 0xCu);
      }
    }

    else if (type)
    {
      v37 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v38 = v56[0];
      os_log_type_t v39 = os_log_type_enabled(v25, (os_log_type_t)v56[0]);
      if (v37)
      {
        if (v39)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_connection_group_remove_connection_locked";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v37;
          _os_log_impl( &dword_181A5C000,  v25,  v38,  "%{public}s called with null group, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v37);
        goto LABEL_101;
      }

      if (v39)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_remove_connection_locked";
        _os_log_impl(&dword_181A5C000, v25, v38, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v49 = v56[0];
      if (os_log_type_enabled(v25, (os_log_type_t)v56[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_connection_group_remove_connection_locked";
        _os_log_impl( &dword_181A5C000,  v25,  v49,  "%{public}s called with null group, backtrace limit exceeded",  buf,  0xCu);
      }
    }

            goto LABEL_103;
          }

          if (v169[0] == OS_LOG_TYPE_DEFAULT)
          {
            __nwlog_obj();
            __uint64_t v73 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v87 = handler[0];
            if (os_log_type_enabled(v73, (os_log_type_t)handler[0]))
            {
              v88 = nw_group_descriptor_get_type(v47[8]);
              if (v88 > 4) {
                os_log_type_t v89 = "unknown";
              }
              else {
                os_log_type_t v89 = off_189BB74C8[v88];
              }
              *(_DWORD *)v180 = 136446466;
              *(void *)&v180[4] = "nw_connection_group_set_up_and_start_listener_locked";
              *(_WORD *)&v180[12] = 2080;
              *(void *)&v180[14] = v89;
              _os_log_impl( &dword_181A5C000,  v73,  v87,  "%{public}s Unsupported group descriptor type: %s, backtrace limit exceeded",  v180,  0x16u);
            }

            goto LABEL_102;
          }

          v82 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          __uint64_t v73 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v83 = handler[0];
          v84 = os_log_type_enabled(v73, (os_log_type_t)handler[0]);
          if (!v82)
          {
            if (v84)
            {
              BOOL v90 = nw_group_descriptor_get_type(v47[8]);
              if (v90 > 4) {
                os_log_type_t v91 = "unknown";
              }
              else {
                os_log_type_t v91 = off_189BB74C8[v90];
              }
              *(_DWORD *)v180 = 136446466;
              *(void *)&v180[4] = "nw_connection_group_set_up_and_start_listener_locked";
              *(_WORD *)&v180[12] = 2080;
              *(void *)&v180[14] = v91;
              _os_log_impl( &dword_181A5C000,  v73,  v83,  "%{public}s Unsupported group descriptor type: %s, no backtrace",  v180,  0x16u);
            }

            goto LABEL_102;
          }

          if (v84)
          {
            v85 = nw_group_descriptor_get_type(v47[8]);
            if (v85 > 4) {
              v86 = "unknown";
            }
            else {
              v86 = off_189BB74C8[v85];
            }
            *(_DWORD *)v180 = 136446722;
            *(void *)&v180[4] = "nw_connection_group_set_up_and_start_listener_locked";
            *(_WORD *)&v180[12] = 2080;
            *(void *)&v180[14] = v86;
            *(_WORD *)&v180[22] = 2082;
            v181 = v82;
            _os_log_impl( &dword_181A5C000,  v73,  v83,  "%{public}s Unsupported group descriptor type: %s, dumping backtrace:%{public}s",  v180,  0x20u);
          }

          free(v82);
        }

      goto LABEL_103;
    }

    if (!buf[0])
    {
      __nwlog_obj();
      char v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v63 = v94[0];
      if (os_log_type_enabled(v43, (os_log_type_t)v94[0]))
      {
        *(_DWORD *)aBlock = 136446210;
        *(void *)&aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        _os_log_impl( &dword_181A5C000,  v43,  v63,  "%{public}s called with null parameters, backtrace limit exceeded",  aBlock,  0xCu);
      }

      goto LABEL_102;
    }

    BOOL v54 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    char v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v55 = v94[0];
    v56 = os_log_type_enabled(v43, (os_log_type_t)v94[0]);
    if (!v54)
    {
      if (v56)
      {
        *(_DWORD *)aBlock = 136446210;
        *(void *)&aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        _os_log_impl(&dword_181A5C000, v43, v55, "%{public}s called with null parameters, no backtrace", aBlock, 0xCu);
      }

      goto LABEL_102;
    }

    if (v56)
    {
      *(_DWORD *)aBlock = 136446466;
      *(void *)&aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
      *(_WORD *)&aBlock[12] = 2082;
      *(void *)&aBlock[14] = v54;
      _os_log_impl( &dword_181A5C000,  v43,  v55,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  aBlock,  0x16u);
    }

    free(v54);
  }

    if (!v3) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v50 = "__nw_protocol_get_message_properties";
  uint64_t v4 = _os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v47 = 0;
  if (__nwlog_fault((const char *)v4, &type, &v47))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v25 = (os_log_s *)__nwlog_obj();
      os_log_type_t v26 = type;
      if (!os_log_type_enabled(v25, type)) {
        goto LABEL_97;
      }
      *(_DWORD *)buf = 136446210;
      v50 = "__nw_protocol_get_message_properties";
      id v27 = "%{public}s called with null protocol";
    }

    else if (v47)
    {
      id v36 = (char *)__nw_create_backtrace_string();
      v25 = (os_log_s *)__nwlog_obj();
      os_log_type_t v26 = type;
      v37 = os_log_type_enabled(v25, type);
      if (v36)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446466;
          v50 = "__nw_protocol_get_message_properties";
          v51 = 2082;
          os_log_type_t v52 = v36;
          _os_log_impl( &dword_181A5C000,  v25,  v26,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v36);
        if (v4) {
          goto LABEL_25;
        }
        return;
      }

      if (!v37) {
        goto LABEL_97;
      }
      *(_DWORD *)buf = 136446210;
      v50 = "__nw_protocol_get_message_properties";
      id v27 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      v25 = (os_log_s *)__nwlog_obj();
      os_log_type_t v26 = type;
      if (!os_log_type_enabled(v25, type)) {
        goto LABEL_97;
      }
      *(_DWORD *)buf = 136446210;
      v50 = "__nw_protocol_get_message_properties";
      id v27 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v25, v26, v27, buf, 0xCu);
  }

    if (!v3) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v50 = "__nw_protocol_notify";
  uint64_t v4 = _os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v47 = 0;
  if (__nwlog_fault((const char *)v4, &type, &v47))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v25 = (os_log_s *)__nwlog_obj();
      os_log_type_t v26 = type;
      if (!os_log_type_enabled(v25, type)) {
        goto LABEL_97;
      }
      *(_DWORD *)buf = 136446210;
      v50 = "__nw_protocol_notify";
      id v27 = "%{public}s called with null protocol";
    }

    else if (v47)
    {
      id v36 = (char *)__nw_create_backtrace_string();
      v25 = (os_log_s *)__nwlog_obj();
      os_log_type_t v26 = type;
      v37 = os_log_type_enabled(v25, type);
      if (v36)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446466;
          v50 = "__nw_protocol_notify";
          v51 = 2082;
          os_log_type_t v52 = v36;
          _os_log_impl( &dword_181A5C000,  v25,  v26,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v36);
        if (v4) {
          goto LABEL_25;
        }
        return;
      }

      if (!v37) {
        goto LABEL_97;
      }
      *(_DWORD *)buf = 136446210;
      v50 = "__nw_protocol_notify";
      id v27 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      v25 = (os_log_s *)__nwlog_obj();
      os_log_type_t v26 = type;
      if (!os_log_type_enabled(v25, type)) {
        goto LABEL_97;
      }
      *(_DWORD *)buf = 136446210;
      v50 = "__nw_protocol_notify";
      id v27 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v25, v26, v27, buf, 0xCu);
  }

    if (!v3) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v50 = "__nw_protocol_link_state";
  uint64_t v4 = _os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v47 = 0;
  if (__nwlog_fault((const char *)v4, &type, &v47))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v25 = (os_log_s *)__nwlog_obj();
      os_log_type_t v26 = type;
      if (!os_log_type_enabled(v25, type)) {
        goto LABEL_97;
      }
      *(_DWORD *)buf = 136446210;
      v50 = "__nw_protocol_link_state";
      id v27 = "%{public}s called with null protocol";
    }

    else if (v47)
    {
      id v36 = (char *)__nw_create_backtrace_string();
      v25 = (os_log_s *)__nwlog_obj();
      os_log_type_t v26 = type;
      v37 = os_log_type_enabled(v25, type);
      if (v36)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446466;
          v50 = "__nw_protocol_link_state";
          v51 = 2082;
          os_log_type_t v52 = v36;
          _os_log_impl( &dword_181A5C000,  v25,  v26,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v36);
        if (v4) {
          goto LABEL_25;
        }
        return;
      }

      if (!v37) {
        goto LABEL_97;
      }
      *(_DWORD *)buf = 136446210;
      v50 = "__nw_protocol_link_state";
      id v27 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      v25 = (os_log_s *)__nwlog_obj();
      os_log_type_t v26 = type;
      if (!os_log_type_enabled(v25, type)) {
        goto LABEL_97;
      }
      *(_DWORD *)buf = 136446210;
      v50 = "__nw_protocol_link_state";
      id v27 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v25, v26, v27, buf, 0xCu);
  }

    v31 = 0LL;
    goto LABEL_111;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  __int16 v24 = (id)gLogObj;
  else {
    v25 = off_189BBBBC0[mode];
  }
  *(_DWORD *)buf = 136446722;
  *(void *)&uint8_t buf[4] = "nw_endpoint_handler_register_context";
  *(_WORD *)&buf[12] = 2082;
  *(void *)&buf[14] = v25;
  *(_WORD *)&buf[22] = 2082;
  __int16 v111 = (uint64_t (*)(uint64_t, uint64_t))"flow";
  os_log_type_t v26 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  v108 = 0;
  if (__nwlog_fault(v26, &type, &v108))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v27 = (os_log_s *)(id)gLogObj;
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        else {
          os_log_type_t v29 = off_189BBBBC0[mode];
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_register_context";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v29;
        *(_WORD *)&buf[22] = 2082;
        __int16 v111 = (uint64_t (*)(uint64_t, uint64_t))"flow";
        _os_log_impl( &dword_181A5C000,  v27,  v28,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
      }
    }

    else if (v108)
    {
      os_log_type_t v32 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v27 = (os_log_s *)(id)gLogObj;
      BOOL v33 = type;
      dispatch_workloop_t v34 = os_log_type_enabled(v27, type);
      if (v32)
      {
        if (v34)
        {
          else {
            v35 = off_189BBBBC0[mode];
          }
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_register_context";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v35;
          *(_WORD *)&buf[22] = 2082;
          __int16 v111 = (uint64_t (*)(uint64_t, uint64_t))"flow";
          *(_WORD *)uint64_t v112 = 2082;
          *(void *)&v112[2] = v32;
          _os_log_impl( &dword_181A5C000,  v27,  v33,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(v32);
        if (!v26) {
          goto LABEL_78;
        }
        goto LABEL_77;
      }

      if (v34)
      {
        else {
          os_log_type_t v63 = off_189BBBBC0[mode];
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_register_context";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v63;
        *(_WORD *)&buf[22] = 2082;
        __int16 v111 = (uint64_t (*)(uint64_t, uint64_t))"flow";
        _os_log_impl( &dword_181A5C000,  v27,  v33,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v27 = (os_log_s *)(id)gLogObj;
      id v49 = type;
      if (os_log_type_enabled(v27, type))
      {
        else {
          v50 = off_189BBBBC0[mode];
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_endpoint_handler_register_context";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v50;
        *(_WORD *)&buf[22] = 2082;
        __int16 v111 = (uint64_t (*)(uint64_t, uint64_t))"flow";
        _os_log_impl( &dword_181A5C000,  v27,  v49,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
      }
    }

    goto LABEL_75;
  }

      free(v48);
      goto LABEL_103;
    }

    __nwlog_obj();
    *(_DWORD *)__s = 136446210;
    v82 = "nw_http_client_bottom_add_to_messaging";
    dispatch_workloop_t v44 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v62[0] = OS_LOG_TYPE_DEFAULT;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = type[0];
      if (os_log_type_enabled(v45, type[0]))
      {
        *(_DWORD *)__s = 136446210;
        v82 = "nw_http_client_bottom_add_to_messaging";
        os_log_type_t v47 = "%{public}s called with null parameters";
        goto LABEL_92;
      }

      goto LABEL_93;
    }

    if (v62[0] == OS_LOG_TYPE_DEFAULT)
    {
      v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = type[0];
      if (os_log_type_enabled(v45, type[0]))
      {
        *(_DWORD *)__s = 136446210;
        v82 = "nw_http_client_bottom_add_to_messaging";
        os_log_type_t v47 = "%{public}s called with null parameters, backtrace limit exceeded";
        goto LABEL_92;
      }

      goto LABEL_93;
    }

    os_log_type_t v52 = (char *)__nw_create_backtrace_string();
    v45 = (os_log_s *)__nwlog_obj();
    os_log_type_t v46 = type[0];
    uint64_t v55 = os_log_type_enabled(v45, type[0]);
    if (!v52)
    {
      if (v55)
      {
        *(_DWORD *)__s = 136446210;
        v82 = "nw_http_client_bottom_add_to_messaging";
        os_log_type_t v47 = "%{public}s called with null parameters, no backtrace";
        goto LABEL_92;
      }

      goto LABEL_93;
    }

    if (v55)
    {
      *(_DWORD *)__s = 136446466;
      v82 = "nw_http_client_bottom_add_to_messaging";
      os_log_type_t v83 = 2082;
      v84 = v52;
      BOOL v54 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
      goto LABEL_67;
    }

    goto LABEL_68;
  }

  __nwlog_obj();
  *(_DWORD *)__s = 136446210;
  v82 = "nw_http_client_bottom_add_to_messaging";
  dispatch_workloop_t v44 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  v62[0] = OS_LOG_TYPE_DEFAULT;
  if (type[0] != OS_LOG_TYPE_FAULT)
  {
    if (v62[0] == OS_LOG_TYPE_DEFAULT)
    {
      v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = type[0];
      if (os_log_type_enabled(v45, type[0]))
      {
        *(_DWORD *)__s = 136446210;
        v82 = "nw_http_client_bottom_add_to_messaging";
        os_log_type_t v47 = "%{public}s called with null input_protocol, backtrace limit exceeded";
        goto LABEL_92;
      }

      goto LABEL_93;
    }

    os_log_type_t v52 = (char *)__nw_create_backtrace_string();
    v45 = (os_log_s *)__nwlog_obj();
    os_log_type_t v46 = type[0];
    v53 = os_log_type_enabled(v45, type[0]);
    if (!v52)
    {
      if (v53)
      {
        *(_DWORD *)__s = 136446210;
        v82 = "nw_http_client_bottom_add_to_messaging";
        os_log_type_t v47 = "%{public}s called with null input_protocol, no backtrace";
        goto LABEL_92;
      }

      goto LABEL_93;
    }

    if (v53)
    {
      *(_DWORD *)__s = 136446466;
      v82 = "nw_http_client_bottom_add_to_messaging";
      os_log_type_t v83 = 2082;
      v84 = v52;
      BOOL v54 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
LABEL_67:
      _os_log_impl(&dword_181A5C000, v45, v46, v54, (uint8_t *)__s, 0x16u);
    }

    goto LABEL_103;
  }

  evaluator_for_client_id = nw_path_create_evaluator_for_client_id(a1, v3);
  char v5 = (os_unfair_lock_s *)evaluator_for_client_id;
  if (!evaluator_for_client_id)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v7 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      os_log_type_t v71 = "nw_connection_create_with_client_id";
      v72 = 1040;
      *(_DWORD *)__uint64_t v73 = 16;
      *(_WORD *)&v73[4] = 2096;
      *(void *)&v73[6] = a1;
      _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_ERROR,  "%{public}s Cannot create path evaluator for client ID %{uuid_t}.16P",  buf,  0x1Cu);
    }

    v22 = 0LL;
    goto LABEL_68;
  }

  id v6 = evaluator_for_client_id;
  os_unfair_lock_lock(v5 + 24);
  uint64_t v7 = (os_log_s *)v6[6];
  os_unfair_lock_unlock(v5 + 24);

  os_log_type_t v65 = nw_path_copy_endpoint(v7);
  BOOL v66 = nw_path_copy_parameters(v7);
  char v8 = -[NWConcrete_nw_connection initWithEndpoint:parameters:identifier:]( (void **)objc_alloc(&OBJC_CLASS___NWConcrete_nw_connection),  v65,  v66,  0);
  if (v8)
  {
    BOOL v9 = *(_DWORD *)(v8 + 448);
    os_log_type_t v10 = (_DWORD *)v8;
    os_log_type_t v11 = v6;
    os_log_type_t v64 = v10;
    os_log_type_t v12 = v10;
    os_log_type_t v13 = v11;
    os_unfair_lock_lock(v5 + 24);
    BOOL v14 = v6[6];
    os_unfair_lock_unlock(v5 + 24);
    os_log_type_t v63 = v13;

    os_log_type_t v15 = nw_path_copy_endpoint(v14);
    int v16 = nw_path_copy_parameters(v14);
    id v17 = -[NWConcrete_nw_endpoint_handler initWithEndpoint:parameters:reportCallback:context:parent:identifier:]( (id *)objc_alloc(&OBJC_CLASS___NWConcrete_nw_endpoint_handler),  v15,  v16,  nw_connection_endpoint_report_on_nw_queue,  v12,  0LL,  v9);
    id v18 = v17;
    if (v17)
    {
      *((_DWORD *)v17 + 29) = 2;
      char v19 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_endpoint_flow);
      *((_BYTE *)v19 + 32) = *((_BYTE *)v19 + 32) & 0xFC | 1;
      char v20 = v18[31];
      v18[31] = v19;

      objc_storeStrong(v18 + 32, v5);
      os_log_type_t v21 = v18;
LABEL_49:

      os_log_type_t v39 = (void *)v12[18];
      v12[18] = v18;

      v40 = v12[2];
      if (v12[18])
      {
        if (v40 && !nw_path_parameters_get_logging_disabled(*(void *)(v40 + 104)))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          os_log_type_t v41 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
          {
            BOOL v42 = v64[112];
            *(_DWORD *)buf = 136446978;
            os_log_type_t v71 = "nw_connection_create_with_client_id";
            v72 = 1024;
            *(_DWORD *)__uint64_t v73 = v42;
            *(_WORD *)&v73[4] = 1042;
            *(_DWORD *)&v73[6] = 16;
            *(_WORD *)&v73[10] = 2098;
            *(void *)&v73[12] = a1;
            _os_log_impl( &dword_181A5C000,  v41,  OS_LOG_TYPE_INFO,  "%{public}s [C%u] create connection from ID %{public,uuid_t}.16P",  buf,  0x22u);
          }
        }

        v22 = v12;
      }

      else
      {
        if (v40 && !nw_path_parameters_get_logging_disabled(*(void *)(v40 + 104)))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          char v43 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
          {
            dispatch_workloop_t v44 = v64[112];
            *(_DWORD *)buf = 136446466;
            os_log_type_t v71 = "nw_connection_create_with_client_id";
            v72 = 1024;
            *(_DWORD *)__uint64_t v73 = v44;
            _os_log_impl( &dword_181A5C000,  v43,  OS_LOG_TYPE_ERROR,  "%{public}s [C%u] nw_endpoint_handler_create_with_path_evaluator failed",  buf,  0x12u);
          }
        }

        v22 = 0LL;
      }

      uint64_t v23 = v64;
      goto LABEL_67;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v28 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v71 = "nw_endpoint_handler_create_with_path_evaluator";
    v62 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v68 = 0;
    os_log_type_t v29 = (char *)v62;
    if ((__nwlog_fault(v62, &type, &v68) & 1) == 0)
    {
LABEL_47:
      if (v29) {
        free(v29);
      }
      goto LABEL_49;
    }

    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v30 = (os_log_s *)(id)gLogObj;
      v31 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v71 = "nw_endpoint_handler_create_with_path_evaluator";
        _os_log_impl( &dword_181A5C000,  v30,  v31,  "%{public}s [nw_endpoint_handler initWithEndpoint:parameters:] failed",  buf,  0xCu);
      }
    }

    else if (v68)
    {
      v35 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v30 = (os_log_s *)(id)gLogObj;
      BOOL v61 = type;
      id v36 = os_log_type_enabled(v30, type);
      if (v35)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v71 = "nw_endpoint_handler_create_with_path_evaluator";
          v72 = 2082;
          *(void *)__uint64_t v73 = v35;
          _os_log_impl( &dword_181A5C000,  v30,  v61,  "%{public}s [nw_endpoint_handler initWithEndpoint:parameters:] failed, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v35);
        goto LABEL_46;
      }

      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v71 = "nw_endpoint_handler_create_with_path_evaluator";
        _os_log_impl( &dword_181A5C000,  v30,  v61,  "%{public}s [nw_endpoint_handler initWithEndpoint:parameters:] failed, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v30 = (os_log_s *)(id)gLogObj;
      v38 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v71 = "nw_endpoint_handler_create_with_path_evaluator";
        _os_log_impl( &dword_181A5C000,  v30,  v38,  "%{public}s [nw_endpoint_handler initWithEndpoint:parameters:] failed, backtrace limit exceeded",  buf,  0xCu);
      }
    }

LABEL_46:
    os_log_type_t v29 = (char *)v62;
    goto LABEL_47;
  }

  uint64_t v23 = 0LL;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  __int16 v24 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  os_log_type_t v71 = "nw_connection_create_with_client_id";
  v25 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  v68 = 0;
  if (__nwlog_fault(v25, &type, &v68))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v26 = (os_log_s *)(id)gLogObj;
      id v27 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v71 = "nw_connection_create_with_client_id";
        _os_log_impl( &dword_181A5C000,  v26,  v27,  "%{public}s [nw_connection initWithEndpoint:parameters:] failed",  buf,  0xCu);
      }
    }

    else if (v68)
    {
      os_log_type_t v32 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v26 = (os_log_s *)(id)gLogObj;
      BOOL v33 = type;
      dispatch_workloop_t v34 = os_log_type_enabled(v26, type);
      if (v32)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v71 = "nw_connection_create_with_client_id";
          v72 = 2082;
          *(void *)__uint64_t v73 = v32;
          _os_log_impl( &dword_181A5C000,  v26,  v33,  "%{public}s [nw_connection initWithEndpoint:parameters:] failed, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v32);
        if (!v25) {
          goto LABEL_39;
        }
        goto LABEL_38;
      }

      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v71 = "nw_connection_create_with_client_id";
        _os_log_impl( &dword_181A5C000,  v26,  v33,  "%{public}s [nw_connection initWithEndpoint:parameters:] failed, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v26 = (os_log_s *)(id)gLogObj;
      v37 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v71 = "nw_connection_create_with_client_id";
        _os_log_impl( &dword_181A5C000,  v26,  v37,  "%{public}s [nw_connection initWithEndpoint:parameters:] failed, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

  if (v25) {
LABEL_38:
  }
    free(v25);
LABEL_39:
  v22 = 0LL;
LABEL_67:

LABEL_68:
  v45 = v67;
LABEL_69:

  return v22;
}

  [MEMORY[0x189607968] numberWithBool:self->_useP2P];
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  [v4 setObject:v69 forKey:@"useP2P"];

  has = (__int16)self->_has;
  if ((has & 0x1000) == 0)
  {
LABEL_23:
    if ((has & 0x200) == 0) {
      goto LABEL_24;
    }
    goto LABEL_104;
  }

  if (v32) {
    free(v32);
  }
  return v9;
}

    free(backtrace_string);
    goto LABEL_121;
  }

  os_log_type_t v11 = *((_DWORD *)v7 + 38);
  if (!v11) {
    goto LABEL_123;
  }
  if (v11 != 4)
  {
    os_log_type_t v13 = v9;
    BOOL v14 = v13[12];

    if ((v14 & 0x8000) == 0)
    {
      os_log_type_t v15 = v13;
      int v16 = v15[19];

      if ((*((_DWORD *)v7 + 38) & 0xFFFFFFFE) == 2)
      {
        id v17 = (id)g_tcp_definition;
        id v18 = nw_protocol_stack_includes_protocol(v16, v17);

        if ((v18 & 1) == 0) {
          goto LABEL_62;
        }
      }

      char v19 = (void *)*((void *)v7 + 3);
      if (v19)
      {
        *(void *)buf = 0LL;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x2020000000LL;
        v82 = 0;
        applier[0] = MEMORY[0x1895F87A8];
        applier[1] = 3221225472LL;
        applier[2] = __nw_proxy_config_supports_connection_block_invoke;
        applier[3] = &unk_189BC52A8;
        applier[4] = v16;
        applier[5] = buf;
        xpc_array_apply(v19, applier);
        char v20 = *(unsigned __int8 *)(*(void *)&buf[8] + 24LL);
        _Block_object_dispose(buf, 8);
        if (v20) {
          goto LABEL_62;
        }
      }

      if (*((_DWORD *)v7 + 38) != 1)
      {
LABEL_28:
        if (*((_DWORD *)v7 + 39) == 3005)
        {
          if (v10)
          {
            v31 = (nw_interface *)v10[12];
            os_log_type_t v32 = v31;
            if (v31 && nw_interface_get_type(v31) == nw_interface_type_other)
            {

              goto LABEL_62;
            }
          }
        }

        BOOL v33 = v8;
        dispatch_workloop_t v34 = [v33 type];

        if ((v34 - 3) <= 0xFFFFFFFD)
        {
          os_log_type_t v12 = 0LL;
          if ((*((_BYTE *)v7 + 170) & 0x10) == 0 || v34 != 3) {
            goto LABEL_63;
          }
        }

        if ((*((_BYTE *)v7 + 170) & 0x20) == 0)
        {
          if ((*((_BYTE *)v7 + 170) & 0x80) != 0 && v34 == 2)
          {
            hostname = nw_endpoint_get_hostname((nw_endpoint_t)v33);
            if (hostname)
            {
              if (!strchr(hostname, 46)) {
                goto LABEL_62;
              }
            }
          }

                __nwlog_obj();
                *(_DWORD *)os_log_type_t type = 136446210;
                v114 = "nw_http1_match_idle_connection_with_pending_stream_async";
                v72 = (char *)_os_log_send_and_compose_impl();
                v107 = OS_LOG_TYPE_ERROR;
                v106 = 0;
                if (v107 == OS_LOG_TYPE_FAULT)
                {
                  __uint64_t v73 = (os_log_s *)__nwlog_obj();
                  unint64_t v74 = v107;
                  if (!os_log_type_enabled(v73, v107)) {
                    goto LABEL_212;
                  }
                  *(_DWORD *)os_log_type_t type = 136446210;
                  v114 = "nw_http1_match_idle_connection_with_pending_stream_async";
                  char v75 = "%{public}s called with null http1";
LABEL_210:
                  char v105 = (uint8_t *)type;
                  goto LABEL_211;
                }

                if (!v106)
                {
                  __uint64_t v73 = (os_log_s *)__nwlog_obj();
                  unint64_t v74 = v107;
                  if (!os_log_type_enabled(v73, v107)) {
                    goto LABEL_212;
                  }
                  *(_DWORD *)os_log_type_t type = 136446210;
                  v114 = "nw_http1_match_idle_connection_with_pending_stream_async";
                  char v75 = "%{public}s called with null http1, backtrace limit exceeded";
                  goto LABEL_210;
                }

                v95 = (char *)__nw_create_backtrace_string();
                __uint64_t v73 = (os_log_s *)__nwlog_obj();
                unint64_t v74 = v107;
                v96 = os_log_type_enabled(v73, v107);
                if (!v95)
                {
                  if (!v96) {
                    goto LABEL_212;
                  }
                  *(_DWORD *)os_log_type_t type = 136446210;
                  v114 = "nw_http1_match_idle_connection_with_pending_stream_async";
                  char v75 = "%{public}s called with null http1, no backtrace";
                  goto LABEL_210;
                }

                if (v96)
                {
                  *(_DWORD *)os_log_type_t type = 136446466;
                  v114 = "nw_http1_match_idle_connection_with_pending_stream_async";
                  uint64_t v115 = 2082;
                  v116 = v95;
                  os_log_type_t v97 = "%{public}s called with null http1, dumping backtrace:%{public}s";
LABEL_181:
                  v99 = (uint8_t *)type;
LABEL_182:
                  _os_log_impl(&dword_181A5C000, v73, v74, v97, v99, 0x16u);
                  goto LABEL_183;
                }

                goto LABEL_183;
              }

              goto LABEL_165;
            }

            if ((*(_BYTE *)(v9 + 158) & 1) != 0 || !gLogDatapath) {
              goto LABEL_81;
            }
LABEL_54:
            v51 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
            {
              os_log_type_t v52 = *(void *)(v9 + 488);
              v53 = *(_DWORD *)(*(void *)(v9 + 480) + 372LL);
              BOOL v54 = *(_DWORD *)(v9 + 860);
              if (v52) {
                LODWORD(v52) = *(_DWORD *)(v52 + 424);
              }
              *(_DWORD *)buf = 136447490;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v9 + 74;
              *(_WORD *)&buf[22] = 2080;
              __int16 v109 = (uint64_t)" ";
              *(_WORD *)__uint64_t v110 = 1024;
              *(_DWORD *)&v110[2] = v53;
              *(_WORD *)&v110[6] = 1024;
              *(_DWORD *)&v110[8] = v54;
              LOWORD(v111) = 1024;
              *(_DWORD *)((char *)&v111 + 2) = v52;
              _os_log_impl( &dword_181A5C000,  v51,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> Connection already marked as not-reusable, ignoring",  buf,  0x32u);
            }

            goto LABEL_81;
          }

          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
          v72 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          v107 = OS_LOG_TYPE_DEFAULT;
          if (type[0] != OS_LOG_TYPE_FAULT)
          {
            if (v107)
            {
              v82 = (char *)__nw_create_backtrace_string();
              __uint64_t v73 = (os_log_s *)__nwlog_obj();
              unint64_t v74 = type[0];
              os_log_type_t v83 = os_log_type_enabled(v73, type[0]);
              if (v82)
              {
                if (v83)
                {
                  *(_DWORD *)buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v82;
                  _os_log_impl( &dword_181A5C000,  v73,  v74,  "%{public}s called with null http1, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                free(v82);
LABEL_212:
                if (!v72) {
                  goto LABEL_81;
                }
LABEL_213:
                free(v72);
                goto LABEL_81;
              }

          goto LABEL_103;
        }

        if (!v59)
        {
          __nwlog_obj();
          char v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v56 = type;
          if (os_log_type_enabled(v43, type))
          {
            *(_DWORD *)buf = 136446466;
            v62 = "nw_nat64_get_interface_state_internal";
            os_log_type_t v63 = 1024;
            *(_DWORD *)os_log_type_t v64 = v4;
            _os_log_impl( &dword_181A5C000,  v43,  v56,  "%{public}s nw_path_create_evaluator_for_endpoint, ifindex=%u failed, backtrace limit exceeded",  buf,  0x12u);
          }

          goto LABEL_102;
        }

        v48 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        char v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v49 = type;
        v50 = os_log_type_enabled(v43, type);
        if (!v48)
        {
          if (v50)
          {
            *(_DWORD *)buf = 136446466;
            v62 = "nw_nat64_get_interface_state_internal";
            os_log_type_t v63 = 1024;
            *(_DWORD *)os_log_type_t v64 = v4;
            _os_log_impl( &dword_181A5C000,  v43,  v49,  "%{public}s nw_path_create_evaluator_for_endpoint, ifindex=%u failed, no backtrace",  buf,  0x12u);
          }

          goto LABEL_102;
        }

        if (v50)
        {
          *(_DWORD *)buf = 136446722;
          v62 = "nw_nat64_get_interface_state_internal";
          os_log_type_t v63 = 1024;
          *(_DWORD *)os_log_type_t v64 = v4;
          v64[2] = 2082;
          *(void *)&v64[3] = v48;
          _os_log_impl( &dword_181A5C000,  v43,  v49,  "%{public}s nw_path_create_evaluator_for_endpoint, ifindex=%u failed, dumping backtrace:%{public}s",  buf,  0x1Cu);
        }

        free(v48);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v29 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v62 = "nw_nat64_get_interface_state_internal";
      os_log_type_t v30 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v59 = 0;
      if (__nwlog_fault(v30, &type, &v59))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v31 = (os_log_s *)(id)gLogObj;
          os_log_type_t v32 = type;
          if (os_log_type_enabled(v31, type))
          {
            *(_DWORD *)buf = 136446210;
            v62 = "nw_nat64_get_interface_state_internal";
            _os_log_impl(&dword_181A5C000, v31, v32, "%{public}s nw_parameters_create failed", buf, 0xCu);
          }
        }

        else if (v59)
        {
          v45 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v46 = type;
          os_log_type_t v47 = os_log_type_enabled(v31, type);
          if (v45)
          {
            if (v47)
            {
              *(_DWORD *)buf = 136446466;
              v62 = "nw_nat64_get_interface_state_internal";
              os_log_type_t v63 = 2082;
              *(void *)os_log_type_t v64 = v45;
              _os_log_impl( &dword_181A5C000,  v31,  v46,  "%{public}s nw_parameters_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v45);
            if (!v30) {
              goto LABEL_105;
            }
            goto LABEL_104;
          }

          if (v47)
          {
            *(_DWORD *)buf = 136446210;
            v62 = "nw_nat64_get_interface_state_internal";
            _os_log_impl(&dword_181A5C000, v31, v46, "%{public}s nw_parameters_create failed, no backtrace", buf, 0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          BOOL v54 = type;
          if (os_log_type_enabled(v31, type))
          {
            *(_DWORD *)buf = 136446210;
            v62 = "nw_nat64_get_interface_state_internal";
            _os_log_impl( &dword_181A5C000,  v31,  v54,  "%{public}s nw_parameters_create failed, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }
    }

                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  BOOL v66 = (os_log_s *)(id)gLogObj;
                  if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136446466;
                    v171 = "nw_path_create_assign_message_internal";
                    v172 = 2112;
                    *(void *)v173 = v52;
                    _os_log_impl( &dword_181A5C000,  v66,  OS_LOG_TYPE_DEBUG,  "%{public}s Serialized peer protocol %@",  buf,  0x16u);
                  }

                  v51 = v163;
                  os_log_type_t v67 = v162;
                  if (!v162) {
                    goto LABEL_142;
                  }
                  goto LABEL_141;
                }

                if (v62)
                {
                  *(_DWORD *)buf = 136447490;
                  v171 = "nw_necp_append_tlv";
                  v172 = 2048;
                  *(void *)v173 = v35;
                  *(_WORD *)&v173[8] = 2048;
                  *(void *)&v173[10] = 47LL;
                  *(_WORD *)&v173[18] = 2048;
                  *(void *)v174 = v22;
                  *(_WORD *)&v174[8] = 1024;
                  *(_DWORD *)v175 = 222;
                  *(_WORD *)&v175[4] = 1024;
                  *(_DWORD *)&v175[6] = 42;
                  _os_log_impl( &dword_181A5C000,  v60,  v61,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace",  buf,  0x36u);
                }

    if (v35) {
      free(v35);
    }

    goto LABEL_67;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  char v19 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v81 = "nw_path_copy_path_for_tlv";
  char v20 = (char *)_os_log_send_and_compose_impl();

  v79[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(obj) = 0;
  if (__nwlog_fault(v20, v79, &obj))
  {
    if (v79[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v21 = (os_log_s *)(id)gLogObj;
      v22 = v79[0];
      if (os_log_type_enabled(v21, v79[0]))
      {
        *(_DWORD *)buf = 136446210;
        v81 = "nw_path_copy_path_for_tlv";
        _os_log_impl(&dword_181A5C000, v21, v22, "%{public}s nw_parameters_create failed", buf, 0xCu);
      }
    }

    else if ((_BYTE)obj)
    {
      v25 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v21 = (os_log_s *)(id)gLogObj;
      os_log_type_t v26 = v79[0];
      id v27 = os_log_type_enabled(v21, v79[0]);
      if (v25)
      {
        if (v27)
        {
          *(_DWORD *)buf = 136446466;
          v81 = "nw_path_copy_path_for_tlv";
          v82 = 2082;
          os_log_type_t v83 = v25;
          _os_log_impl( &dword_181A5C000,  v21,  v26,  "%{public}s nw_parameters_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v25);
        if (!v20) {
          goto LABEL_61;
        }
        goto LABEL_60;
      }

      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        v81 = "nw_path_copy_path_for_tlv";
        _os_log_impl(&dword_181A5C000, v21, v26, "%{public}s nw_parameters_create failed, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v21 = (os_log_s *)(id)gLogObj;
      os_log_type_t v32 = v79[0];
      if (os_log_type_enabled(v21, v79[0]))
      {
        *(_DWORD *)buf = 136446210;
        v81 = "nw_path_copy_path_for_tlv";
        _os_log_impl( &dword_181A5C000,  v21,  v32,  "%{public}s nw_parameters_create failed, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

  if (v20) {
LABEL_60:
  }
    free(v20);
LABEL_61:
  browse = 0LL;
LABEL_69:

LABEL_70:
  return browse;
}

      goto LABEL_28;
    }

    if (v54 == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v48 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v52 = type[0];
      if (os_log_type_enabled(v48, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v57 = "nw_path_report_error_to_agent";
        _os_log_impl( &dword_181A5C000,  v48,  v52,  "%{public}s nw_path_create_necp_agent_error failed, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_102;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v48 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v50 = type[0];
    v51 = os_log_type_enabled(v48, type[0]);
    if (!backtrace_string)
    {
      if (v51)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v57 = "nw_path_report_error_to_agent";
        _os_log_impl( &dword_181A5C000,  v48,  v50,  "%{public}s nw_path_create_necp_agent_error failed, no backtrace",  buf,  0xCu);
      }

      goto LABEL_102;
    }

    if (v51)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v57 = "nw_path_report_error_to_agent";
      v58 = 2082;
      *(void *)v59 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v48,  v50,  "%{public}s nw_path_create_necp_agent_error failed, dumping backtrace:%{public}s",  buf,  0x16u);
    }

LABEL_61:
    free(backtrace_string);
    goto LABEL_28;
  }

  __break(1u);
  return result;
}

                goto LABEL_103;
              }

              __nwlog_obj();
              v151 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 136446210;
              v219 = "nw_endpoint_handler_get_logging_disabled";
              v152 = (char *)_os_log_send_and_compose_impl();

              type[0] = OS_LOG_TYPE_ERROR;
              LOBYTE(v214) = 0;
              if (__nwlog_fault(v152, type, &v214))
              {
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v153 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  v154 = type[0];
                  if (os_log_type_enabled(v153, type[0]))
                  {
                    *(_DWORD *)buf = 136446210;
                    v219 = "nw_endpoint_handler_get_logging_disabled";
                    _os_log_impl(&dword_181A5C000, v153, v154, "%{public}s called with null handler", buf, 0xCu);
                  }
                }

                else if ((_BYTE)v214)
                {
                  backtrace_string = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v153 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  v189 = type[0];
                  v190 = os_log_type_enabled(v153, type[0]);
                  if (backtrace_string)
                  {
                    if (v190)
                    {
                      *(_DWORD *)buf = 136446466;
                      v219 = "nw_endpoint_handler_get_logging_disabled";
                      v220 = 2082;
                      v221 = backtrace_string;
                      _os_log_impl( &dword_181A5C000,  v153,  v189,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
                    }

                    free(backtrace_string);
                    goto LABEL_279;
                  }

                  if (v190)
                  {
                    *(_DWORD *)buf = 136446210;
                    v219 = "nw_endpoint_handler_get_logging_disabled";
                    _os_log_impl( &dword_181A5C000,  v153,  v189,  "%{public}s called with null handler, no backtrace",  buf,  0xCu);
                  }
                }

                else
                {
                  __nwlog_obj();
                  v153 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  v196 = type[0];
                  if (os_log_type_enabled(v153, type[0]))
                  {
                    *(_DWORD *)buf = 136446210;
                    v219 = "nw_endpoint_handler_get_logging_disabled";
                    _os_log_impl( &dword_181A5C000,  v153,  v196,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
                  }
                }
              }

    LODWORD(v52) = v52 | 0x400;
    if (a15)
    {
LABEL_89:
      LODWORD(v52) = v52 | 0x100;
      if (!a16) {
        goto LABEL_90;
      }
      goto LABEL_104;
    }

      free(backtrace_string);
      goto LABEL_128;
    }

    os_log_type_t v41 = (os_log_s *)__nwlog_obj();
    BOOL v42 = type;
    if (!os_log_type_enabled(v41, type)) {
      goto LABEL_128;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v63 = "nw_protocol_test_connect";
    char v43 = "%{public}s called with null protocol";
LABEL_127:
    _os_log_impl(&dword_181A5C000, v41, v42, v43, buf, 0xCu);
LABEL_128:
    if (v40) {
      free(v40);
    }
    return 0LL;
  }

  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v63 = "nw_protocol_test_connect";
    v40 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v60 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v41 = (os_log_s *)__nwlog_obj();
      BOOL v42 = type;
      if (!os_log_type_enabled(v41, type)) {
        goto LABEL_128;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v63 = "nw_protocol_test_connect";
      char v43 = "%{public}s called with null test";
      goto LABEL_127;
    }

    if (!v60)
    {
      os_log_type_t v41 = (os_log_s *)__nwlog_obj();
      BOOL v42 = type;
      if (!os_log_type_enabled(v41, type)) {
        goto LABEL_128;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v63 = "nw_protocol_test_connect";
      char v43 = "%{public}s called with null test, backtrace limit exceeded";
      goto LABEL_127;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v41 = (os_log_s *)__nwlog_obj();
    BOOL v42 = type;
    uint64_t v55 = os_log_type_enabled(v41, type);
    if (backtrace_string)
    {
      if (v55)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v63 = "nw_protocol_test_connect";
        os_log_type_t v64 = 2082;
        os_log_type_t v65 = (nw_protocol *)backtrace_string;
        BOOL v54 = "%{public}s called with null test, dumping backtrace:%{public}s";
        goto LABEL_101;
      }

      goto LABEL_102;
    }

    if (!v55) {
      goto LABEL_128;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v63 = "nw_protocol_test_connect";
    char v43 = "%{public}s called with null test, no backtrace";
    goto LABEL_127;
  }

  if ((BYTE1(a1[1].output_handler) & 0xC) != 0)
  {
    if (gLogDatapath)
    {
      dispatch_workloop_t v44 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v63 = "nw_protocol_test_connect";
        os_log_type_t v64 = 2082;
        os_log_type_t v65 = a1 + 2;
        _os_log_impl( &dword_181A5C000,  v44,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s Returning connected immediately for test protocol",  buf,  0x16u);
      }
    }

    default_input_handler = a1->default_input_handler;
    if (default_input_handler)
    {
      handle = default_input_handler->handle;
      if (handle == &nw_protocol_ref_counted_handle)
      {
        callbacks = default_input_handler[1].callbacks;
        if (callbacks) {
          default_input_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
        }
      }

      id v6 = a1->handle;
      if (v6 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v7 = a1[1].callbacks;
        if (v7) {
          a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v7->add_input_handler + 1);
        }
      }

      char v8 = default_input_handler->callbacks;
      if (v8)
      {
        connected = (void (*)(nw_protocol *, nw_protocol *))v8->connected;
        if (connected)
        {
          connected(default_input_handler, a1);
          goto LABEL_15;
        }
      }

      __nwlog_obj();
      name = default_input_handler->identifier->name;
      *(_DWORD *)buf = 136446722;
      os_log_type_t v63 = "__nw_protocol_connected";
      if (!name) {
        name = "invalid";
      }
      os_log_type_t v64 = 2082;
      os_log_type_t v65 = (nw_protocol *)name;
      BOOL v66 = 2048;
      os_log_type_t v67 = default_input_handler;
      v35 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      os_log_type_t v60 = 0;
      if (__nwlog_fault(v35, &type, &v60))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          id v36 = (os_log_s *)__nwlog_obj();
          v37 = type;
          if (!os_log_type_enabled(v36, type)) {
            goto LABEL_121;
          }
          v38 = default_input_handler->identifier->name;
          if (!v38) {
            v38 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          os_log_type_t v63 = "__nw_protocol_connected";
          os_log_type_t v64 = 2082;
          os_log_type_t v65 = (nw_protocol *)v38;
          BOOL v66 = 2048;
          os_log_type_t v67 = default_input_handler;
          os_log_type_t v39 = "%{public}s protocol %{public}s (%p) has invalid connected callback";
          goto LABEL_120;
        }

        if (!v60)
        {
          id v36 = (os_log_s *)__nwlog_obj();
          v37 = type;
          if (!os_log_type_enabled(v36, type)) {
            goto LABEL_121;
          }
          v58 = default_input_handler->identifier->name;
          if (!v58) {
            v58 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          os_log_type_t v63 = "__nw_protocol_connected";
          os_log_type_t v64 = 2082;
          os_log_type_t v65 = (nw_protocol *)v58;
          BOOL v66 = 2048;
          os_log_type_t v67 = default_input_handler;
          os_log_type_t v39 = "%{public}s protocol %{public}s (%p) has invalid connected callback, backtrace limit exceeded";
          goto LABEL_120;
        }

        id v49 = (char *)__nw_create_backtrace_string();
        id v36 = (os_log_s *)__nwlog_obj();
        v37 = type;
        v50 = os_log_type_enabled(v36, type);
        if (v49)
        {
          if (v50)
          {
            v51 = default_input_handler->identifier->name;
            if (!v51) {
              v51 = "invalid";
            }
            *(_DWORD *)buf = 136446978;
            os_log_type_t v63 = "__nw_protocol_connected";
            os_log_type_t v64 = 2082;
            os_log_type_t v65 = (nw_protocol *)v51;
            BOOL v66 = 2048;
            os_log_type_t v67 = default_input_handler;
            v68 = 2082;
            v69 = v49;
            _os_log_impl( &dword_181A5C000,  v36,  v37,  "%{public}s protocol %{public}s (%p) has invalid connected callback, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v49);
          goto LABEL_121;
        }

        if (v50)
        {
          v59 = default_input_handler->identifier->name;
          if (!v59) {
            v59 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          os_log_type_t v63 = "__nw_protocol_connected";
          os_log_type_t v64 = 2082;
          os_log_type_t v65 = (nw_protocol *)v59;
          BOOL v66 = 2048;
          os_log_type_t v67 = default_input_handler;
          os_log_type_t v39 = "%{public}s protocol %{public}s (%p) has invalid connected callback, no backtrace";
LABEL_120:
          _os_log_impl(&dword_181A5C000, v36, v37, v39, buf, 0x20u);
        }
      }

LABEL_203:
  __break(1u);
}

    _os_log_impl(&dword_181A5C000, v100, v101, v102, buf, 0xCu);
  }

            if (v85) {
              free(v85);
            }
            id v36 = 0LL;
            if (v94 != &nw_protocol_ref_counted_handle) {
              goto LABEL_187;
            }
            goto LABEL_79;
          }

          if (a2 == 254)
          {
            __int16 v24 = (void *)a1[4];
            if (v24 && (v25 = v24[3]) != 0 && (os_log_type_t v26 = *(uint64_t (**)(void))(v25 + 224)) != 0LL)
            {
              id v27 = (void *)v24[5];
              if (v27 == &nw_protocol_ref_counted_handle)
              {
                char v43 = v24[11];
                if (v43) {
                  v24[11] = v43 + 1;
                }
                os_log_type_t v28 = -1;
              }

              else
              {
                os_log_type_t v28 = 0;
              }

              *(void *)buf = v24;
              buf[8] = v28;
              id v36 = v26();
              if (v27 == &nw_protocol_ref_counted_handle) {
                nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
              }
              v37 = *(uint64_t (**)(char *))(*(void *)(*((void *)v9 + 1) + 80LL) + 184LL);
              if (!v37) {
                goto LABEL_187;
              }
            }

            else
            {
              id v36 = 0LL;
              v37 = (uint64_t (*)(char *))v11[23];
              if (!v37) {
                goto LABEL_187;
              }
            }

            dispatch_workloop_t v44 = (void *)v37(v9);
            if (v44)
            {
              if (!v36) {
                id v36 = nw_array_create();
              }
              nw_array_append(v36, v44);
            }

            goto LABEL_187;
          }

          if (a2 != 255) {
            goto LABEL_35;
          }
          if (!a3)
          {
            if (v8[32])
            {
              v38 = nw_array_create();
              nw_array_append(v38, *((void **)v9 + 32));
              goto LABEL_109;
            }

            goto LABEL_84;
          }

          if (*(_DWORD *)(v10 + 64) != 3)
          {
LABEL_84:
            os_log_type_t v47 = (void *)a1[4];
            if (v47 && (v48 = v47[3]) != 0 && (id v49 = *(uint64_t (**)(void))(v48 + 224)) != 0LL)
            {
              v50 = (void *)v47[5];
              if (v50 == &nw_protocol_ref_counted_handle)
              {
                os_log_type_t v52 = v47[11];
                if (v52) {
                  v47[11] = v52 + 1;
                }
                v51 = -1;
              }

              else
              {
                v51 = 0;
              }

              *(void *)buf = v47;
              buf[8] = v51;
              v38 = v49();
              if (v50 == &nw_protocol_ref_counted_handle) {
                nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
              }
            }

            else
            {
              v38 = 0LL;
            }

            id v18 = -1LL;
            os_log_type_t v46 = 1;
LABEL_96:
            v53 = *(uint64_t (**)(char *, uint64_t))(*(void *)(*((void *)v9 + 1) + 80LL) + 176LL);
            if (v53)
            {
              BOOL v54 = (void *)v53(v9, -1LL);
              if (v54)
              {
                if (!v38) {
                  v38 = nw_array_create();
                }
                nw_array_append(v38, v54);
              }

              uint64_t v55 = *(uint64_t (**)(char *, uint64_t))(*(void *)(*((void *)v9 + 1) + 80LL) + 176LL);
              if ((v46 & 1) != 0)
              {
                v56 = (void *)v55(v9, -2LL);
                if (!v56) {
                  goto LABEL_108;
                }
              }

              else
              {
                v56 = (void *)v55(v9, v18);
                if (!v56)
                {
LABEL_108:

                  goto LABEL_109;
                }
              }

              if (!v38) {
                v38 = nw_array_create();
              }
              nw_array_append(v38, v56);
              goto LABEL_108;
            }

                v132 = *v7++;
                v131 = v132;
                v16 += (unint64_t)(v132 & 0x7F) << v17;
                v17 += 7;
              }

              while ((v132 & 0x80) != 0);
              if (v17 >= 0x40)
              {
                v155 = 3731;
                if (v16 > -1 || v131 > 1) {
                  v157 = v10;
                }
                else {
                  v157 = v7;
                }
                v161 = 3731;
LABEL_314:
                if (v17 == 70) {
                  os_log_type_t v10 = v157;
                }
                else {
                  v161 = v155;
                }
                goto LABEL_349;
              }

              v161 = 3731;
              goto LABEL_348;
            }

      goto LABEL_78;
    }

    if (!v150)
    {
      __nwlog_obj();
      v106 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v126 = type;
      if (os_log_type_enabled(v106, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl( &dword_181A5C000,  v106,  v126,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_203;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v121 = type;
    v122 = os_log_type_enabled(v46, type);
    if (backtrace_string)
    {
      if (v122)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        v153 = 2082;
        v154 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v46,  v121,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_187;
    }

    if (v122)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
      _os_log_impl(&dword_181A5C000, v46, v121, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
    }

    goto LABEL_220;
  }

  os_unfair_lock_lock((os_unfair_lock_t)&nw_protocol_registrar_lock);
  os_log_type_t v28 = &g_registration_list;
  do
  {
    os_log_type_t v28 = (uint64_t *)*v28;
    if (!v28)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_registrar_lock);
      goto LABEL_39;
    }
  }

  while (*(void *)identifier != v28[4]
       || *((void *)identifier + 1) != v28[5]
       || *((void *)identifier + 2) != v28[6]
       || *((void *)identifier + 3) != v28[7]
       || *((void *)identifier + 4) != v28[8]);
  BOOL v33 = v28[13];
  os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_registrar_lock);
  if (!v33)
  {
LABEL_39:
    if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v26) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      os_log_type_t v39 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
      {
        v40 = nw_endpoint_handler_get_id_string(v26);
        v138 = nw_endpoint_handler_dry_run_string(v26);
        os_log_type_t v41 = nw_endpoint_handler_copy_endpoint(v26);
        v136 = nw_endpoint_get_logging_description(v41);
        BOOL v42 = nw_endpoint_handler_state_string(v26);
        char v43 = nw_endpoint_handler_mode_string(v26);
        dispatch_workloop_t v44 = nw_endpoint_handler_copy_current_path(v26);
        *(_DWORD *)buf = 136448258;
        *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
        v153 = 2082;
        v154 = (void *)v40;
        v155 = 2082;
        v156 = v138;
        v157 = 2082;
        v158 = (void *)v136;
        v159 = 2082;
        v160 = v42;
        v161 = 2082;
        v162 = v43;
        v163 = 2114;
        v164 = v44;
        v165 = 2080;
        v166 = identifier;
        v167 = 2048;
        v168 = (uint64_t)identifier;
        _os_log_impl( &dword_181A5C000,  v39,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] protocol %s (%p) does not hav e accept function, cannot search for protocol to join",  buf,  0x5Cu);
      }
    }

    goto LABEL_80;
  }

  dispatch_workloop_t v34 = v143;
  v35 = v34;
  while (1)
  {
    char v20 = nw_protocol_instance_registrar_search_for_instance_to_join( (uint64_t)identifier,  -1LL,  v141,  v35,  v34,  v145,  v21 != 0);
    if (v20) {
      break;
    }
    registered_endpoint = nw_protocol_instance_registrar_copy_next_registered_endpoint(v35, v21 != 0);

    v35 = registered_endpoint;
    if (!registered_endpoint)
    {
      char v20 = 0LL;
      goto LABEL_61;
    }
  }

  if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v26) & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    v127 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v127, OS_LOG_TYPE_DEBUG))
    {
      v139 = nw_endpoint_handler_get_id_string(v26);
      v137 = nw_endpoint_handler_dry_run_string(v26);
      v128 = nw_endpoint_handler_copy_endpoint(v26);
      v135 = nw_endpoint_get_logging_description(v128);
      v129 = nw_endpoint_handler_state_string(v26);
      v130 = nw_endpoint_handler_mode_string(v26);
      v131 = nw_endpoint_handler_copy_current_path(v26);
      v132 = v131;
      *(void *)&uint8_t buf[4] = "nw_endpoint_flow_find_protocol_to_join";
      v133 = "invalid";
      v134 = *(const char **)(v20 + 16);
      *(_DWORD *)buf = 136448258;
      if (v134) {
        v133 = v134;
      }
      v153 = 2082;
      v154 = (void *)v139;
      v155 = 2082;
      v156 = v137;
      v157 = 2082;
      v158 = (void *)v135;
      v159 = 2082;
      v160 = v129;
      v161 = 2082;
      v162 = v130;
      v163 = 2114;
      v164 = v131;
      v165 = 2080;
      v166 = (void *)v133;
      v167 = 2048;
      v168 = v20;
      _os_log_impl( &dword_181A5C000,  v127,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] returning protocol to join %s (%p)",  buf,  0x5Cu);
    }
  }

void sub_181A69804(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_DWORD *nw_activity_create(int a1, int a2)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  uint64_t v4 = objc_alloc(&OBJC_CLASS___NWConcrete_nw_activity);
  if (!v4) {
    return 0LL;
  }
  v29.receiver = v4;
  v29.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_activity;
  char v5 = objc_msgSendSuper2(&v29, sel_init);
  id v6 = v5;
  if (!v5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v11 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(void *)v31 = "-[NWConcrete_nw_activity initWithDomain:label:]";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if ((__nwlog_fault(v12, &type, &v27) & 1) != 0)
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v13 = (os_log_s *)(id)gLogObj;
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)v31 = "-[NWConcrete_nw_activity initWithDomain:label:]";
          _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s [super init] failed", buf, 0xCu);
        }
      }

      else if (v27)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v13 = (os_log_s *)(id)gLogObj;
        os_log_type_t v20 = type;
        BOOL v21 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v21)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)v31 = "-[NWConcrete_nw_activity initWithDomain:label:]";
            *(_WORD *)&v31[8] = 2082;
            os_log_type_t v32 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v13,  v20,  "%{public}s [super init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_40;
        }

        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)v31 = "-[NWConcrete_nw_activity initWithDomain:label:]";
          _os_log_impl(&dword_181A5C000, v13, v20, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v13 = (os_log_s *)(id)gLogObj;
        os_log_type_t v25 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)v31 = "-[NWConcrete_nw_activity initWithDomain:label:]";
          _os_log_impl( &dword_181A5C000,  v13,  v25,  "%{public}s [super init] failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

LABEL_40:
    if (v12) {
      free(v12);
    }
    return 0LL;
  }

  v5[28] = a2;
  v5[29] = a1;
  *((_BYTE *)v5 + 140) &= ~2u;
  if (nw_activity_should_log(v5))
  {
    if (__nwlog_activity_log::onceToken != -1) {
      dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
    }
    uint64_t v7 = (os_log_s *)(id)gactivityLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = v6[28];
      int v8 = v6[29];
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v31 = v8;
      *(_WORD *)&v31[4] = 1024;
      *(_DWORD *)&v31[6] = v9;
      _os_log_impl(&dword_181A5C000, v7, OS_LOG_TYPE_DEFAULT, "Create activity <nw_activity %u:%u>", buf, 0xEu);
    }
  }

  if (!nw_activity_label_is_valid(a1, a2))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v15 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(void *)v31 = "-[NWConcrete_nw_activity initWithDomain:label:]";
    int v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (__nwlog_fault(v16, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v17 = (os_log_s *)(id)gLogObj;
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)v31 = "-[NWConcrete_nw_activity initWithDomain:label:]";
          _os_log_impl(&dword_181A5C000, v17, v18, "%{public}s Invalid domain or label specified", buf, 0xCu);
        }
      }

      else if (v27)
      {
        v22 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v17 = (os_log_s *)(id)gLogObj;
        os_log_type_t v23 = type;
        BOOL v24 = os_log_type_enabled(v17, type);
        if (v22)
        {
          if (v24)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)v31 = "-[NWConcrete_nw_activity initWithDomain:label:]";
            *(_WORD *)&v31[8] = 2082;
            os_log_type_t v32 = v22;
            _os_log_impl( &dword_181A5C000,  v17,  v23,  "%{public}s Invalid domain or label specified, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v22);
          goto LABEL_46;
        }

        if (v24)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)v31 = "-[NWConcrete_nw_activity initWithDomain:label:]";
          _os_log_impl( &dword_181A5C000,  v17,  v23,  "%{public}s Invalid domain or label specified, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v17 = (os_log_s *)(id)gLogObj;
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)v31 = "-[NWConcrete_nw_activity initWithDomain:label:]";
          _os_log_impl( &dword_181A5C000,  v17,  v26,  "%{public}s Invalid domain or label specified, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (v10) {
      free(v10);
    }
    int v8 = 0LL;
    goto LABEL_7;
  }

  if (((_BYTE)v1[17] & 8) != 0)
  {
    __nwlog_obj(v1, v2);
    id v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_context_copy_workloop";
    os_log_type_t v10 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v28 = 0;
    int v16 = __nwlog_fault(v10, &type, &v28);
    if ((_DWORD)v16)
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj(v16, v17);
        os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_context_copy_workloop";
          _os_log_impl(&dword_181A5C000, v13, v18, "%{public}s called with null !context->is_inline", buf, 0xCu);
        }

  if (v7) {
LABEL_41:
  }
    free(v7);
LABEL_42:
}

    goto LABEL_41;
  }

  if (v4)
  {
    if (uuid_is_null(v3 + 8) || (((uint64_t (**)(void, unsigned __int8 *))v5)[2](v5, v3 + 8) & 1) != 0)
    {
      id v6 = (void *)*((void *)v3 + 17);
      if (v6)
      {
        applier[0] = MEMORY[0x1895F87A8];
        applier[1] = 3221225472LL;
        applier[2] = __nw_parameters_iterate_parent_ids_block_invoke;
        applier[3] = &unk_189BC0F80;
        v22 = v5;
        xpc_array_apply(v6, applier);
      }
    }

    goto LABEL_7;
  }

  __nwlog_obj();
  id v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v26 = "nw_parameters_iterate_parent_ids";
  int v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v23 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_parameters_iterate_parent_ids";
      _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null iterator", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (!v23)
  {
    __nwlog_obj();
    int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_parameters_iterate_parent_ids";
      _os_log_impl( &dword_181A5C000,  v9,  v20,  "%{public}s called with null iterator, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_40;
  }

  int v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  id v17 = type;
  os_log_type_t v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_parameters_iterate_parent_ids";
      _os_log_impl(&dword_181A5C000, v9, v17, "%{public}s called with null iterator, no backtrace", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v26 = "nw_parameters_iterate_parent_ids";
    char v27 = 2082;
    os_log_type_t v28 = v16;
    _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s called with null iterator, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_42;
  }
LABEL_7:
}

          BOOL v21 = 1LL;
          if (v12) {
            goto LABEL_12;
          }
          goto LABEL_41;
        }
      }

      os_log_type_t v20 = 1LL;
      if (bonjour_service_domain) {
        goto LABEL_11;
      }
      goto LABEL_40;
    case 4u:
      url = nw_endpoint_get_url(v10);
      if (url) {
        sa_len = strlen(url) + 9;
      }
      else {
        sa_len = 9LL;
      }
      goto LABEL_50;
    case 6u:
      application_service_alias = (const char *)nw_endpoint_get_application_service_alias(v10);
      application_service_name = (const char *)nw_endpoint_get_application_service_name(v10);
      nw_endpoint_get_service_identifier(v10, buf);
      device_name = (const char *)nw_endpoint_get_device_name(v10);
      device_model = (const char *)nw_endpoint_get_device_model(v10);
      contact_id = (const char *)nw_endpoint_get_contact_id(v10);
      if (application_service_alias)
      {
        objc_super v29 = strlen(application_service_alias) + 9;
        if (application_service_name) {
          goto LABEL_18;
        }
      }

      else
      {
        objc_super v29 = 9LL;
        if (application_service_name)
        {
LABEL_18:
          os_log_type_t v30 = strlen(application_service_name) + 1;
          if (device_name) {
            goto LABEL_19;
          }
          goto LABEL_45;
        }
      }

      os_log_type_t v30 = 1LL;
      if (device_name)
      {
LABEL_19:
        v31 = strlen(device_name) + 1;
        if (device_model) {
          goto LABEL_20;
        }
        goto LABEL_46;
      }

    goto LABEL_41;
  }

  if (v4)
  {
    id v6 = v3[3];
    uint64_t v7 = v6;
    if (v6)
    {
      int v8 = v6;
      int v9 = [v8 type];

      os_log_type_t v10 = v3[28];
      if (v10)
      {
        applier[0] = MEMORY[0x1895F87A8];
        applier[1] = 3221225472LL;
        applier[2] = __nw_path_enumerate_resolve_options_block_invoke;
        applier[3] = &unk_189BC5230;
        char v27 = v9;
        os_log_type_t v26 = v5;
        xpc_dictionary_apply(v10, applier);
      }
    }

    goto LABEL_7;
  }

  __nwlog_obj();
  id v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v31 = "nw_path_enumerate_resolve_options";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v28 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    int v16 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      v31 = "nw_path_enumerate_resolve_options";
      _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null enumerate_block", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (!v28)
  {
    __nwlog_obj();
    os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v24 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      v31 = "nw_path_enumerate_resolve_options";
      _os_log_impl( &dword_181A5C000,  v13,  v24,  "%{public}s called with null enumerate_block, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_40;
  }

  os_log_type_t v20 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  BOOL v21 = type;
  v22 = os_log_type_enabled(v13, type);
  if (!v20)
  {
    if (v22)
    {
      *(_DWORD *)buf = 136446210;
      v31 = "nw_path_enumerate_resolve_options";
      _os_log_impl(&dword_181A5C000, v13, v21, "%{public}s called with null enumerate_block, no backtrace", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (v22)
  {
    *(_DWORD *)buf = 136446466;
    v31 = "nw_path_enumerate_resolve_options";
    os_log_type_t v32 = 2082;
    uint64_t v33 = v20;
    _os_log_impl( &dword_181A5C000,  v13,  v21,  "%{public}s called with null enumerate_block, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v20);
  if (v12) {
    goto LABEL_42;
  }
LABEL_7:
}

    goto LABEL_41;
  }

  if (!v48)
  {
    __nwlog_obj();
    os_log_type_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v47 = type;
    if (os_log_type_enabled(v26, type))
    {
      *(_DWORD *)buf = 136446210;
      v51 = "nw_endpoint_handler_set_protocol_instance";
      _os_log_impl( &dword_181A5C000,  v26,  v47,  "%{public}s called with null protocol_parameters, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_40;
  }

  char v43 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  dispatch_workloop_t v44 = type;
  v45 = os_log_type_enabled(v26, type);
  if (!v43)
  {
    if (v45)
    {
      *(_DWORD *)buf = 136446210;
      v51 = "nw_endpoint_handler_set_protocol_instance";
      _os_log_impl( &dword_181A5C000,  v26,  v44,  "%{public}s called with null protocol_parameters, no backtrace",  buf,  0xCu);
    }

    goto LABEL_40;
  }

  if (v45)
  {
    *(_DWORD *)buf = 136446466;
    v51 = "nw_endpoint_handler_set_protocol_instance";
    os_log_type_t v52 = 2082;
    v53 = v43;
    _os_log_impl( &dword_181A5C000,  v26,  v44,  "%{public}s called with null protocol_parameters, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v43);
  if (v25) {
    goto LABEL_42;
  }
LABEL_43:
}

    free(backtrace_string);
    goto LABEL_59;
  }

  if (!a2)
  {
    __nwlog_obj();
    int v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v33 = "nw_protocol_options_get_log_id_str";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v30 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v17 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v33 = "nw_protocol_options_get_log_id_str";
        _os_log_impl(&dword_181A5C000, v14, v17, "%{public}s called with null log_id_str", buf, 0xCu);
      }

      goto LABEL_58;
    }

    if (!v30)
    {
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v33 = "nw_protocol_options_get_log_id_str";
        _os_log_impl( &dword_181A5C000,  v14,  v28,  "%{public}s called with null log_id_str, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_58;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v23 = type;
    BOOL v24 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v33 = "nw_protocol_options_get_log_id_str";
        _os_log_impl(&dword_181A5C000, v14, v23, "%{public}s called with null log_id_str, no backtrace", buf, 0xCu);
      }

      goto LABEL_58;
    }

    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v33 = "nw_protocol_options_get_log_id_str";
      dispatch_workloop_t v34 = 2082;
      v35 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v14,  v23,  "%{public}s called with null log_id_str, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_40;
  }

  if (!a3)
  {
    __nwlog_obj();
    os_log_type_t v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v33 = "nw_protocol_options_get_log_id_str";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v30 = 0;
    if (__nwlog_fault(v13, &type, &v30))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v19 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v33 = "nw_protocol_options_get_log_id_str";
          _os_log_impl(&dword_181A5C000, v14, v19, "%{public}s called with null log_id_str_len", buf, 0xCu);
        }

  if (v18) {
    free(v18);
  }
  return 0LL;
}

  if (v9) {
    free(v9);
  }
  return 0LL;
}

    _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
    goto LABEL_41;
  }

  if (a2)
  {
    if (a3 <= 0x15)
    {
      if (((1 << a3) & 0x1A000) != 0)
      {
        id v3 = *(void *)(a1 + 32);
        if (!v3) {
          return;
        }
LABEL_10:
        uint64_t v4 = *(void *)(v3 + 24);
        if (v4)
        {
          char v5 = *(void (**)(void))(v4 + 160);
          if (v5) {
            v5();
          }
        }

        return;
      }

      if (((1 << a3) & 0x200080) != 0) {
        return;
      }
    }

    id v3 = *(void *)(a1 + 48);
    if (!v3) {
      return;
    }
    goto LABEL_10;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v17 = "nw_protocol_default_notify";
  id v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v14 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v7 = (os_log_s *)__nwlog_obj();
    int v8 = type;
    if (!os_log_type_enabled(v7, type)) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    id v17 = "nw_protocol_default_notify";
    int v9 = "%{public}s called with null other_protocol";
    goto LABEL_40;
  }

  if (!v14)
  {
    uint64_t v7 = (os_log_s *)__nwlog_obj();
    int v8 = type;
    if (!os_log_type_enabled(v7, type)) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    id v17 = "nw_protocol_default_notify";
    int v9 = "%{public}s called with null other_protocol, backtrace limit exceeded";
    goto LABEL_40;
  }

  os_log_type_t v12 = (char *)__nw_create_backtrace_string();
  uint64_t v7 = (os_log_s *)__nwlog_obj();
  int v8 = type;
  os_log_type_t v13 = os_log_type_enabled(v7, type);
  if (!v12)
  {
    if (!v13) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    id v17 = "nw_protocol_default_notify";
    int v9 = "%{public}s called with null other_protocol, no backtrace";
    goto LABEL_40;
  }

  if (v13)
  {
    *(_DWORD *)buf = 136446466;
    id v17 = "nw_protocol_default_notify";
    os_log_type_t v18 = 2082;
    char v19 = v12;
    _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null other_protocol, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v12);
  if (v6) {
    goto LABEL_42;
  }
}

    goto LABEL_41;
  }

  id v3 = (NWConcrete_nw_endpoint_handler *)v1;
  mode = v3->mode;

  if ((_DWORD)mode != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v8 = (id)gLogObj;
    else {
      int v9 = off_189BBBBC0[mode];
    }
    *(_DWORD *)buf = 136446722;
    v31 = "nw_endpoint_handler_is_viable";
    os_log_type_t v32 = 2082;
    uint64_t v33 = (void *)v9;
    dispatch_workloop_t v34 = 2082;
    v35 = "flow";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v28 = 0;
    if (__nwlog_fault(v10, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v11 = (os_log_s *)(id)gLogObj;
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          else {
            os_log_type_t v13 = off_189BBBBC0[mode];
          }
          *(_DWORD *)buf = 136446722;
          v31 = "nw_endpoint_handler_is_viable";
          os_log_type_t v32 = 2082;
          uint64_t v33 = (void *)v13;
          dispatch_workloop_t v34 = 2082;
          v35 = "flow";
          _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
        }
      }

      else if (v28)
      {
        os_log_type_t v14 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v11 = (os_log_s *)(id)gLogObj;
        id v15 = type;
        int v16 = os_log_type_enabled(v11, type);
        if (v14)
        {
          if (v16)
          {
            else {
              id v17 = off_189BBBBC0[mode];
            }
            *(_DWORD *)buf = 136446978;
            v31 = "nw_endpoint_handler_is_viable";
            os_log_type_t v32 = 2082;
            uint64_t v33 = (void *)v17;
            dispatch_workloop_t v34 = 2082;
            v35 = "flow";
            id v36 = 2082;
            v37 = v14;
            _os_log_impl( &dword_181A5C000,  v11,  v15,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v14);
          if (!v10) {
            goto LABEL_43;
          }
          goto LABEL_42;
        }

        if (v16)
        {
          else {
            os_log_type_t v20 = off_189BBBBC0[mode];
          }
          *(_DWORD *)buf = 136446722;
          v31 = "nw_endpoint_handler_is_viable";
          os_log_type_t v32 = 2082;
          uint64_t v33 = (void *)v20;
          dispatch_workloop_t v34 = 2082;
          v35 = "flow";
          _os_log_impl( &dword_181A5C000,  v11,  v15,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v11 = (os_log_s *)(id)gLogObj;
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v11, type))
        {
          else {
            char v19 = off_189BBBBC0[mode];
          }
          *(_DWORD *)buf = 136446722;
          v31 = "nw_endpoint_handler_is_viable";
          os_log_type_t v32 = 2082;
          uint64_t v33 = (void *)v19;
          dispatch_workloop_t v34 = 2082;
          v35 = "flow";
          _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
        }
      }

      goto LABEL_40;
    }

  os_log_type_t v14 = 0xFFFFFFFFLL;
LABEL_41:

  return v14;
}

    free(v24);
    goto LABEL_41;
  }

  mode = v1->mode;

  if (mode != 1) {
    goto LABEL_34;
  }
  uint64_t v4 = (id *)nw_endpoint_handler_copy_resolver(v2);
  char v5 = (unsigned int *)v4[1];
  id v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    id v36 = "nw_resolver_get_resolution_protocol";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v33 = 0;
    if (__nwlog_fault(v13, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          id v36 = "nw_resolver_get_resolution_protocol";
          _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s called with null resolver", buf, 0xCu);
        }
      }

      else if (v33)
      {
        char v19 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = type;
        BOOL v21 = os_log_type_enabled(v14, type);
        if (v19)
        {
          if (v21)
          {
            *(_DWORD *)buf = 136446466;
            id v36 = "nw_resolver_get_resolution_protocol";
            v37 = 2082;
            v38 = v19;
            _os_log_impl( &dword_181A5C000,  v14,  v20,  "%{public}s called with null resolver, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v19);
          goto LABEL_61;
        }

        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          id v36 = "nw_resolver_get_resolution_protocol";
          _os_log_impl(&dword_181A5C000, v14, v20, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v32 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          id v36 = "nw_resolver_get_resolution_protocol";
          _os_log_impl( &dword_181A5C000,  v14,  v32,  "%{public}s called with null resolver, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

  if (v13) {
    free(v13);
  }
  os_log_type_t v10 = 0LL;
LABEL_7:

  return v10;
}

        if (v28) {
          os_release(v28);
        }
        BOOL v24 = (uint64_t *)*v24;
        if (!v24)
        {
          if ((v25 & 1) == 0)
          {
LABEL_47:
            uint64_t v33 = calloc(1uLL, 0x48uLL);
            if (v33) {
              goto LABEL_48;
            }
            v51 = (os_log_s *)__nwlog_obj();
            os_log_type_enabled(v51, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136446722;
            os_log_type_t v60 = "strict_calloc";
            BOOL v61 = 2048;
            v62 = 1LL;
            os_log_type_t v63 = 2048;
            os_log_type_t v64 = 72LL;
            os_log_type_t v52 = (void *)_os_log_send_and_compose_impl();
            if (__nwlog_abort((uint64_t)v52))
            {
              __break(1u);
            }

            else
            {
              free(v52);
LABEL_48:
              v33[6] = os_retain(v23);
              *((_OWORD *)v33 + 1) = *(_OWORD *)type;
              if (v56) {
                dispatch_workloop_t v34 = 64;
              }
              else {
                dispatch_workloop_t v34 = 0;
              }
              *((_BYTE *)v33 + 66) = *((_BYTE *)v33 + 66) & 0xBF | v34;
              if (a3)
              {
                v35 = *(void *)(a1 + 64);
                *uint64_t v33 = v35;
                if (v35) {
                  id v36 = (void *)(v35 + 8);
                }
                else {
                  id v36 = (void *)(a1 + 72);
                }
                *id v36 = v33;
                *(void *)(a1 + 64) = v33;
                v33[1] = a1 + 64;
              }

              else
              {
                *uint64_t v33 = 0LL;
                v37 = *(void **)(a1 + 72);
                v33[1] = v37;
                char *v37 = v33;
                *(void *)(a1 + 72) = v33;
              }
            }
          }

          return;
        }
      }
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v60 = "__nw_frame_set_dscp_value";
    os_log_type_t v47 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    BOOL v57 = 0;
    if (__nwlog_fault(v47, type, &v57))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v48 = (os_log_s *)__nwlog_obj();
        id v49 = type[0];
        if (!os_log_type_enabled(v48, type[0])) {
          goto LABEL_103;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v60 = "__nw_frame_set_dscp_value";
        v50 = "%{public}s called with null (dscp_value <= _MAX_DSCP)";
        goto LABEL_102;
      }

      v53 = a4;
      if (!v57)
      {
        v48 = (os_log_s *)__nwlog_obj();
        id v49 = type[0];
        if (!os_log_type_enabled(v48, type[0])) {
          goto LABEL_103;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v60 = "__nw_frame_set_dscp_value";
        v50 = "%{public}s called with null (dscp_value <= _MAX_DSCP), backtrace limit exceeded";
        goto LABEL_102;
      }

      BOOL v54 = (char *)__nw_create_backtrace_string();
      v48 = (os_log_s *)__nwlog_obj();
      id v49 = type[0];
      uint64_t v55 = os_log_type_enabled(v48, type[0]);
      if (v54)
      {
        if (v55)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v60 = "__nw_frame_set_dscp_value";
          BOOL v61 = 2082;
          v62 = (uint64_t)v54;
          _os_log_impl( &dword_181A5C000,  v48,  v49,  "%{public}s called with null (dscp_value <= _MAX_DSCP), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v54);
        a4 = v53;
        goto LABEL_103;
      }

      a4 = v53;
      if (v55)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v60 = "__nw_frame_set_dscp_value";
        v50 = "%{public}s called with null (dscp_value <= _MAX_DSCP), no backtrace";
LABEL_102:
        _os_log_impl(&dword_181A5C000, v48, v49, v50, buf, 0xCu);
      }
    }

  return v13;
}

        LODWORD(v5) = 0;
        goto LABEL_41;
      }

    os_log_type_t v23 = *(unsigned int *)a4 + (unint64_t)*(unsigned int *)a3 + bswap32(a2 + 17) + v50;
    os_log_type_t v13 = (unsigned __int16)(((WORD1(v23) + (unsigned __int16)v23) >> 16)
                           + WORD1(v23)
                           + v23
    if (a6)
    {
      if (v12)
      {
        BOOL v24 = *(void *)(a6 + 64);
        if (v24)
        {
          os_log_type_t v25 = *(void *)(v24 + 48) + v12;
          ++*(void *)(v24 + 40);
          *(void *)(v24 + 48) = v25;
        }
      }
    }

  id v3 = 1;
  if ((a1 & 4) == 0)
  {
LABEL_6:
    if ((a1 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_80;
  }

    if (v15) {
      free(v15);
    }
LABEL_42:
    id v6 = 0LL;
    goto LABEL_4;
  }

  v6->log_id = nw_candidate_manager_get_next_id();
  objc_storeStrong((id *)&v6->parameters, a3);
  uint64_t v7 = nw_array_create();
  candidates = v6->candidates;
  v6->candidates = (OS_nw_array *)v7;

LABEL_4:
  return v6;
}

        free(v12);
        goto LABEL_41;
      }

      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_array_contains_endpoint";
        _os_log_impl(&dword_181A5C000, v13, v21, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v24 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_instance_registrar_array_contains_endpoint";
        _os_log_impl( &dword_181A5C000,  v13,  v24,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
      }
    }

        free(backtrace_string);
      }
    }

  if ((*(_BYTE *)(v12 + 346) & 0x20) != 0) {
    goto LABEL_66;
  }
  if (*(_BYTE *)(v12 + 256))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    os_log_type_t v14 = (os_log_s *)(id)gconnectionLogObj;
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_INFO)) {
      goto LABEL_65;
    }
    os_log_type_t v18 = *(void *)(a1 + 40) + 256LL;
    dispatch_workloop_t v34 = "nw_resolver_process_service_result_block_invoke";
    char v19 = " (ignoring)";
    uint64_t v33 = 136447234;
    if (!v9) {
      char v19 = "";
    }
    v35 = 2082;
    *(void *)id v36 = v18;
    *(_WORD *)&v36[8] = 2080;
    *(void *)&v36[10] = v11;
    *(_WORD *)&v36[18] = 2080;
    *(void *)&v36[20] = v10;
    *(_WORD *)&v36[28] = 2082;
    *(void *)&v36[30] = v19;
    os_log_type_t v20 = "%{public}s [C%{public}s] Address hint: %s%s%{public}s";
    BOOL v21 = v14;
    v22 = 52;
    goto LABEL_64;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v14 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    os_log_type_t v25 = *(_DWORD *)(*(void *)(a1 + 40) + 340LL);
    os_log_type_t v26 = " (ignoring)";
    if (!v9) {
      os_log_type_t v26 = "";
    }
    uint64_t v33 = 136447234;
    dispatch_workloop_t v34 = "nw_resolver_process_service_result_block_invoke";
    v35 = 1024;
    *(_DWORD *)id v36 = v25;
    *(_WORD *)&v36[4] = 2080;
    *(void *)&v36[6] = v11;
    *(_WORD *)&v36[14] = 2080;
    *(void *)&v36[16] = v10;
    *(_WORD *)&v36[24] = 2082;
    *(void *)&v36[26] = v26;
    os_log_type_t v20 = "%{public}s [R%u] Address hint: %s%s%{public}s";
    BOOL v21 = v14;
    v22 = 48;
    goto LABEL_64;
  }

      char v5 = *(void *)(a1 + 32);
      goto LABEL_41;
    }

    os_log_type_t v12 = nw_endpoint_get_type(*(nw_endpoint_t *)(v5 + 24));
    os_log_type_t v13 = *(void *)(a1 + 32);
    if (v12 == nw_endpoint_type_bonjour_service)
    {
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 346) & 0x20) != 0)
        {
LABEL_48:
          nw_resolver_bonjour_resolve_callback(v3, 0, 0, *(_DWORD *)(a1 + 40), "", "", 0, 0, 0LL, (void *)v13);
          return;
        }

        if (*(_BYTE *)(v13 + 256))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          os_log_type_t v14 = (os_log_s *)(id)gconnectionLogObj;
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_INFO)) {
            goto LABEL_47;
          }
          id v15 = *(void *)(a1 + 32);
          int v16 = nwlog_get_string_for_dns_service_error(*(_DWORD *)(a1 + 40));
          *(_DWORD *)buf = 136446722;
          v48 = "nw_resolver_inject_dns_service_error_block_invoke";
          id v49 = 2082;
          *(void *)v50 = v15 + 256;
          *(_WORD *)&v50[8] = 2082;
          *(void *)&v50[10] = v16;
          id v17 = "%{public}s [C%{public}s] Injecting error %{public}s";
          os_log_type_t v18 = v14;
          char v19 = 32;
          goto LABEL_46;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          os_log_type_t v39 = *(_DWORD *)(*(void *)(a1 + 32) + 340LL);
          v40 = nwlog_get_string_for_dns_service_error(*(_DWORD *)(a1 + 40));
          *(_DWORD *)buf = 136446722;
          v48 = "nw_resolver_inject_dns_service_error_block_invoke";
          id v49 = 1024;
          *(_DWORD *)v50 = v39;
          *(_WORD *)&v50[4] = 2082;
          *(void *)&v50[6] = v40;
          id v17 = "%{public}s [R%u] Injecting error %{public}s";
          os_log_type_t v18 = v14;
          char v19 = 28;
          goto LABEL_46;
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          v38 = nwlog_get_string_for_dns_service_error(*(_DWORD *)(a1 + 40));
          *(_DWORD *)buf = 136446466;
          v48 = "nw_resolver_inject_dns_service_error_block_invoke";
          id v49 = 2082;
          *(void *)v50 = v38;
          id v17 = "%{public}s Injecting error %{public}s";
          os_log_type_t v18 = v14;
          char v19 = 22;
LABEL_46:
          _os_log_impl(&dword_181A5C000, v18, OS_LOG_TYPE_INFO, v17, buf, v19);
        }
      }

    free(v23);
    if (!v13) {
      goto LABEL_10;
    }
    goto LABEL_61;
  }

  int v9 = (nw_txt_record *)*((void *)v7 + 23);
  if (!v9)
  {
    dictionary_with_initial_length = nw_txt_record_create_dictionary_with_initial_length(0x100uLL);
    id v11 = (void *)v8[23];
    v8[23] = dictionary_with_initial_length;

    int v9 = (nw_txt_record *)v8[23];
    if (a3) {
      goto LABEL_7;
    }
LABEL_9:
    nw_txt_record_remove_key(v9, a2);
    goto LABEL_10;
  }

  if (!a3) {
    goto LABEL_9;
  }
LABEL_7:
  nw_txt_record_set_key(v9, a2, a3, a4);
LABEL_10:
}

    goto LABEL_41;
  }

  if (!v4)
  {
    __nwlog_obj();
    int v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    objc_super v29 = "nw_ws_request_enumerate_additional_headers";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v26 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v17 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        objc_super v29 = "nw_ws_request_enumerate_additional_headers";
        _os_log_impl(&dword_181A5C000, v14, v17, "%{public}s called with null enumerator", buf, 0xCu);
      }
    }

    else if (v26)
    {
      BOOL v21 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v22 = type;
      os_log_type_t v23 = os_log_type_enabled(v14, type);
      if (v21)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          objc_super v29 = "nw_ws_request_enumerate_additional_headers";
          os_log_type_t v30 = 2082;
          v31 = v21;
          _os_log_impl( &dword_181A5C000,  v14,  v22,  "%{public}s called with null enumerator, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v21);
        if (!v13) {
          goto LABEL_6;
        }
        goto LABEL_42;
      }

      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        objc_super v29 = "nw_ws_request_enumerate_additional_headers";
        _os_log_impl(&dword_181A5C000, v14, v22, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        objc_super v29 = "nw_ws_request_enumerate_additional_headers";
        _os_log_impl( &dword_181A5C000,  v14,  v25,  "%{public}s called with null enumerator, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_40;
  }

  id v6 = 0LL;
  while (1)
  {
    count = xpc_array_get_count(v3[2]);
    int v8 = v6 >= count;
    if (v6 >= count) {
      break;
    }
    string = xpc_array_get_string(v3[2], v6);
    os_log_type_t v10 = xpc_array_get_string(v3[3], v6++);
  }

    free(backtrace_string);
    goto LABEL_53;
  }

  if (*((char *)v3 + 190) < 0 || *((int *)v3 + 10) >= 3)
  {
    if (nw_parameters_get_logging_disabled(*((void *)v3 + 7))) {
      goto LABEL_13;
    }
    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
    }
    int v8 = (os_log_s *)(id)gconnection_groupLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v17 = *((_DWORD *)v3 + 42);
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_connection_group_reinsert_extracted_connection";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v17;
      _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_ERROR,  "%{public}s [G%u] Cannot reinsert a connection into a failed or cancelled group",  buf,  0x12u);
    }

    goto LABEL_12;
  }

  if (!*((void *)v3 + 17))
  {
    if (nw_parameters_get_logging_disabled(*((void *)v3 + 7)))
    {
LABEL_13:
      uint64_t v7 = 0;
      goto LABEL_14;
    }

    if (__nwlog_connection_group_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
    }
    int v8 = (os_log_s *)(id)gconnection_groupLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      int v9 = *((_DWORD *)v3 + 42);
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_connection_group_reinsert_extracted_connection";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v9;
      _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_DEBUG,  "%{public}s [G%u] connection group does not have a receive handler, rejecting reinsertion",  buf,  0x12u);
    }

    goto LABEL_41;
  }

  if (!v4)
  {
    __nwlog_obj();
    int v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    objc_super v29 = "nw_ws_response_enumerate_additional_headers";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v26 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v17 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        objc_super v29 = "nw_ws_response_enumerate_additional_headers";
        _os_log_impl(&dword_181A5C000, v14, v17, "%{public}s called with null enumerator", buf, 0xCu);
      }
    }

    else if (v26)
    {
      BOOL v21 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v22 = type;
      os_log_type_t v23 = os_log_type_enabled(v14, type);
      if (v21)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          objc_super v29 = "nw_ws_response_enumerate_additional_headers";
          os_log_type_t v30 = 2082;
          v31 = v21;
          _os_log_impl( &dword_181A5C000,  v14,  v22,  "%{public}s called with null enumerator, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v21);
        if (!v13) {
          goto LABEL_6;
        }
        goto LABEL_42;
      }

      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        objc_super v29 = "nw_ws_response_enumerate_additional_headers";
        _os_log_impl(&dword_181A5C000, v14, v22, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        objc_super v29 = "nw_ws_response_enumerate_additional_headers";
        _os_log_impl( &dword_181A5C000,  v14,  v25,  "%{public}s called with null enumerator, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_40;
  }

  id v6 = 0LL;
  while (1)
  {
    count = xpc_array_get_count(v3[3]);
    int v8 = v6 >= count;
    if (v6 >= count) {
      break;
    }
    string = xpc_array_get_string(v3[3], v6);
    os_log_type_t v10 = xpc_array_get_string(v3[4], v6++);
  }

    goto LABEL_41;
  }

  if (v4)
  {
    id v6 = v3 + 1;
    uint64_t v7 = v3[1];
    ++*((_DWORD *)v3 + 6);
    *((void *)v4 + 4) = v7;
    if (v7) {
      int v8 = (void *)(v7 + 40);
    }
    else {
      int v8 = v3 + 2;
    }
    *int v8 = v4 + 32;
    _DWORD *v6 = v4;
    *((void *)v4 + 5) = v6;
    goto LABEL_7;
  }

  __nwlog_obj();
  os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v26 = "nw_protocol_data_array_prepend";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v23 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_protocol_data_array_prepend";
      _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null data", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (!v23)
  {
    __nwlog_obj();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_protocol_data_array_prepend";
      _os_log_impl(&dword_181A5C000, v11, v22, "%{public}s called with null data, backtrace limit exceeded", buf, 0xCu);
    }

    goto LABEL_40;
  }

  os_log_type_t v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  char v19 = type;
  os_log_type_t v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_protocol_data_array_prepend";
      _os_log_impl(&dword_181A5C000, v11, v19, "%{public}s called with null data, no backtrace", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v26 = "nw_protocol_data_array_prepend";
    char v27 = 2082;
    os_log_type_t v28 = v18;
    _os_log_impl( &dword_181A5C000,  v11,  v19,  "%{public}s called with null data, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_42;
  }
LABEL_7:
}

    goto LABEL_41;
  }

  if (v4)
  {
    v23[0] = MEMORY[0x1895F87A8];
    v23[1] = 3221225472LL;
    BOOL v24 = __nw_protocol_data_array_apply_block_invoke;
    os_log_type_t v25 = &unk_189BB7650;
    os_log_type_t v26 = v4;
    id v6 = v3[1];
    do
    {
      if (!v6) {
        break;
      }
      uint64_t v7 = *(void *)(v6 + 32);
      int v8 = v24((uint64_t)v23);
      id v6 = v7;
    }

    while ((v8 & 1) != 0);

    goto LABEL_7;
  }

  __nwlog_obj();
  os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v30 = "nw_protocol_data_array_apply";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v27 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v30 = "nw_protocol_data_array_apply";
      _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null apply_block", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (!v27)
  {
    __nwlog_obj();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v30 = "nw_protocol_data_array_apply";
      _os_log_impl( &dword_181A5C000,  v11,  v22,  "%{public}s called with null apply_block, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_40;
  }

  os_log_type_t v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  char v19 = type;
  os_log_type_t v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v30 = "nw_protocol_data_array_apply";
      _os_log_impl(&dword_181A5C000, v11, v19, "%{public}s called with null apply_block, no backtrace", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v30 = "nw_protocol_data_array_apply";
    v31 = 2082;
    os_log_type_t v32 = v18;
    _os_log_impl( &dword_181A5C000,  v11,  v19,  "%{public}s called with null apply_block, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_42;
  }
LABEL_7:
}

LABEL_41:
      if (v9) {
        free(v9);
      }
      goto LABEL_43;
    }

    if (!v22)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_advertise_descriptor_get_txt_record";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s invalid advertise descriptor type, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_40;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    id v17 = type;
    os_log_type_t v18 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_advertise_descriptor_get_txt_record";
        _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s invalid advertise descriptor type, no backtrace",  buf,  0xCu);
      }

      goto LABEL_40;
    }

    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v25 = "nw_advertise_descriptor_get_txt_record";
      os_log_type_t v26 = 2082;
      char v27 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s invalid advertise descriptor type, dumping backtrace:%{public}s",  buf,  0x16u);
    }

  if (v14) {
    free(v14);
  }
  return 0LL;
}

    free(v11);
    goto LABEL_41;
  }

  *(_DWORD *)(internal + 48) &= ~2u;
  self->_packetHashTable = (nw_hash_table *)internal;
LABEL_43:

  return self;
}
}

    os_log_type_t v26 = 0;
    goto LABEL_50;
  }

  if (v8) {
    free(v8);
  }
  char v5 = 0LL;
LABEL_7:

  return (nw_listener_t)v5;
}

    if (v8) {
      free(v8);
    }
    uint64_t v4 = 0LL;
    goto LABEL_5;
  }

  if (!a2)
  {
    __nwlog_obj();
    id v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v25 = "nw_listener_create_with_launchd_key";
    int v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v8, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v25 = "nw_listener_create_with_launchd_key";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null key", buf, 0xCu);
        }

      v53 = *(unsigned __int8 *)(a2 + *v8);
      if (*(_BYTE *)(a2 + *v8)) {
        int v16 = 0LL;
      }
LABEL_42:
      if (v53) {
        BOOL v54 = 1;
      }
      else {
        BOOL v54 = (v16 & 7) == 4;
      }
      if (v54) {
        return *(_BYTE *)(a2 + *v8) == 0;
      }
      if ((v16 >> 3) == 2)
      {
        id v11 = PBReaderReadString();
        os_log_type_t v12 = 8LL;
LABEL_4:
        os_log_type_t v13 = *(void **)(a1 + v12);
        *(void *)(a1 + v12) = v11;

        goto LABEL_5;
      }

      if ((v16 >> 3) == 1)
      {
        id v11 = PBReaderReadString();
        os_log_type_t v12 = 16LL;
        goto LABEL_4;
      }

      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0LL;
      }
LABEL_5:
      uint64_t v4 = *v3;
      char v5 = *(void *)(a2 + v4);
      uint64_t v7 = *(void *)(a2 + *v6);
      if (v5 >= v7) {
        return *(_BYTE *)(a2 + *v8) == 0;
      }
    }

    int v16 = 0LL;
LABEL_39:
    *os_log_type_t v14 = 1;
    goto LABEL_40;
  }

  return *(_BYTE *)(a2 + *v8) == 0;
}

    if (v14) {
      free(v14);
    }
    id v11 = 0LL;
    goto LABEL_21;
  }

  if (*((void *)v1 + 15))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = (void *)v2[15];
      *(_DWORD *)buf = 136446466;
      os_log_type_t v26 = "nw_parameters_get_proxy_bundle_id";
      char v27 = 2080;
      os_log_type_t v28 = v4;
      char v5 = "%{public}s Using configured proxy bundle ID %s";
      id v6 = v3;
      uint64_t v7 = 22;
LABEL_18:
      _os_log_impl(&dword_181A5C000, v6, OS_LOG_TYPE_DEFAULT, v5, buf, v7);
      goto LABEL_19;
    }

    goto LABEL_19;
  }

  int v8 = (const char *)*((void *)v1 + 14);
  if (v8)
  {
    *((void *)v1 + 15) = 0LL;
  }

  else
  {
    int v8 = (const char *)v2[14];
    v2[15] = 0LL;
    if (!v8)
    {
      if (nw_utilities_get_self_bundle_id::onceToken != -1) {
        dispatch_once(&nw_utilities_get_self_bundle_id::onceToken, &__block_literal_global_7);
      }
      int v8 = (const char *)nw_utilities_get_self_bundle_id::bundle_identifier_string;
      if (!nw_utilities_get_self_bundle_id::bundle_identifier_string) {
        goto LABEL_20;
      }
    }
  }

  if (strlen(v8) - 1 > 0x3FE)
  {
LABEL_16:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      os_log_type_t v10 = v2[14];
      *(_DWORD *)buf = 136446722;
      os_log_type_t v26 = "nw_parameters_get_proxy_bundle_id";
      char v27 = 2080;
      os_log_type_t v28 = (void *)v8;
      objc_super v29 = 2080;
      os_log_type_t v30 = v10;
      char v5 = "%{public}s Using set bundle ID %s (effective %s)";
      id v6 = v3;
      uint64_t v7 = 32;
      goto LABEL_18;
    }

    if (v24) {
      free(v24);
    }
    goto LABEL_15;
  }

  if (*(void *)(v5[13] + 176LL))
  {
    if (v6)
    {
LABEL_4:
      Class Class = object_getClass((id)v6);
      if (v8)
      {
        os_log_type_t v10 = (objc_class *)MEMORY[0x1895F9220];
        if (Class == (Class)MEMORY[0x1895F9220] && object_getClass(v8) == v10)
        {
          count = xpc_array_get_count((xpc_object_t)v6);
          if (count == xpc_array_get_count(v8))
          {
            if (object_getClass((id)v6) == v10
              && (*(void *)applier = MEMORY[0x1895F87A8],
                  *(void *)&applier[8] = 0x40000000LL,
                  *(void *)&applier[16] = __nw_xpc_retain_array_with_validated_types_block_invoke,
                  id v36 = (uint64_t)&__block_descriptor_tmp_86584,
                  v37 = MEMORY[0x1895F92E8],
                  xpc_array_apply((xpc_object_t)v6, applier)))
            {
              os_log_type_t v12 = xpc_retain((xpc_object_t)v6);
            }

            else
            {
              os_log_type_t v12 = 0LL;
            }

            os_log_type_t v18 = *(void *)(v5[13] + 176LL);
            char v19 = *(void **)(v18 + 32);
            *(void *)(v18 + 32) = v12;

            if (object_getClass(v8) == v10
              && (*(void *)applier = MEMORY[0x1895F87A8],
                  *(void *)&applier[8] = 0x40000000LL,
                  *(void *)&applier[16] = __nw_xpc_retain_array_with_validated_types_block_invoke,
                  id v36 = (uint64_t)&__block_descriptor_tmp_86584,
                  v37 = MEMORY[0x1895F92E8],
                  xpc_array_apply(v8, applier)))
            {
              os_log_type_t v20 = xpc_retain(v8);
            }

            else
            {
              os_log_type_t v20 = 0LL;
            }

            BOOL v21 = *(void *)(v5[13] + 176LL);
            v22 = *(void **)(v21 + 40);
            *(void *)(v21 + 40) = v20;

            goto LABEL_15;
          }
        }
      }
    }

    if (v12) {
      free(v12);
    }
    goto LABEL_42;
  }

  __nwlog_obj();
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v27 = "nw_parameters_has_persistent_protocol_in_stack";
  int v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v24 = 0;
  if (__nwlog_fault(v8, &type, &v24))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        char v27 = "nw_parameters_has_persistent_protocol_in_stack";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v24)
    {
      id v15 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      int v16 = type;
      id v17 = os_log_type_enabled(v9, type);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          char v27 = "nw_parameters_has_persistent_protocol_in_stack";
          os_log_type_t v28 = 2082;
          objc_super v29 = v15;
          _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v15);
        goto LABEL_34;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        char v27 = "nw_parameters_has_persistent_protocol_in_stack";
        _os_log_impl(&dword_181A5C000, v9, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v21 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        char v27 = "nw_parameters_has_persistent_protocol_in_stack";
        _os_log_impl( &dword_181A5C000,  v9,  v21,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

      v53 = *(unsigned __int8 *)(a2 + *v8);
      if (*(_BYTE *)(a2 + *v8)) {
        int v16 = 0LL;
      }
LABEL_42:
      if (v53) {
        BOOL v54 = 1;
      }
      else {
        BOOL v54 = (v16 & 7) == 4;
      }
      if (v54) {
        return *(_BYTE *)(a2 + *v8) == 0;
      }
      if ((v16 >> 3) == 2)
      {
        id v11 = PBReaderReadString();
        os_log_type_t v12 = 16LL;
LABEL_4:
        os_log_type_t v13 = *(void **)(a1 + v12);
        *(void *)(a1 + v12) = v11;

        goto LABEL_5;
      }

      if ((v16 >> 3) == 1)
      {
        id v11 = PBReaderReadString();
        os_log_type_t v12 = 8LL;
        goto LABEL_4;
      }

      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0LL;
      }
LABEL_5:
      uint64_t v4 = *v3;
      char v5 = *(void *)(a2 + v4);
      uint64_t v7 = *(void *)(a2 + *v6);
      if (v5 >= v7) {
        return *(_BYTE *)(a2 + *v8) == 0;
      }
    }

    int v16 = 0LL;
LABEL_39:
    *os_log_type_t v14 = 1;
    goto LABEL_40;
  }

  return *(_BYTE *)(a2 + *v8) == 0;
}

    free(backtrace_string);
    goto LABEL_59;
  }

  if (!nw_connection_should_run_probe_locked(v4)
    || !nw_connection_check_experimental_probe_options_locked(v4, v6))
  {
    goto LABEL_9;
  }

  uint64_t v7 = (void *)nw_protocol_boringssl_copy_definition();
  nw_connection_create_experimental_probe_configuration_block_for_protocol_locked(v4, v6, v3, v7);
  int v8 = (void *)objc_claimAutoreleasedReturnValue();
  int v9 = v8;
  if (v8 == &__block_literal_global_18956)
  {

LABEL_9:
    probe_locked = 0LL;
    goto LABEL_10;
  }

  secure_tcp = nw_parameters_create_secure_tcp(v8, &__block_literal_global_91);
  probe_locked = nw_connection_create_probe_locked(v4, secure_tcp);

LABEL_10:
  os_log_type_t v12 = *(void *)(*(void *)(a1 + 48) + 8LL);
  os_log_type_t v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = probe_locked;
}

    if (v18) {
      free(v18);
    }
    goto LABEL_23;
  }

  nw_context_assert_queue(v3->context);
  reported_viable = v4->reported_viable;
  if (a2)
  {
    if (reported_viable == 1) {
      goto LABEL_23;
    }
  }

  else if (reported_viable == 2)
  {
    goto LABEL_23;
  }

  viability_changed_handler = v4->viability_changed_handler;
  if (viability_changed_handler && v4->state != 5)
  {
    if (a2)
    {
      v4->reported_viable = 1;
      uint64_t v7 = _Block_copy(viability_changed_handler);
    }

    else
    {
      v4->reported_viable = 2;
      uint64_t v7 = _Block_copy(viability_changed_handler);
      if (nw_endpoint_handler_uses_multipath(v4->parent_endpoint_handler))
      {
        parameters = v4->parameters;
        if (parameters && !nw_path_parameters_get_logging_disabled(*((void *)parameters + 13)))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          int v9 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
          {
            top_id = v4->top_id;
            *(_DWORD *)buf = 136446466;
            v35 = "nw_connection_send_viability_changed_on_nw_queue";
            id v36 = 1024;
            LODWORD(v37) = top_id;
            _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_INFO,  "%{public}s [C%u] Delaying not viable notification on a multipath protocol",  buf,  0x12u);
          }
        }

        int64_with_default = networkd_settings_get_int64_with_default( (const char *)nw_setting_multipath_viability_delay,  500LL);
        viability_changed_timer = (uint64_t)v4->viability_changed_timer;
        if (!viability_changed_timer)
        {
          os_log_type_t v13 = nw_context_copy_implicit_context();
          v28[0] = MEMORY[0x1895F87A8];
          v28[1] = 3221225472LL;
          v28[2] = ___ZL48nw_connection_send_viability_changed_on_nw_queueP24NWConcrete_nw_connectionb_block_invoke;
          v28[3] = &unk_189BBBE50;
          objc_super v29 = v4;
          os_log_type_t v30 = v7;
          v31 = 0;
          v4->viability_changed_timer = (void *)nw_queue_context_create_source(v13, 2, 3, 0, v28, 0LL);

          viability_changed_timer = (uint64_t)v4->viability_changed_timer;
        }

        os_log_type_t v14 = dispatch_time(0x8000000000000000LL, 1000000 * int64_with_default);
        nw_queue_set_timer_values(viability_changed_timer, v14, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
        nw_queue_activate_source((uint64_t)v4->viability_changed_timer, v15);
        goto LABEL_22;
      }
    }

    client_qos_class = v4->client_qos_class;
    v25[0] = MEMORY[0x1895F87A8];
    v25[1] = 3221225472LL;
    v25[2] = ___ZL48nw_connection_send_viability_changed_on_nw_queueP24NWConcrete_nw_connectionb_block_invoke_3;
    v25[3] = &unk_189BC71E8;
    uint64_t v7 = v7;
    os_log_type_t v26 = v7;
    char v27 = a2;
    nw_connection_async_client(v4, client_qos_class, v25);

LABEL_22:
  }

    if (v15) {
      free(v15);
    }
    goto LABEL_13;
  }

  char v5 = v3[2];
  if (v5 && !nw_path_parameters_get_logging_disabled(*(void *)(v5 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    id v6 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *((_DWORD *)v3 + 112);
      *(_DWORD *)buf = 136446466;
      v35 = "nw_connection_set_interface_use_callback";
      id v36 = 1024;
      LODWORD(v37) = v7;
      _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_INFO,  "%{public}s [C%u] Setting interface use callback on connection",  buf,  0x12u);
    }
  }

  if (v3[18])
  {
    int v8 = _Block_copy(v4);
    int v9 = (void *)v3[64];
    v3[64] = v8;

    os_log_type_t v10 = (void *)v3[18];
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = __nw_connection_set_interface_use_callback_block_invoke;
    aBlock[3] = &unk_189BB9860;
    v31 = v3;
    id v11 = v10;
    if (v11)
    {
      os_log_type_t v12 = _Block_copy(aBlock);
      os_log_type_t v13 = (void *)v11[6];
      v11[6] = v12;

LABEL_12:
      goto LABEL_13;
    }

    __nwlog_obj();
    os_log_type_t v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_endpoint_handler_set_migration_callback";
    char v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v32 = 0;
    if (__nwlog_fault(v19, &type, &v32))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v35 = "nw_endpoint_handler_set_migration_callback";
          _os_log_impl(&dword_181A5C000, v20, v21, "%{public}s called with null handler", buf, 0xCu);
        }
      }

      else if (v32)
      {
        os_log_type_t v25 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v26 = type;
        char v27 = os_log_type_enabled(v20, type);
        if (v25)
        {
          if (v27)
          {
            *(_DWORD *)buf = 136446466;
            v35 = "nw_endpoint_handler_set_migration_callback";
            id v36 = 2082;
            v37 = v25;
            _os_log_impl( &dword_181A5C000,  v20,  v26,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v25);
          goto LABEL_48;
        }

        if (v27)
        {
          *(_DWORD *)buf = 136446210;
          v35 = "nw_endpoint_handler_set_migration_callback";
          _os_log_impl(&dword_181A5C000, v20, v26, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        objc_super v29 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v35 = "nw_endpoint_handler_set_migration_callback";
          _os_log_impl( &dword_181A5C000,  v20,  v29,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    goto LABEL_41;
  }

  if (v8)
  {
    os_log_type_t v10 = a3;
    id v11 = MEMORY[0x1895F87A8];
    v34[0] = MEMORY[0x1895F87A8];
    v34[1] = 3221225472LL;
    v34[2] = __nw_connection_receive_multiple_block_invoke;
    v34[3] = &unk_189BB98B0;
    os_log_type_t v12 = v8;
    v35 = v12;
    multiple = nw_read_request_create_multiple(a2, v10, v7, v34);
    if (multiple)
    {
      nw_connection_add_read_request(v7, multiple);
    }

    else
    {
      os_log_type_t v14 = -[NWConcrete_nw_error initWithDomain:code:](objc_alloc(&OBJC_CLASS___NWConcrete_nw_error), 1, 22);
      id v15 = v7[48];
      v31[0] = v11;
      v31[1] = 3221225472LL;
      v31[2] = __nw_connection_receive_multiple_block_invoke_2;
      v31[3] = &unk_189BC91E8;
      os_log_type_t v32 = v14;
      uint64_t v33 = v12;
      int v16 = v14;
      nw_connection_async_client_if_needed_with_override(v7, 0LL, v15, v31);
    }

    goto LABEL_7;
  }

  __nwlog_obj();
  BOOL v21 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v39 = "nw_connection_receive_multiple";
  os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();

  v37 = OS_LOG_TYPE_ERROR;
  id v36 = 0;
  if (v37 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    char v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v22 = v37;
    if (os_log_type_enabled(v19, v37))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v39 = "nw_connection_receive_multiple";
      _os_log_impl(&dword_181A5C000, v19, v22, "%{public}s called with null completion", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (!v36)
  {
    __nwlog_obj();
    char v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v30 = v37;
    if (os_log_type_enabled(v19, v37))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v39 = "nw_connection_receive_multiple";
      _os_log_impl( &dword_181A5C000,  v19,  v30,  "%{public}s called with null completion, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_40;
  }

  os_log_type_t v26 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  char v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  char v27 = v37;
  os_log_type_t v28 = os_log_type_enabled(v19, v37);
  if (!v26)
  {
    if (v28)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v39 = "nw_connection_receive_multiple";
      _os_log_impl(&dword_181A5C000, v19, v27, "%{public}s called with null completion, no backtrace", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (v28)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v39 = "nw_connection_receive_multiple";
    v40 = 2082;
    os_log_type_t v41 = v26;
    _os_log_impl( &dword_181A5C000,  v19,  v27,  "%{public}s called with null completion, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v26);
  if (v18) {
    goto LABEL_42;
  }
LABEL_7:
}

    goto LABEL_41;
  }

  if (v11)
  {
    os_log_type_t v13 = nw_read_request_create(a3, a4, v10, v9, v11);
    if (v13)
    {
      nw_connection_add_read_request(v9, v13);
    }

    else
    {
      os_log_type_t v14 = -[NWConcrete_nw_error initWithDomain:code:](objc_alloc(&OBJC_CLASS___NWConcrete_nw_error), 1, 22);
      id v15 = v9[48];
      v31[0] = MEMORY[0x1895F87A8];
      v31[1] = 3221225472LL;
      v31[2] = ___ZL30nw_connection_receive_internalP24NWConcrete_nw_connectionPU32objcproto21OS_nw_content_context8NSObjectjjU13block_pointerFvPU27objcproto16OS_dispatch_dataS1_S3_bPU22objcproto11OS_nw_errorS1_E_block_invoke;
      v31[3] = &unk_189BC91E8;
      os_log_type_t v32 = v14;
      uint64_t v33 = v12;
      int v16 = v14;
      nw_connection_async_client_if_needed_with_override(v9, 0LL, v15, v31);
    }

    goto LABEL_7;
  }

  __nwlog_obj();
  BOOL v21 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v37 = "nw_connection_receive_internal";
  os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  dispatch_workloop_t v34 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    char v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v19, type))
    {
      *(_DWORD *)buf = 136446210;
      v37 = "nw_connection_receive_internal";
      _os_log_impl(&dword_181A5C000, v19, v22, "%{public}s called with null completion", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (!v34)
  {
    __nwlog_obj();
    char v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v30 = type;
    if (os_log_type_enabled(v19, type))
    {
      *(_DWORD *)buf = 136446210;
      v37 = "nw_connection_receive_internal";
      _os_log_impl( &dword_181A5C000,  v19,  v30,  "%{public}s called with null completion, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_40;
  }

  os_log_type_t v26 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  char v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  char v27 = type;
  os_log_type_t v28 = os_log_type_enabled(v19, type);
  if (!v26)
  {
    if (v28)
    {
      *(_DWORD *)buf = 136446210;
      v37 = "nw_connection_receive_internal";
      _os_log_impl(&dword_181A5C000, v19, v27, "%{public}s called with null completion, no backtrace", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (v28)
  {
    *(_DWORD *)buf = 136446466;
    v37 = "nw_connection_receive_internal";
    v38 = 2082;
    os_log_type_t v39 = v26;
    _os_log_impl( &dword_181A5C000,  v19,  v27,  "%{public}s called with null completion, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v26);
  if (v18) {
    goto LABEL_42;
  }
LABEL_7:
}

    _os_log_impl(&dword_181A5C000, v9, v10, v11, buf, 0xCu);
    goto LABEL_41;
  }

  handle = (char *)a1->handle;
  if (handle)
  {
    if (gLogDatapath)
    {
      os_log_type_t v12 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        BOOL v21 = "nw_protocol_demux_disconnected";
        v22 = 2080;
        os_log_type_t v23 = handle + 90;
        _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_DEBUG,  "%{public}s %s Disconnected from output handler",  buf,  0x16u);
      }
    }

    nw_protocol_remove_instance((uint64_t)a1);
    uint64_t v4 = (char *)*((void *)handle + 10);
    if (v4)
    {
      v17[0] = MEMORY[0x1895F87A8];
      v17[1] = 0x40000000LL;
      v17[2] = ___ZL30nw_protocol_demux_disconnectedP11nw_protocolS0__block_invoke;
      v17[3] = &__block_descriptor_tmp_26_25859;
      v17[4] = handle;
      nw_hash_table_apply(v4, (uint64_t)v17);
    }

    char v5 = *((void *)handle + 6);
    if (v5)
    {
      id v6 = *(void *)(v5 + 24);
      if (v6)
      {
        uint64_t v7 = *(void (**)(void))(v6 + 48);
        if (v7) {
          v7();
        }
      }
    }

    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v21 = "nw_protocol_demux_disconnected";
  int v8 = (char *)_os_log_send_and_compose_impl();
  char v19 = OS_LOG_TYPE_ERROR;
  os_log_type_t v18 = 0;
  if (v19 == OS_LOG_TYPE_FAULT)
  {
    int v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = v19;
    if (!os_log_type_enabled(v9, v19)) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v21 = "nw_protocol_demux_disconnected";
    id v11 = "%{public}s called with null demux";
    goto LABEL_40;
  }

  if (!v18)
  {
    int v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = v19;
    if (!os_log_type_enabled(v9, v19)) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v21 = "nw_protocol_demux_disconnected";
    id v11 = "%{public}s called with null demux, backtrace limit exceeded";
    goto LABEL_40;
  }

  id v15 = (char *)__nw_create_backtrace_string();
  int v9 = (os_log_s *)__nwlog_obj();
  os_log_type_t v10 = v19;
  int v16 = os_log_type_enabled(v9, v19);
  if (!v15)
  {
    if (!v16) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v21 = "nw_protocol_demux_disconnected";
    id v11 = "%{public}s called with null demux, no backtrace";
    goto LABEL_40;
  }

  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v21 = "nw_protocol_demux_disconnected";
    v22 = 2082;
    os_log_type_t v23 = v15;
    _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null demux, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v15);
  if (v8) {
    goto LABEL_42;
  }
}

  v40 = v14;
  os_log_type_t v41 = (v40[170] & 1) == 0;

  if (!v41) {
    *((_BYTE *)v169 + 96) |= 1u;
  }
  if (nw_proxy_config_supports_listeners(v40)) {
    nw_parameters_set_local_endpoint((nw_parameters_t)v29, 0LL);
  }
  if (v164 != 1)
  {
LABEL_85:
    if (v167)
    {
      inner = nw_endpoint_handler_create_inner(v167, (void *)v29, nw_endpoint_proxy_receive_report, v171, v171, 0, 0);
      if (!inner)
      {
LABEL_97:

        goto LABEL_98;
      }

      if (!*((void *)v169 + 1))
      {
        v77 = nw_array_create();
        unint64_t v78 = (void *)*((void *)v169 + 1);
        *((void *)v169 + 1) = v77;
      }

      minimize_logging = nw_endpoint_handler_get_minimize_logging(v171);
      logging_disabled = nw_endpoint_handler_get_logging_disabled(v171);
      if (minimize_logging)
      {
        if ((logging_disabled & 1) != 0) {
          goto LABEL_96;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        v81 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
        {
          __uint64_t v104 = nw_endpoint_handler_get_id_string(v171);
          char v105 = nw_endpoint_handler_dry_run_string(v171);
          v165 = nw_endpoint_handler_copy_endpoint(v171);
          v106 = nw_endpoint_get_logging_description(v165);
          v107 = nw_endpoint_handler_state_string(v171);
          v108 = nw_endpoint_handler_mode_string(v171);
          __int16 v109 = nw_endpoint_handler_copy_current_path(v171);
          __uint64_t v110 = nw_endpoint_get_logging_description(v167);
          *(_DWORD *)buf = 136448002;
          v178 = "nw_endpoint_proxy_add_child_for_config";
          v179 = 2082;
          v180 = (void *)v104;
          v181 = 2082;
          v182 = v105;
          v183 = 2082;
          v184 = v106;
          v185 = 2082;
          v186 = v107;
          v187 = 2082;
          v188 = v108;
          v189 = 2114;
          v190 = v109;
          v191 = 2082;
          v192 = v110;
          _os_log_impl( &dword_181A5C000,  v81,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] adding endpoint handler for %{public}s",  buf,  0x52u);
        }
      }

      else
      {
        if ((logging_disabled & 1) != 0)
        {
LABEL_96:
          nw_array_append(*((void *)v169 + 1), inner);
          goto LABEL_97;
        }

        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        v81 = (os_log_s *)(id)gconnectionLogObj;
        if (os_log_type_enabled(v81, OS_LOG_TYPE_INFO))
        {
          v82 = nw_endpoint_handler_get_id_string(v171);
          os_log_type_t v83 = nw_endpoint_handler_dry_run_string(v171);
          v84 = nw_endpoint_handler_copy_endpoint(v171);
          v85 = nw_endpoint_get_logging_description(v84);
          v86 = nw_endpoint_handler_state_string(v171);
          os_log_type_t v87 = nw_endpoint_handler_mode_string(v171);
          v88 = nw_endpoint_handler_copy_current_path(v171);
          os_log_type_t v89 = nw_endpoint_get_logging_description(v167);
          *(_DWORD *)buf = 136448002;
          v178 = "nw_endpoint_proxy_add_child_for_config";
          v179 = 2082;
          v180 = (void *)v82;
          v181 = 2082;
          v182 = v83;
          v183 = 2082;
          v184 = v85;
          v185 = 2082;
          v186 = v86;
          v187 = 2082;
          v188 = v87;
          v189 = 2114;
          v190 = v88;
          v191 = 2082;
          v192 = v89;
          _os_log_impl( &dword_181A5C000,  v81,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] adding endpoint handler for %{public}s",  buf,  0x52u);
        }
      }

      goto LABEL_96;
    }

    __nwlog_obj();
    v96 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v178 = "nw_endpoint_proxy_add_child_for_config";
    os_log_type_t v97 = (char *)_os_log_send_and_compose_impl();

    v176 = OS_LOG_TYPE_ERROR;
    v172 = 0;
    if (__nwlog_fault(v97, &v176, &v172))
    {
      if (v176 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v98 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v99 = v176;
        if (os_log_type_enabled(v98, v176))
        {
          *(_DWORD *)buf = 136446210;
          v178 = "nw_endpoint_proxy_add_child_for_config";
          _os_log_impl(&dword_181A5C000, v98, v99, "%{public}s called with null child_endpoint", buf, 0xCu);
        }
      }

      else
      {
        if (v172)
        {
          uint64_t v115 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v116 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v117 = v176;
          v118 = os_log_type_enabled(v116, v176);
          if (v115)
          {
            if (v118)
            {
              *(_DWORD *)buf = 136446466;
              v178 = "nw_endpoint_proxy_add_child_for_config";
              v179 = 2082;
              v180 = v115;
              _os_log_impl( &dword_181A5C000,  v116,  v117,  "%{public}s called with null child_endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v115);
          }

          else
          {
            if (v118)
            {
              *(_DWORD *)buf = 136446210;
              v178 = "nw_endpoint_proxy_add_child_for_config";
              _os_log_impl( &dword_181A5C000,  v116,  v117,  "%{public}s called with null child_endpoint, no backtrace",  buf,  0xCu);
            }
          }

          goto LABEL_178;
        }

        __nwlog_obj();
        BOOL v98 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v130 = v176;
        if (os_log_type_enabled(v98, v176))
        {
          *(_DWORD *)buf = 136446210;
          v178 = "nw_endpoint_proxy_add_child_for_config";
          _os_log_impl( &dword_181A5C000,  v98,  v130,  "%{public}s called with null child_endpoint, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

      free(v16);
      if (!v10) {
        return 0LL;
      }
      goto LABEL_56;
    }

    id v11 = (os_log_s *)__nwlog_obj();
    os_log_type_t v12 = type;
    if (!os_log_type_enabled(v11, type)) {
      goto LABEL_55;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v23 = "nw_protocol_masque_listener_get_input_frames";
    os_log_type_t v13 = "%{public}s called with null masque";
LABEL_54:
    _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
    goto LABEL_55;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v23 = "nw_protocol_masque_listener_get_input_frames";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v20 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_55;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v23 = "nw_protocol_masque_listener_get_input_frames";
      os_log_type_t v13 = "%{public}s called with null input_protocol";
      goto LABEL_54;
    }

    if (!v20)
    {
      id v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_55;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v23 = "nw_protocol_masque_listener_get_input_frames";
      os_log_type_t v13 = "%{public}s called with null input_protocol, backtrace limit exceeded";
      goto LABEL_54;
    }

    int v16 = (char *)__nw_create_backtrace_string();
    id v11 = (os_log_s *)__nwlog_obj();
    os_log_type_t v12 = type;
    char v19 = os_log_type_enabled(v11, type);
    if (!v16)
    {
      if (!v19) {
        goto LABEL_55;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v23 = "nw_protocol_masque_listener_get_input_frames";
      os_log_type_t v13 = "%{public}s called with null input_protocol, no backtrace";
      goto LABEL_54;
    }

    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v23 = "nw_protocol_masque_listener_get_input_frames";
      BOOL v24 = 2082;
      os_log_type_t v25 = v16;
      os_log_type_t v18 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
      goto LABEL_39;
    }

    goto LABEL_40;
  }

  output_handler_context = a2->output_handler_context;
  if (!output_handler_context)
  {
    if ((handle[529] & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
      }
      int v9 = (os_log_s *)gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v23 = handle + 531;
        BOOL v24 = 2080;
        os_log_type_t v25 = " ";
        _os_log_impl(&dword_181A5C000, v9, OS_LOG_TYPE_ERROR, "%{public}s%sNo valid node found", buf, 0x16u);
      }
    }

    return 0LL;
  }

  if (output_handler_context[4]) {
    return nw_frame_array_fill_from_pending_array(output_handler_context + 4, (uint64_t)a6, a4, a5);
  }
  else {
    return nw_protocol_masque_listener_read_input( (uint64_t)handle,  (uint64_t)output_handler_context,  (uint64_t)a6,  a3,  a4,  a5);
  }
}

  free(v11);
  if (v5) {
LABEL_60:
  }
    free(v5);
}

    _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0xCu);
    goto LABEL_41;
  }

  handle = a1->handle;
  if (handle)
  {
    if (*((_DWORD *)handle + 86) == 1)
    {
      if ((handle[348] & 1) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v3 = (os_log_s *)gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          id v17 = "nw_protocol_ohttp_input_finished";
          os_log_type_t v18 = 2082;
          char v19 = handle + 349;
          os_log_type_t v20 = 2080;
          BOOL v21 = " ";
          _os_log_impl( &dword_181A5C000,  v3,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sReceived input finished",  buf,  0x20u);
        }
      }

      nw_protocol_ohttp_read_response((uint64_t)handle);
    }

    else if ((handle[348] & 1) == 0)
    {
      if (gLogDatapath)
      {
        os_log_type_t v12 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          os_log_type_t v13 = *((_DWORD *)handle + 86);
          *(_DWORD *)buf = 136446978;
          id v17 = "nw_protocol_ohttp_input_finished";
          os_log_type_t v18 = 2082;
          char v19 = handle + 349;
          os_log_type_t v20 = 2080;
          BOOL v21 = " ";
          v22 = 1024;
          os_log_type_t v23 = v13;
          _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sskipping, state %u",  buf,  0x26u);
        }
      }
    }

    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v17 = "nw_protocol_ohttp_input_finished";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v14 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    char v5 = (os_log_s *)__nwlog_obj();
    id v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    id v17 = "nw_protocol_ohttp_input_finished";
    uint64_t v7 = "%{public}s called with null ohttp";
    goto LABEL_40;
  }

  if (!v14)
  {
    char v5 = (os_log_s *)__nwlog_obj();
    id v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    id v17 = "nw_protocol_ohttp_input_finished";
    uint64_t v7 = "%{public}s called with null ohttp, backtrace limit exceeded";
    goto LABEL_40;
  }

  os_log_type_t v10 = (char *)__nw_create_backtrace_string();
  char v5 = (os_log_s *)__nwlog_obj();
  id v6 = type;
  id v11 = os_log_type_enabled(v5, type);
  if (!v10)
  {
    if (!v11) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    id v17 = "nw_protocol_ohttp_input_finished";
    uint64_t v7 = "%{public}s called with null ohttp, no backtrace";
    goto LABEL_40;
  }

  if (v11)
  {
    *(_DWORD *)buf = 136446466;
    id v17 = "nw_protocol_ohttp_input_finished";
    os_log_type_t v18 = 2082;
    char v19 = v10;
    _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null ohttp, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v10);
  if (v4) {
    goto LABEL_42;
  }
}

  free(v11);
  if (v5) {
LABEL_60:
  }
    free(v5);
}

    if (v18) {
      free(v18);
    }
    return;
  }

  id v3 = v1;
  uint64_t v4 = v3[29];

  if ((_DWORD)v4 == 1)
  {
    minimize_logging = nw_endpoint_handler_get_minimize_logging(*(void **)(a1 + 32));
    logging_disabled = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32));
    if (minimize_logging)
    {
      if ((logging_disabled & 1) != 0)
      {
LABEL_10:
        return;
      }

      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v7 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        v22 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        os_log_type_t v23 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        logging_description = nw_endpoint_get_logging_description(v23);
        os_log_type_t v25 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        os_log_type_t v26 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        char v27 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        *(_DWORD *)buf = 136447746;
        v35 = "nw_endpoint_resolver_check_desperate_ivan_block_invoke";
        id v36 = 2082;
        v37 = (void *)id_string;
        v38 = 2082;
        os_log_type_t v39 = v22;
        v40 = 2082;
        os_log_type_t v41 = logging_description;
        BOOL v42 = 2082;
        char v43 = v25;
        dispatch_workloop_t v44 = 2082;
        v45 = v26;
        os_log_type_t v46 = 2114;
        os_log_type_t v47 = v27;
        _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Connectivity seems very slow, adding DesperateIvan endpoint handler",  buf,  0x48u);
      }
    }

    else
    {
      if ((logging_disabled & 1) != 0) {
        goto LABEL_10;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v7 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        int v8 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
        int v9 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
        os_log_type_t v10 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
        id v11 = nw_endpoint_get_logging_description(v10);
        os_log_type_t v12 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
        os_log_type_t v13 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
        os_log_type_t v14 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
        *(_DWORD *)buf = 136447746;
        v35 = "nw_endpoint_resolver_check_desperate_ivan_block_invoke";
        id v36 = 2082;
        v37 = (void *)v8;
        v38 = 2082;
        os_log_type_t v39 = v9;
        v40 = 2082;
        os_log_type_t v41 = v11;
        BOOL v42 = 2082;
        char v43 = v12;
        dispatch_workloop_t v44 = 2082;
        v45 = v13;
        os_log_type_t v46 = 2114;
        os_log_type_t v47 = v14;
        _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Connectivity seems very slow, adding DesperateIvan endpoint handler",  buf,  0x48u);
      }
    }

    goto LABEL_10;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v15 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    else {
      int v16 = off_189BBBBC0[v4];
    }
    *(_DWORD *)buf = 136446722;
    v35 = "nw_endpoint_resolver_check_desperate_ivan_block_invoke";
    id v36 = 2082;
    v37 = (void *)v16;
    v38 = 2082;
    os_log_type_t v39 = "resolver";
    _os_log_impl( &dword_181A5C000,  v15,  OS_LOG_TYPE_DEFAULT,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
  }
}

  if (v15) {
    free(v15);
  }
  return 0LL;
}

    _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0xCu);
    goto LABEL_41;
  }

  handle = a1->handle;
  if (handle)
  {
    if ((*((_BYTE *)handle + 276) & 0x10) == 0)
    {
      if (gLogDatapath)
      {
        int v8 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          int v9 = handle[11];
          if (v9) {
            os_log_type_t v10 = *(_DWORD *)(v9 + 460);
          }
          else {
            os_log_type_t v10 = -1;
          }
          id v15 = handle[8];
          *(_DWORD *)buf = 136447234;
          char v19 = "nw_protocol_webtransport_stream_input_available";
          os_log_type_t v20 = 2082;
          BOOL v21 = (char *)(handle + 24);
          v22 = 2080;
          os_log_type_t v23 = " ";
          BOOL v24 = 1024;
          os_log_type_t v25 = v10;
          os_log_type_t v26 = 2048;
          char v27 = v15;
          _os_log_impl(&dword_181A5C000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called", buf, 0x30u);
        }
      }
    }

    if (*((_DWORD *)handle + 46) == 2) {
      nw_protocol_input_available((void *)handle[6], (uint64_t)a1);
    }
    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v19 = "nw_protocol_webtransport_stream_input_available";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  int v16 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    char v5 = (os_log_s *)__nwlog_obj();
    id v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_webtransport_stream_input_available";
    uint64_t v7 = "%{public}s called with null webtransport_stream";
    goto LABEL_40;
  }

  if (!v16)
  {
    char v5 = (os_log_s *)__nwlog_obj();
    id v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_webtransport_stream_input_available";
    uint64_t v7 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
    goto LABEL_40;
  }

  os_log_type_t v13 = (char *)__nw_create_backtrace_string();
  char v5 = (os_log_s *)__nwlog_obj();
  id v6 = type;
  os_log_type_t v14 = os_log_type_enabled(v5, type);
  if (!v13)
  {
    if (!v14) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_webtransport_stream_input_available";
    uint64_t v7 = "%{public}s called with null webtransport_stream, no backtrace";
    goto LABEL_40;
  }

  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    char v19 = "nw_protocol_webtransport_stream_input_available";
    os_log_type_t v20 = 2082;
    BOOL v21 = v13;
    _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v13);
  if (v4) {
    goto LABEL_42;
  }
}

    _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0xCu);
    goto LABEL_41;
  }

  handle = a1->handle;
  if (handle)
  {
    if ((*((_BYTE *)handle + 276) & 0x10) == 0)
    {
      if (gLogDatapath)
      {
        int v8 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          int v9 = handle[11];
          if (v9) {
            os_log_type_t v10 = *(_DWORD *)(v9 + 460);
          }
          else {
            os_log_type_t v10 = -1;
          }
          id v15 = handle[8];
          *(_DWORD *)buf = 136447234;
          char v19 = "nw_protocol_webtransport_stream_output_available";
          os_log_type_t v20 = 2082;
          BOOL v21 = (char *)(handle + 24);
          v22 = 2080;
          os_log_type_t v23 = " ";
          BOOL v24 = 1024;
          os_log_type_t v25 = v10;
          os_log_type_t v26 = 2048;
          char v27 = v15;
          _os_log_impl(&dword_181A5C000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called", buf, 0x30u);
        }
      }
    }

    if (*((_DWORD *)handle + 47) == 2) {
      nw_protocol_output_available((void *)handle[6], (uint64_t)a1);
    }
    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v19 = "nw_protocol_webtransport_stream_output_available";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  int v16 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    char v5 = (os_log_s *)__nwlog_obj();
    id v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_webtransport_stream_output_available";
    uint64_t v7 = "%{public}s called with null webtransport_stream";
    goto LABEL_40;
  }

  if (!v16)
  {
    char v5 = (os_log_s *)__nwlog_obj();
    id v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_webtransport_stream_output_available";
    uint64_t v7 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
    goto LABEL_40;
  }

  os_log_type_t v13 = (char *)__nw_create_backtrace_string();
  char v5 = (os_log_s *)__nwlog_obj();
  id v6 = type;
  os_log_type_t v14 = os_log_type_enabled(v5, type);
  if (!v13)
  {
    if (!v14) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_webtransport_stream_output_available";
    uint64_t v7 = "%{public}s called with null webtransport_stream, no backtrace";
    goto LABEL_40;
  }

  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    char v19 = "nw_protocol_webtransport_stream_output_available";
    os_log_type_t v20 = 2082;
    BOOL v21 = v13;
    _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v13);
  if (v4) {
    goto LABEL_42;
  }
}

    _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0xCu);
    goto LABEL_41;
  }

  handle = a1->handle;
  if (handle)
  {
    if ((*((_BYTE *)handle + 276) & 0x10) == 0)
    {
      if (gLogDatapath)
      {
        int v8 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          int v9 = handle[11];
          if (v9) {
            os_log_type_t v10 = *(_DWORD *)(v9 + 460);
          }
          else {
            os_log_type_t v10 = -1;
          }
          id v15 = handle[8];
          *(_DWORD *)buf = 136447234;
          char v19 = "nw_protocol_webtransport_http3_stream_input_finished";
          os_log_type_t v20 = 2082;
          BOOL v21 = (char *)(handle + 24);
          v22 = 2080;
          os_log_type_t v23 = " ";
          BOOL v24 = 1024;
          os_log_type_t v25 = v10;
          os_log_type_t v26 = 2048;
          char v27 = v15;
          _os_log_impl(&dword_181A5C000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called", buf, 0x30u);
        }
      }
    }

    if (*((_DWORD *)handle + 46) == 2) {
      nw_protocol_input_finished((void *)handle[6], (uint64_t)a1);
    }
    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v19 = "nw_protocol_webtransport_http3_stream_input_finished";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  int v16 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    char v5 = (os_log_s *)__nwlog_obj();
    id v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_webtransport_http3_stream_input_finished";
    uint64_t v7 = "%{public}s called with null webtransport_stream";
    goto LABEL_40;
  }

  if (!v16)
  {
    char v5 = (os_log_s *)__nwlog_obj();
    id v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_webtransport_http3_stream_input_finished";
    uint64_t v7 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
    goto LABEL_40;
  }

  os_log_type_t v13 = (char *)__nw_create_backtrace_string();
  char v5 = (os_log_s *)__nwlog_obj();
  id v6 = type;
  os_log_type_t v14 = os_log_type_enabled(v5, type);
  if (!v13)
  {
    if (!v14) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_webtransport_http3_stream_input_finished";
    uint64_t v7 = "%{public}s called with null webtransport_stream, no backtrace";
    goto LABEL_40;
  }

  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    char v19 = "nw_protocol_webtransport_http3_stream_input_finished";
    os_log_type_t v20 = 2082;
    BOOL v21 = v13;
    _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v13);
  if (v4) {
    goto LABEL_42;
  }
}

      free(backtrace_string);
      goto LABEL_56;
    }

    if (!v24) {
      goto LABEL_56;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_get_input_frames";
    int v16 = "%{public}s called with null input_protocol, no backtrace";
LABEL_55:
    _os_log_impl(&dword_181A5C000, v14, v15, v16, buf, 0xCu);
LABEL_56:
    if (v13) {
      free(v13);
    }
    return 0LL;
  }

  if ((*((_BYTE *)handle + 276) & 0x10) == 0)
  {
    if (gLogDatapath)
    {
      id v17 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        os_log_type_t v18 = handle[11];
        if (v18) {
          char v19 = *(_DWORD *)(v18 + 460);
        }
        else {
          char v19 = -1;
        }
        os_log_type_t v25 = handle[8];
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_protocol_webtransport_http2_stream_get_input_frames";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = handle + 24;
        *(_WORD *)&buf[22] = 2080;
        id v36 = " ";
        v37 = 1024;
        v38 = v19;
        os_log_type_t v39 = 2048;
        v40 = v25;
        _os_log_impl(&dword_181A5C000, v17, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called", buf, 0x30u);
      }
    }
  }

  if ((nw_protocol *)handle[6] != a2 || *((_DWORD *)handle + 46) != 2) {
    return 0LL;
  }
  a6->tqh_first = 0LL;
  a6->tqh_last = &a6->tqh_first;
  *(void *)buf = 0LL;
  *(void *)&buf[8] = buf;
  LODWORD(v36) = 0;
  *(void *)&buf[16] = 0x2000000000LL;
  v27[0] = MEMORY[0x1895F87A8];
  v27[1] = 0x40000000LL;
  os_log_type_t v28 = (uint64_t (*)(void *))___ZL54nw_protocol_webtransport_http2_stream_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke;
  objc_super v29 = &unk_189BBC510;
  v31 = handle;
  os_log_type_t v32 = a6;
  os_log_type_t v30 = buf;
  int v9 = handle[9];
  do
  {
    if (!v9) {
      break;
    }
    os_log_type_t v10 = *(void *)(v9 + 32);
    id v11 = v28(v27);
    int v9 = v10;
  }

  while ((v11 & 1) != 0);
  os_log_type_t v12 = *(unsigned int *)(*(void *)&buf[8] + 24LL);
  _Block_object_dispose(buf, 8);
  return v12;
}

    _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0xCu);
    goto LABEL_41;
  }

  handle = a1->handle;
  if (handle)
  {
    if ((*((_BYTE *)handle + 276) & 0x10) == 0)
    {
      if (gLogDatapath)
      {
        int v8 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          int v9 = handle[11];
          if (v9) {
            os_log_type_t v10 = *(_DWORD *)(v9 + 460);
          }
          else {
            os_log_type_t v10 = -1;
          }
          id v15 = handle[8];
          *(_DWORD *)buf = 136447234;
          char v19 = "nw_protocol_webtransport_http2_stream_input_finished";
          os_log_type_t v20 = 2082;
          BOOL v21 = (char *)(handle + 24);
          v22 = 2080;
          os_log_type_t v23 = " ";
          BOOL v24 = 1024;
          os_log_type_t v25 = v10;
          os_log_type_t v26 = 2048;
          char v27 = v15;
          _os_log_impl(&dword_181A5C000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called", buf, 0x30u);
        }
      }
    }

    if (*((_DWORD *)handle + 46) == 2) {
      nw_protocol_input_finished((void *)handle[6], (uint64_t)a1);
    }
    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v19 = "nw_protocol_webtransport_http2_stream_input_finished";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  int v16 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    char v5 = (os_log_s *)__nwlog_obj();
    id v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_webtransport_http2_stream_input_finished";
    uint64_t v7 = "%{public}s called with null webtransport_stream";
    goto LABEL_40;
  }

  if (!v16)
  {
    char v5 = (os_log_s *)__nwlog_obj();
    id v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_webtransport_http2_stream_input_finished";
    uint64_t v7 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
    goto LABEL_40;
  }

  os_log_type_t v13 = (char *)__nw_create_backtrace_string();
  char v5 = (os_log_s *)__nwlog_obj();
  id v6 = type;
  os_log_type_t v14 = os_log_type_enabled(v5, type);
  if (!v13)
  {
    if (!v14) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_protocol_webtransport_http2_stream_input_finished";
    uint64_t v7 = "%{public}s called with null webtransport_stream, no backtrace";
    goto LABEL_40;
  }

  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    char v19 = "nw_protocol_webtransport_http2_stream_input_finished";
    os_log_type_t v20 = 2082;
    BOOL v21 = v13;
    _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v13);
  if (v4) {
    goto LABEL_42;
  }
}

    v53 = *v8;
    BOOL v54 = *(unsigned __int8 *)(a2 + v53);
    if (*(_BYTE *)(a2 + v53)) {
      int v16 = 0LL;
    }
LABEL_42:
    uint64_t v55 = v16 & 7;
    if (v54) {
      v56 = 1;
    }
    else {
      v56 = v55 == 4;
    }
    if (v56) {
      return *(_BYTE *)(a2 + *v8) == 0;
    }
    BOOL v57 = (_BYTE *)(a2 + v53);
    switch((v16 >> 3))
    {
      case 1u:
        id v11 = PBReaderReadString();
        os_log_type_t v12 = 56LL;
        goto LABEL_4;
      case 2u:
        id v11 = PBReaderReadString();
        os_log_type_t v12 = 72LL;
        goto LABEL_4;
      case 3u:
        id v11 = PBReaderReadString();
        os_log_type_t v12 = 80LL;
        goto LABEL_4;
      case 4u:
        id v11 = PBReaderReadString();
        os_log_type_t v12 = 144LL;
        goto LABEL_4;
      case 5u:
        id v11 = PBReaderReadString();
        os_log_type_t v12 = 176LL;
        goto LABEL_4;
      case 6u:
        *(_WORD *)(a1 + 196) |= 4u;
        v390 = *v3;
        v391 = *(void *)(a2 + v390);
        if (v391 == -1LL || v391 >= *(void *)(a2 + *v6))
        {
          v394 = 0;
LABEL_662:
          *(_BYTE *)(a2 + *v8) = 1;
          goto LABEL_663;
        }

        v392 = v391 + 1;
        v393 = *(_BYTE *)(*(void *)(a2 + *v10) + v391);
        *(void *)(a2 + v390) = v392;
        v394 = v393 & 0x7F;
        if ((v393 & 0x80) == 0) {
          goto LABEL_663;
        }
        v395 = *v3;
        v396 = *(void *)(a2 + v395);
        if (v396 == -1LL || v396 >= *(void *)(a2 + *v6)) {
          goto LABEL_662;
        }
        v397 = *(char *)(*(void *)(a2 + *v10) + v396);
        *(void *)(a2 + v395) = v396 + 1;
        v394 = v394 & 0xFFFFC07F | ((v397 & 0x7F) << 7);
        if ((v397 & 0x80000000) == 0) {
          goto LABEL_663;
        }
        v398 = *v3;
        v399 = *(void *)(a2 + v398);
        if (v399 == -1LL || v399 >= *(void *)(a2 + *v6)) {
          goto LABEL_662;
        }
        v400 = *(char *)(*(void *)(a2 + *v10) + v399);
        *(void *)(a2 + v398) = v399 + 1;
        v394 = v394 & 0xFFE03FFF | ((v400 & 0x7F) << 14);
        if ((v400 & 0x80000000) == 0) {
          goto LABEL_663;
        }
        v401 = *v3;
        v402 = *(void *)(a2 + v401);
        if (v402 == -1LL || v402 >= *(void *)(a2 + *v6)) {
          goto LABEL_662;
        }
        v403 = *(char *)(*(void *)(a2 + *v10) + v402);
        *(void *)(a2 + v401) = v402 + 1;
        v394 = v394 & 0xF01FFFFF | ((v403 & 0x7F) << 21);
        if ((v403 & 0x80000000) == 0) {
          goto LABEL_663;
        }
        v404 = *v3;
        v405 = *(void *)(a2 + v404);
        if (v405 == -1LL || v405 >= *(void *)(a2 + *v6)) {
          goto LABEL_662;
        }
        v406 = v405 + 1;
        v407 = *(char *)(*(void *)(a2 + *v10) + v405);
        *(void *)(a2 + v404) = v406;
        v394 |= v407 << 28;
        if ((v407 & 0x80000000) == 0) {
          goto LABEL_663;
        }
        v408 = *v3;
        v409 = *(void *)(a2 + v408);
        if (v409 == -1LL || v409 >= *(void *)(a2 + *v6)) {
          goto LABEL_662;
        }
        v410 = v409 + 1;
        v411 = *(char *)(*(void *)(a2 + *v10) + v409);
        *(void *)(a2 + v408) = v410;
        if ((v411 & 0x80000000) == 0) {
          goto LABEL_663;
        }
        v412 = *v3;
        v413 = *(void *)(a2 + v412);
        if (v413 == -1LL || v413 >= *(void *)(a2 + *v6)) {
          goto LABEL_662;
        }
        v414 = v413 + 1;
        v415 = *(char *)(*(void *)(a2 + *v10) + v413);
        *(void *)(a2 + v412) = v414;
        if ((v415 & 0x80000000) == 0) {
          goto LABEL_663;
        }
        v416 = *v3;
        v417 = *(void *)(a2 + v416);
        if (v417 == -1LL || v417 >= *(void *)(a2 + *v6)) {
          goto LABEL_662;
        }
        v418 = v417 + 1;
        v419 = *(char *)(*(void *)(a2 + *v10) + v417);
        *(void *)(a2 + v416) = v418;
        if ((v419 & 0x80000000) == 0) {
          goto LABEL_663;
        }
        v420 = *v3;
        v421 = *(void *)(a2 + v420);
        if (v421 == -1LL || v421 >= *(void *)(a2 + *v6)) {
          goto LABEL_662;
        }
        v422 = v421 + 1;
        v423 = *(char *)(*(void *)(a2 + *v10) + v421);
        *(void *)(a2 + v420) = v422;
        if ((v423 & 0x80000000) == 0) {
          goto LABEL_663;
        }
        v424 = *v3;
        v425 = *(void *)(a2 + v424);
        if (v425 == -1LL || v425 >= *(void *)(a2 + *v6)) {
          goto LABEL_662;
        }
        v426 = v425 + 1;
        v427 = *(char *)(*(void *)(a2 + *v10) + v425);
        *(void *)(a2 + v424) = v426;
        if (v427 < 0)
        {
          v394 = 0;
          goto LABEL_665;
        }

LABEL_41:
      if (v15) {
        free(v15);
      }
      goto LABEL_11;
    }

    if (!v24)
    {
      __nwlog_obj();
      int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_socks5_server_fillout_statistics";
        os_log_type_t v18 = "%{public}s called with null server, backtrace limit exceeded";
        goto LABEL_39;
      }

      goto LABEL_40;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    id v17 = type;
    BOOL v21 = os_log_type_enabled(v16, type);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_socks5_server_fillout_statistics";
        os_log_type_t v18 = "%{public}s called with null server, no backtrace";
        goto LABEL_39;
      }

      goto LABEL_40;
    }

    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_socks5_server_fillout_statistics";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      v22 = "%{public}s called with null server, dumping backtrace:%{public}s";
LABEL_29:
      _os_log_impl(&dword_181A5C000, v16, v17, v22, buf, 0x16u);
    }

    goto LABEL_41;
  }

  int v8 = (unsigned int *)v6;
  int v9 = v8[29];

  if ((_DWORD)v9 != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v11 = (id)gLogObj;
    else {
      os_log_type_t v12 = off_189BBBBC0[v9];
    }
    *(_DWORD *)buf = 136446722;
    v40 = "-[NWConcrete_nw_endpoint_fallback applyWithHandler:toChildren:]";
    os_log_type_t v41 = 2082;
    BOOL v42 = (void *)v12;
    char v43 = 2082;
    dispatch_workloop_t v44 = "fallback";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (__nwlog_fault(v13, &type, &v37))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = (os_log_s *)(id)gLogObj;
        id v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          else {
            int v16 = off_189BBBBC0[v9];
          }
          *(_DWORD *)buf = 136446722;
          v40 = "-[NWConcrete_nw_endpoint_fallback applyWithHandler:toChildren:]";
          os_log_type_t v41 = 2082;
          BOOL v42 = (void *)v16;
          char v43 = 2082;
          dispatch_workloop_t v44 = "fallback";
          _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
        }
      }

      else if (v37)
      {
        id v17 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = (os_log_s *)(id)gLogObj;
        os_log_type_t v18 = type;
        char v19 = os_log_type_enabled(v14, type);
        if (v17)
        {
          if (v19)
          {
            else {
              os_log_type_t v20 = off_189BBBBC0[v9];
            }
            *(_DWORD *)buf = 136446978;
            v40 = "-[NWConcrete_nw_endpoint_fallback applyWithHandler:toChildren:]";
            os_log_type_t v41 = 2082;
            BOOL v42 = (void *)v20;
            char v43 = 2082;
            dispatch_workloop_t v44 = "fallback";
            v45 = 2082;
            os_log_type_t v46 = v17;
            _os_log_impl( &dword_181A5C000,  v14,  v18,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v17);
          if (!v13) {
            goto LABEL_43;
          }
          goto LABEL_42;
        }

        if (v19)
        {
          else {
            os_log_type_t v23 = off_189BBBBC0[v9];
          }
          *(_DWORD *)buf = 136446722;
          v40 = "-[NWConcrete_nw_endpoint_fallback applyWithHandler:toChildren:]";
          os_log_type_t v41 = 2082;
          BOOL v42 = (void *)v23;
          char v43 = 2082;
          dispatch_workloop_t v44 = "fallback";
          _os_log_impl( &dword_181A5C000,  v14,  v18,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = (os_log_s *)(id)gLogObj;
        BOOL v21 = type;
        if (os_log_type_enabled(v14, type))
        {
          else {
            v22 = off_189BBBBC0[v9];
          }
          *(_DWORD *)buf = 136446722;
          v40 = "-[NWConcrete_nw_endpoint_fallback applyWithHandler:toChildren:]";
          os_log_type_t v41 = 2082;
          BOOL v42 = (void *)v22;
          char v43 = 2082;
          dispatch_workloop_t v44 = "fallback";
          _os_log_impl( &dword_181A5C000,  v14,  v21,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
        }
      }

      goto LABEL_40;
    }

    goto LABEL_41;
  }

  if (!v7)
  {
    __nwlog_obj();
    char v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v40 = "-[NWConcrete_nw_endpoint_fallback applyWithHandler:toChildren:]";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (__nwlog_fault(v13, &type, &v37))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v40 = "-[NWConcrete_nw_endpoint_fallback applyWithHandler:toChildren:]";
          _os_log_impl(&dword_181A5C000, v14, v28, "%{public}s called with null applyBlock", buf, 0xCu);
        }
      }

      else if (v37)
      {
        os_log_type_t v32 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v33 = type;
        dispatch_workloop_t v34 = os_log_type_enabled(v14, type);
        if (v32)
        {
          if (v34)
          {
            *(_DWORD *)buf = 136446466;
            v40 = "-[NWConcrete_nw_endpoint_fallback applyWithHandler:toChildren:]";
            os_log_type_t v41 = 2082;
            BOOL v42 = v32;
            _os_log_impl( &dword_181A5C000,  v14,  v33,  "%{public}s called with null applyBlock, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v32);
          if (!v13) {
            goto LABEL_43;
          }
          goto LABEL_42;
        }

        if (v34)
        {
          *(_DWORD *)buf = 136446210;
          v40 = "-[NWConcrete_nw_endpoint_fallback applyWithHandler:toChildren:]";
          _os_log_impl(&dword_181A5C000, v14, v33, "%{public}s called with null applyBlock, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v36 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v40 = "-[NWConcrete_nw_endpoint_fallback applyWithHandler:toChildren:]";
          _os_log_impl( &dword_181A5C000,  v14,  v36,  "%{public}s called with null applyBlock, backtrace limit exceeded",  buf,  0xCu);
        }
      }

      goto LABEL_40;
    }

      free(v18);
      if (!v12) {
        return;
      }
LABEL_56:
      free(v12);
      return;
    }

    os_log_type_t v13 = (os_log_s *)__nwlog_obj();
    os_log_type_t v14 = type;
    if (!os_log_type_enabled(v13, type)) {
      goto LABEL_55;
    }
    *(_DWORD *)buf = 136446210;
    char v27 = "nw_protocol_http2_transport_error";
    id v15 = "%{public}s called with null http2_transport";
LABEL_54:
    _os_log_impl(&dword_181A5C000, v13, v14, v15, buf, 0xCu);
    goto LABEL_55;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v27 = "nw_protocol_http2_transport_error";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_55;
      }
      *(_DWORD *)buf = 136446210;
      char v27 = "nw_protocol_http2_transport_error";
      id v15 = "%{public}s called with null other_protocol";
      goto LABEL_54;
    }

    if (!v24)
    {
      os_log_type_t v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_55;
      }
      *(_DWORD *)buf = 136446210;
      char v27 = "nw_protocol_http2_transport_error";
      id v15 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_54;
    }

    os_log_type_t v18 = (char *)__nw_create_backtrace_string();
    os_log_type_t v13 = (os_log_s *)__nwlog_obj();
    os_log_type_t v14 = type;
    BOOL v21 = os_log_type_enabled(v13, type);
    if (!v18)
    {
      if (!v21) {
        goto LABEL_55;
      }
      *(_DWORD *)buf = 136446210;
      char v27 = "nw_protocol_http2_transport_error";
      id v15 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_54;
    }

    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      char v27 = "nw_protocol_http2_transport_error";
      os_log_type_t v28 = 2082;
      objc_super v29 = v18;
      os_log_type_t v20 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_39;
    }

    goto LABEL_40;
  }

  if (a3)
  {
    char v5 = (char *)*((void *)handle + 14);
    if (v5)
    {
      v22[0] = MEMORY[0x1895F87A8];
      v22[1] = 0x40000000LL;
      v22[2] = ___ZL33nw_protocol_http2_transport_errorP11nw_protocolS0_i_block_invoke;
      v22[3] = &__block_descriptor_tmp_42_37790;
      v22[4] = handle;
      os_log_type_t v23 = a3;
      nw_hash_table_apply(v5, (uint64_t)v22);
      return;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v11 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      char v27 = "nw_protocol_http2_transport_error";
      os_log_type_t v28 = 2082;
      objc_super v29 = handle + 205;
      os_log_type_t v30 = 1024;
      v31 = a3;
      uint64_t v7 = "%{public}s %{public}s cannot pass error %d up the stack, protocol table is NULL";
      int v8 = (os_log_s *)v11;
      int v9 = OS_LOG_TYPE_ERROR;
      os_log_type_t v10 = 28;
      goto LABEL_12;
    }
  }

  else if (gLogDatapath)
  {
    id v6 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      char v27 = "nw_protocol_http2_transport_error";
      os_log_type_t v28 = 2082;
      objc_super v29 = handle + 205;
      uint64_t v7 = "%{public}s %{public}s suppressing error 0";
      int v8 = v6;
      int v9 = OS_LOG_TYPE_DEBUG;
      os_log_type_t v10 = 22;
LABEL_12:
      _os_log_impl(&dword_181A5C000, v8, v9, v7, buf, v10);
    }
  }

            if (v14) {
              free(v14);
            }
            goto LABEL_42;
          }

  if (v8) {
    free(v8);
  }
  uint64_t v4 = 0LL;
LABEL_10:

  return (nw_proxy_config_t)v4;
}

    if (!v17 || !__len[0]) {
      goto LABEL_25;
    }
    if ((*(_WORD *)(*(void *)(v9 + 488) + 428LL) & 0x100) != 0)
    {
      if ((*(_WORD *)(v11 + 204) & 4) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446466;
        v364 = "nw_http1_connection_drain_outbound_frames";
        v365 = 2048;
        *(void *)v366 = v11;
        v62 = (char *)_os_log_send_and_compose_impl();
        LOBYTE(__len[1]) = 16;
        type[0] = OS_LOG_TYPE_DEFAULT;
        if (LOBYTE(__len[1]) == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v63 = gLogObj;
          os_log_type_t v64 = __len[1];
          if (!os_log_type_enabled((os_log_t)gLogObj, __len[1])) {
            goto LABEL_166;
          }
          *(_DWORD *)buf = 136446466;
          v364 = "nw_http1_connection_drain_outbound_frames";
          v365 = 2048;
          *(void *)v366 = v11;
          os_log_type_t v65 = (os_log_s *)v63;
          BOOL v66 = v64;
          os_log_type_t v67 = "%{public}s frame %p has no metadata";
        }

        else if (type[0])
        {
          v80 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v81 = (os_log_s *)gLogObj;
          v82 = __len[1];
          os_log_type_t v83 = os_log_type_enabled((os_log_t)gLogObj, __len[1]);
          if (v80)
          {
            if (v83)
            {
              *(_DWORD *)buf = 136446722;
              v364 = "nw_http1_connection_drain_outbound_frames";
              v365 = 2048;
              *(void *)v366 = v11;
              *(_WORD *)&v366[8] = 2082;
              *(void *)&v366[10] = v80;
              _os_log_impl( &dword_181A5C000,  v81,  v82,  "%{public}s frame %p has no metadata, dumping backtrace:%{public}s",  buf,  0x20u);
            }

            free(v80);
            int v9 = v348;
            goto LABEL_166;
          }

          int v9 = v348;
          if (!v83)
          {
LABEL_166:
            if (v62) {
              free(v62);
            }
            goto LABEL_26;
          }

          *(_DWORD *)buf = 136446466;
          v364 = "nw_http1_connection_drain_outbound_frames";
          v365 = 2048;
          *(void *)v366 = v11;
          os_log_type_t v65 = v81;
          BOOL v66 = v82;
          os_log_type_t v67 = "%{public}s frame %p has no metadata, no backtrace";
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v106 = gLogObj;
          v107 = __len[1];
          if (!os_log_type_enabled((os_log_t)gLogObj, __len[1])) {
            goto LABEL_166;
          }
          *(_DWORD *)buf = 136446466;
          v364 = "nw_http1_connection_drain_outbound_frames";
          v365 = 2048;
          *(void *)v366 = v11;
          os_log_type_t v65 = (os_log_s *)v106;
          BOOL v66 = v107;
          os_log_type_t v67 = "%{public}s frame %p has no metadata, backtrace limit exceeded";
        }

        _os_log_impl(&dword_181A5C000, v65, v66, v67, buf, 0x16u);
        goto LABEL_166;
      }

      if ((*(_BYTE *)(v11 + 216) & 1) != 0) {
        goto LABEL_43;
      }
      nw_frame_unclaim(v11, (uint64_t)a2, 0xAu, 7u);
      __uint64_t v76 = *(void *)(v11 + 112);
      if (v76)
      {
        if ((*(_WORD *)(v11 + 204) & 0x100) == 0 || !g_channel_check_validity)
        {
LABEL_130:
          v77 = v76 + *(unsigned int *)(v11 + 56);
          unint64_t v78 = *(void *)(v11 + 64);
          if (v78)
          {
LABEL_131:
            char v79 = (*(unsigned __int8 *)(v78 + 66) >> 6) & 1;
            goto LABEL_144;
          }

    if (gLogDatapath)
    {
      v99 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
      {
        os_log_type_t v100 = *(_DWORD *)(v3 + 372);
        BOOL v101 = *(_DWORD *)(v3 + 336);
        *(_DWORD *)buf = 136447490;
        *(void *)&uint8_t buf[4] = "nw_http1_remove_connection";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v3 + 74;
        *(_WORD *)&buf[22] = 2080;
        v140 = (uint64_t)" ";
        *(_WORD *)v141 = 1024;
        *(_DWORD *)&v141[2] = v100;
        *(_WORD *)&v141[6] = 2048;
        *(void *)&v141[8] = v2;
        *(_WORD *)&v141[16] = 1024;
        *(_DWORD *)&v141[18] = v101;
        _os_log_impl( &dword_181A5C000,  v99,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> removed connection %p, now have %u connections",  buf,  0x36u);
      }
    }

    goto LABEL_41;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http1_tear_down_connection";
  BOOL v66 = (char *)_os_log_send_and_compose_impl();
  LOBYTE(type) = 16;
  LOBYTE(v144) = 0;
  if (__nwlog_fault(v66, &type, &v144))
  {
    if (type == 17)
    {
      os_log_type_t v67 = (os_log_s *)__nwlog_obj();
      v68 = type;
      if (!os_log_type_enabled(v67, (os_log_type_t)type)) {
        goto LABEL_199;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_tear_down_connection";
      v69 = "%{public}s called with null http1";
      goto LABEL_198;
    }

    if (!(_BYTE)v144)
    {
      os_log_type_t v67 = (os_log_s *)__nwlog_obj();
      v68 = type;
      if (!os_log_type_enabled(v67, (os_log_type_t)type)) {
        goto LABEL_199;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_tear_down_connection";
      v69 = "%{public}s called with null http1, backtrace limit exceeded";
      goto LABEL_198;
    }

    __int16 v111 = (char *)__nw_create_backtrace_string();
    os_log_type_t v67 = (os_log_s *)__nwlog_obj();
    v68 = type;
    uint64_t v112 = os_log_type_enabled(v67, (os_log_type_t)type);
    if (v111)
    {
      if (v112)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_tear_down_connection";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v111;
        _os_log_impl( &dword_181A5C000,  v67,  v68,  "%{public}s called with null http1, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v111);
      goto LABEL_199;
    }

    if (v112)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_tear_down_connection";
      v69 = "%{public}s called with null http1, no backtrace";
LABEL_198:
      _os_log_impl(&dword_181A5C000, v67, v68, v69, buf, 0xCu);
    }
  }

    if (v16) {
      free(v16);
    }
    *(_DWORD *)(v10 + 368) = -1;
    goto LABEL_43;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http1_connection_cancel";
  os_log_type_t v47 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  unint64_t v74 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v47, type, &v74))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v48 = (os_log_s *)__nwlog_obj();
      id v49 = type[0];
      if (!os_log_type_enabled(v48, type[0])) {
        goto LABEL_117;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_cancel";
      v50 = "%{public}s called with null http1_connection";
      goto LABEL_116;
    }

    if (v74 == OS_LOG_TYPE_DEFAULT)
    {
      v48 = (os_log_s *)__nwlog_obj();
      id v49 = type[0];
      if (!os_log_type_enabled(v48, type[0])) {
        goto LABEL_117;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_cancel";
      v50 = "%{public}s called with null http1_connection, backtrace limit exceeded";
      goto LABEL_116;
    }

    uint64_t v55 = (char *)__nw_create_backtrace_string();
    v48 = (os_log_s *)__nwlog_obj();
    id v49 = type[0];
    v56 = os_log_type_enabled(v48, type[0]);
    if (v55)
    {
      if (v56)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http1_connection_cancel";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v55;
        _os_log_impl( &dword_181A5C000,  v48,  v49,  "%{public}s called with null http1_connection, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v55);
      goto LABEL_117;
    }

    if (v56)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http1_connection_cancel";
      v50 = "%{public}s called with null http1_connection, no backtrace";
LABEL_116:
      _os_log_impl(&dword_181A5C000, v48, v49, v50, buf, 0xCu);
    }
  }

    free(backtrace_string);
    goto LABEL_58;
  }

  uint64_t v7 = (os_log_s *)__nwlog_obj();
  int v8 = type;
  if (os_log_type_enabled(v7, type))
  {
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_http1_on_method";
    int v9 = "%{public}s called with null parsed_fields";
    goto LABEL_57;
  }

    free(backtrace_string);
    goto LABEL_58;
  }

  uint64_t v7 = (os_log_s *)__nwlog_obj();
  int v8 = type;
  if (os_log_type_enabled(v7, type))
  {
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_http1_on_url";
    int v9 = "%{public}s called with null parsed_fields";
    goto LABEL_57;
  }

    free(backtrace_string);
    goto LABEL_58;
  }

  uint64_t v7 = (os_log_s *)__nwlog_obj();
  int v8 = type;
  if (os_log_type_enabled(v7, type))
  {
    *(_DWORD *)buf = 136446210;
    char v19 = "nw_http1_on_header_value";
    int v9 = "%{public}s called with null parsed_fields";
    goto LABEL_57;
  }

      if (v9) {
        free(v9);
      }
      return 0LL;
    }

    if (!v17)
    {
      os_log_type_t v10 = (os_log_s *)__nwlog_obj();
      id v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "nw_protocol_replicate_copy_info";
        os_log_type_t v12 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_39;
      }

      goto LABEL_40;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = (os_log_s *)__nwlog_obj();
    id v11 = type;
    os_log_type_t v14 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "nw_protocol_replicate_copy_info";
        os_log_type_t v12 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_39;
      }

      goto LABEL_40;
    }

    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v20 = "nw_protocol_replicate_copy_info";
      BOOL v21 = 2082;
      v22 = backtrace_string;
      id v15 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_29:
      _os_log_impl(&dword_181A5C000, v10, v11, v15, buf, 0x16u);
    }

      v53 = *((unsigned __int8 *)a3 + *v9);
      if (*((_BYTE *)a3 + *v9)) {
        int v16 = 0LL;
      }
LABEL_42:
      if (v53) {
        BOOL v54 = 1;
      }
      else {
        BOOL v54 = (v16 & 7) == 4;
      }
      if (v54) {
        return *((_BYTE *)a3 + *v9) == 0;
      }
      if ((v16 >> 3) == 2)
      {
        clientUUID = objc_alloc_init(&OBJC_CLASS___NWPBEndpoint);
        if (self)
        {
          discoveredEndpoints = self->_discoveredEndpoints;
          if (!discoveredEndpoints)
          {
            v56 = (NSMutableArray *)objc_alloc_init(MEMORY[0x189603FA8]);
            BOOL v57 = self->_discoveredEndpoints;
            self->_discoveredEndpoints = v56;

            discoveredEndpoints = self->_discoveredEndpoints;
          }

          -[NSMutableArray addObject:](discoveredEndpoints, "addObject:", clientUUID);
        }

        if (!PBReaderPlaceMark() || !NWPBEndpointReadFrom((uint64_t)clientUUID, (uint64_t)a3))
        {

          return 0;
        }

        PBReaderRecallMark();
        goto LABEL_4;
      }

      if ((v16 >> 3) == 1)
      {
        PBReaderReadString();
        os_log_type_t v12 = (NSString *)objc_claimAutoreleasedReturnValue();
        clientUUID = (NWPBEndpoint *)self->_clientUUID;
        self->_clientUUID = v12;
LABEL_4:

        goto LABEL_5;
      }

      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_5:
      char v5 = *v4;
      id v6 = *(void *)((char *)a3 + v5);
      int v8 = *(void *)((char *)a3 + *v7);
      if (v6 >= v8) {
        return *((_BYTE *)a3 + *v9) == 0;
      }
    }

    int v16 = 0LL;
LABEL_39:
    *os_log_type_t v14 = 1;
    goto LABEL_40;
  }

  return *((_BYTE *)a3 + *v9) == 0;
}

        goto LABEL_41;
      }

      os_log_type_t v30 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v24 = type;
      v31 = os_log_type_enabled(v23, type);
      if (!v30)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "-[NWNetworkAgentRegistration assignNexusData:toClient:]";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = (_DWORD)v8;
          os_log_type_t v25 = "%{public}s calloc(%u) failed, no backtrace";
          goto LABEL_39;
        }

        goto LABEL_40;
      }

      if (v31)
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "-[NWNetworkAgentRegistration assignNexusData:toClient:]";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = (_DWORD)v8;
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = v30;
        _os_log_impl( &dword_181A5C000,  v23,  v24,  "%{public}s calloc(%u) failed, dumping backtrace:%{public}s",  buf,  0x1Cu);
      }

      free(v30);
    }
  }

    free(v11);
    goto LABEL_41;
  }

  *(_DWORD *)(internal + 48) &= ~2u;
  self->_protocolHashTable = (nw_hash_table *)internal;
LABEL_43:

  return self;
}

  __break(1u);
  return result;
}

    nw_framer_mark_failed_with_error(v5, 14);
    goto LABEL_87;
  }

  CFHTTPMessageSetHeaderFieldValue((CFHTTPMessageRef)v57[3], @"Sec-WebSocket-Accept", (CFStringRef)v13);
  CFRelease((CFTypeRef)v13);
  if ((*(_WORD *)(a1 + 225) & 0x40) != 0)
  {
    Mutable = CFStringCreateMutable(0LL, 0LL);
    CFStringAppendCString(Mutable, "permessage-deflate", 0x8000100u);
    id v15 = *(_WORD *)(a1 + 225);
    if ((v15 & 0x80) == 0)
    {
      CFStringAppendCString(Mutable, "; server_no_context_takeover", 0x8000100u);
      id v15 = *(_WORD *)(a1 + 225);
    }

    if ((v15 & 0x100) == 0) {
      CFStringAppendCString(Mutable, "; client_no_context_takeover", 0x8000100u);
    }
    if ((*(_BYTE *)(a1 + 220) & 0xF8) == 8) {
      CFStringAppendFormat(Mutable, 0LL, @"; server_max_window_bits=%d", *(unsigned __int8 *)(a1 + 220));
    }
    if ((*(_BYTE *)(a1 + 221) & 0xF8) == 8) {
      CFStringAppendFormat(Mutable, 0LL, @"; client_max_window_bits=%d", *(unsigned __int8 *)(a1 + 221));
    }
    CFHTTPMessageSetHeaderFieldValue((CFHTTPMessageRef)v57[3], @"Sec-WebSocket-Extensions", Mutable);
    if (Mutable) {
      CFRelease(Mutable);
    }
  }

  if (!v7) {
    goto LABEL_30;
  }
  int v16 = v7;
  id v17 = (const char *)*((void *)v16 + 2);

  if (v17 && *v17)
  {
    os_log_type_t v18 = CFStringCreateWithCString(v9, v17, 0x8000100u);
    if (v18)
    {
      CFHTTPMessageSetHeaderFieldValue((CFHTTPMessageRef)v57[3], @"Sec-WebSocket-Protocol", v18);
      CFRelease(v18);
      goto LABEL_22;
    }

    __nwlog_obj();
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v61 = "nw_ws_write_server_response";
    os_log_type_t v39 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v54 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v41 = type;
      if (os_log_type_enabled(v40, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v61 = "nw_ws_write_server_response";
        _os_log_impl(&dword_181A5C000, v40, v41, "%{public}s CFStringCreateWithCString failed", buf, 0xCu);
      }
    }

    else if (v54)
    {
      char v43 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      dispatch_workloop_t v44 = type;
      v45 = os_log_type_enabled(v40, type);
      if (v43)
      {
        if (v45)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v61 = "nw_ws_write_server_response";
          v62 = 2082;
          os_log_type_t v63 = v43;
          _os_log_impl( &dword_181A5C000,  v40,  v44,  "%{public}s CFStringCreateWithCString failed, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v43);
        goto LABEL_94;
      }

      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v61 = "nw_ws_write_server_response";
        _os_log_impl(&dword_181A5C000, v40, v44, "%{public}s CFStringCreateWithCString failed, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v46 = type;
      if (os_log_type_enabled(v40, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v61 = "nw_ws_write_server_response";
        _os_log_impl( &dword_181A5C000,  v40,  v46,  "%{public}s CFStringCreateWithCString failed, backtrace limit exceeded",  buf,  0xCu);
      }
    }

LABEL_94:
    if (v39) {
      free(v39);
    }
    os_log_type_t v47 = (const void *)v57[3];
    if (v47)
    {
      CFRelease(v47);
      v57[3] = 0LL;
    }

    goto LABEL_86;
  }

    if (v13) {
      free(v13);
    }
    goto LABEL_13;
  }

  os_log_type_t v10 = strdup((const char *)v8);
  if (v10)
  {
LABEL_12:
    *((void *)v9 + 2) = v10;
LABEL_13:

    goto LABEL_17;
  }

  __nwlog_obj();
  int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  os_log_type_t v25 = "strict_strdup";
  id v17 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v17))
  {
    free(v17);
    goto LABEL_12;
  }

  __break(1u);
}

LABEL_14:
    if (!v7)
    {
LABEL_16:
      char v5 = 0LL;
      goto LABEL_17;
    }

      v53 = *(unsigned __int8 *)(a2 + *v8);
      if (*(_BYTE *)(a2 + *v8)) {
        int v16 = 0LL;
      }
LABEL_42:
      if (v53) {
        BOOL v54 = 1;
      }
      else {
        BOOL v54 = (v16 & 7) == 4;
      }
      if (v54) {
        return *(_BYTE *)(a2 + *v8) == 0;
      }
      if ((v16 >> 3) == 2)
      {
        id v11 = PBReaderReadString();
        os_log_type_t v12 = 16LL;
LABEL_4:
        os_log_type_t v13 = *(void **)(a1 + v12);
        *(void *)(a1 + v12) = v11;

        goto LABEL_5;
      }

      if ((v16 >> 3) == 1)
      {
        id v11 = PBReaderReadString();
        os_log_type_t v12 = 8LL;
        goto LABEL_4;
      }

      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0LL;
      }
LABEL_5:
      uint64_t v4 = *v3;
      char v5 = *(void *)(a2 + v4);
      uint64_t v7 = *(void *)(a2 + *v6);
      if (v5 >= v7) {
        return *(_BYTE *)(a2 + *v8) == 0;
      }
    }

    int v16 = 0LL;
LABEL_39:
    *os_log_type_t v14 = 1;
    goto LABEL_40;
  }

  return *(_BYTE *)(a2 + *v8) == 0;
}

    os_release(v19);
    goto LABEL_41;
  }

  *(void *)os_log_type_t v63 = 0LL;
  *(void *)&v63[8] = v63;
  *(void *)&v63[16] = 0x2000000000LL;
  os_log_type_t v64 = 0LL;
  v57[0] = v7;
  v57[1] = 0x40000000LL;
  v57[2] = ___ZL39nw_http_get_binary_message_length_innerP20nw_protocol_metadatabm_block_invoke_6;
  v57[3] = &unk_189BBF868;
  v57[4] = v63;
  uint64_t v33 = v32;
  dispatch_workloop_t v34 = v57;
  _nw_http_fields_enumerate((uint64_t)v33, v34);

  v35 = *(void *)&v63[8];
  id v36 = *(void *)(*(void *)&v63[8] + 24LL);
  if (v36 < 0x40)
  {
    v37 = 1LL;
    goto LABEL_52;
  }

  if (v36 < 0x4000)
  {
    v37 = 2LL;
    goto LABEL_52;
  }

  if (!(v36 >> 30))
  {
    v37 = 4LL;
    goto LABEL_52;
  }

  if (!(v36 >> 62))
  {
    v37 = 8LL;
    goto LABEL_52;
  }

  os_log_type_t v39 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v39, OS_LOG_TYPE_ERROR);
  v69 = 136446466;
  v70 = "_http_vle_length";
  os_log_type_t v71 = 2048;
  v72 = v36;
  v40 = (void *)_os_log_send_and_compose_impl();
  uint64_t result = __nwlog_abort((uint64_t)v40);
  if (!result)
  {
    free(v40);
    v37 = 0LL;
    v35 = *(void *)&v63[8];
LABEL_52:
    os_log_type_t v41 = *(void *)&buf[8];
    BOOL v42 = *(void *)(*(void *)&buf[8] + 24LL) + v37;
    *(void *)(*(void *)&buf[8] + 24LL) = v42;
    *(void *)(v41 + 24) = *(void *)(v35 + 24) + v42;
    _Block_object_dispose(v63, 8);
    os_release(v33);
    v38 = *(void *)(*(void *)&buf[8] + 24LL);
    if (!v19) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }

LABEL_41:
    if (!v5) {
      return;
    }
    goto LABEL_42;
  }

  if (v85 == OS_LOG_TYPE_DEFAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (os_log_s *)(id)gLogObj;
    os_log_type_t v28 = type[0];
    if (os_log_type_enabled(v6, type[0]))
    {
      objc_super v29 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 136446466;
      os_log_type_t v87 = "nw_service_connector_start_block_invoke";
      v88 = 2114;
      os_log_type_t v89 = v29;
      _os_log_impl( &dword_181A5C000,  v6,  v28,  "%{public}s %{public}@ already cancelled, backtrace limit exceeded",  buf,  0x16u);
    }

    goto LABEL_40;
  }

  os_log_type_t v14 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v6 = (os_log_s *)(id)gLogObj;
  id v15 = type[0];
  int v16 = os_log_type_enabled(v6, type[0]);
  if (!v14)
  {
    if (v16)
    {
      dispatch_workloop_t v34 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 136446466;
      os_log_type_t v87 = "nw_service_connector_start_block_invoke";
      v88 = 2114;
      os_log_type_t v89 = v34;
      _os_log_impl(&dword_181A5C000, v6, v15, "%{public}s %{public}@ already cancelled, no backtrace", buf, 0x16u);
    }

    goto LABEL_40;
  }

  if (v16)
  {
    id v17 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 136446722;
    os_log_type_t v87 = "nw_service_connector_start_block_invoke";
    v88 = 2114;
    os_log_type_t v89 = v17;
    BOOL v90 = 2082;
    *(void *)os_log_type_t v91 = v14;
    _os_log_impl( &dword_181A5C000,  v6,  v15,  "%{public}s %{public}@ already cancelled, dumping backtrace:%{public}s",  buf,  0x20u);
  }

  free(v14);
  if (v5) {
LABEL_42:
  }
    free(v5);
}

    free(v21);
    goto LABEL_41;
  }

  os_log_type_t v10 = bswap32(v38) >> 16;
  if (*(_BYTE *)(a1 + 48)) {
    id v11 = 79;
  }
  else {
    id v11 = 42;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v12 = (os_log_s *)(id)gLogObj;
  os_log_type_t v13 = v12;
  if (v11 <= v10)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v24 = "incoming";
      if (!*(_BYTE *)(a1 + 48)) {
        BOOL v24 = "outgoing";
      }
      os_log_type_t v25 = *(void *)(a1 + 32);
      os_log_type_t v26 = *(void *)(a1 + 40);
      *(_DWORD *)applier = 136447234;
      *(void *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
      *(_WORD *)&applier[12] = 2114;
      *(void *)&applier[14] = v25;
      *(_WORD *)&applier[22] = 1024;
      *(_DWORD *)v45 = v10;
      *(_WORD *)&v45[4] = 2082;
      *(void *)&v45[6] = v24;
      *(_WORD *)&v45[14] = 2114;
      *(void *)&v45[16] = v26;
      _os_log_impl( &dword_181A5C000,  v13,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}@ performing second read of length %u on %{public}s connection %{public}@",  applier,  0x30u);
    }

    v32[0] = MEMORY[0x1895F87A8];
    v32[1] = 3221225472LL;
    v32[2] = ___ZL45nw_service_connector_should_accept_connectionP31NWConcrete_nw_service_connectorP24NWConcrete_nw_connectionb_block_invoke_174;
    v32[3] = &unk_189BBFD38;
    char v27 = *(void **)(a1 + 40);
    uint64_t v33 = *(id *)(a1 + 32);
    dispatch_workloop_t v34 = *(id *)(a1 + 40);
    v37 = *(_BYTE *)(a1 + 48);
    v35 = v10;
    id v36 = v38;
    nw_connection_receive_internal(v27, 0LL, v10, v10, v32);
  }

  else
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      os_log_type_t v14 = "incoming";
      id v15 = *(void *)(a1 + 32);
      int v16 = *(void *)(a1 + 40);
      if (!*(_BYTE *)(a1 + 48)) {
        os_log_type_t v14 = "outgoing";
      }
      *(_DWORD *)applier = 136447490;
      *(void *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
      *(_WORD *)&applier[12] = 2114;
      *(void *)&applier[14] = v15;
      *(_WORD *)&applier[22] = 1024;
      *(_DWORD *)v45 = v10;
      *(_WORD *)&v45[4] = 1024;
      *(_DWORD *)&v45[6] = v11;
      *(_WORD *)&v45[10] = 2082;
      *(void *)&v45[12] = v14;
      *(_WORD *)&v45[20] = 2114;
      *(void *)&v45[22] = v16;
      _os_log_impl( &dword_181A5C000,  v13,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}@ message length %u < %u on %{public}s connection %{public}@",  applier,  0x36u);
    }

    nw_connection_cancel(*(nw_connection_t *)(a1 + 40));
  }

          if (!v18)
          {
LABEL_42:
            os_log_type_t v28 = 0LL;
            goto LABEL_52;
          }

    __break(1u);
    goto LABEL_41;
  }

  char v5 = *(void ***)(a1 + 16);
  id v6 = *(void ***)(a1 + 24);
  if (v5 != v6)
  {
    while (((*(uint64_t (**)(uint64_t, void))(a2 + 16))(a2, *v5) & 1) == 0)
    {
      if (++v5 == v6)
      {
        char v5 = v6;
        goto LABEL_18;
      }
    }

    if (v5 != v6)
    {
      for (i = v5 + 1; i != v6; ++i)
      {
        if (((*(uint64_t (**)(uint64_t, void *))(a2 + 16))(a2, *i) & 1) == 0)
        {
          if (*v5) {
            os_release(*v5);
          }
          *v5++ = *i;
          *i = 0LL;
        }
      }
    }
  }

    if (v10) {
      free(v10);
    }
    id v3 = 0LL;
    goto LABEL_4;
  }

  __nwlog_obj();
  char v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v24 = "nw_ip_channel_inbox_get_parameters";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v21 = 0;
  if (__nwlog_fault(v6, &type, &v21))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      int v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v24 = "nw_ip_channel_inbox_get_parameters";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null protocol", buf, 0xCu);
      }
    }

    else if (v21)
    {
      os_log_type_t v13 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      id v15 = os_log_type_enabled(v7, type);
      if (v13)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v24 = "nw_ip_channel_inbox_get_parameters";
          os_log_type_t v25 = 2082;
          os_log_type_t v26 = v13;
          _os_log_impl( &dword_181A5C000,  v7,  v14,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v13);
        goto LABEL_34;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v24 = "nw_ip_channel_inbox_get_parameters";
        _os_log_impl(&dword_181A5C000, v7, v14, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v19 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v24 = "nw_ip_channel_inbox_get_parameters";
        _os_log_impl( &dword_181A5C000,  v7,  v19,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

  if (v29) {
    free(v29);
  }
}

  if (v10) {
    free(v10);
  }
LABEL_10:
}

  if (v9) {
    free(v9);
  }
LABEL_10:
}

  if (v10) {
    free(v10);
  }
LABEL_10:
}

    if (!v14)
    {
LABEL_42:
      id v11 = 0LL;
      goto LABEL_6;
    }

      goto LABEL_41;
    }

    if (!v45)
    {
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v37 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v48 = "nw_txt_record_set_key";
        _os_log_impl( &dword_181A5C000,  v14,  v37,  "%{public}s called with null txt_record, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_40;
    }

    dispatch_workloop_t v34 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v35 = type;
    id v36 = os_log_type_enabled(v14, type);
    if (!v34)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v48 = "nw_txt_record_set_key";
        _os_log_impl(&dword_181A5C000, v14, v35, "%{public}s called with null txt_record, no backtrace", buf, 0xCu);
      }

      goto LABEL_40;
    }

    if (v36)
    {
      *(_DWORD *)buf = 136446466;
      v48 = "nw_txt_record_set_key";
      id v49 = 2082;
      v50 = (size_t)v34;
      _os_log_impl( &dword_181A5C000,  v14,  v35,  "%{public}s called with null txt_record, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v34);
  }

LABEL_41:
      if (v9) {
        free(v9);
      }
      goto LABEL_43;
    }

    if (!v22)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v21 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_txt_record_apply";
        _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s called with null applier, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_40;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v18 = type;
    char v19 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_txt_record_apply";
        _os_log_impl(&dword_181A5C000, v10, v18, "%{public}s called with null applier, no backtrace", buf, 0xCu);
      }

      goto LABEL_40;
    }

    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v25 = "nw_txt_record_apply";
      os_log_type_t v26 = 2082;
      char v27 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s called with null applier, dumping backtrace:%{public}s",  buf,  0x16u);
    }

      v53 = *((unsigned __int8 *)a3 + *v9);
      if (*((_BYTE *)a3 + *v9)) {
        int v16 = 0LL;
      }
LABEL_42:
      if (v53) {
        BOOL v54 = 1;
      }
      else {
        BOOL v54 = (v16 & 7) == 4;
      }
      if (v54) {
        return *((_BYTE *)a3 + *v9) == 0;
      }
      uint64_t v55 = v16 >> 3;
      if ((v16 >> 3) == 3)
      {
        PBReaderReadString();
        os_log_type_t v12 = (NSString *)objc_claimAutoreleasedReturnValue();
        clientUUID = (NWPBParameters *)self->_clientUUID;
        self->_clientUUID = v12;
LABEL_4:

        goto LABEL_5;
      }

      if ((_DWORD)v55 == 2)
      {
        clientUUID = objc_alloc_init(&OBJC_CLASS___NWPBParameters);
        objc_storeStrong((id *)&self->_parameters, clientUUID);
        if (!PBReaderPlaceMark() || (NWPBParametersReadFrom((uint64_t)clientUUID, (uint64_t)a3) & 1) == 0)
        {
LABEL_59:

          return 0;
        }

        goto LABEL_54;
      }

      if ((_DWORD)v55 == 1)
      {
        clientUUID = objc_alloc_init(&OBJC_CLASS___NWPBEndpoint);
        objc_storeStrong((id *)&self->_endpoint, clientUUID);
LABEL_54:
        PBReaderRecallMark();
        goto LABEL_4;
      }

      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_5:
      char v5 = *v4;
      id v6 = *(void *)((char *)a3 + v5);
      int v8 = *(void *)((char *)a3 + *v7);
      if (v6 >= v8) {
        return *((_BYTE *)a3 + *v9) == 0;
      }
    }

    int v16 = 0LL;
LABEL_39:
    *os_log_type_t v14 = 1;
    goto LABEL_40;
  }

  return *((_BYTE *)a3 + *v9) == 0;
}

  if (v8) {
    free(v8);
  }
  char v5 = 0LL;
LABEL_10:

  return v5;
}

LABEL_14:
    if (!v7)
    {
LABEL_16:
      char v5 = 0LL;
      goto LABEL_17;
    }

  if (v8) {
    free(v8);
  }
  char v5 = -1LL;
LABEL_7:

  return v5;
}

  if (v8) {
    free(v8);
  }
  char v5 = 0LL;
LABEL_7:

  return v5;
}

  if (v8) {
    free(v8);
  }
  char v5 = 0LL;
LABEL_7:

  return v5;
}

  if (v8) {
    free(v8);
  }
  char v5 = 0LL;
LABEL_7:

  return v5;
}

      if (v6) {
        os_release(v6);
      }
      if (!outbound_message) {
        return;
      }
      BOOL v42 = outbound_message;
      goto LABEL_76;
    case 3:
      inbound_body_size = nw_http_transaction_metadata_get_inbound_body_size(a2);
      dispatch_workloop_t v44 = *(void *)(a1 + 32);
      if (v44 && (*(_WORD *)(v44 + 736) & 0x800) != 0) {
        return;
      }
      if (__nwlog_http_log::onceToken != -1) {
        dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
      }
      os_log_type_t v23 = (os_log_s *)ghttpLogObj;
      if (!os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO)) {
        return;
      }
      v45 = *(void *)(a1 + 32);
      os_log_type_t v46 = (const char *)(v45 + 636);
      os_log_type_t v47 = "";
      v48 = v45 == 0;
      if (!v45) {
        os_log_type_t v46 = "";
      }
      id v49 = *(_DWORD *)(*(void *)(v45 + 336) + 1280LL);
      v50 = *(void *)(v45 + 240);
      if (!v48) {
        os_log_type_t v47 = " ";
      }
      *(_DWORD *)buf = 136447490;
      v68 = "nw_http3_control_stream_process_output_block_invoke";
      v69 = 2082;
      v70 = v46;
      os_log_type_t v71 = 2080;
      v72 = v47;
      __uint64_t v73 = 1024;
      unint64_t v74 = v49;
      char v75 = 2048;
      __uint64_t v76 = v50;
      v77 = 2048;
      unint64_t v78 = inbound_body_size;
      os_log_type_t v30 = "%{public}s %{public}s%s<i%u:s%llu> finished receiving {body_bytes=%llu}";
LABEL_54:
      _os_log_impl(&dword_181A5C000, v23, OS_LOG_TYPE_INFO, v30, buf, 0x3Au);
      return;
    case 4:
      v51 = MEMORY[0x1895F87A8];
      v64[0] = MEMORY[0x1895F87A8];
      v64[1] = 0x40000000LL;
      v64[2] = ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_38;
      v64[3] = &__block_descriptor_tmp_40_60346;
      os_log_type_t v52 = *(void *)(a1 + 32);
      v64[4] = a2;
      v64[5] = v52;
      v53 = nw_http_transaction_metadata_get_outbound_message(a2);
      BOOL v54 = v53;
      if (v53)
      {
        uint64_t v55 = nw_http_metadata_copy_request(v53);
        v56 = nw_http_metadata_copy_response(v54);
        inbound_message = nw_http_transaction_metadata_get_inbound_message(a2);
        if (!inbound_message) {
          goto LABEL_64;
        }
        if (v55)
        {
          if (v56) {
            goto LABEL_65;
          }
          goto LABEL_63;
        }
      }

      else
      {
        v58 = nw_http_transaction_metadata_get_inbound_message(a2);
        v56 = 0LL;
        if (!v58)
        {
          v59 = 0;
          inbound_message = 0LL;
          goto LABEL_79;
        }

        inbound_message = v58;
      }

      uint64_t v55 = nw_http_metadata_copy_request(inbound_message);
      if (v56) {
        goto LABEL_65;
      }
LABEL_63:
      v56 = nw_http_metadata_copy_response(inbound_message);
LABEL_64:
      if (!v56)
      {
        v59 = 0;
        if (!v55) {
          goto LABEL_79;
        }
LABEL_68:
        v62[0] = v51;
        v62[1] = 0x40000000LL;
        v62[2] = ___ZL38nw_http3_control_stream_process_outputP17nw_protocol_http3_block_invoke_41;
        v62[3] = &unk_189BC3E98;
        v62[4] = v64;
        os_log_type_t v63 = v59;
        os_log_type_t v60 = v55;
        BOOL v61 = v62;
        _nw_http_request_access_method((uint64_t)v60, v61);

        if (!inbound_message) {
          goto LABEL_70;
        }
        goto LABEL_69;
      }

  if (v1) {
LABEL_22:
  }
    free((void *)v1);
}

    if (v12) {
      free(v12);
    }
    return 1LL;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http3_stream_send_section_ack";
  int v8 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  char v27 = 0;
  if (__nwlog_fault(v8, type, &v27))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      int v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type[0];
      if (os_log_type_enabled(v9, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_stream_send_section_ack";
        id v11 = "%{public}s called with null http3_stream";
LABEL_33:
        _os_log_impl(&dword_181A5C000, v9, v10, v11, buf, 0xCu);
      }
    }

    else if (v27)
    {
      int v16 = (char *)__nw_create_backtrace_string();
      int v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type[0];
      id v17 = os_log_type_enabled(v9, type[0]);
      if (v16)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http3_stream_send_section_ack";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v16;
          _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null http3_stream, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v16);
        goto LABEL_34;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_stream_send_section_ack";
        id v11 = "%{public}s called with null http3_stream, no backtrace";
        goto LABEL_33;
      }
    }

    else
    {
      int v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type[0];
      if (os_log_type_enabled(v9, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_stream_send_section_ack";
        id v11 = "%{public}s called with null http3_stream, backtrace limit exceeded";
        goto LABEL_33;
      }
    }
  }

      os_release(v20);
      nw_http_transaction_metadata_set_outbound_message(*(void **)(a1 + 392), v19);
      nw::http::content_length_manager::set_outbound_message( (nw::http::content_length_manager *)(a1 + 272),  (nw_protocol_metadata *)v19);
      if ((*(_WORD *)(*(void *)(a1 + 336) + 1373LL) & 1) == 0)
      {
        id v36 = nw_http_metadata_copy_request(v19);
        if (!v36)
        {
          if ((*v6 & 0x800) == 0)
          {
            v37 = (os_log_s *)__nwlog_obj();
            if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
            {
              v38 = *(_DWORD *)(*(void *)(a1 + 336) + 1280LL);
              os_log_type_t v39 = *(void **)(a1 + 240);
              v40 = *(void *)(a1 + 384);
              *(_DWORD *)buf = 136447490;
              *(void *)&uint8_t buf[4] = "nw_http3_stream_send_fields";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = a1 + 636;
              *(_WORD *)&buf[22] = 2080;
              v427 = (__n128 (*)(uint64_t, uint64_t))" ";
              LOWORD(v428) = 1024;
              *(_DWORD *)((char *)&v428 + 2) = v38;
              HIWORD(v428) = 2048;
              v429 = v39;
              *(_WORD *)v430 = 2048;
              *(void *)&v430[2] = v40;
              _os_log_impl( &dword_181A5C000,  v37,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:s%llu> No request found in frame %p",  buf,  0x3Au);
            }
          }

          os_log_type_t v41 = *(void *)(a1 + 48);
          if (v41)
          {
            BOOL v42 = *(void *)(v41 + 24);
            if (v42)
            {
              char v43 = *(void (**)(void))(v42 + 56);
              if (v43)
              {
                v43();
                dispatch_workloop_t v44 = *(void *)(a1 + 48);
                if (!v44) {
                  goto LABEL_51;
                }
LABEL_49:
                v45 = *(void *)(v44 + 24);
                if (!v45) {
                  goto LABEL_51;
                }
                os_log_type_t v46 = *(void (**)(uint64_t, uint64_t))(v45 + 48);
                if (!v46) {
                  goto LABEL_51;
                }
LABEL_91:
                v46(v44, a1);
                v84 = 1;
                goto LABEL_313;
              }
            }
          }

          v260 = v17;
          __nwlog_obj();
          v261 = *(void *)(a1 + 48);
          v262 = "invalid";
          if (v261)
          {
            v263 = *(const char **)(v261 + 16);
            if (v263) {
              v262 = v263;
            }
          }

          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http3_stream_send_fields";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v262;
          v264 = (char *)_os_log_send_and_compose_impl();
          type[0] = 16;
          LOBYTE(v413) = 0;
          if (__nwlog_fault(v264, type, &v413))
          {
            if (type[0] == 17)
            {
              v265 = (os_log_s *)__nwlog_obj();
              v266 = type[0];
              if (!os_log_type_enabled(v265, (os_log_type_t)type[0])) {
                goto LABEL_567;
              }
              v267 = *(void *)(a1 + 48);
              v268 = "invalid";
              if (v267)
              {
                v269 = *(const char **)(v267 + 16);
                if (v269) {
                  v268 = v269;
                }
              }

              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http3_stream_send_fields";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v268;
              v270 = "%{public}s protocol %{public}s has invalid error callback";
LABEL_566:
              _os_log_impl(&dword_181A5C000, v265, v266, v270, buf, 0x16u);
              goto LABEL_567;
            }

            if (!(_BYTE)v413)
            {
              v265 = (os_log_s *)__nwlog_obj();
              v266 = type[0];
              if (!os_log_type_enabled(v265, (os_log_type_t)type[0])) {
                goto LABEL_567;
              }
              v318 = *(void *)(a1 + 48);
              v319 = "invalid";
              if (v318)
              {
                v320 = *(const char **)(v318 + 16);
                if (v320) {
                  v319 = v320;
                }
              }

              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http3_stream_send_fields";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v319;
              v270 = "%{public}s protocol %{public}s has invalid error callback, backtrace limit exceeded";
              goto LABEL_566;
            }

            v301 = (char *)__nw_create_backtrace_string();
            v265 = (os_log_s *)__nwlog_obj();
            v266 = type[0];
            v302 = os_log_type_enabled(v265, (os_log_type_t)type[0]);
            if (!v301)
            {
              if (!v302) {
                goto LABEL_567;
              }
              v342 = *(void *)(a1 + 48);
              v343 = "invalid";
              if (v342)
              {
                v344 = *(const char **)(v342 + 16);
                if (v344) {
                  v343 = v344;
                }
              }

              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http3_stream_send_fields";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v343;
              v270 = "%{public}s protocol %{public}s has invalid error callback, no backtrace";
              goto LABEL_566;
            }

            if (v302)
            {
              v303 = *(void *)(a1 + 48);
              v304 = "invalid";
              if (v303)
              {
                v305 = *(const char **)(v303 + 16);
                if (v305) {
                  v304 = v305;
                }
              }

              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "nw_http3_stream_send_fields";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v304;
              *(_WORD *)&buf[22] = 2082;
              v427 = (__n128 (*)(uint64_t, uint64_t))v301;
              _os_log_impl( &dword_181A5C000,  v265,  v266,  "%{public}s protocol %{public}s has invalid error callback, dumping backtrace:%{public}s",  buf,  0x20u);
            }

            free(v301);
          }

      if (v6) {
        os_release(v6);
      }
      if (!outbound_message) {
        return;
      }
      BOOL v42 = outbound_message;
      goto LABEL_76;
    case 3:
      inbound_body_size = nw_http_transaction_metadata_get_inbound_body_size(a2);
      dispatch_workloop_t v44 = *(void *)(a1 + 32);
      if (v44 && (*(_WORD *)(v44 + 736) & 0x800) != 0) {
        return;
      }
      if (__nwlog_http_log::onceToken != -1) {
        dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
      }
      os_log_type_t v23 = (os_log_s *)ghttpLogObj;
      if (!os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO)) {
        return;
      }
      v45 = *(void *)(a1 + 32);
      os_log_type_t v46 = (const char *)(v45 + 636);
      os_log_type_t v47 = "";
      v48 = v45 == 0;
      if (!v45) {
        os_log_type_t v46 = "";
      }
      id v49 = *(_DWORD *)(*(void *)(v45 + 336) + 1280LL);
      v50 = *(void *)(v45 + 240);
      if (!v48) {
        os_log_type_t v47 = " ";
      }
      *(_DWORD *)buf = 136447490;
      v68 = "nw_protocol_http3_stream_connected_block_invoke";
      v69 = 2082;
      v70 = v46;
      os_log_type_t v71 = 2080;
      v72 = v47;
      __uint64_t v73 = 1024;
      unint64_t v74 = v49;
      char v75 = 2048;
      __uint64_t v76 = v50;
      v77 = 2048;
      unint64_t v78 = inbound_body_size;
      os_log_type_t v30 = "%{public}s %{public}s%s<i%u:s%llu> finished receiving {body_bytes=%llu}";
LABEL_54:
      _os_log_impl(&dword_181A5C000, v23, OS_LOG_TYPE_INFO, v30, buf, 0x3Au);
      return;
    case 4:
      v51 = MEMORY[0x1895F87A8];
      v64[0] = MEMORY[0x1895F87A8];
      v64[1] = 0x40000000LL;
      v64[2] = ___ZL34nw_protocol_http3_stream_connectedP11nw_protocolS0__block_invoke_133;
      v64[3] = &__block_descriptor_tmp_134;
      os_log_type_t v52 = *(void *)(a1 + 32);
      v64[4] = a2;
      v64[5] = v52;
      v53 = nw_http_transaction_metadata_get_outbound_message(a2);
      BOOL v54 = v53;
      if (v53)
      {
        uint64_t v55 = nw_http_metadata_copy_request(v53);
        v56 = nw_http_metadata_copy_response(v54);
        inbound_message = nw_http_transaction_metadata_get_inbound_message(a2);
        if (!inbound_message) {
          goto LABEL_64;
        }
        if (v55)
        {
          if (v56) {
            goto LABEL_65;
          }
          goto LABEL_63;
        }
      }

      else
      {
        v58 = nw_http_transaction_metadata_get_inbound_message(a2);
        v56 = 0LL;
        if (!v58)
        {
          v59 = 0;
          inbound_message = 0LL;
          goto LABEL_79;
        }

        inbound_message = v58;
      }

      uint64_t v55 = nw_http_metadata_copy_request(inbound_message);
      if (v56) {
        goto LABEL_65;
      }
LABEL_63:
      v56 = nw_http_metadata_copy_response(inbound_message);
LABEL_64:
      if (!v56)
      {
        v59 = 0;
        if (!v55) {
          goto LABEL_79;
        }
LABEL_68:
        v62[0] = v51;
        v62[1] = 0x40000000LL;
        v62[2] = ___ZL34nw_protocol_http3_stream_connectedP11nw_protocolS0__block_invoke_135;
        v62[3] = &unk_189BC46A0;
        v62[4] = v64;
        os_log_type_t v63 = v59;
        os_log_type_t v60 = v55;
        BOOL v61 = v62;
        _nw_http_request_access_method((uint64_t)v60, v61);

        if (!inbound_message) {
          goto LABEL_70;
        }
        goto LABEL_69;
      }

      v53 = *((unsigned __int8 *)a3 + *v9);
      if (*((_BYTE *)a3 + *v9)) {
        int v16 = 0LL;
      }
LABEL_42:
      if (v53) {
        BOOL v54 = 1;
      }
      else {
        BOOL v54 = (v16 & 7) == 4;
      }
      if (v54) {
        return *((_BYTE *)a3 + *v9) == 0;
      }
      uint64_t v55 = v16 >> 3;
      if ((v16 >> 3) == 3)
      {
        PBReaderReadString();
        os_log_type_t v12 = (NSString *)objc_claimAutoreleasedReturnValue();
        clientUUID = (NWPBParameters *)self->_clientUUID;
        self->_clientUUID = v12;
LABEL_4:

        goto LABEL_5;
      }

      if ((_DWORD)v55 == 2)
      {
        clientUUID = objc_alloc_init(&OBJC_CLASS___NWPBParameters);
        objc_storeStrong((id *)&self->_parameters, clientUUID);
        if (!PBReaderPlaceMark() || (NWPBParametersReadFrom((uint64_t)clientUUID, (uint64_t)a3) & 1) == 0)
        {
LABEL_59:

          return 0;
        }

        goto LABEL_54;
      }

      if ((_DWORD)v55 == 1)
      {
        clientUUID = objc_alloc_init(&OBJC_CLASS___NWPBBrowseDescriptor);
        objc_storeStrong((id *)&self->_descriptor, clientUUID);
        if (!PBReaderPlaceMark()
          || (NWPBBrowseDescriptorReadFrom((uint64_t)clientUUID, (uint64_t)a3) & 1) == 0)
        {
          goto LABEL_59;
        }

    if (v20) {
      free(v20);
    }
    goto LABEL_22;
  }

  *(_OWORD *)(v10 + 12) = *(_OWORD *)a1;
  id v11 = (void **)(v10 + 64);
  objc_storeStrong((id *)v10 + 8, a2);
  if (!*v11)
  {
    if (nw_context_copy_implicit_context::onceToken != -1) {
      dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
    }
    objc_storeStrong(v7 + 8, (id)nw_context_copy_implicit_context::implicit_context);
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v12 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446978;
    v31 = "-[NWConcrete_nw_interpose initWithClientUUID:nw_context:]";
    os_log_type_t v32 = 2114;
    uint64_t v33 = (char *)v7;
    dispatch_workloop_t v34 = 1042;
    v35 = 16;
    id v36 = 2098;
    v37 = a1;
    _os_log_impl( &dword_181A5C000,  v12,  OS_LOG_TYPE_DEBUG,  "%{public}s [%{public}@] claiming evaluator with client UUID %{public,uuid_t}.16P",  buf,  0x26u);
  }

  evaluator_for_client_id = nw_path_create_evaluator_for_client_id(a1, *v11);
  os_log_type_t v14 = v7[5];
  v7[5] = evaluator_for_client_id;

  id v15 = v7[5];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  int v16 = (os_log_s *)(id)gLogObj;
  id v17 = v16;
  if (!v15)
  {
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      v31 = "-[NWConcrete_nw_interpose initWithClientUUID:nw_context:]";
      os_log_type_t v32 = 2114;
      uint64_t v33 = (char *)v7;
      dispatch_workloop_t v34 = 1042;
      v35 = 16;
      id v36 = 2098;
      v37 = a1;
      _os_log_impl( &dword_181A5C000,  v17,  OS_LOG_TYPE_ERROR,  "%{public}s [%{public}@] failed to claim evaluator with client UUID %{public,uuid_t}.16P",  buf,  0x26u);
    }

    goto LABEL_22;
  }

  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446978;
    v31 = "-[NWConcrete_nw_interpose initWithClientUUID:nw_context:]";
    os_log_type_t v32 = 2114;
    uint64_t v33 = (char *)v7;
    dispatch_workloop_t v34 = 1042;
    v35 = 16;
    id v36 = 2098;
    v37 = a1;
    _os_log_impl( &dword_181A5C000,  v17,  OS_LOG_TYPE_DEBUG,  "%{public}s [%{public}@] claimed evaluator with client UUID %{public,uuid_t}.16P",  buf,  0x26u);
  }

LABEL_18:
  return v7;
}

    if (v12) {
      free(v12);
    }
    goto LABEL_4;
  }

  __nwlog_obj();
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v26 = "nw_path_monitor_prohibit_interface_type";
  int v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v23 = 0;
  if (__nwlog_fault(v8, &type, &v23))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_path_monitor_prohibit_interface_type";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null monitor", buf, 0xCu);
      }
    }

    else if (v23)
    {
      id v15 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      int v16 = type;
      id v17 = os_log_type_enabled(v9, type);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v26 = "nw_path_monitor_prohibit_interface_type";
          char v27 = 2082;
          os_log_type_t v28 = v15;
          _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s called with null monitor, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v15);
        goto LABEL_35;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_path_monitor_prohibit_interface_type";
        _os_log_impl(&dword_181A5C000, v9, v16, "%{public}s called with null monitor, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v21 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_path_monitor_prohibit_interface_type";
        _os_log_impl( &dword_181A5C000,  v9,  v21,  "%{public}s called with null monitor, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

    _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
    goto LABEL_41;
  }

  if (a1->handle == &nw_protocol_ref_counted_handle)
  {
    identifier = a1[2].identifier;
    if (identifier)
    {
      uint64_t v4 = *(void *)&identifier->name[24];
      if (v4)
      {
        char v5 = *(void (**)(void))(v4 + 64);
        if (v5) {
          v5();
        }
      }
    }

    else if ((*(_WORD *)&a1[6].flow_id[13] & 0x80) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      id v6 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v18 = "nw_socket_input_available";
        char v19 = 2082;
        os_log_type_t v20 = (char *)&a1[6].identifier + 4;
        _os_log_impl(&dword_181A5C000, v6, OS_LOG_TYPE_ERROR, "%{public}s %{public}s No input handler", buf, 0x16u);
      }
    }

    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v18 = "nw_socket_input_available";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  id v15 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    int v8 = (os_log_s *)__nwlog_obj();
    int v9 = type;
    if (!os_log_type_enabled(v8, type)) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v18 = "nw_socket_input_available";
    os_log_type_t v10 = "%{public}s called with null socket_handler";
    goto LABEL_40;
  }

  if (!v15)
  {
    int v8 = (os_log_s *)__nwlog_obj();
    int v9 = type;
    if (!os_log_type_enabled(v8, type)) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v18 = "nw_socket_input_available";
    os_log_type_t v10 = "%{public}s called with null socket_handler, backtrace limit exceeded";
    goto LABEL_40;
  }

  os_log_type_t v13 = (char *)__nw_create_backtrace_string();
  int v8 = (os_log_s *)__nwlog_obj();
  int v9 = type;
  os_log_type_t v14 = os_log_type_enabled(v8, type);
  if (!v13)
  {
    if (!v14) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v18 = "nw_socket_input_available";
    os_log_type_t v10 = "%{public}s called with null socket_handler, no backtrace";
    goto LABEL_40;
  }

  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v18 = "nw_socket_input_available";
    char v19 = 2082;
    os_log_type_t v20 = v13;
    _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null socket_handler, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v13);
  if (v7) {
    goto LABEL_42;
  }
}

    _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
    goto LABEL_41;
  }

  if (a1->handle == &nw_protocol_ref_counted_handle)
  {
    identifier = a1[2].identifier;
    if (identifier)
    {
      uint64_t v4 = *(void *)&identifier->name[24];
      if (v4)
      {
        char v5 = *(void (**)(void))(v4 + 72);
        if (v5) {
          v5();
        }
      }
    }

    else if ((*(_WORD *)&a1[6].flow_id[13] & 0x80) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      id v6 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v18 = "nw_socket_output_available";
        char v19 = 2082;
        os_log_type_t v20 = (char *)&a1[6].identifier + 4;
        _os_log_impl(&dword_181A5C000, v6, OS_LOG_TYPE_ERROR, "%{public}s %{public}s No input handler", buf, 0x16u);
      }
    }

    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v18 = "nw_socket_output_available";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  id v15 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    int v8 = (os_log_s *)__nwlog_obj();
    int v9 = type;
    if (!os_log_type_enabled(v8, type)) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v18 = "nw_socket_output_available";
    os_log_type_t v10 = "%{public}s called with null socket_handler";
    goto LABEL_40;
  }

  if (!v15)
  {
    int v8 = (os_log_s *)__nwlog_obj();
    int v9 = type;
    if (!os_log_type_enabled(v8, type)) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v18 = "nw_socket_output_available";
    os_log_type_t v10 = "%{public}s called with null socket_handler, backtrace limit exceeded";
    goto LABEL_40;
  }

  os_log_type_t v13 = (char *)__nw_create_backtrace_string();
  int v8 = (os_log_s *)__nwlog_obj();
  int v9 = type;
  os_log_type_t v14 = os_log_type_enabled(v8, type);
  if (!v13)
  {
    if (!v14) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v18 = "nw_socket_output_available";
    os_log_type_t v10 = "%{public}s called with null socket_handler, no backtrace";
    goto LABEL_40;
  }

  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v18 = "nw_socket_output_available";
    char v19 = 2082;
    os_log_type_t v20 = v13;
    _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null socket_handler, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v13);
  if (v7) {
    goto LABEL_42;
  }
}

  if (v11) {
    free(v11);
  }
}

  if (!nw_tcp_options_get_no_options(a2) || !setsockopt(*(_DWORD *)(a1 + 172), 6, 8, v105, 4u)) {
    goto LABEL_65;
  }
  id v17 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
  }
  os_log_type_t v18 = (os_log_s *)gconnectionLogObj;
  if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446722;
    v107 = "nw_socket_set_bidirectional_tcp_sockopts";
    v108 = 2080;
    *(void *)__int16 v109 = a1 + 308;
    *(_WORD *)&v109[8] = 1024;
    *(_DWORD *)&v109[10] = v17;
    _os_log_impl( &dword_181A5C000,  v18,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt TCP_NOOPT failed %{darwin.errno}d",  buf,  0x1Cu);
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  char v19 = (os_log_s *)gLogObj;
  if (v17 == 22)
  {
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      v108 = 1024;
      *(_DWORD *)__int16 v109 = 22;
      _os_log_impl( &dword_181A5C000,  v19,  OS_LOG_TYPE_ERROR,  "%{public}s setsockopt TCP_NOOPT failed %{darwin.errno}d",  buf,  0x12u);
    }

    goto LABEL_65;
  }

  *(_DWORD *)buf = 136446466;
  v107 = "nw_socket_set_bidirectional_tcp_sockopts";
  v108 = 1024;
  *(_DWORD *)__int16 v109 = v17;
  os_log_type_t v20 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  v103[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v20, type, v103))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v21 = (os_log_s *)gLogObj;
      v22 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_63;
      }
      *(_DWORD *)buf = 136446466;
      v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      v108 = 1024;
      *(_DWORD *)__int16 v109 = v17;
      os_log_type_t v23 = "%{public}s setsockopt TCP_NOOPT failed %{darwin.errno}d";
      goto LABEL_62;
    }

    if (v103[0] == OS_LOG_TYPE_DEFAULT)
    {
      BOOL v21 = (os_log_s *)__nwlog_obj();
      v22 = type[0];
      if (!os_log_type_enabled(v21, type[0])) {
        goto LABEL_63;
      }
      *(_DWORD *)buf = 136446466;
      v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      v108 = 1024;
      *(_DWORD *)__int16 v109 = v17;
      os_log_type_t v23 = "%{public}s setsockopt TCP_NOOPT failed %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_62;
    }

    BOOL v24 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v21 = (os_log_s *)gLogObj;
    v22 = type[0];
    os_log_type_t v25 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
    if (v24)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446722;
        v107 = "nw_socket_set_bidirectional_tcp_sockopts";
        v108 = 1024;
        *(_DWORD *)__int16 v109 = v17;
        *(_WORD *)&v109[4] = 2082;
        *(void *)&v109[6] = v24;
        _os_log_impl( &dword_181A5C000,  v21,  v22,  "%{public}s setsockopt TCP_NOOPT failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
      }

      free(v24);
      goto LABEL_63;
    }

    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      v108 = 1024;
      *(_DWORD *)__int16 v109 = v17;
      os_log_type_t v23 = "%{public}s setsockopt TCP_NOOPT failed %{darwin.errno}d, no backtrace";
LABEL_62:
      _os_log_impl(&dword_181A5C000, v21, v22, v23, buf, 0x12u);
    }
  }

  if (v10) {
    free(v10);
  }
}

      goto LABEL_41;
    }

    if (!v25)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_path_create";
        _os_log_impl( &dword_181A5C000,  v10,  v23,  "%{public}s nw_parameters_create failed, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_40;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v21 = type;
    v22 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_path_create";
        _os_log_impl(&dword_181A5C000, v10, v21, "%{public}s nw_parameters_create failed, no backtrace", buf, 0xCu);
      }

      goto LABEL_40;
    }

    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v28 = "nw_path_create";
      objc_super v29 = 2082;
      os_log_type_t v30 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s nw_parameters_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
    }

        goto LABEL_41;
      }

      if (!v33)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v11 = (os_log_s *)(id)gLogObj;
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          id v36 = "nw_path_create_evaluator_for_group";
          _os_log_impl( &dword_181A5C000,  v11,  v23,  "%{public}s nw_path_evaluator_evaluate failed, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_40;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v11 = (os_log_s *)(id)gLogObj;
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          id v36 = "nw_path_create_evaluator_for_group";
          _os_log_impl( &dword_181A5C000,  v11,  v20,  "%{public}s nw_path_evaluator_evaluate failed, no backtrace",  buf,  0xCu);
        }

        goto LABEL_40;
      }

      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        id v36 = "nw_path_create_evaluator_for_group";
        v37 = 2082;
        v38 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v20,  "%{public}s nw_path_evaluator_evaluate failed, dumping backtrace:%{public}s",  buf,  0x16u);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v9 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      id v36 = "nw_path_create_evaluator_for_group";
      os_log_type_t v10 = (void *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      uint64_t v33 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v11 = (os_log_s *)(id)gLogObj;
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          id v36 = "nw_path_create_evaluator_for_group";
          _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed",  buf,  0xCu);
        }

        goto LABEL_40;
      }

      if (!v33)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v11 = (os_log_s *)(id)gLogObj;
        v22 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          id v36 = "nw_path_create_evaluator_for_group";
          _os_log_impl( &dword_181A5C000,  v11,  v22,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_40;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v11 = (os_log_s *)(id)gLogObj;
      os_log_type_t v18 = type;
      char v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          id v36 = "nw_path_create_evaluator_for_group";
          _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, no backtrace",  buf,  0xCu);
        }

        goto LABEL_40;
      }

      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        id v36 = "nw_path_create_evaluator_for_group";
        v37 = 2082;
        v38 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
      }
    }

    free(backtrace_string);
    if (!v10) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }

  __nwlog_obj();
  os_log_type_t v25 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  id v36 = "nw_path_create_evaluator_for_group";
  os_log_type_t v26 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v33 = 0;
  if (__nwlog_fault(v26, &type, &v33))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        id v36 = "nw_path_create_evaluator_for_group";
        _os_log_impl(&dword_181A5C000, v27, v28, "%{public}s called with null group_descriptor", buf, 0xCu);
      }
    }

    else if (v33)
    {
      objc_super v29 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v30 = type;
      v31 = os_log_type_enabled(v27, type);
      if (v29)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          id v36 = "nw_path_create_evaluator_for_group";
          v37 = 2082;
          v38 = v29;
          _os_log_impl( &dword_181A5C000,  v27,  v30,  "%{public}s called with null group_descriptor, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v29);
        goto LABEL_62;
      }

      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        id v36 = "nw_path_create_evaluator_for_group";
        _os_log_impl( &dword_181A5C000,  v27,  v30,  "%{public}s called with null group_descriptor, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        id v36 = "nw_path_create_evaluator_for_group";
        _os_log_impl( &dword_181A5C000,  v27,  v32,  "%{public}s called with null group_descriptor, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

    if (!v9)
    {
LABEL_42:
      uint64_t v4 = 0xFFFFFFFFLL;
      goto LABEL_43;
    }

      free(v9);
      goto LABEL_41;
    }

    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v10 = (os_log_s *)(id)gLogObj;
      char v19 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_path_create_browse";
        _os_log_impl(&dword_181A5C000, v10, v19, "%{public}s nw_parameters_create failed", buf, 0xCu);
      }

  if (v9) {
    free(v9);
  }
  char v5 = 0LL;
LABEL_7:

  return v5;
}

      free(backtrace_string);
    }
  }

  if (v15) {
    free(v15);
  }
  uint64_t v7 = 0LL;
LABEL_10:

  return v7;
}

LABEL_41:
      if (v11) {
        free(v11);
      }
      goto LABEL_43;
    }

    if (!v24)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        char v27 = "nw_path_update_parameters_for_fallback";
        _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s called with null parameters_to_update, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_40;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    char v19 = type;
    os_log_type_t v20 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        char v27 = "nw_path_update_parameters_for_fallback";
        _os_log_impl( &dword_181A5C000,  v12,  v19,  "%{public}s called with null parameters_to_update, no backtrace",  buf,  0xCu);
      }

      goto LABEL_40;
    }

    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      char v27 = "nw_path_update_parameters_for_fallback";
      os_log_type_t v28 = 2082;
      objc_super v29 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v12,  v19,  "%{public}s called with null parameters_to_update, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_41;
  }

  char v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_definition_http_definition);

  if (is_equal_unsafe)
  {
    v23[0] = MEMORY[0x1895F87A8];
    v23[1] = 3221225472LL;
    v23[2] = __nw_http_metadata_set_version_block_invoke;
    v23[3] = &__block_descriptor_36_e9_B16__0_v8l;
    BOOL v24 = a2;
    int v8 = *((void *)v5 + 4);
    if (v8) {
      __nw_http_metadata_set_version_block_invoke((uint64_t)v23, v8);
    }
    goto LABEL_7;
  }

  __nwlog_obj();
  os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v28 = "nw_http_metadata_set_version";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v25 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v28 = "nw_http_metadata_set_version";
      _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (!v25)
  {
    __nwlog_obj();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v28 = "nw_http_metadata_set_version";
      _os_log_impl(&dword_181A5C000, v11, v22, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
    }

    goto LABEL_40;
  }

  os_log_type_t v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  char v19 = type;
  os_log_type_t v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v28 = "nw_http_metadata_set_version";
      _os_log_impl(&dword_181A5C000, v11, v19, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v28 = "nw_http_metadata_set_version";
    objc_super v29 = 2082;
    os_log_type_t v30 = v18;
    _os_log_impl( &dword_181A5C000,  v11,  v19,  "%{public}s metadata must be http, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_42;
  }
LABEL_7:
}

    goto LABEL_41;
  }

  char v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_definition_http_definition);

  if (is_equal_unsafe)
  {
    v23[0] = MEMORY[0x1895F87A8];
    v23[1] = 3221225472LL;
    v23[2] = __nw_http_metadata_set_datagram_context_id_block_invoke;
    v23[3] = &__block_descriptor_40_e9_B16__0_v8l;
    v23[4] = a2;
    int v8 = *((void *)v5 + 4);
    if (v8) {
      __nw_http_metadata_set_datagram_context_id_block_invoke((uint64_t)v23, v8);
    }
    goto LABEL_7;
  }

  __nwlog_obj();
  os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v27 = "nw_http_metadata_set_datagram_context_id";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v24 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      char v27 = "nw_http_metadata_set_datagram_context_id";
      _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (!v24)
  {
    __nwlog_obj();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      char v27 = "nw_http_metadata_set_datagram_context_id";
      _os_log_impl(&dword_181A5C000, v11, v22, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
    }

    goto LABEL_40;
  }

  os_log_type_t v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  char v19 = type;
  os_log_type_t v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      char v27 = "nw_http_metadata_set_datagram_context_id";
      _os_log_impl(&dword_181A5C000, v11, v19, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    char v27 = "nw_http_metadata_set_datagram_context_id";
    os_log_type_t v28 = 2082;
    objc_super v29 = v18;
    _os_log_impl( &dword_181A5C000,  v11,  v19,  "%{public}s metadata must be http, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_42;
  }
LABEL_7:
}

    goto LABEL_41;
  }

  char v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_client_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_client_definition_definition);

  if (is_equal_unsafe)
  {
    v23[0] = MEMORY[0x1895F87A8];
    v23[1] = 3221225472LL;
    v23[2] = __nw_http_client_metadata_create_next_transaction_block_invoke;
    v23[3] = &__block_descriptor_36_e9_B16__0_v8l;
    BOOL v24 = a2;
    int v8 = *((void *)v5 + 4);
    if (v8) {
      __nw_http_client_metadata_create_next_transaction_block_invoke((uint64_t)v23, v8);
    }
    goto LABEL_7;
  }

  __nwlog_obj();
  os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v28 = "nw_http_client_metadata_create_next_transaction";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v25 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v28 = "nw_http_client_metadata_create_next_transaction";
      _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s metadata must be http_client", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (!v25)
  {
    __nwlog_obj();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v28 = "nw_http_client_metadata_create_next_transaction";
      _os_log_impl( &dword_181A5C000,  v11,  v22,  "%{public}s metadata must be http_client, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_40;
  }

  os_log_type_t v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  char v19 = type;
  os_log_type_t v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v28 = "nw_http_client_metadata_create_next_transaction";
      _os_log_impl(&dword_181A5C000, v11, v19, "%{public}s metadata must be http_client, no backtrace", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v28 = "nw_http_client_metadata_create_next_transaction";
    objc_super v29 = 2082;
    os_log_type_t v30 = v18;
    _os_log_impl( &dword_181A5C000,  v11,  v19,  "%{public}s metadata must be http_client, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_42;
  }
LABEL_7:
}

    free(backtrace_string);
    goto LABEL_59;
  }

  if (!a2)
  {
    __nwlog_obj();
    os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
    id v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    objc_super v29 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v15 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
        _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null time", buf, 0xCu);
      }

      goto LABEL_58;
    }

    if (!v29)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
        _os_log_impl( &dword_181A5C000,  v12,  v26,  "%{public}s called with null time, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_58;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v21 = type;
    v22 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
        _os_log_impl(&dword_181A5C000, v12, v21, "%{public}s called with null time, no backtrace", buf, 0xCu);
      }

      goto LABEL_58;
    }

    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v12,  v21,  "%{public}s called with null time, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_40;
  }

  char v5 = nw_protocol_metadata_copy_definition(v3);
  if (nw_protocol_copy_http_client_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52);
  }
  is_equal = nw_protocol_definition_is_equal( v5,  (nw_protocol_definition_t)nw_protocol_copy_http_client_definition_definition);

  if (is_equal)
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    os_log_type_t v32 = 0LL;
    v28[0] = MEMORY[0x1895F87A8];
    v28[1] = 3221225472LL;
    v28[2] = __nw_http_client_metadata_convert_time_to_absolute_block_invoke;
    v28[3] = &unk_189BC6510;
    v28[4] = buf;
    v28[5] = a2;
    uint64_t v7 = *((void *)v4 + 4);
    if (v7)
    {
      __nw_http_client_metadata_convert_time_to_absolute_block_invoke((uint64_t)v28, v7);
      int v8 = *(double *)(*(void *)&buf[8] + 24LL);
    }

    else
    {
      int v8 = 0.0;
    }

    _Block_object_dispose(buf, 8);
    goto LABEL_10;
  }

  __nwlog_obj();
  int v16 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
  id v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  objc_super v29 = 0;
  if (__nwlog_fault(v11, &type, &v29))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
        _os_log_impl(&dword_181A5C000, v12, v17, "%{public}s metadata must be http_client", buf, 0xCu);
      }

    goto LABEL_41;
  }

  id v3 = (id *)v1;
  uint64_t v4 = v3[1];

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74543);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v4,  nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    id v6 = v3[4];
    if (v6) {
      v6[140] |= 1u;
    }
    goto LABEL_7;
  }

  __nwlog_obj();
  id v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v24 = "nw_http_transaction_metadata_set_first_on_connection";
  int v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v21 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v24 = "nw_http_transaction_metadata_set_first_on_connection";
      _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (!v21)
  {
    __nwlog_obj();
    int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v24 = "nw_http_transaction_metadata_set_first_on_connection";
      _os_log_impl( &dword_181A5C000,  v9,  v20,  "%{public}s metadata must be http_transaction, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_40;
  }

  int v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  id v17 = type;
  os_log_type_t v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      BOOL v24 = "nw_http_transaction_metadata_set_first_on_connection";
      _os_log_impl(&dword_181A5C000, v9, v17, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v24 = "nw_http_transaction_metadata_set_first_on_connection";
    os_log_type_t v25 = 2082;
    os_log_type_t v26 = v16;
    _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_42;
  }
LABEL_7:
}

    goto LABEL_41;
  }

  char v5 = (id *)v3;
  id v6 = v5[1];

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74543);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    v23[0] = MEMORY[0x1895F87A8];
    v23[1] = 3221225472LL;
    v23[2] = __nw_http_transaction_metadata_increment_outbound_header_size_block_invoke;
    v23[3] = &__block_descriptor_40_e9_B16__0_v8l;
    v23[4] = a2;
    int v8 = v5[4];
    if (v8) {
      __nw_http_transaction_metadata_increment_outbound_header_size_block_invoke((uint64_t)v23, v8);
    }
    goto LABEL_7;
  }

  __nwlog_obj();
  os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v27 = "nw_http_transaction_metadata_increment_outbound_header_size";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v24 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      char v27 = "nw_http_transaction_metadata_increment_outbound_header_size";
      _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (!v24)
  {
    __nwlog_obj();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      char v27 = "nw_http_transaction_metadata_increment_outbound_header_size";
      _os_log_impl( &dword_181A5C000,  v11,  v22,  "%{public}s metadata must be http_transaction, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_40;
  }

  os_log_type_t v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  char v19 = type;
  os_log_type_t v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      char v27 = "nw_http_transaction_metadata_increment_outbound_header_size";
      _os_log_impl(&dword_181A5C000, v11, v19, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    char v27 = "nw_http_transaction_metadata_increment_outbound_header_size";
    os_log_type_t v28 = 2082;
    objc_super v29 = v18;
    _os_log_impl( &dword_181A5C000,  v11,  v19,  "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_42;
  }
LABEL_7:
}

    goto LABEL_41;
  }

  char v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74543);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    v23[0] = MEMORY[0x1895F87A8];
    v23[1] = 3221225472LL;
    v23[2] = __nw_http_transaction_metadata_increment_outbound_body_transfer_size_block_invoke;
    v23[3] = &__block_descriptor_40_e9_B16__0_v8l;
    v23[4] = a2;
    int v8 = *((void *)v5 + 4);
    if (v8) {
      __nw_http_transaction_metadata_increment_outbound_body_transfer_size_block_invoke((uint64_t)v23, v8);
    }
    goto LABEL_7;
  }

  __nwlog_obj();
  os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v27 = "nw_http_transaction_metadata_increment_outbound_body_transfer_size";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v24 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      char v27 = "nw_http_transaction_metadata_increment_outbound_body_transfer_size";
      _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (!v24)
  {
    __nwlog_obj();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      char v27 = "nw_http_transaction_metadata_increment_outbound_body_transfer_size";
      _os_log_impl( &dword_181A5C000,  v11,  v22,  "%{public}s metadata must be http_transaction, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_40;
  }

  os_log_type_t v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  char v19 = type;
  os_log_type_t v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      char v27 = "nw_http_transaction_metadata_increment_outbound_body_transfer_size";
      _os_log_impl(&dword_181A5C000, v11, v19, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    char v27 = "nw_http_transaction_metadata_increment_outbound_body_transfer_size";
    os_log_type_t v28 = 2082;
    objc_super v29 = v18;
    _os_log_impl( &dword_181A5C000,  v11,  v19,  "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_42;
  }
LABEL_7:
}

    goto LABEL_41;
  }

  char v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74543);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    v23[0] = MEMORY[0x1895F87A8];
    v23[1] = 3221225472LL;
    v23[2] = __nw_http_transaction_metadata_increment_inbound_header_size_block_invoke;
    v23[3] = &__block_descriptor_40_e9_B16__0_v8l;
    v23[4] = a2;
    int v8 = *((void *)v5 + 4);
    if (v8) {
      __nw_http_transaction_metadata_increment_inbound_header_size_block_invoke((uint64_t)v23, v8);
    }
    goto LABEL_7;
  }

  __nwlog_obj();
  os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v27 = "nw_http_transaction_metadata_increment_inbound_header_size";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v24 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      char v27 = "nw_http_transaction_metadata_increment_inbound_header_size";
      _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (!v24)
  {
    __nwlog_obj();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      char v27 = "nw_http_transaction_metadata_increment_inbound_header_size";
      _os_log_impl( &dword_181A5C000,  v11,  v22,  "%{public}s metadata must be http_transaction, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_40;
  }

  os_log_type_t v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  char v19 = type;
  os_log_type_t v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      char v27 = "nw_http_transaction_metadata_increment_inbound_header_size";
      _os_log_impl(&dword_181A5C000, v11, v19, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    char v27 = "nw_http_transaction_metadata_increment_inbound_header_size";
    os_log_type_t v28 = 2082;
    objc_super v29 = v18;
    _os_log_impl( &dword_181A5C000,  v11,  v19,  "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_42;
  }
LABEL_7:
}

    goto LABEL_41;
  }

  char v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74543);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    v23[0] = MEMORY[0x1895F87A8];
    v23[1] = 3221225472LL;
    v23[2] = __nw_http_transaction_metadata_increment_inbound_body_transfer_size_block_invoke;
    v23[3] = &__block_descriptor_40_e9_B16__0_v8l;
    v23[4] = a2;
    int v8 = *((void *)v5 + 4);
    if (v8) {
      __nw_http_transaction_metadata_increment_inbound_body_transfer_size_block_invoke((uint64_t)v23, v8);
    }
    goto LABEL_7;
  }

  __nwlog_obj();
  os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v27 = "nw_http_transaction_metadata_increment_inbound_body_transfer_size";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v24 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      char v27 = "nw_http_transaction_metadata_increment_inbound_body_transfer_size";
      _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (!v24)
  {
    __nwlog_obj();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      char v27 = "nw_http_transaction_metadata_increment_inbound_body_transfer_size";
      _os_log_impl( &dword_181A5C000,  v11,  v22,  "%{public}s metadata must be http_transaction, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_40;
  }

  os_log_type_t v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  char v19 = type;
  os_log_type_t v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      char v27 = "nw_http_transaction_metadata_increment_inbound_body_transfer_size";
      _os_log_impl(&dword_181A5C000, v11, v19, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    char v27 = "nw_http_transaction_metadata_increment_inbound_body_transfer_size";
    os_log_type_t v28 = 2082;
    objc_super v29 = v18;
    _os_log_impl( &dword_181A5C000,  v11,  v19,  "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_42;
  }
LABEL_7:
}

    goto LABEL_41;
  }

  char v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74543);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    v23[0] = MEMORY[0x1895F87A8];
    v23[1] = 3221225472LL;
    v23[2] = __nw_http_transaction_metadata_set_converted_url_response_block_invoke;
    v23[3] = &__block_descriptor_40_e9_B16__0_v8l;
    v23[4] = a2;
    int v8 = *((void *)v5 + 4);
    if (v8) {
      __nw_http_transaction_metadata_set_converted_url_response_block_invoke((uint64_t)v23, v8);
    }
    goto LABEL_7;
  }

  __nwlog_obj();
  os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v27 = "nw_http_transaction_metadata_set_converted_url_response";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v24 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      char v27 = "nw_http_transaction_metadata_set_converted_url_response";
      _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (!v24)
  {
    __nwlog_obj();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      char v27 = "nw_http_transaction_metadata_set_converted_url_response";
      _os_log_impl( &dword_181A5C000,  v11,  v22,  "%{public}s metadata must be http_transaction, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_40;
  }

  os_log_type_t v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  char v19 = type;
  os_log_type_t v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      char v27 = "nw_http_transaction_metadata_set_converted_url_response";
      _os_log_impl(&dword_181A5C000, v11, v19, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    char v27 = "nw_http_transaction_metadata_set_converted_url_response";
    os_log_type_t v28 = 2082;
    objc_super v29 = v18;
    _os_log_impl( &dword_181A5C000,  v11,  v19,  "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_42;
  }
LABEL_7:
}

    goto LABEL_41;
  }

  id v3 = v1;
  uint64_t v4 = *((id *)v3 + 1);

  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v4,  nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    id v6 = (os_unfair_lock_s *)*((void *)v3 + 4);
    if (v6)
    {
      uint64_t v7 = v6 + 44;
      *(void *)buf = MEMORY[0x1895F87A8];
      *(void *)&buf[8] = 3221225472LL;
      *(void *)&buf[16] = __nw_http_connection_metadata_closed_block_invoke_2;
      os_log_type_t v25 = &__block_descriptor_40_e5_v8__0l;
      os_log_type_t v26 = v6;
      os_unfair_lock_lock(v6 + 44);
      __nw_http_connection_metadata_closed_block_invoke_2((uint64_t)buf);
      os_unfair_lock_unlock(v7);
    }

    goto LABEL_7;
  }

  __nwlog_obj();
  os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_closed";
  int v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  v22 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_closed";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s metadata must be http_connection", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (!v22)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_closed";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s metadata must be http_connection, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_40;
  }

  id v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v18 = type;
  char v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_closed";
      _os_log_impl(&dword_181A5C000, v10, v18, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_closed";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s metadata must be http_connection, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_42;
  }
LABEL_7:
}

    goto LABEL_41;
  }

  char v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    v23[0] = MEMORY[0x1895F87A8];
    v23[1] = 3221225472LL;
    v23[2] = __nw_http_connection_metadata_set_version_block_invoke;
    v23[3] = &__block_descriptor_36_e9_B16__0_v8l;
    BOOL v24 = a2;
    int v8 = *((void *)v5 + 4);
    if (v8) {
      __nw_http_connection_metadata_set_version_block_invoke((uint64_t)v23, v8);
    }
    goto LABEL_7;
  }

  __nwlog_obj();
  os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v28 = "nw_http_connection_metadata_set_version";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v25 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v28 = "nw_http_connection_metadata_set_version";
      _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s metadata must be http_connection", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (!v25)
  {
    __nwlog_obj();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v28 = "nw_http_connection_metadata_set_version";
      _os_log_impl( &dword_181A5C000,  v11,  v22,  "%{public}s metadata must be http_connection, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_40;
  }

  os_log_type_t v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  char v19 = type;
  os_log_type_t v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v28 = "nw_http_connection_metadata_set_version";
      _os_log_impl(&dword_181A5C000, v11, v19, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v28 = "nw_http_connection_metadata_set_version";
    objc_super v29 = 2082;
    os_log_type_t v30 = v18;
    _os_log_impl( &dword_181A5C000,  v11,  v19,  "%{public}s metadata must be http_connection, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_42;
  }
LABEL_7:
}

    goto LABEL_41;
  }

  id v3 = v1;
  uint64_t v4 = *((id *)v3 + 1);

  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v4,  nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    id v6 = *((void *)v3 + 4);
    if (v6) {
      __nw_http_connection_metadata_increment_outbound_message_count_block_invoke( (uint64_t)&__block_literal_global_66_75458,  v6);
    }
    goto LABEL_7;
  }

  __nwlog_obj();
  id v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v24 = "nw_http_connection_metadata_increment_outbound_message_count";
  int v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v21 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v24 = "nw_http_connection_metadata_increment_outbound_message_count";
      _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s metadata must be http_connection", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (!v21)
  {
    __nwlog_obj();
    int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v24 = "nw_http_connection_metadata_increment_outbound_message_count";
      _os_log_impl( &dword_181A5C000,  v9,  v20,  "%{public}s metadata must be http_connection, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_40;
  }

  int v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  id v17 = type;
  os_log_type_t v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      BOOL v24 = "nw_http_connection_metadata_increment_outbound_message_count";
      _os_log_impl(&dword_181A5C000, v9, v17, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v24 = "nw_http_connection_metadata_increment_outbound_message_count";
    os_log_type_t v25 = 2082;
    os_log_type_t v26 = v16;
    _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s metadata must be http_connection, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_42;
  }
LABEL_7:
}

    goto LABEL_41;
  }

  id v3 = v1;
  uint64_t v4 = *((id *)v3 + 1);

  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v4,  nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    id v6 = *((void *)v3 + 4);
    if (v6) {
      __nw_http_connection_metadata_increment_inbound_message_count_block_invoke( (uint64_t)&__block_literal_global_68,  v6);
    }
    goto LABEL_7;
  }

  __nwlog_obj();
  id v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v24 = "nw_http_connection_metadata_increment_inbound_message_count";
  int v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v21 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v24 = "nw_http_connection_metadata_increment_inbound_message_count";
      _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s metadata must be http_connection", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (!v21)
  {
    __nwlog_obj();
    int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v24 = "nw_http_connection_metadata_increment_inbound_message_count";
      _os_log_impl( &dword_181A5C000,  v9,  v20,  "%{public}s metadata must be http_connection, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_40;
  }

  int v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  id v17 = type;
  os_log_type_t v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      BOOL v24 = "nw_http_connection_metadata_increment_inbound_message_count";
      _os_log_impl(&dword_181A5C000, v9, v17, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v24 = "nw_http_connection_metadata_increment_inbound_message_count";
    os_log_type_t v25 = 2082;
    os_log_type_t v26 = v16;
    _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s metadata must be http_connection, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_42;
  }
LABEL_7:
}

    goto LABEL_41;
  }

  char v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    v23[0] = MEMORY[0x1895F87A8];
    v23[1] = 3221225472LL;
    v23[2] = __nw_http_connection_metadata_set_privacy_stance_block_invoke;
    v23[3] = &__block_descriptor_36_e9_B16__0_v8l;
    BOOL v24 = a2;
    int v8 = *((void *)v5 + 4);
    if (v8) {
      __nw_http_connection_metadata_set_privacy_stance_block_invoke((uint64_t)v23, v8);
    }
    goto LABEL_7;
  }

  __nwlog_obj();
  os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v28 = "nw_http_connection_metadata_set_privacy_stance";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v25 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v28 = "nw_http_connection_metadata_set_privacy_stance";
      _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s metadata must be http_connection", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (!v25)
  {
    __nwlog_obj();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v28 = "nw_http_connection_metadata_set_privacy_stance";
      _os_log_impl( &dword_181A5C000,  v11,  v22,  "%{public}s metadata must be http_connection, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_40;
  }

  os_log_type_t v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  char v19 = type;
  os_log_type_t v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v28 = "nw_http_connection_metadata_set_privacy_stance";
      _os_log_impl(&dword_181A5C000, v11, v19, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v28 = "nw_http_connection_metadata_set_privacy_stance";
    objc_super v29 = 2082;
    os_log_type_t v30 = v18;
    _os_log_impl( &dword_181A5C000,  v11,  v19,  "%{public}s metadata must be http_connection, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_42;
  }
LABEL_7:
}

    goto LABEL_41;
  }

  char v5 = v3;
  id v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    v23[0] = MEMORY[0x1895F87A8];
    v23[1] = 3221225472LL;
    v23[2] = __nw_http_connection_metadata_set_uuid_block_invoke;
    v23[3] = &__block_descriptor_40_e9_B16__0_v8l;
    v23[4] = a2;
    int v8 = *((void *)v5 + 4);
    if (v8) {
      __nw_http_connection_metadata_set_uuid_block_invoke((uint64_t)v23, v8);
    }
    goto LABEL_7;
  }

  __nwlog_obj();
  os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v27 = "nw_http_connection_metadata_set_uuid";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v24 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      char v27 = "nw_http_connection_metadata_set_uuid";
      _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s metadata must be http_connection", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (!v24)
  {
    __nwlog_obj();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      char v27 = "nw_http_connection_metadata_set_uuid";
      _os_log_impl( &dword_181A5C000,  v11,  v22,  "%{public}s metadata must be http_connection, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_40;
  }

  os_log_type_t v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  char v19 = type;
  os_log_type_t v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      char v27 = "nw_http_connection_metadata_set_uuid";
      _os_log_impl(&dword_181A5C000, v11, v19, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }

    goto LABEL_40;
  }

  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    char v27 = "nw_http_connection_metadata_set_uuid";
    os_log_type_t v28 = 2082;
    objc_super v29 = v18;
    _os_log_impl( &dword_181A5C000,  v11,  v19,  "%{public}s metadata must be http_connection, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_42;
  }
LABEL_7:
}

      BOOL v54 = *((unsigned __int8 *)a3 + *v9);
      if (*((_BYTE *)a3 + *v9)) {
        id v17 = 0LL;
      }
LABEL_42:
      if (v54) {
        uint64_t v55 = 1;
      }
      else {
        uint64_t v55 = (v17 & 7) == 4;
      }
      if (v55) {
        goto LABEL_88;
      }
      v56 = v17 >> 3;
      if ((v17 >> 3) == 3)
      {
        *(_BYTE *)&self->_has |= 1u;
        BOOL v57 = *v4;
        v58 = *(void *)((char *)a3 + v57);
        if (v58 == -1LL || v58 >= *(void *)((char *)a3 + *v7))
        {
          BOOL v61 = 0;
        }

        else
        {
          v59 = v58 + 1;
          os_log_type_t v60 = *(_BYTE *)(*(void *)((char *)a3 + *v11) + v58);
          *(void *)((char *)a3 + v57) = v59;
          BOOL v61 = v60 & 0x7F;
          if ((v60 & 0x80) == 0) {
            goto LABEL_85;
          }
          v62 = *v4;
          os_log_type_t v63 = *(void *)((char *)a3 + v62);
          if (v63 != -1LL && v63 < *(void *)((char *)a3 + *v7))
          {
            os_log_type_t v64 = *(char *)(*(void *)((char *)a3 + *v11) + v63);
            *(void *)((char *)a3 + v62) = v63 + 1;
            BOOL v61 = v61 & 0xFFFFC07F | ((v64 & 0x7F) << 7);
            if ((v64 & 0x80000000) == 0) {
              goto LABEL_85;
            }
            os_log_type_t v65 = *v4;
            BOOL v66 = *(void *)((char *)a3 + v65);
            if (v66 != -1LL && v66 < *(void *)((char *)a3 + *v7))
            {
              os_log_type_t v67 = *(char *)(*(void *)((char *)a3 + *v11) + v66);
              *(void *)((char *)a3 + v65) = v66 + 1;
              BOOL v61 = v61 & 0xFFE03FFF | ((v67 & 0x7F) << 14);
              if ((v67 & 0x80000000) == 0) {
                goto LABEL_85;
              }
              v68 = *v4;
              v69 = *(void *)((char *)a3 + v68);
              if (v69 != -1LL && v69 < *(void *)((char *)a3 + *v7))
              {
                v70 = *(char *)(*(void *)((char *)a3 + *v11) + v69);
                *(void *)((char *)a3 + v68) = v69 + 1;
                BOOL v61 = v61 & 0xF01FFFFF | ((v70 & 0x7F) << 21);
                if ((v70 & 0x80000000) == 0) {
                  goto LABEL_85;
                }
                os_log_type_t v71 = *v4;
                v72 = *(void *)((char *)a3 + v71);
                if (v72 != -1LL && v72 < *(void *)((char *)a3 + *v7))
                {
                  __uint64_t v73 = v72 + 1;
                  unint64_t v74 = *(char *)(*(void *)((char *)a3 + *v11) + v72);
                  *(void *)((char *)a3 + v71) = v73;
                  v61 |= v74 << 28;
                  if ((v74 & 0x80000000) == 0) {
                    goto LABEL_85;
                  }
                  char v75 = *v4;
                  __uint64_t v76 = *(void *)((char *)a3 + v75);
                  if (v76 != -1LL && v76 < *(void *)((char *)a3 + *v7))
                  {
                    v77 = v76 + 1;
                    unint64_t v78 = *(char *)(*(void *)((char *)a3 + *v11) + v76);
                    *(void *)((char *)a3 + v75) = v77;
                    if ((v78 & 0x80000000) == 0) {
                      goto LABEL_85;
                    }
                    char v79 = *v4;
                    v80 = *(void *)((char *)a3 + v79);
                    if (v80 != -1LL && v80 < *(void *)((char *)a3 + *v7))
                    {
                      v81 = v80 + 1;
                      v82 = *(char *)(*(void *)((char *)a3 + *v11) + v80);
                      *(void *)((char *)a3 + v79) = v81;
                      if ((v82 & 0x80000000) == 0) {
                        goto LABEL_85;
                      }
                      os_log_type_t v83 = *v4;
                      v84 = *(void *)((char *)a3 + v83);
                      if (v84 != -1LL && v84 < *(void *)((char *)a3 + *v7))
                      {
                        v85 = v84 + 1;
                        v86 = *(char *)(*(void *)((char *)a3 + *v11) + v84);
                        *(void *)((char *)a3 + v83) = v85;
                        if ((v86 & 0x80000000) == 0) {
                          goto LABEL_85;
                        }
                        os_log_type_t v87 = *v4;
                        v88 = *(void *)((char *)a3 + v87);
                        if (v88 != -1LL && v88 < *(void *)((char *)a3 + *v7))
                        {
                          os_log_type_t v89 = v88 + 1;
                          BOOL v90 = *(char *)(*(void *)((char *)a3 + *v11) + v88);
                          *(void *)((char *)a3 + v87) = v89;
                          if ((v90 & 0x80000000) == 0) {
                            goto LABEL_85;
                          }
                          os_log_type_t v91 = *v4;
                          v92 = *(void *)((char *)a3 + v91);
                          if (v92 != -1LL && v92 < *(void *)((char *)a3 + *v7))
                          {
                            v93 = v92 + 1;
                            v94 = *(char *)(*(void *)((char *)a3 + *v11) + v92);
                            *(void *)((char *)a3 + v91) = v93;
                            if (v94 < 0)
                            {
                              BOOL v61 = 0;
LABEL_87:
                              self->_receiveWindow = v61;
                              goto LABEL_5;
                            }

      if (v13) {
        free(v13);
      }
      return 0LL;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v14 = (os_log_s *)gLogObj;
    id v15 = type;
    char v19 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        char v27 = "nw_protocol_http_messaging_remove_listen_handler";
        int v16 = "%{public}s ignoring request to remove protocol listen handler, does not match our handler, no backtrace";
        goto LABEL_39;
      }

      goto LABEL_40;
    }

    if (!v19)
    {
LABEL_34:
      free(backtrace_string);
      goto LABEL_40;
    }

    *(_DWORD *)buf = 136446466;
    char v27 = "nw_protocol_http_messaging_remove_listen_handler";
    os_log_type_t v28 = 2082;
    objc_super v29 = backtrace_string;
    os_log_type_t v20 = "%{public}s ignoring request to remove protocol listen handler, does not match our handler, dumping backtrace:%{public}s";
LABEL_33:
    _os_log_impl(&dword_181A5C000, v14, v15, v20, buf, 0x16u);
    goto LABEL_34;
  }

  a2->protocol_handler = 0LL;
  uint64_t result = 1LL;
  if ((handle[272] & 8) == 0 && v8 == (char *)v9)
  {
    nw_protocol_http_messaging_teardown((uint64_t)handle, 0LL);
    return 1LL;
  }

  return result;
}

      v53 = *(unsigned __int8 *)(a2 + *v8);
      if (*(_BYTE *)(a2 + *v8)) {
        int v16 = 0LL;
      }
LABEL_42:
      if (v53) {
        BOOL v54 = 1;
      }
      else {
        BOOL v54 = (v16 & 7) == 4;
      }
      if (v54) {
        return *(_BYTE *)(a2 + *v8) == 0;
      }
      uint64_t v55 = v16 >> 3;
      if ((v16 >> 3) == 3)
      {
        id v11 = PBReaderReadString();
        os_log_type_t v12 = 8LL;
        goto LABEL_4;
      }

      if ((_DWORD)v55 == 2)
      {
        id v11 = PBReaderReadString();
        os_log_type_t v12 = 24LL;
LABEL_4:
        os_log_type_t v13 = *(void **)(a1 + v12);
        *(void *)(a1 + v12) = v11;

        goto LABEL_5;
      }

      if ((_DWORD)v55 == 1)
      {
        id v11 = PBReaderReadString();
        os_log_type_t v12 = 16LL;
        goto LABEL_4;
      }

      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0LL;
      }
LABEL_5:
      uint64_t v4 = *v3;
      char v5 = *(void *)(a2 + v4);
      uint64_t v7 = *(void *)(a2 + *v6);
      if (v5 >= v7) {
        return *(_BYTE *)(a2 + *v8) == 0;
      }
    }

    int v16 = 0LL;
LABEL_39:
    *os_log_type_t v14 = 1;
    goto LABEL_40;
  }

  return *(_BYTE *)(a2 + *v8) == 0;
}

  if (v9) {
    free(v9);
  }
  id v6 = 0LL;
LABEL_7:

  return v6;
}

    _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
    goto LABEL_41;
  }

  if (a2)
  {
    if (*a1 == 1)
    {
      char v5 = a2 - 1;
      do
      {
        if (v5 < 2) {
          break;
        }
        id v6 = a1[v5];
        uint64_t v7 = v5 - 1 >= v6;
        char v5 = v5 - 1 - v6;
        if (!v7) {
          break;
        }
      }

      while (((*(uint64_t (**)(uint64_t))(a3 + 16))(a3) & 1) != 0);
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v8 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        int v9 = *a1;
        *(_DWORD *)buf = 136446466;
        BOOL v21 = "nw_log_ring_parse";
        v22 = 1024;
        LODWORD(v23) = v9;
        _os_log_impl(&dword_181A5C000, v8, OS_LOG_TYPE_ERROR, "%{public}s Unsupported log ring version: %u", buf, 0x12u);
      }
    }

    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v21 = "nw_log_ring_parse";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v18 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    id v11 = (os_log_s *)__nwlog_obj();
    os_log_type_t v12 = type;
    if (!os_log_type_enabled(v11, type)) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v21 = "nw_log_ring_parse";
    os_log_type_t v13 = "%{public}s called with null length";
    goto LABEL_40;
  }

  if (!v18)
  {
    id v11 = (os_log_s *)__nwlog_obj();
    os_log_type_t v12 = type;
    if (!os_log_type_enabled(v11, type)) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v21 = "nw_log_ring_parse";
    os_log_type_t v13 = "%{public}s called with null length, backtrace limit exceeded";
    goto LABEL_40;
  }

  int v16 = (char *)__nw_create_backtrace_string();
  id v11 = (os_log_s *)__nwlog_obj();
  os_log_type_t v12 = type;
  id v17 = os_log_type_enabled(v11, type);
  if (!v16)
  {
    if (!v17) {
      goto LABEL_41;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v21 = "nw_log_ring_parse";
    os_log_type_t v13 = "%{public}s called with null length, no backtrace";
    goto LABEL_40;
  }

  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v21 = "nw_log_ring_parse";
    v22 = 2082;
    os_log_type_t v23 = v16;
    _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s called with null length, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v10) {
    goto LABEL_42;
  }
}

    free(v13);
    goto LABEL_41;
  }

  if (!v7)
  {
    __nwlog_obj();
    char v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v39 = "-[NWConcrete_nw_endpoint_flow applyWithHandler:toChildren:]";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    id v36 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v39 = "-[NWConcrete_nw_endpoint_flow applyWithHandler:toChildren:]";
        _os_log_impl(&dword_181A5C000, v14, v28, "%{public}s called with null applyBlock", buf, 0xCu);
      }

    *((_BYTE *)v7 + 33) &= ~0x40u;
    goto LABEL_41;
  }

  *((_BYTE *)v7 + 34) |= 0x40u;
  int v8 = nw_endpoint_handler_copy_endpoint(v5);
  int v9 = (void *)*((void *)v7 + 121);
  *((void *)v7 + 121) = v8;

  os_log_type_t v10 = nw_endpoint_flow_setup_protocols(v5, 0LL, a2, 0, 1);
LABEL_43:

LABEL_57:
  return v10;
}

      if (v15) {
        free(v15);
      }
      if (v12) {
        free(v12);
      }
      if (*((void *)&v52 + 1))
      {
        free(*((void **)&v52 + 1));
        *((void *)&v52 + 1) = 0LL;
      }

      goto LABEL_46;
    }

LABEL_14:
    if (!v15)
    {
LABEL_16:
      os_log_type_t v13 = 0LL;
      goto LABEL_17;
    }

LABEL_46:
    if (v16) {
      free(v16);
    }
  }

  return v6;
}

    free(v23);
    if (!v13) {
      goto LABEL_16;
    }
    goto LABEL_67;
  }

  if (v6 != &__block_literal_global_6237 || v7)
  {
    if (v7)
    {
      if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
        dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55123);
      }
      int v9 = (id)nw_protocol_copy_quic_connection_definition::quic_definition;
      is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v8, (uint64_t)v9);

      if (is_equal_unsafe)
      {
        if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
          dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55294);
        }
        id v11 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;

        int v8 = v11;
      }
    }

    v31[0] = MEMORY[0x1895F87A8];
    v31[1] = 3221225472LL;
    v31[2] = __nw_endpoint_add_alternative_block_invoke;
    v31[3] = &unk_189BC6E60;
    os_log_type_t v32 = v5;
    uint64_t v33 = v6;
    dispatch_workloop_t v34 = v8;
    int v8 = v8;
    nw_endpoint_locked(v32, v31);
  }

  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v8 = (id)gLogObj;
    if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v38 = "nw_endpoint_add_alternative";
      _os_log_impl( &dword_181A5C000,  (os_log_t)v8,  OS_LOG_TYPE_ERROR,  "%{public}s Cannot set an unknown alternative endpoint without a protocol",  buf,  0xCu);
    }
  }

      os_log_type_t v32 = 1LL;
      if (contact_id)
      {
LABEL_21:
        uint64_t v33 = strlen(contact_id) + 1;
        if (v12)
        {
LABEL_22:
          dispatch_workloop_t v34 = *((void *)v12 + 2);
          goto LABEL_49;
        }

    if (v6->alternate_port != self->alternate_port) {
      goto LABEL_49;
    }
  }

  uuid_clear(uu);
  objc_super v29 = self;
  *(_OWORD *)uu = *(_OWORD *)v29->agent_identifier;

  uuid_clear(uu2);
  os_log_type_t v30 = v6;
  *(_OWORD *)uu2 = *(_OWORD *)v30->agent_identifier;

  if (uuid_compare(uu, uu2)) {
    goto LABEL_49;
  }
  device_id = v29->device_id;
  os_log_type_t v32 = v30->device_id;
  if (device_id != v32 && device_id && v32)
  {
    if (strcmp(device_id, v32)) {
      goto LABEL_49;
    }
  }

  else if (device_id != v32)
  {
    goto LABEL_49;
  }

  if ((v4 & 0x10) == 0 || nw_nsarray_is_equal(v29->public_keys, v30->public_keys))
  {
    os_log_type_t v25 = 1;
    goto LABEL_50;
  }

  if (v25) {
    free(v25);
  }
  v22 = 0LL;
LABEL_29:

  return v22;
}

  if (v7) {
    free(v7);
  }
  return 0LL;
}

    free(backtrace_string);
    goto LABEL_56;
  }

  os_log_type_t v13 = (os_log_s *)__nwlog_obj();
  os_log_type_t v14 = type[0];
  if (os_log_type_enabled(v13, type[0]))
  {
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_channel_finalize_output_frames";
    id v15 = "%{public}s called with null channel_protocol";
LABEL_55:
    _os_log_impl(&dword_181A5C000, v13, v14, v15, buf, 0xCu);
  }

  swift_release();
  v125 = v128;
  v126 = v127;
  sub_18264EEE0();
  os_log_type_t v83 = v85;
  sub_18264EEC8();
  return (*(uint64_t (**)(char *, uint64_t))(v86 + 8))(v83, v87);
}

    sub_181C3255C(v7, v6, v8, v9);
    sub_181C32588(v3, v2, v4, v5);
    sub_181C32588(v7, v6, v8, v9);
    return 0LL;
  }

  if (v9 != 1)
  {
    swift_bridgeObjectRetain();
    goto LABEL_46;
  }

  os_log_type_t v10 = *(void *)a1;
  if (v3 == v7 && v2 == v6)
  {
    sub_181C3255C(v10, v2, v8, 1);
    sub_181C3255C(v3, v2, v4, 1);
    sub_181C32588(v3, v2, v4, 1);
    sub_181C32588(v3, v2, v8, 1);
  }

  else
  {
    os_log_type_t v12 = sub_18264F4EC();
    sub_181C3255C(v7, v6, v8, 1);
    sub_181C3255C(v3, v2, v4, 1);
    sub_181C32588(v3, v2, v4, 1);
    sub_181C32588(v7, v6, v8, 1);
    os_log_type_t v13 = 0LL;
    if ((v12 & 1) == 0) {
      return v13;
    }
  }

  return v4 == v8;
}

    os_log_type_t v13 = !v7;
    if (v6) {
      os_log_type_t v13 = 1;
    }
    if ((v13 & 1) == 0 && (*((_DWORD *)v2 + 1) == 1668506729 || *((_DWORD *)v2 + 1) == 1952539753))
    {
      id v6 = 17;
      *(_BYTE *)(result + 23) = 17;
      strcpy((char *)result, "image/x-quicktime");
    }

    else if (!v6 && v4 >= 2 && *v2 == 759)
    {
      id v6 = 17;
      *(_BYTE *)(result + 23) = 17;
      strcpy((char *)result, "application/x-dvi");
    }

    goto LABEL_66;
  }

  id v6 = 10;
  *(_BYTE *)(result + 23) = 10;
  *(_WORD *)(result + 8) = 26214;
  os_log_type_t v12 = "audio/aiff";
LABEL_35:
  *(void *)uint64_t result = *(void *)v12;
  *(_BYTE *)(result + 10) = 0;
LABEL_66:
  if (!v6
    && v4 >= 4
    && *v2 == 55809
    && *((unsigned __int8 *)v2 + 2) <= 1u
    && *((unsigned __int8 *)v2 + 3) - 1 <= 0xE)
  {
    *(_BYTE *)(result + 23) = 9;
    strcpy((char *)result, "image/sgi");
  }

  return result;
}

          free(v14);
          goto LABEL_47;
        }

        if (v24)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v30 = "nw_candidate_manager_create_with_connection";
          _os_log_impl( &dword_181A5C000,  v15,  v23,  "%{public}s called with null (bonjour_endpoint == nullptr || nw_endpoint_get_type((nw_endpoint_t)bonjour_endp oint) == nw_endpoint_type_bonjour_service), no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v30 = "nw_candidate_manager_create_with_connection";
          _os_log_impl( &dword_181A5C000,  v15,  v26,  "%{public}s called with null (bonjour_endpoint == nullptr || nw_endpoint_get_type((nw_endpoint_t)bonjour_endp oint) == nw_endpoint_type_bonjour_service), backtrace limit exceeded",  buf,  0xCu);
        }
      }

            goto LABEL_32;
          }

          BOOL v54 = (char *)v30;
          if (__nwlog_candidate_manager_log::onceToken != -1) {
            dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
          }
          v31 = (os_log_s *)(id)gcandidate_managerLogObj;
          os_log_type_t v32 = type;
          log = v31;
          if (os_log_type_enabled(v31, type))
          {
            uint64_t v33 = v17[1];
            *(_DWORD *)v80 = 136446978;
            v81 = "nw_candidate_manager_handle_ids_endpoints";
            v82 = 2048;
            os_log_type_t v83 = v33;
            v84 = 2112;
            v85 = v22;
            v86 = 2082;
            os_log_type_t v87 = v54;
            _os_log_impl( &dword_181A5C000,  log,  v32,  "%{public}s [CM%zu] No resolver for %@, dumping backtrace:%{public}s",  v80,  0x2Au);
          }

          free(v54);
          objc_super v29 = (char *)v58;
          if (v58) {
            goto LABEL_33;
          }
        }

    if (v27) {
      free(v27);
    }
    goto LABEL_6;
  }

  nw_context_assert_queue(v3[46]);
  if ((*((_BYTE *)v4 + 607) & 4) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v5 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_framer_write_output_no_copy";
      _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_ERROR,  "%{public}s Cannot write output when not in output handler",  buf,  0xCu);
    }

LABEL_6:
    id v6 = 0;
    goto LABEL_29;
  }

  *(void *)os_log_type_t type = 0LL;
  os_log_type_t v41 = type;
  BOOL v42 = 0x2020000000LL;
  char v43 = output_length;
  if (output_length)
  {
    if (*((unsigned int *)v4 + 150) + output_length <= *((unsigned int *)v4 + 148))
    {
      id v11 = (uint64_t)v4[69];
      if (!v11)
      {
        os_log_type_t v12 = nw_array_create();
        os_log_type_t v13 = v4[69];
        v4[69] = (void *)v12;

        id v11 = (uint64_t)v4[69];
      }

      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      v51 = __Block_byref_object_copy__4444;
      os_log_type_t v52 = __Block_byref_object_dispose__4445;
      v53 = 0LL;
      if (v11)
      {
        os_log_type_t v14 = *(void *)(v11 + 24) - *(void *)(v11 + 16);
        if (v14)
        {
          id v15 = nw_array_remove_object_at_index(v11, (char *)((v14 >> 3) - 1));
          int v16 = *(void **)(*(void *)&buf[8] + 40LL);
          *(void *)(*(void *)&buf[8] + 40LL) = v15;
        }
      }

      v34[0] = MEMORY[0x1895F87A8];
      v34[1] = 3221225472LL;
      v35 = (uint64_t (*)(void *))__nw_framer_write_output_no_copy_block_invoke;
      id v36 = &unk_189BB6798;
      id v17 = v4;
      v37 = v17;
      v38 = type;
      os_log_type_t v39 = buf;
      os_log_type_t v18 = v4[71];
      do
      {
        if (!v18) {
          break;
        }
        char v19 = (void *)v18[4];
        os_log_type_t v20 = v35(v34);
        os_log_type_t v18 = v19;
      }

      while ((v20 & 1) != 0);
      BOOL v21 = *(void **)(*(void *)&buf[8] + 40LL);
      if (v21) {
        nw_array_append((uint64_t)v4[69], v21);
      }
      v22 = *((void *)v41 + 3);
      id v6 = v22 == 0;
      if (v22)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v23 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          BOOL v24 = *((void *)v41 + 3);
          *(_DWORD *)dispatch_workloop_t v44 = 136446722;
          v45 = "nw_framer_write_output_no_copy";
          os_log_type_t v46 = 2080;
          os_log_type_t v47 = (char *)v17 + 609;
          v48 = 2048;
          id v49 = v24;
          _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_ERROR,  "%{public}s %s Failed to write entire length, still have %zu bytes",  v44,  0x20u);
        }
      }

      _Block_object_dispose(buf, 8);
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v7 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        int v8 = (uint64_t (*)(uint64_t, uint64_t))*((void *)v41 + 3);
        int v9 = *((_DWORD *)v4 + 150);
        os_log_type_t v10 = *((_DWORD *)v4 + 148);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_framer_write_output_no_copy";
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = (char *)v4 + 609;
        *(_WORD *)&buf[22] = 2048;
        v51 = v8;
        LOWORD(v52) = 1024;
        *(_DWORD *)((char *)&v52 + 2) = v9;
        HIWORD(v52) = 1024;
        LODWORD(v53) = v10;
        _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_ERROR,  "%{public}s %s Cannot write %zu bytes, already have %u/%u",  buf,  0x2Cu);
      }

      id v6 = 0;
    }
  }

  else
  {
    nw_framer_flush_output(v4, 0LL);
    id v6 = 1;
  }

  _Block_object_dispose(type, 8);
LABEL_29:

  return v6;
}

LABEL_47:
      if (v16) {
        free(v16);
      }
      goto LABEL_10;
    }

    if (!v30)
    {
      __nwlog_obj();
      id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v27 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v33 = "nw_framer_message_create_reply";
        _os_log_impl( &dword_181A5C000,  v17,  v27,  "%{public}s called with null nw_protocol_metadata_is_framer_message(original_message), backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_46;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v24 = type;
    os_log_type_t v25 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v33 = "nw_framer_message_create_reply";
        _os_log_impl( &dword_181A5C000,  v17,  v24,  "%{public}s called with null nw_protocol_metadata_is_framer_message(original_message), no backtrace",  buf,  0xCu);
      }

      goto LABEL_46;
    }

    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v33 = "nw_framer_message_create_reply";
      dispatch_workloop_t v34 = 2082;
      v35 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v17,  v24,  "%{public}s called with null nw_protocol_metadata_is_framer_message(original_message), dumping backtrace:%{public}s",  buf,  0x16u);
    }
}

  if (v13) {
    free(v13);
  }
  os_log_type_t v10 = 0LL;
LABEL_13:

  return v10;
}

    free(v22);
    if (!v10) {
      goto LABEL_6;
    }
    goto LABEL_73;
  }

  nw_protocol_definition_initialize_extended_state(v7);
  v8->extended_state->var2 = a2;
  v8->extended_state->var3 = a3;
  v8->extended_state->var4 = a4;
LABEL_6:
}

    free(v22);
    if (!v10) {
      goto LABEL_6;
    }
    goto LABEL_73;
  }

  v7[11] = a2;
  v7[12] = a3;
  v7[13] = a4;
LABEL_6:
}

    goto LABEL_47;
  }

  if (v4)
  {
    id v6 = v3[14];
    if (v6)
    {
      if ((*((_WORD *)v3 + 102) & 0x100) == 0
        || !g_channel_check_validity
        || g_channel_check_validity(v3, v3[11]))
      {
        LODWORD(v6) = *((_DWORD *)v3 + 13);
        uint64_t v7 = *((unsigned int *)v3 + 14);
        if ((_DWORD)v6) {
          LODWORD(v6) = v6 - (v7 + *((_DWORD *)v3 + 15));
        }
        int v8 = v3[14] + v7;
        goto LABEL_33;
      }

      LODWORD(v6) = 0;
    }

    int v8 = 0LL;
LABEL_33:
    v5[2](v5, v8, v6);
    goto LABEL_34;
  }

  __nwlog_obj();
  os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v26 = "nw_protocol_data_access_buffer";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v23 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_protocol_data_access_buffer";
      _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null access_block", buf, 0xCu);
    }

    goto LABEL_46;
  }

  if (!v23)
  {
    __nwlog_obj();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_protocol_data_access_buffer";
      _os_log_impl( &dword_181A5C000,  v11,  v22,  "%{public}s called with null access_block, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_46;
  }

  os_log_type_t v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  char v19 = type;
  os_log_type_t v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_protocol_data_access_buffer";
      _os_log_impl(&dword_181A5C000, v11, v19, "%{public}s called with null access_block, no backtrace", buf, 0xCu);
    }

    goto LABEL_46;
  }

  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v26 = "nw_protocol_data_access_buffer";
    char v27 = 2082;
    os_log_type_t v28 = v18;
    _os_log_impl( &dword_181A5C000,  v11,  v19,  "%{public}s called with null access_block, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_48;
  }
LABEL_34:
}

  if (v12) {
    free(v12);
  }
  return 1LL;
}

    if (v27) {
      free(v27);
    }
    goto LABEL_48;
  }
}

    free(v10);
    goto LABEL_47;
  }

  __nwlog_obj();
  os_log_type_t v32 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v53 = "nw_parameters_create_quic_connection";
  objc_super v29 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  v50 = 0;
  if (__nwlog_fault(v29, &type, &v50))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v33 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_parameters_create_quic_connection";
        _os_log_impl( &dword_181A5C000,  v30,  v33,  "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable))",  buf,  0xCu);
      }
    }

    else if (v50)
    {
      v37 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v38 = type;
      os_log_type_t v39 = os_log_type_enabled(v30, type);
      if (v37)
      {
        if (v39)
        {
          *(_DWORD *)buf = 136446466;
          v53 = "nw_parameters_create_quic_connection";
          BOOL v54 = 2082;
          uint64_t v55 = v37;
          _os_log_impl( &dword_181A5C000,  v30,  v38,  "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable)), dump ing backtrace:%{public}s",  buf,  0x16u);
        }

        free(v37);
        if (!v29) {
          goto LABEL_7;
        }
        goto LABEL_99;
      }

      if (v39)
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_parameters_create_quic_connection";
        _os_log_impl( &dword_181A5C000,  v30,  v38,  "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable)), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v45 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_parameters_create_quic_connection";
        _os_log_impl( &dword_181A5C000,  v30,  v45,  "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable)), backtr ace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_97;
  }

    goto LABEL_47;
  }

  if (a2)
  {
    if (uuid_is_null(v3 + 8))
    {
      *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
    }

    else
    {
      char v5 = (void *)*((void *)v4 + 17);
      if (!v5)
      {
        id v6 = xpc_array_create(0LL, 0LL);
        uint64_t v7 = (void *)*((void *)v4 + 17);
        *((void *)v4 + 17) = v6;

        char v5 = (void *)*((void *)v4 + 17);
      }

      xpc_array_set_uuid(v5, 0xFFFFFFFFFFFFFFFFLL, a2);
    }

    int v8 = *(void *)(*((void *)v4 + 13) + 176LL);
    if (v8 && *(void *)(v8 + 128))
    {
      int v9 = *(void **)(v8 + 136);
      if (!v9)
      {
        os_log_type_t v10 = xpc_array_create(0LL, 0LL);
        id v11 = *(void *)(*((void *)v4 + 13) + 176LL);
        os_log_type_t v12 = *(void **)(v11 + 136);
        *(void *)(v11 + 136) = v10;

        int v9 = *(void **)(*(void *)(*((void *)v4 + 13) + 176LL) + 136LL);
      }

      xpc_array_set_uuid(v9, 0xFFFFFFFFFFFFFFFFLL, a2);
    }

    goto LABEL_13;
  }

  __nwlog_obj();
  id v17 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v30 = "nw_parameters_add_parent_id";
  os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v27 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v18 = type;
    if (os_log_type_enabled(v15, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v30 = "nw_parameters_add_parent_id";
      _os_log_impl(&dword_181A5C000, v15, v18, "%{public}s called with null parent_id", buf, 0xCu);
    }

    goto LABEL_46;
  }

  if (!v27)
  {
    __nwlog_obj();
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v26 = type;
    if (os_log_type_enabled(v15, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v30 = "nw_parameters_add_parent_id";
      _os_log_impl( &dword_181A5C000,  v15,  v26,  "%{public}s called with null parent_id, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_46;
  }

  v22 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v23 = type;
  BOOL v24 = os_log_type_enabled(v15, type);
  if (!v22)
  {
    if (v24)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v30 = "nw_parameters_add_parent_id";
      _os_log_impl(&dword_181A5C000, v15, v23, "%{public}s called with null parent_id, no backtrace", buf, 0xCu);
    }

    goto LABEL_46;
  }

  if (v24)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v30 = "nw_parameters_add_parent_id";
    v31 = 2082;
    os_log_type_t v32 = v22;
    _os_log_impl( &dword_181A5C000,  v15,  v23,  "%{public}s called with null parent_id, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v22);
  if (v14) {
    goto LABEL_48;
  }
LABEL_13:
}

        goto LABEL_47;
      }

      if (!v30)
      {
        __nwlog_obj();
        id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v27 = type[0];
        if (os_log_type_enabled(v17, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_has_proxy_protocol_in_effective_config";
          _os_log_impl( &dword_181A5C000,  v17,  v27,  "%{public}s called with null parameters->default_stack, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_46;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v24 = type[0];
      os_log_type_t v25 = os_log_type_enabled(v17, type[0]);
      if (!backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_has_proxy_protocol_in_effective_config";
          _os_log_impl( &dword_181A5C000,  v17,  v24,  "%{public}s called with null parameters->default_stack, no backtrace",  buf,  0xCu);
        }

        goto LABEL_46;
      }

      if (v25)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_parameters_has_proxy_protocol_in_effective_config";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v17,  v24,  "%{public}s called with null parameters->default_stack, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_34;
    }
  }

  else
  {
    __nwlog_obj();
    id v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_parameters_has_proxy_protocol_in_effective_config";
    int v16 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v30 = 0;
    if (__nwlog_fault(v16, type, &v30))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type[0];
        if (os_log_type_enabled(v17, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_has_proxy_protocol_in_effective_config";
          _os_log_impl(&dword_181A5C000, v17, v18, "%{public}s called with null parameters", buf, 0xCu);
        }

        goto LABEL_46;
      }

      if (!v30)
      {
        __nwlog_obj();
        id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v26 = type[0];
        if (os_log_type_enabled(v17, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_has_proxy_protocol_in_effective_config";
          _os_log_impl( &dword_181A5C000,  v17,  v26,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_46;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v22 = type[0];
      os_log_type_t v23 = os_log_type_enabled(v17, type[0]);
      if (!backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_parameters_has_proxy_protocol_in_effective_config";
          _os_log_impl(&dword_181A5C000, v17, v22, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }

        goto LABEL_46;
      }

      if (v23)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_parameters_has_proxy_protocol_in_effective_config";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v17,  v22,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
      }

    if (!v4) {
      return;
    }
    goto LABEL_47;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v17 = "nw_protocol_http_client_bottom_disconnected";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v14 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    char v5 = (os_log_s *)__nwlog_obj();
    id v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    id v17 = "nw_protocol_http_client_bottom_disconnected";
    uint64_t v7 = "%{public}s called with null http_client_bottom";
    goto LABEL_45;
  }

  if (!v14)
  {
    char v5 = (os_log_s *)__nwlog_obj();
    id v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    id v17 = "nw_protocol_http_client_bottom_disconnected";
    uint64_t v7 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
    goto LABEL_45;
  }

  os_log_type_t v10 = (char *)__nw_create_backtrace_string();
  char v5 = (os_log_s *)__nwlog_obj();
  id v6 = type;
  id v11 = os_log_type_enabled(v5, type);
  if (!v10)
  {
    if (!v11) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    id v17 = "nw_protocol_http_client_bottom_disconnected";
    uint64_t v7 = "%{public}s called with null http_client_bottom, no backtrace";
    goto LABEL_45;
  }

  if (v11)
  {
    *(_DWORD *)buf = 136446466;
    id v17 = "nw_protocol_http_client_bottom_disconnected";
    os_log_type_t v18 = 2082;
    char v19 = v10;
    os_log_type_t v12 = "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s";
LABEL_30:
    _os_log_impl(&dword_181A5C000, v5, v6, v12, buf, 0x16u);
  }

    if (!v3) {
      return;
    }
    goto LABEL_47;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v16 = "nw_protocol_http_client_bottom_error";
  id v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v13 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v4 = (os_log_s *)__nwlog_obj();
    char v5 = type;
    if (!os_log_type_enabled(v4, type)) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    int v16 = "nw_protocol_http_client_bottom_error";
    id v6 = "%{public}s called with null http_client_bottom";
    goto LABEL_45;
  }

  if (!v13)
  {
    uint64_t v4 = (os_log_s *)__nwlog_obj();
    char v5 = type;
    if (!os_log_type_enabled(v4, type)) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    int v16 = "nw_protocol_http_client_bottom_error";
    id v6 = "%{public}s called with null http_client_bottom, backtrace limit exceeded";
    goto LABEL_45;
  }

  int v9 = (char *)__nw_create_backtrace_string();
  uint64_t v4 = (os_log_s *)__nwlog_obj();
  char v5 = type;
  os_log_type_t v10 = os_log_type_enabled(v4, type);
  if (!v9)
  {
    if (!v10) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    int v16 = "nw_protocol_http_client_bottom_error";
    id v6 = "%{public}s called with null http_client_bottom, no backtrace";
    goto LABEL_45;
  }

  if (v10)
  {
    *(_DWORD *)buf = 136446466;
    int v16 = "nw_protocol_http_client_bottom_error";
    id v17 = 2082;
    os_log_type_t v18 = v9;
    id v11 = "%{public}s called with null http_client_bottom, dumping backtrace:%{public}s";
LABEL_30:
    _os_log_impl(&dword_181A5C000, v4, v5, v11, buf, 0x16u);
  }

  if (v4) {
LABEL_47:
  }
    free(v4);
  return 0LL;
}

      free(backtrace_string);
      goto LABEL_60;
    }

    id v17 = (os_log_s *)__nwlog_obj();
    os_log_type_t v18 = type;
    if (!os_log_type_enabled(v17, type)) {
      goto LABEL_60;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v28 = "nw_protocol_masque_listener_add_input_handler";
    char v19 = "%{public}s called with null protocol";
LABEL_59:
    _os_log_impl(&dword_181A5C000, v17, v18, v19, buf, 0xCu);
LABEL_60:
    if (v16) {
      free(v16);
    }
    return 0LL;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v28 = "nw_protocol_masque_listener_add_input_handler";
    int v16 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_60;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v28 = "nw_protocol_masque_listener_add_input_handler";
      char v19 = "%{public}s called with null masque";
      goto LABEL_59;
    }

    if (!v25)
    {
      id v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_60;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v28 = "nw_protocol_masque_listener_add_input_handler";
      char v19 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_59;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    id v17 = (os_log_s *)__nwlog_obj();
    os_log_type_t v18 = type;
    os_log_type_t v23 = os_log_type_enabled(v17, type);
    if (backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v28 = "nw_protocol_masque_listener_add_input_handler";
        objc_super v29 = 2082;
        os_log_type_t v30 = backtrace_string;
        v22 = "%{public}s called with null masque, dumping backtrace:%{public}s";
        goto LABEL_45;
      }

      goto LABEL_46;
    }

    if (!v23) {
      goto LABEL_60;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v28 = "nw_protocol_masque_listener_add_input_handler";
    char v19 = "%{public}s called with null masque, no backtrace";
    goto LABEL_59;
  }

  default_input_handler = a1->default_input_handler;
  if (!default_input_handler) {
    return nw_protocol_masque_add_input_handler(a1, a2);
  }
  if (default_input_handler == a2)
  {
    if ((handle[529] & 1) != 0) {
      return 0LL;
    }
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
    }
    os_log_type_t v13 = (os_log_s *)gprivacy_proxyLogObj;
    if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
      return 0LL;
    }
    *(_DWORD *)buf = 136446466;
    os_log_type_t v28 = handle + 531;
    objc_super v29 = 2080;
    os_log_type_t v30 = " ";
    os_log_type_t v14 = "%{public}s%sDefault input handler is being re-added";
    goto LABEL_21;
  }

  remote_endpoint = nw_protocol_get_remote_endpoint((uint64_t)a2);
  if (remote_endpoint)
  {
    uint64_t v7 = (void *)remote_endpoint;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    int v8 = nw_hash_table_add_object(*((void *)handle + 60), (uint64_t)a2, (char *)&type);
    int v9 = type != OS_LOG_TYPE_DEFAULT;
    if (type)
    {
      os_log_type_t v10 = (void *)v8;
      extra = (void *)nw_hash_node_get_extra(v8);
      *extra = 0LL;
      extra[1] = extra;
      extra[2] = os_retain(v7);
      if ((handle[529] & 1) == 0 && gLogDatapath)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
        }
        BOOL v24 = (os_log_s *)gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446978;
          os_log_type_t v28 = "nw_protocol_masque_listener_add_input_handler";
          objc_super v29 = 2082;
          os_log_type_t v30 = handle + 531;
          v31 = 2080;
          *(void *)os_log_type_t v32 = " ";
          *(_WORD *)&v32[8] = 2112;
          *(void *)&v32[10] = v7;
          _os_log_impl( &dword_181A5C000,  v24,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sAdded new flow for endpoint %@",  buf,  0x2Au);
        }
      }

      a2->output_handler_context = v10;
      nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)a1);
    }

    else if ((handle[529] & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
      }
      id v15 = (os_log_s *)gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446978;
        os_log_type_t v28 = handle + 531;
        objc_super v29 = 2080;
        os_log_type_t v30 = " ";
        v31 = 1042;
        *(_DWORD *)os_log_type_t v32 = 16;
        *(_WORD *)&v32[4] = 2098;
        *(void *)&v32[6] = a2;
        _os_log_impl( &dword_181A5C000,  v15,  OS_LOG_TYPE_ERROR,  "%{public}s%sInput handler already registered for %{public,uuid_t}.16P",  buf,  0x26u);
      }
    }

    return v9;
  }

  if ((handle[529] & 1) == 0)
  {
    if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
      dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
    }
    os_log_type_t v13 = (os_log_s *)gprivacy_proxyLogObj;
    if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v28 = handle + 531;
      objc_super v29 = 2080;
      os_log_type_t v30 = " ";
      os_log_type_t v14 = "%{public}s%sInput handler did not provide remote endpoint";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0x16u);
    }
  }

  return 0LL;
}

      free(backtrace_string);
      goto LABEL_56;
    }

    int v16 = (os_log_s *)__nwlog_obj();
    id v17 = type;
    if (!os_log_type_enabled(v16, type)) {
      goto LABEL_56;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v26 = "nw_protocol_masque_copy_info";
    os_log_type_t v18 = "%{public}s called with null protocol";
LABEL_55:
    _os_log_impl(&dword_181A5C000, v16, v17, v18, buf, 0xCu);
LABEL_56:
    if (v15) {
      free(v15);
    }
    return 0LL;
  }

  char v2 = *(unint64_t **)(a1 + 40);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v26 = "nw_protocol_masque_copy_info";
    id v15 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v16 = (os_log_s *)__nwlog_obj();
      id v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_protocol_masque_copy_info";
      os_log_type_t v18 = "%{public}s called with null masque";
      goto LABEL_55;
    }

    if (!v23)
    {
      int v16 = (os_log_s *)__nwlog_obj();
      id v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_protocol_masque_copy_info";
      os_log_type_t v18 = "%{public}s called with null masque, backtrace limit exceeded";
      goto LABEL_55;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v16 = (os_log_s *)__nwlog_obj();
    id v17 = type;
    v22 = os_log_type_enabled(v16, type);
    if (backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v26 = "nw_protocol_masque_copy_info";
        char v27 = 2082;
        os_log_type_t v28 = backtrace_string;
        BOOL v21 = "%{public}s called with null masque, dumping backtrace:%{public}s";
        goto LABEL_45;
      }

      goto LABEL_46;
    }

    if (!v22) {
      goto LABEL_56;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v26 = "nw_protocol_masque_copy_info";
    os_log_type_t v18 = "%{public}s called with null masque, no backtrace";
    goto LABEL_55;
  }

  if (a2 == 254)
  {
    if (v2[37])
    {
      uint64_t v7 = *(void *)(a1 + 32);
      if (nw_protocol_masque_get_definition(void)::definition
        && (int v9 = os_retain((void *)nw_protocol_masque_get_definition(void)::definition)) != 0LL)
      {
        os_log_type_t v10 = os_retain(v9);
      }

      else
      {
        os_log_type_t v10 = 0LL;
      }

      os_log_type_t v14 = nw_protocol_establishment_report_create(v10, v2[37], v2[37]);
      nw_array_append(v4, v14);
      if (v14) {
        os_release(v14);
      }
      if (v10) {
        os_release(v10);
      }
      return v4;
    }

    goto LABEL_21;
  }

  if (a2 != 255)
  {
LABEL_21:
    id v11 = *(void *)(a1 + 32);
    if (v11)
    {
      os_log_type_t v12 = *(uint64_t (**)(void))(*(void *)(v11 + 24) + 224LL);
      if (v12) {
        return v12();
      }
    }

    return 0LL;
  }

  if (v2[58] || v2[59])
  {
    id v3 = nw_array_create();
    uint64_t v4 = v3;
    char v5 = (void *)v2[59];
    if (v5) {
      nw_array_append(v3, v5);
    }
    id v6 = (void *)v2[58];
    if (v6) {
      nw_array_append(v4, v6);
    }
    return v4;
  }

  return 0LL;
}

  if (v5) {
    free(v5);
  }
  return 0LL;
}

    char v43 = std::__throw_bad_optional_access[abi:nn180100]();
    return (void *)nw_printf_write_data(v43);
  }

  sa_len = a3->sa_len;
  if (v5 < sa_len)
  {
    id v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>( result,  (uint64_t)"<fail decode - size> ",  21LL);
    __s[0] = a3->sa_len;
    os_log_type_t v12 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)__s, 1LL);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)" > ", 3LL);
    if (*(_BYTE *)(a2 + 24)) {
      return (void *)std::ostream::operator<<();
    }
    goto LABEL_46;
  }

  switch(a3->sa_family)
  {
    case 1u:
      sa_data = a3->sa_data;
      os_log_type_t v14 = strnlen(a3->sa_data, sa_len - 2);
      id v15 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v3, (uint64_t)"AF_UNIX:", 9LL);
      int v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)sa_data, v14);
      id v17 = 34;
      goto LABEL_19;
    case 2u:
      objc_super v29 = a3;
      os_log_type_t v30 = 16;
      goto LABEL_31;
    case 0x12u:
      os_log_type_t v20 = a3->sa_data[3];
      BOOL v21 = a3->sa_data[4];
      if (v20 + v21 + a3->sa_data[5] + 8 <= sa_len)
      {
        if (v21 | v20)
        {
          if (a3->sa_data[4])
          {
            v31 = &a3->sa_len + v20;
            *(_DWORD *)((char *)result + *(void *)(*result - 24LL) + 8) = *(_DWORD *)((_BYTE *)result
                                                                                      + *(void *)(*result - 24LL)
                                                                                      + 8) & 0xFFFFFFB5 | 8;
            __s[0] = a3->sa_data[v20 + 6];
            uint64_t result = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(result, (uint64_t)__s, 1LL);
            if (a3->sa_data[4] >= 2u)
            {
              os_log_type_t v32 = 9LL;
              do
              {
                uint64_t v33 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v3, (uint64_t)":", 1LL);
                __s[0] = v31[v32];
                uint64_t result = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>( v33,  (uint64_t)__s,  1LL);
                dispatch_workloop_t v34 = v32 - 7;
                ++v32;
              }

              while (v34 < a3->sa_data[4]);
            }

            v35 = a3->sa_data[3];
            if (v35)
            {
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v3, (uint64_t)"%", 1LL);
              os_log_type_t v20 = a3->sa_data[3];
LABEL_37:
              BOOL v42 = &a3->sa_data[6];
              return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v3, (uint64_t)v42, v20);
            }

            if (!*(_WORD *)a3->sa_data) {
              return result;
            }
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v3, (uint64_t)"%", 1LL);
            return (void *)std::ostream::operator<<();
          }

    free(v15);
    goto LABEL_47;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  char v2 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  os_log_type_t v28 = "nw_write_request_create_clone";
  id v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v25 = 0;
  if (__nwlog_fault(v3, &type, &v25))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v4 = (os_log_s *)(id)gLogObj;
      char v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_write_request_create_clone";
        _os_log_impl(&dword_181A5C000, v4, v5, "%{public}s Only idempotent write requests may be cloned", buf, 0xCu);
      }
    }

    else if (v25)
    {
      id v11 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v4 = (os_log_s *)(id)gLogObj;
      os_log_type_t v12 = type;
      os_log_type_t v13 = os_log_type_enabled(v4, type);
      if (v11)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v28 = "nw_write_request_create_clone";
          objc_super v29 = 2082;
          os_log_type_t v30 = v11;
          _os_log_impl( &dword_181A5C000,  v4,  v12,  "%{public}s Only idempotent write requests may be cloned, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v11);
        if (!v3) {
          goto LABEL_38;
        }
        goto LABEL_37;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_write_request_create_clone";
        _os_log_impl( &dword_181A5C000,  v4,  v12,  "%{public}s Only idempotent write requests may be cloned, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v4 = (os_log_s *)(id)gLogObj;
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v28 = "nw_write_request_create_clone";
        _os_log_impl( &dword_181A5C000,  v4,  v18,  "%{public}s Only idempotent write requests may be cloned, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

  if (v3) {
LABEL_37:
  }
    free(v3);
LABEL_38:
  uint64_t v7 = 0LL;
LABEL_48:

  return v7;
}

    _os_log_impl(&dword_181A5C000, v10, v11, v12, buf, 0xCu);
    goto LABEL_47;
  }

  if (a3)
  {
    if ((a3[198] & 1) == 0)
    {
      if (gLogDatapath)
      {
        os_log_type_t v13 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136447490;
          BOOL v21 = "nw_http_encoding_inbound_frame_finalizer";
          v22 = 2082;
          os_log_type_t v23 = a3 + 114;
          BOOL v24 = 2080;
          os_log_type_t v25 = " ";
          os_log_type_t v26 = 2048;
          char v27 = a1;
          os_log_type_t v28 = 1024;
          objc_super v29 = a2;
          os_log_type_t v30 = 2048;
          v31 = a3;
          _os_log_impl( &dword_181A5C000,  v13,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sfinalizing inbound frame %p (success %u, context %p)",  buf,  0x3Au);
        }
      }
    }

    id v6 = *((void *)a1 + 2);
    uint64_t v7 = (void *)*((void *)a1 + 3);
    if (v6)
    {
      *(void *)(v6 + 24) = v7;
      uint64_t v7 = (void *)*((void *)a1 + 3);
    }

    else
    {
      *((void *)a3 + 71) = v7;
    }

    os_log_s *v7 = v6;
    *((void *)a1 + 2) = 0LL;
    *((void *)a1 + 3) = 0LL;
    *((void *)a1 + 10) = 0LL;
    *((void *)a1 + 11) = 0LL;
    if (a2)
    {
      nw_frame_cache_return_frame((uint64_t)(a3 + 432), (uint64_t)a1);
    }

    else
    {
      if ((*((_WORD *)a1 + 102) & 0x100) == 0
        || !g_channel_check_validity
        || g_channel_check_validity(a1, 0LL))
      {
        int v8 = (void *)*((void *)a1 + 14);
        if (v8) {
          free(v8);
        }
      }

      nw_frame_reset((uint64_t)a1, 0LL, 0, 0LL, 0LL);
      os_release(a1);
    }

    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v21 = "nw_http_encoding_inbound_frame_finalizer";
  int v9 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v18 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v10 = (os_log_s *)__nwlog_obj();
    id v11 = type;
    if (!os_log_type_enabled(v10, type)) {
      goto LABEL_47;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v21 = "nw_http_encoding_inbound_frame_finalizer";
    os_log_type_t v12 = "%{public}s called with null context";
    goto LABEL_46;
  }

  if (!v18)
  {
    os_log_type_t v10 = (os_log_s *)__nwlog_obj();
    id v11 = type;
    if (!os_log_type_enabled(v10, type)) {
      goto LABEL_47;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v21 = "nw_http_encoding_inbound_frame_finalizer";
    os_log_type_t v12 = "%{public}s called with null context, backtrace limit exceeded";
    goto LABEL_46;
  }

  int v16 = (char *)__nw_create_backtrace_string();
  os_log_type_t v10 = (os_log_s *)__nwlog_obj();
  id v11 = type;
  id v17 = os_log_type_enabled(v10, type);
  if (!v16)
  {
    if (!v17) {
      goto LABEL_47;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v21 = "nw_http_encoding_inbound_frame_finalizer";
    os_log_type_t v12 = "%{public}s called with null context, no backtrace";
    goto LABEL_46;
  }

  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v21 = "nw_http_encoding_inbound_frame_finalizer";
    v22 = 2082;
    os_log_type_t v23 = v16;
    _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v9) {
    goto LABEL_48;
  }
}

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v35 = os_log_type_enabled((os_log_t)v4[131], OS_LOG_TYPE_DEBUG);
      uint32_t v1 = v44;
      if (v35 || gLogFDOverride != -1)
      {
        os_log_type_t v25 = nw_endpoint_create_address(&address);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v36 = (os_log_s *)gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
        {
          v37 = nw_endpoint_get_logging_description(v25);
          __buf = 136446466;
          *(void *)uint64_t v55 = "tcp_listener_accept_locked";
          *(_WORD *)&v55[8] = 2082;
          *(void *)&v55[10] = v37;
          _os_log_impl( &dword_181A5C000,  v36,  OS_LOG_TYPE_DEBUG,  "%{public}s Ignoring non-local connection from %{public}s",  (uint8_t *)&__buf,  0x16u);
        }

        if (v25) {
LABEL_51:
        }
          os_release(v25);
      }

      free(backtrace_string);
      goto LABEL_56;
    }

    os_log_type_t v18 = (os_log_s *)__nwlog_obj();
    char v19 = type;
    if (!os_log_type_enabled(v18, type)) {
      goto LABEL_56;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v28 = "nw_protocol_http_connect_copy_info";
    os_log_type_t v20 = "%{public}s called with null protocol";
LABEL_55:
    _os_log_impl(&dword_181A5C000, v18, v19, v20, buf, 0xCu);
LABEL_56:
    if (v17) {
      free(v17);
    }
    return 0LL;
  }

  char v2 = *(uint64_t **)(a1 + 40);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v28 = "nw_protocol_http_connect_copy_info";
    id v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v18 = (os_log_s *)__nwlog_obj();
      char v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v28 = "nw_protocol_http_connect_copy_info";
      os_log_type_t v20 = "%{public}s called with null http_connect";
      goto LABEL_55;
    }

    if (!v25)
    {
      os_log_type_t v18 = (os_log_s *)__nwlog_obj();
      char v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v28 = "nw_protocol_http_connect_copy_info";
      os_log_type_t v20 = "%{public}s called with null http_connect, backtrace limit exceeded";
      goto LABEL_55;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v18 = (os_log_s *)__nwlog_obj();
    char v19 = type;
    BOOL v24 = os_log_type_enabled(v18, type);
    if (backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v28 = "nw_protocol_http_connect_copy_info";
        objc_super v29 = 2082;
        os_log_type_t v30 = backtrace_string;
        os_log_type_t v23 = "%{public}s called with null http_connect, dumping backtrace:%{public}s";
        goto LABEL_45;
      }

      goto LABEL_46;
    }

    if (!v24) {
      goto LABEL_56;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v28 = "nw_protocol_http_connect_copy_info";
    os_log_type_t v20 = "%{public}s called with null http_connect, no backtrace";
    goto LABEL_55;
  }

  if (a2 == 254 && *v2 && v2[1] && v2[2])
  {
    id v3 = *(void *)(a1 + 32);
    if (nw_proxy_copy_http_connect_definition::onceToken != -1) {
      dispatch_once(&nw_proxy_copy_http_connect_definition::onceToken, &__block_literal_global_92);
    }
    uint64_t v7 = (id)nw_proxy_copy_http_connect_definition::proxy_definition;
    int v8 = nw_delta_nanos(*v2, v2[1]);
    if (v8 <= 0xF423FFFFFFFFFLL) {
      int v9 = (v8 / 0xF4240);
    }
    else {
      int v9 = 0xFFFFFFFFLL;
    }
    os_log_type_t v10 = nw_delta_nanos(*v2, v2[2]);
    if (v10 <= 0xF423FFFFFFFFFLL) {
      id v11 = (v10 / 0xF4240);
    }
    else {
      id v11 = 0xFFFFFFFFLL;
    }
    os_log_type_t v12 = nw_protocol_establishment_report_create(v7, v9, v11);
    if (v7) {
      os_release(v7);
    }
    nw_array_append(v6, v12);
    if (v12) {
      os_release(v12);
    }
    return v6;
  }

  os_log_type_t v14 = *(void *)(a1 + 32);
  if (!v14) {
    return 0LL;
  }
  id v15 = *(void *)(v14 + 24);
  if (!v15) {
    return 0LL;
  }
  int v16 = *(uint64_t (**)(void))(v15 + 224);
  if (!v16) {
    return 0LL;
  }
  return v16();
}

    if (!v22) {
      goto LABEL_48;
    }
LABEL_47:
    free(v22);
    goto LABEL_48;
  }

  int v8 = (unsigned int *)v6;
  int v9 = v8[29];

  if ((_DWORD)v9 == 4)
  {
    fallback_timer = self->fallback_timer;
    if (fallback_timer)
    {
      nw_queue_cancel_source((uint64_t)fallback_timer, v10);
      self->fallback_timer = 0LL;
    }

    post_transport_timer = self->post_transport_timer;
    if (post_transport_timer)
    {
      nw_queue_cancel_source((uint64_t)post_transport_timer, v10);
      self->post_transport_timer = 0LL;
    }

    usage_cap_timer = self->usage_cap_timer;
    if (usage_cap_timer)
    {
      nw_queue_cancel_source((uint64_t)usage_cap_timer, v10);
      self->usage_cap_timer = 0LL;
    }

    primary_child = self->primary_child;
    if (primary_child) {
      nw_endpoint_handler_cancel(primary_child, v4, 0);
    }
    fallback_child = self->fallback_child;
    if (fallback_child) {
      nw_endpoint_handler_cancel(fallback_child, v4, 0);
    }
    int v16 = self->primary_child;
    self->primary_child = 0LL;

    id v17 = self->fallback_child;
    self->fallback_child = 0LL;

    primary_interface = self->primary_interface;
    self->primary_interface = 0LL;

    fallback_interface = self->fallback_interface;
    self->fallback_interface = 0LL;

    goto LABEL_48;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v20 = (id)gLogObj;
  else {
    BOOL v21 = off_189BBBBC0[v9];
  }
  *(_DWORD *)buf = 136446722;
  BOOL v42 = "-[NWConcrete_nw_endpoint_fallback cancelWithHandler:forced:]";
  char v43 = 2082;
  dispatch_workloop_t v44 = (void *)v21;
  v45 = 2082;
  os_log_type_t v46 = "fallback";
  v22 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v39 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v23 = (os_log_s *)(id)gLogObj;
    BOOL v24 = type;
    if (os_log_type_enabled(v23, type))
    {
      else {
        os_log_type_t v25 = off_189BBBBC0[v9];
      }
      *(_DWORD *)buf = 136446722;
      BOOL v42 = "-[NWConcrete_nw_endpoint_fallback cancelWithHandler:forced:]";
      char v43 = 2082;
      dispatch_workloop_t v44 = (void *)v25;
      v45 = 2082;
      os_log_type_t v46 = "fallback";
      _os_log_impl( &dword_181A5C000,  v23,  v24,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
    }

    if (v3) {
      free(v3);
    }
    return 0LL;
  }

  if (gLogDatapath)
  {
    char v43 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
    {
      dispatch_workloop_t v44 = *(_DWORD *)(a2 + 52);
      if (v44) {
        v44 -= *(_DWORD *)(a2 + 56) + *(_DWORD *)(a2 + 60);
      }
      *(_DWORD *)buf = 136446978;
      v48 = "nw_http2_transport_submit_data";
      id v49 = 2082;
      v50 = a1 + 205;
      v51 = 1024;
      LODWORD(v52[0]) = v44;
      WORD2(v52[0]) = 1024;
      *(_DWORD *)((char *)v52 + 6) = v11;
      _os_log_impl( &dword_181A5C000,  v43,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s submitted %u bytes on stream %d",  buf,  0x22u);
    }
  }

  return 1LL;
}

  count = 0;
LABEL_47:
  id v49 = *((_DWORD *)v42 + 2);
  v215 = v44;
  v216 = count;
  v218 = v46;
  if (v49 != 2)
  {
    if (v49 != 1)
    {
      LODWORD(v57) = 2;
      goto LABEL_94;
    }

    v50 = v44 + 1;
    v51 = v44 + 3;
    if (v50 < 0xFFFFFFFE)
    {
LABEL_73:
      os_log_type_t v64 = __CFADD__((_DWORD)v51, v46 + 1);
      BOOL v57 = v51 + v46 + 1;
      if (!v64) {
        goto LABEL_94;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v65 = (id)gLogObj;
      *(_DWORD *)v267 = 136446978;
      v268 = "nw_authentication_credential_add_to_tlv";
      v269 = 2082;
      *(void *)v270 = "buffer_size";
      *(_WORD *)&v270[8] = 2048;
      *(void *)v271 = v46 + 1LL;
      *(_WORD *)&v271[8] = 2048;
      *(void *)v272 = v57;
      BOOL v66 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v257) = 0;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v67 = (os_log_s *)(id)gLogObj;
        v68 = type[0];
        if (os_log_type_enabled(v67, type[0]))
        {
          *(_DWORD *)v267 = 136446978;
          v268 = "nw_authentication_credential_add_to_tlv";
          v269 = 2082;
          *(void *)v270 = "buffer_size";
          *(_WORD *)&v270[8] = 2048;
          *(void *)v271 = v46 + 1LL;
          *(_WORD *)&v271[8] = 2048;
          *(void *)v272 = v57;
          _os_log_impl( &dword_181A5C000,  v67,  v68,  "%{public}s Overflow: %{public}s, increment %llu, result %llu",  v267,  0x2Au);
        }
      }

      else if ((_BYTE)v257)
      {
        v69 = __nw_create_backtrace_string();
        if (v69)
        {
          v70 = (char *)v69;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v71 = (os_log_s *)(id)gLogObj;
          v72 = type[0];
          if (os_log_type_enabled(v71, type[0]))
          {
            *(_DWORD *)v267 = 136447234;
            v268 = "nw_authentication_credential_add_to_tlv";
            v269 = 2082;
            *(void *)v270 = "buffer_size";
            *(_WORD *)&v270[8] = 2048;
            *(void *)v271 = v46 + 1LL;
            *(_WORD *)&v271[8] = 2048;
            *(void *)v272 = v57;
            *(_WORD *)&v272[8] = 2082;
            *(void *)v273 = v70;
            _os_log_impl( &dword_181A5C000,  v71,  v72,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  v267,  0x34u);
          }

          free(v70);
          goto LABEL_91;
        }

        __nwlog_obj();
        os_log_type_t v67 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        unint64_t v74 = type[0];
        if (os_log_type_enabled(v67, type[0]))
        {
          *(_DWORD *)v267 = 136446978;
          v268 = "nw_authentication_credential_add_to_tlv";
          v269 = 2082;
          *(void *)v270 = "buffer_size";
          *(_WORD *)&v270[8] = 2048;
          *(void *)v271 = v46 + 1LL;
          *(_WORD *)&v271[8] = 2048;
          *(void *)v272 = v57;
          _os_log_impl( &dword_181A5C000,  v67,  v74,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace",  v267,  0x2Au);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v67 = (os_log_s *)(id)gLogObj;
        __uint64_t v73 = type[0];
        if (os_log_type_enabled(v67, type[0]))
        {
          *(_DWORD *)v267 = 136446978;
          v268 = "nw_authentication_credential_add_to_tlv";
          v269 = 2082;
          *(void *)v270 = "buffer_size";
          *(_WORD *)&v270[8] = 2048;
          *(void *)v271 = v46 + 1LL;
          *(_WORD *)&v271[8] = 2048;
          *(void *)v272 = v57;
          _os_log_impl( &dword_181A5C000,  v67,  v73,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded",  v267,  0x2Au);
        }
      }

LABEL_91:
      count = v216;
      if (v66) {
        free(v66);
      }
      LODWORD(v57) = -1;
      os_log_type_t v28 = (unint64_t)v222;
      goto LABEL_94;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v52 = (id)gLogObj;
    *(_DWORD *)v267 = 136446978;
    v268 = "nw_authentication_credential_add_to_tlv";
    v269 = 2082;
    *(void *)v270 = "buffer_size";
    *(_WORD *)&v270[8] = 2048;
    *(void *)v271 = v215 + 1LL;
    *(_WORD *)&v271[8] = 2048;
    *(void *)v272 = v51;
    v53 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v257) = 0;
    if ((__nwlog_fault(v53, type, &v257) & 1) != 0)
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v54 = (os_log_s *)(id)gLogObj;
        uint64_t v55 = type[0];
        if (os_log_type_enabled(v54, type[0]))
        {
          *(_DWORD *)v267 = 136446978;
          v268 = "nw_authentication_credential_add_to_tlv";
          v269 = 2082;
          *(void *)v270 = "buffer_size";
          *(_WORD *)&v270[8] = 2048;
          *(void *)v271 = v215 + 1LL;
          *(_WORD *)&v271[8] = 2048;
          *(void *)v272 = v51;
          _os_log_impl( &dword_181A5C000,  v54,  v55,  "%{public}s Overflow: %{public}s, increment %llu, result %llu",  v267,  0x2Au);
        }
      }

      else if ((_BYTE)v257)
      {
        v58 = __nw_create_backtrace_string();
        if (v58)
        {
          v59 = (char *)v58;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v60 = (os_log_s *)(id)gLogObj;
          BOOL v61 = type[0];
          if (os_log_type_enabled(v60, type[0]))
          {
            *(_DWORD *)v267 = 136447234;
            v268 = "nw_authentication_credential_add_to_tlv";
            v269 = 2082;
            *(void *)v270 = "buffer_size";
            *(_WORD *)&v270[8] = 2048;
            *(void *)v271 = v215 + 1LL;
            *(_WORD *)&v271[8] = 2048;
            *(void *)v272 = v51;
            *(_WORD *)&v272[8] = 2082;
            *(void *)v273 = v59;
            _os_log_impl( &dword_181A5C000,  v60,  v61,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  v267,  0x34u);
          }

          free(v59);
          goto LABEL_70;
        }

        __nwlog_obj();
        BOOL v54 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v63 = type[0];
        if (os_log_type_enabled(v54, type[0]))
        {
          *(_DWORD *)v267 = 136446978;
          v268 = "nw_authentication_credential_add_to_tlv";
          v269 = 2082;
          *(void *)v270 = "buffer_size";
          *(_WORD *)&v270[8] = 2048;
          *(void *)v271 = v215 + 1LL;
          *(_WORD *)&v271[8] = 2048;
          *(void *)v272 = v51;
          _os_log_impl( &dword_181A5C000,  v54,  v63,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace",  v267,  0x2Au);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v54 = (os_log_s *)(id)gLogObj;
        v62 = type[0];
        if (os_log_type_enabled(v54, type[0]))
        {
          *(_DWORD *)v267 = 136446978;
          v268 = "nw_authentication_credential_add_to_tlv";
          v269 = 2082;
          *(void *)v270 = "buffer_size";
          *(_WORD *)&v270[8] = 2048;
          *(void *)v271 = v215 + 1LL;
          *(_WORD *)&v271[8] = 2048;
          *(void *)v272 = v51;
          _os_log_impl( &dword_181A5C000,  v54,  v62,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded",  v267,  0x2Au);
        }
      }
    }

    if (v12) {
      free(v12);
    }
    goto LABEL_9;
  }

  __nwlog_obj();
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v26 = "nw_proxy_config_create_socksv5";
  int v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v23 = 0;
  if (__nwlog_fault(v8, &type, &v23))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_proxy_config_create_socksv5";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null proxy_endpoint", buf, 0xCu);
      }
    }

    else if (v23)
    {
      id v15 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      int v16 = type;
      id v17 = os_log_type_enabled(v9, type);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v26 = "nw_proxy_config_create_socksv5";
          char v27 = 2082;
          os_log_type_t v28 = v15;
          _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s called with null proxy_endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v15);
        goto LABEL_40;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_proxy_config_create_socksv5";
        _os_log_impl(&dword_181A5C000, v9, v16, "%{public}s called with null proxy_endpoint, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v21 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_proxy_config_create_socksv5";
        _os_log_impl( &dword_181A5C000,  v9,  v21,  "%{public}s called with null proxy_endpoint, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

  if (v8) {
    free(v8);
  }
  return 0xFFFFFFFFLL;
}

    free(backtrace_string);
    goto LABEL_56;
  }

  os_log_type_t v25 = (os_log_s *)__nwlog_obj();
  os_log_type_t v26 = type[0];
  if (os_log_type_enabled(v25, type[0]))
  {
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_replicate_finalize_output_frames";
    char v27 = "%{public}s called with null protocol";
LABEL_55:
    _os_log_impl(&dword_181A5C000, v25, v26, v27, buf, 0xCu);
  }

    free(v19);
    if (!v13) {
      return;
    }
LABEL_66:
    free(v13);
    return;
  }

  int v9 = os_retain(object);
  os_log_type_t v10 = *(_BYTE *)(v5 + 584);
  if ((v10 & 1) != 0)
  {
    id v11 = *(void **)(v5 + 576);
    if (v11)
    {
      os_release(v11);
      os_log_type_t v10 = *(_BYTE *)(v5 + 584);
    }
  }

  *(void *)(v5 + 576) = v9;
  *(_BYTE *)(v5 + 584) = v10 | 1;
  if (a4) {
    os_log_type_t v12 = 0;
  }
  else {
    os_log_type_t v12 = 2;
  }
  *(_BYTE *)(v5 + 676) = *(_BYTE *)(v5 + 676) & 0xFD | v12;
  (*(void (**)(uint64_t, uint64_t, void *))(a5 + 16))(a5, 1LL, object);
}

            if (v15) {
              free(v15);
            }
            *(_DWORD *)(v3 + 672) = 0;
            goto LABEL_49;
          }

          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_retry_reissue";
          v45 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          v77[0] = 0;
          if (__nwlog_fault(v45, type, v77))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              os_log_type_t v46 = (os_log_s *)__nwlog_obj();
              os_log_type_t v47 = type[0];
              if (!os_log_type_enabled(v46, type[0])) {
                goto LABEL_135;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http_retry_reissue";
              v48 = "%{public}s called with null _request_metadata";
              goto LABEL_134;
            }

            if (!v77[0])
            {
              os_log_type_t v46 = (os_log_s *)__nwlog_obj();
              os_log_type_t v47 = type[0];
              if (!os_log_type_enabled(v46, type[0])) {
                goto LABEL_135;
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http_retry_reissue";
              v48 = "%{public}s called with null _request_metadata, backtrace limit exceeded";
              goto LABEL_134;
            }

            BOOL v57 = (char *)__nw_create_backtrace_string();
            os_log_type_t v46 = (os_log_s *)__nwlog_obj();
            os_log_type_t v47 = type[0];
            v58 = os_log_type_enabled(v46, type[0]);
            if (v57)
            {
              if (v58)
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_http_retry_reissue";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v57;
                _os_log_impl( &dword_181A5C000,  v46,  v47,  "%{public}s called with null _request_metadata, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v57);
              goto LABEL_135;
            }

            if (v58)
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = "nw_http_retry_reissue";
              v48 = "%{public}s called with null _request_metadata, no backtrace";
LABEL_134:
              _os_log_impl(&dword_181A5C000, v46, v47, v48, buf, 0xCu);
            }
          }

    if (v17) {
      free(v17);
    }
    uint64_t v7 = 0;
    goto LABEL_10;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 52);
  if (v7) {
    v7 -= *(_DWORD *)(a2 + 56) + *(_DWORD *)(a2 + 60);
  }
LABEL_10:
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) += v7;
  int v8 = (void *)(a2 + 32);
  int v9 = *(void *)(a2 + 32);
  if (v9)
  {
    *(void *)(v9 + 40) = *(void *)(a2 + 40);
    os_log_type_t v10 = *(void **)(a2 + 40);
  }

  else
  {
    os_log_type_t v10 = *(void **)(a2 + 40);
    *(void *)(*(void *)(a1 + 48) + 8LL) = v10;
  }

  void *v10 = v9;
  *int v8 = 0LL;
  *(void *)(a2 + 40) = 0LL;
  id v11 = *(void *)(a1 + 56);
  os_log_type_t v12 = *(void **)(v11 + 8);
  *(void *)(a2 + 40) = v12;
  char *v12 = a2;
  *(void *)(v11 + 8) = v8;
  return 1LL;
}

        if (!v23) {
          goto LABEL_48;
        }
        goto LABEL_47;
      }

      __nwlog_obj();
      os_log_type_t v47 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_service_connector_remove_pending_incoming_request";
      os_log_type_t v23 = (void *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      BOOL v57 = OS_LOG_TYPE_DEFAULT;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v45 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v48 = type[0];
        if (os_log_type_enabled(v45, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_service_connector_remove_pending_incoming_request";
          _os_log_impl( &dword_181A5C000,  v45,  v48,  "%{public}s called with null serviceConnector->pendingIncomingRequests",  buf,  0xCu);
        }
      }

      else if (v57)
      {
        objc_super v29 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v45 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v52 = type[0];
        v53 = os_log_type_enabled(v45, type[0]);
        if (v29)
        {
          if (v53)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_service_connector_remove_pending_incoming_request";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v29;
            _os_log_impl( &dword_181A5C000,  v45,  v52,  "%{public}s called with null serviceConnector->pendingIncomingRequests, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          goto LABEL_33;
        }

        if (v53)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_service_connector_remove_pending_incoming_request";
          _os_log_impl( &dword_181A5C000,  v45,  v52,  "%{public}s called with null serviceConnector->pendingIncomingRequests, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v45 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v55 = type[0];
        if (os_log_type_enabled(v45, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_service_connector_remove_pending_incoming_request";
          _os_log_impl( &dword_181A5C000,  v45,  v55,  "%{public}s called with null serviceConnector->pendingIncomingRequests, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    else
    {
      __nwlog_obj();
      dispatch_workloop_t v44 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_service_connector_remove_pending_incoming_request";
      os_log_type_t v23 = (void *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      BOOL v57 = OS_LOG_TYPE_DEFAULT;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v45 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v46 = type[0];
        if (os_log_type_enabled(v45, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_service_connector_remove_pending_incoming_request";
          _os_log_impl(&dword_181A5C000, v45, v46, "%{public}s called with null serviceConnector", buf, 0xCu);
        }
      }

      else if (v57)
      {
        id v49 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v45 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v50 = type[0];
        v51 = os_log_type_enabled(v45, type[0]);
        if (v49)
        {
          if (v51)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_service_connector_remove_pending_incoming_request";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v49;
            _os_log_impl( &dword_181A5C000,  v45,  v50,  "%{public}s called with null serviceConnector, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v49);
          goto LABEL_46;
        }

        if (v51)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_service_connector_remove_pending_incoming_request";
          _os_log_impl( &dword_181A5C000,  v45,  v50,  "%{public}s called with null serviceConnector, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v45 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v54 = type[0];
        if (os_log_type_enabled(v45, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_service_connector_remove_pending_incoming_request";
          _os_log_impl( &dword_181A5C000,  v45,  v54,  "%{public}s called with null serviceConnector, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    goto LABEL_46;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v10 = (id)gLogObj;
  *(_DWORD *)buf = 136446722;
  *(void *)&uint8_t buf[4] = "nw_service_connector_reject_incoming_request";
  *(_WORD *)&buf[12] = 2114;
  *(void *)&buf[14] = v5;
  *(_WORD *)&buf[22] = 2114;
  *(void *)&buf[24] = v8;
  id v11 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  BOOL v57 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v11, type, &v57))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v12 = (os_log_s *)(id)gLogObj;
      os_log_type_t v13 = type[0];
      if (os_log_type_enabled(v12, type[0]))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_service_connector_reject_incoming_request";
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v5;
        *(_WORD *)&buf[22] = 2114;
        *(void *)&buf[24] = v8;
        _os_log_impl( &dword_181A5C000,  v12,  v13,  "%{public}s %{public}@ attempted to reject outgoing request %{public}@",  buf,  0x20u);
      }
    }

    else if (v57)
    {
      os_log_type_t v18 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v12 = (os_log_s *)(id)gLogObj;
      char v19 = type[0];
      os_log_type_t v20 = os_log_type_enabled(v12, type[0]);
      if (v18)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_service_connector_reject_incoming_request";
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v5;
          *(_WORD *)&buf[22] = 2114;
          *(void *)&buf[24] = v8;
          LOWORD(v67) = 2082;
          *(void *)((char *)&v67 + 2) = v18;
          _os_log_impl( &dword_181A5C000,  v12,  v19,  "%{public}s %{public}@ attempted to reject outgoing request %{public}@, dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(v18);
        if (v11) {
          goto LABEL_39;
        }
        goto LABEL_64;
      }

      if (v20)
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_service_connector_reject_incoming_request";
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v5;
        *(_WORD *)&buf[22] = 2114;
        *(void *)&buf[24] = v8;
        _os_log_impl( &dword_181A5C000,  v12,  v19,  "%{public}s %{public}@ attempted to reject outgoing request %{public}@, no backtrace",  buf,  0x20u);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v12 = (os_log_s *)(id)gLogObj;
      char v27 = type[0];
      if (os_log_type_enabled(v12, type[0]))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_service_connector_reject_incoming_request";
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v5;
        *(_WORD *)&buf[22] = 2114;
        *(void *)&buf[24] = v8;
        _os_log_impl( &dword_181A5C000,  v12,  v27,  "%{public}s %{public}@ attempted to reject outgoing request %{public}@, backtrace limit exceeded",  buf,  0x20u);
      }
    }
  }

  if (v11) {
LABEL_39:
  }
    free(v11);
LABEL_64:
}

    if (!v30) {
      goto LABEL_28;
    }
    char v27 = (char *)v30;
    goto LABEL_27;
  }

  char v5 = v3;
  id v6 = [v5 type];

  if (v6 != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v9 = (id)gLogObj;
    os_log_type_t v10 = v5;
    id v11 = [v10 type];

    *(_DWORD *)buf = 136446466;
    os_log_type_t v41 = "nw_endpoint_get_url_port";
    BOOL v42 = 1024;
    *(_DWORD *)char v43 = v11;
    LODWORD(v37) = 18;
    os_log_type_t v12 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v38 = 0;
    if (__nwlog_fault(v12, &type, &v38))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v13 = (os_log_s *)(id)gLogObj;
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          id v15 = v10;
          int v16 = objc_msgSend(v15, "type", buf, v37);

          *(_DWORD *)buf = 136446466;
          os_log_type_t v41 = "nw_endpoint_get_url_port";
          BOOL v42 = 1024;
          *(_DWORD *)char v43 = v16;
          _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }

      else if (v38)
      {
        id v17 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v13 = (os_log_s *)(id)gLogObj;
        os_log_type_t v18 = type;
        char v19 = os_log_type_enabled(v13, type);
        if (v17)
        {
          if (v19)
          {
            os_log_type_t v20 = v10;
            BOOL v21 = objc_msgSend(v20, "type", buf, v37);

            *(_DWORD *)buf = 136446722;
            os_log_type_t v41 = "nw_endpoint_get_url_port";
            BOOL v42 = 1024;
            *(_DWORD *)char v43 = v21;
            v43[2] = 2082;
            *(void *)&v43[3] = v17;
            _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s",  buf,  0x1Cu);
          }

          free(v17);
          if (!v12) {
            goto LABEL_28;
          }
LABEL_26:
          char v27 = (char *)v12;
LABEL_27:
          free(v27);
          goto LABEL_28;
        }

        if (v19)
        {
          os_log_type_t v25 = v10;
          os_log_type_t v26 = objc_msgSend(v25, "type", buf, v37);

          *(_DWORD *)buf = 136446466;
          os_log_type_t v41 = "nw_endpoint_get_url_port";
          BOOL v42 = 1024;
          *(_DWORD *)char v43 = v26;
          _os_log_impl(&dword_181A5C000, v13, v18, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v13 = (os_log_s *)(id)gLogObj;
        v22 = type;
        if (os_log_type_enabled(v13, type))
        {
          os_log_type_t v23 = v10;
          BOOL v24 = objc_msgSend(v23, "type", buf, v37);

          *(_DWORD *)buf = 136446466;
          os_log_type_t v41 = "nw_endpoint_get_url_port";
          BOOL v42 = 1024;
          *(_DWORD *)char v43 = v24;
          _os_log_impl( &dword_181A5C000,  v13,  v22,  "%{public}s incorrect endpoint type %u, backtrace limit exceeded",  buf,  0x12u);
        }
      }
    }

    if (!v12)
    {
LABEL_28:
      int v8 = 0LL;
      goto LABEL_29;
    }

    goto LABEL_26;
  }

  uint64_t v7 = v5;
  if ((a2 & 1) == 0 && (v7[297] & 1) != 0) {
    int v8 = 0LL;
  }
  else {
    int v8 = bswap32(*((unsigned __int16 *)v7 + 120)) >> 16;
  }

LABEL_29:
  return v8;
}

    __break(1u);
    return;
  }

  __nwlog_obj();
  os_log_type_t v28 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_nat64_prefixes_resolver_dns_callback";
  objc_super v29 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  dispatch_workloop_t v44 = 0;
  if (__nwlog_fault(v29, &type, &v44))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v31 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_nat64_prefixes_resolver_dns_callback";
        _os_log_impl(&dword_181A5C000, v30, v31, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if (v44)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v33 = type;
      dispatch_workloop_t v34 = os_log_type_enabled(v30, type);
      if (backtrace_string)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_nat64_prefixes_resolver_dns_callback";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v30,  v33,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_40;
      }

      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_nat64_prefixes_resolver_dns_callback";
        _os_log_impl(&dword_181A5C000, v30, v33, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v35 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_nat64_prefixes_resolver_dns_callback";
        _os_log_impl( &dword_181A5C000,  v30,  v35,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

      free(v24);
    }
  }

        free(v12);
        goto LABEL_47;
      }

      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v26 = "nw_activity_complete_with_reason_and_underlying_error_string_internal_block_invoke";
        char v27 = 2082;
        os_log_type_t v28 = "Cannot complete activity before activation";
        id v15 = "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, no backtrace";
        goto LABEL_43;
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v26 = "nw_activity_complete_with_reason_and_underlying_error_string_internal_block_invoke";
        char v27 = 2082;
        os_log_type_t v28 = "Cannot complete activity before activation";
        id v15 = "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, backtrace limit exceeded";
        goto LABEL_43;
      }
    }

          goto LABEL_47;
        }

        if (!v30)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v10 = (os_log_s *)(id)gLogObj;
          v22 = type;
          if (os_log_type_enabled(v10, type))
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v33 = "nw_protocol_transform_clear_protocols_at_level";
            dispatch_workloop_t v34 = 1024;
            *(_DWORD *)v35 = a2;
            _os_log_impl( &dword_181A5C000,  v10,  v22,  "%{public}s Invalid protocol level %u, backtrace limit exceeded",  buf,  0x12u);
          }

          goto LABEL_46;
        }

        id v17 = __nw_create_backtrace_string();
        if (!v17)
        {
          __nwlog_obj();
          os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          BOOL v24 = type;
          if (os_log_type_enabled(v10, type))
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v33 = "nw_protocol_transform_clear_protocols_at_level";
            dispatch_workloop_t v34 = 1024;
            *(_DWORD *)v35 = a2;
            _os_log_impl(&dword_181A5C000, v10, v24, "%{public}s Invalid protocol level %u, no backtrace", buf, 0x12u);
          }

          goto LABEL_46;
        }

        os_log_type_t v18 = (char *)v17;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v19 = (os_log_s *)(id)gLogObj;
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446722;
          uint64_t v33 = "nw_protocol_transform_clear_protocols_at_level";
          dispatch_workloop_t v34 = 1024;
          *(_DWORD *)v35 = a2;
          v35[2] = 2082;
          *(void *)&v35[3] = v18;
          _os_log_impl( &dword_181A5C000,  v19,  v20,  "%{public}s Invalid protocol level %u, dumping backtrace:%{public}s",  buf,  0x1Cu);
        }

        break;
    }

    free(v20);
    if (!v8) {
      goto LABEL_6;
    }
    goto LABEL_73;
  }

  nw_masque_options_add_extra_header(v6[5], a2, a3);
LABEL_6:
}

    free(v20);
    if (!v8) {
      goto LABEL_6;
    }
    goto LABEL_73;
  }

  nw_proxy_hop_add_server_raw_public_key(v6, a2, a3);
LABEL_6:
}

    if (v19) {
      free(v19);
    }
    uint64_t v7 = 0LL;
    goto LABEL_9;
  }

  __nwlog_obj();
  os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v32 = "nw_path_flow_registration_create_new_flow_from_evaluator";
  id v15 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(type) = 16;
  os_log_type_t v30 = 0;
  if (__nwlog_fault(v15, &type, &v30))
  {
    if (type == 17)
    {
      __nwlog_obj();
      int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v17 = type;
      if (os_log_type_enabled(v16, (os_log_type_t)type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v32 = "nw_path_flow_registration_create_new_flow_from_evaluator";
        _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s called with null evaluator", buf, 0xCu);
      }
    }

    else if (v30)
    {
      v22 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = type;
      BOOL v24 = os_log_type_enabled(v16, (os_log_type_t)type);
      if (v22)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v32 = "nw_path_flow_registration_create_new_flow_from_evaluator";
          uint64_t v33 = 2082;
          dispatch_workloop_t v34 = v22;
          _os_log_impl( &dword_181A5C000,  v16,  v23,  "%{public}s called with null evaluator, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v22);
        goto LABEL_40;
      }

      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v32 = "nw_path_flow_registration_create_new_flow_from_evaluator";
        _os_log_impl(&dword_181A5C000, v16, v23, "%{public}s called with null evaluator, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v16, (os_log_type_t)type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v32 = "nw_path_flow_registration_create_new_flow_from_evaluator";
        _os_log_impl( &dword_181A5C000,  v16,  v28,  "%{public}s called with null evaluator, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

  return v11;
}

    free(v29);
    goto LABEL_73;
  }

  nw_protocol_http_messaging_teardown((uint64_t)a1->handle, 89LL);
  os_log_type_t v18 = handle[2].output_handler;
  id v17 = (nw_protocol *)handle[2].handle;
  char v19 = (char *)v17 - (char *)v18;
  if (v17 == v18)
  {
    os_log_type_t v20 = 0LL;
    identifier = (char)handle[4].identifier;
  }

  else
  {
    if ((v19 & 0x8000000000000000LL) != 0) {
      abort();
    }
    os_log_type_t v20 = (char *)operator new((char *)v17 - (char *)v18);
    BOOL v21 = v19 & 0xFFFFFFFFFFFFFFF0LL;
    memcpy(v20, v18, v19 & 0xFFFFFFFFFFFFFFF0LL);
    identifier = (char)handle[4].identifier;
    if ((v19 & 0xFFFFFFFFFFFFFFF0LL) != 0)
    {
      if (((uint64_t)handle[4].identifier & 2) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v23 = (os_log_s *)gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136447234;
          v50 = "nw_protocol_http_messaging_remove_input_handler";
          v51 = 2082;
          os_log_type_t v52 = (nw_protocol *)((char *)handle + 188);
          v53 = 2080;
          BOOL v54 = " ";
          uint64_t v55 = 2048;
          v56 = a2;
          BOOL v57 = 2048;
          v58 = v19 >> 4;
          _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%sfirst input handler %p bailed, restarting %zu input protocols",  buf,  0x34u);
        }
      }

      BOOL v24 = 0LL;
      LOBYTE(handle[4].identifier) |= 0x40u;
      do
      {
        if (*(_DWORD *)&v20[v24 + 8] != 2) {
          nw_protocol_notify(*(void **)&v20[v24], (uint64_t)handle, 22);
        }
        v24 += 16LL;
      }

      while (v21 != v24);
      uint64_t v33 = (char)handle[4].identifier;
      goto LABEL_50;
    }
  }

  uint64_t v33 = identifier | 0x40;
LABEL_50:
  LOBYTE(handle[4].identifier) = v33 & 0xBF;
  nw_protocol_set_input_handler((uint64_t)handle, 0LL);
  if (v20) {
    operator delete(v20);
  }
LABEL_52:
  if (a2->output_handler != handle)
  {
    if (!handle[2].callbacks) {
      goto LABEL_56;
    }
    return 1LL;
  }

  nw_protocol_set_output_handler((uint64_t)a2, 0LL);
  if (handle[2].callbacks) {
    return 1LL;
  }
LABEL_56:
  if (handle->default_input_handler || handle[2].output_handler != handle[2].handle) {
    return 1LL;
  }
  if (a3) {
    v35 = 4;
  }
  else {
    v35 = 0;
  }
  LOBYTE(handle[4].identifier) = (uint64_t)handle[4].identifier & 0xFB | v35;
  dispatch_workloop_t v34 = nw_protocol_remove_input_handler((uint64_t)handle->output_handler, (uint64_t)handle);
  if (a3)
  {
    LOBYTE(handle[4].identifier) |= 8u;
    nw_protocol_remove_instance((uint64_t)handle);
    nw_http_messaging_destroy((uint64_t)handle);
  }

  return v34;
}

    if (!v4) {
      return;
    }
    goto LABEL_47;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v17 = "nw_protocol_http_messaging_disconnected";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v14 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    char v5 = (os_log_s *)__nwlog_obj();
    id v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    id v17 = "nw_protocol_http_messaging_disconnected";
    uint64_t v7 = "%{public}s called with null http_messaging";
    goto LABEL_45;
  }

  if (!v14)
  {
    char v5 = (os_log_s *)__nwlog_obj();
    id v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    id v17 = "nw_protocol_http_messaging_disconnected";
    uint64_t v7 = "%{public}s called with null http_messaging, backtrace limit exceeded";
    goto LABEL_45;
  }

  os_log_type_t v10 = (char *)__nw_create_backtrace_string();
  char v5 = (os_log_s *)__nwlog_obj();
  id v6 = type;
  id v11 = os_log_type_enabled(v5, type);
  if (!v10)
  {
    if (!v11) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    id v17 = "nw_protocol_http_messaging_disconnected";
    uint64_t v7 = "%{public}s called with null http_messaging, no backtrace";
    goto LABEL_45;
  }

  if (v11)
  {
    *(_DWORD *)buf = 136446466;
    id v17 = "nw_protocol_http_messaging_disconnected";
    os_log_type_t v18 = 2082;
    char v19 = v10;
    os_log_type_t v12 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
LABEL_30:
    _os_log_impl(&dword_181A5C000, v5, v6, v12, buf, 0x16u);
  }

    if (!v3) {
      return;
    }
    goto LABEL_47;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v16 = "nw_protocol_http_messaging_error";
  id v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v13 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v4 = (os_log_s *)__nwlog_obj();
    char v5 = type;
    if (!os_log_type_enabled(v4, type)) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    int v16 = "nw_protocol_http_messaging_error";
    id v6 = "%{public}s called with null http_messaging";
    goto LABEL_45;
  }

  if (!v13)
  {
    uint64_t v4 = (os_log_s *)__nwlog_obj();
    char v5 = type;
    if (!os_log_type_enabled(v4, type)) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    int v16 = "nw_protocol_http_messaging_error";
    id v6 = "%{public}s called with null http_messaging, backtrace limit exceeded";
    goto LABEL_45;
  }

  int v9 = (char *)__nw_create_backtrace_string();
  uint64_t v4 = (os_log_s *)__nwlog_obj();
  char v5 = type;
  os_log_type_t v10 = os_log_type_enabled(v4, type);
  if (!v9)
  {
    if (!v10) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    int v16 = "nw_protocol_http_messaging_error";
    id v6 = "%{public}s called with null http_messaging, no backtrace";
    goto LABEL_45;
  }

  if (v10)
  {
    *(_DWORD *)buf = 136446466;
    int v16 = "nw_protocol_http_messaging_error";
    id v17 = 2082;
    os_log_type_t v18 = v9;
    id v11 = "%{public}s called with null http_messaging, dumping backtrace:%{public}s";
LABEL_30:
    _os_log_impl(&dword_181A5C000, v4, v5, v11, buf, 0x16u);
  }

    _os_log_impl(&dword_181A5C000, v14, v15, v16, buf, 0xCu);
    goto LABEL_47;
  }

  uint64_t v4 = a1 + 16;
  char v5 = a1 + 40;
  if (*(void *)(a1 + 24) - *(void *)(a1 + 16) != *(void *)(a1 + 48) - *(void *)(a1 + 40))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v24 = "nw_parallel_array_append";
    int v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = (os_log_s *)__nwlog_obj();
      id v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v24 = "nw_parallel_array_append";
      int v16 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size())";
    }

    else if (v21)
    {
      char v19 = (char *)__nw_create_backtrace_string();
      os_log_type_t v14 = (os_log_s *)__nwlog_obj();
      id v15 = type;
      os_log_type_t v20 = os_log_type_enabled(v14, type);
      if (v19)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v24 = "nw_parallel_array_append";
          os_log_type_t v25 = 2082;
          os_log_type_t v26 = v19;
          _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v19);
        if (v9) {
          goto LABEL_6;
        }
        return;
      }

      if (!v20) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v24 = "nw_parallel_array_append";
      int v16 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), no backtrace";
    }

    else
    {
      os_log_type_t v14 = (os_log_s *)__nwlog_obj();
      id v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v24 = "nw_parallel_array_append";
      int v16 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), backtrace limit exceeded";
    }

    goto LABEL_46;
  }

  if ((unint64_t)nw_parallel_array_get_count((void *)a1) > 0xFFFFFFFFFFFFFFFDLL
    || (int v8 = atomic_load((unsigned __int8 *)(a1 + 64))) != 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    BOOL v24 = "nw_parallel_array_append";
    int v9 = (char *)_os_log_send_and_compose_impl();
    if (!__nwlog_abort((uint64_t)v9))
    {
LABEL_6:
      free(v9);
      return;
    }

    __break(1u);
  }

  else
  {
    os_log_type_t v10 = *(void ***)(a1 + 24);
    if ((unint64_t)v10 >= *(void *)(a1 + 32))
    {
      id v11 = std::vector<nw_object_wrapper_t>::__emplace_back_slow_path<nw_object *&>(v4, a2);
    }

    else
    {
      if (a2) {
        void *v10 = os_retain(a2);
      }
      else {
        void *v10 = 0LL;
      }
      id v11 = v10 + 1;
    }

    *(void *)(a1 + 24) = v11;
    os_log_type_t v12 = *(void **)(a1 + 48);
    if ((unint64_t)v12 >= *(void *)(a1 + 56))
    {
      *(void *)(a1 + 48) = std::vector<nw_object_wrapper_t>::__emplace_back_slow_path<nw_object *&>(v5, a3);
    }

    else
    {
      if (a3) {
        os_log_type_t v13 = os_retain(a3);
      }
      else {
        os_log_type_t v13 = 0LL;
      }
      char *v12 = v13;
      *(void *)(a1 + 48) = v12 + 1;
    }
  }

  if (v4) {
LABEL_47:
  }
    free(v4);
  return 1LL;
}

          goto LABEL_47;
        }

        if (!v26)
        {
          __nwlog_obj();
          id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v25 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            objc_super v29 = "nw_connection_get_tcp_connection_info_for_connected_endpoint_locked";
            _os_log_impl( &dword_181A5C000,  v15,  v25,  "%{public}s called with null tcp_connection_info, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_46;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v22 = type;
        os_log_type_t v23 = os_log_type_enabled(v15, type);
        if (!backtrace_string)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446210;
            objc_super v29 = "nw_connection_get_tcp_connection_info_for_connected_endpoint_locked";
            _os_log_impl( &dword_181A5C000,  v15,  v22,  "%{public}s called with null tcp_connection_info, no backtrace",  buf,  0xCu);
          }

          goto LABEL_46;
        }

        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          objc_super v29 = "nw_connection_get_tcp_connection_info_for_connected_endpoint_locked";
          os_log_type_t v30 = 2082;
          v31 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v15,  v22,  "%{public}s called with null tcp_connection_info, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        goto LABEL_34;
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      objc_super v29 = "nw_connection_get_tcp_connection_info_for_connected_endpoint_locked";
      os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      os_log_type_t v26 = 0;
      if (__nwlog_fault(v14, &type, &v26))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          int v16 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            objc_super v29 = "nw_connection_get_tcp_connection_info_for_connected_endpoint_locked";
            _os_log_impl(&dword_181A5C000, v15, v16, "%{public}s called with null connection", buf, 0xCu);
          }

          goto LABEL_46;
        }

        if (!v26)
        {
          __nwlog_obj();
          id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          BOOL v24 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            objc_super v29 = "nw_connection_get_tcp_connection_info_for_connected_endpoint_locked";
            _os_log_impl( &dword_181A5C000,  v15,  v24,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_46;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = type;
        BOOL v21 = os_log_type_enabled(v15, type);
        if (!backtrace_string)
        {
          if (v21)
          {
            *(_DWORD *)buf = 136446210;
            objc_super v29 = "nw_connection_get_tcp_connection_info_for_connected_endpoint_locked";
            _os_log_impl(&dword_181A5C000, v15, v20, "%{public}s called with null connection, no backtrace", buf, 0xCu);
          }

          goto LABEL_46;
        }

        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          objc_super v29 = "nw_connection_get_tcp_connection_info_for_connected_endpoint_locked";
          os_log_type_t v30 = 2082;
          v31 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v15,  v20,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

  if (v23) {
    free(v23);
  }
LABEL_29:
}

  if (v14) {
    free(v14);
  }
  return 0LL;
}

      free(v20);
      if (!v14) {
        return;
      }
LABEL_62:
      free(v14);
      return;
    }

    id v15 = (os_log_s *)__nwlog_obj();
    int v16 = type;
    if (!os_log_type_enabled(v15, type)) {
      goto LABEL_61;
    }
    *(_DWORD *)buf = 136446210;
    objc_super v29 = "nw_protocol_http2_error";
    id v17 = "%{public}s called with null http2";
LABEL_60:
    _os_log_impl(&dword_181A5C000, v15, v16, v17, buf, 0xCu);
    goto LABEL_61;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    objc_super v29 = "nw_protocol_http2_error";
    os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v26 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v15 = (os_log_s *)__nwlog_obj();
      int v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      objc_super v29 = "nw_protocol_http2_error";
      id v17 = "%{public}s called with null other_protocol";
      goto LABEL_60;
    }

    if (!v26)
    {
      id v15 = (os_log_s *)__nwlog_obj();
      int v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      objc_super v29 = "nw_protocol_http2_error";
      id v17 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_60;
    }

    os_log_type_t v20 = (char *)__nw_create_backtrace_string();
    id v15 = (os_log_s *)__nwlog_obj();
    int v16 = type;
    os_log_type_t v23 = os_log_type_enabled(v15, type);
    if (!v20)
    {
      if (!v23) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 136446210;
      objc_super v29 = "nw_protocol_http2_error";
      id v17 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_60;
    }

    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      objc_super v29 = "nw_protocol_http2_error";
      os_log_type_t v30 = 2082;
      v31 = v20;
      v22 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_45;
    }

    goto LABEL_46;
  }

  if (a3)
  {
    char v5 = (char *)*((void *)handle + 19);
    if (v5)
    {
      v24[0] = MEMORY[0x1895F87A8];
      v24[1] = 0x40000000LL;
      v24[2] = ___ZL23nw_protocol_http2_errorP11nw_protocolS0_i_block_invoke;
      v24[3] = &__block_descriptor_tmp_18_82562;
      os_log_type_t v25 = a3;
      v24[4] = handle;
      v24[5] = a2;
      nw_hash_table_apply(v5, (uint64_t)v24);
      return;
    }

    if ((*((__int16 *)handle + 194) & 0x80000000) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      os_log_type_t v12 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        os_log_type_t v13 = *((_DWORD *)handle + 92);
        *(_DWORD *)buf = 136447234;
        objc_super v29 = "nw_protocol_http2_error";
        os_log_type_t v30 = 2082;
        v31 = handle + 390;
        os_log_type_t v32 = 2080;
        uint64_t v33 = " ";
        dispatch_workloop_t v34 = 1024;
        v35 = v13;
        id v36 = 1024;
        v37 = a3;
        int v8 = "%{public}s %{public}s%s<i%u> cannot pass error %d up the stack, protocol table is NULL";
        int v9 = (os_log_s *)v12;
        os_log_type_t v10 = OS_LOG_TYPE_ERROR;
        id v11 = 44;
        goto LABEL_18;
      }
    }
  }

  else if ((*((__int16 *)handle + 194) & 0x80000000) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    id v6 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = *((_DWORD *)handle + 92);
      *(_DWORD *)buf = 136446978;
      objc_super v29 = "nw_protocol_http2_error";
      os_log_type_t v30 = 2082;
      v31 = handle + 390;
      os_log_type_t v32 = 2080;
      uint64_t v33 = " ";
      dispatch_workloop_t v34 = 1024;
      v35 = v7;
      int v8 = "%{public}s %{public}s%s<i%u> suppressing error 0";
      int v9 = (os_log_s *)v6;
      os_log_type_t v10 = OS_LOG_TYPE_DEBUG;
      id v11 = 38;
LABEL_18:
      _os_log_impl(&dword_181A5C000, v9, v10, v8, buf, v11);
    }
  }

    close(v3);
    return 0LL;
  }

  id v11 = DWORD1(v52) + 216LL;
  os_log_type_t v12 = calloc(1uLL, v11);
  if (v12)
  {
    os_log_type_t v13 = DWORD1(v52);
    if (!DWORD1(v52)) {
      goto LABEL_51;
    }
LABEL_13:
    *((void *)&v52 + 1) = nw_calloc_type<unsigned char>(v13);
    if (ioctl(v3, 0xC0E069A8uLL, &v39))
    {
      os_log_type_t v14 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      buf = 136446466;
      BOOL v54 = "nw_network_agent_copy_struct";
      uint64_t v55 = 1024;
      *(_DWORD *)v56 = v14;
      id v15 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v37 = 0;
      if (__nwlog_fault(v15, &type, &v37))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          int v16 = (os_log_s *)__nwlog_obj();
          id v17 = type;
          if (os_log_type_enabled(v16, type))
          {
            buf = 136446466;
            BOOL v54 = "nw_network_agent_copy_struct";
            uint64_t v55 = 1024;
            *(_DWORD *)v56 = v14;
            os_log_type_t v18 = "%{public}s SIOCGIFAGENTDATA retry failed %{darwin.errno}d";
LABEL_39:
            _os_log_impl(&dword_181A5C000, v16, v17, v18, (uint8_t *)&buf, 0x12u);
          }
        }

        else if (v37)
        {
          BOOL v21 = (char *)__nw_create_backtrace_string();
          int v16 = (os_log_s *)__nwlog_obj();
          id v17 = type;
          v22 = os_log_type_enabled(v16, type);
          if (v21)
          {
            if (v22)
            {
              buf = 136446722;
              BOOL v54 = "nw_network_agent_copy_struct";
              uint64_t v55 = 1024;
              *(_DWORD *)v56 = v14;
              *(_WORD *)&v56[4] = 2082;
              *(void *)&v56[6] = v21;
              _os_log_impl( &dword_181A5C000,  v16,  v17,  "%{public}s SIOCGIFAGENTDATA retry failed %{darwin.errno}d, dumping backtrace:%{public}s",  (uint8_t *)&buf,  0x1Cu);
            }

            free(v21);
            goto LABEL_40;
          }

          if (v22)
          {
            buf = 136446466;
            BOOL v54 = "nw_network_agent_copy_struct";
            uint64_t v55 = 1024;
            *(_DWORD *)v56 = v14;
            os_log_type_t v18 = "%{public}s SIOCGIFAGENTDATA retry failed %{darwin.errno}d, no backtrace";
            goto LABEL_39;
          }
        }

        else
        {
          int v16 = (os_log_s *)__nwlog_obj();
          id v17 = type;
          if (os_log_type_enabled(v16, type))
          {
            buf = 136446466;
            BOOL v54 = "nw_network_agent_copy_struct";
            uint64_t v55 = 1024;
            *(_DWORD *)v56 = v14;
            os_log_type_t v18 = "%{public}s SIOCGIFAGENTDATA retry failed %{darwin.errno}d, backtrace limit exceeded";
            goto LABEL_39;
          }
        }
      }

    if (v12) {
      free(v12);
    }
LABEL_48:
    os_log_type_t v30 = fcntl(v3, 3, 0LL, v44);
    if (v30 != -1)
    {
      v31 = v30 | 4;
      if (fcntl(v3, 4, v30 | 4u) != -1) {
        return v3;
      }
      os_log_type_t v32 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      __nwlog_obj();
      *(_DWORD *)os_log_type_t type = 136446978;
      v53 = "nw_create_control_socket";
      BOOL v54 = 1024;
      uint64_t v55 = v3;
      v56 = 1024;
      BOOL v57 = v31;
      v58 = 1024;
      LODWORD(v59[0]) = v32;
      char v5 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t v46 = OS_LOG_TYPE_ERROR;
      v45 = 0;
      if (v46 == OS_LOG_TYPE_FAULT)
      {
        uint64_t v33 = (os_log_s *)__nwlog_obj();
        dispatch_workloop_t v34 = v46;
        if (os_log_type_enabled(v33, v46))
        {
          *(_DWORD *)os_log_type_t type = 136446978;
          v53 = "nw_create_control_socket";
          BOOL v54 = 1024;
          uint64_t v55 = v3;
          v56 = 1024;
          BOOL v57 = v31;
          v58 = 1024;
          LODWORD(v59[0]) = v32;
          int v8 = "%{public}s fcntl(%d, F_SETFL, %d) %{darwin.errno}d";
LABEL_76:
          os_log_type_t v23 = (uint8_t *)type;
          BOOL v24 = v33;
          os_log_type_t v25 = v34;
          os_log_type_t v26 = 30;
          goto LABEL_32;
        }

        goto LABEL_33;
      }

      if (!v45)
      {
        uint64_t v33 = (os_log_s *)__nwlog_obj();
        dispatch_workloop_t v34 = v46;
        if (os_log_type_enabled(v33, v46))
        {
          *(_DWORD *)os_log_type_t type = 136446978;
          v53 = "nw_create_control_socket";
          BOOL v54 = 1024;
          uint64_t v55 = v3;
          v56 = 1024;
          BOOL v57 = v31;
          v58 = 1024;
          LODWORD(v59[0]) = v32;
          int v8 = "%{public}s fcntl(%d, F_SETFL, %d) %{darwin.errno}d, backtrace limit exceeded";
          goto LABEL_76;
        }

void sub_181A69E80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_activity_should_log(void *a1)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  uint32_t v1 = a1;
  char v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)os_log_type_t v25 = "nw_activity_should_log";
    id v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v15, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)os_log_type_t v25 = "nw_activity_should_log";
          _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s called with null activity", buf, 0xCu);
        }
      }

      else if (v22)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        BOOL v20 = os_log_type_enabled(v16, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)os_log_type_t v25 = "nw_activity_should_log";
            *(_WORD *)&v25[8] = 2082;
            *(void *)&v25[10] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v16,  v19,  "%{public}s called with null activity, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_66;
        }

        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)os_log_type_t v25 = "nw_activity_should_log";
          _os_log_impl(&dword_181A5C000, v16, v19, "%{public}s called with null activity, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)os_log_type_t v25 = "nw_activity_should_log";
          _os_log_impl( &dword_181A5C000,  v16,  v21,  "%{public}s called with null activity, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

LABEL_66:
    if (v15) {
      free(v15);
    }
    goto LABEL_44;
  }

  if ((v1[35] & 2) != 0)
  {
    if (__nwlog_activity_log::onceToken != -1) {
      dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
    }
    char v5 = (os_log_s *)(id)gactivityLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      *(void *)os_log_type_t v25 = v2;
      _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_DEBUG,  "Not checking if we should log for lightweight activity %{public}@",  buf,  0xCu);
    }

    goto LABEL_19;
  }

  if (!nw_activity_label_is_valid(v1[29], v1[28]))
  {
    if (__nwlog_activity_log::onceToken != -1) {
      dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
    }
    char v5 = (os_log_s *)(id)gactivityLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_181A5C000, v5, OS_LOG_TYPE_DEBUG, "Returning true for logging about invalid label", buf, 2u);
    }

    goto LABEL_19;
  }

  if ((v2[35] & 4) != 0 && (*((_BYTE *)v2 + 17) & 1) != 0)
  {
    if (__nwlog_activity_log::onceToken != -1) {
      dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
    }
    char v5 = (os_log_s *)(id)gactivityLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      *(void *)os_log_type_t v25 = v2;
      _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_DEBUG,  "Returning true for logging about activity that is selected for reporting %{public}@",  buf,  0xCu);
    }

    goto LABEL_19;
  }

  int v3 = v2[29];
  if (v3 == 12)
  {
    int v9 = v2[28];
    if (v9 == 3)
    {
      if (__nwlog_activity_log::onceToken != -1) {
        dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
      }
      os_log_type_t v10 = (os_log_s *)(id)gactivityLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        os_log_type_t v13 = nw_activity_domain_and_label_to_string(v2[29], v2[28]);
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)os_log_type_t v25 = 0;
        *(_WORD *)&v25[4] = 2082;
        *(void *)&v25[6] = v13;
        _os_log_impl( &dword_181A5C000,  v10,  OS_LOG_TYPE_DEBUG,  "Returning should log: %u for activity %{public}s",  buf,  0x12u);
      }
    }

    else
    {
      if (v9 != 2) {
        goto LABEL_20;
      }
      if (__nwlog_activity_log::onceToken != -1) {
        dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
      }
      os_log_type_t v10 = (os_log_s *)(id)gactivityLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        id v11 = nw_activity_domain_and_label_to_string(v2[29], v2[28]);
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)os_log_type_t v25 = 0;
        *(_WORD *)&v25[4] = 2082;
        *(void *)&v25[6] = v11;
        _os_log_impl( &dword_181A5C000,  v10,  OS_LOG_TYPE_DEBUG,  "Returning should log: %u for activity %{public}s",  buf,  0x12u);
      }
    }

    goto LABEL_43;
  }

  if (v3 != 11) {
    goto LABEL_20;
  }
  int v4 = v2[28];
  if (v4 == 8)
  {
    if (__nwlog_activity_log::onceToken != -1) {
      dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
    }
    os_log_type_t v10 = (os_log_s *)(id)gactivityLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      os_log_type_t v12 = nw_activity_domain_and_label_to_string(v2[29], v2[28]);
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)os_log_type_t v25 = 0;
      *(_WORD *)&v25[4] = 2082;
      *(void *)&v25[6] = v12;
      _os_log_impl( &dword_181A5C000,  v10,  OS_LOG_TYPE_DEBUG,  "Returning should log: %u for activity %{public}s",  buf,  0x12u);
    }

    free(backtrace_string);
    goto LABEL_79;
  }

  if (a3 == 1)
  {
    os_log_type_t v17 = (const dispatch_source_type_s *)MEMORY[0x1895F8B60];
    goto LABEL_11;
  }

  if (a3 == 2)
  {
    os_log_type_t v17 = (const dispatch_source_type_s *)MEMORY[0x1895F8B90];
    goto LABEL_11;
  }

  if ((a3 & 0xFFFFFFFB) == 3)
  {
    os_log_type_t v17 = (const dispatch_source_type_s *)MEMORY[0x1895F8B78];
    goto LABEL_11;
  }

  if ((a3 - 4) >= 3)
  {
    os_log_type_t v21 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init(v21);
    char v22 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v71 = "nw_queue_context_create_source";
      v72 = 1024;
      LODWORD(v73) = a3;
      _os_log_impl(&dword_181A5C000, v22, OS_LOG_TYPE_ERROR, "%{public}s Bad source type %d", buf, 0x12u);
    }

LABEL_18:
    os_log_type_t v19 = 0LL;
LABEL_55:

    return (BOOL)v19;
  }

  os_log_type_t v17 = (const dispatch_source_type_s *)qword_189BC4988[a3 - 4];
LABEL_11:
  os_log_type_t v19 = (id *)calloc(1uLL, 0x38uLL);
  if (v19)
  {
    if (v12)
    {
LABEL_13:
      if (nw_context_is_inline(v12))
      {
        objc_storeStrong(v19 + 1, a1);
        v51 = _Block_copy(v13);
        os_log_type_t v52 = v19[2];
        v19[2] = v51;

        v53 = _Block_copy(v16);
        BOOL v54 = v19[3];
        v19[3] = v53;

        *((_BYTE *)v19 + 48) = a3 == 3;
        v19[4] = (id)-1LL;
        v19[5] = (id)-1LL;
        goto LABEL_55;
      }

      BOOL v20 = nw_context_copy_workloop(v12);
LABEL_32:
      v35 = (void *)v20;
      id v36 = dispatch_source_create(v17, a2, a4, (dispatch_queue_t)v20);
      v37 = (dispatch_source_t)*v19;
      *os_log_type_t v19 = v36;

      if (*v19)
      {
        dispatch_source_set_event_handler((dispatch_source_t)*v19, v13);
        v38 = (dispatch_source_s *)*v19;
        handler[0] = MEMORY[0x1895F87A8];
        handler[1] = 3221225472LL;
        handler[2] = __nw_queue_context_create_source_block_invoke;
        handler[3] = &unk_189BC73D0;
        BOOL v66 = v16;
        os_log_type_t v67 = v19;
        dispatch_source_set_cancel_handler(v38, handler);

LABEL_54:
        goto LABEL_55;
      }

      free(v19);
      os_log_type_t v39 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init(v39);
      v40 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      os_log_type_t v71 = "nw_queue_context_create_source";
      os_log_type_t v41 = (void *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v68 = 0;
      if (__nwlog_fault(v41, &type, &v68))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          BOOL v42 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init(v42);
          char v43 = (os_log_s *)(id)gLogObj;
          dispatch_workloop_t v44 = type;
          if (os_log_type_enabled(v43, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v71 = "nw_queue_context_create_source";
            _os_log_impl(&dword_181A5C000, v43, v44, "%{public}s dispatch_source_create failed", buf, 0xCu);
          }
        }

        else if (v68)
        {
          v45 = (char *)__nw_create_backtrace_string();
          os_log_type_t v46 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init(v46);
          char v43 = (os_log_s *)(id)gLogObj;
          os_log_type_t v47 = type;
          v48 = os_log_type_enabled(v43, type);
          if (v45)
          {
            if (v48)
            {
              *(_DWORD *)buf = 136446466;
              os_log_type_t v71 = "nw_queue_context_create_source";
              v72 = 2082;
              __uint64_t v73 = (uint64_t)v45;
              _os_log_impl( &dword_181A5C000,  v43,  v47,  "%{public}s dispatch_source_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v45);
            if (!v41) {
              goto LABEL_53;
            }
            goto LABEL_52;
          }

          if (v48)
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v71 = "nw_queue_context_create_source";
            _os_log_impl( &dword_181A5C000,  v43,  v47,  "%{public}s dispatch_source_create failed, no backtrace",  buf,  0xCu);
          }
        }

        else
        {
          id v49 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init(v49);
          char v43 = (os_log_s *)(id)gLogObj;
          v50 = type;
          if (os_log_type_enabled(v43, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v71 = "nw_queue_context_create_source";
            _os_log_impl( &dword_181A5C000,  v43,  v50,  "%{public}s dispatch_source_create failed, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

      if (!v41)
      {
LABEL_53:
        os_log_type_t v19 = 0LL;
        goto LABEL_54;
      }

      v40 = 1LL;
      if (device_model)
      {
LABEL_47:
        os_log_type_t v41 = strlen(device_model) + 1;
        if (contact_id) {
          goto LABEL_48;
        }
        goto LABEL_68;
      }

    goto LABEL_67;
  }

  if (!v4)
  {
    __nwlog_obj();
    char v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_transform_contains_protocol";
    os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v37 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_transform_contains_protocol";
        _os_log_impl(&dword_181A5C000, v20, v23, "%{public}s called with null definition", buf, 0xCu);
      }
    }

    else if (v37)
    {
      char v27 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = type;
      objc_super v29 = os_log_type_enabled(v20, type);
      if (v27)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_transform_contains_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v27;
          _os_log_impl( &dword_181A5C000,  v20,  v28,  "%{public}s called with null definition, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v27);
        if (!v19) {
          goto LABEL_69;
        }
        goto LABEL_68;
      }

      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_transform_contains_protocol";
        _os_log_impl(&dword_181A5C000, v20, v28, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v31 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_transform_contains_protocol";
        _os_log_impl( &dword_181A5C000,  v20,  v31,  "%{public}s called with null definition, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_66;
  }

  if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55294);
  }
  id v6 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;
  if (nw_protocol_definition_is_equal_unsafe((uint64_t)v5, (uint64_t)v6))
  {
    is_equal_unsafe = 1;
  }

  else
  {
    if (nw_protocol_copy_quic_connection_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_55123);
    }
    int v8 = (id)nw_protocol_copy_quic_connection_definition::quic_definition;
    is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v5, (uint64_t)v8);
  }

  int v9 = v3[7];
  if (!v9) {
    goto LABEL_69;
  }
  *(void *)buf = 0LL;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2020000000LL;
  v40 = 0;
  iterate_block[0] = MEMORY[0x1895F87A8];
  iterate_block[1] = 3221225472LL;
  iterate_block[2] = __nw_protocol_transform_contains_protocol_block_invoke;
  iterate_block[3] = &unk_189BC3C28;
  id v36 = is_equal_unsafe;
  v35 = buf;
  os_log_type_t v10 = v5;
  dispatch_workloop_t v34 = v10;
  nw_protocol_stack_iterate_application_protocols(v9, iterate_block);
  if (*(_BYTE *)(*(void *)&buf[8] + 24LL))
  {
    id v11 = 1;
    goto LABEL_32;
  }

  os_log_type_t v12 = nw_protocol_stack_copy_transport_protocol(v3[7]);
  os_log_type_t v13 = v12;
  if (!v12)
  {
    os_log_type_t v14 = nw_protocol_stack_copy_internet_protocol(v3[7]);
    if (!v14) {
      goto LABEL_29;
    }
    if (is_equal_unsafe) {
      goto LABEL_21;
    }
    goto LABEL_26;
  }

  if (!is_equal_unsafe)
  {
    if (nw_protocol_options_matches_definition(v12, v10)) {
      goto LABEL_24;
    }
    os_log_type_t v14 = nw_protocol_stack_copy_internet_protocol(v3[7]);
    if (!v14) {
      goto LABEL_29;
    }
LABEL_26:
    if (nw_protocol_options_matches_definition(v14, v10)) {
      goto LABEL_27;
    }
    goto LABEL_29;
  }

  os_log_type_t v14 = v12;
  if (nw_protocol_options_is_quic_connection(v14))
  {
LABEL_27:
    id v11 = 1;
LABEL_30:

    goto LABEL_31;
  }

  is_quic_stream = nw_protocol_options_is_quic_stream(v14);

  if (!is_quic_stream)
  {
    os_log_type_t v14 = nw_protocol_stack_copy_internet_protocol(v3[7]);
    if (!v14) {
      goto LABEL_29;
    }
LABEL_21:
    os_log_type_t v14 = v14;
    if (nw_protocol_options_is_quic_connection(v14))
    {

      goto LABEL_27;
    }

    int v16 = nw_protocol_options_is_quic_stream(v14);

    if (v16) {
      goto LABEL_27;
    }
LABEL_29:
    id v11 = 0;
    goto LABEL_30;
  }

  id v36 = nw_parameters_copy_context(*((void **)v1 + 1));
  if (nw_context_is_inline(v36))
  {
    v37 = *(void *)(globals_for_path + 32);
    if (!v37 || !nw_dictionary_get_count(v37))
    {
      v38 = *(void *)(globals_for_path + 48);
      if (!v38 || *(void *)(v38 + 16) == *(void *)(v38 + 24))
      {
        if (*(void *)(globals_for_path + 56))
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v39 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446210;
            v48 = "nw_path_evaluator_cancel";
            _os_log_impl( &dword_181A5C000,  v39,  OS_LOG_TYPE_DEBUG,  "%{public}s Suspending global NECP read source",  buf,  0xCu);
          }

          *(_BYTE *)(globals_for_path + 140) |= 1u;
          nw_queue_suspend_source(*(void *)(globals_for_path + 56));
        }
      }
    }
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(globals_for_path + 124));
  os_unfair_lock_unlock((os_unfair_lock_t)v1 + 24);

  int v4 = 1LL;
LABEL_76:

  return v4;
}

      if (a2->handle == &nw_protocol_ref_counted_handle)
      {
        os_log_type_t v71 = a2[1].callbacks;
        if (v71)
        {
          v72 = (nw_protocol_callbacks *)((char *)v71 - 1);
          a2[1].callbacks = v72;
          if (!v72)
          {
            __uint64_t v73 = *(void (***)(void))a2[1].flow_id;
            if (v73)
            {
              *(void *)a2[1].flow_id = 0LL;
              v73[2](v73);
              _Block_release(v73);
            }

            if ((a2[1].flow_id[8] & 1) != 0)
            {
              unint64_t v74 = *(const void **)a2[1].flow_id;
              if (v74) {
                _Block_release(v74);
              }
            }

            free(a2);
          }
        }
      }

      goto LABEL_67;
    }
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
  v99 = (char *)_os_log_send_and_compose_impl();
  type[0] = 16;
  v151 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v99, type, &v151))
  {
    if (type[0] == 17)
    {
      os_log_type_t v100 = (os_log_s *)__nwlog_obj();
      BOOL v101 = type[0];
      if (!os_log_type_enabled(v100, (os_log_type_t)type[0])) {
        goto LABEL_204;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
      os_log_type_t v102 = "%{public}s called with null (remote_address && nw_endpoint_get_type(remote_address) == nw_endpoint_type_address)";
      goto LABEL_203;
    }

    if (v151)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v100 = (os_log_s *)__nwlog_obj();
      BOOL v101 = type[0];
      v130 = os_log_type_enabled(v100, (os_log_type_t)type[0]);
      if (backtrace_string)
      {
        if (!v130) {
          goto LABEL_198;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        char v105 = "%{public}s called with null (remote_address && nw_endpoint_get_type(remote_address) == nw_endpoint_type_a"
               "ddress), dumping backtrace:%{public}s";
        goto LABEL_197;
      }

      if (!v130) {
        goto LABEL_204;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
      os_log_type_t v102 = "%{public}s called with null (remote_address && nw_endpoint_get_type(remote_address) == nw_endpoint_type_add"
             "ress), no backtrace";
    }

    else
    {
      os_log_type_t v100 = (os_log_s *)__nwlog_obj();
      BOOL v101 = type[0];
      if (!os_log_type_enabled(v100, (os_log_type_t)type[0])) {
        goto LABEL_204;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_udp_add_input_handler";
      os_log_type_t v102 = "%{public}s called with null (remote_address && nw_endpoint_get_type(remote_address) == nw_endpoint_type_add"
             "ress), backtrace limit exceeded";
    }

    *os_log_type_t v23 = 0;
    goto LABEL_67;
  }

  if (!v2)
  {
    __nwlog_obj();
    v125 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v125, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v140 = "_strict_strlcat";
    v126 = (void *)_os_log_send_and_compose_impl();

    uint64_t result = __nwlog_abort((uint64_t)v126);
    if (result) {
      goto LABEL_268;
    }
    free(v126);
  }

  BOOL v24 = 0LL;
  os_log_type_t v25 = 107LL;
  while (1)
  {
    os_log_type_t v23 = &v2[v24];
    if (!v2[v24]) {
      break;
    }
    ++v24;
    if (!--v25) {
      goto LABEL_67;
    }
  }

  if (v25 < 2) {
    goto LABEL_66;
  }
  objc_super v29 = v25 - 2;
  os_log_type_t v30 = 106 - v24;
  if (v24 == 105) {
    v31 = 1LL;
  }
  else {
    v31 = 2LL;
  }
  memcpy(v23, "<", v31);
  os_log_type_t v23 = v2 + 106;
  while (!v29)
  {
    if (!--v30) {
      goto LABEL_66;
    }
  }

        os_log_type_t v41 = (char *)v9;
LABEL_67:
        free(v41);
        goto LABEL_68;
      }

      if (v5 != (void *)MEMORY[0x1895F9198])
      {
        if (v5 == (void *)MEMORY[0x1895F91A0])
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v47 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v97 = "networkd_privileged_get_kernel_socket_internal";
            _os_log_impl( &dword_181A5C000,  v47,  OS_LOG_TYPE_ERROR,  "%{public}s received XPC_ERROR_CONNECTION_INVALID",  buf,  0xCu);
          }

          goto LABEL_141;
        }

        if (v5 != (void *)MEMORY[0x1895F91C8])
        {
          uint64_t v7 = (char *)MEMORY[0x186E12534](v5);
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v24 = (id)gLogObj;
          *(_DWORD *)buf = 136446466;
          os_log_type_t v97 = "networkd_privileged_get_kernel_socket_internal";
          BOOL v98 = 2082;
          *(void *)v99 = v7;
          int v9 = (const char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          v94 = 0;
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v25 = type;
            if (os_log_type_enabled(v10, type))
            {
              *(_DWORD *)buf = 136446466;
              os_log_type_t v97 = "networkd_privileged_get_kernel_socket_internal";
              BOOL v98 = 2082;
              *(void *)v99 = v7;
              _os_log_impl( &dword_181A5C000,  v10,  v25,  "%{public}s received returned unknown XPC error %{public}s",  buf,  0x16u);
            }

            goto LABEL_64;
          }

          if (!v94)
          {
            __nwlog_obj();
            os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            unint64_t v78 = type;
            if (os_log_type_enabled(v10, type))
            {
              *(_DWORD *)buf = 136446466;
              os_log_type_t v97 = "networkd_privileged_get_kernel_socket_internal";
              BOOL v98 = 2082;
              *(void *)v99 = v7;
              _os_log_impl( &dword_181A5C000,  v10,  v78,  "%{public}s received returned unknown XPC error %{public}s, backtrace limit exceeded",  buf,  0x16u);
            }

            goto LABEL_64;
          }

          BOOL v57 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v58 = type;
          v59 = os_log_type_enabled(v10, type);
          if (!v57)
          {
            if (v59)
            {
              *(_DWORD *)buf = 136446466;
              os_log_type_t v97 = "networkd_privileged_get_kernel_socket_internal";
              BOOL v98 = 2082;
              *(void *)v99 = v7;
              _os_log_impl( &dword_181A5C000,  v10,  v58,  "%{public}s received returned unknown XPC error %{public}s, no backtrace",  buf,  0x16u);
            }

            goto LABEL_64;
          }

          if (v59)
          {
            *(_DWORD *)buf = 136446722;
            os_log_type_t v97 = "networkd_privileged_get_kernel_socket_internal";
            BOOL v98 = 2082;
            *(void *)v99 = v7;
            *(_WORD *)&v99[8] = 2082;
            *(void *)&v99[10] = v57;
            _os_log_impl( &dword_181A5C000,  v10,  v58,  "%{public}s received returned unknown XPC error %{public}s, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v57);
          if (!v9) {
            goto LABEL_68;
          }
          goto LABEL_66;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v50 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        os_log_type_t v97 = "networkd_privileged_get_kernel_socket_internal";
        uint64_t v7 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        v94 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v51 = type;
          if (os_log_type_enabled(v13, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v97 = "networkd_privileged_get_kernel_socket_internal";
            _os_log_impl(&dword_181A5C000, v13, v51, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT", buf, 0xCu);
          }
        }

        else if (v94)
        {
          BOOL v66 = __nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v67 = type;
          v68 = os_log_type_enabled(v13, type);
          if (v66)
          {
            if (v68)
            {
              *(_DWORD *)buf = 136446466;
              os_log_type_t v97 = "networkd_privileged_get_kernel_socket_internal";
              BOOL v98 = 2082;
              *(void *)v99 = v66;
              _os_log_impl( &dword_181A5C000,  v13,  v67,  "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            os_log_type_t v41 = (char *)v66;
            goto LABEL_67;
          }

          if (v68)
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v97 = "networkd_privileged_get_kernel_socket_internal";
            _os_log_impl( &dword_181A5C000,  v13,  v67,  "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, no backtrace",  buf,  0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          char v79 = type;
          if (os_log_type_enabled(v13, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v97 = "networkd_privileged_get_kernel_socket_internal";
            _os_log_impl( &dword_181A5C000,  v13,  v79,  "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, backtrace limit exceeded",  buf,  0xCu);
          }
        }

LABEL_67:
          if (!v11) {
            goto LABEL_69;
          }
          goto LABEL_68;
        }

        if (!v106)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v12 = (os_log_s *)(id)gLogObj;
          v45 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)buf = 136446466;
            __int16 v109 = "networkd_privileged_setup_feth_pair";
            __uint64_t v110 = 2082;
            *(void *)__int16 v111 = v9;
            _os_log_impl( &dword_181A5C000,  v12,  v45,  "%{public}s received unknown type XPC %{public}s, backtrace limit exceeded",  buf,  0x16u);
          }

          goto LABEL_66;
        }

        objc_super v29 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v12 = (os_log_s *)(id)gLogObj;
        os_log_type_t v30 = type;
        v31 = os_log_type_enabled(v12, type);
        if (!v29)
        {
          if (v31)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v109 = "networkd_privileged_setup_feth_pair";
            __uint64_t v110 = 2082;
            *(void *)__int16 v111 = v9;
            _os_log_impl( &dword_181A5C000,  v12,  v30,  "%{public}s received unknown type XPC %{public}s, no backtrace",  buf,  0x16u);
          }

          goto LABEL_66;
        }

        if (v31)
        {
          *(_DWORD *)buf = 136446722;
          __int16 v109 = "networkd_privileged_setup_feth_pair";
          __uint64_t v110 = 2082;
          *(void *)__int16 v111 = v9;
          *(_WORD *)&v111[8] = 2082;
          *(void *)&v111[10] = v29;
          _os_log_impl( &dword_181A5C000,  v12,  v30,  "%{public}s received unknown type XPC %{public}s, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(v29);
        if (!v11)
        {
LABEL_69:
          if (v9)
          {
            free(v9);
            os_log_type_t v46 = 1;
LABEL_177:
            v50 = v46 == 0;
            goto LABEL_178;
          }

LABEL_67:
            if (!v11) {
              goto LABEL_77;
            }
            goto LABEL_68;
          }

          if (!v98)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v12 = (os_log_s *)(id)gLogObj;
            BOOL v42 = type;
            if (os_log_type_enabled(v12, type))
            {
              *(_DWORD *)buf = 136446466;
              BOOL v101 = "networkd_privileged_teardown_feth_pair";
              os_log_type_t v102 = 2082;
              *(void *)os_log_type_t v103 = v9;
              _os_log_impl( &dword_181A5C000,  v12,  v42,  "%{public}s received unknown type XPC %{public}s, backtrace limit exceeded",  buf,  0x16u);
            }

            goto LABEL_66;
          }

          os_log_type_t v28 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v12 = (os_log_s *)(id)gLogObj;
          objc_super v29 = type;
          os_log_type_t v30 = os_log_type_enabled(v12, type);
          if (!v28)
          {
            if (v30)
            {
              *(_DWORD *)buf = 136446466;
              BOOL v101 = "networkd_privileged_teardown_feth_pair";
              os_log_type_t v102 = 2082;
              *(void *)os_log_type_t v103 = v9;
              _os_log_impl( &dword_181A5C000,  v12,  v29,  "%{public}s received unknown type XPC %{public}s, no backtrace",  buf,  0x16u);
            }

            goto LABEL_66;
          }

          if (v30)
          {
            *(_DWORD *)buf = 136446722;
            BOOL v101 = "networkd_privileged_teardown_feth_pair";
            os_log_type_t v102 = 2082;
            *(void *)os_log_type_t v103 = v9;
            *(_WORD *)&v103[8] = 2082;
            *(void *)&v103[10] = v28;
            _os_log_impl( &dword_181A5C000,  v12,  v29,  "%{public}s received unknown type XPC %{public}s, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v28);
          if (!v11)
          {
LABEL_77:
            if (!v9)
            {
LABEL_136:

LABEL_137:
              return;
            }

          free(v7);
          goto LABEL_67;
        }

        if (v3 == (void *)MEMORY[0x1895F9198])
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v31 = (id)gLogObj;
          *(_DWORD *)buf = 136446210;
          os_log_type_t v91 = "networkd_privileged_reload_managed_network_settings";
          os_log_type_t v32 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          v88 = 0;
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v33 = (os_log_s *)(id)gLogObj;
            dispatch_workloop_t v34 = type;
            if (os_log_type_enabled(v33, type))
            {
              *(_DWORD *)buf = 136446210;
              os_log_type_t v91 = "networkd_privileged_reload_managed_network_settings";
              _os_log_impl( &dword_181A5C000,  v33,  v34,  "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED",  buf,  0xCu);
            }
          }

          else if (v88)
          {
            v50 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v51 = type;
            os_log_type_t v52 = os_log_type_enabled(v33, type);
            if (v50)
            {
              if (v52)
              {
                *(_DWORD *)buf = 136446466;
                os_log_type_t v91 = "networkd_privileged_reload_managed_network_settings";
                v92 = 2082;
                *(void *)v93 = v50;
                _os_log_impl( &dword_181A5C000,  v33,  v51,  "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v50);
              if (!v32) {
                goto LABEL_174;
              }
              goto LABEL_173;
            }

            if (v52)
            {
              *(_DWORD *)buf = 136446210;
              os_log_type_t v91 = "networkd_privileged_reload_managed_network_settings";
              _os_log_impl( &dword_181A5C000,  v33,  v51,  "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, no backtrace",  buf,  0xCu);
            }
          }

          else
          {
            __nwlog_obj();
            uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v67 = type;
            if (os_log_type_enabled(v33, type))
            {
              *(_DWORD *)buf = 136446210;
              os_log_type_t v91 = "networkd_privileged_reload_managed_network_settings";
              _os_log_impl( &dword_181A5C000,  v33,  v67,  "%{public}s received XPC_ERROR_CONNECTION_INTERRUPTED, backtrace limit exceeded",  buf,  0xCu);
            }
          }
        }

        else
        {
          if (v3 == (void *)MEMORY[0x1895F91A0])
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            id v49 = (os_log_s *)(id)gLogObj;
            if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446210;
              os_log_type_t v91 = "networkd_privileged_reload_managed_network_settings";
              _os_log_impl( &dword_181A5C000,  v49,  OS_LOG_TYPE_ERROR,  "%{public}s received XPC_ERROR_CONNECTION_INVALID",  buf,  0xCu);
            }

            goto LABEL_174;
          }

          if (v3 != (void *)MEMORY[0x1895F91C8])
          {
            char v5 = (void *)MEMORY[0x186E12534](v3);
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v23 = (id)gLogObj;
            *(_DWORD *)buf = 136446466;
            os_log_type_t v91 = "networkd_privileged_reload_managed_network_settings";
            v92 = 2082;
            *(void *)v93 = v5;
            uint64_t v7 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            v88 = 0;
            if (type == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              BOOL v24 = type;
              if (os_log_type_enabled(v8, type))
              {
                *(_DWORD *)buf = 136446466;
                os_log_type_t v91 = "networkd_privileged_reload_managed_network_settings";
                v92 = 2082;
                *(void *)v93 = v5;
                _os_log_impl( &dword_181A5C000,  v8,  v24,  "%{public}s received returned unknown XPC error %{public}s",  buf,  0x16u);
              }

              goto LABEL_64;
            }

            if (!v88)
            {
              __nwlog_obj();
              int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              char v75 = type;
              if (os_log_type_enabled(v8, type))
              {
                *(_DWORD *)buf = 136446466;
                os_log_type_t v91 = "networkd_privileged_reload_managed_network_settings";
                v92 = 2082;
                *(void *)v93 = v5;
                _os_log_impl( &dword_181A5C000,  v8,  v75,  "%{public}s received returned unknown XPC error %{public}s, backtrace limit exceeded",  buf,  0x16u);
              }

              goto LABEL_64;
            }

            uint64_t v55 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v56 = type;
            BOOL v57 = os_log_type_enabled(v8, type);
            if (!v55)
            {
              if (v57)
              {
                *(_DWORD *)buf = 136446466;
                os_log_type_t v91 = "networkd_privileged_reload_managed_network_settings";
                v92 = 2082;
                *(void *)v93 = v5;
                _os_log_impl( &dword_181A5C000,  v8,  v56,  "%{public}s received returned unknown XPC error %{public}s, no backtrace",  buf,  0x16u);
              }

              goto LABEL_64;
            }

            if (v57)
            {
              *(_DWORD *)buf = 136446722;
              os_log_type_t v91 = "networkd_privileged_reload_managed_network_settings";
              v92 = 2082;
              *(void *)v93 = v5;
              *(_WORD *)&v93[8] = 2082;
              *(void *)&v93[10] = v55;
              _os_log_impl( &dword_181A5C000,  v8,  v56,  "%{public}s received returned unknown XPC error %{public}s, dumping backtrace:%{public}s",  buf,  0x20u);
            }

            free(v55);
            if (!v7) {
              goto LABEL_67;
            }
            goto LABEL_66;
          }

          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v53 = (id)gLogObj;
          *(_DWORD *)buf = 136446210;
          os_log_type_t v91 = "networkd_privileged_reload_managed_network_settings";
          os_log_type_t v32 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          v88 = 0;
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            BOOL v54 = type;
            if (os_log_type_enabled(v33, type))
            {
              *(_DWORD *)buf = 136446210;
              os_log_type_t v91 = "networkd_privileged_reload_managed_network_settings";
              _os_log_impl(&dword_181A5C000, v33, v54, "%{public}s received XPC_ERROR_TERMINATION_IMMINENT", buf, 0xCu);
            }
          }

          else if (v88)
          {
            os_log_type_t v64 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v65 = type;
            BOOL v66 = os_log_type_enabled(v33, type);
            if (v64)
            {
              if (v66)
              {
                *(_DWORD *)buf = 136446466;
                os_log_type_t v91 = "networkd_privileged_reload_managed_network_settings";
                v92 = 2082;
                *(void *)v93 = v64;
                _os_log_impl( &dword_181A5C000,  v33,  v65,  "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              free(v64);
LABEL_172:
              if (!v32) {
                goto LABEL_174;
              }
LABEL_173:
              free(v32);
              goto LABEL_174;
            }

            if (v66)
            {
              *(_DWORD *)buf = 136446210;
              os_log_type_t v91 = "networkd_privileged_reload_managed_network_settings";
              _os_log_impl( &dword_181A5C000,  v33,  v65,  "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, no backtrace",  buf,  0xCu);
            }
          }

          else
          {
            __nwlog_obj();
            uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            __uint64_t v76 = type;
            if (os_log_type_enabled(v33, type))
            {
              *(_DWORD *)buf = 136446210;
              os_log_type_t v91 = "networkd_privileged_reload_managed_network_settings";
              _os_log_impl( &dword_181A5C000,  v33,  v76,  "%{public}s received XPC_ERROR_TERMINATION_IMMINENT, backtrace limit exceeded",  buf,  0xCu);
            }
          }
        }

        goto LABEL_172;
      }

      xpc_dictionary_get_value(v3, (const char *)networkd_privileged_key_result);
      os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue();
      id v15 = v14;
      if (!v14)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v28 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        os_log_type_t v91 = "networkd_privileged_reload_managed_network_settings";
        os_log_type_t v17 = (const char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        v88 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v18 = (os_log_s *)(id)gLogObj;
          objc_super v29 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v91 = "networkd_privileged_reload_managed_network_settings";
            _os_log_impl(&dword_181A5C000, v18, v29, "%{public}s received response without result code", buf, 0xCu);
          }

          goto LABEL_134;
        }

        if (!v88)
        {
          __nwlog_obj();
          os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v63 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v91 = "networkd_privileged_reload_managed_network_settings";
            _os_log_impl( &dword_181A5C000,  v18,  v63,  "%{public}s received response without result code, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_134;
        }

        char v43 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v47 = type;
        v48 = os_log_type_enabled(v18, type);
        if (!v43)
        {
          if (v48)
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v91 = "networkd_privileged_reload_managed_network_settings";
            _os_log_impl( &dword_181A5C000,  v18,  v47,  "%{public}s received response without result code, no backtrace",  buf,  0xCu);
          }

          goto LABEL_134;
        }

        if (v48)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v91 = "networkd_privileged_reload_managed_network_settings";
          v92 = 2082;
          *(void *)v93 = v43;
          _os_log_impl( &dword_181A5C000,  v18,  v47,  "%{public}s received response without result code, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        goto LABEL_84;
      }

      if (object_getClass(v14) != (Class)MEMORY[0x1895F9280])
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v16 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        os_log_type_t v91 = "networkd_privileged_reload_managed_network_settings";
        os_log_type_t v17 = (const char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        v88 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v18 = (os_log_s *)(id)gLogObj;
          os_log_type_t v19 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v91 = "networkd_privileged_reload_managed_network_settings";
            _os_log_impl(&dword_181A5C000, v18, v19, "%{public}s received invalid result type", buf, 0xCu);
          }

      if (v36) {
        free(v36);
      }
      *v116 = -1;
      os_log_type_t v25 = v29;
      os_log_type_t v28 = v115;
      uint64_t v26 = a9;
      goto LABEL_69;
    }

    os_log_type_t v89 = a5;
    BOOL v90 = a2;
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
    os_log_type_t v91 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v119 = 0;
    if (__nwlog_fault(v91, type, &v119))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v92 = (os_log_s *)__nwlog_obj();
        v93 = type[0];
        if (!os_log_type_enabled(v92, type[0])) {
          goto LABEL_174;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
        v94 = "%{public}s called with null protocol";
LABEL_173:
        _os_log_impl(&dword_181A5C000, v92, v93, v94, buf, 0xCu);
        goto LABEL_174;
      }

      if (!v119)
      {
        v92 = (os_log_s *)__nwlog_obj();
        v93 = type[0];
        if (!os_log_type_enabled(v92, type[0])) {
          goto LABEL_174;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
        v94 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_173;
      }

      BOOL v101 = (char *)__nw_create_backtrace_string();
      v92 = (os_log_s *)__nwlog_obj();
      v93 = type[0];
      os_log_type_t v102 = os_log_type_enabled(v92, type[0]);
      if (!v101)
      {
        if (!v102) {
          goto LABEL_174;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
        v94 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_173;
      }

      if (v102)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v101;
        _os_log_impl( &dword_181A5C000,  v92,  v93,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v101);
    }

    free(backtrace_string);
    goto LABEL_102;
  }

  if (a7) {
    id v15 = 0x8000;
  }
  else {
    id v15 = 0;
  }
  if (((a3 != 0) & a6) != 0) {
    int v16 = 0x4000;
  }
  else {
    int v16 = 0;
  }
  os_log_type_t v17 = (v15 & 0xFFFFFF7F | (a3 << 8) | v16 & 0xFFFFFF7F | (((*(unsigned __int16 *)(a1 + 225) >> 2) & 1) << 7)) ^ 0x80;
  if (a5 < 0x10000) {
    os_log_type_t v18 = 126;
  }
  else {
    os_log_type_t v18 = 127;
  }
  os_log_type_t v19 = a4 != 1005 && a3 == 8;
  BOOL v20 = a5 + 2;
  if (!v19) {
    BOOL v20 = a5;
  }
  if (a5 <= 0x7D) {
    os_log_type_t v18 = v20;
  }
  os_log_type_t v21 = v17 | v18;
  *(_WORD *)output_buffer = bswap32(v17 | v18) >> 16;
  nw_framer_write_output(v13, output_buffer, 2uLL);
  if (gLogDatapath)
  {
    __nwlog_obj();
    dispatch_workloop_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136447490;
      os_log_type_t v52 = "nw_ws_write_header";
      v53 = 2082;
      BOOL v54 = (char *)(a1 + 227);
      uint64_t v55 = 1024;
      *(_DWORD *)v56 = (v21 >> 15) & 1;
      *(_WORD *)&v56[4] = 1024;
      *(_DWORD *)&v56[6] = (v21 >> 8) & 0xF;
      *(_WORD *)BOOL v57 = 1024;
      *(_DWORD *)&v57[2] = (v21 >> 7) & 1;
      v58 = 1024;
      v59 = v21 & 0x7F;
      _os_log_impl( &dword_181A5C000,  v34,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s output base header = {fin: %u, opcode: %u, mask: %u, payload: %u}",  buf,  0x2Eu);
    }
  }

  if ((v21 & 0x7F) == 0x7F)
  {
    *(void *)id v49 = bswap64(a5);
    nw_framer_write_output(v14, v49, 8uLL);
    if (gLogDatapath)
    {
      __nwlog_obj();
      char v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v52 = "nw_ws_write_header";
        v53 = 2082;
        BOOL v54 = (char *)(a1 + 227);
        uint64_t v55 = 2048;
        *(void *)v56 = a5;
        _os_log_impl( &dword_181A5C000,  v22,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s output extended payload(64) = %llu",  buf,  0x20u);
      }

      goto LABEL_25;
    }
  }

  else if ((v21 & 0x7F) == 0x7E)
  {
    *(_WORD *)id v49 = bswap32(a5) >> 16;
    nw_framer_write_output(v14, v49, 2uLL);
    if (gLogDatapath)
    {
      __nwlog_obj();
      char v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v52 = "nw_ws_write_header";
        v53 = 2082;
        BOOL v54 = (char *)(a1 + 227);
        uint64_t v55 = 1024;
        *(_DWORD *)v56 = (unsigned __int16)a5;
        _os_log_impl( &dword_181A5C000,  v22,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s output extended payload(16) = %hu",  buf,  0x1Cu);
      }

        uint64_t v7 = 0LL;
        goto LABEL_8;
      }

      __nwlog_obj();
      os_log_type_t v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      dispatch_workloop_t v34 = "nw_framer_protocol_connect";
      id v15 = (void *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v31 = 0;
      if (!__nwlog_fault((const char *)v15, &type, &v31))
      {
LABEL_64:
        if (v15) {
          free(v15);
        }
        goto LABEL_66;
      }

      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          dispatch_workloop_t v34 = "nw_framer_protocol_connect";
          _os_log_impl(&dword_181A5C000, v16, v19, "%{public}s called with null framer->parent_definition", buf, 0xCu);
        }

  if (v21) {
    free(v21);
  }
  return 0LL;
}

  if (v9) {
    free(v9);
  }
}

    free(backtrace_string);
    goto LABEL_84;
  }

  if (*((nw_protocol **)handle + 6) == a2)
  {
    nw_protocol_set_output_handler((uint64_t)a2, 0LL);
    nw_protocol_set_input_handler((uint64_t)handle, (uint64_t)a3);
    return 1LL;
  }

  uint64_t v7 = (nw_protocol **)*((void *)handle + 23);
  id v6 = (nw_protocol **)*((void *)handle + 24);
  if (v7 != v6)
  {
    while (*v7 != a2)
    {
      v7 += 2;
      if (v7 == v6) {
        goto LABEL_14;
      }
    }
  }

  if (v7 != v6)
  {
    nw_protocol_set_output_handler((uint64_t)a2, 0LL);
    os_log_s *v7 = a3;
    return 1LL;
  }

  if (v15) {
    free(v15);
  }
  return 0LL;
}

      _os_log_impl(&dword_181A5C000, v37, OS_LOG_TYPE_ERROR, v38, buf, 0x20u);
      goto LABEL_79;
    case 1:
      char v22 = (const void *)*((void *)handle + 26);
      os_log_type_t v23 = v9 & 8;
      if (v22) {
        BOOL v24 = v23 == 0;
      }
      else {
        BOOL v24 = 0;
      }
      if (v24)
      {
        os_log_type_t v25 = (uint64_t)handle;
LABEL_83:
        if ((nw_http_connect_send_request(v25, v22) & 1) == 0) {
          nw_http_connect_fail((uint64_t)handle, 22);
        }
      }

      return;
    case 2:
      uint64_t v26 = a1->default_input_handler;
      if (v26)
      {
        char v27 = v26->callbacks;
        if (v27)
        {
          os_log_type_t v28 = (void (*)(void))v27->connected;
          if (v28)
          {
            v28();
            goto LABEL_34;
          }
        }
      }

      __nwlog_obj();
      unint64_t v74 = a1->default_input_handler;
      char v75 = "invalid";
      if (v74)
      {
        __uint64_t v76 = v74->identifier;
        if (v76) {
          char v75 = (const char *)v76;
        }
      }

      *(_DWORD *)buf = 136446466;
      v117 = "nw_protocol_http_connect_connected";
      v118 = 2082;
      v119 = (char *)v75;
      v77 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(uu) = 16;
      LOBYTE(v112) = 0;
      if (uu == 17)
      {
        unint64_t v78 = (os_log_s *)__nwlog_obj();
        char v79 = uu;
        if (!os_log_type_enabled(v78, (os_log_type_t)uu)) {
          goto LABEL_211;
        }
        v80 = a1->default_input_handler;
        v81 = "invalid";
        if (v80)
        {
          v82 = v80->identifier;
          if (v82) {
            v81 = (const char *)v82;
          }
        }

        *(_DWORD *)buf = 136446466;
        v117 = "nw_protocol_http_connect_connected";
        v118 = 2082;
        v119 = (char *)v81;
        os_log_type_t v83 = "%{public}s protocol %{public}s has invalid connected callback";
LABEL_210:
        _os_log_impl(&dword_181A5C000, v78, v79, v83, buf, 0x16u);
        goto LABEL_211;
      }

      if (!(_BYTE)v112)
      {
        unint64_t v78 = (os_log_s *)__nwlog_obj();
        char v79 = uu;
        if (!os_log_type_enabled(v78, (os_log_type_t)uu)) {
          goto LABEL_211;
        }
        os_log_type_t v102 = a1->default_input_handler;
        os_log_type_t v103 = "invalid";
        if (v102)
        {
          __uint64_t v104 = v102->identifier;
          if (v104) {
            os_log_type_t v103 = (const char *)v104;
          }
        }

        *(_DWORD *)buf = 136446466;
        v117 = "nw_protocol_http_connect_connected";
        v118 = 2082;
        v119 = (char *)v103;
        os_log_type_t v83 = "%{public}s protocol %{public}s has invalid connected callback, backtrace limit exceeded";
        goto LABEL_210;
      }

      v92 = (char *)__nw_create_backtrace_string();
      unint64_t v78 = (os_log_s *)__nwlog_obj();
      char v79 = uu;
      v93 = os_log_type_enabled(v78, (os_log_type_t)uu);
      if (!v92)
      {
        if (!v93) {
          goto LABEL_211;
        }
        v107 = a1->default_input_handler;
        v108 = "invalid";
        if (v107)
        {
          __int16 v109 = v107->identifier;
          if (v109) {
            v108 = (const char *)v109;
          }
        }

        *(_DWORD *)buf = 136446466;
        v117 = "nw_protocol_http_connect_connected";
        v118 = 2082;
        v119 = (char *)v108;
        os_log_type_t v83 = "%{public}s protocol %{public}s has invalid connected callback, no backtrace";
        goto LABEL_210;
      }

      if (v93)
      {
        v94 = a1->default_input_handler;
        v95 = "invalid";
        if (v94)
        {
          v96 = v94->identifier;
          if (v96) {
            v95 = (const char *)v96;
          }
        }

        *(_DWORD *)buf = 136446722;
        v117 = "nw_protocol_http_connect_connected";
        v118 = 2082;
        v119 = (char *)v95;
        v120 = 2082;
        v121 = v92;
        _os_log_impl( &dword_181A5C000,  v78,  v79,  "%{public}s protocol %{public}s has invalid connected callback, dumping backtrace:%{public}s",  buf,  0x20u);
      }

      free(v92);
LABEL_211:
      if (v77) {
        free(v77);
      }
LABEL_34:
      default_input_handler = a1->default_input_handler;
      if (default_input_handler)
      {
        objc_super v29 = default_input_handler->callbacks;
        if (v29)
        {
          connected = (void (*)(nw_protocol *, nw_protocol *))v29->connected;
          if (connected)
          {
            int v8 = a1;
            goto LABEL_10;
          }
        }
      }

      __nwlog_obj();
      v84 = a1->default_input_handler;
      v85 = "invalid";
      if (v84)
      {
        v86 = v84->identifier;
        if (v86) {
          v85 = (const char *)v86;
        }
      }

      *(_DWORD *)buf = 136446466;
      v117 = "nw_protocol_http_connect_connected";
      v118 = 2082;
      v119 = (char *)v85;
      v51 = (const char *)_os_log_send_and_compose_impl();
      LOBYTE(uu) = 16;
      LOBYTE(v112) = 0;
      if (__nwlog_fault(v51, &uu, &v112))
      {
        if (uu == 17)
        {
          os_log_type_t v52 = (os_log_s *)__nwlog_obj();
          v53 = uu;
          if (!os_log_type_enabled(v52, (os_log_type_t)uu)) {
            goto LABEL_163;
          }
          os_log_type_t v87 = a1->default_input_handler;
          uint64_t v55 = "invalid";
          if (v87)
          {
            v88 = v87->identifier;
            if (v88) {
              uint64_t v55 = (const char *)v88;
            }
          }

          goto LABEL_94;
        }

        if (!(_BYTE)v112)
        {
          os_log_type_t v52 = (os_log_s *)__nwlog_obj();
          v53 = uu;
          if (!os_log_type_enabled(v52, (os_log_type_t)uu)) {
            goto LABEL_163;
          }
          char v105 = a1->default_input_handler;
          v72 = "invalid";
          if (v105)
          {
            v106 = v105->identifier;
            if (v106) {
              v72 = (const char *)v106;
            }
          }

          goto LABEL_136;
        }

        os_log_type_t v97 = (char *)__nw_create_backtrace_string();
        os_log_type_t v52 = (os_log_s *)__nwlog_obj();
        v53 = uu;
        BOOL v98 = os_log_type_enabled(v52, (os_log_type_t)uu);
        if (v97)
        {
          if (v98)
          {
            v99 = a1->default_input_handler;
            os_log_type_t v100 = "invalid";
            if (v99)
            {
              BOOL v101 = v99->identifier;
              if (v101) {
                os_log_type_t v100 = (const char *)v101;
              }
            }

            *(_DWORD *)buf = 136446722;
            v117 = "nw_protocol_http_connect_connected";
            v118 = 2082;
            v119 = (char *)v100;
            v120 = 2082;
            v121 = v97;
            _os_log_impl( &dword_181A5C000,  v52,  v53,  "%{public}s protocol %{public}s has invalid connected callback, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v97);
          if (v51) {
            goto LABEL_164;
          }
          return;
        }

        if (v98)
        {
          __uint64_t v110 = a1->default_input_handler;
          BOOL v90 = "invalid";
          if (v110)
          {
            __int16 v111 = v110->identifier;
            if (v111) {
              BOOL v90 = (const char *)v111;
            }
          }

          goto LABEL_161;
        }
      }

  *(_BYTE *)(v5 + 187) = self->_noFallback;
  *(_WORD *)(v5 + 196) |= 0x200u;
  has = (__int16)self->_has;
  if ((has & 8) == 0)
  {
LABEL_15:
    if ((has & 0x80) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }

    free(v49);
    if (!v43) {
      goto LABEL_94;
    }
    goto LABEL_93;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v38 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v77 = "-[NWConcrete_nw_socks5_server initWithParameters:clientQueue:]";
  os_log_type_t v39 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  __uint64_t v73 = 0;
  if (__nwlog_fault(v39, &type, &v73))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v40 = (os_log_s *)(id)gLogObj;
      os_log_type_t v41 = type;
      if (os_log_type_enabled(v40, type))
      {
        *(_DWORD *)buf = 136446210;
        v77 = "-[NWConcrete_nw_socks5_server initWithParameters:clientQueue:]";
        _os_log_impl(&dword_181A5C000, v40, v41, "%{public}s dispatch_queue_create failed", buf, 0xCu);
      }
    }

    else if (v73)
    {
      os_log_type_t v46 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v40 = (os_log_s *)(id)gLogObj;
      os_log_type_t v47 = type;
      v48 = os_log_type_enabled(v40, type);
      if (v46)
      {
        if (v48)
        {
          *(_DWORD *)buf = 136446466;
          v77 = "-[NWConcrete_nw_socks5_server initWithParameters:clientQueue:]";
          unint64_t v78 = 2082;
          char v79 = v46;
          _os_log_impl( &dword_181A5C000,  v40,  v47,  "%{public}s dispatch_queue_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v46);
        if (!v39) {
          goto LABEL_73;
        }
        goto LABEL_72;
      }

      if (v48)
      {
        *(_DWORD *)buf = 136446210;
        v77 = "-[NWConcrete_nw_socks5_server initWithParameters:clientQueue:]";
        _os_log_impl(&dword_181A5C000, v40, v47, "%{public}s dispatch_queue_create failed, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v40 = (os_log_s *)(id)gLogObj;
      v56 = type;
      if (os_log_type_enabled(v40, type))
      {
        *(_DWORD *)buf = 136446210;
        v77 = "-[NWConcrete_nw_socks5_server initWithParameters:clientQueue:]";
        _os_log_impl( &dword_181A5C000,  v40,  v56,  "%{public}s dispatch_queue_create failed, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

  if (v39) {
LABEL_72:
  }
    free(v39);
LABEL_73:
  v37 = 0LL;
LABEL_96:

LABEL_97:
  return v37;
}

      free(backtrace_string);
      goto LABEL_86;
    }

    if (!v34) {
      goto LABEL_86;
    }
    *(_DWORD *)os_log_type_t v47 = 136446210;
    *(void *)&v47[4] = "nw_protocol_http2_replace_input_handler";
    char v27 = "%{public}s called with null new_input_protocol, no backtrace";
LABEL_85:
    _os_log_impl(&dword_181A5C000, v25, v26, v27, v47, 0xCu);
LABEL_86:
    if (v24) {
      free(v24);
    }
    return 0LL;
  }

  output_handler_context = a2->output_handler_context;
  if (!output_handler_context)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v11 = gLogObj;
    uint64_t result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_DWORD *)os_log_type_t v47 = 136446466;
    *(void *)&v47[4] = "nw_protocol_http2_replace_input_handler";
    *(_WORD *)&v47[12] = 2082;
    *(void *)&v47[14] = (char *)handle + 205;
    os_log_type_t v13 = "%{public}s %{public}s Failed to find old node";
    os_log_type_t v14 = v47;
    id v15 = (os_log_s *)v11;
    int v16 = 22;
LABEL_28:
    _os_log_impl(&dword_181A5C000, v15, OS_LOG_TYPE_ERROR, v13, v14, v16);
    return 0LL;
  }

  int v8 = output_handler_context[4];
  v48[0] = 0LL;
  memset(v47, 0, sizeof(v47));
  nw_http2_transport_copy_stream(v8, (uint64_t)v47);
  nw_hash_table_remove_node(handle[14], (uint64_t)output_handler_context);
  int v9 = handle[15];
  if (v9)
  {
    node = nw_hash_table_get_node(v9, (uint64_t)v48, 4LL);
    if (node) {
      nw_hash_table_remove_node(handle[15], node);
    }
  }

  else
  {
    node = 0LL;
  }

  v38 = 0;
  os_log_type_t v17 = nw_hash_table_add_object(handle[14], (uint64_t)a3, &v38);
  if (!v38)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v20 = gLogObj;
    uint64_t result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_DWORD *)buf = 136446978;
    v40 = "nw_protocol_http2_replace_input_handler";
    os_log_type_t v41 = 2082;
    BOOL v42 = (char *)handle + 205;
    char v43 = 1042;
    dispatch_workloop_t v44 = 16;
    v45 = 2098;
    os_log_type_t v46 = a3;
    os_log_type_t v13 = "%{public}s %{public}s HTTP/2 already has input handler registered for %{public,uuid_t}.16P";
    os_log_type_t v14 = buf;
    id v15 = (os_log_s *)v20;
    int v16 = 38;
    goto LABEL_28;
  }

  os_log_type_t v18 = (void *)v17;
  os_log_type_t v19 = *(void *)nw_hash_node_get_extra(v17);
  nw_http2_transport_copy_stream((uint64_t)v47, v19);
  a3->output_handler_context = v18;
  if (!a3->output_handler) {
    nw_protocol_set_output_handler((uint64_t)a3, (uint64_t)a1);
  }
  if (a1->default_input_handler != a2)
  {
    if (!node) {
      goto LABEL_24;
    }
    goto LABEL_22;
  }

  nw_protocol_set_input_handler((uint64_t)a1, (uint64_t)a3);
  *(_OWORD *)handle = *(_OWORD *)a3->flow_id;
  if (node)
  {
LABEL_22:
    os_log_type_t v21 = nw_hash_table_add_object(handle[15], v19, &v38);
    if (v38)
    {
      *(void *)nw_hash_node_get_extra(v21) = a3;
      goto LABEL_24;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v22 = gLogObj;
    uint64_t result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    os_log_type_t v23 = *(_DWORD *)(v19 + 32);
    *(_DWORD *)buf = 136446722;
    v40 = "nw_protocol_http2_replace_input_handler";
    os_log_type_t v41 = 2082;
    BOOL v42 = (char *)handle + 205;
    char v43 = 1024;
    dispatch_workloop_t v44 = v23;
    os_log_type_t v13 = "%{public}s %{public}s HTTP/2 already has stream id registered for %d";
    os_log_type_t v14 = buf;
    id v15 = (os_log_s *)v22;
    int v16 = 28;
    goto LABEL_28;
  }

    if (v27) {
      free(v27);
    }
    return 4294966394LL;
  }

  if (gLogDatapath)
  {
    v31 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      v68 = "on_frame_recv_callback";
      v69 = 2082;
      v70 = (char *)(a3 + 205);
      _os_log_impl(&dword_181A5C000, v31, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }

  uint64_t result = 0LL;
  switch(*(_BYTE *)(a2 + 12))
  {
    case 0:
      if (gLogDatapath)
      {
        BOOL v42 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
        {
          char v43 = *(_DWORD *)(a2 + 8);
          *(_DWORD *)buf = 136446722;
          v68 = "on_frame_recv_callback";
          v69 = 2082;
          v70 = (char *)(a3 + 205);
          os_log_type_t v71 = 1024;
          *(_DWORD *)v72 = v43;
          _os_log_impl( &dword_181A5C000,  v42,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s received a complete DATA frame on stream %d",  buf,  0x1Cu);
        }
      }

      if ((*(_BYTE *)(a2 + 13) & 1) == 0) {
        return 0LL;
      }
      if (gLogDatapath)
      {
        uint64_t v55 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
        {
          v56 = *(_DWORD *)(a2 + 8);
          *(_DWORD *)buf = 136446722;
          v68 = "on_frame_recv_callback";
          v69 = 2082;
          v70 = (char *)(a3 + 205);
          os_log_type_t v71 = 1024;
          *(_DWORD *)v72 = v56;
          _os_log_impl( &dword_181A5C000,  v55,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s end stream flag detected, delivering input_finished for stream %d",  buf,  0x1Cu);
        }
      }

      protocol_from_stream_id = nw_http2_transport_get_protocol_from_stream_id(a3, *(_DWORD *)(a2 + 8));
      if (protocol_from_stream_id)
      {
        uint64_t v7 = *(void *)(protocol_from_stream_id + 24);
        if (v7)
        {
          int v8 = *(void (**)(void))(v7 + 184);
          if (v8) {
            goto LABEL_10;
          }
        }

        os_log_type_t v47 = protocol_from_stream_id;
        __nwlog_obj();
        v48 = a3 + 205;
        id v49 = *(_DWORD *)(a2 + 8);
        *(_DWORD *)buf = 136446978;
        v68 = "on_frame_recv_callback";
        v69 = 2082;
        v70 = (char *)(a3 + 205);
        os_log_type_t v71 = 2048;
        os_log_type_t v64 = v47;
        *(void *)v72 = v47;
        *(_WORD *)&v72[8] = 1024;
        __uint64_t v73 = v49;
        v37 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        os_log_type_t v65 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          v38 = (os_log_s *)__nwlog_obj();
          os_log_type_t v39 = type;
          if (!os_log_type_enabled(v38, type)) {
            goto LABEL_100;
          }
          v50 = *(_DWORD *)(a2 + 8);
          *(_DWORD *)buf = 136446978;
          v68 = "on_frame_recv_callback";
          v69 = 2082;
          v70 = (char *)v48;
          os_log_type_t v71 = 2048;
          *(void *)v72 = v64;
          *(_WORD *)&v72[8] = 1024;
          __uint64_t v73 = v50;
          os_log_type_t v41 = "%{public}s %{public}s no input finished callback for protocol %p attached to stream %d";
          goto LABEL_99;
        }

        if (v65)
        {
          v51 = (char *)__nw_create_backtrace_string();
          v38 = (os_log_s *)__nwlog_obj();
          os_log_type_t v39 = type;
          BOOL v57 = os_log_type_enabled(v38, type);
          if (v51)
          {
            if (!v57) {
              goto LABEL_90;
            }
            v58 = *(_DWORD *)(a2 + 8);
            *(_DWORD *)buf = 136447234;
            v68 = "on_frame_recv_callback";
            v69 = 2082;
            v70 = (char *)v48;
            os_log_type_t v71 = 2048;
            *(void *)v72 = v64;
            *(_WORD *)&v72[8] = 1024;
            __uint64_t v73 = v58;
            unint64_t v74 = 2082;
            char v75 = v51;
            BOOL v54 = "%{public}s %{public}s no input finished callback for protocol %p attached to stream %d, dumping backtrace:%{public}s";
            goto LABEL_89;
          }

          if (!v57) {
            goto LABEL_100;
          }
          v62 = *(_DWORD *)(a2 + 8);
          *(_DWORD *)buf = 136446978;
          v68 = "on_frame_recv_callback";
          v69 = 2082;
          v70 = (char *)v48;
          os_log_type_t v71 = 2048;
          *(void *)v72 = v64;
          *(_WORD *)&v72[8] = 1024;
          __uint64_t v73 = v62;
          os_log_type_t v41 = "%{public}s %{public}s no input finished callback for protocol %p attached to stream %d, no backtrace";
        }

        else
        {
          v38 = (os_log_s *)__nwlog_obj();
          os_log_type_t v39 = type;
          if (!os_log_type_enabled(v38, type)) {
            goto LABEL_100;
          }
          BOOL v61 = *(_DWORD *)(a2 + 8);
          *(_DWORD *)buf = 136446978;
          v68 = "on_frame_recv_callback";
          v69 = 2082;
          v70 = (char *)v48;
          os_log_type_t v71 = 2048;
          *(void *)v72 = v64;
          *(_WORD *)&v72[8] = 1024;
          __uint64_t v73 = v61;
          os_log_type_t v41 = "%{public}s %{public}s no input finished callback for protocol %p attached to stream %d, backtrace limit exceeded";
        }

        goto LABEL_99;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v18 = gLogObj;
      uint64_t result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
      if ((_DWORD)result)
      {
        uint64_t v26 = *(_DWORD *)(a2 + 8);
        *(_DWORD *)buf = 136446722;
        v68 = "on_frame_recv_callback";
        v69 = 2082;
        v70 = (char *)(a3 + 205);
        os_log_type_t v71 = 1024;
        *(_DWORD *)v72 = v26;
        id v11 = "%{public}s %{public}s no input handler found for stream %d, dropping DATA";
        goto LABEL_29;
      }

      return result;
    case 1:
      if ((*(_BYTE *)(a2 + 13) & 1) != 0)
      {
        if (!gLogDatapath) {
          return 0LL;
        }
        os_log_type_t v23 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          v68 = "on_frame_recv_callback";
          v69 = 2082;
          v70 = (char *)(a3 + 205);
          _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s detected end stream on header frame",  buf,  0x16u);
        }
      }

      if (!gLogDatapath) {
        return 0LL;
      }
      int v9 = (os_log_s *)__nwlog_obj();
      uint64_t result = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
      if ((_DWORD)result)
      {
        os_log_type_t v10 = *(_DWORD *)(a2 + 8);
        *(_DWORD *)buf = 136446722;
        v68 = "on_frame_recv_callback";
        v69 = 2082;
        v70 = (char *)(a3 + 205);
        os_log_type_t v71 = 1024;
        *(_DWORD *)v72 = v10;
        id v11 = "%{public}s %{public}s received incoming HEADERS frame for stream %d";
        os_log_type_t v12 = v9;
        os_log_type_t v13 = OS_LOG_TYPE_DEBUG;
        goto LABEL_40;
      }

      return result;
    case 2:
      if (!gLogDatapath) {
        return 0LL;
      }
      os_log_type_t v14 = (os_log_s *)__nwlog_obj();
      uint64_t result = os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG);
      if ((_DWORD)result)
      {
        *(_DWORD *)buf = 136446466;
        v68 = "on_frame_recv_callback";
        v69 = 2082;
        v70 = (char *)(a3 + 205);
        id v11 = "%{public}s %{public}s received complete PRIORITY frame, ignoring";
        goto LABEL_26;
      }

      return result;
    case 3:
      if (gLogDatapath)
      {
        dispatch_workloop_t v44 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
        {
          v45 = *(_DWORD *)(a2 + 8);
          *(_DWORD *)buf = 136446722;
          v68 = "on_frame_recv_callback";
          v69 = 2082;
          v70 = (char *)(a3 + 205);
          os_log_type_t v71 = 1024;
          *(_DWORD *)v72 = v45;
          _os_log_impl( &dword_181A5C000,  v44,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s stream %d received RST_STREAM frame, setting error to ECONNRESET",  buf,  0x1Cu);
        }
      }

      id v15 = nw_http2_transport_get_protocol_from_stream_id(a3, *(_DWORD *)(a2 + 8));
      if (v15)
      {
        int v16 = *(void *)(v15 + 24);
        if (v16)
        {
          int v8 = *(void (**)(void))(v16 + 56);
          if (v8)
          {
LABEL_10:
            v8();
            return 0LL;
          }
        }

        dispatch_workloop_t v34 = v15;
        __nwlog_obj();
        v35 = a3 + 205;
        id v36 = *(_DWORD *)(a2 + 8);
        *(_DWORD *)buf = 136446978;
        v68 = "on_frame_recv_callback";
        v69 = 2082;
        v70 = (char *)(a3 + 205);
        os_log_type_t v71 = 2048;
        os_log_type_t v63 = v34;
        *(void *)v72 = v34;
        *(_WORD *)&v72[8] = 1024;
        __uint64_t v73 = v36;
        v37 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        os_log_type_t v65 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          v38 = (os_log_s *)__nwlog_obj();
          os_log_type_t v39 = type;
          if (os_log_type_enabled(v38, type))
          {
            v40 = *(_DWORD *)(a2 + 8);
            *(_DWORD *)buf = 136446978;
            v68 = "on_frame_recv_callback";
            v69 = 2082;
            v70 = (char *)v35;
            os_log_type_t v71 = 2048;
            *(void *)v72 = v63;
            *(_WORD *)&v72[8] = 1024;
            __uint64_t v73 = v40;
            os_log_type_t v41 = "%{public}s %{public}s no error callback for protocol %p attached to stream %d";
LABEL_99:
            _os_log_impl(&dword_181A5C000, v38, v39, v41, buf, 0x26u);
          }
        }

        else if (v65)
        {
          v51 = (char *)__nw_create_backtrace_string();
          v38 = (os_log_s *)__nwlog_obj();
          os_log_type_t v39 = type;
          os_log_type_t v52 = os_log_type_enabled(v38, type);
          if (v51)
          {
            if (v52)
            {
              v53 = *(_DWORD *)(a2 + 8);
              *(_DWORD *)buf = 136447234;
              v68 = "on_frame_recv_callback";
              v69 = 2082;
              v70 = (char *)v35;
              os_log_type_t v71 = 2048;
              *(void *)v72 = v63;
              *(_WORD *)&v72[8] = 1024;
              __uint64_t v73 = v53;
              unint64_t v74 = 2082;
              char v75 = v51;
              BOOL v54 = "%{public}s %{public}s no error callback for protocol %p attached to stream %d, dumping backtrace:%{public}s";
LABEL_89:
              _os_log_impl(&dword_181A5C000, v38, v39, v54, buf, 0x30u);
            }

          *(void *)buf = 0LL;
          *(void *)&buf[8] = buf;
          *(void *)&buf[16] = 0x2020000000LL;
          v82 = 0;
          os_log_type_t v47 = (void *)*((void *)v7 + 16);
          if (!v47) {
            goto LABEL_69;
          }
          v76[0] = MEMORY[0x1895F87A8];
          v76[1] = 3221225472LL;
          v76[2] = __nw_proxy_config_supports_connection_block_invoke_3;
          v76[3] = &unk_189BC52A8;
          v77 = v33;
          unint64_t v78 = buf;
          xpc_array_apply(v47, v76);

          if (*(_BYTE *)(*(void *)&buf[8] + 24LL))
          {
            os_log_type_t v12 = 0LL;
          }

          else
          {
LABEL_69:
            v48 = (void *)*((void *)v7 + 15);
            if (v48)
            {
              *(void *)os_log_type_t type = 0LL;
              __uint64_t v73 = type;
              unint64_t v74 = 0x2020000000LL;
              char v75 = 0;
              v69[0] = MEMORY[0x1895F87A8];
              v69[1] = 3221225472LL;
              v69[2] = __nw_proxy_config_supports_connection_block_invoke_4;
              v69[3] = &unk_189BC52A8;
              v70 = v33;
              os_log_type_t v71 = type;
              xpc_array_apply(v48, v69);
              os_log_type_t v12 = *((_BYTE *)v73 + 24) != 0;

              _Block_object_dispose(type, 8);
            }

            else
            {
              os_log_type_t v12 = (*((_BYTE *)v7 + 172) & 1) == 0;
            }
          }

          _Block_object_dispose(buf, 8);
          goto LABEL_63;
        }

        if (v34 != 1) {
          goto LABEL_62;
        }
        id v36 = (nw_endpoint *)*((void *)v7 + 5);
        v37 = (unsigned int *)nw_path_nat64_prefixes(v10);
        *(void *)buf = 0LL;
        *(void *)&buf[8] = 0LL;
        *(_DWORD *)os_log_type_t type = 0;
        v38 = v37[4];
        if ((_DWORD)v38)
        {
          *(_DWORD *)buf = v37[4];
          memcpy(&buf[4], v37, v38);
          address = nw_endpoint_get_address((nw_endpoint_t)v33);
        }

        v40 = v37[9];
        if ((_DWORD)v40)
        {
          *(_DWORD *)buf = v37[9];
          memcpy(&buf[4], v37, v40);
          os_log_type_t v41 = nw_endpoint_get_address((nw_endpoint_t)v33);
        }

        BOOL v42 = v37[14];
        if ((_DWORD)v42)
        {
          *(_DWORD *)buf = v37[14];
          memcpy(&buf[4], v37, v42);
          char v43 = nw_endpoint_get_address((nw_endpoint_t)v33);
        }

        dispatch_workloop_t v44 = v37[19];
        if ((_DWORD)v44
          && (*(_DWORD *)buf = v37[19],
              memcpy(&buf[4], v37, v44),
              v45 = nw_endpoint_get_address((nw_endpoint_t)v33),
              (nw_nat64_extract_v4((unsigned int *)buf, &v45->sa_data[6], (uint64_t)type) & 1) != 0))
        {
LABEL_58:
        }

        else
        {
LABEL_65:
          address_family = nw_endpoint_get_address_family(v33);
        }

        _os_log_impl(&dword_181A5C000, v49, OS_LOG_TYPE_ERROR, v50, buf, 0xCu);
LABEL_70:
        id v15 = 0;

        goto LABEL_15;
      case 3:
        __nwlog_obj();
        id v11 = (id *)objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled((os_log_t)v11, OS_LOG_TYPE_ERROR)) {
          goto LABEL_14;
        }
        *(_DWORD *)buf = 136446210;
        __uint64_t v73 = "-[NWRemoteConnectionDirector receiveRemoteReply:]";
        os_log_type_t v12 = "%{public}s Close connection command is not valid to send to connection director";
        goto LABEL_12;
      case 4:
        os_log_type_t v30 = objc_alloc(&OBJC_CLASS___NWPBSendData);
        v31 = v6->_messageData;
        id v11 = -[PBCodable initWithData:](v30, "initWithData:", v31);

        if (v11)
        {
          os_log_type_t v32 = objc_alloc(MEMORY[0x189607AB8]);
          uint64_t v33 = v11[1];
          dispatch_workloop_t v34 = (void *)[v32 initWithUUIDString:v33];

          if (v34)
          {
            v35 = v11[2];
            -[NWRemoteConnectionDirector receiveData:forClient:](self, "receiveData:forClient:", v35, v34);

            id v15 = 1;
            goto LABEL_15;
          }

          __nwlog_obj();
          os_log_type_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446210;
            __uint64_t v73 = "-[NWRemoteConnectionDirector receiveRemoteReply:]";
            _os_log_impl(&dword_181A5C000, v52, OS_LOG_TYPE_ERROR, "%{public}s Send data missing client ID", buf, 0xCu);
          }

          id v49 = 0LL;
          goto LABEL_70;
        }

        __nwlog_obj();
        id v49 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v49, OS_LOG_TYPE_ERROR)) {
          goto LABEL_70;
        }
        *(_DWORD *)buf = 136446210;
        __uint64_t v73 = "-[NWRemoteConnectionDirector receiveRemoteReply:]";
        v50 = "%{public}s Send data message could not be parsed";
        goto LABEL_66;
      case 5:
        __nwlog_obj();
        id v11 = (id *)objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled((os_log_t)v11, OS_LOG_TYPE_ERROR)) {
          goto LABEL_14;
        }
        *(_DWORD *)buf = 136446210;
        __uint64_t v73 = "-[NWRemoteConnectionDirector receiveRemoteReply:]";
        os_log_type_t v12 = "%{public}s Open connection command is not valid to send to connection director";
        goto LABEL_12;
      case 6:
        id v36 = objc_alloc(&OBJC_CLASS___NWPBUpdateBrowse);
        v37 = v6->_messageData;
        id v11 = -[PBCodable initWithData:](v36, "initWithData:", v37);

        if (v11)
        {
          v38 = objc_alloc(MEMORY[0x189607AB8]);
          os_log_type_t v39 = v11[1];
          v40 = (void *)[v38 initWithUUIDString:v39];

          id v15 = v40 != 0LL;
          if (v40)
          {
            if ((objc_opt_respondsToSelector() & 1) == 0)
            {
              id v15 = 1;

              goto LABEL_15;
            }

            v62 = v40;
            os_log_type_t v63 = v7;
            os_log_type_t v64 = v4;
            [MEMORY[0x189603FA8] array];
            os_log_type_t v41 = (void *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v65 = 0u;
            BOOL v66 = 0u;
            os_log_type_t v67 = 0u;
            v68 = 0u;
            BOOL v42 = v11[2];
            char v43 = [v42 countByEnumeratingWithState:&v65 objects:v71 count:16];
            if (v43)
            {
              dispatch_workloop_t v44 = v43;
              v45 = *(void *)v66;
              do
              {
                for (i = 0LL; i != v44; ++i)
                {
                  if (*(void *)v66 != v45) {
                    objc_enumerationMutation(v42);
                  }
                  [*(id *)(*((void *)&v65 + 1) + 8 * i) data];
                  os_log_type_t v47 = (void *)objc_claimAutoreleasedReturnValue();
                  v48 = +[NWEndpoint endpointWithProtocolBufferData:]( &OBJC_CLASS___NWEndpoint,  "endpointWithProtocolBufferData:",  v47);
                  [v41 addObject:v48];
                }

                dispatch_workloop_t v44 = [v42 countByEnumeratingWithState:&v65 objects:v71 count:16];
              }

              while (v44);
            }

            uint64_t v7 = v63;
            v40 = v62;
            -[os_log_s setDiscoveredEndpoints:forClient:](v63, "setDiscoveredEndpoints:forClient:", v41, v62);
            int v4 = v64;
          }

          else
          {
            __nwlog_obj();
            os_log_type_t v41 = (void *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled((os_log_t)v41, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446210;
              __uint64_t v73 = "-[NWRemoteConnectionDirector receiveRemoteReply:]";
              _os_log_impl( &dword_181A5C000,  (os_log_t)v41,  OS_LOG_TYPE_ERROR,  "%{public}s Update browse message missing client ID",  buf,  0xCu);
            }
          }
        }

        else
        {
          __nwlog_obj();
          v51 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446210;
            __uint64_t v73 = "-[NWRemoteConnectionDirector receiveRemoteReply:]";
            _os_log_impl( &dword_181A5C000,  v51,  OS_LOG_TYPE_ERROR,  "%{public}s Update browse message could not be parsed",  buf,  0xCu);
          }

          id v15 = 0;
        }

        goto LABEL_15;
      case 7:
        __nwlog_obj();
        id v11 = (id *)objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled((os_log_t)v11, OS_LOG_TYPE_ERROR)) {
          goto LABEL_14;
        }
        *(_DWORD *)buf = 136446210;
        __uint64_t v73 = "-[NWRemoteConnectionDirector receiveRemoteReply:]";
        os_log_type_t v12 = "%{public}s Close connection command is not valid to send to connection director";
        goto LABEL_12;
      default:
        __nwlog_obj();
        id v11 = (id *)objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled((os_log_t)v11, OS_LOG_TYPE_ERROR)) {
          goto LABEL_14;
        }
        if ((*(_BYTE *)&v6->_has & 1) != 0) {
          command = v6->_command;
        }
        else {
          command = 0;
        }
        *(_DWORD *)buf = 136446466;
        __uint64_t v73 = "-[NWRemoteConnectionDirector receiveRemoteReply:]";
        unint64_t v74 = 1024;
        LODWORD(v75) = command;
        os_log_type_t v12 = "%{public}s Unknown command %u sent to connection receiver";
        os_log_type_t v13 = (os_log_s *)v11;
        os_log_type_t v14 = 18;
        goto LABEL_13;
    }
  }

  __nwlog_obj();
  uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  __uint64_t v73 = "-[NWRemoteConnectionDirector receiveRemoteReply:]";
  v56 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  v69 = 0;
  if (__nwlog_fault(v56, &type, &v69))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v57 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v58 = type;
      if (os_log_type_enabled(v57, type))
      {
        *(_DWORD *)buf = 136446210;
        __uint64_t v73 = "-[NWRemoteConnectionDirector receiveRemoteReply:]";
        v59 = "%{public}s called with null replyData";
LABEL_97:
        _os_log_impl(&dword_181A5C000, v57, v58, v59, buf, 0xCu);
      }
    }

    else
    {
      if (v69)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v57 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v58 = type;
        BOOL v61 = os_log_type_enabled(v57, type);
        if (backtrace_string)
        {
          if (v61)
          {
            *(_DWORD *)buf = 136446466;
            __uint64_t v73 = "-[NWRemoteConnectionDirector receiveRemoteReply:]";
            unint64_t v74 = 2082;
            char v75 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v57,  v58,  "%{public}s called with null replyData, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_99;
        }

        if (!v61) {
          goto LABEL_98;
        }
        *(_DWORD *)buf = 136446210;
        __uint64_t v73 = "-[NWRemoteConnectionDirector receiveRemoteReply:]";
        v59 = "%{public}s called with null replyData, no backtrace";
        goto LABEL_97;
      }

      __nwlog_obj();
      BOOL v57 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v58 = type;
      if (os_log_type_enabled(v57, type))
      {
        *(_DWORD *)buf = 136446210;
        __uint64_t v73 = "-[NWRemoteConnectionDirector receiveRemoteReply:]";
        v59 = "%{public}s called with null replyData, backtrace limit exceeded";
        goto LABEL_97;
      }
    }

    free(backtrace_string);
    if (!v10) {
      goto LABEL_46;
    }
    goto LABEL_45;
  }

  if (CFStringGetCStringPtr(a1, a2))
  {
    v6[2](v6);
    goto LABEL_46;
  }

  Length = CFStringGetLength(a1);
  MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, a2);
  if (MaximumSizeForEncoding != -1)
  {
    int v9 = MaximumSizeForEncoding + 1;
    os_log_type_t v10 = nw_calloc_type<unsigned char>(MaximumSizeForEncoding + 1);
    if (CFStringGetCString(a1, (char *)v10, v9, a2))
    {
      ((void (*)(void (**)(void), uint64_t))v6[2])(v6, v10);
      goto LABEL_44;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v14 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    BOOL v42 = "nw_utilities_get_c_string_from_cfstring";
    id v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v39 = 0;
    if (!__nwlog_fault(v15, &type, &v39))
    {
LABEL_42:
      if (!v15) {
        goto LABEL_44;
      }
      goto LABEL_43;
    }

    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v16 = (os_log_s *)(id)gLogObj;
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v42 = "nw_utilities_get_c_string_from_cfstring";
        _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s CFStringGetCString failed", buf, 0xCu);
      }

      free(backtrace_string);
      goto LABEL_74;
    }

    if (!v39) {
      goto LABEL_73;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v46 = "nw_ws_create_client_request_block_invoke";
    dispatch_workloop_t v34 = "%{public}s CFStringCreateWithCString failed, no backtrace";
LABEL_79:
    v40 = v25;
    os_log_type_t v41 = v29;
    goto LABEL_72;
  }

    a1[1] = (int64_t)v59;
    if (v21 != v56)
    {
      os_log_type_t v71 = (void **)(v21 - 8);
      v72 = 8 * (v57 >> 3);
      __uint64_t v73 = v8 + 8 * v80 - 8;
      do
      {
        if (*v71) {
          os_release(*v71);
        }
        *v71-- = *(void **)(v73 + v72);
        *(void *)(v73 + v72) = 0LL;
        v72 -= 8LL;
      }

      while (v72);
    }

    for (; v6 != v19; ++v6)
    {
      unint64_t v74 = *v6;
      if (*v6) {
        unint64_t v74 = os_retain(v74);
      }
      *(void *)os_log_type_t v12 = v74;
      v12 += 8;
    }
  }

          goto LABEL_67;
        }

  os_log_type_t v25 = *(unsigned __int8 *)(a2 + 1);
  if (v25 == 2)
  {
    v31 = bswap32(*(_DWORD *)(a2 + 4));
    os_log_type_t v30 = HIWORD(v31) == 43518 || HIBYTE(v31) == 127;
    objc_super v29 = 14;
LABEL_78:
    if (v30) {
      os_log_type_t v32 = 2;
    }
    else {
      os_log_type_t v32 = v29;
    }
    goto LABEL_82;
  }

  if (v25 == 30)
  {
    uint64_t v26 = *(unsigned __int8 *)(a2 + 8);
    if (v26 == 255)
    {
      v35 = (*(_BYTE *)(a2 + 9) & 0xF) - 1;
      if (v35 >= 5) {
        os_log_type_t v32 = 14;
      }
      else {
        os_log_type_t v32 = dword_18272C8C8[v35];
      }
      goto LABEL_82;
    }

    if (v26 != 254)
    {
      os_log_type_t v32 = 14;
      if (!(*(void *)(a2 + 8) | *(void *)(a2 + 15)))
      {
        if (*(_BYTE *)(a2 + 23) == 1) {
          os_log_type_t v32 = 2;
        }
        else {
          os_log_type_t v32 = 14;
        }
      }

      goto LABEL_82;
    }

    char v27 = *(unsigned __int8 *)(a2 + 9);
    os_log_type_t v28 = v27 & 0xC0;
    if (v27 <= 0xBF) {
      objc_super v29 = 14;
    }
    else {
      objc_super v29 = 5;
    }
    os_log_type_t v30 = v28 == 128;
    goto LABEL_78;
  }

  os_log_type_t v32 = 0;
LABEL_82:
  if (v24 < v32)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v21 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      os_log_type_t v47 = "sa_dst_compare_no_dependencies";
      v48 = 1024;
      *(_DWORD *)id v49 = v24;
      v49[2] = 1024;
      *(_DWORD *)&v49[3] = v32;
      char v22 = "%{public}s ND Rule 8, prefer d1, d1 scope %d < d2 scope %d";
      goto LABEL_85;
    }

    return 1LL;
  }

  if (v32 < v24)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v12 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      os_log_type_t v47 = "sa_dst_compare_no_dependencies";
      v48 = 1024;
      *(_DWORD *)id v49 = v32;
      v49[2] = 1024;
      *(_DWORD *)&v49[3] = v24;
      os_log_type_t v13 = "%{public}s ND Rule 8, prefer d2, d2 scope %d < d1 scope %d";
      goto LABEL_90;
    }

    return 0xFFFFFFFFLL;
  }

  return 0LL;
}

    if (v20) {
      free(v20);
    }
    goto LABEL_17;
  }

      free(v33);
      if (!v21) {
        return;
      }
LABEL_95:
      char v43 = (char *)v21;
      goto LABEL_96;
    }

    char v22 = (os_log_s *)__nwlog_obj();
    os_log_type_t v23 = type;
    if (!os_log_type_enabled(v22, type)) {
      goto LABEL_94;
    }
    *(_DWORD *)buf = 136446210;
    v48 = "nw_protocol_http3_uni_stream_disconnected";
    BOOL v24 = "%{public}s called with null http3_stream";
LABEL_93:
    _os_log_impl(&dword_181A5C000, v22, v23, v24, buf, 0xCu);
    goto LABEL_94;
  }

  if (!handle[9])
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v48 = "nw_protocol_http3_uni_stream_disconnected";
    os_log_type_t v21 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v45 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_94;
      }
      *(_DWORD *)buf = 136446210;
      v48 = "nw_protocol_http3_uni_stream_disconnected";
      BOOL v24 = "%{public}s called with null http3_stream->http3_connection";
      goto LABEL_93;
    }

    if (!v45)
    {
      char v22 = (os_log_s *)__nwlog_obj();
      os_log_type_t v23 = type;
      if (!os_log_type_enabled(v22, type)) {
        goto LABEL_94;
      }
      *(_DWORD *)buf = 136446210;
      v48 = "nw_protocol_http3_uni_stream_disconnected";
      BOOL v24 = "%{public}s called with null http3_stream->http3_connection, backtrace limit exceeded";
      goto LABEL_93;
    }

    uint64_t v33 = (char *)__nw_create_backtrace_string();
    char v22 = (os_log_s *)__nwlog_obj();
    os_log_type_t v23 = type;
    id v36 = os_log_type_enabled(v22, type);
    if (!v33)
    {
      if (!v36) {
        goto LABEL_94;
      }
      *(_DWORD *)buf = 136446210;
      v48 = "nw_protocol_http3_uni_stream_disconnected";
      BOOL v24 = "%{public}s called with null http3_stream->http3_connection, no backtrace";
      goto LABEL_93;
    }

    if (v36)
    {
      *(_DWORD *)buf = 136446466;
      v48 = "nw_protocol_http3_uni_stream_disconnected";
      id v49 = 2082;
      v50 = v33;
      v35 = "%{public}s called with null http3_stream->http3_connection, dumping backtrace:%{public}s";
      goto LABEL_65;
    }

    goto LABEL_66;
  }

  if (gLogDatapath)
  {
    os_log_type_t v25 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      v48 = "nw_protocol_http3_uni_stream_disconnected";
      id v49 = 2048;
      v50 = handle;
      _os_log_impl(&dword_181A5C000, v25, OS_LOG_TYPE_DEBUG, "%{public}s called on http3_uni_stream %p", buf, 0x16u);
    }
  }

  int v3 = *((_BYTE *)handle + 131);
  if ((v3 & 1) == 0)
  {
    if ((*((_BYTE *)handle + 131) & 2) == 0) {
      return;
    }
    v3 &= ~2u;
    *((_BYTE *)handle + 131) = v3;
  }

  if ((v3 & 8) != 0)
  {
    if ((v3 & 4) == 0)
    {
      uint64_t v7 = handle[10];
      int v8 = (void *)handle[11];
      if (v7)
      {
        *(void *)(v7 + 88) = v8;
        int v8 = (void *)handle[11];
      }

      else
      {
        *(void *)(handle[9] + 904LL) = v8;
      }

      *int v8 = v7;
    }

    int v9 = handle[12];
    os_log_type_t v10 = *(void **)(handle[9] + 1256LL);
    v44[0] = MEMORY[0x1895F87A8];
    v44[1] = 0x40000000LL;
    v44[2] = ___ZL41nw_protocol_http3_uni_stream_disconnectedP11nw_protocolS0__block_invoke;
    v44[3] = &unk_189BC4050;
    v44[4] = v9;
    nw_queue_context_async(v10, v44);
    return;
  }

  int v4 = handle[6];
  if (v4)
  {
    char v5 = *(void *)(v4 + 24);
    if (v5)
    {
      id v6 = *(void (**)(void))(v5 + 48);
      if (v6)
      {
        v6();
        return;
      }
    }
  }

  __nwlog_obj();
  id v11 = handle[6];
  os_log_type_t v12 = "invalid";
  if (v11)
  {
    os_log_type_t v13 = *(const char **)(v11 + 16);
    if (v13) {
      os_log_type_t v12 = v13;
    }
  }

  *(_DWORD *)buf = 136446466;
  v48 = "nw_protocol_http3_uni_stream_disconnected";
  id v49 = 2082;
  v50 = v12;
  os_log_type_t v14 = (const char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  v45 = 0;
  if (__nwlog_fault(v14, &type, &v45))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v15 = (os_log_s *)__nwlog_obj();
      int v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_85;
      }
      os_log_type_t v17 = handle[6];
      os_log_type_t v18 = "invalid";
      if (v17)
      {
        os_log_type_t v19 = *(const char **)(v17 + 16);
        if (v19) {
          os_log_type_t v18 = v19;
        }
      }

      *(_DWORD *)buf = 136446466;
      v48 = "nw_protocol_http3_uni_stream_disconnected";
      id v49 = 2082;
      v50 = v18;
      BOOL v20 = "%{public}s protocol %{public}s has invalid disconnected callback";
LABEL_84:
      _os_log_impl(&dword_181A5C000, v15, v16, v20, buf, 0x16u);
      goto LABEL_85;
    }

    if (!v45)
    {
      id v15 = (os_log_s *)__nwlog_obj();
      int v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_85;
      }
      v37 = handle[6];
      v38 = "invalid";
      if (v37)
      {
        os_log_type_t v39 = *(const char **)(v37 + 16);
        if (v39) {
          v38 = v39;
        }
      }

      *(_DWORD *)buf = 136446466;
      v48 = "nw_protocol_http3_uni_stream_disconnected";
      id v49 = 2082;
      v50 = v38;
      BOOL v20 = "%{public}s protocol %{public}s has invalid disconnected callback, backtrace limit exceeded";
      goto LABEL_84;
    }

    uint64_t v26 = (char *)__nw_create_backtrace_string();
    id v15 = (os_log_s *)__nwlog_obj();
    int v16 = type;
    char v27 = os_log_type_enabled(v15, type);
    if (!v26)
    {
      if (!v27) {
        goto LABEL_85;
      }
      v40 = handle[6];
      os_log_type_t v41 = "invalid";
      if (v40)
      {
        BOOL v42 = *(const char **)(v40 + 16);
        if (v42) {
          os_log_type_t v41 = v42;
        }
      }

      *(_DWORD *)buf = 136446466;
      v48 = "nw_protocol_http3_uni_stream_disconnected";
      id v49 = 2082;
      v50 = v41;
      BOOL v20 = "%{public}s protocol %{public}s has invalid disconnected callback, no backtrace";
      goto LABEL_84;
    }

    if (v27)
    {
      os_log_type_t v28 = handle[6];
      objc_super v29 = "invalid";
      if (v28)
      {
        os_log_type_t v30 = *(const char **)(v28 + 16);
        if (v30) {
          objc_super v29 = v30;
        }
      }

      *(_DWORD *)buf = 136446722;
      v48 = "nw_protocol_http3_uni_stream_disconnected";
      id v49 = 2082;
      v50 = v29;
      v51 = 2082;
      os_log_type_t v52 = v26;
      _os_log_impl( &dword_181A5C000,  v15,  v16,  "%{public}s protocol %{public}s has invalid disconnected callback, dumping backtrace:%{public}s",  buf,  0x20u);
    }

    free(v26);
  }

              if (gLogDatapath)
              {
                os_log_type_t v83 = v29;
                v84 = (os_log_s *)__nwlog_obj();
                if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
                {
                  if (v30 >= 0x40)
                  {
                    if (v30 >= 0x4000)
                    {
                      v85 = 9LL;
                    }

                    else
                    {
                      v85 = 3LL;
                    }
                  }

                  else
                  {
                    v85 = 2LL;
                  }

                  *(_DWORD *)buf = 136446978;
                  *(void *)&uint8_t buf[4] = "nw_http3_framer_get_output_frames_for_multiple_http3_frames";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = "maximum_bytes";
                  *(_WORD *)&buf[22] = 2048;
                  *(void *)&buf[24] = v85;
                  LOWORD(v91) = 2048;
                  *(void *)((char *)&v91 + 2) = v30;
                  _os_log_impl( &dword_181A5C000,  v84,  OS_LOG_TYPE_DEBUG,  "%{public}s Overflow: %{public}s, increment %llu, result %llu",  buf,  0x2Au);
                }

                os_log_type_t v30 = 0xFFFFFFFFLL;
                objc_super v29 = v83;
              }

              else
              {
                os_log_type_t v30 = 0xFFFFFFFFLL;
              }

              goto LABEL_68;
            }

            if (a3 >= 0x4000)
            {
              if (a3 >> 30) {
                os_log_type_t v52 = 9;
              }
              else {
                os_log_type_t v52 = 5;
              }
              os_log_type_t v28 = __CFADD__(a3, v52);
              objc_super v29 = a3 + v52;
              if (v28) {
                goto LABEL_26;
              }
            }

            else
            {
              os_log_type_t v28 = __CFADD__(a3, 3);
              objc_super v29 = a3 + 3;
              if (v28) {
                goto LABEL_26;
              }
            }

        free(v16);
        goto LABEL_67;
      }
    }

    objc_storeStrong((id *)&browse->group_descriptor, obj);
    objc_storeStrong((id *)&browse->advertise_descriptor, v76);
    v31 = *((_BYTE *)browse + 475) & 0xFC | v75;
    browse->custom_etheros_log_type_t type = v74;
    browse->custom_ip_protocol = HIBYTE(v73);
    *((_BYTE *)browse + 475) = v31 | (2 * v73);
    *(_OWORD *)browse->client_id = *a1;
    if (!a5 || !a6 || nw_path_parse_necp_result(browse, a5, a6))
    {
      nw_path_snapshot_path(browse);
LABEL_68:

      goto LABEL_69;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    dispatch_workloop_t v34 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v81 = "nw_path_copy_path_for_tlv";
    v35 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v71 = 0;
    if (__nwlog_fault(v35, &type, &v71))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v36 = (os_log_s *)(id)gLogObj;
        v37 = type;
        if (os_log_type_enabled(v36, type))
        {
          *(_DWORD *)buf = 136446210;
          v81 = "nw_path_copy_path_for_tlv";
          _os_log_impl(&dword_181A5C000, v36, v37, "%{public}s nw_path_parse_necp_result failed", buf, 0xCu);
        }
      }

      else if (v71)
      {
        char v43 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        dispatch_workloop_t v44 = type;
        v45 = os_log_type_enabled(v36, type);
        if (v43)
        {
          if (v45)
          {
            *(_DWORD *)buf = 136446466;
            v81 = "nw_path_copy_path_for_tlv";
            v82 = 2082;
            os_log_type_t v83 = v43;
            _os_log_impl( &dword_181A5C000,  v36,  v44,  "%{public}s nw_path_parse_necp_result failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v43);
          goto LABEL_102;
        }

        if (v45)
        {
          *(_DWORD *)buf = 136446210;
          v81 = "nw_path_copy_path_for_tlv";
          _os_log_impl( &dword_181A5C000,  v36,  v44,  "%{public}s nw_path_parse_necp_result failed, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        id v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v50 = type;
        if (os_log_type_enabled(v36, type))
        {
          *(_DWORD *)buf = 136446210;
          v81 = "nw_path_copy_path_for_tlv";
          _os_log_impl( &dword_181A5C000,  v36,  v50,  "%{public}s nw_path_parse_necp_result failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v29) {
      goto LABEL_30;
    }
    uint64_t v26 = (char *)v29;
    goto LABEL_29;
  }

  if (!a4)
  {
    __nwlog_obj();
    os_log_type_t v32 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v47 = "nw_path_flow_registration_get_tfo_cookie";
    objc_super v29 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    dispatch_workloop_t v44 = 0;
    if (__nwlog_fault(v29, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v33 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v47 = "nw_path_flow_registration_get_tfo_cookie";
          _os_log_impl(&dword_181A5C000, v30, v33, "%{public}s called with null len", buf, 0xCu);
        }

    if (v22) {
      free(v22);
    }
    goto LABEL_68;
  }

  objc_storeWeak((id *)&v9->endpoint, v8);
  *((_BYTE *)v6 + 64) = *((_BYTE *)v6 + 64) & 0xFE | a3;
  os_log_type_t v10 = *a2;
  id v11 = a2[1];
  *(void *)&v6->identifier.level = *((void *)a2 + 4);
  *(_OWORD *)&v6->identifier.name[16] = v11;
  *(_OWORD *)v6->identifier.name = v10;
  if (gLogDatapath)
  {
    __nwlog_obj();
    os_log_type_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
    {
      is_registered = nw_endpoint_is_registered(v8);
      char v27 = "un";
      dispatch_workloop_t v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
      *(_DWORD *)buf = 136446722;
      if (is_registered) {
        char v27 = "";
      }
      v45 = 2080;
      os_log_type_t v46 = (void *)v27;
      os_log_type_t v47 = 2112;
      v48 = v8;
      _os_log_impl( &dword_181A5C000,  v25,  OS_LOG_TYPE_DEBUG,  "%{public}s endpoint edge create with %sregistered endpoint %@",  buf,  0x20u);
    }
  }

  __break(1u);
  return result;
}

    free(backtrace_string);
    goto LABEL_84;
  }

  if (*((nw_protocol **)handle + 6) == a2)
  {
    nw_protocol_set_output_handler((uint64_t)a2, 0LL);
    nw_protocol_set_input_handler((uint64_t)handle, (uint64_t)a3);
    return 1LL;
  }

  uint64_t v7 = (nw_protocol **)*((void *)handle + 20);
  id v6 = (nw_protocol **)*((void *)handle + 21);
  if (v7 != v6)
  {
    while (*v7 != a2)
    {
      v7 += 2;
      if (v7 == v6) {
        goto LABEL_14;
      }
    }
  }

  if (v7 != v6)
  {
    nw_protocol_set_output_handler((uint64_t)a2, 0LL);
    os_log_s *v7 = a3;
    return 1LL;
  }

    __break(1u);
    JUMPOUT(0x18252D994LL);
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v32 = "nw_parallel_array_apply_with_range";
  os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  objc_super v29 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v29)
    {
      id v15 = (os_log_s *)__nwlog_obj();
      int v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v32 = "nw_parallel_array_apply_with_range";
        os_log_type_t v17 = "%{public}s called with null applier, backtrace limit exceeded";
        goto LABEL_62;
      }

      goto LABEL_63;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    id v15 = (os_log_s *)__nwlog_obj();
    int v16 = type;
    os_log_type_t v28 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v32 = "nw_parallel_array_apply_with_range";
        os_log_type_t v17 = "%{public}s called with null applier, no backtrace";
        goto LABEL_62;
      }

      goto LABEL_63;
    }

    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v32 = "nw_parallel_array_apply_with_range";
      uint64_t v33 = 2082;
      dispatch_workloop_t v34 = backtrace_string;
      uint64_t v26 = "%{public}s called with null applier, dumping backtrace:%{public}s";
      goto LABEL_48;
    }

      if (v14)
      {
        os_log_type_t v39 = (char *)v14;
LABEL_68:
        free(v39);
      }

      return 4294966394LL;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v64 = "before_frame_send_callback";
    v48 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v62 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v48, type, &v62))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        id v49 = (os_log_s *)__nwlog_obj();
        v50 = type[0];
        if (os_log_type_enabled(v49, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v64 = "before_frame_send_callback";
          v51 = "%{public}s nghttp2 user data is NULL, not http2";
LABEL_105:
          _os_log_impl(&dword_181A5C000, v49, v50, v51, buf, 0xCu);
        }
      }

      else if (v62)
      {
        os_log_type_t v52 = (char *)__nw_create_backtrace_string();
        id v49 = (os_log_s *)__nwlog_obj();
        v50 = type[0];
        v53 = os_log_type_enabled(v49, type[0]);
        if (v52)
        {
          if (v53)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v64 = "before_frame_send_callback";
            os_log_type_t v65 = 2082;
            *(void *)BOOL v66 = v52;
            _os_log_impl( &dword_181A5C000,  v49,  v50,  "%{public}s nghttp2 user data is NULL, not http2, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v52);
          goto LABEL_106;
        }

        if (v53)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v64 = "before_frame_send_callback";
          v51 = "%{public}s nghttp2 user data is NULL, not http2, no backtrace";
          goto LABEL_105;
        }
      }

      else
      {
        id v49 = (os_log_s *)__nwlog_obj();
        v50 = type[0];
        if (os_log_type_enabled(v49, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v64 = "before_frame_send_callback";
          v51 = "%{public}s nghttp2 user data is NULL, not http2, backtrace limit exceeded";
          goto LABEL_105;
        }
      }
    }

    if (v18)
    {
      v38 = (char *)v18;
LABEL_68:
      free(v38);
    }

    return 4294966394LL;
  }

  *(void *)os_log_type_t type = 0LL;
  uint64_t result = nw_http2_get_stream_from_id(a3, v6, type);
  if (result)
  {
    int v8 = result;
    if (!*(void *)type)
    {
      if (((*(unsigned __int16 *)(result + 188) | (*(unsigned __int8 *)(result + 190) << 16)) & 0x80000) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v33 = (os_log_s *)gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
        {
          v35 = *(_DWORD *)(v8 + 176);
          dispatch_workloop_t v34 = *(_DWORD *)(v8 + 180);
          *(_DWORD *)buf = 136447746;
          os_log_type_t v87 = "on_frame_send_callback";
          v88 = 2082;
          *(void *)os_log_type_t v89 = v8 + 191;
          *(_WORD *)&v89[8] = 2080;
          *(void *)BOOL v90 = " ";
          *(_WORD *)&v90[8] = 1024;
          *(_DWORD *)os_log_type_t v91 = v34;
          *(_WORD *)&v91[4] = 1024;
          *(_DWORD *)&v91[6] = v35;
          *(_WORD *)&v91[10] = 2048;
          *(void *)&v91[12] = v8;
          *(_WORD *)&v91[20] = 1024;
          *(_DWORD *)&v91[22] = v35;
          _os_log_impl( &dword_181A5C000,  v33,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:s%d> stream (%pm %d) did not have protocol extra",  buf,  0x3Cu);
          return 4294966394LL;
        }
      }

      return 4294966394LL;
    }

    int v9 = *((unsigned __int8 *)a2 + 12);
    if (v9 == 1)
    {
      *(void *)(result + 128) = *(void *)(result + 120);
      nw_http_transaction_metadata_increment_outbound_header_size( *(void **)(result + 96),  9 * ((unint64_t)(*a2 + 0x3FFF) >> 14) + *a2);
      os_log_type_t v10 = *(unsigned __int16 *)(v8 + 188);
      id v11 = v10 | (*(unsigned __int8 *)(v8 + 190) << 16);
      if ((v10 & 0x2000) != 0)
      {
        *(_BYTE *)(v8 + 190) = BYTE2(v11);
        *(_WORD *)(v8 + 188) = v11 & 0xDEFF;
        os_log_type_t v12 = *(void **)(v8 + 104);
        if (v12)
        {
          os_release(v12);
          *(void *)(v8 + 104) = 0LL;
        }
      }

      int v9 = *((unsigned __int8 *)a2 + 12);
    }

    if (!v9)
    {
      nw_http_transaction_metadata_increment_outbound_body_transfer_size(*(void **)(v8 + 96), *a2 + 9);
      os_log_type_t v13 = *a2;
      os_log_type_t v14 = *(void *)(v8 + 56);
      id v15 = __CFADD__(v14, *a2);
      *(void *)(v8 + 56) = v14 + *a2;
      if (v15)
      {
        if (gLogDatapath)
        {
          __uint64_t v76 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
          {
            v77 = *(void *)(v8 + 56);
            *(_DWORD *)buf = 136446978;
            os_log_type_t v87 = "increment_outbound_body_size";
            v88 = 2082;
            *(void *)os_log_type_t v89 = "outbound_body_size";
            *(_WORD *)&v89[8] = 2048;
            *(void *)BOOL v90 = v13;
            *(_WORD *)&v90[8] = 2048;
            *(void *)os_log_type_t v91 = v77;
            _os_log_impl( &dword_181A5C000,  v76,  OS_LOG_TYPE_DEBUG,  "%{public}s Overflow: %{public}s, increment %llu, result %llu",  buf,  0x2Au);
          }
        }

        *(void *)(v8 + 56) = -1LL;
      }
    }

    if ((*((_BYTE *)a2 + 13) & 1) != 0)
    {
      if (((*(unsigned __int16 *)(v8 + 188) | (*(unsigned __int8 *)(v8 + 190) << 16)) & 0x80000) == 0 && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        __uint64_t v73 = (os_log_s *)gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          char v75 = *(_DWORD *)(v8 + 176);
          unint64_t v74 = *(_DWORD *)(v8 + 180);
          *(_DWORD *)buf = 136447490;
          os_log_type_t v87 = "on_frame_send_callback";
          v88 = 2082;
          *(void *)os_log_type_t v89 = v8 + 191;
          *(_WORD *)&v89[8] = 2080;
          *(void *)BOOL v90 = " ";
          *(_WORD *)&v90[8] = 1024;
          *(_DWORD *)os_log_type_t v91 = v74;
          *(_WORD *)&v91[4] = 1024;
          *(_DWORD *)&v91[6] = v75;
          *(_WORD *)&v91[10] = 1024;
          *(_DWORD *)&v91[12] = v75;
          _os_log_impl( &dword_181A5C000,  v73,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> stream %d end stream flag set, marking outbound message complete",  buf,  0x32u);
        }
      }

      *(_WORD *)(v8 + 188) |= 0x4000u;
      nw_http_transaction_metadata_mark_outbound_message_end(*(void **)(v8 + 96));
      if (*(_BYTE *)(v8 + 48))
      {
        if (*(void *)(v8 + 40) != *(void *)(v8 + 56))
        {
          v50 = *(unsigned __int16 *)(v8 + 188);
          v51 = v50 | (*(unsigned __int8 *)(v8 + 190) << 16);
          if ((v50 & 0x40) == 0)
          {
            *(_BYTE *)(v8 + 190) = BYTE2(v51);
            *(_WORD *)(v8 + 188) = v51 | 0x40;
            if ((*(__int16 *)(a3 + 388) & 0x80000000) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              os_log_type_t v52 = (os_log_s *)gconnectionLogObj;
              if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
              {
                v53 = *(_DWORD *)(a3 + 368);
                if (*(_BYTE *)(v8 + 48)) {
                  BOOL v54 = *(void *)(v8 + 40);
                }
                else {
                  BOOL v54 = -1LL;
                }
                v56 = *(void *)(v8 + 56);
                *(_DWORD *)buf = 136447490;
                os_log_type_t v87 = "on_frame_send_callback";
                v88 = 2082;
                *(void *)os_log_type_t v89 = a3 + 390;
                *(_WORD *)&v89[8] = 2080;
                *(void *)BOOL v90 = " ";
                *(_WORD *)&v90[8] = 1024;
                *(_DWORD *)os_log_type_t v91 = v53;
                *(_WORD *)&v91[4] = 2048;
                *(void *)&v91[6] = v54;
                *(_WORD *)&v91[14] = 2048;
                *(void *)&v91[16] = v56;
                _os_log_impl( &dword_181A5C000,  v52,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u> Content length header %llu does not equal body size %llu",  buf,  0x3Au);
              }
            }

            nw_protocol_error(*(void **)type, a3);
            nw_protocol_disconnected(*(void **)type, a3);
          }

          return 0LL;
        }
      }
    }

    if (!*(void *)(v8 + 16))
    {
      int v16 = (*(unsigned __int8 *)(v8 + 190) >> 3) & 1;
      if (!gLogDatapath) {
        LOBYTE(v16) = 1;
      }
      if ((*(_WORD *)(v8 + 188) & 0x10) != 0)
      {
        if ((v16 & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          v81 = (os_log_s *)gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
          {
            os_log_type_t v83 = *(_DWORD *)(v8 + 176);
            v82 = *(_DWORD *)(v8 + 180);
            *(_DWORD *)buf = 136447234;
            os_log_type_t v87 = "on_frame_send_callback";
            v88 = 2082;
            *(void *)os_log_type_t v89 = v8 + 191;
            *(_WORD *)&v89[8] = 2080;
            *(void *)BOOL v90 = " ";
            *(_WORD *)&v90[8] = 1024;
            *(_DWORD *)os_log_type_t v91 = v82;
            *(_WORD *)&v91[4] = 1024;
            *(_DWORD *)&v91[6] = v83;
            _os_log_impl( &dword_181A5C000,  v81,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> sending deferred end stream",  buf,  0x2Cu);
          }
        }

        nw_http2_send_end_stream(a3, v8);
      }

      else
      {
        if ((v16 & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          unint64_t v78 = (os_log_s *)gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
          {
            v80 = *(_DWORD *)(v8 + 176);
            char v79 = *(_DWORD *)(v8 + 180);
            *(_DWORD *)buf = 136447746;
            os_log_type_t v87 = "on_frame_send_callback";
            v88 = 2082;
            *(void *)os_log_type_t v89 = v8 + 191;
            *(_WORD *)&v89[8] = 2080;
            *(void *)BOOL v90 = " ";
            *(_WORD *)&v90[8] = 1024;
            *(_DWORD *)os_log_type_t v91 = v79;
            *(_WORD *)&v91[4] = 1024;
            *(_DWORD *)&v91[6] = v80;
            *(_WORD *)&v91[10] = 2048;
            *(void *)&v91[12] = *(void *)type;
            *(_WORD *)&v91[20] = 1024;
            *(_DWORD *)&v91[22] = v80;
            _os_log_impl( &dword_181A5C000,  v78,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%d> no more written output frames, pending output available to protocol %p for stream %d",  buf,  0x3Cu);
          }
        }

        nw_http2_set_stream_output_available_pending(a3, v8, 1);
      }
    }

    char v5 = *((unsigned __int8 *)a2 + 12);
LABEL_73:
    if (v5 != 6 || (*((_BYTE *)a2 + 13) & 1) != 0) {
      return 0LL;
    }
    if (a3)
    {
      os_log_type_t v39 = a2[2];
      if ((*(__int16 *)(a3 + 388) & 0x80000000) == 0 && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        v70 = (os_log_s *)gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          os_log_type_t v71 = *(_DWORD *)(a3 + 368);
          *(_DWORD *)buf = 136447234;
          os_log_type_t v87 = "nw_http2_sending_ping";
          v88 = 2082;
          *(void *)os_log_type_t v89 = a3 + 390;
          *(_WORD *)&v89[8] = 2080;
          *(void *)BOOL v90 = " ";
          *(_WORD *)&v90[8] = 1024;
          *(_DWORD *)os_log_type_t v91 = v71;
          *(_WORD *)&v91[4] = 2048;
          *(void *)&v91[6] = v39;
          _os_log_impl(&dword_181A5C000, v70, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> seq %llu", buf, 0x30u);
        }
      }

      v40 = *(int8x8_t *)(a3 + 320);
      if (v40)
      {
        os_log_type_t v41 = (uint8x8_t)vcnt_s8(v40);
        v41.i16[0] = vaddlv_u8(v41);
        if (v41.u32[0] > 1uLL)
        {
          BOOL v42 = v39;
          if (*(void *)&v40 <= v39) {
            BOOL v42 = v39 % *(void *)&v40;
          }
        }

        else
        {
          BOOL v42 = (*(void *)&v40 - 1LL) & v39;
        }

        char v43 = *(void **)(*(void *)(a3 + 312) + 8 * v42);
        if (v43)
        {
          dispatch_workloop_t v44 = (void *)*v43;
          if (*v43)
          {
            if (v41.u32[0] < 2uLL)
            {
              v45 = *(void *)&v40 - 1LL;
              while (1)
              {
                os_log_type_t v47 = v44[1];
                if (v47 == v39)
                {
                  if (v44[2] == v39) {
                    goto LABEL_113;
                  }
                }

                else if ((v47 & v45) != v42)
                {
                  goto LABEL_98;
                }

                dispatch_workloop_t v44 = (void *)*v44;
                if (!v44) {
                  goto LABEL_98;
                }
              }
            }

            do
            {
              os_log_type_t v46 = v44[1];
              if (v46 == v39)
              {
                if (v44[2] == v39)
                {
LABEL_113:
                  uint64_t v55 = mach_continuous_time();
                  uint64_t result = 0LL;
                  if (v55 <= 1) {
                    uint64_t v55 = 1LL;
                  }
                  v44[3] = v55;
                  return result;
                }
              }

              else
              {
                if (v46 >= *(void *)&v40) {
                  v46 %= *(void *)&v40;
                }
                if (v46 != v42) {
                  break;
                }
              }

              dispatch_workloop_t v44 = (void *)*v44;
            }

            while (v44);
          }
        }
      }

    if (v17) {
      free(v17);
    }
    LODWORD(v12) = 0;
  }

  LODWORD(v8) = v15 + v8;
  uint64_t v33 = *(void *)(a1 + 104);
  if ((!v33 || (*(__int16 *)(v33 + 388) & 0x80000000) == 0) && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    v191 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      v192 = *(void *)(a1 + 104);
      v193 = "";
      v194 = v192 == 0;
      v195 = *(_DWORD *)(v192 + 368);
      v196 = (const char *)(v192 + 390);
      v256 = "send_data_callback_block_invoke";
      v257 = 2082;
      if (v194) {
        v196 = "";
      }
      *(_DWORD *)buf = 136447234;
      if (!v194) {
        v193 = " ";
      }
      v258 = v196;
      v259 = 2080;
      v260 = (size_t)v193;
      v261 = 1024;
      *(_DWORD *)v262 = v195;
      *(_WORD *)&v262[4] = 1024;
      *(_DWORD *)&v262[6] = v15;
      _os_log_impl( &dword_181A5C000,  v191,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> wrote %u bytes of capsule type",  buf,  0x2Cu);
    }
  }

      if (v15) {
        free(v15);
      }
      goto LABEL_14;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_finalize_output_frames";
    int v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_finalize_output_frames";
        id v11 = "%{public}s called with null http2";
        goto LABEL_59;
      }

      goto LABEL_60;
    }

    if (!v25)
    {
      int v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_finalize_output_frames";
        id v11 = "%{public}s called with null http2, backtrace limit exceeded";
        goto LABEL_59;
      }

      goto LABEL_60;
    }

    os_log_type_t v19 = (char *)__nw_create_backtrace_string();
    int v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    char v22 = os_log_type_enabled(v9, type);
    if (!v19)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_finalize_output_frames";
        id v11 = "%{public}s called with null http2, no backtrace";
        goto LABEL_59;
      }

      goto LABEL_60;
    }

    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_finalize_output_frames";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v19;
      os_log_type_t v21 = "%{public}s called with null http2, dumping backtrace:%{public}s";
      goto LABEL_42;
    }

    goto LABEL_43;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_http2_finalize_output_frames";
  int v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v25 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v25)
    {
      int v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_finalize_output_frames";
        id v11 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_59;
      }

      goto LABEL_60;
    }

    os_log_type_t v19 = (char *)__nw_create_backtrace_string();
    int v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v20 = os_log_type_enabled(v9, type);
    if (!v19)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http2_finalize_output_frames";
        id v11 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_59;
      }

      goto LABEL_60;
    }

    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_finalize_output_frames";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v19;
      os_log_type_t v21 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_42:
      _os_log_impl(&dword_181A5C000, v9, v10, v21, buf, 0x16u);
    }

      uint64_t v26 = v26;
      os_log_type_t v64 = _nw_http_response_get_status_code();

      if (v25) {
        goto LABEL_69;
      }
LABEL_80:
      ___ZL23nw_http2_stream_connectP17nw_protocol_http2P12http2_streamP11nw_protocol_block_invoke_39( (uint64_t)v96,  (uint64_t)"",  v64);
      os_log_type_t v65 = 0LL;
      if (inbound_message) {
LABEL_70:
      }
        os_release(inbound_message);
LABEL_71:
      if (v24) {
        os_release(v24);
      }
      if (v26) {
        os_release(v26);
      }
      if (v65)
      {
        v53 = v65;
LABEL_77:
        os_release(v53);
      }

      return;
    default:
      return;
  }

      if (v29) {
        free(v29);
      }
      *(void *)(*(void *)(a1[9] + 8LL) + 24LL) = 0LL;
      goto LABEL_17;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v58 = "_http_vle_decode";
    os_log_type_t v41 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v55 = 0;
    if (__nwlog_fault(v41, &type, &v55))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v42 = (os_log_s *)__nwlog_obj();
        char v43 = type;
        if (!os_log_type_enabled(v42, type)) {
          goto LABEL_83;
        }
        *(_DWORD *)buf = 136446210;
        v58 = "_http_vle_decode";
        dispatch_workloop_t v44 = "%{public}s called with null *buffer";
        goto LABEL_82;
      }

      if (!v55)
      {
        BOOL v42 = (os_log_s *)__nwlog_obj();
        char v43 = type;
        if (!os_log_type_enabled(v42, type)) {
          goto LABEL_83;
        }
        *(_DWORD *)buf = 136446210;
        v58 = "_http_vle_decode";
        dispatch_workloop_t v44 = "%{public}s called with null *buffer, backtrace limit exceeded";
        goto LABEL_82;
      }

      v45 = (char *)__nw_create_backtrace_string();
      BOOL v42 = (os_log_s *)__nwlog_obj();
      char v43 = type;
      os_log_type_t v46 = os_log_type_enabled(v42, type);
      if (v45)
      {
        if (v46)
        {
          *(_DWORD *)buf = 136446466;
          v58 = "_http_vle_decode";
          v59 = 2082;
          os_log_type_t v60 = v45;
          _os_log_impl( &dword_181A5C000,  v42,  v43,  "%{public}s called with null *buffer, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v45);
        goto LABEL_83;
      }

      if (v46)
      {
        *(_DWORD *)buf = 136446210;
        v58 = "_http_vle_decode";
        dispatch_workloop_t v44 = "%{public}s called with null *buffer, no backtrace";
LABEL_82:
        _os_log_impl(&dword_181A5C000, v42, v43, v44, buf, 0xCu);
      }
    }

    free(v5);
    goto LABEL_67;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v19 = (os_log_s *)gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    v38 = "nw_network_agent_open_control_socket";
    os_log_type_t v39 = 1024;
    v40 = kernel_socket_internal;
    _os_log_impl( &dword_181A5C000,  v19,  OS_LOG_TYPE_DEFAULT,  "%{public}s Successfully connected netagent socket %d",  buf,  0x12u);
  }

  BOOL v20 = fcntl(kernel_socket_internal, 3, 0LL);
  if ((v20 & 0x80000000) == 0)
  {
    os_log_type_t v21 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    __nwlog_obj();
    *(_DWORD *)buf = 136446466;
    v38 = "nw_network_agent_open_control_socket";
    os_log_type_t v39 = 1024;
    v40 = v21;
    char v22 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    dispatch_workloop_t v34 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v23 = (os_log_s *)__nwlog_obj();
      BOOL v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_90;
      }
      *(_DWORD *)buf = 136446466;
      v38 = "nw_network_agent_open_control_socket";
      os_log_type_t v39 = 1024;
      v40 = v21;
      os_log_type_t v25 = "%{public}s fcntl(F_SETFL) failed on the network agent control socket %{darwin.errno}d";
    }

    else if (v34)
    {
      os_log_type_t v32 = (char *)__nw_create_backtrace_string();
      os_log_type_t v23 = (os_log_s *)__nwlog_obj();
      BOOL v24 = type;
      uint64_t v33 = os_log_type_enabled(v23, type);
      if (v32)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446722;
          v38 = "nw_network_agent_open_control_socket";
          os_log_type_t v39 = 1024;
          v40 = v21;
          os_log_type_t v41 = 2082;
          v42[0] = v32;
          _os_log_impl( &dword_181A5C000,  v23,  v24,  "%{public}s fcntl(F_SETFL) failed on the network agent control socket %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
        }

        free(v32);
LABEL_90:
        if (!v22) {
          return kernel_socket_internal;
        }
LABEL_91:
        free(v22);
        return kernel_socket_internal;
      }

      if (!v33) {
        goto LABEL_90;
      }
      *(_DWORD *)buf = 136446466;
      v38 = "nw_network_agent_open_control_socket";
      os_log_type_t v39 = 1024;
      v40 = v21;
      os_log_type_t v25 = "%{public}s fcntl(F_SETFL) failed on the network agent control socket %{darwin.errno}d, no backtrace";
    }

    else
    {
      os_log_type_t v23 = (os_log_s *)__nwlog_obj();
      BOOL v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_90;
      }
      *(_DWORD *)buf = 136446466;
      v38 = "nw_network_agent_open_control_socket";
      os_log_type_t v39 = 1024;
      v40 = v21;
      os_log_type_t v25 = "%{public}s fcntl(F_SETFL) failed on the network agent control socket %{darwin.errno}d, backtrace limit exceeded";
    }

  if (v20) {
LABEL_67:
  }
    free(v20);
  return 0LL;
}

LABEL_43:
LABEL_44:
    uint64_t v7 = 0LL;
    goto LABEL_21;
  }

  if (v4 == 7)
  {
    if (__nwlog_activity_log::onceToken != -1) {
      dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
    }
    char v5 = (os_log_s *)(id)gactivityLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      id v6 = nw_activity_domain_and_label_to_string(v2[29], v2[28]);
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)os_log_type_t v25 = 1;
      *(_WORD *)&v25[4] = 2082;
      *(void *)&v25[6] = v6;
      _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_DEBUG,  "Returning should log: %u for activity %{public}s",  buf,  0x12u);
    }

    free(backtrace_string);
    goto LABEL_54;
  }

  if (!a2)
  {
    __nwlog_obj();
    os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v22 = "nw_protocol_definition_is_equal_unsafe";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v19 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        char v22 = "nw_protocol_definition_is_equal_unsafe";
        os_log_type_t v13 = "%{public}s called with null definition2";
        goto LABEL_52;
      }

      goto LABEL_53;
    }

    if (!v19)
    {
      __nwlog_obj();
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        char v22 = "nw_protocol_definition_is_equal_unsafe";
        os_log_type_t v13 = "%{public}s called with null definition2, backtrace limit exceeded";
        goto LABEL_52;
      }

      goto LABEL_53;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v12 = type;
    os_log_type_t v18 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        char v22 = "nw_protocol_definition_is_equal_unsafe";
        os_log_type_t v13 = "%{public}s called with null definition2, no backtrace";
        goto LABEL_52;
      }

      goto LABEL_53;
    }

    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      char v22 = "nw_protocol_definition_is_equal_unsafe";
      os_log_type_t v23 = 2082;
      BOOL v24 = backtrace_string;
      os_log_type_t v17 = "%{public}s called with null definition2, dumping backtrace:%{public}s";
      goto LABEL_42;
    }

    goto LABEL_43;
  }

  if ((*(_BYTE *)(a1 + 184) & 0x40) != 0 || (*(_BYTE *)(a2 + 184) & 0x40) != 0)
  {
    return a1 == a2;
  }

  else
  {
    if (a1 == a2) {
      return 1LL;
    }
    return *(void *)(a1 + 8) == *(void *)(a2 + 8)
        && *(void *)(a1 + 16) == *(void *)(a2 + 16)
        && *(void *)(a1 + 24) == *(void *)(a2 + 24)
        && *(void *)(a1 + 32) == *(void *)(a2 + 32)
        && *(void *)(a1 + 40) == *(void *)(a2 + 40);
  }

  memcpy(v5 + 232, a2, v14);
LABEL_44:
  v5[232] = v14;
  if (v5[233] == 2 && *((void *)v5 + 30))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v25 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v57 = "-[NWConcrete_nw_address_endpoint initWithAddress:overridePort:]";
      _os_log_impl( &dword_181A5C000,  v25,  OS_LOG_TYPE_ERROR,  "%{public}s Fixing endpoint address with non-zero sin_zero field",  buf,  0xCu);
    }

    *((void *)v5 + 30) = 0LL;
  }

  if (a3)
  {
    uint64_t v26 = strtol(a3, 0LL, 0);
    char v27 = v5[233];
    if (v27 == 30 || v27 == 2) {
      *((_WORD *)v5 + 117) = bswap32(v26) >> 16;
    }
  }

  return v5;
}

    goto LABEL_44;
  }

  if (a2)
  {
    char v5 = (char *)v3;
    id v6 = v5;
    uint64_t v7 = *(_OWORD *)(v5 + 56);
    *(_OWORD *)buf = *(_OWORD *)(v5 + 40);
    *(_OWORD *)&buf[16] = v7;
    if (*(void *)buf | *(void *)&buf[8] | (unint64_t)v7 | *((void *)&v7 + 1))
    {
      int v8 = a2 + 40;
      int v9 = *(_OWORD *)(v5 + 40);
      *(_OWORD *)(a2 + 56) = *(_OWORD *)(v5 + 56);
      *(_OWORD *)(a2 + 40) = v9;
    }

    else
    {

      int v8 = 0LL;
    }

    *(void *)(a2 + 8) = v8;
    if (uuid_is_null((const unsigned __int8 *)(*((void *)v6 + 13) + 24LL)))
    {
      os_log_type_t v10 = 0LL;
    }

    else
    {
      os_log_type_t v10 = a2 + 72;
      *(_OWORD *)(a2 + 72) = *(_OWORD *)(*((void *)v6 + 13) + 24LL);
    }

    *(void *)(a2 + 16) = v10;
    *(_DWORD *)(a2 + 24) = *(_DWORD *)(*((void *)v6 + 13) + 64LL);
    *(void *)a2 = *((void *)v6 + 14);
    goto LABEL_10;
  }

  __nwlog_obj();
  id v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_parameters_to_ne_app_context";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v25 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    int v16 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_parameters_to_ne_app_context";
      _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null storage", buf, 0xCu);
    }

    goto LABEL_43;
  }

  if (!v25)
  {
    __nwlog_obj();
    os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v24 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_parameters_to_ne_app_context";
      _os_log_impl( &dword_181A5C000,  v13,  v24,  "%{public}s called with null storage, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_43;
  }

  BOOL v20 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v21 = type;
  char v22 = os_log_type_enabled(v13, type);
  if (!v20)
  {
    if (v22)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_parameters_to_ne_app_context";
      _os_log_impl(&dword_181A5C000, v13, v21, "%{public}s called with null storage, no backtrace", buf, 0xCu);
    }

    goto LABEL_43;
  }

  if (v22)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_parameters_to_ne_app_context";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v20;
    _os_log_impl( &dword_181A5C000,  v13,  v21,  "%{public}s called with null storage, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v20);
  if (v12) {
    goto LABEL_45;
  }
LABEL_10:
}

      free(backtrace_string);
    }

              goto LABEL_164;
            }

            if (!v83)
            {
              __nwlog_obj();
              os_log_type_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              id v36 = type;
              if (os_log_type_enabled(v28, type))
              {
                *(_DWORD *)buf = 136446210;
                os_log_type_t v87 = "nw_context_get_globals_for_protocol";
                _os_log_impl( &dword_181A5C000,  v28,  v36,  "%{public}s nw_hash_table_add_object failed, backtrace limit exceeded",  buf,  0xCu);
              }

              goto LABEL_43;
            }

            os_log_type_t v30 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            os_log_type_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v31 = type;
            os_log_type_t v32 = os_log_type_enabled(v28, type);
            if (!v30)
            {
              if (v32)
              {
                *(_DWORD *)buf = 136446210;
                os_log_type_t v87 = "nw_context_get_globals_for_protocol";
                _os_log_impl( &dword_181A5C000,  v28,  v31,  "%{public}s nw_hash_table_add_object failed, no backtrace",  buf,  0xCu);
              }

              goto LABEL_43;
            }

            if (v32)
            {
              *(_DWORD *)buf = 136446466;
              os_log_type_t v87 = "nw_context_get_globals_for_protocol";
              v88 = 2082;
              os_log_type_t v89 = v30;
              _os_log_impl( &dword_181A5C000,  v28,  v31,  "%{public}s nw_hash_table_add_object failed, dumping backtrace:%{public}s",  buf,  0x16u);
            }

LABEL_156:
            free(v30);
            if (!v27) {
              goto LABEL_166;
            }
            goto LABEL_165;
          }

          goto LABEL_164;
        }

      free(v30);
    }
  }
}

              char v27 = v293;
              os_log_type_t v28 = v27[8];

              if (v28)
              {
                objc_super v29 = v27;
                os_log_type_t v30 = v27[8];

                LOBYTE(v29) = nw_content_context_has_metadata(v30);
                os_log_type_t v23 = -1;
              }

              else
              {
                os_log_type_t v23 = -1;
              }

    if (!v10)
    {
LABEL_45:
      int v9 = 0LL;
      goto LABEL_46;
    }

    if (!v21) {
      goto LABEL_45;
    }
LABEL_44:
    free(v21);
    goto LABEL_45;
  }

  int v8 = (unsigned int *)v6;
  int v9 = v8[29];

  if ((_DWORD)v9 == 1)
  {
    child_endpoint_handlers = (unsigned __int8 *)self->child_endpoint_handlers;
    v38[0] = MEMORY[0x1895F87A8];
    v38[1] = 3221225472LL;
    v38[2] = __60__NWConcrete_nw_endpoint_resolver_cancelWithHandler_forced___block_invoke;
    v38[3] = &__block_descriptor_33_e35_B24__0Q8__NSObject_OS_nw_object__16l;
    os_log_type_t v39 = a4;
    nw_array_apply(child_endpoint_handlers, (uint64_t)v38);
    id v11 = self->child_endpoint_handlers;
    self->child_endpoint_handlers = 0LL;

    failed_child_endpoint_handlers = self->failed_child_endpoint_handlers;
    self->failed_child_endpoint_handlers = 0LL;

    resolver = self->resolver;
    if (resolver)
    {
      nw_resolver_cancel(resolver);
      id v15 = self->resolver;
      self->resolver = 0LL;
    }

    self->last_resolver_status = 0;
    child_timer = self->child_timer;
    if (child_timer)
    {
      nw_queue_cancel_source((uint64_t)child_timer, v13);
      self->child_timer = 0LL;
    }

    trigger_agent_timer = self->trigger_agent_timer;
    if (trigger_agent_timer)
    {
      nw_queue_cancel_source((uint64_t)trigger_agent_timer, v13);
      self->trigger_agent_timer = 0LL;
    }

    desperate_ivan_timer = self->desperate_ivan_timer;
    if (desperate_ivan_timer)
    {
      nw_queue_cancel_source((uint64_t)desperate_ivan_timer, v13);
      self->desperate_ivan_timer = 0LL;
    }

    goto LABEL_45;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v19 = (id)gLogObj;
  else {
    BOOL v20 = off_189BBBBC0[v9];
  }
  *(_DWORD *)buf = 136446722;
  char v43 = "-[NWConcrete_nw_endpoint_resolver cancelWithHandler:forced:]";
  dispatch_workloop_t v44 = 2082;
  v45 = (void *)v20;
  os_log_type_t v46 = 2082;
  os_log_type_t v47 = "resolver";
  os_log_type_t v21 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  v40 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v22 = (os_log_s *)(id)gLogObj;
    os_log_type_t v23 = type;
    if (os_log_type_enabled(v22, type))
    {
      else {
        BOOL v24 = off_189BBBBC0[v9];
      }
      *(_DWORD *)buf = 136446722;
      char v43 = "-[NWConcrete_nw_endpoint_resolver cancelWithHandler:forced:]";
      dispatch_workloop_t v44 = 2082;
      v45 = (void *)v24;
      os_log_type_t v46 = 2082;
      os_log_type_t v47 = "resolver";
      _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
    }

    goto LABEL_44;
  }

  if (!v59)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    objc_super v29 = (os_log_s *)(id)gLogObj;
    id v36 = type;
    if (os_log_type_enabled(v29, type))
    {
      else {
        v37 = off_189BBBBC0[mode];
      }
      *(_DWORD *)buf = 136446722;
      v62 = "nw_endpoint_handler_cancel_read_write_requests";
      os_log_type_t v63 = 2082;
      os_log_type_t v64 = (void *)v37;
      os_log_type_t v65 = 2082;
      BOOL v66 = "flow";
      _os_log_impl( &dword_181A5C000,  v29,  v36,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
    }

    goto LABEL_43;
  }

  os_log_type_t v32 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  objc_super v29 = (os_log_s *)(id)gLogObj;
  uint64_t v33 = type;
  dispatch_workloop_t v34 = os_log_type_enabled(v29, type);
  if (!v32)
  {
    if (v34)
    {
      else {
        v38 = off_189BBBBC0[mode];
      }
      *(_DWORD *)buf = 136446722;
      v62 = "nw_endpoint_handler_cancel_read_write_requests";
      os_log_type_t v63 = 2082;
      os_log_type_t v64 = (void *)v38;
      os_log_type_t v65 = 2082;
      BOOL v66 = "flow";
      _os_log_impl( &dword_181A5C000,  v29,  v33,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
    }

    goto LABEL_43;
  }

  if (v34)
  {
    else {
      v35 = off_189BBBBC0[mode];
    }
    *(_DWORD *)buf = 136446978;
    v62 = "nw_endpoint_handler_cancel_read_write_requests";
    os_log_type_t v63 = 2082;
    os_log_type_t v64 = (void *)v35;
    os_log_type_t v65 = 2082;
    BOOL v66 = "flow";
    os_log_type_t v67 = 2082;
    v68 = v32;
    _os_log_impl( &dword_181A5C000,  v29,  v33,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
  }

  free(v32);
  if (v28) {
    goto LABEL_45;
  }
LABEL_46:
}

    os_log_type_t v14 = 0;
    goto LABEL_44;
  }

  if (result != 45)
  {
    os_log_type_t v12 = (result - 48);
    if (v7 != 1)
    {
      os_log_type_t v12 = 10LL * (result - 48) + (BYTE1(result) - 48);
      os_log_type_t v19 = v7 - 2;
      if (v19)
      {
        BOOL v20 = (unsigned __int8 *)v30 + 2;
        while (1)
        {
          os_log_type_t v21 = *v20 - 48;
          if (v21 > 9) {
            goto LABEL_31;
          }
          char v22 = 10 * v12;
          os_log_type_t v12 = v22 + v21;
          os_log_type_t v14 = 0;
          ++v20;
          if (!--v19) {
            goto LABEL_44;
          }
        }
      }
    }

    goto LABEL_43;
  }

  if (v7)
  {
    if (v7 != 1 && (BYTE1(result) - 48) <= 9u)
    {
      if (v7 == 2)
      {
        os_log_type_t v14 = 0;
        os_log_type_t v12 = -(uint64_t)(BYTE1(result) - 48);
        goto LABEL_44;
      }

      if ((BYTE2(result) - 48) <= 9u)
      {
        os_log_type_t v12 = -10LL * (BYTE1(result) - 48) - (BYTE2(result) - 48);
        os_log_type_t v23 = v7 - 3;
        if (!v23) {
          goto LABEL_43;
        }
        os_log_type_t v25 = (unsigned __int8 *)v30 + 3;
        while (1)
        {
          uint64_t v26 = *v25 - 48;
          if (v26 > 9) {
            break;
          }
          char v27 = 10 * v12;
          os_log_type_t v12 = v27 - v26;
          os_log_type_t v14 = 0;
          ++v25;
          if (!--v23) {
            goto LABEL_44;
          }
        }
      }
    }

      free(backtrace_string);
      goto LABEL_53;
    }

    os_log_type_t v17 = (os_log_s *)__nwlog_obj();
    os_log_type_t v18 = type;
    if (!os_log_type_enabled(v17, type)) {
      goto LABEL_53;
    }
    *(_DWORD *)buf = 136446210;
    char v27 = "nw_protocol_shoes_remove_input_handler";
    os_log_type_t v19 = "%{public}s called with null protocol";
LABEL_52:
    _os_log_impl(&dword_181A5C000, v17, v18, v19, buf, 0xCu);
LABEL_53:
    if (v16) {
      free(v16);
    }
    return 0LL;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v27 = "nw_protocol_shoes_remove_input_handler";
    int v16 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_53;
      }
      *(_DWORD *)buf = 136446210;
      char v27 = "nw_protocol_shoes_remove_input_handler";
      os_log_type_t v19 = "%{public}s called with null shoes";
      goto LABEL_52;
    }

    if (!v24)
    {
      os_log_type_t v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_53;
      }
      *(_DWORD *)buf = 136446210;
      char v27 = "nw_protocol_shoes_remove_input_handler";
      os_log_type_t v19 = "%{public}s called with null shoes, backtrace limit exceeded";
      goto LABEL_52;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v17 = (os_log_s *)__nwlog_obj();
    os_log_type_t v18 = type;
    os_log_type_t v23 = os_log_type_enabled(v17, type);
    if (backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446466;
        char v27 = "nw_protocol_shoes_remove_input_handler";
        os_log_type_t v28 = 2082;
        objc_super v29 = backtrace_string;
        char v22 = "%{public}s called with null shoes, dumping backtrace:%{public}s";
        goto LABEL_42;
      }

      goto LABEL_43;
    }

    if (!v23) {
      goto LABEL_53;
    }
    *(_DWORD *)buf = 136446210;
    char v27 = "nw_protocol_shoes_remove_input_handler";
    os_log_type_t v19 = "%{public}s called with null shoes, no backtrace";
    goto LABEL_52;
  }

  if (a2->output_handler == a1) {
    nw_protocol_set_output_handler((uint64_t)a2, 0LL);
  }
  if (a1->default_input_handler != a2) {
    return 0LL;
  }
  output_handler = a1->output_handler;
  if (output_handler) {
    ((void (*)(void))output_handler->callbacks->remove_input_handler)();
  }
  int v9 = handle[8];
  if (v9)
  {
    (*(void (**)(void))(*(void *)(v9 + 24) + 8LL))();
    handle[8] = 0LL;
  }

  os_log_type_t v10 = (void *)handle[10];
  if (v10)
  {
    nw_path_flow_registration_close(v10);
    id v11 = (void *)handle[10];
    if (v11)
    {
      os_release(v11);
      handle[10] = 0LL;
    }
  }

  os_log_type_t v12 = (void *)handle[9];
  if (v12)
  {
    os_release(v12);
    handle[9] = 0LL;
  }

  os_log_type_t v13 = (void *)handle[11];
  if (v13)
  {
    os_release(v13);
    handle[11] = 0LL;
  }

  os_log_type_t v14 = (void *)handle[13];
  if (v14)
  {
    os_release(v14);
    handle[13] = 0LL;
  }

  nw_protocol_set_input_handler((uint64_t)a1, 0LL);
  if (a3)
  {
    a1->handle = 0LL;
    id v15 = (void *)handle[14];
    if (v15) {
      xpc_release(v15);
    }
    free(handle);
  }

  return 1LL;
}

  __s = 0LL;
  v88 = 1;
  if (v22) {
LABEL_52:
  }
    LOWORD(v25) = v25 + 5;
LABEL_53:
  if (!(_WORD)v25)
  {
    v81 = v21;
    os_log_type_t v60 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v60, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    os_log_type_t v100 = "strict_calloc";
    BOOL v61 = (void *)_os_log_send_and_compose_impl();
    uint64_t result = __nwlog_abort((uint64_t)v61);
    if (result) {
      goto LABEL_151;
    }
    free(v61);
    os_log_type_t v21 = v81;
  }

  os_log_type_t v89 = v24;
  v35 = calloc(1uLL, (unsigned __int16)v25);
  if (v35)
  {
    goto LABEL_107;
  }

  v82 = v21;
  v62 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v62, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  os_log_type_t v100 = "strict_calloc";
  BOOL v101 = 2048;
  os_log_type_t v102 = 1LL;
  os_log_type_t v103 = 2048;
  __uint64_t v104 = (const char *)(unsigned __int16)v25;
  os_log_type_t v63 = (void *)_os_log_send_and_compose_impl();
  uint64_t result = __nwlog_abort((uint64_t)v63);
  if (!result)
  {
    free(v63);
    os_log_type_t v21 = v82;
    if (type != nw_endpoint_type_address)
    {
LABEL_56:
      if (type != nw_endpoint_type_bonjour_service)
      {
        if (type != nw_endpoint_type_host)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v52 = (os_log_s *)v3[131];
          if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            os_log_type_t v100 = "nw_shoes_create_request";
            BOOL v101 = 2082;
            os_log_type_t v102 = a1 + 151;
            os_log_type_t v103 = 1024;
            LODWORD(v104) = type;
            _os_log_impl( &dword_181A5C000,  v52,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s Invalid endpoint type %u",  buf,  0x1Cu);
          }

          if (!v35)
          {
LABEL_98:
            if (!v2)
            {
LABEL_100:
              _Block_object_dispose(&v95, 8);
              return (BOOL)v35;
            }

        free(v11);
        goto LABEL_44;
      }

      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_candidate_manager_create";
        _os_log_impl(&dword_181A5C000, v12, v20, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = out[0];
      if (os_log_type_enabled(v12, out[0]))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_candidate_manager_create";
        _os_log_impl( &dword_181A5C000,  v12,  v23,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_44;
  }

  if (v4)
  {
    if (*((_DWORD *)v3 + 38) == 4)
    {
      if (__nwlog_candidate_manager_log::onceToken != -1) {
        dispatch_once(&__nwlog_candidate_manager_log::onceToken, &__block_literal_global_21);
      }
      id v6 = (os_log_s *)(id)gcandidate_managerLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        uint64_t v7 = (char *)v3[1];
        *(_DWORD *)buf = 136446466;
        char v27 = "nw_candidate_manager_set_new_connection_handler";
        os_log_type_t v28 = 2048;
        objc_super v29 = v7;
        _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_ERROR,  "%{public}s [CM%zu] Cannot set new connection handler after cancel",  buf,  0x16u);
      }
    }

    else
    {
      int v8 = _Block_copy(v4);
      int v9 = (void *)v3[21];
      v3[21] = v8;
    }

    goto LABEL_10;
  }

  __nwlog_obj();
  os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v27 = "nw_candidate_manager_set_new_connection_handler";
  id v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v24 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    id v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      char v27 = "nw_candidate_manager_set_new_connection_handler";
      _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null handler", buf, 0xCu);
    }

    goto LABEL_43;
  }

  if (!v24)
  {
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      char v27 = "nw_candidate_manager_set_new_connection_handler";
      _os_log_impl( &dword_181A5C000,  v12,  v23,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_43;
  }

  os_log_type_t v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  BOOL v20 = type;
  os_log_type_t v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      char v27 = "nw_candidate_manager_set_new_connection_handler";
      _os_log_impl(&dword_181A5C000, v12, v20, "%{public}s called with null handler, no backtrace", buf, 0xCu);
    }

    goto LABEL_43;
  }

  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    char v27 = "nw_candidate_manager_set_new_connection_handler";
    os_log_type_t v28 = 2082;
    objc_super v29 = v19;
    _os_log_impl( &dword_181A5C000,  v12,  v20,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_45;
  }
LABEL_10:
}

    if (v20) {
      free(v20);
    }
    goto LABEL_6;
  }

  __nwlog_obj();
  id v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  dispatch_workloop_t v34 = "nw_candidate_manager_encode_ids_path";
  int v16 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  v31 = 0;
  if (__nwlog_fault(v16, &type, &v31))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        dispatch_workloop_t v34 = "nw_candidate_manager_encode_ids_path";
        _os_log_impl(&dword_181A5C000, v17, v18, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v31)
    {
      os_log_type_t v23 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v24 = type;
      os_log_type_t v25 = os_log_type_enabled(v17, type);
      if (v23)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          dispatch_workloop_t v34 = "nw_candidate_manager_encode_ids_path";
          v35 = 2082;
          id v36 = v23;
          _os_log_impl( &dword_181A5C000,  v17,  v24,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v23);
        goto LABEL_37;
      }

      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        dispatch_workloop_t v34 = "nw_candidate_manager_encode_ids_path";
        _os_log_impl(&dword_181A5C000, v17, v24, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      objc_super v29 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        dispatch_workloop_t v34 = "nw_candidate_manager_encode_ids_path";
        _os_log_impl( &dword_181A5C000,  v17,  v29,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

    if (!v26) {
      return 0LL;
    }
    os_log_type_t v32 = (char *)v26;
LABEL_45:
    free(v32);
    return 0LL;
  }

  *(void *)os_log_type_t type = 0LL;
  v58 = type;
  v59 = 0x3802000000LL;
  os_log_type_t v60 = __Block_byref_object_copy__3159;
  BOOL v61 = __Block_byref_object_dispose__3160;
  v62[0] = 0LL;
  v62[1] = v62;
  v53 = 0LL;
  BOOL v54 = &v53;
  v56 = 0;
  uint64_t v55 = 0x2000000000LL;
  id v49 = 0LL;
  v50 = &v49;
  os_log_type_t v52 = 0;
  v51 = 0x2000000000LL;
  os_log_type_t v14 = MEMORY[0x1895F87A8];
  *(void *)buf = MEMORY[0x1895F87A8];
  *(void *)&buf[8] = 0x40000000LL;
  *(void *)&buf[16] = ___ZL35__nw_protocol_fulfill_frame_requestP16nw_frame_array_sS0_bbjjjPjPb_block_invoke;
  char v79 = &unk_189BB6370;
  v80 = (char *)&v53;
  v81 = &v49;
  v85 = a5;
  v86 = a4;
  os_log_type_t v83 = a7;
  v84 = a1;
  os_log_type_t v87 = 1;
  v82 = type;
  v88 = 1;
  id v15 = *a1;
  do
  {
    if (!v15) {
      break;
    }
    int v16 = *(void *)(v15 + 32);
    os_log_type_t v17 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
    id v15 = v16;
  }

  while ((v17 & 1) != 0);
  os_log_type_t v18 = *((_DWORD *)v50 + 6);
  if (v18 < a3 && *((void *)v58 + 5) && !*a7)
  {
    if (gLogDatapath)
    {
      os_log_type_t v47 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
      {
        v48 = *((_DWORD *)v50 + 6);
        *(_DWORD *)__uint64_t v73 = 136446722;
        *(void *)&v73[4] = "__nw_protocol_fulfill_frame_request";
        *(_WORD *)&v73[12] = 1024;
        *(_DWORD *)&v73[14] = a3;
        *(_WORD *)&v73[18] = 1024;
        *(_DWORD *)&v73[20] = v48;
        _os_log_impl( &dword_181A5C000,  v47,  OS_LOG_TYPE_DEBUG,  "%{public}s could not meet minimum byte count %u with %u bytes from source array",  v73,  0x18u);
      }
    }

    os_log_type_t v19 = v58;
    BOOL v20 = v58 + 40;
    if (*a1)
    {
      **((void **)v58 + 6) = *a1;
      *(void *)(*a1 + 40LL) = *((void *)v19 + 6);
      *((void *)v19 + 6) = a1[1];
      *a1 = 0LL;
      a1[1] = a1;
    }

    if (*v20)
    {
      *(void *)a1[1] = *v20;
      *(void *)(*((void *)v19 + 5) + 40LL) = a1[1];
      a1[1] = *((void *)v19 + 6);
      *((void *)v19 + 5) = 0LL;
      *((void *)v19 + 6) = v20;
    }

    os_log_type_t v18 = 0;
    os_log_type_t v21 = v58;
    *((void *)v58 + 5) = 0LL;
    *((void *)v21 + 6) = v21 + 40;
    *((_DWORD *)v54 + 6) = 0;
    *((_DWORD *)v50 + 6) = 0;
  }

  if (a6) {
    *a6 = v18;
  }
  char v22 = *((void *)v58 + 5);
  if (v22)
  {
    *(void *)__uint64_t v73 = v14;
    *(void *)&v73[8] = 0x40000000LL;
    *(void *)&v73[16] = ___ZL35__nw_protocol_fulfill_frame_requestP16nw_frame_array_sS0_bbjjjPjPb_block_invoke_25;
    unint64_t v74 = &unk_189BB6398;
    v77 = 1;
    char v75 = type;
    __uint64_t v76 = a2;
    do
    {
      if (!v22) {
        break;
      }
      os_log_type_t v23 = *(void *)(v22 + 32);
      BOOL v24 = (*(uint64_t (**)(_BYTE *))&v73[16])(v73);
      char v22 = v23;
    }

    while ((v24 & 1) != 0);
  }

  if (gLogDatapath)
  {
    char v43 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
    {
      dispatch_workloop_t v44 = *((_DWORD *)v54 + 6);
      v45 = *((_DWORD *)v50 + 6);
      *(_DWORD *)os_log_type_t v63 = 136447234;
      os_log_type_t v64 = "__nw_protocol_fulfill_frame_request";
      os_log_type_t v65 = 1024;
      BOOL v66 = v44;
      os_log_type_t v67 = 1024;
      v68 = v45;
      v69 = 2048;
      v70 = a1;
      os_log_type_t v71 = 2048;
      v72 = a2;
      _os_log_impl( &dword_181A5C000,  v43,  OS_LOG_TYPE_DEBUG,  "%{public}s moved (%u frames, %u bytes) from %p to %p",  v63,  0x2Cu);
    }
  }

  os_log_type_t v25 = *((unsigned int *)v54 + 6);
  _Block_object_dispose(&v49, 8);
  _Block_object_dispose(&v53, 8);
  _Block_object_dispose(type, 8);
  return v25;
}

    free(backtrace_string);
    goto LABEL_61;
  }

  int v9 = (os_log_s *)__nwlog_obj();
  os_log_type_t v10 = type;
  if (os_log_type_enabled(v9, type))
  {
    *(_DWORD *)buf = 136446210;
    os_log_type_t v21 = "nw_protocol_plugin_name_add_input_handler";
    id v11 = "%{public}s called with null input_protocol";
    goto LABEL_60;
  }

        free(backtrace_string);
      }
    }

    if (nw_parameters_has_delegated_proc_uuid(v11))
    {
      if (!Connection || (*((_BYTE *)v1 + 346) & 0x20) != 0)
      {
LABEL_55:
        nw_parameters_get_e_proc_uuid(v11, handler);
        if ((*((_BYTE *)v1 + 346) & 0x20) != 0)
        {
LABEL_65:
          Connection = DNSServiceCreateDelegateConnection();
          if (!Connection || (*((_BYTE *)v1 + 346) & 0x20) != 0) {
            goto LABEL_76;
          }
          if (*v225)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            v37 = (os_log_s *)(id)gconnectionLogObj;
            if (!os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
              goto LABEL_75;
            }
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_resolver_instantiate_dns_connection_for_parameters";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = (char *)v1 + 256;
            *(_WORD *)&buf[22] = 1042;
            *(_DWORD *)&buf[24] = 16;
            *(_WORD *)&buf[28] = 2098;
            *(void *)&buf[30] = handler;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = Connection;
            v38 = v37;
            os_log_type_t v39 = "%{public}s [C%{public}s] DNSServiceCreateDelegateConnection(..., 0, %{public,uuid_t}.16P) failed: %d";
            v40 = 44;
          }

          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v37 = (os_log_s *)(id)gLogObj;
            if (!os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
            {
LABEL_75:

              goto LABEL_76;
            }

            os_log_type_t v41 = *((_DWORD *)v1 + 85);
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_resolver_instantiate_dns_connection_for_parameters";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v41;
            *(_WORD *)&buf[18] = 1042;
            *(_DWORD *)&buf[20] = 16;
            *(_WORD *)&buf[24] = 2098;
            *(void *)&buf[26] = handler;
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = Connection;
            v38 = v37;
            os_log_type_t v39 = "%{public}s [R%u] DNSServiceCreateDelegateConnection(..., 0, %{public,uuid_t}.16P) failed: %d";
            v40 = 40;
          }

          _os_log_impl(&dword_181A5C000, v38, OS_LOG_TYPE_ERROR, v39, buf, v40);
          goto LABEL_75;
        }

        if (*v225)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          os_log_type_t v32 = (os_log_s *)(id)gconnectionLogObj;
          if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_64;
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_resolver_instantiate_dns_connection_for_parameters";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = (char *)v1 + 256;
          uint64_t v33 = v32;
          dispatch_workloop_t v34 = "%{public}s [C%{public}s] Delegating DNS service to eUUID";
          v35 = 22;
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v32 = (os_log_s *)(id)gLogObj;
          if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
          {
LABEL_64:

            goto LABEL_65;
          }

          id v36 = *((_DWORD *)v1 + 85);
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_resolver_instantiate_dns_connection_for_parameters";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v36;
          uint64_t v33 = v32;
          dispatch_workloop_t v34 = "%{public}s [R%u] Delegating DNS service to eUUID";
          v35 = 18;
        }

        _os_log_impl(&dword_181A5C000, v33, OS_LOG_TYPE_DEBUG, v34, buf, v35);
        goto LABEL_64;
      }

      if (*v225)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v25 = (os_log_s *)(id)gconnectionLogObj;
        if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
          goto LABEL_54;
        }
        string_for_dns_service_error = nwlog_get_string_for_dns_service_error(Connection);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_resolver_instantiate_dns_connection_for_parameters";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = (char *)v1 + 256;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = pid;
        *(_WORD *)&buf[28] = 2082;
        *(void *)&buf[30] = string_for_dns_service_error;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&buf[40] = Connection;
        char v27 = v25;
        os_log_type_t v28 = "%{public}s [C%{public}s] Delegating DNS service to PID %d returned failure %{public}s(%d), falling back to eUUID";
        objc_super v29 = 44;
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v25 = (os_log_s *)(id)gLogObj;
        if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
LABEL_54:

          goto LABEL_55;
        }

        os_log_type_t v30 = *((_DWORD *)v1 + 85);
        v31 = nwlog_get_string_for_dns_service_error(Connection);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_resolver_instantiate_dns_connection_for_parameters";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v30;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = pid;
        *(_WORD *)&buf[24] = 2082;
        *(void *)&buf[26] = v31;
        *(_WORD *)&buf[34] = 1024;
        *(_DWORD *)&buf[36] = Connection;
        char v27 = v25;
        os_log_type_t v28 = "%{public}s [R%u] Delegating DNS service to PID %d returned failure %{public}s(%d), falling back to eUUID";
        objc_super v29 = 40;
      }

      _os_log_impl(&dword_181A5C000, v27, OS_LOG_TYPE_ERROR, v28, buf, v29);
      goto LABEL_54;
    }

    os_unfair_lock_lock((os_unfair_lock_t)v15 + 3);
    if (!a1 || v15[9] != a1)
    {
      if ((*((_BYTE *)v15 + 346) & 0x20) != 0)
      {
LABEL_55:
        os_unfair_lock_unlock((os_unfair_lock_t)v15 + 3);
        goto LABEL_56;
      }

      if (*((_BYTE *)v15 + 256))
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v30 = (os_log_s *)(id)gconnectionLogObj;
        if (!os_log_type_enabled(v30, OS_LOG_TYPE_INFO)) {
          goto LABEL_54;
        }
        v31 = v15[9];
        *(_DWORD *)buf = 136447234;
        BOOL v66 = "nw_resolver_host_resolve_callback";
        os_log_type_t v67 = 2082;
        *(void *)v68 = v15 + 32;
        *(_WORD *)&v68[8] = 2048;
        *(void *)&v68[10] = a1;
        *(_WORD *)&v68[18] = 2048;
        *(void *)&v68[20] = v15;
        *(_WORD *)&v68[28] = 2048;
        *(void *)&v68[30] = v31;
        os_log_type_t v32 = "%{public}s [C%{public}s] skipped, service %p, resolver %p -> %p";
        uint64_t v33 = v30;
        dispatch_workloop_t v34 = 52;
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v30 = (os_log_s *)(id)gLogObj;
        if (!os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
        {
LABEL_54:

          goto LABEL_55;
        }

        v35 = *((_DWORD *)v15 + 85);
        id v36 = v15[9];
        *(_DWORD *)buf = 136447234;
        BOOL v66 = "nw_resolver_host_resolve_callback";
        os_log_type_t v67 = 1024;
        *(_DWORD *)v68 = v35;
        *(_WORD *)&v68[4] = 2048;
        *(void *)&v68[6] = a1;
        *(_WORD *)&v68[14] = 2048;
        *(void *)&v68[16] = v15;
        *(_WORD *)&v68[24] = 2048;
        *(void *)&v68[26] = v36;
        os_log_type_t v32 = "%{public}s [R%u] skipped, service %p, resolver %p -> %p";
        uint64_t v33 = v30;
        dispatch_workloop_t v34 = 48;
      }

      _os_log_impl(&dword_181A5C000, v33, OS_LOG_TYPE_INFO, v32, buf, v34);
      goto LABEL_54;
    }

    nw_resolver_update_flags_locked((NWConcrete_nw_resolver *)v15, 0LL, a2, a4, a6, 0, 0);
    if (a4)
    {
      if (a4 == -65569 && *((_DWORD *)v15 + 2) != 2)
      {
        if ((*((_BYTE *)v15 + 346) & 0x20) != 0)
        {
LABEL_79:
          nw_resolver_restart_dns_service_locked((NWConcrete_nw_resolver *)v15);
          goto LABEL_55;
        }

        if (*((_BYTE *)v15 + 256))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          v37 = (os_log_s *)(id)gconnectionLogObj;
          if (!os_log_type_enabled(v37, OS_LOG_TYPE_INFO)) {
            goto LABEL_78;
          }
          *(_DWORD *)buf = 136446722;
          BOOL v66 = "nw_resolver_host_resolve_callback";
          os_log_type_t v67 = 2082;
          *(void *)v68 = v15 + 32;
          *(_WORD *)&v68[8] = 2048;
          *(void *)&v68[10] = v15;
          v38 = "%{public}s [C%{public}s] restarting resolver %p, defunct connection";
          os_log_type_t v39 = v37;
          v40 = 32;
        }

        else
        {
          __nwlog_obj();
          v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
          {
LABEL_78:

            goto LABEL_79;
          }

          dispatch_workloop_t v44 = *((_DWORD *)v15 + 85);
          *(_DWORD *)buf = 136446722;
          BOOL v66 = "nw_resolver_host_resolve_callback";
          os_log_type_t v67 = 1024;
          *(_DWORD *)v68 = v44;
          *(_WORD *)&v68[4] = 2048;
          *(void *)&v68[6] = v15;
          v38 = "%{public}s [R%u] restarting resolver %p, defunct connection";
          os_log_type_t v39 = v37;
          v40 = 28;
        }

        _os_log_impl(&dword_181A5C000, v39, OS_LOG_TYPE_INFO, v38, buf, v40);
        goto LABEL_78;
      }
    }

    else if (a6)
    {
      os_log_type_t v41 = a6->sa_len;
      if (v41 <= 0x80)
      {
        BOOL v42 = a6->sa_family;
        if (v42 == 30 || v42 == 2)
        {
          if ((v41 & 0x80u) == 0LL) {
            char v43 = 128 - v41;
          }
          else {
            char v43 = 0LL;
          }
          bzero(&buf[v41], v43);
          memcpy(buf, a6, v41);
          *(_WORD *)&buf[2] = __rev16(nw_endpoint_get_port((nw_endpoint_t)v15[3]));
          if ((a2 & 2) != 0)
          {
            address = nw_endpoint_create_address((const sockaddr *)buf);
            nw_endpoint_set_parent_endpoint(address, v15[3], 0);
            v70[0] = 0LL;
            ValidationData = (const void *)DNSServiceGetValidationData();
            if (ValidationData && v70[0]) {
              nw_endpoint_set_signature(address, ValidationData, v70[0]);
            }
            if (!a3
              || (os_log_type_t v47 = nw_endpoint_get_address(address), !nw_resolver_should_scope_address(v47))
              || nw_resolver_set_interface_on_endpoint(v15, a3, address))
            {
              v61[0] = MEMORY[0x1895F87A8];
              v61[1] = 3221225472LL;
              v61[2] = ___ZL33nw_resolver_host_resolve_callbackP16_DNSServiceRef_tjjiPKcPK8sockaddrjPv_block_invoke;
              v61[3] = &__block_descriptor_45_e63_B24__0__NSObject_OS_nw_endpoint__8__NSObject_OS_nw_endpoint__16l;
              v61[4] = buf;
              v62 = a3;
              os_log_type_t v63 = (a2 & 2) >> 1;
              nw_resolver_insert_endpoint_locked(v15, address, v61);
            }
          }

          else
          {
            v58[0] = MEMORY[0x1895F87A8];
            v58[1] = 3221225472LL;
            v58[2] = ___ZL33nw_resolver_host_resolve_callbackP16_DNSServiceRef_tjjiPKcPK8sockaddrjPv_block_invoke_2;
            v58[3] = &__block_descriptor_45_e63_B24__0__NSObject_OS_nw_endpoint__8__NSObject_OS_nw_endpoint__16l;
            v58[4] = buf;
            v59 = a3;
            os_log_type_t v60 = 0;
            nw_resolver_remove_endpoint_locked(v15, v58);
          }
        }
      }
    }

    if ((a2 & 1) == 0) {
      nw_resolver_update_status_locked(v15, 0LL);
    }
    goto LABEL_55;
  }

  __nwlog_obj();
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v66 = "nw_resolver_host_resolve_callback";
  id v49 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v70[0]) = 16;
  os_log_type_t v64 = 0;
  if (__nwlog_fault(v49, v70, &v64))
  {
    if (LOBYTE(v70[0]) == 17)
    {
      __nwlog_obj();
      v50 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v51 = v70[0];
      if (os_log_type_enabled(v50, v70[0]))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v66 = "nw_resolver_host_resolve_callback";
        _os_log_impl(&dword_181A5C000, v50, v51, "%{public}s called with null resolver", buf, 0xCu);
      }
    }

    else if (v64)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v50 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v53 = v70[0];
      BOOL v54 = os_log_type_enabled(v50, v70[0]);
      if (backtrace_string)
      {
        if (v54)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v66 = "nw_resolver_host_resolve_callback";
          os_log_type_t v67 = 2082;
          *(void *)v68 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v50,  v53,  "%{public}s called with null resolver, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_107;
      }

      if (v54)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v66 = "nw_resolver_host_resolve_callback";
        _os_log_impl(&dword_181A5C000, v50, v53, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v50 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v55 = v70[0];
      if (os_log_type_enabled(v50, v70[0]))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v66 = "nw_resolver_host_resolve_callback";
        _os_log_impl( &dword_181A5C000,  v50,  v55,  "%{public}s called with null resolver, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

        goto LABEL_50;
      }

      if (!v36)
      {
        __nwlog_obj();
        os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        dispatch_workloop_t v34 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v39 = "nw_connection_group_create_request";
          _os_log_impl( &dword_181A5C000,  v21,  v34,  "%{public}s called with null completion, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_43;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v31 = type;
      os_log_type_t v32 = os_log_type_enabled(v28, type);
      if (backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v39 = "nw_connection_group_create_request";
          v40 = 2082;
          *(void *)os_log_type_t v41 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v28,  v31,  "%{public}s called with null completion, dumping backtrace:%{public}s",  buf,  0x16u);
        }

      free(v35);
      goto LABEL_44;
    }

    goto LABEL_25;
  }

LABEL_44:
      if (v14) {
        free(v14);
      }
      return 0LL;
    }

    if (!v29)
    {
      __nwlog_obj();
      os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v28 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v33 = "-[NWConcrete_nw_ws_response initWithStatus:selectedProtocol:]";
        _os_log_impl(&dword_181A5C000, v18, v28, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
      }

      goto LABEL_43;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v25 = type;
    uint64_t v26 = os_log_type_enabled(v18, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v33 = "-[NWConcrete_nw_ws_response initWithStatus:selectedProtocol:]";
        _os_log_impl(&dword_181A5C000, v18, v25, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
      }

      goto LABEL_43;
    }

    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v33 = "-[NWConcrete_nw_ws_response initWithStatus:selectedProtocol:]";
      dispatch_workloop_t v34 = 2082;
      v35 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v18,  v25,  "%{public}s [super init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
    }

LABEL_31:
    free(backtrace_string);
    goto LABEL_44;
  }

  id v6 = v5;
  *((_DWORD *)v5 + 2) = status;
  if (!selected_subprotocol)
  {
LABEL_7:
    int v8 = xpc_array_create(0LL, 0LL);
    int v9 = (void *)*((void *)v6 + 3);
    *((void *)v6 + 3) = v8;

    os_log_type_t v10 = xpc_array_create(0LL, 0LL);
    id v11 = (void *)*((void *)v6 + 4);
    *((void *)v6 + 4) = v10;

    return v6;
  }

  uint64_t v7 = strdup(selected_subprotocol);
  if (v7)
  {
LABEL_6:
    *((void *)v6 + 2) = v7;
    goto LABEL_7;
  }

  __nwlog_obj();
  BOOL v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  uint64_t v33 = "strict_strdup";
  os_log_type_t v21 = (void *)_os_log_send_and_compose_impl();

  uint64_t result = (nw_ws_response_t)__nwlog_abort((uint64_t)v21);
  if (!(_DWORD)result)
  {
    free(v21);
    goto LABEL_6;
  }

  __break(1u);
  return result;
}

    if (v18) {
      free(v18);
    }
    goto LABEL_22;
  }

  v8();
LABEL_22:
  if ((v14 & 1) == 0) {
    nw::release_if_needed<nw_protocol *>(&v29);
  }
  if (v10 == &nw_protocol_ref_counted_handle) {
    nw::release_if_needed<nw_protocol *>((uint64_t *)&v31);
  }
  return 1LL;
}

  *(void *)buf = v8;
  buf[8] = v12;
  uint64_t v26 = v10();
  if (v11 == &nw_protocol_ref_counted_handle) {
    nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
  }
LABEL_51:

  return v26;
}

    external = external;
    goto LABEL_44;
  }

  if (!a2) {
    goto LABEL_34;
  }
  buffer_manager_with_context = nw_frame_get_buffer_manager_with_context( *(void **)&v6->protocol_outbound_data_limit,  a2);
  if (buffer_manager_with_context)
  {
    id v11 = buffer_manager_with_context;
    os_log_type_t v12 = nw_mem_buffer_allocate(buffer_manager_with_context);
    if (v12)
    {
      os_log_type_t v13 = v12;
LABEL_35:
      os_log_type_t v30 = v6;
      if (data_from_pool)
      {
        nw_frame_reset((uint64_t)data_from_pool, v13, a2, (uint64_t)nw_protocol_outbound_data_finalizer, (uint64_t)v30);
        external = data_from_pool;
        goto LABEL_38;
      }

      external = (nw_frame **)nw_frame_create(16, v13, a2, (uint64_t)nw_protocol_outbound_data_finalizer, (uint64_t)v30);
      if (external)
      {
LABEL_38:
        if (v11)
        {
          external[13] = (nw_frame *)v11;
        }

        else if (v13)
        {
          *((_WORD *)external + 102) |= 1u;
        }

        if (data_from_pool) {
          goto LABEL_44;
        }
        goto LABEL_43;
      }

      __nwlog_obj();
      os_log_type_t v32 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      BOOL v42 = "nw_protocol_create_outbound_data";
      int v16 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      os_log_type_t v39 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v33 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v42 = "nw_protocol_create_outbound_data";
          _os_log_impl(&dword_181A5C000, v17, v33, "%{public}s nw_frame_create failed", buf, 0xCu);
        }

        goto LABEL_74;
      }

      if (!v39)
      {
        __nwlog_obj();
        os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v38 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v42 = "nw_protocol_create_outbound_data";
          _os_log_impl( &dword_181A5C000,  v17,  v38,  "%{public}s nw_frame_create failed, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_74;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      dispatch_workloop_t v34 = type;
      v35 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (v35)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v42 = "nw_protocol_create_outbound_data";
          _os_log_impl(&dword_181A5C000, v17, v34, "%{public}s nw_frame_create failed, no backtrace", buf, 0xCu);
        }

        goto LABEL_74;
      }

      if (v35)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v42 = "nw_protocol_create_outbound_data";
        char v43 = 2082;
        dispatch_workloop_t v44 = (size_t)backtrace_string;
        _os_log_impl( &dword_181A5C000,  v17,  v34,  "%{public}s nw_frame_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
      }

    if (v23) {
      free(v23);
    }
    goto LABEL_22;
  }

  if (*(_BYTE *)(a1 + 56))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v9 = (os_log_s *)(id)gLogObj;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_12;
    }
    os_log_type_t v10 = *(void *)(a1 + 32);
    id v11 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 136446722;
    os_log_type_t v39 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
    v40 = 2114;
    os_log_type_t v41 = v10;
    BOOL v42 = 2048;
    v43[0] = v11;
    os_log_type_t v12 = "%{public}s %{public}@ wrote %zu bytes is_complete into inner connection";
    os_log_type_t v13 = v9;
    os_log_type_t v14 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_11;
  }

  if (!gLogDatapath)
  {
    *(void *)(v4 + 208) += *(void *)(a1 + 48);
    int v16 = *(void *)(a1 + 32);
    goto LABEL_25;
  }

  __nwlog_obj();
  int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    dispatch_workloop_t v34 = *(void *)(a1 + 32);
    v35 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 136446722;
    os_log_type_t v39 = "nw_socks5_connection_outer_connection_read_on_queue_block_invoke";
    v40 = 2114;
    os_log_type_t v41 = v34;
    BOOL v42 = 2048;
    v43[0] = v35;
    os_log_type_t v12 = "%{public}s %{public}@ wrote %zu bytes not_complete into inner connection";
    os_log_type_t v13 = v9;
    os_log_type_t v14 = OS_LOG_TYPE_DEBUG;
LABEL_11:
    _os_log_impl(&dword_181A5C000, v13, v14, v12, buf, 0x20u);
  }

    goto LABEL_44;
  }

  if (!v26)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v16 = (os_log_s *)(id)gLogObj;
    os_log_type_t v23 = type;
    if (os_log_type_enabled(v16, type))
    {
      if (mode > 5) {
        BOOL v24 = "unknown-mode";
      }
      else {
        BOOL v24 = off_189BBBBC0[mode];
      }
      *(_DWORD *)buf = 136446722;
      objc_super v29 = "nw_endpoint_flow_reinitialize_protocol_for_handling_requests";
      os_log_type_t v30 = 2082;
      v31 = (void *)v24;
      os_log_type_t v32 = 2082;
      uint64_t v33 = "flow";
      _os_log_impl( &dword_181A5C000,  v16,  v23,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
    }

    goto LABEL_43;
  }

  os_log_type_t v19 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  int v16 = (os_log_s *)(id)gLogObj;
  BOOL v20 = type;
  os_log_type_t v21 = os_log_type_enabled(v16, type);
  if (!v19)
  {
    if (v21)
    {
      if (mode > 5) {
        os_log_type_t v25 = "unknown-mode";
      }
      else {
        os_log_type_t v25 = off_189BBBBC0[mode];
      }
      *(_DWORD *)buf = 136446722;
      objc_super v29 = "nw_endpoint_flow_reinitialize_protocol_for_handling_requests";
      os_log_type_t v30 = 2082;
      v31 = (void *)v25;
      os_log_type_t v32 = 2082;
      uint64_t v33 = "flow";
      _os_log_impl( &dword_181A5C000,  v16,  v20,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
    }

    goto LABEL_43;
  }

  if (v21)
  {
    if (mode > 5) {
      char v22 = "unknown-mode";
    }
    else {
      char v22 = off_189BBBBC0[mode];
    }
    *(_DWORD *)buf = 136446978;
    objc_super v29 = "nw_endpoint_flow_reinitialize_protocol_for_handling_requests";
    os_log_type_t v30 = 2082;
    v31 = (void *)v22;
    os_log_type_t v32 = 2082;
    uint64_t v33 = "flow";
    dispatch_workloop_t v34 = 2082;
    v35 = v19;
    _os_log_impl( &dword_181A5C000,  v16,  v20,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
  }

  free(v19);
  if (v15) {
    goto LABEL_45;
  }
LABEL_46:
}
      }
    }

    else
    {
      if (v36 && !nw_path_parameters_get_logging_disabled(*(void *)(v36 + 104)))
      {
        if (__nwlog_listener_log::onceToken != -1) {
          dispatch_once(&__nwlog_listener_log::onceToken, &__block_literal_global_33_44340);
        }
        v51 = (os_log_s *)(id)glistenerLogObj;
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
        {
          os_log_type_t v52 = nw_listener_get_id_string(v26);
          v53 = (uint64_t (*)(uint64_t, uint64_t))v107[5];
          BOOL v54 = *((void *)v1 + 26);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_listener_reconcile_inboxes_on_queue";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v52;
          *(_WORD *)&buf[22] = 2114;
          __int16 v113 = v53;
          *(_WORD *)v114 = 2114;
          *(void *)&v114[2] = v54;
          _os_log_impl( &dword_181A5C000,  v51,  OS_LOG_TYPE_DEFAULT,  "%{public}s [%{public}s] Started inbox %{public}@ with parameters %{public}@",  buf,  0x2Au);
        }
      }

      nw_array_append(*v16, (void *)v107[5]);
    }
  }

  if (v27) {
    free(v27);
  }
  os_log_type_t v21 = 0LL;
LABEL_26:

  return v21;
}

  return v6;
}

    free(v15);
    if (!v7) {
      return;
    }
LABEL_63:
    free(v7);
    return;
  }

  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = a1;
  *(void *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = a3;
  *(_DWORD *)(a1 + 32) = a4;
  *(_DWORD *)(a1 + 36) = a5;
  if (gLogDatapath)
  {
    id v11 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      os_log_type_t v12 = *(void *)(a2 + 16);
      *(_DWORD *)buf = 136446722;
      os_log_type_t v23 = "nw_frame_cache_init";
      BOOL v24 = 2048;
      os_log_type_t v25 = (char *)a1;
      uint64_t v26 = 2080;
      char v27 = v12;
      _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_DEBUG,  "%{public}s initialized frame cache %p for protocol %s",  buf,  0x20u);
    }
  }

  if (v20) {
    free(v20);
  }
}

        if ((*(_BYTE *)(a1 + 529) & 1) != 0) {
          goto LABEL_266;
        }
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
        }
        id v15 = gprivacy_proxyLogObj;
        if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
          goto LABEL_266;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = a1 + 531;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = " ";
        *(_WORD *)&buf[22] = 2048;
        os_log_type_t v102 = (const char *)capsule_type;
        int v8 = "%{public}s%sUnknown capsule type %llx";
LABEL_48:
        int v9 = (os_log_s *)v15;
LABEL_60:
        os_log_type_t v10 = OS_LOG_TYPE_ERROR;
LABEL_61:
        _os_log_impl(&dword_181A5C000, v9, v10, v8, buf, 0x20u);
        goto LABEL_266;
      }

      if ((*(_BYTE *)(a1 + 529) & 1) == 0)
      {
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
        }
        os_log_type_t v13 = (os_log_s *)gprivacy_proxyLogObj;
        if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_masque_handle_capsule";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = a1 + 531;
          *(_WORD *)&buf[22] = 2080;
          os_log_type_t v102 = " ";
          _os_log_impl( &dword_181A5C000,  v13,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%sReceived ACK_DEMUX capsule",  buf,  0x20u);
        }
      }

      os_log_type_t v14 = *(void **)(a1 + 448);
      if (v14)
      {
        if (!dispatch_data_get_size(v6))
        {
          if ((*(_BYTE *)(a1 + 529) & 1) != 0) {
            goto LABEL_266;
          }
          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
          }
          os_log_type_t v18 = gprivacy_proxyLogObj;
          if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
            goto LABEL_266;
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = a1 + 531;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = " ";
          *(_WORD *)&buf[22] = 2048;
          os_log_type_t v102 = 0LL;
          int v8 = "%{public}s%sReceived short ACK_DEMUX_PATTERN capsule (%zu bytes)";
LABEL_59:
          int v9 = (os_log_s *)v18;
          goto LABEL_60;
        }

        *(void *)&length[0].sa_len = 0LL;
        *(void *)&length[0].sa_data[6] = length;
        length[1] = (sockaddr)0x2000000000uLL;
        v98[0] = MEMORY[0x1895F87A8];
        v98[1] = 0x40000000LL;
        v98[2] = ___ZL24nw_masque_handle_capsuleP9nw_masqueP20nw_protocol_metadata_block_invoke;
        v98[3] = &unk_189BBA8C8;
        v98[4] = length;
        v98[5] = v6;
        v98[6] = a1;
        *(void *)buf = MEMORY[0x1895F87A8];
        *(void *)&buf[8] = 0x40000000LL;
        *(void *)&buf[16] = __nw_demux_options_enumerate_patterns_block_invoke;
        os_log_type_t v102 = (const char *)&unk_189BB9D20;
        *(void *)&os_log_type_t v103 = v98;
        nw_protocol_options_access_handle(v14, buf);
        *(_DWORD *)(a1 + 527) |= 0x100400u;
        _Block_object_dispose(length, 8);
LABEL_266:
        dispatch_release(v6);
        goto LABEL_267;
      }

      if ((*(_BYTE *)(a1 + 529) & 1) != 0) {
        goto LABEL_266;
      }
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
      }
      int v16 = (os_log_s *)gprivacy_proxyLogObj;
      if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
        goto LABEL_266;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = a1 + 531;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = " ";
      os_log_type_t v17 = "%{public}s%sReceived ACK_DEMUX_PATTERN capsule without a stored client demux options, ignoring";
LABEL_252:
      _os_log_impl(&dword_181A5C000, v16, OS_LOG_TYPE_ERROR, v17, buf, 0x16u);
      goto LABEL_266;
    }

    switch(capsule_type)
    {
      case 16770048LL:
        if ((*(_BYTE *)(a1 + 529) & 1) != 0) {
          goto LABEL_27;
        }
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
        }
        id v11 = (os_log_s *)gprivacy_proxyLogObj;
        if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
          goto LABEL_27;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = a1 + 531;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = " ";
        os_log_type_t v12 = "%{public}s%sReceived unexpected REGISTER_CLIENT_CID capsule";
        goto LABEL_26;
      case 16770049LL:
        if ((*(_BYTE *)(a1 + 529) & 1) != 0) {
          goto LABEL_27;
        }
        if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
        }
        id v11 = (os_log_s *)gprivacy_proxyLogObj;
        if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
          goto LABEL_27;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = a1 + 531;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = " ";
        os_log_type_t v12 = "%{public}s%sReceived unexpected REGISTER_TARGET_CID capsule";
        goto LABEL_26;
      case 16770050LL:
        os_log_type_t v19 = *(dispatch_data_s **)(a1 + 384);
        if (!v19)
        {
          if ((*(_BYTE *)(a1 + 529) & 1) == 0)
          {
            if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
              dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
            }
            int v16 = (os_log_s *)gprivacy_proxyLogObj;
            if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = a1 + 531;
              *(_WORD *)&buf[12] = 2080;
              *(void *)&buf[14] = " ";
              os_log_type_t v17 = "%{public}s%sReceived ACK_CLIENT_CID capsule without a stored client CID, ignoring";
              goto LABEL_252;
            }
          }

          goto LABEL_266;
        }

        if (v19 != v5)
        {
          size = dispatch_data_get_size(*(dispatch_data_t *)(a1 + 384));
          if (size == dispatch_data_get_size(v6))
          {
            *(void *)&length[0].sa_len = 0LL;
            *(void *)&length[0].sa_data[6] = length;
            *(void *)&length[1].sa_len = 0x2000000000LL;
            length[1].sa_data[6] = 1;
            *(void *)buf = MEMORY[0x1895F87A8];
            *(void *)&buf[8] = 0x40000000LL;
            *(void *)&buf[16] = __nw_dispatch_data_is_equal_block_invoke;
            os_log_type_t v102 = (const char *)&unk_189BBF650;
            *(void *)&os_log_type_t v103 = length;
            *((void *)&v103 + 1) = v6;
            dispatch_data_apply(v19, buf);
            os_log_type_t v21 = *(unsigned __int8 *)(*(void *)&length[0].sa_data[6] + 24LL);
            _Block_object_dispose(length, 8);
            char v22 = (_DWORD *)(a1 + 527);
            os_log_type_t v23 = *(_DWORD *)(a1 + 527);
            if (v21)
            {
              if ((v23 & 0x10000) != 0) {
                goto LABEL_219;
              }
              goto LABEL_215;
            }

            if ((v23 & 0x10000) != 0) {
              goto LABEL_266;
            }
          }

          else if ((*(_BYTE *)(a1 + 529) & 1) != 0)
          {
            goto LABEL_266;
          }

          if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
          }
          int v16 = (os_log_s *)gprivacy_proxyLogObj;
          if (!os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR)) {
            goto LABEL_266;
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = a1 + 531;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = " ";
          os_log_type_t v17 = "%{public}s%sReceived ACK_CLIENT_CID capsule with mismatched CID, ignoring";
          goto LABEL_252;
        }

        char v22 = (_DWORD *)(a1 + 527);
        if ((*(_BYTE *)(a1 + 529) & 1) != 0)
        {
LABEL_219:
          *v22 |= 0x80u;
          goto LABEL_266;
        }

      goto LABEL_44;
    }

    if (!v33)
    {
      __nwlog_obj();
      os_log_type_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v24 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        id v36 = "nw_endpoint_handler_copy_parent";
        _os_log_impl( &dword_181A5C000,  v19,  v24,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_43;
    }

    os_log_type_t v21 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    char v22 = type;
    os_log_type_t v23 = os_log_type_enabled(v19, type);
    if (!v21)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        id v36 = "nw_endpoint_handler_copy_parent";
        _os_log_impl(&dword_181A5C000, v19, v22, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }

      goto LABEL_43;
    }

    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      id v36 = "nw_endpoint_handler_copy_parent";
      v37 = 2082;
      v38 = v21;
      _os_log_impl( &dword_181A5C000,  v19,  v22,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v21);
  }

            free(v34);
            goto LABEL_44;
          }

          __nwlog_obj();
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          os_log_type_t v83 = "nw_pac_resolver_create_with_url";
          v53 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          v80 = 0;
          if (__nwlog_fault(v53, &type, &v80))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              BOOL v54 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              BOOL v57 = type;
              if (os_log_type_enabled(v54, type))
              {
                *(_DWORD *)buf = 136446210;
                os_log_type_t v83 = "nw_pac_resolver_create_with_url";
                _os_log_impl(&dword_181A5C000, v54, v57, "%{public}s called with null logging_id_str", buf, 0xCu);
              }

      goto LABEL_17;
    }

    os_log_type_t v28 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v26 = type;
    objc_super v29 = os_log_type_enabled(v25, type);
    if (!v28)
    {
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        id v36 = "tcp_connection_read_buffer";
        char v27 = "%{public}s called with null handler, no backtrace";
        goto LABEL_42;
      }

      goto LABEL_43;
    }

    if (v29)
    {
      *(_DWORD *)buf = 136446466;
      id v36 = "tcp_connection_read_buffer";
      v37 = 2082;
      v38 = v28;
      _os_log_impl( &dword_181A5C000,  v25,  v26,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v28);
    if (v14) {
      goto LABEL_18;
    }
  }

  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v18 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      id v36 = "tcp_connection_read_buffer";
      _os_log_impl( &dword_181A5C000,  v18,  OS_LOG_TYPE_ERROR,  "%{public}s API Misuse: Function must be called after tcp_connection_start",  buf,  0xCu);
    }
  }

      goto LABEL_17;
    }

    os_log_type_t v25 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    char v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v23 = type;
    uint64_t v26 = os_log_type_enabled(v22, type);
    if (!v25)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v33 = "tcp_connection_write";
        BOOL v24 = "%{public}s called with null handler, no backtrace";
        goto LABEL_42;
      }

      goto LABEL_43;
    }

    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v33 = "tcp_connection_write";
      dispatch_workloop_t v34 = 2082;
      v35 = v25;
      _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v25);
    if (v11) {
      goto LABEL_18;
    }
  }

  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v15 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v33 = "tcp_connection_write";
      _os_log_impl( &dword_181A5C000,  v15,  OS_LOG_TYPE_ERROR,  "%{public}s API Misuse: Function must be called after tcp_connection_start",  buf,  0xCu);
    }
  }

    goto LABEL_17;
  }

  os_log_type_t v21 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v19 = type;
  char v22 = os_log_type_enabled(v18, type);
  if (!v21)
  {
    if (v22)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v26 = "tcp_connection_accept";
      BOOL v20 = "%{public}s called with null queue, no backtrace";
      goto LABEL_42;
    }

    goto LABEL_43;
  }

  if (v22)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v26 = "tcp_connection_accept";
    char v27 = 2082;
    os_log_type_t v28 = v21;
    _os_log_impl( &dword_181A5C000,  v18,  v19,  "%{public}s called with null queue, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v21);
  if (v7) {
    goto LABEL_18;
  }
LABEL_19:
}

      free(v15);
      if (!v8) {
        return;
      }
LABEL_61:
      free(v8);
      return;
    }

    int v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_60;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v23 = "nw_protocol_http2_transport_output_finished";
    id v11 = "%{public}s called with null http2_transport";
LABEL_59:
    _os_log_impl(&dword_181A5C000, v9, v10, v11, buf, 0xCu);
    goto LABEL_60;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v23 = "nw_protocol_http2_transport_output_finished";
    int v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v20 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_60;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v23 = "nw_protocol_http2_transport_output_finished";
      id v11 = "%{public}s called with null other_protocol";
      goto LABEL_59;
    }

    if (!v20)
    {
      int v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_60;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v23 = "nw_protocol_http2_transport_output_finished";
      id v11 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      goto LABEL_59;
    }

    id v15 = (char *)__nw_create_backtrace_string();
    int v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    os_log_type_t v18 = os_log_type_enabled(v9, type);
    if (!v15)
    {
      if (!v18) {
        goto LABEL_60;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v23 = "nw_protocol_http2_transport_output_finished";
      id v11 = "%{public}s called with null other_protocol, no backtrace";
      goto LABEL_59;
    }

    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v23 = "nw_protocol_http2_transport_output_finished";
      BOOL v24 = 2082;
      os_log_type_t v25 = v15;
      os_log_type_t v17 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_42;
    }

    goto LABEL_43;
  }

  if (gLogDatapath)
  {
    os_log_type_t v12 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v23 = "nw_protocol_http2_transport_output_finished";
      BOOL v24 = 2082;
      os_log_type_t v25 = handle + 205;
      _os_log_impl(&dword_181A5C000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }

  output_handler_context = a2->output_handler_context;
  if (!output_handler_context)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (os_log_s *)gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)buf = 136446466;
    os_log_type_t v23 = "nw_protocol_http2_transport_output_finished";
    BOOL v24 = 2082;
    os_log_type_t v25 = handle + 205;
    uint64_t v7 = "%{public}s %{public}s couldn't get output handler context during output_finished";
LABEL_13:
    _os_log_impl(&dword_181A5C000, v6, OS_LOG_TYPE_ERROR, v7, buf, 0x16u);
    return;
  }

  char v5 = output_handler_context[4];
  if (!v5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (os_log_s *)gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)buf = 136446466;
    os_log_type_t v23 = "nw_protocol_http2_transport_output_finished";
    BOOL v24 = 2082;
    os_log_type_t v25 = handle + 205;
    uint64_t v7 = "%{public}s %{public}s couldn't get stream during output_finished";
    goto LABEL_13;
  }

  if (gLogDatapath)
  {
    os_log_type_t v19 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v23 = "nw_protocol_http2_transport_output_finished";
      BOOL v24 = 2082;
      os_log_type_t v25 = handle + 205;
      _os_log_impl( &dword_181A5C000,  v19,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s sending non-deferred end stream",  buf,  0x16u);
    }
  }

  nw_http2_transport_send_end_stream((uint64_t)handle, v5);
}

      if (v25) {
        free(v25);
      }
      goto LABEL_45;
    }

    __nwlog_obj();
    *(_DWORD *)char v79 = 136446210;
    *(void *)&v79[4] = "nw_protocol_http2_transport_get_input_frames";
    v35 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (buf[0] == 17)
    {
      id v36 = (os_log_s *)__nwlog_obj();
      v37 = buf[0];
      if (os_log_type_enabled(v36, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)char v79 = 136446210;
        *(void *)&v79[4] = "nw_protocol_http2_transport_get_input_frames";
        v38 = "%{public}s called with null http2_transport";
        goto LABEL_80;
      }

      goto LABEL_81;
    }

    if (type[0] == OS_LOG_TYPE_DEFAULT)
    {
      id v36 = (os_log_s *)__nwlog_obj();
      v37 = buf[0];
      if (os_log_type_enabled(v36, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)char v79 = 136446210;
        *(void *)&v79[4] = "nw_protocol_http2_transport_get_input_frames";
        v38 = "%{public}s called with null http2_transport, backtrace limit exceeded";
        goto LABEL_80;
      }

      goto LABEL_81;
    }

    v40 = (char *)__nw_create_backtrace_string();
    id v36 = (os_log_s *)__nwlog_obj();
    v37 = buf[0];
    char v43 = os_log_type_enabled(v36, (os_log_type_t)buf[0]);
    if (!v40)
    {
      if (v43)
      {
        *(_DWORD *)char v79 = 136446210;
        *(void *)&v79[4] = "nw_protocol_http2_transport_get_input_frames";
        v38 = "%{public}s called with null http2_transport, no backtrace";
        goto LABEL_80;
      }

      goto LABEL_81;
    }

    if (v43)
    {
      *(_DWORD *)char v79 = 136446466;
      *(void *)&v79[4] = "nw_protocol_http2_transport_get_input_frames";
      *(_WORD *)&v79[12] = 2082;
      *(void *)&v79[14] = v40;
      BOOL v42 = "%{public}s called with null http2_transport, dumping backtrace:%{public}s";
      goto LABEL_66;
    }

    goto LABEL_67;
  }

  __nwlog_obj();
  *(_DWORD *)char v79 = 136446210;
  *(void *)&v79[4] = "nw_protocol_http2_transport_get_input_frames";
  v35 = (char *)_os_log_send_and_compose_impl();
  buf[0] = 16;
  type[0] = OS_LOG_TYPE_DEFAULT;
  if (buf[0] != 17)
  {
    if (type[0] == OS_LOG_TYPE_DEFAULT)
    {
      id v36 = (os_log_s *)__nwlog_obj();
      v37 = buf[0];
      if (os_log_type_enabled(v36, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)char v79 = 136446210;
        *(void *)&v79[4] = "nw_protocol_http2_transport_get_input_frames";
        v38 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_80;
      }

      goto LABEL_81;
    }

    v40 = (char *)__nw_create_backtrace_string();
    id v36 = (os_log_s *)__nwlog_obj();
    v37 = buf[0];
    os_log_type_t v41 = os_log_type_enabled(v36, (os_log_type_t)buf[0]);
    if (!v40)
    {
      if (v41)
      {
        *(_DWORD *)char v79 = 136446210;
        *(void *)&v79[4] = "nw_protocol_http2_transport_get_input_frames";
        v38 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_80;
      }

      goto LABEL_81;
    }

    if (v41)
    {
      *(_DWORD *)char v79 = 136446466;
      *(void *)&v79[4] = "nw_protocol_http2_transport_get_input_frames";
      *(_WORD *)&v79[12] = 2082;
      *(void *)&v79[14] = v40;
      BOOL v42 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_66:
      _os_log_impl(&dword_181A5C000, v36, v37, v42, v79, 0x16u);
    }

      nw_frame_claim(a2, v5, v8, 0);
      nw_frame_collapse(a2);
      nw_frame_unclaim(a2, v27, v8, 0);
      objc_super v29 = *(void *)(a2 + 32);
      os_log_type_t v30 = *(void **)(a2 + 40);
      os_log_type_t v28 = (void *)(a2 + 32);
      if (v29)
      {
        *(void *)(v29 + 40) = v30;
        os_log_type_t v30 = *(void **)(a2 + 40);
      }

      else
      {
        *(void *)(*(void *)(a1 + 96) + 8LL) = v30;
      }

      *os_log_type_t v30 = v29;
      *os_log_type_t v28 = 0LL;
      *(void *)(a2 + 40) = 0LL;
      v31 = *(void *)(a1 + 104);
      os_log_type_t v32 = *(uint64_t **)(v31 + 8);
      *(void *)(a2 + 40) = v32;
      *os_log_type_t v32 = a2;
      *(void *)(v31 + 8) = v28;
      if (gLogDatapath)
      {
        BOOL v57 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
        {
          v58 = *(void *)(a1 + 64);
          *(_DWORD *)buf = 136446722;
          v80 = "send_data_callback_block_invoke";
          if (v58) {
            v59 = (const char *)(v58 + 205);
          }
          else {
            v59 = "";
          }
          v81 = 2082;
          v82 = v59;
          os_log_type_t v83 = 1024;
          LODWORD(v84) = v8;
          _os_log_impl( &dword_181A5C000,  v57,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s copied %u bytes into output frame",  buf,  0x1Cu);
        }
      }

      return 1LL;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    dispatch_workloop_t v34 = *(void *)(a1 + 64);
    if (v34) {
      v35 = (const char *)(v34 + 205);
    }
    else {
      v35 = "";
    }
    *(_DWORD *)buf = 136446466;
    v80 = "send_data_callback_block_invoke";
    v81 = 2082;
    v82 = v35;
    id v36 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v75 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v37 = (os_log_s *)__nwlog_obj();
      v38 = type;
      if (os_log_type_enabled(v37, type))
      {
        os_log_type_t v39 = *(void *)(a1 + 64);
        if (v39) {
          v40 = (const char *)(v39 + 205);
        }
        else {
          v40 = "";
        }
LABEL_57:
        *(_DWORD *)buf = 136446466;
        v80 = "send_data_callback_block_invoke";
        v81 = 2082;
        v82 = v40;
        os_log_type_t v41 = "%{public}s %{public}s unexpected NULL in source frame";
LABEL_99:
        _os_log_impl(&dword_181A5C000, v37, v38, v41, buf, 0x16u);
        goto LABEL_100;
      }

      goto LABEL_100;
    }

    if (v75)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v37 = (os_log_s *)__nwlog_obj();
      v38 = type;
      os_log_type_t v46 = os_log_type_enabled(v37, type);
      if (backtrace_string)
      {
        if (v46)
        {
          os_log_type_t v47 = *(void *)(a1 + 64);
          if (v47) {
            v48 = (const char *)(v47 + 205);
          }
          else {
            v48 = "";
          }
LABEL_79:
          *(_DWORD *)buf = 136446722;
          v80 = "send_data_callback_block_invoke";
          v81 = 2082;
          v82 = v48;
          os_log_type_t v83 = 2082;
          v84 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v37,  v38,  "%{public}s %{public}s unexpected NULL in source frame, dumping backtrace:%{public}s",  buf,  0x20u);
          goto LABEL_80;
        }

        goto LABEL_80;
      }

      if (!v46) {
        goto LABEL_100;
      }
      BOOL v54 = *(void *)(a1 + 64);
      if (v54) {
        uint64_t v55 = (const char *)(v54 + 205);
      }
      else {
        uint64_t v55 = "";
      }
      goto LABEL_98;
    }

    v37 = (os_log_s *)__nwlog_obj();
    v38 = type;
    if (!os_log_type_enabled(v37, type)) {
      goto LABEL_100;
    }
    v51 = *(void *)(a1 + 64);
    if (v51) {
      os_log_type_t v52 = (const char *)(v51 + 205);
    }
    else {
      os_log_type_t v52 = "";
    }
    goto LABEL_85;
  }

  os_log_type_t v21 = v78 - v8;
  char v22 = *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  v77 = 0;
  os_log_type_t v23 = *(void *)(a1 + 80);
  BOOL v24 = (const void *)nw_frame_unclaimed_bytes(*(void *)(a1 + 88), &v77);
  if (v24)
  {
    os_log_type_t v25 = v23 - v22;
    if (v25 >= v77) {
      os_log_type_t v19 = v77;
    }
    else {
      os_log_type_t v19 = v25;
    }
    memcpy(&v6[v8], v24, v19);
    if (gLogDatapath)
    {
      v72 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
      {
        __uint64_t v73 = *(void *)(a1 + 64);
        *(_DWORD *)buf = 136446722;
        v80 = "send_data_callback_block_invoke";
        if (v73) {
          unint64_t v74 = (const char *)(v73 + 205);
        }
        else {
          unint64_t v74 = "";
        }
        v81 = 2082;
        v82 = v74;
        os_log_type_t v83 = 1024;
        LODWORD(v84) = v19;
        _os_log_impl( &dword_181A5C000,  v72,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s wrote %u bytes of body data (no padding)",  buf,  0x1Cu);
      }
    }

    nw_frame_claim(*(void *)(a1 + 88), v26, v19, 0);
    LODWORD(v8) = v19 + v8;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += v19;
    BOOL v20 = *(void *)(a1 + 40);
    goto LABEL_41;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v42 = *(void *)(a1 + 64);
  if (v42) {
    char v43 = (const char *)(v42 + 205);
  }
  else {
    char v43 = "";
  }
  *(_DWORD *)buf = 136446466;
  v80 = "send_data_callback_block_invoke";
  v81 = 2082;
  v82 = v43;
  id v36 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v75 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (v75)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v37 = (os_log_s *)__nwlog_obj();
      v38 = type;
      id v49 = os_log_type_enabled(v37, type);
      if (backtrace_string)
      {
        if (v49)
        {
          v50 = *(void *)(a1 + 64);
          if (v50) {
            v48 = (const char *)(v50 + 205);
          }
          else {
            v48 = "";
          }
          goto LABEL_79;
        }

  if (v16) {
    free(v16);
  }
  return 1LL;
}

        goto LABEL_44;
      }

      if (!v28)
      {
        __nwlog_obj();
        id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v25 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_proxy_config_create_merged";
          _os_log_impl( &dword_181A5C000,  v15,  v25,  "%{public}s called with null (lower_config->mode == nw_proxy_mode_protocol), backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_43;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v22 = type;
      os_log_type_t v23 = os_log_type_enabled(v15, type);
      if (!backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_proxy_config_create_merged";
          _os_log_impl( &dword_181A5C000,  v15,  v22,  "%{public}s called with null (lower_config->mode == nw_proxy_mode_protocol), no backtrace",  buf,  0xCu);
        }

        goto LABEL_43;
      }

      if (v23)
      {
        *(_DWORD *)buf = 136446466;
        v31 = "nw_proxy_config_create_merged";
        os_log_type_t v32 = 2082;
        uint64_t v33 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v15,  v22,  "%{public}s called with null (lower_config->mode == nw_proxy_mode_protocol), dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_31;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_proxy_config_create_merged";
    os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v28 = 0;
    if (__nwlog_fault(v14, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        int v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_proxy_config_create_merged";
          _os_log_impl( &dword_181A5C000,  v15,  v16,  "%{public}s called with null (config->mode == nw_proxy_mode_protocol)",  buf,  0xCu);
        }

        goto LABEL_43;
      }

      if (!v28)
      {
        __nwlog_obj();
        id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v24 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_proxy_config_create_merged";
          _os_log_impl( &dword_181A5C000,  v15,  v24,  "%{public}s called with null (config->mode == nw_proxy_mode_protocol), backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_43;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v20 = type;
      os_log_type_t v21 = os_log_type_enabled(v15, type);
      if (!backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_proxy_config_create_merged";
          _os_log_impl( &dword_181A5C000,  v15,  v20,  "%{public}s called with null (config->mode == nw_proxy_mode_protocol), no backtrace",  buf,  0xCu);
        }

        goto LABEL_43;
      }

      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        v31 = "nw_proxy_config_create_merged";
        os_log_type_t v32 = 2082;
        uint64_t v33 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v15,  v20,  "%{public}s called with null (config->mode == nw_proxy_mode_protocol), dumping backtrace:%{public}s",  buf,  0x16u);
      }

    goto LABEL_44;
  }

  if (v4)
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    os_log_type_t v28 = 0;
    id v6 = v3[1];
    if (v6 && nw_dictionary_get_count(v6))
    {
      uint64_t v7 = v3[1];
      v22[0] = MEMORY[0x1895F87A8];
      v22[1] = 3221225472LL;
      v22[2] = __nw_proxy_config_enumerate_endpoints_block_invoke;
      v22[3] = &unk_189BBD0F0;
      os_log_type_t v23 = v5;
      BOOL v24 = buf;
      nw_dictionary_apply(v7, (uint64_t)v22);
    }

    if (!*(_BYTE *)(*(void *)&buf[8] + 24LL) && v3[5]) {
      v5[2](v5);
    }
    _Block_object_dispose(buf, 8);
    goto LABEL_10;
  }

  __nwlog_obj();
  os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_proxy_config_enumerate_endpoints";
  int v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v25 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_proxy_config_enumerate_endpoints";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null enumerator", buf, 0xCu);
    }

    goto LABEL_43;
  }

  if (!v25)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_proxy_config_enumerate_endpoints";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s called with null enumerator, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_43;
  }

  os_log_type_t v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v18 = type;
  os_log_type_t v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_proxy_config_enumerate_endpoints";
      _os_log_impl(&dword_181A5C000, v10, v18, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
    }

    goto LABEL_43;
  }

  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_proxy_config_enumerate_endpoints";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s called with null enumerator, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_45;
  }
LABEL_10:
}

    if (nw_frame_is_metadata_complete(v11))
    {
      if ((*(_BYTE *)(v9 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          v174 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v174, OS_LOG_TYPE_DEBUG))
          {
            v175 = *(void *)(v9 + 488);
            if (v175) {
              LODWORD(v175) = *(_DWORD *)(v175 + 424);
            }
            v176 = *(_DWORD *)(*(void *)(v9 + 480) + 372LL);
            v177 = *(_DWORD *)(v9 + 860);
            *(_DWORD *)buf = 136447746;
            v364 = "nw_http1_connection_drain_outbound_frames";
            v365 = 2082;
            *(void *)v366 = v347;
            *(_WORD *)&v366[8] = 2080;
            *(void *)&v366[10] = " ";
            v367 = 1024;
            *(_DWORD *)v368 = v176;
            *(_WORD *)&v368[4] = 1024;
            *(_DWORD *)&v368[6] = v177;
            LOWORD(v369) = 1024;
            *(_DWORD *)((char *)&v369 + 2) = v175;
            HIWORD(v369) = 2048;
            *(void *)v370 = v11;
            _os_log_impl( &dword_181A5C000,  v174,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:c%u:s%u> draining output frame %p, complete",  buf,  0x3Cu);
          }
        }
      }
    }

    os_log_type_t v18 = __len[0];
    is_metadata_complete = nw_frame_is_metadata_complete(v11);
    v345 = v14;
    if (!v17)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v364 = "nw_http1_connection_send_bytes";
      v162 = (char *)_os_log_send_and_compose_impl();
      LOBYTE(__len[1]) = 16;
      type[0] = OS_LOG_TYPE_DEFAULT;
      if (LOBYTE(__len[1]) == 17)
      {
        v163 = (os_log_s *)__nwlog_obj();
        v164 = __len[1];
        if (os_log_type_enabled(v163, __len[1]))
        {
          *(_DWORD *)buf = 136446210;
          v364 = "nw_http1_connection_send_bytes";
          v165 = v163;
          v166 = v164;
          v167 = "%{public}s called with null buffer";
LABEL_302:
          _os_log_impl(&dword_181A5C000, v165, v166, v167, buf, 0xCu);
        }

LABEL_44:
            os_log_type_t v23 = *(void *)(*(void *)(a1 + 32) + 8LL);
            BOOL v24 = *(void **)(v23 + 40);
            *(void *)(v23 + 40) = 0LL;

            goto LABEL_45;
          }

          __nwlog_obj();
          os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_43;
          }
          *(_DWORD *)buf = 136446210;
          os_log_type_t v28 = "-[NWPrivilegedHelper startXPCListener]_block_invoke";
          char v22 = "%{public}s received XPC_ERROR_CONNECTION_INVALID, removing connection";
        }

        _os_log_impl(&dword_181A5C000, v16, v17, v18, buf, 0x16u);
        goto LABEL_44;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v16 = (os_log_s *)gLogObj;
      os_log_type_t v17 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v41 = "nw_protocol_register_handle";
        BOOL v42 = 2082;
        char v43 = a1;
        os_log_type_t v18 = "%{public}s Protocol identifier %{public}s is already registered";
        goto LABEL_43;
      }

        goto LABEL_44;
      }

      if (!v24)
      {
        __nwlog_obj();
        int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_string_is_ip_address";
          os_log_type_t v18 = "%{public}s called with null str, backtrace limit exceeded";
          goto LABEL_42;
        }

        goto LABEL_43;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      os_log_type_t v21 = os_log_type_enabled(v16, type);
      if (!backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_string_is_ip_address";
          os_log_type_t v18 = "%{public}s called with null str, no backtrace";
          goto LABEL_42;
        }

        goto LABEL_43;
      }

      if (!v21) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_string_is_ip_address";
      char v27 = 2082;
      os_log_type_t v28 = backtrace_string;
      char v22 = "%{public}s called with null str, dumping backtrace:%{public}s";
      goto LABEL_32;
    }

    goto LABEL_44;
  }

  if (a2)
  {
    if (pid >= 1)
    {
      uint64_t v26 = 0LL;
      memset(buffer, 0, sizeof(buffer));
      if (proc_pidinfo(pid, 17, 1uLL, buffer, 56) == 56)
      {
        if (!uuid_is_null((const unsigned __int8 *)buffer))
        {
          if (gLogDatapath)
          {
            __nwlog_obj();
            id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              os_log_type_t v18 = "nw_utilities_get_uuid_for_pid";
              os_log_type_t v19 = 1024;
              BOOL v20 = pid;
              os_log_type_t v21 = 1040;
              char v22 = 16;
              os_log_type_t v23 = 2096;
              BOOL v24 = buffer;
              _os_log_impl( &dword_181A5C000,  v15,  OS_LOG_TYPE_DEBUG,  "%{public}s Looked up PID (%d) -> UUID (%{uuid_t}.16P)",  buf,  0x22u);
            }
          }

          *a2 = buffer[0];
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v4 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v18 = "nw_utilities_get_uuid_for_pid";
          os_log_type_t v19 = 1024;
          BOOL v20 = pid;
          _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_DEBUG,  "%{public}s Failed to convert from PID (%d) to UUID",  buf,  0x12u);
        }
      }
    }

    return;
  }

  __nwlog_obj();
  os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(buffer[0]) = 136446210;
  *(void *)((char *)buffer + 4) = "nw_utilities_get_uuid_for_pid";
  id v6 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  int v16 = 0;
  if (buf[0] == 17)
  {
    __nwlog_obj();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    int v8 = buf[0];
    if (os_log_type_enabled(v7, (os_log_type_t)buf[0]))
    {
      LODWORD(buffer[0]) = 136446210;
      *(void *)((char *)buffer + 4) = "nw_utilities_get_uuid_for_pid";
      int v9 = "%{public}s called with null out_uuid";
      goto LABEL_42;
    }

    goto LABEL_43;
  }

  if (!v16)
  {
    __nwlog_obj();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    int v8 = buf[0];
    if (os_log_type_enabled(v7, (os_log_type_t)buf[0]))
    {
      LODWORD(buffer[0]) = 136446210;
      *(void *)((char *)buffer + 4) = "nw_utilities_get_uuid_for_pid";
      int v9 = "%{public}s called with null out_uuid, backtrace limit exceeded";
      goto LABEL_42;
    }

    goto LABEL_43;
  }

  os_log_type_t v13 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  int v8 = buf[0];
  os_log_type_t v14 = os_log_type_enabled(v7, (os_log_type_t)buf[0]);
  if (!v13)
  {
    if (v14)
    {
      LODWORD(buffer[0]) = 136446210;
      *(void *)((char *)buffer + 4) = "nw_utilities_get_uuid_for_pid";
      int v9 = "%{public}s called with null out_uuid, no backtrace";
      goto LABEL_42;
    }

    goto LABEL_43;
  }

  if (v14)
  {
    LODWORD(buffer[0]) = 136446466;
    *(void *)((char *)buffer + 4) = "nw_utilities_get_uuid_for_pid";
    WORD6(buffer[0]) = 2082;
    *(void *)((char *)buffer + 14) = v13;
    _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null out_uuid, dumping backtrace:%{public}s",  (uint8_t *)buffer,  0x16u);
  }

  free(v13);
  if (v6) {
    goto LABEL_45;
  }
}

    if (v12) {
      free(v12);
    }
    int v8 = 0LL;
    goto LABEL_8;
  }

  if (!a2)
  {
    __nwlog_obj();
    id v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_dns_cache_storage_canvas_serialize";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (__nwlog_fault(v12, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        int v16 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_dns_cache_storage_canvas_serialize";
          _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null size", buf, 0xCu);
        }

            goto LABEL_44;
          }

          if (!v49)
          {
            __nwlog_obj();
            int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v17 = type;
            if (os_log_type_enabled(v16, type))
            {
              *(_DWORD *)buf = 136446210;
              os_log_type_t v52 = "nw_storage_load_canvases_for_key";
              os_log_type_t v18 = "%{public}s Failed to prepare statement, backtrace limit exceeded";
              goto LABEL_41;
            }

            goto LABEL_43;
          }

          char v27 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          int v16 = (os_log_s *)(id)gLogObj;
          os_log_type_t v28 = type;
          v31 = os_log_type_enabled(v16, type);
          if (v27)
          {
            if (v31)
            {
              *(_DWORD *)buf = 136446466;
              os_log_type_t v52 = "nw_storage_load_canvases_for_key";
              v53 = 2082;
              BOOL v54 = v27;
              os_log_type_t v30 = "%{public}s Failed to prepare statement, dumping backtrace:%{public}s";
              goto LABEL_33;
            }

    goto LABEL_44;
  }

  os_log_type_t v10 = v8;
  id v11 = v10[1];

  if (nw_protocol_copy_http_connection_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v11,  nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    *(void *)buf = v6;
    *(void *)&buf[8] = 3221225472LL;
    *(void *)&buf[16] = __nw_http_connection_metadata_send_ping_block_invoke;
    v35 = &unk_189BC6710;
    os_log_type_t v13 = v10;
    id v36 = v13;
    os_log_type_t v14 = v9;
    v37 = v14;
    id v15 = (uint64_t)v13[4];
    if (v15)
    {
      __nw_http_connection_metadata_send_ping_block_invoke((uint64_t)buf, v15);
      os_log_type_t v14 = v37;
    }

    goto LABEL_10;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v20 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_send_ping";
  os_log_type_t v17 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v32 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v18 = (os_log_s *)(id)gLogObj;
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v18, type))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_send_ping";
      _os_log_impl(&dword_181A5C000, v18, v21, "%{public}s metadata must be http_connection", buf, 0xCu);
    }

    goto LABEL_43;
  }

  if (!v32)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v18 = (os_log_s *)(id)gLogObj;
    objc_super v29 = type;
    if (os_log_type_enabled(v18, type))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_send_ping";
      _os_log_impl( &dword_181A5C000,  v18,  v29,  "%{public}s metadata must be http_connection, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_43;
  }

  os_log_type_t v25 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v18 = (os_log_s *)(id)gLogObj;
  uint64_t v26 = type;
  char v27 = os_log_type_enabled(v18, type);
  if (!v25)
  {
    if (v27)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_send_ping";
      _os_log_impl(&dword_181A5C000, v18, v26, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }

    goto LABEL_43;
  }

  if (v27)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_http_connection_metadata_send_ping";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v25;
    _os_log_impl( &dword_181A5C000,  v18,  v26,  "%{public}s metadata must be http_connection, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v25);
  if (v17) {
    goto LABEL_45;
  }
LABEL_10:
}
}

  if (v30) {
    free(v30);
  }
LABEL_27:
}

      if (v13) {
        free(v13);
      }
      if (*a1)
      {
        free((void *)*a1);
        *a1 = 0LL;
      }

      goto LABEL_47;
    }

    __nwlog_obj(a1, 0LL);
    *(_DWORD *)buf = 136446210;
    v72 = "nw_append_format";
    os_log_type_t v47 = _os_log_send_and_compose_impl();
    v70[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v69) = 0;
    v53 = __nwlog_fault(v47, v70, &v69);
    if ((_DWORD)v53)
    {
      if (v70[0] == OS_LOG_TYPE_FAULT)
      {
        v50 = (os_log_s *)__nwlog_obj(v53, v54);
        v51 = v70[0];
        if (!os_log_type_enabled(v50, v70[0])) {
          goto LABEL_98;
        }
        *(_DWORD *)buf = 136446210;
        v72 = "nw_append_format";
        os_log_type_t v52 = "%{public}s called with null format";
        goto LABEL_97;
      }

      if (!(_BYTE)v69)
      {
        v50 = (os_log_s *)__nwlog_obj(v53, v54);
        v51 = v70[0];
        if (!os_log_type_enabled(v50, v70[0])) {
          goto LABEL_98;
        }
        *(_DWORD *)buf = 136446210;
        v72 = "nw_append_format";
        os_log_type_t v52 = "%{public}s called with null format, backtrace limit exceeded";
        goto LABEL_97;
      }

      v58 = (char *)__nw_create_backtrace_string(v53, v54);
      v50 = (os_log_s *)__nwlog_obj(v58, v59);
      v51 = v70[0];
      os_log_type_t v60 = os_log_type_enabled(v50, v70[0]);
      if (v58)
      {
        if (v60)
        {
          *(_DWORD *)buf = 136446466;
          v72 = "nw_append_format";
          __uint64_t v73 = 2082;
          unint64_t v74 = (unint64_t)v58;
          _os_log_impl( &dword_181A5C000,  v50,  v51,  "%{public}s called with null format, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v58);
        if (v47) {
          goto LABEL_99;
        }
        return;
      }

      if (v60)
      {
        *(_DWORD *)buf = 136446210;
        v72 = "nw_append_format";
        os_log_type_t v52 = "%{public}s called with null format, no backtrace";
LABEL_97:
        _os_log_impl(&dword_181A5C000, v50, v51, v52, buf, 0xCu);
      }
    }
  }

  else
  {
    __nwlog_obj(0LL, a2);
    *(_DWORD *)buf = 136446210;
    v72 = "nw_append_format";
    os_log_type_t v47 = _os_log_send_and_compose_impl();
    v70[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v69) = 0;
    v48 = __nwlog_fault(v47, v70, &v69);
    if (!(_DWORD)v48) {
      goto LABEL_98;
    }
    if (v70[0] == OS_LOG_TYPE_FAULT)
    {
      v50 = (os_log_s *)__nwlog_obj(v48, v49);
      v51 = v70[0];
      if (!os_log_type_enabled(v50, v70[0])) {
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136446210;
      v72 = "nw_append_format";
      os_log_type_t v52 = "%{public}s called with null buffer";
      goto LABEL_97;
    }

    if (!(_BYTE)v69)
    {
      v50 = (os_log_s *)__nwlog_obj(v48, v49);
      v51 = v70[0];
      if (!os_log_type_enabled(v50, v70[0])) {
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136446210;
      v72 = "nw_append_format";
      os_log_type_t v52 = "%{public}s called with null buffer, backtrace limit exceeded";
      goto LABEL_97;
    }

    uint64_t v55 = (char *)__nw_create_backtrace_string(v48, v49);
    v50 = (os_log_s *)__nwlog_obj(v55, v56);
    v51 = v70[0];
    BOOL v57 = os_log_type_enabled(v50, v70[0]);
    if (!v55)
    {
      if (!v57) {
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136446210;
      v72 = "nw_append_format";
      os_log_type_t v52 = "%{public}s called with null buffer, no backtrace";
      goto LABEL_97;
    }

    if (v57)
    {
      *(_DWORD *)buf = 136446466;
      v72 = "nw_append_format";
      __uint64_t v73 = 2082;
      unint64_t v74 = (unint64_t)v55;
      _os_log_impl( &dword_181A5C000,  v50,  v51,  "%{public}s called with null buffer, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v55);
  }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v91 = "_http_safe_append";
    os_log_type_t v30 = (void *)_os_log_send_and_compose_impl();
    LOBYTE(__src) = 16;
    os_log_type_t v89 = OS_LOG_TYPE_DEFAULT;
    if (__src == 17)
    {
      v31 = (os_log_s *)__nwlog_obj();
      os_log_type_t v32 = __src;
      if (!os_log_type_enabled(v31, (os_log_type_t)__src)) {
        goto LABEL_142;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v91 = "_http_safe_append";
      uint64_t v33 = "%{public}s called with null data";
      goto LABEL_141;
    }

    if (v89 == OS_LOG_TYPE_DEFAULT)
    {
      v31 = (os_log_s *)__nwlog_obj();
      os_log_type_t v32 = __src;
      if (!os_log_type_enabled(v31, (os_log_type_t)__src)) {
        goto LABEL_142;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v91 = "_http_safe_append";
      uint64_t v33 = "%{public}s called with null data, backtrace limit exceeded";
      goto LABEL_141;
    }

    id v49 = (char *)__nw_create_backtrace_string();
    v31 = (os_log_s *)__nwlog_obj();
    os_log_type_t v32 = __src;
    v50 = os_log_type_enabled(v31, (os_log_type_t)__src);
    if (!v49)
    {
      if (!v50) {
        goto LABEL_142;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v91 = "_http_safe_append";
      uint64_t v33 = "%{public}s called with null data, no backtrace";
      goto LABEL_141;
    }

    if (v50)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v91 = "_http_safe_append";
      v92 = 2082;
      v93 = v49;
      _os_log_impl( &dword_181A5C000,  v31,  v32,  "%{public}s called with null data, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v49);
LABEL_142:
    if (!v30) {
      goto LABEL_144;
    }
    goto LABEL_143;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  os_log_type_t v91 = "_http_vle_encode";
  v92 = 2048;
  v93 = (const char *)a2;
  objc_super v29 = (void *)_os_log_send_and_compose_impl();
  uint64_t result = __nwlog_abort((uint64_t)v29);
  if (!result)
  {
    free(v29);
    os_log_type_t v13 = (char *)*((void *)v85 + 3);
    if (v13)
    {
      os_log_type_t v14 = v81;
      if (a1) {
        goto LABEL_8;
      }
      goto LABEL_43;
    }

    if (v21) {
      free(v21);
    }
    goto LABEL_45;
  }

  int v3 = v2;
  memset(out, 0, sizeof(out));
  uuid_unparse(v2->uuid, out);
  connection = v3->connection;
  if (connection) {
    char v5 = nw_service_connector_copy_connection_description(connection);
  }
  else {
    char v5 = 0LL;
  }
  objc_super v29 = 0LL;
  uniqueID = v3->uniqueID;
  uint64_t v7 = *((_BYTE *)v3 + 616);
  description = nw_endpoint_get_description(v3->endpoint);
  int v9 = " processed";
  os_log_type_t v10 = "";
  if ((v7 & 0x40) == 0) {
    int v9 = "";
  }
  id v11 = " waitingActiveConnection";
  if ((v7 & 0x10) == 0) {
    id v11 = "";
  }
  os_log_type_t v12 = " waitingListener";
  if ((v7 & 8) == 0) {
    os_log_type_t v12 = "";
  }
  if (v7 >= 0) {
    os_log_type_t v13 = "";
  }
  else {
    os_log_type_t v13 = " waitingPath";
  }
  os_log_type_t v14 = " accepted";
  if ((v7 & 4) == 0) {
    os_log_type_t v14 = "";
  }
  id v15 = " pending";
  int v16 = "incoming";
  if ((v7 & 2) == 0) {
    id v15 = "";
  }
  if ((v7 & 1) == 0) {
    int v16 = "outgoing";
  }
  os_log_type_t v17 = " ";
  if (v5) {
    os_log_type_t v10 = v5;
  }
  else {
    os_log_type_t v17 = "";
  }
  asprintf( &v29,  "[SCR%llu %s%s%s%s%s%s%s %s %s %s seq %llu%s%s]",  uniqueID,  v16,  v15,  v14,  v13,  v12,  v11,  v9,  description,  v3->service,  out,  v3->sequenceNumber,  v17,  v10);
  if (v5) {
    free(v5);
  }
  os_log_type_t v18 = v29;

  if (!v18)
  {
LABEL_45:
    os_log_type_t v19 = 0LL;
    return (NSString *)v19;
  }

  os_log_type_t v19 = (__CFString *)CFStringCreateWithCStringNoCopy( (CFAllocatorRef)*MEMORY[0x189604DB0],  v18,  0x8000100u,  (CFAllocatorRef)*MEMORY[0x189604DB8]);
  return (NSString *)v19;
}

    free(v18);
    if (!v8) {
      goto LABEL_13;
    }
    goto LABEL_64;
  }

  if (!strcasecmp(name, "Sec-WebSocket-Key")
    || !strcasecmp(name, "Sec-WebSocket-Protocol")
    || !strcasecmp(name, "Sec-WebSocket-Version")
    || !strcasecmp(name, "Upgrade")
    || !strcasecmp(name, "Connection"))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      os_log_type_t v30 = "nw_ws_options_add_additional_header";
      v31 = 2080;
      os_log_type_t v32 = name;
      uint64_t v33 = 2080;
      dispatch_workloop_t v34 = value;
      _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_ERROR,  "%{public}s Cannot override (%s, %s) header in the client's request",  buf,  0x20u);
    }
  }

  else
  {
    v26[0] = MEMORY[0x1895F87A8];
    v26[1] = 3221225472LL;
    v26[2] = __nw_ws_options_add_additional_header_block_invoke;
    v26[3] = &__block_descriptor_48_e9_B16__0_v8l;
    v26[4] = name;
    v26[5] = value;
    nw_protocol_options_access_handle(v5, v26);
  }

      goto LABEL_44;
    }

    if (!v43)
    {
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v42 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v46 = "nw_read_request_create_multiple";
        _os_log_impl( &dword_181A5C000,  v14,  v42,  "%{public}s called with null completion, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_43;
    }

    os_log_type_t v39 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    v40 = type;
    os_log_type_t v41 = os_log_type_enabled(v14, type);
    if (!v39)
    {
      if (v41)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v46 = "nw_read_request_create_multiple";
        _os_log_impl(&dword_181A5C000, v14, v40, "%{public}s called with null completion, no backtrace", buf, 0xCu);
      }

      goto LABEL_43;
    }

    if (v41)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v46 = "nw_read_request_create_multiple";
      os_log_type_t v47 = 2082;
      v48 = (unint64_t)v39;
      _os_log_impl( &dword_181A5C000,  v14,  v40,  "%{public}s called with null completion, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v39);
  }

    if (v18) {
      free(v18);
    }
    return 0LL;
  }

  uint32_t v1 = *a1;
  char v2 = bswap32(*a1);
  if ((v2 & 0xFF000000) == 0 || (v2 & 0xFF000000) == 2130706432) {
    return 0LL;
  }
  id v6 = v2 >> 8 == 12605539 || (v2 & 0xFFFF0000) == -1442971648;
  is_eligible_for_CrazyIvan46 = 0LL;
  uint64_t v7 = v6 || (v2 & 0xFFFFFFF8) == -1073741824;
  if (!v7 && v1 != -1 && (v2 & 0xF0000000) != 0xE0000000)
  {
    *(_DWORD *)address = 528;
    *(_DWORD *)&address[4] = v1;
    *(void *)&address[8] = 0LL;
    int v8 = nw_endpoint_create_address((const sockaddr *)address);
    int v9 = v8;
    if (v8 && (os_log_type_t v10 = nw_path_create_evaluator_for_endpoint(v8, 0LL)) != 0LL)
    {
      id v11 = (os_unfair_lock_s *)((char *)v10 + 96);
      os_log_type_t v12 = v10;
      os_unfair_lock_lock(v11);
      os_log_type_t v13 = (os_unfair_lock_s *)v12[6];
      os_unfair_lock_unlock(v11);

      if (v13
        && (os_log_type_t v13 = v13,
            char os_unfair_lock_opaque = v13[94]._os_unfair_lock_opaque,
            v13,
            os_unfair_lock_opaque == 2))
      {
        evaluator_for_endpoint = (os_unfair_lock_s *)nw_path_create_evaluator_for_endpoint(0LL, 0LL);

        int v16 = nw_path_evaluator_copy_path(evaluator_for_endpoint);
        is_eligible_for_CrazyIvan46 = nw_path_is_eligible_for_CrazyIvan46(v16);
        os_log_type_t v12 = (id *)evaluator_for_endpoint;
        os_log_type_t v13 = v16;
      }

      else
      {
        is_eligible_for_CrazyIvan46 = 0LL;
      }
    }

    else
    {
      is_eligible_for_CrazyIvan46 = 0LL;
    }
  }

  return is_eligible_for_CrazyIvan46;
}

  os_log_type_t v23 = calloc(v22, 0x10uLL);
  if (v23) {
    goto LABEL_44;
  }
  __nwlog_obj();
  v56 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v56, OS_LOG_TYPE_ERROR);
  *(_DWORD *)__uint64_t v76 = 136446722;
  *(void *)&v76[4] = "strict_calloc";
  *(_WORD *)&v76[12] = 2048;
  *(void *)&v76[14] = v22;
  v77 = 2048;
  unint64_t v78 = 16LL;
  BOOL v57 = (void *)_os_log_send_and_compose_impl();

  uint64_t result = __nwlog_abort((uint64_t)v57);
  if ((_DWORD)result) {
    goto LABEL_127;
  }
  free(v57);
LABEL_44:
  BOOL v24 = 0LL;
  if (v9 && v65)
  {
    os_log_type_t v25 = 0LL;
    BOOL v24 = 0LL;
    __s2a = (_DWORD *)v23 + 1;
    os_log_type_t v60 = v9;
    uint64_t v26 = v65;
    do
    {
      char v27 = 0LL;
      BOOL v61 = v25;
      os_log_type_t v28 = &v64[16 * v25];
      do
      {
        objc_super v29 = *(unsigned int *)v28;
        if ((_DWORD)v29 == LODWORD(v7[v27]) && !memcmp(v28 + 4, (char *)&v7[v27] + 4, *(unsigned int *)v28))
        {
          if ((_DWORD)v24)
          {
            os_log_type_t v30 = v7;
            v31 = v23;
            BOOL v66 = v24;
            os_log_type_t v32 = v24;
            uint64_t v33 = __s2a;
            BOOL v24 = v24;
            while ((_DWORD)v29 != *(v33 - 1) || memcmp(v28 + 4, v33, v29))
            {
              v33 += 4;
              if (!--v24)
              {
                os_log_type_t v23 = v31;
                uint64_t v7 = v30;
                LODWORD(v24) = v66;
                goto LABEL_50;
              }
            }

            os_log_type_t v23 = v31;
            uint64_t v7 = v30;
            BOOL v24 = v66;
          }

          else
          {
            os_log_type_t v32 = 0LL;
LABEL_50:
            v23[v32] = *(_OWORD *)v28;
            BOOL v24 = (v24 + 1);
          }
        }

        ++v27;
      }

      while (v27 != v26);
      os_log_type_t v25 = v61 + 1;
    }

    while (v61 + 1 != v60);
  }

  if (v64) {
    free(v64);
  }
  if (v7) {
    free(v7);
  }
  if ((_DWORD)v24)
  {
    char *v59 = v23;
  }

  else
  {
    if (v23)
    {
      os_log_type_t v21 = v23;
LABEL_69:
      free(v21);
    }

    return 0LL;
  }

  return v24;
}

        goto LABEL_44;
      }

      if (!v28)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v24 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_nat64_copy_prefixes_async";
          _os_log_impl( &dword_181A5C000,  v12,  v24,  "%{public}s called with null block, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_43;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      char v22 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_nat64_copy_prefixes_async";
          _os_log_impl(&dword_181A5C000, v12, v21, "%{public}s called with null block, no backtrace", buf, 0xCu);
        }

        goto LABEL_43;
      }

      if (v22)
      {
        *(_DWORD *)buf = 136446466;
        v31 = "nw_nat64_copy_prefixes_async";
        os_log_type_t v32 = 2082;
        uint64_t v33 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v12,  v21,  "%{public}s called with null block, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_28;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_nat64_copy_prefixes_async";
    id v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v28 = 0;
    if (__nwlog_fault(v11, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_nat64_copy_prefixes_async";
          _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null queue", buf, 0xCu);
        }

        goto LABEL_43;
      }

      if (!v28)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_nat64_copy_prefixes_async";
          _os_log_impl( &dword_181A5C000,  v12,  v23,  "%{public}s called with null queue, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_43;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_nat64_copy_prefixes_async";
          _os_log_impl(&dword_181A5C000, v12, v19, "%{public}s called with null queue, no backtrace", buf, 0xCu);
        }

        goto LABEL_43;
      }

      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        v31 = "nw_nat64_copy_prefixes_async";
        os_log_type_t v32 = 2082;
        uint64_t v33 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v12,  v19,  "%{public}s called with null queue, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_44;
      }

      if (!v32)
      {
        __nwlog_obj();
        int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          v35 = "nw_nat64_copy_prefixes_async_override_dns";
          _os_log_impl( &dword_181A5C000,  v16,  v28,  "%{public}s called with null block, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_43;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      uint64_t v26 = os_log_type_enabled(v16, type);
      if (!backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446210;
          v35 = "nw_nat64_copy_prefixes_async_override_dns";
          _os_log_impl(&dword_181A5C000, v16, v25, "%{public}s called with null block, no backtrace", buf, 0xCu);
        }

        goto LABEL_43;
      }

      if (v26)
      {
        *(_DWORD *)buf = 136446466;
        v35 = "nw_nat64_copy_prefixes_async_override_dns";
        id v36 = 2082;
        v37 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v16,  v25,  "%{public}s called with null block, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_28;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_nat64_copy_prefixes_async_override_dns";
    id v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v32 = 0;
    if (__nwlog_fault(v15, &type, &v32))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          v35 = "nw_nat64_copy_prefixes_async_override_dns";
          _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s called with null queue", buf, 0xCu);
        }

        goto LABEL_43;
      }

      if (!v32)
      {
        __nwlog_obj();
        int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v27 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          v35 = "nw_nat64_copy_prefixes_async_override_dns";
          _os_log_impl( &dword_181A5C000,  v16,  v27,  "%{public}s called with null queue, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_43;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = type;
      BOOL v24 = os_log_type_enabled(v16, type);
      if (!backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446210;
          v35 = "nw_nat64_copy_prefixes_async_override_dns";
          _os_log_impl(&dword_181A5C000, v16, v23, "%{public}s called with null queue, no backtrace", buf, 0xCu);
        }

        goto LABEL_43;
      }

      if (v24)
      {
        *(_DWORD *)buf = 136446466;
        v35 = "nw_nat64_copy_prefixes_async_override_dns";
        id v36 = 2082;
        v37 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v16,  v23,  "%{public}s called with null queue, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_44;
      }

      if (!v25)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v22 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_metadata_create_reply";
          _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(original_metadata), backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_43;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_metadata_create_reply";
          _os_log_impl( &dword_181A5C000,  v12,  v19,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(original_metadata), no backtrace",  buf,  0xCu);
        }

        goto LABEL_43;
      }

      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_quic_metadata_create_reply";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v12,  v19,  "%{public}s called with null nw_protocol_metadata_is_quic_connection(original_metadata), dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_31;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_quic_metadata_create_reply";
    id v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v25 = 0;
    if (__nwlog_fault(v11, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_metadata_create_reply";
          _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null original_metadata", buf, 0xCu);
        }

        goto LABEL_43;
      }

      if (!v25)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_metadata_create_reply";
          _os_log_impl( &dword_181A5C000,  v12,  v21,  "%{public}s called with null original_metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_43;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_metadata_create_reply";
          _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null original_metadata, no backtrace",  buf,  0xCu);
        }

        goto LABEL_43;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_quic_metadata_create_reply";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null original_metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

    if (v22) {
      free(v22);
    }
    id v6 = 0LL;
    goto LABEL_24;
  }

  id v6 = calloc(1uLL, 0x28uLL);
  if (v6) {
    goto LABEL_3;
  }
  __nwlog_obj();
  os_log_type_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v35 = "strict_calloc";
  id v36 = 2048;
  v37 = 1LL;
  v38 = 2048;
  os_log_type_t v39 = 40LL;
  uint64_t v26 = (void *)_os_log_send_and_compose_impl();

  uint64_t result = __nwlog_abort((uint64_t)v26);
  if (!result)
  {
    free(v26);
LABEL_3:
    aBlock[4] = a2 + a3;
    *(void *)os_log_type_t type = a2;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = ___ZL24qpod_options_deserializePU36objcproto25OS_nw_protocol_definition8NSObjectPKvm_block_invoke;
    aBlock[3] = &__block_descriptor_40_e37___NSObject_OS_dispatch_data__16__0__8l;
    uint64_t v7 = (void (**)(void *, os_log_type_t *))_Block_copy(aBlock);
    int v8 = v7[2](v7, type);
    int v9 = (void *)*v6;
    const char *v6 = v8;

    os_log_type_t v10 = MEMORY[0x1895F8AA8];
    if (v8 == MEMORY[0x1895F8AA8])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v18 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "qpod_options_deserialize";
        os_log_type_t v19 = "%{public}s failed to deserialize client_secret in qpod options";
        goto LABEL_21;
      }
    }

    else
    {
      id v11 = v7[2](v7, type);
      os_log_type_t v12 = (void *)v6[1];
      v6[1] = v11;

      if (v11 == v10)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446210;
          v35 = "qpod_options_deserialize";
          os_log_type_t v19 = "%{public}s failed to deserialize server_secret in qpod options";
          goto LABEL_21;
        }
      }

      else
      {
        os_log_type_t v13 = v7[2](v7, type);
        os_log_type_t v14 = (void *)v6[2];
        v6[2] = v13;

        if (v13 == v10)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v18 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446210;
            v35 = "qpod_options_deserialize";
            os_log_type_t v19 = "%{public}s failed to deserialize scid in qpod options";
            goto LABEL_21;
          }
        }

        else
        {
          id v15 = v7[2](v7, type);
          int v16 = (void *)v6[3];
          v6[3] = v15;

          if (v15 == v10)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            os_log_type_t v18 = (os_log_s *)(id)gLogObj;
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446210;
              v35 = "qpod_options_deserialize";
              os_log_type_t v19 = "%{public}s failed to deserialize dcid in qpod options";
              goto LABEL_21;
            }
          }

          else
          {
            os_log_type_t v17 = *(void *)type + 1LL;
            if (*(void *)type + 1LL <= (unint64_t)(a2 + a3))
            {
              *((_BYTE *)v6 + 32) = **(_BYTE **)type;
              *(void *)os_log_type_t type = v17;
              if (v17 - a2 == a3)
              {
LABEL_23:

LABEL_24:
                return (BOOL)v6;
              }

              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v18 = (os_log_s *)(id)gLogObj;
              if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446210;
                v35 = "qpod_options_deserialize";
                os_log_type_t v19 = "%{public}s failed to deserialize qpod options";
                goto LABEL_21;
              }
            }

            else
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v18 = (os_log_s *)(id)gLogObj;
              if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446210;
                v35 = "qpod_options_deserialize";
                os_log_type_t v19 = "%{public}s failed to deserialize is_server in qpod options";
LABEL_21:
                _os_log_impl(&dword_181A5C000, v18, OS_LOG_TYPE_ERROR, v19, buf, 0xCu);
              }
            }
          }
        }
      }
    }

    free(v6);
    id v6 = 0LL;
    goto LABEL_23;
  }

  __break(1u);
  return result;
}

LABEL_44:
      if (v11) {
        free(v11);
      }
      goto LABEL_10;
    }

    if (!v23)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_webtransport_compare_options";
        _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s called with null handle2, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_43;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v19 = type;
    BOOL v20 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_webtransport_compare_options";
        _os_log_impl(&dword_181A5C000, v12, v19, "%{public}s called with null handle2, no backtrace", buf, 0xCu);
      }

      goto LABEL_43;
    }

    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v26 = "nw_webtransport_compare_options";
      char v27 = 2082;
      os_log_type_t v28 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v12,  v19,  "%{public}s called with null handle2, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    if (v10) {
      free(v10);
    }
    if (!v3)
    {
      __nwlog_obj();
      int v9 = "invalid";
      goto LABEL_47;
    }

    if (v10) {
      free(v10);
    }
    if (!v3)
    {
      __nwlog_obj();
      int v9 = "invalid";
      goto LABEL_47;
    }

    if (v13) {
      free(v13);
    }
    goto LABEL_10;
  }
  }

  if (v15) {
    free(v15);
  }
  os_log_type_t v12 = 0LL;
LABEL_10:

  return v12;
}

    uint64_t v7 = 0LL;
    goto LABEL_44;
  }

  nw_parameters_require_interface((nw_parameters_t)v4, v6);
LABEL_5:
  uint64_t v7 = 1LL;
LABEL_44:

  return v7;
}

        free(backtrace_string);
        goto LABEL_22;
      }

      if (!v21) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      objc_super v29 = "tcp_connection_fallback_watcher_create";
      os_log_type_t v10 = "%{public}s called with null queue, no backtrace";
    }

    else
    {
      os_log_type_t v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = out_token;
      if (!os_log_type_enabled(v18, (os_log_type_t)out_token)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 136446210;
      objc_super v29 = "tcp_connection_fallback_watcher_create";
      os_log_type_t v10 = "%{public}s called with null queue, backtrace limit exceeded";
    }

      if (v14) {
        free(v14);
      }
      return -1LL;
    }

    if (!v22)
    {
      id v15 = (os_log_s *)__nwlog_obj();
      int v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_string_find_c_string";
        os_log_type_t v17 = "%{public}s called with null string, backtrace limit exceeded";
        goto LABEL_42;
      }

      goto LABEL_43;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    id v15 = (os_log_s *)__nwlog_obj();
    int v16 = type;
    os_log_type_t v19 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v25 = "nw_string_find_c_string";
        os_log_type_t v17 = "%{public}s called with null string, no backtrace";
        goto LABEL_42;
      }

      goto LABEL_43;
    }

    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v25 = "nw_string_find_c_string";
      uint64_t v26 = 2082;
      char v27 = backtrace_string;
      BOOL v20 = "%{public}s called with null string, dumping backtrace:%{public}s";
LABEL_32:
      _os_log_impl(&dword_181A5C000, v15, v16, v20, buf, 0x16u);
    }

    free(v10);
    goto LABEL_44;
  }

  char v5 = nw_endpoint_handler_copy_flow(v3);
  os_unfair_lock_lock((os_unfair_lock_t)v5 + 220);
  if (*((void *)v5 + 117)
    && (*((_BYTE *)v5 + 32) & 2) == 0
    && (*((_BYTE *)v5 + 33) & 1) == 0
    && *((NWConcrete_nw_endpoint_mode_handler **)v5 + 94) == (NWConcrete_nw_endpoint_mode_handler *)((char *)v5 + 376))
  {
    id v6 = (NWConcrete_nw_endpoint_handler *)nw_endpoint_handler_copy_top_protocol_flow_handler();
  }

  else
  {
    id v6 = v3;
  }

  uint64_t v7 = v6;
  os_unfair_lock_unlock((os_unfair_lock_t)v5 + 220);

LABEL_45:
  return v7;
}

    if (!v13)
    {
LABEL_45:
      os_log_type_t v10 = 0LL;
      goto LABEL_46;
    }

      goto LABEL_65;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v25 = (id)gLogObj;
    else {
      uint64_t v26 = off_189BBBBC0[v18];
    }
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_endpoint_flow_enable_sleep_proxy_if_needed";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v26;
    *(_WORD *)&buf[22] = 2082;
    v95 = "flow";
    char v27 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v92 = 0;
    if (__nwlog_fault((const char *)v27, &type, &v92))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v28 = (os_log_s *)(id)gLogObj;
        objc_super v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          else {
            os_log_type_t v30 = off_189BBBBC0[v18];
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_endpoint_flow_enable_sleep_proxy_if_needed";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v30;
          *(_WORD *)&buf[22] = 2082;
          v95 = "flow";
          _os_log_impl( &dword_181A5C000,  v28,  v29,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
        }
      }

      else if (v92)
      {
        v31 = __nw_create_backtrace_string();
        if (v31)
        {
          os_log_type_t v32 = (char *)v31;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v33 = (os_log_s *)(id)gLogObj;
          dispatch_workloop_t v34 = type;
          if (os_log_type_enabled(v33, type))
          {
            else {
              v35 = off_189BBBBC0[v18];
            }
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_endpoint_flow_enable_sleep_proxy_if_needed";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v35;
            *(_WORD *)&buf[22] = 2082;
            v95 = "flow";
            *(_WORD *)v96 = 2082;
            *(void *)&v96[2] = v32;
            _os_log_impl( &dword_181A5C000,  v33,  v34,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v32);
          if (!v27)
          {
LABEL_65:

            if ((*((_BYTE *)v4 + 33) & 1) == 0 || !*((void *)v4 + 92)) {
              goto LABEL_85;
            }
            os_log_type_t v47 = 0LL;
            v48 = (const unsigned __int8 *)v4 + 376;
            do
            {
              if (!uuid_is_null(v48)) {
                os_log_type_t v47 = v48;
              }
              v48 = (const unsigned __int8 *)*((void *)v48 + 4);
            }

            while (v48);
            if (!v47) {
              goto LABEL_85;
            }
            id v49 = (void *)*((void *)v4 + 104);
            if (v49)
            {
              *(void *)buf = 0LL;
              *(void *)&buf[8] = 0LL;
              v50 = v49;
              if (!uuid_is_null(v50 + 32)) {
                *(_OWORD *)buf = *((_OWORD *)v50 + 2);
              }

              if (!uuid_compare(buf, v47)) {
                goto LABEL_85;
              }
            }

            v51 = v17;
            os_log_type_t v52 = v51[5];

            obj = nw_path_copy_flow_registration(v52, (uint64_t)v47);
            if (obj)
            {
              objc_storeStrong((id *)v4 + 104, obj);
              if (nw_endpoint_handler_get_minimize_logging(v51))
              {
                os_log_type_t v89 = v52;
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                log = (os_log_s *)(id)gconnectionLogObj;
                if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
                {
                  os_log_type_t v83 = nw_endpoint_handler_get_id_string(v51);
                  v81 = nw_endpoint_handler_dry_run_string(v51);
                  char v75 = nw_endpoint_handler_copy_endpoint(v51);
                  __uint64_t v76 = nw_endpoint_get_logging_description(v75);
                  v77 = nw_endpoint_handler_state_string(v51);
                  unint64_t v78 = nw_endpoint_handler_mode_string(v51);
                  char v79 = nw_endpoint_handler_copy_current_path(v51);
                  *(_DWORD *)buf = 136448258;
                  *(void *)&uint8_t buf[4] = "nw_endpoint_flow_connected";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v83;
                  *(_WORD *)&buf[22] = 2082;
                  v95 = v81;
                  *(_WORD *)v96 = 2082;
                  *(void *)&v96[2] = v76;
                  *(_WORD *)&v96[10] = 2082;
                  *(void *)&v96[12] = v77;
                  os_log_type_t v97 = 2082;
                  BOOL v98 = v78;
                  v99 = 2114;
                  os_log_type_t v100 = v79;
                  BOOL v101 = 1042;
                  os_log_type_t v102 = 16;
                  os_log_type_t v103 = 2098;
                  __uint64_t v104 = v47;
                  uint64_t v55 = log;
                  _os_log_impl( &dword_181A5C000,  log,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Joined protocol has updated flow id, using flow id %{public,uuid_t}.16P",  buf,  0x58u);

                  os_log_type_t v52 = v89;
                }

                else
                {
                  uint64_t v55 = log;
                }

                goto LABEL_83;
              }

              v53 = v51;
              BOOL v54 = (*((_BYTE *)v53 + 268) & 0x20) == 0;

              if (v54)
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                uint64_t v55 = (os_log_s *)(id)gconnectionLogObj;
                if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
                {
                  v56 = nw_endpoint_handler_get_id_string(v53);
                  v80 = nw_endpoint_handler_dry_run_string(v53);
                  logb = v55;
                  v88 = v52;
                  v82 = nw_endpoint_handler_copy_endpoint(v53);
                  BOOL v57 = nw_endpoint_get_logging_description(v82);
                  v58 = nw_endpoint_handler_state_string(v53);
                  v59 = nw_endpoint_handler_mode_string(v53);
                  os_log_type_t v60 = nw_endpoint_handler_copy_current_path(v53);
                  *(_DWORD *)buf = 136448258;
                  *(void *)&uint8_t buf[4] = "nw_endpoint_flow_connected";
                  *(_WORD *)&buf[12] = 2082;
                  *(void *)&buf[14] = v56;
                  *(_WORD *)&buf[22] = 2082;
                  v95 = v80;
                  *(_WORD *)v96 = 2082;
                  *(void *)&v96[2] = v57;
                  *(_WORD *)&v96[10] = 2082;
                  *(void *)&v96[12] = v58;
                  os_log_type_t v97 = 2082;
                  BOOL v98 = v59;
                  v99 = 2114;
                  os_log_type_t v100 = v60;
                  BOOL v101 = 1042;
                  os_log_type_t v102 = 16;
                  os_log_type_t v103 = 2098;
                  __uint64_t v104 = v47;
                  uint64_t v55 = logb;
                  _os_log_impl( &dword_181A5C000,  logb,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Joined protocol has updated flow id, using flow id %{public,uuid_t}.16P",  buf,  0x58u);

                  os_log_type_t v52 = v88;
                }

    id v6 = *(void *)(v91 + 32);
    if (!v6) {
      goto LABEL_47;
    }
  }

  has_protocol_in_stack = nw_parameters_has_protocol_in_stack(v87, (void *)v8);
  os_log_type_t v10 = v4;
  id v11 = *((_BYTE *)v4 + 268);

  if (!has_protocol_in_stack)
  {
    if ((v11 & 0x20) == 0)
    {
      if (v7[79] != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      os_log_type_t v12 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        os_log_type_t v13 = v10;

        os_log_type_t v14 = v13;
        id v15 = (*((_BYTE *)v4 + 268) & 1) == 0;

        if (v15) {
          int v16 = "";
        }
        else {
          int v16 = "dry-run ";
        }
        os_log_type_t v17 = nw_endpoint_handler_copy_endpoint(v14);
        os_log_type_t v18 = nw_endpoint_get_logging_description(v17);
        v88 = v17;
        os_log_type_t v19 = v14;
        BOOL v20 = v19;
        os_log_type_t v21 = v4->state;
        char v22 = "unknown-state";
        v84 = v22;

        os_log_type_t v23 = v20;
        BOOL v24 = "path";
        switch(v4->mode)
        {
          case 0:
            break;
          case 1:
            BOOL v24 = "resolver";
            break;
          case 2:
            BOOL v24 = nw_endpoint_flow_mode_string(v4->mode_handler);
            break;
          case 3:
            BOOL v24 = "proxy";
            break;
          case 4:
            BOOL v24 = "fallback";
            break;
          case 5:
            BOOL v24 = "transform";
            break;
          default:
            BOOL v24 = "unknown-mode";
            break;
        }

        BOOL v42 = v18;
        char v43 = v12;
        dispatch_workloop_t v44 = v23;
        os_unfair_lock_lock(lock);
        v45 = v4->current_path;
        uint64_t v7 = &qword_18C45F000;
        os_unfair_lock_unlock(lock);

        os_log_type_t v12 = v43;
        *(_DWORD *)buf = 136448002;
        v95 = "nw_endpoint_handler_get_listener_protocol_on_nw_queue";
        v96 = 2082;
        os_log_type_t v97 = v4->id_str;
        BOOL v98 = 2082;
        v99 = v16;
        os_log_type_t v100 = 2082;
        BOOL v101 = (void *)v42;
        os_log_type_t v102 = 2082;
        os_log_type_t v103 = v84;
        __uint64_t v104 = 2082;
        char v105 = v24;
        v106 = 2114;
        v107 = v45;
        v108 = 2082;
        __int16 v109 = v8;
        _os_log_impl( &dword_181A5C000,  v43,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Protocol %{public}s is not li stener eligible (not in request stack)",  buf,  0x52u);
      }

    free(v19);
    goto LABEL_60;
  }

  int v9 = (os_log_s *)__nwlog_obj();
  os_log_type_t v10 = type;
  if (os_log_type_enabled(v9, type))
  {
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_finalize_output_frames";
    id v11 = "%{public}s called with null protocol";
LABEL_59:
    _os_log_impl(&dword_181A5C000, v9, v10, v11, buf, 0xCu);
  }

      if (v4) {
        free(v4);
      }
      return 22LL;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v5 = (os_log_s *)gLogObj;
    id v6 = type[0];
    os_log_type_t v12 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_network_agent_add_to_interface_internal";
        uint64_t v7 = "%{public}s called with null netagent_uuid, no backtrace";
        goto LABEL_42;
      }

      goto LABEL_43;
    }

    if (!v12)
    {
LABEL_17:
      free(backtrace_string);
      goto LABEL_43;
    }

    *(_DWORD *)buf = 136446466;
    v35 = "nw_network_agent_add_to_interface_internal";
    id v36 = 2082;
    *(void *)v37 = backtrace_string;
    os_log_type_t v13 = "%{public}s called with null netagent_uuid, dumping backtrace:%{public}s";
LABEL_16:
    _os_log_impl(&dword_181A5C000, v5, v6, v13, buf, 0x16u);
    goto LABEL_17;
  }

  if (getuid())
  {
    int v8 = networkd_privileged_set_agent_on_interface_internal((const char *)a1, uu, 0, 0);
    int v9 = 0LL;
    if (!v8)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v10 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        v35 = "nw_network_agent_add_to_interface_internal";
        id v36 = 2082;
        *(void *)v37 = a1;
        *(_WORD *)&v37[8] = 2082;
        *(void *)&v37[10] = "";
        _os_log_impl( &dword_181A5C000,  v10,  OS_LOG_TYPE_ERROR,  "%{public}s networkd_privileged_set_agent_on_interface_internal(%{public}s add%{public}s) failed",  buf,  0x20u);
      }

      return 0xFFFFFFFFLL;
    }

    return v9;
  }

  os_log_type_t v14 = socket(2, 2, 0);
  if ((v14 & 0x80000000) == 0)
  {
    id v15 = v14;
    memset(&type[1], 0, 15);
    type[0] = *(os_log_type_t *)a1;
    if (type[0])
    {
      type[1] = *(os_log_type_t *)(a1 + 1);
      if (type[1])
      {
        type[2] = *(os_log_type_t *)(a1 + 2);
        if (type[2])
        {
          type[3] = *(os_log_type_t *)(a1 + 3);
          if (type[3])
          {
            type[4] = *(os_log_type_t *)(a1 + 4);
            if (type[4])
            {
              type[5] = *(os_log_type_t *)(a1 + 5);
              if (type[5])
              {
                type[6] = *(os_log_type_t *)(a1 + 6);
                if (type[6])
                {
                  type[7] = *(os_log_type_t *)(a1 + 7);
                  if (type[7])
                  {
                    type[8] = *(os_log_type_t *)(a1 + 8);
                    if (type[8])
                    {
                      type[9] = *(os_log_type_t *)(a1 + 9);
                      if (type[9])
                      {
                        type[10] = *(os_log_type_t *)(a1 + 10);
                        if (type[10])
                        {
                          type[11] = *(os_log_type_t *)(a1 + 11);
                          if (type[11])
                          {
                            type[12] = *(os_log_type_t *)(a1 + 12);
                            if (type[12])
                            {
                              type[13] = *(os_log_type_t *)(a1 + 13);
                              if (type[13]) {
                                type[14] = *(os_log_type_t *)(a1 + 14);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    os_log_type_t v41 = *(_OWORD *)uu;
    if (!ioctl(v14, 0xC02069A5uLL, type))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v22 = (os_log_s *)gLogObj;
      int v9 = 0LL;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v35 = "nw_network_agent_add_to_interface_internal";
        id v36 = 2082;
        *(void *)v37 = a1;
        _os_log_impl( &dword_181A5C000,  v22,  OS_LOG_TYPE_DEFAULT,  "%{public}s Successfully added agent to %{public}s",  buf,  0x16u);
        int v9 = 0LL;
      }

      goto LABEL_81;
    }

    int v9 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v16 = (os_log_s *)gLogObj;
    if ((_DWORD)v9 == 6)
    {
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446978;
        v35 = "nw_network_agent_add_to_interface_internal";
        id v36 = 1024;
        *(_DWORD *)v37 = v15;
        *(_WORD *)&v37[4] = 2082;
        *(void *)&v37[6] = a1;
        *(_WORD *)&v37[14] = 1024;
        *(_DWORD *)&v37[16] = 6;
        _os_log_impl( &dword_181A5C000,  v16,  OS_LOG_TYPE_ERROR,  "%{public}s ioctl(%d, SIOCAIFAGENTID) if_name=%{public}s failed %{darwin.errno}d",  buf,  0x22u);
      }

  *(void *)(*(void *)(a1[4] + 8LL) + 24LL) = v42;
  return 1LL;
}

    free(v30);
    if (!v20) {
      goto LABEL_13;
    }
    goto LABEL_69;
  }

  if ((*((_BYTE *)v5 + 72) & 1) != 0 || !*((void *)v5 + 2))
  {
    v49[0] = MEMORY[0x1895F87A8];
    v49[1] = 3221225472LL;
    v49[2] = __nw_interface_status_monitor_set_packet_event_handler_block_invoke;
    v49[3] = &unk_189BC8740;
    v50 = v7;
    dispatch_async(v6, v49);

    goto LABEL_13;
  }

  int v9 = _Block_copy(v7);
  os_log_type_t v10 = (void *)*((void *)v5 + 3);
  *((void *)v5 + 3) = v9;

  objc_storeStrong((id *)v5 + 4, a2);
  if (!*((void *)v5 + 7))
  {
    id v11 = *((void *)v5 + 2);
    os_log_type_t v12 = MEMORY[0x1895F87A8];
    v47[0] = MEMORY[0x1895F87A8];
    v47[1] = 3221225472LL;
    v47[2] = __nw_interface_status_monitor_set_packet_event_handler_block_invoke_2;
    v47[3] = &unk_189BC8808;
    v48 = v5;
    if (v11)
    {
      nw_context_assert_queue(*(void **)(v11 + 152));
      if (*(void *)(v11 + 136))
      {
        dispatch_group_enter(*(dispatch_group_t *)(v11 + 208));
        os_log_type_t v13 = *(void **)(v11 + 152);
        os_log_type_t v14 = *(_DWORD *)(v11 + 432);
        *(void *)buf = v12;
        *(void *)&buf[8] = 0x40000000LL;
        *(void *)&buf[16] = __nw_channel_create_event_source_block_invoke;
        v59 = &unk_189BC8D68;
        os_log_type_t v60 = v47;
        BOOL v61 = v11;
        *(void *)os_log_type_t type = v12;
        os_log_type_t v52 = 0x40000000LL;
        v53 = __nw_channel_create_event_source_block_invoke_8;
        BOOL v54 = &__block_descriptor_tmp_9_86802;
        uint64_t v55 = v11;
        source = nw_queue_context_create_source(v13, v14, 5, 2u, buf, type);
        nw_queue_activate_source(source, v16);
        *((void *)v5 + 7) = source;
        if (source)
        {
LABEL_11:

          goto LABEL_13;
        }
      }

      else
      {
        LODWORD(source) = 6;
        *((void *)v5 + 7) = 0LL;
      }

        if (!v23)
        {
LABEL_45:
          os_log_type_t v21 = 0LL;
          goto LABEL_46;
        }

LABEL_19:
  }

  if (v3) {
    free(v3);
  }
  return 1LL;
}

  if (v6) {
    free(v6);
  }
  return 1LL;
}

  if (v4) {
    free(v4);
  }
LABEL_2:

  return v1 != 0LL;
}

  uint64_t result = 1LL;
  if (!v6 && v7 && (handle[222] & 0x80) != 0 && *v7)
  {
    if (v4)
    {
      os_log_type_t v14 = v4->handle;
      if (v14 == &nw_protocol_ref_counted_handle)
      {
        id v15 = v4[1].callbacks;
        if (v15) {
          v4[1].callbacks = (nw_protocol_callbacks *)((char *)&v15->add_input_handler + 1);
        }
      }

      int v16 = a1->handle;
      if (v16 == &nw_protocol_ref_counted_handle)
      {
        os_log_type_t v17 = a1[1].callbacks;
        if (v17) {
          a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v17->add_input_handler + 1);
        }
      }

      os_log_type_t v18 = v4->callbacks;
      if (v18)
      {
        input_available = (void (*)(nw_protocol *, nw_protocol *))v18->input_available;
        if (input_available)
        {
          input_available(v4, a1);
LABEL_33:
          if (v16 == &nw_protocol_ref_counted_handle && a1->handle == &nw_protocol_ref_counted_handle)
          {
            uint64_t v33 = a1[1].callbacks;
            if (v33)
            {
              dispatch_workloop_t v34 = (nw_protocol_callbacks *)((char *)v33 - 1);
              a1[1].callbacks = v34;
              if (!v34)
              {
                v35 = *(void (***)(void))a1[1].flow_id;
                if (v35)
                {
                  *(void *)a1[1].flow_id = 0LL;
                  v35[2](v35);
                  _Block_release(v35);
                }

                if ((a1[1].flow_id[8] & 1) != 0)
                {
                  id v36 = *(const void **)a1[1].flow_id;
                  if (v36) {
                    _Block_release(v36);
                  }
                }

                free(a1);
              }
            }
          }

          if (v14 == &nw_protocol_ref_counted_handle && v4->handle == &nw_protocol_ref_counted_handle)
          {
            v37 = v4[1].callbacks;
            if (v37)
            {
              v38 = (nw_protocol_callbacks *)((char *)v37 - 1);
              v4[1].callbacks = v38;
              if (!v38)
              {
                os_log_type_t v39 = *(void (***)(void))v4[1].flow_id;
                if (v39)
                {
                  *(void *)v4[1].flow_id = 0LL;
                  v39[2](v39);
                  _Block_release(v39);
                }

                if ((v4[1].flow_id[8] & 1) != 0)
                {
                  v40 = *(const void **)v4[1].flow_id;
                  if (v40) {
                    _Block_release(v40);
                  }
                }

                free(v4);
              }
            }
          }

          BOOL v20 = v4->callbacks;
          if (!v20) {
            return 1LL;
          }
          input_flush = (void (*)(nw_protocol *, nw_protocol *))v20->input_flush;
          if (!input_flush) {
            return 1LL;
          }
          char v22 = v4->handle;
          if (v22 == &nw_protocol_ref_counted_handle)
          {
            os_log_type_t v23 = v4[1].callbacks;
            if (v23) {
              v4[1].callbacks = (nw_protocol_callbacks *)((char *)&v23->add_input_handler + 1);
            }
          }

          if (a1->handle == &nw_protocol_ref_counted_handle)
          {
            os_log_type_t v32 = a1[1].callbacks;
            if (v32) {
              a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v32->add_input_handler + 1);
            }
            input_flush(v4, a1);
            if (a1->handle == &nw_protocol_ref_counted_handle)
            {
              os_log_type_t v41 = a1[1].callbacks;
              if (v41)
              {
                BOOL v42 = (nw_protocol_callbacks *)((char *)v41 - 1);
                a1[1].callbacks = v42;
                if (!v42)
                {
                  char v43 = *(void (***)(void))a1[1].flow_id;
                  if (v43)
                  {
                    *(void *)a1[1].flow_id = 0LL;
                    v43[2](v43);
                    _Block_release(v43);
                  }

                  if ((a1[1].flow_id[8] & 1) != 0)
                  {
                    dispatch_workloop_t v44 = *(const void **)a1[1].flow_id;
                    if (v44) {
                      _Block_release(v44);
                    }
                  }

                  free(a1);
                }
              }
            }
          }

          else
          {
            input_flush(v4, a1);
          }

          if (v22 != &nw_protocol_ref_counted_handle) {
            return 1LL;
          }
          if (v4->handle != &nw_protocol_ref_counted_handle) {
            return 1LL;
          }
          v45 = v4[1].callbacks;
          if (!v45) {
            return 1LL;
          }
          os_log_type_t v46 = (nw_protocol_callbacks *)((char *)v45 - 1);
          v4[1].callbacks = v46;
          if (v46) {
            return 1LL;
          }
          os_log_type_t v47 = *(void (***)(void))v4[1].flow_id;
          if (v47)
          {
            *(void *)v4[1].flow_id = 0LL;
            v47[2](v47);
            _Block_release(v47);
          }

          if ((v4[1].flow_id[8] & 1) != 0)
          {
            v48 = *(const void **)v4[1].flow_id;
            if (v48) {
              _Block_release(v48);
            }
          }

          goto LABEL_98;
        }
      }

      __nwlog_obj();
      name = v4->identifier->name;
      *(_DWORD *)buf = 136446722;
      v82 = "__nw_protocol_input_available";
      if (!name) {
        name = "invalid";
      }
      os_log_type_t v83 = 2082;
      v84 = (void *)name;
      v85 = 2048;
      v86 = v4;
      v58 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v79 = 0;
      if (__nwlog_fault(v58, &type, &v79))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v59 = (os_log_s *)__nwlog_obj();
          os_log_type_t v60 = type;
          if (!os_log_type_enabled(v59, type)) {
            goto LABEL_181;
          }
          BOOL v61 = v4->identifier->name;
          if (!v61) {
            BOOL v61 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          v82 = "__nw_protocol_input_available";
          os_log_type_t v83 = 2082;
          v84 = (void *)v61;
          v85 = 2048;
          v86 = v4;
          v62 = "%{public}s protocol %{public}s (%p) has invalid input_available callback";
          goto LABEL_180;
        }

        if (!v79)
        {
          v59 = (os_log_s *)__nwlog_obj();
          os_log_type_t v60 = type;
          if (!os_log_type_enabled(v59, type)) {
            goto LABEL_181;
          }
          v77 = v4->identifier->name;
          if (!v77) {
            v77 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          v82 = "__nw_protocol_input_available";
          os_log_type_t v83 = 2082;
          v84 = (void *)v77;
          v85 = 2048;
          v86 = v4;
          v62 = "%{public}s protocol %{public}s (%p) has invalid input_available callback, backtrace limit exceeded";
          goto LABEL_180;
        }

        v72 = (char *)__nw_create_backtrace_string();
        v59 = (os_log_s *)__nwlog_obj();
        os_log_type_t v60 = type;
        __uint64_t v73 = os_log_type_enabled(v59, type);
        if (v72)
        {
          if (v73)
          {
            if (v4->identifier) {
              unint64_t v74 = v4->identifier->name;
            }
            else {
              unint64_t v74 = "invalid";
            }
            *(_DWORD *)buf = 136446978;
            v82 = "__nw_protocol_input_available";
            os_log_type_t v83 = 2082;
            v84 = (void *)v74;
            v85 = 2048;
            v86 = v4;
            os_log_type_t v87 = 2082;
            v88 = v72;
            _os_log_impl( &dword_181A5C000,  v59,  v60,  "%{public}s protocol %{public}s (%p) has invalid input_available callback, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v72);
          goto LABEL_181;
        }

        if (v73)
        {
          unint64_t v78 = v4->identifier->name;
          if (!v78) {
            unint64_t v78 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          v82 = "__nw_protocol_input_available";
          os_log_type_t v83 = 2082;
          v84 = (void *)v78;
          v85 = 2048;
          v86 = v4;
          v62 = "%{public}s protocol %{public}s (%p) has invalid input_available callback, no backtrace";
LABEL_180:
          _os_log_impl(&dword_181A5C000, v59, v60, v62, buf, 0x20u);
        }
      }

  if (v3) {
    free(v3);
  }
  return 22LL;
}

  if (v3) {
    free(v3);
  }
  return 0LL;
}

  if (v11) {
    free(v11);
  }
  return v9;
}

  if (v12) {
    free(v12);
  }
  return v11;
}

        v31 = v17;
        id v15 = __clz(__rbit64(v16)) + (v17 << 6);
LABEL_20:
        os_log_type_t v19 = v32;
        sub_181BC9248( *(void *)(v8 + 48) + *(void *)(v4 + 72) * v15,  v32,  type metadata accessor for NWBrowser.Result.Change);
        sub_18264F648();
        sub_181BC9248(v19, v14, type metadata accessor for NWBrowser.Result.Change);
        BOOL v20 = (char *)&loc_181BD41AC + *((int *)qword_181BD43C0 + swift_getEnumCaseMultiPayload());
        __asm { BR              X9 }
      }
    }
  }

        os_log_type_t v14 = __clz(__rbit64(v15)) + (v16 << 6);
LABEL_20:
        os_log_type_t v18 = v32;
        sub_181BC928C( *(void *)(v30 + 48) + *(void *)(v4 + 72) * v14,  v32,  type metadata accessor for NWBrowser.Result.Change);
        sub_18264F648();
        sub_181BC9248(v18, v31, type metadata accessor for NWBrowser.Result.Change);
        os_log_type_t v19 = (char *)&loc_181BD49EC + *((int *)qword_181BD4C30 + swift_getEnumCaseMultiPayload());
        __asm { BR              X9 }
      }
    }
  }

    int v8 = (v8 & 0xFFFFFFFFFFFF0000LL) + 65540;
LABEL_24:
    if (v13 == 10 || v13 == 13) {
      return v9 == v5;
    }
  }

  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

      int v8 = (v8 & 0xFFFFFFFFFFFF0000LL) + 65540;
LABEL_24:
      switch(v13)
      {
        case '!':
        case '#':
        case '$':
        case '%':
        case '&':
        case '\'':
        case '*':
        case '+':
        case '-':
        case '.':
        case '^':
        case '_':
        case '|':
        case '~':
          goto LABEL_25;
        default:
          if ((v13 - 58) <= 0xF5u
            && (v13 - 91) <= 0xE5u
            && (v13 - 123) < 0xE6u)
          {
            return 0LL;
          }

        BOOL v54 = v61;
        sub_181BDA0F0((uint64_t)&v124, &qword_18C58D638);
        v53 = v121;
        if (!*((void *)&v127 + 1))
        {
          sub_181BDA0F0((uint64_t)&v126, &qword_18C58D638);
          v99 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
          v123[0] = 0LL;
          os_log_type_t v100 =  objc_msgSend( v99,  sel_URLForDirectory_inDomain_appropriateForURL_create_error_,  13,  1,  0,  1,  v123);

          BOOL v101 = v123[0];
          if (!v100)
          {
            os_log_type_t v103 = v123[0];
            sub_18264E4E4();

            goto LABEL_35;
          }

          sub_18264E538();
          os_log_type_t v102 = v101;

          goto LABEL_21;
        }

  _Block_release(a3);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

  __break(1u);
  return result;
}

  os_log_type_t v14 = a5;
  os_log_type_t v10 = *(void *)(a5 + 40);
  int v9 = *(void *)(a5 + 48);
  if ((sub_181BCE7EC(v10, v9) & 1) == 0)
  {
LABEL_23:
    os_log_type_t v18 = v26;
    sub_181BCEDC8(v26);
    sub_181C9460C(v10, v9, v18, a1, a2, a7);
    goto LABEL_24;
  }

  BOOL v24 = v10;
  os_log_type_t v25 = v9;
  os_log_type_t v18 = v26;
  sub_181BCEDC8(v26);
  sub_181BCEDC8(v18);
  sub_181BCEDC8(v18);
  swift_bridgeObjectRetain();
  sub_181BCEBBC((uint64_t *)&v24, v18, a1, a2, a7);
  if (v20)
  {
    sub_181BCEE10(v18);
    sub_181BCEE10(v18);
    swift_bridgeObjectRelease();
    __break(1u);
    JUMPOUT(0x181C95530LL);
  }

  swift_bridgeObjectRelease();
  sub_181BCEE10(v18);
  sub_181BCEE10(v18);
LABEL_24:
  sub_181BCEE10(v14);
  return sub_181BCEE10(v18);
}

  if (v4 != v7) {
    goto LABEL_21;
  }
  int v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

  if (v3) {
    free(v3);
  }
  return 0LL;
}

    operator delete(v31[0]);
    if ((v30 & 0x80000000) == 0)
    {
LABEL_8:
      if ((v28 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_21;
    }

    int v9 = 0;
    int v8 = 1;
    goto LABEL_20;
  }

  if (v2[4] == 29545 && *((_BYTE *)v2 + 10) == 111)
  {
    os_log_type_t v19 = *((unsigned __int8 *)v2 + 11);
    if (v19 == 109 || v19 == 50) {
      goto LABEL_107;
    }
    goto LABEL_19;
  }

  if (v2[4] != 13389 || *((_BYTE *)v2 + 10) != 86)
  {
    if (*((_DWORD *)v2 + 2) == 541144141)
    {
      id v6 = 9;
      *(_BYTE *)(result + 23) = 9;
      *(_WORD *)(result + 8) = 52;
      os_log_type_t v14 = "audio/mp4";
      goto LABEL_65;
    }

    if (v2[4] == 26419)
    {
      if (v2[5] == 24882)
      {
        id v6 = 11;
        *(_BYTE *)(result + 23) = 11;
        *(_DWORD *)(result + 7) = 846229607;
        id v15 = "video/3gpp2";
        goto LABEL_75;
      }

      if (*((unsigned __int8 *)v2 + 10) - 101 <= 0xE
        && (*((_BYTE *)v2 + 11) & 0xFC) == 0x34
        && (v2[5] == 13925
         || v2[5] == 14181
         || v2[5] == 13927
         || v2[5] == 13424
         || v2[5] == 13680
         || v2[5] == 13936
         || v2[5] == 13938
         || v2[5] == 13939
         || v2[5] == 14195))
      {
        id v6 = 10;
        *(_BYTE *)(result + 23) = 10;
        *(_WORD *)(result + 8) = 28784;
        os_log_type_t v12 = "video/3gpp";
        goto LABEL_35;
      }
    }

    goto LABEL_19;
  }

  int v9 = 0;
  int v8 = 1;
  BOOL v20 = *((unsigned __int8 *)v2 + 11) - 32;
  if (v20 <= 0x30 && ((1LL << v20) & 0x1010000000001LL) != 0)
  {
    id v6 = 9;
    *(_BYTE *)(result + 23) = 9;
    *(_WORD *)(result + 8) = 118;
    os_log_type_t v14 = "video/m4v";
    goto LABEL_65;
  }

  if (v7) {
    free(v7);
  }
  return 0;
}

  if (v9) {
    free(v9);
  }
LABEL_3:
}

  if (v9) {
    free(v9);
  }
LABEL_3:
}

    free(v11);
    goto LABEL_20;
  }

    if (v10) {
      free(v10);
    }
    LODWORD(v9) = -1;
  }

  int v16 = *(_DWORD *)(a1 + 76);
  if (v9 <= v16)
  {
    os_log_type_t v21 = *(void *)(*(void *)(a1 + 40) + 8LL);
    char v22 = *(_DWORD *)(v21 + 24);
    *(_DWORD *)(v21 + 24) = v22 + v6;
    if (!__CFADD__(v22, v6)) {
      goto LABEL_81;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v23 = *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    *(_DWORD *)buf = 136446978;
    __int16 v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
    uint64_t v112 = 2082;
    *(void *)__int16 v113 = "bytes_count";
    *(_WORD *)&v113[8] = 2048;
    v114 = v6;
    *(_WORD *)uint64_t v115 = 2048;
    *(void *)&v115[2] = v23;
    BOOL v24 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    __int16 v109 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v24, type, &v109))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v25 = (os_log_s *)v8[131];
        uint64_t v26 = type[0];
        if (os_log_type_enabled(v25, type[0]))
        {
          char v27 = *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
          *(_DWORD *)buf = 136446978;
          __int16 v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
          uint64_t v112 = 2082;
          *(void *)__int16 v113 = "bytes_count";
          *(_WORD *)&v113[8] = 2048;
          v114 = v6;
          *(_WORD *)uint64_t v115 = 2048;
          *(void *)&v115[2] = v27;
          os_log_type_t v28 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_77:
          _os_log_impl(&dword_181A5C000, v25, v26, v28, buf, 0x2Au);
        }
      }

      else if (v109)
      {
        os_log_type_t v30 = v8;
        v31 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v32 = v30;
        os_log_type_t v25 = (os_log_s *)v30[131];
        uint64_t v26 = type[0];
        uint64_t v33 = os_log_type_enabled(v25, type[0]);
        if (v31)
        {
          if (v33)
          {
            dispatch_workloop_t v34 = *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
            *(_DWORD *)buf = 136447234;
            __int16 v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
            uint64_t v112 = 2082;
            *(void *)__int16 v113 = "bytes_count";
            *(_WORD *)&v113[8] = 2048;
            v114 = v6;
            *(_WORD *)uint64_t v115 = 2048;
            *(void *)&v115[2] = v34;
            v116 = 2082;
            v117 = v31;
            _os_log_impl( &dword_181A5C000,  v25,  v26,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
          }

          free(v31);
          int v8 = v32;
          goto LABEL_78;
        }

        int v8 = v32;
        if (v33)
        {
          os_log_type_t v63 = *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
          *(_DWORD *)buf = 136446978;
          __int16 v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
          uint64_t v112 = 2082;
          *(void *)__int16 v113 = "bytes_count";
          *(_WORD *)&v113[8] = 2048;
          v114 = v6;
          *(_WORD *)uint64_t v115 = 2048;
          *(void *)&v115[2] = v63;
          os_log_type_t v28 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
          goto LABEL_77;
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v25 = (os_log_s *)v8[131];
        uint64_t v26 = type[0];
        if (os_log_type_enabled(v25, type[0]))
        {
          v62 = *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
          *(_DWORD *)buf = 136446978;
          __int16 v111 = "__nw_protocol_fulfill_frame_request_block_invoke";
          uint64_t v112 = 2082;
          *(void *)__int16 v113 = "bytes_count";
          *(_WORD *)&v113[8] = 2048;
          v114 = v6;
          *(_WORD *)uint64_t v115 = 2048;
          *(void *)&v115[2] = v62;
          os_log_type_t v28 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
          goto LABEL_77;
        }
      }
    }

  if (v6) {
    free(v6);
  }
}
}

  if (v3) {
    free(v3);
  }
  return 0LL;
}

    goto LABEL_20;
  }

  int v9 = 1LL;
LABEL_21:

  return v9;
}

  __break(1u);
}
    }

    goto LABEL_20;
  }

  switch(a2)
  {
    case 1u:
      if (!nw_parameters_get_logging_disabled(*((void *)v8 + 7)))
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
        }
        int v16 = (os_log_s *)(id)gconnection_groupLogObj;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          os_log_type_t v18 = v13[42];
          *(_DWORD *)v135 = 136446722;
          *(void *)&v135[4] = "nw_connection_group_handle_connection_state_changed";
          *(_WORD *)&v135[12] = 1024;
          *(_DWORD *)&v135[14] = v18;
          *(_WORD *)&v135[18] = 2112;
          *(void *)&v135[20] = v14;
          _os_log_impl( &dword_181A5C000,  v16,  OS_LOG_TYPE_DEFAULT,  "%{public}s [G%u] connection %@ in waiting state",  v135,  0x1Cu);
        }

        goto LABEL_19;
      }

      goto LABEL_20;
    case 2u:
      if ((int)v13[10] <= 2)
      {
        if (!nw_parameters_get_logging_disabled(*((void *)v8 + 7)))
        {
          if (__nwlog_connection_group_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
          }
          v38 = (os_log_s *)(id)gconnection_groupLogObj;
          if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
          {
            os_log_type_t v39 = v13[42];
            *(_DWORD *)v135 = 136446722;
            *(void *)&v135[4] = "nw_connection_group_handle_connection_state_changed";
            *(_WORD *)&v135[12] = 1024;
            *(_DWORD *)&v135[14] = v39;
            *(_WORD *)&v135[18] = 2112;
            *(void *)&v135[20] = v14;
            _os_log_impl( &dword_181A5C000,  v38,  OS_LOG_TYPE_DEBUG,  "%{public}s [G%u] connection %@ in preparing state",  v135,  0x1Cu);
          }
        }

        v40 = (void *)*((void *)v13 + 8);
        if (v40)
        {
          os_log_type_t v41 = v40;
          BOOL v42 = v41[2];

          if (v42 == 2 && (*((_BYTE *)v13 + 190) & 4) != 0)
          {
            *(void *)v135 = MEMORY[0x1895F87A8];
            *(void *)&v135[8] = 3221225472LL;
            *(void *)&v135[16] = ___ZL51nw_connection_group_handle_connection_state_changedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection21nw_connection_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_132;
            *(void *)&v135[24] = &unk_189BC9238;
            *(void *)&v135[32] = v13;
            v136 = (uint64_t *)v14;
            char v43 = _Block_copy(v135);
            *(void *)v131 = v43;
            nw_synchronize<void({block_pointer} {__strong})(void)>((os_unfair_lock_s *)v8 + 43, (uint64_t)v131);
          }
        }
      }

      goto LABEL_20;
    case 3u:
      if (!nw_parameters_get_logging_disabled(*((void *)v8 + 7)))
      {
        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
        }
        os_log_type_t v19 = (os_log_s *)(id)gconnection_groupLogObj;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          BOOL v20 = v13[42];
          *(_DWORD *)v135 = 136446722;
          *(void *)&v135[4] = "nw_connection_group_handle_connection_state_changed";
          *(_WORD *)&v135[12] = 1024;
          *(_DWORD *)&v135[14] = v20;
          *(_WORD *)&v135[18] = 2112;
          *(void *)&v135[20] = v14;
          _os_log_impl( &dword_181A5C000,  v19,  OS_LOG_TYPE_DEBUG,  "%{public}s [G%u] connection %@ in ready state",  v135,  0x1Cu);
        }
      }

      os_log_type_t v21 = (void *)*((void *)v13 + 8);
      if (v21)
      {
        char v22 = v21;
        os_log_type_t v23 = v22[2];

        if (v23 == 2)
        {
          aBlock[0] = MEMORY[0x1895F87A8];
          aBlock[1] = 3221225472LL;
          aBlock[2] = ___ZL51nw_connection_group_handle_connection_state_changedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection21nw_connection_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_133;
          aBlock[3] = &unk_189BC9238;
          v116 = v13;
          v117 = v14;
          BOOL v24 = _Block_copy(aBlock);
          v118 = v24;
          nw_synchronize<void({block_pointer} {__strong})(void)>((os_unfair_lock_s *)v8 + 43, (uint64_t)&v118);
        }
      }

      v108 = 0LL;
      __int16 v109 = 0LL;
      __uint64_t v110 = &v109;
      __int16 v111 = 0x3032000000LL;
      uint64_t v112 = __Block_byref_object_copy__134;
      __int16 v113 = __Block_byref_object_dispose__135;
      v114 = 0LL;
      os_log_type_t v103 = 0LL;
      __uint64_t v104 = &v103;
      char v105 = 0x3032000000LL;
      v106 = __Block_byref_object_copy__134;
      v107 = __Block_byref_object_dispose__135;
      *(void *)v135 = MEMORY[0x1895F87A8];
      *(void *)&v135[8] = 3221225472LL;
      *(void *)&v135[16] = ___ZL51nw_connection_group_handle_connection_state_changedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection21nw_connection_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_136;
      *(void *)&v135[24] = &unk_189BC16A8;
      v136 = &v109;
      os_log_type_t v25 = v13;
      *(void *)&v135[32] = v25;
      v137 = &v103;
      uint64_t v26 = (void (**)(void))_Block_copy(v135);
      os_unfair_lock_lock((os_unfair_lock_t)v8 + 43);
      v26[2](v26);
      os_unfair_lock_unlock((os_unfair_lock_t)v8 + 43);

      if (!v110[5])
      {
        if (v104[5]) {
          goto LABEL_135;
        }
        v99 = 0LL;
        os_log_type_t v100 = &v99;
        os_log_type_t v102 = 0;
        BOOL v101 = 0x2020000000LL;
        v95 = 0LL;
        v96 = &v95;
        os_log_type_t v97 = 0x2020000000LL;
        BOOL v98 = 0;
        *(void *)v131 = MEMORY[0x1895F87A8];
        *(void *)&v131[8] = 3221225472LL;
        *(void *)&v131[16] = ___ZL51nw_connection_group_handle_connection_state_changedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection21nw_connection_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_137;
        *(void *)&v131[24] = &unk_189BC16A8;
        v133 = &v99;
        os_log_type_t v46 = v25;
        v132 = v46;
        v134 = &v95;
        os_log_type_t v47 = _Block_copy(v131);
        v94 = v47;
        nw_synchronize<void({block_pointer} {__strong})(void)>((os_unfair_lock_s *)v8 + 43, (uint64_t)&v94);

        if (!*((_BYTE *)v96 + 24) || (*((_DWORD *)v100 + 6) - 1) > 1)
        {
          if (!nw_parameters_get_logging_disabled(*((void *)v8 + 7)))
          {
            if (__nwlog_connection_group_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
            }
            BOOL v54 = (os_log_s *)(id)gconnection_groupLogObj;
            if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
            {
              uint64_t v55 = v46[42];
              v123 = 136446722;
              v124 = "nw_connection_group_handle_connection_state_changed";
              v125 = 1024;
              v126 = v55;
              v127 = 2112;
              v128 = v14;
              _os_log_impl( &dword_181A5C000,  v54,  OS_LOG_TYPE_INFO,  "%{public}s [G%u] connection %@ ready, not reading because there is no receive handler",  (uint8_t *)&v123,  0x1Cu);
            }
          }

          goto LABEL_134;
        }

        if (nw_parameters_get_logging_disabled(*((void *)v8 + 7)))
        {
LABEL_134:

          _Block_object_dispose(&v95, 8);
          _Block_object_dispose(&v99, 8);
          goto LABEL_135;
        }

        if (__nwlog_connection_group_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
        }
        v48 = (id)gconnection_groupLogObj;
        id v49 = v46[42];
        v123 = 136446722;
        v124 = "nw_connection_group_handle_connection_state_changed";
        v125 = 1024;
        v126 = v49;
        v127 = 2112;
        v128 = v14;
        v50 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        v92 = 0;
        if (__nwlog_fault(v50, &type, &v92))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            if (__nwlog_connection_group_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
            }
            v51 = (os_log_s *)(id)gconnection_groupLogObj;
            os_log_type_t v52 = type;
            if (os_log_type_enabled(v51, type))
            {
              v53 = v46[42];
              v123 = 136446722;
              v124 = "nw_connection_group_handle_connection_state_changed";
              v125 = 1024;
              v126 = v53;
              v127 = 2112;
              v128 = v14;
              _os_log_impl( &dword_181A5C000,  v51,  v52,  "%{public}s [G%u] group started and connection %@ ready, not reading because there is no receive handler",  (uint8_t *)&v123,  0x1Cu);
            }
          }

          else if (v92)
          {
            v56 = __nw_create_backtrace_string();
            if (v56)
            {
              BOOL v57 = (char *)v56;
              if (__nwlog_connection_group_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
              }
              v58 = (os_log_s *)(id)gconnection_groupLogObj;
              v59 = type;
              if (os_log_type_enabled(v58, type))
              {
                os_log_type_t v60 = v46[42];
                v123 = 136446978;
                v124 = "nw_connection_group_handle_connection_state_changed";
                v125 = 1024;
                v126 = v60;
                v127 = 2112;
                v128 = v14;
                v129 = 2082;
                v130 = v57;
                _os_log_impl( &dword_181A5C000,  v58,  v59,  "%{public}s [G%u] group started and connection %@ ready, not reading because there is no receive handle r, dumping backtrace:%{public}s",  (uint8_t *)&v123,  0x26u);
              }

              free(v57);
              goto LABEL_132;
            }

            if (__nwlog_connection_group_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
            }
            v51 = (os_log_s *)(id)gconnection_groupLogObj;
            os_log_type_t v71 = type;
            if (os_log_type_enabled(v51, type))
            {
              v72 = v46[42];
              v123 = 136446722;
              v124 = "nw_connection_group_handle_connection_state_changed";
              v125 = 1024;
              v126 = v72;
              v127 = 2112;
              v128 = v14;
              _os_log_impl( &dword_181A5C000,  v51,  v71,  "%{public}s [G%u] group started and connection %@ ready, not reading because there is no receive handler, no backtrace",  (uint8_t *)&v123,  0x1Cu);
            }
          }

          else
          {
            if (__nwlog_connection_group_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
            }
            v51 = (os_log_s *)(id)gconnection_groupLogObj;
            BOOL v61 = type;
            if (os_log_type_enabled(v51, type))
            {
              v62 = v46[42];
              v123 = 136446722;
              v124 = "nw_connection_group_handle_connection_state_changed";
              v125 = 1024;
              v126 = v62;
              v127 = 2112;
              v128 = v14;
              _os_log_impl( &dword_181A5C000,  v51,  v61,  "%{public}s [G%u] group started and connection %@ ready, not reading because there is no receive handler, backtrace limit exceeded",  (uint8_t *)&v123,  0x1Cu);
            }
          }
        }

              if (v6 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
              {
                int v16 = *(void *)(a1 + 88);
                if (v16)
                {
                  os_log_type_t v17 = v16 - 1;
                  *(void *)(a1 + 88) = v17;
                  if (!v17)
                  {
                    os_log_type_t v18 = *(void (***)(void))(a1 + 64);
                    if (v18)
                    {
                      *(void *)(a1 + 64) = 0LL;
                      v18[2](v18);
                      _Block_release(v18);
                    }

                    if ((*(_BYTE *)(a1 + 72) & 1) != 0)
                    {
                      os_log_type_t v19 = *(const void **)(a1 + 64);
                      if (v19) {
                        _Block_release(v19);
                      }
                    }

                    free((void *)a1);
                  }
                }
              }

              return v14;
            }

  if (v2) {
    free(v2);
  }
}

  if (v3) {
    free(v3);
  }
  return 0LL;
}

  if (v3) {
    free(v3);
  }
  return 1LL;
}

  if (v3) {
    free(v3);
  }
  return 1LL;
}

  v6[102] = v11;
  *((_BYTE *)v6 + 824) = v12 | 1;
  os_log_type_t v14 = (dispatch_object_s *)nw_parameters_copy_context(a4);
  id v15 = *((_BYTE *)v6 + 840);
  if ((v15 & 1) != 0)
  {
    int v16 = v6[104];
    if (v16)
    {
      os_release(v16);
      id v15 = *((_BYTE *)v6 + 840);
    }
  }

  v6[104] = v14;
  *((_BYTE *)v6 + 840) = v15 | 1;
  os_log_type_t v17 = *((_BYTE *)v6 + 856);
  if ((v17 & 1) != 0)
  {
    os_log_type_t v18 = v6[106];
    if (v18)
    {
      os_release(v18);
      os_log_type_t v17 = *((_BYTE *)v6 + 856);
    }
  }

  v6[106] = 0LL;
  *((_BYTE *)v6 + 856) = v17 | 1;
  *((_WORD *)v6 + 531) &= ~1u;
  else {
    os_log_type_t v19 = 0;
  }
  *((_WORD *)v6 + 531) = *((_WORD *)v6 + 531) & 0xFFFD | v19;
  BOOL v20 = *((_BYTE *)v6 + 696);
  if ((v20 & 1) != 0)
  {
    os_log_type_t v21 = v6[86];
    if (v21)
    {
      os_release(v21);
      BOOL v20 = *((_BYTE *)v6 + 696);
    }
  }

  v6[86] = 0LL;
  *((_BYTE *)v6 + 696) = v20 | 1;
  if (nw_protocol_copy_http_authentication_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_29_72963);
  }
  char v22 = (id)nw_protocol_copy_http_authentication_definition_http_authentication_definition;
  os_log_type_t v23 = nw_parameters_copy_protocol_options_for_definition(a4, v22);
  BOOL v24 = v23;
  if (v23)
  {
    os_log_type_t v25 = v23;
    uint64_t v26 = nw_protocol_options_copy_definition(v25);
    __uint64_t v110 = v24;
    __int16 v111 = v22;
    if (nw_protocol_copy_http_authentication_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_29_72963);
    }
    is_equal = nw_protocol_definition_is_equal( v26,  (nw_protocol_definition_t)nw_protocol_copy_http_authentication_definition_http_authentication_definition);

    if (is_equal)
    {
      *(void *)buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      v119 = (uint64_t)__Block_byref_object_copy__72694;
      v120 = __Block_byref_object_dispose__72695;
      v121 = 0LL;
      os_log_type_t v28 = MEMORY[0x1895F87A8];
      *(void *)os_log_type_t type = MEMORY[0x1895F87A8];
      __int16 v113 = 3221225472LL;
      v114 = __nw_http_authentication_options_copy_challenge_handler_block_invoke;
      uint64_t v115 = &unk_189BC60A8;
      v116 = buf;
      nw_protocol_options_access_handle(v25, type);
      objc_super v29 = (dispatch_object_s *)_Block_copy(*(const void **)(*(void *)&buf[8] + 40LL));
      _Block_object_dispose(buf, 8);

      goto LABEL_38;
    }

    os_log_type_t v28 = MEMORY[0x1895F87A8];
    __nwlog_obj();
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_challenge_handler";
    __uint64_t v73 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v117 = 0;
    if (__nwlog_fault(v73, type, &v117))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        unint64_t v74 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v75 = type[0];
        if (os_log_type_enabled(v74, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_challenge_handler";
          _os_log_impl(&dword_181A5C000, v74, v75, "%{public}s protocol options are not http authentication", buf, 0xCu);
        }
      }

      else if (v117)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        unint64_t v74 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v107 = type[0];
        v93 = os_log_type_enabled(v74, type[0]);
        if (backtrace_string)
        {
          if (v93)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_challenge_handler";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v74,  v107,  "%{public}s protocol options are not http authentication, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_182;
        }

        if (v93)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_challenge_handler";
          _os_log_impl( &dword_181A5C000,  v74,  v107,  "%{public}s protocol options are not http authentication, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        unint64_t v74 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v101 = type[0];
        if (os_log_type_enabled(v74, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_authentication_options_copy_challenge_handler";
          _os_log_impl( &dword_181A5C000,  v74,  v101,  "%{public}s protocol options are not http authentication, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

  if (v10) {
    free(v10);
  }
LABEL_3:

  return v6;
}

  if (v4) {
    free(v4);
  }
  return 0LL;
}

LABEL_20:
    id v11 = v2[15];
LABEL_21:

    return v11;
  }

  int v9 = strdup(v8);
  if (v9)
  {
LABEL_15:
    v2[15] = v9;
    goto LABEL_16;
  }

  __nwlog_obj();
  os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  uint64_t v26 = "strict_strdup";
  char v22 = (void *)_os_log_send_and_compose_impl();

  uint64_t result = __nwlog_abort((uint64_t)v22);
  if (!result)
  {
    free(v22);
    goto LABEL_15;
  }

  __break(1u);
  return result;
}

  if (v4) {
    free(v4);
  }
  return 0LL;
}

  if (v3) {
    free(v3);
  }
  return 0LL;
}

  if (v4) {
    free(v4);
  }
LABEL_2:

  return 0LL;
}

  if (v4) {
    free(v4);
  }
LABEL_2:

  return 0LL;
}

  if (v4) {
    free(v4);
  }
LABEL_2:

  return 0LL;
}

  if (v4) {
    free(v4);
  }
LABEL_2:

  return 0LL;
}

  if (v3) {
    free(v3);
  }
LABEL_2:
}

  [MEMORY[0x189607968] numberWithBool:self->_networkProvider];
  id v15 = (void *)objc_claimAutoreleasedReturnValue();
  [v3 setObject:v15 forKey:@"networkProvider"];

  if ((*(_BYTE *)&self->_has & 4) != 0)
  {
LABEL_12:
    [MEMORY[0x189607968] numberWithBool:self->_nexusProvider];
    int v9 = (void *)objc_claimAutoreleasedReturnValue();
    [v3 setObject:v9 forKey:@"nexusProvider"];
  }

  PBDataWriterWriteBOOLField();
  int v4 = v6;
  if ((*(_BYTE *)&self->_has & 4) != 0)
  {
LABEL_12:
    PBDataWriterWriteBOOLField();
    int v4 = v6;
  }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = a2;
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v52 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v13 = (os_log_s *)gLogObj;
      os_log_type_t v14 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = a2;
        id v15 = "%{public}s Protocol %p isn't an input handler of http client bottom";
LABEL_59:
        os_log_type_t v39 = v13;
        v40 = v14;
        os_log_type_t v41 = 22;
LABEL_60:
        _os_log_impl(&dword_181A5C000, v39, v40, v15, buf, v41);
      }
    }

    else if (v52)
    {
      int v16 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v13 = (os_log_s *)gLogObj;
      os_log_type_t v14 = type;
      os_log_type_t v17 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v16)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = a2;
          *(_WORD *)&buf[22] = 2082;
          uint64_t v55 = v16;
          _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s Protocol %p isn't an input handler of http client bottom, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(v16);
        goto LABEL_61;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = a2;
        id v15 = "%{public}s Protocol %p isn't an input handler of http client bottom, no backtrace";
        goto LABEL_59;
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v13 = (os_log_s *)gLogObj;
      os_log_type_t v14 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_client_bottom_connect";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = a2;
        id v15 = "%{public}s Protocol %p isn't an input handler of http client bottom, backtrace limit exceeded";
        goto LABEL_59;
      }
    }

    free(v9);
    goto LABEL_20;
  }

      return;
    }

    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nwphRunProbes";
    BOOL v20 = _os_log_send_and_compose_impl();
    os_log_type_t v21 = v11;
    char v22 = (void *)v20;

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v28 = 0;
    if (!__nwlog_fault((const char *)v22, &type, &v28))
    {
LABEL_36:
      if (v22) {
        free(v22);
      }
      goto LABEL_19;
    }

    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nwphRunProbes";
        os_log_type_t v25 = "%{public}s called with null transaction";
LABEL_34:
        _os_log_impl(&dword_181A5C000, v23, v24, v25, buf, 0xCu);
      }
    }

    else
    {
      if (v28)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v24 = type;
        char v27 = os_log_type_enabled(v23, type);
        if (backtrace_string)
        {
          if (v27)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nwphRunProbes";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v23,  v24,  "%{public}s called with null transaction, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_36;
        }

        if (!v27) {
          goto LABEL_35;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nwphRunProbes";
        os_log_type_t v25 = "%{public}s called with null transaction, no backtrace";
        goto LABEL_34;
      }

      __nwlog_obj();
      os_log_type_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nwphRunProbes";
        os_log_type_t v25 = "%{public}s called with null transaction, backtrace limit exceeded";
        goto LABEL_34;
      }
    }

        goto LABEL_20;
      }

      if (!v24)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v8 = (os_log_s *)(id)gLogObj;
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          char v27 = "nw_connection_tls_apply";
          _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s nw_connection_tls_apply is not implemented, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_19;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v8 = (os_log_s *)(id)gLogObj;
      id v11 = type;
      os_log_type_t v12 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446210;
          char v27 = "nw_connection_tls_apply";
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s nw_connection_tls_apply is not implemented, no backtrace",  buf,  0xCu);
        }

        goto LABEL_19;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        char v27 = "nw_connection_tls_apply";
        os_log_type_t v28 = 2082;
        objc_super v29 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s nw_connection_tls_apply is not implemented, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      if (v34) {
        free(v34);
      }
      char v5 = v7;
    }
  }

  if (v7) {
    free(v7);
  }
LABEL_3:

  return v3;
}

  if (v6) {
    free(v6);
  }
LABEL_3:
}

  if (v3) {
    free(v3);
  }
}

  BOOL v24 = *((_BYTE *)v40 + 24) != 0;

  _Block_object_dispose(&v35, 8);
  _Block_object_dispose(&v39, 8);

  return v24;
}

  if (v10) {
    free(v10);
  }
LABEL_3:
}

      if (gLogDatapath)
      {
        __nwlog_obj();
        os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
        {
          os_log_type_t v18 = *(void *)(*(void *)(a1 + 32) + 16LL);
          if (v4) {
            os_log_type_t v19 = dispatch_data_get_size(v4);
          }
          else {
            os_log_type_t v19 = 0LL;
          }
          BOOL v20 = " directly";
          if (!*((_BYTE *)v31 + 24)) {
            BOOL v20 = "";
          }
          *(_DWORD *)applier = 136446978;
          *(void *)&applier[4] = "nw_masque_connection_pair_read_outer_datagrams_block_invoke_2";
          *(_WORD *)&applier[12] = 2114;
          *(void *)&applier[14] = v18;
          *(_WORD *)&applier[22] = 2048;
          os_log_type_t v39 = (void *)v19;
          LOWORD(v40) = 2080;
          *(void *)((char *)&v40 + 2) = v20;
          _os_log_impl( &dword_181A5C000,  v17,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}@ Proxying %zu bytes%s to client",  applier,  0x2Au);
        }
      }

      dispatch_group_enter(*(dispatch_group_t *)(*(void *)(a1 + 32) + 232LL));
      os_log_type_t v14 = *(nw_connection ***)(a1 + 32);
      if (*((_BYTE *)v31 + 24)) {
        id v15 = v14 + 4;
      }
      else {
        id v15 = (nw_connection **)((char *)v14[2] + 48);
      }
      int v16 = *v15;
      completion[0] = v3;
      completion[1] = 3221225472LL;
      completion[2] = ___ZL46nw_masque_connection_pair_read_outer_datagramsP36NWConcrete_nw_masque_connection_pair_block_invoke_295;
      completion[3] = &unk_189BC5E68;
      os_log_type_t v25 = v14;
      nw_connection_send(v16, v4, (nw_content_context_t)&__block_literal_global_41831, 1, completion);

      _Block_object_dispose(&v30, 8);
      ++v2;
    }

    while (v2 < *(unsigned int *)(a1 + 48));
  }

  if (v3) {
LABEL_13:
  }
    free(v3);
}

  if (v3) {
LABEL_13:
  }
    free(v3);
}

  if (v3) {
LABEL_13:
  }
    free(v3);
}

  if (v5) {
LABEL_13:
  }
    free(v5);
}

  if (v3) {
LABEL_13:
  }
    free(v3);
}

  if (v3) {
LABEL_13:
  }
    free(v3);
}

  if (v3) {
LABEL_13:
  }
    free(v3);
}

  if (v3) {
LABEL_13:
  }
    free(v3);
}

  if (v3) {
LABEL_13:
  }
    free(v3);
}

  if (v3) {
LABEL_13:
  }
    free(v3);
}

  return v6;
}

  if (v3) {
LABEL_13:
  }
    free(v3);
}
}
}
}

  if (v3) {
LABEL_13:
  }
    free(v3);
}

  if (v3) {
LABEL_13:
  }
    free(v3);
}

  if (v3) {
LABEL_13:
  }
    free(v3);
}

  if (v4) {
    free(v4);
  }
}

  free(v12);
  if (v6) {
LABEL_31:
  }
    free(v6);
}

    id v15 = *((_DWORD *)handle + 46);
    if (v15) {
      goto LABEL_20;
    }
    goto LABEL_34;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v92 = "nw_protocol_webtransport_http2_stream_connected";
  v58 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v89 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v59 = (os_log_s *)__nwlog_obj();
    os_log_type_t v60 = type;
    if (!os_log_type_enabled(v59, type)) {
      goto LABEL_142;
    }
    *(_DWORD *)buf = 136446210;
    v92 = "nw_protocol_webtransport_http2_stream_connected";
    BOOL v61 = "%{public}s called with null webtransport_stream";
    goto LABEL_141;
  }

  if (!v89)
  {
    v59 = (os_log_s *)__nwlog_obj();
    os_log_type_t v60 = type;
    if (!os_log_type_enabled(v59, type)) {
      goto LABEL_142;
    }
    *(_DWORD *)buf = 136446210;
    v92 = "nw_protocol_webtransport_http2_stream_connected";
    BOOL v61 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
    goto LABEL_141;
  }

  os_log_type_t v67 = (char *)__nw_create_backtrace_string();
  v59 = (os_log_s *)__nwlog_obj();
  os_log_type_t v60 = type;
  v68 = os_log_type_enabled(v59, type);
  if (!v67)
  {
    if (!v68) {
      goto LABEL_142;
    }
    *(_DWORD *)buf = 136446210;
    v92 = "nw_protocol_webtransport_http2_stream_connected";
    BOOL v61 = "%{public}s called with null webtransport_stream, no backtrace";
    goto LABEL_141;
  }

  if (v68)
  {
    *(_DWORD *)buf = 136446466;
    v92 = "nw_protocol_webtransport_http2_stream_connected";
    v93 = 2082;
    p_identifier = v67;
    _os_log_impl( &dword_181A5C000,  v59,  v60,  "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v67);
  if (v58) {
    goto LABEL_143;
  }
}

    free(backtrace_string);
    if (!v9) {
      return 0LL;
    }
    goto LABEL_28;
  }

  int v4 = *((void *)handle + 7);
  if (v4)
  {
    char v5 = *(void *)(v4 + 24);
    if (v5)
    {
      id v6 = *(uint64_t (**)(void))(v5 + 96);
      if (v6) {
        return v6();
      }
    }
  }

  if ((handle[184] & 0x80) != 0) {
    return 0LL;
  }
  __nwlog_obj();
  char v22 = (char *)(handle + 142);
  *(_DWORD *)buf = 136446722;
  uint64_t v33 = "nw_protocol_http_connect_finalize_output_frames";
  dispatch_workloop_t v34 = 2082;
  v35 = (char *)(handle + 142);
  id v36 = 2080;
  v37 = " ";
  int v9 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v30 = 0;
  if (__nwlog_fault(v9, &type, &v30))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = (os_log_s *)__nwlog_obj();
      id v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446722;
        uint64_t v33 = "nw_protocol_http_connect_finalize_output_frames";
        dispatch_workloop_t v34 = 2082;
        v35 = v22;
        id v36 = 2080;
        v37 = " ";
        os_log_type_t v12 = "%{public}s %{public}s%sOutput handler has invalid finalize_output_frames callback";
LABEL_25:
        os_log_type_t v19 = v10;
        BOOL v20 = v11;
        os_log_type_t v21 = 32;
LABEL_26:
        _os_log_impl(&dword_181A5C000, v19, v20, v12, buf, v21);
      }
    }

    else if (v30)
    {
      uint64_t v26 = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = (os_log_s *)__nwlog_obj();
      id v11 = type;
      char v27 = os_log_type_enabled(v10, type);
      if (v26)
      {
        if (v27)
        {
          *(_DWORD *)buf = 136446978;
          uint64_t v33 = "nw_protocol_http_connect_finalize_output_frames";
          dispatch_workloop_t v34 = 2082;
          v35 = v22;
          id v36 = 2080;
          v37 = " ";
          v38 = 2082;
          os_log_type_t v39 = v26;
          _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s %{public}s%sOutput handler has invalid finalize_output_frames callback, dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(v26);
      }

      else if (v27)
      {
        *(_DWORD *)buf = 136446722;
        uint64_t v33 = "nw_protocol_http_connect_finalize_output_frames";
        dispatch_workloop_t v34 = 2082;
        v35 = v22;
        id v36 = 2080;
        v37 = " ";
        os_log_type_t v12 = "%{public}s %{public}s%sOutput handler has invalid finalize_output_frames callback, no backtrace";
        goto LABEL_25;
      }
    }

    else
    {
      os_log_type_t v10 = (os_log_s *)__nwlog_obj();
      id v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446722;
        uint64_t v33 = "nw_protocol_http_connect_finalize_output_frames";
        dispatch_workloop_t v34 = 2082;
        v35 = v22;
        id v36 = 2080;
        v37 = " ";
        os_log_type_t v12 = "%{public}s %{public}s%sOutput handler has invalid finalize_output_frames callback, backtrace limit exceeded";
        goto LABEL_25;
      }
    }
  }

          *(_DWORD *)buf = 136446466;
          os_log_type_t v83 = "nw_protocol_http_connect_disconnected";
          v84 = 2082;
          v85 = (void *)v15;
          os_log_type_t v17 = "%{public}s protocol %{public}s has invalid disconnected callback";
LABEL_139:
          _os_log_impl(&dword_181A5C000, v12, v13, v17, buf, 0x16u);
          goto LABEL_140;
        }

        if (v80)
        {
          v53 = (char *)__nw_create_backtrace_string();
          os_log_type_t v12 = (os_log_s *)__nwlog_obj();
          os_log_type_t v13 = type;
          BOOL v54 = os_log_type_enabled(v12, type);
          if (v53)
          {
            if (v54)
            {
              uint64_t v55 = a1->default_input_handler;
              v56 = "invalid";
              if (v55)
              {
                BOOL v57 = v55->identifier;
                if (v57) {
                  v56 = (const char *)v57;
                }
              }

              *(_DWORD *)buf = 136446722;
              os_log_type_t v83 = "nw_protocol_http_connect_disconnected";
              v84 = 2082;
              v85 = (void *)v56;
              v86 = 2082;
              os_log_type_t v87 = v53;
              _os_log_impl( &dword_181A5C000,  v12,  v13,  "%{public}s protocol %{public}s has invalid disconnected callback, dumping backtrace:%{public}s",  buf,  0x20u);
            }

            free(v53);
            if (v11) {
              goto LABEL_141;
            }
            return;
          }

          if (v54)
          {
            v72 = a1->default_input_handler;
            v62 = "invalid";
            if (v72)
            {
              __uint64_t v73 = v72->identifier;
              if (v73) {
                v62 = (const char *)v73;
              }
            }

  id v11 = 0LL;
  if ((has & 2) != 0)
  {
LABEL_5:
    os_log_type_t v12 = 2654435761LL * self->_dataMode;
    if ((has & 0x10) != 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }

  if (v5) {
    free(v5);
  }
LABEL_3:
}
  }

  free(v15);
  if (v6) {
LABEL_38:
  }
    free(v6);
}

  if (v4) {
    free(v4);
  }
  return 0LL;
}

  if (v12) {
    free(v12);
  }
LABEL_3:

  return v5;
}

  if (v12) {
    free(v12);
  }
LABEL_3:

  return v8;
}
  }

  if (v14) {
    free(v14);
  }
LABEL_3:

  return v10;
}

  if (v2) {
    free(v2);
  }
  return 0LL;
}

  if (v2) {
    free(v2);
  }
}

  if (v3) {
    free(v3);
  }
  return 0LL;
}

LABEL_20:
    if (v4) {
      free(v4);
    }
    return 0LL;
  }

  if (a1 < 1) {
    return 0LL;
  }
  *(void *)uu = 0LL;
  *(void *)&uu[8] = 0LL;
  nw_utilities_get_uuid_for_pid(a1, uu);
  is_null = uuid_is_null(uu);
  uint64_t result = 0LL;
  if (!is_null) {
    return nw_utilities_copy_bundle_id_for_uuid(uu);
  }
  return result;
}

  if (v5) {
    free(v5);
  }
LABEL_3:
}
  }

  if (v5) {
    free(v5);
  }
LABEL_3:
}

  if (v6) {
    free(v6);
  }
  int v3 = 0LL;
LABEL_3:

  return v3;
}

  if (v7) {
    free(v7);
  }
LABEL_3:

  return v3;
}

  if (v7) {
    free(v7);
  }
LABEL_3:
}

  if (v6) {
    free(v6);
  }
  int v3 = 0LL;
LABEL_3:

  return v3;
}

  if (v7) {
    free(v7);
  }
LABEL_3:

  return v3;
}

LABEL_20:
  if (v8) {
    free(v8);
  }
LABEL_9:
}

    if (v3) {
      free(v3);
    }
    return 0LL;
  }

  uint32_t v1 = 1LL;
  if ((*(_WORD *)(a1 + 204) & 0x100) != 0 && g_channel_check_validity) {
    return g_channel_check_validity(a1, *(void *)(a1 + 88));
  }
  return v1;
}

    if (v5) {
      free(v5);
    }
    return 22LL;
  }

  char v2 = 45LL;
  if ((*(_WORD *)(a1 + 204) & 0x100) != 0)
  {
    int v3 = (uint64_t (*)(void))g_channel_set_internet_checksum_handler;
    if (g_channel_set_internet_checksum_handler)
    {
      *(_BYTE *)(a1 + 203) |= a2;
      return v3();
    }
  }

  return v2;
}

    if (v6) {
      free(v6);
    }
    return 22LL;
  }

  int v4 = 45LL;
  return v4;
}

  if (v4) {
    free(v4);
  }
}

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v13 = (os_log_s *)gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
  {
    os_log_type_t v14 = *a1;
    *(_DWORD *)buf = 136446722;
    os_log_type_t v67 = "nw_frame_split";
    v68 = 2048;
    v69 = v12;
    v70 = 2048;
    *(void *)os_log_type_t v71 = v14;
    _os_log_impl( &dword_181A5C000,  v13,  OS_LOG_TYPE_DEBUG,  "%{public}s split_offset of 0 passed, created empty frame %p from %p",  buf,  0x20u);
  }

  return v12;
}

  if (v7) {
    free(v7);
  }
LABEL_3:

  return v3;
}
}

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v20 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        v204 = "nw_http_copy_metadata_from_binary_message";
        os_log_type_t v10 = "%{public}s Failed to decode integer";
        id v11 = (os_log_s *)v20;
        os_log_type_t v12 = 12;
        goto LABEL_21;
      }

      return 0LL;
    }

    if (a2 < 8) {
      goto LABEL_19;
    }
    uint64_t v7 = bswap64(*(void *)a1 & 0xFFFFFFFFFFFFFF3FLL);
    int v8 = 8LL;
  }

    nw_framer_mark_failed_with_error(v11, 22);
    goto LABEL_20;
  }

  os_log_type_t v12 = MEMORY[0x1895F87A8];
  v35 = MEMORY[0x1895F87A8];
  id v36 = 0x40000000LL;
  v37 = (uint64_t)___ZL30nw_tcpconverter_parse_responseP9nw_framerP15nw_tcpconverter_block_invoke;
  v38 = &unk_189BBFB48;
  os_log_type_t v41 = v3;
  BOOL v42 = v11;
  char v43 = 4LL;
  os_log_type_t v39 = &v48;
  v40 = &v44;
  if (!nw_framer_parse_input(v11, 4uLL, 4uLL, temp_buffer, &v35)) {
    goto LABEL_20;
  }
  os_log_type_t v13 = v45;
  if (!*((_BYTE *)v45 + 24)) {
    goto LABEL_20;
  }
  os_log_type_t v14 = v49[3];
  if (v14 < 0x81)
  {
    os_log_type_t v17 = 0LL;
    int v16 = temp_buffer;
    goto LABEL_23;
  }

  id v15 = (uint8_t *)malloc(v49[3]);
  if (v15)
  {
    int v16 = v15;
    os_log_type_t v17 = v15;
    goto LABEL_23;
  }

  os_log_type_t v30 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  *(void *)&uint8_t buf[4] = "strict_malloc";
  *(_WORD *)&buf[12] = 2048;
  *(void *)&buf[14] = v14;
  v31 = (void *)_os_log_send_and_compose_impl();
  uint64_t result = __nwlog_abort((uint64_t)v31);
  if (!result)
  {
    free(v31);
    int v16 = 0LL;
    os_log_type_t v17 = 0LL;
    os_log_type_t v13 = v45;
    os_log_type_t v14 = v49[3];
LABEL_23:
    *((_BYTE *)v13 + 24) = 0;
    *(void *)buf = v12;
    *(void *)&buf[8] = 0x40000000LL;
    *(void *)&buf[16] = ___ZL30nw_tcpconverter_parse_responseP9nw_framerP15nw_tcpconverter_block_invoke_30;
    BOOL v57 = &unk_189BBFB70;
    os_log_type_t v60 = v3;
    BOOL v61 = v11;
    v58 = &v48;
    v59 = &v44;
    char v22 = nw_framer_parse_input(v11, v14, v14, v16, buf);
    if (v17) {
      free(v17);
    }
    if (!v22 || !*((_BYTE *)v45 + 24)) {
      goto LABEL_20;
    }
    os_log_type_t v23 = *v3;
    if (*v3 == 2)
    {
      nw_framer_pass_through_input(v11);
      nw_framer_pass_through_output(v11);
      nw_framer_mark_ready(v11);
      goto LABEL_20;
    }

    if (v23 != 1)
    {
      if (!v23)
      {
        __nwlog_obj();
        *(_DWORD *)os_log_type_t v52 = 136446210;
        v53 = "nw_tcpconverter_parse_response";
        BOOL v24 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        uint64_t v33 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v25 = (os_log_s *)__nwlog_obj();
          uint64_t v26 = type;
          if (!os_log_type_enabled(v25, type)) {
            goto LABEL_47;
          }
          *(_DWORD *)os_log_type_t v52 = 136446210;
          v53 = "nw_tcpconverter_parse_response";
          char v27 = "%{public}s Can't be in initial after parsing response";
        }

        else if (v33)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          os_log_type_t v25 = (os_log_s *)__nwlog_obj();
          uint64_t v26 = type;
          objc_super v29 = os_log_type_enabled(v25, type);
          if (backtrace_string)
          {
            if (v29)
            {
              *(_DWORD *)os_log_type_t v52 = 136446466;
              v53 = "nw_tcpconverter_parse_response";
              BOOL v54 = 2082;
              uint64_t v55 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v25,  v26,  "%{public}s Can't be in initial after parsing response, dumping backtrace:%{public}s",  v52,  0x16u);
            }

            free(backtrace_string);
            goto LABEL_47;
          }

          if (!v29)
          {
LABEL_47:
            if (v24) {
              free(v24);
            }
            goto LABEL_20;
          }

          *(_DWORD *)os_log_type_t v52 = 136446210;
          v53 = "nw_tcpconverter_parse_response";
          char v27 = "%{public}s Can't be in initial after parsing response, no backtrace";
        }

        else
        {
          os_log_type_t v25 = (os_log_s *)__nwlog_obj();
          uint64_t v26 = type;
          if (!os_log_type_enabled(v25, type)) {
            goto LABEL_47;
          }
          *(_DWORD *)os_log_type_t v52 = 136446210;
          v53 = "nw_tcpconverter_parse_response";
          char v27 = "%{public}s Can't be in initial after parsing response, backtrace limit exceeded";
        }

        _os_log_impl(&dword_181A5C000, v25, v26, v27, v52, 0xCu);
        goto LABEL_47;
      }

        v11 += 36LL;
        if (v11 == 164)
        {
          *((_DWORD *)v4 + 4) = v65;
          char v2 = v64;
          goto LABEL_4;
        }
      }
    }

    v62 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v62, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    v72 = "strict_calloc";
    __uint64_t v73 = 2048;
    *(void *)unint64_t v74 = v9;
    *(_WORD *)&v74[8] = 2048;
    *(void *)&char v75 = 8LL;
    os_log_type_t v63 = (void *)_os_log_send_and_compose_impl();
    uint64_t result = __nwlog_abort((uint64_t)v63);
    if (!(_DWORD)result)
    {
      free(v63);
      goto LABEL_16;
    }

    goto LABEL_101;
  }

  freemptcpinfo(v4);
  id v49 = *(void **)v70;
  if (!*(void *)v70) {
    return 0xFFFFFFFFLL;
  }
  v50 = *(void **)(*(void *)v70 + 8LL);
  if (v50)
  {
    free(v50);
    v49[1] = 0LL;
  }

  v51 = (void *)v49[2];
  if (v51)
  {
    free(v51);
    v49[2] = 0LL;
  }

  os_log_type_t v52 = (void *)v49[4];
  if (v52) {
    free(v52);
  }
  free(v49);
  return 0xFFFFFFFFLL;
}

  if (v4) {
    free(v4);
  }
  return 0LL;
}

LABEL_47:
    int v9 = 0;
    goto LABEL_6;
  }

  *(void *)buf = 0LL;
  *(void *)os_log_type_t type = 0LL;
  os_unfair_lock_lock((os_unfair_lock_t)v5 + 8);
  start_of_key_locked = nw_txt_record_find_start_of_key_locked(v5, key, 0LL, 0LL, buf, type);
  int v9 = ((uint64_t (**)(void, const char *, uint64_t, void, void))v7)[2]( v7,  key,  start_of_key_locked,  *(void *)buf,  *(void *)type);
  os_unfair_lock_unlock((os_unfair_lock_t)v5 + 8);
LABEL_6:

  return v9;
}

  if (v3) {
    free(v3);
  }
  return 0LL;
}

    v14 += 72LL;
  }

  while (v14 != 288);
  os_log_type_t v12 = v62;
LABEL_54:

  v31 = (void *)*((void *)v68 + 3);
  os_log_type_t v32 = v64;
  if (v31)
  {
    uint64_t v33 = (void *)v31[1];
    if (v33)
    {
      free(v33);
      v31[1] = 0LL;
    }

    dispatch_workloop_t v34 = (void *)v31[2];
    if (v34)
    {
      free(v34);
      v31[2] = 0LL;
    }

    v35 = (void *)v31[4];
    if (v35) {
      free(v35);
    }
    free(v31);
  }

  _Block_object_dispose(v67, 8);
LABEL_63:

  int v8 = v7 + 28;
LABEL_64:
  os_unfair_lock_unlock(v8);
LABEL_65:

  id v36 = *(void *)(*(void *)(a1 + 40) + 8LL);
  v37 = *(void **)(v36 + 40);
  *(void *)(v36 + 40) = v13;
}

  if (v3) {
LABEL_20:
  }
    free(v3);
LABEL_21:

  return 0LL;
}
  }

  if (v3) {
    free(v3);
  }
}

  if (v7) {
    free(v7);
  }
  return 0LL;
}

    int v8 = 54;
    int v9 = 54;
    if ((v4 & 8) == 0) {
      goto LABEL_20;
    }
    goto LABEL_32;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_socket_handle_socket_event";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();
  type[0] = 16;
  v103[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v10, type, v103))
  {
    if (type[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v11 = (os_log_s *)gLogObj;
      os_log_type_t v12 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)type[0])) {
        goto LABEL_72;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_socket_handle_socket_event";
      os_log_type_t v13 = "%{public}s called with null socket_handler";
      goto LABEL_71;
    }

    if (v103[0] == OS_LOG_TYPE_DEFAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v11 = (os_log_s *)gLogObj;
      os_log_type_t v12 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)type[0])) {
        goto LABEL_72;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_socket_handle_socket_event";
      os_log_type_t v13 = "%{public}s called with null socket_handler, backtrace limit exceeded";
      goto LABEL_71;
    }

    os_log_type_t v14 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v11 = (os_log_s *)gLogObj;
    os_log_type_t v12 = type[0];
    id v15 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)type[0]);
    if (v14)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_socket_handle_socket_event";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v14;
        _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s called with null socket_handler, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v14);
      goto LABEL_72;
    }

    if (v15)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_socket_handle_socket_event";
      os_log_type_t v13 = "%{public}s called with null socket_handler, no backtrace";
LABEL_71:
      _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
    }
  }

    goto LABEL_20;
  }

  if (!v43)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v30 = (os_log_s *)(id)gLogObj;
    v37 = type;
    if (os_log_type_enabled(v30, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v46 = "nw_path_create_static";
      _os_log_impl(&dword_181A5C000, v30, v37, "%{public}s nw_path_create failed, backtrace limit exceeded", buf, 0xCu);
    }

    goto LABEL_19;
  }

  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  dispatch_workloop_t v34 = (os_log_s *)(id)gLogObj;
  v35 = type;
  id v36 = os_log_type_enabled(v34, type);
  if (!backtrace_string)
  {
    if (v36)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v46 = "nw_path_create_static";
      _os_log_impl(&dword_181A5C000, v34, v35, "%{public}s nw_path_create failed, no backtrace", buf, 0xCu);
    }

LABEL_20:
    if (!v29) {
      goto LABEL_22;
    }
LABEL_21:
    free(v29);
    goto LABEL_22;
  }

  if (v36)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v46 = "nw_path_create_static";
    os_log_type_t v47 = 2082;
    v48 = backtrace_string;
    _os_log_impl( &dword_181A5C000,  v34,  v35,  "%{public}s nw_path_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(backtrace_string);
  if (v29) {
    goto LABEL_21;
  }
LABEL_22:

  return p_isa;
}

  int v16 = v8 + v11;
LABEL_35:
  *(void *)(*(void *)(a1[4] + 8LL) + 24LL) = v16;
LABEL_36:
  if (v6) {
    free(v6);
  }

  return 1LL;
}

  if (v6) {
    free(v6);
  }
  return 0LL;
}

  if (v6) {
    free(v6);
  }
  return 0LL;
}

  if (v9) {
    free(v9);
  }
  return 0LL;
}

  if (v6) {
    free(v6);
  }
  return 0LL;
}

  os_log_type_t v21 = 0LL;
LABEL_20:

  return v21;
}
  }

  if (v6) {
    free(v6);
  }
  return 0LL;
}

  if (v6) {
    free(v6);
  }
  return 0LL;
}

  if (v6) {
    free(v6);
  }
  return 0LL;
}

  if (v6) {
    free(v6);
  }
  return 0LL;
}

  if (v6) {
    free(v6);
  }
  return 0LL;
}

  if (v6) {
    free(v6);
  }
  return 0LL;
}

  if (v6) {
    free(v6);
  }
  return 0LL;
}

  if (v6) {
    free(v6);
  }
  return 0LL;
}

  if (v6) {
    free(v6);
  }
  return 0LL;
}

  if (v7) {
    free(v7);
  }
LABEL_3:
}

  if (v5) {
    free(v5);
  }
LABEL_3:
}

  if (v5) {
    free(v5);
  }
LABEL_3:
}

  if (v5) {
    free(v5);
  }
LABEL_3:
}

  if (v5) {
    free(v5);
  }
  char v2 = 0LL;
LABEL_3:

  return v2;
}

  if (v5) {
    free(v5);
  }
  char v2 = 0LL;
LABEL_3:

  return v2;
}

  if (v5) {
    free(v5);
  }
  char v2 = 0LL;
LABEL_3:

  return v2;
}

  if (v5) {
    free(v5);
  }
LABEL_3:
}

  if (v7) {
    free(v7);
  }
  return v2 != 0LL;
}

  if (v8) {
    free(v8);
  }
  return v2 != 0LL;
}

LABEL_20:
    if (v8) {
      free(v8);
    }
  }

  return v5 != 0;
}

  if (v6) {
    free(v6);
  }
  return 0LL;
}

  if (v3) {
    free(v3);
  }
  return 0LL;
}

  if (v4) {
    free(v4);
  }
  return 0LL;
}

  if (v3) {
    free(v3);
  }
  return 0LL;
}

  if (v3) {
    free(v3);
  }
  return 0LL;
}

  return v8;
}
}

  int v16 = *(void *)(a1 + 56);
  os_log_type_t v17 = *(void *)(v16 + 80);
  if (v17) {
    goto LABEL_32;
  }
  os_log_type_t v18 = *(void *)(a1 + 40);
  BOOL v20 = *(void *)(v18 + 240);
  os_log_type_t v19 = *(void *)(v18 + 248);
  if (v20)
  {
    os_log_type_t v21 = *(_DWORD **)(v18 + 240);
  }

  else
  {
    if (nw_context_copy_implicit_context::onceToken != -1) {
      dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
    }
    os_log_type_t v21 = (id)nw_context_copy_implicit_context::implicit_context;
  }

  channel_to_new_instance_and_context = nw_nexus_create_channel_to_new_instance_and_context(v19, v21);
  os_log_type_t v23 = *(void *)(a1 + 56);
  BOOL v24 = *(void **)(v23 + 80);
  *(void *)(v23 + 80) = channel_to_new_instance_and_context;

  if (!v20) {
  os_log_type_t v25 = *(void *)(*(void *)(a1 + 56) + 80LL);
  }
  if (v25)
  {
    uint64_t v26 = *(void **)(*(void *)(a1 + 40) + 248LL);
    if (v26) {
      uint64_t v26 = os_retain(v26);
    }
    *(void *)(v25 + 160) = v26;
    nw_channel_set_close_automatically(*(void *)(*(void *)(a1 + 56) + 80LL), 1);
    nw_channel_set_no_close_delay(*(void *)(*(void *)(a1 + 56) + 80LL));
    char v27 = *(void *)(a1 + 40);
    int v16 = *(void *)(a1 + 56);
    if ((*(char *)(v27 + 856) & 0x80000000) == 0)
    {
      nw_dictionary_set_value(*(void *)(v27 + 744), __str, *(void **)(v16 + 80));
      int v16 = *(void *)(a1 + 56);
    }

      *(_WORD *)(a1 + 388) |= 1u;
      if (!nghttp2_submit_goaway())
      {
LABEL_36:
        if ((*(__int16 *)(a1 + 388) & 0x80000000) == 0 && gLogDatapath)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          v31 = (os_log_s *)gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
          {
            os_log_type_t v32 = *(_DWORD *)(a1 + 368);
            uint64_t v33 = nghttp2_http2_strerror();
            *(_DWORD *)buf = 136447746;
            v51 = "nw_http2_send_goaway";
            os_log_type_t v52 = 2082;
            v53 = a1 + 390;
            BOOL v54 = 2080;
            uint64_t v55 = " ";
            v56 = 1024;
            BOOL v57 = v32;
            v58 = 1024;
            v59 = v3;
            os_log_type_t v60 = 1024;
            *(_DWORD *)BOOL v61 = 0;
            v61[2] = 2082;
            *(void *)&v61[3] = v33;
            _os_log_impl( &dword_181A5C000,  v31,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> submitted GOAWAY frame with last_stream %d and error %u (%{public}s)",  buf,  0x3Cu);
          }
        }

        nw_http2_session_send(a1);
        return;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v10 = nghttp2_strerror();
      *(_DWORD *)buf = 136446466;
      v51 = "nw_http2_send_goaway";
      os_log_type_t v52 = 2082;
      v53 = v10;
      id v11 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v48 = 0;
      if (__nwlog_fault(v11, &type, &v48))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v12 = (os_log_s *)gLogObj;
          os_log_type_t v13 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_34;
          }
          os_log_type_t v14 = nghttp2_strerror();
          *(_DWORD *)buf = 136446466;
          v51 = "nw_http2_send_goaway";
          os_log_type_t v52 = 2082;
          v53 = v14;
          id v15 = "%{public}s nghttp2_submit_goaway: %{public}s failed";
          goto LABEL_33;
        }

        if (!v48)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v12 = (os_log_s *)gLogObj;
          os_log_type_t v13 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_34;
          }
          os_log_type_t v19 = nghttp2_strerror();
          *(_DWORD *)buf = 136446466;
          v51 = "nw_http2_send_goaway";
          os_log_type_t v52 = 2082;
          v53 = v19;
          id v15 = "%{public}s nghttp2_submit_goaway: %{public}s failed, backtrace limit exceeded";
          goto LABEL_33;
        }

        int v16 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v12 = (os_log_s *)gLogObj;
        os_log_type_t v13 = type;
        os_log_type_t v17 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v16)
        {
          if (v17)
          {
            os_log_type_t v18 = nghttp2_strerror();
            *(_DWORD *)buf = 136446722;
            v51 = "nw_http2_send_goaway";
            os_log_type_t v52 = 2082;
            v53 = v18;
            BOOL v54 = 2082;
            uint64_t v55 = v16;
            _os_log_impl( &dword_181A5C000,  v12,  v13,  "%{public}s nghttp2_submit_goaway: %{public}s failed, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v16);
          goto LABEL_34;
        }

        if (v17)
        {
          BOOL v20 = nghttp2_strerror();
          *(_DWORD *)buf = 136446466;
          v51 = "nw_http2_send_goaway";
          os_log_type_t v52 = 2082;
          v53 = v20;
          id v15 = "%{public}s nghttp2_submit_goaway: %{public}s failed, no backtrace";
LABEL_33:
          _os_log_impl(&dword_181A5C000, v12, v13, v15, buf, 0x16u);
        }
      }

  if (v9) {
    free(v9);
  }
  return 0LL;
}

  if (v13) {
    free(v13);
  }
  os_log_type_t v10 = 0LL;
LABEL_3:

  return v10;
}

  if (v9) {
    free(v9);
  }
  id v6 = 0LL;
LABEL_3:

  return v6;
}

  networkd_settings_read_from_file();
  id v15 = (xpc_object_t)sCachedSettings;
LABEL_29:
  int v16 = sBoringSSLUpdateBlock;
  os_log_type_t v17 = MEMORY[0x1895F87A8];
  if (sBoringSSLUpdateBlock)
  {
    if (v15)
    {
      os_log_type_t v18 = xpc_dictionary_get_BOOL(v15, (const char *)nw_setting_boringssl_log_debug);
      int v16 = sBoringSSLUpdateBlock;
    }

    else
    {
      os_log_type_t v18 = 0;
    }

    if (nw_context_copy_implicit_context::onceToken != -1) {
      dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
    }
    v27[0] = v17;
    v27[1] = 0x40000000LL;
    v27[2] = ___ZL35networkd_settings_update_from_tokeni_block_invoke;
    v27[3] = &unk_189BC9590;
    v27[4] = v16;
    os_log_type_t v28 = v18;
    nw_queue_context_async((id)nw_context_copy_implicit_context::implicit_context, v27);
    id v15 = (xpc_object_t)sCachedSettings;
  }

  os_log_type_t v19 = sQUICUpdateBlock;
  if (sQUICUpdateBlock)
  {
    if (v15)
    {
      BOOL v20 = xpc_dictionary_get_BOOL(v15, (const char *)nw_setting_libnetcore_datapath_debug);
      os_log_type_t v19 = sQUICUpdateBlock;
    }

    else
    {
      BOOL v20 = 0;
    }

    if (nw_context_copy_implicit_context::onceToken != -1) {
      dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
    }
    v25[0] = v17;
    v25[1] = 0x40000000LL;
    v25[2] = ___ZL35networkd_settings_update_from_tokeni_block_invoke_2;
    v25[3] = &unk_189BC95B8;
    v25[4] = v19;
    uint64_t v26 = v20;
    nw_queue_context_async((id)nw_context_copy_implicit_context::implicit_context, v25);
    id v15 = (xpc_object_t)sCachedSettings;
  }

  if (v15) {
    os_log_type_t v21 = xpc_dictionary_get_BOOL(v15, (const char *)nw_setting_libnetcore_datapath_debug);
  }
  else {
    os_log_type_t v21 = 0;
  }
  pthread_mutex_unlock(&sSettingsMutex);
  sCachedHash = state64;
  char v22 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init(v22);
  os_unfair_lock_lock((os_unfair_lock_t)&gLogLock);
  if (v21 || !gLogDatapathOverridden) {
    gLogDatapath = v21;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&gLogLock);
}

BOOL nw_activity_label_is_valid(int a1, int a2)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  unsigned int v4 = a1 - 900;
  unsigned int v5 = a1 - 11;
  BOOL result = (a1 - 900) < 0x64;
  if (v4 < 0x64 || v5 < 0x33)
  {
    switch(v5)
    {
      case 0u:
        break;
      case 1u:
      case 0x16u:
      case 0x1Bu:
      case 0x1Fu:
      case 0x25u:
      case 0x32u:
        break;
      case 2u:
      case 5u:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x18u:
      case 0x27u:
      case 0x28u:
      case 0x2Eu:
        break;
      case 3u:
      case 0x15u:
        break;
      case 4u:
      case 0x22u:
        break;
      case 6u:
      case 0x13u:
      case 0x2Bu:
      case 0x2Cu:
      case 0x30u:
        break;
      case 7u:
        break;
      case 0xAu:
        break;
      case 0xBu:
      case 0x1Eu:
        break;
      case 0xCu:
        break;
      case 0x10u:
      case 0x11u:
      case 0x12u:
        break;
      case 0x14u:
      case 0x1Cu:
      case 0x23u:
        if (a2 == 1) {
          goto LABEL_10;
        }
        break;
      case 0x17u:
      case 0x31u:
        break;
      case 0x19u:
      case 0x26u:
        break;
      case 0x1Au:
      case 0x24u:
        break;
      case 0x1Du:
      case 0x21u:
      case 0x29u:
        break;
      case 0x20u:
        break;
      case 0x2Au:
        break;
      case 0x2Fu:
        if ((a2 - 1) < 0x15) {
LABEL_10:
        }
          BOOL result = 1LL;
        break;
      default:
        return result;
    }
  }

  else
  {
    if (__nwlog_activity_log::onceToken != -1) {
      dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
    }
    uint64_t v7 = (os_log_s *)(id)gactivityLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      v8[0] = 67109376;
      v8[1] = a2;
      __int16 v9 = 1024;
      int v10 = a1;
      _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_DEBUG,  "Label %u is not valid because domain %u is not valid",  (uint8_t *)v8,  0xEu);
    }

    return 0LL;
  }

  return result;
}

void nw_activity_activate(void *a1)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  uint32_t v1 = a1;
  char v2 = v1;
  if (v1)
  {
    *(void *)v31 = 0LL;
    *(void *)&v31[8] = v31;
    *(void *)&v31[16] = 0x2020000000LL;
    uint64_t v3 = MEMORY[0x1895F87A8];
    char v32 = 0;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = __nw_activity_activate_block_invoke;
    aBlock[3] = &unk_189BC9210;
    os_log_type_t v28 = v31;
    unsigned int v4 = v1;
    char v27 = v4;
    unsigned int v5 = _Block_copy(aBlock);
    objc_super v29 = v5;
    nw_synchronize<nw::unfair_mutex,void({block_pointer} {__strong})(void)>(v2 + 20, (uint64_t)&v29);

    if (*(_BYTE *)(*(void *)&v31[8] + 24LL))
    {
      id v6 = v4;
      uint64_t v7 = (unsigned __int8 *)v6;
      if ((v6[35]._os_unfair_lock_opaque & 4) != 0)
      {
        int v8 = v6 + 2;
        if (!uuid_is_null((const unsigned __int8 *)&v6[2]))
        {
          if (nw_activity_should_log(v7))
          {
            __int16 v9 = v7;
            if (uuid_is_null(v7 + 8)) {
              os_signpost_id_t v10 = nw_activity_signpost_id_fallback();
            }
            else {
              os_signpost_id_t v10 = *((void *)v9 + 2) ^ *(void *)&v8->_os_unfair_lock_opaque;
            }

            if (__nwlog_activity_log::onceToken != -1) {
              dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
            }
            uint64_t v11 = (os_log_s *)(id)gactivityLogObj;
            os_log_type_t v12 = v11;
            if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
            {
              int v14 = *((_DWORD *)v9 + 28);
              int v13 = *((_DWORD *)v9 + 29);
              *(_DWORD *)buf = 67109890;
              *(_DWORD *)&uint8_t buf[4] = v13;
              __int16 v34 = 1024;
              int v35 = v14;
              __int16 v36 = 1040;
              int v37 = 16;
              __int16 v38 = 2096;
              os_log_type_t v39 = v8;
              _os_signpost_emit_with_name_impl( &dword_181A5C000,  v12,  OS_SIGNPOST_INTERVAL_BEGIN,  v10,  "nw_activity",  "<%u:%u [%{uuid_t}.16P]>",  buf,  0x1Eu);
            }
          }
        }
      }

      if (nw_context_copy_implicit_context::onceToken != -1) {
        dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
      }
      *(void *)buf = (id)nw_context_copy_implicit_context::implicit_context;
      LOBYTE(v34) = -1;
      id v15 = *(id *)buf;
      v24[0] = v3;
      v24[1] = 3221225472LL;
      v24[2] = __nw_activity_activate_block_invoke_51;
      v24[3] = &unk_189BC93A0;
      os_log_type_t v25 = v7;
      nw_queue_context_async_if_needed(v15, v24);

      if (v15) {
    }
      }

    _Block_object_dispose(v31, 8);
    goto LABEL_20;
  }

  __nwlog_obj();
  int v16 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)v31 = 136446210;
  *(void *)&v31[4] = "nw_activity_activate";
  os_log_type_t v17 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  char v30 = 0;
  if (__nwlog_fault(v17, buf, &v30))
  {
    if (buf[0] == 17)
    {
      __nwlog_obj();
      os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = buf[0];
      if (os_log_type_enabled(v18, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v31 = 136446210;
        *(void *)&v31[4] = "nw_activity_activate";
        _os_log_impl(&dword_181A5C000, v18, v19, "%{public}s called with null activity", v31, 0xCu);
      }
    }

    else if (v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = buf[0];
      BOOL v22 = os_log_type_enabled(v18, (os_log_type_t)buf[0]);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)v31 = 136446466;
          *(void *)&v31[4] = "nw_activity_activate";
          *(_WORD *)&v31[12] = 2082;
          *(void *)&v31[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v18,  v21,  "%{public}s called with null activity, dumping backtrace:%{public}s",  v31,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_38;
      }

      if (v22)
      {
        *(_DWORD *)v31 = 136446210;
        *(void *)&v31[4] = "nw_activity_activate";
        _os_log_impl(&dword_181A5C000, v18, v21, "%{public}s called with null activity, no backtrace", v31, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = buf[0];
      if (os_log_type_enabled(v18, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v31 = 136446210;
        *(void *)&v31[4] = "nw_activity_activate";
        _os_log_impl( &dword_181A5C000,  v18,  v23,  "%{public}s called with null activity, backtrace limit exceeded",  v31,  0xCu);
      }
    }
  }

void sub_181A6AC88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void nw_synchronize<nw::unfair_mutex,void({block_pointer} {__strong})(void)>( os_unfair_lock_s *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v17 = "nw_synchronize";
    unsigned int v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_synchronize";
        int v8 = "%{public}s called with null lock";
LABEL_31:
        _os_log_impl(&dword_181A5C000, v6, v7, v8, buf, 0xCu);
      }

void __nw_activity_activate_block_invoke(uint64_t a1)
{
  uint64_t v70 = *MEMORY[0x1895F89C0];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = (*(_BYTE *)(*(void *)(a1 + 32) + 140LL) & 4) == 0;
  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL)) {
    return;
  }
  uint64_t v2 = mach_continuous_time();
  if (v2 <= 1) {
    uint64_t v3 = 1LL;
  }
  else {
    uint64_t v3 = v2;
  }
  *(void *)(*(void *)(a1 + 32) + 32LL) = v3;
  if (!nw_activity_is_lightweight_representation(*(void **)(a1 + 32)))
  {
    if (!*(void *)(*(void *)(a1 + 32) + 24LL))
    {
      *(void *)(*(void *)(a1 + 32) + 24LL) = nw_activity_get_investigation_id_from_defaults();
      unsigned int v4 = *(void **)(a1 + 32);
      if (!v4[3])
      {
        os_log_type_t v7 = v4;
LABEL_13:
        *(void *)buf = MEMORY[0x1895F87A8];
        *(void *)&uint8_t buf[8] = 3221225472LL;
        *(void *)&buf[16] = ___ZL51nw_activity_inherit_from_global_parent_if_necessaryP22NWConcrete_nw_activity_block_invoke;
        os_log_type_t v64 = (char *)&unk_189BC93A0;
        id v65 = v7;
        int v8 = v7;
        __int16 v9 = _Block_copy(buf);
        *(void *)__upper_bound = v9;
        nw_synchronize<nw::unfair_mutex,void({block_pointer} {__strong})(void)>( (os_unfair_lock_s *)&global_parent_lock,  (uint64_t)__upper_bound);

        goto LABEL_14;
      }
    }

    if (__nwlog_activity_log::onceToken != -1) {
      dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
    }
    unsigned int v5 = (os_log_s *)(id)gactivityLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v6;
      _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_DEBUG,  "%@ overriding reporting strategy to always due to investigation identifier",  buf,  0xCu);
    }

    *(_DWORD *)(*(void *)(a1 + 32) + 132LL) = 3;
    os_log_type_t v7 = *(id *)(a1 + 32);
    if (v7) {
      goto LABEL_13;
    }
    __nwlog_obj();
    __int16 v38 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)os_log_type_t type = 136446210;
    os_log_type_t v67 = "nw_activity_inherit_from_global_parent_if_necessary";
    os_log_type_t v39 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v62 = OS_LOG_TYPE_ERROR;
    char v61 = 0;
    if (__nwlog_fault(v39, &v62, &v61))
    {
      if (v62 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v41 = v62;
        if (os_log_type_enabled(v40, v62))
        {
          *(_DWORD *)os_log_type_t type = 136446210;
          os_log_type_t v67 = "nw_activity_inherit_from_global_parent_if_necessary";
          _os_log_impl(&dword_181A5C000, v40, v41, "%{public}s called with null activity", (uint8_t *)type, 0xCu);
        }
      }

      else if (v61)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v49 = v62;
        BOOL v50 = os_log_type_enabled(v40, v62);
        if (backtrace_string)
        {
          if (v50)
          {
            *(_DWORD *)os_log_type_t type = 136446466;
            os_log_type_t v67 = "nw_activity_inherit_from_global_parent_if_necessary";
            __int16 v68 = 2082;
            v69 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v40,  v49,  "%{public}s called with null activity, dumping backtrace:%{public}s",  (uint8_t *)type,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_133;
        }

        if (v50)
        {
          *(_DWORD *)os_log_type_t type = 136446210;
          os_log_type_t v67 = "nw_activity_inherit_from_global_parent_if_necessary";
          _os_log_impl( &dword_181A5C000,  v40,  v49,  "%{public}s called with null activity, no backtrace",  (uint8_t *)type,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v57 = v62;
        if (os_log_type_enabled(v40, v62))
        {
          *(_DWORD *)os_log_type_t type = 136446210;
          os_log_type_t v67 = "nw_activity_inherit_from_global_parent_if_necessary";
          _os_log_impl( &dword_181A5C000,  v40,  v57,  "%{public}s called with null activity, backtrace limit exceeded",  (uint8_t *)type,  0xCu);
        }
      }
    }

LABEL_133:
    if (v39) {
      free(v39);
    }
LABEL_14:
    os_signpost_id_t v10 = *(id *)(a1 + 32);
    id v11 = v10;
    if (v10)
    {
      os_log_type_t v12 = (_BYTE *)v10[7];
      if (v12)
      {
        if ((v12[140] & 4) != 0)
        {
          if (nw_activity_is_lightweight_representation(v12))
          {
            BOOL v13 = (_DWORD *)*((void *)v11 + 7);
          }

          else
          {
            if (__nwlog_activity_log::onceToken != -1) {
              dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
            }
            os_log_type_t v17 = (os_log_s *)(id)gactivityLogObj;
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
            {
              id v18 = *((id *)v11 + 7);
              *(_DWORD *)buf = 138543618;
              *(void *)&uint8_t buf[4] = v11;
              *(_WORD *)&buf[12] = 2114;
              *(void *)&buf[14] = v18;
              _os_log_impl( &dword_181A5C000,  v17,  OS_LOG_TYPE_DEBUG,  "Activity %{public}@ inheriting reporting strategy from parent %{public}@",  buf,  0x16u);
            }

            BOOL v13 = (_DWORD *)*((void *)v11 + 7);
            *((_DWORD *)v11 + 33) = v13[33];
          }

          int is_selected_for_reporting = nw_activity_is_selected_for_reporting(v13);
          goto LABEL_58;
        }

        if (__nwlog_activity_log::onceToken != -1) {
          dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
        }
        os_log_type_t v25 = (os_log_s *)(id)gactivityLogObj;
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( &dword_181A5C000,  v25,  OS_LOG_TYPE_ERROR,  "Cannot activate activity if parent is not yet activated (log only)",  buf,  2u);
        }

        goto LABEL_56;
      }

      unsigned int v14 = *((_DWORD *)v11 + 33);
      if (v14 < 2)
      {
        *(_DWORD *)os_log_type_t type = 0;
        __upper_bound[0] = 0;
        nw_activity_get_sampling_rate_for_domain(*((_DWORD *)v11 + 29), (int *)type, __upper_bound);
        if (__nwlog_activity_log::onceToken != -1) {
          dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
        }
        os_log_type_t v19 = (os_log_s *)(id)gactivityLogObj;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138543874;
          *(void *)&uint8_t buf[4] = v11;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = *(_DWORD *)type;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = __upper_bound[0];
          _os_log_impl(&dword_181A5C000, v19, OS_LOG_TYPE_DEBUG, "%{public}@ sampled at %u / %u", buf, 0x18u);
        }

        int is_selected_for_reporting = arc4random_uniform(__upper_bound[0]) < *(_DWORD *)type;
      }

      else
      {
        if (v14 != 2)
        {
          if (v14 == 3)
          {
            if (__nwlog_activity_log::onceToken != -1) {
              dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
            }
            id v15 = (os_log_s *)(id)gactivityLogObj;
            if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138543362;
              *(void *)&uint8_t buf[4] = v11;
              _os_log_impl(&dword_181A5C000, v15, OS_LOG_TYPE_INFO, "Always reporting activity %{public}@", buf, 0xCu);
            }

            int is_selected_for_reporting = 1;
            goto LABEL_44;
          }

          if (!nw_activity_label_is_valid(*((_DWORD *)v11 + 29), *((_DWORD *)v11 + 28)))
          {
LABEL_52:
            if (__nwlog_activity_log::onceToken != -1) {
              dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44313);
            }
            os_log_type_t v25 = (os_log_s *)(id)gactivityLogObj;
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138739971;
              *(void *)&uint8_t buf[4] = v11;
              _os_log_impl( &dword_181A5C000,  v25,  OS_LOG_TYPE_ERROR,  "Never reporting invalid activity %{sensitive}@",  buf,  0xCu);
            }

            if (!v59)
            {
LABEL_135:
              BOOL v30 = 0LL;
LABEL_146:

              BOOL v66 = v127;
              goto LABEL_147;
            }

    uint64_t v115 = v228;
    v116 = (v103[67] & 0x20) == 0;

    if (!v116) {
      goto LABEL_121;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    v117 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v117, OS_LOG_TYPE_DEBUG))
    {
      v118 = v115;

      v119 = v118;
      v120 = (v229[67] & 1) == 0;

      if (v120) {
        v121 = "";
      }
      else {
        v121 = "dry-run ";
      }
      v122 = nw_endpoint_handler_copy_endpoint(v119);
      v216 = nw_endpoint_get_logging_description(v122);
      v123 = v119;
      v124 = v123;
      v125 = v230[30];
      v126 = "unknown-state";
      v214 = v126;

      v127 = v124;
      v128 = "path";
      switch(v3[29])
      {
        case 0u:
          break;
        case 1u:
          v128 = "resolver";
          break;
        case 2u:
          v128 = nw_endpoint_flow_mode_string(v228->mode_handler);
          break;
        case 3u:
          v128 = "proxy";
          break;
        case 4u:
          v128 = "fallback";
          break;
        case 5u:
          v128 = "transform";
          break;
        default:
          v128 = "unknown-mode";
          break;
      }

      v213 = v122;
      v146 = v117;
      v147 = v127;
      os_unfair_lock_lock(lock);
      v148 = v228->current_path;
      os_unfair_lock_unlock(lock);

      v117 = v146;
      *(_DWORD *)buf = 136448002;
      *(void *)&uint8_t buf[4] = "nw_endpoint_flow_setup_cloned_protocols";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v228->id_str;
      *(_WORD *)&buf[22] = 2082;
      v240 = v121;
      *(_WORD *)v241 = 2082;
      *(void *)&v241[2] = v216;
      v242 = 2082;
      v243 = v214;
      v244 = 2082;
      v245 = v128;
      v246 = 2114;
      v247 = v148;
      v248 = 2082;
      v249 = identifier;
      _os_log_impl( &dword_181A5C000,  v146,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Cannot join protocol %{public}s due to mismatch",  buf,  0x52u);
    }

    goto LABEL_120;
  }

  if ((nw_endpoint_handler_get_logging_disabled(v228) & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    v180 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v180, OS_LOG_TYPE_DEBUG))
    {
      v181 = nw_endpoint_handler_get_id_string(v228);
      v182 = nw_endpoint_handler_dry_run_string(v228);
      v183 = nw_endpoint_handler_copy_endpoint(v228);
      v184 = nw_endpoint_get_logging_description(v183);
      v185 = nw_endpoint_handler_state_string(v228);
      v186 = nw_endpoint_handler_mode_string(v228);
      v187 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v228);
      *(_DWORD *)buf = 136448002;
      *(void *)&uint8_t buf[4] = "nw_endpoint_flow_setup_cloned_protocols";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v181;
      *(_WORD *)&buf[22] = 2082;
      v240 = v182;
      *(_WORD *)v241 = 2082;
      *(void *)&v241[2] = v184;
      v242 = 2082;
      v243 = v185;
      v244 = 2082;
      v245 = v186;
      v246 = 2114;
      v247 = v187;
      v248 = 2082;
      v249 = identifier;
      _os_log_impl( &dword_181A5C000,  v180,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Joining protocol %{public}s",  buf,  0x52u);
    }
  }

  if (v218->bottom_protocol)
  {
    v188 = nw_endpoint_handler_copy_flow(v228);
    *((void *)v188 + 94) = v218->bottom_protocol;
  }

  if ((*((_BYTE *)v218 + 35) & 8) != 0)
  {
    v189 = nw_endpoint_handler_copy_flow(v228);
    *((_BYTE *)v189 + 35) |= 8u;
  }

  nw_endpoint_flow_setup_protocols(v228, 0LL, output_handler, 1, 1);
LABEL_181:

LABEL_232:
  v192 = self->clone_from_flow;
  self->clone_from_flow = 0LL;

LABEL_233:
}

              os_log_type_t v55 = nw_write_request_copy_context(v9);
              v151 = 0LL;
              goto LABEL_134;
            }

            __nwlog_obj();
            v95 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            v156 = "nw_write_request_copy_original_message";
            v96 = (char *)_os_log_send_and_compose_impl();

            os_log_type_t type = OS_LOG_TYPE_ERROR;
            v153 = 0;
            if (__nwlog_fault(v96, &type, &v153))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                os_log_type_t v97 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                BOOL v98 = type;
                if (os_log_type_enabled(v97, type))
                {
                  *(_DWORD *)buf = 136446210;
                  v156 = "nw_write_request_copy_original_message";
                  _os_log_impl(&dword_181A5C000, v97, v98, "%{public}s called with null request", buf, 0xCu);
                }
              }

              else if (v153)
              {
                backtrace_string = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                os_log_type_t v97 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v100 = type;
                BOOL v101 = os_log_type_enabled(v97, type);
                if (backtrace_string)
                {
                  if (v101)
                  {
                    *(_DWORD *)buf = 136446466;
                    v156 = "nw_write_request_copy_original_message";
                    v157 = 2082;
                    id_str = backtrace_string;
                    _os_log_impl( &dword_181A5C000,  v97,  v100,  "%{public}s called with null request, dumping backtrace:%{public}s",  buf,  0x16u);
                  }

                  free(backtrace_string);
                  goto LABEL_131;
                }

                if (v101)
                {
                  *(_DWORD *)buf = 136446210;
                  v156 = "nw_write_request_copy_original_message";
                  _os_log_impl( &dword_181A5C000,  v97,  v100,  "%{public}s called with null request, no backtrace",  buf,  0xCu);
                }
              }

              else
              {
                __nwlog_obj();
                os_log_type_t v97 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v102 = type;
                if (os_log_type_enabled(v97, type))
                {
                  *(_DWORD *)buf = 136446210;
                  v156 = "nw_write_request_copy_original_message";
                  _os_log_impl( &dword_181A5C000,  v97,  v102,  "%{public}s called with null request, backtrace limit exceeded",  buf,  0xCu);
                }
              }
            }

      if (v110) {
        free(v110);
      }
      os_log_type_t v21 = 0;
      if (v17 != &nw_protocol_ref_counted_handle) {
        goto LABEL_25;
      }
      goto LABEL_24;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v129 = "__nw_protocol_get_input_frames";
    os_log_type_t v58 = (char *)_os_log_send_and_compose_impl();
    v127 = OS_LOG_TYPE_ERROR;
    v126 = 0;
    if (__nwlog_fault(v58, &v127, &v126))
    {
      if (v127 == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v59 = (os_log_s *)__nwlog_obj();
        os_log_type_t v60 = v127;
        if (os_log_type_enabled(v59, v127))
        {
          *(_DWORD *)buf = 136446210;
          v129 = "__nw_protocol_get_input_frames";
          char v61 = v59;
          os_log_type_t v62 = v60;
          os_log_type_t v63 = "%{public}s called with null protocol";
LABEL_141:
          _os_log_impl(&dword_181A5C000, v61, v62, v63, buf, 0xCu);
        }
      }

      else if (v126)
      {
        __uint64_t v73 = (char *)__nw_create_backtrace_string();
        unint64_t v74 = (os_log_s *)__nwlog_obj();
        char v75 = v127;
        __uint64_t v76 = os_log_type_enabled(v74, v127);
        if (v73)
        {
          if (v76)
          {
            *(_DWORD *)buf = 136446466;
            v129 = "__nw_protocol_get_input_frames";
            v130 = 2082;
            v131 = v73;
            _os_log_impl( &dword_181A5C000,  v74,  v75,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v73);
          goto LABEL_142;
        }

        if (v76)
        {
          *(_DWORD *)buf = 136446210;
          v129 = "__nw_protocol_get_input_frames";
          char v61 = v74;
          os_log_type_t v62 = v75;
          os_log_type_t v63 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_141;
        }
      }

      else
      {
        v84 = (os_log_s *)__nwlog_obj();
        v85 = v127;
        if (os_log_type_enabled(v84, v127))
        {
          *(_DWORD *)buf = 136446210;
          v129 = "__nw_protocol_get_input_frames";
          char v61 = v84;
          os_log_type_t v62 = v85;
          os_log_type_t v63 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_141;
        }
      }
    }

LABEL_134:
        if (!v17)
        {
LABEL_137:

          goto LABEL_138;
        }

        goto LABEL_135;
      }

      if (!v77)
      {
        __nwlog_obj();
        id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v59 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v80 = "networkd_privileged_set_constrained_block_invoke";
          _os_log_impl( &dword_181A5C000,  v18,  v59,  "%{public}s received invalid result type, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_133;
      }

      __int16 v38 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v39 = type;
      uint64_t v40 = os_log_type_enabled(v18, type);
      if (!v38)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          v80 = "networkd_privileged_set_constrained_block_invoke";
          _os_log_impl(&dword_181A5C000, v18, v39, "%{public}s received invalid result type, no backtrace", buf, 0xCu);
        }

        goto LABEL_133;
      }

      if (v40)
      {
        *(_DWORD *)buf = 136446466;
        v80 = "networkd_privileged_set_constrained_block_invoke";
        v81 = 2082;
        *(void *)v82 = v38;
        _os_log_impl( &dword_181A5C000,  v18,  v39,  "%{public}s received invalid result type, dumping backtrace:%{public}s",  buf,  0x16u);
      }

LABEL_134:
        if (!v17)
        {
LABEL_137:

          goto LABEL_138;
        }

        goto LABEL_135;
      }

      if (!v77)
      {
        __nwlog_obj();
        id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v59 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
          _os_log_impl( &dword_181A5C000,  v18,  v59,  "%{public}s received invalid result type, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_133;
      }

      __int16 v38 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v39 = type;
      uint64_t v40 = os_log_type_enabled(v18, type);
      if (!v38)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
          _os_log_impl(&dword_181A5C000, v18, v39, "%{public}s received invalid result type, no backtrace", buf, 0xCu);
        }

        goto LABEL_133;
      }

      if (v40)
      {
        *(_DWORD *)buf = 136446466;
        v80 = "networkd_privileged_set_ultra_constrained_block_invoke";
        v81 = 2082;
        *(void *)v82 = v38;
        _os_log_impl( &dword_181A5C000,  v18,  v39,  "%{public}s received invalid result type, dumping backtrace:%{public}s",  buf,  0x16u);
      }

LABEL_134:
        if (!v17)
        {
LABEL_137:

          goto LABEL_138;
        }

        goto LABEL_135;
      }

      if (!v77)
      {
        __nwlog_obj();
        id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v59 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v80 = "networkd_privileged_set_expensive_block_invoke";
          _os_log_impl( &dword_181A5C000,  v18,  v59,  "%{public}s received invalid result type, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_133;
      }

      __int16 v38 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v39 = type;
      uint64_t v40 = os_log_type_enabled(v18, type);
      if (!v38)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          v80 = "networkd_privileged_set_expensive_block_invoke";
          _os_log_impl(&dword_181A5C000, v18, v39, "%{public}s received invalid result type, no backtrace", buf, 0xCu);
        }

        goto LABEL_133;
      }

      if (v40)
      {
        *(_DWORD *)buf = 136446466;
        v80 = "networkd_privileged_set_expensive_block_invoke";
        v81 = 2082;
        *(void *)v82 = v38;
        _os_log_impl( &dword_181A5C000,  v18,  v39,  "%{public}s received invalid result type, dumping backtrace:%{public}s",  buf,  0x16u);
      }

    if (v56) {
      free(v56);
    }
    **(_DWORD **)(a1 + 40) = 0;
  }

  v126 = *(_DWORD **)(a1 + 88);
  v51 = __CFADD__(*v126, v16);
  *v126 += v16;
  if (!v51) {
    goto LABEL_155;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v127 = v16;
  v128 = (_DWORD *)**(unsigned int **)(a1 + 88);
  *(_DWORD *)buf = 136446978;
  *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
  *(_WORD *)&buf[12] = 2082;
  *(void *)&buf[14] = "moved_bytes";
  *(_WORD *)&buf[22] = 2048;
  v292 = v16;
  v293 = 2048;
  v294 = v128;
  v129 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  v288 = 0;
  if (__nwlog_fault(v129, &type, &v288))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v130 = (os_log_s *)gLogObj;
      v131 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        v132 = (_DWORD *)**(unsigned int **)(a1 + 88);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = "moved_bytes";
        *(_WORD *)&buf[22] = 2048;
        v292 = v127;
        v293 = 2048;
        v294 = v132;
        v133 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_151:
        _os_log_impl(&dword_181A5C000, v130, v131, v133, buf, 0x2Au);
      }
    }

    else if (v288)
    {
      v134 = (char *)__nw_create_backtrace_string();
      v130 = (os_log_s *)__nwlog_obj();
      v131 = type;
      v135 = os_log_type_enabled(v130, type);
      if (v134)
      {
        if (v135)
        {
          v136 = (_DWORD *)**(unsigned int **)(a1 + 88);
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = "moved_bytes";
          *(_WORD *)&buf[22] = 2048;
          v292 = v127;
          v293 = 2048;
          v294 = v136;
          v295 = 2082;
          v296 = v134;
          _os_log_impl( &dword_181A5C000,  v130,  v131,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
        }

        free(v134);
        goto LABEL_152;
      }

      if (v135)
      {
        v138 = (_DWORD *)**(unsigned int **)(a1 + 88);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = "moved_bytes";
        *(_WORD *)&buf[22] = 2048;
        v292 = v127;
        v293 = 2048;
        v294 = v138;
        v133 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
        goto LABEL_151;
      }
    }

    else
    {
      v130 = (os_log_s *)__nwlog_obj();
      v131 = type;
      if (os_log_type_enabled(v130, type))
      {
        v137 = (_DWORD *)**(unsigned int **)(a1 + 88);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_protocol_plugin_metadata_process_frames_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = "moved_bytes";
        *(_WORD *)&buf[22] = 2048;
        v292 = v127;
        v293 = 2048;
        v294 = v137;
        v133 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
        goto LABEL_151;
      }
    }
  }

  nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 32), 100);
  v99 = 0xFFFFFFFFLL;
LABEL_143:
  v136 = v99;
LABEL_144:
  unsigned int v4 = v135;
LABEL_145:

  return v136;
}

    goto LABEL_134;
  }

  os_log_type_t v46 = v45 - 1;
  os_log_type_t v47 = *((_DWORD *)v41 + 12);
  if (v46 <= v47) {
    goto LABEL_60;
  }
  v48 = v47 + 4;
  *((_DWORD *)v41 + 12) = v48;
  os_log_type_t v49 = (void *)*((void *)v41 + 52);
  if (!v49)
  {
    if (v47 == -4)
    {
      __nwlog_obj();
      v80 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v80, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      v94 = "strict_calloc";
      v81 = (void *)_os_log_send_and_compose_impl();

      BOOL result = __nwlog_abort((uint64_t)v81);
      if (result) {
        goto LABEL_136;
      }
      free(v81);
    }

    BOOL v56 = calloc(v48, 0x168uLL);
    if (v56)
    {
      *((void *)v41 + 52) = v56;
      if (gLogDatapath) {
        goto LABEL_71;
      }
LABEL_61:

      os_log_type_t v52 = *((_DWORD *)v5 + 11);
      if (v52 == 1) {
        __int16 v9 = (uint64_t)(v41 + 56);
      }
      else {
        __int16 v9 = *((void *)v41 + 52) + 360LL * (v52 - 2);
      }
      objc_storeStrong((id *)(v9 + 352), a2);
      if (gLogDatapath)
      {
        __nwlog_obj();
        BOOL v53 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
        {
          BOOL v54 = nw_interface_get_radio_type(v7);
          os_log_type_t v55 = nw_interface_radio_type_to_string(v54);
          *(_DWORD *)buf = 136446978;
          v94 = "nw_data_transfer_report_get_path_report_for_interface_locked";
          v95 = 2048;
          v96 = (const char *)v9;
          os_log_type_t v97 = 2112;
          *(void *)BOOL v98 = v7;
          *(_WORD *)&v98[8] = 2080;
          v99 = v55;
          _os_log_impl( &dword_181A5C000,  v53,  OS_LOG_TYPE_DEBUG,  "%{public}s created path report %p for interface %@[%s]",  buf,  0x2Au);
        }
      }

      goto LABEL_103;
    }

    __nwlog_obj();
    v82 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v82, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    v94 = "strict_calloc";
    v95 = 2048;
    v96 = (const char *)v48;
    os_log_type_t v97 = 2048;
    *(void *)BOOL v98 = 360LL;
    os_log_type_t v83 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v83);
    if (result) {
      goto LABEL_136;
    }
    free(v83);
    *((void *)v41 + 52) = 0LL;
    __nwlog_obj();
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v94 = "nw_data_transfer_report_allocate_additional_path_reports_if_necessary_locked";
    __int16 v68 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v91 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v69 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v85 = type;
      if (os_log_type_enabled(v69, type))
      {
        *(_DWORD *)buf = 136446210;
        v94 = "nw_data_transfer_report_allocate_additional_path_reports_if_necessary_locked";
        _os_log_impl(&dword_181A5C000, v69, v85, "%{public}s called with null report->secondary_paths", buf, 0xCu);
      }
    }

    else if (v91)
    {
      os_log_type_t v87 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v69 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v88 = type;
      os_log_type_t v89 = os_log_type_enabled(v69, type);
      if (v87)
      {
        if (v89)
        {
          *(_DWORD *)buf = 136446466;
          v94 = "nw_data_transfer_report_allocate_additional_path_reports_if_necessary_locked";
          v95 = 2082;
          v96 = v87;
          _os_log_impl( &dword_181A5C000,  v69,  v88,  "%{public}s called with null report->secondary_paths, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v87);
        if (!v68) {
          goto LABEL_61;
        }
LABEL_135:
        free(v68);
        goto LABEL_61;
      }

      if (v89)
      {
        *(_DWORD *)buf = 136446210;
        v94 = "nw_data_transfer_report_allocate_additional_path_reports_if_necessary_locked";
        _os_log_impl( &dword_181A5C000,  v69,  v88,  "%{public}s called with null report->secondary_paths, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      v69 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v90 = type;
      if (os_log_type_enabled(v69, type))
      {
        *(_DWORD *)buf = 136446210;
        v94 = "nw_data_transfer_report_allocate_additional_path_reports_if_necessary_locked";
        _os_log_impl( &dword_181A5C000,  v69,  v90,  "%{public}s called with null report->secondary_paths, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_133;
  }

  if (v47 == -4)
  {
    __nwlog_obj();
    __uint64_t v76 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v76, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v94 = "_strict_reallocf";
    v77 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v77);
    if (result) {
      goto LABEL_136;
    }
    free(v77);
    os_log_type_t v49 = (void *)*((void *)v41 + 52);
  }

  BOOL v50 = 360LL * v48;
  v51 = (char *)reallocf(v49, v50);
  if (v51)
  {
LABEL_59:
    *((void *)v41 + 52) = v51;
    bzero(&v51[360 * (*((_DWORD *)v41 + 12) - 4)], 0x5A0uLL);
LABEL_60:
    if (!gLogDatapath) {
      goto LABEL_61;
    }
LABEL_71:
    __nwlog_obj();
    os_log_type_t v57 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
    {
      os_log_type_t v58 = *((_DWORD *)v5 + 11);
      os_log_type_t v59 = *((_DWORD *)v41 + 12);
      *(_DWORD *)buf = 136446978;
      v94 = "nw_data_transfer_report_allocate_additional_path_reports_if_necessary_locked";
      v95 = 2048;
      v96 = v41;
      os_log_type_t v97 = 1024;
      *(_DWORD *)BOOL v98 = v58;
      *(_WORD *)&v98[4] = 1024;
      *(_DWORD *)&v98[6] = v59;
      _os_log_impl( &dword_181A5C000,  v57,  OS_LOG_TYPE_DEBUG,  "%{public}s report %p after adding path, path_count %u, allocated_path_count %u",  buf,  0x22u);
    }

    goto LABEL_61;
  }

  __nwlog_obj();
  unint64_t v78 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v78, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v94 = "_strict_reallocf";
  v95 = 2048;
  v96 = (const char *)v50;
  char v79 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v79);
  if (!result)
  {
    free(v79);
    goto LABEL_59;
  }

    if (v101) {
      free(v101);
    }

    goto LABEL_136;
  }

  __nwlog_obj();
  os_log_type_t v57 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)aBlock = 136446210;
  *(void *)&void aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
  BOOL v54 = (char *)_os_log_send_and_compose_impl();

  iterate_block[0] = 16;
  LOBYTE(v124) = 0;
  if (__nwlog_fault(v54, iterate_block, &v124))
  {
    if (iterate_block[0] == 17)
    {
      __nwlog_obj();
      os_log_type_t v55 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v58 = iterate_block[0];
      if (os_log_type_enabled(v55, (os_log_type_t)iterate_block[0]))
      {
        *(_DWORD *)aBlock = 136446210;
        *(void *)&void aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        _os_log_impl(&dword_181A5C000, v55, v58, "%{public}s called with null parameters", aBlock, 0xCu);
      }

  parameters = self->parameters;
  if (parameters) {
    nw_association_unregister(parameters, self);
  }
}

              if (v27) {
                free(v27);
              }
              os_log_type_t v19 = 0LL;
              if (v10 != &nw_protocol_ref_counted_handle)
              {
LABEL_27:
                if (!v19) {
                  goto LABEL_240;
                }
                goto LABEL_137;
              }

        free(v41);
        goto LABEL_134;
      }

      if (v55)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v62 = "nw_parameters_create_secure_tcp";
        _os_log_impl( &dword_181A5C000,  v42,  v54,  "%{public}s called with null (configure_tcp != (_nw_parameters_configure_protocol_disable)), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v42 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v58 = type;
      if (os_log_type_enabled(v42, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v62 = "nw_parameters_create_secure_tcp";
        _os_log_impl( &dword_181A5C000,  v42,  v58,  "%{public}s called with null (configure_tcp != (_nw_parameters_configure_protocol_disable)), backtrace limit exceeded",  buf,  0xCu);
      }
    }

        goto LABEL_134;
      }

      if (!v64)
      {
        __nwlog_obj();
        __int16 v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v59 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v67 = "nw_parameters_create_quic_stream";
          _os_log_impl( &dword_181A5C000,  v34,  v59,  "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable)), back trace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_133;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v50 = type;
      v51 = os_log_type_enabled(v34, type);
      if (!backtrace_string)
      {
        if (v51)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v67 = "nw_parameters_create_quic_stream";
          _os_log_impl( &dword_181A5C000,  v34,  v50,  "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable)), no backtrace",  buf,  0xCu);
        }

        goto LABEL_133;
      }

      if (v51)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v67 = "nw_parameters_create_quic_stream";
        __int16 v68 = 2082;
        v69 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v34,  v50,  "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable)), dumpin g backtrace:%{public}s",  buf,  0x16u);
      }

    if (v100) {
      free(v100);
    }
    goto LABEL_95;
  }

  id v11 = (unsigned int *)v10;
  os_log_type_t v12 = v11[29];

  if ((_DWORD)v12 != 1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v27 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      else {
        uint64_t v28 = off_189BBBBC0[v12];
      }
      *(_DWORD *)buf = 136446722;
      v147 = "nw_endpoint_resolver_handle_alternative";
      v148 = 2082;
      id_str = (char *)v28;
      v150 = 2082;
      v151 = "resolver";
      _os_log_impl( &dword_181A5C000,  v27,  OS_LOG_TYPE_DEFAULT,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
    }

    goto LABEL_95;
  }

  minimize_logging = nw_endpoint_handler_get_minimize_logging(v11);
  if (v143)
  {
    if (!minimize_logging)
    {
      unsigned int v14 = v11;
      id v15 = *((_BYTE *)v14 + 268);

      if ((v15 & 0x20) != 0) {
        goto LABEL_49;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      int v16 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        log = v16;
        os_log_type_t v17 = v14;

        id v18 = v17;
        os_log_type_t v19 = *((_BYTE *)v14 + 268);

        if ((v19 & 1) != 0) {
          uint64_t v20 = "dry-run ";
        }
        else {
          uint64_t v20 = "";
        }
        os_log_type_t v21 = nw_endpoint_handler_copy_endpoint(v18);
        logging_description = nw_endpoint_get_logging_description(v21);
        os_log_type_t v23 = v18;
        os_log_type_t v24 = v23;
        os_log_type_t v25 = v23[30];
        else {
          id v26 = off_189BBBBF0[v25];
        }

        uint64_t v40 = v24;
        os_log_type_t v41 = v40;
        BOOL v42 = "path";
        switch(v11[29])
        {
          case 0u:
            break;
          case 1u:
            BOOL v42 = "resolver";
            break;
          case 2u:
            BOOL v42 = nw_endpoint_flow_mode_string(v40[31]);
            break;
          case 3u:
            BOOL v42 = "proxy";
            break;
          case 4u:
            BOOL v42 = "fallback";
            break;
          case 5u:
            BOOL v42 = "transform";
            break;
          default:
            BOOL v42 = "unknown-mode";
            break;
        }

        os_log_type_t v46 = v41;
        os_unfair_lock_lock((os_unfair_lock_t)v46 + 28);
        os_log_type_t v47 = v46[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v46 + 28);

        v48 = v47;
        *(_DWORD *)buf = 136448258;
        v147 = "nw_endpoint_resolver_handle_alternative";
        v148 = 2082;
        id_str = (char *)(v17 + 42);
        v150 = 2082;
        v151 = v20;
        v152 = 2082;
        v153 = logging_description;
        v154 = 2082;
        v155 = v26;
        v156 = 2082;
        v157 = v42;
        v158 = 2114;
        v159 = v48;
        v160 = 2082;
        v161 = nw_endpoint_get_logging_description(v142);
        v162 = 2112;
        v163 = v143;
        int v16 = log;
        _os_log_impl( &dword_181A5C000,  log,  OS_LOG_TYPE_INFO,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Discovered alternative %{public}s using %@",  buf,  0x5Cu);
      }

      goto LABEL_48;
    }

    if ((nw_endpoint_handler_get_logging_disabled(v11) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      int v16 = (os_log_s *)(id)gconnectionLogObj;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        id_string = nw_endpoint_handler_get_id_string(v11);
        v107 = nw_endpoint_handler_dry_run_string(v11);
        v108 = nw_endpoint_handler_copy_endpoint(v11);
        __int16 v109 = nw_endpoint_get_logging_description(v108);
        __uint64_t v110 = nw_endpoint_handler_state_string(v11);
        __int16 v111 = nw_endpoint_handler_mode_string(v11);
        uint64_t v112 = nw_endpoint_handler_copy_current_path(v11);
        *(_DWORD *)buf = 136448258;
        v147 = "nw_endpoint_resolver_handle_alternative";
        v148 = 2082;
        id_str = (char *)id_string;
        v150 = 2082;
        v151 = v107;
        v152 = 2082;
        v153 = v109;
        v154 = 2082;
        v155 = v110;
        v156 = 2082;
        v157 = v111;
        v158 = 2114;
        v159 = v112;
        v160 = 2082;
        v161 = nw_endpoint_get_logging_description(v142);
        v162 = 2112;
        v163 = v143;
        _os_log_impl( &dword_181A5C000,  v16,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Discovered alternative %{public}s using %@",  buf,  0x5Cu);
      }

        if ((handle[276] & 0x10) == 0)
        {
          os_log_type_t v63 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
          {
            os_log_type_t v64 = *((void *)handle + 11);
            if (v64) {
              id v65 = *(_DWORD *)(v64 + 460);
            }
            else {
              id v65 = -1;
            }
            BOOL v66 = *((void *)handle + 8);
            *(_DWORD *)buf = 136447234;
            BOOL v101 = "nw_webtransport_http3_stream_assign_stream_id";
            os_log_type_t v102 = 2082;
            os_log_type_t v103 = (char *)(handle + 192);
            __uint64_t v104 = 2080;
            char v105 = " ";
            v106 = 1024;
            v107 = v65;
            v108 = 2048;
            __int16 v109 = v66;
            _os_log_impl( &dword_181A5C000,  v63,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:s%lld> Failed to get stream ID for HTTP/3 webtransport stream, failing",  buf,  0x30u);
          }
        }

        os_log_type_t v67 = (void *)*((void *)handle + 6);
        nw_protocol_error(v67, (uint64_t)handle);
        nw_protocol_disconnected(v67, (uint64_t)handle);
LABEL_140:
        __int16 v68 = *((void *)handle + 11);
        if (v68)
        {
          if (*((void *)handle + 8) == -2LL)
          {
            if (*(void *)(v68 + 424))
            {
              if ((*(_BYTE *)(v68 + 548) & 2) == 0)
              {
                v69 = (os_log_s *)__nwlog_obj();
                if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v70 = *(_DWORD *)(v68 + 460);
                  *(_DWORD *)buf = 136446978;
                  BOOL v101 = "nw_webtransport_session_add_stream";
                  os_log_type_t v102 = 2082;
                  os_log_type_t v103 = (char *)(v68 + 464);
                  __uint64_t v104 = 2080;
                  char v105 = " ";
                  v106 = 1024;
                  v107 = v70;
                  os_log_type_t v71 = "%{public}s %{public}s%s<i%u> WebTransport already has datagram stream registered";
                  v72 = v69;
                  __uint64_t v73 = OS_LOG_TYPE_ERROR;
                  unint64_t v74 = 38;
LABEL_153:
                  _os_log_impl(&dword_181A5C000, v72, v73, v71, buf, v74);
                }
              }
                }
              }

          free(v80);
          goto LABEL_183;
        }

        if (v85)
        {
          *(_DWORD *)buf = 136446210;
          v116 = "nw_necp_append_tlv";
          _os_log_impl(&dword_181A5C000, v81, v84, "%{public}s called with null beyond, no backtrace", buf, 0xCu);
        }

        goto LABEL_182;
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v64 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v116 = "nw_necp_append_tlv";
      id v65 = (const char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      __int16 v111 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v65, type, &v111))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          BOOL v66 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v67 = type[0];
          if (os_log_type_enabled(v66, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v116 = "nw_necp_append_tlv";
            _os_log_impl(&dword_181A5C000, v66, v67, "%{public}s called with null tlv_start", buf, 0xCu);
          }

          goto LABEL_164;
        }

        if (v111 == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          BOOL v66 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v96 = type[0];
          if (os_log_type_enabled(v66, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v116 = "nw_necp_append_tlv";
            _os_log_impl( &dword_181A5C000,  v66,  v96,  "%{public}s called with null tlv_start, backtrace limit exceeded",  buf,  0xCu);
          }

          goto LABEL_164;
        }

        v80 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v81 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v82 = type[0];
        os_log_type_t v83 = os_log_type_enabled(v81, type[0]);
        if (v80)
        {
          if (v83)
          {
            *(_DWORD *)buf = 136446466;
            v116 = "nw_necp_append_tlv";
            v117 = 2082;
            v118 = (size_t)v80;
            _os_log_impl( &dword_181A5C000,  v81,  v82,  "%{public}s called with null tlv_start, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          goto LABEL_133;
        }

        if (v83)
        {
          *(_DWORD *)buf = 136446210;
          v116 = "nw_necp_append_tlv";
          _os_log_impl(&dword_181A5C000, v81, v82, "%{public}s called with null tlv_start, no backtrace", buf, 0xCu);
        }

      LODWORD(v31) = loga;
      if (v57) {
        free(v57);
      }
      id v32 = v164;
      goto LABEL_136;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446466;
    v178 = "nw_protocol_http1_get_output_frames";
    v179 = 1024;
    *(_DWORD *)v180 = v31;
    char v61 = (char *)_os_log_send_and_compose_impl();
    v176 = OS_LOG_TYPE_ERROR;
    v175 = 0;
    if (__nwlog_fault(v61, &v176, &v175))
    {
      if (v176 == OS_LOG_TYPE_FAULT)
      {
        id v65 = (os_log_s *)__nwlog_obj();
        BOOL v66 = v176;
        if (!os_log_type_enabled(v65, v176)) {
          goto LABEL_334;
        }
        *(_DWORD *)buf = 136446466;
        v178 = "nw_protocol_http1_get_output_frames";
        v179 = 1024;
        *(_DWORD *)v180 = v31;
        os_log_type_t v64 = "%{public}s failed to create/reuse output frame of length %u";
        goto LABEL_146;
      }

      if (!v175)
      {
        id v65 = (os_log_s *)__nwlog_obj();
        BOOL v66 = v176;
        if (!os_log_type_enabled(v65, v176)) {
          goto LABEL_334;
        }
        *(_DWORD *)buf = 136446466;
        v178 = "nw_protocol_http1_get_output_frames";
        v179 = 1024;
        *(_DWORD *)v180 = v31;
        os_log_type_t v64 = "%{public}s failed to create/reuse output frame of length %u, backtrace limit exceeded";
        goto LABEL_146;
      }

      v72 = v31;
      __uint64_t v73 = (char *)__nw_create_backtrace_string();
      id v65 = (os_log_s *)__nwlog_obj();
      BOOL v66 = v176;
      unint64_t v74 = os_log_type_enabled(v65, v176);
      if (v73)
      {
        if (v74)
        {
          *(_DWORD *)buf = 136446722;
          v178 = "nw_protocol_http1_get_output_frames";
          v179 = 1024;
          *(_DWORD *)v180 = v72;
          *(_WORD *)&v180[4] = 2082;
          *(void *)&v180[6] = v73;
          _os_log_impl( &dword_181A5C000,  v65,  v66,  "%{public}s failed to create/reuse output frame of length %u, dumping backtrace:%{public}s",  buf,  0x1Cu);
        }

        free(v73);
        goto LABEL_334;
      }

      if (v74)
      {
        *(_DWORD *)buf = 136446466;
        v178 = "nw_protocol_http1_get_output_frames";
        v179 = 1024;
        *(_DWORD *)v180 = v72;
        os_log_type_t v64 = "%{public}s failed to create/reuse output frame of length %u, no backtrace";
LABEL_146:
        os_log_type_t v91 = v65;
        v92 = v66;
        v93 = 18;
LABEL_333:
        _os_log_impl(&dword_181A5C000, v91, v92, v64, buf, v93);
      }
    }

          goto LABEL_134;
        }

        if (!v49)
        {
          __nwlog_obj();
          os_log_type_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v24 = type;
          if (os_log_type_enabled(v23, type))
          {
            *(_DWORD *)buf = 136446210;
            BOOL v53 = "nw_storage_flush_block_invoke";
            os_log_type_t v25 = "%{public}s Failed to prepare statement, backtrace limit exceeded";
            goto LABEL_132;
          }

          goto LABEL_133;
        }

        id v32 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v24 = type;
        __int16 v38 = os_log_type_enabled(v23, type);
        if (!v32)
        {
          if (v38)
          {
            *(_DWORD *)buf = 136446210;
            BOOL v53 = "nw_storage_flush_block_invoke";
            os_log_type_t v25 = "%{public}s Failed to prepare statement, no backtrace";
            goto LABEL_132;
          }

          goto LABEL_133;
        }

        if (v38)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v53 = "nw_storage_flush_block_invoke";
          BOOL v54 = 2082;
          os_log_type_t v55 = v32;
          os_log_type_t v39 = "%{public}s Failed to prepare statement, dumping backtrace:%{public}s";
LABEL_79:
          _os_log_impl(&dword_181A5C000, v23, v24, v39, buf, 0x16u);
          goto LABEL_80;
        }

        goto LABEL_80;
      }

      uint64_t v20 = *(sqlite3_stmt **)(*(void *)(a1 + 32) + 48LL);
    }

    if (sqlite3_bind_text(v20, 1, v5, -1, 0LL))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v21 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      BOOL v53 = "nw_storage_flush_block_invoke";
      BOOL v22 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      os_log_type_t v49 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v53 = "nw_storage_flush_block_invoke";
          os_log_type_t v25 = "%{public}s Failed to bind variable";
LABEL_132:
          _os_log_impl(&dword_181A5C000, v23, v24, v25, buf, 0xCu);
          goto LABEL_133;
        }

        goto LABEL_133;
      }

      if (!v49)
      {
        __nwlog_obj();
        os_log_type_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v53 = "nw_storage_flush_block_invoke";
          os_log_type_t v25 = "%{public}s Failed to bind variable, backtrace limit exceeded";
          goto LABEL_132;
        }

        goto LABEL_133;
      }

      id v32 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v24 = type;
      uint64_t v33 = os_log_type_enabled(v23, type);
      if (!v32)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v53 = "nw_storage_flush_block_invoke";
          os_log_type_t v25 = "%{public}s Failed to bind variable, no backtrace";
          goto LABEL_132;
        }

        goto LABEL_133;
      }

      if (v33) {
        goto LABEL_78;
      }
    }

    else
    {
      if (!sqlite3_bind_text(*(sqlite3_stmt **)(*(void *)(a1 + 32) + 48LL), 2, v4, -1, 0LL))
      {
        if (sqlite3_step(*(sqlite3_stmt **)(*(void *)(a1 + 32) + 48LL)) == 101) {
          goto LABEL_136;
        }
        __nwlog_obj();
        uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        BOOL v53 = "nw_storage_flush_block_invoke";
        BOOL v22 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        os_log_type_t v49 = 0;
        if (__nwlog_fault(v22, &type, &v49))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            os_log_type_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v24 = type;
            if (os_log_type_enabled(v23, type))
            {
              *(_DWORD *)buf = 136446210;
              BOOL v53 = "nw_storage_flush_block_invoke";
              os_log_type_t v25 = "%{public}s Failed to update";
              goto LABEL_132;
            }

            goto LABEL_133;
          }

          if (!v49)
          {
            __nwlog_obj();
            os_log_type_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v24 = type;
            if (os_log_type_enabled(v23, type))
            {
              *(_DWORD *)buf = 136446210;
              BOOL v53 = "nw_storage_flush_block_invoke";
              os_log_type_t v25 = "%{public}s Failed to update, backtrace limit exceeded";
              goto LABEL_132;
            }

            goto LABEL_133;
          }

          dispatch_workloop_t v44 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v24 = type;
          os_log_type_t v45 = os_log_type_enabled(v23, type);
          if (!v44)
          {
            if (v45)
            {
              *(_DWORD *)buf = 136446210;
              BOOL v53 = "nw_storage_flush_block_invoke";
              os_log_type_t v25 = "%{public}s Failed to update, no backtrace";
              goto LABEL_132;
            }

            goto LABEL_133;
          }

          if (v45)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v53 = "nw_storage_flush_block_invoke";
            BOOL v54 = 2082;
            os_log_type_t v55 = v44;
            _os_log_impl( &dword_181A5C000,  v23,  v24,  "%{public}s Failed to update, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v44);
        }

    goto LABEL_134;
  }

  __nwlog_obj();
  os_log_type_t v67 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_service_connector_create";
  __int16 v68 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v91[0] = 0;
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v69 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v70 = type[0];
    if (os_log_type_enabled(v69, type[0]))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_service_connector_create";
      _os_log_impl(&dword_181A5C000, v69, v70, "%{public}s called with null (localPort != 0)", buf, 0xCu);
    }

    goto LABEL_133;
  }

  if (!v91[0])
  {
    __nwlog_obj();
    v69 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    char v79 = type[0];
    if (os_log_type_enabled(v69, type[0]))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_service_connector_create";
      _os_log_impl( &dword_181A5C000,  v69,  v79,  "%{public}s called with null (localPort != 0), backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_133;
  }

  __uint64_t v73 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v69 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  unint64_t v74 = type[0];
  char v75 = os_log_type_enabled(v69, type[0]);
  if (!v73)
  {
    if (v75)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_service_connector_create";
      _os_log_impl(&dword_181A5C000, v69, v74, "%{public}s called with null (localPort != 0), no backtrace", buf, 0xCu);
    }

    goto LABEL_133;
  }

  if (v75)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_service_connector_create";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v73;
    _os_log_impl( &dword_181A5C000,  v69,  v74,  "%{public}s called with null (localPort != 0), dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v73);
  if (v68) {
    goto LABEL_135;
  }
LABEL_100:

  return 0LL;
}

      free(backtrace_string);
      goto LABEL_143;
    }

    os_log_type_t v37 = (os_log_s *)__nwlog_obj();
    __int16 v38 = type;
    if (!os_log_type_enabled(v37, type)) {
      goto LABEL_143;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v47 = "sa_dst_compare_no_dependencies";
    os_log_type_t v39 = "%{public}s called with null dst1";
LABEL_142:
    _os_log_impl(&dword_181A5C000, v37, v38, v39, buf, 0xCu);
LABEL_143:
    if (v36) {
      free(v36);
    }
    return 0LL;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v47 = "sa_dst_compare_no_dependencies";
    BOOL v36 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    dispatch_workloop_t v44 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v37 = (os_log_s *)__nwlog_obj();
      __int16 v38 = type;
      if (!os_log_type_enabled(v37, type)) {
        goto LABEL_143;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v47 = "sa_dst_compare_no_dependencies";
      os_log_type_t v39 = "%{public}s called with null dst2";
      goto LABEL_142;
    }

    if (!v44)
    {
      os_log_type_t v37 = (os_log_s *)__nwlog_obj();
      __int16 v38 = type;
      if (!os_log_type_enabled(v37, type)) {
        goto LABEL_143;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v47 = "sa_dst_compare_no_dependencies";
      os_log_type_t v39 = "%{public}s called with null dst2, backtrace limit exceeded";
      goto LABEL_142;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v37 = (os_log_s *)__nwlog_obj();
    __int16 v38 = type;
    char v43 = os_log_type_enabled(v37, type);
    if (backtrace_string)
    {
      if (v43)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v47 = "sa_dst_compare_no_dependencies";
        v48 = 2082;
        *(void *)os_log_type_t v49 = backtrace_string;
        BOOL v42 = "%{public}s called with null dst2, dumping backtrace:%{public}s";
        goto LABEL_132;
      }

      goto LABEL_133;
    }

    if (!v43) {
      goto LABEL_143;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v47 = "sa_dst_compare_no_dependencies";
    os_log_type_t v39 = "%{public}s called with null dst2, no backtrace";
    goto LABEL_142;
  }

  uint64_t v2 = *(unsigned __int8 *)(a1 + 1);
  if (v2 == 2) {
    goto LABEL_17;
  }
  if (v2 != 30)
  {
    unsigned int v5 = 0;
    goto LABEL_26;
  }

  uint64_t v3 = *(_DWORD *)(a1 + 8);
  unsigned int v4 = (unsigned __int16)v3;
  if (!v3)
  {
    if (*(_DWORD *)(a1 + 12)) {
      goto LABEL_23;
    }
    uint64_t v6 = *(_DWORD *)(a1 + 16);
    if (v6 != -65536)
    {
      if (!v6)
      {
        os_log_type_t v7 = *(_DWORD *)(a1 + 20);
        if (v7)
        {
          if (v7 == 0x1000000)
          {
            unsigned int v5 = 50;
            goto LABEL_26;
          }

LABEL_138:
  if (v43) {
    free(v43);
  }
}

      goto LABEL_139;
    }

    if (v209)
    {
      os_log_type_t v57 = (os_log_s *)nw_error_create_posix_error(v209);
      if (v57)
      {
        os_log_type_t v97 = v19;
        BOOL v98 = (*((_BYTE *)v97 + 268) & 0x20) == 0;

        if (v98)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          v99 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
          {
            os_log_type_t v100 = nw_endpoint_handler_get_id_string(v97);
            BOOL v101 = nw_endpoint_handler_dry_run_string(v97);
            v201 = nw_endpoint_handler_copy_endpoint(v97);
            os_log_type_t v102 = nw_endpoint_get_logging_description(v201);
            os_log_type_t v103 = nw_endpoint_handler_state_string(v97);
            __uint64_t v104 = nw_endpoint_handler_mode_string(v97);
            char v105 = (OS_nw_path *)nw_endpoint_handler_copy_current_path(v97);
            *(_DWORD *)buf = 136448002;
            v212 = "nw_endpoint_flow_setup_channel";
            v213 = 2082;
            v214 = (char *)v100;
            v215 = 2082;
            v216 = v101;
            v217 = 2082;
            v218 = (void *)v102;
            v219 = 2082;
            v220 = v103;
            v221 = 2082;
            v222 = v104;
            v223 = 2114;
            v224 = v105;
            v225 = 2112;
            v226 = v57;
            _os_log_impl( &dword_181A5C000,  v99,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] lost nexus assignment, error %@",  buf,  0x52u);
          }
        }

        if (*((void *)v4 + 109)) {
          goto LABEL_138;
        }
        os_log_type_t v57 = v57;
        os_log_type_t v41 = (os_log_s *)*((void *)v4 + 109);
        *((void *)v4 + 109) = v57;
        goto LABEL_137;
      }
    }

    if (v45) {
      free(v45);
    }
    int v16 = 0LL;
    if (v12 != &nw_protocol_ref_counted_handle) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }

  if (a3 != 14)
  {
LABEL_13:
    nw_protocol_common_notify(a1, a2, a3);
    return;
  }

  if (*(void *)(a1 + 48) != a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v49 = "nw_protocol_ipv4_notify";
    BOOL v22 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v46 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v46)
      {
        os_log_type_t v23 = (os_log_s *)__nwlog_obj();
        os_log_type_t v24 = type;
        if (!os_log_type_enabled(v23, type)) {
          goto LABEL_131;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v49 = "nw_protocol_ipv4_notify";
        os_log_type_t v25 = "%{public}s called with null (other_protocol == nw_protocol_get_input_handler(&ipv4->protocol)), backtrace limit exceeded";
        goto LABEL_130;
      }

      uint64_t v28 = (char *)__nw_create_backtrace_string();
      os_log_type_t v23 = (os_log_s *)__nwlog_obj();
      os_log_type_t v24 = type;
      os_log_type_t v37 = os_log_type_enabled(v23, type);
      if (!v28)
      {
        if (!v37) {
          goto LABEL_131;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v49 = "nw_protocol_ipv4_notify";
        os_log_type_t v25 = "%{public}s called with null (other_protocol == nw_protocol_get_input_handler(&ipv4->protocol)), no backtrace";
        goto LABEL_130;
      }

      if (!v37) {
        goto LABEL_99;
      }
      *(_DWORD *)buf = 136446466;
      os_log_type_t v49 = "nw_protocol_ipv4_notify";
      BOOL v50 = 2082;
      v51 = v28;
      BOOL v30 = "%{public}s called with null (other_protocol == nw_protocol_get_input_handler(&ipv4->protocol)), dumping back"
            "trace:%{public}s";
      goto LABEL_98;
    }

    os_log_type_t v23 = (os_log_s *)__nwlog_obj();
    os_log_type_t v24 = type;
    if (!os_log_type_enabled(v23, type)) {
      goto LABEL_131;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v49 = "nw_protocol_ipv4_notify";
    os_log_type_t v25 = "%{public}s called with null (other_protocol == nw_protocol_get_input_handler(&ipv4->protocol))";
    goto LABEL_130;
  }

  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v49 = "nw_protocol_ipv4_notify";
    BOOL v22 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v46 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v23 = (os_log_s *)__nwlog_obj();
      os_log_type_t v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_131;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v49 = "nw_protocol_ipv4_notify";
      os_log_type_t v25 = "%{public}s called with null (val != nil)";
      goto LABEL_130;
    }

    if (!v46)
    {
      os_log_type_t v23 = (os_log_s *)__nwlog_obj();
      os_log_type_t v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_131;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v49 = "nw_protocol_ipv4_notify";
      os_log_type_t v25 = "%{public}s called with null (val != nil), backtrace limit exceeded";
      goto LABEL_130;
    }

    uint64_t v28 = (char *)__nw_create_backtrace_string();
    os_log_type_t v23 = (os_log_s *)__nwlog_obj();
    os_log_type_t v24 = type;
    __int16 v38 = os_log_type_enabled(v23, type);
    if (!v28)
    {
      if (!v38) {
        goto LABEL_131;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v49 = "nw_protocol_ipv4_notify";
      os_log_type_t v25 = "%{public}s called with null (val != nil), no backtrace";
      goto LABEL_130;
    }

    if (!v38) {
      goto LABEL_99;
    }
    *(_DWORD *)buf = 136446466;
    os_log_type_t v49 = "nw_protocol_ipv4_notify";
    BOOL v50 = 2082;
    v51 = v28;
    BOOL v30 = "%{public}s called with null (val != nil), dumping backtrace:%{public}s";
LABEL_98:
    _os_log_impl(&dword_181A5C000, v23, v24, v30, buf, 0x16u);
    goto LABEL_99;
  }

  if (a5 != 1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v49 = "nw_protocol_ipv4_notify";
    BOOL v22 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v46 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v23 = (os_log_s *)__nwlog_obj();
      os_log_type_t v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_131;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v49 = "nw_protocol_ipv4_notify";
      os_log_type_t v25 = "%{public}s called with null (len == sizeof(BOOL))";
      goto LABEL_130;
    }

    if (!v46)
    {
      os_log_type_t v23 = (os_log_s *)__nwlog_obj();
      os_log_type_t v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_131;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v49 = "nw_protocol_ipv4_notify";
      os_log_type_t v25 = "%{public}s called with null (len == sizeof(BOOL)), backtrace limit exceeded";
      goto LABEL_130;
    }

    uint64_t v28 = (char *)__nw_create_backtrace_string();
    os_log_type_t v23 = (os_log_s *)__nwlog_obj();
    os_log_type_t v24 = type;
    os_log_type_t v39 = os_log_type_enabled(v23, type);
    if (!v28)
    {
      if (!v39) {
        goto LABEL_131;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v49 = "nw_protocol_ipv4_notify";
      os_log_type_t v25 = "%{public}s called with null (len == sizeof(BOOL)), no backtrace";
      goto LABEL_130;
    }

    if (v39)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v49 = "nw_protocol_ipv4_notify";
      BOOL v50 = 2082;
      v51 = v28;
      BOOL v30 = "%{public}s called with null (len == sizeof(BOOL)), dumping backtrace:%{public}s";
      goto LABEL_98;
    }

          if (!nw_frame_claim(v45, v87, *(_DWORD *)(v322 + 24), 0))
          {
            if ((nw_endpoint_handler_get_logging_disabled(v294) & 1) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              v121 = (os_log_s *)(id)gconnectionLogObj;
              if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
              {
                v308 = v121;
                v122 = nw_endpoint_handler_get_id_string(v294);
                v123 = nw_endpoint_handler_dry_run_string(v294);
                v124 = nw_endpoint_handler_copy_endpoint(v294);
                v125 = nw_endpoint_get_logging_description(v124);
                v302 = nw_endpoint_handler_state_string(v294);
                v126 = nw_endpoint_handler_mode_string(v294);
                v127 = nw_endpoint_handler_copy_current_path(v294);
                *(_DWORD *)buf = 136447746;
                *(void *)&uint8_t buf[4] = "nw_flow_prepare_output_frames";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = v122;
                *(_WORD *)&buf[22] = 2082;
                v338 = v123;
                *(_WORD *)v339 = 2082;
                *(void *)&v339[2] = v125;
                *(_WORD *)&v339[10] = 2082;
                v121 = v308;
                *(void *)&v339[12] = v302;
                *(_WORD *)&v339[20] = 2082;
                *(void *)&v339[22] = v126;
                v340 = 2114;
                v341 = v127;
                _os_log_impl( &dword_181A5C000,  v308,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Claiming frame failed",  buf,  0x48u);
              }
            }

            nw_write_request_fail(v70, 22);
            goto LABEL_245;
          }

          v92 = v334;
          v93 = *(unsigned int *)(v322 + 24);
          v94 = (v93 + v47);
          if (v316 && v301 > v94)
          {
            else {
              v95 = 2;
            }
            *(_WORD *)(handle + 332) = *(_WORD *)(handle + 332) & 0xFFFD | v95;
            BOOL v42 = v70;
            v96 = *((_BYTE *)v42 + 128);

            v47 += v93;
            v307 = data;
          }

          else
          {
            else {
              os_log_type_t v97 = 2;
            }
            *(_WORD *)(handle + 332) = *(_WORD *)(handle + 332) & 0xFFFD | v97;
            BOOL v98 = v70;
            v96 = *((_BYTE *)v98 + 128);

            BOOL v42 = nw_flow_copy_write_request(handle, (uint64_t)&v320, &v334);
            os_unfair_lock_lock(lock);
            pending_write_bytes = v296->pending_write_bytes;
            os_log_type_t v100 = pending_write_bytes >= v94;
            BOOL v101 = pending_write_bytes - v94;
            if (!v100) {
              BOOL v101 = 0;
            }
            v296->pending_write_bytes = v101;
            os_unfair_lock_unlock(lock);
            if (v42)
            {
              v307 = nw_write_request_copy_data(v42);

              if (v307)
              {
                v301 = dispatch_data_get_size(v307);
                os_log_type_t v47 = 0LL;
              }

              else
              {
                os_log_type_t v47 = 0LL;
                v301 = 0LL;
                v307 = 0LL;
              }
            }

            else
            {

              os_log_type_t v47 = 0LL;
              v301 = 0LL;
              v307 = 0LL;
              BOOL v42 = 0LL;
            }
          }

          v296->sent_application_byte_count += *(unsigned int *)(v322 + 24);
          if (v46)
          {
            os_log_type_t v102 = v46;
            os_log_type_t v103 = v102;
            if (v102 == (_BYTE *)&__block_literal_global_5_41854
              || v102 == (_BYTE *)&__block_literal_global_4
              || v102 == (_BYTE *)&__block_literal_global_3_41839
              || v102 == (_BYTE *)&__block_literal_global_41831
              || (v102[118] & 8) == 0)
            {
            }

            else
            {

              nw_frame_set_packet_id(v45, v103 + 8);
            }
          }

          if (v92)
          {
            *(_WORD *)(v45 + 204) |= 0x10u;
            *(void *)(v45 + 152) = v92;
            if (!v46) {
              goto LABEL_173;
            }
          }

          else if (!v46)
          {
            goto LABEL_173;
          }

          __uint64_t v104 = v46;
          if (v104 == (_BYTE *)&__block_literal_global_5_41854
            || v104 == (_BYTE *)&__block_literal_global_4
            || v104 == (_BYTE *)&__block_literal_global_3_41839
            || v104 == (_BYTE *)&__block_literal_global_41831
            || (v104[119] & 1) == 0)
          {
          }

          else
          {
            char v105 = v104[116];
            v106 = v104[117];

            v107 = *(unsigned __int16 *)(v45 + 204) | (*(unsigned __int8 *)(v45 + 206) << 16);
            if ((v107 & 0x10000) == 0)
            {
              *(_BYTE *)(v45 + 201) = v105;
              *(_BYTE *)(v45 + 202) = v106;
              *(_WORD *)(v45 + 204) = v107;
              *(_BYTE *)(v45 + 206) = (v107 | 0x10000u) >> 16;
            }
          }

            if (v81) {
              free(v81);
            }
            goto LABEL_140;
          }

          os_log_type_t v41 = v5;
          BOOL v42 = *((_BYTE *)v41 + 268);

          if ((v42 & 0x20) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            id v11 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            {
              char v43 = v41;

              dispatch_workloop_t v44 = v43;
              os_log_type_t v45 = *((_BYTE *)v41 + 268);

              if ((v45 & 1) != 0) {
                os_log_type_t v46 = "dry-run ";
              }
              else {
                os_log_type_t v46 = "";
              }
              os_log_type_t v47 = nw_endpoint_handler_copy_endpoint(v44);
              v48 = nw_endpoint_get_logging_description(v47);
              v94 = v43->id_str;
              os_log_type_t v49 = v44;
              BOOL v50 = v49;
              v51 = v49[30];
              else {
                os_log_type_t v52 = off_189BBBBF0[v51];
              }
              os_log_type_t v91 = v52;

              char v61 = v50;
              os_log_type_t v62 = v61;
              os_log_type_t v63 = v5->mode;
              os_log_type_t v64 = "path";
              switch(v63)
              {
                case 0:
                  break;
                case 1:
                  os_log_type_t v64 = "resolver";
                  break;
                case 2:
                  os_log_type_t v64 = nw_endpoint_flow_mode_string(v61[31]);
                  break;
                case 3:
                  os_log_type_t v64 = "proxy";
                  break;
                case 4:
                  os_log_type_t v64 = "fallback";
                  break;
                case 5:
                  os_log_type_t v64 = "transform";
                  break;
                default:
                  os_log_type_t v64 = "unknown-mode";
                  break;
              }

              os_log_type_t v71 = v62;
              os_unfair_lock_lock((os_unfair_lock_t)v71 + 28);
              v72 = v71[8];
              os_unfair_lock_unlock((os_unfair_lock_t)v71 + 28);

              *(_DWORD *)buf = 136447746;
              *(void *)&uint8_t buf[4] = "nw_endpoint_handler_add_read_request";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v94;
              *(_WORD *)&buf[22] = 2082;
              __int16 v109 = v46;
              __uint64_t v110 = 2082;
              __int16 v111 = v48;
              uint64_t v112 = 2082;
              __int16 v113 = v91;
              v114 = 2082;
              uint64_t v115 = v64;
              v116 = 2114;
              v117 = v72;
              _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Cannot receive after fl ow table is released",  buf,  0x48u);
            }

          free(v35);
          goto LABEL_139;
        }

        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        v69 = "__nw_protocol_get_output_frames";
        os_log_type_t v35 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        BOOL v66 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          v48 = (os_log_s *)__nwlog_obj();
          os_log_type_t v49 = type;
          if (!os_log_type_enabled(v48, type)) {
            goto LABEL_137;
          }
          *(_DWORD *)buf = 136446210;
          v69 = "__nw_protocol_get_output_frames";
          os_log_type_t v39 = "%{public}s called with null return_array";
        }

        else if (v66)
        {
          os_log_type_t v55 = (char *)__nw_create_backtrace_string();
          v48 = (os_log_s *)__nwlog_obj();
          os_log_type_t v49 = type;
          BOOL v56 = os_log_type_enabled(v48, type);
          if (v55)
          {
            if (v56)
            {
              *(_DWORD *)buf = 136446466;
              v69 = "__nw_protocol_get_output_frames";
              uint64_t v70 = 2082;
              os_log_type_t v71 = v55;
              _os_log_impl( &dword_181A5C000,  v48,  v49,  "%{public}s called with null return_array, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v55);
            if (!v35) {
              goto LABEL_139;
            }
            goto LABEL_138;
          }

          if (!v56) {
            goto LABEL_137;
          }
          *(_DWORD *)buf = 136446210;
          v69 = "__nw_protocol_get_output_frames";
          os_log_type_t v39 = "%{public}s called with null return_array, no backtrace";
        }

        else
        {
          v48 = (os_log_s *)__nwlog_obj();
          os_log_type_t v49 = type;
          if (!os_log_type_enabled(v48, type)) {
            goto LABEL_137;
          }
          *(_DWORD *)buf = 136446210;
          v69 = "__nw_protocol_get_output_frames";
          os_log_type_t v39 = "%{public}s called with null return_array, backtrace limit exceeded";
        }

        os_log_type_t v59 = v48;
        os_log_type_t v60 = v49;
        char v61 = 12;
        goto LABEL_136;
      }

      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v69 = "__nw_protocol_get_output_frames";
      char v43 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      BOOL v66 = 0;
      if (__nwlog_fault(v43, &type, &v66))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          dispatch_workloop_t v44 = (os_log_s *)__nwlog_obj();
          os_log_type_t v45 = type;
          if (os_log_type_enabled(v44, type))
          {
            *(_DWORD *)buf = 136446210;
            v69 = "__nw_protocol_get_output_frames";
            os_log_type_t v46 = "%{public}s called with null protocol";
LABEL_129:
            _os_log_impl(&dword_181A5C000, v44, v45, v46, buf, 0xCu);
          }
        }

        else if (v66)
        {
          BOOL v53 = (char *)__nw_create_backtrace_string();
          dispatch_workloop_t v44 = (os_log_s *)__nwlog_obj();
          os_log_type_t v45 = type;
          BOOL v54 = os_log_type_enabled(v44, type);
          if (v53)
          {
            if (v54)
            {
              *(_DWORD *)buf = 136446466;
              v69 = "__nw_protocol_get_output_frames";
              uint64_t v70 = 2082;
              os_log_type_t v71 = v53;
              _os_log_impl( &dword_181A5C000,  v44,  v45,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v53);
            goto LABEL_130;
          }

          if (v54)
          {
            *(_DWORD *)buf = 136446210;
            v69 = "__nw_protocol_get_output_frames";
            os_log_type_t v46 = "%{public}s called with null protocol, no backtrace";
            goto LABEL_129;
          }
        }

        else
        {
          dispatch_workloop_t v44 = (os_log_s *)__nwlog_obj();
          os_log_type_t v45 = type;
          if (os_log_type_enabled(v44, type))
          {
            *(_DWORD *)buf = 136446210;
            v69 = "__nw_protocol_get_output_frames";
            os_log_type_t v46 = "%{public}s called with null protocol, backtrace limit exceeded";
            goto LABEL_129;
          }
        }
      }

LABEL_139:
            if (!v23)
            {
LABEL_142:
              v48 = 1;
              goto LABEL_143;
            }

            goto LABEL_140;
          }

          if (!v102)
          {
            __nwlog_obj();
            os_log_type_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            __int16 v68 = type;
            if (os_log_type_enabled(v24, type))
            {
              *(_DWORD *)buf = 136446210;
              char v105 = "networkd_privileged_set_settings";
              _os_log_impl( &dword_181A5C000,  v24,  v68,  "%{public}s received invalid result type, backtrace limit exceeded",  buf,  0xCu);
            }

            goto LABEL_138;
          }

          os_log_type_t v49 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          BOOL v50 = type;
          v51 = os_log_type_enabled(v24, type);
          if (!v49)
          {
            if (v51)
            {
              *(_DWORD *)buf = 136446210;
              char v105 = "networkd_privileged_set_settings";
              _os_log_impl( &dword_181A5C000,  v24,  v50,  "%{public}s received invalid result type, no backtrace",  buf,  0xCu);
            }

            goto LABEL_138;
          }

          if (v51)
          {
            *(_DWORD *)buf = 136446466;
            char v105 = "networkd_privileged_set_settings";
            v106 = 2082;
            *(void *)v107 = v49;
            _os_log_impl( &dword_181A5C000,  v24,  v50,  "%{public}s received invalid result type, dumping backtrace:%{public}s",  buf,  0x16u);
          }

    if (!v30)
    {
LABEL_140:
      os_signpost_id_t v10 = 0LL;
      goto LABEL_10;
    }

    free(v21);
    goto LABEL_139;
  }

  __nwlog_obj();
  int v16 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v67 = "nw_protocol_implementation_get_parameters";
  os_log_type_t v17 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  id v65 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v17, type, &v65))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type[0];
      if (os_log_type_enabled(v18, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v67 = "nw_protocol_implementation_get_parameters";
        _os_log_impl(&dword_181A5C000, v18, v19, "%{public}s called with null protocol", buf, 0xCu);
      }
    }

    else if (v65)
    {
      uint64_t v28 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      objc_super v29 = type[0];
      BOOL v30 = os_log_type_enabled(v18, type[0]);
      if (v28)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v67 = "nw_protocol_implementation_get_parameters";
          __int16 v68 = 2082;
          v69 = v28;
          _os_log_impl( &dword_181A5C000,  v18,  v29,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v28);
        goto LABEL_100;
      }

      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v67 = "nw_protocol_implementation_get_parameters";
        _os_log_impl(&dword_181A5C000, v18, v29, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v45 = type[0];
      if (os_log_type_enabled(v18, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v67 = "nw_protocol_implementation_get_parameters";
        _os_log_impl( &dword_181A5C000,  v18,  v45,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

                        free(v64);
                        goto LABEL_139;
                      }

                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      BOOL v54 = (id)gLogObj;
                      *(_DWORD *)buf = 136446210;
                      v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                      os_log_type_t v55 = (char *)_os_log_send_and_compose_impl();

                      os_log_type_t type = OS_LOG_TYPE_ERROR;
                      v147 = 0;
                      if (__nwlog_fault(v55, &type, &v147))
                      {
                        if (type == OS_LOG_TYPE_FAULT)
                        {
                          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                          networkd_settings_init();
                          BOOL v56 = (os_log_s *)(id)gLogObj;
                          os_log_type_t v57 = type;
                          if (os_log_type_enabled(v56, type))
                          {
                            *(_DWORD *)buf = 136446210;
                            v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                            _os_log_impl( &dword_181A5C000,  v56,  v57,  "%{public}s nw_tcp_create_options failed",  buf,  0xCu);
                          }

            *(_DWORD *)buf = 136446466;
            os_log_type_t v83 = "nw_protocol_http_connect_disconnected";
            v84 = 2082;
            v85 = (void *)v62;
            os_log_type_t v17 = "%{public}s protocol %{public}s has invalid disconnected callback, no backtrace";
            goto LABEL_139;
          }

          goto LABEL_140;
        }

        os_log_type_t v12 = (os_log_s *)__nwlog_obj();
        BOOL v13 = type;
        if (!os_log_type_enabled(v12, type)) {
          goto LABEL_140;
        }
        os_log_type_t v64 = a1->default_input_handler;
        os_log_type_t v59 = "invalid";
        if (v64)
        {
          id v65 = v64->identifier;
          if (v65) {
            os_log_type_t v59 = (const char *)v65;
          }
        }

                        v48 = *(void *)(a1 + 8);
                        *(void *)(a1 + 8) = 0LL;
                        os_log_type_t v49 = *(void *)(a1 + 88);
                        if (v49)
                        {
                          BOOL v50 = *(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(v49 + 32);
                          if (v50)
                          {
                            v51 = v50(a1, v48, &a2[-v48]);
                            if (v51)
                            {
                              v345 = v51;
                              if (v51 == -1)
                              {
                                *(void *)(a1 + 32) = "Span callback error in on_version";
                                v345 = 24;
                              }

                              BOOL result = 0LL;
                              *(_DWORD *)(a1 + 24) = v345;
                              *(void *)(a1 + 40) = a2;
                              *(void *)(a1 + 56) = 218LL;
                              return result;
                            }
                          }
                        }

      id v65 = v43 - v63;
      BOOL v66 = v62 + v61;
      if (v43 - v63 < v62 || v66 > a4) {
        return 0LL;
      }
      memcpy(&__dst[v61], v64, v62);
      BOOL v42 = &v64[v62];
      char v61 = v66;
      char v43 = v65 - v62;
      if (v65 == v62) {
        goto LABEL_149;
      }
    }

    if (v43 < 4) {
      return 0LL;
    }
    os_log_type_t v62 = bswap32(*(_DWORD *)v42 & 0xFFFFFF7F);
    os_log_type_t v63 = 4LL;
LABEL_137:
    os_log_type_t v64 = &v42[v63];
    if (!v62) {
      goto LABEL_147;
    }
    goto LABEL_138;
  }

  if (!v14) {
    return 0LL;
  }
  os_log_type_t v52 = *v13;
  if (v52 > 0x3F)
  {
    os_log_type_t v60 = v52 >> 6;
    if (v60 == 2)
    {
      if (v14 < 4) {
        return 0LL;
      }
      os_log_type_t v52 = bswap32(*(_DWORD *)v13 & 0xFFFFFF7F);
      BOOL v53 = 4LL;
    }

    else if (v60 == 1)
    {
      if (v14 < 2) {
        return 0LL;
      }
      os_log_type_t v52 = bswap32(*(_WORD *)v13 & 0xFFBF) >> 16;
      BOOL v53 = 2LL;
    }

    else
    {
      if (v14 < 8) {
        return 0LL;
      }
      os_log_type_t v52 = bswap64(*(void *)v13 & 0xFFFFFFFFFFFFFF3FLL);
      BOOL v53 = 8LL;
    }
  }

  else
  {
    BOOL v53 = 1LL;
  }

  BOOL result = 0LL;
  if (HIDWORD(v52)) {
    return result;
  }
  BOOL v54 = v14 - v53;
  if (v54 < v52) {
    return result;
  }
  os_log_type_t v55 = v54 - v52;
  if (!v55) {
    return 0LL;
  }
  BOOL v56 = &v13[v53 + v52];
  os_log_type_t v57 = *v56;
  if (v57 > 0x3F)
  {
    if (v57 >> 6 == 2)
    {
      if (v55 >= 4)
      {
        os_log_type_t v57 = bswap32(*(_DWORD *)v56 & 0xFFFFFF7F);
        os_log_type_t v58 = 4LL;
        goto LABEL_105;
      }
    }

    else if (v57 >> 6 == 1)
    {
      if (v55 >= 2)
      {
        os_log_type_t v57 = bswap32(*(_WORD *)v56 & 0xFFBF) >> 16;
        os_log_type_t v58 = 2LL;
        goto LABEL_105;
      }
    }

    else if (v55 >= 8)
    {
      os_log_type_t v57 = bswap64(*(void *)v56 & 0xFFFFFFFFFFFFFF3FLL);
      os_log_type_t v58 = 8LL;
      goto LABEL_105;
    }

    return 0LL;
  }

  os_log_type_t v58 = 1LL;
LABEL_105:
  BOOL result = 0LL;
  if (v57 <= a4 && v57 <= v55 - v58)
  {
    memcpy(__dst, &v56[v58], v57);
    if (a5) {
      *a5 = v57;
    }
    return 1LL;
  }

  return result;
}

    if (v56) {
      free(v56);
    }
    goto LABEL_257;
  }

  address = nw_endpoint_get_address(v22);
  if (!address)
  {
    __nwlog_obj();
    v82 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(void *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
    os_log_type_t v83 = (char *)_os_log_send_and_compose_impl();

    __dst[0].sa_len = 16;
    LOBYTE(buffer) = 0;
    if (__nwlog_fault(v83, __dst, &buffer))
    {
      if (__dst[0].sa_len == 17)
      {
        __nwlog_obj();
        v84 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v85 = __dst[0].sa_len;
        if (os_log_type_enabled(v84, (os_log_type_t)__dst[0].sa_len))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
          _os_log_impl(&dword_181A5C000, v84, v85, "%{public}s nw_endpoint_get_address failed", applier, 0xCu);
        }
      }

      else if ((_BYTE)buffer)
      {
        v96 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v84 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v97 = __dst[0].sa_len;
        BOOL v98 = os_log_type_enabled(v84, (os_log_type_t)__dst[0].sa_len);
        if (v96)
        {
          if (v98)
          {
            *(_DWORD *)applier = 136446466;
            *(void *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
            *(_WORD *)&applier[12] = 2082;
            *(void *)&applier[14] = v96;
            _os_log_impl( &dword_181A5C000,  v84,  v97,  "%{public}s nw_endpoint_get_address failed, dumping backtrace:%{public}s",  applier,  0x16u);
          }

          free(v96);
          goto LABEL_173;
        }

        if (v98)
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
          _os_log_impl( &dword_181A5C000,  v84,  v97,  "%{public}s nw_endpoint_get_address failed, no backtrace",  applier,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v84 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v129 = __dst[0].sa_len;
        if (os_log_type_enabled(v84, (os_log_type_t)__dst[0].sa_len))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&applier[4] = "nw_service_connector_should_accept_connection_block_invoke";
          _os_log_impl( &dword_181A5C000,  v84,  v129,  "%{public}s nw_endpoint_get_address failed, backtrace limit exceeded",  applier,  0xCu);
        }
      }
    }

                    if (v66) {
                      free(v66);
                    }
LABEL_140:
                    nw_service_connector_reject_incoming_request(v7, v5, 0);
                    goto LABEL_113;
                  }

                  *(_DWORD *)key = 136446978;
                  *(void *)&key[4] = "nwsc_process_incoming_request";
                  *(_WORD *)&key[12] = 2114;
                  *(void *)&key[14] = v7;
                  *(_WORD *)&key[22] = 2114;
                  *(void *)&key[24] = v44;
                  *(_WORD *)&key[32] = 2114;
                  *(void *)&key[34] = v5;
                  v84 = (char *)_os_log_send_and_compose_impl();

                  LOBYTE(buffer[0]) = 16;
                  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                  if (__nwlog_fault(v84, buffer, &type))
                  {
                    if (LOBYTE(buffer[0]) == 17)
                    {
                      __nwlog_obj();
                      v85 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      v86 = buffer[0];
                      if (os_log_type_enabled(v85, buffer[0]))
                      {
                        *(_DWORD *)key = 136446978;
                        *(void *)&key[4] = "nwsc_process_incoming_request";
                        *(_WORD *)&key[12] = 2114;
                        *(void *)&key[14] = v7;
                        *(_WORD *)&key[22] = 2114;
                        *(void *)&key[24] = v44;
                        *(_WORD *)&key[32] = 2114;
                        *(void *)&key[34] = v5;
                        _os_log_impl( &dword_181A5C000,  v85,  v86,  "%{public}s %{public}@ active connection %{public}@ has same sequence number than incoming requ est %{public}@ but lower UUID, accepting incoming request and cancelling active connection",  (uint8_t *)key,  0x2Au);
                      }
                    }

                    else if (type)
                    {
                      BOOL v90 = (char *)__nw_create_backtrace_string();
                      __nwlog_obj();
                      v85 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      os_log_type_t v91 = buffer[0];
                      v92 = os_log_type_enabled(v85, buffer[0]);
                      if (v90)
                      {
                        if (v92)
                        {
                          *(_DWORD *)key = 136447234;
                          *(void *)&key[4] = "nwsc_process_incoming_request";
                          *(_WORD *)&key[12] = 2114;
                          *(void *)&key[14] = v7;
                          *(_WORD *)&key[22] = 2114;
                          *(void *)&key[24] = v44;
                          *(_WORD *)&key[32] = 2114;
                          *(void *)&key[34] = v5;
                          *(_WORD *)&key[42] = 2082;
                          *(void *)&key[44] = v90;
                          _os_log_impl( &dword_181A5C000,  v85,  v91,  "%{public}s %{public}@ active connection %{public}@ has same sequence number than incoming re quest %{public}@ but lower UUID, accepting incoming request and cancelling active connection , dumping backtrace:%{public}s",  (uint8_t *)key,  0x34u);
                        }

                        free(v90);
                        goto LABEL_144;
                      }

                      if (v92)
                      {
                        *(_DWORD *)key = 136446978;
                        *(void *)&key[4] = "nwsc_process_incoming_request";
                        *(_WORD *)&key[12] = 2114;
                        *(void *)&key[14] = v7;
                        *(_WORD *)&key[22] = 2114;
                        *(void *)&key[24] = v44;
                        *(_WORD *)&key[32] = 2114;
                        *(void *)&key[34] = v5;
                        _os_log_impl( &dword_181A5C000,  v85,  v91,  "%{public}s %{public}@ active connection %{public}@ has same sequence number than incoming requ est %{public}@ but lower UUID, accepting incoming request and cancelling active connection, no backtrace",  (uint8_t *)key,  0x2Au);
                      }
                    }

                    else
                    {
                      __nwlog_obj();
                      v85 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      v94 = buffer[0];
                      if (os_log_type_enabled(v85, buffer[0]))
                      {
                        *(_DWORD *)key = 136446978;
                        *(void *)&key[4] = "nwsc_process_incoming_request";
                        *(_WORD *)&key[12] = 2114;
                        *(void *)&key[14] = v7;
                        *(_WORD *)&key[22] = 2114;
                        *(void *)&key[24] = v44;
                        *(_WORD *)&key[32] = 2114;
                        *(void *)&key[34] = v5;
                        _os_log_impl( &dword_181A5C000,  v85,  v94,  "%{public}s %{public}@ active connection %{public}@ has same sequence number than incoming requ est %{public}@ but lower UUID, accepting incoming request and cancelling active connection, ba cktrace limit exceeded",  (uint8_t *)key,  0x2Au);
                      }
                    }
                  }

        __break(1u);
        return;
      case 4:
        if (!*((void *)v3 + 7))
        {
          (*(void (**)(void))(*((void *)v3 + 4) + 16LL))();
          goto LABEL_87;
        }

        uint64_t v6 = (void *)*((void *)v3 + 19);
        if (!v6) {
          goto LABEL_83;
        }
        os_log_type_t v7 = v6;
        int v8 = v7[2];

        if (v8 == 1 && nw_error_get_error_code(*((nw_error_t *)v3 + 19)) == 89)
        {
          __int16 v9 = *(void *)(*((void *)v3 + 7) + 16LL);
          if (v9 && !nw_path_parameters_get_logging_disabled(*(void *)(v9 + 104)))
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            os_signpost_id_t v10 = (os_log_s *)(id)gconnectionLogObj;
            if (!os_log_type_enabled(v10, OS_LOG_TYPE_INFO)) {
              goto LABEL_82;
            }
            id v11 = *(_DWORD *)(*((void *)v3 + 7) + 448LL);
            *(_DWORD *)buf = 136446466;
            v163 = "nw_read_request_report";
            v164 = 1024;
            *(_DWORD *)v165 = v11;
            os_log_type_t v12 = "%{public}s [C%u] Receive cancelled";
            BOOL v13 = v10;
            unsigned int v14 = OS_LOG_TYPE_INFO;
            id v15 = 18;
LABEL_81:
            _os_log_impl(&dword_181A5C000, v13, v14, v12, buf, v15);
LABEL_82:
          }
        }

        else
        {
          os_log_type_t v67 = *(void *)(*((void *)v3 + 7) + 16LL);
          if (v67 && !nw_path_parameters_get_logging_disabled(*(void *)(v67 + 104)))
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            os_signpost_id_t v10 = (os_log_s *)(id)gconnectionLogObj;
            if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
              goto LABEL_82;
            }
            __int16 v68 = *(_DWORD *)(*((void *)v3 + 7) + 448LL);
            v69 = *((void *)v3 + 19);
            *(_DWORD *)buf = 136446722;
            v163 = "nw_read_request_report";
            v164 = 1024;
            *(_DWORD *)v165 = v68;
            *(_WORD *)&v165[4] = 2114;
            *(void *)&v165[6] = v69;
            os_log_type_t v12 = "%{public}s [C%u] Receive failed with error %{public}@";
            BOOL v13 = v10;
            unsigned int v14 = OS_LOG_TYPE_ERROR;
            id v15 = 28;
            goto LABEL_81;
          }
        }

    if (v34) {
      free(v34);
    }
    id v32 = *(void **)&v81[16];
    if (!*(void *)&v81[16])
    {
LABEL_86:
      os_log_type_t v46 = v82[0];
      if (LODWORD(v82[1]))
      {
        if (LODWORD(v82[1]) < *(unsigned __int8 *)v82[0])
        {
          __nwlog_obj();
          os_log_type_t v47 = *(unsigned __int8 *)v82[0];
          *(_DWORD *)buf = 136446722;
          v77 = "copyconninfo";
          unint64_t v78 = 1024;
          *(_DWORD *)char v79 = v47;
          *(_WORD *)&v79[4] = 1024;
          *(_DWORD *)&v79[6] = v82[1];
          v48 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          unint64_t v74 = 0;
          if (type == OS_LOG_TYPE_FAULT)
          {
            os_log_type_t v49 = (os_log_s *)__nwlog_obj();
            BOOL v50 = type;
            if (!os_log_type_enabled(v49, type)) {
              goto LABEL_145;
            }
            v51 = *(unsigned __int8 *)v82[0];
            *(_DWORD *)buf = 136446722;
            v77 = "copyconninfo";
            unint64_t v78 = 1024;
            *(_DWORD *)char v79 = v51;
            *(_WORD *)&v79[4] = 1024;
            *(_DWORD *)&v79[6] = v82[1];
            os_log_type_t v52 = "%{public}s ioctl SIOCGCONNINFO return invalid destination (sa_len=%u > scir_dst_len=%u) failed";
          }

          else if (v74)
          {
            os_log_type_t v58 = (char *)__nw_create_backtrace_string();
            os_log_type_t v49 = (os_log_s *)__nwlog_obj();
            BOOL v50 = type;
            os_log_type_t v59 = os_log_type_enabled(v49, type);
            if (v58)
            {
              if (v59)
              {
                os_log_type_t v60 = *(unsigned __int8 *)v82[0];
                *(_DWORD *)buf = 136446978;
                v77 = "copyconninfo";
                unint64_t v78 = 1024;
                *(_DWORD *)char v79 = v60;
                *(_WORD *)&v79[4] = 1024;
                *(_DWORD *)&v79[6] = v82[1];
                LOWORD(v80[0]) = 2082;
                *(void *)((char *)v80 + 2) = v58;
                _os_log_impl( &dword_181A5C000,  v49,  v50,  "%{public}s ioctl SIOCGCONNINFO return invalid destination (sa_len=%u > scir_dst_len=%u) failed, dumpin g backtrace:%{public}s",  buf,  0x22u);
              }

              free(v58);
LABEL_145:
              if (v48) {
                free(v48);
              }
              os_log_type_t v46 = v82[0];
              if (!v82[0]) {
                goto LABEL_94;
              }
              goto LABEL_93;
            }

            if (!v59) {
              goto LABEL_145;
            }
            os_log_type_t v64 = *(unsigned __int8 *)v82[0];
            *(_DWORD *)buf = 136446722;
            v77 = "copyconninfo";
            unint64_t v78 = 1024;
            *(_DWORD *)char v79 = v64;
            *(_WORD *)&v79[4] = 1024;
            *(_DWORD *)&v79[6] = v82[1];
            os_log_type_t v52 = "%{public}s ioctl SIOCGCONNINFO return invalid destination (sa_len=%u > scir_dst_len=%u) failed, no backtrace";
          }

          else
          {
            os_log_type_t v49 = (os_log_s *)__nwlog_obj();
            BOOL v50 = type;
            if (!os_log_type_enabled(v49, type)) {
              goto LABEL_145;
            }
            os_log_type_t v62 = *(unsigned __int8 *)v82[0];
            *(_DWORD *)buf = 136446722;
            v77 = "copyconninfo";
            unint64_t v78 = 1024;
            *(_DWORD *)char v79 = v62;
            *(_WORD *)&v79[4] = 1024;
            *(_DWORD *)&v79[6] = v82[1];
            os_log_type_t v52 = "%{public}s ioctl SIOCGCONNINFO return invalid destination (sa_len=%u > scir_dst_len=%u) failed, backtr"
                  "ace limit exceeded";
          }

          _os_log_impl(&dword_181A5C000, v49, v50, v52, buf, 0x18u);
          goto LABEL_145;
        }
      }

      else if (v82[0])
      {
LABEL_93:
        free(v46);
        os_log_type_t v46 = 0LL;
      }

        BYTE2(v10[1].super.isa) |= 4u;
        if ((v35 & 4) == 0)
        {
LABEL_79:
          if ((v35 & 8) == 0) {
            goto LABEL_80;
          }
          goto LABEL_140;
        }

    if (v29) {
      free(v29);
    }
LABEL_12:
    if ((*v5 & 0x100) == 0) {
      return;
    }
    __int16 v9 = *((_DWORD *)handle + 93);
    if (v9 > 8 || ((1 << v9) & 0x198) == 0) {
      return;
    }
    if ((*v5 & 0x800) == 0)
    {
      if (gLogDatapath)
      {
        unint64_t v78 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG))
        {
          char v79 = *(_DWORD *)(*((void *)handle + 42) + 1280LL);
          v80 = *((void *)handle + 30);
          *(_DWORD *)buf = 136447234;
          v95 = "nw_protocol_http3_stream_input_finished";
          v96 = 2082;
          os_log_type_t v97 = handle + 636;
          BOOL v98 = 2080;
          v99 = " ";
          os_log_type_t v100 = 1024;
          BOOL v101 = v79;
          os_log_type_t v102 = 2048;
          os_log_type_t v103 = v80;
          _os_log_impl( &dword_181A5C000,  v78,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%llu> delivering deferred input finished",  buf,  0x30u);
        }
      }
    }

    os_signpost_id_t v10 = (unsigned __int16)*v5;
    id v11 = v10 & 0xFFFFFEFF | (handle[738] << 16);
    os_log_s *v5 = v10 & 0xFEFF;
    handle[738] = BYTE2(v11);
    os_log_type_t v12 = a1->default_input_handler;
    if (!v12
      || (BOOL v13 = v12->callbacks) == 0LL
      || (input_finished = (void (*)(nw_protocol *, nw_protocol *))v13->input_finished) == 0LL)
    {
      __nwlog_obj();
      id v15 = a1->default_input_handler;
      int v16 = "invalid";
      if (v15)
      {
        os_log_type_t v17 = v15->identifier;
        if (v17) {
          int v16 = (const char *)v17;
        }
      }

      *(_DWORD *)buf = 136446466;
      v95 = "nw_protocol_http3_stream_input_finished";
      v96 = 2082;
      os_log_type_t v97 = (char *)v16;
      id v18 = (const char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v92 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v19 = (os_log_s *)__nwlog_obj();
        uint64_t v20 = type;
        if (!os_log_type_enabled(v19, type)) {
          goto LABEL_165;
        }
        os_log_type_t v21 = a1->default_input_handler;
        BOOL v22 = "invalid";
        if (v21)
        {
          os_log_type_t v23 = v21->identifier;
          if (v23) {
            BOOL v22 = (const char *)v23;
          }
        }

    goto LABEL_142;
  }

  if (!nw_protocol_options_is_masque(v11[5]))
  {
    __nwlog_obj();
    id v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
    id v15 = (const char *)_os_log_send_and_compose_impl();

    LOBYTE(v60) = 16;
    char v61 = OS_LOG_TYPE_DEFAULT;
    if (v60 == 17)
    {
      __nwlog_obj();
      int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl( &dword_181A5C000,  v16,  v19,  "%{public}s called with null nw_protocol_options_is_masque(hop->options)",  buf,  0xCu);
      }

      goto LABEL_138;
    }

    if (v61 == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v52 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl( &dword_181A5C000,  v16,  v52,  "%{public}s called with null nw_protocol_options_is_masque(hop->options), backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_138;
    }

    BOOL v36 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v37 = v60;
    __int16 v38 = os_log_type_enabled(v16, (os_log_type_t)v60);
    if (!v36)
    {
      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl( &dword_181A5C000,  v16,  v37,  "%{public}s called with null nw_protocol_options_is_masque(hop->options), no backtrace",  buf,  0xCu);
      }

      goto LABEL_138;
    }

    if (v38)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
      os_log_type_t v64 = 2082;
      id v65 = v36;
      _os_log_impl( &dword_181A5C000,  v16,  v37,  "%{public}s called with null nw_protocol_options_is_masque(hop->options), dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_86;
  }

  if (!a2)
  {
    __nwlog_obj();
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
    id v15 = (const char *)_os_log_send_and_compose_impl();

    LOBYTE(v60) = 16;
    char v61 = OS_LOG_TYPE_DEFAULT;
    if (v60 == 17)
    {
      __nwlog_obj();
      int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_181A5C000, v16, v21, "%{public}s called with null header", buf, 0xCu);
      }

      goto LABEL_138;
    }

    if (v61 == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v53 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl( &dword_181A5C000,  v16,  v53,  "%{public}s called with null header, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_138;
    }

    BOOL v36 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v39 = v60;
    uint64_t v40 = os_log_type_enabled(v16, (os_log_type_t)v60);
    if (!v36)
    {
      if (v40)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_181A5C000, v16, v39, "%{public}s called with null header, no backtrace", buf, 0xCu);
      }

      goto LABEL_138;
    }

    if (v40)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
      os_log_type_t v64 = 2082;
      id v65 = v36;
      _os_log_impl( &dword_181A5C000,  v16,  v39,  "%{public}s called with null header, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_86;
  }

  if (!a3)
  {
    __nwlog_obj();
    BOOL v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
    id v15 = (const char *)_os_log_send_and_compose_impl();

    LOBYTE(v60) = 16;
    char v61 = OS_LOG_TYPE_DEFAULT;
    if (v60 == 17)
    {
      __nwlog_obj();
      int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_181A5C000, v16, v23, "%{public}s called with null value_prefix", buf, 0xCu);
      }

      goto LABEL_138;
    }

    if (v61 == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v54 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl( &dword_181A5C000,  v16,  v54,  "%{public}s called with null value_prefix, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_138;
    }

    BOOL v36 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v41 = v60;
    BOOL v42 = os_log_type_enabled(v16, (os_log_type_t)v60);
    if (!v36)
    {
      if (v42)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_181A5C000, v16, v41, "%{public}s called with null value_prefix, no backtrace", buf, 0xCu);
      }

      goto LABEL_138;
    }

    if (v42)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
      os_log_type_t v64 = 2082;
      id v65 = v36;
      _os_log_impl( &dword_181A5C000,  v16,  v41,  "%{public}s called with null value_prefix, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_86;
  }

  if (!a4)
  {
    __nwlog_obj();
    os_log_type_t v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
    id v15 = (const char *)_os_log_send_and_compose_impl();

    LOBYTE(v60) = 16;
    char v61 = OS_LOG_TYPE_DEFAULT;
    if (v60 == 17)
    {
      __nwlog_obj();
      int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_181A5C000, v16, v25, "%{public}s called with null value_suffix", buf, 0xCu);
      }

      goto LABEL_138;
    }

    if (v61 == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v55 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl( &dword_181A5C000,  v16,  v55,  "%{public}s called with null value_suffix, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_138;
    }

    BOOL v36 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    char v43 = v60;
    dispatch_workloop_t v44 = os_log_type_enabled(v16, (os_log_type_t)v60);
    if (!v36)
    {
      if (v44)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_181A5C000, v16, v43, "%{public}s called with null value_suffix, no backtrace", buf, 0xCu);
      }

      goto LABEL_138;
    }

    if (v44)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
      os_log_type_t v64 = 2082;
      id v65 = v36;
      _os_log_impl( &dword_181A5C000,  v16,  v43,  "%{public}s called with null value_suffix, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_86;
  }

  if (!a5)
  {
    __nwlog_obj();
    id v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
    id v15 = (const char *)_os_log_send_and_compose_impl();

    LOBYTE(v60) = 16;
    char v61 = OS_LOG_TYPE_DEFAULT;
    if (v60 == 17)
    {
      __nwlog_obj();
      int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v27 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_181A5C000, v16, v27, "%{public}s called with null agent_domain", buf, 0xCu);
      }

      goto LABEL_138;
    }

    if (v61 == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v56 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl( &dword_181A5C000,  v16,  v56,  "%{public}s called with null agent_domain, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_138;
    }

    BOOL v36 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v45 = v60;
    os_log_type_t v46 = os_log_type_enabled(v16, (os_log_type_t)v60);
    if (!v36)
    {
      if (v46)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_181A5C000, v16, v45, "%{public}s called with null agent_domain, no backtrace", buf, 0xCu);
      }

      goto LABEL_138;
    }

    if (v46)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
      os_log_type_t v64 = 2082;
      id v65 = v36;
      _os_log_impl( &dword_181A5C000,  v16,  v45,  "%{public}s called with null agent_domain, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_86;
  }

  if (!a6)
  {
    __nwlog_obj();
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
    id v15 = (const char *)_os_log_send_and_compose_impl();

    LOBYTE(v60) = 16;
    char v61 = OS_LOG_TYPE_DEFAULT;
    if (v60 == 17)
    {
      __nwlog_obj();
      int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      objc_super v29 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_181A5C000, v16, v29, "%{public}s called with null agent_type", buf, 0xCu);
      }

      goto LABEL_138;
    }

    if (v61 == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v57 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl( &dword_181A5C000,  v16,  v57,  "%{public}s called with null agent_type, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_138;
    }

    BOOL v36 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v47 = v60;
    v48 = os_log_type_enabled(v16, (os_log_type_t)v60);
    if (!v36)
    {
      if (v48)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_181A5C000, v16, v47, "%{public}s called with null agent_type, no backtrace", buf, 0xCu);
      }

      goto LABEL_138;
    }

    if (v48)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v63 = "nw_proxy_hop_add_token_header_with_agent_type";
      os_log_type_t v64 = 2082;
      id v65 = v36;
      _os_log_impl( &dword_181A5C000,  v16,  v47,  "%{public}s called with null agent_type, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    if (v45) {
      free(v45);
    }
    int v16 = 0LL;
    if (v12 != &nw_protocol_ref_counted_handle) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }

  if (a3 != 14)
  {
LABEL_13:
    nw_protocol_common_notify(a1, a2, a3);
    return;
  }

  if (*(void *)(a1 + 48) != a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v49 = "nw_protocol_ipv6_notify";
    BOOL v22 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v46 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v46)
      {
        os_log_type_t v23 = (os_log_s *)__nwlog_obj();
        os_log_type_t v24 = type;
        if (!os_log_type_enabled(v23, type)) {
          goto LABEL_131;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v49 = "nw_protocol_ipv6_notify";
        os_log_type_t v25 = "%{public}s called with null (other_protocol == nw_protocol_get_input_handler(&ipv6->protocol)), backtrace limit exceeded";
        goto LABEL_130;
      }

      uint64_t v28 = (char *)__nw_create_backtrace_string();
      os_log_type_t v23 = (os_log_s *)__nwlog_obj();
      os_log_type_t v24 = type;
      os_log_type_t v37 = os_log_type_enabled(v23, type);
      if (!v28)
      {
        if (!v37) {
          goto LABEL_131;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v49 = "nw_protocol_ipv6_notify";
        os_log_type_t v25 = "%{public}s called with null (other_protocol == nw_protocol_get_input_handler(&ipv6->protocol)), no backtrace";
        goto LABEL_130;
      }

      if (!v37) {
        goto LABEL_99;
      }
      *(_DWORD *)buf = 136446466;
      os_log_type_t v49 = "nw_protocol_ipv6_notify";
      BOOL v50 = 2082;
      v51 = v28;
      BOOL v30 = "%{public}s called with null (other_protocol == nw_protocol_get_input_handler(&ipv6->protocol)), dumping back"
            "trace:%{public}s";
      goto LABEL_98;
    }

    os_log_type_t v23 = (os_log_s *)__nwlog_obj();
    os_log_type_t v24 = type;
    if (!os_log_type_enabled(v23, type)) {
      goto LABEL_131;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v49 = "nw_protocol_ipv6_notify";
    os_log_type_t v25 = "%{public}s called with null (other_protocol == nw_protocol_get_input_handler(&ipv6->protocol))";
    goto LABEL_130;
  }

  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v49 = "nw_protocol_ipv6_notify";
    BOOL v22 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v46 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v23 = (os_log_s *)__nwlog_obj();
      os_log_type_t v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_131;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v49 = "nw_protocol_ipv6_notify";
      os_log_type_t v25 = "%{public}s called with null (val != nil)";
      goto LABEL_130;
    }

    if (!v46)
    {
      os_log_type_t v23 = (os_log_s *)__nwlog_obj();
      os_log_type_t v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_131;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v49 = "nw_protocol_ipv6_notify";
      os_log_type_t v25 = "%{public}s called with null (val != nil), backtrace limit exceeded";
      goto LABEL_130;
    }

    uint64_t v28 = (char *)__nw_create_backtrace_string();
    os_log_type_t v23 = (os_log_s *)__nwlog_obj();
    os_log_type_t v24 = type;
    __int16 v38 = os_log_type_enabled(v23, type);
    if (!v28)
    {
      if (!v38) {
        goto LABEL_131;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v49 = "nw_protocol_ipv6_notify";
      os_log_type_t v25 = "%{public}s called with null (val != nil), no backtrace";
      goto LABEL_130;
    }

    if (!v38) {
      goto LABEL_99;
    }
    *(_DWORD *)buf = 136446466;
    os_log_type_t v49 = "nw_protocol_ipv6_notify";
    BOOL v50 = 2082;
    v51 = v28;
    BOOL v30 = "%{public}s called with null (val != nil), dumping backtrace:%{public}s";
LABEL_98:
    _os_log_impl(&dword_181A5C000, v23, v24, v30, buf, 0x16u);
    goto LABEL_99;
  }

  if (a5 != 1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v49 = "nw_protocol_ipv6_notify";
    BOOL v22 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v46 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v23 = (os_log_s *)__nwlog_obj();
      os_log_type_t v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_131;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v49 = "nw_protocol_ipv6_notify";
      os_log_type_t v25 = "%{public}s called with null (len == sizeof(BOOL))";
      goto LABEL_130;
    }

    if (!v46)
    {
      os_log_type_t v23 = (os_log_s *)__nwlog_obj();
      os_log_type_t v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_131;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v49 = "nw_protocol_ipv6_notify";
      os_log_type_t v25 = "%{public}s called with null (len == sizeof(BOOL)), backtrace limit exceeded";
      goto LABEL_130;
    }

    uint64_t v28 = (char *)__nw_create_backtrace_string();
    os_log_type_t v23 = (os_log_s *)__nwlog_obj();
    os_log_type_t v24 = type;
    os_log_type_t v39 = os_log_type_enabled(v23, type);
    if (!v28)
    {
      if (!v39) {
        goto LABEL_131;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v49 = "nw_protocol_ipv6_notify";
      os_log_type_t v25 = "%{public}s called with null (len == sizeof(BOOL)), no backtrace";
      goto LABEL_130;
    }

    if (v39)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v49 = "nw_protocol_ipv6_notify";
      BOOL v50 = 2082;
      v51 = v28;
      BOOL v30 = "%{public}s called with null (len == sizeof(BOOL)), dumping backtrace:%{public}s";
      goto LABEL_98;
    }

void sub_181A6C0CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_activity_is_lightweight_representation(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint32_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[140] >> 1) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  int v16 = "nw_activity_is_lightweight_representation";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_activity_is_lightweight_representation";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null activity", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          int v16 = "nw_activity_is_lightweight_representation";
          __int16 v17 = 2082;
          id v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null activity, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_activity_is_lightweight_representation";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v16 = "nw_activity_is_lightweight_representation";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null activity, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_activity_get_sampling_rate_for_domain(unsigned int a1, int *a2, unsigned int *a3)
{
  uint64_t v64 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    os_log_type_t v37 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v59 = "nw_activity_get_sampling_rate_for_domain";
    __int16 v38 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v56 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v40 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v59 = "nw_activity_get_sampling_rate_for_domain";
        _os_log_impl(&dword_181A5C000, v39, v40, "%{public}s called with null domain", buf, 0xCu);
      }
    }

    else if (v56)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v46 = type;
      BOOL v47 = os_log_type_enabled(v39, type);
      if (backtrace_string)
      {
        if (v47)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v59 = "nw_activity_get_sampling_rate_for_domain";
          __int16 v60 = 2082;
          *(void *)char v61 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v39,  v46,  "%{public}s called with null domain, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_147:
        if (!v38) {
          return;
        }
        goto LABEL_148;
      }

      if (v47)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v59 = "nw_activity_get_sampling_rate_for_domain";
        _os_log_impl(&dword_181A5C000, v39, v46, "%{public}s called with null domain, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v53 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v59 = "nw_activity_get_sampling_rate_for_domain";
        _os_log_impl( &dword_181A5C000,  v39,  v53,  "%{public}s called with null domain, backtrace limit exceeded",  buf,  0xCu);
      }
    }

LABEL_146:
    goto LABEL_147;
  }

  if (!a2)
  {
    __nwlog_obj();
    os_log_type_t v41 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v59 = "nw_activity_get_sampling_rate_for_domain";
    __int16 v38 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v56 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v42 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v59 = "nw_activity_get_sampling_rate_for_domain";
        _os_log_impl(&dword_181A5C000, v39, v42, "%{public}s called with null out_sampling_rate_numerator", buf, 0xCu);
      }

      goto LABEL_146;
    }

    if (!v56)
    {
      __nwlog_obj();
      os_log_type_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v54 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v59 = "nw_activity_get_sampling_rate_for_domain";
        _os_log_impl( &dword_181A5C000,  v39,  v54,  "%{public}s called with null out_sampling_rate_numerator, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_146;
    }

    v48 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v49 = type;
    BOOL v50 = os_log_type_enabled(v39, type);
    if (!v48)
    {
      if (v50)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v59 = "nw_activity_get_sampling_rate_for_domain";
        _os_log_impl( &dword_181A5C000,  v39,  v49,  "%{public}s called with null out_sampling_rate_numerator, no backtrace",  buf,  0xCu);
      }

      goto LABEL_146;
    }

    if (v50)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v59 = "nw_activity_get_sampling_rate_for_domain";
      __int16 v60 = 2082;
      *(void *)char v61 = v48;
      _os_log_impl( &dword_181A5C000,  v39,  v49,  "%{public}s called with null out_sampling_rate_numerator, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_127;
  }

  if (!a3)
  {
    __nwlog_obj();
    char v43 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v59 = "nw_activity_get_sampling_rate_for_domain";
    __int16 v38 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v56 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v44 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v59 = "nw_activity_get_sampling_rate_for_domain";
        _os_log_impl(&dword_181A5C000, v39, v44, "%{public}s called with null out_sampling_rate_denominator", buf, 0xCu);
      }

      goto LABEL_146;
    }

    if (!v56)
    {
      __nwlog_obj();
      os_log_type_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v55 = type;
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v59 = "nw_activity_get_sampling_rate_for_domain";
        _os_log_impl( &dword_181A5C000,  v39,  v55,  "%{public}s called with null out_sampling_rate_denominator, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_146;
    }

    v48 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v51 = type;
    BOOL v52 = os_log_type_enabled(v39, type);
    if (!v48)
    {
      if (v52)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v59 = "nw_activity_get_sampling_rate_for_domain";
        _os_log_impl( &dword_181A5C000,  v39,  v51,  "%{public}s called with null out_sampling_rate_denominator, no backtrace",  buf,  0xCu);
      }

      goto LABEL_146;
    }

    if (v52)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v59 = "nw_activity_get_sampling_rate_for_domain";
      __int16 v60 = 2082;
      *(void *)char v61 = v48;
      _os_log_impl( &dword_181A5C000,  v39,  v51,  "%{public}s called with null out_sampling_rate_denominator, dumping backtrace:%{public}s",  buf,  0x16u);
    }

          *((_BYTE *)v160 + 476) |= 8u;
          if ((v53 & 0x20000) == 0)
          {
LABEL_102:
            if ((v53 & 0x40000) == 0) {
              goto LABEL_103;
            }
            goto LABEL_148;
          }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __uint64_t v76 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        os_log_type_t v87 = "nw_context_get_globals_for_protocol";
        char v27 = (char *)_os_log_send_and_compose_impl();

        v85 = OS_LOG_TYPE_ERROR;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v27, &v85, &type))
        {
          if (v85 == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v77 = (os_log_s *)(id)gLogObj;
            unint64_t v78 = v85;
            if (os_log_type_enabled(v77, v85))
            {
              *(_DWORD *)buf = 136446210;
              os_log_type_t v87 = "nw_context_get_globals_for_protocol";
              _os_log_impl( &dword_181A5C000,  v77,  v78,  "%{public}s nw_protocol_definition_allocate_globals failed",  buf,  0xCu);
            }
          }

          else if (type)
          {
            BOOL v30 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v77 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            char v79 = v85;
            v80 = os_log_type_enabled(v77, v85);
            if (v30)
            {
              if (v80)
              {
                *(_DWORD *)buf = 136446466;
                os_log_type_t v87 = "nw_context_get_globals_for_protocol";
                v88 = 2082;
                os_log_type_t v89 = v30;
                _os_log_impl( &dword_181A5C000,  v77,  v79,  "%{public}s nw_protocol_definition_allocate_globals failed, dumping backtrace:%{public}s",  buf,  0x16u);
              }

              goto LABEL_156;
            }

            if (v80)
            {
              *(_DWORD *)buf = 136446210;
              os_log_type_t v87 = "nw_context_get_globals_for_protocol";
              _os_log_impl( &dword_181A5C000,  v77,  v79,  "%{public}s nw_protocol_definition_allocate_globals failed, no backtrace",  buf,  0xCu);
            }
          }

          else
          {
            __nwlog_obj();
            v77 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v81 = v85;
            if (os_log_type_enabled(v77, v85))
            {
              *(_DWORD *)buf = 136446210;
              os_log_type_t v87 = "nw_context_get_globals_for_protocol";
              _os_log_impl( &dword_181A5C000,  v77,  v81,  "%{public}s nw_protocol_definition_allocate_globals failed, backtrace limit exceeded",  buf,  0xCu);
            }
          }
        }

    if (v101) {
      free(v101);
    }
    __int16 v9 = 0;
    goto LABEL_149;
  }

  __int16 v9 = v7[29];

  if (v9 != 2)
  {
LABEL_149:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v125 = (id)gLogObj;
    if (v9 > 5) {
      v126 = "unknown-mode";
    }
    else {
      v126 = off_189BBBBC0[v9];
    }
    *(_DWORD *)buf = 136446722;
    v159 = "nw_flow_add_write_request";
    v160 = 2082;
    v161 = (char *)v126;
    v162 = 2082;
    v163 = "flow";
    char v105 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v156 = 0;
    if (!__nwlog_fault((const char *)v105, &type, &v156))
    {
LABEL_181:
      unsigned int v6 = v155;
      if (!v105) {
        goto LABEL_183;
      }
LABEL_182:
      free(v105);
      goto LABEL_183;
    }

    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v106 = (os_log_s *)(id)gLogObj;
      v127 = type;
      if (os_log_type_enabled(v106, type))
      {
        if (v9 > 5) {
          v128 = "unknown-mode";
        }
        else {
          v128 = off_189BBBBC0[v9];
        }
        *(_DWORD *)buf = 136446722;
        v159 = "nw_flow_add_write_request";
        v160 = 2082;
        v161 = (char *)v128;
        v162 = 2082;
        v163 = "flow";
        _os_log_impl( &dword_181A5C000,  v106,  v127,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
      }
    }

    else if (v156)
    {
      v129 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v106 = (os_log_s *)(id)gLogObj;
      v130 = type;
      v131 = os_log_type_enabled(v106, type);
      if (v129)
      {
        if (v131)
        {
          if (v9 > 5) {
            v132 = "unknown-mode";
          }
          else {
            v132 = off_189BBBBC0[v9];
          }
          *(_DWORD *)buf = 136446978;
          v159 = "nw_flow_add_write_request";
          v160 = 2082;
          v161 = (char *)v132;
          v162 = 2082;
          v163 = "flow";
          v164 = 2082;
          v165 = v129;
          _os_log_impl( &dword_181A5C000,  v106,  v130,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
        }

        free(v129);
        unsigned int v6 = v155;
        if (!v105) {
          goto LABEL_183;
        }
        goto LABEL_182;
      }

      if (v131)
      {
        if (v9 > 5) {
          v135 = "unknown-mode";
        }
        else {
          v135 = off_189BBBBC0[v9];
        }
        *(_DWORD *)buf = 136446722;
        v159 = "nw_flow_add_write_request";
        v160 = 2082;
        v161 = (char *)v135;
        v162 = 2082;
        v163 = "flow";
        _os_log_impl( &dword_181A5C000,  v106,  v130,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v106 = (os_log_s *)(id)gLogObj;
      v133 = type;
      if (os_log_type_enabled(v106, type))
      {
        if (v9 > 5) {
          v134 = "unknown-mode";
        }
        else {
          v134 = off_189BBBBC0[v9];
        }
        *(_DWORD *)buf = 136446722;
        v159 = "nw_flow_add_write_request";
        v160 = 2082;
        v161 = (char *)v134;
        v162 = 2082;
        v163 = "flow";
        _os_log_impl( &dword_181A5C000,  v106,  v133,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
      }
    }

          if (v102) {
            free(v102);
          }
          **(_DWORD **)(a1 + 112) = -1;
LABEL_149:
          v116 = *(void *)(*(void *)(a1 + 32) + 8LL);
          v117 = *(unsigned int *)(v116 + 24) + 1LL;
          v118 = v117 << 31 >> 31;
          *(_DWORD *)(v116 + 24) = v117;
          if (v118 == v117 && (v118 & 0x8000000000000000LL) == 0) {
            goto LABEL_168;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v119 = (const char *)*(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
          *(_DWORD *)buf = 136446978;
          v148 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
          v149 = 2082;
          *(void *)v150 = "count";
          *(_WORD *)&v150[8] = 2048;
          v151 = 1LL;
          v152 = 2048;
          v153 = v119;
          v120 = (char *)_os_log_send_and_compose_impl();
          v146 = OS_LOG_TYPE_ERROR;
          v144 = 0;
          if (v146 == OS_LOG_TYPE_FAULT)
          {
            v121 = (os_log_s *)__nwlog_obj();
            v122 = v146;
            if (os_log_type_enabled(v121, v146))
            {
              v123 = (const char *)*(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
              *(_DWORD *)buf = 136446978;
              v148 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
              v149 = 2082;
              *(void *)v150 = "count";
              *(_WORD *)&v150[8] = 2048;
              v151 = 1LL;
              v152 = 2048;
              v153 = v123;
              v124 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_164:
              _os_log_impl(&dword_181A5C000, v121, v122, v124, buf, 0x2Au);
            }
          }

          else if (v144)
          {
            v125 = (char *)__nw_create_backtrace_string();
            v121 = (os_log_s *)__nwlog_obj();
            v122 = v146;
            v126 = os_log_type_enabled(v121, v146);
            if (v125)
            {
              if (v126)
              {
                v127 = (const char *)*(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
                *(_DWORD *)buf = 136447234;
                v148 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
                v149 = 2082;
                *(void *)v150 = "count";
                *(_WORD *)&v150[8] = 2048;
                v151 = 1LL;
                v152 = 2048;
                v153 = v127;
                v154 = 2082;
                v155 = v125;
                _os_log_impl( &dword_181A5C000,  v121,  v122,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
              }

              free(v125);
              goto LABEL_165;
            }

            if (v126)
            {
              v129 = (const char *)*(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
              *(_DWORD *)buf = 136446978;
              v148 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
              v149 = 2082;
              *(void *)v150 = "count";
              *(_WORD *)&v150[8] = 2048;
              v151 = 1LL;
              v152 = 2048;
              v153 = v129;
              v124 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
              goto LABEL_164;
            }
          }

          else
          {
            v121 = (os_log_s *)__nwlog_obj();
            v122 = v146;
            if (os_log_type_enabled(v121, v146))
            {
              v128 = (const char *)*(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
              *(_DWORD *)buf = 136446978;
              v148 = "nw_protocol_plugin_metadata_process_frames_block_invoke";
              v149 = 2082;
              *(void *)v150 = "count";
              *(_WORD *)&v150[8] = 2048;
              v151 = 1LL;
              v152 = 2048;
              v153 = v128;
              v124 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
              goto LABEL_164;
            }
          }

    if (v78) {
      free(v78);
    }
    __int16 v17 = 22;
    int v29 = metadatab;
    goto LABEL_43;
  }

  BOOL v30 = *(unsigned __int16 **)(v12 + 136);
  if (!v30 || (int v31 = *(void *)(v12 + 160), v31 < 2))
  {
    if (gLogDatapath)
    {
      metadataa = v28;
      __nwlog_obj();
      int v63 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_ws_process_close_frame";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v12 + 275;
        _os_log_impl( &dword_181A5C000,  v63,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s got close frame with no close code",  buf,  0x16u);
      }

      uint64_t v33 = nw_ws_close_code_no_status_received;
      goto LABEL_117;
    }

    uint64_t v33 = nw_ws_close_code_no_status_received;
LABEL_38:
    if ((*(_WORD *)(v12 + 273) & 0x20) == 0) {
      nw_ws_write_control_frame(v12 + 48, v27, 8, v33, *(void *)(v12 + 136), *(void *)(v12 + 160));
    }
    if (v33 == nw_ws_close_code_message_too_big) {
      __int16 v17 = 40;
    }
    else {
      __int16 v17 = 57;
    }
    goto LABEL_43;
  }

  int v32 = *v30;
  uint64_t v33 = __rev16(v32);
  __int16 v34 = v32 != 63235 && (unsigned __int16)(v33 - 1007) >= 5u;
  if (v34 && (unsigned __int16)(v33 - 3000) >= 0x7D0u && (v33 & 0xFFFC) != 0x3E8)
  {
    __int16 v17 = 22;
LABEL_43:

    goto LABEL_66;
  }

  metadataa = v28;
  __int16 v60 = v31 - 2;
  *(void *)(v12 + 160) = v31 - 2;
  if (v31 == 2)
  {
    __int16 v62 = 0LL;
    goto LABEL_88;
  }

  char v61 = malloc(v31 - 2);
  if (v61)
  {
    __int16 v62 = v61;
    memcpy(v61, v30 + 1, v60);
    goto LABEL_88;
  }

  __nwlog_obj();
  v93 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v93, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  *(void *)&uint8_t buf[4] = "strict_malloc";
  *(_WORD *)&buf[12] = 2048;
  *(void *)&buf[14] = v60;
  v94 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v94);
  if (!result)
  {
    free(v94);
    BOOL v30 = *(unsigned __int16 **)(v12 + 136);
    memcpy(0LL, v30 + 1, *(void *)(v12 + 160));
    __int16 v62 = 0LL;
    if (!v30)
    {
LABEL_89:
      *(void *)(v12 + 136) = v62;
      int v29 = metadataa;
      nw_ws_metadata_set_close_code(metadataa, v33);
      if (gLogDatapath)
      {
        __nwlog_obj();
        int v63 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v64 = *(void *)(v12 + 160);
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_ws_process_close_frame";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v12 + 275;
          *(_WORD *)&buf[22] = 1040;
          *(_DWORD *)v108 = v64;
          *(_WORD *)&v108[4] = 2082;
          *(void *)&v108[6] = v62;
          *(_WORD *)&v108[14] = 1024;
          *(_DWORD *)&v108[16] = v33;
          _os_log_impl( &dword_181A5C000,  v63,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s got close frame '%{public}.*s (%u)",  buf,  0x2Cu);
        }

                          if (v73) {
                            free(v73);
                          }
                          uint64_t v33 = 0LL;
                          goto LABEL_149;
                        }

                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        int v63 = (id)gLogObj;
                        *(_DWORD *)buf = 136446210;
                        v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                        uint64_t v64 = (char *)_os_log_send_and_compose_impl();

                        os_log_type_t type = OS_LOG_TYPE_ERROR;
                        v147 = 0;
                        if (__nwlog_fault(v64, &type, &v147))
                        {
                          if (type == OS_LOG_TYPE_FAULT)
                          {
                            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                            networkd_settings_init();
                            id v65 = (os_log_s *)(id)gLogObj;
                            BOOL v66 = type;
                            if (os_log_type_enabled(v65, type))
                            {
                              *(_DWORD *)buf = 136446210;
                              v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                              _os_log_impl( &dword_181A5C000,  v65,  v66,  "%{public}s nw_protocol_transform_create failed",  buf,  0xCu);
                            }

          if (v77) {
            free(v77);
          }
          goto LABEL_148;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v63 = (id)gLogObj;
        else {
          uint64_t v64 = off_189BBBBC0[mode];
        }
        *(_DWORD *)buf = 136446722;
        os_log_type_t v97 = "nw_endpoint_handler_inject_read_closed";
        BOOL v98 = 2082;
        *(void *)v99 = v64;
        *(_WORD *)&v99[8] = 2082;
        *(void *)&v99[10] = "flow";
        os_log_type_t v67 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        v94 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v68 = (os_log_s *)(id)gLogObj;
          v69 = type;
          if (os_log_type_enabled(v68, type))
          {
            else {
              uint64_t v70 = off_189BBBBC0[mode];
            }
            *(_DWORD *)buf = 136446722;
            os_log_type_t v97 = "nw_endpoint_handler_inject_read_closed";
            BOOL v98 = 2082;
            *(void *)v99 = v70;
            *(_WORD *)&v99[8] = 2082;
            *(void *)&v99[10] = "flow";
            _os_log_impl( &dword_181A5C000,  v68,  v69,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
          }
        }

        else if (v94)
        {
          os_log_type_t v71 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v68 = (os_log_s *)(id)gLogObj;
          v72 = type;
          __uint64_t v73 = os_log_type_enabled(v68, type);
          if (v71)
          {
            if (v73)
            {
              else {
                unint64_t v74 = off_189BBBBC0[mode];
              }
              *(_DWORD *)buf = 136446978;
              os_log_type_t v97 = "nw_endpoint_handler_inject_read_closed";
              BOOL v98 = 2082;
              *(void *)v99 = v74;
              *(_WORD *)&v99[8] = 2082;
              *(void *)&v99[10] = "flow";
              os_log_type_t v100 = 2082;
              BOOL v101 = v71;
              _os_log_impl( &dword_181A5C000,  v68,  v72,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
            }

            free(v71);
            if (!v67) {
              goto LABEL_154;
            }
            goto LABEL_153;
          }

          if (v73)
          {
            else {
              v85 = off_189BBBBC0[mode];
            }
            *(_DWORD *)buf = 136446722;
            os_log_type_t v97 = "nw_endpoint_handler_inject_read_closed";
            BOOL v98 = 2082;
            *(void *)v99 = v85;
            *(_WORD *)&v99[8] = 2082;
            *(void *)&v99[10] = "flow";
            _os_log_impl( &dword_181A5C000,  v68,  v72,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
          }
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v68 = (os_log_s *)(id)gLogObj;
          v80 = type;
          if (os_log_type_enabled(v68, type))
          {
            else {
              v81 = off_189BBBBC0[mode];
            }
            *(_DWORD *)buf = 136446722;
            os_log_type_t v97 = "nw_endpoint_handler_inject_read_closed";
            BOOL v98 = 2082;
            *(void *)v99 = v81;
            *(_WORD *)&v99[8] = 2082;
            *(void *)&v99[10] = "flow";
            _os_log_impl( &dword_181A5C000,  v68,  v80,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
          }
        }

        goto LABEL_151;
      }

      __nwlog_obj();
      os_log_type_t v87 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      os_log_type_t v97 = "nw_endpoint_handler_inject_read_closed";
      os_log_type_t v67 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      v94 = 0;
      if (__nwlog_fault(v67, &type, &v94))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          __int16 v68 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v88 = type;
          if (os_log_type_enabled(v68, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v97 = "nw_endpoint_handler_inject_read_closed";
            _os_log_impl(&dword_181A5C000, v68, v88, "%{public}s called with null handler", buf, 0xCu);
          }

      free(backtrace_string);
      goto LABEL_164;
    }

    if (!v68) {
      goto LABEL_164;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
    os_log_type_t v54 = "%{public}s called with null return_array, no backtrace";
LABEL_163:
    _os_log_impl(&dword_181A5C000, v52, v53, v54, buf, 0xCu);
LABEL_164:
    if (v51) {
      free(v51);
    }
    return 0LL;
  }

  LODWORD(v9) = a4;
  if (gLogDatapath)
  {
    os_log_type_t v55 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = (char *)handle + 205;
      _os_log_impl(&dword_181A5C000, v55, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }

  a6->tqh_first = 0LL;
  a6->tqh_last = &a6->tqh_first;
  if (!(_DWORD)v9)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unsigned int v19 = gLogObj;
    BOOL result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = (char *)handle + 205;
    uint64_t v15 = "%{public}s %{public}s get_output_frames called with maximum bytes 0, returning 0 frames";
LABEL_19:
    int v16 = (os_log_s *)v19;
    __int16 v17 = OS_LOG_TYPE_ERROR;
    id v18 = 22;
    goto LABEL_24;
  }

  output_handler_context = a2->output_handler_context;
  if (!output_handler_context)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unsigned int v19 = gLogObj;
    BOOL result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = (char *)handle + 205;
    uint64_t v15 = "%{public}s %{public}s cannot get output frames for protocol without proper output handler context";
    goto LABEL_19;
  }

  BOOL v11 = output_handler_context[4];
  if (!v11)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v21 = gLogObj;
    BOOL result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = (char *)handle + 205;
    *(_WORD *)&buf[22] = 1042;
    *(_DWORD *)os_log_type_t v91 = 16;
    *(_WORD *)&v91[4] = 2098;
    *(void *)&v91[6] = a2;
    uint64_t v15 = "%{public}s %{public}s cannot find hash table entry for %{public,uuid_t}.16P";
    int v16 = (os_log_s *)v21;
    __int16 v17 = OS_LOG_TYPE_ERROR;
    id v18 = 38;
    goto LABEL_24;
  }

  if ((*(_BYTE *)(v11 + 36) & 1) == 0 || *(_DWORD *)(v11 + 32) == -1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v20 = gLogObj;
    BOOL result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = (char *)handle + 205;
    *(_WORD *)&buf[22] = 2048;
    *(void *)os_log_type_t v91 = a2;
    uint64_t v15 = "%{public}s %{public}s cannot get output frames for stream that is not yet open, protocol (%p)";
    int v16 = (os_log_s *)v20;
    __int16 v17 = OS_LOG_TYPE_ERROR;
    id v18 = 32;
    goto LABEL_24;
  }

  if (*(void *)(v11 + 16))
  {
    if (!gLogDatapath) {
      return 0LL;
    }
    unsigned int v12 = (os_log_s *)__nwlog_obj();
    BOOL result = os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG);
    if (!result) {
      return result;
    }
    unsigned int v14 = *(_DWORD *)(v11 + 32);
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = (char *)handle + 205;
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)os_log_type_t v91 = v14;
    uint64_t v15 = "%{public}s %{public}s stream %d already has pending output frames, cannot get more";
    int v16 = v12;
    __int16 v17 = OS_LOG_TYPE_DEBUG;
    id v18 = 28;
LABEL_24:
    _os_log_impl(&dword_181A5C000, v16, v17, v15, buf, v18);
    return 0LL;
  }

  else {
    __int16 v9 = v9;
  }
  unint64_t v78 = 0LL;
  char v79 = &v78;
  v80 = 0x2000000000LL;
  v81 = 0LL;
  if (gLogDatapath)
  {
    v69 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v82 = 136446722;
      os_log_type_t v83 = "http2_transport_create_output_frame";
      v84 = 2082;
      v85 = (uint64_t)handle + 205;
      v86 = 1024;
      LODWORD(v87) = v9;
      _os_log_impl( &dword_181A5C000,  v69,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s requested output frame of length %u",  v82,  0x1Cu);
    }
  }

  *(void *)buf = MEMORY[0x1895F87A8];
  *(void *)&uint8_t buf[8] = 0x40000000LL;
  *(void *)&buf[16] = ___ZL35http2_transport_create_output_frameP27nw_protocol_http2_transportP11nw_protocolj_block_invoke;
  *(void *)os_log_type_t v91 = &unk_189BBCE60;
  v93 = v9;
  v92 = a2;
  *(void *)&v91[8] = &v78;
  *(void *)&v91[16] = handle;
  BOOL v22 = handle[22];
  do
  {
    if (!v22) {
      break;
    }
    os_log_type_t v23 = *(void *)(v22 + 16);
    os_log_type_t v24 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
    BOOL v22 = v23;
  }

  while ((v24 & 1) != 0);
  if (v79[3]) {
    goto LABEL_35;
  }
  if (gLogDatapath)
  {
    v72 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v82 = 136446722;
      os_log_type_t v83 = "http2_transport_create_output_frame";
      v84 = 2082;
      v85 = (uint64_t)handle + 205;
      v86 = 1024;
      LODWORD(v87) = v9;
      _os_log_impl( &dword_181A5C000,  v72,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s no output frame to reuse for length %u",  v82,  0x1Cu);
    }
  }

  int v28 = calloc(1uLL, v9);
  if (v28)
  {
    int v29 = (uint64_t)v28;
  }

  else
  {
    __uint64_t v73 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v73, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v82 = 136446722;
    os_log_type_t v83 = "strict_calloc";
    v84 = 2048;
    v85 = 1LL;
    v86 = 2048;
    os_log_type_t v87 = v9;
    unint64_t v74 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v74);
    if (result)
    {
      __break(1u);
      return result;
    }

    free(v74);
    int v29 = 0LL;
  }

  BOOL v30 = nw_frame_create(16, v29, v9, (uint64_t)nw_protocol_http2_transport_frame_output_finalizer, 0LL);
  v79[3] = v30;
  if (!v30)
  {
    __nwlog_obj();
    *(_DWORD *)v82 = 136446210;
    os_log_type_t v83 = "http2_transport_create_output_frame";
    os_log_type_t v39 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    __uint64_t v76 = 0;
    if (__nwlog_fault(v39, &type, &v76))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v40 = (os_log_s *)__nwlog_obj();
        os_log_type_t v41 = type;
        if (os_log_type_enabled(v40, type))
        {
          *(_DWORD *)v82 = 136446210;
          os_log_type_t v83 = "http2_transport_create_output_frame";
          os_log_type_t v42 = "%{public}s nw_frame_create output frame failed";
LABEL_107:
          _os_log_impl(&dword_181A5C000, v40, v41, v42, v82, 0xCu);
        }
      }

      else if (v76)
      {
        v48 = (char *)__nw_create_backtrace_string();
        os_log_type_t v40 = (os_log_s *)__nwlog_obj();
        os_log_type_t v41 = type;
        os_log_type_t v49 = os_log_type_enabled(v40, type);
        if (v48)
        {
          if (v49)
          {
            *(_DWORD *)v82 = 136446466;
            os_log_type_t v83 = "http2_transport_create_output_frame";
            v84 = 2082;
            v85 = (uint64_t)v48;
            _os_log_impl( &dword_181A5C000,  v40,  v41,  "%{public}s nw_frame_create output frame failed, dumping backtrace:%{public}s",  v82,  0x16u);
          }

          free(v48);
          goto LABEL_108;
        }

        if (v49)
        {
          *(_DWORD *)v82 = 136446210;
          os_log_type_t v83 = "http2_transport_create_output_frame";
          os_log_type_t v42 = "%{public}s nw_frame_create output frame failed, no backtrace";
          goto LABEL_107;
        }
      }

      else
      {
        os_log_type_t v40 = (os_log_s *)__nwlog_obj();
        os_log_type_t v41 = type;
        if (os_log_type_enabled(v40, type))
        {
          *(_DWORD *)v82 = 136446210;
          os_log_type_t v83 = "http2_transport_create_output_frame";
          os_log_type_t v42 = "%{public}s nw_frame_create output frame failed, backtrace limit exceeded";
          goto LABEL_107;
        }
      }
    }

    if (!v67) {
      goto LABEL_148;
    }
    goto LABEL_147;
  }

  if (v6 != 3) {
    goto LABEL_148;
  }
  unsigned int v7 = (uint64_t *)(v5 + 16);
LABEL_8:
  __int16 v9 = *v7;
  if (!*v7) {
    goto LABEL_148;
  }
  if ((*(_WORD *)(v9 + 872) & 0x900) == 0)
  {
    os_log_type_t v10 = (void *)nw_path_copy_for_flow_registration(a3, *(void **)(v9 + 560));
    if (v10)
    {
      BOOL v11 = v10;
      if (*(void **)(v9 + 512) != v10)
      {
        unsigned int v12 = os_retain(v10);
        char v13 = *(_BYTE *)(v9 + 520);
        if ((v13 & 1) != 0)
        {
          unsigned int v14 = *(void **)(v9 + 512);
          if (v14)
          {
            os_release(v14);
            char v13 = *(_BYTE *)(v9 + 520);
          }
        }

        *(void *)(v9 + 512) = v12;
        *(_BYTE *)(v9 + 520) = v13 | 1;
      }

      uint64_t v15 = (unsigned __int16 *)(v9 + 872);
      int v16 = *(void **)(v9 + 576);
      if (v16)
      {
        __int16 v17 = nw_path_has_proxy_config(v11, v16);
        id v18 = *v15;
        if ((v17 & 1) == 0 && (*v15 & 0x400) == 0)
        {
          if ((*(_BYTE *)(v9 + 158) & 1) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            unsigned int v19 = (os_log_s *)gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
            {
              uint64_t v20 = *(void *)(v9 + 488);
              os_log_type_t v21 = *(_DWORD *)(*(void *)(v9 + 480) + 372LL);
              BOOL v22 = *(_DWORD *)(v9 + 860);
              if (v20) {
                LODWORD(v20) = *(_DWORD *)(v20 + 424);
              }
              *(_DWORD *)buf = 136447490;
              *(void *)&uint8_t buf[4] = "nw_protocol_http1_set_up_association_block_invoke";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = v9 + 74;
              *(_WORD *)&buf[22] = 2080;
              __int16 v109 = (uint64_t)" ";
              *(_WORD *)__uint64_t v110 = 1024;
              *(_DWORD *)&v110[2] = v21;
              *(_WORD *)&v110[6] = 1024;
              *(_DWORD *)&v110[8] = v22;
              LOWORD(v111) = 1024;
              *(_DWORD *)((char *)&v111 + 2) = v20;
              _os_log_impl( &dword_181A5C000,  v19,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:c%u:s%u> Effective proxy configuration lost, marking do-not-reuse",  buf,  0x32u);
            }
          }

          os_log_type_t v23 = *(unsigned __int8 *)(v9 + 874);
          os_log_type_t v24 = *v15;
          *uint64_t v15 = v24 | 0x400;
          os_log_type_t v25 = *(void *)(v9 + 480);
          if (v25)
          {
            id v26 = v24 | (v23 << 16);
            if ((v26 & 0x800) == 0)
            {
              *(_BYTE *)(v9 + 874) = BYTE2(v26);
              *uint64_t v15 = v26 | 0xC00;
              char v27 = *(unsigned int *)(v25 + 368) + 1LL;
              int v28 = v27 << 31 >> 31;
              *(_DWORD *)(v25 + 368) = v27;
              if (v28 == v27 && (v28 & 0x8000000000000000LL) == 0) {
                goto LABEL_76;
              }
              __nwlog_obj();
              int v29 = *(unsigned int *)(v25 + 368);
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&buf[14] = "http1->nonresuable_connections";
              *(_WORD *)&buf[22] = 2048;
              __int16 v109 = 1LL;
              *(_WORD *)__uint64_t v110 = 2048;
              *(void *)&v110[2] = v29;
              BOOL v30 = (char *)_os_log_send_and_compose_impl();
              type[0] = OS_LOG_TYPE_ERROR;
              v107 = OS_LOG_TYPE_DEFAULT;
              if (__nwlog_fault(v30, type, &v107))
              {
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  int v31 = (os_log_s *)__nwlog_obj();
                  int v32 = type[0];
                  if (os_log_type_enabled(v31, type[0]))
                  {
                    uint64_t v33 = *(unsigned int *)(v25 + 368);
                    *(_DWORD *)buf = 136446978;
                    *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = "http1->nonresuable_connections";
                    *(_WORD *)&buf[22] = 2048;
                    __int16 v109 = 1LL;
                    *(_WORD *)__uint64_t v110 = 2048;
                    *(void *)&v110[2] = v33;
                    __int16 v34 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_72:
                    _os_log_impl(&dword_181A5C000, v31, v32, v34, buf, 0x2Au);
                  }
                }

                else if (v107)
                {
                  os_log_type_t v55 = (char *)__nw_create_backtrace_string();
                  int v31 = (os_log_s *)__nwlog_obj();
                  int v32 = type[0];
                  char v56 = os_log_type_enabled(v31, type[0]);
                  if (v55)
                  {
                    if (v56)
                    {
                      os_log_type_t v57 = *(unsigned int *)(v25 + 368);
                      *(_DWORD *)buf = 136447234;
                      *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                      *(_WORD *)&buf[12] = 2082;
                      *(void *)&buf[14] = "http1->nonresuable_connections";
                      *(_WORD *)&buf[22] = 2048;
                      __int16 v109 = 1LL;
                      *(_WORD *)__uint64_t v110 = 2048;
                      *(void *)&v110[2] = v57;
                      *(_WORD *)&v110[10] = 2082;
                      __int16 v111 = v55;
                      _os_log_impl( &dword_181A5C000,  v31,  v32,  "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
                    }

                    free(v55);
                    goto LABEL_73;
                  }

                  if (v56)
                  {
                    __int16 v62 = *(unsigned int *)(v25 + 368);
                    *(_DWORD *)buf = 136446978;
                    *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = "http1->nonresuable_connections";
                    *(_WORD *)&buf[22] = 2048;
                    __int16 v109 = 1LL;
                    *(_WORD *)__uint64_t v110 = 2048;
                    *(void *)&v110[2] = v62;
                    __int16 v34 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
                    goto LABEL_72;
                  }
                }

                else
                {
                  int v31 = (os_log_s *)__nwlog_obj();
                  int v32 = type[0];
                  if (os_log_type_enabled(v31, type[0]))
                  {
                    os_log_type_t v58 = *(unsigned int *)(v25 + 368);
                    *(_DWORD *)buf = 136446978;
                    *(void *)&uint8_t buf[4] = "nw_http1_connection_mark_do_not_reuse";
                    *(_WORD *)&buf[12] = 2082;
                    *(void *)&buf[14] = "http1->nonresuable_connections";
                    *(_WORD *)&buf[22] = 2048;
                    __int16 v109 = 1LL;
                    *(_WORD *)__uint64_t v110 = 2048;
                    *(void *)&v110[2] = v58;
                    __int16 v34 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
                    goto LABEL_72;
                  }
                }
              }

  if (v81) {
    free(v81);
  }
}

    goto LABEL_147;
  }

  unsigned int v4 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_path_evaluator);
  if (!v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v10 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v81 = "nw_path_create_evaluator_for_client_id";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v84) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unsigned int v12 = (os_log_s *)(id)gLogObj;
      char v13 = type[0];
      if (os_log_type_enabled(v12, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v81 = "nw_path_create_evaluator_for_client_id";
        _os_log_impl( &dword_181A5C000,  v12,  v13,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed",  buf,  0xCu);
      }
    }

    else if ((_BYTE)v84)
    {
      os_log_type_t v21 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unsigned int v12 = (os_log_s *)(id)gLogObj;
      BOOL v22 = type[0];
      os_log_type_t v23 = os_log_type_enabled(v12, type[0]);
      if (v21)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          v81 = "nw_path_create_evaluator_for_client_id";
          v82 = 2082;
          v83[0] = v21;
          _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        goto LABEL_34;
      }

      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v81 = "nw_path_create_evaluator_for_client_id";
        _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unsigned int v12 = (os_log_s *)(id)gLogObj;
      BOOL v30 = type[0];
      if (os_log_type_enabled(v12, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v81 = "nw_path_create_evaluator_for_client_id";
        _os_log_impl( &dword_181A5C000,  v12,  v30,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_89;
  }

  unsigned int v5 = nw_parameters_create();
  unsigned int v6 = (void *)*((void *)v4 + 1);
  *((void *)v4 + 1) = v5;

  nw_parameters_set_context(*((void **)v4 + 1), v3);
  nw_path_shared_necp_fd(v3);
  v84 = *(_OWORD *)a1;
  if (!necp_client_action())
  {
    *((_OWORD *)v4 + 5) = v84;
    bzero(buf, 0x400uLL);
    unsigned int v14 = necp_client_action();
    if (v14 < 1)
    {
      id v26 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v27 = (id)gLogObj;
      *(_DWORD *)os_log_type_t type = 136446466;
      v77 = "nw_path_create_evaluator_for_client_id";
      unint64_t v78 = 1024;
      LODWORD(v79[0]) = v26;
      BOOL v11 = (char *)_os_log_send_and_compose_impl();

      LOBYTE(v75) = 16;
      LOBYTE(obj) = 0;
      if (__nwlog_fault(v11, &v75, &obj))
      {
        if (v75 == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          int v28 = (os_log_s *)(id)gLogObj;
          int v29 = v75;
          if (os_log_type_enabled(v28, (os_log_type_t)v75))
          {
            *(_DWORD *)os_log_type_t type = 136446466;
            v77 = "nw_path_create_evaluator_for_client_id";
            unint64_t v78 = 1024;
            LODWORD(v79[0]) = v26;
            _os_log_impl( &dword_181A5C000,  v28,  v29,  "%{public}s NECP_CLIENT_ACTION_COPY_PARAMETERS %{darwin.errno}d",  (uint8_t *)type,  0x12u);
          }
        }

        else if ((_BYTE)obj)
        {
          os_log_type_t v39 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          int v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v40 = v75;
          os_log_type_t v41 = os_log_type_enabled(v28, (os_log_type_t)v75);
          if (v39)
          {
            if (v41)
            {
              *(_DWORD *)os_log_type_t type = 136446722;
              v77 = "nw_path_create_evaluator_for_client_id";
              unint64_t v78 = 1024;
              LODWORD(v79[0]) = v26;
              WORD2(v79[0]) = 2082;
              *(void *)((char *)v79 + 6) = v39;
              _os_log_impl( &dword_181A5C000,  v28,  v40,  "%{public}s NECP_CLIENT_ACTION_COPY_PARAMETERS %{darwin.errno}d, dumping backtrace:%{public}s",  (uint8_t *)type,  0x1Cu);
            }

            free(v39);
            if (!v11) {
              goto LABEL_91;
            }
            goto LABEL_90;
          }

          if (v41)
          {
            *(_DWORD *)os_log_type_t type = 136446466;
            v77 = "nw_path_create_evaluator_for_client_id";
            unint64_t v78 = 1024;
            LODWORD(v79[0]) = v26;
            _os_log_impl( &dword_181A5C000,  v28,  v40,  "%{public}s NECP_CLIENT_ACTION_COPY_PARAMETERS %{darwin.errno}d, no backtrace",  (uint8_t *)type,  0x12u);
          }
        }

        else
        {
          __nwlog_obj();
          int v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          BOOL v50 = v75;
          if (os_log_type_enabled(v28, (os_log_type_t)v75))
          {
            *(_DWORD *)os_log_type_t type = 136446466;
            v77 = "nw_path_create_evaluator_for_client_id";
            unint64_t v78 = 1024;
            LODWORD(v79[0]) = v26;
            _os_log_impl( &dword_181A5C000,  v28,  v50,  "%{public}s NECP_CLIENT_ACTION_COPY_PARAMETERS %{darwin.errno}d, backtrace limit exceeded",  (uint8_t *)type,  0x12u);
          }
        }
      }

      goto LABEL_89;
    }

    uint64_t v15 = nw_parameters_create();
    int v16 = v15;
    if (v15)
    {
      obj = 0LL;
      char v75 = 0LL;
      __uint64_t v73 = 0LL;
      v72 = 0;
      os_log_type_t v71 = 0;
      uint64_t v70 = 0;
      if ((nw_path_parse_necp_parameters( v15,  &v75,  &obj,  &v73,  0LL,  &v72,  &v71,  (char *)&v70 + 1,  &v70,  (uint64_t)buf,  v14) & 1) != 0)
      {
        nw_parameters_set_context(v16, v3);
        objc_storeStrong((id *)v4 + 3, obj);
        objc_storeStrong((id *)v4 + 4, v73);
        objc_storeStrong((id *)v4 + 2, v75);
        objc_storeStrong((id *)v4 + 1, v16);
        __int16 v17 = *((_BYTE *)v4 + 107) & 0xF9 | (2 * v72);
        *((_WORD *)v4 + 52) = v71;
        *((_BYTE *)v4 + 106) = HIBYTE(v70);
        *((_BYTE *)v4 + 107) = v17 | (4 * v70);
        if ((nw_path_evaluator_evaluate(v4, 0LL) & 1) != 0)
        {
          id v18 = v4;
LABEL_112:

          goto LABEL_113;
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v46 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)os_log_type_t type = 136446210;
          v77 = "nw_path_create_evaluator_for_client_id";
          _os_log_impl( &dword_181A5C000,  v46,  OS_LOG_TYPE_ERROR,  "%{public}s nw_path_evaluator_evaluate failed",  (uint8_t *)type,  0xCu);
        }

LABEL_111:
        id v18 = 0LL;
        goto LABEL_112;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v35 = (id)gLogObj;
      *(_DWORD *)os_log_type_t type = 136446210;
      v77 = "nw_path_create_evaluator_for_client_id";
      BOOL v36 = (char *)_os_log_send_and_compose_impl();

      v69 = OS_LOG_TYPE_ERROR;
      __int16 v68 = 0;
      if (__nwlog_fault(v36, &v69, &v68))
      {
        if (v69 == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v37 = (os_log_s *)(id)gLogObj;
          __int16 v38 = v69;
          if (os_log_type_enabled(v37, v69))
          {
            *(_DWORD *)os_log_type_t type = 136446210;
            v77 = "nw_path_create_evaluator_for_client_id";
            _os_log_impl( &dword_181A5C000,  v37,  v38,  "%{public}s nw_path_parse_necp_parameters failed",  (uint8_t *)type,  0xCu);
          }
        }

        else if (v68)
        {
          BOOL v47 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v48 = v69;
          os_log_type_t v49 = os_log_type_enabled(v37, v69);
          if (v47)
          {
            if (v49)
            {
              *(_DWORD *)os_log_type_t type = 136446466;
              v77 = "nw_path_create_evaluator_for_client_id";
              unint64_t v78 = 2082;
              v79[0] = v47;
              _os_log_impl( &dword_181A5C000,  v37,  v48,  "%{public}s nw_path_parse_necp_parameters failed, dumping backtrace:%{public}s",  (uint8_t *)type,  0x16u);
            }

            free(v47);
            goto LABEL_109;
          }

          if (v49)
          {
            *(_DWORD *)os_log_type_t type = 136446210;
            v77 = "nw_path_create_evaluator_for_client_id";
            _os_log_impl( &dword_181A5C000,  v37,  v48,  "%{public}s nw_path_parse_necp_parameters failed, no backtrace",  (uint8_t *)type,  0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          os_log_type_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v53 = v69;
          if (os_log_type_enabled(v37, v69))
          {
            *(_DWORD *)os_log_type_t type = 136446210;
            v77 = "nw_path_create_evaluator_for_client_id";
            _os_log_impl( &dword_181A5C000,  v37,  v53,  "%{public}s nw_path_parse_necp_parameters failed, backtrace limit exceeded",  (uint8_t *)type,  0xCu);
          }
        }
      }

            if (v15) {
              free(v15);
            }
            BOOL v66 = 0;
            goto LABEL_149;
          }
        }

        BOOL v66 = 3;
LABEL_149:
        os_release(v12);
        goto LABEL_150;
      }

      if (nw_protocol_metadata_is_quic_connection(v11))
      {

LABEL_81:
        unsigned int v12 = nw_quic_copy_sec_protocol_metadata(v12);
        __int16 v68 = sec_protocol_metadata_get_negotiated_protocol(v12);
        if ((handle[272] & 2) == 0)
        {
          v69 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136446978;
            BOOL v101 = "nw_http_messaging_get_http_version_from_alpn";
            os_log_type_t v102 = 2082;
            os_log_type_t v103 = handle + 188;
            __uint64_t v104 = 2080;
            char v105 = " ";
            v106 = 2082;
            v107 = v68;
            _os_log_impl( &dword_181A5C000,  v69,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%sFound QUIC metadata with ALPN %{public}s",  buf,  0x2Au);
          }
        }

        if (v68)
        {
          if (!strcmp(v68, "h3"))
          {
            BOOL v66 = 5;
            goto LABEL_141;
          }

          __nwlog_obj();
          *(_DWORD *)buf = 136446466;
          BOOL v101 = "nw_http_messaging_get_http_version_from_alpn";
          os_log_type_t v102 = 2080;
          os_log_type_t v103 = (char *)v68;
          uint64_t v70 = (const char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          BOOL v98 = 0;
          if (__nwlog_fault(v70, &type, &v98))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              os_log_type_t v71 = (os_log_s *)__nwlog_obj();
              v72 = type;
              if (!os_log_type_enabled(v71, type)) {
                goto LABEL_132;
              }
              *(_DWORD *)buf = 136446466;
              BOOL v101 = "nw_http_messaging_get_http_version_from_alpn";
              os_log_type_t v102 = 2080;
              os_log_type_t v103 = (char *)v68;
              __uint64_t v73 = "%{public}s Invalid QUIC ALPN %s";
LABEL_131:
              _os_log_impl(&dword_181A5C000, v71, v72, v73, buf, 0x16u);
              goto LABEL_132;
            }

            if (!v98)
            {
              os_log_type_t v71 = (os_log_s *)__nwlog_obj();
              v72 = type;
              if (!os_log_type_enabled(v71, type)) {
                goto LABEL_132;
              }
              *(_DWORD *)buf = 136446466;
              BOOL v101 = "nw_http_messaging_get_http_version_from_alpn";
              os_log_type_t v102 = 2080;
              os_log_type_t v103 = (char *)v68;
              __uint64_t v73 = "%{public}s Invalid QUIC ALPN %s, backtrace limit exceeded";
              goto LABEL_131;
            }

            unint64_t v78 = (char *)__nw_create_backtrace_string();
            os_log_type_t v71 = (os_log_s *)__nwlog_obj();
            v72 = type;
            char v79 = os_log_type_enabled(v71, type);
            if (!v78)
            {
              if (!v79) {
                goto LABEL_132;
              }
              *(_DWORD *)buf = 136446466;
              BOOL v101 = "nw_http_messaging_get_http_version_from_alpn";
              os_log_type_t v102 = 2080;
              os_log_type_t v103 = (char *)v68;
              __uint64_t v73 = "%{public}s Invalid QUIC ALPN %s, no backtrace";
              goto LABEL_131;
            }

            if (v79)
            {
              *(_DWORD *)buf = 136446722;
              BOOL v101 = "nw_http_messaging_get_http_version_from_alpn";
              os_log_type_t v102 = 2080;
              os_log_type_t v103 = (char *)v68;
              __uint64_t v104 = 2082;
              char v105 = v78;
              _os_log_impl( &dword_181A5C000,  v71,  v72,  "%{public}s Invalid QUIC ALPN %s, dumping backtrace:%{public}s",  buf,  0x20u);
            }

            free(v78);
          }

    free(backtrace_string);
    if (!v88) {
      goto LABEL_216;
    }
    goto LABEL_215;
  }

  if (a3 && strlen(a3) >= 0x80)
  {
    __nwlog_obj();
    char v105 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)location = 136446210;
    *(void *)&location[4] = "nw_agent_create";
    v88 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v139 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v89 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v106 = type;
      if (os_log_type_enabled(v89, type))
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_agent_create";
        _os_log_impl( &dword_181A5C000,  v89,  v106,  "%{public}s called with null (strlen(description) < 128)",  location,  0xCu);
      }
    }

    else if (v139)
    {
      v123 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v89 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v124 = type;
      v125 = os_log_type_enabled(v89, type);
      if (v123)
      {
        if (v125)
        {
          *(_DWORD *)location = 136446466;
          *(void *)&location[4] = "nw_agent_create";
          v142 = 2082;
          v143 = v123;
          _os_log_impl( &dword_181A5C000,  v89,  v124,  "%{public}s called with null (strlen(description) < 128), dumping backtrace:%{public}s",  location,  0x16u);
        }

        free(v123);
LABEL_214:
        if (!v88)
        {
LABEL_216:
          v85 = 0LL;
          goto LABEL_81;
        }

              nw::release_if_needed<nw_protocol *>((uint64_t *)v350);
              goto LABEL_147;
            }
          }

          else
          {
            __nwlog_obj();
            os_log_type_t v102 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446466;
              v358 = "nw_protocol_utilities_add_input_handler";
              v359 = 2048;
              v360 = (char *)protocol_for_definition;
              _os_log_impl( &dword_181A5C000,  v102,  OS_LOG_TYPE_ERROR,  "%{public}s Unable to invoke add_input_handler on protocol %p because it is not valid",  buf,  0x16u);
            }
          }

void nw_queue_context_async_if_needed(void *a1, void *a2)
{
  id v5 = a1;
  uint64_t v3 = a2;
  if (nw_context_is_inline(v5))
  {
    v3[2](v3);
  }

  else
  {
    BOOL v4 = nw_context_copy_workloop(v5);
    else {
      dispatch_async((dispatch_queue_t)v4, v3);
    }
  }
}

void sub_181A6D148( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL nw_context_is_inline(void *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  uint32_t v1 = a1;
  uint64_t v3 = v1;
  if (!v1)
  {
    __nwlog_obj(0LL, v2);
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v24 = "nw_context_is_inline";
    BOOL v11 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    uint64_t v12 = __nwlog_fault(v11, &type, &v21);
    if ((_DWORD)v12)
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj(v12, v13);
        unsigned int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_context_is_inline";
          _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s called with null context", buf, 0xCu);
        }
      }

      else if (v21)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj(backtrace_string, v17);
        unsigned int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        BOOL v19 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v19)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v24 = "nw_context_is_inline";
            __int16 v25 = 2082;
            id v26 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v14,  v18,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }

        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_context_is_inline";
          _os_log_impl(&dword_181A5C000, v14, v18, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj(v12, v13);
        unsigned int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_context_is_inline";
          _os_log_impl( &dword_181A5C000,  v14,  v20,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

BOOL nw_context_copy_workloop(void *a1)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  uint32_t v1 = a1;
  uint64_t v3 = v1;
  if (!v1)
  {
    __nwlog_obj(0LL, v2);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    int v31 = "nw_context_copy_workloop";
    os_log_type_t v10 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    uint64_t v11 = __nwlog_fault(v10, &type, &v28);
    if ((_DWORD)v11)
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj(v11, v12);
        uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          int v31 = "nw_context_copy_workloop";
          _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null context", buf, 0xCu);
        }

        goto LABEL_39;
      }

      if (!v28)
      {
        __nwlog_obj(v11, v12);
        uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          int v31 = "nw_context_copy_workloop";
          _os_log_impl( &dword_181A5C000,  v13,  v26,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_39;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj(backtrace_string, v20);
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446210;
          int v31 = "nw_context_copy_workloop";
          _os_log_impl(&dword_181A5C000, v13, v21, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }

        goto LABEL_39;
      }

      if (v22)
      {
        *(_DWORD *)buf = 136446466;
        int v31 = "nw_context_copy_workloop";
        __int16 v32 = 2082;
        uint64_t v33 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v13,  v21,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
      }

LABEL_39:
        goto LABEL_40;
      }

      if (!v28)
      {
        __nwlog_obj(v16, v17);
        uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v27 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          int v31 = "nw_context_copy_workloop";
          _os_log_impl( &dword_181A5C000,  v13,  v27,  "%{public}s called with null !context->is_inline, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_39;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj(backtrace_string, v23);
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v24 = type;
      BOOL v25 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446210;
          int v31 = "nw_context_copy_workloop";
          _os_log_impl( &dword_181A5C000,  v13,  v24,  "%{public}s called with null !context->is_inline, no backtrace",  buf,  0xCu);
        }

        goto LABEL_39;
      }

      if (v25)
      {
        *(_DWORD *)buf = 136446466;
        int v31 = "nw_context_copy_workloop";
        __int16 v32 = 2082;
        uint64_t v33 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v13,  v24,  "%{public}s called with null !context->is_inline, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_27;
    }

    goto LABEL_40;
  }

  if (((_BYTE)v1[17] & 0x40) != 0)
  {
LABEL_6:
    id v8 = v3[1];
LABEL_7:

    return (BOOL)v8;
  }

  uint64_t v4 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init(v4);
  uint64_t v5 = (os_log_s *)(id)gLogObj;
  os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  int v31 = "nw_context_copy_workloop";
  unsigned int v6 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v6);
  if (!result)
  {
    free(v6);
    goto LABEL_6;
  }

  __break(1u);
  return result;
}

    goto LABEL_40;
  }

  if (v4)
  {
    unsigned int v6 = v3[21];
    if (!v6)
    {
      unsigned int v7 = nw_array_create();
      id v8 = (void *)v3[21];
      v3[21] = v7;

      unsigned int v6 = v3[21];
    }

    nw_array_append(v6, v5);
    goto LABEL_6;
  }

  __nwlog_obj();
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v26 = "nw_parameters_add_proxy_options";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v23 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_parameters_add_proxy_options";
      _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null proxy_options", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (!v23)
  {
    __nwlog_obj();
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_parameters_add_proxy_options";
      _os_log_impl( &dword_181A5C000,  v11,  v22,  "%{public}s called with null proxy_options, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  os_log_type_t v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  BOOL v19 = type;
  uint64_t v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_parameters_add_proxy_options";
      _os_log_impl(&dword_181A5C000, v11, v19, "%{public}s called with null proxy_options, no backtrace", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v26 = "nw_parameters_add_proxy_options";
    os_log_type_t v27 = 2082;
    char v28 = v18;
    _os_log_impl( &dword_181A5C000,  v11,  v19,  "%{public}s called with null proxy_options, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_41;
  }
LABEL_6:
}

        goto LABEL_40;
      }

      if (!v30)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v8 = (os_log_s *)(id)gLogObj;
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v33 = "nw_endpoint_set_public_keys";
          _os_log_impl( &dword_181A5C000,  v8,  v21,  "%{public}s Setting too many keys, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_39;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v8 = (os_log_s *)(id)gLogObj;
      uint64_t v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v33 = "nw_endpoint_set_public_keys";
          _os_log_impl(&dword_181A5C000, v8, v17, "%{public}s Setting too many keys, no backtrace", buf, 0xCu);
        }

        goto LABEL_39;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v33 = "nw_endpoint_set_public_keys";
        uint64_t v34 = 2082;
        os_log_type_t v35 = (unint64_t)backtrace_string;
        _os_log_impl( &dword_181A5C000,  v8,  v17,  "%{public}s Setting too many keys, dumping backtrace:%{public}s",  buf,  0x16u);
      }

  if (v9) {
    free(v9);
  }
  unsigned int v6 = 0LL;
LABEL_6:

  return v6;
}

      free(backtrace_string);
      goto LABEL_56;
    }

    uint64_t v13 = (os_log_s *)__nwlog_obj(v11, v12);
    os_log_type_t v14 = type;
    if (!os_log_type_enabled(v13, type)) {
      goto LABEL_56;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v38 = "nw_hash_table_get_node";
    os_log_type_t v15 = "%{public}s called with null table";
LABEL_55:
    _os_log_impl(&dword_181A5C000, v13, v14, v15, buf, 0xCu);
LABEL_56:
    if (v10) {
      free(v10);
    }
    return 0LL;
  }

  if (!a2)
  {
    __nwlog_obj(a1, 0LL);
    *(_DWORD *)buf = 136446210;
    __int16 v38 = "nw_hash_table_get_node";
    os_log_type_t v10 = (void *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v35 = 0;
    uint64_t v16 = __nwlog_fault(v10, &type, &v35);
    if (!(_DWORD)v16) {
      goto LABEL_56;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v13 = (os_log_s *)__nwlog_obj(v16, v17);
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v38 = "nw_hash_table_get_node";
      os_log_type_t v15 = "%{public}s called with null key";
      goto LABEL_55;
    }

    if (!v35)
    {
      uint64_t v13 = (os_log_s *)__nwlog_obj(v16, v17);
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_56;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v38 = "nw_hash_table_get_node";
      os_log_type_t v15 = "%{public}s called with null key, backtrace limit exceeded";
      goto LABEL_55;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v13 = (os_log_s *)__nwlog_obj(backtrace_string, v30);
    os_log_type_t v14 = type;
    int v31 = os_log_type_enabled(v13, type);
    if (backtrace_string)
    {
      if (v31)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v38 = "nw_hash_table_get_node";
        os_log_type_t v39 = 2082;
        os_log_type_t v40 = backtrace_string;
        int v29 = "%{public}s called with null key, dumping backtrace:%{public}s";
        goto LABEL_38;
      }

      goto LABEL_39;
    }

    if (!v31) {
      goto LABEL_56;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v38 = "nw_hash_table_get_node";
    os_log_type_t v15 = "%{public}s called with null key, no backtrace";
    goto LABEL_55;
  }

  if (*(_DWORD *)(a1 + 32))
  {
    unsigned int v6 = *(_DWORD *)(a1 + 48);
    if ((v6 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  os_log_type_t v18 = (os_log_s *)__nwlog_obj(a1, a2);
  os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  __int16 v38 = "nw_hash_table_lock";
  BOOL v19 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v19);
  if (!result)
  {
    free(v19);
    unsigned int v6 = *(_DWORD *)(a1 + 48);
    if ((v6 & 2) == 0)
    {
LABEL_6:
      if ((v6 & 1) != 0)
      {
        unsigned int v7 = *(uint64_t **)(a1
                         + 16LL
        if (v7)
        {
          do
          {
            id v8 = (uint64_t *)*v7;
            if (*((_BYTE *)v7 + 30) == 1
              && ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 16))(v7[2], a2, a3) & 1) != 0)
            {
              break;
            }

            unsigned int v7 = v8;
          }

          while (v8);
        }

        if ((*(_BYTE *)(a1 + 48) & 2) != 0) {
          os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 52));
        }
        return (BOOL)v7;
      }

      __nwlog_obj(a1, a2);
      *(_DWORD *)buf = 136446210;
      __int16 v38 = "nw_hash_table_get_node";
      uint64_t v20 = (void *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      os_log_type_t v35 = 0;
      os_log_type_t v21 = __nwlog_fault(v20, &type, &v35);
      if ((_DWORD)v21)
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v23 = (os_log_s *)__nwlog_obj(v21, v22);
          os_log_type_t v24 = type;
          if (!os_log_type_enabled(v23, type)) {
            goto LABEL_61;
          }
          *(_DWORD *)buf = 136446210;
          __int16 v38 = "nw_hash_table_get_node";
          BOOL v25 = "%{public}s called with invalid hash table";
LABEL_60:
          _os_log_impl(&dword_181A5C000, v23, v24, v25, buf, 0xCu);
          goto LABEL_61;
        }

        if (!v35)
        {
          uint64_t v23 = (os_log_s *)__nwlog_obj(v21, v22);
          os_log_type_t v24 = type;
          if (!os_log_type_enabled(v23, type)) {
            goto LABEL_61;
          }
          *(_DWORD *)buf = 136446210;
          __int16 v38 = "nw_hash_table_get_node";
          BOOL v25 = "%{public}s called with invalid hash table, backtrace limit exceeded";
          goto LABEL_60;
        }

        __int16 v32 = (char *)__nw_create_backtrace_string();
        uint64_t v23 = (os_log_s *)__nwlog_obj(v32, v33);
        os_log_type_t v24 = type;
        uint64_t v34 = os_log_type_enabled(v23, type);
        if (!v32)
        {
          if (!v34) {
            goto LABEL_61;
          }
          *(_DWORD *)buf = 136446210;
          __int16 v38 = "nw_hash_table_get_node";
          BOOL v25 = "%{public}s called with invalid hash table, no backtrace";
          goto LABEL_60;
        }

        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v38 = "nw_hash_table_get_node";
          os_log_type_t v39 = 2082;
          os_log_type_t v40 = v32;
          _os_log_impl( &dword_181A5C000,  v23,  v24,  "%{public}s called with invalid hash table, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v32);
      }

  if (v16) {
    free(v16);
  }
  uint64_t v13 = 0LL;
LABEL_6:

  return v13;
}

  if (v16) {
    free(v16);
  }
  os_log_type_t v10 = 0LL;
LABEL_6:

  return v10;
}

  if (v12) {
    free(v12);
  }
}

    if (v13) {
      free(v13);
    }

    goto LABEL_47;
  }

  v28.receiver = a1;
  v28.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_protocol_metadata;
  id v8 = (id *)objc_msgSendSuper2(&v28, sel_init);
  a1 = v8;
  if (!v8)
  {
    __nwlog_obj();
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v32 = "-[NWConcrete_nw_protocol_metadata initWithDefinition:identifier:]";
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    int v29 = 0;
    if (__nwlog_fault(v17, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v32 = "-[NWConcrete_nw_protocol_metadata initWithDefinition:identifier:]";
          _os_log_impl(&dword_181A5C000, v18, v19, "%{public}s [super init] failed", buf, 0xCu);
        }
      }

      else if (v29)
      {
        uint64_t v23 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v24 = type;
        BOOL v25 = os_log_type_enabled(v18, type);
        if (v23)
        {
          if (v25)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v32 = "-[NWConcrete_nw_protocol_metadata initWithDefinition:identifier:]";
            uint64_t v33 = 2082;
            uint64_t v34 = v23;
            _os_log_impl( &dword_181A5C000,  v18,  v24,  "%{public}s [super init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v23);
          goto LABEL_45;
        }

        if (v25)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v32 = "-[NWConcrete_nw_protocol_metadata initWithDefinition:identifier:]";
          _os_log_impl(&dword_181A5C000, v18, v24, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v27 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v32 = "-[NWConcrete_nw_protocol_metadata initWithDefinition:identifier:]";
          _os_log_impl( &dword_181A5C000,  v18,  v27,  "%{public}s [super init] failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (v27) {
      free(v27);
    }
    goto LABEL_41;
  }

        goto LABEL_40;
      }

      if (!v18)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_flow_passthrough_add_input_handler";
          uint64_t v12 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_38;
        }

        goto LABEL_39;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v11 = type;
      os_log_type_t v15 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_flow_passthrough_add_input_handler";
          uint64_t v12 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_38;
        }

        goto LABEL_39;
      }

      if (!v15) {
        goto LABEL_29;
      }
      *(_DWORD *)buf = 136446466;
      os_log_type_t v21 = "nw_flow_passthrough_add_input_handler";
      BOOL v22 = 2082;
      uint64_t v23 = backtrace_string;
      uint64_t v16 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_28;
    }
  }

    if (v14) {
      free(v14);
    }
LABEL_41:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v30 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v42 = "nw_endpoint_handler_get_extended_dns_error";
    int v31 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v39 = 0;
    if (__nwlog_fault(v31, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v32 = (os_log_s *)(id)gLogObj;
        uint64_t v33 = type;
        if (os_log_type_enabled(v32, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v42 = "nw_endpoint_handler_get_extended_dns_error";
          _os_log_impl(&dword_181A5C000, v32, v33, "%{public}s Endpoint handler is not a resolver", buf, 0xCu);
        }
      }

      else if (v39)
      {
        uint64_t v34 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v32 = (os_log_s *)(id)gLogObj;
        os_log_type_t v35 = type;
        BOOL v36 = os_log_type_enabled(v32, type);
        if (v34)
        {
          if (v36)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v42 = "nw_endpoint_handler_get_extended_dns_error";
            char v43 = 2082;
            os_log_type_t v44 = v34;
            _os_log_impl( &dword_181A5C000,  v32,  v35,  "%{public}s Endpoint handler is not a resolver, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v34);
          if (!v31) {
            goto LABEL_48;
          }
          goto LABEL_47;
        }

        if (v36)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v42 = "nw_endpoint_handler_get_extended_dns_error";
          _os_log_impl( &dword_181A5C000,  v32,  v35,  "%{public}s Endpoint handler is not a resolver, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v32 = (os_log_s *)(id)gLogObj;
        os_log_type_t v37 = type;
        if (os_log_type_enabled(v32, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v42 = "nw_endpoint_handler_get_extended_dns_error";
          _os_log_impl( &dword_181A5C000,  v32,  v37,  "%{public}s Endpoint handler is not a resolver, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v31) {
      goto LABEL_48;
    }
LABEL_47:
    free(v31);
    goto LABEL_48;
  }

  mode = v5->mode;

  if (mode != 1) {
    goto LABEL_41;
  }
  id v8 = (id *)nw_endpoint_handler_copy_resolver(v6);
  uint64_t v9 = (const char **)v8[1];
  os_log_type_t v10 = v9;
  if (!v9)
  {
    __nwlog_obj();
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v42 = "nw_resolver_get_extended_dns_error";
    os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v39 = 0;
    if (__nwlog_fault(v18, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v42 = "nw_resolver_get_extended_dns_error";
          _os_log_impl(&dword_181A5C000, v19, v20, "%{public}s called with null resolver", buf, 0xCu);
        }
      }

      else if (v39)
      {
        os_log_type_t v24 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v25 = type;
        os_log_type_t v26 = os_log_type_enabled(v19, type);
        if (v24)
        {
          if (v26)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v42 = "nw_resolver_get_extended_dns_error";
            char v43 = 2082;
            os_log_type_t v44 = v24;
            _os_log_impl( &dword_181A5C000,  v19,  v25,  "%{public}s called with null resolver, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v24);
          goto LABEL_67;
        }

        if (v26)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v42 = "nw_resolver_get_extended_dns_error";
          _os_log_impl(&dword_181A5C000, v19, v25, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        __int16 v38 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v42 = "nw_resolver_get_extended_dns_error";
          _os_log_impl( &dword_181A5C000,  v19,  v38,  "%{public}s called with null resolver, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

        goto LABEL_40;
      }

      if (!v25)
      {
        __nwlog_obj();
        os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          char v28 = "nw_endpoint_handler_copy_protocol_metadata";
          _os_log_impl( &dword_181A5C000,  v14,  v24,  "%{public}s called with null definition, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_39;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v14, type);
      if (!backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446210;
          char v28 = "nw_endpoint_handler_copy_protocol_metadata";
          _os_log_impl(&dword_181A5C000, v14, v21, "%{public}s called with null definition, no backtrace", buf, 0xCu);
        }

        goto LABEL_39;
      }

      if (v22)
      {
        *(_DWORD *)buf = 136446466;
        char v28 = "nw_endpoint_handler_copy_protocol_metadata";
        int v29 = 2082;
        BOOL v30 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v14,  v21,  "%{public}s called with null definition, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_27;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v28 = "nw_endpoint_handler_copy_protocol_metadata";
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v25 = 0;
    if (__nwlog_fault(v13, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          char v28 = "nw_endpoint_handler_copy_protocol_metadata";
          _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s called with null handler", buf, 0xCu);
        }

        goto LABEL_39;
      }

      if (!v25)
      {
        __nwlog_obj();
        os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v23 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          char v28 = "nw_endpoint_handler_copy_protocol_metadata";
          _os_log_impl( &dword_181A5C000,  v14,  v23,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_39;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v19 = type;
      uint64_t v20 = os_log_type_enabled(v14, type);
      if (!backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          char v28 = "nw_endpoint_handler_copy_protocol_metadata";
          _os_log_impl(&dword_181A5C000, v14, v19, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }

        goto LABEL_39;
      }

      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        char v28 = "nw_endpoint_handler_copy_protocol_metadata";
        int v29 = 2082;
        BOOL v30 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v14,  v19,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
      }

    if (v12) {
      free(v12);
    }
    uint64_t v9 = 0LL;
    goto LABEL_15;
  }

  if (a3 && (a2 & 1) == 0)
  {
    while (((_BYTE)v7[16] & 2) != 0
         || !v7[7] && !v7[9]
         || nw_content_context_is_blocked_by_antecedents(v7[8])
         || v7[8] != v8)
    {
      uint64_t v9 = (id *)v7[1];

      unsigned int v7 = v9;
      if (!v9) {
        goto LABEL_14;
      }
    }
  }

  else
  {
    while (((_BYTE)v7[16] & 2) != 0 || !v7[7] && !v7[9] || nw_content_context_is_blocked_by_antecedents(v7[8]))
    {
      uint64_t v9 = (id *)v7[1];

      unsigned int v7 = v9;
      if (!v9) {
        goto LABEL_14;
      }
    }
  }

  if (v7[7] || v7[9])
  {
    unsigned int v7 = v7;
    uint64_t v9 = v7;
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  __break(1u);
  return result;
}

    if (v11) {
      free(v11);
    }
    goto LABEL_12;
  }

  uint64_t v5 = v3;
  mode = v5->mode;

  if ((_DWORD)mode == 2)
  {
    unsigned int v7 = nw_endpoint_handler_copy_flow(v5);
    if (v7)
    {
      nw_flow_service_writes(v5, (NWConcrete_nw_endpoint_flow *)v7, handle);
LABEL_5:

      goto LABEL_12;
    }

    __nwlog_obj();
    os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    int v29 = "nw_flow_output_available";
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v26 = 0;
    if (__nwlog_fault(v15, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          int v29 = "nw_flow_output_available";
          _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s called with null endpoint_flow", buf, 0xCu);
        }
      }

      else if (v26)
      {
        os_log_type_t v21 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v22 = type;
        uint64_t v23 = os_log_type_enabled(v16, type);
        if (v21)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446466;
            int v29 = "nw_flow_output_available";
            BOOL v30 = 2082;
            int v31 = v21;
            _os_log_impl( &dword_181A5C000,  v16,  v22,  "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v21);
          goto LABEL_47;
        }

        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          int v29 = "nw_flow_output_available";
          _os_log_impl(&dword_181A5C000, v16, v22, "%{public}s called with null endpoint_flow, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v25 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          int v29 = "nw_flow_output_available";
          _os_log_impl( &dword_181A5C000,  v16,  v25,  "%{public}s called with null endpoint_flow, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

      _os_log_impl(&dword_181A5C000, v22, v23, v24, buf, 0xCu);
      goto LABEL_40;
    }

    v11 += 0x4000LL;
  }

  if (*(_DWORD *)(a1 + 16))
  {
LABEL_13:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v15 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = zError(v13);
      *(_DWORD *)buf = 136446466;
      uint64_t v33 = "decode";
      uint64_t v34 = 2080;
      os_log_type_t v35 = (uint64_t)v16;
      _os_log_impl(&dword_181A5C000, v15, OS_LOG_TYPE_ERROR, "%{public}s inflate returned %s", buf, 0x16u);
    }

    uint64_t v17 = -1LL;
LABEL_22:
    if (a4)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v19 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v33 = "decode";
        _os_log_impl(&dword_181A5C000, v19, OS_LOG_TYPE_ERROR, "%{public}s truncated data", buf, 0xCu);
      }
    }

    return v17;
  }

      os_log_type_t v53 = *((unsigned __int8 *)a3 + *v9);
      if (*((_BYTE *)a3 + *v9)) {
        uint64_t v16 = 0LL;
      }
LABEL_41:
      if (v53) {
        os_log_type_t v54 = 1;
      }
      else {
        os_log_type_t v54 = (v16 & 7) == 4;
      }
      if (v54) {
        goto LABEL_48;
      }
      if ((v16 >> 3) == 1)
      {
        PBReaderReadString();
        uint64_t v12 = (NSString *)objc_claimAutoreleasedReturnValue();
        clientUUID = self->_clientUUID;
        self->_clientUUID = v12;
      }

      else
      {
        os_log_type_t v55 = PBReaderSkipValueWithTag();
        if (!v55) {
          return v55;
        }
      }

      uint64_t v5 = *v4;
      unsigned int v6 = *(void *)((char *)a3 + v5);
      id v8 = *(void *)((char *)a3 + *v7);
      if (v6 >= v8) {
        goto LABEL_48;
      }
    }

    uint64_t v16 = 0LL;
LABEL_38:
    *os_log_type_t v14 = 1;
    goto LABEL_39;
  }

    _os_log_impl(&dword_181A5C000, v12, v13, v14, buf, 0xCu);
    goto LABEL_40;
  }

  handle = a1->handle;
  if (handle)
  {
    unsigned int v6 = handle[235];
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unsigned int v7 = (os_log_s *)gLogObj;
    id v8 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO);
    if ((v6 & 0x10) != 0)
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446722;
        BOOL v22 = "nw_protocol_shoes_error";
        uint64_t v23 = 2082;
        os_log_type_t v24 = handle + 151;
        BOOL v25 = 1024;
        os_log_type_t v26 = a3;
        _os_log_impl(&dword_181A5C000, v7, OS_LOG_TYPE_INFO, "%{public}s %{public}s not sending error %d", buf, 0x1Cu);
      }
    }

    else
    {
      if (v8)
      {
        *(_DWORD *)buf = 136446722;
        BOOL v22 = "nw_protocol_shoes_error";
        uint64_t v23 = 2082;
        os_log_type_t v24 = handle + 151;
        BOOL v25 = 1024;
        os_log_type_t v26 = a3;
        _os_log_impl(&dword_181A5C000, v7, OS_LOG_TYPE_INFO, "%{public}s %{public}s sending error %d", buf, 0x1Cu);
      }

      default_input_handler = a1->default_input_handler;
      if (default_input_handler)
      {
        error = (void (*)(void))default_input_handler->callbacks->error;
        if (error) {
          error();
        }
      }
    }

    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v22 = "nw_protocol_shoes_error";
  uint64_t v11 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v19 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v12 = (os_log_s *)__nwlog_obj();
    uint64_t v13 = type;
    if (!os_log_type_enabled(v12, type)) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v22 = "nw_protocol_shoes_error";
    os_log_type_t v14 = "%{public}s called with null shoes";
    goto LABEL_39;
  }

  if (!v19)
  {
    uint64_t v12 = (os_log_s *)__nwlog_obj();
    uint64_t v13 = type;
    if (!os_log_type_enabled(v12, type)) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v22 = "nw_protocol_shoes_error";
    os_log_type_t v14 = "%{public}s called with null shoes, backtrace limit exceeded";
    goto LABEL_39;
  }

  uint64_t v17 = (char *)__nw_create_backtrace_string();
  uint64_t v12 = (os_log_s *)__nwlog_obj();
  uint64_t v13 = type;
  os_log_type_t v18 = os_log_type_enabled(v12, type);
  if (!v17)
  {
    if (!v18) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v22 = "nw_protocol_shoes_error";
    os_log_type_t v14 = "%{public}s called with null shoes, no backtrace";
    goto LABEL_39;
  }

  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v22 = "nw_protocol_shoes_error";
    uint64_t v23 = 2082;
    os_log_type_t v24 = v17;
    _os_log_impl( &dword_181A5C000,  v12,  v13,  "%{public}s called with null shoes, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v11) {
    goto LABEL_41;
  }
}

    goto LABEL_40;
  }

  if (v4)
  {
    os_unfair_lock_lock((os_unfair_lock_t)v3 + 2);
    if (!*((_BYTE *)v3 + 113))
    {
      unsigned int v6 = _Block_copy(v5);
      unsigned int v7 = (void *)*((void *)v3 + 6);
      *((void *)v3 + 6) = v6;
    }

    os_unfair_lock_unlock((os_unfair_lock_t)v3 + 2);
    goto LABEL_6;
  }

  __nwlog_obj();
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v25 = "nw_ethernet_channel_set_state_changed_handler";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v22 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v25 = "nw_ethernet_channel_set_state_changed_handler";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null handler", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (!v22)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v25 = "nw_ethernet_channel_set_state_changed_handler";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  uint64_t v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      BOOL v25 = "nw_ethernet_channel_set_state_changed_handler";
      _os_log_impl(&dword_181A5C000, v10, v18, "%{public}s called with null handler, no backtrace", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v25 = "nw_ethernet_channel_set_state_changed_handler";
    os_log_type_t v26 = 2082;
    os_log_type_t v27 = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

    goto LABEL_40;
  }

  if (v4)
  {
    os_unfair_lock_lock((os_unfair_lock_t)v3 + 2);
    if (!*((_BYTE *)v3 + 113)) {
      objc_storeStrong((id *)v3 + 5, queue);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)v3 + 2);
    goto LABEL_6;
  }

  __nwlog_obj();
  os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v23 = "nw_ethernet_channel_set_queue";
  unsigned int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v20 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v23 = "nw_ethernet_channel_set_queue";
      _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null queue", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (!v20)
  {
    __nwlog_obj();
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v23 = "nw_ethernet_channel_set_queue";
      _os_log_impl(&dword_181A5C000, v8, v19, "%{public}s called with null queue, backtrace limit exceeded", buf, 0xCu);
    }

    goto LABEL_39;
  }

  os_log_type_t v15 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  uint64_t v16 = type;
  uint64_t v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v23 = "nw_ethernet_channel_set_queue";
      _os_log_impl(&dword_181A5C000, v8, v16, "%{public}s called with null queue, no backtrace", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v23 = "nw_ethernet_channel_set_queue";
    os_log_type_t v24 = 2082;
    BOOL v25 = v15;
    _os_log_impl( &dword_181A5C000,  v8,  v16,  "%{public}s called with null queue, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_41;
  }
LABEL_6:
}

    posix_error = nw_error_create_posix_error(53);
    goto LABEL_7;
  }

  __nwlog_obj();
  BOOL v19 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_ethernet_channel_send";
  uint64_t v16 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v69[0] = 0;
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v20 = type[0];
    if (os_log_type_enabled(v17, type[0]))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_ethernet_channel_send";
      _os_log_impl(&dword_181A5C000, v17, v20, "%{public}s called with null content", buf, 0xCu);
    }

    goto LABEL_51;
  }

  if (!v69[0])
  {
    __nwlog_obj();
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    int v31 = type[0];
    if (os_log_type_enabled(v17, type[0]))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_ethernet_channel_send";
      _os_log_impl( &dword_181A5C000,  v17,  v31,  "%{public}s called with null content, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_51;
  }

  os_log_type_t v24 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  BOOL v25 = type[0];
  os_log_type_t v26 = os_log_type_enabled(v17, type[0]);
  if (!v24)
  {
    if (v26)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_ethernet_channel_send";
      _os_log_impl(&dword_181A5C000, v17, v25, "%{public}s called with null content, no backtrace", buf, 0xCu);
    }

    goto LABEL_51;
  }

  if (v26)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_ethernet_channel_send";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v24;
    _os_log_impl( &dword_181A5C000,  v17,  v25,  "%{public}s called with null content, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v24);
  if (v16) {
    goto LABEL_53;
  }
LABEL_11:
}

        if (v28) {
          free(v28);
        }
        goto LABEL_18;
      }

      goto LABEL_9;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v22 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = *(void *)(*(void *)(a1 + 40) + 8LL);
      os_log_type_t v24 = v23 + 275;
      LODWORD(v23) = *(_DWORD *)(v23 + 224);
      *(_DWORD *)parse = 136446978;
      *(void *)&parse[4] = "nw_protocol_copy_ws_definition_block_invoke";
      *(_WORD *)&parse[12] = 2082;
      *(void *)&parse[14] = v24;
      *(_WORD *)&parse[22] = 1024;
      LODWORD(v47) = v23;
      WORD2(v47) = 1024;
      *(_DWORD *)((char *)&v47 + 6) = v10;
      _os_log_impl( &dword_181A5C000,  v22,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s trying to send a new message before completing the first, %d, %d",  parse,  0x22u);
    }

    nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 32), 100);
  }

  else
  {
    nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 32), 5);
  }
          }

          uint64_t v20 = (char *)loga;
        }

        if (v20) {
          free(v20);
        }
LABEL_21:
        uint64_t v17 = 0;
      }

      else
      {
        uint64_t v17 = 27;
      }

      goto LABEL_25;
    }

    nw_array_prepend(*((void *)v3 + 69), *(void **)(*(void *)&v87[8] + 40LL));
    uint64_t v17 = 27;
LABEL_25:
    _Block_object_dispose(v77, 8);
    _Block_object_dispose(v87, 8);

    if (v17)
    {
      uint64_t v5 = *((void *)v3 + 69);
      if (!v5) {
        break;
      }
LABEL_61:
      if (*(void *)(v5 + 24) != *(void *)(v5 + 16)) {
        goto LABEL_62;
      }
      break;
    }
  }

  if ((v3[607] & 0x40) == 0) {
    goto LABEL_69;
  }
  v3[607] &= ~0x40u;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  int v29 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)os_log_type_t v87 = 136446466;
    *(void *)&v87[4] = "nw_framer_flush_output";
    *(_WORD *)&v87[12] = 2080;
    *(void *)&v87[14] = v3 + 609;
    _os_log_impl( &dword_181A5C000,  v29,  OS_LOG_TYPE_INFO,  "%{public}s %s Delivering delayed output_finished",  v87,  0x16u);
  }

  BOOL v30 = *(void *)(v4 + 24);
  if (v30)
  {
    int v31 = *(void (**)(uint64_t, char *))(v30 + 192);
    if (v31)
    {
      v31(v4, v3 + 288);
      goto LABEL_69;
    }
  }

  __nwlog_obj();
  os_log_type_t v39 = (void *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v40 = *(const char **)(v4 + 16);
  if (!v40) {
    os_log_type_t v40 = "invalid";
  }
  *(_DWORD *)os_log_type_t v87 = 136446466;
  *(void *)&v87[4] = "nw_framer_flush_output";
  *(_WORD *)&v87[12] = 2082;
  *(void *)&v87[14] = v40;
  os_log_type_t v41 = (char *)_os_log_send_and_compose_impl();

  v77[0] = OS_LOG_TYPE_ERROR;
  buf[0] = 0;
  if (__nwlog_fault(v41, v77, buf))
  {
    if (v77[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v43 = v77[0];
      if (os_log_type_enabled(v42, v77[0]))
      {
        os_log_type_t v44 = *(const char **)(v4 + 16);
        if (!v44) {
          os_log_type_t v44 = "invalid";
        }
        *(_DWORD *)os_log_type_t v87 = 136446466;
        *(void *)&v87[4] = "nw_framer_flush_output";
        *(_WORD *)&v87[12] = 2082;
        *(void *)&v87[14] = v44;
        _os_log_impl( &dword_181A5C000,  v42,  v43,  "%{public}s protocol %{public}s has invalid output_finished callback",  v87,  0x16u);
      }

      goto LABEL_130;
    }

    if (buf[0])
    {
      BOOL v50 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v51 = v77[0];
      BOOL v52 = os_log_type_enabled(v42, v77[0]);
      if (v50)
      {
        if (v52)
        {
          os_log_type_t v53 = *(const char **)(v4 + 16);
          if (!v53) {
            os_log_type_t v53 = "invalid";
          }
          *(_DWORD *)os_log_type_t v87 = 136446722;
          *(void *)&v87[4] = "nw_framer_flush_output";
          *(_WORD *)&v87[12] = 2082;
          *(void *)&v87[14] = v53;
          *(_WORD *)&v87[22] = 2082;
          v88 = (uint64_t (*)(uint64_t, uint64_t))v50;
          _os_log_impl( &dword_181A5C000,  v42,  v51,  "%{public}s protocol %{public}s has invalid output_finished callback, dumping backtrace:%{public}s",  v87,  0x20u);
        }

        free(v50);
        goto LABEL_131;
      }

      if (v52)
      {
        os_log_type_t v58 = *(const char **)(v4 + 16);
        if (!v58) {
          os_log_type_t v58 = "invalid";
        }
        *(_DWORD *)os_log_type_t v87 = 136446466;
        *(void *)&v87[4] = "nw_framer_flush_output";
        *(_WORD *)&v87[12] = 2082;
        *(void *)&v87[14] = v58;
        _os_log_impl( &dword_181A5C000,  v42,  v51,  "%{public}s protocol %{public}s has invalid output_finished callback, no backtrace",  v87,  0x16u);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v56 = v77[0];
      if (os_log_type_enabled(v42, v77[0]))
      {
        os_log_type_t v57 = *(const char **)(v4 + 16);
        if (!v57) {
          os_log_type_t v57 = "invalid";
        }
        *(_DWORD *)os_log_type_t v87 = 136446466;
        *(void *)&v87[4] = "nw_framer_flush_output";
        *(_WORD *)&v87[12] = 2082;
        *(void *)&v87[14] = v57;
        _os_log_impl( &dword_181A5C000,  v42,  v56,  "%{public}s protocol %{public}s has invalid output_finished callback, backtrace limit exceeded",  v87,  0x16u);
      }
    }

    goto LABEL_40;
  }

  if (*((void *)v3 + 52))
  {
    nw_context_assert_queue(*((void **)v3 + 46));
    uint64_t v5 = *(void **)(v4 + 560);
    if (!v5)
    {
      objc_initWeak((id *)location, (id)v4);
      aBlock[0] = MEMORY[0x1895F87A8];
      aBlock[1] = 3221225472LL;
      aBlock[2] = __nw_framer_schedule_wakeup_block_invoke;
      aBlock[3] = &unk_189BC0AE8;
      objc_copyWeak(&v23, (id *)location);
      unsigned int v6 = _Block_copy(aBlock);
      unsigned int v7 = *(void **)(v4 + 560);
      *(void *)(v4 + 560) = v6;

      objc_destroyWeak(&v23);
      objc_destroyWeak((id *)location);
      uint64_t v5 = *(void **)(v4 + 560);
    }

    nw_context_reset_timer_block(*(void **)(v4 + 368), v4, milliseconds, v5);
    goto LABEL_6;
  }

  __nwlog_obj();
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)location = 136446210;
  *(void *)&location[4] = "nw_framer_schedule_wakeup";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v24 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)location = 136446210;
      *(void *)&location[4] = "nw_framer_schedule_wakeup";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null framer->wakeup", location, 0xCu);
    }

    goto LABEL_39;
  }

  if (!v24)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)location = 136446210;
      *(void *)&location[4] = "nw_framer_schedule_wakeup";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s called with null framer->wakeup, backtrace limit exceeded",  location,  0xCu);
    }

    goto LABEL_39;
  }

  uint64_t v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)location = 136446210;
      *(void *)&location[4] = "nw_framer_schedule_wakeup";
      _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s called with null framer->wakeup, no backtrace",  location,  0xCu);
    }

    goto LABEL_39;
  }

  if (v19)
  {
    *(_DWORD *)location = 136446466;
    *(void *)&location[4] = "nw_framer_schedule_wakeup";
    os_log_type_t v27 = 2082;
    char v28 = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s called with null framer->wakeup, dumping backtrace:%{public}s",  location,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

    goto LABEL_40;
  }

  if (v13)
  {
    *(void *)buf = 0LL;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    v48 = 0;
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = __nw_connection_group_send_message_block_invoke;
    aBlock[3] = &unk_189BBE208;
    os_log_type_t v15 = v9;
    os_log_type_t v39 = v15;
    uint64_t v16 = v10;
    os_log_type_t v40 = v16;
    uint64_t v17 = v11;
    os_log_type_t v41 = v17;
    os_log_type_t v18 = v12;
    os_log_type_t v42 = v18;
    BOOL v19 = v14;
    char v43 = v19;
    os_log_type_t v44 = buf;
    uint64_t v20 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v9 + 43);
    v20[2](v20);
    os_unfair_lock_unlock(v9 + 43);

    if (!*(_BYTE *)(*(void *)&buf[8] + 24LL)) {
      nw_connection_group_send_message_internal(v15, v16, v17, v18, v19);
    }

    _Block_object_dispose(buf, 8);
    goto LABEL_6;
  }

  __nwlog_obj();
  BOOL v25 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_group_send_message";
  BOOL v22 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v46 = OS_LOG_TYPE_ERROR;
  os_log_type_t v45 = 0;
  if (v46 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v26 = v46;
    if (os_log_type_enabled(v23, v46))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_group_send_message";
      _os_log_impl(&dword_181A5C000, v23, v26, "%{public}s called with null completion", buf, 0xCu);
    }

  if (v8) {
    free(v8);
  }
  LOBYTE(v6) = 0;
LABEL_6:

  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = (_BYTE)v6;
}

      if (v10) {
        free(v10);
      }
      return 0LL;
    }

    if (!v22)
    {
      uint64_t v11 = (os_log_s *)__nwlog_obj();
      uint64_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v25 = "nw_protocol_new";
        uint64_t v13 = "%{public}s called with null instance_size, backtrace limit exceeded";
        goto LABEL_38;
      }

      goto LABEL_39;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v11 = (os_log_s *)__nwlog_obj();
    uint64_t v12 = type;
    BOOL v19 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v25 = "nw_protocol_new";
        uint64_t v13 = "%{public}s called with null instance_size, no backtrace";
        goto LABEL_38;
      }

      goto LABEL_39;
    }

    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v25 = "nw_protocol_new";
      os_log_type_t v26 = 2082;
      os_log_type_t v27 = (uint64_t)backtrace_string;
      uint64_t v20 = "%{public}s called with null instance_size, dumping backtrace:%{public}s";
LABEL_28:
      _os_log_impl(&dword_181A5C000, v11, v12, v20, buf, 0x16u);
    }

    free(backtrace_string);
    goto LABEL_52;
  }

  if (!nw_group_descriptor_allows_endpoint(v3, v4))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unsigned int v7 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v8 = *((unsigned int *)v3 + 2);
      else {
        uint64_t v9 = off_189BB74C8[v8];
      }
      *(_DWORD *)buf = 136446466;
      int v29 = "nw_group_descriptor_add_endpoint";
      BOOL v30 = 2080;
      int v31 = (void *)v9;
      _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_ERROR,  "%{public}s Invalid endpoint type %s for group descriptor",  buf,  0x16u);
    }

    goto LABEL_17;
  }

  if ((nw_group_descriptor_supports_multiple_members((NWConcrete_nw_group_descriptor *)v3) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unsigned int v7 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      os_log_type_t v10 = *((unsigned int *)v3 + 2);
      else {
        uint64_t v11 = off_189BB74C8[v10];
      }
      *(_DWORD *)buf = 136446466;
      int v29 = "nw_group_descriptor_add_endpoint";
      BOOL v30 = 2080;
      int v31 = (void *)v11;
      _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_ERROR,  "%{public}s Group descriptor of type %s does not support multiple members",  buf,  0x16u);
    }

    goto LABEL_40;
  }

  if (a2)
  {
    nw_protocol_instance_tear_down_path_inner(v3, a2);
    uint64_t v5 = *(void **)(a2 + 16);
    *(void *)(a2 + 16) = 0LL;

    unsigned int v6 = *(void **)(a2 + 64);
    *(void *)(a2 + 64) = 0LL;

    unsigned int v7 = *(void **)(a2 + 72);
    *(void *)(a2 + 72) = 0LL;

    id v8 = *(void **)(a2 + 80);
    *(void *)(a2 + 80) = 0LL;

    uint64_t v9 = *(void **)(a2 + 96);
    *(void *)(a2 + 96) = 0LL;

    *(_DWORD *)(a2 + 132) = -1;
    if ((*(_BYTE *)(a2 + 40) & 1) != 0) {
      nw::release_if_needed<nw_protocol *>((uint64_t *)(a2 + 32));
    }
    *(void *)(a2 + 32) = 0LL;

    goto LABEL_6;
  }

  __nwlog_obj();
  os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v27 = "nw_protocol_path_state_dispose";
  uint64_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v24 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_protocol_path_state_dispose";
      _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null path_state", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (!v24)
  {
    __nwlog_obj();
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_protocol_path_state_dispose";
      _os_log_impl( &dword_181A5C000,  v12,  v23,  "%{public}s called with null path_state, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  BOOL v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  uint64_t v20 = type;
  os_log_type_t v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_protocol_path_state_dispose";
      _os_log_impl(&dword_181A5C000, v12, v20, "%{public}s called with null path_state, no backtrace", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v27 = "nw_protocol_path_state_dispose";
    char v28 = 2082;
    int v29 = v19;
    _os_log_impl( &dword_181A5C000,  v12,  v20,  "%{public}s called with null path_state, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_41;
  }
LABEL_6:
}

LABEL_40:
      if (v10) {
        free(v10);
      }
      goto LABEL_42;
    }

    if (!v23)
    {
      __nwlog_obj();
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_protocol_instance_copy_override_endpoint_for_path";
        _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_39;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v18 = type;
    BOOL v19 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_protocol_instance_copy_override_endpoint_for_path";
        _os_log_impl(&dword_181A5C000, v11, v18, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }

      goto LABEL_39;
    }

    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v26 = "nw_protocol_instance_copy_override_endpoint_for_path";
      os_log_type_t v27 = 2082;
      char v28 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v22);
    if (!v12) {
      goto LABEL_9;
    }
    goto LABEL_60;
  }

  unsigned int v6 = v5;
  unsigned int v7 = v6;
  if (((_BYTE)v6[17] & 8) == 0) {
    dispatch_assert_queue_V2(v6[1]);
  }

  id v8 = *(void **)(v4 + 272);
  if (!v8)
  {
    objc_initWeak((id *)location, (id)v4);
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 3221225472LL;
    aBlock[2] = __nw_protocol_instance_schedule_wakeup_block_invoke;
    aBlock[3] = &unk_189BC0AE8;
    objc_copyWeak(&v31, (id *)location);
    uint64_t v9 = _Block_copy(aBlock);
    os_log_type_t v10 = *(void **)(v4 + 272);
    *(void *)(v4 + 272) = v9;

    objc_destroyWeak(&v31);
    objc_destroyWeak((id *)location);
    id v8 = *(void **)(v4 + 272);
  }

  *(_BYTE *)(v4 + 404) = *(_BYTE *)(v4 + 404) & 0xEF | (16 * (a2 != -1));
  nw_context_reset_timer_block(*(void **)(v4 + 120), v4, a2, v8);
LABEL_9:
}

    goto LABEL_40;
  }

  uint64_t v5 = v3[1];
  if (v5)
  {
    unsigned int v6 = *(void *)(v5 + 72);
    if (v6)
    {
      unsigned int v7 = *(void (**)(void *, id))(v6 + 40);
      if (v7) {
        v7(v3, v4);
      }
    }

    goto LABEL_6;
  }

  __nwlog_obj();
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v25 = "nw_protocol_metadata_set_original";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v22 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v25 = "nw_protocol_metadata_set_original";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null metadata->definition", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (!v22)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v25 = "nw_protocol_metadata_set_original";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s called with null metadata->definition, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  uint64_t v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      BOOL v25 = "nw_protocol_metadata_set_original";
      _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s called with null metadata->definition, no backtrace",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v25 = "nw_protocol_metadata_set_original";
    os_log_type_t v26 = 2082;
    os_log_type_t v27 = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s called with null metadata->definition, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

    if (v12) {
      CFRelease(v12);
    }
  }

  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v26 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_http_authentication_parse_schemes";
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = error.domain;
      *(_WORD *)&buf[22] = 1024;
      LODWORD(v37) = error.error;
      _os_log_impl( &dword_181A5C000,  v26,  OS_LOG_TYPE_ERROR,  "%{public}s CFHTTPAuthenticationCreateFromResponse failed to return a valid authentication ref [%ld:%d]",  buf,  0x1Cu);
    }
  }

  return v9;
}

    free(v13);
    goto LABEL_40;
  }

      os_log_type_t v51 = *(unsigned __int8 *)(a2 + *v8);
      if (*(_BYTE *)(a2 + *v8)) {
        os_log_type_t v14 = 0LL;
      }
LABEL_41:
      if (v51) {
        BOOL v52 = 1;
      }
      else {
        BOOL v52 = (v14 & 7) == 4;
      }
      if (v52) {
        return *(_BYTE *)(a2 + *v8) == 0;
      }
      if ((v14 >> 3) == 1)
      {
        os_log_type_t v53 = objc_alloc_init(&OBJC_CLASS___NWPBServiceBrowse);
        objc_storeStrong((id *)(a1 + 8), v53);
        if (!PBReaderPlaceMark() || !NWPBServiceBrowseReadFrom((uint64_t)v53, a2))
        {

          return 0LL;
        }

        PBReaderRecallMark();
      }

      else
      {
        BOOL result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v4 = *v3;
      uint64_t v5 = *(void *)(a2 + v4);
      unsigned int v7 = *(void *)(a2 + *v6);
      if (v5 >= v7) {
        return *(_BYTE *)(a2 + *v8) == 0;
      }
    }

    os_log_type_t v14 = 0LL;
LABEL_38:
    _BYTE *v12 = 1;
    goto LABEL_39;
  }

  return *(_BYTE *)(a2 + *v8) == 0;
}

    free(backtrace_string);
    goto LABEL_49;
  }

  os_log_type_t v14 = (os_log_s *)__nwlog_obj();
  os_log_type_t v15 = type;
  if (os_log_type_enabled(v14, type))
  {
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_trainer_bottom_check_output";
    uint64_t v16 = "%{public}s called with null protocol";
LABEL_48:
    _os_log_impl(&dword_181A5C000, v14, v15, v16, buf, 0xCu);
  }

    goto LABEL_40;
  }

  if (!v11)
  {
    __nwlog_obj();
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v37 = "-[_NWAdvertiser initFor:descriptor:parent:parameters:]";
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v34 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v37 = "-[_NWAdvertiser initFor:descriptor:parent:parameters:]";
        _os_log_impl(&dword_181A5C000, v21, v24, "%{public}s called with null _descriptor", buf, 0xCu);
      }
    }

    else if (v34)
    {
      char v28 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      int v29 = type;
      BOOL v30 = os_log_type_enabled(v21, type);
      if (v28)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v37 = "-[_NWAdvertiser initFor:descriptor:parent:parameters:]";
          __int16 v38 = 2082;
          os_log_type_t v39 = v28;
          _os_log_impl( &dword_181A5C000,  v21,  v29,  "%{public}s called with null _descriptor, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v28);
        if (!v20) {
          goto LABEL_42;
        }
        goto LABEL_41;
      }

      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v37 = "-[_NWAdvertiser initFor:descriptor:parent:parameters:]";
        _os_log_impl(&dword_181A5C000, v21, v29, "%{public}s called with null _descriptor, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v32 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v37 = "-[_NWAdvertiser initFor:descriptor:parent:parameters:]";
        _os_log_impl( &dword_181A5C000,  v21,  v32,  "%{public}s called with null _descriptor, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_39;
  }

  v33.receiver = a1;
  v33.super_class = (Class)&OBJC_CLASS____NWAdvertiser;
  os_log_type_t v14 = (id *)objc_msgSendSuper2(&v33, sel_init);
  a1 = v14;
  if (v14)
  {
    objc_storeStrong(v14 + 1, a2);
    objc_storeStrong(a1 + 2, a3);
    objc_storeWeak(a1 + 3, v12);
    os_log_type_t v15 = v13;
    uint64_t v16 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]( (id *)objc_alloc(&OBJC_CLASS___NWConcrete_nw_parameters),  v15,  0,  0);

    uint64_t v17 = a1[5];
    a1[5] = (id)v16;

    nw_parameters_set_multipath_service((nw_parameters_t)a1[5], nw_multipath_service_disabled);
  }

        goto LABEL_40;
      }

      if (!v20)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v23 = "nw_listener_create_with_port";
          _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_39;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v16 = type;
      uint64_t v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v23 = "nw_listener_create_with_port";
          _os_log_impl(&dword_181A5C000, v9, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }

        goto LABEL_39;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v23 = "nw_listener_create_with_port";
        os_log_type_t v24 = 2082;
        BOOL v25 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_27;
    }
  }

  else
  {
    __nwlog_obj();
    unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v23 = "nw_listener_create_with_port";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v20 = 0;
    if (__nwlog_fault(v8, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v23 = "nw_listener_create_with_port";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null port", buf, 0xCu);
        }

        goto LABEL_39;
      }

      if (!v20)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v23 = "nw_listener_create_with_port";
          _os_log_impl( &dword_181A5C000,  v9,  v18,  "%{public}s called with null port, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_39;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      os_log_type_t v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v23 = "nw_listener_create_with_port";
          _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null port, no backtrace", buf, 0xCu);
        }

        goto LABEL_39;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v23 = "nw_listener_create_with_port";
        os_log_type_t v24 = 2082;
        BOOL v25 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null port, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_40;
      }

      if (!v22)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v25 = "nw_listener_create_with_launchd_key";
          _os_log_impl( &dword_181A5C000,  v9,  v21,  "%{public}s called with null key, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_39;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v25 = "nw_listener_create_with_launchd_key";
          _os_log_impl(&dword_181A5C000, v9, v18, "%{public}s called with null key, no backtrace", buf, 0xCu);
        }

        goto LABEL_39;
      }

      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v25 = "nw_listener_create_with_launchd_key";
        os_log_type_t v26 = 2082;
        os_log_type_t v27 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v9,  v18,  "%{public}s called with null key, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_27;
    }

    goto LABEL_40;
  }

  uint64_t v4 = nw_listener_create(v3);
  uint64_t v5 = strdup(a2);
  if (v5)
  {
LABEL_4:
    *((void *)v4 + 7) = v5;
LABEL_5:

    return (BOOL)v4;
  }

  __nwlog_obj();
  uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  BOOL v25 = "strict_strdup";
  os_log_type_t v14 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v14);
  if (!result)
  {
    free(v14);
    goto LABEL_4;
  }

  __break(1u);
  return result;
}

    if (v11) {
      free(v11);
    }
    goto LABEL_14;
  }

  nw_context_assert_queue(v1[3]);
  uint64_t v3 = v2[18];
  if (v3)
  {
    uint64_t v4 = nw_endpoint_handler_copy_connected_flow_handler(v3);
    if (!v4)
    {
      if (!nw_endpoint_handler_has_connected_flow(v2[18]))
      {
        unsigned int v7 = v2[2];
        if (v7 && !nw_path_parameters_get_logging_disabled(v7[13]))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          id v8 = (os_log_s *)(id)gconnectionLogObj;
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            uint64_t v9 = *((_DWORD *)v2 + 112);
            *(_DWORD *)buf = 136446466;
            os_log_type_t v21 = "nw_connection_initialize_for_listener_protocol_on_nw_queue";
            BOOL v22 = 1024;
            LODWORD(v23) = v9;
            _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_ERROR,  "%{public}s [C%u] Connection has no available handler",  buf,  0x12u);
          }
        }

        uint64_t v4 = 0LL;
        goto LABEL_13;
      }

      uint64_t v4 = v2[18];
    }

    nw_endpoint_flow_pre_attach_protocols(v4, 0LL);
LABEL_13:

    goto LABEL_14;
  }

  uint64_t v5 = v2[2];
  if (v5 && !nw_path_parameters_get_logging_disabled(v5[13]))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v4 = (NWConcrete_nw_endpoint_handler *)(id)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR))
    {
      unsigned int v6 = *((_DWORD *)v2 + 112);
      *(_DWORD *)buf = 136446466;
      os_log_type_t v21 = "nw_connection_initialize_for_listener_protocol_on_nw_queue";
      BOOL v22 = 1024;
      LODWORD(v23) = v6;
      _os_log_impl( &dword_181A5C000,  (os_log_t)v4,  OS_LOG_TYPE_ERROR,  "%{public}s [C%u] Connection has no parent handler",  buf,  0x12u);
    }

    goto LABEL_13;
  }

        os_log_type_t v24 = v11;
        BOOL v25 = v11->path_parameters->joinable_path_value.multipath_service;

        if ((v25 & 0x2000) == 0)
        {
          main_document_url_endpoint = v11->main_document_url_endpoint;
          if (private_redacted)
          {
            nw_endpoint_get_url_hash(main_document_url_endpoint);
            snprintf(v219, 0x80uLL, ", main document url hash: %s");
          }

          else
          {
            nw_endpoint_get_sanitized_url(main_document_url_endpoint);
            snprintf(v219, 0x80uLL, ", main document url: %s");
          }

          goto LABEL_44;
        }

  if (v16) {
    free(v16);
  }
  uint64_t v4 = 0LL;
  uint64_t v5 = 0LL;
LABEL_4:

  return v5;
}

                    goto LABEL_105;
                  }

                  if (!v147)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    os_log_type_t v40 = (os_log_s *)(id)gLogObj;
                    os_log_type_t v71 = type;
                    if (os_log_type_enabled(v40, type))
                    {
                      *(_DWORD *)buf = 136446210;
                      v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                      _os_log_impl( &dword_181A5C000,  v40,  v71,  "%{public}s nw_tls_create_options failed, backtrace limit exceeded",  buf,  0xCu);
                    }

                    goto LABEL_39;
                  }

                  BOOL v50 = (char *)__nw_create_backtrace_string();
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  os_log_type_t v51 = (os_log_s *)(id)gLogObj;
                  BOOL v52 = type;
                  os_log_type_t v53 = os_log_type_enabled(v51, type);
                  if (v50)
                  {
                    if (v53)
                    {
                      *(_DWORD *)buf = 136446466;
                      v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                      v151 = 2082;
                      v152 = v50;
                      _os_log_impl( &dword_181A5C000,  v51,  v52,  "%{public}s nw_tls_create_options failed, dumping backtrace:%{public}s",  buf,  0x16u);
                    }

                    free(v50);
                    if (!v39) {
                      goto LABEL_107;
                    }
                    goto LABEL_106;
                  }

                  if (v53)
                  {
                    *(_DWORD *)buf = 136446210;
                    v150 = "nw_parameters_create_quic_stream_with_tls_fallback";
                    _os_log_impl( &dword_181A5C000,  v51,  v52,  "%{public}s nw_tls_create_options failed, no backtrace",  buf,  0xCu);
                  }
                }

    goto LABEL_40;
  }

  if (v4)
  {
    unsigned int v6 = v3[22];
    if (!v6)
    {
      unsigned int v7 = nw_array_create();
      id v8 = (void *)v3[22];
      v3[22] = v7;

      unsigned int v6 = v3[22];
    }

    nw_array_append(v6, v5);
    goto LABEL_6;
  }

  __nwlog_obj();
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v26 = "nw_parameters_add_custom_proxy_config";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v23 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_parameters_add_custom_proxy_config";
      _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null config", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (!v23)
  {
    __nwlog_obj();
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_parameters_add_custom_proxy_config";
      _os_log_impl( &dword_181A5C000,  v11,  v22,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  os_log_type_t v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  BOOL v19 = type;
  uint64_t v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_parameters_add_custom_proxy_config";
      _os_log_impl(&dword_181A5C000, v11, v19, "%{public}s called with null config, no backtrace", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v26 = "nw_parameters_add_custom_proxy_config";
    os_log_type_t v27 = 2082;
    char v28 = v18;
    _os_log_impl( &dword_181A5C000,  v11,  v19,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_41;
  }
LABEL_6:
}

    if (v24) {
      free(v24);
    }
    goto LABEL_20;
  }

  uint64_t v9 = *(void *)(v5[13] + 176LL);
  if (v9)
  {
LABEL_6:
    uint64_t v11 = *(void **)(v9 + 56);
    *(void *)(v9 + 56) = 0LL;

    uint64_t v12 = *(void *)(v5[13] + 176LL);
    uint64_t v13 = *(void **)(v12 + 64);
    *(void *)(v12 + 64) = 0LL;

    if (v6)
    {
      Class Class = object_getClass((id)v6);
      if (v8)
      {
        os_log_type_t v15 = (objc_class *)MEMORY[0x1895F9220];
        if (Class == (Class)MEMORY[0x1895F9220] && object_getClass(v8) == v15)
        {
          count = xpc_array_get_count((xpc_object_t)v6);
          if (count == xpc_array_get_count(v8))
          {
            if (object_getClass((id)v6) == v15
              && (*(void *)applier = MEMORY[0x1895F87A8],
                  *(void *)&applier[8] = 0x40000000LL,
                  *(void *)&applier[16] = __nw_xpc_retain_array_with_validated_types_block_invoke,
                  BOOL v36 = (uint64_t)&__block_descriptor_tmp_86584,
                  os_log_type_t v37 = MEMORY[0x1895F92E8],
                  xpc_array_apply((xpc_object_t)v6, applier)))
            {
              uint64_t v17 = xpc_retain((xpc_object_t)v6);
            }

            else
            {
              uint64_t v17 = 0LL;
            }

            os_log_type_t v18 = *(void *)(v5[13] + 176LL);
            BOOL v19 = *(void **)(v18 + 56);
            *(void *)(v18 + 56) = v17;

            if (object_getClass(v8) == v15
              && (*(void *)applier = MEMORY[0x1895F87A8],
                  *(void *)&applier[8] = 0x40000000LL,
                  *(void *)&applier[16] = __nw_xpc_retain_array_with_validated_types_block_invoke,
                  BOOL v36 = (uint64_t)&__block_descriptor_tmp_86584,
                  os_log_type_t v37 = MEMORY[0x1895F92E8],
                  xpc_array_apply(v8, applier)))
            {
              uint64_t v20 = xpc_retain(v8);
            }

            else
            {
              uint64_t v20 = 0LL;
            }

            os_log_type_t v21 = *(void *)(v5[13] + 176LL);
            BOOL v22 = *(void **)(v21 + 64);
            *(void *)(v21 + 64) = v20;
          }
        }
      }
    }

    goto LABEL_20;
  }

  if (!(v6 | v7))
  {
LABEL_20:

    return;
  }

  os_log_type_t v10 = calloc(1uLL, 0x90uLL);
  if (v10)
  {
LABEL_5:
    *(void *)(v5[13] + 176LL) = v10;
    uint64_t v9 = *(void *)(v5[13] + 176LL);
    goto LABEL_6;
  }

  __nwlog_obj();
  BOOL v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(void *)&applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(void *)&applier[14] = 1LL;
  *(_WORD *)&applier[22] = 2048;
  BOOL v36 = 144LL;
  int v31 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v31))
  {
    free(v31);
    goto LABEL_5;
  }

  __break(1u);
}

    if (v24) {
      free(v24);
    }
    goto LABEL_20;
  }

  uint64_t v9 = *(void *)(v5[13] + 176LL);
  if (v9)
  {
LABEL_6:
    uint64_t v11 = *(void **)(v9 + 80);
    *(void *)(v9 + 80) = 0LL;

    uint64_t v12 = *(void *)(v5[13] + 176LL);
    uint64_t v13 = *(void **)(v12 + 88);
    *(void *)(v12 + 88) = 0LL;

    if (v6)
    {
      Class Class = object_getClass((id)v6);
      if (v8)
      {
        os_log_type_t v15 = (objc_class *)MEMORY[0x1895F9220];
        if (Class == (Class)MEMORY[0x1895F9220] && object_getClass(v8) == v15)
        {
          count = xpc_array_get_count((xpc_object_t)v6);
          if (count == xpc_array_get_count(v8))
          {
            if (object_getClass((id)v6) == v15
              && (*(void *)applier = MEMORY[0x1895F87A8],
                  *(void *)&applier[8] = 0x40000000LL,
                  *(void *)&applier[16] = __nw_xpc_retain_array_with_validated_types_block_invoke,
                  BOOL v36 = (uint64_t)&__block_descriptor_tmp_86584,
                  os_log_type_t v37 = MEMORY[0x1895F92E8],
                  xpc_array_apply((xpc_object_t)v6, applier)))
            {
              uint64_t v17 = xpc_retain((xpc_object_t)v6);
            }

            else
            {
              uint64_t v17 = 0LL;
            }

            os_log_type_t v18 = *(void *)(v5[13] + 176LL);
            BOOL v19 = *(void **)(v18 + 80);
            *(void *)(v18 + 80) = v17;

            if (object_getClass(v8) == v15
              && (*(void *)applier = MEMORY[0x1895F87A8],
                  *(void *)&applier[8] = 0x40000000LL,
                  *(void *)&applier[16] = __nw_xpc_retain_array_with_validated_types_block_invoke,
                  BOOL v36 = (uint64_t)&__block_descriptor_tmp_86584,
                  os_log_type_t v37 = MEMORY[0x1895F92E8],
                  xpc_array_apply(v8, applier)))
            {
              uint64_t v20 = xpc_retain(v8);
            }

            else
            {
              uint64_t v20 = 0LL;
            }

            os_log_type_t v21 = *(void *)(v5[13] + 176LL);
            BOOL v22 = *(void **)(v21 + 88);
            *(void *)(v21 + 88) = v20;
          }
        }
      }
    }

    goto LABEL_20;
  }

  if (!(v6 | v7))
  {
LABEL_20:

    return;
  }

  os_log_type_t v10 = calloc(1uLL, 0x90uLL);
  if (v10)
  {
LABEL_5:
    *(void *)(v5[13] + 176LL) = v10;
    uint64_t v9 = *(void *)(v5[13] + 176LL);
    goto LABEL_6;
  }

  __nwlog_obj();
  BOOL v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(void *)&applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(void *)&applier[14] = 1LL;
  *(_WORD *)&applier[22] = 2048;
  BOOL v36 = 144LL;
  int v31 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v31))
  {
    free(v31);
    goto LABEL_5;
  }

  __break(1u);
}

    if (v24) {
      free(v24);
    }
    goto LABEL_20;
  }

  uint64_t v9 = *(void *)(v5[13] + 176LL);
  if (v9)
  {
LABEL_6:
    uint64_t v11 = *(void **)(v9 + 104);
    *(void *)(v9 + 104) = 0LL;

    uint64_t v12 = *(void *)(v5[13] + 176LL);
    uint64_t v13 = *(void **)(v12 + 112);
    *(void *)(v12 + 112) = 0LL;

    if (v6)
    {
      Class Class = object_getClass((id)v6);
      if (v8)
      {
        os_log_type_t v15 = (objc_class *)MEMORY[0x1895F9220];
        if (Class == (Class)MEMORY[0x1895F9220] && object_getClass(v8) == v15)
        {
          count = xpc_array_get_count((xpc_object_t)v6);
          if (count == xpc_array_get_count(v8))
          {
            if (object_getClass((id)v6) == v15
              && (*(void *)applier = MEMORY[0x1895F87A8],
                  *(void *)&applier[8] = 0x40000000LL,
                  *(void *)&applier[16] = __nw_xpc_retain_array_with_validated_types_block_invoke,
                  BOOL v36 = (uint64_t)&__block_descriptor_tmp_86584,
                  os_log_type_t v37 = MEMORY[0x1895F92E8],
                  xpc_array_apply((xpc_object_t)v6, applier)))
            {
              uint64_t v17 = xpc_retain((xpc_object_t)v6);
            }

            else
            {
              uint64_t v17 = 0LL;
            }

            os_log_type_t v18 = *(void *)(v5[13] + 176LL);
            BOOL v19 = *(void **)(v18 + 104);
            *(void *)(v18 + 104) = v17;

            if (object_getClass(v8) == v15
              && (*(void *)applier = MEMORY[0x1895F87A8],
                  *(void *)&applier[8] = 0x40000000LL,
                  *(void *)&applier[16] = __nw_xpc_retain_array_with_validated_types_block_invoke,
                  BOOL v36 = (uint64_t)&__block_descriptor_tmp_86584,
                  os_log_type_t v37 = MEMORY[0x1895F92E8],
                  xpc_array_apply(v8, applier)))
            {
              uint64_t v20 = xpc_retain(v8);
            }

            else
            {
              uint64_t v20 = 0LL;
            }

            os_log_type_t v21 = *(void *)(v5[13] + 176LL);
            BOOL v22 = *(void **)(v21 + 112);
            *(void *)(v21 + 112) = v20;
          }
        }
      }
    }

    goto LABEL_20;
  }

  if (!(v6 | v7))
  {
LABEL_20:

    return;
  }

  os_log_type_t v10 = calloc(1uLL, 0x90uLL);
  if (v10)
  {
LABEL_5:
    *(void *)(v5[13] + 176LL) = v10;
    uint64_t v9 = *(void *)(v5[13] + 176LL);
    goto LABEL_6;
  }

  __nwlog_obj();
  BOOL v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446722;
  *(void *)&applier[4] = "strict_calloc";
  *(_WORD *)&applier[12] = 2048;
  *(void *)&applier[14] = 1LL;
  *(_WORD *)&applier[22] = 2048;
  BOOL v36 = 144LL;
  int v31 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v31))
  {
    free(v31);
    goto LABEL_5;
  }

  __break(1u);
}

    goto LABEL_40;
  }

  if (v4)
  {
    *(void *)buf = 0LL;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    BOOL v30 = 0;
    unsigned int v6 = MEMORY[0x1895F87A8];
    v24[0] = MEMORY[0x1895F87A8];
    v24[1] = 3221225472LL;
    v24[2] = __nw_connection_batch_block_invoke;
    v24[3] = &unk_189BC9210;
    os_log_type_t v26 = buf;
    unsigned int v7 = v3;
    BOOL v25 = v7;
    os_unfair_lock_lock(v3 + 34);
    __nw_connection_batch_block_invoke((uint64_t)v24);
    os_unfair_lock_unlock(v3 + 34);
    v5[2](v5);
    if (!*(_BYTE *)(*(void *)&buf[8] + 24LL))
    {
      v22[0] = v6;
      v22[1] = 3221225472LL;
      v22[2] = __nw_connection_batch_block_invoke_2;
      v22[3] = &unk_189BC93A0;
      uint64_t v23 = v7;
      nw_connection_async_if_needed(v23, v22);
    }

    _Block_object_dispose(buf, 8);
    goto LABEL_6;
  }

  __nwlog_obj();
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_connection_batch";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v27 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_batch";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null batch_block", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (!v27)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_batch";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s called with null batch_block, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  uint64_t v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_connection_batch";
      _os_log_impl(&dword_181A5C000, v10, v18, "%{public}s called with null batch_block, no backtrace", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_connection_batch";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s called with null batch_block, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

  if (v12) {
    free(v12);
  }
  uint64_t v9 = 0LL;
LABEL_6:

  return v9;
}

LABEL_40:
    if (!v17) {
      return;
    }
    goto LABEL_41;
  }

  if (!v37)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    os_log_type_t v18 = (os_log_s *)(id)gconnectionLogObj;
    BOOL v30 = type;
    if (os_log_type_enabled(v18, type))
    {
      int v31 = *(_DWORD *)(*(void *)(a1 + 32) + 448LL);
      *(_DWORD *)buf = 136446466;
      os_log_type_t v40 = "nw_connection_start_tls_block_invoke";
      os_log_type_t v41 = 1024;
      *(_DWORD *)os_log_type_t v42 = v31;
      _os_log_impl( &dword_181A5C000,  v18,  v30,  "%{public}s [C%u] No parent endpoint handler found, backtrace limit exceeded",  buf,  0x12u);
    }

    goto LABEL_39;
  }

  BOOL v22 = (char *)__nw_create_backtrace_string();
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
  }
  os_log_type_t v18 = (os_log_s *)(id)gconnectionLogObj;
  uint64_t v23 = type;
  os_log_type_t v24 = os_log_type_enabled(v18, type);
  if (!v22)
  {
    if (v24)
    {
      os_log_type_t v35 = *(_DWORD *)(*(void *)(a1 + 32) + 448LL);
      *(_DWORD *)buf = 136446466;
      os_log_type_t v40 = "nw_connection_start_tls_block_invoke";
      os_log_type_t v41 = 1024;
      *(_DWORD *)os_log_type_t v42 = v35;
      _os_log_impl( &dword_181A5C000,  v18,  v23,  "%{public}s [C%u] No parent endpoint handler found, no backtrace",  buf,  0x12u);
    }

    goto LABEL_39;
  }

  if (v24)
  {
    BOOL v25 = *(_DWORD *)(*(void *)(a1 + 32) + 448LL);
    *(_DWORD *)buf = 136446722;
    os_log_type_t v40 = "nw_connection_start_tls_block_invoke";
    os_log_type_t v41 = 1024;
    *(_DWORD *)os_log_type_t v42 = v25;
    v42[2] = 2082;
    *(void *)&v42[3] = v22;
    _os_log_impl( &dword_181A5C000,  v18,  v23,  "%{public}s [C%u] No parent endpoint handler found, dumping backtrace:%{public}s",  buf,  0x1Cu);
  }

  free(v22);
  if (v17)
  {
LABEL_41:
    os_log_type_t v21 = (char *)v17;
LABEL_76:
    free(v21);
  }

    _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
    goto LABEL_40;
  }

  handle = a1->handle;
  if (handle)
  {
    handle[89] = 1;
    default_input_handler = a1->default_input_handler;
    if (!default_input_handler
      || (callbacks = default_input_handler->callbacks) == 0LL
      || (input_available = (void (*)(void))callbacks->input_available) == 0LL
      || (input_available(), handle[89]))
    {
      unsigned int v6 = *((void *)handle + 10);
      if (v6)
      {
        if (*(_DWORD *)(v6 + 40))
        {
          v15[0] = MEMORY[0x1895F87A8];
          v15[1] = 0x40000000LL;
          v15[2] = ___ZL33nw_protocol_demux_input_availableP11nw_protocolS0__block_invoke;
          v15[3] = &__block_descriptor_tmp_32_25776;
          v15[4] = handle;
          nw_hash_table_apply((char *)v6, (uint64_t)v15);
        }
      }
    }

    handle[89] = 0;
    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v19 = "nw_protocol_demux_input_available";
  unsigned int v7 = (char *)_os_log_send_and_compose_impl();
  uint64_t v17 = OS_LOG_TYPE_ERROR;
  uint64_t v16 = 0;
  if (v17 == OS_LOG_TYPE_FAULT)
  {
    id v8 = (os_log_s *)__nwlog_obj();
    uint64_t v9 = v17;
    if (!os_log_type_enabled(v8, v17)) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v19 = "nw_protocol_demux_input_available";
    os_log_type_t v10 = "%{public}s called with null demux";
    goto LABEL_39;
  }

  if (!v16)
  {
    id v8 = (os_log_s *)__nwlog_obj();
    uint64_t v9 = v17;
    if (!os_log_type_enabled(v8, v17)) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v19 = "nw_protocol_demux_input_available";
    os_log_type_t v10 = "%{public}s called with null demux, backtrace limit exceeded";
    goto LABEL_39;
  }

  uint64_t v13 = (char *)__nw_create_backtrace_string();
  id v8 = (os_log_s *)__nwlog_obj();
  uint64_t v9 = v17;
  os_log_type_t v14 = os_log_type_enabled(v8, v17);
  if (!v13)
  {
    if (!v14) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v19 = "nw_protocol_demux_input_available";
    os_log_type_t v10 = "%{public}s called with null demux, no backtrace";
    goto LABEL_39;
  }

  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v19 = "nw_protocol_demux_input_available";
    uint64_t v20 = 2082;
    os_log_type_t v21 = v13;
    _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null demux, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v13);
  if (v7) {
    goto LABEL_41;
  }
}

  if (v13) {
    free(v13);
  }
  os_log_type_t v10 = 0LL;
LABEL_10:

  return v10;
}

  if (v14) {
    free(v14);
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  int v29 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  os_log_type_t v40 = "nw_authentication_credential_get_password";
  BOOL v30 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v37 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v31 = (os_log_s *)(id)gLogObj;
    __int16 v32 = type;
    if (os_log_type_enabled(v31, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v40 = "nw_authentication_credential_get_password";
      _os_log_impl(&dword_181A5C000, v31, v32, "%{public}s called with null credential", buf, 0xCu);
    }
  }

  else if (v37)
  {
    uint64_t v33 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v31 = (os_log_s *)(id)gLogObj;
    uint64_t v34 = type;
    os_log_type_t v35 = os_log_type_enabled(v31, type);
    if (v33)
    {
      if (v35)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v40 = "nw_authentication_credential_get_password";
        os_log_type_t v41 = 2082;
        os_log_type_t v42 = v33;
        _os_log_impl( &dword_181A5C000,  v31,  v34,  "%{public}s called with null credential, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v33);
      goto LABEL_63;
    }

    if (v35)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v40 = "nw_authentication_credential_get_password";
      _os_log_impl(&dword_181A5C000, v31, v34, "%{public}s called with null credential, no backtrace", buf, 0xCu);
    }
  }

  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v31 = (os_log_s *)(id)gLogObj;
    BOOL v36 = type;
    if (os_log_type_enabled(v31, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v40 = "nw_authentication_credential_get_password";
      _os_log_impl( &dword_181A5C000,  v31,  v36,  "%{public}s called with null credential, backtrace limit exceeded",  buf,  0xCu);
    }
  }

LABEL_63:
  if (v30) {
    free(v30);
  }
  uint64_t v3 = 0LL;
  uint64_t v4 = 0LL;
LABEL_3:

  uint64_t v5 = (void *)[objc_alloc(NSString) initWithUTF8String:v3];
  if (v4) {
    uint64_t v4 = (void *)[objc_alloc(NSString) initWithUTF8String:v4];
  }
  unsigned int v6 = v2;
  unsigned int v7 = v6;
  if (v2)
  {
    id v8 = v6[3];

    uint64_t v9 = (v8 - 1);
    else {
      os_log_type_t v10 = 0LL;
    }
    goto LABEL_9;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v17 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  os_log_type_t v40 = "nw_authentication_credential_get_persistence";
  os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v37 = 0;
  if (__nwlog_fault(v18, &type, &v37))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v19 = (os_log_s *)(id)gLogObj;
      uint64_t v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v40 = "nw_authentication_credential_get_persistence";
        _os_log_impl(&dword_181A5C000, v19, v20, "%{public}s called with null credential", buf, 0xCu);
      }
    }

    else if (v37)
    {
      os_log_type_t v24 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v19 = (os_log_s *)(id)gLogObj;
      BOOL v25 = type;
      os_log_type_t v26 = os_log_type_enabled(v19, type);
      if (v24)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v40 = "nw_authentication_credential_get_persistence";
          os_log_type_t v41 = 2082;
          os_log_type_t v42 = v24;
          _os_log_impl( &dword_181A5C000,  v19,  v25,  "%{public}s called with null credential, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v24);
        goto LABEL_57;
      }

      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v40 = "nw_authentication_credential_get_persistence";
        _os_log_impl(&dword_181A5C000, v19, v25, "%{public}s called with null credential, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v19 = (os_log_s *)(id)gLogObj;
      char v28 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v40 = "nw_authentication_credential_get_persistence";
        _os_log_impl( &dword_181A5C000,  v19,  v28,  "%{public}s called with null credential, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

    char v28 = "tcp";
    goto LABEL_40;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v23 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_copy_synthesized_url";
  os_log_type_t v24 = (char *)_os_log_send_and_compose_impl();

  v52[0] = 16;
  os_log_type_t v51 = 0;
  if (__nwlog_fault(v24, v52, &v51))
  {
    if (v52[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v25 = (os_log_s *)(id)gLogObj;
      os_log_type_t v26 = v52[0];
      if (os_log_type_enabled(v25, (os_log_type_t)v52[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_copy_synthesized_url";
        _os_log_impl(&dword_181A5C000, v25, v26, "%{public}s CFStringCreateMutable failed", buf, 0xCu);
      }
    }

    else if (v51)
    {
      __int16 v38 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v25 = (os_log_s *)(id)gLogObj;
      os_log_type_t v39 = v52[0];
      os_log_type_t v40 = os_log_type_enabled(v25, (os_log_type_t)v52[0]);
      if (v38)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_copy_synthesized_url";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v38;
          _os_log_impl( &dword_181A5C000,  v25,  v39,  "%{public}s CFStringCreateMutable failed, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v38);
        if (!v24) {
          goto LABEL_6;
        }
        goto LABEL_69;
      }

      if (v40)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_copy_synthesized_url";
        _os_log_impl(&dword_181A5C000, v25, v39, "%{public}s CFStringCreateMutable failed, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v25 = (os_log_s *)(id)gLogObj;
      char v43 = v52[0];
      if (os_log_type_enabled(v25, (os_log_type_t)v52[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_endpoint_proxy_copy_synthesized_url";
        _os_log_impl( &dword_181A5C000,  v25,  v43,  "%{public}s CFStringCreateMutable failed, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_67;
  }

    if (v15) {
      free(v15);
    }
    goto LABEL_7;
  }

  return 0LL;
}

    free(backtrace_string);
    goto LABEL_49;
  }

  if ((unint64_t)a3 <= 0x4B)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v26 = "nw_masque_deserialize_options";
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_masque_deserialize_options";
        uint64_t v16 = "%{public}s called with null (serialized_length >= sizeof(struct nw_masque_serialized_options))";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    if (!v23)
    {
      os_log_type_t v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_masque_deserialize_options";
        uint64_t v16 = "%{public}s called with null (serialized_length >= sizeof(struct nw_masque_serialized_options)), backtrace limit exceeded";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v14 = (os_log_s *)__nwlog_obj();
    os_log_type_t v15 = type;
    BOOL v22 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v26 = "nw_masque_deserialize_options";
        uint64_t v16 = "%{public}s called with null (serialized_length >= sizeof(struct nw_masque_serialized_options)), no backtrace";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v26 = "nw_masque_deserialize_options";
      os_log_type_t v27 = 2082;
      char v28 = (uint64_t)backtrace_string;
      os_log_type_t v21 = "%{public}s called with null (serialized_length >= sizeof(struct nw_masque_serialized_options)), dumping back"
            "trace:%{public}s";
      goto LABEL_38;
    }

    goto LABEL_39;
  }

  uint64_t v5 = calloc(1uLL, 0x28uLL);
  if (v5)
  {
LABEL_4:
    *((void *)v5 + 3) = *(void *)a2;
    *((_WORD *)v5 + 16) = *((_WORD *)a2 + 37);
    if (*((_WORD *)a2 + 4) && a2[10]) {
      *(void *)uint64_t v5 = nw_endpoint_create_host_with_numeric_port(a2 + 10, *((unsigned __int16 *)a2 + 4));
    }
    if (a3 == 76) {
      return (BOOL)v5;
    }
    unsigned int v6 = a2 + 76;
    if (a2[a3 - 1]) {
      return (BOOL)v5;
    }
    if (*((void *)v5 + 1))
    {
      if (*((void *)v5 + 2)) {
        goto LABEL_11;
      }
    }

    else
    {
      *((void *)v5 + 1) = xpc_array_create(0LL, 0LL);
      if (*((void *)v5 + 2))
      {
LABEL_11:
        if (a3 < 77) {
          return (BOOL)v5;
        }
        goto LABEL_15;
      }
    }

    *((void *)v5 + 2) = xpc_array_create(0LL, 0LL);
    if (a3 < 77) {
      return (BOOL)v5;
    }
LABEL_15:
    unsigned int v7 = &a2[a3];
    do
    {
      id v8 = strlen(v6);
      if (&v6[v8 + 1] >= v7) {
        break;
      }
      uint64_t v9 = &v6[v8 + 1];
      os_log_type_t v10 = strlen(v9);
      if (&v9[v10 + 1] > v7) {
        break;
      }
      uint64_t v11 = (unint64_t)&v9[v10 + 1];
      xpc_array_set_string(*((xpc_object_t *)v5 + 1), 0xFFFFFFFFFFFFFFFFLL, v6);
      xpc_array_set_string(*((xpc_object_t *)v5 + 2), 0xFFFFFFFFFFFFFFFFLL, v9);
      unsigned int v6 = (const char *)v11;
    }

    while (v11 < (unint64_t)v7);
    return (BOOL)v5;
  }

  uint64_t v17 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  os_log_type_t v26 = "strict_calloc";
  os_log_type_t v27 = 2048;
  char v28 = 1LL;
  int v29 = 2048;
  BOOL v30 = 40LL;
  os_log_type_t v18 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v18);
  if (!result)
  {
    free(v18);
    goto LABEL_4;
  }

  __break(1u);
  return result;
}

  if (!*(_BYTE *)(*(void *)&address[8] + 24LL))
  {
    int v31 = *(void *)(a1 + 56);
    if (!v31 || (*(_BYTE *)(v31 + 529) & 1) == 0)
    {
      if (__nwlog_privacy_proxy_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_privacy_proxy_log::onceToken, &__block_literal_global_45_44354);
      }
      __int16 v32 = (os_log_s *)gprivacy_proxyLogObj;
      if (os_log_type_enabled((os_log_t)gprivacy_proxyLogObj, OS_LOG_TYPE_ERROR))
      {
        uint64_t v33 = *(void *)(a1 + 56);
        uint64_t v34 = v33 == 0;
        if (v33) {
          os_log_type_t v35 = (const char *)(v33 + 531);
        }
        else {
          os_log_type_t v35 = "";
        }
        BOOL v36 = " ";
        if (v34) {
          BOOL v36 = "";
        }
        *(_DWORD *)buf = 136446466;
        *(void *)os_log_type_t v87 = v35;
        *(_WORD *)&v87[8] = 2080;
        *(void *)&v87[10] = v36;
        _os_log_impl( &dword_181A5C000,  v32,  OS_LOG_TYPE_ERROR,  "%{public}s%sFailed to find a flow to accept inbound packet, dropping",  buf,  0x16u);
      }
    }

    nw_frame_finalize(a2);
  }

  if (v18) {
    os_release(v18);
  }
  _Block_object_dispose(address, 8);
  return 1LL;
}

            *((_BYTE *)v103 + 24) = 0;
            goto LABEL_40;
          }

          char v28 = nw_quic_copy_sec_protocol_options(v27);
        }

        int v29 = v28;
        BOOL v30 = v107;
        __int16 v32 = (char *)(v107 + 48);
        int v31 = *(_BYTE *)(v107 + 48);
        if ((v31 & 1) != 0)
        {
          uint64_t v33 = *(void **)(v107 + 40);
          if (v33)
          {
            os_release(v33);
            int v31 = *v32;
          }
        }

        *(void *)(v30 + 40) = v29;
        *__int16 v32 = v31 | 1;
        goto LABEL_39;
      }

      if (v106[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v66 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v67 = v106[0];
        if (os_log_type_enabled(v66, v106[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_security_options_copy_hsts_storage";
          _os_log_impl(&dword_181A5C000, v66, v67, "%{public}s protocol options are not http security", buf, 0xCu);
        }
      }

      else if (LOBYTE(iterate_block[0]))
      {
        unint64_t v74 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v66 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v98 = v106[0];
        char v75 = os_log_type_enabled(v66, v106[0]);
        if (v74)
        {
          if (v75)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http_security_options_copy_hsts_storage";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v74;
            _os_log_impl( &dword_181A5C000,  v66,  v98,  "%{public}s protocol options are not http security, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v74);
          goto LABEL_187;
        }

        if (v75)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_security_options_copy_hsts_storage";
          _os_log_impl( &dword_181A5C000,  v66,  v98,  "%{public}s protocol options are not http security, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v66 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v83 = v106[0];
        if (os_log_type_enabled(v66, v106[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_security_options_copy_hsts_storage";
          _os_log_impl( &dword_181A5C000,  v66,  v83,  "%{public}s protocol options are not http security, backtrace limit exceeded",  buf,  0xCu);
        }
      }

LABEL_187:
      id v65 = (char *)v99;
      goto LABEL_188;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_security_connect";
    os_log_type_t v59 = (char *)_os_log_send_and_compose_impl();
    v106[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(iterate_block[0]) = 0;
    if (__nwlog_fault(v59, v106, iterate_block))
    {
      if (v106[0] == OS_LOG_TYPE_FAULT)
      {
        __int16 v60 = (os_log_s *)__nwlog_obj();
        char v61 = v106[0];
        if (os_log_type_enabled(v60, v106[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_security_connect";
          __int16 v62 = "%{public}s called with null protocol_options";
LABEL_180:
          _os_log_impl(&dword_181A5C000, v60, v61, v62, buf, 0xCu);
        }
      }

      else if (LOBYTE(iterate_block[0]))
      {
        v72 = (char *)__nw_create_backtrace_string();
        __int16 v60 = (os_log_s *)__nwlog_obj();
        char v61 = v106[0];
        __uint64_t v73 = os_log_type_enabled(v60, v106[0]);
        if (v72)
        {
          if (v73)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http_security_connect";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v72;
            _os_log_impl( &dword_181A5C000,  v60,  v61,  "%{public}s called with null protocol_options, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v72);
          goto LABEL_181;
        }

        if (v73)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_security_connect";
          __int16 v62 = "%{public}s called with null protocol_options, no backtrace";
          goto LABEL_180;
        }
      }

      else
      {
        __int16 v60 = (os_log_s *)__nwlog_obj();
        char v61 = v106[0];
        if (os_log_type_enabled(v60, v106[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_security_connect";
          __int16 v62 = "%{public}s called with null protocol_options, backtrace limit exceeded";
          goto LABEL_180;
        }
      }
    }

        if (xpc_array_get_count(v51))
        {
          objc_storeStrong(v3 + 11, v5);
          os_log_type_t v53 = v3[8];
          else {
            os_log_type_t v55 = 0LL;
          }
          v77 = v42[12];
          v42[12] = v55;

          objc_storeStrong(v3 + 13, v46);
          if (a2) {
            unint64_t v78 = 2;
          }
          else {
            unint64_t v78 = 0;
          }
          *((_BYTE *)v3 + 268) = *((_BYTE *)v3 + 268) & 0xFD | v78;
          if ((nw_endpoint_handler_get_logging_disabled(v42) & 1) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            char v79 = (os_log_s *)(id)gconnectionLogObj;
            if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
            {
              v80 = nw_endpoint_handler_get_id_string(v42);
              v81 = nw_endpoint_handler_dry_run_string(v42);
              v82 = nw_endpoint_handler_copy_endpoint(v42);
              os_log_type_t v83 = nw_endpoint_get_logging_description(v82);
              v84 = nw_endpoint_handler_state_string(v42);
              v85 = nw_endpoint_handler_mode_string(v42);
              v86 = nw_endpoint_handler_copy_current_path(v42);
              count = xpc_array_get_count(xarray);
              *(_DWORD *)buf = 136448002;
              v114 = "nw_endpoint_handler_trigger_agents";
              uint64_t v115 = 2082;
              v116 = (void *)v80;
              v117 = 2082;
              v118 = v81;
              v119 = 2082;
              v120 = v83;
              v121 = 2082;
              v122 = v84;
              v123 = 2082;
              v124 = v85;
              v125 = 2114;
              v126 = v86;
              v127 = 2048;
              v128[0] = count;
              _os_log_impl( &dword_181A5C000,  v79,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Triggered %zu agents",  buf,  0x52u);
            }
          }

          goto LABEL_67;
        }

        BOOL v52 = 0;
        goto LABEL_84;
      }

      __nwlog_obj();
      BOOL v101 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v114 = "nw_association_trigger_agents";
      v108 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      __int16 v111 = 0;
      if (__nwlog_fault(v108, &type, &v111))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          os_log_type_t v102 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v103 = type;
          if (os_log_type_enabled(v102, type))
          {
            *(_DWORD *)buf = 136446210;
            v114 = "nw_association_trigger_agents";
            _os_log_impl(&dword_181A5C000, v102, v103, "%{public}s called with null association", buf, 0xCu);
          }
        }

        else if (v111)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v102 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          char v105 = type;
          v106 = os_log_type_enabled(v102, type);
          if (backtrace_string)
          {
            if (v106)
            {
              *(_DWORD *)buf = 136446466;
              v114 = "nw_association_trigger_agents";
              uint64_t v115 = 2082;
              v116 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v102,  v105,  "%{public}s called with null association, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(backtrace_string);
            goto LABEL_119;
          }

          if (v106)
          {
            *(_DWORD *)buf = 136446210;
            v114 = "nw_association_trigger_agents";
            _os_log_impl( &dword_181A5C000,  v102,  v105,  "%{public}s called with null association, no backtrace",  buf,  0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          os_log_type_t v102 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v107 = type;
          if (os_log_type_enabled(v102, type))
          {
            *(_DWORD *)buf = 136446210;
            v114 = "nw_association_trigger_agents";
            _os_log_impl( &dword_181A5C000,  v102,  v107,  "%{public}s called with null association, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

            free(v33);
            goto LABEL_40;
          }

          __nwlog_obj();
          BOOL v52 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          char v75 = "nw_pac_resolver_create_with_script";
          char v43 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          v72 = 0;
          if (__nwlog_fault(v43, &type, &v72))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              os_log_type_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v53 = type;
              if (os_log_type_enabled(v44, type))
              {
                *(_DWORD *)buf = 136446210;
                char v75 = "nw_pac_resolver_create_with_script";
                _os_log_impl(&dword_181A5C000, v44, v53, "%{public}s called with null logging_id_str", buf, 0xCu);
              }

    _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0xCu);
    goto LABEL_40;
  }

  handle = a1->handle;
  if (handle)
  {
    if ((*((_BYTE *)handle + 276) & 0x10) == 0)
    {
      if (gLogDatapath)
      {
        id v8 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v9 = handle[11];
          if (v9) {
            os_log_type_t v10 = *(_DWORD *)(v9 + 460);
          }
          else {
            os_log_type_t v10 = -1;
          }
          os_log_type_t v15 = handle[8];
          *(_DWORD *)buf = 136447234;
          BOOL v19 = "nw_protocol_webtransport_stream_disconnected";
          uint64_t v20 = 2082;
          os_log_type_t v21 = (char *)(handle + 24);
          BOOL v22 = 2080;
          uint64_t v23 = " ";
          os_log_type_t v24 = 1024;
          BOOL v25 = v10;
          os_log_type_t v26 = 2048;
          os_log_type_t v27 = v15;
          _os_log_impl(&dword_181A5C000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u:s%lld> called", buf, 0x30u);
        }
      }
    }

    nw_protocol_disconnected(a1->default_input_handler->flow_id, (uint64_t)a1);
    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v19 = "nw_protocol_webtransport_stream_disconnected";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v16 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v5 = (os_log_s *)__nwlog_obj();
    unsigned int v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v19 = "nw_protocol_webtransport_stream_disconnected";
    unsigned int v7 = "%{public}s called with null webtransport_stream";
    goto LABEL_39;
  }

  if (!v16)
  {
    uint64_t v5 = (os_log_s *)__nwlog_obj();
    unsigned int v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v19 = "nw_protocol_webtransport_stream_disconnected";
    unsigned int v7 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
    goto LABEL_39;
  }

  uint64_t v13 = (char *)__nw_create_backtrace_string();
  uint64_t v5 = (os_log_s *)__nwlog_obj();
  unsigned int v6 = type;
  os_log_type_t v14 = os_log_type_enabled(v5, type);
  if (!v13)
  {
    if (!v14) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v19 = "nw_protocol_webtransport_stream_disconnected";
    unsigned int v7 = "%{public}s called with null webtransport_stream, no backtrace";
    goto LABEL_39;
  }

  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v19 = "nw_protocol_webtransport_stream_disconnected";
    uint64_t v20 = 2082;
    os_log_type_t v21 = v13;
    _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v13);
  if (v4) {
    goto LABEL_41;
  }
}

    _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
    goto LABEL_40;
  }

  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(v4 + 276) & 0x10) == 0)
    {
      if (gLogDatapath)
      {
        uint64_t v11 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v12 = *(void *)(v4 + 88);
          if (v12) {
            uint64_t v13 = *(_DWORD *)(v12 + 460);
          }
          else {
            uint64_t v13 = -1;
          }
          os_log_type_t v18 = *(void *)(v4 + 64);
          *(_DWORD *)buf = 136447234;
          BOOL v22 = "nw_protocol_webtransport_stream_notify";
          uint64_t v23 = 2082;
          os_log_type_t v24 = (char *)(v4 + 192);
          BOOL v25 = 2080;
          os_log_type_t v26 = " ";
          os_log_type_t v27 = 1024;
          char v28 = v13;
          int v29 = 2048;
          BOOL v30 = v18;
          _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u:s%lld> called",  buf,  0x30u);
        }
      }
    }

    nw_protocol_common_notify(a1, a2, a3);
    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v22 = "nw_protocol_webtransport_stream_notify";
  unsigned int v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v19 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    id v8 = (os_log_s *)__nwlog_obj();
    uint64_t v9 = type;
    if (!os_log_type_enabled(v8, type)) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v22 = "nw_protocol_webtransport_stream_notify";
    os_log_type_t v10 = "%{public}s called with null webtransport_stream";
    goto LABEL_39;
  }

  if (!v19)
  {
    id v8 = (os_log_s *)__nwlog_obj();
    uint64_t v9 = type;
    if (!os_log_type_enabled(v8, type)) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v22 = "nw_protocol_webtransport_stream_notify";
    os_log_type_t v10 = "%{public}s called with null webtransport_stream, backtrace limit exceeded";
    goto LABEL_39;
  }

  uint64_t v16 = (char *)__nw_create_backtrace_string();
  id v8 = (os_log_s *)__nwlog_obj();
  uint64_t v9 = type;
  uint64_t v17 = os_log_type_enabled(v8, type);
  if (!v16)
  {
    if (!v17) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v22 = "nw_protocol_webtransport_stream_notify";
    os_log_type_t v10 = "%{public}s called with null webtransport_stream, no backtrace";
    goto LABEL_39;
  }

  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v22 = "nw_protocol_webtransport_stream_notify";
    uint64_t v23 = 2082;
    os_log_type_t v24 = v16;
    _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null webtransport_stream, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v7) {
    goto LABEL_41;
  }
}

  if (v5) {
    free(v5);
  }
  return 0LL;
}

  if (v7) {
    free(v7);
  }
  return 0LL;
}

  if (v5) {
    free(v5);
  }
  return 0LL;
}

    _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
    goto LABEL_40;
  }

  if (a3)
  {
    id v8 = (os_unfair_lock_s *)(a1 + 72);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
    if (*(_DWORD *)(a1 + 80) == 1)
    {
      if (a2) {
        xpc_dictionary_set_string(*(xpc_object_t *)(a1 + 16), "srvname", a2);
      }
      xpc_dictionary_set_string(*(xpc_object_t *)(a1 + 16), "srvtype", a3);
      if (a4) {
        xpc_dictionary_set_string(*(xpc_object_t *)(a1 + 16), "srvdomain", a4);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v9 = (os_log_s *)gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v21 = "tcp_listener_set_service";
        _os_log_impl(&dword_181A5C000, v9, OS_LOG_TYPE_ERROR, "%{public}s listener is already running", buf, 0xCu);
      }
    }

    os_unfair_lock_unlock(v8);
    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v21 = "tcp_listener_set_service";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v18 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v11 = (os_log_s *)__nwlog_obj();
    uint64_t v12 = type;
    if (!os_log_type_enabled(v11, type)) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v21 = "tcp_listener_set_service";
    uint64_t v13 = "%{public}s called with null regtype";
    goto LABEL_39;
  }

  if (!v18)
  {
    uint64_t v11 = (os_log_s *)__nwlog_obj();
    uint64_t v12 = type;
    if (!os_log_type_enabled(v11, type)) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v21 = "tcp_listener_set_service";
    uint64_t v13 = "%{public}s called with null regtype, backtrace limit exceeded";
    goto LABEL_39;
  }

  uint64_t v16 = (char *)__nw_create_backtrace_string();
  uint64_t v11 = (os_log_s *)__nwlog_obj();
  uint64_t v12 = type;
  uint64_t v17 = os_log_type_enabled(v11, type);
  if (!v16)
  {
    if (!v17) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v21 = "tcp_listener_set_service";
    uint64_t v13 = "%{public}s called with null regtype, no backtrace";
    goto LABEL_39;
  }

  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v21 = "tcp_listener_set_service";
    BOOL v22 = 2082;
    uint64_t v23 = v16;
    _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s called with null regtype, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v16);
  if (v10) {
    goto LABEL_41;
  }
}

    free(backtrace_string);
    goto LABEL_53;
  }

  uint64_t v9 = (os_log_s *)__nwlog_obj();
  os_log_type_t v10 = type;
  if (os_log_type_enabled(v9, type))
  {
    *(_DWORD *)buf = 136446210;
    os_log_type_t v21 = "nw_http_connect_restart_after_disconnect";
    uint64_t v11 = "%{public}s called with null http_connect->was_disconnected";
    goto LABEL_52;
  }

    os_log_type_t v27 = v4;
    char v28 = v5;
    int v29 = 12;
LABEL_45:
    _os_log_impl(&dword_181A5C000, v27, v28, v6, buf, v29);
    goto LABEL_46;
  }

  uint64_t v11 = *(_DWORD *)(v9 + 32);
  uint64_t v12 = calloc(1uLL, 0x10uLL);
  if (!v12)
  {
    __int16 v38 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v38, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    v48 = "strict_calloc";
    os_log_type_t v49 = 2048;
    BOOL v50 = 1LL;
    os_log_type_t v51 = 2048;
    v52[0] = 16LL;
    os_log_type_t v39 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v39);
    if (result)
    {
      __break(1u);
      return result;
    }

    free(v39);
  }

  _BYTE *v12 = a2;
  v12[1] = data_source_read_callback;
  uint64_t v13 = nghttp2_submit_data();
  free(v12);
  if (v13)
  {
    if (v13 == -529)
    {
      if (gLogDatapath)
      {
        os_log_type_t v14 = (os_log_s *)__nwlog_obj();
        BOOL result = os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG);
        if (!result) {
          return result;
        }
        uint64_t v16 = *(_DWORD *)(a2 + 52);
        if (v16) {
          v16 -= *(_DWORD *)(a2 + 56) + *(_DWORD *)(a2 + 60);
        }
        *(_DWORD *)buf = 136446978;
        v48 = "nw_http2_transport_submit_data";
        os_log_type_t v49 = 2082;
        BOOL v50 = a1 + 205;
        os_log_type_t v51 = 1024;
        LODWORD(v52[0]) = v11;
        WORD2(v52[0]) = 1024;
        *(_DWORD *)((char *)v52 + 6) = v16;
        _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s already have data outgoing on stream %d, cannot send %u bytes",  buf,  0x22u);
      }

      return 0LL;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v20 = nghttp2_strerror();
    *(_DWORD *)buf = 136446466;
    v48 = "nw_http2_transport_submit_data";
    os_log_type_t v49 = 2082;
    BOOL v50 = v20;
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v45 = 0;
    if (__nwlog_fault(v3, &type, &v45))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v21 = (os_log_s *)gLogObj;
        BOOL v22 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_46;
        }
        uint64_t v23 = nghttp2_strerror();
        *(_DWORD *)buf = 136446466;
        v48 = "nw_http2_transport_submit_data";
        os_log_type_t v49 = 2082;
        BOOL v50 = v23;
        unsigned int v6 = "%{public}s nghttp2_submit_data: %{public}s failed";
        goto LABEL_44;
      }

      if (!v45)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v21 = (os_log_s *)gLogObj;
        BOOL v22 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_46;
        }
        BOOL v30 = nghttp2_strerror();
        *(_DWORD *)buf = 136446466;
        v48 = "nw_http2_transport_submit_data";
        os_log_type_t v49 = 2082;
        BOOL v50 = v30;
        unsigned int v6 = "%{public}s nghttp2_submit_data: %{public}s failed, backtrace limit exceeded";
        goto LABEL_44;
      }

      os_log_type_t v24 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v21 = (os_log_s *)gLogObj;
      BOOL v22 = type;
      BOOL v25 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v24)
      {
        if (v25)
        {
          os_log_type_t v26 = nghttp2_strerror();
          *(_DWORD *)buf = 136446722;
          v48 = "nw_http2_transport_submit_data";
          os_log_type_t v49 = 2082;
          BOOL v50 = v26;
          os_log_type_t v51 = 2082;
          v52[0] = v24;
          _os_log_impl( &dword_181A5C000,  v21,  v22,  "%{public}s nghttp2_submit_data: %{public}s failed, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(v24);
        goto LABEL_46;
      }

      if (v25)
      {
        int v31 = nghttp2_strerror();
        *(_DWORD *)buf = 136446466;
        v48 = "nw_http2_transport_submit_data";
        os_log_type_t v49 = 2082;
        BOOL v50 = v31;
        unsigned int v6 = "%{public}s nghttp2_submit_data: %{public}s failed, no backtrace";
LABEL_44:
        os_log_type_t v27 = v21;
        char v28 = v22;
        int v29 = 22;
        goto LABEL_45;
      }
    }

  if (v19) {
    free(v19);
  }
  return -902LL;
}

    goto LABEL_40;
  }

  if (v4)
  {
    unsigned int v6 = v3[6];
    if (!v6)
    {
      unsigned int v7 = nw_array_create();
      id v8 = (void *)v3[6];
      v3[6] = v7;

      unsigned int v6 = v3[6];
    }

    nw_array_append(v6, v5);
    goto LABEL_6;
  }

  __nwlog_obj();
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v26 = "nw_proxy_config_add_resolved_endpoint";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v23 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_proxy_config_add_resolved_endpoint";
      _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null resolved_endpoint", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (!v23)
  {
    __nwlog_obj();
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_proxy_config_add_resolved_endpoint";
      _os_log_impl( &dword_181A5C000,  v11,  v22,  "%{public}s called with null resolved_endpoint, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  os_log_type_t v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  BOOL v19 = type;
  uint64_t v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_proxy_config_add_resolved_endpoint";
      _os_log_impl(&dword_181A5C000, v11, v19, "%{public}s called with null resolved_endpoint, no backtrace", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v26 = "nw_proxy_config_add_resolved_endpoint";
    os_log_type_t v27 = 2082;
    char v28 = v18;
    _os_log_impl( &dword_181A5C000,  v11,  v19,  "%{public}s called with null resolved_endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_41;
  }
LABEL_6:
}

    goto LABEL_40;
  }

  if (match_domain)
  {
    uint64_t v5 = (void *)*((void *)v3 + 15);
    if (!v5)
    {
      unsigned int v6 = xpc_array_create(0LL, 0LL);
      unsigned int v7 = (void *)v4[15];
      v4[15] = v6;

      uint64_t v5 = (void *)v4[15];
    }

    xpc_array_set_string(v5, 0xFFFFFFFFFFFFFFFFLL, match_domain);
    goto LABEL_6;
  }

  __nwlog_obj();
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v25 = "nw_proxy_config_add_match_domain";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v22 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v25 = "nw_proxy_config_add_match_domain";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null match_domain", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (!v22)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v25 = "nw_proxy_config_add_match_domain";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s called with null match_domain, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  uint64_t v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      BOOL v25 = "nw_proxy_config_add_match_domain";
      _os_log_impl(&dword_181A5C000, v10, v18, "%{public}s called with null match_domain, no backtrace", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v25 = "nw_proxy_config_add_match_domain";
    os_log_type_t v26 = 2082;
    os_log_type_t v27 = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s called with null match_domain, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

    goto LABEL_40;
  }

  if (excluded_domain)
  {
    uint64_t v5 = (void *)*((void *)v3 + 16);
    if (!v5)
    {
      unsigned int v6 = xpc_array_create(0LL, 0LL);
      unsigned int v7 = (void *)v4[16];
      v4[16] = v6;

      uint64_t v5 = (void *)v4[16];
    }

    xpc_array_set_string(v5, 0xFFFFFFFFFFFFFFFFLL, excluded_domain);
    goto LABEL_6;
  }

  __nwlog_obj();
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v25 = "nw_proxy_config_add_excluded_domain";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v22 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v25 = "nw_proxy_config_add_excluded_domain";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null excluded_domain", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (!v22)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v25 = "nw_proxy_config_add_excluded_domain";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s called with null excluded_domain, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  uint64_t v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      BOOL v25 = "nw_proxy_config_add_excluded_domain";
      _os_log_impl(&dword_181A5C000, v10, v18, "%{public}s called with null excluded_domain, no backtrace", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v25 = "nw_proxy_config_add_excluded_domain";
    os_log_type_t v26 = 2082;
    os_log_type_t v27 = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s called with null excluded_domain, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

    goto LABEL_40;
  }

  if (a2)
  {
    uint64_t v5 = (void *)v3[17];
    if (!v5)
    {
      unsigned int v6 = xpc_array_create(0LL, 0LL);
      unsigned int v7 = (void *)v4[17];
      v4[17] = v6;

      uint64_t v5 = (void *)v4[17];
    }

    xpc_array_set_string(v5, 0xFFFFFFFFFFFFFFFFLL, a2);
    goto LABEL_6;
  }

  __nwlog_obj();
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v25 = "nw_proxy_config_add_preferred_domain";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v22 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v25 = "nw_proxy_config_add_preferred_domain";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null preferred_domain", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (!v22)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v25 = "nw_proxy_config_add_preferred_domain";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s called with null preferred_domain, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  uint64_t v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      BOOL v25 = "nw_proxy_config_add_preferred_domain";
      _os_log_impl(&dword_181A5C000, v10, v18, "%{public}s called with null preferred_domain, no backtrace", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v25 = "nw_proxy_config_add_preferred_domain";
    os_log_type_t v26 = 2082;
    os_log_type_t v27 = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s called with null preferred_domain, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

    goto LABEL_40;
  }

  if (v4)
  {
    if (!v3[3])
    {
      unsigned int v6 = xpc_array_create(0LL, 0LL);
      unsigned int v7 = v3[3];
      v3[3] = v6;
    }

    id v8 = v5;
    uint64_t v9 = v8 + 8;

    xpc_array_set_string(v3[3], 0xFFFFFFFFFFFFFFFFLL, v9);
    goto LABEL_6;
  }

  __nwlog_obj();
  os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v27 = "nw_proxy_config_add_required_protocol";
  uint64_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v24 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_proxy_config_add_required_protocol";
      _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null protocol", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (!v24)
  {
    __nwlog_obj();
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_proxy_config_add_required_protocol";
      _os_log_impl( &dword_181A5C000,  v12,  v23,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  BOOL v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  uint64_t v20 = type;
  os_log_type_t v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_proxy_config_add_required_protocol";
      _os_log_impl(&dword_181A5C000, v12, v20, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v27 = "nw_proxy_config_add_required_protocol";
    char v28 = 2082;
    int v29 = v19;
    _os_log_impl( &dword_181A5C000,  v12,  v20,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_41;
  }
LABEL_6:
}

    goto LABEL_40;
  }

  if (v4)
  {
    if (!v3[4])
    {
      unsigned int v6 = xpc_array_create(0LL, 0LL);
      unsigned int v7 = v3[4];
      v3[4] = v6;
    }

    id v8 = v5;
    uint64_t v9 = v8 + 8;

    xpc_array_set_string(v3[4], 0xFFFFFFFFFFFFFFFFLL, v9);
    goto LABEL_6;
  }

  __nwlog_obj();
  os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v27 = "nw_proxy_config_add_protocol_to_remove";
  uint64_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v24 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_proxy_config_add_protocol_to_remove";
      _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null protocol", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (!v24)
  {
    __nwlog_obj();
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_proxy_config_add_protocol_to_remove";
      _os_log_impl( &dword_181A5C000,  v12,  v23,  "%{public}s called with null protocol, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  BOOL v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  uint64_t v20 = type;
  os_log_type_t v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_proxy_config_add_protocol_to_remove";
      _os_log_impl(&dword_181A5C000, v12, v20, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v27 = "nw_proxy_config_add_protocol_to_remove";
    char v28 = 2082;
    int v29 = v19;
    _os_log_impl( &dword_181A5C000,  v12,  v20,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v19);
  if (v11) {
    goto LABEL_41;
  }
LABEL_6:
}

  os_log_type_t v41 = v30;
  os_log_type_t v42 = v41;
  if (!v29)
  {
    __nwlog_obj();
    v150 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v267 = 136446210;
    v268 = "nw_authentication_credential_add_to_tlv";
    v151 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v257) = 0;
    if (__nwlog_fault(v151, type, &v257))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v152 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v153 = type[0];
        if (os_log_type_enabled(v152, type[0]))
        {
          *(_DWORD *)v267 = 136446210;
          v268 = "nw_authentication_credential_add_to_tlv";
          _os_log_impl(&dword_181A5C000, v152, v153, "%{public}s called with null cursor", v267, 0xCu);
        }
      }

      else if ((_BYTE)v257)
      {
        v183 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v152 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v184 = type[0];
        v185 = os_log_type_enabled(v152, type[0]);
        if (v183)
        {
          if (v185)
          {
            *(_DWORD *)v267 = 136446466;
            v268 = "nw_authentication_credential_add_to_tlv";
            v269 = 2082;
            *(void *)v270 = v183;
            _os_log_impl( &dword_181A5C000,  v152,  v184,  "%{public}s called with null cursor, dumping backtrace:%{public}s",  v267,  0x16u);
          }

          free(v183);
          goto LABEL_333;
        }

        if (v185)
        {
          *(_DWORD *)v267 = 136446210;
          v268 = "nw_authentication_credential_add_to_tlv";
          _os_log_impl(&dword_181A5C000, v152, v184, "%{public}s called with null cursor, no backtrace", v267, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v152 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v205 = type[0];
        if (os_log_type_enabled(v152, type[0]))
        {
          *(_DWORD *)v267 = 136446210;
          v268 = "nw_authentication_credential_add_to_tlv";
          _os_log_impl( &dword_181A5C000,  v152,  v205,  "%{public}s called with null cursor, backtrace limit exceeded",  v267,  0xCu);
        }
      }
    }

        if (v12) {
          free(v12);
        }
        goto LABEL_41;
      }

      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v82 = "nw_protocol_http1_finalize_output_frames";
      char v43 = (char *)_os_log_send_and_compose_impl();
      v80 = OS_LOG_TYPE_ERROR;
      char v79 = 0;
      if (v80 == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v44 = (os_log_s *)__nwlog_obj();
        os_log_type_t v45 = v80;
        if (os_log_type_enabled(v44, v80))
        {
          *(_DWORD *)buf = 136446210;
          v82 = "nw_protocol_http1_finalize_output_frames";
          os_log_type_t v46 = "%{public}s called with null http1_stream";
          goto LABEL_142;
        }

        goto LABEL_143;
      }

      if (!v79)
      {
        os_log_type_t v44 = (os_log_s *)__nwlog_obj();
        os_log_type_t v45 = v80;
        if (os_log_type_enabled(v44, v80))
        {
          *(_DWORD *)buf = 136446210;
          v82 = "nw_protocol_http1_finalize_output_frames";
          os_log_type_t v46 = "%{public}s called with null http1_stream, backtrace limit exceeded";
          goto LABEL_142;
        }

        goto LABEL_143;
      }

      os_log_type_t v54 = (char *)__nw_create_backtrace_string();
      os_log_type_t v44 = (os_log_s *)__nwlog_obj();
      os_log_type_t v45 = v80;
      os_log_type_t v57 = os_log_type_enabled(v44, v80);
      if (!v54)
      {
        if (v57)
        {
          *(_DWORD *)buf = 136446210;
          v82 = "nw_protocol_http1_finalize_output_frames";
          os_log_type_t v46 = "%{public}s called with null http1_stream, no backtrace";
          goto LABEL_142;
        }

        goto LABEL_143;
      }

      if (v57)
      {
        *(_DWORD *)buf = 136446466;
        v82 = "nw_protocol_http1_finalize_output_frames";
        os_log_type_t v83 = 2082;
        v84 = v54;
        char v56 = "%{public}s called with null http1_stream, dumping backtrace:%{public}s";
        goto LABEL_102;
      }
    }

    else
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v82 = "nw_protocol_http1_finalize_output_frames";
      char v43 = (char *)_os_log_send_and_compose_impl();
      v80 = OS_LOG_TYPE_ERROR;
      char v79 = 0;
      if (v80 == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v44 = (os_log_s *)__nwlog_obj();
        os_log_type_t v45 = v80;
        if (os_log_type_enabled(v44, v80))
        {
          *(_DWORD *)buf = 136446210;
          v82 = "nw_protocol_http1_finalize_output_frames";
          os_log_type_t v46 = "%{public}s called with null http1_connection";
LABEL_142:
          _os_log_impl(&dword_181A5C000, v44, v45, v46, buf, 0xCu);
        }

  if (v7) {
    free(v7);
  }
  return 0xFFFFFFFFLL;
}

      if (v2) {
        free(v2);
      }
      return 0xFFFFFFFFLL;
    }

    if (!v12)
    {
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      uint64_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_http1_on_chunk_complete";
        uint64_t v5 = "%{public}s called with null parser, backtrace limit exceeded";
        goto LABEL_38;
      }

      goto LABEL_39;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v3 = (os_log_s *)__nwlog_obj();
    uint64_t v4 = type;
    unsigned int v7 = os_log_type_enabled(v3, type);
    if (!backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v15 = "nw_http1_on_chunk_complete";
        uint64_t v5 = "%{public}s called with null parser, no backtrace";
        goto LABEL_38;
      }

      goto LABEL_39;
    }

    if (v7)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v15 = "nw_http1_on_chunk_complete";
      uint64_t v16 = 2082;
      uint64_t v17 = backtrace_string;
      id v8 = "%{public}s called with null parser, dumping backtrace:%{public}s";
LABEL_28:
      _os_log_impl(&dword_181A5C000, v3, v4, v8, buf, 0x16u);
    }

      goto LABEL_40;
    }

    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v18 = (os_log_s *)(id)gLogObj;
      BOOL v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v45 = "-[NWParameters prohibitNetworkAgentsWithDomain:type:]";
        os_log_type_t v46 = 2114;
        BOOL v47 = v6;
        uint64_t v20 = "%{public}s Failed to get UTF8String from domain %{public}@";
LABEL_19:
        os_log_type_t v24 = v18;
        BOOL v25 = v19;
LABEL_20:
        _os_log_impl(&dword_181A5C000, v24, v25, v20, buf, 0x16u);
      }
    }

    else
    {
      if (v42)
      {
        os_log_type_t v21 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = (os_log_s *)(id)gLogObj;
        BOOL v22 = type;
        uint64_t v23 = os_log_type_enabled(v18, type);
        if (v21)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446722;
            os_log_type_t v45 = "-[NWParameters prohibitNetworkAgentsWithDomain:type:]";
            os_log_type_t v46 = 2114;
            BOOL v47 = v6;
            v48 = 2082;
            os_log_type_t v49 = v21;
            _os_log_impl( &dword_181A5C000,  v18,  v22,  "%{public}s Failed to get UTF8String from domain %{public}@, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v21);
          goto LABEL_22;
        }

        if (!v23) {
          goto LABEL_21;
        }
        *(_DWORD *)buf = 136446466;
        os_log_type_t v45 = "-[NWParameters prohibitNetworkAgentsWithDomain:type:]";
        os_log_type_t v46 = 2114;
        BOOL v47 = v6;
        uint64_t v20 = "%{public}s Failed to get UTF8String from domain %{public}@, no backtrace";
        os_log_type_t v24 = v18;
        BOOL v25 = v22;
        goto LABEL_20;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v18 = (os_log_s *)(id)gLogObj;
      BOOL v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v45 = "-[NWParameters prohibitNetworkAgentsWithDomain:type:]";
        os_log_type_t v46 = 2114;
        BOOL v47 = v6;
        uint64_t v20 = "%{public}s Failed to get UTF8String from domain %{public}@, backtrace limit exceeded";
        goto LABEL_19;
      }
    }

      BOOL v52 = *(unsigned __int8 *)(a2 + *v8);
      if (*(_BYTE *)(a2 + *v8)) {
        os_log_type_t v15 = 0LL;
      }
LABEL_41:
      if (v52) {
        os_log_type_t v53 = 1;
      }
      else {
        os_log_type_t v53 = (v15 & 7) == 4;
      }
      if (v53) {
        return *(_BYTE *)(a2 + *v8) == 0;
      }
      if ((v15 >> 3) == 1)
      {
        uint64_t v11 = PBReaderReadData();
        uint64_t v12 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v11;
      }

      else
      {
        BOOL result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v4 = *v3;
      uint64_t v5 = *(void *)(a2 + v4);
      unsigned int v7 = *(void *)(a2 + *v6);
      if (v5 >= v7) {
        return *(_BYTE *)(a2 + *v8) == 0;
      }
    }

    os_log_type_t v15 = 0LL;
LABEL_38:
    *uint64_t v13 = 1;
    goto LABEL_39;
  }

  return *(_BYTE *)(a2 + *v8) == 0;
}

  if (v20) {
    free(v20);
  }
}

              goto LABEL_40;
            }

            if (type == OS_LOG_TYPE_DEFAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              BOOL v19 = (os_log_s *)(id)gLogObj;
              os_log_type_t v24 = buf[0];
              if (os_log_type_enabled(v19, (os_log_type_t)buf[0]))
              {
                LODWORD(buffer[0]) = 136446466;
                *(void *)((char *)buffer + 4) = "nwsc_get_remote_pub_key";
                WORD2(buffer[1]) = 2114;
                *(void *)((char *)&buffer[1] + 6) = v9;
                _os_log_impl( &dword_181A5C000,  v19,  v24,  "%{public}s Could not get identifier for endpoint %{public}@, backtrace limit exceeded",  (uint8_t *)buffer,  0x16u);
              }

              goto LABEL_39;
            }

            os_log_type_t v21 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            BOOL v19 = (os_log_s *)(id)gLogObj;
            BOOL v22 = buf[0];
            uint64_t v23 = os_log_type_enabled(v19, (os_log_type_t)buf[0]);
            if (!v21)
            {
              if (v23)
              {
                LODWORD(buffer[0]) = 136446466;
                *(void *)((char *)buffer + 4) = "nwsc_get_remote_pub_key";
                WORD2(buffer[1]) = 2114;
                *(void *)((char *)&buffer[1] + 6) = v9;
                _os_log_impl( &dword_181A5C000,  v19,  v22,  "%{public}s Could not get identifier for endpoint %{public}@, no backtrace",  (uint8_t *)buffer,  0x16u);
              }

              goto LABEL_39;
            }

            if (v23)
            {
              LODWORD(buffer[0]) = 136446722;
              *(void *)((char *)buffer + 4) = "nwsc_get_remote_pub_key";
              WORD2(buffer[1]) = 2114;
              *(void *)((char *)&buffer[1] + 6) = v9;
              HIWORD(buffer[2]) = 2082;
              buffer[3] = v21;
              _os_log_impl( &dword_181A5C000,  v19,  v22,  "%{public}s Could not get identifier for endpoint %{public}@, dumping backtrace:%{public}s",  (uint8_t *)buffer,  0x20u);
            }

LABEL_26:
            free(v21);
            if (!v18) {
              goto LABEL_42;
            }
            goto LABEL_41;
          }

      os_log_type_t v35 = v9->u16[0];
      uint64_t v9 = (uint32x2_t *)((char *)v9 + 2);
      v8 += v35;
      if ((v6 & 1) == 0) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }

      os_log_type_t v53 = *((unsigned __int8 *)a3 + *v9);
      if (*((_BYTE *)a3 + *v9)) {
        uint64_t v16 = 0LL;
      }
LABEL_41:
      if (v53) {
        os_log_type_t v54 = 1;
      }
      else {
        os_log_type_t v54 = (v16 & 7) == 4;
      }
      if (v54) {
        goto LABEL_85;
      }
      if ((v16 >> 3) == 2)
      {
        PBReaderReadData();
        uint64_t v12 = (NSData *)objc_claimAutoreleasedReturnValue();
        messageData = self->_messageData;
        self->_messageData = v12;
      }

      else
      {
        if ((v16 >> 3) == 1)
        {
          *(_BYTE *)&self->_has |= 1u;
          os_log_type_t v55 = *v4;
          char v56 = *(void *)((char *)a3 + v55);
          if (v56 == -1LL || v56 >= *(void *)((char *)a3 + *v7))
          {
            os_log_type_t v59 = 0;
          }

          else
          {
            os_log_type_t v57 = v56 + 1;
            os_log_type_t v58 = *(_BYTE *)(*(void *)((char *)a3 + *v11) + v56);
            *(void *)((char *)a3 + v55) = v57;
            os_log_type_t v59 = v58 & 0x7F;
            if ((v58 & 0x80) == 0) {
              goto LABEL_82;
            }
            __int16 v60 = *v4;
            char v61 = *(void *)((char *)a3 + v60);
            if (v61 != -1LL && v61 < *(void *)((char *)a3 + *v7))
            {
              __int16 v62 = *(char *)(*(void *)((char *)a3 + *v11) + v61);
              *(void *)((char *)a3 + v60) = v61 + 1;
              os_log_type_t v59 = v59 & 0xFFFFC07F | ((v62 & 0x7F) << 7);
              if ((v62 & 0x80000000) == 0) {
                goto LABEL_82;
              }
              int v63 = *v4;
              uint64_t v64 = *(void *)((char *)a3 + v63);
              if (v64 != -1LL && v64 < *(void *)((char *)a3 + *v7))
              {
                id v65 = *(char *)(*(void *)((char *)a3 + *v11) + v64);
                *(void *)((char *)a3 + v63) = v64 + 1;
                os_log_type_t v59 = v59 & 0xFFE03FFF | ((v65 & 0x7F) << 14);
                if ((v65 & 0x80000000) == 0) {
                  goto LABEL_82;
                }
                BOOL v66 = *v4;
                os_log_type_t v67 = *(void *)((char *)a3 + v66);
                if (v67 != -1LL && v67 < *(void *)((char *)a3 + *v7))
                {
                  __int16 v68 = *(char *)(*(void *)((char *)a3 + *v11) + v67);
                  *(void *)((char *)a3 + v66) = v67 + 1;
                  os_log_type_t v59 = v59 & 0xF01FFFFF | ((v68 & 0x7F) << 21);
                  if ((v68 & 0x80000000) == 0) {
                    goto LABEL_82;
                  }
                  v69 = *v4;
                  uint64_t v70 = *(void *)((char *)a3 + v69);
                  if (v70 != -1LL && v70 < *(void *)((char *)a3 + *v7))
                  {
                    os_log_type_t v71 = v70 + 1;
                    v72 = *(char *)(*(void *)((char *)a3 + *v11) + v70);
                    *(void *)((char *)a3 + v69) = v71;
                    v59 |= v72 << 28;
                    if ((v72 & 0x80000000) == 0) {
                      goto LABEL_82;
                    }
                    __uint64_t v73 = *v4;
                    unint64_t v74 = *(void *)((char *)a3 + v73);
                    if (v74 != -1LL && v74 < *(void *)((char *)a3 + *v7))
                    {
                      char v75 = v74 + 1;
                      __uint64_t v76 = *(char *)(*(void *)((char *)a3 + *v11) + v74);
                      *(void *)((char *)a3 + v73) = v75;
                      if ((v76 & 0x80000000) == 0) {
                        goto LABEL_82;
                      }
                      v77 = *v4;
                      unint64_t v78 = *(void *)((char *)a3 + v77);
                      if (v78 != -1LL && v78 < *(void *)((char *)a3 + *v7))
                      {
                        char v79 = v78 + 1;
                        v80 = *(char *)(*(void *)((char *)a3 + *v11) + v78);
                        *(void *)((char *)a3 + v77) = v79;
                        if ((v80 & 0x80000000) == 0) {
                          goto LABEL_82;
                        }
                        v81 = *v4;
                        v82 = *(void *)((char *)a3 + v81);
                        if (v82 != -1LL && v82 < *(void *)((char *)a3 + *v7))
                        {
                          os_log_type_t v83 = v82 + 1;
                          v84 = *(char *)(*(void *)((char *)a3 + *v11) + v82);
                          *(void *)((char *)a3 + v81) = v83;
                          if ((v84 & 0x80000000) == 0) {
                            goto LABEL_82;
                          }
                          v85 = *v4;
                          v86 = *(void *)((char *)a3 + v85);
                          if (v86 != -1LL && v86 < *(void *)((char *)a3 + *v7))
                          {
                            os_log_type_t v87 = v86 + 1;
                            v88 = *(char *)(*(void *)((char *)a3 + *v11) + v86);
                            *(void *)((char *)a3 + v85) = v87;
                            if ((v88 & 0x80000000) == 0) {
                              goto LABEL_82;
                            }
                            os_log_type_t v89 = *v4;
                            BOOL v90 = *(void *)((char *)a3 + v89);
                            if (v90 != -1LL && v90 < *(void *)((char *)a3 + *v7))
                            {
                              os_log_type_t v91 = v90 + 1;
                              v92 = *(char *)(*(void *)((char *)a3 + *v11) + v90);
                              *(void *)((char *)a3 + v89) = v91;
                              if (v92 < 0)
                              {
                                os_log_type_t v59 = 0;
LABEL_84:
                                self->_command = v59;
                                goto LABEL_4;
                              }

    goto LABEL_40;
  }

  uint64_t v5 = xpc_dictionary_create(0LL, 0LL, 0LL);
  *(void *)string = v5;
  string[8] = -1;
  unsigned int v6 = nw_resolver_config_create_with_dictionary(v5);
  if (v5) {

  }
  *(void *)os_log_type_t type = v6;
  char v28 = -1;
  memset(out, 0, sizeof(out));
  uuid_generate_random(out);
  nw_resolver_config_set_identifier(v6, out);
  memset(string, 0, sizeof(string));
  uuid_unparse(out, string);
  m_obj = v6->dictionary.m_obj;
  id v8 = v6;
  xpc_dictionary_set_string(m_obj, "Identifier", string);

  nw_resolver_config_set_class(v8, 3);
  nw_resolver_config_set_protocol(v8, 1);
  uint64_t v9 = v8;
  os_log_type_t v10 = v3;
  uint64_t v11 = -[nw_endpoint hostname](v10, "hostname");

  nw_resolver_config_set_provider_name(v9, v11);
LABEL_6:

  return (nw_resolver_config_t)v9;
}

    goto LABEL_40;
  }

  if (v7)
  {
    os_unfair_lock_lock((os_unfair_lock_t)v5 + 2);
    uint64_t v9 = _Block_copy(v8);
    os_log_type_t v10 = (void *)*((void *)v5 + 8);
    *((void *)v5 + 8) = v9;

    if (v6) {
      objc_storeStrong((id *)v5 + 10, a2);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)v5 + 2);
    goto LABEL_6;
  }

  __nwlog_obj();
  os_log_type_t v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  char v28 = "nw_nat64_prefixes_resolver_set_update_handler";
  uint64_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v25 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v16 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      char v28 = "nw_nat64_prefixes_resolver_set_update_handler";
      _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null update_handler", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (!v25)
  {
    __nwlog_obj();
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v24 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      char v28 = "nw_nat64_prefixes_resolver_set_update_handler";
      _os_log_impl( &dword_181A5C000,  v13,  v24,  "%{public}s called with null update_handler, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  uint64_t v20 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v21 = type;
  BOOL v22 = os_log_type_enabled(v13, type);
  if (!v20)
  {
    if (v22)
    {
      *(_DWORD *)buf = 136446210;
      char v28 = "nw_nat64_prefixes_resolver_set_update_handler";
      _os_log_impl(&dword_181A5C000, v13, v21, "%{public}s called with null update_handler, no backtrace", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (v22)
  {
    *(_DWORD *)buf = 136446466;
    char v28 = "nw_nat64_prefixes_resolver_set_update_handler";
    int v29 = 2082;
    BOOL v30 = v20;
    _os_log_impl( &dword_181A5C000,  v13,  v21,  "%{public}s called with null update_handler, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v20);
  if (v12) {
    goto LABEL_41;
  }
LABEL_6:
}

        goto LABEL_40;
      }

      if (!v31)
      {
        __nwlog_obj();
        os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v26 = v32;
        if (os_log_type_enabled(v15, v32))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v34 = "nw_qpod_setup_secrets";
          _os_log_impl( &dword_181A5C000,  v15,  v26,  "%{public}s called with null nw_protocol_metadata_is_quic(quic_metadata), backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_39;
      }

      BOOL v22 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v23 = v32;
      os_log_type_t v24 = os_log_type_enabled(v15, v32);
      if (!v22)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v34 = "nw_qpod_setup_secrets";
          _os_log_impl( &dword_181A5C000,  v15,  v23,  "%{public}s called with null nw_protocol_metadata_is_quic(quic_metadata), no backtrace",  buf,  0xCu);
        }

        goto LABEL_39;
      }

      if (v24)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v34 = "nw_qpod_setup_secrets";
        os_log_type_t v35 = 2082;
        BOOL v36 = v22;
        _os_log_impl( &dword_181A5C000,  v15,  v23,  "%{public}s called with null nw_protocol_metadata_is_quic(quic_metadata), dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v22);
    }

      free(v25);
      goto LABEL_40;
    }

    __nwlog_obj();
    os_log_type_t v41 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v58 = "-[NWConcrete_nw_browser initWithDescriptor:parameters:]";
    os_log_type_t v42 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v54 = 0;
    if (__nwlog_fault(v42, &type, &v54))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        char v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v44 = type;
        if (os_log_type_enabled(v43, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v58 = "-[NWConcrete_nw_browser initWithDescriptor:parameters:]";
          _os_log_impl(&dword_181A5C000, v43, v44, "%{public}s [super init] failed", buf, 0xCu);
        }
      }

      else if (v54)
      {
        v48 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        char v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v49 = type;
        BOOL v50 = os_log_type_enabled(v43, type);
        if (v48)
        {
          if (v50)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v58 = "-[NWConcrete_nw_browser initWithDescriptor:parameters:]";
            os_log_type_t v59 = 2082;
            *(void *)__int16 v60 = v48;
            _os_log_impl( &dword_181A5C000,  v43,  v49,  "%{public}s [super init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v48);
          goto LABEL_101;
        }

        if (v50)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v58 = "-[NWConcrete_nw_browser initWithDescriptor:parameters:]";
          _os_log_impl(&dword_181A5C000, v43, v49, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        char v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v52 = type;
        if (os_log_type_enabled(v43, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v58 = "-[NWConcrete_nw_browser initWithDescriptor:parameters:]";
          _os_log_impl( &dword_181A5C000,  v43,  v52,  "%{public}s [super init] failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

        BOOL v22 = nw_array_create();
LABEL_40:
        BOOL v25 = *(void *)(a1 + 40);
        os_log_type_t v26 = *(void **)(v25 + 136);
        *(void *)(v25 + 136) = v22;

        if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 40) + 40LL)))
        {
          if (__nwlog_browser_log::onceToken[0] != -1) {
            dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
          }
          os_log_type_t v27 = (os_log_s *)(id)gbrowserLogObj;
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
          {
            char v28 = *(_DWORD *)(*(void *)(a1 + 40) + 192LL);
            *(_DWORD *)buf = 136446722;
            v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
            v94 = 1024;
            *(_DWORD *)v95 = v28;
            *(_WORD *)&v95[4] = 2112;
            *(void *)&v95[6] = v11;
            _os_log_impl( &dword_181A5C000,  v27,  OS_LOG_TYPE_DEBUG,  "%{public}s [B%u] old: removed %@ from old_results",  buf,  0x1Cu);
          }
        }

        uint64_t v17 = *(void *)(*(void *)(a1 + 40) + 136LL);
        if (v17) {
          int v29 = (uint64_t)(*(void *)(v17 + 24) - *(void *)(v17 + 16)) >> 3;
        }
        else {
          int v29 = 0LL;
        }
        if (v21 - 1 == v29)
        {
          if (!v13)
          {
LABEL_69:
            if (nw_browse_result_get_changes(v11, v13) == 1)
            {
              if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 40) + 40LL)))
              {
                changes = nw_browse_result_get_changes(v11, v13);
                os_log_type_t v42 = nw_browse_result_get_change_description(changes);
                if (!nw_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 40) + 40LL)))
                {
                  if (__nwlog_browser_log::onceToken[0] != -1) {
                    dispatch_once(__nwlog_browser_log::onceToken, &__block_literal_global_18_44316);
                  }
                  char v43 = (os_log_s *)(id)gbrowserLogObj;
                  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
                  {
                    os_log_type_t v44 = *(_DWORD *)(*(void *)(a1 + 40) + 192LL);
                    *(_DWORD *)buf = 136447234;
                    v93 = "nw_browser_notify_browse_result_changes_locked_block_invoke";
                    v94 = 1024;
                    *(_DWORD *)v95 = v44;
                    *(_WORD *)&v95[4] = 2112;
                    *(void *)&v95[6] = v11;
                    v96 = 2112;
                    os_log_type_t v97 = v13;
                    BOOL v98 = 2082;
                    v99 = v42;
                    _os_log_impl( &dword_181A5C000,  v43,  OS_LOG_TYPE_DEBUG,  "%{public}s [B%u] Suppressing identical results: (%@ -> %@), %{public}s",  buf,  0x30u);
                  }
                }

                if (v42) {
                  free((void *)v42);
                }
              }
            }

            else
            {
              nw_parallel_array_append(*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), v11, v13);
            }

      v36 += v42;
      v41 += v42;
      if (v36 >= v37) {
        goto LABEL_26;
      }
    }
  }

  __nwlog_obj();
  uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
  uint64_t v64 = 22;
  os_log_type_t v35 = (void *)_os_log_send_and_compose_impl();

  BOOL result = (NSString *)__nwlog_abort((uint64_t)v35);
  if (!(_DWORD)result)
  {
    free(v35);
    if ((*((_BYTE *)self + 36) & 1) == 0)
    {
LABEL_4:
      unsigned int v6 = *((void *)self + 2);
      if (v6 < 1) {
        goto LABEL_25;
      }
      unsigned int v7 = (int8x16_t *)*((void *)self + 1);
      id v8 = &v7->i8[v6];
      if (&v7->i8[v6] <= &v7->i8[1]) {
        id v8 = &v7->i8[1];
      }
      uint64_t v9 = v8 - (__int8 *)v7;
      if (v9 < 8)
      {
        os_log_type_t v10 = (unsigned __int8 *)*((void *)self + 1);
        uint64_t v11 = v5;
        goto LABEL_21;
      }

      os_log_type_t v10 = (unsigned __int8 *)*((void *)self + 1);
      uint64_t v11 = v5;
      if ((unint64_t)(v5 - (char *)v7 + 1) >= 0x20)
      {
        if (v9 < 0x20)
        {
          uint64_t v12 = 0LL;
LABEL_16:
          uint64_t v20 = v9 & 0xFFFFFFFFFFFFFFF8LL;
          os_log_type_t v10 = &v7->u8[v9 & 0xFFFFFFFFFFFFFFF8LL];
          os_log_type_t v21 = v12 - (v9 & 0xFFFFFFFFFFFFFFF8LL);
          BOOL v22 = (int8x8_t *)&v5[v12 + 1];
          uint64_t v23 = (int8x8_t *)&v7->i8[v12];
          do
          {
            os_log_type_t v24 = *v23++;
            *v22++ = vbsl_s8( (int8x8_t)vcgt_u8( (uint8x8_t)0xA1A1A1A1A1A1A1A1LL,  (uint8x8_t)vadd_s8(v24, (int8x8_t)0x8181818181818181LL)),  (int8x8_t)0x2E2E2E2E2E2E2E2ELL,  v24);
            v21 += 8LL;
          }

          while (v21);
          if (v9 != v20)
          {
            uint64_t v11 = &v5[v20];
            goto LABEL_21;
          }

  _Block_object_dispose(&v72, 8);
  _Block_object_dispose(type, 8);
LABEL_40:
}

    goto LABEL_40;
  }

  if ((*(_BYTE *)(v2 + 140) & 8) != 0)
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446466;
    uint64_t v20 = "nw_activity_submit_metrics_block_invoke";
    os_log_type_t v21 = 2082;
    BOOL v22 = "Cannot submit metrics after completion";
    unsigned int v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v17 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unsigned int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v20 = "nw_activity_submit_metrics_block_invoke";
        os_log_type_t v21 = 2082;
        BOOL v22 = "Cannot submit metrics after completion";
        uint64_t v9 = "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s";
        goto LABEL_38;
      }
    }

    else
    {
      if (v17)
      {
        os_log_type_t v15 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        unsigned int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v8 = type;
        uint64_t v16 = os_log_type_enabled(v7, type);
        if (v15)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446722;
            uint64_t v20 = "nw_activity_submit_metrics_block_invoke";
            os_log_type_t v21 = 2082;
            BOOL v22 = "Cannot submit metrics after completion";
            uint64_t v23 = 2082;
            os_log_type_t v24 = (uint64_t)v15;
            _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, dumping backtrace:%{public}s",  buf,  0x20u);
          }

          free(v15);
          if (!v6) {
            goto LABEL_42;
          }
          goto LABEL_41;
        }

        if (!v16) {
          goto LABEL_39;
        }
        *(_DWORD *)buf = 136446466;
        uint64_t v20 = "nw_activity_submit_metrics_block_invoke";
        os_log_type_t v21 = 2082;
        BOOL v22 = "Cannot submit metrics after completion";
        uint64_t v9 = "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, no backtrace";
        goto LABEL_38;
      }

      __nwlog_obj();
      unsigned int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      id v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v20 = "nw_activity_submit_metrics_block_invoke";
        os_log_type_t v21 = 2082;
        BOOL v22 = "Cannot submit metrics after completion";
        uint64_t v9 = "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, backtrace limit exceeded";
        goto LABEL_38;
      }
    }

    goto LABEL_39;
  }

  uint64_t v3 = *(unsigned int *)(v2 + 120) + 1LL;
  uint64_t v4 = v3 << 31 >> 31;
  *(_DWORD *)(v2 + 120) = v3;
  if (v4 != v3 || v4 < 0)
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        os_log_type_t v14 = *(unsigned int *)(a1[4] + 120LL);
        *(_DWORD *)buf = 136446978;
        uint64_t v20 = "nw_activity_submit_metrics_block_invoke";
        os_log_type_t v21 = 2082;
        BOOL v22 = "activity->client_metric_count";
        uint64_t v23 = 2048;
        os_log_type_t v24 = 1LL;
        BOOL v25 = 2048;
        os_log_type_t v26 = v14;
        _os_log_impl( &dword_181A5C000,  v13,  OS_LOG_TYPE_DEBUG,  "%{public}s Overflow: %{public}s, increment %llu, result %llu",  buf,  0x2Au);
      }
    }

    *(_DWORD *)(a1[4] + 120LL) = -1;
  }

  *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL) = *(_DWORD *)(a1[4] + 120LL);
}

    goto LABEL_40;
  }

  if (a2)
  {
    uint64_t v5 = (void *)v3[5];
    if (!v5)
    {
      unsigned int v6 = xpc_array_create(0LL, 0LL);
      unsigned int v7 = (void *)v4[5];
      v4[5] = v6;

      uint64_t v5 = (void *)v4[5];
    }

    xpc_array_set_data(v5, 0xFFFFFFFFFFFFFFFFLL, a2, 0x28uLL);
    goto LABEL_6;
  }

  __nwlog_obj();
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v25 = "nw_protocol_transform_disable_protocol";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v22 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v25 = "nw_protocol_transform_disable_protocol";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null protocol_identifier", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (!v22)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v25 = "nw_protocol_transform_disable_protocol";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s called with null protocol_identifier, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  uint64_t v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      BOOL v25 = "nw_protocol_transform_disable_protocol";
      _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s called with null protocol_identifier, no backtrace",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v25 = "nw_protocol_transform_disable_protocol";
    os_log_type_t v26 = 2082;
    os_log_type_t v27 = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s called with null protocol_identifier, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

    goto LABEL_40;
  }

  if (a2)
  {
    uint64_t v5 = (void *)v3[6];
    if (!v5)
    {
      unsigned int v6 = xpc_array_create(0LL, 0LL);
      unsigned int v7 = (void *)v4[6];
      v4[6] = v6;

      uint64_t v5 = (void *)v4[6];
    }

    xpc_array_set_string(v5, 0xFFFFFFFFFFFFFFFFLL, a2);
    goto LABEL_6;
  }

  __nwlog_obj();
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v25 = "nw_protocol_transform_add_match_url_scheme";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v22 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v25 = "nw_protocol_transform_add_match_url_scheme";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null scheme", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (!v22)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v25 = "nw_protocol_transform_add_match_url_scheme";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s called with null scheme, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  uint64_t v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      BOOL v25 = "nw_protocol_transform_add_match_url_scheme";
      _os_log_impl(&dword_181A5C000, v10, v18, "%{public}s called with null scheme, no backtrace", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v25 = "nw_protocol_transform_add_match_url_scheme";
    os_log_type_t v26 = 2082;
    os_log_type_t v27 = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s called with null scheme, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

        goto LABEL_40;
      }

      if (!v21)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_stream_id";
          _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s protocol metadata is not webtransport, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_39;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v16 = type;
      uint64_t v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_stream_id";
          _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s protocol metadata is not webtransport, no backtrace",  buf,  0xCu);
        }

        goto LABEL_39;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_stream_id";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s protocol metadata is not webtransport, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_27;
    }
  }

  else
  {
    __nwlog_obj();
    unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_stream_id";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_stream_id";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_39;
      }

      if (!v21)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_stream_id";
          _os_log_impl( &dword_181A5C000,  v9,  v18,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_39;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      os_log_type_t v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_stream_id";
          _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_39;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_stream_id";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_40;
      }

      if (!v21)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_unidirectional";
          _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s protocol metadata is not webtransport, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_39;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v16 = type;
      uint64_t v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_unidirectional";
          _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s protocol metadata is not webtransport, no backtrace",  buf,  0xCu);
        }

        goto LABEL_39;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_unidirectional";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s protocol metadata is not webtransport, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_27;
    }
  }

  else
  {
    __nwlog_obj();
    unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_unidirectional";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_unidirectional";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_39;
      }

      if (!v21)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_unidirectional";
          _os_log_impl( &dword_181A5C000,  v9,  v18,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_39;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      os_log_type_t v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_unidirectional";
          _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_39;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_unidirectional";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_40;
      }

      if (!v21)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_datagram";
          _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s protocol metadata is not webtransport, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_39;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v16 = type;
      uint64_t v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_datagram";
          _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s protocol metadata is not webtransport, no backtrace",  buf,  0xCu);
        }

        goto LABEL_39;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_datagram";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s protocol metadata is not webtransport, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_27;
    }
  }

  else
  {
    __nwlog_obj();
    unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_datagram";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_datagram";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_39;
      }

      if (!v21)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_datagram";
          _os_log_impl( &dword_181A5C000,  v9,  v18,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_39;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      os_log_type_t v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_datagram";
          _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_39;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_datagram";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_40;
      }

      if (!v21)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_peer_initiated";
          _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s protocol metadata is not webtransport, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_39;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v16 = type;
      uint64_t v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_peer_initiated";
          _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s protocol metadata is not webtransport, no backtrace",  buf,  0xCu);
        }

        goto LABEL_39;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_peer_initiated";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s protocol metadata is not webtransport, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_27;
    }
  }

  else
  {
    __nwlog_obj();
    unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_peer_initiated";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_peer_initiated";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_39;
      }

      if (!v21)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_peer_initiated";
          _os_log_impl( &dword_181A5C000,  v9,  v18,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_39;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      os_log_type_t v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_peer_initiated";
          _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_39;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_metadata_get_is_peer_initiated";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        os_release(v10);
      }

    free(backtrace_string);
    goto LABEL_53;
  }

  uint64_t v11 = (os_log_s *)__nwlog_obj();
  uint64_t v12 = type;
  if (os_log_type_enabled(v11, type))
  {
    *(_DWORD *)buf = 136446210;
    BOOL v22 = "nw_protocol_http3_stream_copy_info";
    uint64_t v13 = "%{public}s called with null http3_stream->http3_connection";
    goto LABEL_52;
  }

    if (v13) {
      free(v13);
    }
    goto LABEL_9;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v35 = "nw_http3_stream_get_datagram_parameters";
  BOOL v19 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  __int16 v32 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v32)
    {
      uint64_t v20 = (os_log_s *)__nwlog_obj();
      os_log_type_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v35 = "nw_http3_stream_get_datagram_parameters";
      BOOL v22 = "%{public}s called with null http3_stream->parameters, backtrace limit exceeded";
      goto LABEL_73;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v20 = (os_log_s *)__nwlog_obj();
    os_log_type_t v21 = type;
    int v31 = os_log_type_enabled(v20, type);
    if (!backtrace_string)
    {
      if (!v31) {
        goto LABEL_74;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v35 = "nw_http3_stream_get_datagram_parameters";
      BOOL v22 = "%{public}s called with null http3_stream->parameters, no backtrace";
      goto LABEL_73;
    }

    if (!v31) {
      goto LABEL_58;
    }
    *(_DWORD *)buf = 136446466;
    os_log_type_t v35 = "nw_http3_stream_get_datagram_parameters";
    BOOL v36 = 2082;
    os_log_type_t v37 = backtrace_string;
    BOOL v25 = "%{public}s called with null http3_stream->parameters, dumping backtrace:%{public}s";
    goto LABEL_57;
  }

  uint64_t v20 = (os_log_s *)__nwlog_obj();
  os_log_type_t v21 = type;
  if (os_log_type_enabled(v20, type))
  {
    *(_DWORD *)buf = 136446210;
    os_log_type_t v35 = "nw_http3_stream_get_datagram_parameters";
    BOOL v22 = "%{public}s called with null http3_stream->parameters";
    goto LABEL_73;
  }

        os_release(v10);
      }

    free(backtrace_string);
    goto LABEL_53;
  }

  os_log_type_t v10 = (os_log_s *)__nwlog_obj();
  uint64_t v11 = type;
  if (os_log_type_enabled(v10, type))
  {
    *(_DWORD *)buf = 136446210;
    os_log_type_t v26 = "nw_protocol_http_early_data_finalize_output_frames";
    uint64_t v12 = "%{public}s called with null frames";
    goto LABEL_52;
  }

    _os_log_impl(&dword_181A5C000, v14, v15, v16, buf, 0xCu);
    goto LABEL_40;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v27 = "nw_protocol_http_early_data_connected";
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_protocol_http_early_data_connected";
      uint64_t v16 = "%{public}s called with null other_protocol";
    }

    else if (v24)
    {
      uint64_t v17 = (char *)__nw_create_backtrace_string();
      os_log_type_t v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      uint64_t v23 = os_log_type_enabled(v14, type);
      if (v17)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v27 = "nw_protocol_http_early_data_connected";
          char v28 = 2082;
          int v29 = v17;
          BOOL v19 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
          goto LABEL_32;
        }

        goto LABEL_33;
      }

      if (!v23) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_protocol_http_early_data_connected";
      uint64_t v16 = "%{public}s called with null other_protocol, no backtrace";
    }

    else
    {
      os_log_type_t v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_protocol_http_early_data_connected";
      uint64_t v16 = "%{public}s called with null other_protocol, backtrace limit exceeded";
    }

    goto LABEL_39;
  }

  nw_protocol_connected(*((void **)handle + 6), (uint64_t)a2);
  if (*((nw_protocol **)handle + 4) != a2) {
    return;
  }
  uint64_t v4 = nw_protocol_waiting_for_output((uint64_t)a2, (uint64_t)handle);
  uint64_t v5 = *((_BYTE *)handle + 256);
  if (v4) {
    unsigned int v6 = 2;
  }
  else {
    unsigned int v6 = 0;
  }
  *((_BYTE *)handle + 256) = v5 & 0xFD | v6;
  if ((v5 & 4) != 0)
  {
    if (!v4)
    {
      nw_http_early_data_replay((uint64_t)handle);
      return;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v27 = "nw_protocol_http_early_data_connected";
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v24 = 0;
    if (__nwlog_fault(v13, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = (os_log_s *)gLogObj;
        os_log_type_t v15 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_40;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_protocol_http_early_data_connected";
        uint64_t v16 = "%{public}s Attempting early data after failure";
        goto LABEL_39;
      }

      if (!v24)
      {
        os_log_type_t v14 = (os_log_s *)__nwlog_obj();
        os_log_type_t v15 = type;
        if (!os_log_type_enabled(v14, type)) {
          goto LABEL_40;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_protocol_http_early_data_connected";
        uint64_t v16 = "%{public}s Attempting early data after failure, backtrace limit exceeded";
        goto LABEL_39;
      }

      uint64_t v17 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v14 = (os_log_s *)gLogObj;
      os_log_type_t v15 = type;
      os_log_type_t v18 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (!v17)
      {
        if (!v18) {
          goto LABEL_40;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_protocol_http_early_data_connected";
        uint64_t v16 = "%{public}s Attempting early data after failure, no backtrace";
        goto LABEL_39;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v27 = "nw_protocol_http_early_data_connected";
        char v28 = 2082;
        int v29 = v17;
        BOOL v19 = "%{public}s Attempting early data after failure, dumping backtrace:%{public}s";
LABEL_32:
        _os_log_impl(&dword_181A5C000, v14, v15, v19, buf, 0x16u);
        goto LABEL_33;
      }

      goto LABEL_33;
    }

    goto LABEL_40;
  }

  if ((v4 & 1) == 0)
  {
    unsigned int v7 = *((_BYTE *)handle + 208);
    if ((v7 & 1) != 0)
    {
      id v8 = (void *)*((void *)handle + 25);
      if (v8)
      {
        os_release(v8);
        unsigned int v7 = *((_BYTE *)handle + 208);
      }
    }

    *((void *)handle + 25) = 0LL;
    *((_BYTE *)handle + 208) = v7 | 1;
    uint64_t v9 = *((_BYTE *)handle + 224);
    if ((v9 & 1) != 0)
    {
      os_log_type_t v10 = (void *)*((void *)handle + 27);
      if (v10)
      {
        os_release(v10);
        uint64_t v9 = *((_BYTE *)handle + 224);
      }
    }

    *((void *)handle + 27) = 0LL;
    *((_BYTE *)handle + 224) = v9 | 1;
    uint64_t v11 = *((_BYTE *)handle + 240);
    if ((v11 & 1) != 0)
    {
      uint64_t v12 = (dispatch_object_s *)*((void *)handle + 29);
      if (v12)
      {
        dispatch_release(v12);
        uint64_t v11 = *((_BYTE *)handle + 240);
      }
    }

    *((void *)handle + 29) = 0LL;
    *((_BYTE *)handle + 240) = v11 | 1;
  }

  nw_protocol_connected(*((void **)handle + 6), (uint64_t)handle);
}

    if (v11) {
      free(v11);
    }
    return 22LL;
  }

  *(_DWORD *)os_log_type_t type = a2;
  if (setsockopt(a1[43], 0xFFFF, 8, type, 4u) < 0)
  {
    unsigned int v7 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    id v8 = (os_log_s *)gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR)) {
      return v7;
    }
    *(_DWORD *)buf = 136446722;
    BOOL v22 = "nw_protocol_socket_reset_keepalives";
    uint64_t v23 = 2080;
    os_log_type_t v24 = (char *)(a1 + 77);
    BOOL v25 = 1024;
    os_log_type_t v26 = v7;
    uint64_t v9 = "%{public}s %s setsockopt SO_KEEPALIVE failed %{darwin.errno}d";
LABEL_23:
    _os_log_impl(&dword_181A5C000, v8, OS_LOG_TYPE_ERROR, v9, buf, 0x1Cu);
    return v7;
  }

  if (setsockopt(a1[43], 6, 16, &v20, 4u) < 0)
  {
    unsigned int v7 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    id v8 = (os_log_s *)gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR)) {
      return v7;
    }
    *(_DWORD *)buf = 136446722;
    BOOL v22 = "nw_protocol_socket_reset_keepalives";
    uint64_t v23 = 2080;
    os_log_type_t v24 = (char *)(a1 + 77);
    BOOL v25 = 1024;
    os_log_type_t v26 = v7;
    uint64_t v9 = "%{public}s %s setsockopt TCP_KEEPALIVE failed %{darwin.errno}d";
    goto LABEL_23;
  }

  if (setsockopt(a1[43], 6, 257, &v19, 4u) < 0)
  {
    unsigned int v7 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    id v8 = (os_log_s *)gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR)) {
      return v7;
    }
    *(_DWORD *)buf = 136446722;
    BOOL v22 = "nw_protocol_socket_reset_keepalives";
    uint64_t v23 = 2080;
    os_log_type_t v24 = (char *)(a1 + 77);
    BOOL v25 = 1024;
    os_log_type_t v26 = v7;
    uint64_t v9 = "%{public}s %s setsockopt TCP_KEEPINTVL failed %{darwin.errno}d";
    goto LABEL_23;
  }

  uint64_t v17 = a3;
  if ((setsockopt(a1[43], 6, 258, &v17, 4u) & 0x80000000) == 0) {
    return 0LL;
  }
  unsigned int v7 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
  }
  id v8 = (os_log_s *)gconnectionLogObj;
  if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446722;
    BOOL v22 = "nw_protocol_socket_reset_keepalives";
    uint64_t v23 = 2080;
    os_log_type_t v24 = (char *)(a1 + 77);
    BOOL v25 = 1024;
    os_log_type_t v26 = v7;
    uint64_t v9 = "%{public}s %s setsockopt TCP_KEEPCNT failed %{darwin.errno}d";
    goto LABEL_23;
  }

  return v7;
}

    goto LABEL_40;
  }

  if (a2)
  {
    uint64_t v5 = (const void *)v3[8];
    if (v5)
    {
      CFRelease(v5);
      v4[8] = 0LL;
    }

    v4[8] = CFRetain(a2);
    goto LABEL_6;
  }

  __nwlog_obj();
  os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v23 = "nw_proxy_hop_set_client_identity_reference";
  unsigned int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v20 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v23 = "nw_proxy_hop_set_client_identity_reference";
      _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null persistent_reference", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (!v20)
  {
    __nwlog_obj();
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v23 = "nw_proxy_hop_set_client_identity_reference";
      _os_log_impl( &dword_181A5C000,  v8,  v19,  "%{public}s called with null persistent_reference, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  os_log_type_t v15 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  uint64_t v16 = type;
  uint64_t v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v23 = "nw_proxy_hop_set_client_identity_reference";
      _os_log_impl( &dword_181A5C000,  v8,  v16,  "%{public}s called with null persistent_reference, no backtrace",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v23 = "nw_proxy_hop_set_client_identity_reference";
    os_log_type_t v24 = 2082;
    BOOL v25 = v15;
    _os_log_impl( &dword_181A5C000,  v8,  v16,  "%{public}s called with null persistent_reference, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_41;
  }
LABEL_6:
}

    goto LABEL_40;
  }

  if (a2)
  {
    Mutable = (__CFArray *)*((void *)v3 + 9);
    if (!Mutable)
    {
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x189604DB0], 0LL, MEMORY[0x189605228]);
      v4[9] = Mutable;
    }

    CFArrayAppendValue(Mutable, a2);
    goto LABEL_6;
  }

  __nwlog_obj();
  os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v23 = "nw_proxy_hop_add_client_certificate_reference";
  unsigned int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v20 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v23 = "nw_proxy_hop_add_client_certificate_reference";
      _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null persistent_reference", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (!v20)
  {
    __nwlog_obj();
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v23 = "nw_proxy_hop_add_client_certificate_reference";
      _os_log_impl( &dword_181A5C000,  v8,  v19,  "%{public}s called with null persistent_reference, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  os_log_type_t v15 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  uint64_t v16 = type;
  uint64_t v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v23 = "nw_proxy_hop_add_client_certificate_reference";
      _os_log_impl( &dword_181A5C000,  v8,  v16,  "%{public}s called with null persistent_reference, no backtrace",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v23 = "nw_proxy_hop_add_client_certificate_reference";
    os_log_type_t v24 = 2082;
    BOOL v25 = v15;
    _os_log_impl( &dword_181A5C000,  v8,  v16,  "%{public}s called with null persistent_reference, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_41;
  }
LABEL_6:
}

    free(v10);
    goto LABEL_46;
  }

  unsigned int v6 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_path_evaluator);
  unsigned int v7 = v6;
  if (!v6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v9 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    BOOL v36 = "nw_path_create_evaluator_for_browse";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v33 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v11 = (os_log_s *)(id)gLogObj;
      uint64_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v36 = "nw_path_create_evaluator_for_browse";
        _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed",  buf,  0xCu);
      }
    }

    else if (v33)
    {
      os_log_type_t v18 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v11 = (os_log_s *)(id)gLogObj;
      BOOL v19 = type;
      uint64_t v20 = os_log_type_enabled(v11, type);
      if (v18)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v36 = "nw_path_create_evaluator_for_browse";
          os_log_type_t v37 = 2082;
          __int16 v38 = v18;
          _os_log_impl( &dword_181A5C000,  v11,  v19,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v18);
        if (!v10) {
          goto LABEL_46;
        }
        goto LABEL_39;
      }

      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v36 = "nw_path_create_evaluator_for_browse";
        _os_log_impl( &dword_181A5C000,  v11,  v19,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v11 = (os_log_s *)(id)gLogObj;
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v36 = "nw_path_create_evaluator_for_browse";
        _os_log_impl( &dword_181A5C000,  v11,  v24,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_37;
  }

  objc_storeStrong((id *)v6 + 4, a1);
  if (v5) {
    id v8 = (nw_parameters_t)v5;
  }
  else {
    id v8 = nw_parameters_create();
  }
  uint64_t v13 = (void *)*((void *)v7 + 1);
  *((void *)v7 + 1) = v8;

  if ((nw_path_evaluator_evaluate(v7, 0LL) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v14 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    BOOL v36 = "nw_path_create_evaluator_for_browse";
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v33 = 0;
    if (__nwlog_fault(v15, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v16 = (os_log_s *)(id)gLogObj;
        uint64_t v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v36 = "nw_path_create_evaluator_for_browse";
          _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s nw_path_evaluator_evaluate failed", buf, 0xCu);
        }
      }

      else if (v33)
      {
        os_log_type_t v21 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v16 = (os_log_s *)(id)gLogObj;
        BOOL v22 = type;
        uint64_t v23 = os_log_type_enabled(v16, type);
        if (v21)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v36 = "nw_path_create_evaluator_for_browse";
            os_log_type_t v37 = 2082;
            __int16 v38 = v21;
            _os_log_impl( &dword_181A5C000,  v16,  v22,  "%{public}s nw_path_evaluator_evaluate failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v21);
          if (!v15) {
            goto LABEL_45;
          }
          goto LABEL_44;
        }

        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v36 = "nw_path_create_evaluator_for_browse";
          _os_log_impl( &dword_181A5C000,  v16,  v22,  "%{public}s nw_path_evaluator_evaluate failed, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v16 = (os_log_s *)(id)gLogObj;
        BOOL v25 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v36 = "nw_path_create_evaluator_for_browse";
          _os_log_impl( &dword_181A5C000,  v16,  v25,  "%{public}s nw_path_evaluator_evaluate failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v15)
    {
LABEL_45:

      goto LABEL_46;
    }

        goto LABEL_40;
      }

      if (!v21)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_path_flow_get_nexus_key";
          _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null length, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_39;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_path_flow_get_nexus_key";
          _os_log_impl(&dword_181A5C000, v10, v17, "%{public}s called with null length, no backtrace", buf, 0xCu);
        }

        goto LABEL_39;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v24 = "nw_path_flow_get_nexus_key";
        BOOL v25 = 2082;
        os_log_type_t v26 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s called with null length, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_27;
    }
  }

  else
  {
    __nwlog_obj();
    id v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v24 = "nw_path_flow_get_nexus_key";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_path_flow_get_nexus_key";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null flow", buf, 0xCu);
        }

        goto LABEL_39;
      }

      if (!v21)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_path_flow_get_nexus_key";
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null flow, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_39;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      uint64_t v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_path_flow_get_nexus_key";
          _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null flow, no backtrace", buf, 0xCu);
        }

        goto LABEL_39;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v24 = "nw_path_flow_get_nexus_key";
        BOOL v25 = 2082;
        os_log_type_t v26 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null flow, dumping backtrace:%{public}s",  buf,  0x16u);
      }

  if (v27) {
    free(v27);
  }
  flow_inner = 0LL;
LABEL_9:

  return flow_inner;
}

    goto LABEL_40;
  }

  if (v4)
  {
    unsigned int v6 = v3[2];
    if (!v6)
    {
      unsigned int v7 = nw_array_create();
      id v8 = (void *)v3[2];
      v3[2] = v7;

      unsigned int v6 = v3[2];
    }

    nw_array_append(v6, v5);
    goto LABEL_6;
  }

  __nwlog_obj();
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v26 = "nw_path_override_info_add_resolver_config";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v23 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_path_override_info_add_resolver_config";
      _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null resolver_config", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (!v23)
  {
    __nwlog_obj();
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_path_override_info_add_resolver_config";
      _os_log_impl( &dword_181A5C000,  v11,  v22,  "%{public}s called with null resolver_config, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  os_log_type_t v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  BOOL v19 = type;
  uint64_t v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_path_override_info_add_resolver_config";
      _os_log_impl(&dword_181A5C000, v11, v19, "%{public}s called with null resolver_config, no backtrace", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v26 = "nw_path_override_info_add_resolver_config";
    os_log_type_t v27 = 2082;
    char v28 = v18;
    _os_log_impl( &dword_181A5C000,  v11,  v19,  "%{public}s called with null resolver_config, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v18);
  if (v10) {
    goto LABEL_41;
  }
LABEL_6:
}

      os_log_type_t v53 = *((unsigned __int8 *)a3 + *v9);
      if (*((_BYTE *)a3 + *v9)) {
        uint64_t v16 = 0LL;
      }
LABEL_41:
      if (v53) {
        os_log_type_t v54 = 1;
      }
      else {
        os_log_type_t v54 = (v16 & 7) == 4;
      }
      if (v54) {
        goto LABEL_48;
      }
      if ((v16 >> 3) == 1)
      {
        PBReaderReadString();
        uint64_t v12 = (NSString *)objc_claimAutoreleasedReturnValue();
        clientUUID = self->_clientUUID;
        self->_clientUUID = v12;
      }

      else
      {
        os_log_type_t v55 = PBReaderSkipValueWithTag();
        if (!v55) {
          return v55;
        }
      }

      uint64_t v5 = *v4;
      unsigned int v6 = *(void *)((char *)a3 + v5);
      id v8 = *(void *)((char *)a3 + *v7);
      if (v6 >= v8) {
        goto LABEL_48;
      }
    }

    uint64_t v16 = 0LL;
LABEL_38:
    *os_log_type_t v14 = 1;
    goto LABEL_39;
  }

      goto LABEL_40;
    }

    uint64_t v11 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unsigned int v6 = (os_log_s *)(id)gLogObj;
    os_log_type_t v18 = type;
    BOOL v19 = os_log_type_enabled(v6, type);
    if (!v11)
    {
      if (!v19) {
        goto LABEL_39;
      }
      *(_DWORD *)buf = 136446466;
      __int16 v32 = "nw_endpoint_create_with_sock_name";
      uint64_t v33 = 1024;
      uint64_t v34 = v1;
      id v8 = "%{public}s getsockname failed %{darwin.errno}d, no backtrace";
      uint64_t v20 = (sockaddr *)buf;
      os_log_type_t v21 = v6;
      BOOL v22 = v18;
      goto LABEL_37;
    }

    if (v19)
    {
      *(_DWORD *)buf = 136446722;
      __int16 v32 = "nw_endpoint_create_with_sock_name";
      uint64_t v33 = 1024;
      uint64_t v34 = v1;
      os_log_type_t v35 = 2082;
      v36[0] = v11;
      os_log_type_t v14 = "%{public}s getsockname failed %{darwin.errno}d, dumping backtrace:%{public}s";
      os_log_type_t v15 = v6;
      uint64_t v16 = v18;
      uint64_t v17 = 28;
      goto LABEL_28;
    }

    goto LABEL_29;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v2 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    __int16 v32 = "nw_endpoint_create_with_sock_name";
    uint64_t v33 = 1024;
    uint64_t v34 = v1;
    _os_log_impl(&dword_181A5C000, v2, OS_LOG_TYPE_ERROR, "%{public}s getsockname failed %{darwin.errno}d", buf, 0x12u);
  }

  return 0LL;
}

                uint64_t v34 = (a4 & 1) != 0 || [v24 statusCode] == 101;
                os_log_type_t v35 = *(void *)(a1 + 40);
                if (!v35) {
                  goto LABEL_165;
                }
                *(_BYTE *)(v35 + 11) = v34;
                BOOL v36 = *(void *)(a1 + 40);
                if (!v36) {
                  goto LABEL_165;
                }
                if (!*(_BYTE *)(v36 + 13))
                {
LABEL_54:
                  char v43 = *(_BYTE **)(a1 + 40);
                  if (!v43 || !v43[15])
                  {
LABEL_62:
                    objc_msgSend(v43, "multipartMixedReplaceBoundary", v120, v121);
                    v48 = (void *)objc_claimAutoreleasedReturnValue();
                    os_log_type_t v49 = v48 == 0LL;

                    BOOL v50 = *(void *)(a1 + 40);
                    if (!v49)
                    {
                      if (!v50) {
                        goto LABEL_168;
                      }
                      os_log_type_t v51 = *(void **)(v50 + 96);
                      if (!v51)
                      {
LABEL_67:
                        os_log_type_t v54 = *(void *)(v50 + 88);
LABEL_68:
                        (*((void (**)(id, void *, uint64_t))newValue + 2))(newValue, v24, v54);
LABEL_69:

LABEL_70:
LABEL_71:

                        os_log_type_t v10 = v126;
                        goto LABEL_72;
                      }

                      BOOL v52 = (void *)v51[3];
                      v51[3] = 0LL;

                      os_log_type_t v53 = (void *)v51[5];
                      v51[4] = 0LL;
                      v51[5] = 0LL;

                      BOOL v50 = *(void *)(a1 + 40);
                    }

                    if (v50) {
                      goto LABEL_67;
                    }
LABEL_168:
                    os_log_type_t v54 = 0LL;
                    goto LABEL_68;
                  }

                  if ([v24 statusCode] == 304)
                  {
                    os_log_type_t v44 = *(void **)(a1 + 40);
                    if (v44) {
                      os_log_type_t v44 = (void *)v44[13];
                    }
                    os_log_type_t v45 = v44;
                    [v45 response];
                    os_log_type_t v46 = (void *)objc_claimAutoreleasedReturnValue();
                    (*((void (**)(id, void *, void))newValue + 2))(newValue, v46, 0LL);

                    goto LABEL_69;
                  }

                  BOOL v47 = *(void *)(a1 + 40);
                  if (v47)
                  {
                    *(_BYTE *)(v47 + 14) = 0;
                    char v43 = *(_BYTE **)(a1 + 40);
                    goto LABEL_62;
                  }

                            BOOL v52 = *(unsigned __int8 *)(a2 + *v8);
                            if (*(_BYTE *)(a2 + *v8)) {
                              os_log_type_t v15 = 0LL;
                            }
LABEL_41:
                            if (v52) {
                              os_log_type_t v53 = 1;
                            }
                            else {
                              os_log_type_t v53 = (v15 & 7) == 4;
                            }
                            if (v53) {
                              return *(_BYTE *)(a2 + *v8) == 0;
                            }
                            switch((v15 >> 3))
                            {
                              case 1u:
                                *(_BYTE *)(a1 + 44) |= 0x20u;
                                os_log_type_t v54 = *v3;
                                os_log_type_t v55 = *(void *)(a2 + v54);
                                if (v55 == -1LL || v55 >= *(void *)(a2 + *v6))
                                {
                                  os_log_type_t v58 = 0;
                                }

                                else
                                {
                                  char v56 = v55 + 1;
                                  os_log_type_t v57 = *(_BYTE *)(*(void *)(a2 + *v10) + v55);
                                  *(void *)(a2 + v54) = v56;
                                  os_log_type_t v58 = v57 & 0x7F;
                                  if ((v57 & 0x80) == 0) {
                                    goto LABEL_282;
                                  }
                                  os_log_type_t v59 = *v3;
                                  __int16 v60 = *(void *)(a2 + v59);
                                  if (v60 != -1LL && v60 < *(void *)(a2 + *v6))
                                  {
                                    char v61 = *(char *)(*(void *)(a2 + *v10) + v60);
                                    *(void *)(a2 + v59) = v60 + 1;
                                    os_log_type_t v58 = v58 & 0xFFFFC07F | ((v61 & 0x7F) << 7);
                                    if ((v61 & 0x80000000) == 0) {
                                      goto LABEL_282;
                                    }
                                    __int16 v62 = *v3;
                                    int v63 = *(void *)(a2 + v62);
                                    if (v63 != -1LL && v63 < *(void *)(a2 + *v6))
                                    {
                                      uint64_t v64 = *(char *)(*(void *)(a2 + *v10) + v63);
                                      *(void *)(a2 + v62) = v63 + 1;
                                      os_log_type_t v58 = v58 & 0xFFE03FFF | ((v64 & 0x7F) << 14);
                                      if ((v64 & 0x80000000) == 0) {
                                        goto LABEL_282;
                                      }
                                      id v65 = *v3;
                                      BOOL v66 = *(void *)(a2 + v65);
                                      if (v66 != -1LL && v66 < *(void *)(a2 + *v6))
                                      {
                                        os_log_type_t v67 = *(char *)(*(void *)(a2 + *v10) + v66);
                                        *(void *)(a2 + v65) = v66 + 1;
                                        os_log_type_t v58 = v58 & 0xF01FFFFF | ((v67 & 0x7F) << 21);
                                        if ((v67 & 0x80000000) == 0) {
                                          goto LABEL_282;
                                        }
                                        __int16 v68 = *v3;
                                        v69 = *(void *)(a2 + v68);
                                        if (v69 != -1LL && v69 < *(void *)(a2 + *v6))
                                        {
                                          uint64_t v70 = v69 + 1;
                                          os_log_type_t v71 = *(char *)(*(void *)(a2 + *v10) + v69);
                                          *(void *)(a2 + v68) = v70;
                                          v58 |= v71 << 28;
                                          if ((v71 & 0x80000000) == 0) {
                                            goto LABEL_282;
                                          }
                                          v72 = *v3;
                                          __uint64_t v73 = *(void *)(a2 + v72);
                                          if (v73 != -1LL && v73 < *(void *)(a2 + *v6))
                                          {
                                            unint64_t v74 = v73 + 1;
                                            char v75 = *(char *)(*(void *)(a2 + *v10) + v73);
                                            *(void *)(a2 + v72) = v74;
                                            if ((v75 & 0x80000000) == 0) {
                                              goto LABEL_282;
                                            }
                                            __uint64_t v76 = *v3;
                                            v77 = *(void *)(a2 + v76);
                                            if (v77 != -1LL && v77 < *(void *)(a2 + *v6))
                                            {
                                              unint64_t v78 = v77 + 1;
                                              char v79 = *(char *)(*(void *)(a2 + *v10) + v77);
                                              *(void *)(a2 + v76) = v78;
                                              if ((v79 & 0x80000000) == 0) {
                                                goto LABEL_282;
                                              }
                                              v80 = *v3;
                                              v81 = *(void *)(a2 + v80);
                                              if (v81 != -1LL && v81 < *(void *)(a2 + *v6))
                                              {
                                                v82 = v81 + 1;
                                                os_log_type_t v83 = *(char *)(*(void *)(a2 + *v10) + v81);
                                                *(void *)(a2 + v80) = v82;
                                                if ((v83 & 0x80000000) == 0) {
                                                  goto LABEL_282;
                                                }
                                                v84 = *v3;
                                                v85 = *(void *)(a2 + v84);
                                                if (v85 != -1LL && v85 < *(void *)(a2 + *v6))
                                                {
                                                  v86 = v85 + 1;
                                                  os_log_type_t v87 = *(char *)(*(void *)(a2 + *v10) + v85);
                                                  *(void *)(a2 + v84) = v86;
                                                  if ((v87 & 0x80000000) == 0) {
                                                    goto LABEL_282;
                                                  }
                                                  v88 = *v3;
                                                  os_log_type_t v89 = *(void *)(a2 + v88);
                                                  if (v89 != -1LL && v89 < *(void *)(a2 + *v6))
                                                  {
                                                    BOOL v90 = v89 + 1;
                                                    os_log_type_t v91 = *(char *)(*(void *)(a2 + *v10) + v89);
                                                    *(void *)(a2 + v88) = v90;
                                                    if (v91 < 0)
                                                    {
                                                      os_log_type_t v58 = 0;
LABEL_284:
                                                      *(_DWORD *)(a1 + 36) = v58;
                                                      goto LABEL_4;
                                                    }

  if (v8) {
    free(v8);
  }
  uint64_t v5 = 0LL;
LABEL_6:

  return v5;
}

  if (v8) {
    free(v8);
  }
  uint64_t v5 = 0LL;
LABEL_6:

  return v5;
}

  if (v8) {
    free(v8);
  }
  uint64_t v5 = 0LL;
LABEL_6:

  return v5;
}

    free(backtrace_string);
    goto LABEL_50;
  }

  if (!a3)
  {
    __nwlog_obj();
    char v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v36 = "nw_http_compare_metadata";
    os_log_type_t v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v33 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v36 = "nw_http_compare_metadata";
        os_log_type_t v27 = "%{public}s called with null handle2";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    if (!v33)
    {
      __nwlog_obj();
      BOOL v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v36 = "nw_http_compare_metadata";
        os_log_type_t v27 = "%{public}s called with null handle2, backtrace limit exceeded";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    BOOL v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v26 = type;
    __int16 v32 = os_log_type_enabled(v25, type);
    if (!backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v36 = "nw_http_compare_metadata";
        os_log_type_t v27 = "%{public}s called with null handle2, no backtrace";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    if (v32)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v36 = "nw_http_compare_metadata";
      os_log_type_t v37 = 2082;
      __int16 v38 = backtrace_string;
      int v31 = "%{public}s called with null handle2, dumping backtrace:%{public}s";
      goto LABEL_38;
    }

    goto LABEL_39;
  }

  if (*(_DWORD *)(a2 + 48) == *(_DWORD *)(a3 + 48))
  {
    unsigned int v6 = *(void **)(a2 + 24);
    unsigned int v7 = *(void **)(a3 + 24);
    if (v6)
    {
      if (!v7) {
        goto LABEL_19;
      }
      id v8 = v6;
      uint64_t v9 = v7;
      is_equal = _nw_http_fields_is_equal((uint64_t)v8);

      if (!is_equal) {
        goto LABEL_19;
      }
    }

    else if (v7)
    {
      goto LABEL_19;
    }

    uint64_t v11 = *(void **)(a2 + 32);
    uint64_t v12 = *(void **)(a3 + 32);
    if (v11)
    {
      if (!v12) {
        goto LABEL_19;
      }
      uint64_t v13 = v11;
      os_log_type_t v14 = v12;
      os_log_type_t v15 = _nw_http_fields_is_equal((uint64_t)v13);

      if (!v15) {
        goto LABEL_19;
      }
    }

    else if (v12)
    {
      goto LABEL_19;
    }

    uint64_t v16 = *(void **)(a2 + 40);
    uint64_t v17 = *(void **)(a3 + 40);
    if (v16)
    {
      if (v17)
      {
        os_log_type_t v18 = v16;
        BOOL v19 = v17;
        uint64_t v20 = _nw_http_fields_is_equal((uint64_t)v18);

        if (v20) {
          goto LABEL_21;
        }
      }
    }

    else if (!v17)
    {
LABEL_21:
      os_log_type_t v21 = 1LL;
      goto LABEL_20;
    }
  }

    goto LABEL_40;
  }

  id v8 = (id *)v5;
  uint64_t v9 = v8[1];

  if (nw_protocol_copy_http_authentication_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_29_72963);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v9,  nw_protocol_copy_http_authentication_definition_http_authentication_definition);

  if (is_equal_unsafe)
  {
    v25[0] = MEMORY[0x1895F87A8];
    v25[1] = 3221225472LL;
    v25[2] = __nw_http_authentication_options_set_challenge_handler_block_invoke;
    v25[3] = &unk_189BC6710;
    os_log_type_t v27 = v6;
    os_log_type_t v26 = v7;
    nw_protocol_options_access_handle(v8, v25);

    goto LABEL_6;
  }

  __nwlog_obj();
  os_log_type_t v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  int v31 = "nw_http_authentication_options_set_challenge_handler";
  uint64_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v28 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v16 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      int v31 = "nw_http_authentication_options_set_challenge_handler";
      _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s protocol options are not http authentication", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (!v28)
  {
    __nwlog_obj();
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v24 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      int v31 = "nw_http_authentication_options_set_challenge_handler";
      _os_log_impl( &dword_181A5C000,  v13,  v24,  "%{public}s protocol options are not http authentication, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  uint64_t v20 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v21 = type;
  BOOL v22 = os_log_type_enabled(v13, type);
  if (!v20)
  {
    if (v22)
    {
      *(_DWORD *)buf = 136446210;
      int v31 = "nw_http_authentication_options_set_challenge_handler";
      _os_log_impl( &dword_181A5C000,  v13,  v21,  "%{public}s protocol options are not http authentication, no backtrace",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  if (v22)
  {
    *(_DWORD *)buf = 136446466;
    int v31 = "nw_http_authentication_options_set_challenge_handler";
    __int16 v32 = 2082;
    uint64_t v33 = v20;
    _os_log_impl( &dword_181A5C000,  v13,  v21,  "%{public}s protocol options are not http authentication, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v20);
  if (v12) {
    goto LABEL_41;
  }
LABEL_6:
}

    goto LABEL_40;
  }

  uint64_t v5 = (id *)v3;
  unsigned int v6 = v5[1];

  if (nw_protocol_copy_http_authentication_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_29_72963);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_authentication_definition_http_authentication_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1895F87A8];
    v22[1] = 3221225472LL;
    v22[2] = __nw_http_authentication_options_set_credential_storage_block_invoke;
    v22[3] = &unk_189BC6260;
    uint64_t v23 = v4;
    nw_protocol_options_access_handle(v5, v22);

    goto LABEL_6;
  }

  __nwlog_obj();
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v27 = "nw_http_authentication_options_set_credential_storage";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v24 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_authentication_options_set_credential_storage";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s protocol options are not http_authentication", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (!v24)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_authentication_options_set_credential_storage";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s protocol options are not http_authentication, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  uint64_t v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_authentication_options_set_credential_storage";
      _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s protocol options are not http_authentication, no backtrace",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v27 = "nw_http_authentication_options_set_credential_storage";
    char v28 = 2082;
    int v29 = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s protocol options are not http_authentication, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

  if (v8) {
    free(v8);
  }
  uint64_t v5 = 0LL;
LABEL_6:

  return v5;
}

  if (v8) {
    free(v8);
  }
  uint64_t v5 = 0LL;
LABEL_6:

  return v5;
}

    goto LABEL_40;
  }

  uint64_t v5 = (id *)v3;
  unsigned int v6 = v5[1];

  if (nw_protocol_copy_http_authentication_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_29_72963);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_authentication_definition_http_authentication_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1895F87A8];
    v22[1] = 3221225472LL;
    v22[2] = __nw_http_authentication_options_set_appsso_h1_fallback_headers_block_invoke;
    v22[3] = &__block_descriptor_40_e9_B16__0_v8l;
    v22[4] = a2;
    nw_protocol_options_access_handle(v5, v22);
    goto LABEL_6;
  }

  __nwlog_obj();
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v26 = "nw_http_authentication_options_set_appsso_h1_fallback_headers";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v23 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_http_authentication_options_set_appsso_h1_fallback_headers";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s protocol options are not http_authentication", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (!v23)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_http_authentication_options_set_appsso_h1_fallback_headers";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s protocol options are not http_authentication, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  uint64_t v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v26 = "nw_http_authentication_options_set_appsso_h1_fallback_headers";
      _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s protocol options are not http_authentication, no backtrace",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v26 = "nw_http_authentication_options_set_appsso_h1_fallback_headers";
    os_log_type_t v27 = 2082;
    char v28 = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s protocol options are not http_authentication, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

    goto LABEL_40;
  }

  uint64_t v5 = (id *)v3;
  unsigned int v6 = v5[1];

  if (nw_protocol_copy_http_encoding_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_encoding_definition_onceToken, &__block_literal_global_30_73148);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_encoding_definition_http_encoding_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1895F87A8];
    v22[1] = 3221225472LL;
    v22[2] = __nw_http_encoding_options_set_type_block_invoke;
    v22[3] = &__block_descriptor_36_e9_B16__0_v8l;
    uint64_t v23 = a2;
    nw_protocol_options_access_handle(v5, v22);
    goto LABEL_6;
  }

  __nwlog_obj();
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v27 = "nw_http_encoding_options_set_type";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v24 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_encoding_options_set_type";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s protocol options are not http encoding", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (!v24)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_encoding_options_set_type";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s protocol options are not http encoding, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  uint64_t v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_encoding_options_set_type";
      _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s protocol options are not http encoding, no backtrace",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v27 = "nw_http_encoding_options_set_type";
    char v28 = 2082;
    int v29 = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s protocol options are not http encoding, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

  if (v8) {
    free(v8);
  }
  uint64_t v5 = 1LL;
LABEL_6:

  return v5;
}

    goto LABEL_40;
  }

  uint64_t v5 = (id *)v3;
  unsigned int v6 = v5[1];

  if (nw_protocol_copy_http_redirect_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_redirect_definition_onceToken, &__block_literal_global_31_73205);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_redirect_definition_http_redirect_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1895F87A8];
    v22[1] = 3221225472LL;
    v22[2] = __nw_http_redirect_options_set_limit_block_invoke;
    v22[3] = &__block_descriptor_36_e9_B16__0_v8l;
    uint64_t v23 = a2;
    nw_protocol_options_access_handle(v5, v22);
    goto LABEL_6;
  }

  __nwlog_obj();
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v27 = "nw_http_redirect_options_set_limit";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v24 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_redirect_options_set_limit";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s protocol options are not http redirect", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (!v24)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_redirect_options_set_limit";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s protocol options are not http redirect, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  uint64_t v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_redirect_options_set_limit";
      _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s protocol options are not http redirect, no backtrace",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v27 = "nw_http_redirect_options_set_limit";
    char v28 = 2082;
    int v29 = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s protocol options are not http redirect, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

    goto LABEL_40;
  }

  id v8 = (id *)v5;
  uint64_t v9 = v8[1];

  if (nw_protocol_copy_http_redirect_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_redirect_definition_onceToken, &__block_literal_global_31_73205);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v9,  nw_protocol_copy_http_redirect_definition_http_redirect_definition);

  if (is_equal_unsafe)
  {
    v25[0] = MEMORY[0x1895F87A8];
    v25[1] = 3221225472LL;
    v25[2] = __nw_http_redirect_options_set_handler_block_invoke;
    v25[3] = &unk_189BC6710;
    os_log_type_t v27 = v6;
    os_log_type_t v26 = v7;
    nw_protocol_options_access_handle(v8, v25);

    goto LABEL_6;
  }

  __nwlog_obj();
  os_log_type_t v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  int v31 = "nw_http_redirect_options_set_handler";
  uint64_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v28 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v16 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      int v31 = "nw_http_redirect_options_set_handler";
      _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s protocol options are not http redirect", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (!v28)
  {
    __nwlog_obj();
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v24 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      int v31 = "nw_http_redirect_options_set_handler";
      _os_log_impl( &dword_181A5C000,  v13,  v24,  "%{public}s protocol options are not http redirect, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  uint64_t v20 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v21 = type;
  BOOL v22 = os_log_type_enabled(v13, type);
  if (!v20)
  {
    if (v22)
    {
      *(_DWORD *)buf = 136446210;
      int v31 = "nw_http_redirect_options_set_handler";
      _os_log_impl( &dword_181A5C000,  v13,  v21,  "%{public}s protocol options are not http redirect, no backtrace",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  if (v22)
  {
    *(_DWORD *)buf = 136446466;
    int v31 = "nw_http_redirect_options_set_handler";
    __int16 v32 = 2082;
    uint64_t v33 = v20;
    _os_log_impl( &dword_181A5C000,  v13,  v21,  "%{public}s protocol options are not http redirect, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v20);
  if (v12) {
    goto LABEL_41;
  }
LABEL_6:
}

  if (v8) {
    free(v8);
  }
  uint64_t v5 = 0LL;
LABEL_6:

  return v5;
}

    goto LABEL_40;
  }

  uint64_t v5 = (id *)v3;
  unsigned int v6 = v5[1];

  if (nw_protocol_copy_http_retry_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_retry_definition_onceToken, &__block_literal_global_32_73298);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_retry_definition_http_retry_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1895F87A8];
    v22[1] = 3221225472LL;
    v22[2] = __nw_http_retry_options_set_limit_block_invoke;
    v22[3] = &__block_descriptor_36_e9_B16__0_v8l;
    uint64_t v23 = a2;
    nw_protocol_options_access_handle(v5, v22);
    goto LABEL_6;
  }

  __nwlog_obj();
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v27 = "nw_http_retry_options_set_limit";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v24 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_retry_options_set_limit";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s protocol options are not http retry", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (!v24)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_retry_options_set_limit";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s protocol options are not http retry, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  uint64_t v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_retry_options_set_limit";
      _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s protocol options are not http retry, no backtrace",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v27 = "nw_http_retry_options_set_limit";
    char v28 = 2082;
    int v29 = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s protocol options are not http retry, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

  if (v8) {
    free(v8);
  }
  uint64_t v5 = 0LL;
LABEL_6:

  return v5;
}

    goto LABEL_40;
  }

  uint64_t v5 = (id *)v3;
  unsigned int v6 = v5[1];

  if (nw_protocol_copy_http_security_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_security_definition_onceToken, &__block_literal_global_33_73355);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_security_definition_http_security_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1895F87A8];
    v22[1] = 3221225472LL;
    v22[2] = __nw_http_security_options_set_hsts_storage_block_invoke;
    v22[3] = &unk_189BC6260;
    uint64_t v23 = v4;
    nw_protocol_options_access_handle(v5, v22);

    goto LABEL_6;
  }

  __nwlog_obj();
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v27 = "nw_http_security_options_set_hsts_storage";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v24 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_security_options_set_hsts_storage";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s protocol options are not http security", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (!v24)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_security_options_set_hsts_storage";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s protocol options are not http security, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  uint64_t v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_security_options_set_hsts_storage";
      _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s protocol options are not http security, no backtrace",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v27 = "nw_http_security_options_set_hsts_storage";
    char v28 = 2082;
    int v29 = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s protocol options are not http security, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

    goto LABEL_40;
  }

  id v8 = (id *)v5;
  uint64_t v9 = v8[1];

  if (nw_protocol_copy_http_security_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_security_definition_onceToken, &__block_literal_global_33_73355);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v9,  nw_protocol_copy_http_security_definition_http_security_definition);

  if (is_equal_unsafe)
  {
    v25[0] = MEMORY[0x1895F87A8];
    v25[1] = 3221225472LL;
    v25[2] = __nw_http_security_options_set_handler_block_invoke;
    v25[3] = &unk_189BC6710;
    os_log_type_t v27 = v6;
    os_log_type_t v26 = v7;
    nw_protocol_options_access_handle(v8, v25);

    goto LABEL_6;
  }

  __nwlog_obj();
  os_log_type_t v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  int v31 = "nw_http_security_options_set_handler";
  uint64_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v28 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v16 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      int v31 = "nw_http_security_options_set_handler";
      _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s protocol options are not http security", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (!v28)
  {
    __nwlog_obj();
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v24 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      int v31 = "nw_http_security_options_set_handler";
      _os_log_impl( &dword_181A5C000,  v13,  v24,  "%{public}s protocol options are not http security, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  uint64_t v20 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v21 = type;
  BOOL v22 = os_log_type_enabled(v13, type);
  if (!v20)
  {
    if (v22)
    {
      *(_DWORD *)buf = 136446210;
      int v31 = "nw_http_security_options_set_handler";
      _os_log_impl( &dword_181A5C000,  v13,  v21,  "%{public}s protocol options are not http security, no backtrace",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  if (v22)
  {
    *(_DWORD *)buf = 136446466;
    int v31 = "nw_http_security_options_set_handler";
    __int16 v32 = 2082;
    uint64_t v33 = v20;
    _os_log_impl( &dword_181A5C000,  v13,  v21,  "%{public}s protocol options are not http security, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v20);
  if (v12) {
    goto LABEL_41;
  }
LABEL_6:
}

  if (v8) {
    free(v8);
  }
  uint64_t v5 = 0LL;
LABEL_6:

  return v5;
}

  if (v8) {
    free(v8);
  }
  uint64_t v5 = 0LL;
LABEL_6:

  return v5;
}

  if (v8) {
    free(v8);
  }
  uint64_t v5 = 0LL;
LABEL_6:

  return v5;
}

    goto LABEL_40;
  }

  uint64_t v5 = (id *)v3;
  unsigned int v6 = v5[1];

  if (nw_protocol_copy_http_cookie_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_cookie_definition_onceToken, &__block_literal_global_13_72893);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_cookie_definition_http_cookie_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1895F87A8];
    v22[1] = 3221225472LL;
    v22[2] = __nw_http_cookie_options_set_cookie_storage_block_invoke;
    v22[3] = &unk_189BC6260;
    uint64_t v23 = v4;
    nw_protocol_options_access_handle(v5, v22);

    goto LABEL_6;
  }

  __nwlog_obj();
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v27 = "nw_http_cookie_options_set_cookie_storage";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v24 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_cookie_options_set_cookie_storage";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s protocol options are not http_cookie", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (!v24)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_cookie_options_set_cookie_storage";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s protocol options are not http_cookie, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  uint64_t v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_cookie_options_set_cookie_storage";
      _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s protocol options are not http_cookie, no backtrace",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v27 = "nw_http_cookie_options_set_cookie_storage";
    char v28 = 2082;
    int v29 = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s protocol options are not http_cookie, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

  if (v8) {
    free(v8);
  }
  uint64_t v5 = 0LL;
LABEL_6:

  return v5;
}

  if (v8) {
    free(v8);
  }
  uint64_t v5 = 0LL;
LABEL_6:

  return v5;
}

  if (v8) {
    free(v8);
  }
  uint64_t v5 = 0LL;
LABEL_6:

  return v5;
}

    goto LABEL_40;
  }

  uint64_t v5 = (id *)v3;
  unsigned int v6 = v5[1];

  if (nw_protocol_copy_http_alt_svc_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_alt_svc_definition_onceToken, &__block_literal_global_14_72923);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_alt_svc_definition_http_alt_svc_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1895F87A8];
    v22[1] = 3221225472LL;
    v22[2] = __nw_http_alt_svc_options_set_alt_svc_storage_block_invoke;
    v22[3] = &unk_189BC6260;
    uint64_t v23 = v4;
    nw_protocol_options_access_handle(v5, v22);

    goto LABEL_6;
  }

  __nwlog_obj();
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v27 = "nw_http_alt_svc_options_set_alt_svc_storage";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v24 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_alt_svc_options_set_alt_svc_storage";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s protocol options are not http_alt_svc", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (!v24)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_alt_svc_options_set_alt_svc_storage";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s protocol options are not http_alt_svc, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  uint64_t v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_alt_svc_options_set_alt_svc_storage";
      _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s protocol options are not http_alt_svc, no backtrace",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v27 = "nw_http_alt_svc_options_set_alt_svc_storage";
    char v28 = 2082;
    int v29 = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s protocol options are not http_alt_svc, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

    free(v21);
    if (!v11) {
      goto LABEL_9;
    }
    goto LABEL_60;
  }

  v29[0] = MEMORY[0x1895F87A8];
  v29[1] = 3221225472LL;
  v29[2] = __nw_http_metadata_enumerate_headers_block_invoke;
  v29[3] = &unk_189BC6110;
  id v8 = v4;
  v29[4] = v8;
  uint64_t v9 = *((void *)v5 + 4);
  if (v9) {
    __nw_http_metadata_enumerate_headers_block_invoke((uint64_t)v29, v9);
  }

LABEL_9:
}

  if (v8) {
    free(v8);
  }
  uint64_t v5 = 0LL;
LABEL_6:

  return v5;
}

  if (v8) {
    free(v8);
  }
  uint64_t v5 = 0LL;
LABEL_6:

  return v5;
}

    goto LABEL_40;
  }

  uint64_t v5 = (id *)v3;
  unsigned int v6 = v5[1];

  if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72514);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_messaging_definition_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1895F87A8];
    v22[1] = 3221225472LL;
    v22[2] = __nw_http_messaging_options_set_http1_options_block_invoke;
    v22[3] = &unk_189BC6260;
    uint64_t v23 = v4;
    nw_protocol_options_access_handle(v5, v22);

    goto LABEL_6;
  }

  __nwlog_obj();
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v27 = "nw_http_messaging_options_set_http1_options";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v24 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_messaging_options_set_http1_options";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s protocol options are not http_messaging", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (!v24)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_messaging_options_set_http1_options";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s protocol options are not http_messaging, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  uint64_t v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_messaging_options_set_http1_options";
      _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s protocol options are not http_messaging, no backtrace",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v27 = "nw_http_messaging_options_set_http1_options";
    char v28 = 2082;
    int v29 = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s protocol options are not http_messaging, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

    goto LABEL_40;
  }

  uint64_t v5 = (id *)v3;
  unsigned int v6 = v5[1];

  if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72514);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_messaging_definition_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1895F87A8];
    v22[1] = 3221225472LL;
    v22[2] = __nw_http_messaging_options_set_http2_options_block_invoke;
    v22[3] = &unk_189BC6260;
    uint64_t v23 = v4;
    nw_protocol_options_access_handle(v5, v22);

    goto LABEL_6;
  }

  __nwlog_obj();
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v27 = "nw_http_messaging_options_set_http2_options";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v24 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_messaging_options_set_http2_options";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s protocol options are not http_messaging", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (!v24)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_messaging_options_set_http2_options";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s protocol options are not http_messaging, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  uint64_t v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_messaging_options_set_http2_options";
      _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s protocol options are not http_messaging, no backtrace",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v27 = "nw_http_messaging_options_set_http2_options";
    char v28 = 2082;
    int v29 = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s protocol options are not http_messaging, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

    goto LABEL_40;
  }

  uint64_t v5 = (id *)v3;
  unsigned int v6 = v5[1];

  if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72514);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_messaging_definition_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1895F87A8];
    v22[1] = 3221225472LL;
    v22[2] = __nw_http_messaging_options_set_http3_options_block_invoke;
    v22[3] = &unk_189BC6260;
    uint64_t v23 = v4;
    nw_protocol_options_access_handle(v5, v22);

    goto LABEL_6;
  }

  __nwlog_obj();
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v27 = "nw_http_messaging_options_set_http3_options";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v24 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_messaging_options_set_http3_options";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s protocol options are not http_messaging", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (!v24)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_messaging_options_set_http3_options";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s protocol options are not http_messaging, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  uint64_t v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_messaging_options_set_http3_options";
      _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s protocol options are not http_messaging, no backtrace",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v27 = "nw_http_messaging_options_set_http3_options";
    char v28 = 2082;
    int v29 = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s protocol options are not http_messaging, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

    goto LABEL_40;
  }

  uint64_t v5 = (id *)v3;
  unsigned int v6 = v5[1];

  if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72514);
  }
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v6,  nw_protocol_copy_http_messaging_definition_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1895F87A8];
    v22[1] = 3221225472LL;
    v22[2] = __nw_http_messaging_options_set_client_metadata_block_invoke;
    v22[3] = &unk_189BC6260;
    uint64_t v23 = v4;
    nw_protocol_options_access_handle(v5, v22);

    goto LABEL_6;
  }

  __nwlog_obj();
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v27 = "nw_http_messaging_options_set_client_metadata";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v24 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_messaging_options_set_client_metadata";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s protocol options are not http_messaging", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (!v24)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_messaging_options_set_client_metadata";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s protocol options are not http_messaging, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  uint64_t v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_http_messaging_options_set_client_metadata";
      _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s protocol options are not http_messaging, no backtrace",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v27 = "nw_http_messaging_options_set_client_metadata";
    char v28 = 2082;
    int v29 = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s protocol options are not http_messaging, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

    _os_log_impl(&dword_181A5C000, v9, v10, v11, buf, 0xCu);
    goto LABEL_40;
  }

  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v5 = (v4 - v3) >> 3;
  unsigned int v6 = a1[5];
  if (v5 != (a1[6] - v6) >> 3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v19 = "nw_parallel_array_find";
    id v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v16 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v19 = "nw_parallel_array_find";
      uint64_t v11 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size())";
      goto LABEL_39;
    }

    if (!v16)
    {
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v19 = "nw_parallel_array_find";
      uint64_t v11 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), backtrace limit exceeded";
      goto LABEL_39;
    }

    os_log_type_t v14 = (char *)__nw_create_backtrace_string();
    uint64_t v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    os_log_type_t v15 = os_log_type_enabled(v9, type);
    if (!v14)
    {
      if (!v15) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v19 = "nw_parallel_array_find";
      uint64_t v11 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), no backtrace";
      goto LABEL_39;
    }

    if (v15)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v19 = "nw_parallel_array_find";
      uint64_t v20 = 2082;
      os_log_type_t v21 = v14;
      _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v14);
LABEL_40:
    if (!v8) {
      return 0xFFFFFFFFLL;
    }
LABEL_41:
    free(v8);
    return 0xFFFFFFFFLL;
  }

  if (v4 == v3) {
    return -1LL;
  }
  BOOL result = 0LL;
  if (v5 <= 1) {
    uint64_t v5 = 1LL;
  }
  while (*(void *)(v3 + 8 * result) != a2 || *(void *)(v6 + 8 * result) != a3)
  {
    if (v5 == ++result) {
      return -1LL;
    }
  }

  return result;
}

        goto LABEL_40;
      }

      if (!v21)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_connection_get_tcp_info_for_connected_endpoint_locked";
          _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null tcp_info, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_39;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_connection_get_tcp_info_for_connected_endpoint_locked";
          _os_log_impl(&dword_181A5C000, v10, v17, "%{public}s called with null tcp_info, no backtrace", buf, 0xCu);
        }

        goto LABEL_39;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v24 = "nw_connection_get_tcp_info_for_connected_endpoint_locked";
        BOOL v25 = 2082;
        os_log_type_t v26 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s called with null tcp_info, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_27;
    }
  }

  else
  {
    __nwlog_obj();
    id v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v24 = "nw_connection_get_tcp_info_for_connected_endpoint_locked";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_connection_get_tcp_info_for_connected_endpoint_locked";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null connection", buf, 0xCu);
        }

        goto LABEL_39;
      }

      if (!v21)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_connection_get_tcp_info_for_connected_endpoint_locked";
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_39;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      uint64_t v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_connection_get_tcp_info_for_connected_endpoint_locked";
          _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }

        goto LABEL_39;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v24 = "nw_connection_get_tcp_info_for_connected_endpoint_locked";
        BOOL v25 = 2082;
        os_log_type_t v26 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
      }

          free(v13);
          goto LABEL_10;
        }

        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          int v31 = "nw_connection_has_proxy_attempt_locked_on_nw_queue";
          _os_log_impl( &dword_181A5C000,  v14,  v17,  "%{public}s Cannot check proxy endpoint without parent endpoint handler, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = (os_log_s *)(id)gLogObj;
        BOOL v19 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          int v31 = "nw_connection_has_proxy_attempt_locked_on_nw_queue";
          _os_log_impl( &dword_181A5C000,  v14,  v19,  "%{public}s Cannot check proxy endpoint without parent endpoint handler, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v13) {
      goto LABEL_10;
    }
    goto LABEL_39;
  }

  __nwlog_obj();
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  int v31 = "nw_connection_has_proxy_attempt_locked_on_nw_queue";
  os_log_type_t v21 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v28 = 0;
  if (__nwlog_fault(v21, &type, &v28))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        int v31 = "nw_connection_has_proxy_attempt_locked_on_nw_queue";
        _os_log_impl(&dword_181A5C000, v22, v23, "%{public}s called with null connection", buf, 0xCu);
      }
    }

    else if (v28)
    {
      os_log_type_t v24 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v25 = type;
      os_log_type_t v26 = os_log_type_enabled(v22, type);
      if (v24)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          int v31 = "nw_connection_has_proxy_attempt_locked_on_nw_queue";
          __int16 v32 = 2082;
          *(void *)uint64_t v33 = v24;
          _os_log_impl( &dword_181A5C000,  v22,  v25,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v24);
        goto LABEL_56;
      }

      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        int v31 = "nw_connection_has_proxy_attempt_locked_on_nw_queue";
        _os_log_impl(&dword_181A5C000, v22, v25, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        int v31 = "nw_connection_has_proxy_attempt_locked_on_nw_queue";
        _os_log_impl( &dword_181A5C000,  v22,  v27,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }
}

    if (!v13)
    {
LABEL_41:
      os_log_type_t v10 = 1;
      goto LABEL_42;
    }

  if (v11) {
    free(v11);
  }
LABEL_9:
}

      uint64_t v3 = 1;
LABEL_40:
      if ((*(_WORD *)(a1 + 388) & 0x2000) != 0)
      {
        if ((*(_WORD *)(a1 + 388) & 0x8000) == 0 && gLogDatapath)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          os_log_type_t v53 = (os_log_s *)gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
          {
            os_log_type_t v54 = *(_DWORD *)(a1 + 368);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http2_session_send";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = a1 + 390;
            *(_WORD *)&buf[22] = 2080;
            *(void *)&_BYTE buf[24] = " ";
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v54;
            _os_log_impl( &dword_181A5C000,  v53,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> cannot send any more, returning",  buf,  0x26u);
          }
        }

        LOWORD(v7) = *(_WORD *)(a1 + 388);
        goto LABEL_73;
      }

      if (*(unsigned __int16 *)(a1 + 374) < 6u)
      {
        if ((*(_WORD *)(a1 + 388) & 0x4000) == 0)
        {
          *(_WORD *)(a1 + 388) |= 0x4000u;
          BOOL v30 = *(void *)(a1 + 352);
          int v31 = *(void **)(a1 + 128);
          v55[0] = v4;
          v55[1] = 0x40000000LL;
          v55[2] = ___ZL21nw_http2_session_sendP17nw_protocol_http2_block_invoke;
          v55[3] = &unk_189BC7B98;
          v55[4] = v30;
          nw_queue_context_async(v31, v55);
        }
      }

      else
      {
        nw_http2_finalize_written_output_frames(a1);
      }

      nw_http2_drain_output_frames(a1);
      __int16 v32 = *(__int16 *)(a1 + 388);
      if (v32 < 0)
      {
        if ((v32 & 0x800) == 0) {
          goto LABEL_48;
        }
LABEL_8:
        *(_WORD *)(a1 + 388) = v32 & 0xF7FF;
        uint64_t v5 = *(char **)(a1 + 152);
        *(void *)buf = v4;
        *(void *)&uint8_t buf[8] = 0x40000000LL;
        *(void *)&buf[16] = ___ZL41nw_http2_deliver_pending_output_availableP17nw_protocol_http2_block_invoke;
        *(void *)&_BYTE buf[24] = &__block_descriptor_tmp_28_81764;
        *(void *)&buf[32] = a1;
        nw_hash_table_apply(v5, (uint64_t)buf);
      }

      else
      {
        if (gLogDatapath)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          os_log_type_t v37 = (os_log_s *)gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
          {
            __int16 v38 = *(_DWORD *)(a1 + 368);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http2_deliver_pending_output_available";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = a1 + 390;
            *(_WORD *)&buf[22] = 2080;
            *(void *)&_BYTE buf[24] = " ";
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v38;
            _os_log_impl(&dword_181A5C000, v37, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
          }
        }

        LOWORD(v32) = *(_WORD *)(a1 + 388);
        if ((v32 & 0x800) != 0) {
          goto LABEL_8;
        }
LABEL_48:
        if ((v32 & 0x8000) == 0 && gLogDatapath)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          uint64_t v33 = (os_log_s *)gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v34 = *(_DWORD *)(a1 + 368);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "nw_http2_deliver_pending_output_available";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = a1 + 390;
            *(_WORD *)&buf[22] = 2080;
            *(void *)&_BYTE buf[24] = " ";
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v34;
            _os_log_impl( &dword_181A5C000,  v33,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> no streams have output available pending, nothing to do",  buf,  0x26u);
          }
        }
      }
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v11 = nghttp2_strerror();
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_http2_session_send";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v9;
    *(_WORD *)&buf[18] = 2082;
    *(void *)&buf[20] = v11;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v56 = 0;
    if (__nwlog_fault(v12, &type, &v56))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v13 = gLogObj;
        os_log_type_t v14 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_37;
        }
        os_log_type_t v15 = nghttp2_strerror();
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http2_session_send";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v9;
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = v15;
        uint64_t v16 = (os_log_s *)v13;
        uint64_t v17 = v14;
        os_log_type_t v18 = "%{public}s nghttp2_session_send failed: %d (%{public}s) failed";
        goto LABEL_36;
      }

      if (!v56)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v26 = gLogObj;
        os_log_type_t v27 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_37;
        }
        char v28 = nghttp2_strerror();
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http2_session_send";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v9;
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = v28;
        uint64_t v16 = (os_log_s *)v26;
        uint64_t v17 = v27;
        os_log_type_t v18 = "%{public}s nghttp2_session_send failed: %d (%{public}s) failed, backtrace limit exceeded";
        goto LABEL_36;
      }

      os_log_type_t v21 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v22 = (os_log_s *)gLogObj;
      uint64_t v23 = type;
      os_log_type_t v24 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v21)
      {
        if (v24)
        {
          BOOL v25 = nghttp2_strerror();
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http2_session_send";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v9;
          *(_WORD *)&buf[18] = 2082;
          *(void *)&buf[20] = v25;
          *(_WORD *)&buf[28] = 2082;
          *(void *)&buf[30] = v21;
          _os_log_impl( &dword_181A5C000,  v22,  v23,  "%{public}s nghttp2_session_send failed: %d (%{public}s) failed, dumping backtrace:%{public}s",  buf,  0x26u);
        }

        free(v21);
        goto LABEL_37;
      }

      if (v24)
      {
        int v29 = nghttp2_strerror();
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http2_session_send";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v9;
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = v29;
        uint64_t v16 = v22;
        uint64_t v17 = v23;
        os_log_type_t v18 = "%{public}s nghttp2_session_send failed: %d (%{public}s) failed, no backtrace";
LABEL_36:
        _os_log_impl(&dword_181A5C000, v16, v17, v18, buf, 0x1Cu);
      }
    }

        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v26 = (os_log_s *)gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
        {
          os_log_type_t v27 = *((_DWORD *)v6 + 92);
          char v28 = nw_hash_table_count(*((void *)v6 + 19), v25);
          *(_DWORD *)buf = 136447490;
          v106 = "nw_http2_remove_input_handler";
          v107 = 2082;
          v108 = v6 + 390;
          __int16 v109 = 2080;
          __uint64_t v110 = " ";
          __int16 v111 = 1024;
          uint64_t v112 = v27;
          __int16 v113 = 2048;
          *(void *)v114 = a2;
          *(_WORD *)&v114[8] = 1024;
          *(_DWORD *)&v114[10] = v28;
          _os_log_impl( &dword_181A5C000,  v26,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> removed input handler %p, now have %u input handlers",  buf,  0x36u);
        }

        goto LABEL_63;
      }

      if (((*(unsigned __int16 *)(v8 + 188) | (*(unsigned __int8 *)(v8 + 190) << 16)) & 0x80000) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        int v29 = (os_log_s *)gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
        {
          int v31 = *(_DWORD *)(v8 + 176);
          BOOL v30 = *(_DWORD *)(v8 + 180);
          *(_DWORD *)buf = 136447490;
          v106 = "nw_http2_remove_input_handler";
          v107 = 2082;
          v108 = (char *)(v8 + 191);
          __int16 v109 = 2080;
          __uint64_t v110 = " ";
          __int16 v111 = 1024;
          uint64_t v112 = v30;
          __int16 v113 = 1024;
          *(_DWORD *)v114 = v31;
          *(_WORD *)&v114[4] = 2048;
          *(void *)&v114[6] = a2;
          _os_log_impl( &dword_181A5C000,  v29,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u:s%d> unable to remove protocol %p from protocol table",  buf,  0x36u);
        }
      }

      nw_protocol_set_output_handler((uint64_t)a2, 0LL);
    }

    __int16 v32 = *(unsigned __int16 *)(v8 + 188) | (*(unsigned __int8 *)(v8 + 190) << 16);
    if (*(_BYTE *)(v8 + 191))
    {
      if ((v32 & 0x80000) != 0) {
        goto LABEL_62;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v33 = gconnectionLogObj;
      if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_62;
      }
      os_log_type_t v35 = *(_DWORD *)(v8 + 176);
      BOOL v36 = *(_DWORD *)(v8 + 180);
      os_log_type_t v37 = nw_hash_table_count(*((void *)v6 + 19), v34);
      *(_DWORD *)buf = 136448002;
      v106 = "nw_http2_remove_input_handler";
      v107 = 2082;
      v108 = (char *)(v8 + 191);
      __int16 v109 = 2080;
      __uint64_t v110 = " ";
      __int16 v111 = 1024;
      uint64_t v112 = v36;
      uint64_t v5 = &qword_18C45F000;
      __int16 v113 = 1024;
      *(_DWORD *)v114 = v35;
      *(_WORD *)&v114[4] = 2048;
      *(void *)&v114[6] = a2;
      *(_WORD *)&v114[14] = 2080;
      *(void *)&v114[16] = v8 + 191;
      uint64_t v115 = 1024;
      v116 = v37;
      __int16 v38 = "%{public}s %{public}s%s<i%u:s%d> removed input handler %p, originally from %s, now have %u input handlers";
      os_log_type_t v39 = (os_log_s *)v33;
      os_log_type_t v40 = 70;
    }

    else
    {
      if ((v32 & 0x80000) != 0) {
        goto LABEL_62;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      os_log_type_t v41 = gconnectionLogObj;
      if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_62;
      }
      os_log_type_t v44 = *(_DWORD *)(v8 + 176);
      char v43 = *(_DWORD *)(v8 + 180);
      os_log_type_t v45 = nw_hash_table_count(*((void *)v6 + 19), v42);
      *(_DWORD *)buf = 136447746;
      v106 = "nw_http2_remove_input_handler";
      v107 = 2082;
      v108 = (char *)(v8 + 191);
      __int16 v109 = 2080;
      __uint64_t v110 = " ";
      __int16 v111 = 1024;
      uint64_t v112 = v43;
      __int16 v113 = 1024;
      *(_DWORD *)v114 = v44;
      uint64_t v5 = &qword_18C45F000;
      *(_WORD *)&v114[4] = 2048;
      *(void *)&v114[6] = a2;
      *(_WORD *)&v114[14] = 1024;
      *(_DWORD *)&v114[16] = v45;
      __int16 v38 = "%{public}s %{public}s%s<i%u:s%d> removed input handler %p, now have %u input handlers";
      os_log_type_t v39 = (os_log_s *)v41;
      os_log_type_t v40 = 60;
    }

    _os_log_impl(&dword_181A5C000, v39, OS_LOG_TYPE_DEBUG, v38, buf, v40);
LABEL_62:
    nw_http2_stream_destroy((void **)v8);
    goto LABEL_63;
  }

  if ((*((__int16 *)v6 + 194) & 0x80000000) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v11 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = *((_DWORD *)v6 + 92);
      *(_DWORD *)buf = 136447234;
      v106 = "nw_http2_remove_input_handler";
      v107 = 2082;
      v108 = v6 + 390;
      __int16 v109 = 2080;
      __uint64_t v110 = " ";
      __int16 v111 = 1024;
      uint64_t v112 = v12;
      __int16 v113 = 2048;
      *(void *)v114 = a2;
      _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u> output handler context doesn't exist on protocol %p",  buf,  0x30u);
    }
  }

    _os_log_impl(&dword_181A5C000, v4, v5, v6, buf, 0xCu);
    goto LABEL_40;
  }

  handle = a1->handle;
  if (handle)
  {
    if (((__int16)handle[97] & 0x80000000) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      unsigned int v7 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        id v8 = handle[92];
        *(_DWORD *)buf = 136446978;
        uint64_t v16 = "nw_protocol_http2_input_available";
        uint64_t v17 = 2082;
        os_log_type_t v18 = (char *)handle + 390;
        BOOL v19 = 2080;
        uint64_t v20 = " ";
        os_log_type_t v21 = 1024;
        BOOL v22 = v8;
        _os_log_impl(&dword_181A5C000, v7, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
      }
    }

    if ((handle[97] & 0x1000) == 0) {
      nw_protocol_http2_process_input((uint64_t)handle);
    }
    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v16 = "nw_protocol_http2_input_available";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v13 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v4 = (os_log_s *)__nwlog_obj();
    uint64_t v5 = type;
    if (!os_log_type_enabled(v4, type)) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v16 = "nw_protocol_http2_input_available";
    unsigned int v6 = "%{public}s called with null http2";
    goto LABEL_39;
  }

  if (!v13)
  {
    uint64_t v4 = (os_log_s *)__nwlog_obj();
    uint64_t v5 = type;
    if (!os_log_type_enabled(v4, type)) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v16 = "nw_protocol_http2_input_available";
    unsigned int v6 = "%{public}s called with null http2, backtrace limit exceeded";
    goto LABEL_39;
  }

  uint64_t v11 = (char *)__nw_create_backtrace_string();
  uint64_t v4 = (os_log_s *)__nwlog_obj();
  uint64_t v5 = type;
  uint64_t v12 = os_log_type_enabled(v4, type);
  if (!v11)
  {
    if (!v12) {
      goto LABEL_40;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v16 = "nw_protocol_http2_input_available";
    unsigned int v6 = "%{public}s called with null http2, no backtrace";
    goto LABEL_39;
  }

  if (v12)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v16 = "nw_protocol_http2_input_available";
    uint64_t v17 = 2082;
    os_log_type_t v18 = v11;
    _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null http2, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v11);
  if (v3) {
    goto LABEL_41;
  }
}

      BOOL v52 = *((unsigned __int8 *)a3 + *v9);
      if (*((_BYTE *)a3 + *v9)) {
        os_log_type_t v15 = 0LL;
      }
LABEL_41:
      if (v52) {
        os_log_type_t v53 = 1;
      }
      else {
        os_log_type_t v53 = (v15 & 7) == 4;
      }
      if (v53) {
        goto LABEL_49;
      }
      if ((v15 >> 3) == 1)
      {
        os_log_type_t v54 = objc_alloc_init(&OBJC_CLASS___NWPBPath);
        objc_storeStrong((id *)&self->_responsePath, v54);
        if (!PBReaderPlaceMark() || (NWPBPathReadFrom((uint64_t)v54, (uint64_t)a3) & 1) == 0)
        {

          LOBYTE(v12) = 0;
          return v12;
        }

        PBReaderRecallMark();
      }

      else
      {
        uint64_t v12 = PBReaderSkipValueWithTag();
        if (!v12) {
          return v12;
        }
      }

      uint64_t v5 = *v4;
      unsigned int v6 = *(void *)((char *)a3 + v5);
      id v8 = *(void *)((char *)a3 + *v7);
      if (v6 >= v8) {
        goto LABEL_49;
      }
    }

    os_log_type_t v15 = 0LL;
LABEL_38:
    *uint64_t v13 = 1;
    goto LABEL_39;
  }

    goto LABEL_40;
  }

  if (a2)
  {
    if (!v3[13])
    {
      uint64_t v5 = nw_array_create();
      unsigned int v6 = (void *)v4[13];
      v4[13] = v5;
    }

    [NSString stringWithCString:a2 encoding:1];
    unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue();
    nw_array_append(v4[13], v7);

    goto LABEL_6;
  }

  __nwlog_obj();
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v25 = "nw_browse_descriptor_add_device_filter";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v22 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v25 = "nw_browse_descriptor_add_device_filter";
      _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null device_filters", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (!v22)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v25 = "nw_browse_descriptor_add_device_filter";
      _os_log_impl( &dword_181A5C000,  v10,  v21,  "%{public}s called with null device_filters, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  uint64_t v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      BOOL v25 = "nw_browse_descriptor_add_device_filter";
      _os_log_impl(&dword_181A5C000, v10, v18, "%{public}s called with null device_filters, no backtrace", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v25 = "nw_browse_descriptor_add_device_filter";
    os_log_type_t v26 = 2082;
    os_log_type_t v27 = v17;
    _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s called with null device_filters, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

    goto LABEL_40;
  }

  if (v6)
  {
    nw_connection_group_set_queue(v6, v5[3]);
    id v8 = MEMORY[0x1895F87A8];
    *(void *)buf = MEMORY[0x1895F87A8];
    *(void *)&uint8_t buf[8] = 3221225472LL;
    *(void *)&buf[16] = ___ZL32nw_masque_connection_group_startP27NWConcrete_nw_masque_serverPU33objcproto22OS_nw_connection_group8NSObject_block_invoke;
    os_log_type_t v39 = &unk_189BC9468;
    uint64_t v9 = v5;
    os_log_type_t v40 = v9;
    os_log_type_t v10 = v7;
    os_log_type_t v41 = v10;
    nw_connection_group_set_new_connection_handler(v10, buf);
    state_changed_handler[0] = v8;
    state_changed_handler[1] = 3221225472LL;
    state_changed_handler[2] = ___ZL32nw_masque_connection_group_startP27NWConcrete_nw_masque_serverPU33objcproto22OS_nw_connection_group8NSObject_block_invoke_100;
    state_changed_handler[3] = &unk_189BC9490;
    uint64_t v11 = v9;
    BOOL v36 = v11;
    uint64_t v12 = v10;
    os_log_type_t v37 = v12;
    nw_connection_group_set_state_changed_handler(v12, state_changed_handler);
    aBlock[0] = v8;
    aBlock[1] = 3221225472LL;
    aBlock[2] = ___ZL32nw_masque_connection_group_startP27NWConcrete_nw_masque_serverPU33objcproto22OS_nw_connection_group8NSObject_block_invoke_2;
    aBlock[3] = &unk_189BC9238;
    uint64_t v13 = v11;
    uint64_t v33 = v13;
    os_log_type_t v14 = v12;
    uint64_t v34 = v14;
    os_log_type_t v15 = (void (**)(void))_Block_copy(aBlock);
    v11 += 4;
    os_unfair_lock_lock(v11);
    v15[2](v15);
    os_unfair_lock_unlock(v11);

    v30[0] = v8;
    v30[1] = 3221225472LL;
    v30[2] = ___ZL32nw_masque_connection_group_startP27NWConcrete_nw_masque_serverPU33objcproto22OS_nw_connection_group8NSObject_block_invoke_3;
    v30[3] = &unk_189BC93A0;
    int v31 = v14;
    nw_masque_server_call_proxy_client_connection_event_handler(v13, v31, 1, v30);

    goto LABEL_6;
  }

  __nwlog_obj();
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_masque_connection_group_start";
  uint64_t v17 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(state_changed_handler[0]) = 16;
  LOBYTE(aBlock[0]) = 0;
  if (LOBYTE(state_changed_handler[0]) == 17)
  {
    __nwlog_obj();
    os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v21 = state_changed_handler[0];
    if (os_log_type_enabled(v18, state_changed_handler[0]))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_connection_group_start";
      _os_log_impl(&dword_181A5C000, v18, v21, "%{public}s called with null connection_group", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (!LOBYTE(aBlock[0]))
  {
    __nwlog_obj();
    os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    int v29 = state_changed_handler[0];
    if (os_log_type_enabled(v18, state_changed_handler[0]))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_connection_group_start";
      _os_log_impl( &dword_181A5C000,  v18,  v29,  "%{public}s called with null connection_group, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  BOOL v25 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_t v26 = state_changed_handler[0];
  os_log_type_t v27 = os_log_type_enabled(v18, state_changed_handler[0]);
  if (!v25)
  {
    if (v27)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_connection_group_start";
      _os_log_impl(&dword_181A5C000, v18, v26, "%{public}s called with null connection_group, no backtrace", buf, 0xCu);
    }

    goto LABEL_39;
  }

  if (v27)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_masque_connection_group_start";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v25;
    _os_log_impl( &dword_181A5C000,  v18,  v26,  "%{public}s called with null connection_group, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v25);
  if (v17) {
    goto LABEL_41;
  }
LABEL_6:
}

uint64_t nw_activity_is_selected_for_reporting(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((_BYTE *)v1 + 17) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v16 = "nw_activity_is_selected_for_reporting";
  unsigned int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unsigned int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_activity_is_selected_for_reporting";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null activity", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      unsigned int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v16 = "nw_activity_is_selected_for_reporting";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null activity, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_activity_is_selected_for_reporting";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      unsigned int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_activity_is_selected_for_reporting";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null activity, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_181A6DDC8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  os_unfair_lock_unlock(v20);

  _Unwind_Resume(a1);
}

void sub_181A6E3A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nw_settings_get_signposts_enabled()
{
  if (_nw_signposts_once != -1) {
    dispatch_once(&_nw_signposts_once, &__block_literal_global_15_88556);
  }
  return _nw_signposts_enabled;
}

BOOL nw_settings_get_quic_enabled()
{
  v0 = (const char *)nw_setting_enable_quic;
  networkd_settings_init();
  if (!sCachedSettings) {
    return 0LL;
  }
  pthread_mutex_lock(&sSettingsMutex);
  id v1 = (void *)sCachedSettings;
  if (!sCachedSettings) {
    goto LABEL_7;
  }
  Class Class = object_getClass((id)sCachedSettings);
  BOOL v3 = 0LL;
  if (!v0 || Class != (Class)MEMORY[0x1895F9250]) {
    goto LABEL_8;
  }
  xpc_object_t value = xpc_dictionary_get_value(v1, v0);
  if (value && (uint64_t v5 = value, object_getClass(value) == (Class)MEMORY[0x1895F9228])) {
    BOOL v3 = xpc_BOOL_get_value(v5);
  }
  else {
LABEL_7:
  }
    BOOL v3 = 0LL;
LABEL_8:
  pthread_mutex_unlock(&sSettingsMutex);
  return v3;
}

void *__cdecl nw_retain(void *obj)
{
  if (obj) {
    return os_retain(obj);
  }
  return obj;
}

uint64_t nw_queue_context_target_dispatch_queue(void *a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = a2;
  uint64_t v5 = v4;
  if (v3)
  {
    if (v4)
    {
      BOOL v6 = nw_context_copy_workloop(v3);
      dispatch_set_target_queue(v5, (dispatch_queue_t)v6);

      uint64_t v7 = 1LL;
      goto LABEL_4;
    }

    __nwlog_obj();
    char v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v25 = "nw_queue_context_target_dispatch_queue";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v10, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v25 = "nw_queue_context_target_dispatch_queue";
          _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null queue", buf, 0xCu);
        }

LABEL_36:
        goto LABEL_37;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v25 = "nw_queue_context_target_dispatch_queue";
          _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s called with null queue, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v25 = "nw_queue_context_target_dispatch_queue";
          _os_log_impl(&dword_181A5C000, v11, v18, "%{public}s called with null queue, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v25 = "nw_queue_context_target_dispatch_queue";
        __int16 v26 = 2082;
        os_log_type_t v27 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s called with null queue, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v25 = "nw_queue_context_target_dispatch_queue";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v10, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v25 = "nw_queue_context_target_dispatch_queue";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null context", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v25 = "nw_queue_context_target_dispatch_queue";
          _os_log_impl( &dword_181A5C000,  v11,  v20,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v25 = "nw_queue_context_target_dispatch_queue";
          _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v25 = "nw_queue_context_target_dispatch_queue";
        __int16 v26 = 2082;
        os_log_type_t v27 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
      }

    if (v10) {
      free(v10);
    }

    goto LABEL_44;
  }

  v26.receiver = v3;
  v26.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_protocol_options;
  BOOL v6 = (NWConcrete_nw_protocol_options *)objc_msgSendSuper2(&v26, sel_init);
  id v3 = v6;
  if (!v6)
  {
    __nwlog_obj();
    char v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    int v29 = "-[NWConcrete_nw_protocol_options initWithDefinition:]";
    os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v25 = 0;
    if ((__nwlog_fault(v14, &type, &v25) & 1) != 0)
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          int v29 = "-[NWConcrete_nw_protocol_options initWithDefinition:]";
          _os_log_impl(&dword_181A5C000, v15, v16, "%{public}s [super init] failed", buf, 0xCu);
        }
      }

      else if (v25)
      {
        os_log_type_t v20 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = type;
        char v22 = os_log_type_enabled(v15, type);
        if (v20)
        {
          if (v22)
          {
            *(_DWORD *)buf = 136446466;
            int v29 = "-[NWConcrete_nw_protocol_options initWithDefinition:]";
            BOOL v30 = 2082;
            int v31 = v20;
            _os_log_impl( &dword_181A5C000,  v15,  v21,  "%{public}s [super init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v20);
          goto LABEL_42;
        }

        if (v22)
        {
          *(_DWORD *)buf = 136446210;
          int v29 = "-[NWConcrete_nw_protocol_options initWithDefinition:]";
          _os_log_impl(&dword_181A5C000, v15, v21, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          int v29 = "-[NWConcrete_nw_protocol_options initWithDefinition:]";
          _os_log_impl( &dword_181A5C000,  v15,  v24,  "%{public}s [super init] failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

LABEL_37:
      if (v8) {
        free(v8);
      }
      goto LABEL_39;
    }

    if (!v21)
    {
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v24 = "nw_protocol_options_access_handle";
        _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s called with null access_block, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_36;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v16 = type;
    BOOL v17 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v24 = "nw_protocol_options_access_handle";
        _os_log_impl(&dword_181A5C000, v9, v16, "%{public}s called with null access_block, no backtrace", buf, 0xCu);
      }

      goto LABEL_36;
    }

    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v24 = "nw_protocol_options_access_handle";
      BOOL v25 = 2082;
      __int16 v26 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s called with null access_block, dumping backtrace:%{public}s",  buf,  0x16u);
    }
}

      goto LABEL_37;
    }

    os_log_type_t v18 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v8 = (os_log_s *)(id)gLogObj;
    BOOL v19 = type;
    os_log_type_t v20 = os_log_type_enabled(v8, type);
    if (!v18)
    {
      if (!v20) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v32 = "nw_utilities_create_c_string_from_cfstring";
      os_log_type_t v10 = "%{public}s CFStringGetCString failed, no backtrace";
      uint64_t v23 = v8;
      os_log_type_t v24 = v19;
      goto LABEL_35;
    }

    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v32 = "nw_utilities_create_c_string_from_cfstring";
      uint64_t v33 = 2082;
      uint64_t v34 = v18;
      _os_log_impl( &dword_181A5C000,  v8,  v19,  "%{public}s CFStringGetCString failed, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v18);
  }

        goto LABEL_37;
      }

      if (!v21)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_connection_create";
          _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_connection_create";
          _os_log_impl(&dword_181A5C000, v10, v17, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v24 = "nw_connection_create";
        BOOL v25 = 2082;
        __int16 v26 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v24 = "nw_connection_create";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_connection_create";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null endpoint", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v21)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_connection_create";
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      os_log_type_t v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_connection_create";
          _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v24 = "nw_connection_create";
        BOOL v25 = 2082;
        __int16 v26 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
      }

    if (!v11) {
      goto LABEL_38;
    }
LABEL_37:
    free(v11);
    goto LABEL_38;
  }

  uint64_t v4 = (NWConcrete_nw_endpoint_handler *)v2;
  mode = v4->mode;

  if ((_DWORD)mode == 2)
  {
    BOOL v6 = nw_endpoint_handler_copy_flow(v4);
    uint64_t v7 = _Block_copy(v3);
    os_log_type_t v8 = (void *)*((void *)v6 + 106);
    *((void *)v6 + 106) = v7;

    goto LABEL_38;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v9 = (id)gLogObj;
  else {
    os_log_type_t v10 = off_189BBBBC0[mode];
  }
  *(_DWORD *)buf = 136446722;
  int v31 = "nw_endpoint_handler_set_read_close_handler";
  __int16 v32 = 2082;
  uint64_t v33 = (void *)v10;
  uint64_t v34 = 2082;
  os_log_type_t v35 = "flow";
  BOOL v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v28 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v12 = (os_log_s *)(id)gLogObj;
    char v13 = type;
    if (os_log_type_enabled(v12, type))
    {
      else {
        os_log_type_t v14 = off_189BBBBC0[mode];
      }
      *(_DWORD *)buf = 136446722;
      int v31 = "nw_endpoint_handler_set_read_close_handler";
      __int16 v32 = 2082;
      uint64_t v33 = (void *)v14;
      uint64_t v34 = 2082;
      os_log_type_t v35 = "flow";
      _os_log_impl( &dword_181A5C000,  v12,  v13,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
    }

    if (!v11) {
      goto LABEL_38;
    }
LABEL_37:
    free(v11);
    goto LABEL_38;
  }

  uint64_t v4 = (NWConcrete_nw_endpoint_handler *)v2;
  mode = v4->mode;

  if ((_DWORD)mode == 2)
  {
    BOOL v6 = nw_endpoint_handler_copy_flow(v4);
    uint64_t v7 = _Block_copy(v3);
    os_log_type_t v8 = (void *)*((void *)v6 + 107);
    *((void *)v6 + 107) = v7;

    goto LABEL_38;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v9 = (id)gLogObj;
  else {
    os_log_type_t v10 = off_189BBBBC0[mode];
  }
  *(_DWORD *)buf = 136446722;
  int v31 = "nw_endpoint_handler_set_write_close_handler";
  __int16 v32 = 2082;
  uint64_t v33 = (void *)v10;
  uint64_t v34 = 2082;
  os_log_type_t v35 = "flow";
  BOOL v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  uint64_t v28 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v12 = (os_log_s *)(id)gLogObj;
    char v13 = type;
    if (os_log_type_enabled(v12, type))
    {
      else {
        os_log_type_t v14 = off_189BBBBC0[mode];
      }
      *(_DWORD *)buf = 136446722;
      int v31 = "nw_endpoint_handler_set_write_close_handler";
      __int16 v32 = 2082;
      uint64_t v33 = (void *)v14;
      uint64_t v34 = 2082;
      os_log_type_t v35 = "flow";
      _os_log_impl( &dword_181A5C000,  v12,  v13,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
    }

        goto LABEL_37;
      }

      if (!v21)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_protocol_options_matches_definition";
          _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null definition, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_protocol_options_matches_definition";
          _os_log_impl(&dword_181A5C000, v10, v17, "%{public}s called with null definition, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v24 = "nw_protocol_options_matches_definition";
        BOOL v25 = 2082;
        __int16 v26 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s called with null definition, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v24 = "nw_protocol_options_matches_definition";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_protocol_options_matches_definition";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null options", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v21)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_protocol_options_matches_definition";
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      os_log_type_t v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_protocol_options_matches_definition";
          _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v24 = "nw_protocol_options_matches_definition";
        BOOL v25 = 2082;
        __int16 v26 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
      }

LABEL_37:
      if (v8) {
        free(v8);
      }
      goto LABEL_39;
    }

    if (!v21)
    {
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v24 = "nw_endpoint_get_signature";
        _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s called with null out_signature_length, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_36;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v16 = type;
    BOOL v17 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v24 = "nw_endpoint_get_signature";
        _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s called with null out_signature_length, no backtrace",  buf,  0xCu);
      }

      goto LABEL_36;
    }

    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v24 = "nw_endpoint_get_signature";
      BOOL v25 = 2082;
      __int16 v26 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s called with null out_signature_length, dumping backtrace:%{public}s",  buf,  0x16u);
    }

LABEL_37:
      if (v11) {
        free(v11);
      }
      goto LABEL_39;
    }

    if (!v24)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_association_copy_current_path";
        _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s called with null !association->dormant, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_36;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v19 = type;
    os_log_type_t v20 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_association_copy_current_path";
        _os_log_impl( &dword_181A5C000,  v12,  v19,  "%{public}s called with null !association->dormant, no backtrace",  buf,  0xCu);
      }

      goto LABEL_36;
    }

    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v27 = "nw_association_copy_current_path";
      uint64_t v28 = 2082;
      int v29 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v12,  v19,  "%{public}s called with null !association->dormant, dumping backtrace:%{public}s",  buf,  0x16u);
    }

  if (v12) {
    free(v12);
  }
  uint64_t v4 = 0LL;
LABEL_19:

  return v4;
}

LABEL_37:
      if (v11) {
        free(v11);
      }
      goto LABEL_39;
    }

    if (!v24)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_endpoint_handler_should_transform";
        _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_36;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v19 = type;
    os_log_type_t v20 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_endpoint_handler_should_transform";
        _os_log_impl(&dword_181A5C000, v12, v19, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }

      goto LABEL_36;
    }

    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v27 = "nw_endpoint_handler_should_transform";
      uint64_t v28 = 2082;
      int v29 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v12,  v19,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
    }

        goto LABEL_37;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v22 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v26 = "nw_context_shares_workloop";
          _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s called with null other, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v19 = type;
      os_log_type_t v20 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v26 = "nw_context_shares_workloop";
          _os_log_impl(&dword_181A5C000, v12, v19, "%{public}s called with null other, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v26 = "nw_context_shares_workloop";
        os_log_type_t v27 = 2082;
        uint64_t v28 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v12,  v19,  "%{public}s called with null other, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v26 = "nw_context_shares_workloop";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v23 = 0;
    if (__nwlog_fault(v11, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v26 = "nw_context_shares_workloop";
          _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null context", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v26 = "nw_context_shares_workloop";
          _os_log_impl( &dword_181A5C000,  v12,  v21,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v26 = "nw_context_shares_workloop";
          _os_log_impl(&dword_181A5C000, v12, v17, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v26 = "nw_context_shares_workloop";
        os_log_type_t v27 = 2082;
        uint64_t v28 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
      }

    BOOL v25 = v9;
    __int16 v26 = (*((_BYTE *)v25 + 268) & 0x20) == 0;

    if (!v26)
    {

      goto LABEL_88;
    }

    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    os_log_type_t v27 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      v221 = v27;
      uint64_t v28 = v25;

      int v29 = v28;
      BOOL v30 = (*((_BYTE *)v25 + 268) & 1) == 0;

      if (v30) {
        int v31 = "";
      }
      else {
        int v31 = "dry-run ";
      }
      __int16 v32 = nw_endpoint_handler_copy_endpoint(v29);
      uint64_t v33 = nw_endpoint_get_logging_description(v32);
      uint64_t v34 = v29;
      os_log_type_t v35 = v34;
      BOOL v36 = v34[30];
      else {
        os_log_type_t v37 = off_189BBBBF0[v36];
      }

      os_log_type_t v53 = v35;
      os_log_type_t v54 = v53;
      os_log_type_t v55 = v3->mode;
      char v56 = "path";
      switch(v55)
      {
        case 0:
          break;
        case 1:
          char v56 = "resolver";
          break;
        case 2:
          char v56 = nw_endpoint_flow_mode_string(v53[31]);
          break;
        case 3:
          char v56 = "proxy";
          break;
        case 4:
          char v56 = "fallback";
          break;
        case 5:
          char v56 = "transform";
          break;
        default:
          char v56 = "unknown-mode";
          break;
      }

      char v79 = v54;
      os_unfair_lock_lock((os_unfair_lock_t)v79 + 28);
      v80 = v79[8];
      os_unfair_lock_unlock((os_unfair_lock_t)v79 + 28);

      *(_DWORD *)buf = 136448002;
      v239 = "nw_endpoint_transform_start_next_child";
      v240 = 2082;
      id_str = v28->id_str;
      v242 = 2082;
      v243 = v31;
      v244 = 2082;
      v245 = v33;
      v246 = 2082;
      v247 = v37;
      v248 = 2082;
      v249 = v56;
      v250 = 2114;
      v251 = v80;
      v252 = 1024;
      LODWORD(v253) = v227;
      _os_log_impl( &dword_181A5C000,  v221,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] no child at index %u",  buf,  0x4Eu);

      v230 = 0LL;
      os_log_type_t v27 = v221;
    }

    else
    {
      v230 = 0LL;
    }

    goto LABEL_86;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v14 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    else {
      os_log_type_t v15 = off_189BBBBC0[mode];
    }
    *(_DWORD *)buf = 136446722;
    v239 = "nw_endpoint_transform_start_next_child";
    v240 = 2082;
    id_str = (char *)v15;
    v242 = 2082;
    v243 = "transform";
    _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_DEFAULT,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
  }

LABEL_90:
}

        goto LABEL_37;
      }

      if (!v20)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v23 = "nw_parameters_copy_protocol_options_legacy";
          _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s called with null protocol_handle, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v23 = "nw_parameters_copy_protocol_options_legacy";
          _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s called with null protocol_handle, no backtrace",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v23 = "nw_parameters_copy_protocol_options_legacy";
        os_log_type_t v24 = 2082;
        BOOL v25 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s called with null protocol_handle, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v23 = "nw_parameters_copy_protocol_options_legacy";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v20 = 0;
    if (__nwlog_fault(v8, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v23 = "nw_parameters_copy_protocol_options_legacy";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v20)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v23 = "nw_parameters_copy_protocol_options_legacy";
          _os_log_impl( &dword_181A5C000,  v9,  v18,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      os_log_type_t v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v23 = "nw_parameters_copy_protocol_options_legacy";
          _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v23 = "nw_parameters_copy_protocol_options_legacy";
        os_log_type_t v24 = 2082;
        BOOL v25 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
      }

    free(backtrace_string);
    goto LABEL_46;
  }

  os_log_type_t v8 = (os_log_s *)__nwlog_obj();
  uint64_t v9 = type;
  if (os_log_type_enabled(v8, type))
  {
    *(_DWORD *)buf = 136446210;
    os_log_type_t v18 = "nw_protocols_are_equal";
    os_log_type_t v10 = "%{public}s called with null identifier1";
LABEL_45:
    _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
  }

    free(backtrace_string);
    goto LABEL_55;
  }

  if (!nw_path_network_is_satisfied_update_reason(v5, 0LL) || (direct = v6->direct) == 0LL)
  {
LABEL_57:
    ipv4_network_signature = 0LL;
    goto LABEL_58;
  }

  ipv4_network_signature = nw_interface_get_ipv4_network_signature(direct, a2, a3);
LABEL_58:

  return ipv4_network_signature;
}

        goto LABEL_37;
      }

      if (!v20)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v23 = "nw_protocol_metadata_copy_identifier";
          _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s called with null out_identifier, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v23 = "nw_protocol_metadata_copy_identifier";
          _os_log_impl(&dword_181A5C000, v9, v16, "%{public}s called with null out_identifier, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v23 = "nw_protocol_metadata_copy_identifier";
        os_log_type_t v24 = 2082;
        BOOL v25 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s called with null out_identifier, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v23 = "nw_protocol_metadata_copy_identifier";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v20 = 0;
    if (__nwlog_fault(v8, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v23 = "nw_protocol_metadata_copy_identifier";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v20)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v23 = "nw_protocol_metadata_copy_identifier";
          _os_log_impl( &dword_181A5C000,  v9,  v18,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      os_log_type_t v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v23 = "nw_protocol_metadata_copy_identifier";
          _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v23 = "nw_protocol_metadata_copy_identifier";
        os_log_type_t v24 = 2082;
        BOOL v25 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

    if (!v8) {
      goto LABEL_38;
    }
LABEL_37:
    free(v8);
    goto LABEL_38;
  }

  id v3 = (NWConcrete_nw_endpoint_handler *)v1;
  mode = v3->mode;

  if ((_DWORD)mode == 2)
  {
    uint64_t v5 = (NWConcrete_nw_endpoint_flow *)nw_endpoint_handler_copy_flow(v3);
    nw_flow_service_writes(v3, v5, &v5->shared_protocol);

    goto LABEL_38;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v6 = (id)gLogObj;
  else {
    uint64_t v7 = off_189BBBBC0[mode];
  }
  *(_DWORD *)buf = 136446722;
  uint64_t v28 = "nw_endpoint_handler_service_writes";
  int v29 = 2082;
  BOOL v30 = (void *)v7;
  int v31 = 2082;
  __int16 v32 = "flow";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v25 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v9 = (os_log_s *)(id)gLogObj;
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v9, type))
    {
      else {
        BOOL v11 = off_189BBBBC0[mode];
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v28 = "nw_endpoint_handler_service_writes";
      int v29 = 2082;
      BOOL v30 = (void *)v11;
      int v31 = 2082;
      __int16 v32 = "flow";
      _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
    }

    if (!v8) {
      goto LABEL_38;
    }
LABEL_37:
    free(v8);
    goto LABEL_38;
  }

  id v3 = (NWConcrete_nw_endpoint_handler *)v1;
  mode = v3->mode;

  if ((_DWORD)mode == 2)
  {
    uint64_t v5 = (NWConcrete_nw_endpoint_flow *)nw_endpoint_handler_copy_flow(v3);
    nw_flow_service_reads(v3, v5, &v5->shared_protocol, 0);

    goto LABEL_38;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v6 = (id)gLogObj;
  else {
    uint64_t v7 = off_189BBBBC0[mode];
  }
  *(_DWORD *)buf = 136446722;
  uint64_t v28 = "nw_endpoint_handler_service_reads";
  int v29 = 2082;
  BOOL v30 = (void *)v7;
  int v31 = 2082;
  __int16 v32 = "flow";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v25 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v9 = (os_log_s *)(id)gLogObj;
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v9, type))
    {
      else {
        BOOL v11 = off_189BBBBC0[mode];
      }
      *(_DWORD *)buf = 136446722;
      uint64_t v28 = "nw_endpoint_handler_service_reads";
      int v29 = 2082;
      BOOL v30 = (void *)v11;
      int v31 = 2082;
      __int16 v32 = "flow";
      _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
    }

    if (v9) {
      free(v9);
    }
LABEL_38:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v23 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    BOOL v36 = "nw_endpoint_handler_get_resolution_source";
    os_log_type_t v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v33 = 0;
    if (__nwlog_fault(v24, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v25 = (os_log_s *)(id)gLogObj;
        __int16 v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v36 = "nw_endpoint_handler_get_resolution_source";
          _os_log_impl(&dword_181A5C000, v25, v26, "%{public}s Endpoint handler is not a resolver", buf, 0xCu);
        }
      }

      else if (v33)
      {
        uint64_t v28 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v25 = (os_log_s *)(id)gLogObj;
        int v29 = type;
        BOOL v30 = os_log_type_enabled(v25, type);
        if (v28)
        {
          if (v30)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v36 = "nw_endpoint_handler_get_resolution_source";
            os_log_type_t v37 = 2082;
            __int16 v38 = v28;
            _os_log_impl( &dword_181A5C000,  v25,  v29,  "%{public}s Endpoint handler is not a resolver, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v28);
          if (!v24) {
            goto LABEL_45;
          }
          goto LABEL_44;
        }

        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v36 = "nw_endpoint_handler_get_resolution_source";
          _os_log_impl( &dword_181A5C000,  v25,  v29,  "%{public}s Endpoint handler is not a resolver, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v25 = (os_log_s *)(id)gLogObj;
        int v31 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v36 = "nw_endpoint_handler_get_resolution_source";
          _os_log_impl( &dword_181A5C000,  v25,  v31,  "%{public}s Endpoint handler is not a resolver, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v24)
    {
LABEL_45:
      uint64_t v7 = 1LL;
      goto LABEL_46;
    }

    if (v11) {
      free(v11);
    }
    BOOL v19 = 0LL;
    goto LABEL_20;
  }

  if (!v4[1])
  {
    if (!v4[2]) {
      goto LABEL_4;
    }
LABEL_16:
    __nwlog_obj();
    BOOL v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    uint64_t v33 = "nw_read_request_list_append";
    os_log_type_t v18 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v18);
    if (result) {
      goto LABEL_39;
    }
    free(v18);
    if (v3) {
      goto LABEL_5;
    }
LABEL_18:
    uint64_t v9 = v5;
    id v3 = v9;
    if (v5[2]) {
      goto LABEL_19;
    }
    goto LABEL_8;
  }

  __nwlog_obj();
  os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  uint64_t v33 = "nw_read_request_list_append";
  os_log_type_t v15 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v15);
  if (result) {
    goto LABEL_39;
  }
  free(v15);
  if (v5[2]) {
    goto LABEL_16;
  }
LABEL_4:
  if (!v3) {
    goto LABEL_18;
  }
LABEL_5:
  BOOL v6 = v3[2];
  if (v6)
  {
    os_log_type_t v8 = *(void *)(v6 + 8);
    uint64_t v7 = (id *)(v6 + 8);
    if (!v8)
    {
LABEL_7:
      objc_storeStrong(v7, a2);
      uint64_t v9 = 0LL;
      v3[2] = v5;
LABEL_8:
      v5[2] = v9;
      uint64_t v9 = v3;
LABEL_19:
      id v3 = v9;
      BOOL v19 = v3;
LABEL_20:

      return (BOOL)v19;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    uint64_t v33 = "nw_read_request_list_append";
    os_log_type_t v21 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v21);
    if (result) {
      goto LABEL_39;
    }
    free(v21);
    char v22 = v3[2];
    uint64_t v23 = *(void *)(v22 + 8);
    uint64_t v7 = (id *)(v22 + 8);
    if (!v23) {
      goto LABEL_7;
    }
  }

  __nwlog_obj();
  os_log_type_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  uint64_t v33 = "nw_read_request_list_append";
  BOOL v25 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v25);
  if (!result)
  {
    free(v25);
    goto LABEL_7;
  }

        goto LABEL_37;
      }

      if (!v19)
      {
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          char v22 = "nw_protocol_metadata_supports_replies";
          _os_log_impl( &dword_181A5C000,  v8,  v18,  "%{public}s called with null metadata->definition, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      os_log_type_t v16 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          char v22 = "nw_protocol_metadata_supports_replies";
          _os_log_impl( &dword_181A5C000,  v8,  v15,  "%{public}s called with null metadata->definition, no backtrace",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        char v22 = "nw_protocol_metadata_supports_replies";
        uint64_t v23 = 2082;
        os_log_type_t v24 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v8,  v15,  "%{public}s called with null metadata->definition, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    BOOL v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v22 = "nw_protocol_metadata_supports_replies";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v19 = 0;
    if (__nwlog_fault(v7, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          char v22 = "nw_protocol_metadata_supports_replies";
          _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null metadata", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v19)
      {
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v17 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          char v22 = "nw_protocol_metadata_supports_replies";
          _os_log_impl( &dword_181A5C000,  v8,  v17,  "%{public}s called with null metadata, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v13 = type;
      os_log_type_t v14 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          char v22 = "nw_protocol_metadata_supports_replies";
          _os_log_impl(&dword_181A5C000, v8, v13, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v14)
      {
        *(_DWORD *)buf = 136446466;
        char v22 = "nw_protocol_metadata_supports_replies";
        uint64_t v23 = 2082;
        os_log_type_t v24 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null metadata, dumping backtrace:%{public}s",  buf,  0x16u);
      }

    if (v15) {
      free(v15);
    }
    BOOL v11 = 0LL;
    goto LABEL_19;
  }

  id v3 = *(void *)(v2 + 16);
  if (v3 && !nw_path_parameters_get_logging_disabled(*(void *)(v3 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v4 = (os_log_s *)(id)gconnectionLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(_DWORD *)(a1[4] + 448LL);
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_connection_copy_metadata_block_invoke";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v5;
      _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_ERROR,  "%{public}s [C%u] Client called nw_connection_copy_metadata on unconnected nw_connection",  buf,  0x12u);
    }
  }

  BOOL v25 = *((void *)v3 + 5);
  if (!v25)
  {
    if (nw_path_parameters_get_logging_disabled(*((void *)v3 + 2))) {
      goto LABEL_130;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    BOOL v36 = (id)gconnectionLogObj;
    os_log_type_t v37 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
    *(_DWORD *)buf = 136446466;
    v84 = "nw_association_unregister";
    v85 = 2082;
    v86 = (void *)v37;
    __int16 v38 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v81 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      os_log_type_t v39 = (os_log_s *)(id)gconnectionLogObj;
      os_log_type_t v40 = type;
      if (os_log_type_enabled(v39, type))
      {
        os_log_type_t v41 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
        *(_DWORD *)buf = 136446466;
        v84 = "nw_association_unregister";
        v85 = 2082;
        v86 = (void *)v41;
        _os_log_impl( &dword_181A5C000,  v39,  v40,  "%{public}s <nw_association %{public}s> does not have a handle hash table",  buf,  0x16u);
      }

      goto LABEL_119;
    }

    if (!v81)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      os_log_type_t v39 = (os_log_s *)(id)gconnectionLogObj;
      os_log_type_t v58 = type;
      if (os_log_type_enabled(v39, type))
      {
        os_log_type_t v59 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
        *(_DWORD *)buf = 136446466;
        v84 = "nw_association_unregister";
        v85 = 2082;
        v86 = (void *)v59;
        _os_log_impl( &dword_181A5C000,  v39,  v58,  "%{public}s <nw_association %{public}s> does not have a handle hash table, backtrace limit exceeded",  buf,  0x16u);
      }

      goto LABEL_119;
    }

    os_log_type_t v46 = __nw_create_backtrace_string();
    if (!v46)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      os_log_type_t v39 = (os_log_s *)(id)gconnectionLogObj;
      __int16 v60 = type;
      if (os_log_type_enabled(v39, type))
      {
        char v61 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
        *(_DWORD *)buf = 136446466;
        v84 = "nw_association_unregister";
        v85 = 2082;
        v86 = (void *)v61;
        _os_log_impl( &dword_181A5C000,  v39,  v60,  "%{public}s <nw_association %{public}s> does not have a handle hash table, no backtrace",  buf,  0x16u);
      }

      goto LABEL_119;
    }

    BOOL v47 = (char *)v46;
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    os_log_type_t v39 = (os_log_s *)(id)gconnectionLogObj;
    v48 = type;
    if (os_log_type_enabled(v39, type))
    {
      os_log_type_t v49 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
      *(_DWORD *)buf = 136446722;
      v84 = "nw_association_unregister";
      v85 = 2082;
      v86 = (void *)v49;
      os_log_type_t v87 = 2082;
      v88 = (uint64_t)v47;
      _os_log_impl( &dword_181A5C000,  v39,  v48,  "%{public}s <nw_association %{public}s> does not have a handle hash table, dumping backtrace:%{public}s",  buf,  0x20u);
    }

    goto LABEL_85;
  }

  __int16 v26 = nw_hash_table_get_node(v25, (uint64_t)v5, 0LL);
  if (v26)
  {
    os_log_type_t v27 = v26;
    uint64_t v28 = *(void **)(v26 + 32);
    *(void *)(v26 + 32) = 0LL;

    if ((*(_BYTE *)(v27 + 40) & 1) != 0)
    {
      int v29 = *((_DWORD *)v3 + 18);
      if (v29) {
        *((_DWORD *)v3 + 18) = v29 - 1;
      }
    }

    if (nw_hash_table_remove_node(*((void *)v3 + 5), v27)
      || nw_path_parameters_get_logging_disabled(*((void *)v3 + 2)))
    {
      goto LABEL_129;
    }

    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    BOOL v30 = (id)gconnectionLogObj;
    int v31 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
    *(_DWORD *)buf = 136446722;
    v84 = "nw_association_unregister";
    v85 = 2082;
    v86 = (void *)v31;
    os_log_type_t v87 = 2048;
    v88 = v27;
    __int16 v32 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    v81 = 0;
    if (__nwlog_fault(v32, &type, &v81))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v33 = (os_log_s *)(id)gconnectionLogObj;
        uint64_t v34 = type;
        if (os_log_type_enabled(v33, type))
        {
          os_log_type_t v35 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
          *(_DWORD *)buf = 136446722;
          v84 = "nw_association_unregister";
          v85 = 2082;
          v86 = (void *)v35;
          os_log_type_t v87 = 2048;
          v88 = v27;
          _os_log_impl( &dword_181A5C000,  v33,  v34,  "%{public}s <nw_association %{public}s> failed to remove handle for node %p",  buf,  0x20u);
        }
      }

      else if (v81)
      {
        os_log_type_t v53 = __nw_create_backtrace_string();
        if (v53)
        {
          os_log_type_t v54 = (char *)v53;
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          os_log_type_t v55 = (os_log_s *)(id)gconnectionLogObj;
          char v56 = type;
          if (os_log_type_enabled(v55, type))
          {
            os_log_type_t v57 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
            *(_DWORD *)buf = 136446978;
            v84 = "nw_association_unregister";
            v85 = 2082;
            v86 = (void *)v57;
            os_log_type_t v87 = 2048;
            v88 = v27;
            os_log_type_t v89 = 2082;
            BOOL v90 = v54;
            _os_log_impl( &dword_181A5C000,  v55,  v56,  "%{public}s <nw_association %{public}s> failed to remove handle for node %p, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v54);
          if (!v32) {
            goto LABEL_129;
          }
          goto LABEL_128;
        }

        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v33 = (os_log_s *)(id)gconnectionLogObj;
        __int16 v68 = type;
        if (os_log_type_enabled(v33, type))
        {
          v69 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
          *(_DWORD *)buf = 136446722;
          v84 = "nw_association_unregister";
          v85 = 2082;
          v86 = (void *)v69;
          os_log_type_t v87 = 2048;
          v88 = v27;
          _os_log_impl( &dword_181A5C000,  v33,  v68,  "%{public}s <nw_association %{public}s> failed to remove handle for node %p, no backtrace",  buf,  0x20u);
        }
      }

      else
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v33 = (os_log_s *)(id)gconnectionLogObj;
        uint64_t v64 = type;
        if (os_log_type_enabled(v33, type))
        {
          id v65 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
          *(_DWORD *)buf = 136446722;
          v84 = "nw_association_unregister";
          v85 = 2082;
          v86 = (void *)v65;
          os_log_type_t v87 = 2048;
          v88 = v27;
          _os_log_impl( &dword_181A5C000,  v33,  v64,  "%{public}s <nw_association %{public}s> failed to remove handle for node %p, backtrace limit exceeded",  buf,  0x20u);
        }
      }
    }

    if (!v32)
    {
LABEL_129:
      nw_association_schedule_deactivation((NWConcrete_nw_association *)v3);
      goto LABEL_130;
    }

    goto LABEL_37;
  }

  if (!v38)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v20 = (os_log_s *)(id)gLogObj;
    os_log_type_t v27 = type;
    if (os_log_type_enabled(v20, type))
    {
      else {
        uint64_t v28 = off_189BBBBC0[v9];
      }
      *(_DWORD *)buf = 136446722;
      os_log_type_t v41 = "-[NWConcrete_nw_endpoint_transform cancelWithHandler:forced:]";
      os_log_type_t v42 = 2082;
      char v43 = (void *)v28;
      os_log_type_t v44 = 2082;
      os_log_type_t v45 = "transform";
      _os_log_impl( &dword_181A5C000,  v20,  v27,  "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded",  buf,  0x20u);
    }

    goto LABEL_36;
  }

  uint64_t v23 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v20 = (os_log_s *)(id)gLogObj;
  os_log_type_t v24 = type;
  BOOL v25 = os_log_type_enabled(v20, type);
  if (!v23)
  {
    if (v25)
    {
      else {
        int v29 = off_189BBBBC0[v9];
      }
      *(_DWORD *)buf = 136446722;
      os_log_type_t v41 = "-[NWConcrete_nw_endpoint_transform cancelWithHandler:forced:]";
      os_log_type_t v42 = 2082;
      char v43 = (void *)v29;
      os_log_type_t v44 = 2082;
      os_log_type_t v45 = "transform";
      _os_log_impl( &dword_181A5C000,  v20,  v24,  "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace",  buf,  0x20u);
    }

    goto LABEL_36;
  }

  if (v25)
  {
    else {
      __int16 v26 = off_189BBBBC0[v9];
    }
    *(_DWORD *)buf = 136446978;
    os_log_type_t v41 = "-[NWConcrete_nw_endpoint_transform cancelWithHandler:forced:]";
    os_log_type_t v42 = 2082;
    char v43 = (void *)v26;
    os_log_type_t v44 = 2082;
    os_log_type_t v45 = "transform";
    os_log_type_t v46 = 2082;
    BOOL v47 = v23;
    _os_log_impl( &dword_181A5C000,  v20,  v24,  "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
  }

  free(v23);
  if (v19) {
    goto LABEL_38;
  }
LABEL_39:
}

          if (!v7) {
            goto LABEL_68;
          }
          uint64_t v34 = *((void *)v7 + 3);
          if (!v34) {
            goto LABEL_68;
          }
          os_log_type_t v35 = *(uint64_t (**)(const char *, uint64_t, uint64_t *))(v34 + 224);
          if (!v35) {
            goto LABEL_68;
          }
          v359 = 0LL;
          BOOL v36 = (void *)*((void *)v7 + 5);
          if (v36 == &nw_protocol_ref_counted_handle)
          {
            __int16 v38 = *((void *)v7 + 11);
            if (v38) {
              *((void *)v7 + 11) = v38 + 1;
            }
            os_log_type_t v37 = -1;
          }

          else
          {
            os_log_type_t v37 = 0;
          }

          *(void *)buf = v7;
          uint8_t buf[8] = v37;
          os_log_type_t v39 = (void *)v35(v7, 1LL, &v359);
          if (v36 == &nw_protocol_ref_counted_handle) {
            nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
          }
          if (v39)
          {
            if (v359 == 408)
            {
              os_log_type_t v40 = (void *)*((void *)v6 + 99);
              if (v40)
              {
                free(v40);
                *((void *)v6 + 99) = 0LL;
              }

              *((void *)v6 + 99) = v39;
            }

            else
            {
              free(v39);
            }
          }

          v359 = 0LL;
          os_log_type_t v41 = (void *)*((void *)v7 + 5);
          if (v41 == &nw_protocol_ref_counted_handle)
          {
            char v43 = *((void *)v7 + 11);
            if (v43) {
              *((void *)v7 + 11) = v43 + 1;
            }
            os_log_type_t v42 = -1;
          }

          else
          {
            os_log_type_t v42 = 0;
          }

          *(void *)os_log_type_t type = v7;
          v362 = v42;
          os_log_type_t v44 = *((void *)v7 + 3);
          if (v44)
          {
            os_log_type_t v45 = *(uint64_t (**)(const char *, uint64_t, uint64_t *))(v44 + 224);
            if (v45)
            {
              os_log_type_t v46 = (void *)v45(v7, 2LL, &v359);
              if (v41 != &nw_protocol_ref_counted_handle) {
                goto LABEL_63;
              }
              goto LABEL_62;
            }
          }

          __nwlog_obj();
          v281 = (void *)objc_claimAutoreleasedReturnValue();
          v282 = (const char *)*((void *)v7 + 2);
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "__nw_protocol_copy_info";
          if (!v282) {
            v282 = "invalid";
          }
          v364 = 2082;
          v365 = (void *)v282;
          v366 = 2048;
          v367 = v7;
          v283 = (char *)_os_log_send_and_compose_impl();

          v358 = OS_LOG_TYPE_ERROR;
          v357 = 0;
          if (__nwlog_fault(v283, &v358, &v357))
          {
            if (v358 == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v284 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              v285 = v358;
              if (os_log_type_enabled(v284, v358))
              {
                v286 = (const char *)*((void *)v7 + 2);
                if (!v286) {
                  v286 = "invalid";
                }
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "__nw_protocol_copy_info";
                v364 = 2082;
                v365 = (void *)v286;
                v366 = 2048;
                v367 = v7;
                _os_log_impl( &dword_181A5C000,  v284,  v285,  "%{public}s protocol %{public}s (%p) has invalid copy_info callback",  buf,  0x20u);
              }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v21 = (os_log_s *)gLogObj;
      BOOL result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_channel_remove_input_handler";
        *(_WORD *)&buf[12] = 1042;
        *(_DWORD *)&buf[14] = 16;
        *(_WORD *)&buf[18] = 2098;
        *(void *)&buf[20] = a2;
        _os_log_impl( &dword_181A5C000,  v21,  OS_LOG_TYPE_ERROR,  "%{public}s Channel does not have input handler registered for %{public,uuid_t}.16P",  buf,  0x1Cu);
        return 0LL;
      }

      return result;
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "remove_input_handler";
    uint64_t v64 = (char *)_os_log_send_and_compose_impl();
    v77[0] = 16;
    __uint64_t v76 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v64, v77, &v76))
    {
      if (v77[0] == 17)
      {
        id v65 = (os_log_s *)__nwlog_obj();
        BOOL v66 = v77[0];
        if (!os_log_type_enabled(v65, (os_log_type_t)v77[0])) {
          goto LABEL_162;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "remove_input_handler";
        os_log_type_t v67 = "%{public}s called with null table";
        goto LABEL_161;
      }

      if (v76 == OS_LOG_TYPE_DEFAULT)
      {
        id v65 = (os_log_s *)__nwlog_obj();
        BOOL v66 = v77[0];
        if (!os_log_type_enabled(v65, (os_log_type_t)v77[0])) {
          goto LABEL_162;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "remove_input_handler";
        os_log_type_t v67 = "%{public}s called with null table, backtrace limit exceeded";
        goto LABEL_161;
      }

      uint64_t v70 = (char *)__nw_create_backtrace_string();
      id v65 = (os_log_s *)__nwlog_obj();
      BOOL v66 = v77[0];
      os_log_type_t v71 = os_log_type_enabled(v65, (os_log_type_t)v77[0]);
      if (v70)
      {
        if (v71)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "remove_input_handler";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v70;
          _os_log_impl( &dword_181A5C000,  v65,  v66,  "%{public}s called with null table, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v70);
        goto LABEL_162;
      }

      if (v71)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "remove_input_handler";
        os_log_type_t v67 = "%{public}s called with null table, no backtrace";
LABEL_161:
        _os_log_impl(&dword_181A5C000, v65, v66, v67, buf, 0xCu);
      }
    }

                LOBYTE(v5) = 0;
                goto LABEL_37;
              }
            }
          }
        }

        goto LABEL_33;
      }

    os_log_type_t v14 = 0;
    goto LABEL_37;
  }

  if (result != 45)
  {
    os_log_type_t v12 = (result - 48);
    if (v7 != 1)
    {
      os_log_type_t v12 = 10LL * (result - 48) + (BYTE1(result) - 48);
      char v22 = v7 - 2;
      if (v22)
      {
        uint64_t v23 = (unsigned __int8 *)v32 + 2;
        while (1)
        {
          os_log_type_t v24 = *v23 - 48;
          if (v24 > 9) {
            goto LABEL_33;
          }
          if (!is_mul_ok(v12, 0xAuLL)) {
            goto LABEL_33;
          }
          os_log_type_t v16 = __CFADD__(10 * v12, v24);
          os_log_type_t v12 = 10 * v12 + v24;
          if (v16) {
            goto LABEL_33;
          }
          os_log_type_t v14 = 0;
          ++v23;
          if (!--v22) {
            goto LABEL_37;
          }
        }
      }
    }

    goto LABEL_36;
  }

  if (v7)
  {
    if (v7 != 1)
    {
      os_log_type_t v15 = BYTE1(result) - 48;
      if ((BYTE1(result) - 48) <= 9u)
      {
        os_log_type_t v12 = 0LL;
        os_log_type_t v16 = v15 == 0LL;
        BOOL v17 = -(uint64_t)v15;
        if (!v16) {
          goto LABEL_34;
        }
        if (v7 == 2)
        {
          os_log_type_t v14 = 0;
          os_log_type_t v12 = v17;
          goto LABEL_37;
        }

        BOOL v25 = BYTE2(result) - 48;
        if ((BYTE2(result) - 48) <= 9u && is_mul_ok(v17, 0xAuLL))
        {
          __int16 v26 = 10 * v17;
          os_log_type_t v12 = v26 - v25;
          if (v26 >= v25)
          {
            os_log_type_t v27 = v7 - 3;
            if (v27)
            {
              uint64_t v28 = (unsigned __int8 *)v32 + 3;
              while (1)
              {
                int v29 = *v28 - 48;
                if (v29 > 9) {
                  goto LABEL_33;
                }
                if (!is_mul_ok(v12, 0xAuLL)) {
                  goto LABEL_33;
                }
                os_log_type_t v16 = 10 * v12 >= v29;
                os_log_type_t v12 = 10 * v12 - v29;
                if (!v16) {
                  goto LABEL_33;
                }
                os_log_type_t v14 = 0;
                ++v28;
                if (!--v27) {
                  goto LABEL_37;
                }
              }
            }

            goto LABEL_36;
          }
        }
      }
    }

    if (!v16)
    {
LABEL_38:
      os_log_type_t v10 = 0LL;
      goto LABEL_39;
    }

  if (v18) {
    free(v18);
  }
  uint64_t v9 = 0LL;
LABEL_6:

  return v9;
}

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v28 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      int v29 = v11[2];
      *(_DWORD *)buf = 136446978;
      os_log_type_t v55 = "nw_protocol_shoes_add_request_to_output_frames";
      char v56 = 2082;
      os_log_type_t v57 = (char *)handle + 151;
      os_log_type_t v58 = 1024;
      *(_DWORD *)os_log_type_t v59 = v29;
      *(_WORD *)&v59[4] = 1024;
      *(_DWORD *)&v59[6] = v12;
      _os_log_impl( &dword_181A5C000,  v28,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s Failed to send shoes request (type %u inner length %u)",  buf,  0x22u);
    }

    free(v11);
    return 0LL;
  }

  os_log_type_t v51 = v12;
  os_log_type_t v18 = v11;
  while (1)
  {
    BOOL v19 = (nw_frame *)*((void *)tqh_first + 4);
    if (v19 || *((void *)tqh_first + 5))
    {
      os_log_type_t v20 = *((void *)tqh_first + 14);
      if (!v20) {
        goto LABEL_20;
      }
    }

    else
    {
      BOOL v19 = 0LL;
      os_log_type_t v20 = *((void *)tqh_first + 14);
      if (!v20) {
        goto LABEL_20;
      }
    }

    if ((*((_WORD *)tqh_first + 102) & 0x100) != 0
      && g_channel_check_validity
      && !g_channel_check_validity(tqh_first, *((void *)tqh_first + 11)))
    {
      LODWORD(v20) = 0;
LABEL_20:
      char v22 = 0LL;
      goto LABEL_21;
    }

    LODWORD(v20) = *((_DWORD *)tqh_first + 13);
    os_log_type_t v21 = *((unsigned int *)tqh_first + 14);
    if ((_DWORD)v20) {
      LODWORD(v20) = v20 - (v21 + *((_DWORD *)tqh_first + 15));
    }
    char v22 = (void *)(*((void *)tqh_first + 14) + v21);
LABEL_21:
    uint64_t v23 = v20 >= v14 ? v14 : v20;
    memcpy(v22, v18, v23);
    v13[35] += v23;
    if (v19)
    {
      v18 += v23;
      tqh_first = v19;
      v14 -= v23;
      if (v14) {
        continue;
      }
    }

    goto LABEL_41;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v30 = (os_log_s *)gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446722;
    os_log_type_t v55 = "nw_protocol_add_buffer_to_output_frames";
    char v56 = 2082;
    os_log_type_t v57 = (char *)v13 + 151;
    os_log_type_t v58 = 1024;
    *(_DWORD *)os_log_type_t v59 = v23;
    _os_log_impl( &dword_181A5C000,  v30,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s Claiming frame with %u bytes failed",  buf,  0x1Cu);
  }

  ((void (*)(void))a1->output_handler->callbacks->finalize_output_frames)();
  __int16 v26 = v53;
  if (v53)
  {
    *(void *)buf = 0LL;
    *(void *)&uint8_t buf[8] = buf;
    id v65 = 0;
    *(void *)&buf[16] = 0x2000000000LL;
    *(void *)os_log_type_t v55 = MEMORY[0x1895F87A8];
    *(void *)&v55[8] = 0x40000000LL;
    *(void *)&v55[16] = ___ZL22nw_protocol_shoes_sendP11nw_protocolPhj_block_invoke;
    *(void *)&char v56 = &unk_189BB5938;
    *((void *)&v56 + 1) = buf;
    do
    {
      if (!v26) {
        break;
      }
      os_log_type_t v27 = *(void *)(v26 + 32);
      uint64_t v28 = (*(uint64_t (**)(_BYTE *))&v55[16])(v55);
      __int16 v26 = v27;
    }

    while ((v28 & 1) != 0);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v29 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      BOOL v30 = *(_DWORD *)(*(void *)&buf[8] + 24LL);
      *(_DWORD *)os_log_type_t v58 = 136446722;
      os_log_type_t v59 = "nw_protocol_shoes_send";
      __int16 v60 = 2082;
      char v61 = v49 + 151;
      __int16 v62 = 1024;
      int v63 = v30;
      _os_log_impl( &dword_181A5C000,  v29,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s Failed to use %u frames, marking as failed",  v58,  0x1Cu);
    }

    _Block_object_dispose(buf, 8);
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  int v31 = (os_log_s *)gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
  {
    output_handler = a1->output_handler;
    if (!output_handler
      || (get_output_local_endpoint = (uint64_t (*)(void))output_handler->callbacks->get_output_local_endpoint) == 0LL
      || (default_input_handler = (nw_protocol *)get_output_local_endpoint()) == 0LL)
    {
      default_input_handler = a1->default_input_handler;
      if (default_input_handler)
      {
        get_local_endpoint = (uint64_t (*)(void))default_input_handler->callbacks->get_local_endpoint;
        else {
          default_input_handler = 0LL;
        }
      }
    }

    BOOL v36 = v4[2];
    *(_DWORD *)os_log_type_t v55 = 136447234;
    *(void *)&v55[4] = "nw_protocol_shoes_send_request_inner";
    *(_WORD *)&v55[12] = 2082;
    *(void *)&v55[14] = handle + 151;
    *(_WORD *)&v55[22] = 2114;
    *(void *)&char v56 = default_input_handler;
    WORD4(v56) = 1024;
    *(_DWORD *)((char *)&v56 + 10) = v36;
    HIWORD(v56) = 1024;
    os_log_type_t v57 = v50;
    _os_log_impl( &dword_181A5C000,  v31,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}s Sent shoes request: local address %{public}@ type %u inner length %u no TFO",  v55,  0x2Cu);
  }

  handle[150] = 5;
  free(v4);
  return 1LL;
}

    if (v22) {
      free(v22);
    }

    goto LABEL_44;
  }

  v37.receiver = self;
  v37.super_class = (Class)&OBJC_CLASS___NWTCPConnection;
  BOOL v6 = -[NWTCPConnection init](&v37, sel_init);
  uint64_t v7 = v6;
  if (!v6)
  {
    __nwlog_obj();
    BOOL v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v41 = "-[NWTCPConnection initWithAcceptedInternalConnection:]";
    __int16 v26 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    __int16 v38 = 0;
    if (__nwlog_fault(v26, &type, &v38))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v28 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v41 = "-[NWTCPConnection initWithAcceptedInternalConnection:]";
          _os_log_impl(&dword_181A5C000, v27, v28, "%{public}s [super init] failed", buf, 0xCu);
        }
      }

      else if (v38)
      {
        __int16 v32 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v33 = type;
        uint64_t v34 = os_log_type_enabled(v27, type);
        if (v32)
        {
          if (v34)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v41 = "-[NWTCPConnection initWithAcceptedInternalConnection:]";
            os_log_type_t v42 = 2082;
            char v43 = v32;
            _os_log_impl( &dword_181A5C000,  v27,  v33,  "%{public}s [super init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v32);
          goto LABEL_42;
        }

        if (v34)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v41 = "-[NWTCPConnection initWithAcceptedInternalConnection:]";
          _os_log_impl(&dword_181A5C000, v27, v33, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v36 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v41 = "-[NWTCPConnection initWithAcceptedInternalConnection:]";
          _os_log_impl( &dword_181A5C000,  v27,  v36,  "%{public}s [super init] failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

LABEL_37:
      if (!v13)
      {
LABEL_39:
        BOOL v11 = 0LL;
        goto LABEL_40;
      }

LABEL_37:
      if (!v9)
      {
LABEL_39:
        uint64_t v7 = 0LL;
        goto LABEL_40;
      }

  if (v14) {
    free(v14);
  }
LABEL_19:
}

  if (v12) {
    free(v12);
  }
LABEL_19:
}

        goto LABEL_37;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v22 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v26 = "nw_candidate_create";
          _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s called with null details, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v19 = type;
      os_log_type_t v20 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v26 = "nw_candidate_create";
          _os_log_impl(&dword_181A5C000, v12, v19, "%{public}s called with null details, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v26 = "nw_candidate_create";
        os_log_type_t v27 = 2082;
        uint64_t v28 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v12,  v19,  "%{public}s called with null details, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v26 = "nw_candidate_create";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v23 = 0;
    if (__nwlog_fault(v11, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v26 = "nw_candidate_create";
          _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null manager", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v26 = "nw_candidate_create";
          _os_log_impl( &dword_181A5C000,  v12,  v21,  "%{public}s called with null manager, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v26 = "nw_candidate_create";
          _os_log_impl(&dword_181A5C000, v12, v17, "%{public}s called with null manager, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v26 = "nw_candidate_create";
        os_log_type_t v27 = 2082;
        uint64_t v28 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null manager, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_37;
      }

      if (!v23)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v26 = "nw_txt_record_get_key_data_value";
          _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s called with null out_value, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v26 = "nw_txt_record_get_key_data_value";
          _os_log_impl(&dword_181A5C000, v11, v18, "%{public}s called with null out_value, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v26 = "nw_txt_record_get_key_data_value";
        os_log_type_t v27 = 2082;
        uint64_t v28 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s called with null out_value, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v26 = "nw_txt_record_get_key_data_value";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v26 = "nw_txt_record_get_key_data_value";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null key", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v23)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v26 = "nw_txt_record_get_key_data_value";
          _os_log_impl( &dword_181A5C000,  v11,  v20,  "%{public}s called with null key, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v26 = "nw_txt_record_get_key_data_value";
          _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null key, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v26 = "nw_txt_record_get_key_data_value";
        os_log_type_t v27 = 2082;
        uint64_t v28 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null key, dumping backtrace:%{public}s",  buf,  0x16u);
      }

    free(v22);
    goto LABEL_37;
  }

  if (nw_protocol_demux_copy_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_5_25952);
  }
  if (nw_protocol_demux_copy_definition::definition)
  {
    __int16 v26 = os_retain((void *)nw_protocol_demux_copy_definition::definition);
    options = nw_protocol_create_options(v26);
    if (v26) {
      os_release(v26);
    }
  }

  else
  {
    options = nw_protocol_create_options(0LL);
  }

  uu[0] = -64;
  v184[0] = 64;
  uint64_t v33 = dispatch_data_get_size(v19);
  uint64_t v34 = v33 + 1;
  os_log_type_t v35 = (unsigned __int16)(v33 + 1);
  if (v35 >= 2) {
    memset(&uu[1], 255, (unsigned __int16)(v33 - 1) + 1LL);
  }
  *(void *)os_log_type_t type = 0LL;
  *(void *)&type[8] = type;
  *(void *)&type[16] = 0x2000000000LL;
  v183[0] = 0LL;
  __str[1] = __str;
  __str[2] = 0x2000000000LL;
  __str[3] = &v184[1];
  *(void *)buf = MEMORY[0x1895F87A8];
  *(void *)&uint8_t buf[8] = 0x40000000LL;
  *(void *)&buf[16] = __nw_dispatch_data_copyout_block_invoke;
  *(void *)&_BYTE buf[24] = &unk_189BBF598;
  v189 = v34 - 1LL;
  __str[0] = 0LL;
  *(void *)&buf[32] = type;
  *(void *)&buf[40] = __str;
  dispatch_data_apply(v19, buf);
  _Block_object_dispose(__str, 8);
  _Block_object_dispose(type, 8);
  nw_demux_options_add_pattern(options, 0, v35, (uint64_t)v184, (uint64_t)uu);
LABEL_38:

  nw_parameters_set_channel_demux_options(v16, options);
  os_log_type_t v39 = v15;
  os_log_type_t v40 = *(_DWORD *)(v39[13] + 64LL);

  os_log_type_t v41 = v179;
  if (!v40) {
    goto LABEL_62;
  }
  os_log_type_t v42 = v40;
  v189 = 0LL;
  memset(buf, 0, sizeof(buf));
  if (proc_pidinfo(v40, 17, 1uLL, buf, 56) != 56)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v43 = (id)gLogObj;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    os_log_type_t v45 = **(_DWORD **)(StatusReg + 8);
    *(_DWORD *)os_log_type_t type = 136446722;
    *(void *)&os_log_type_t type[4] = "nw_candidate_endpoint_for_ids_connection";
    *(_WORD *)&type[12] = 2048;
    *(void *)&type[14] = v42;
    *(_WORD *)&type[22] = 1024;
    LODWORD(v183[0]) = v45;
    os_log_type_t v46 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(__str[0]) = 16;
    uu[0] = 0;
    if (LOBYTE(__str[0]) == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v47 = (os_log_s *)(id)gLogObj;
      v48 = __str[0];
      if (os_log_type_enabled(v47, __str[0]))
      {
        os_log_type_t v49 = **(_DWORD **)(StatusReg + 8);
        *(_DWORD *)os_log_type_t type = 136446722;
        *(void *)&os_log_type_t type[4] = "nw_candidate_endpoint_for_ids_connection";
        *(_WORD *)&type[12] = 2048;
        *(void *)&type[14] = v42;
        *(_WORD *)&type[22] = 1024;
        LODWORD(v183[0]) = v49;
        _os_log_impl( &dword_181A5C000,  v47,  v48,  "%{public}s proc_pidinfo PROC_PIDUNIQIDENTIFIERINFO for %llu failed: %{darwin.errno}d",  type,  0x1Cu);
      }
    }

    else
    {
      if (uu[0])
      {
        BOOL v50 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v51 = (os_log_s *)(id)gLogObj;
        BOOL v52 = __str[0];
        os_log_type_t v53 = os_log_type_enabled(v51, __str[0]);
        if (v50)
        {
          if (v53)
          {
            os_log_type_t v54 = **(_DWORD **)(StatusReg + 8);
            *(_DWORD *)os_log_type_t type = 136446978;
            *(void *)&os_log_type_t type[4] = "nw_candidate_endpoint_for_ids_connection";
            *(_WORD *)&type[12] = 2048;
            *(void *)&type[14] = v42;
            *(_WORD *)&type[22] = 1024;
            LODWORD(v183[0]) = v54;
            WORD2(v183[0]) = 2082;
            *(void *)((char *)v183 + 6) = v50;
            _os_log_impl( &dword_181A5C000,  v51,  v52,  "%{public}s proc_pidinfo PROC_PIDUNIQIDENTIFIERINFO for %llu failed: %{darwin.errno}d, dumping backtrace:%{public}s",  type,  0x26u);
          }

          free(v50);
          if (!v46) {
            goto LABEL_60;
          }
          goto LABEL_59;
        }

        if (v53)
        {
          os_log_type_t v57 = **(_DWORD **)(StatusReg + 8);
          *(_DWORD *)os_log_type_t type = 136446722;
          *(void *)&os_log_type_t type[4] = "nw_candidate_endpoint_for_ids_connection";
          *(_WORD *)&type[12] = 2048;
          *(void *)&type[14] = v42;
          *(_WORD *)&type[22] = 1024;
          LODWORD(v183[0]) = v57;
          _os_log_impl( &dword_181A5C000,  v51,  v52,  "%{public}s proc_pidinfo PROC_PIDUNIQIDENTIFIERINFO for %llu failed: %{darwin.errno}d, no backtrace",  type,  0x1Cu);
        }

LABEL_58:
        if (!v46)
        {
LABEL_60:
          os_log_type_t v41 = v179;
          goto LABEL_61;
        }

  if (v15) {
    free(v15);
  }
}

  if (v15) {
    free(v15);
  }
  return 0LL;
}

  if (v18) {
    free(v18);
  }
  os_log_type_t v8 = 2LL;
LABEL_5:

  input_handler[0] = v3;
  input_handler[1] = 3221225472LL;
  input_handler[2] = __nw_protocol_copy_ws_definition_block_invoke_6;
  input_handler[3] = &unk_189BC1158;
  os_log_type_t v41 = &v48;
  uint64_t v9 = v2;
  os_log_type_t v40 = v9;
  nw_framer_set_input_handler(v9, input_handler);
  output_handler[0] = v3;
  output_handler[1] = 3221225472LL;
  output_handler[2] = __nw_protocol_copy_ws_definition_block_invoke_26;
  output_handler[3] = &unk_189BC11A8;
  __int16 v38 = &v48;
  os_log_type_t v10 = v9;
  os_log_type_t v37 = v10;
  nw_framer_set_output_handler(v10, output_handler);
  stop_handler[0] = v3;
  stop_handler[1] = 3221225472LL;
  stop_handler[2] = __nw_protocol_copy_ws_definition_block_invoke_29;
  stop_handler[3] = &unk_189BB6608;
  stop_handler[4] = &v48;
  nw_framer_set_stop_handler(v10, stop_handler);
  cleanup_handler[0] = v3;
  cleanup_handler[1] = 3221225472LL;
  cleanup_handler[2] = __nw_protocol_copy_ws_definition_block_invoke_33;
  cleanup_handler[3] = &unk_189BC11D0;
  cleanup_handler[4] = &v48;
  nw_framer_set_cleanup_handler(v10, cleanup_handler);
  v33[0] = v3;
  v33[1] = 3221225472LL;
  v33[2] = __nw_protocol_copy_ws_definition_block_invoke_2_35;
  v33[3] = &unk_189BB6630;
  v33[4] = &v48;
  nw_framer_set_copy_metadata(v10, v33);
  BOOL v11 = (void *)v49[11];
  if (v11)
  {
    os_log_type_t v12 = v10;
    char v13 = v11;
    if (v2)
    {
      *(void *)applier = v3;
      *(void *)&applier[8] = 3221225472LL;
      *(void *)&applier[16] = __nw_framer_trigger_input_block_invoke;
      uint64_t v70 = &unk_189BB9A98;
      os_log_type_t v14 = v12;
      os_log_type_t v71 = v14;
      dispatch_data_apply(v13, applier);
      async_block = v3;
      p_async_block = 3221225472LL;
      os_log_type_t v44 = (uint64_t)__nw_framer_trigger_input_block_invoke_2;
      os_log_type_t v45 = &unk_189BC93A0;
      os_log_type_t v46 = v14;
      nw_framer_async(v46, &async_block);

LABEL_8:
      os_log_type_t v15 = (void *)v49[11];
      v49[11] = 0LL;

      goto LABEL_9;
    }

    __nwlog_obj();
    os_log_type_t v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(void *)&applier[4] = "nw_framer_trigger_input";
    char v22 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(async_block) = 16;
    BOOL v47 = 0;
    if (__nwlog_fault(v22, &async_block, &v47))
    {
      if (async_block == 17)
      {
        __nwlog_obj();
        uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v24 = async_block;
        if (os_log_type_enabled(v23, (os_log_type_t)async_block))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&applier[4] = "nw_framer_trigger_input";
          _os_log_impl(&dword_181A5C000, v23, v24, "%{public}s called with null framer", applier, 0xCu);
        }
      }

      else if (v47)
      {
        uint64_t v28 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        int v29 = async_block;
        BOOL v30 = os_log_type_enabled(v23, (os_log_type_t)async_block);
        if (v28)
        {
          if (v30)
          {
            *(_DWORD *)applier = 136446466;
            *(void *)&applier[4] = "nw_framer_trigger_input";
            *(_WORD *)&applier[12] = 2082;
            *(void *)&applier[14] = v28;
            _os_log_impl( &dword_181A5C000,  v23,  v29,  "%{public}s called with null framer, dumping backtrace:%{public}s",  applier,  0x16u);
          }

          free(v28);
          goto LABEL_45;
        }

        if (v30)
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&applier[4] = "nw_framer_trigger_input";
          _os_log_impl(&dword_181A5C000, v23, v29, "%{public}s called with null framer, no backtrace", applier, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        __int16 v32 = async_block;
        if (os_log_type_enabled(v23, (os_log_type_t)async_block))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&applier[4] = "nw_framer_trigger_input";
          _os_log_impl( &dword_181A5C000,  v23,  v32,  "%{public}s called with null framer, backtrace limit exceeded",  applier,  0xCu);
        }
      }
    }

        free(backtrace_string);
      }
    }

        free(backtrace_string);
      }
    }

        goto LABEL_37;
      }

      if (!v20)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v23 = "nw_framer_create_options";
          _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s called with null nw_protocol_definition_is_framer(definition), backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v23 = "nw_framer_create_options";
          _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s called with null nw_protocol_definition_is_framer(definition), no backtrace",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v23 = "nw_framer_create_options";
        os_log_type_t v24 = 2082;
        BOOL v25 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s called with null nw_protocol_definition_is_framer(definition), dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v23 = "nw_framer_create_options";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v20 = 0;
    if (__nwlog_fault(v8, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v23 = "nw_framer_create_options";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null definition", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v20)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v23 = "nw_framer_create_options";
          _os_log_impl( &dword_181A5C000,  v9,  v18,  "%{public}s called with null definition, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      os_log_type_t v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v23 = "nw_framer_create_options";
          _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null definition, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v23 = "nw_framer_create_options";
        os_log_type_t v24 = 2082;
        BOOL v25 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null definition, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_45;
    }

    if (v7)
    {
      if ((v7[346] & 0x20) != 0) {
        goto LABEL_36;
      }
      if (v7[256])
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        os_log_type_t v14 = (os_log_s *)(id)gconnectionLogObj;
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
          goto LABEL_35;
        }
        *(_DWORD *)buf = 136446978;
        int v31 = "nw_resolver_endpoint_should_be_before";
        __int16 v32 = 2082;
        *(void *)uint64_t v33 = v7 + 256;
        *(_WORD *)&v33[8] = 1024;
        *(_DWORD *)uint64_t v34 = type;
        *(_WORD *)&v34[4] = 1024;
        os_log_type_t v35 = v11;
        os_log_type_t v15 = "%{public}s [C%{public}s] Endpoint types do not match (%u != %u)";
        os_log_type_t v16 = v14;
        BOOL v17 = 34;
        goto LABEL_34;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v14 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        uint64_t v23 = *((_DWORD *)v7 + 85);
        *(_DWORD *)buf = 136446978;
        int v31 = "nw_resolver_endpoint_should_be_before";
        __int16 v32 = 1024;
        *(_DWORD *)uint64_t v33 = v23;
        *(_WORD *)&v33[4] = 1024;
        *(_DWORD *)&v33[6] = type;
        *(_WORD *)uint64_t v34 = 1024;
        *(_DWORD *)&v34[2] = v11;
        os_log_type_t v15 = "%{public}s [R%u] Endpoint types do not match (%u != %u)";
        os_log_type_t v16 = v14;
        BOOL v17 = 30;
        goto LABEL_34;
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v14 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        int v31 = "nw_resolver_endpoint_should_be_before";
        __int16 v32 = 1024;
        *(_DWORD *)uint64_t v33 = type;
        *(_WORD *)&v33[4] = 1024;
        *(_DWORD *)&v33[6] = v11;
        os_log_type_t v15 = "%{public}s Endpoint types do not match (%u != %u)";
        os_log_type_t v16 = v14;
        BOOL v17 = 24;
LABEL_34:
        _os_log_impl(&dword_181A5C000, v16, OS_LOG_TYPE_ERROR, v15, buf, v17);
      }
    }

    if (v13) {
      free(v13);
    }
    goto LABEL_18;
  }

        goto LABEL_37;
      }

      if (!v24)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v27 = "nw_ws_request_enumerate_subprotocols";
          _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s called with null enumerator, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v27 = "nw_ws_request_enumerate_subprotocols";
          _os_log_impl(&dword_181A5C000, v11, v18, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v27 = "nw_ws_request_enumerate_subprotocols";
        uint64_t v28 = 2082;
        int v29 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s called with null enumerator, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v27 = "nw_ws_request_enumerate_subprotocols";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v24 = 0;
    if (__nwlog_fault(v10, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v27 = "nw_ws_request_enumerate_subprotocols";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null request", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v24)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v27 = "nw_ws_request_enumerate_subprotocols";
          _os_log_impl( &dword_181A5C000,  v11,  v20,  "%{public}s called with null request, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v27 = "nw_ws_request_enumerate_subprotocols";
          _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null request, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v27 = "nw_ws_request_enumerate_subprotocols";
        uint64_t v28 = 2082;
        int v29 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null request, dumping backtrace:%{public}s",  buf,  0x16u);
      }

          goto LABEL_102;
        }

        os_log_type_t v39 = (void *)*((void *)a1 + 8);
        if (v39)
        {
          os_log_type_t v40 = v39;
          os_log_type_t v41 = v40[2];

          if (v41 == 2 && !nw_parameters_has_multiplexed_protocol_in_stack(*((void **)a1 + 7)))
          {
            if (nw_parameters_get_logging_disabled(*((void *)a1 + 7))) {
              goto LABEL_102;
            }
            if (__nwlog_connection_group_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
            }
            os_log_type_t v37 = (os_log_s *)(id)gconnection_groupLogObj;
            if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
            {
              v86 = *((_DWORD *)a1 + 42);
              *(_DWORD *)buf = 136446466;
              v164 = "-[NWConcrete_nw_connection_group initWithDescriptor:connection:parameters:]";
              v165 = 1024;
              *(_DWORD *)v166 = v86;
              _os_log_impl( &dword_181A5C000,  v37,  OS_LOG_TYPE_ERROR,  "%{public}s [G%u] cannot create multiplex connection group with non-multiplex parameters",  buf,  0x12u);
            }

            goto LABEL_36;
          }
        }
      }

      os_log_type_t v42 = nw_parameters_copy_local_endpoint(*((nw_parameters_t *)a1 + 7));
      char v43 = v42;
      if (v42)
      {
        os_log_type_t v44 = v42;
        os_log_type_t v45 = -[nw_endpoint port](v44, "port");

        *((_WORD *)a1 + 94) = __rev16(v45);
      }

      os_log_type_t v46 = (void *)*((void *)a1 + 8);
      if (!v46) {
        goto LABEL_109;
      }
      BOOL v47 = v46;
      v48 = v47[2];

      if (v48 == 1)
      {
        *(void *)os_log_type_t type = 0LL;
        v159 = type;
        v160 = 0x2020000000LL;
        v161 = 0;
        v154 = 0LL;
        v155 = &v154;
        v156 = 0x2020000000LL;
        v157 = 0LL;
        os_log_type_t v49 = (nw_group_descriptor *)*((void *)a1 + 8);
        enumerate_block[0] = MEMORY[0x1895F87A8];
        enumerate_block[1] = 3221225472LL;
        enumerate_block[2] = __75__NWConcrete_nw_connection_group_initWithDescriptor_connection_parameters___block_invoke;
        enumerate_block[3] = &unk_189BB7128;
        enumerate_block[4] = type;
        enumerate_block[5] = &v154;
        nw_group_descriptor_enumerate_endpoints(v49, enumerate_block);
        if (!nw_parameters_get_logging_disabled(*((void *)a1 + 7)) && gLogDatapath)
        {
          if (__nwlog_connection_group_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
          }
          v141 = (os_log_s *)(id)gconnection_groupLogObj;
          if (os_log_type_enabled(v141, OS_LOG_TYPE_DEBUG))
          {
            v142 = *((_DWORD *)a1 + 42);
            v143 = (const char *)v155[3];
            if (!v143) {
              v143 = "<ephemeral>";
            }
            *(_DWORD *)buf = 136446722;
            v164 = "-[NWConcrete_nw_connection_group initWithDescriptor:connection:parameters:]";
            v165 = 1024;
            *(_DWORD *)v166 = v142;
            *(_WORD *)&v166[4] = 2080;
            *(void *)&v166[6] = v143;
            _os_log_impl( &dword_181A5C000,  v141,  OS_LOG_TYPE_DEBUG,  "%{public}s [G%u] using port %s for connection group listener",  buf,  0x1Cu);
          }
        }

        BOOL v50 = *((id *)a1 + 7);
        os_log_type_t v51 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]( (id *)objc_alloc(&OBJC_CLASS___NWConcrete_nw_parameters),  v50,  0,  0);

        if (*((_WORD *)v159 + 12)) {
          nw_parameters_set_local_endpoint((nw_parameters_t)v51, 0LL);
        }
        else {
          *((_WORD *)v159 + 12) = *((_WORD *)a1 + 94);
        }
        multicast = nw_listener_create_multicast(*((void **)a1 + 8), (void *)v51, (const char *)v155[3]);
        char v61 = (void *)*((void *)a1 + 11);
        *((void *)a1 + 11) = multicast;

        __int16 v62 = (void *)v155[3];
        if (v62)
        {
          free(v62);
          v155[3] = 0LL;
        }

        int v63 = *((void *)a1 + 11);
        if (v63)
        {
          nw_parameters_set_allow_socket_access((void *)v51, 1);
          nw_parameters_set_reuse_local_address((nw_parameters_t)v51, 1);
          if (v43) {
            nw_parameters_set_local_endpoint((nw_parameters_t)v51, v43);
          }
          uint64_t v64 = nw_listener_create((nw_parameters_t)v51);
          id v65 = (void *)*((void *)a1 + 12);
          *((void *)a1 + 12) = v64;

          if (nw_parameters_get_logging_disabled(*((void *)a1 + 7)))
          {
LABEL_75:

            _Block_object_dispose(&v154, 8);
            _Block_object_dispose(type, 8);
            if (!v63)
            {
LABEL_76:
              __uint64_t v76 = 0LL;
LABEL_142:

              goto LABEL_143;
            }

            goto LABEL_128;
          }

          if (__nwlog_connection_group_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
          }
          BOOL v66 = (id)gconnection_groupLogObj;
          if (!os_log_type_enabled((os_log_t)v66, OS_LOG_TYPE_INFO))
          {
LABEL_74:

            goto LABEL_75;
          }

          os_log_type_t v67 = *((_DWORD *)a1 + 42);
          __int16 v68 = *((void *)a1 + 12);
          *(_DWORD *)buf = 136446722;
          v164 = "-[NWConcrete_nw_connection_group initWithDescriptor:connection:parameters:]";
          v165 = 1024;
          *(_DWORD *)v166 = v67;
          *(_WORD *)&v166[4] = 2114;
          *(void *)&v166[6] = v68;
          v69 = "%{public}s [G%u] creating unicast listener: %{public}@";
          uint64_t v70 = (os_log_s *)v66;
          os_log_type_t v71 = OS_LOG_TYPE_INFO;
          v72 = 28;
        }

        else
        {
          if (nw_parameters_get_logging_disabled(*((void *)a1 + 7))) {
            goto LABEL_75;
          }
          if (__nwlog_connection_group_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
          }
          BOOL v66 = (id)gconnection_groupLogObj;
          if (!os_log_type_enabled((os_log_t)v66, OS_LOG_TYPE_ERROR)) {
            goto LABEL_74;
          }
          __uint64_t v73 = *((_DWORD *)a1 + 42);
          char v75 = *((void *)a1 + 7);
          unint64_t v74 = *((void *)a1 + 8);
          *(_DWORD *)buf = 136446978;
          v164 = "-[NWConcrete_nw_connection_group initWithDescriptor:connection:parameters:]";
          v165 = 1024;
          *(_DWORD *)v166 = v73;
          *(_WORD *)&v166[4] = 2112;
          *(void *)&v166[6] = v74;
          *(_WORD *)&v166[14] = 2112;
          *(void *)&v166[16] = v75;
          v69 = "%{public}s [G%u] failed to create listener with descriptor %@, and parameters %@";
          uint64_t v70 = (os_log_s *)v66;
          os_log_type_t v71 = OS_LOG_TYPE_ERROR;
          v72 = 38;
        }

        _os_log_impl(&dword_181A5C000, v70, v71, v69, buf, v72);
        goto LABEL_74;
      }

      BOOL v52 = (void *)*((void *)a1 + 8);
      if (!v52) {
        goto LABEL_109;
      }
      os_log_type_t v53 = v52;
      os_log_type_t v54 = v53[2];

      os_log_type_t v55 = (void *)*((void *)a1 + 8);
      if (v54 == 2)
      {
        char v56 = (nw_endpoint *)nw_group_descriptor_copy_member(v55);
        logging_disabled = nw_parameters_get_logging_disabled(*((void *)a1 + 7));
        if (gLogDatapath) {
          os_log_type_t v58 = logging_disabled;
        }
        else {
          os_log_type_t v58 = 1;
        }
        if (v8)
        {
          if ((v58 & 1) == 0)
          {
            if (__nwlog_connection_group_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
            }
            v144 = (os_log_s *)(id)gconnection_groupLogObj;
            if (os_log_type_enabled(v144, OS_LOG_TYPE_DEBUG))
            {
              v145 = *((_DWORD *)a1 + 42);
              v146 = (const char *)*((void *)a1 + 7);
              *(_DWORD *)buf = 136447234;
              v164 = "-[NWConcrete_nw_connection_group initWithDescriptor:connection:parameters:]";
              v165 = 1024;
              *(_DWORD *)v166 = v145;
              *(_WORD *)&v166[4] = 2112;
              *(void *)&v166[6] = v8;
              *(_WORD *)&v166[14] = 2112;
              *(void *)&v166[16] = v56;
              v167 = 2112;
              v168 = v146;
              _os_log_impl( &dword_181A5C000,  v144,  OS_LOG_TYPE_DEBUG,  "%{public}s [G%u] using provided connection (%@) for multiplex endpoint (%@) and parameters (%@)",  buf,  0x30u);
            }
          }

          os_log_type_t v59 = (nw_connection_t)v8;
        }

        else
        {
          if ((v58 & 1) == 0)
          {
            if (__nwlog_connection_group_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
            }
            v147 = (os_log_s *)(id)gconnection_groupLogObj;
            if (os_log_type_enabled(v147, OS_LOG_TYPE_DEBUG))
            {
              v148 = *((_DWORD *)a1 + 42);
              v149 = *((void *)a1 + 7);
              *(_DWORD *)buf = 136446978;
              v164 = "-[NWConcrete_nw_connection_group initWithDescriptor:connection:parameters:]";
              v165 = 1024;
              *(_DWORD *)v166 = v148;
              *(_WORD *)&v166[4] = 2112;
              *(void *)&v166[6] = v56;
              *(_WORD *)&v166[14] = 2112;
              *(void *)&v166[16] = v149;
              _os_log_impl( &dword_181A5C000,  v147,  OS_LOG_TYPE_DEBUG,  "%{public}s [G%u] creating connection for multiplex endpoint (%@) and parameters (%@)",  buf,  0x26u);
            }
          }

          os_log_type_t v59 = nw_connection_create(v56, *((nw_parameters_t *)a1 + 7));
        }

        os_log_type_t v87 = v59;
        aBlock[0] = MEMORY[0x1895F87A8];
        aBlock[1] = 3221225472LL;
        aBlock[2] = __75__NWConcrete_nw_connection_group_initWithDescriptor_connection_parameters___block_invoke_10;
        aBlock[3] = &unk_189BC9238;
        v151 = a1;
        v152 = v87;
        v88 = v87;
        os_log_type_t v89 = (void (**)(void))_Block_copy(aBlock);
        os_unfair_lock_lock((os_unfair_lock_t)a1 + 43);
        v89[2](v89);
        os_unfair_lock_unlock((os_unfair_lock_t)a1 + 43);

        goto LABEL_128;
      }

      if (!v55) {
        goto LABEL_109;
      }
      unint64_t v78 = v55;
      char v79 = v78[2];

      if (v79 == 3) {
        goto LABEL_128;
      }
      v80 = (void *)*((void *)a1 + 8);
      if (!v80) {
        goto LABEL_109;
      }
      if (nw_group_descriptor_get_type(v80) == 4)
      {
        v81 = nw_listener_create(*((nw_parameters_t *)a1 + 7));
        v82 = (void *)*((void *)a1 + 11);
        *((void *)a1 + 11) = v81;

        if (!*((void *)a1 + 11))
        {
          if (!nw_parameters_get_logging_disabled(*((void *)a1 + 7)))
          {
            if (__nwlog_connection_group_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44330);
            }
            os_log_type_t v83 = (os_log_s *)(id)gconnection_groupLogObj;
            if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
            {
              v84 = *((_DWORD *)a1 + 42);
              v85 = *((void *)a1 + 7);
              *(_DWORD *)buf = 136446722;
              v164 = "-[NWConcrete_nw_connection_group initWithDescriptor:connection:parameters:]";
              v165 = 1024;
              *(_DWORD *)v166 = v84;
              *(_WORD *)&v166[4] = 2112;
              *(void *)&v166[6] = v85;
              _os_log_impl( &dword_181A5C000,  v83,  OS_LOG_TYPE_ERROR,  "%{public}s [G%u] failed to create listener with parameters %@",  buf,  0x1Cu);
            }
          }

          goto LABEL_76;
        }

        goto LABEL_37;
      }

      if (!v21)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_connection_group_create";
          _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_connection_group_create";
          _os_log_impl(&dword_181A5C000, v10, v17, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v24 = "nw_connection_group_create";
        BOOL v25 = 2082;
        __int16 v26 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v24 = "nw_connection_group_create";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_connection_group_create";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null group_descriptor", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v21)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_connection_group_create";
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null group_descriptor, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      os_log_type_t v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_connection_group_create";
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null group_descriptor, no backtrace",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v24 = "nw_connection_group_create";
        BOOL v25 = 2082;
        __int16 v26 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null group_descriptor, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_37;
      }

      if (!v21)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_connection_group_create_with_connection";
          _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_connection_group_create_with_connection";
          _os_log_impl(&dword_181A5C000, v10, v17, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v24 = "nw_connection_group_create_with_connection";
        BOOL v25 = 2082;
        __int16 v26 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v24 = "nw_connection_group_create_with_connection";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_connection_group_create_with_connection";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null group_descriptor", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v21)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_connection_group_create_with_connection";
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null group_descriptor, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      os_log_type_t v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_connection_group_create_with_connection";
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null group_descriptor, no backtrace",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v24 = "nw_connection_group_create_with_connection";
        BOOL v25 = 2082;
        __int16 v26 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null group_descriptor, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_37;
      }

      if (!v26)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_copy_protocol_metadata";
          _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s called with null definition, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_copy_protocol_metadata";
          _os_log_impl(&dword_181A5C000, v11, v18, "%{public}s called with null definition, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_group_copy_protocol_metadata";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s called with null definition, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_group_copy_protocol_metadata";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    __int16 v26 = 0;
    if (__nwlog_fault(v10, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_copy_protocol_metadata";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null group", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v26)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_copy_protocol_metadata";
          _os_log_impl( &dword_181A5C000,  v11,  v20,  "%{public}s called with null group, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_group_copy_protocol_metadata";
          _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null group, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_group_copy_protocol_metadata";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null group, dumping backtrace:%{public}s",  buf,  0x16u);
      }

  return v20;
}

          free(v22);
          goto LABEL_37;
        }
      }
    }

    goto LABEL_18;
  }

  uint64_t v9 = (nw_endpoint *)nw_content_context_copy_local_endpoint(v5);
  if (!v9)
  {
    os_log_type_t v10 = nw_connection_group_copy_connection_for_message(v3, v5);
    BOOL v11 = v10;
    if (v10) {
      goto LABEL_13;
    }
    goto LABEL_14;
  }

      free(backtrace_string);
    }
  }

        goto LABEL_37;
      }

      if (!v19)
      {
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          char v22 = "nw_protocol_instance_copy_association";
          _os_log_impl( &dword_181A5C000,  v8,  v18,  "%{public}s called with null instance->endpoint, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      os_log_type_t v16 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          char v22 = "nw_protocol_instance_copy_association";
          _os_log_impl( &dword_181A5C000,  v8,  v15,  "%{public}s called with null instance->endpoint, no backtrace",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        char v22 = "nw_protocol_instance_copy_association";
        uint64_t v23 = 2082;
        os_log_type_t v24 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v8,  v15,  "%{public}s called with null instance->endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    BOOL v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v22 = "nw_protocol_instance_copy_association";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v19 = 0;
    if (__nwlog_fault(v7, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          char v22 = "nw_protocol_instance_copy_association";
          _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null instance", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v19)
      {
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v17 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          char v22 = "nw_protocol_instance_copy_association";
          _os_log_impl( &dword_181A5C000,  v8,  v17,  "%{public}s called with null instance, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v13 = type;
      os_log_type_t v14 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          char v22 = "nw_protocol_instance_copy_association";
          _os_log_impl(&dword_181A5C000, v8, v13, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v14)
      {
        *(_DWORD *)buf = 136446466;
        char v22 = "nw_protocol_instance_copy_association";
        uint64_t v23 = 2082;
        os_log_type_t v24 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null instance, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_37;
      }

      if (!v21)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_protocol_instance_get_buffer_manager";
          _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null instance->context, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_protocol_instance_get_buffer_manager";
          _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s called with null instance->context, no backtrace",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v24 = "nw_protocol_instance_get_buffer_manager";
        BOOL v25 = 2082;
        __int16 v26 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s called with null instance->context, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v24 = "nw_protocol_instance_get_buffer_manager";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_protocol_instance_get_buffer_manager";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null instance", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v21)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_protocol_instance_get_buffer_manager";
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null instance, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      os_log_type_t v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_protocol_instance_get_buffer_manager";
          _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v24 = "nw_protocol_instance_get_buffer_manager";
        BOOL v25 = 2082;
        __int16 v26 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null instance, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v23);
      goto LABEL_37;
    }

    __nwlog_obj();
    os_log_type_t v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v47 = "nw_protocol_implementation_create";
    __int16 v32 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v44 = 0;
    if (__nwlog_fault(v32, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v36 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v47 = "nw_protocol_implementation_create";
          _os_log_impl(&dword_181A5C000, v33, v36, "%{public}s called with null handle", buf, 0xCu);
        }

    if (v26) {
      free(v26);
    }
    if (v7)
    {
      free((void *)v7);
      uint64_t v9 = 0LL;
      uint64_t v7 = 0LL;
    }

    else
    {
      uint64_t v9 = 0LL;
    }

    goto LABEL_14;
  }

    if (v24) {
      free(v24);
    }
    if (v7)
    {
      free((void *)v7);
      uint64_t v9 = 0LL;
      uint64_t v7 = 0LL;
    }

    else
    {
      uint64_t v9 = 0LL;
    }

    goto LABEL_14;
  }

        if ((*((_WORD *)data_from_pool + 102) & 4) != 0) {
          int v29 = (char *)(data_from_pool + 26);
        }
        else {
          int v29 = 0LL;
        }
        *((void *)v29 + 1) = _Block_copy(v6);
        goto LABEL_40;
      }

      __nwlog_obj();
      __int16 v32 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      os_log_type_t v42 = "nw_protocol_create_inbound_data";
      char v13 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      os_log_type_t v39 = 0;
      if (__nwlog_fault(v13, &type, &v39))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          uint64_t v33 = type;
          if (os_log_type_enabled(v14, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v42 = "nw_protocol_create_inbound_data";
            _os_log_impl(&dword_181A5C000, v14, v33, "%{public}s nw_frame_create failed", buf, 0xCu);
          }

        goto LABEL_37;
      }

      if (!v18)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_bonjour_name";
          _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s invalid advertise descriptor type, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      os_log_type_t v15 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_bonjour_name";
          _os_log_impl( &dword_181A5C000,  v7,  v14,  "%{public}s invalid advertise descriptor type, no backtrace",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v21 = "nw_advertise_descriptor_get_bonjour_name";
        char v22 = 2082;
        uint64_t v23 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v7,  v14,  "%{public}s invalid advertise descriptor type, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v21 = "nw_advertise_descriptor_get_bonjour_name";
    BOOL v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_bonjour_name";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null advertise_descriptor", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v18)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_bonjour_name";
          _os_log_impl( &dword_181A5C000,  v7,  v16,  "%{public}s called with null advertise_descriptor, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      char v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_bonjour_name";
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null advertise_descriptor, no backtrace",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v21 = "nw_advertise_descriptor_get_bonjour_name";
        char v22 = 2082;
        uint64_t v23 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null advertise_descriptor, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_37;
      }

      if (!v18)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_bonjour_type";
          _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s invalid advertise descriptor type, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      os_log_type_t v15 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_bonjour_type";
          _os_log_impl( &dword_181A5C000,  v7,  v14,  "%{public}s invalid advertise descriptor type, no backtrace",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v21 = "nw_advertise_descriptor_get_bonjour_type";
        char v22 = 2082;
        uint64_t v23 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v7,  v14,  "%{public}s invalid advertise descriptor type, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v21 = "nw_advertise_descriptor_get_bonjour_type";
    BOOL v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_bonjour_type";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null advertise_descriptor", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v18)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_bonjour_type";
          _os_log_impl( &dword_181A5C000,  v7,  v16,  "%{public}s called with null advertise_descriptor, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      char v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_bonjour_type";
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null advertise_descriptor, no backtrace",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v21 = "nw_advertise_descriptor_get_bonjour_type";
        char v22 = 2082;
        uint64_t v23 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null advertise_descriptor, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_37;
      }

      if (!v18)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_bonjour_domain";
          _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s invalid advertise descriptor type, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      os_log_type_t v15 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_bonjour_domain";
          _os_log_impl( &dword_181A5C000,  v7,  v14,  "%{public}s invalid advertise descriptor type, no backtrace",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v21 = "nw_advertise_descriptor_get_bonjour_domain";
        char v22 = 2082;
        uint64_t v23 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v7,  v14,  "%{public}s invalid advertise descriptor type, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v21 = "nw_advertise_descriptor_get_bonjour_domain";
    BOOL v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_bonjour_domain";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null advertise_descriptor", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v18)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_bonjour_domain";
          _os_log_impl( &dword_181A5C000,  v7,  v16,  "%{public}s called with null advertise_descriptor, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      char v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_bonjour_domain";
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null advertise_descriptor, no backtrace",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v21 = "nw_advertise_descriptor_get_bonjour_domain";
        char v22 = 2082;
        uint64_t v23 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null advertise_descriptor, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_37;
      }

      if (!v18)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_no_auto_rename";
          _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s invalid advertise descriptor type, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      os_log_type_t v15 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_no_auto_rename";
          _os_log_impl( &dword_181A5C000,  v7,  v14,  "%{public}s invalid advertise descriptor type, no backtrace",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v21 = "nw_advertise_descriptor_get_no_auto_rename";
        char v22 = 2082;
        uint64_t v23 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v7,  v14,  "%{public}s invalid advertise descriptor type, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v21 = "nw_advertise_descriptor_get_no_auto_rename";
    BOOL v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_no_auto_rename";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null advertise_descriptor", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v18)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_no_auto_rename";
          _os_log_impl( &dword_181A5C000,  v7,  v16,  "%{public}s called with null advertise_descriptor, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      char v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_no_auto_rename";
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null advertise_descriptor, no backtrace",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v21 = "nw_advertise_descriptor_get_no_auto_rename";
        char v22 = 2082;
        uint64_t v23 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null advertise_descriptor, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_37;
      }

      if (!v18)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_copy_txt_record_object";
          _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s invalid advertise descriptor type, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      os_log_type_t v15 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_copy_txt_record_object";
          _os_log_impl( &dword_181A5C000,  v7,  v14,  "%{public}s invalid advertise descriptor type, no backtrace",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v21 = "nw_advertise_descriptor_copy_txt_record_object";
        char v22 = 2082;
        uint64_t v23 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v7,  v14,  "%{public}s invalid advertise descriptor type, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v21 = "nw_advertise_descriptor_copy_txt_record_object";
    BOOL v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_copy_txt_record_object";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null advertise_descriptor", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v18)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_copy_txt_record_object";
          _os_log_impl( &dword_181A5C000,  v7,  v16,  "%{public}s called with null advertise_descriptor, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      char v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_copy_txt_record_object";
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null advertise_descriptor, no backtrace",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v21 = "nw_advertise_descriptor_copy_txt_record_object";
        char v22 = 2082;
        uint64_t v23 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null advertise_descriptor, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_37;
      }

      if (!v18)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_application_service_name";
          _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s invalid advertise descriptor type, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      os_log_type_t v15 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_application_service_name";
          _os_log_impl( &dword_181A5C000,  v7,  v14,  "%{public}s invalid advertise descriptor type, no backtrace",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v21 = "nw_advertise_descriptor_get_application_service_name";
        char v22 = 2082;
        uint64_t v23 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v7,  v14,  "%{public}s invalid advertise descriptor type, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v21 = "nw_advertise_descriptor_get_application_service_name";
    BOOL v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_application_service_name";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null descriptor", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v18)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_application_service_name";
          _os_log_impl( &dword_181A5C000,  v7,  v16,  "%{public}s called with null descriptor, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      char v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_application_service_name";
          _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v21 = "nw_advertise_descriptor_get_application_service_name";
        char v22 = 2082;
        uint64_t v23 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null descriptor, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_37;
      }

      if (!v18)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_bundle_id";
          _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s invalid advertise descriptor type, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      os_log_type_t v15 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_bundle_id";
          _os_log_impl( &dword_181A5C000,  v7,  v14,  "%{public}s invalid advertise descriptor type, no backtrace",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v21 = "nw_advertise_descriptor_get_bundle_id";
        char v22 = 2082;
        uint64_t v23 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v7,  v14,  "%{public}s invalid advertise descriptor type, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v21 = "nw_advertise_descriptor_get_bundle_id";
    BOOL v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_bundle_id";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null descriptor", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v18)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_bundle_id";
          _os_log_impl( &dword_181A5C000,  v7,  v16,  "%{public}s called with null descriptor, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      char v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_advertise_descriptor_get_bundle_id";
          _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v21 = "nw_advertise_descriptor_get_bundle_id";
        char v22 = 2082;
        uint64_t v23 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null descriptor, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_46;
    }

    char v13 = (os_log_s *)__nwlog_obj();
    os_log_type_t v14 = type;
    if (!os_log_type_enabled(v13, type)) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_trainer_top_check_input";
    os_log_type_t v15 = "%{public}s called with null protocol";
LABEL_45:
    _os_log_impl(&dword_181A5C000, v13, v14, v15, buf, 0xCu);
LABEL_46:
    if (v12) {
      free(v12);
    }
    return 0LL;
  }

  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_trainer_top_check_input";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_trainer_top_check_input";
      os_log_type_t v15 = "%{public}s called with null trainer";
      goto LABEL_45;
    }

    if (!v22)
    {
      char v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_trainer_top_check_input";
      os_log_type_t v15 = "%{public}s called with null trainer, backtrace limit exceeded";
      goto LABEL_45;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    char v13 = (os_log_s *)__nwlog_obj();
    os_log_type_t v14 = type;
    BOOL v19 = os_log_type_enabled(v13, type);
    if (backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_trainer_top_check_input";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        os_log_type_t v18 = "%{public}s called with null trainer, dumping backtrace:%{public}s";
        goto LABEL_35;
      }

      goto LABEL_36;
    }

    if (!v19) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_trainer_top_check_input";
    os_log_type_t v15 = "%{public}s called with null trainer, no backtrace";
    goto LABEL_45;
  }

  id v3 = *(void *)(v2 + 120);
  if (!v3) {
    return 0LL;
  }
  *(void *)buf = 0LL;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&buf[16] = 0x3802000000LL;
  BOOL v25 = __Block_byref_object_copy__17322;
  __int16 v26 = __Block_byref_object_dispose__17323;
  object = 0LL;
  uint64_t v28 = -1;
  v21[0] = MEMORY[0x1895F87A8];
  v21[1] = 0x40000000LL;
  v21[2] = __nw_protocol_trainer_top_check_input_block_invoke;
  v21[3] = &unk_189BB87A0;
  v21[4] = buf;
  nw_frame_foreach_protocol_metadata(v3, 0, (uint64_t)v21);
  if (!*(void *)(v3 + 112)
    || (*(_WORD *)(v3 + 204) & 0x100) != 0
    && g_channel_check_validity
    && !g_channel_check_validity(v3, *(void *)(v3 + 88)))
  {
    uint64_t v7 = 0LL;
    os_log_type_t v8 = 0LL;
  }

  else
  {
    BOOL v6 = *(_DWORD *)(v3 + 52);
    uint64_t v5 = *(unsigned int *)(v3 + 56);
    if (v6) {
      uint64_t v7 = (v6 - (v5 + *(_DWORD *)(v3 + 60)));
    }
    else {
      uint64_t v7 = 0LL;
    }
    os_log_type_t v8 = *(void *)(v3 + 112) + v5;
  }

  uint64_t v9 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(a2 + 16))( a2,  *(void *)(*(void *)&buf[8] + 40LL),  v8,  v7);
  os_log_type_t v10 = *(void *)(v3 + 32);
  BOOL v11 = *(void **)(v3 + 40);
  if (v10)
  {
    *(void *)(v10 + 40) = v11;
    BOOL v11 = *(void **)(v3 + 40);
  }

  else
  {
    *(void *)(v2 + 128) = v11;
  }

  os_log_s *v11 = v10;
  *(void *)(v3 + 32) = 0LL;
  *(void *)(v3 + 40) = 0LL;
  nw_frame_finalize(v3);
  _Block_object_dispose(buf, 8);
  if ((v28 & 1) != 0 && object) {
    os_release(object);
  }
  return v9;
}

        goto LABEL_37;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v22 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v26 = "nw_parameters_copy_protocol_options";
          _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s called with null protocol_instance, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v19 = type;
      os_log_type_t v20 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v26 = "nw_parameters_copy_protocol_options";
          _os_log_impl( &dword_181A5C000,  v12,  v19,  "%{public}s called with null protocol_instance, no backtrace",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v26 = "nw_parameters_copy_protocol_options";
        os_log_type_t v27 = 2082;
        uint64_t v28 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v12,  v19,  "%{public}s called with null protocol_instance, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v26 = "nw_parameters_copy_protocol_options";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v23 = 0;
    if (__nwlog_fault(v11, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v26 = "nw_parameters_copy_protocol_options";
          _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null parameters", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v26 = "nw_parameters_copy_protocol_options";
          _os_log_impl( &dword_181A5C000,  v12,  v21,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v26 = "nw_parameters_copy_protocol_options";
          _os_log_impl(&dword_181A5C000, v12, v17, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v26 = "nw_parameters_copy_protocol_options";
        os_log_type_t v27 = 2082;
        uint64_t v28 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_37;
      }

      if (!v20)
      {
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v23 = "nw_parameters_create_data";
          _os_log_impl( &dword_181A5C000,  v8,  v18,  "%{public}s called with null data_len, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      os_log_type_t v16 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v23 = "nw_parameters_create_data";
          _os_log_impl(&dword_181A5C000, v8, v15, "%{public}s called with null data_len, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v23 = "nw_parameters_create_data";
        os_log_type_t v24 = 2082;
        BOOL v25 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v8,  v15,  "%{public}s called with null data_len, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    BOOL v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v23 = "nw_parameters_create_data";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v20 = 0;
    if (__nwlog_fault(v7, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v23 = "nw_parameters_create_data";
          _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v20)
      {
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v17 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v23 = "nw_parameters_create_data";
          _os_log_impl( &dword_181A5C000,  v8,  v17,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v13 = type;
      os_log_type_t v14 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v23 = "nw_parameters_create_data";
          _os_log_impl(&dword_181A5C000, v8, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v14)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v23 = "nw_parameters_create_data";
        os_log_type_t v24 = 2082;
        BOOL v25 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_37;
      }

      if (!v25)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = v26;
        if (os_log_type_enabled(v11, v26))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v28 = "nw_parameters_enumerate_transformed_parameters";
          _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s called with null enumerator, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = v26;
      BOOL v19 = os_log_type_enabled(v11, v26);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v28 = "nw_parameters_enumerate_transformed_parameters";
          _os_log_impl(&dword_181A5C000, v11, v18, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v28 = "nw_parameters_enumerate_transformed_parameters";
        int v29 = 2082;
        BOOL v30 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s called with null enumerator, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v28 = "nw_parameters_enumerate_transformed_parameters";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    __int16 v26 = OS_LOG_TYPE_ERROR;
    BOOL v25 = 0;
    if (__nwlog_fault(v10, &v26, &v25))
    {
      if (v26 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = v26;
        if (os_log_type_enabled(v11, v26))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v28 = "nw_parameters_enumerate_transformed_parameters";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null parameters", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v25)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = v26;
        if (os_log_type_enabled(v11, v26))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v28 = "nw_parameters_enumerate_transformed_parameters";
          _os_log_impl( &dword_181A5C000,  v11,  v20,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = v26;
      BOOL v17 = os_log_type_enabled(v11, v26);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v28 = "nw_parameters_enumerate_transformed_parameters";
          _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v28 = "nw_parameters_enumerate_transformed_parameters";
        int v29 = 2082;
        BOOL v30 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_37;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v22 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v26 = "nw_parameters_are_equivalent_for_path_evaluation";
          _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s called with null right, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v19 = type;
      os_log_type_t v20 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v26 = "nw_parameters_are_equivalent_for_path_evaluation";
          _os_log_impl(&dword_181A5C000, v12, v19, "%{public}s called with null right, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v26 = "nw_parameters_are_equivalent_for_path_evaluation";
        os_log_type_t v27 = 2082;
        uint64_t v28 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v12,  v19,  "%{public}s called with null right, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v26 = "nw_parameters_are_equivalent_for_path_evaluation";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v23 = 0;
    if (__nwlog_fault(v11, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v26 = "nw_parameters_are_equivalent_for_path_evaluation";
          _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null left", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v26 = "nw_parameters_are_equivalent_for_path_evaluation";
          _os_log_impl( &dword_181A5C000,  v12,  v21,  "%{public}s called with null left, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v26 = "nw_parameters_are_equivalent_for_path_evaluation";
          _os_log_impl(&dword_181A5C000, v12, v17, "%{public}s called with null left, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v26 = "nw_parameters_are_equivalent_for_path_evaluation";
        os_log_type_t v27 = 2082;
        uint64_t v28 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null left, dumping backtrace:%{public}s",  buf,  0x16u);
      }

  if (v18) {
    free(v18);
  }
  os_log_type_t v15 = 0LL;
LABEL_19:

  return v15;
}

        goto LABEL_37;
      }

      if (!v25)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_add_probe";
          _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null probe, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_add_probe";
          _os_log_impl(&dword_181A5C000, v10, v17, "%{public}s called with null probe, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_add_probe";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s called with null probe, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_add_probe";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v25 = 0;
    if (__nwlog_fault(v9, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_add_probe";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null connection", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v25)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_add_probe";
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      os_log_type_t v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_add_probe";
          _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_add_probe";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_37;
      }

      if (!v25)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v32 = "nw_connection_check_experimental_probe_options";
          _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v32 = "nw_connection_check_experimental_probe_options";
          _os_log_impl(&dword_181A5C000, v10, v17, "%{public}s called with null config, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v32 = "nw_connection_check_experimental_probe_options";
        uint64_t v33 = 2082;
        uint64_t v34 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v32 = "nw_connection_check_experimental_probe_options";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v25 = 0;
    if (__nwlog_fault(v9, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v32 = "nw_connection_check_experimental_probe_options";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null connection", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v25)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v32 = "nw_connection_check_experimental_probe_options";
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      os_log_type_t v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v32 = "nw_connection_check_experimental_probe_options";
          _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v32 = "nw_connection_check_experimental_probe_options";
        uint64_t v33 = 2082;
        uint64_t v34 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_37;
      }

      if (!v28)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v22 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v37 = "nw_connection_create_experimental_probe";
          _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v19 = type;
      os_log_type_t v20 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v37 = "nw_connection_create_experimental_probe";
          _os_log_impl(&dword_181A5C000, v12, v19, "%{public}s called with null config, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v37 = "nw_connection_create_experimental_probe";
        __int16 v38 = 2082;
        os_log_type_t v39 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v12,  v19,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v37 = "nw_connection_create_experimental_probe";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v28 = 0;
    if (__nwlog_fault(v11, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v37 = "nw_connection_create_experimental_probe";
          _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null connection", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v28)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v37 = "nw_connection_create_experimental_probe";
          _os_log_impl( &dword_181A5C000,  v12,  v21,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v37 = "nw_connection_create_experimental_probe";
          _os_log_impl(&dword_181A5C000, v12, v17, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v37 = "nw_connection_create_experimental_probe";
        __int16 v38 = 2082;
        os_log_type_t v39 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
      }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)applier = 136446210;
    *(void *)&applier[4] = "nw_socket_add_initial_inbound_data";
    BOOL v30 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v68) = 0;
    if (__nwlog_fault(v30, type, &v68))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v31 = (os_log_s *)gLogObj;
        __int16 v32 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&applier[4] = "nw_socket_add_initial_inbound_data";
          uint64_t v33 = "%{public}s nw_frame_create failed";
LABEL_62:
          _os_log_impl(&dword_181A5C000, v31, v32, v33, applier, 0xCu);
        }
      }

      else if ((_BYTE)v68)
      {
        uint64_t v34 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v31 = (os_log_s *)gLogObj;
        __int16 v32 = type[0];
        os_log_type_t v35 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
        if (v34)
        {
          if (v35)
          {
            *(_DWORD *)applier = 136446466;
            *(void *)&applier[4] = "nw_socket_add_initial_inbound_data";
            *(_WORD *)&applier[12] = 2082;
            *(void *)&applier[14] = v34;
            _os_log_impl( &dword_181A5C000,  v31,  v32,  "%{public}s nw_frame_create failed, dumping backtrace:%{public}s",  applier,  0x16u);
          }

          free(v34);
          goto LABEL_63;
        }

        if (v35)
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&applier[4] = "nw_socket_add_initial_inbound_data";
          uint64_t v33 = "%{public}s nw_frame_create failed, no backtrace";
          goto LABEL_62;
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v31 = (os_log_s *)gLogObj;
        __int16 v32 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          *(_DWORD *)applier = 136446210;
          *(void *)&applier[4] = "nw_socket_add_initial_inbound_data";
          uint64_t v33 = "%{public}s nw_frame_create failed, backtrace limit exceeded";
          goto LABEL_62;
        }
      }
    }

        goto LABEL_37;
      }

      if (!v27)
      {
        __nwlog_obj();
        os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v30 = "nw_connection_read";
          _os_log_impl( &dword_181A5C000,  v14,  v24,  "%{public}s called with null handler, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      char v22 = os_log_type_enabled(v14, type);
      if (!backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v30 = "nw_connection_read";
          _os_log_impl(&dword_181A5C000, v14, v21, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v22)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v30 = "nw_connection_read";
        int v31 = 2082;
        __int16 v32 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v14,  v21,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v30 = "nw_connection_read";
    char v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v27 = 0;
    if (__nwlog_fault(v13, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v30 = "nw_connection_read";
          _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s called with null connection", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v27)
      {
        __nwlog_obj();
        os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v23 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v30 = "nw_connection_read";
          _os_log_impl( &dword_181A5C000,  v14,  v23,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v19 = type;
      os_log_type_t v20 = os_log_type_enabled(v14, type);
      if (!backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v30 = "nw_connection_read";
          _os_log_impl(&dword_181A5C000, v14, v19, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v30 = "nw_connection_read";
        int v31 = 2082;
        __int16 v32 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v14,  v19,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_37;
      }

      if (!v27)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v22 = v28;
        if (os_log_type_enabled(v12, v28))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v30 = "nw_connection_modify_connected_protocol_stack_internal";
          _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s called with null modifier, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v19 = v28;
      os_log_type_t v20 = os_log_type_enabled(v12, v28);
      if (!backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v30 = "nw_connection_modify_connected_protocol_stack_internal";
          _os_log_impl(&dword_181A5C000, v12, v19, "%{public}s called with null modifier, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v30 = "nw_connection_modify_connected_protocol_stack_internal";
        int v31 = 2082;
        __int16 v32 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v12,  v19,  "%{public}s called with null modifier, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v30 = "nw_connection_modify_connected_protocol_stack_internal";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    uint64_t v28 = OS_LOG_TYPE_ERROR;
    os_log_type_t v27 = 0;
    if (__nwlog_fault(v11, &v28, &v27))
    {
      if (v28 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v13 = v28;
        if (os_log_type_enabled(v12, v28))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v30 = "nw_connection_modify_connected_protocol_stack_internal";
          _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null connection", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v27)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = v28;
        if (os_log_type_enabled(v12, v28))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v30 = "nw_connection_modify_connected_protocol_stack_internal";
          _os_log_impl( &dword_181A5C000,  v12,  v21,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v17 = v28;
      os_log_type_t v18 = os_log_type_enabled(v12, v28);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v30 = "nw_connection_modify_connected_protocol_stack_internal";
          _os_log_impl(&dword_181A5C000, v12, v17, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v30 = "nw_connection_modify_connected_protocol_stack_internal";
        int v31 = 2082;
        __int16 v32 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_37;
      }

      if (!v21)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_connection_modify_connected_protocol_stack";
          _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null modifier, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_connection_modify_connected_protocol_stack";
          _os_log_impl(&dword_181A5C000, v10, v17, "%{public}s called with null modifier, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v24 = "nw_connection_modify_connected_protocol_stack";
        BOOL v25 = 2082;
        __int16 v26 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s called with null modifier, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v24 = "nw_connection_modify_connected_protocol_stack";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_connection_modify_connected_protocol_stack";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null connection", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v21)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_connection_modify_connected_protocol_stack";
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      os_log_type_t v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_connection_modify_connected_protocol_stack";
          _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v24 = "nw_connection_modify_connected_protocol_stack";
        BOOL v25 = 2082;
        __int16 v26 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
      }

  if (v9) {
    free(v9);
  }
  return *(unsigned __int8 *)(*(void *)(a1 + 32) + 89LL);
}

  if (v9) {
    free(v9);
  }
  return 1LL;
}

  if (v9) {
    free(v9);
  }
  return 1LL;
}

      goto LABEL_37;
    }

    if (!v39)
    {
      __nwlog_obj();
      os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v36 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v42 = "-[NWConcrete_nw_endpoint_proxy applyWithHandler:toChildren:]";
        _os_log_impl( &dword_181A5C000,  v15,  v36,  "%{public}s called with null applyBlock, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_36;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v33 = type;
    uint64_t v34 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v42 = "-[NWConcrete_nw_endpoint_proxy applyWithHandler:toChildren:]";
        _os_log_impl(&dword_181A5C000, v15, v33, "%{public}s called with null applyBlock, no backtrace", buf, 0xCu);
      }

      goto LABEL_36;
    }

    if (v34)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v42 = "-[NWConcrete_nw_endpoint_proxy applyWithHandler:toChildren:]";
      char v43 = 2082;
      os_log_type_t v44 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v15,  v33,  "%{public}s called with null applyBlock, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_60;
  }

  child_endpoint_handlers = (unsigned __int8 *)self->child_endpoint_handlers;
  v37[0] = MEMORY[0x1895F87A8];
  v37[1] = 3221225472LL;
  v37[2] = __60__NWConcrete_nw_endpoint_proxy_applyWithHandler_toChildren___block_invoke;
  v37[3] = &unk_189BC8628;
  __int16 v38 = v7;
  BOOL v11 = nw_array_apply(child_endpoint_handlers, (uint64_t)v37);

LABEL_40:
  return v11;
}

    free(backtrace_string);
    goto LABEL_46;
  }

  BOOL v6 = (os_log_s *)__nwlog_obj();
  uint64_t v7 = type;
  if (os_log_type_enabled(v6, type))
  {
    *(_DWORD *)buf = 136446210;
    os_log_type_t v18 = "nw_protocol_masque_remove_listen_handler";
    os_log_type_t v8 = "%{public}s called with null protocol";
LABEL_45:
    _os_log_impl(&dword_181A5C000, v6, v7, v8, buf, 0xCu);
  }

    if (v27) {
      free(v27);
    }
    goto LABEL_38;
  }

  if (v8) {
    free(v8);
  }
  return 0LL;
}

  if (v23) {
    free(v23);
  }
  id v3 = 0LL;
LABEL_4:

  os_log_type_t v10 = MEMORY[0x1895F87A8];
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 3221225472LL;
  aBlock[2] = ___ZL32nw_masque_connection_pair_createP31NWConcrete_nw_masque_connection_block_invoke;
  aBlock[3] = &unk_189BC9238;
  BOOL v11 = v4;
  os_log_type_t v42 = v11;
  os_log_type_t v12 = v3;
  char v43 = v12;
  char v13 = (void (**)(void))_Block_copy(aBlock);
  os_log_type_t v14 = (os_unfair_lock_s *)(v4 + 3);
  os_unfair_lock_lock(v14);
  v13[2](v13);
  os_unfair_lock_unlock(v14);

  v38[0] = v10;
  v38[1] = 3221225472LL;
  v38[2] = ___ZL32nw_masque_connection_pair_createP31NWConcrete_nw_masque_connection_block_invoke_2;
  v38[3] = &unk_189BC9490;
  os_log_type_t v15 = v11;
  os_log_type_t v39 = v15;
  os_log_type_t v40 = v12;
  os_log_type_t v16 = v40;
  BOOL v17 = v38;
  if (v16)
  {
    *(void *)buf = v10;
    *(void *)&uint8_t buf[8] = 3221225472LL;
    *(void *)&buf[16] = ___ZL51nw_masque_connection_pair_set_state_changed_handlerP36NWConcrete_nw_masque_connection_pairU13block_pointerFv21nw_connection_state_tPU22objcproto11OS_nw_error8NSObjectE_block_invoke;
    v48 = &unk_189BC91E8;
    os_log_type_t v49 = v16;
    BOOL v50 = v17;
    os_log_type_t v18 = (void (**)(void))_Block_copy(buf);
    os_unfair_lock_lock(v16 + 2);
    v18[2](v18);
    os_unfair_lock_unlock(v16 + 2);

    goto LABEL_6;
  }

  __nwlog_obj();
  __int16 v26 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_masque_connection_pair_set_state_changed_handler";
  os_log_type_t v27 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v46.receiver) = 16;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v27, &v46, &type))
  {
    if (LOBYTE(v46.receiver) == 17)
    {
      __nwlog_obj();
      uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      receiver = (os_log_type_t)v46.receiver;
      if (os_log_type_enabled(v28, (os_log_type_t)v46.receiver))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_connection_pair_set_state_changed_handler";
        _os_log_impl(&dword_181A5C000, v28, receiver, "%{public}s called with null pair", buf, 0xCu);
      }
    }

    else if (type)
    {
      uint64_t v33 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v34 = (os_log_type_t)v46.receiver;
      os_log_type_t v35 = os_log_type_enabled(v28, (os_log_type_t)v46.receiver);
      if (v33)
      {
        if (v35)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_masque_connection_pair_set_state_changed_handler";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v33;
          _os_log_impl( &dword_181A5C000,  v28,  v34,  "%{public}s called with null pair, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v33);
        goto LABEL_42;
      }

      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_connection_pair_set_state_changed_handler";
        _os_log_impl(&dword_181A5C000, v28, v34, "%{public}s called with null pair, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v37 = (os_log_type_t)v46.receiver;
      if (os_log_type_enabled(v28, (os_log_type_t)v46.receiver))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_connection_pair_set_state_changed_handler";
        _os_log_impl( &dword_181A5C000,  v28,  v37,  "%{public}s called with null pair, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

  if (v23) {
    free(v23);
  }
  id v3 = 0LL;
LABEL_4:

  os_log_type_t v10 = MEMORY[0x1895F87A8];
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 3221225472LL;
  aBlock[2] = ___ZL30nw_masque_listener_pair_createP31NWConcrete_nw_masque_connection_block_invoke;
  aBlock[3] = &unk_189BC9238;
  BOOL v11 = v4;
  os_log_type_t v42 = v11;
  os_log_type_t v12 = v3;
  char v43 = v12;
  char v13 = (void (**)(void))_Block_copy(aBlock);
  os_log_type_t v14 = (os_unfair_lock_s *)(v4 + 3);
  os_unfair_lock_lock(v14);
  v13[2](v13);
  os_unfair_lock_unlock(v14);

  v38[0] = v10;
  v38[1] = 3221225472LL;
  v38[2] = ___ZL30nw_masque_listener_pair_createP31NWConcrete_nw_masque_connection_block_invoke_2;
  v38[3] = &unk_189BC9490;
  os_log_type_t v15 = v11;
  os_log_type_t v39 = v15;
  os_log_type_t v40 = v12;
  os_log_type_t v16 = v40;
  BOOL v17 = v38;
  if (v16)
  {
    *(void *)buf = v10;
    *(void *)&uint8_t buf[8] = 3221225472LL;
    *(void *)&buf[16] = ___ZL49nw_masque_listener_pair_set_state_changed_handlerP34NWConcrete_nw_masque_listener_pairU13block_pointerFv21nw_connection_state_tPU22objcproto11OS_nw_error8NSObjectE_block_invoke;
    v48 = &unk_189BC91E8;
    os_log_type_t v49 = v16;
    BOOL v50 = v17;
    os_log_type_t v18 = (void (**)(void))_Block_copy(buf);
    os_unfair_lock_lock(v16 + 2);
    v18[2](v18);
    os_unfair_lock_unlock(v16 + 2);

    goto LABEL_6;
  }

  __nwlog_obj();
  __int16 v26 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_masque_listener_pair_set_state_changed_handler";
  os_log_type_t v27 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v46.receiver) = 16;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v27, &v46, &type))
  {
    if (LOBYTE(v46.receiver) == 17)
    {
      __nwlog_obj();
      uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      receiver = (os_log_type_t)v46.receiver;
      if (os_log_type_enabled(v28, (os_log_type_t)v46.receiver))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_listener_pair_set_state_changed_handler";
        _os_log_impl(&dword_181A5C000, v28, receiver, "%{public}s called with null pair", buf, 0xCu);
      }
    }

    else if (type)
    {
      uint64_t v33 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v34 = (os_log_type_t)v46.receiver;
      os_log_type_t v35 = os_log_type_enabled(v28, (os_log_type_t)v46.receiver);
      if (v33)
      {
        if (v35)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_masque_listener_pair_set_state_changed_handler";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v33;
          _os_log_impl( &dword_181A5C000,  v28,  v34,  "%{public}s called with null pair, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v33);
        goto LABEL_42;
      }

      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_listener_pair_set_state_changed_handler";
        _os_log_impl(&dword_181A5C000, v28, v34, "%{public}s called with null pair, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v37 = (os_log_type_t)v46.receiver;
      if (os_log_type_enabled(v28, (os_log_type_t)v46.receiver))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_listener_pair_set_state_changed_handler";
        _os_log_impl( &dword_181A5C000,  v28,  v37,  "%{public}s called with null pair, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }
}

      if (v6) {
        free(v6);
      }
      return 0LL;
    }

    if (!v14)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_protocol_http_client_copy_info";
        uint64_t v9 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_35;
      }

      goto LABEL_36;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v11 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_protocol_http_client_copy_info";
        uint64_t v9 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_35;
      }

      goto LABEL_36;
    }

    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v17 = "nw_protocol_http_client_copy_info";
      os_log_type_t v18 = 2082;
      BOOL v19 = backtrace_string;
      os_log_type_t v12 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_25:
      _os_log_impl(&dword_181A5C000, v7, v8, v12, buf, 0x16u);
    }

  if (v5) {
    free(v5);
  }
  return 0LL;
}

    if (!v9) {
      goto LABEL_38;
    }
LABEL_37:
    free(v9);
    goto LABEL_38;
  }

  uint64_t v5 = (NWConcrete_nw_endpoint_handler *)v3;
  mode = v5->mode;

  if ((_DWORD)mode == 1)
  {
    nw_endpoint_resolver_update_path_resolver_locked(v5);
    goto LABEL_38;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v7 = (id)gLogObj;
  else {
    os_log_type_t v8 = off_189BBBBC0[mode];
  }
  *(_DWORD *)buf = 136446722;
  int v29 = "-[NWConcrete_nw_endpoint_resolver updatePathWithHandler:]";
  BOOL v30 = 2082;
  int v31 = (void *)v8;
  __int16 v32 = 2082;
  uint64_t v33 = "resolver";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  __int16 v26 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v10 = (os_log_s *)(id)gLogObj;
    BOOL v11 = type;
    if (os_log_type_enabled(v10, type))
    {
      else {
        os_log_type_t v12 = off_189BBBBC0[mode];
      }
      *(_DWORD *)buf = 136446722;
      int v29 = "-[NWConcrete_nw_endpoint_resolver updatePathWithHandler:]";
      BOOL v30 = 2082;
      int v31 = (void *)v12;
      __int16 v32 = 2082;
      uint64_t v33 = "resolver";
      _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s Handler is in mode %{public}s, expected %{public}s",  buf,  0x20u);
    }

      goto LABEL_37;
    }

    if (!v39)
    {
      __nwlog_obj();
      os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v36 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v42 = "-[NWConcrete_nw_endpoint_resolver applyWithHandler:toChildren:]";
        _os_log_impl( &dword_181A5C000,  v15,  v36,  "%{public}s called with null applyBlock, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_36;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v33 = type;
    uint64_t v34 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v42 = "-[NWConcrete_nw_endpoint_resolver applyWithHandler:toChildren:]";
        _os_log_impl(&dword_181A5C000, v15, v33, "%{public}s called with null applyBlock, no backtrace", buf, 0xCu);
      }

      goto LABEL_36;
    }

    if (v34)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v42 = "-[NWConcrete_nw_endpoint_resolver applyWithHandler:toChildren:]";
      char v43 = 2082;
      os_log_type_t v44 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v15,  v33,  "%{public}s called with null applyBlock, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_60;
  }

  child_endpoint_handlers = (unsigned __int8 *)self->child_endpoint_handlers;
  v37[0] = MEMORY[0x1895F87A8];
  v37[1] = 3221225472LL;
  v37[2] = __63__NWConcrete_nw_endpoint_resolver_applyWithHandler_toChildren___block_invoke;
  v37[3] = &unk_189BC8628;
  __int16 v38 = v7;
  BOOL v11 = nw_array_apply(child_endpoint_handlers, (uint64_t)v37);

LABEL_40:
  return v11;
}

    if (v12) {
      free(v12);
    }
LABEL_38:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    __int16 v26 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_resolution_provider";
    os_log_type_t v27 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v36 = 0;
    if (__nwlog_fault(v27, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v28 = (os_log_s *)(id)gLogObj;
        int v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_resolution_provider";
          _os_log_impl(&dword_181A5C000, v28, v29, "%{public}s Endpoint handler is not a resolver", buf, 0xCu);
        }
      }

      else if (v36)
      {
        BOOL v30 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v28 = (os_log_s *)(id)gLogObj;
        int v31 = type;
        __int16 v32 = os_log_type_enabled(v28, type);
        if (v30)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_resolution_provider";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v30;
            _os_log_impl( &dword_181A5C000,  v28,  v31,  "%{public}s Endpoint handler is not a resolver, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v30);
          if (!v27) {
            goto LABEL_57;
          }
          goto LABEL_56;
        }

        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_resolution_provider";
          _os_log_impl( &dword_181A5C000,  v28,  v31,  "%{public}s Endpoint handler is not a resolver, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v28 = (os_log_s *)(id)gLogObj;
        uint64_t v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_endpoint_handler_get_resolution_provider";
          _os_log_impl( &dword_181A5C000,  v28,  v33,  "%{public}s Endpoint handler is not a resolver, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v27)
    {
LABEL_57:
      os_log_type_t v10 = 0LL;
      goto LABEL_58;
    }

          if ((_DWORD)v20) {
            goto LABEL_37;
          }
          if (!*(_WORD *)a3->sa_data) {
            return result;
          }
          return (void *)std::ostream::operator<<();
        }

        if (*(_WORD *)a3->sa_data) {
          goto LABEL_36;
        }
        uint64_t v7 = "<fail decode - no information>";
        os_log_type_t v8 = 30LL;
        return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(result, (uint64_t)v7, v8);
      }

      char v22 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>( result,  (uint64_t)"<fail decode - size> ",  21LL);
      __s[0] = a3->sa_len;
      uint64_t v23 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)__s, 1LL);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)" < ", 3LL);
      os_log_type_t v24 = (void *)std::ostream::operator<<();
      BOOL v25 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)" + ", 3LL);
      __s[0] = a3->sa_data[3];
      __int16 v26 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v25, (uint64_t)__s, 1LL);
      os_log_type_t v27 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)" + ", 3LL);
      __s[0] = a3->sa_data[4];
      uint64_t v28 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)__s, 1LL);
      os_log_type_t v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)" + ", 3LL);
      BOOL v17 = a3->sa_data[5];
LABEL_19:
      __s[0] = v17;
      return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)__s, 1LL);
    case 0x1Eu:
      if (sa_len > 0x1B)
      {
        int v29 = a3;
        BOOL v30 = 70;
LABEL_31:
        BOOL v36 = getnameinfo(v29, sa_len, __s, v30, v44, 6u, 10);
        if (v36)
        {
          os_log_type_t v37 = v36;
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>( v3,  (uint64_t)"<failed conversion> ",  20LL);
          __int16 v38 = gai_strerror(v37);
          os_log_type_t v39 = strlen(v38);
          return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v3, (uint64_t)v38, v39);
        }

        else
        {
          os_log_type_t v40 = *(unsigned __int16 *)a3->sa_data;
          os_log_type_t v41 = strlen(__s);
          BOOL result = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v3, (uint64_t)__s, v41);
          if (v40)
          {
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v3, (uint64_t)":", 1LL);
            os_log_type_t v20 = strlen(v44);
            os_log_type_t v42 = v44;
            return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v3, (uint64_t)v42, v20);
          }
        }
      }

      else
      {
LABEL_15:
        os_log_type_t v18 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>( result,  (uint64_t)"<fail decode - size> ",  21LL);
        __s[0] = a3->sa_len;
        BOOL v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)__s, 1LL);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)" < ", 3LL);
        return (void *)std::ostream::operator<<();
      }

      return result;
    default:
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>( result,  (uint64_t)"<fail decode - address family> ",  31LL);
      return (void *)std::ostream::operator<<();
  }

  if (v9) {
    free(v9);
  }
  BOOL v6 = 0LL;
LABEL_7:

  return v6;
}

  if (v12) {
    free(v12);
  }
  uint64_t v9 = 0LL;
LABEL_7:

  return v9;
}

    os_log_type_t v16 = 0LL;
    goto LABEL_37;
  }

  BOOL v6 = service;
  uint64_t v7 = v6[2];
  os_log_type_t v8 = v4->_service;
  uint64_t v9 = v8;
  if (v8) {
    os_log_type_t v10 = v8->_type;
  }
  else {
    os_log_type_t v10 = 0LL;
  }
  BOOL v11 = v10;
  os_log_type_t v12 = v4->_service;
  char v13 = v12;
  if (v12) {
    domain = v12->_domain;
  }
  else {
    domain = 0LL;
  }
  os_log_type_t v15 = domain;
  +[NWBonjourServiceEndpoint endpointWithName:type:domain:]( &OBJC_CLASS___NWBonjourServiceEndpoint,  "endpointWithName:type:domain:",  v7,  v11,  v15);
  os_log_type_t v16 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_16:
LABEL_17:

  txtRecord = v4->_txtRecord;
  if (txtRecord)
  {
    __int16 v26 = txtRecord;
    [v16 setTxtRecord:v26];
  }

  interface = v4->_interface;
  if (interface)
  {
    uint64_t v28 = interface;
    -[PBCodable data](v28, "data");
    int v29 = (void *)objc_claimAutoreleasedReturnValue();
    +[NWInterface interfaceWithProtocolBufferData:](&OBJC_CLASS___NWInterface, "interfaceWithProtocolBufferData:", v29);
    BOOL v30 = (void *)objc_claimAutoreleasedReturnValue();
    [v16 setInterface:v30];
  }

    _os_log_impl(&dword_181A5C000, v6, v7, v8, buf, 0xCu);
    goto LABEL_37;
  }

  handle = a1->handle;
  if (handle)
  {
    if ((handle[137] & 2) == 0 && gLogDatapath)
    {
      os_log_type_t v10 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        BOOL v11 = handle[115];
        *(_DWORD *)buf = 136447234;
        BOOL v19 = "nw_protocol_webtransport_session_error";
        os_log_type_t v20 = 2082;
        os_log_type_t v21 = (char *)(handle + 116);
        char v22 = 2080;
        uint64_t v23 = " ";
        os_log_type_t v24 = 1024;
        BOOL v25 = v11;
        __int16 v26 = 2048;
        os_log_type_t v27 = a2;
        _os_log_impl( &dword_181A5C000,  v10,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> called, with other_protocol: %p",  buf,  0x30u);
      }
    }

    handle[113] = a3;
    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v19 = "nw_protocol_webtransport_session_error";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v16 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    BOOL v6 = (os_log_s *)__nwlog_obj();
    uint64_t v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v19 = "nw_protocol_webtransport_session_error";
    os_log_type_t v8 = "%{public}s called with null webtransport_session";
    goto LABEL_36;
  }

  if (!v16)
  {
    BOOL v6 = (os_log_s *)__nwlog_obj();
    uint64_t v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v19 = "nw_protocol_webtransport_session_error";
    os_log_type_t v8 = "%{public}s called with null webtransport_session, backtrace limit exceeded";
    goto LABEL_36;
  }

  os_log_type_t v14 = (char *)__nw_create_backtrace_string();
  BOOL v6 = (os_log_s *)__nwlog_obj();
  uint64_t v7 = type;
  os_log_type_t v15 = os_log_type_enabled(v6, type);
  if (!v14)
  {
    if (!v15) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v19 = "nw_protocol_webtransport_session_error";
    os_log_type_t v8 = "%{public}s called with null webtransport_session, no backtrace";
    goto LABEL_36;
  }

  if (v15)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v19 = "nw_protocol_webtransport_session_error";
    os_log_type_t v20 = 2082;
    os_log_type_t v21 = v14;
    _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null webtransport_session, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v14);
  if (v5) {
    goto LABEL_38;
  }
}

    _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
    goto LABEL_37;
  }

  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(v4 + 548) & 2) == 0 && gLogDatapath)
    {
      BOOL v11 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        os_log_type_t v12 = *(_DWORD *)(v4 + 460);
        *(_DWORD *)buf = 136446978;
        os_log_type_t v20 = "nw_protocol_webtransport_session_notify";
        os_log_type_t v21 = 2082;
        char v22 = (char *)(v4 + 464);
        uint64_t v23 = 2080;
        os_log_type_t v24 = " ";
        BOOL v25 = 1024;
        __int16 v26 = v12;
        _os_log_impl(&dword_181A5C000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s<i%u> called", buf, 0x26u);
      }
    }

    nw_protocol_common_notify(a1, a2, a3);
    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v20 = "nw_protocol_webtransport_session_notify";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  BOOL v17 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v8 = (os_log_s *)__nwlog_obj();
    uint64_t v9 = type;
    if (!os_log_type_enabled(v8, type)) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v20 = "nw_protocol_webtransport_session_notify";
    os_log_type_t v10 = "%{public}s called with null webtransport_session";
    goto LABEL_36;
  }

  if (!v17)
  {
    os_log_type_t v8 = (os_log_s *)__nwlog_obj();
    uint64_t v9 = type;
    if (!os_log_type_enabled(v8, type)) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v20 = "nw_protocol_webtransport_session_notify";
    os_log_type_t v10 = "%{public}s called with null webtransport_session, backtrace limit exceeded";
    goto LABEL_36;
  }

  os_log_type_t v15 = (char *)__nw_create_backtrace_string();
  os_log_type_t v8 = (os_log_s *)__nwlog_obj();
  uint64_t v9 = type;
  os_log_type_t v16 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (!v16) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v20 = "nw_protocol_webtransport_session_notify";
    os_log_type_t v10 = "%{public}s called with null webtransport_session, no backtrace";
    goto LABEL_36;
  }

  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v20 = "nw_protocol_webtransport_session_notify";
    os_log_type_t v21 = 2082;
    char v22 = v15;
    _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null webtransport_session, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v15);
  if (v7) {
    goto LABEL_38;
  }
}

  if (v6) {
    free(v6);
  }
  return 0LL;
}

    free(backtrace_string);
    goto LABEL_52;
  }

  uint64_t v7 = (os_log_s *)__nwlog_obj();
  os_log_type_t v8 = type;
  if (os_log_type_enabled(v7, type))
  {
    *(_DWORD *)buf = 136446210;
    char v22 = "nw_protocol_webtransport_stream_add_listen_handler";
    uint64_t v9 = "%{public}s called with null webtransport_stream->webtransport_session";
    goto LABEL_51;
  }

    free(backtrace_string);
    goto LABEL_52;
  }

  uint64_t v7 = (os_log_s *)__nwlog_obj();
  os_log_type_t v8 = type;
  if (os_log_type_enabled(v7, type))
  {
    *(_DWORD *)buf = 136446210;
    char v22 = "nw_protocol_webtransport_stream_remove_listen_handler";
    uint64_t v9 = "%{public}s called with null webtransport_stream->webtransport_session";
    goto LABEL_51;
  }

    free(backtrace_string);
    goto LABEL_52;
  }

  os_log_type_t v14 = (os_log_s *)__nwlog_obj();
  os_log_type_t v15 = type;
  if (os_log_type_enabled(v14, type))
  {
    *(_DWORD *)buf = 136446210;
    BOOL v30 = "nw_protocol_webtransport_http3_stream_get_output_frames";
    os_log_type_t v16 = "%{public}s called with null return_array";
    goto LABEL_51;
  }

    _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
    goto LABEL_37;
  }

  if (a3)
  {
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 0x40000000LL;
    aBlock[2] = __tcp_listener_set_accept_handler_f_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_3_34778;
    void aBlock[4] = a3;
    aBlock[5] = a2;
    uint64_t v4 = (os_unfair_lock_s *)(a1 + 72);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
    if (*(void **)(a1 + 40) != aBlock)
    {
      uint64_t v5 = _Block_copy(aBlock);
      BOOL v6 = *(const void **)(a1 + 40);
      if (v6) {
        _Block_release(v6);
      }
      *(void *)(a1 + 40) = v5;
    }

    os_unfair_lock_unlock(v4);
    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v19 = "tcp_listener_set_accept_handler_f";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();
  BOOL v17 = OS_LOG_TYPE_ERROR;
  os_log_type_t v16 = 0;
  if (v17 == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v8 = (os_log_s *)__nwlog_obj();
    uint64_t v9 = v17;
    if (!os_log_type_enabled(v8, v17)) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v19 = "tcp_listener_set_accept_handler_f";
    os_log_type_t v10 = "%{public}s called with null acceptfnc";
    goto LABEL_36;
  }

  if (!v16)
  {
    os_log_type_t v8 = (os_log_s *)__nwlog_obj();
    uint64_t v9 = v17;
    if (!os_log_type_enabled(v8, v17)) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v19 = "tcp_listener_set_accept_handler_f";
    os_log_type_t v10 = "%{public}s called with null acceptfnc, backtrace limit exceeded";
    goto LABEL_36;
  }

  char v13 = (char *)__nw_create_backtrace_string();
  os_log_type_t v8 = (os_log_s *)__nwlog_obj();
  uint64_t v9 = v17;
  os_log_type_t v14 = os_log_type_enabled(v8, v17);
  if (!v13)
  {
    if (!v14) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v19 = "tcp_listener_set_accept_handler_f";
    os_log_type_t v10 = "%{public}s called with null acceptfnc, no backtrace";
    goto LABEL_36;
  }

  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v19 = "tcp_listener_set_accept_handler_f";
    os_log_type_t v20 = 2082;
    os_log_type_t v21 = v13;
    _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null acceptfnc, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v13);
  if (v7) {
    goto LABEL_38;
  }
}

    _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
    goto LABEL_37;
  }

  if (a3)
  {
    aBlock[0] = MEMORY[0x1895F87A8];
    aBlock[1] = 0x40000000LL;
    aBlock[2] = __tcp_listener_set_error_handler_f_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_5_34800;
    void aBlock[4] = a3;
    aBlock[5] = a2;
    uint64_t v4 = (os_unfair_lock_s *)(a1 + 72);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
    if (*(void **)(a1 + 48) != aBlock)
    {
      uint64_t v5 = _Block_copy(aBlock);
      BOOL v6 = *(const void **)(a1 + 48);
      if (v6) {
        _Block_release(v6);
      }
      *(void *)(a1 + 48) = v5;
    }

    os_unfair_lock_unlock(v4);
    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v19 = "tcp_listener_set_error_handler_f";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();
  BOOL v17 = OS_LOG_TYPE_ERROR;
  os_log_type_t v16 = 0;
  if (v17 == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v8 = (os_log_s *)__nwlog_obj();
    uint64_t v9 = v17;
    if (!os_log_type_enabled(v8, v17)) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v19 = "tcp_listener_set_error_handler_f";
    os_log_type_t v10 = "%{public}s called with null handler";
    goto LABEL_36;
  }

  if (!v16)
  {
    os_log_type_t v8 = (os_log_s *)__nwlog_obj();
    uint64_t v9 = v17;
    if (!os_log_type_enabled(v8, v17)) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v19 = "tcp_listener_set_error_handler_f";
    os_log_type_t v10 = "%{public}s called with null handler, backtrace limit exceeded";
    goto LABEL_36;
  }

  char v13 = (char *)__nw_create_backtrace_string();
  os_log_type_t v8 = (os_log_s *)__nwlog_obj();
  uint64_t v9 = v17;
  os_log_type_t v14 = os_log_type_enabled(v8, v17);
  if (!v13)
  {
    if (!v14) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v19 = "tcp_listener_set_error_handler_f";
    os_log_type_t v10 = "%{public}s called with null handler, no backtrace";
    goto LABEL_36;
  }

  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v19 = "tcp_listener_set_error_handler_f";
    os_log_type_t v20 = 2082;
    os_log_type_t v21 = v13;
    _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null handler, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v13);
  if (v7) {
    goto LABEL_38;
  }
}

  if (v11) {
    free(v11);
  }
}

LABEL_37:
      if (v7) {
        free(v7);
      }
      goto LABEL_39;
    }

    if (!v20)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_authentication_challenge_get_type";
        _os_log_impl( &dword_181A5C000,  v8,  v18,  "%{public}s called with null challenge->protection_space_array, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_36;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v15 = type;
    os_log_type_t v16 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_authentication_challenge_get_type";
        _os_log_impl( &dword_181A5C000,  v8,  v15,  "%{public}s called with null challenge->protection_space_array, no backtrace",  buf,  0xCu);
      }

      goto LABEL_36;
    }

    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v23 = "nw_authentication_challenge_get_type";
      os_log_type_t v24 = 2082;
      BOOL v25 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v8,  v15,  "%{public}s called with null challenge->protection_space_array, dumping backtrace:%{public}s",  buf,  0x16u);
    }

        goto LABEL_37;
      }

      if (!v19)
      {
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          char v22 = "nw_authentication_challenge_copy_protection_space";
          _os_log_impl( &dword_181A5C000,  v8,  v18,  "%{public}s called with null challenge->protection_space_array, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      os_log_type_t v16 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          char v22 = "nw_authentication_challenge_copy_protection_space";
          _os_log_impl( &dword_181A5C000,  v8,  v15,  "%{public}s called with null challenge->protection_space_array, no backtrace",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        char v22 = "nw_authentication_challenge_copy_protection_space";
        uint64_t v23 = 2082;
        os_log_type_t v24 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v8,  v15,  "%{public}s called with null challenge->protection_space_array, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    BOOL v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    char v22 = "nw_authentication_challenge_copy_protection_space";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v19 = 0;
    if (__nwlog_fault(v7, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          char v22 = "nw_authentication_challenge_copy_protection_space";
          _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null challenge", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v19)
      {
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v17 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          char v22 = "nw_authentication_challenge_copy_protection_space";
          _os_log_impl( &dword_181A5C000,  v8,  v17,  "%{public}s called with null challenge, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v13 = type;
      os_log_type_t v14 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          char v22 = "nw_authentication_challenge_copy_protection_space";
          _os_log_impl(&dword_181A5C000, v8, v13, "%{public}s called with null challenge, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v14)
      {
        *(_DWORD *)buf = 136446466;
        char v22 = "nw_authentication_challenge_copy_protection_space";
        uint64_t v23 = 2082;
        os_log_type_t v24 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null challenge, dumping backtrace:%{public}s",  buf,  0x16u);
      }

    _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
    goto LABEL_37;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v17 = "nw_protocol_http_connect_get_parameters";
    BOOL v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v14 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v17 = "nw_protocol_http_connect_get_parameters";
      uint64_t v9 = "%{public}s called with null http_connect";
      goto LABEL_36;
    }

    if (!v14)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v17 = "nw_protocol_http_connect_get_parameters";
      uint64_t v9 = "%{public}s called with null http_connect, backtrace limit exceeded";
      goto LABEL_36;
    }

    os_log_type_t v12 = (char *)__nw_create_backtrace_string();
    uint64_t v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    char v13 = os_log_type_enabled(v7, type);
    if (!v12)
    {
      if (!v13) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v17 = "nw_protocol_http_connect_get_parameters";
      uint64_t v9 = "%{public}s called with null http_connect, no backtrace";
      goto LABEL_36;
    }

    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v17 = "nw_protocol_http_connect_get_parameters";
      os_log_type_t v18 = 2082;
      BOOL v19 = v12;
      _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null http_connect, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v12);
LABEL_37:
    if (!v6) {
      return 0LL;
    }
LABEL_38:
    free(v6);
    return 0LL;
  }

  BOOL result = (nw_protocol *)*((void *)handle + 14);
  if (!result)
  {
    BOOL result = a1->default_input_handler;
    if (result)
    {
      callbacks = result->callbacks;
      if (callbacks)
      {
        get_parameters = (uint64_t (*)(void))callbacks->get_parameters;
        if (get_parameters) {
          return (nw_protocol *)get_parameters();
        }
      }

      return 0LL;
    }
  }

  return result;
}

    _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
    goto LABEL_37;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v17 = "nw_protocol_http_connect_get_path";
    BOOL v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v14 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v17 = "nw_protocol_http_connect_get_path";
      uint64_t v9 = "%{public}s called with null http_connect";
      goto LABEL_36;
    }

    if (!v14)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v17 = "nw_protocol_http_connect_get_path";
      uint64_t v9 = "%{public}s called with null http_connect, backtrace limit exceeded";
      goto LABEL_36;
    }

    os_log_type_t v12 = (char *)__nw_create_backtrace_string();
    uint64_t v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    char v13 = os_log_type_enabled(v7, type);
    if (!v12)
    {
      if (!v13) {
        goto LABEL_37;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v17 = "nw_protocol_http_connect_get_path";
      uint64_t v9 = "%{public}s called with null http_connect, no backtrace";
      goto LABEL_36;
    }

    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v17 = "nw_protocol_http_connect_get_path";
      os_log_type_t v18 = 2082;
      BOOL v19 = v12;
      _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null http_connect, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v12);
LABEL_37:
    if (!v6) {
      return 0LL;
    }
LABEL_38:
    free(v6);
    return 0LL;
  }

  BOOL result = (nw_protocol *)*((void *)handle + 13);
  if (!result)
  {
    BOOL result = a1->default_input_handler;
    if (result)
    {
      callbacks = result->callbacks;
      if (callbacks)
      {
        get_path = (uint64_t (*)(void))callbacks->get_path;
        if (get_path) {
          return (nw_protocol *)get_path();
        }
      }

      return 0LL;
    }
  }

  return result;
}

  if (v15) {
    free(v15);
  }
}

  if (v15) {
    free(v15);
  }
  return 0LL;
}

  uint64_t v28 = nw_hash_table_add_object(internal, (uint64_t)a2, (char *)&type);
  if (type == OS_LOG_TYPE_DEFAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446978;
    v114 = "nw_http2_transport_add_to_protocol_table";
    uint64_t v115 = 2082;
    v116 = (uint64_t)(handle + 205);
    v117 = 1042;
    *(_DWORD *)v118 = 16;
    *(_WORD *)&v118[4] = 2098;
    *(void *)&v118[6] = a2;
    os_log_type_t v46 = (const char *)_os_log_send_and_compose_impl();
    __int16 v111 = OS_LOG_TYPE_ERROR;
    __uint64_t v110 = 0;
    if (v111 == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v47 = (os_log_s *)gLogObj;
      v48 = v111;
      if (!os_log_type_enabled((os_log_t)gLogObj, v111)) {
        goto LABEL_103;
      }
      *(_DWORD *)buf = 136446978;
      v114 = "nw_http2_transport_add_to_protocol_table";
      uint64_t v115 = 2082;
      v116 = (uint64_t)v12;
      v117 = 1042;
      *(_DWORD *)v118 = 16;
      *(_WORD *)&v118[4] = 2098;
      *(void *)&v118[6] = a2;
      os_log_type_t v49 = "%{public}s %{public}s http2_transport already has input handler registered for %{public,uuid_t}.16P";
    }

    else if (v110)
    {
      os_log_type_t v53 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v47 = (os_log_s *)gLogObj;
      v48 = v111;
      os_log_type_t v54 = os_log_type_enabled((os_log_t)gLogObj, v111);
      if (v53)
      {
        if (v54)
        {
          *(_DWORD *)buf = 136447234;
          v114 = "nw_http2_transport_add_to_protocol_table";
          uint64_t v115 = 2082;
          v116 = (uint64_t)v12;
          v117 = 1042;
          *(_DWORD *)v118 = 16;
          *(_WORD *)&v118[4] = 2098;
          *(void *)&v118[6] = a2;
          *(_WORD *)&v118[14] = 2082;
          *(void *)&v118[16] = v53;
          _os_log_impl( &dword_181A5C000,  v47,  v48,  "%{public}s %{public}s http2_transport already has input handler registered for %{public,uuid_t}.16P, dumping backtrace:%{public}s",  buf,  0x30u);
        }

        free(v53);
LABEL_103:
        if (v46)
        {
          v72 = (char *)v46;
LABEL_134:
          free(v72);
          goto LABEL_135;
        }

        goto LABEL_135;
      }

      if (!v54) {
        goto LABEL_103;
      }
      *(_DWORD *)buf = 136446978;
      v114 = "nw_http2_transport_add_to_protocol_table";
      uint64_t v115 = 2082;
      v116 = (uint64_t)v12;
      v117 = 1042;
      *(_DWORD *)v118 = 16;
      *(_WORD *)&v118[4] = 2098;
      *(void *)&v118[6] = a2;
      os_log_type_t v49 = "%{public}s %{public}s http2_transport already has input handler registered for %{public,uuid_t}.16P, no backtrace";
    }

    else
    {
      BOOL v47 = (os_log_s *)__nwlog_obj();
      v48 = v111;
      if (!os_log_type_enabled(v47, v111)) {
        goto LABEL_103;
      }
      *(_DWORD *)buf = 136446978;
      v114 = "nw_http2_transport_add_to_protocol_table";
      uint64_t v115 = 2082;
      v116 = (uint64_t)v12;
      v117 = 1042;
      *(_DWORD *)v118 = 16;
      *(_WORD *)&v118[4] = 2098;
      *(void *)&v118[6] = a2;
      os_log_type_t v49 = "%{public}s %{public}s http2_transport already has input handler registered for %{public,uuid_t}.16P, backtra"
            "ce limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v47, v48, v49, buf, 0x26u);
    goto LABEL_103;
  }

  int v29 = (void *)v28;
  if (gLogDatapath)
  {
    v99 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      v114 = "nw_http2_transport_add_to_protocol_table";
      uint64_t v115 = 2082;
      v116 = (uint64_t)(handle + 205);
      v117 = 2048;
      *(void *)v118 = a2;
      _os_log_impl( &dword_181A5C000,  v99,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s added protocol %p to protocol hash table",  buf,  0x20u);
    }
  }

  if (!v29) {
    goto LABEL_135;
  }
  if ((_DWORD)v26 != -1)
  {
    stream_node_from_id = nw_http2_transport_get_stream_node_from_id((uint64_t)handle, v26);
    if (stream_node_from_id)
    {
      __int16 v32 = stream_node_from_id;
      uint64_t v33 = *(void *)(stream_node_from_id + 16);
      if (v33)
      {
        if (*(void *)(stream_node_from_id + 32))
        {
          __nwlog_obj();
          uint64_t v34 = *(void *)(v32 + 32);
          os_log_type_t v35 = *(_DWORD *)(v33 + 32);
          *(_DWORD *)buf = 136447490;
          v114 = "nw_protocol_http2_transport_add_input_handler";
          uint64_t v115 = 2082;
          v116 = (uint64_t)(handle + 205);
          v117 = 2048;
          *(void *)v118 = a2;
          *(_WORD *)&v118[8] = 2048;
          *(void *)&v118[10] = v34;
          *(_WORD *)&v118[18] = 2048;
          *(void *)&v118[20] = v33;
          v119 = 1024;
          v120 = v35;
          BOOL v36 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          __int16 v111 = OS_LOG_TYPE_DEFAULT;
          if (type == OS_LOG_TYPE_FAULT)
          {
            os_log_type_t v37 = (os_log_s *)__nwlog_obj();
            __int16 v38 = type;
            if (!os_log_type_enabled(v37, type)) {
              goto LABEL_147;
            }
            os_log_type_t v39 = *(void *)(v32 + 32);
            os_log_type_t v40 = *(_DWORD *)(v33 + 32);
            *(_DWORD *)buf = 136447490;
            v114 = "nw_protocol_http2_transport_add_input_handler";
            uint64_t v115 = 2082;
            v116 = (uint64_t)(handle + 205);
            v117 = 2048;
            *(void *)v118 = a2;
            *(_WORD *)&v118[8] = 2048;
            *(void *)&v118[10] = v39;
            *(_WORD *)&v118[18] = 2048;
            *(void *)&v118[20] = v33;
            v119 = 1024;
            v120 = v40;
            os_log_type_t v41 = "%{public}s %{public}s adding new input handler %p, already have existing protocol pointer %p for stream (%p, id %d)";
          }

          else if (v111)
          {
            unint64_t v78 = (char *)__nw_create_backtrace_string();
            os_log_type_t v37 = (os_log_s *)__nwlog_obj();
            __int16 v38 = type;
            char v79 = os_log_type_enabled(v37, type);
            if (v78)
            {
              if (v79)
              {
                v80 = *(void *)(v32 + 32);
                v81 = *(_DWORD *)(v33 + 32);
                *(_DWORD *)buf = 136447746;
                v114 = "nw_protocol_http2_transport_add_input_handler";
                uint64_t v115 = 2082;
                v116 = (uint64_t)(handle + 205);
                v117 = 2048;
                *(void *)v118 = a2;
                *(_WORD *)&v118[8] = 2048;
                *(void *)&v118[10] = v80;
                *(_WORD *)&v118[18] = 2048;
                *(void *)&v118[20] = v33;
                v119 = 1024;
                v120 = v81;
                v121 = 2082;
                v122 = v78;
                _os_log_impl( &dword_181A5C000,  v37,  v38,  "%{public}s %{public}s adding new input handler %p, already have existing protocol pointer %p for strea m (%p, id %d), dumping backtrace:%{public}s",  buf,  0x44u);
              }

              free(v78);
              goto LABEL_147;
            }

            if (!v79)
            {
LABEL_147:
              if (v36) {
                free(v36);
              }
              goto LABEL_149;
            }

            v85 = *(void *)(v32 + 32);
            v86 = *(_DWORD *)(v33 + 32);
            *(_DWORD *)buf = 136447490;
            v114 = "nw_protocol_http2_transport_add_input_handler";
            uint64_t v115 = 2082;
            v116 = (uint64_t)(handle + 205);
            v117 = 2048;
            *(void *)v118 = a2;
            *(_WORD *)&v118[8] = 2048;
            *(void *)&v118[10] = v85;
            *(_WORD *)&v118[18] = 2048;
            *(void *)&v118[20] = v33;
            v119 = 1024;
            v120 = v86;
            os_log_type_t v41 = "%{public}s %{public}s adding new input handler %p, already have existing protocol pointer %p for strea"
                  "m (%p, id %d), no backtrace";
          }

          else
          {
            os_log_type_t v37 = (os_log_s *)__nwlog_obj();
            __int16 v38 = type;
            if (!os_log_type_enabled(v37, type)) {
              goto LABEL_147;
            }
            os_log_type_t v83 = *(void *)(v32 + 32);
            v84 = *(_DWORD *)(v33 + 32);
            *(_DWORD *)buf = 136447490;
            v114 = "nw_protocol_http2_transport_add_input_handler";
            uint64_t v115 = 2082;
            v116 = (uint64_t)(handle + 205);
            v117 = 2048;
            *(void *)v118 = a2;
            *(_WORD *)&v118[8] = 2048;
            *(void *)&v118[10] = v83;
            *(_WORD *)&v118[18] = 2048;
            *(void *)&v118[20] = v33;
            v119 = 1024;
            v120 = v84;
            os_log_type_t v41 = "%{public}s %{public}s adding new input handler %p, already have existing protocol pointer %p for strea"
                  "m (%p, id %d), backtrace limit exceeded";
          }

          _os_log_impl(&dword_181A5C000, v37, v38, v41, buf, 0x3Au);
          goto LABEL_147;
        }

        *(void *)(stream_node_from_id + 32) = a2;
        v29[4] = v33;
        if (gLogDatapath)
        {
          __uint64_t v73 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
          {
            unint64_t v74 = *(_DWORD *)(v33 + 32);
            *(_DWORD *)buf = 136447234;
            v114 = "nw_protocol_http2_transport_add_input_handler";
            uint64_t v115 = 2082;
            v116 = (uint64_t)(handle + 205);
            v117 = 1024;
            *(_DWORD *)v118 = v26;
            *(_WORD *)&v118[4] = 1024;
            *(_DWORD *)&v118[6] = v74;
            *(_WORD *)&v118[10] = 2048;
            *(void *)&v118[12] = v33;
            char v75 = "%{public}s %{public}s connected incoming stream id %d to existing stream %d (%p)";
            __uint64_t v76 = v73;
            v77 = 44;
LABEL_212:
            _os_log_impl(&dword_181A5C000, v76, OS_LOG_TYPE_DEBUG, v75, buf, v77);
            goto LABEL_118;
          }
        }

        goto LABEL_118;
      }

      os_log_type_t v71 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        v114 = "nw_protocol_http2_transport_add_input_handler";
        uint64_t v115 = 2082;
        v116 = (uint64_t)(handle + 205);
        v117 = 1024;
        *(_DWORD *)v118 = v26;
        BOOL v66 = "%{public}s %{public}s stream (id %d) not found in hash node";
        os_log_type_t v67 = v71;
        __int16 v68 = 28;
        goto LABEL_99;
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v65 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446978;
        v114 = "nw_protocol_http2_transport_add_input_handler";
        uint64_t v115 = 2082;
        v116 = (uint64_t)(handle + 205);
        v117 = 1024;
        *(_DWORD *)v118 = v26;
        *(_WORD *)&v118[4] = 2048;
        *(void *)&v118[6] = a2;
        BOOL v66 = "%{public}s %{public}s could not find existing stream %d to connect protocol %p with";
        os_log_type_t v67 = (os_log_s *)v65;
        __int16 v68 = 38;
LABEL_99:
        _os_log_impl(&dword_181A5C000, v67, OS_LOG_TYPE_ERROR, v66, buf, v68);
      }
    }

    _os_log_impl(&dword_181A5C000, v4, v5, v6, buf, 0xCu);
    goto LABEL_37;
  }

  handle = a1->handle;
  if (handle)
  {
    if (gLogDatapath)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v15 = "nw_protocol_http2_transport_input_available";
        os_log_type_t v16 = 2082;
        BOOL v17 = handle + 205;
        _os_log_impl(&dword_181A5C000, v7, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
      }
    }

    if ((handle[204] & 0x40) == 0) {
      nw_protocol_http2_transport_process_input((uint64_t)handle);
    }
    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v15 = "nw_protocol_http2_transport_input_available";
  id v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v12 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v4 = (os_log_s *)__nwlog_obj();
    uint64_t v5 = type;
    if (!os_log_type_enabled(v4, type)) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v15 = "nw_protocol_http2_transport_input_available";
    BOOL v6 = "%{public}s called with null http2_transport";
    goto LABEL_36;
  }

  if (!v12)
  {
    uint64_t v4 = (os_log_s *)__nwlog_obj();
    uint64_t v5 = type;
    if (!os_log_type_enabled(v4, type)) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v15 = "nw_protocol_http2_transport_input_available";
    BOOL v6 = "%{public}s called with null http2_transport, backtrace limit exceeded";
    goto LABEL_36;
  }

  os_log_type_t v10 = (char *)__nw_create_backtrace_string();
  uint64_t v4 = (os_log_s *)__nwlog_obj();
  uint64_t v5 = type;
  BOOL v11 = os_log_type_enabled(v4, type);
  if (!v10)
  {
    if (!v11) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v15 = "nw_protocol_http2_transport_input_available";
    BOOL v6 = "%{public}s called with null http2_transport, no backtrace";
    goto LABEL_36;
  }

  if (v11)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v15 = "nw_protocol_http2_transport_input_available";
    os_log_type_t v16 = 2082;
    BOOL v17 = v10;
    _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null http2_transport, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v10);
  if (v3) {
    goto LABEL_38;
  }
}

  BOOL v25 = v79[3];
  _Block_object_dispose(&v78, 8);
  if (!v25) {
    goto LABEL_113;
  }
  __int16 v26 = *(_DWORD *)(v25 + 52);
  if (v26) {
    os_log_type_t v27 = v26 - (*(_DWORD *)(v25 + 56) + *(_DWORD *)(v25 + 60));
  }
  else {
    os_log_type_t v27 = 0;
  }
  if (v27 != (_DWORD)v9)
  {
    __nwlog_obj();
    uint64_t v34 = (char *)handle + 205;
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = (char *)handle + 205;
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)os_log_type_t v91 = v27;
    *(_WORD *)&v91[4] = 1024;
    *(_DWORD *)&v91[6] = v9;
    os_log_type_t v35 = (char *)_os_log_send_and_compose_impl();
    v82[0] = 16;
    LOBYTE(v78) = 0;
    if (__nwlog_fault(v35, v82, &v78))
    {
      if (v82[0] == 17)
      {
        BOOL v36 = (os_log_s *)__nwlog_obj();
        os_log_type_t v37 = v82[0];
        if (os_log_type_enabled(v36, (os_log_type_t)v82[0]))
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v34;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)os_log_type_t v91 = v27;
          *(_WORD *)&v91[4] = 1024;
          *(_DWORD *)&v91[6] = v9;
          __int16 v38 = "%{public}s %{public}s got output frame with wrong size (got %u != wanted %u) from http2_transport_create_output_frame";
LABEL_79:
          _os_log_impl(&dword_181A5C000, v36, v37, v38, buf, 0x22u);
        }
      }

      else if ((_BYTE)v78)
      {
        os_log_type_t v46 = (char *)__nw_create_backtrace_string();
        BOOL v36 = (os_log_s *)__nwlog_obj();
        os_log_type_t v37 = v82[0];
        BOOL v47 = os_log_type_enabled(v36, (os_log_type_t)v82[0]);
        if (v46)
        {
          if (v47)
          {
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v34;
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)os_log_type_t v91 = v27;
            *(_WORD *)&v91[4] = 1024;
            *(_DWORD *)&v91[6] = v9;
            *(_WORD *)&v91[10] = 2082;
            *(void *)&v91[12] = v46;
            _os_log_impl( &dword_181A5C000,  v36,  v37,  "%{public}s %{public}s got output frame with wrong size (got %u != wanted %u) from http2_transport_create_o utput_frame, dumping backtrace:%{public}s",  buf,  0x2Cu);
          }

          free(v46);
          goto LABEL_80;
        }

        if (v47)
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v34;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)os_log_type_t v91 = v27;
          *(_WORD *)&v91[4] = 1024;
          *(_DWORD *)&v91[6] = v9;
          __int16 v38 = "%{public}s %{public}s got output frame with wrong size (got %u != wanted %u) from http2_transport_create"
                "_output_frame, no backtrace";
          goto LABEL_79;
        }
      }

      else
      {
        BOOL v36 = (os_log_s *)__nwlog_obj();
        os_log_type_t v37 = v82[0];
        if (os_log_type_enabled(v36, (os_log_type_t)v82[0]))
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_http2_transport_get_output_frames";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v34;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)os_log_type_t v91 = v27;
          *(_WORD *)&v91[4] = 1024;
          *(_DWORD *)&v91[6] = v9;
          __int16 v38 = "%{public}s %{public}s got output frame with wrong size (got %u != wanted %u) from http2_transport_create"
                "_output_frame, backtrace limit exceeded";
          goto LABEL_79;
        }
      }
    }

  if (v5) {
    free(v5);
  }
  return 0LL;
}

      nw_http2_transport_connection_close(a1);
LABEL_37:
      *(_BYTE *)(a1 + 204) &= ~0x20u;
      return;
    }

    os_log_type_t v12 = nghttp2_strerror();
    *(_DWORD *)buf = 136446722;
    uint64_t v28 = "nw_http2_transport_session_send";
    int v29 = 1024;
    *(_DWORD *)BOOL v30 = v9;
    *(_WORD *)&v30[4] = 2082;
    *(void *)&v30[6] = v12;
    char v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v25 = 0;
    if (__nwlog_fault(v13, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = (os_log_s *)gLogObj;
        os_log_type_t v15 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_34;
        }
        os_log_type_t v16 = nghttp2_strerror();
        *(_DWORD *)buf = 136446722;
        uint64_t v28 = "nw_http2_transport_session_send";
        int v29 = 1024;
        *(_DWORD *)BOOL v30 = v9;
        *(_WORD *)&v30[4] = 2082;
        *(void *)&v30[6] = v16;
        BOOL v17 = "%{public}s nghttp2_session_send failed: %d (%{public}s) failed";
        goto LABEL_33;
      }

      if (!v25)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v14 = (os_log_s *)gLogObj;
        os_log_type_t v15 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_34;
        }
        os_log_type_t v21 = nghttp2_strerror();
        *(_DWORD *)buf = 136446722;
        uint64_t v28 = "nw_http2_transport_session_send";
        int v29 = 1024;
        *(_DWORD *)BOOL v30 = v9;
        *(_WORD *)&v30[4] = 2082;
        *(void *)&v30[6] = v21;
        BOOL v17 = "%{public}s nghttp2_session_send failed: %d (%{public}s) failed, backtrace limit exceeded";
        goto LABEL_33;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v14 = (os_log_s *)gLogObj;
      os_log_type_t v15 = type;
      BOOL v19 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v19)
        {
          os_log_type_t v20 = nghttp2_strerror();
          *(_DWORD *)buf = 136446978;
          uint64_t v28 = "nw_http2_transport_session_send";
          int v29 = 1024;
          *(_DWORD *)BOOL v30 = v9;
          *(_WORD *)&v30[4] = 2082;
          *(void *)&v30[6] = v20;
          *(_WORD *)&v30[14] = 2082;
          *(void *)&v30[16] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s nghttp2_session_send failed: %d (%{public}s) failed, dumping backtrace:%{public}s",  buf,  0x26u);
        }

        free(backtrace_string);
        goto LABEL_34;
      }

      if (v19)
      {
        char v22 = nghttp2_strerror();
        *(_DWORD *)buf = 136446722;
        uint64_t v28 = "nw_http2_transport_session_send";
        int v29 = 1024;
        *(_DWORD *)BOOL v30 = v9;
        *(_WORD *)&v30[4] = 2082;
        *(void *)&v30[6] = v22;
        BOOL v17 = "%{public}s nghttp2_session_send failed: %d (%{public}s) failed, no backtrace";
LABEL_33:
        _os_log_impl(&dword_181A5C000, v14, v15, v17, buf, 0x1Cu);
      }
    }

    _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
    goto LABEL_37;
  }

  if (a2)
  {
    *(void *)a2 = 0LL;
    *(void *)(a2 + 8) = a2;
    if (*(void *)a1)
    {
      *(void *)a2 = *(void *)a1;
      *(void *)(*(void *)a1 + 24LL) = a2;
      *(void *)(a2 + 8) = *(void *)(a1 + 8);
      *(void *)a1 = 0LL;
      *(void *)(a1 + 8) = a1;
    }

    *(void *)(a2 + 16) = 0LL;
    *(void *)(a2 + 24) = a2 + 16;
    uint64_t v2 = *(void *)(a1 + 16);
    if (v2)
    {
      *(void *)(a2 + 16) = v2;
      *(void *)(*(void *)(a1 + 16) + 24LL) = a2 + 16;
      *(void *)(a2 + 24) = *(void *)(a1 + 24);
      *(void *)(a1 + 16) = 0LL;
      *(void *)(a1 + 24) = a1 + 16;
    }

    *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
    id v3 = *(_BYTE *)(a2 + 36) & 0xFE | *(_BYTE *)(a1 + 36) & 1;
    *(_BYTE *)(a2 + 36) = v3;
    uint64_t v4 = v3 & 0xFFFFFFFD | (2 * ((*(unsigned __int8 *)(a1 + 36) >> 1) & 1));
    *(_BYTE *)(a2 + 36) = v4;
    uint64_t v5 = v4 & 0xFFFFFFFB | (4 * ((*(unsigned __int8 *)(a1 + 36) >> 2) & 1));
    *(_BYTE *)(a2 + 36) = v5;
    *(_BYTE *)(a2 + 36) = v5 & 0xF7 | *(_BYTE *)(a1 + 36) & 8;
    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v17 = "nw_http2_transport_copy_stream";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v14 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    if (!os_log_type_enabled(v7, type)) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v17 = "nw_http2_transport_copy_stream";
    uint64_t v9 = "%{public}s called with null new_stream";
    goto LABEL_36;
  }

  if (!v14)
  {
    uint64_t v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    if (!os_log_type_enabled(v7, type)) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v17 = "nw_http2_transport_copy_stream";
    uint64_t v9 = "%{public}s called with null new_stream, backtrace limit exceeded";
    goto LABEL_36;
  }

  os_log_type_t v12 = (char *)__nw_create_backtrace_string();
  uint64_t v7 = (os_log_s *)__nwlog_obj();
  os_log_type_t v8 = type;
  char v13 = os_log_type_enabled(v7, type);
  if (!v12)
  {
    if (!v13) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v17 = "nw_http2_transport_copy_stream";
    uint64_t v9 = "%{public}s called with null new_stream, no backtrace";
    goto LABEL_36;
  }

  if (v13)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v17 = "nw_http2_transport_copy_stream";
    os_log_type_t v18 = 2082;
    BOOL v19 = v12;
    _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null new_stream, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v12);
  if (v6) {
    goto LABEL_38;
  }
}

      v27(v5, *(void *)(a1 + 32));
      return 1LL;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v7 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      os_log_type_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = (const char *)(v8 + 205);
      os_log_type_t v10 = v8 == 0;
      BOOL v11 = *(_DWORD *)(v6 + 32);
      if (v10) {
        uint64_t v9 = "";
      }
      *(_DWORD *)buf = 136446722;
      __int16 v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
      char v61 = 2082;
      __int16 v62 = v9;
      int v63 = 1024;
      LODWORD(v64) = v11;
      os_log_type_t v12 = "%{public}s %{public}s stream %d not open, masking input_finished with disconnected";
      char v13 = (os_log_s *)v7;
      os_log_type_t v14 = 28;
      goto LABEL_23;
    }
  }

  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v23 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      os_log_type_t v24 = *(void *)(a1 + 32);
      if (v24) {
        BOOL v25 = (const char *)(v24 + 205);
      }
      else {
        BOOL v25 = "";
      }
      *(_DWORD *)buf = 136446466;
      __int16 v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
      char v61 = 2082;
      __int16 v62 = v25;
      os_log_type_t v12 = "%{public}s %{public}s input protocol has no stream, masking input_finished with disconnected";
      char v13 = (os_log_s *)v23;
      os_log_type_t v14 = 22;
LABEL_23:
      _os_log_impl(&dword_181A5C000, v13, OS_LOG_TYPE_INFO, v12, buf, v14);
    }
  }

  __int16 v26 = *(void *)(v5 + 24);
  if (v26)
  {
    os_log_type_t v27 = *(void (**)(uint64_t, void))(v26 + 48);
    if (v27) {
      goto LABEL_36;
    }
  }

  __nwlog_obj();
  uint64_t v28 = *(const char **)(v5 + 16);
  if (!v28) {
    uint64_t v28 = "invalid";
  }
  *(_DWORD *)buf = 136446466;
  __int16 v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
  char v61 = 2082;
  __int16 v62 = v28;
  int v29 = (const char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v57 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    BOOL v30 = (os_log_s *)__nwlog_obj();
    int v31 = type;
    if (!os_log_type_enabled(v30, type)) {
      goto LABEL_100;
    }
    __int16 v32 = *(const char **)(v5 + 16);
    if (!v32) {
      __int16 v32 = "invalid";
    }
    *(_DWORD *)buf = 136446466;
    __int16 v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
    char v61 = 2082;
    __int16 v62 = v32;
    uint64_t v33 = "%{public}s protocol %{public}s has invalid disconnected callback";
LABEL_99:
    _os_log_impl(&dword_181A5C000, v30, v31, v33, buf, 0x16u);
    goto LABEL_100;
  }

  if (!v57)
  {
    BOOL v30 = (os_log_s *)__nwlog_obj();
    int v31 = type;
    if (!os_log_type_enabled(v30, type)) {
      goto LABEL_100;
    }
    os_log_type_t v53 = *(const char **)(v5 + 16);
    if (!v53) {
      os_log_type_t v53 = "invalid";
    }
    *(_DWORD *)buf = 136446466;
    __int16 v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
    char v61 = 2082;
    __int16 v62 = v53;
    uint64_t v33 = "%{public}s protocol %{public}s has invalid disconnected callback, backtrace limit exceeded";
    goto LABEL_99;
  }

  os_log_type_t v45 = (char *)__nw_create_backtrace_string();
  BOOL v30 = (os_log_s *)__nwlog_obj();
  int v31 = type;
  os_log_type_t v46 = os_log_type_enabled(v30, type);
  if (!v45)
  {
    if (!v46) {
      goto LABEL_100;
    }
    os_log_type_t v54 = *(const char **)(v5 + 16);
    if (!v54) {
      os_log_type_t v54 = "invalid";
    }
    *(_DWORD *)buf = 136446466;
    __int16 v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
    char v61 = 2082;
    __int16 v62 = v54;
    uint64_t v33 = "%{public}s protocol %{public}s has invalid disconnected callback, no backtrace";
    goto LABEL_99;
  }

  if (v46)
  {
    BOOL v47 = *(const char **)(v5 + 16);
    if (!v47) {
      BOOL v47 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    __int16 v60 = "nw_protocol_http2_transport_input_finished_block_invoke";
    char v61 = 2082;
    __int16 v62 = v47;
    int v63 = 2082;
    uint64_t v64 = (uint64_t)v45;
    _os_log_impl( &dword_181A5C000,  v30,  v31,  "%{public}s protocol %{public}s has invalid disconnected callback, dumping backtrace:%{public}s",  buf,  0x20u);
  }

  free(v45);
  if (v29)
  {
LABEL_101:
    char v43 = (char *)v29;
    goto LABEL_58;
  }

  return 1LL;
}

        goto LABEL_37;
      }

      if (!v18)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_proxy_config_copy_pac_script";
          _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s called with null (config->mode == nw_proxy_mode_pac_script), backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      os_log_type_t v15 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_proxy_config_copy_pac_script";
          _os_log_impl( &dword_181A5C000,  v7,  v14,  "%{public}s called with null (config->mode == nw_proxy_mode_pac_script), no backtrace",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v21 = "nw_proxy_config_copy_pac_script";
        char v22 = 2082;
        uint64_t v23 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v7,  v14,  "%{public}s called with null (config->mode == nw_proxy_mode_pac_script), dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v21 = "nw_proxy_config_copy_pac_script";
    BOOL v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_proxy_config_copy_pac_script";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null config", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v18)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_proxy_config_copy_pac_script";
          _os_log_impl( &dword_181A5C000,  v7,  v16,  "%{public}s called with null config, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      char v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v21 = "nw_proxy_config_copy_pac_script";
          _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null config, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v21 = "nw_proxy_config_copy_pac_script";
        char v22 = 2082;
        uint64_t v23 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null config, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_37;
      }

      if (!v21)
      {
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_proxy_configs_create_with_schema_array";
          _os_log_impl( &dword_181A5C000,  v8,  v18,  "%{public}s called with null (xpc_get_type(array) == (&_xpc_type_array)), backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      os_log_type_t v16 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_proxy_configs_create_with_schema_array";
          _os_log_impl( &dword_181A5C000,  v8,  v15,  "%{public}s called with null (xpc_get_type(array) == (&_xpc_type_array)), no backtrace",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v24 = "nw_proxy_configs_create_with_schema_array";
        BOOL v25 = 2082;
        __int16 v26 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v8,  v15,  "%{public}s called with null (xpc_get_type(array) == (&_xpc_type_array)), dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    BOOL v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v24 = "nw_proxy_configs_create_with_schema_array";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v21 = 0;
    if (__nwlog_fault(v7, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_proxy_configs_create_with_schema_array";
          _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null array", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v21)
      {
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v17 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_proxy_configs_create_with_schema_array";
          _os_log_impl( &dword_181A5C000,  v8,  v17,  "%{public}s called with null array, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v13 = type;
      os_log_type_t v14 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_proxy_configs_create_with_schema_array";
          _os_log_impl(&dword_181A5C000, v8, v13, "%{public}s called with null array, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v14)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v24 = "nw_proxy_configs_create_with_schema_array";
        BOOL v25 = 2082;
        __int16 v26 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null array, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        free(v34);
        goto LABEL_37;
      }

      __nwlog_obj();
      v180 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v267 = 136447234;
      v268 = "nw_necp_append_tlv";
      v269 = 2048;
      *(void *)v270 = v29;
      *(_WORD *)&v270[8] = 2048;
      *(void *)v271 = &v8[v7];
      *(_WORD *)&v271[8] = 1024;
      *(_DWORD *)v272 = 15;
      *(_WORD *)&v272[4] = 1024;
      *(_DWORD *)&v272[6] = 16;
      v177 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v257) = 0;
      if (__nwlog_fault(v177, type, &v257))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v181 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v182 = type[0];
          if (os_log_type_enabled(v181, type[0]))
          {
            *(_DWORD *)v267 = 136447234;
            v268 = "nw_necp_append_tlv";
            v269 = 2048;
            *(void *)v270 = v29;
            *(_WORD *)&v270[8] = 2048;
            *(void *)v271 = &v8[v7];
            *(_WORD *)&v271[8] = 1024;
            *(_DWORD *)v272 = 15;
            *(_WORD *)&v272[4] = 1024;
            *(_DWORD *)&v272[6] = 16;
            _os_log_impl( &dword_181A5C000,  v181,  v182,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u",  v267,  0x2Cu);
          }
        }

        else if ((_BYTE)v257)
        {
          v199 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v181 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v200 = type[0];
          v201 = os_log_type_enabled(v181, type[0]);
          if (v199)
          {
            if (v201)
            {
              *(_DWORD *)v267 = 136447490;
              v268 = "nw_necp_append_tlv";
              v269 = 2048;
              *(void *)v270 = v29;
              *(_WORD *)&v270[8] = 2048;
              *(void *)v271 = &v8[v7];
              *(_WORD *)&v271[8] = 1024;
              *(_DWORD *)v272 = 15;
              *(_WORD *)&v272[4] = 1024;
              *(_DWORD *)&v272[6] = 16;
              *(_WORD *)v273 = 2082;
              *(void *)&v273[2] = v199;
              _os_log_impl( &dword_181A5C000,  v181,  v200,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s",  v267,  0x36u);
            }

            free(v199);
            if (!v177) {
              goto LABEL_374;
            }
            goto LABEL_373;
          }

          if (v201)
          {
            *(_DWORD *)v267 = 136447234;
            v268 = "nw_necp_append_tlv";
            v269 = 2048;
            *(void *)v270 = v29;
            *(_WORD *)&v270[8] = 2048;
            *(void *)v271 = &v8[v7];
            *(_WORD *)&v271[8] = 1024;
            *(_DWORD *)v272 = 15;
            *(_WORD *)&v272[4] = 1024;
            *(_DWORD *)&v272[6] = 16;
            _os_log_impl( &dword_181A5C000,  v181,  v200,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace",  v267,  0x2Cu);
          }
        }

        else
        {
          __nwlog_obj();
          v181 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          v210 = type[0];
          if (os_log_type_enabled(v181, type[0]))
          {
            *(_DWORD *)v267 = 136447234;
            v268 = "nw_necp_append_tlv";
            v269 = 2048;
            *(void *)v270 = v29;
            *(_WORD *)&v270[8] = 2048;
            *(void *)v271 = &v8[v7];
            *(_WORD *)&v271[8] = 1024;
            *(_DWORD *)v272 = 15;
            *(_WORD *)&v272[4] = 1024;
            *(_DWORD *)&v272[6] = 16;
            _os_log_impl( &dword_181A5C000,  v181,  v210,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded",  v267,  0x2Cu);
          }
        }
      }

    free(v16);
    goto LABEL_37;
  }

  *(_BYTE *)BOOL v11 = v10;
  *(_DWORD *)(v11 + 1) = v13;
  if ((_DWORD)v13)
  {
    if (a2)
    {
      memcpy((void *)(v11 + 5), a2, v13);
      goto LABEL_22;
    }

    __nwlog_obj();
    BOOL v47 = (void *)objc_claimAutoreleasedReturnValue();
    v48 = v10;
    *(_DWORD *)buf = 136446722;
    int v63 = "nw_necp_append_tlv";
    uint64_t v64 = 1024;
    *(_DWORD *)id v65 = v10;
    *(_WORD *)&v65[4] = 1024;
    *(_DWORD *)&v65[6] = v13;
    os_log_type_t v49 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    __int16 v60 = 0;
    if (__nwlog_fault(v49, &type, &v60))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v50 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v51 = type;
        if (os_log_type_enabled(v50, type))
        {
          *(_DWORD *)buf = 136446722;
          int v63 = "nw_necp_append_tlv";
          uint64_t v64 = 1024;
          *(_DWORD *)id v65 = v48;
          *(_WORD *)&v65[4] = 1024;
          *(_DWORD *)&v65[6] = v13;
          _os_log_impl(&dword_181A5C000, v50, v51, "%{public}s type=%u length=%u but value is NULL", buf, 0x18u);
        }
      }

      else if (v60)
      {
        os_log_type_t v55 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v50 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v56 = type;
        os_log_type_t v57 = os_log_type_enabled(v50, type);
        if (v55)
        {
          if (v57)
          {
            *(_DWORD *)buf = 136446978;
            int v63 = "nw_necp_append_tlv";
            uint64_t v64 = 1024;
            *(_DWORD *)id v65 = v48;
            *(_WORD *)&v65[4] = 1024;
            *(_DWORD *)&v65[6] = v13;
            *(_WORD *)BOOL v66 = 2082;
            *(void *)&v66[2] = v55;
            _os_log_impl( &dword_181A5C000,  v50,  v56,  "%{public}s type=%u length=%u but value is NULL, dumping backtrace:%{public}s",  buf,  0x22u);
          }

          free(v55);
          goto LABEL_113;
        }

        if (v57)
        {
          *(_DWORD *)buf = 136446722;
          int v63 = "nw_necp_append_tlv";
          uint64_t v64 = 1024;
          *(_DWORD *)id v65 = v48;
          *(_WORD *)&v65[4] = 1024;
          *(_DWORD *)&v65[6] = v13;
          _os_log_impl( &dword_181A5C000,  v50,  v56,  "%{public}s type=%u length=%u but value is NULL, no backtrace",  buf,  0x18u);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v50 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v58 = type;
        if (os_log_type_enabled(v50, type))
        {
          *(_DWORD *)buf = 136446722;
          int v63 = "nw_necp_append_tlv";
          uint64_t v64 = 1024;
          *(_DWORD *)id v65 = v48;
          *(_WORD *)&v65[4] = 1024;
          *(_DWORD *)&v65[6] = v13;
          _os_log_impl( &dword_181A5C000,  v50,  v58,  "%{public}s type=%u length=%u but value is NULL, backtrace limit exceeded",  buf,  0x18u);
        }
      }
    }

    free(backtrace_string);
    goto LABEL_46;
  }

  uint64_t v9 = (os_log_s *)__nwlog_obj();
  os_log_type_t v10 = type;
  if (os_log_type_enabled(v9, type))
  {
    *(_DWORD *)buf = 136446210;
    uint64_t v23 = "nw_http1_on_reset";
    BOOL v11 = "%{public}s called with null parser";
LABEL_45:
    _os_log_impl(&dword_181A5C000, v9, v10, v11, buf, 0xCu);
  }

  int v31 = 0LL;
LABEL_91:

  return v31;
}

  if (v8) {
    free(v8);
  }
  return 0LL;
}

      goto LABEL_37;
    }

    if (!v28)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v12 = (os_log_s *)(id)gLogObj;
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446466;
        int v31 = "-[NWPrivilegedHelper startXPCListener]";
        __int16 v32 = 2082;
        uint64_t v33 = networkd_privileged_service;
        _os_log_impl( &dword_181A5C000,  v12,  v24,  "%{public}s FATAL: xpc_connection_create_mach_service(%{public}s, LISTENER) - wrong type failed, backtrace limit exceeded",  buf,  0x16u);
      }

      goto LABEL_36;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v12 = (os_log_s *)(id)gLogObj;
    os_log_type_t v20 = type;
    os_log_type_t v21 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        int v31 = "-[NWPrivilegedHelper startXPCListener]";
        __int16 v32 = 2082;
        uint64_t v33 = networkd_privileged_service;
        _os_log_impl( &dword_181A5C000,  v12,  v20,  "%{public}s FATAL: xpc_connection_create_mach_service(%{public}s, LISTENER) - wrong type failed, no backtrace",  buf,  0x16u);
      }

      goto LABEL_36;
    }

    if (v21)
    {
      *(_DWORD *)buf = 136446722;
      int v31 = "-[NWPrivilegedHelper startXPCListener]";
      __int16 v32 = 2082;
      uint64_t v33 = networkd_privileged_service;
      uint64_t v34 = 2082;
      os_log_type_t v35 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v12,  v20,  "%{public}s FATAL: xpc_connection_create_mach_service(%{public}s, LISTENER) - wrong type failed, dumping backtrace:%{public}s",  buf,  0x20u);
    }

    goto LABEL_37;
  }

  self = v5;
  +[NWConnection connectionWithInternalConnection:]( &OBJC_CLASS___NWDatagramConnection,  "connectionWithInternalConnection:",  v4);
  BOOL v6 = (NWDatagramConnection *)objc_claimAutoreleasedReturnValue();
  connection = self->_connection;
  self->_connection = v6;

  if (!self->_connection)
  {
LABEL_40:
    os_log_type_t v14 = 0LL;
    goto LABEL_41;
  }

  -[NWUDPSession connection](self, "connection");
  os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  [v8 endpoint];
  uint64_t v9 = (NWEndpoint *)objc_claimAutoreleasedReturnValue();
  endpoint = self->_endpoint;
  self->_endpoint = v9;

  -[NWUDPSession connection](self, "connection");
  BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
  [v11 parameters];
  os_log_type_t v12 = (NWParameters *)objc_claimAutoreleasedReturnValue();
  parameters = self->_parameters;
  self->_parameters = v12;

  -[NWUDPSession setupEventHandler](self, "setupEventHandler");
  self = self;
  os_log_type_t v14 = self;
LABEL_41:

  return v14;
}

        goto LABEL_37;
      }

      if (!v28)
      {
        __nwlog_obj();
        os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          int v31 = "-[NWRemoteConnectionDirector createSendDataMessageForClientID:data:receiveWindow:]";
          char v22 = "%{public}s called with null clientID, backtrace limit exceeded";
          goto LABEL_35;
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      BOOL v25 = os_log_type_enabled(v20, type);
      if (!backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446210;
          int v31 = "-[NWRemoteConnectionDirector createSendDataMessageForClientID:data:receiveWindow:]";
          char v22 = "%{public}s called with null clientID, no backtrace";
          goto LABEL_35;
        }

        goto LABEL_36;
      }

      if (!v25) {
        goto LABEL_26;
      }
      *(_DWORD *)buf = 136446466;
      int v31 = "-[NWRemoteConnectionDirector createSendDataMessageForClientID:data:receiveWindow:]";
      __int16 v32 = 2082;
      uint64_t v33 = backtrace_string;
      __int16 v26 = "%{public}s called with null clientID, dumping backtrace:%{public}s";
      goto LABEL_25;
    }
  }

    if (v9) {
      free(v9);
    }
    return 0LL;
  }

  os_unfair_lock_lock((os_unfair_lock_t)&nw_protocol_registrar_lock);
  uint64_t v2 = &g_registration_list;
  while (1)
  {
    uint64_t v2 = (uint64_t *)*v2;
    if (!v2) {
      break;
    }
    if (*a1 == v2[4] && a1[1] == v2[5] && a1[2] == v2[6] && a1[3] == v2[7] && a1[4] == v2[8])
    {
      uint64_t v7 = v2[13];
      goto LABEL_20;
    }
  }

  uint64_t v7 = 0LL;
LABEL_20:
  os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_registrar_lock);
  return v7;
}

      if (v24) {
        free(v24);
      }
LABEL_16:

      free(v18);
      ++v16;
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v22 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v46 = "nw_ws_copy_headers_into_ws_request";
        _os_log_impl( &dword_181A5C000,  v22,  OS_LOG_TYPE_ERROR,  "%{public}s failed to add subprotocol to websocket request",  buf,  0xCu);
      }

      ++v16;
    }
  }

  if (ArrayBySeparatingStrings) {
    CFRelease(ArrayBySeparatingStrings);
  }
LABEL_44:
}

  if (v9) {
    free(v9);
  }
  BOOL v6 = 0LL;
LABEL_7:

  return v6;
}

  mkdir(__s1, 0x1C0u);
  os_log_type_t v21 = 0LL;
  char v22 = 1024LL;
  while (1)
  {
    uint64_t v23 = &__s1[v21];
    if (!__s1[v21]) {
      break;
    }
    ++v21;
    if (!--v22) {
      goto LABEL_47;
    }
  }

  if (v22 < 2)
  {
LABEL_46:
    *uint64_t v23 = 0;
  }

  else
  {
    os_log_type_t v24 = v22 - 2;
    BOOL v25 = 1023 - v21;
    __int16 v26 = 1022 - v21;
    if (v26 >= 0x17) {
      __int16 v26 = 23LL;
    }
    memcpy(v23, "/network_storage.sqlite", v26 + 1);
    uint64_t v23 = &v37;
    while (v24 <= 0x16)
    {
      if (!--v25) {
        goto LABEL_46;
      }
    }
  }

        goto LABEL_37;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v25 = "nw_udp_deserialize_options";
          _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_udp_options)), backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v25 = "nw_udp_deserialize_options";
          _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_udp_options)), no backtrace",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v25 = "nw_udp_deserialize_options";
        __int16 v26 = 2082;
        os_log_type_t v27 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_udp_options)), dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v25 = "nw_udp_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v10, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v25 = "nw_udp_deserialize_options";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null serialized_bytes", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v25 = "nw_udp_deserialize_options";
          _os_log_impl( &dword_181A5C000,  v11,  v20,  "%{public}s called with null serialized_bytes, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v25 = "nw_udp_deserialize_options";
          _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null serialized_bytes, no backtrace",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v25 = "nw_udp_deserialize_options";
        __int16 v26 = 2082;
        os_log_type_t v27 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s",  buf,  0x16u);
      }

    goto LABEL_37;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v11 = (id)gLogObj;
  *(_DWORD *)applier = 136446210;
  *(void *)&applier[4] = "-[NWParameters encodeWithCoder:]";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  int v31 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v13 = (os_log_s *)(id)gLogObj;
    os_log_type_t v14 = type;
    if (!os_log_type_enabled(v13, type)) {
      goto LABEL_28;
    }
    *(_DWORD *)applier = 136446210;
    *(void *)&applier[4] = "-[NWParameters encodeWithCoder:]";
    os_log_type_t v15 = "%{public}s nw_parameters_copy_dictionary failed";
LABEL_26:
    os_log_type_t v27 = v13;
    uint64_t v28 = v14;
LABEL_27:
    _os_log_impl(&dword_181A5C000, v27, v28, v15, applier, 0xCu);
    goto LABEL_28;
  }

  if (!v31)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v13 = (os_log_s *)(id)gLogObj;
    os_log_type_t v14 = type;
    if (!os_log_type_enabled(v13, type)) {
      goto LABEL_28;
    }
    *(_DWORD *)applier = 136446210;
    *(void *)&applier[4] = "-[NWParameters encodeWithCoder:]";
    os_log_type_t v15 = "%{public}s nw_parameters_copy_dictionary failed, backtrace limit exceeded";
    goto LABEL_26;
  }

  os_log_type_t v21 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  char v13 = (os_log_s *)(id)gLogObj;
  char v22 = type;
  uint64_t v23 = os_log_type_enabled(v13, type);
  if (v21)
  {
    if (v23)
    {
      *(_DWORD *)applier = 136446466;
      *(void *)&applier[4] = "-[NWParameters encodeWithCoder:]";
      *(_WORD *)&applier[12] = 2082;
      *(void *)&applier[14] = v21;
      _os_log_impl( &dword_181A5C000,  v13,  v22,  "%{public}s nw_parameters_copy_dictionary failed, dumping backtrace:%{public}s",  applier,  0x16u);
    }

    free(v21);
LABEL_17:
    if (!v12) {
      goto LABEL_40;
    }
    goto LABEL_29;
  }

  if (v23)
  {
    *(_DWORD *)applier = 136446210;
    *(void *)&applier[4] = "-[NWParameters encodeWithCoder:]";
    os_log_type_t v15 = "%{public}s nw_parameters_copy_dictionary failed, no backtrace";
    os_log_type_t v27 = v13;
    uint64_t v28 = v22;
    goto LABEL_27;
  }

LABEL_37:
      if (!v16)
      {
LABEL_39:
        os_log_type_t v14 = 0LL;
        goto LABEL_40;
      }

  if (v31) {
    free(v31);
  }
LABEL_20:
}

      int v31 = *(uint32x4_t *)v9->i8;
      v9 += 2;
      v8 += vaddlvq_u32(v31);
      if ((v6 & 8) == 0)
      {
LABEL_14:
        if ((v6 & 4) == 0) {
          goto LABEL_15;
        }
        goto LABEL_38;
      }

        goto LABEL_37;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v25 = "nw_ip_deserialize_options";
          _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_ip_options)), backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v25 = "nw_ip_deserialize_options";
          _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_ip_options)), no backtrace",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v25 = "nw_ip_deserialize_options";
        __int16 v26 = 2082;
        os_log_type_t v27 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_ip_options)), dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v25 = "nw_ip_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v10, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v25 = "nw_ip_deserialize_options";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null serialized_bytes", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v22)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v25 = "nw_ip_deserialize_options";
          _os_log_impl( &dword_181A5C000,  v11,  v20,  "%{public}s called with null serialized_bytes, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v25 = "nw_ip_deserialize_options";
          _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null serialized_bytes, no backtrace",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v25 = "nw_ip_deserialize_options";
        __int16 v26 = 2082;
        os_log_type_t v27 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s",  buf,  0x16u);
      }

  if (v20) {
    free(v20);
  }
  fd = 0LL;
LABEL_19:

  return fd;
}
  }

  if (!v6)
  {
    os_log_type_t v21 = *(void *)(v1 + 336);
    if (*(void *)(v1 + 232) < *(void *)(v21 + 16))
    {
      nw_mem_cache_magazine_purge(v1);
      *(void *)(v1 + 336) = v21 + 88;
      *(void *)(v1 + 72) = *(void *)(v1 + 64) + 0x7FFFFFFFLL;
      if ((*(_BYTE *)(v1 + 176) & 1) == 0)
      {
        *(_DWORD *)(v1 + 560) = *(_DWORD *)(v21 + 88);
        if (gLogDatapath)
        {
          BOOL v36 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
          {
            os_log_type_t v37 = *(void *)(v1 + 232);
            __int16 v38 = *(_DWORD *)(v1 + 560);
            *(_DWORD *)os_log_type_t v39 = 136446978;
            *(void *)&v39[4] = "nw_mem_cache_magazine_enable";
            os_log_type_t v40 = 2048;
            os_log_type_t v41 = v1;
            os_log_type_t v42 = 1024;
            char v43 = v37;
            os_log_type_t v44 = 1024;
            os_log_type_t v45 = v38;
            _os_log_impl( &dword_181A5C000,  v36,  OS_LOG_TYPE_DEBUG,  "%{public}s nwm %p chunksize %u magsize %d",  v39,  0x22u);
          }
        }
      }
    }
  }

  nw_mem_depot_ws_reap(v1);
  *(void *)os_log_type_t v39 = 0LL;
  if (!mach_timebase_info((mach_timebase_info_t)v39))
  {
    char v22 = mach_absolute_time() * *(unsigned int *)v39 / *(unsigned int *)&v39[4];
    uint64_t v23 = v22 / 0x3B9ACA00;
    *(void *)&nw_mem_get_current_time::current_time = v22 / 0x3B9ACA00;
    *((void *)&nw_mem_get_current_time::current_time + 1) = v22 % 0x3B9ACA00;
    os_log_type_t v24 = *(void *)(v1 + 408);
    if (v24 >= 1 && (uint64_t)(v23 - v24) >= 7)
    {
      nw_mem_cache_magazine_purge(v1);
      if ((*(_BYTE *)(v1 + 176) & 1) == 0)
      {
        *(_DWORD *)(v1 + 560) = **(_DWORD **)(v1 + 336);
        if (gLogDatapath)
        {
          BOOL v25 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
          {
            __int16 v26 = *(void *)(v1 + 232);
            os_log_type_t v27 = *(_DWORD *)(v1 + 560);
            *(_DWORD *)os_log_type_t v39 = 136446978;
            *(void *)&v39[4] = "nw_mem_cache_magazine_enable";
            os_log_type_t v40 = 2048;
            os_log_type_t v41 = v1;
            os_log_type_t v42 = 1024;
            char v43 = v26;
            os_log_type_t v44 = 1024;
            os_log_type_t v45 = v27;
            _os_log_impl( &dword_181A5C000,  v25,  OS_LOG_TYPE_DEBUG,  "%{public}s nwm %p chunksize %u magsize %d",  v39,  0x22u);
          }
        }
      }
    }
  }

  os_unfair_lock_lock((os_unfair_lock_t)&nw_mem_region_lock);
  if (g_process_transaction)
  {
    if ((g_transaction_touched & 1) == 0)
    {
      os_release((void *)g_process_transaction);
      g_process_transaction = 0LL;
      g_transaction_touched = 0;
      if (gLogDatapath)
      {
        uint64_t v34 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)os_log_type_t v39 = 136446210;
          *(void *)&v39[4] = "nw_mem_region_reap_transaction";
          _os_log_impl( &dword_181A5C000,  v34,  OS_LOG_TYPE_DEBUG,  "%{public}s os transaction disabled after idle",  v39,  0xCu);
        }
      }
    }
  }

  g_transaction_touched = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)&nw_mem_region_lock);
}

        goto LABEL_37;
      }

      if (!v23)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_stream_serialize_options";
          _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s called with null out_length, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_stream_serialize_options";
          _os_log_impl(&dword_181A5C000, v11, v18, "%{public}s called with null out_length, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_serialize_options";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s called with null out_length, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_quic_stream_serialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_stream_serialize_options";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null existing_handle", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v23)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_stream_serialize_options";
          _os_log_impl( &dword_181A5C000,  v11,  v20,  "%{public}s called with null existing_handle, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_stream_serialize_options";
          _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null existing_handle, no backtrace",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_quic_stream_serialize_options";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_37;
      }

      if (!v22)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_fetch_client_identity_reference";
          _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null !uuid_is_null(proxy_uuid), backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_fetch_client_identity_reference";
          _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s called with null !uuid_is_null(proxy_uuid), no backtrace",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_fetch_client_identity_reference";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s called with null !uuid_is_null(proxy_uuid), dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_quic_connection_fetch_client_identity_reference";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_fetch_client_identity_reference";
          _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s called with null nw_protocol_options_is_quic_connection(options)",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      if (!v22)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_fetch_client_identity_reference";
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      os_log_type_t v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_quic_connection_fetch_client_identity_reference";
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_quic_connection_fetch_client_identity_reference";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_37;
      }

      if (!v25)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browser_copy_old_result_locked";
          _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null key_name, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browser_copy_old_result_locked";
          _os_log_impl(&dword_181A5C000, v10, v17, "%{public}s called with null key_name, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_browser_copy_old_result_locked";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s called with null key_name, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_browser_copy_old_result_locked";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v25 = 0;
    if (__nwlog_fault(v9, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browser_copy_old_result_locked";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null browser", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v25)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browser_copy_old_result_locked";
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null browser, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      os_log_type_t v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browser_copy_old_result_locked";
          _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null browser, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_browser_copy_old_result_locked";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null browser, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_37;
      }

      if (!v25)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browser_copy_new_result_locked";
          _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null key_name, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browser_copy_new_result_locked";
          _os_log_impl(&dword_181A5C000, v10, v17, "%{public}s called with null key_name, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_browser_copy_new_result_locked";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s called with null key_name, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_browser_copy_new_result_locked";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v25 = 0;
    if (__nwlog_fault(v9, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browser_copy_new_result_locked";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null browser", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v25)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browser_copy_new_result_locked";
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null browser, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      os_log_type_t v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_browser_copy_new_result_locked";
          _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null browser, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_browser_copy_new_result_locked";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null browser, dumping backtrace:%{public}s",  buf,  0x16u);
      }

LABEL_37:
      if (v9) {
        free(v9);
      }
      goto LABEL_39;
    }

    if (!v22)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v25 = "nw_browser_copy_key_for_application_service_endpoint";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null key_buffer, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_36;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    BOOL v17 = type;
    os_log_type_t v18 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v25 = "nw_browser_copy_key_for_application_service_endpoint";
        _os_log_impl(&dword_181A5C000, v10, v17, "%{public}s called with null key_buffer, no backtrace", buf, 0xCu);
      }

      goto LABEL_36;
    }

    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v25 = "nw_browser_copy_key_for_application_service_endpoint";
      __int16 v26 = 2082;
      os_log_type_t v27 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s called with null key_buffer, dumping backtrace:%{public}s",  buf,  0x16u);
    }

        goto LABEL_37;
      }

      if (!v21)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_txt_record_access_bytes";
          _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null access_bytes, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_txt_record_access_bytes";
          _os_log_impl(&dword_181A5C000, v10, v17, "%{public}s called with null access_bytes, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v24 = "nw_txt_record_access_bytes";
        BOOL v25 = 2082;
        __int16 v26 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s called with null access_bytes, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v24 = "nw_txt_record_access_bytes";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_txt_record_access_bytes";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null txt_record", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v21)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_txt_record_access_bytes";
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null txt_record, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      os_log_type_t v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_txt_record_access_bytes";
          _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null txt_record, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v24 = "nw_txt_record_access_bytes";
        BOOL v25 = 2082;
        __int16 v26 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null txt_record, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_37;
      }

      if (!v18)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_activity_create_from_xpc_token";
          _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s called with null (xpc_get_type(token) == (&_xpc_type_uuid)), backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      os_log_type_t v15 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_activity_create_from_xpc_token";
          _os_log_impl( &dword_181A5C000,  v7,  v14,  "%{public}s called with null (xpc_get_type(token) == (&_xpc_type_uuid)), no backtrace",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_activity_create_from_xpc_token";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v7,  v14,  "%{public}s called with null (xpc_get_type(token) == (&_xpc_type_uuid)), dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_activity_create_from_xpc_token";
    BOOL v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v18 = 0;
    if (__nwlog_fault(v6, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_activity_create_from_xpc_token";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null token", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v18)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_activity_create_from_xpc_token";
          _os_log_impl( &dword_181A5C000,  v7,  v16,  "%{public}s called with null token, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      char v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_activity_create_from_xpc_token";
          _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null token, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_activity_create_from_xpc_token";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null token, dumping backtrace:%{public}s",  buf,  0x16u);
      }
    }
  }
    }
  }
    }
  }

    goto LABEL_37;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v11 = (id)gLogObj;
  *(_DWORD *)applier = 136446210;
  *(void *)&applier[4] = "-[NWInterface encodeWithCoder:]";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  int v31 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v13 = (os_log_s *)(id)gLogObj;
    os_log_type_t v14 = type;
    if (!os_log_type_enabled(v13, type)) {
      goto LABEL_28;
    }
    *(_DWORD *)applier = 136446210;
    *(void *)&applier[4] = "-[NWInterface encodeWithCoder:]";
    os_log_type_t v15 = "%{public}s nw_interface_copy_dictionary failed";
LABEL_26:
    os_log_type_t v27 = v13;
    uint64_t v28 = v14;
LABEL_27:
    _os_log_impl(&dword_181A5C000, v27, v28, v15, applier, 0xCu);
    goto LABEL_28;
  }

  if (!v31)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v13 = (os_log_s *)(id)gLogObj;
    os_log_type_t v14 = type;
    if (!os_log_type_enabled(v13, type)) {
      goto LABEL_28;
    }
    *(_DWORD *)applier = 136446210;
    *(void *)&applier[4] = "-[NWInterface encodeWithCoder:]";
    os_log_type_t v15 = "%{public}s nw_interface_copy_dictionary failed, backtrace limit exceeded";
    goto LABEL_26;
  }

  os_log_type_t v21 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  char v13 = (os_log_s *)(id)gLogObj;
  char v22 = type;
  uint64_t v23 = os_log_type_enabled(v13, type);
  if (v21)
  {
    if (v23)
    {
      *(_DWORD *)applier = 136446466;
      *(void *)&applier[4] = "-[NWInterface encodeWithCoder:]";
      *(_WORD *)&applier[12] = 2082;
      *(void *)&applier[14] = v21;
      _os_log_impl( &dword_181A5C000,  v13,  v22,  "%{public}s nw_interface_copy_dictionary failed, dumping backtrace:%{public}s",  applier,  0x16u);
    }

    free(v21);
LABEL_17:
    if (!v12) {
      goto LABEL_40;
    }
    goto LABEL_29;
  }

  if (v23)
  {
    *(_DWORD *)applier = 136446210;
    *(void *)&applier[4] = "-[NWInterface encodeWithCoder:]";
    os_log_type_t v15 = "%{public}s nw_interface_copy_dictionary failed, no backtrace";
    os_log_type_t v27 = v13;
    uint64_t v28 = v22;
    goto LABEL_27;
  }

        goto LABEL_37;
      }

      if (!v19)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_unidirectional";
          _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s protocol options are not webtransport, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      os_log_type_t v15 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_unidirectional";
          _os_log_impl( &dword_181A5C000,  v7,  v14,  "%{public}s protocol options are not webtransport, no backtrace",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_unidirectional";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v7,  v14,  "%{public}s protocol options are not webtransport, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_unidirectional";
    BOOL v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v19 = 0;
    if (__nwlog_fault(v6, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_unidirectional";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null options", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v19)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_unidirectional";
          _os_log_impl( &dword_181A5C000,  v7,  v16,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      char v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_unidirectional";
          _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_unidirectional";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_37;
      }

      if (!v19)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v17 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_datagram";
          _os_log_impl( &dword_181A5C000,  v7,  v17,  "%{public}s protocol options are not webtransport, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      os_log_type_t v15 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_datagram";
          _os_log_impl( &dword_181A5C000,  v7,  v14,  "%{public}s protocol options are not webtransport, no backtrace",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_datagram";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v7,  v14,  "%{public}s protocol options are not webtransport, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_datagram";
    BOOL v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v19 = 0;
    if (__nwlog_fault(v6, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_datagram";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null options", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v19)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_datagram";
          _os_log_impl( &dword_181A5C000,  v7,  v16,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      char v13 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_datagram";
          _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_webtransport_options_get_is_datagram";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
      }

    free(backtrace_string);
    goto LABEL_48;
  }

  handle = (unsigned __int8 *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v25 = "nw_protocol_http3_remove_listen_handler";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v25 = "nw_protocol_http3_remove_listen_handler";
        os_log_type_t v15 = "%{public}s called with null http3";
        goto LABEL_47;
      }

      goto LABEL_48;
    }

    if (!v22)
    {
      char v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v25 = "nw_protocol_http3_remove_listen_handler";
        os_log_type_t v15 = "%{public}s called with null http3, backtrace limit exceeded";
        goto LABEL_47;
      }

      goto LABEL_48;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    char v13 = (os_log_s *)__nwlog_obj();
    os_log_type_t v14 = type;
    BOOL v19 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v25 = "nw_protocol_http3_remove_listen_handler";
        os_log_type_t v15 = "%{public}s called with null http3, no backtrace";
        goto LABEL_47;
      }

      goto LABEL_48;
    }

    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v25 = "nw_protocol_http3_remove_listen_handler";
      __int16 v26 = 2082;
      os_log_type_t v27 = backtrace_string;
      os_log_type_t v18 = "%{public}s called with null http3, dumping backtrace:%{public}s";
      goto LABEL_35;
    }

    goto LABEL_36;
  }

  uint64_t v4 = (handle[1375] >> 6) & 1;
  if (!gLogDatapath) {
    LOBYTE(v4) = 1;
  }
  if (*((nw_listen_protocol **)handle + 136) == a2)
  {
    uint64_t v7 = handle + 1373;
    if ((v4 & 1) == 0)
    {
      os_log_type_t v20 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        os_log_type_t v21 = *((_DWORD *)handle + 320);
        *(_DWORD *)buf = 136446978;
        BOOL v25 = "nw_protocol_http3_remove_listen_handler";
        __int16 v26 = 2082;
        os_log_type_t v27 = (char *)(handle + 1289);
        uint64_t v28 = 2080;
        int v29 = " ";
        BOOL v30 = 1024;
        int v31 = v21;
        _os_log_impl( &dword_181A5C000,  v20,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> removing protocol listen handler",  buf,  0x26u);
      }
    }

    handle[1375] = (*(unsigned __int16 *)(handle + 1373) | (handle[1375] << 16) | 0x10000u) >> 16;
    *((void *)handle + 136) = 0LL;
    a2->protocol_handler = 0LL;
    os_log_type_t v8 = (unsigned __int16)*v7;
    uint64_t v9 = v8 | (handle[1375] << 16);
    if ((v8 & 1) != 0 && *((void *)handle + 25))
    {
      if (*((_DWORD *)handle + 318) == 3 && !*((void *)handle + 114))
      {
        os_log_type_t v10 = 1LL;
        *((_DWORD *)handle + 318) = 1;
        nw_http3_control_stream_process_output((uint64_t)handle, (uint64_t)a2);
        return v10;
      }

      void *v7 = v8;
      handle[1375] = (v9 | 0x20000u) >> 16;
    }

    else
    {
      nw_http3_async_close_connection_if_no_stream((uint64_t)handle);
    }
  }

  else if ((v4 & 1) == 0)
  {
    uint64_t v5 = (os_log_s *)__nwlog_obj();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      BOOL v6 = *((_DWORD *)handle + 320);
      *(_DWORD *)buf = 136446978;
      BOOL v25 = "nw_protocol_http3_remove_listen_handler";
      __int16 v26 = 2082;
      os_log_type_t v27 = (char *)(handle + 1289);
      uint64_t v28 = 2080;
      int v29 = " ";
      BOOL v30 = 1024;
      int v31 = v6;
      _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> ignoring request to remove http3 listen handler, does not match our handler",  buf,  0x26u);
    }
  }

  return 1LL;
}

          _os_log_impl(&dword_181A5C000, v19, v20, v21, buf, 0x16u);
          goto LABEL_37;
        }

        v13(v2, v2, 18LL, &v36, 1LL);
      }

  if (v4) {
    free(v4);
  }
  return 0LL;
}

    _os_log_impl(&dword_181A5C000, v6, v7, v8, buf, 0xCu);
    goto LABEL_37;
  }

  if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
  {
    if (a3)
    {
      if (*(_DWORD *)(a1 + 272) == 1)
      {
        id v3 = *(_DWORD *)(a1 + 256);
        uint64_t v4 = a3[1] & 0xFFFFFFFB;
      }

      else
      {
        id v3 = -1;
        uint64_t v4 = a3[1] | 4;
      }

      *a3 = v3;
      a3[1] = v4;
      a3[1] = v4 & 0xFFFFFFFC | (*(_DWORD *)(a1 + 272) == 1);
    }

    return;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_protocol_socket_get_message_properties";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    BOOL v6 = (os_log_s *)__nwlog_obj();
    uint64_t v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v16 = "nw_protocol_socket_get_message_properties";
    os_log_type_t v8 = "%{public}s called with null socket_handler";
    goto LABEL_36;
  }

  if (!v13)
  {
    BOOL v6 = (os_log_s *)__nwlog_obj();
    uint64_t v7 = type;
    if (!os_log_type_enabled(v6, type)) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v16 = "nw_protocol_socket_get_message_properties";
    os_log_type_t v8 = "%{public}s called with null socket_handler, backtrace limit exceeded";
    goto LABEL_36;
  }

  BOOL v11 = (char *)__nw_create_backtrace_string();
  BOOL v6 = (os_log_s *)__nwlog_obj();
  uint64_t v7 = type;
  os_log_type_t v12 = os_log_type_enabled(v6, type);
  if (!v11)
  {
    if (!v12) {
      goto LABEL_37;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v16 = "nw_protocol_socket_get_message_properties";
    os_log_type_t v8 = "%{public}s called with null socket_handler, no backtrace";
    goto LABEL_36;
  }

  if (v12)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v16 = "nw_protocol_socket_get_message_properties";
    BOOL v17 = 2082;
    os_log_type_t v18 = v11;
    _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null socket_handler, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v11);
  if (v5) {
    goto LABEL_38;
  }
}

    goto LABEL_42;
  }

  uunsigned int int64 = xpc_dictionary_get_uint64(v18, "generation");
  if (a3)
  {
    os_log_type_t v21 = uint64;
    if (uint64 != a3)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v22 = (os_log_s *)(id)gLogObj;
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_20;
      }
      *(_DWORD *)buf = 136447234;
      *(void *)&uint8_t buf[4] = "nw_path_copy_dictionary_for_agent_with_generation";
      BOOL v66 = 1042;
      *(_DWORD *)os_log_type_t v67 = 16;
      *(_WORD *)&v67[4] = 2098;
      *(void *)&v67[6] = a2;
      __int16 v68 = 1024;
      v69 = v21;
      uint64_t v70 = 1024;
      os_log_type_t v71 = a3;
      uint64_t v23 = "%{public}s Agent for %{public,uuid_t}.16P has new generation (%u != %u)";
      os_log_type_t v24 = v22;
      BOOL v25 = 40;
      goto LABEL_19;
    }
  }

  os_log_type_t v27 = v19;
  xpc_dictionary_set_uint64(xdict, out, v17);
  if (!a4) {
    goto LABEL_43;
  }
  uint64_t v34 = nw_dictionary_copy_value((uint64_t)v52, (uint64_t)out);
  int v31 = (os_log_s *)*a4;
  *a4 = v34;
LABEL_42:

LABEL_43:
  if (xpc_dictionary_get_count(v15) >= 0x21)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v35 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_path_copy_dictionary_for_agent_with_generation";
      BOOL v66 = 1024;
      *(_DWORD *)os_log_type_t v67 = 32;
      _os_log_impl( &dword_181A5C000,  v35,  OS_LOG_TYPE_DEBUG,  "%{public}s Agent cache hit limit (%u), purging all agents not used recently",  buf,  0x12u);
    }

    BOOL v36 = xpc_array_create(0LL, 0LL);
    if (v36)
    {
      os_log_type_t v37 = MEMORY[0x1895F87A8];
      applier[0] = MEMORY[0x1895F87A8];
      applier[1] = 3221225472LL;
      applier[2] = ___ZL49nw_path_copy_dictionary_for_agent_with_generationPU24objcproto13OS_nw_context8NSObjectPhjPU8__strongPU29objcproto18OS_nw_proxy_configS__block_invoke;
      applier[3] = &unk_189BC5600;
      __int16 v38 = xdict;
      __int16 v60 = v38;
      __int16 v62 = v17;
      os_log_type_t v39 = v36;
      char v61 = v39;
      xpc_dictionary_apply(v15, applier);
      v55[0] = v37;
      v55[1] = 3221225472LL;
      v55[2] = ___ZL49nw_path_copy_dictionary_for_agent_with_generationPU24objcproto13OS_nw_context8NSObjectPhjPU8__strongPU29objcproto18OS_nw_proxy_configS__block_invoke_2;
      v55[3] = &unk_189BC5628;
      char v56 = v15;
      os_log_type_t v57 = v38;
      os_log_type_t v58 = v52;
      xpc_array_apply(v39, v55);

LABEL_55:
      goto LABEL_56;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v40 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_copy_dictionary_for_agent_with_generation";
    os_log_type_t v41 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    int v63 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v42 = (os_log_s *)(id)gLogObj;
      char v43 = type;
      if (os_log_type_enabled(v42, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_copy_dictionary_for_agent_with_generation";
        _os_log_impl(&dword_181A5C000, v42, v43, "%{public}s xpc_array_create failed", buf, 0xCu);
      }
    }

    else
    {
      if (v63)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v46 = (os_log_s *)(id)gLogObj;
        BOOL v47 = type;
        v48 = os_log_type_enabled(v46, type);
        if (backtrace_string)
        {
          if (v48)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_copy_dictionary_for_agent_with_generation";
            BOOL v66 = 2082;
            *(void *)os_log_type_t v67 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v46,  v47,  "%{public}s xpc_array_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          if (!v41) {
            goto LABEL_55;
          }
          goto LABEL_54;
        }

        if (v48)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_copy_dictionary_for_agent_with_generation";
          _os_log_impl(&dword_181A5C000, v46, v47, "%{public}s xpc_array_create failed, no backtrace", buf, 0xCu);
        }

LABEL_53:
        if (!v41) {
          goto LABEL_55;
        }
LABEL_54:
        free(v41);
        goto LABEL_55;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v42 = (os_log_s *)(id)gLogObj;
      BOOL v50 = type;
      if (os_log_type_enabled(v42, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_copy_dictionary_for_agent_with_generation";
        _os_log_impl( &dword_181A5C000,  v42,  v50,  "%{public}s xpc_array_create failed, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_53;
  }

      goto LABEL_40;
    }

    if (!v19)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = (os_log_s *)(id)gLogObj;
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v23 = "nw_path_copy_all_client_ids";
        os_log_type_t v24 = 1024;
        *(_DWORD *)BOOL v25 = v2;
        _os_log_impl( &dword_181A5C000,  v5,  v16,  "%{public}s NECP_CLIENT_ACTION_COPY_LIST %{darwin.errno}d, backtrace limit exceeded",  buf,  0x12u);
      }

      goto LABEL_36;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v5 = (os_log_s *)(id)gLogObj;
    BOOL v11 = type;
    os_log_type_t v12 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v23 = "nw_path_copy_all_client_ids";
        os_log_type_t v24 = 1024;
        *(_DWORD *)BOOL v25 = v2;
        _os_log_impl( &dword_181A5C000,  v5,  v11,  "%{public}s NECP_CLIENT_ACTION_COPY_LIST %{darwin.errno}d, no backtrace",  buf,  0x12u);
      }

      goto LABEL_36;
    }

    if (v12)
    {
      *(_DWORD *)buf = 136446722;
      uint64_t v23 = "nw_path_copy_all_client_ids";
      os_log_type_t v24 = 1024;
      *(_DWORD *)BOOL v25 = v2;
      *(_WORD *)&v25[4] = 2082;
      *(void *)&v25[6] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v5,  v11,  "%{public}s NECP_CLIENT_ACTION_COPY_LIST %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
    }

LABEL_26:
    free(backtrace_string);
    if (!v4) {
      return 0LL;
    }
    goto LABEL_41;
  }

  return xpc_array_create(0LL, 0LL);
}

        goto LABEL_37;
      }

      if (!v25)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_copy_flow_for_registration";
          _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s called with null flow_registration, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_copy_flow_for_registration";
          _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s called with null flow_registration, no backtrace",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_path_copy_flow_for_registration";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s called with null flow_registration, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_copy_flow_for_registration";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    BOOL v25 = 0;
    if (__nwlog_fault(v10, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_copy_flow_for_registration";
          _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null path", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v25)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_copy_flow_for_registration";
          _os_log_impl( &dword_181A5C000,  v11,  v20,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_copy_flow_for_registration";
          _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_path_copy_flow_for_registration";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
      }

LABEL_37:
      if (!v9)
      {
LABEL_39:
        uint64_t v7 = 0LL;
        goto LABEL_40;
      }

    free(backtrace_string);
    goto LABEL_55;
  }

  if (!nw_path_network_is_satisfied_update_reason(v5, 0LL) || (direct = v6->direct) == 0LL)
  {
LABEL_57:
    ipv6_network_signature = 0LL;
    goto LABEL_58;
  }

  ipv6_network_signature = nw_interface_get_ipv6_network_signature(direct, a2, a3);
LABEL_58:

  return ipv6_network_signature;
}

    free(v15);
    goto LABEL_52;
  }

  *(_OWORD *)internal->registration_id = *(_OWORD *)a2;
  objc_storeStrong((id *)&internal->parent_evaluator, a1);
  os_unfair_lock_lock((os_unfair_lock_t)v4 + 24);
  uint64_t v7 = *((_DWORD *)v4 + 25);
  *((_DWORD *)v4 + 25) = v7 + 1;
  os_unfair_lock_unlock((os_unfair_lock_t)v4 + 24);
  os_log_type_t v8 = nw_parameters_copy_context(*((void **)v4 + 1));
  globals_for_path = nw_context_get_globals_for_path(v8);

  os_log_type_t v10 = (os_unfair_lock_s *)(globals_for_path + 124);
  os_unfair_lock_lock((os_unfair_lock_t)(globals_for_path + 124));
  if (v7 > *(_DWORD *)(globals_for_path + 128)) {
    *(_DWORD *)(globals_for_path + 128) = v7;
  }
  BOOL v11 = *(void *)(globals_for_path + 40);
  if (!v11)
  {
    BOOL v11 = nw_hash_table_create_internal( 0x11u,  0,  (const void *(*)(const void *, unsigned int *))nw_flow_registration_get_key,  (unsigned int (*)(const void *, unsigned int))nw_flow_registration_key_hash,  (BOOL (*)(const void *, const void *, unsigned int))nw_flow_registration_matches_key,  0LL);
    if (v11)
    {
      *(_DWORD *)(v11 + 48) &= ~2u;
      *(void *)(globals_for_path + 40) = v11;
      goto LABEL_7;
    }

    *(void *)(globals_for_path + 40) = 0LL;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v22 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v35 = "nw_path_flow_registration_create";
    uint64_t v23 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    __int16 v32 = 0;
    if (__nwlog_fault(v23, &type, &v32))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v24 = (os_log_s *)(id)gLogObj;
        BOOL v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v35 = "nw_path_flow_registration_create";
          _os_log_impl(&dword_181A5C000, v24, v25, "%{public}s nw_hash_table_create_no_lock failed", buf, 0xCu);
        }
      }

      else if (v32)
      {
        os_log_type_t v27 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        uint64_t v28 = type;
        int v29 = os_log_type_enabled(v24, type);
        if (v27)
        {
          if (v29)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v35 = "nw_path_flow_registration_create";
            BOOL v36 = 2082;
            *(void *)os_log_type_t v37 = v27;
            _os_log_impl( &dword_181A5C000,  v24,  v28,  "%{public}s nw_hash_table_create_no_lock failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v27);
          if (!v23) {
            goto LABEL_51;
          }
          goto LABEL_50;
        }

        if (v29)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v35 = "nw_path_flow_registration_create";
          _os_log_impl( &dword_181A5C000,  v24,  v28,  "%{public}s nw_hash_table_create_no_lock failed, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v30 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v35 = "nw_path_flow_registration_create";
          _os_log_impl( &dword_181A5C000,  v24,  v30,  "%{public}s nw_hash_table_create_no_lock failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v23)
    {
LABEL_51:
      os_unfair_lock_unlock(v10);
      goto LABEL_52;
    }

    free(v12);
    goto LABEL_37;
  }

  if (uuid_is_null(a2))
  {
    os_log_type_t v10 = v9;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v11 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    __int16 v113 = "nw_path_group_member_action";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v101[0]) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v13 = (os_log_s *)(id)gLogObj;
      os_log_type_t v14 = type[0];
      if (os_log_type_enabled(v13, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v113 = "nw_path_group_member_action";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null agent_uuid", buf, 0xCu);
      }
    }

    else if (LOBYTE(v101[0]))
    {
      BOOL v30 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v13 = (os_log_s *)(id)gLogObj;
      int v31 = type[0];
      __int16 v32 = os_log_type_enabled(v13, type[0]);
      if (v30)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v113 = "nw_path_group_member_action";
          v114 = 2082;
          *(void *)uint64_t v115 = v30;
          _os_log_impl( &dword_181A5C000,  v13,  v31,  "%{public}s called with null agent_uuid, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v30);
        if (!v12) {
          goto LABEL_37;
        }
        goto LABEL_36;
      }

      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v113 = "nw_path_group_member_action";
        _os_log_impl(&dword_181A5C000, v13, v31, "%{public}s called with null agent_uuid, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v13 = (os_log_s *)(id)gLogObj;
      uint64_t v34 = type[0];
      if (os_log_type_enabled(v13, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v113 = "nw_path_group_member_action";
        _os_log_impl( &dword_181A5C000,  v13,  v34,  "%{public}s called with null agent_uuid, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_34;
  }

  os_log_type_t v15 = nw_parameters_copy_context(v7[2]);
  os_log_type_t v16 = nw_path_shared_necp_fd(v15);

  if (v16 < 0)
  {
    uint64_t v33 = 0LL;
LABEL_38:

    return v33;
  }

  v92 = v9;
  BOOL v17 = v9;
  v106 = 0LL;
  v107 = &v106;
  v108 = 0x2020000000LL;
  __int16 v109 = 0LL;
  os_log_type_t v102 = 0LL;
  os_log_type_t v103 = &v102;
  __uint64_t v104 = 0x2020000000LL;
  char v105 = 0;
  os_log_type_t v18 = MEMORY[0x1895F87A8];
  v101[0] = MEMORY[0x1895F87A8];
  v101[1] = 3221225472LL;
  v101[2] = __nw_path_create_necp_agent_group_action_block_invoke;
  v101[3] = &unk_189BC52F8;
  v101[4] = &v106;
  v101[5] = &v102;
  nw_array_apply(v17, (uint64_t)v101);
  BOOL v19 = v107[3];
  os_log_type_t v20 = v19 + 18;
  os_log_type_t v91 = v17;
  if (v19 == -18)
  {
    __nwlog_obj();
    id v65 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v65, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    __int16 v113 = "strict_calloc";
    BOOL v66 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v66);
    if (result) {
      goto LABEL_158;
    }
    free(v66);
    BOOL v17 = v91;
  }

  os_log_type_t v21 = calloc(1uLL, v19 + 18);
  if (!v21)
  {
    __nwlog_obj();
    os_log_type_t v67 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v67, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    __int16 v113 = "strict_calloc";
    v114 = 2048;
    *(void *)uint64_t v115 = 1LL;
    *(_WORD *)&v115[8] = 2048;
    *(void *)&v115[10] = v19 + 18;
    __int16 v68 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v68);
    if (result) {
      goto LABEL_158;
    }
    free(v68);
    BOOL v17 = v91;
  }

  *(_OWORD *)os_log_type_t v21 = *(_OWORD *)a2;
  v21[8] = *((_WORD *)v103 + 12);
  v100[0] = 0LL;
  v100[1] = v100;
  v100[2] = 0x2020000000LL;
  v100[3] = v21 + 9;
  *(void *)os_log_type_t type = v18;
  v94 = 3221225472LL;
  v95 = __nw_path_create_necp_agent_group_action_block_invoke_2;
  v96 = &unk_189BC5320;
  os_log_type_t v97 = v100;
  BOOL v98 = &v106;
  v99 = v21;
  nw_array_apply(v17, (uint64_t)type);
  char v22 = v19 + 23;
  if (v19 == -23)
  {
    __nwlog_obj();
    v69 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v69, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    __int16 v113 = "strict_calloc";
    uint64_t v70 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v70);
    if (result) {
      goto LABEL_158;
    }
    free(v70);
    char v22 = 0LL;
  }

  uint64_t v23 = (char *)calloc(1uLL, v22);
  os_log_type_t v24 = v23;
  if (v23)
  {
    BOOL v25 = &v23[v22];
    if (v22 <= 0)
    {
      __nwlog_obj();
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136447234;
      __int16 v113 = "nw_necp_append_tlv";
      v114 = 2048;
      *(void *)uint64_t v115 = v24;
      *(_WORD *)&v115[8] = 2048;
      unint64_t v78 = v25;
      *(void *)&v115[10] = v25;
      v116 = 1024;
      *(_DWORD *)v117 = a3;
      *(_WORD *)&v117[4] = 1024;
      *(_DWORD *)&v117[6] = v20;
      os_log_type_t v27 = (const char *)_os_log_send_and_compose_impl();

      __int16 v111 = OS_LOG_TYPE_ERROR;
      __uint64_t v110 = 0;
      if (__nwlog_fault(v27, &v111, &v110))
      {
        if (v111 == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          char v79 = v111;
          if (os_log_type_enabled(v28, v111))
          {
            *(_DWORD *)buf = 136447234;
            __int16 v113 = "nw_necp_append_tlv";
            v114 = 2048;
            *(void *)uint64_t v115 = v24;
            *(_WORD *)&v115[8] = 2048;
            *(void *)&v115[10] = v78;
            v116 = 1024;
            *(_DWORD *)v117 = a3;
            *(_WORD *)&v117[4] = 1024;
            *(_DWORD *)&v117[6] = v20;
            _os_log_impl( &dword_181A5C000,  v28,  v79,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u",  buf,  0x2Cu);
          }

          goto LABEL_50;
        }

        if (!v110)
        {
          __nwlog_obj();
          uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v89 = v111;
          if (os_log_type_enabled(v28, v111))
          {
            *(_DWORD *)buf = 136447234;
            __int16 v113 = "nw_necp_append_tlv";
            v114 = 2048;
            *(void *)uint64_t v115 = v24;
            *(_WORD *)&v115[8] = 2048;
            *(void *)&v115[10] = v78;
            v116 = 1024;
            *(_DWORD *)v117 = a3;
            *(_WORD *)&v117[4] = 1024;
            *(_DWORD *)&v117[6] = v20;
            _os_log_impl( &dword_181A5C000,  v28,  v89,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded",  buf,  0x2Cu);
          }

          goto LABEL_50;
        }

        v84 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v85 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v86 = v111;
        os_log_type_t v87 = os_log_type_enabled(v85, v111);
        if (v84)
        {
          if (v87)
          {
            *(_DWORD *)buf = 136447490;
            __int16 v113 = "nw_necp_append_tlv";
            v114 = 2048;
            *(void *)uint64_t v115 = v24;
            *(_WORD *)&v115[8] = 2048;
            *(void *)&v115[10] = v78;
            v116 = 1024;
            *(_DWORD *)v117 = a3;
            *(_WORD *)&v117[4] = 1024;
            *(_DWORD *)&v117[6] = v20;
            *(_WORD *)v118 = 2082;
            *(void *)&v118[2] = v84;
            _os_log_impl( &dword_181A5C000,  v85,  v86,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s",  buf,  0x36u);
          }

          free(v84);
        }

        else
        {
          if (v87)
          {
            *(_DWORD *)buf = 136447234;
            __int16 v113 = "nw_necp_append_tlv";
            v114 = 2048;
            *(void *)uint64_t v115 = v24;
            *(_WORD *)&v115[8] = 2048;
            *(void *)&v115[10] = v78;
            v116 = 1024;
            *(_DWORD *)v117 = a3;
            *(_WORD *)&v117[4] = 1024;
            *(_DWORD *)&v117[6] = v20;
            _os_log_impl( &dword_181A5C000,  v85,  v86,  "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace",  buf,  0x2Cu);
          }
        }
      }

    if (v9) {
      free(v9);
    }
    goto LABEL_3;
  }

  if ((*((_BYTE *)v1 + 475) & 1) == 0)
  {
LABEL_3:
    id v3 = 0LL;
    goto LABEL_12;
  }

  if (v1->custom_ip_protocol) {
    goto LABEL_11;
  }
  uint64_t v4 = v1->parameters;
  if (v4)
  {
    uint64_t v5 = *((void *)v4 + 12);

    if ((v5 & 0x10000000) == 0) {
      goto LABEL_7;
    }
LABEL_11:
    id v3 = 1LL;
    goto LABEL_12;
  }

  __nwlog_obj();
  os_log_type_t v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v27 = "nw_parameters_get_never_open_listener_socket";
  os_log_type_t v16 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  os_log_type_t v24 = 0;
  if (__nwlog_fault(v16, &type, &v24))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_parameters_get_never_open_listener_socket";
        _os_log_impl(&dword_181A5C000, v17, v18, "%{public}s called with null parameters", buf, 0xCu);
      }
    }

    else if (v24)
    {
      os_log_type_t v20 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      char v22 = os_log_type_enabled(v17, type);
      if (v20)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v27 = "nw_parameters_get_never_open_listener_socket";
          uint64_t v28 = 2082;
          int v29 = v20;
          _os_log_impl( &dword_181A5C000,  v17,  v21,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v20);
        goto LABEL_49;
      }

      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_parameters_get_never_open_listener_socket";
        _os_log_impl(&dword_181A5C000, v17, v21, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v23 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_parameters_get_never_open_listener_socket";
        _os_log_impl( &dword_181A5C000,  v17,  v23,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

LABEL_37:
      if (v14) {
        free(v14);
      }
      goto LABEL_39;
    }

    if (!v31)
    {
      __nwlog_obj();
      os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v25 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_get_vpn_config_uuid";
        _os_log_impl( &dword_181A5C000,  v15,  v25,  "%{public}s called with null out_uuid, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_36;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    char v22 = type;
    uint64_t v23 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_get_vpn_config_uuid";
        _os_log_impl(&dword_181A5C000, v15, v22, "%{public}s called with null out_uuid, no backtrace", buf, 0xCu);
      }

      goto LABEL_36;
    }

    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_path_get_vpn_config_uuid";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v15,  v22,  "%{public}s called with null out_uuid, dumping backtrace:%{public}s",  buf,  0x16u);
    }

LABEL_37:
      if (v8) {
        free(v8);
      }
      goto LABEL_39;
    }

    if (!v25)
    {
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v19 = type[0];
      if (os_log_type_enabled(v9, type[0]))
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "nw_path_get_private_dns_config_uuid";
        _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s called with null out_uuid, backtrace limit exceeded",  applier,  0xCu);
      }

      goto LABEL_36;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v16 = type[0];
    BOOL v17 = os_log_type_enabled(v9, type[0]);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)applier = 136446210;
        *(void *)&applier[4] = "nw_path_get_private_dns_config_uuid";
        _os_log_impl(&dword_181A5C000, v9, v16, "%{public}s called with null out_uuid, no backtrace", applier, 0xCu);
      }

      goto LABEL_36;
    }

    if (v17)
    {
      *(_DWORD *)applier = 136446466;
      *(void *)&applier[4] = "nw_path_get_private_dns_config_uuid";
      *(_WORD *)&applier[12] = 2082;
      *(void *)&applier[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s called with null out_uuid, dumping backtrace:%{public}s",  applier,  0x16u);
    }

    os_log_type_t v20 = 0;
    BOOL v19 = 0LL;
    os_log_type_t v39 = 0LL;
    os_log_type_t v40 = 0LL;
    LODWORD(v41) = 0;
    os_log_type_t v21 = *(void *)(a1 + 32);
    if (!v21) {
      goto LABEL_37;
    }
    goto LABEL_18;
  }

  if (!*(_BYTE *)(v7 + 12))
  {
    uint64_t v7 = *(void *)(v7 + 72);
    goto LABEL_4;
  }

        goto LABEL_37;
      }

      if (!v20)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v23 = "nw_application_id_set_persona";
          _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s called with null persona, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v23 = "nw_application_id_set_persona";
          _os_log_impl(&dword_181A5C000, v9, v16, "%{public}s called with null persona, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v23 = "nw_application_id_set_persona";
        os_log_type_t v24 = 2082;
        BOOL v25 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s called with null persona, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v23 = "nw_application_id_set_persona";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v20 = 0;
    if (__nwlog_fault(v8, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v23 = "nw_application_id_set_persona";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null application_id", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v20)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v23 = "nw_application_id_set_persona";
          _os_log_impl( &dword_181A5C000,  v9,  v18,  "%{public}s called with null application_id, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      os_log_type_t v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v23 = "nw_application_id_set_persona";
          _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null application_id, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v23 = "nw_application_id_set_persona";
        os_log_type_t v24 = 2082;
        BOOL v25 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null application_id, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_46;
    }

    os_log_type_t v14 = (os_log_s *)__nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v24 = "nw_parallel_array_is_equal";
    os_log_type_t v16 = "%{public}s called with null parray";
LABEL_45:
    _os_log_impl(&dword_181A5C000, v14, v15, v16, buf, 0xCu);
LABEL_46:
    if (v13) {
      free(v13);
    }
    return 1LL;
  }

  id v3 = (char *)a1[2];
  uint64_t v2 = (char *)a1[3];
  uint64_t v4 = v2 - v3;
  BOOL v6 = a1[5];
  uint64_t v5 = a1[6];
  if (v2 - v3 != v5 - v6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v24 = "nw_parallel_array_is_equal";
    char v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v24 = "nw_parallel_array_is_equal";
      os_log_type_t v16 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size())";
      goto LABEL_45;
    }

    if (!v21)
    {
      os_log_type_t v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_46;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v24 = "nw_parallel_array_is_equal";
      os_log_type_t v16 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), backtrace limit exceeded";
      goto LABEL_45;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v14 = (os_log_s *)__nwlog_obj();
    os_log_type_t v15 = type;
    os_log_type_t v20 = os_log_type_enabled(v14, type);
    if (backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v24 = "nw_parallel_array_is_equal";
        BOOL v25 = 2082;
        __int16 v26 = backtrace_string;
        BOOL v19 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), dumping backtrace:%{public}s";
        goto LABEL_35;
      }

      goto LABEL_36;
    }

    if (!v20) {
      goto LABEL_46;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v24 = "nw_parallel_array_is_equal";
    os_log_type_t v16 = "%{public}s called with null (parray->vector1.size() == parray->vector2.size()), no backtrace";
    goto LABEL_45;
  }

  if (a1 == a2) {
    return 1LL;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = (void *)a2[2];
  if (v4 != a2[3] - (void)v7) {
    return 0LL;
  }
  if (v3 != v2)
  {
    while (*(void *)v3 == *v7)
    {
      v3 += 8;
      ++v7;
      if (v3 == v2) {
        goto LABEL_9;
      }
    }

    return 0LL;
  }

      goto LABEL_37;
    }

    if (!v39)
    {
      __nwlog_obj();
      os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v36 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v42 = "-[NWConcrete_nw_endpoint_transform applyWithHandler:toChildren:]";
        _os_log_impl( &dword_181A5C000,  v15,  v36,  "%{public}s called with null applyBlock, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_36;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v33 = type;
    uint64_t v34 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v42 = "-[NWConcrete_nw_endpoint_transform applyWithHandler:toChildren:]";
        _os_log_impl(&dword_181A5C000, v15, v33, "%{public}s called with null applyBlock, no backtrace", buf, 0xCu);
      }

      goto LABEL_36;
    }

    if (v34)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v42 = "-[NWConcrete_nw_endpoint_transform applyWithHandler:toChildren:]";
      char v43 = 2082;
      os_log_type_t v44 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v15,  v33,  "%{public}s called with null applyBlock, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_60;
  }

  child_endpoint_handlers = (unsigned __int8 *)self->child_endpoint_handlers;
  v37[0] = MEMORY[0x1895F87A8];
  v37[1] = 3221225472LL;
  v37[2] = __64__NWConcrete_nw_endpoint_transform_applyWithHandler_toChildren___block_invoke;
  v37[3] = &unk_189BC8628;
  __int16 v38 = v7;
  BOOL v11 = nw_array_apply(child_endpoint_handlers, (uint64_t)v37);

LABEL_40:
  return v11;
}

        goto LABEL_37;
      }

      if (!v24)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_fillout_tcp_connection_info";
          _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s called with null info_ptr, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_fillout_tcp_connection_info";
          _os_log_impl(&dword_181A5C000, v9, v16, "%{public}s called with null info_ptr, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_fillout_tcp_connection_info";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s called with null info_ptr, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_connection_fillout_tcp_connection_info";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v24 = 0;
    if (__nwlog_fault(v8, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_fillout_tcp_connection_info";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null connection", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v24)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_fillout_tcp_connection_info";
          _os_log_impl( &dword_181A5C000,  v9,  v18,  "%{public}s called with null connection, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      os_log_type_t v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_connection_fillout_tcp_connection_info";
          _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_connection_fillout_tcp_connection_info";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null connection, dumping backtrace:%{public}s",  buf,  0x16u);
      }

  if (v9) {
    free(v9);
  }
}

  v297 = v296 != 0LL;
  if (!v296)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v31 = (id)gLogObj;
    *(_DWORD *)out = 136446210;
    *(void *)&out[4] = "nw_agent_read_message_on_queue";
    __int16 v32 = (void *)_os_log_send_and_compose_impl();

    v413[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault((const char *)v32, v413, &type))
    {
      if (v413[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v33 = (os_log_s *)(id)gLogObj;
        uint64_t v34 = v413[0];
        if (os_log_type_enabled(v33, (os_log_type_t)v413[0]))
        {
          *(_DWORD *)out = 136446210;
          *(void *)&out[4] = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_181A5C000, v33, v34, "%{public}s Failed to create agent client", out, 0xCu);
        }
      }

      else if (type)
      {
        os_log_type_t v71 = __nw_create_backtrace_string();
        if (v71)
        {
          v72 = (char *)v71;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __uint64_t v73 = (os_log_s *)(id)gLogObj;
          unint64_t v74 = v413[0];
          if (os_log_type_enabled(v73, (os_log_type_t)v413[0]))
          {
            *(_DWORD *)out = 136446466;
            *(void *)&out[4] = "nw_agent_read_message_on_queue";
            *(_WORD *)&out[12] = 2082;
            *(void *)&out[14] = v72;
            _os_log_impl( &dword_181A5C000,  v73,  v74,  "%{public}s Failed to create agent client, dumping backtrace:%{public}s",  out,  0x16u);
          }

          free(v72);
          if (!v32) {
            goto LABEL_178;
          }
LABEL_177:
          free(v32);
LABEL_178:
          v84 = (void *)v402[3];
          if (v84)
          {
            free(v84);
            v402[3] = 0LL;
          }

          goto LABEL_507;
        }

        __nwlog_obj();
        uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v83 = v413[0];
        if (os_log_type_enabled(v33, (os_log_type_t)v413[0]))
        {
          *(_DWORD *)out = 136446210;
          *(void *)&out[4] = "nw_agent_read_message_on_queue";
          _os_log_impl(&dword_181A5C000, v33, v83, "%{public}s Failed to create agent client, no backtrace", out, 0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v33 = (os_log_s *)(id)gLogObj;
        __uint64_t v76 = v413[0];
        if (os_log_type_enabled(v33, (os_log_type_t)v413[0]))
        {
          *(_DWORD *)out = 136446210;
          *(void *)&out[4] = "nw_agent_read_message_on_queue";
          _os_log_impl( &dword_181A5C000,  v33,  v76,  "%{public}s Failed to create agent client, backtrace limit exceeded",  out,  0xCu);
        }
      }
    }

    if (!v32) {
      goto LABEL_178;
    }
    goto LABEL_177;
  }

  __int16 v26 = v402[3];
  if (!v26)
  {
    __nwlog_obj();
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)out = 136446210;
    *(void *)&out[4] = "nw_agent_copy_group_members_for_message";
    v94 = (char *)_os_log_send_and_compose_impl();

    v413[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v94, v413, &type))
    {
      if (v413[0] == 17)
      {
        __nwlog_obj();
        v95 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v96 = v413[0];
        if (os_log_type_enabled(v95, (os_log_type_t)v413[0]))
        {
          *(_DWORD *)out = 136446210;
          *(void *)&out[4] = "nw_agent_copy_group_members_for_message";
          _os_log_impl(&dword_181A5C000, v95, v96, "%{public}s called with null message", out, 0xCu);
        }
      }

      else if (type)
      {
        os_log_type_t v100 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v95 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v101 = v413[0];
        os_log_type_t v102 = os_log_type_enabled(v95, (os_log_type_t)v413[0]);
        if (v100)
        {
          if (v102)
          {
            *(_DWORD *)out = 136446466;
            *(void *)&out[4] = "nw_agent_copy_group_members_for_message";
            *(_WORD *)&out[12] = 2082;
            *(void *)&out[14] = v100;
            _os_log_impl( &dword_181A5C000,  v95,  v101,  "%{public}s called with null message, dumping backtrace:%{public}s",  out,  0x16u);
          }

          free(v100);
          goto LABEL_244;
        }

        if (v102)
        {
          *(_DWORD *)out = 136446210;
          *(void *)&out[4] = "nw_agent_copy_group_members_for_message";
          _os_log_impl(&dword_181A5C000, v95, v101, "%{public}s called with null message, no backtrace", out, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v95 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        __uint64_t v110 = v413[0];
        if (os_log_type_enabled(v95, (os_log_type_t)v413[0]))
        {
          *(_DWORD *)out = 136446210;
          *(void *)&out[4] = "nw_agent_copy_group_members_for_message";
          _os_log_impl( &dword_181A5C000,  v95,  v110,  "%{public}s called with null message, backtrace limit exceeded",  out,  0xCu);
        }
      }
    }

        goto LABEL_37;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v22 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v26 = "nw_agent_create_with_path_override_info";
          _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s called with null queue, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v19 = type;
      os_log_type_t v20 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v26 = "nw_agent_create_with_path_override_info";
          _os_log_impl(&dword_181A5C000, v12, v19, "%{public}s called with null queue, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v26 = "nw_agent_create_with_path_override_info";
        os_log_type_t v27 = 2082;
        uint64_t v28 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v12,  v19,  "%{public}s called with null queue, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v26 = "nw_agent_create_with_path_override_info";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v23 = 0;
    if (__nwlog_fault(v11, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v26 = "nw_agent_create_with_path_override_info";
          _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null override_info", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v23)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v26 = "nw_agent_create_with_path_override_info";
          _os_log_impl( &dword_181A5C000,  v12,  v21,  "%{public}s called with null override_info, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v12, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v26 = "nw_agent_create_with_path_override_info";
          _os_log_impl(&dword_181A5C000, v12, v17, "%{public}s called with null override_info, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v26 = "nw_agent_create_with_path_override_info";
        os_log_type_t v27 = 2082;
        uint64_t v28 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null override_info, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_37;
      }

      if (!v21)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_agent_add_to_interface";
          _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null interface, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_agent_add_to_interface";
          _os_log_impl(&dword_181A5C000, v10, v17, "%{public}s called with null interface, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v24 = "nw_agent_add_to_interface";
        BOOL v25 = 2082;
        __int16 v26 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s called with null interface, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v24 = "nw_agent_add_to_interface";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_agent_add_to_interface";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null agent", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v21)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_agent_add_to_interface";
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null agent, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      os_log_type_t v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_agent_add_to_interface";
          _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null agent, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v24 = "nw_agent_add_to_interface";
        BOOL v25 = 2082;
        __int16 v26 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null agent, dumping backtrace:%{public}s",  buf,  0x16u);
      }

        goto LABEL_37;
      }

      if (!v21)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_agent_remove_from_interface";
          _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s called with null interface, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v17 = type;
      os_log_type_t v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_agent_remove_from_interface";
          _os_log_impl(&dword_181A5C000, v10, v17, "%{public}s called with null interface, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v24 = "nw_agent_remove_from_interface";
        BOOL v25 = 2082;
        __int16 v26 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s called with null interface, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_24;
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v24 = "nw_agent_remove_from_interface";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    os_log_type_t v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_agent_remove_from_interface";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null agent", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (!v21)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        BOOL v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_agent_remove_from_interface";
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null agent, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_36;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      os_log_type_t v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v24 = "nw_agent_remove_from_interface";
          _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null agent, no backtrace", buf, 0xCu);
        }

        goto LABEL_36;
      }

      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v24 = "nw_agent_remove_from_interface";
        BOOL v25 = 2082;
        __int16 v26 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null agent, dumping backtrace:%{public}s",  buf,  0x16u);
      }

    free(backtrace_string);
    goto LABEL_46;
  }

  os_log_type_t v15 = (os_log_s *)__nwlog_obj();
  os_log_type_t v16 = type;
  if (os_log_type_enabled(v15, type))
  {
    *(_DWORD *)buf = 136446210;
    BOOL v25 = "nw_log_ring_copyout";
    BOOL v17 = "%{public}s called with null bufferOut";
LABEL_45:
    _os_log_impl(&dword_181A5C000, v15, v16, v17, buf, 0xCu);
  }

    if (nw_http2_remove_from_protocol_table((uint64_t)v6, (uint64_t)a2))
    {
      nw_protocol_set_output_handler((uint64_t)a2, 0LL);
      if (!v8)
      {
        goto LABEL_39;
      }
    }

    else
    {
      if (!v8)
      {
        if ((*((__int16 *)v6 + 194) & 0x80000000) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          v94 = (os_log_s *)gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
          {
            v95 = *((_DWORD *)v6 + 92);
            *(_DWORD *)buf = 136447234;
            v106 = "nw_http2_remove_input_handler";
            v107 = 2082;
            v108 = v6 + 390;
            __int16 v109 = 2080;
            __uint64_t v110 = " ";
            __int16 v111 = 1024;
            uint64_t v112 = v95;
            __int16 v113 = 2048;
            *(void *)v114 = a2;
            _os_log_impl( &dword_181A5C000,  v94,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u> unable to remove protocol %p from protocol table",  buf,  0x30u);
          }
        }

        nw_protocol_set_output_handler((uint64_t)a2, 0LL);
        if (*((__int16 *)v6 + 194) < 0)
        {
LABEL_63:
          os_log_type_t v46 = *((void *)handle + 19);
          if (v46)
          {
            if ((*((_WORD *)handle + 194) & 0xC) == 0 && a1->default_input_handler == a2)
            {
              if ((*((_WORD *)handle + 194) & 0x8000) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                BOOL v47 = (os_log_s *)gconnectionLogObj;
                if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
                {
                  v48 = *((_DWORD *)handle + 92);
                  *(_DWORD *)buf = 136446978;
                  v106 = "nw_protocol_http2_remove_input_handler";
                  v107 = 2082;
                  v108 = handle + 390;
                  __int16 v109 = 2080;
                  __uint64_t v110 = " ";
                  __int16 v111 = 1024;
                  uint64_t v112 = v48;
                  _os_log_impl( &dword_181A5C000,  v47,  OS_LOG_TYPE_ERROR,  "%{public}s %{public}s%s<i%u> first input handler bailed, closing",  buf,  0x26u);
                }
              }

              *((_WORD *)handle + 194) |= 8u;
              nw_protocol_remove_instance((uint64_t)a1);
              nw_protocol_http2_notify((uint64_t)a1, (uint64_t)a1, 0x16u, 0LL, 0LL);
              os_log_type_t v46 = *((void *)handle + 19);
            }

            os_log_type_t v49 = nw_hash_table_count(v46, v25);
            os_log_type_t v51 = *((__int16 *)handle + 194) < 0 || *((_BYTE *)v5 + 1537) == 0;
            if (v49)
            {
              if (!v51)
              {
                v96 = v49;
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                os_log_type_t v97 = (os_log_s *)gconnectionLogObj;
                if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
                {
                  BOOL v98 = *((_DWORD *)handle + 92);
                  *(_DWORD *)buf = 136447234;
                  v106 = "nw_protocol_http2_remove_input_handler";
                  v107 = 2082;
                  v108 = handle + 390;
                  __int16 v109 = 2080;
                  __uint64_t v110 = " ";
                  __int16 v111 = 1024;
                  uint64_t v112 = v98;
                  __int16 v113 = 1024;
                  *(_DWORD *)v114 = v96;
                  _os_log_impl( &dword_181A5C000,  v97,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> not destroying, still have %u input handlers",  buf,  0x2Cu);
                }
              }

              if (a1->default_input_handler == a2)
              {
                nw_protocol_set_input_handler((uint64_t)a1, 0LL);
                BOOL v52 = (char *)*((void *)handle + 19);
                v101[0] = MEMORY[0x1895F87A8];
                v101[1] = 0x40000000LL;
                v101[2] = ___ZL38nw_protocol_http2_remove_input_handlerP11nw_protocolS0_b_block_invoke_56;
                v101[3] = &__block_descriptor_tmp_57_83300;
                v101[4] = a1;
                v101[5] = handle;
                nw_hash_table_apply(v52, (uint64_t)v101);
              }
            }

            else
            {
              if (!v51)
              {
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                v99 = (os_log_s *)gconnectionLogObj;
                if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
                {
                  os_log_type_t v100 = *((_DWORD *)handle + 92);
                  *(_DWORD *)buf = 136446978;
                  v106 = "nw_protocol_http2_remove_input_handler";
                  v107 = 2082;
                  v108 = handle + 390;
                  __int16 v109 = 2080;
                  __uint64_t v110 = " ";
                  __int16 v111 = 1024;
                  uint64_t v112 = v100;
                  _os_log_impl( &dword_181A5C000,  v99,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> no more input handlers, scheduling destroy",  buf,  0x26u);
                }
              }

              nw_protocol_set_input_handler((uint64_t)a1, 0LL);
              nw_frame_cache_remove_all((uint64_t *)handle + 25);
              __int16 v60 = *((void *)handle + 11);
              if (v60) {
                nw_queue_cancel_source(v60, v59);
              }
              v102[0] = MEMORY[0x1895F87A8];
              v102[1] = 0x40000000LL;
              v102[2] = ___ZL38nw_protocol_http2_remove_input_handlerP11nw_protocolS0_b_block_invoke;
              v102[3] = &__block_descriptor_tmp_55_83297;
              v102[4] = a1;
              *((void *)handle + 11) = nw_queue_context_create_source(0LL, 2, 3, 0, v102, 0LL);
              char v61 = *((void *)handle + 10);
              if (!nw_protocol_http2_accept((uint64_t)a1))
              {
                if ((*((__int16 *)handle + 194) & 0x80000000) == 0)
                {
                  if (__nwlog_connection_log::onceToken != -1) {
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                  }
                  __int16 v62 = (os_log_s *)gconnectionLogObj;
                  if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO))
                  {
                    int v63 = *((_DWORD *)handle + 92);
                    *(_DWORD *)buf = 136446978;
                    v106 = "nw_protocol_http2_remove_input_handler";
                    v107 = 2082;
                    v108 = handle + 390;
                    __int16 v109 = 2080;
                    __uint64_t v110 = " ";
                    __int16 v111 = 1024;
                    uint64_t v112 = v63;
                    _os_log_impl( &dword_181A5C000,  v62,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u> cannot accept input handlers, destroying immediately",  buf,  0x26u);
                  }
                }

                char v61 = 0LL;
              }

              uint64_t v64 = *((void *)handle + 11);
              id v65 = dispatch_time(0x8000000000000000LL, 1000000 * v61);
              nw_queue_set_timer_values(v64, v65, 0xFFFFFFFFFFFFFFFFLL, 1000 * v61);
              nw_queue_activate_source(*((void *)handle + 11), v66);
            }

            return 1LL;
          }

          if ((*((_WORD *)handle + 194) & 0x8000) != 0) {
            return 0LL;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          os_log_type_t v53 = *((_DWORD *)handle + 92);
          *(_DWORD *)buf = 136447234;
          v106 = "nw_protocol_http2_remove_input_handler";
          v107 = 2082;
          v108 = handle + 390;
          __int16 v109 = 2080;
          __uint64_t v110 = " ";
          __int16 v111 = 1024;
          uint64_t v112 = v53;
          __int16 v113 = 2048;
          *(void *)v114 = a2;
          os_log_type_t v54 = (const char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          os_log_type_t v103 = 0;
          if (__nwlog_fault(v54, &type, &v103))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              os_log_type_t v55 = (os_log_s *)gconnectionLogObj;
              char v56 = type;
              if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
              {
                os_log_type_t v57 = *((_DWORD *)handle + 92);
                *(_DWORD *)buf = 136447234;
                v106 = "nw_protocol_http2_remove_input_handler";
                v107 = 2082;
                v108 = handle + 390;
                __int16 v109 = 2080;
                __uint64_t v110 = " ";
                __int16 v111 = 1024;
                uint64_t v112 = v57;
                __int16 v113 = 2048;
                *(void *)v114 = a2;
                os_log_type_t v58 = "%{public}s %{public}s%s<i%u> http2_streams_protocol NULL when removing input handler %p";
LABEL_116:
                _os_log_impl(&dword_181A5C000, v55, v56, v58, buf, 0x30u);
              }
            }

            else if (v103)
            {
              os_log_type_t v67 = (char *)__nw_create_backtrace_string();
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              os_log_type_t v55 = (os_log_s *)gconnectionLogObj;
              char v56 = type;
              __int16 v68 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
              if (!v67)
              {
                if (!v68) {
                  goto LABEL_117;
                }
                os_log_type_t v71 = *((_DWORD *)handle + 92);
                *(_DWORD *)buf = 136447234;
                v106 = "nw_protocol_http2_remove_input_handler";
                v107 = 2082;
                v108 = handle + 390;
                __int16 v109 = 2080;
                __uint64_t v110 = " ";
                __int16 v111 = 1024;
                uint64_t v112 = v71;
                __int16 v113 = 2048;
                *(void *)v114 = a2;
                os_log_type_t v58 = "%{public}s %{public}s%s<i%u> http2_streams_protocol NULL when removing input handler %p, no backtrace";
                goto LABEL_116;
              }

              if (v68)
              {
                v69 = *((_DWORD *)handle + 92);
                *(_DWORD *)buf = 136447490;
                v106 = "nw_protocol_http2_remove_input_handler";
                v107 = 2082;
                v108 = handle + 390;
                __int16 v109 = 2080;
                __uint64_t v110 = " ";
                __int16 v111 = 1024;
                uint64_t v112 = v69;
                __int16 v113 = 2048;
                *(void *)v114 = a2;
                *(_WORD *)&v114[8] = 2082;
                *(void *)&v114[10] = v67;
                _os_log_impl( &dword_181A5C000,  v55,  v56,  "%{public}s %{public}s%s<i%u> http2_streams_protocol NULL when removing input handler %p, dumping backtrace:%{public}s",  buf,  0x3Au);
              }

              free(v67);
            }

            else
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              os_log_type_t v55 = (os_log_s *)gconnectionLogObj;
              char v56 = type;
              if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
              {
                uint64_t v70 = *((_DWORD *)handle + 92);
                *(_DWORD *)buf = 136447234;
                v106 = "nw_protocol_http2_remove_input_handler";
                v107 = 2082;
                v108 = handle + 390;
                __int16 v109 = 2080;
                __uint64_t v110 = " ";
                __int16 v111 = 1024;
                uint64_t v112 = v70;
                __int16 v113 = 2048;
                *(void *)v114 = a2;
                os_log_type_t v58 = "%{public}s %{public}s%s<i%u> http2_streams_protocol NULL when removing input handler %p, backtrace limit exceeded";
                goto LABEL_116;
              }
            }
          }

    if (v9) {
      free(v9);
    }
    return 0xFFFFFFFFLL;
  }

  if (!(a6 + a4))
  {
    os_log_type_t v18 = 0LL;
    goto LABEL_21;
  }

  BOOL v17 = (char *)malloc(a6 + a4);
  os_log_type_t v18 = v17;
  if (v17)
  {
    if (a3) {
      goto LABEL_10;
    }
    goto LABEL_12;
  }

  int v31 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v31, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  BOOL v36 = "strict_malloc";
  os_log_type_t v37 = 2048;
  *(void *)__int16 v38 = v8;
  __int16 v32 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v32);
  if (!(_DWORD)result)
  {
    free(v32);
    BOOL v17 = 0LL;
    if (a3)
    {
LABEL_10:
      BOOL v17 = v18;
      if (a4)
      {
        memcpy(v18, a3, a4);
        BOOL v17 = &v18[a4];
      }
    }

    if (v19) {
      free(v19);
    }
    return 2LL;
  }

  BOOL v17 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  int v31 = "strict_calloc";
  __int16 v32 = 2048;
  uint64_t v33 = 1LL;
  uint64_t v34 = 2048;
  os_log_type_t v35 = 24LL;
  os_log_type_t v18 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v18);
  if (!(_DWORD)result)
  {
    free(v18);
    goto LABEL_2;
  }

  __break(1u);
  return result;
}

  char v22 = a2->handle;
  uint64_t v23 = v22 == &nw_protocol_ref_counted_handle;
  if (v22 == &nw_protocol_ref_counted_handle)
  {
    os_log_type_t v24 = a2[1].callbacks;
    if (v24) {
      a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v24->add_input_handler + 1);
    }
  }

      if (!v14) {
        return 0LL;
      }
LABEL_37:
      free(v14);
      return 0LL;
    }

    BOOL v36 = *(void *)(a1 + 40);
    if (v36 && (*(_BYTE *)(v36 + 158) & 1) != 0) {
      return 0LL;
    }
    __nwlog_obj();
    os_log_type_t v37 = *(void *)(a1 + 40);
    __int16 v38 = (const char *)(v37 + 159);
    if (!v37) {
      __int16 v38 = "";
    }
    os_log_type_t v39 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
    if (v37) {
      os_log_type_t v40 = " ";
    }
    else {
      os_log_type_t v40 = "";
    }
    os_log_type_t v41 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)buf = 136447490;
    v69 = "nw_protocol_ipv6_append_reassembled_packets_block_invoke";
    uint64_t v70 = 2082;
    os_log_type_t v71 = v38;
    v72 = 2080;
    __uint64_t v73 = v40;
    unint64_t v74 = 2048;
    char v75 = v37;
    __uint64_t v76 = 1024;
    v77 = __n[0] + v39;
    unint64_t v78 = 1024;
    char v79 = v41;
    os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    uint64_t v64 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_36;
      }
      os_log_type_t v42 = *(void *)(a1 + 40);
      char v43 = (const char *)(v42 + 159);
      if (v42)
      {
        os_log_type_t v44 = " ";
      }

      else
      {
        char v43 = "";
        os_log_type_t v44 = "";
      }

      os_log_type_t v45 = __n[0] + *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
      os_log_type_t v46 = *(_DWORD *)(a1 + 56);
      *(_DWORD *)buf = 136447490;
      v69 = "nw_protocol_ipv6_append_reassembled_packets_block_invoke";
      uint64_t v70 = 2082;
      os_log_type_t v71 = v43;
      v72 = 2080;
      __uint64_t v73 = v44;
      unint64_t v74 = 2048;
      char v75 = v42;
      __uint64_t v76 = 1024;
      v77 = v45;
      unint64_t v78 = 1024;
      char v79 = v46;
      os_log_type_t v21 = "%{public}s %{public}s%s%p Invalid IP reassembly frame (total length %u > %u)";
    }

    else if (v64)
    {
      BOOL v47 = (char *)__nw_create_backtrace_string();
      os_log_type_t v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      v48 = os_log_type_enabled(v15, type);
      if (v47)
      {
        if (v48)
        {
          os_log_type_t v49 = *(void *)(a1 + 40);
          BOOL v50 = (const char *)(v49 + 159);
          if (v49)
          {
            os_log_type_t v51 = " ";
          }

          else
          {
            BOOL v50 = "";
            os_log_type_t v51 = "";
          }

          BOOL v52 = __n[0] + *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
          os_log_type_t v53 = *(_DWORD *)(a1 + 56);
          *(_DWORD *)buf = 136447746;
          v69 = "nw_protocol_ipv6_append_reassembled_packets_block_invoke";
          uint64_t v70 = 2082;
          os_log_type_t v71 = v50;
          v72 = 2080;
          __uint64_t v73 = v51;
          unint64_t v74 = 2048;
          char v75 = v49;
          __uint64_t v76 = 1024;
          v77 = v52;
          unint64_t v78 = 1024;
          char v79 = v53;
          v80 = 2082;
          v81 = v47;
          _os_log_impl( &dword_181A5C000,  v15,  v16,  "%{public}s %{public}s%s%p Invalid IP reassembly frame (total length %u > %u), dumping backtrace:%{public}s",  buf,  0x40u);
        }

        free(v47);
        if (!v14) {
          return 0LL;
        }
        goto LABEL_37;
      }

      if (!v48) {
        goto LABEL_36;
      }
      os_log_type_t v59 = *(void *)(a1 + 40);
      __int16 v60 = (const char *)(v59 + 159);
      if (v59)
      {
        char v61 = " ";
      }

      else
      {
        __int16 v60 = "";
        char v61 = "";
      }

      __int16 v62 = __n[0] + *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
      int v63 = *(_DWORD *)(a1 + 56);
      *(_DWORD *)buf = 136447490;
      v69 = "nw_protocol_ipv6_append_reassembled_packets_block_invoke";
      uint64_t v70 = 2082;
      os_log_type_t v71 = v60;
      v72 = 2080;
      __uint64_t v73 = v61;
      unint64_t v74 = 2048;
      char v75 = v59;
      __uint64_t v76 = 1024;
      v77 = v62;
      unint64_t v78 = 1024;
      char v79 = v63;
      os_log_type_t v21 = "%{public}s %{public}s%s%p Invalid IP reassembly frame (total length %u > %u), no backtrace";
    }

    else
    {
      os_log_type_t v15 = (os_log_s *)__nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_36;
      }
      os_log_type_t v54 = *(void *)(a1 + 40);
      os_log_type_t v55 = (const char *)(v54 + 159);
      if (v54)
      {
        char v56 = " ";
      }

      else
      {
        os_log_type_t v55 = "";
        char v56 = "";
      }

      os_log_type_t v57 = __n[0] + *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
      os_log_type_t v58 = *(_DWORD *)(a1 + 56);
      *(_DWORD *)buf = 136447490;
      v69 = "nw_protocol_ipv6_append_reassembled_packets_block_invoke";
      uint64_t v70 = 2082;
      os_log_type_t v71 = v55;
      v72 = 2080;
      __uint64_t v73 = v56;
      unint64_t v74 = 2048;
      char v75 = v54;
      __uint64_t v76 = 1024;
      v77 = v57;
      unint64_t v78 = 1024;
      char v79 = v58;
      os_log_type_t v21 = "%{public}s %{public}s%s%p Invalid IP reassembly frame (total length %u > %u), backtrace limit exceeded";
    }

    if (!v17) {
      return 0LL;
    }
    os_log_type_t v27 = (char *)v17;
LABEL_38:
    free(v27);
    return 0LL;
  }

  *(void *)os_log_type_t type = 0LL;
  v77 = type;
  node = nw_hash_table_get_node(handle[35], (uint64_t)a2, 16LL);
  if (!node)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v80 = "nw_channel_replace_input_handler";
    uint64_t v23 = (const char *)_os_log_send_and_compose_impl();
    unint64_t v78 = OS_LOG_TYPE_ERROR;
    char v75 = OS_LOG_TYPE_DEFAULT;
    if (v78 == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v24 = (os_log_s *)gLogObj;
      BOOL v25 = v78;
      if (os_log_type_enabled((os_log_t)gLogObj, v78))
      {
        *(_DWORD *)buf = 136446210;
        v80 = "nw_channel_replace_input_handler";
        __int16 v26 = "%{public}s nw_hash_table_get_node failed";
LABEL_109:
        _os_log_impl(&dword_181A5C000, v24, v25, v26, buf, 0xCu);
        goto LABEL_110;
      }

      goto LABEL_110;
    }

    if (v75 == OS_LOG_TYPE_DEFAULT)
    {
      os_log_type_t v24 = (os_log_s *)__nwlog_obj();
      BOOL v25 = v78;
      if (os_log_type_enabled(v24, v78))
      {
        *(_DWORD *)buf = 136446210;
        v80 = "nw_channel_replace_input_handler";
        __int16 v26 = "%{public}s nw_hash_table_get_node failed, backtrace limit exceeded";
        goto LABEL_109;
      }