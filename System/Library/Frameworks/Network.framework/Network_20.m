void ___ZL34nw_protocol_http3_stream_connectedP11nw_protocolS0__block_invoke_131(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  os_log_s *v5;
  uint64_t v6;
  const char *v7;
  const char *v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  int v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  v24 = *MEMORY[0x1895F89C0];
  v4 = *(void *)(a1 + 32);
  if (!v4 || (*(_WORD *)(v4 + 736) & 0x800) == 0)
  {
    if (__nwlog_http_log::onceToken != -1) {
      dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
    }
    v5 = (os_log_s *)ghttpLogObj;
    if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_INFO))
    {
      v6 = *(void *)(a1 + 32);
      v7 = (const char *)(v6 + 636);
      v8 = "";
      v9 = v6 == 0;
      if (!v6) {
        v7 = "";
      }
      v10 = *(_DWORD *)(*(void *)(v6 + 336) + 1280LL);
      v11 = *(void *)(v6 + 240);
      if (!v9) {
        v8 = " ";
      }
      v12 = 136447490;
      v13 = "nw_protocol_http3_stream_connected_block_invoke";
      v14 = 2082;
      v15 = v7;
      v16 = 2080;
      v17 = v8;
      v18 = 1024;
      v19 = v10;
      v20 = 2048;
      v21 = v11;
      v22 = 2082;
      v23 = a2;
      _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u:s%llu> receiving request header {method=%{public}s}",  (uint8_t *)&v12,  0x3Au);
    }
  }

void ___ZL34nw_protocol_http3_stream_connectedP11nw_protocolS0__block_invoke_133( uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v66 = *MEMORY[0x1895F89C0];
  int start_reason = nw_http_transaction_metadata_get_start_reason(*(void **)(a1 + 32));
  uint64_t start_time = nw_http_transaction_metadata_get_start_time(*(void **)(a1 + 32));
  uint64_t end_time = nw_http_transaction_metadata_get_end_time(*(void **)(a1 + 32));
  outbound_message_uint64_t start_time = nw_http_transaction_metadata_get_outbound_message_start_time(*(void **)(a1 + 32));
  outbound_message_uint64_t end_time = nw_http_transaction_metadata_get_outbound_message_end_time(*(void **)(a1 + 32));
  inbound_message_uint64_t start_time = nw_http_transaction_metadata_get_inbound_message_start_time(*(void **)(a1 + 32));
  inbound_message_uint64_t end_time = nw_http_transaction_metadata_get_inbound_message_end_time(*(void **)(a1 + 32));
  uint64_t outbound_body_size = nw_http_transaction_metadata_get_outbound_body_size(*(void **)(a1 + 32));
  uint64_t inbound_body_size = nw_http_transaction_metadata_get_inbound_body_size(*(void **)(a1 + 32));
  uint64_t v12 = *(void *)(a1 + 40);
  if (!v12 || (*(_WORD *)(v12 + 736) & 0x800) == 0)
  {
    if (__nwlog_http_log::onceToken != -1) {
      dispatch_once(&__nwlog_http_log::onceToken, &__block_literal_global_30_44335);
    }
    v13 = (os_log_s *)ghttpLogObj;
    if (os_log_type_enabled((os_log_t)ghttpLogObj, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(a1 + 40);
      if (v14) {
        v15 = (const char *)(v14 + 636);
      }
      else {
        v15 = "";
      }
      if (v14) {
        v16 = " ";
      }
      else {
        v16 = "";
      }
      v31 = v15;
      v32 = v16;
      else {
        v17 = off_189BC6838[start_reason - 1];
      }
      v28 = v17;
      int v29 = *(_DWORD *)(*(void *)(v14 + 336) + 1280LL);
      uint64_t v30 = *(void *)(v14 + 240);
      int v18 = -1;
      if (start_time && end_time)
      {
        unint64_t v19 = nw_delta_nanos(start_time, end_time);
        if (v19 > 0xF423FFFFFFFFFLL) {
          int v18 = -1;
        }
        else {
          int v18 = v19 / 0xF4240;
        }
      }

      int v20 = -1;
      if (start_time && outbound_message_start_time)
      {
        unint64_t v21 = nw_delta_nanos(start_time, outbound_message_start_time);
        if (v21 > 0xF423FFFFFFFFFLL) {
          int v20 = -1;
        }
        else {
          int v20 = v21 / 0xF4240;
        }
      }

      int v22 = -1;
      if (outbound_message_start_time && outbound_message_end_time)
      {
        unint64_t v23 = nw_delta_nanos(outbound_message_start_time, outbound_message_end_time);
        if (v23 > 0xF423FFFFFFFFFLL) {
          int v22 = -1;
        }
        else {
          int v22 = v23 / 0xF4240;
        }
      }

      int v24 = -1;
      if (start_time && inbound_message_start_time)
      {
        unint64_t v25 = nw_delta_nanos(start_time, inbound_message_start_time);
        if (v25 > 0xF423FFFFFFFFFLL) {
          int v24 = -1;
        }
        else {
          int v24 = v25 / 0xF4240;
        }
      }

      LODWORD(v26) = -1;
      if (inbound_message_start_time && inbound_message_end_time)
      {
        unint64_t v27 = nw_delta_nanos(inbound_message_start_time, inbound_message_end_time);
        unint64_t v26 = v27 / 0xF4240;
        if (v27 > 0xF423FFFFFFFFFLL) {
          LODWORD(v26) = -1;
        }
      }

      *(_DWORD *)buf = 136449794;
      v37 = "nw_protocol_http3_stream_connected_block_invoke";
      __int16 v38 = 2082;
      v39 = v31;
      __int16 v40 = 2080;
      v41 = v32;
      __int16 v42 = 1024;
      int v43 = v29;
      __int16 v44 = 2048;
      uint64_t v45 = v30;
      __int16 v46 = 2080;
      v47 = v28;
      __int16 v48 = 1024;
      int v49 = v18;
      __int16 v50 = 2082;
      uint64_t v51 = a2;
      __int16 v52 = 1024;
      int v53 = a3;
      __int16 v54 = 1024;
      int v55 = v20;
      __int16 v56 = 1024;
      int v57 = v22;
      __int16 v58 = 1024;
      int v59 = v24;
      __int16 v60 = 1024;
      int v61 = v26;
      __int16 v62 = 2048;
      uint64_t v63 = outbound_body_size;
      __int16 v64 = 2048;
      uint64_t v65 = inbound_body_size;
      _os_log_impl( &dword_181A5C000,  v13,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}s%s<i%u:s%llu> transaction summary {start_reason=%s, duration_ms=%d, request_method=%{ public}s, response_status=%hu, outbound_start_ms=%d, outbound_duration_ms=%d, inbound_start_ms=%d, inbound_dur ation_ms=%d, outbound_body_bytes=%llu, inbound_body_bytes=%llu}",  buf,  0x7Cu);
    }
  }

uint64_t ___ZL34nw_protocol_http3_stream_connectedP11nw_protocolS0__block_invoke_135(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  a2,  *(unsigned __int16 *)(a1 + 40));
}

uint64_t ___ZL28nw_http3_save_output_handlerP17nw_protocol_http3P11nw_protocol_block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  if (nw_protocol_metadata_is_quic_connection(a3)) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = a3;
  }
  return 1LL;
}

void nw_http3_setup_connection_if_needed(uint64_t a1)
{
  uint64_t v67 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    v2 = (unsigned __int16 *)(a1 + 1373);
    unsigned __int16 v3 = *(_WORD *)(a1 + 1373);
    if ((v3 & 0x800) != 0) {
      return;
    }
    if ((*(_WORD *)(a1 + 1373) & 0x400) == 0)
    {
      uint64_t v4 = *(void *)(a1 + 32);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 24);
        if (v5)
        {
          v6 = *(unsigned int (**)(void))(v5 + 232);
          if (v6)
          {
            if (v6()) {
              __int16 v7 = 1024;
            }
            else {
              __int16 v7 = 0;
            }
            unsigned __int16 v3 = *v2 & 0xFBFF | v7;
            unsigned __int16 *v2 = v3;
          }
        }
      }
    }

    if ((v3 & 0x20) != 0 && !uuid_is_null((const unsigned __int8 *)(a1 + 848)))
    {
      unint64_t v19 = *(void **)(a1 + 1112);
      if (v19)
      {
        *(void *)type = 0LL;
        BOOL v20 = nw_path_copy_token_from_agent(v19, (const unsigned __int8 *)(a1 + 848), type);
        if (v20)
        {
          unint64_t v21 = (int *)v20;
          if (((*v2 | (*((unsigned __int8 *)v2 + 2) << 16)) & 0x400000) == 0)
          {
            if (gLogDatapath)
            {
              int v59 = (os_log_s *)__nwlog_obj();
              if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
              {
                int v60 = *(_DWORD *)(a1 + 1280);
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "nw_http3_setup_connection_if_needed";
                *(_WORD *)&buf[12] = 2082;
                *(void *)&buf[14] = a1 + 1289;
                *(_WORD *)&buf[22] = 2080;
                __int16 v64 = " ";
                LOWORD(v65) = 1024;
                *(_DWORD *)((char *)&v65 + 2) = v60;
                _os_log_impl( &dword_181A5C000,  v59,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> received session to resume",  buf,  0x26u);
              }
            }
          }

          nw_http3_parse_resumable_session_data(a1, v21, *(unint64_t *)type);
          free(v21);
        }
      }
    }

    if ((*v2 & 0x61) == 0x20 && uuid_is_null((const unsigned __int8 *)(a1 + 848)))
    {
      if (nw_storage_copy_shared_token != -1) {
        dispatch_once(&nw_storage_copy_shared_token, &__block_literal_global_44978);
      }
      id v8 = (id)nw_storage_copy_shared_storage;
      v9 = *(void **)(a1 + 1096);
      if (v9) {
        v10 = os_retain(v9);
      }
      else {
        v10 = 0LL;
      }
      while (1)
      {
        int v22 = v10;
        id v23 = nw_endpoint_copy_parent_endpoint(v10);
        if (!v23) {
          break;
        }
        v10 = v23;
        if (v22) {
          os_release(v22);
        }
      }

      uint64_t v24 = *(void *)(a1 + 1040);
      unint64_t v25 = *(void **)(a1 + 1256);
      *(void *)buf = MEMORY[0x1895F87A8];
      *(void *)&buf[8] = 0x40000000LL;
      *(void *)&buf[16] = ___ZL32nw_http3_start_0rtt_state_lookupP17nw_protocol_http3_block_invoke;
      __int16 v64 = (const char *)&unk_189BC4500;
      uint64_t v65 = v24;
      nw_storage_lookup_items(v8, (uint64_t)"h3_0rtt", v10, v25, buf);
      if (v10) {
        os_release(v10);
      }
      if (v8) {
        os_release(v8);
      }
      return;
    }

    if (!*(void *)(a1 + 976))
    {
      uint64_t v11 = mach_continuous_approximate_time();
      if (v11 <= 1) {
        uint64_t v12 = 1LL;
      }
      else {
        uint64_t v12 = v11;
      }
      *(void *)(a1 + 976) = v12;
    }

    if (((*v2 | (*((unsigned __int8 *)v2 + 2) << 16)) & 0x400000) == 0)
    {
      if (gLogDatapath)
      {
        __int16 v42 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
        {
          int v43 = *(_DWORD *)(a1 + 1280);
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_http3_setup_connection_if_needed";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = a1 + 1289;
          *(_WORD *)&buf[22] = 2080;
          __int16 v64 = " ";
          LOWORD(v65) = 1024;
          *(_DWORD *)((char *)&v65 + 2) = v43;
          _os_log_impl( &dword_181A5C000,  v42,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> starting control stream",  buf,  0x26u);
        }
      }
    }

    *v2 |= 0x800u;
    if (!*(void *)(a1 + 1128))
    {
      *(void *)(a1 + 1128) = nw_http3_fix_quic_parameters(a1, *(void **)(a1 + 1120), 1, 1);
      if (((*v2 | (*((unsigned __int8 *)v2 + 2) << 16)) & 0x400000) == 0)
      {
        if (gLogDatapath)
        {
          uint64_t v45 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
          {
            int v46 = *(_DWORD *)(a1 + 1280);
            uint64_t v47 = *(void *)(a1 + 1128);
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_http3_setup_connection_if_needed";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = a1 + 1289;
            *(_WORD *)&buf[22] = 2080;
            __int16 v64 = " ";
            LOWORD(v65) = 1024;
            *(_DWORD *)((char *)&v65 + 2) = v46;
            HIWORD(v65) = 2048;
            uint64_t v66 = v47;
            _os_log_impl( &dword_181A5C000,  v45,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s%s<i%u> set up unidirectional parameters %p",  buf,  0x30u);
          }
        }
      }
    }

    uint64_t v13 = *(void *)(a1 + 32);
    if (v13)
    {
      uint64_t v14 = *(void (***)(void, uint64_t))(v13 + 24);
      if (v14)
      {
        v15 = *v14;
        if (v15)
        {
          v15(*(void *)(a1 + 32), a1);
          goto LABEL_33;
        }
      }

      __nwlog_obj();
      uint64_t v30 = *(const char **)(v13 + 16);
      if (!v30) {
        uint64_t v30 = "invalid";
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v30 = "invalid";
    }

    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_http3_setup_connection_if_needed";
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v30;
    v34 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v62 = 0;
    if (__nwlog_fault(v34, type, &v62))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        v35 = (os_log_s *)__nwlog_obj();
        os_log_type_t v36 = type[0];
        if (!os_log_type_enabled(v35, type[0])) {
          goto LABEL_99;
        }
        v37 = "invalid";
        if (v13 && *(void *)(v13 + 16)) {
          v37 = *(const char **)(v13 + 16);
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http3_setup_connection_if_needed";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v37;
        __int16 v38 = "%{public}s protocol %{public}s has invalid add_input_handler callback";
LABEL_98:
        _os_log_impl(&dword_181A5C000, v35, v36, v38, buf, 0x16u);
        goto LABEL_99;
      }

      if (!v62)
      {
        v35 = (os_log_s *)__nwlog_obj();
        os_log_type_t v36 = type[0];
        if (!os_log_type_enabled(v35, type[0])) {
          goto LABEL_99;
        }
        __int16 v44 = "invalid";
        if (v13 && *(void *)(v13 + 16)) {
          __int16 v44 = *(const char **)(v13 + 16);
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http3_setup_connection_if_needed";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v44;
        __int16 v38 = "%{public}s protocol %{public}s has invalid add_input_handler callback, backtrace limit exceeded";
        goto LABEL_98;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      v35 = (os_log_s *)__nwlog_obj();
      os_log_type_t v36 = type[0];
      BOOL v40 = os_log_type_enabled(v35, type[0]);
      if (!backtrace_string)
      {
        if (!v40) {
          goto LABEL_99;
        }
        __int16 v48 = "invalid";
        if (v13 && *(void *)(v13 + 16)) {
          __int16 v48 = *(const char **)(v13 + 16);
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http3_setup_connection_if_needed";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v48;
        __int16 v38 = "%{public}s protocol %{public}s has invalid add_input_handler callback, no backtrace";
        goto LABEL_98;
      }

      if (v40)
      {
        v41 = "invalid";
        if (v13 && *(void *)(v13 + 16)) {
          v41 = *(const char **)(v13 + 16);
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_http3_setup_connection_if_needed";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v41;
        *(_WORD *)&buf[22] = 2082;
        __int16 v64 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v35,  v36,  "%{public}s protocol %{public}s has invalid add_input_handler callback, dumping backtrace:%{public}s",  buf,  0x20u);
      }

      free(backtrace_string);
    }

void nw_http3_stream_connect_lower(uint64_t a1)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v38 = "nw_http3_stream_connect_lower";
    v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_53;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v38 = "nw_http3_stream_connect_lower";
      uint64_t v16 = "%{public}s called with null http3_stream";
    }

    else if (v35)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v25 = os_log_type_enabled(v17, type);
      if (backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v38 = "nw_http3_stream_connect_lower";
          __int16 v39 = 2082;
          BOOL v40 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v17,  v18,  "%{public}s called with null http3_stream, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (v10) {
          goto LABEL_54;
        }
        return;
      }

      if (!v25) {
        goto LABEL_53;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v38 = "nw_http3_stream_connect_lower";
      uint64_t v16 = "%{public}s called with null http3_stream, no backtrace";
    }

    else
    {
      v17 = (os_log_s *)__nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_53;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v38 = "nw_http3_stream_connect_lower";
      uint64_t v16 = "%{public}s called with null http3_stream, backtrace limit exceeded";
    }

    v32 = v17;
    os_log_type_t v33 = v18;
    uint32_t v34 = 12;
    goto LABEL_52;
  }

  int v2 = *(unsigned __int16 *)(a1 + 736);
  if ((v2 & 2) == 0) {
    return;
  }
  unsigned int v3 = v2 & 0xFFFFFFFD | (*(unsigned __int8 *)(a1 + 738) << 16);
  *(_WORD *)(a1 + 736) = v2 & 0xFFFD;
  *(_BYTE *)(a1 + 738) = BYTE2(v3);
  *(_DWORD *)(a1 + 368) = 1;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 24);
    if (v5)
    {
      v6 = *(void (**)(void))(v5 + 24);
      if (v6)
      {
        v6();
        return;
      }
    }
  }

  __nwlog_obj();
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = "invalid";
  if (v7)
  {
    v9 = *(const char **)(v7 + 16);
    if (v9) {
      id v8 = v9;
    }
  }

  *(_DWORD *)buf = 136446466;
  __int16 v38 = "nw_http3_stream_connect_lower";
  __int16 v39 = 2082;
  BOOL v40 = (void *)v8;
  v10 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v35 = 0;
  if (__nwlog_fault(v10, &type, &v35))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_53;
      }
      uint64_t v13 = *(void *)(a1 + 32);
      uint64_t v14 = "invalid";
      if (v13)
      {
        v15 = *(const char **)(v13 + 16);
        if (v15) {
          uint64_t v14 = v15;
        }
      }

      *(_DWORD *)buf = 136446466;
      __int16 v38 = "nw_http3_stream_connect_lower";
      __int16 v39 = 2082;
      BOOL v40 = (void *)v14;
      uint64_t v16 = "%{public}s protocol %{public}s has invalid connect callback";
LABEL_48:
      v32 = v11;
      os_log_type_t v33 = v12;
      uint32_t v34 = 22;
LABEL_52:
      _os_log_impl(&dword_181A5C000, v32, v33, v16, buf, v34);
      goto LABEL_53;
    }

    if (!v35)
    {
      uint64_t v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_53;
      }
      uint64_t v26 = *(void *)(a1 + 32);
      unint64_t v27 = "invalid";
      if (v26)
      {
        os_log_type_t v28 = *(const char **)(v26 + 16);
        if (v28) {
          unint64_t v27 = v28;
        }
      }

      *(_DWORD *)buf = 136446466;
      __int16 v38 = "nw_http3_stream_connect_lower";
      __int16 v39 = 2082;
      BOOL v40 = (void *)v27;
      uint64_t v16 = "%{public}s protocol %{public}s has invalid connect callback, backtrace limit exceeded";
      goto LABEL_48;
    }

    unint64_t v19 = (char *)__nw_create_backtrace_string();
    uint64_t v11 = (os_log_s *)__nwlog_obj();
    os_log_type_t v12 = type;
    BOOL v20 = os_log_type_enabled(v11, type);
    if (!v19)
    {
      if (!v20) {
        goto LABEL_53;
      }
      uint64_t v29 = *(void *)(a1 + 32);
      uint64_t v30 = "invalid";
      if (v29)
      {
        v31 = *(const char **)(v29 + 16);
        if (v31) {
          uint64_t v30 = v31;
        }
      }

      *(_DWORD *)buf = 136446466;
      __int16 v38 = "nw_http3_stream_connect_lower";
      __int16 v39 = 2082;
      BOOL v40 = (void *)v30;
      uint64_t v16 = "%{public}s protocol %{public}s has invalid connect callback, no backtrace";
      goto LABEL_48;
    }

    if (v20)
    {
      uint64_t v21 = *(void *)(a1 + 32);
      int v22 = "invalid";
      if (v21)
      {
        id v23 = *(const char **)(v21 + 16);
        if (v23) {
          int v22 = v23;
        }
      }

      *(_DWORD *)buf = 136446722;
      __int16 v38 = "nw_http3_stream_connect_lower";
      __int16 v39 = 2082;
      BOOL v40 = (void *)v22;
      __int16 v41 = 2082;
      __int16 v42 = v19;
      _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s protocol %{public}s has invalid connect callback, dumping backtrace:%{public}s",  buf,  0x20u);
    }

    free(v19);
  }

void nw_http3_parse_resumable_session_data(uint64_t a1, int *a2, unint64_t a3)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  if (!a2) {
    return;
  }
  if (a3 <= 0xF && ((*(unsigned __int16 *)(a1 + 1373) | (*(unsigned __int8 *)(a1 + 1375) << 16)) & 0x400000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      int v7 = *(_DWORD *)(a1 + 1280);
      int v25 = 136447234;
      uint64_t v26 = "nw_http3_parse_resumable_session_data";
      __int16 v27 = 2082;
      uint64_t v28 = a1 + 1289;
      __int16 v29 = 2080;
      uint64_t v30 = " ";
      __int16 v31 = 1024;
      int v32 = v7;
      __int16 v33 = 2048;
      unint64_t v34 = a3;
      _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s%s<i%u> Resumable session too short (%zu bytes)",  (uint8_t *)&v25,  0x30u);
    }
  }

  if (*a2 != 9685181)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v13 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO)) {
      return;
    }
    int v14 = *(_DWORD *)(a1 + 1280);
    int v15 = *a2;
    int v25 = 136447234;
    uint64_t v26 = "nw_http3_parse_resumable_session_data";
    __int16 v27 = 2082;
    uint64_t v28 = a1 + 1289;
    __int16 v29 = 2080;
    uint64_t v30 = " ";
    __int16 v31 = 1024;
    int v32 = v14;
    __int16 v33 = 1024;
    LODWORD(v34) = v15;
    uint64_t v16 = "%{public}s %{public}s%s<i%u> Unrecognized resumable session version %x";
    v17 = (os_log_s *)v13;
    os_log_type_t v18 = OS_LOG_TYPE_INFO;
    uint32_t v19 = 44;
LABEL_21:
    _os_log_impl(&dword_181A5C000, v17, v18, v16, (uint8_t *)&v25, v19);
    return;
  }

  size_t v8 = a2[1];
  if (v8 + a2[2] + a2[3] + 16 != a3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v20 = gLogObj;
    if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR)) {
      return;
    }
    int v21 = *(_DWORD *)(a1 + 1280);
    int v22 = a2[1];
    int v23 = a2[2];
    int v24 = a2[3];
    int v25 = 136448258;
    uint64_t v26 = "nw_http3_parse_resumable_session_data";
    __int16 v27 = 2082;
    uint64_t v28 = a1 + 1289;
    __int16 v29 = 2080;
    uint64_t v30 = " ";
    __int16 v31 = 1024;
    int v32 = v21;
    __int16 v33 = 2048;
    unint64_t v34 = a3;
    __int16 v35 = 2048;
    uint64_t v36 = 16LL;
    __int16 v37 = 1024;
    int v38 = v22;
    __int16 v39 = 1024;
    int v40 = v23;
    __int16 v41 = 1024;
    int v42 = v24;
    uint64_t v16 = "%{public}s %{public}s%s<i%u> Invalid resumable session length (%zu != %zu+%u+%u+%u)";
    v17 = (os_log_s *)v20;
    os_log_type_t v18 = OS_LOG_TYPE_ERROR;
    uint32_t v19 = 76;
    goto LABEL_21;
  }

  v9 = *(dispatch_object_s **)(a1 + 1152);
  if (v9)
  {
    dispatch_release(v9);
    *(void *)(a1 + 1152) = 0LL;
    size_t v8 = a2[1];
  }

  v10 = a2 + 4;
  *(void *)(a1 + 1152) = dispatch_data_create(a2 + 4, v8, 0LL, 0LL);
  uint64_t v11 = *(dispatch_object_s **)(a1 + 1136);
  if (v11)
  {
    dispatch_release(v11);
    *(void *)(a1 + 1136) = 0LL;
  }

  *(void *)(a1 + 1136) = dispatch_data_create((char *)v10 + a2[1], a2[2], 0LL, 0LL);
  os_log_type_t v12 = *(dispatch_object_s **)(a1 + 1144);
  if (v12)
  {
    dispatch_release(v12);
    *(void *)(a1 + 1144) = 0LL;
  }

  *(void *)(a1 + 1144) = dispatch_data_create( (char *)v10 + a2[1] + a2[2],  a2[3],  0LL,  0LL);
}

void ___ZL32nw_http3_start_0rtt_state_lookupP17nw_protocol_http3_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if (v3)
  {
    uint64_t v4 = v3;
    if (!a2 || *(void *)(a2 + 24) - *(void *)(a2 + 16) != 8LL)
    {
      *(_WORD *)(v3 + 1373) |= 0x40u;
      nw_http3_setup_connection_if_needed(v3);
      for (uint64_t i = *(void *)(v4 + 880); i; uint64_t i = *(void *)(i + 544))
        nw_http3_stream_connect_lower(i);
      goto LABEL_22;
    }

    uint64_t object_at_index = nw_array_get_object_at_index(a2, 0LL);
    if (object_at_index)
    {
      uint64_t v6 = object_at_index;
      if (*(void *)(object_at_index + 24) - *(void *)(object_at_index + 16) == 24LL)
      {
        int v7 = (dispatch_object_s *)nw_array_get_object_at_index(object_at_index, 0LL);
        size_t v8 = (dispatch_object_s *)nw_array_get_object_at_index(v6, 1uLL);
        uint64_t v9 = nw_array_get_object_at_index(v6, 2uLL);
        *(_WORD *)(v4 + 1373) |= 0x40u;
        if (v7)
        {
          if (v8)
          {
            v10 = (dispatch_object_s *)v9;
            if (v9)
            {
              uint64_t v11 = *(dispatch_object_s **)(v4 + 1152);
              if (v11) {
                dispatch_release(v11);
              }
              *(void *)(v4 + 1152) = v7;
              dispatch_retain(v7);
              os_log_type_t v12 = *(dispatch_object_s **)(v4 + 1136);
              if (v12) {
                dispatch_release(v12);
              }
              *(void *)(v4 + 1136) = v8;
              dispatch_retain(v8);
              uint64_t v13 = *(dispatch_object_s **)(v4 + 1144);
              if (v13) {
                dispatch_release(v13);
              }
              *(void *)(v4 + 1144) = v10;
              dispatch_retain(v10);
            }
          }
        }

        nw_http3_setup_connection_if_needed(v4);
        for (uint64_t j = *(void *)(v4 + 880); j; uint64_t j = *(void *)(j + 544))
          nw_http3_stream_connect_lower(j);
LABEL_22:
        nw_http3_signal_output_pending(v4, 0);
      }
    }
  }

BOOL nw_queue_target_dispatch_queue(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  v1 = a1;
  if (v1)
  {
    if (nw_context_copy_implicit_context::onceToken != -1) {
      dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
    }
    id v2 = (id)nw_context_copy_implicit_context::implicit_context;
    BOOL v3 = nw_context_copy_workloop(v2);

    dispatch_set_target_queue(v1, (dispatch_queue_t)v3);
    goto LABEL_5;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v16 = "nw_queue_target_dispatch_queue";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_queue_target_dispatch_queue";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null queue", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v16 = "nw_queue_target_dispatch_queue";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null queue, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_queue_target_dispatch_queue";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null queue, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_queue_target_dispatch_queue";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null queue, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823DB5B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_queue_register_dispatch_queue(void *a1)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v2 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    uint64_t v19 = "nw_queue_register_dispatch_queue";
    BOOL v3 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v4 = (os_log_s *)(id)gLogObj;
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v19 = "nw_queue_register_dispatch_queue";
        _os_log_impl(&dword_181A5C000, v4, v5, "%{public}s nw_queue_register_dispatch_queue is deprecated", buf, 0xCu);
      }

void nw_queue_async(void *a1)
{
  dispatch_block_t block = a1;
  if (nw_context_copy_implicit_context::onceToken != -1) {
    dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
  }
  id v1 = (id)nw_context_copy_implicit_context::implicit_context;
  BOOL v2 = nw_context_copy_workloop(v1);

  dispatch_async((dispatch_queue_t)v2, block);
}

void sub_1823DBB18( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void nw_queue_async_current(void *a1)
{
  dispatch_block_t block = a1;
  BOOL v1 = nw_queue_copy_current_workloop();
  dispatch_async((dispatch_queue_t)v1, block);
}

BOOL nw_queue_create_source(int a1, int a2, unsigned int a3, void *a4, void *a5)
{
  id v9 = a4;
  id v10 = a5;
  if (nw_context_copy_implicit_context::onceToken != -1) {
    dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
  }
  id v11 = (id)nw_context_copy_implicit_context::implicit_context;
  BOOL source = nw_queue_context_create_source(v11, a1, a2, a3, v9, v10);

  return source;
}

void sub_1823DBC1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

dispatch_source_s *nw_queue_source_get_data(dispatch_source_s **a1)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    result = *a1;
    if (result) {
      return (dispatch_source_s *)dispatch_source_get_data(result);
    }
    return result;
  }

  __nwlog_obj();
  BOOL v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v12 = "nw_queue_source_get_data";
  BOOL v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v12 = "nw_queue_source_get_data";
        uint64_t v6 = "%{public}s called with null source";
LABEL_18:
        _os_log_impl(&dword_181A5C000, v4, v5, v6, buf, 0xCu);
      }
    }

    else
    {
      if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v5 = type;
        BOOL v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v12 = "nw_queue_source_get_data";
            __int16 v13 = 2082;
            BOOL v14 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null source, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }

        if (!v8) {
          goto LABEL_19;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v12 = "nw_queue_source_get_data";
        uint64_t v6 = "%{public}s called with null source, no backtrace";
        goto LABEL_18;
      }

      __nwlog_obj();
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v12 = "nw_queue_source_get_data";
        uint64_t v6 = "%{public}s called with null source, backtrace limit exceeded";
        goto LABEL_18;
      }
    }

void nw_queue_source_run_timer(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  if (*(void *)(a1 + 16))
  {
    if (*(void *)(a1 + 40) == -1LL)
    {
      nw_context_reset_timer_block_with_time(*(void *)(a1 + 8), a1, *(void *)(a1 + 32));
    }

    else
    {
      BOOL v3 = _Block_copy(*(const void **)(a1 + 16));
      uint64_t v4 = *(void *)(a1 + 8);
      uint64_t v5 = *(void *)(a1 + 32);
      BOOL v8 = v3;
      id v6 = v3;
      nw_context_reset_timer_block_with_time(v4, a1, v5);
    }
  }

  else if (gLogDatapath)
  {
    __nwlog_obj(a1, a2);
    os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      id v10 = "nw_queue_source_run_timer";
      _os_log_impl(&dword_181A5C000, v7, OS_LOG_TYPE_DEBUG, "%{public}s Cancelled, not running timer", buf, 0xCu);
    }
  }

void sub_1823DBFFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL25nw_queue_source_run_timerP15nw_queue_source_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int64_t v3 = *(void *)(v2 + 40);
  if (v3 == -1)
  {
    dispatch_time_t v4 = -1LL;
  }

  else
  {
    dispatch_time_t v4 = dispatch_time(0x8000000000000000LL, v3);
    uint64_t v2 = *(void *)(a1 + 40);
  }

  *(void *)(v2 + 32) = v4;
  return nw_queue_source_run_timer();
}

void __nw_queue_cancel_source_block_invoke(uint64_t a1)
{
  BOOL v1 = *(void **)(a1 + 32);
  if (v1) {
    free(v1);
  }
}

void nw_queue_source_set_qos_class_fallback(void *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if (*a1) {
      dispatch_set_qos_class_fallback();
    }
    return;
  }

  __nwlog_obj(0LL, a2);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v15 = "nw_queue_source_set_qos_class_fallback";
  int64_t v3 = (void *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  uint64_t v4 = __nwlog_fault(v3, &type, &v12);
  if ((_DWORD)v4)
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj(v4, v5);
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v15 = "nw_queue_source_set_qos_class_fallback";
        BOOL v8 = "%{public}s called with null source";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v6, v7, v8, buf, 0xCu);
      }
    }

    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj(backtrace_string, v10);
        id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v7 = type;
        BOOL v11 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v15 = "nw_queue_source_set_qos_class_fallback";
            __int16 v16 = 2082;
            __int16 v17 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null source, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }

        if (!v11) {
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v15 = "nw_queue_source_set_qos_class_fallback";
        BOOL v8 = "%{public}s called with null source, no backtrace";
        goto LABEL_17;
      }

      __nwlog_obj(v4, v5);
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v15 = "nw_queue_source_set_qos_class_fallback";
        BOOL v8 = "%{public}s called with null source, backtrace limit exceeded";
        goto LABEL_17;
      }
    }

uint64_t nw_hash_table_create_no_lock( unsigned int a1, int a2, const void *(*a3)(const void *, unsigned int *), unsigned int (*a4)(const void *, unsigned int), BOOL (*a5)(const void *, const void *, unsigned int), void (*a6)(void *))
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t result = nw_hash_table_create_internal(a1, a2, a3, a4, a5, a6);
    if (result) {
      *(_DWORD *)(result + 48) &= ~2u;
    }
    return result;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v16 = "nw_hash_table_create_no_lock";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v7, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_hash_table_create_no_lock";
        uint64_t v10 = "%{public}s called with null count";
LABEL_18:
        _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v16 = "nw_hash_table_create_no_lock";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null count, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_19;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_hash_table_create_no_lock";
        uint64_t v10 = "%{public}s called with null count, no backtrace";
        goto LABEL_18;
      }
    }

    else
    {
      BOOL v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v16 = "nw_hash_table_create_no_lock";
        uint64_t v10 = "%{public}s called with null count, backtrace limit exceeded";
        goto LABEL_18;
      }
    }
  }

BOOL nw_hash_table_create_internal( unsigned int a1, int a2, const void *(*a3)(const void *, unsigned int *), unsigned int (*a4)(const void *, unsigned int), BOOL (*a5)(const void *, const void *, unsigned int), void (*a6)(void *))
{
  BOOL v12 = (char *)calloc(1uLL, 16LL * a1 + 56);
  if (v12)
  {
LABEL_2:
    *((_DWORD *)v12 + 8) = a1;
    *((_DWORD *)v12 + 9) = a2;
    *(void *)BOOL v12 = a3;
    *((void *)v12 + 1) = a4;
    *((void *)v12 + 2) = a5;
    *((void *)v12 + 3) = a6;
    *((void *)v12 + 6) = *((_DWORD *)v12 + 12) | 3u;
    if (a1 >= 4)
    {
      BOOL v14 = (double *)(v12 + 56);
      uint64_t v13 = a1 & 0xFFFFFFFC;
      __int128 v15 = 0uLL;
      uint64_t v16 = v13;
      do
      {
        __int16 v17 = v14;
        uint64_t v18 = v14 + 2;
        *(void *)&float64_t v19 = v14 + 6;
        __int16 v20 = v14 + 8;
        vst2q_f64(v14, *(float64x2x2_t *)&v15);
        int v21 = v14 + 4;
        *(void *)&v27.val[1].f64[0] = v21;
        v27.val[1].f64[1] = v19;
        v27.val[0] = 0uLL;
        vst2q_f64(v21, v27);
        BOOL v14 = v20;
        v16 -= 4LL;
      }

      while (v16);
      if (v13 == a1) {
        return (BOOL)v12;
      }
    }

    else
    {
      uint64_t v13 = 0LL;
    }

    uint64_t v22 = a1 - v13;
    int v23 = &v12[16 * v13 + 56];
    do
    {
      *(void *)int v23 = 0LL;
      *((void *)v23 + 1) = v23;
      v23 += 16;
      --v22;
    }

    while (v22);
    return (BOOL)v12;
  }

  int v25 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
  uint64_t v26 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v26);
  if (!result)
  {
    free(v26);
    goto LABEL_2;
  }

  __break(1u);
  return result;
}

BOOL nw_hash_table_create_with_lock( unsigned int a1, int a2, const void *(*a3)(const void *, unsigned int *), unsigned int (*a4)(const void *, unsigned int), BOOL (*a5)(const void *, const void *, unsigned int), void (*a6)(void *))
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (a1) {
    return nw_hash_table_create_internal(a1, a2, a3, a4, a5, a6);
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v16 = "nw_hash_table_create_with_lock";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v7, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_hash_table_create_with_lock";
        uint64_t v10 = "%{public}s called with null count";
LABEL_16:
        _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v16 = "nw_hash_table_create_with_lock";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null count, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_17;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_hash_table_create_with_lock";
        uint64_t v10 = "%{public}s called with null count, no backtrace";
        goto LABEL_16;
      }
    }

    else
    {
      BOOL v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_hash_table_create_with_lock";
        uint64_t v10 = "%{public}s called with null count, backtrace limit exceeded";
        goto LABEL_16;
      }
    }
  }

BOOL ___ZL24__nw_signpost_is_enabledv_block_invoke_62615()
{
  BOOL result = networkd_settings_get_BOOL((const char *)nw_setting_enable_signposts);
  _nw_signposts_enabled = result;
  return result;
}

void nw_hash_node_free(uint64_t a1, void *a2)
{
  if (*((_BYTE *)a2 + 30) == 2)
  {
    uint64_t v4 = (void **)a2[1];
    if (!v4)
    {
LABEL_11:
      os_log_type_t v9 = (os_log_s *)__nwlog_obj(a1, a2);
      os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
      uint64_t v10 = (void *)_os_log_send_and_compose_impl();
      free(v10);
      if (!*((_WORD *)a2 + 14)) {
        goto LABEL_5;
      }
      goto LABEL_13;
    }
  }

  else
  {
    os_log_type_t v7 = (os_log_s *)__nwlog_obj(a1, a2);
    os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    BOOL v8 = (void *)_os_log_send_and_compose_impl();
    free(v8);
    uint64_t v4 = (void **)a2[1];
    if (!v4) {
      goto LABEL_11;
    }
  }

  if (*v4 != a2) {
    goto LABEL_11;
  }
  if (*((_WORD *)a2 + 14))
  {
LABEL_13:
    BOOL v11 = (os_log_s *)__nwlog_obj(a1, a2);
    os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    BOOL v12 = (void *)_os_log_send_and_compose_impl();
    if (!__nwlog_abort((uint64_t)v12))
    {
      free(v12);
      goto LABEL_5;
    }

void _nw_hash_table_release(os_unfair_lock_s *a1, uint64_t a2)
{
  if (a1[8]._os_unfair_lock_opaque)
  {
    uint32_t os_unfair_lock_opaque = a1[12]._os_unfair_lock_opaque;
    if ((os_unfair_lock_opaque & 2) == 0) {
      goto LABEL_3;
    }
  }

  else
  {
    id v6 = (os_log_s *)__nwlog_obj(v3, v4);
    os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    os_log_type_t v7 = (void *)_os_log_send_and_compose_impl();
    if (__nwlog_abort((uint64_t)v7))
    {
      __break(1u);
      return;
    }

    free(v7);
    uint32_t os_unfair_lock_opaque = a1[12]._os_unfair_lock_opaque;
    if ((os_unfair_lock_opaque & 2) == 0)
    {
LABEL_3:
      a1[12]._uint32_t os_unfair_lock_opaque = os_unfair_lock_opaque & 0xFFFFFFFE;
      if (a1[11]._os_unfair_lock_opaque) {
        return;
      }
      goto LABEL_10;
    }
  }

  os_unfair_lock_lock(a1 + 13);
  uint32_t v9 = a1[11]._os_unfair_lock_opaque;
  uint32_t v8 = a1[12]._os_unfair_lock_opaque;
  a1[12]._uint32_t os_unfair_lock_opaque = v8 & 0xFFFFFFFE;
  if ((v8 & 2) != 0) {
    os_unfair_lock_unlock(a1 + 13);
  }
  if (!v9) {
LABEL_10:
  }
    free(a1);
}

uint64_t nw_protocol_hash_table_create(unsigned int a1, int a2)
{
  return nw_hash_table_create_no_lock( a1,  a2,  (const void *(*)(const void *, unsigned int *))nw_protocol_get_key,  (unsigned int (*)(const void *, unsigned int))nw_protocol_key_hash,  (BOOL (*)(const void *, const void *, unsigned int))nw_protocol_matches_key,  0LL);
}

void nw_protocol_get_key(uint64_t a1, _DWORD *a2)
{
  *a2 = 16;
}

uint64_t nw_protocol_key_hash(int32x4_t *a1)
{
  return vaddvq_s32(*a1);
}

BOOL nw_protocol_matches_key(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t nw_packet_hash_table_create(unsigned int a1, int a2)
{
  return nw_hash_table_create_no_lock( a1,  a2,  (const void *(*)(const void *, unsigned int *))nw_packet_get_key,  (unsigned int (*)(const void *, unsigned int))nw_packet_key_hash,  (BOOL (*)(const void *, const void *, unsigned int))nw_packet_matches_key,  nw_packet_release);
}

uint64_t nw_packet_key_hash(int32x4_t *a1)
{
  return (vaddvq_s32(vaddq_s32(vaddq_s32(*a1, a1[1]), a1[2])) + a1[3].i32[0] + a1[3].i32[1] + a1[3].i32[2]);
}

BOOL nw_packet_matches_key(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[3];
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  uint64_t v10 = a1[4];
  uint64_t v11 = a1[5];
  uint64_t v12 = a2[4];
  uint64_t v13 = a2[5];
  uint64_t v14 = a1[6];
  uint64_t v15 = a2[6];
  uint64_t v16 = *((unsigned int *)a1 + 14);
  uint64_t v17 = *((unsigned int *)a2 + 14);
  return v2 == v4 && v3 == v5 && v6 == v8 && v7 == v9 && v10 == v12 && v11 == v13 && v14 == v15 && v16 == v17;
}

void nw_packet_release(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void sub_1823DCE94( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_fd_wrapper;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void nw_fd_wrapper_close(void *a1)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  BOOL v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 3);
    int os_unfair_lock_opaque = v2[2]._os_unfair_lock_opaque;
    if ((v2[6]._os_unfair_lock_opaque & 1) == 0)
    {
      if (os_unfair_lock_opaque < 0)
      {
LABEL_20:
        os_unfair_lock_unlock(v2 + 3);
        goto LABEL_21;
      }

      close(os_unfair_lock_opaque);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v4 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        __int16 v31 = "nw_fd_wrapper_close";
        __int16 v32 = 2114;
        *(void *)__int16 v33 = v2;
        _os_log_impl(&dword_181A5C000, v4, OS_LOG_TYPE_DEBUG, "%{public}s closed %{public}@", buf, 0x16u);
      }

LABEL_19:
      v2[2]._int os_unfair_lock_opaque = -1;
      goto LABEL_20;
    }

    if (!guarded_close_np())
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v12 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        __int16 v31 = "nw_fd_wrapper_close";
        __int16 v32 = 2114;
        *(void *)__int16 v33 = v2;
        _os_log_impl(&dword_181A5C000, v12, OS_LOG_TYPE_DEBUG, "%{public}s closed %{public}@", buf, 0x16u);
      }

      goto LABEL_18;
    }

    int v5 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    uint32_t v7 = v2[2]._os_unfair_lock_opaque;
    *(_DWORD *)buf = 136446722;
    __int16 v31 = "nw_fd_wrapper_close";
    __int16 v32 = 1024;
    *(_DWORD *)__int16 v33 = v7;
    *(_WORD *)&v33[4] = 1024;
    *(_DWORD *)&v33[6] = v5;
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (__nwlog_fault(v8, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v9 = (os_log_s *)(id)gLogObj;
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          uint32_t v11 = v2[2]._os_unfair_lock_opaque;
          *(_DWORD *)buf = 136446722;
          __int16 v31 = "nw_fd_wrapper_close";
          __int16 v32 = 1024;
          *(_DWORD *)__int16 v33 = v11;
          *(_WORD *)&v33[4] = 1024;
          *(_DWORD *)&v33[6] = v5;
          _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s Failed to close guarded fd %d %{darwin.errno}d",  buf,  0x18u);
        }
      }

      else if (v28)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v9 = (os_log_s *)(id)gLogObj;
        os_log_type_t v14 = type;
        BOOL v15 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v15)
          {
            uint32_t v16 = v2[2]._os_unfair_lock_opaque;
            *(_DWORD *)buf = 136446978;
            __int16 v31 = "nw_fd_wrapper_close";
            __int16 v32 = 1024;
            *(_DWORD *)__int16 v33 = v16;
            *(_WORD *)&v33[4] = 1024;
            *(_DWORD *)&v33[6] = v5;
            __int16 v34 = 2082;
            __int16 v35 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s Failed to close guarded fd %d %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x22u);
          }

          free(backtrace_string);
          if (!v8) {
            goto LABEL_18;
          }
          goto LABEL_14;
        }

        if (v15)
        {
          uint32_t v19 = v2[2]._os_unfair_lock_opaque;
          *(_DWORD *)buf = 136446722;
          __int16 v31 = "nw_fd_wrapper_close";
          __int16 v32 = 1024;
          *(_DWORD *)__int16 v33 = v19;
          *(_WORD *)&v33[4] = 1024;
          *(_DWORD *)&v33[6] = v5;
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s Failed to close guarded fd %d %{darwin.errno}d, no backtrace",  buf,  0x18u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v9 = (os_log_s *)(id)gLogObj;
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v9, type))
        {
          uint32_t v18 = v2[2]._os_unfair_lock_opaque;
          *(_DWORD *)buf = 136446722;
          __int16 v31 = "nw_fd_wrapper_close";
          __int16 v32 = 1024;
          *(_DWORD *)__int16 v33 = v18;
          *(_WORD *)&v33[4] = 1024;
          *(_DWORD *)&v33[6] = v5;
          _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s Failed to close guarded fd %d %{darwin.errno}d, backtrace limit exceeded",  buf,  0x18u);
        }
      }
    }

    if (!v8)
    {
LABEL_18:
      LOBYTE(v2[6]._os_unfair_lock_opaque) &= ~1u;
      goto LABEL_19;
    }

void sub_1823DD5E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1823DD8C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_DWORD *nw_fd_wrapper_create(int a1)
{
  *(void *)&v18[13] = *MEMORY[0x1895F89C0];
  if (a1 < 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    uint32_t v16 = "nw_fd_wrapper_create";
    __int16 v17 = 1024;
    *(_DWORD *)uint32_t v18 = a1;
    int v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (__nwlog_fault(v5, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v6 = (os_log_s *)(id)gLogObj;
        os_log_type_t v7 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446466;
          uint32_t v16 = "nw_fd_wrapper_create";
          __int16 v17 = 1024;
          *(_DWORD *)uint32_t v18 = a1;
          _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s called with invalid fd %d", buf, 0x12u);
        }
      }

      else if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v6 = (os_log_s *)(id)gLogObj;
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446722;
            uint32_t v16 = "nw_fd_wrapper_create";
            __int16 v17 = 1024;
            *(_DWORD *)uint32_t v18 = a1;
            v18[2] = 2082;
            *(void *)&v18[3] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v6,  v10,  "%{public}s called with invalid fd %d, dumping backtrace:%{public}s",  buf,  0x1Cu);
          }

          free(backtrace_string);
          if (!v5) {
            return 0LL;
          }
          goto LABEL_11;
        }

        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          uint32_t v16 = "nw_fd_wrapper_create";
          __int16 v17 = 1024;
          *(_DWORD *)uint32_t v18 = a1;
          _os_log_impl(&dword_181A5C000, v6, v10, "%{public}s called with invalid fd %d, no backtrace", buf, 0x12u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v6 = (os_log_s *)(id)gLogObj;
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446466;
          uint32_t v16 = "nw_fd_wrapper_create";
          __int16 v17 = 1024;
          *(_DWORD *)uint32_t v18 = a1;
          _os_log_impl( &dword_181A5C000,  v6,  v12,  "%{public}s called with invalid fd %d, backtrace limit exceeded",  buf,  0x12u);
        }
      }
    }

    if (!v5) {
      return 0LL;
    }
LABEL_11:
    free(v5);
    return 0LL;
  }

  uint64_t v2 = -[NWConcrete_nw_fd_wrapper initWithFileDescriptor:](objc_alloc(&OBJC_CLASS___NWConcrete_nw_fd_wrapper), a1);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v3 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446466;
    uint32_t v16 = "nw_fd_wrapper_create";
    __int16 v17 = 2114;
    *(void *)uint32_t v18 = v2;
    _os_log_impl(&dword_181A5C000, v3, OS_LOG_TYPE_DEBUG, "%{public}s Created %{public}@", buf, 0x16u);
  }

  return v2;
}

_DWORD *nw_fd_wrapper_create_do_not_guard(int a1)
{
  *(void *)&v18[13] = *MEMORY[0x1895F89C0];
  if (a1 < 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    uint32_t v16 = "nw_fd_wrapper_create_do_not_guard";
    __int16 v17 = 1024;
    *(_DWORD *)uint32_t v18 = a1;
    int v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (__nwlog_fault(v5, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v6 = (os_log_s *)(id)gLogObj;
        os_log_type_t v7 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446466;
          uint32_t v16 = "nw_fd_wrapper_create_do_not_guard";
          __int16 v17 = 1024;
          *(_DWORD *)uint32_t v18 = a1;
          _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s called with invalid fd %d", buf, 0x12u);
        }
      }

      else if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v6 = (os_log_s *)(id)gLogObj;
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446722;
            uint32_t v16 = "nw_fd_wrapper_create_do_not_guard";
            __int16 v17 = 1024;
            *(_DWORD *)uint32_t v18 = a1;
            v18[2] = 2082;
            *(void *)&v18[3] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v6,  v10,  "%{public}s called with invalid fd %d, dumping backtrace:%{public}s",  buf,  0x1Cu);
          }

          free(backtrace_string);
          if (!v5) {
            return 0LL;
          }
          goto LABEL_11;
        }

        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          uint32_t v16 = "nw_fd_wrapper_create_do_not_guard";
          __int16 v17 = 1024;
          *(_DWORD *)uint32_t v18 = a1;
          _os_log_impl(&dword_181A5C000, v6, v10, "%{public}s called with invalid fd %d, no backtrace", buf, 0x12u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v6 = (os_log_s *)(id)gLogObj;
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446466;
          uint32_t v16 = "nw_fd_wrapper_create_do_not_guard";
          __int16 v17 = 1024;
          *(_DWORD *)uint32_t v18 = a1;
          _os_log_impl( &dword_181A5C000,  v6,  v12,  "%{public}s called with invalid fd %d, backtrace limit exceeded",  buf,  0x12u);
        }
      }
    }

    if (!v5) {
      return 0LL;
    }
LABEL_11:
    free(v5);
    return 0LL;
  }

  uint64_t v2 = -[NWConcrete_nw_fd_wrapper initWithFileDescriptor:](objc_alloc(&OBJC_CLASS___NWConcrete_nw_fd_wrapper), a1);
  *((_BYTE *)v2 + 24) |= 2u;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v3 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446466;
    uint32_t v16 = "nw_fd_wrapper_create_do_not_guard";
    __int16 v17 = 2114;
    *(void *)uint32_t v18 = v2;
    _os_log_impl(&dword_181A5C000, v3, OS_LOG_TYPE_DEBUG, "%{public}s Created %{public}@", buf, 0x16u);
  }

  return v2;
}

uint64_t nw_fd_wrapper_guard(void *a1)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  BOOL v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    int v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    __int16 v35 = "nw_fd_wrapper_guard";
    os_log_type_t v25 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (__nwlog_fault(v25, &type, &v32))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v27 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v35 = "nw_fd_wrapper_guard";
          _os_log_impl(&dword_181A5C000, v26, v27, "%{public}s called with null wrapper", buf, 0xCu);
        }
      }

      else if (v32)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v29 = type;
        BOOL v30 = os_log_type_enabled(v26, type);
        if (backtrace_string)
        {
          if (v30)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v35 = "nw_fd_wrapper_guard";
            __int16 v36 = 2082;
            *(void *)__int16 v37 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v26,  v29,  "%{public}s called with null wrapper, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_47;
        }

        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v35 = "nw_fd_wrapper_guard";
          _os_log_impl(&dword_181A5C000, v26, v29, "%{public}s called with null wrapper, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v35 = "nw_fd_wrapper_guard";
          _os_log_impl( &dword_181A5C000,  v26,  v31,  "%{public}s called with null wrapper, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_1823DE6C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_fd_wrapper_get_fd(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  int v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v18 = "nw_fd_wrapper_get_fd";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v8, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v18 = "nw_fd_wrapper_get_fd";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null wrapper", buf, 0xCu);
        }
      }

      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v18 = "nw_fd_wrapper_get_fd";
            __int16 v19 = 2082;
            os_log_type_t v20 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null wrapper, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }

        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v18 = "nw_fd_wrapper_get_fd";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null wrapper, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v18 = "nw_fd_wrapper_get_fd";
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null wrapper, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_1823DE9B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_fd_wrapper_is_guarded(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  BOOL v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 3);
    uint64_t v3 = v2[6]._os_unfair_lock_opaque & 1;
    os_unfair_lock_unlock(v2 + 3);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint32_t v16 = "nw_fd_wrapper_is_guarded";
  uint32_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint32_t v16 = "nw_fd_wrapper_is_guarded";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null wrapper", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          uint32_t v16 = "nw_fd_wrapper_is_guarded";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null wrapper, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        uint32_t v16 = "nw_fd_wrapper_is_guarded";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null wrapper, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint32_t v16 = "nw_fd_wrapper_is_guarded";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null wrapper, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_fd_wrapper_relinquish_fd(void *a1)
{
  *(void *)&v39[13] = *MEMORY[0x1895F89C0];
  BOOL v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 3);
    if ((v2[2]._os_unfair_lock_opaque & 0x80000000) != 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v3 = (id)gLogObj;
      uint32_t os_unfair_lock_opaque = v2[2]._os_unfair_lock_opaque;
      *(_DWORD *)buf = 136446466;
      __int16 v37 = "nw_fd_wrapper_relinquish_fd";
      __int16 v38 = 1024;
      *(_DWORD *)__int16 v39 = os_unfair_lock_opaque;
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v34 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint32_t v6 = (os_log_s *)(id)gLogObj;
        os_log_type_t v7 = type;
        if (os_log_type_enabled(v6, type))
        {
          uint32_t v8 = v2[2]._os_unfair_lock_opaque;
          *(_DWORD *)buf = 136446466;
          __int16 v37 = "nw_fd_wrapper_relinquish_fd";
          __int16 v38 = 1024;
          *(_DWORD *)__int16 v39 = v8;
          _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s attempt to relinquish invalid fd %d", buf, 0x12u);
        }

        goto LABEL_37;
      }

      if (!v34)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint32_t v6 = (os_log_s *)(id)gLogObj;
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v6, type))
        {
          uint32_t v21 = v2[2]._os_unfair_lock_opaque;
          *(_DWORD *)buf = 136446466;
          __int16 v37 = "nw_fd_wrapper_relinquish_fd";
          __int16 v38 = 1024;
          *(_DWORD *)__int16 v39 = v21;
          _os_log_impl( &dword_181A5C000,  v6,  v20,  "%{public}s attempt to relinquish invalid fd %d, backtrace limit exceeded",  buf,  0x12u);
        }

        goto LABEL_37;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint32_t v6 = (os_log_s *)(id)gLogObj;
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          uint32_t v24 = v2[2]._os_unfair_lock_opaque;
          *(_DWORD *)buf = 136446466;
          __int16 v37 = "nw_fd_wrapper_relinquish_fd";
          __int16 v38 = 1024;
          *(_DWORD *)__int16 v39 = v24;
          _os_log_impl( &dword_181A5C000,  v6,  v14,  "%{public}s attempt to relinquish invalid fd %d, no backtrace",  buf,  0x12u);
        }

        goto LABEL_37;
      }

      if (v15)
      {
        uint32_t v16 = v2[2]._os_unfair_lock_opaque;
        *(_DWORD *)buf = 136446722;
        __int16 v37 = "nw_fd_wrapper_relinquish_fd";
        __int16 v38 = 1024;
        *(_DWORD *)__int16 v39 = v16;
        v39[2] = 2082;
        *(void *)&v39[3] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v6,  v14,  "%{public}s attempt to relinquish invalid fd %d, dumping backtrace:%{public}s",  buf,  0x1Cu);
      }
    }

    else
    {
      if ((v2[6]._os_unfair_lock_opaque & 1) == 0)
      {
        v2[2]._uint32_t os_unfair_lock_opaque = -1;
LABEL_40:
        os_unfair_lock_unlock(v2 + 3);
        goto LABEL_41;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v9 = (id)gLogObj;
      uint32_t v10 = v2[2]._os_unfair_lock_opaque;
      *(_DWORD *)buf = 136446466;
      __int16 v37 = "nw_fd_wrapper_relinquish_fd";
      __int16 v38 = 1024;
      *(_DWORD *)__int16 v39 = v10;
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v34 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint32_t v6 = (os_log_s *)(id)gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v6, type))
        {
          uint32_t v12 = v2[2]._os_unfair_lock_opaque;
          *(_DWORD *)buf = 136446466;
          __int16 v37 = "nw_fd_wrapper_relinquish_fd";
          __int16 v38 = 1024;
          *(_DWORD *)__int16 v39 = v12;
          _os_log_impl(&dword_181A5C000, v6, v11, "%{public}s attempt to relinquish guarded fd %d", buf, 0x12u);
        }

void __NWCopyInternalQueue_block_invoke()
{
  uint64_t v2 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue();
  dispatch_queue_t v0 = dispatch_queue_create("Network.framework", v2);
  BOOL v1 = (void *)NWCopyInternalQueue_nwQueue;
  NWCopyInternalQueue_nwQueue = (uint64_t)v0;
}

void sub_1823DF53C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_interpose;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

id *nw_interpose_client_register(int a1, void *a2)
{
  uint64_t v53 = *MEMORY[0x1895F89C0];
  id v4 = a2;
  nw_allow_use_of_dispatch_internal();
  uint64_t v5 = objc_alloc(&OBJC_CLASS___NWConcrete_nw_interpose);
  id v6 = v4;
  if (!v5)
  {
LABEL_60:

    goto LABEL_61;
  }

  v41.receiver = v5;
  v41.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_interpose;
  os_log_type_t v7 = (id *)objc_msgSendSuper2(&v41, sel_init);
  if (!v7)
  {
    __nwlog_obj();
    uint32_t v23 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(buffer[0]) = 136446210;
    *(void *)((char *)buffer + 4) = "-[NWConcrete_nw_interpose initWithDelegatedPid:nw_context:]";
    uint32_t v24 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    LOBYTE(v42) = 0;
    if ((__nwlog_fault(v24, buf, &v42) & 1) != 0)
    {
      if (buf[0] == 17)
      {
        __nwlog_obj();
        uint32_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v26 = buf[0];
        if (os_log_type_enabled(v25, (os_log_type_t)buf[0]))
        {
          LODWORD(buffer[0]) = 136446210;
          *(void *)((char *)buffer + 4) = "-[NWConcrete_nw_interpose initWithDelegatedPid:nw_context:]";
          _os_log_impl(&dword_181A5C000, v25, v26, "%{public}s [super init] failed", (uint8_t *)buffer, 0xCu);
        }
      }

      else if ((_BYTE)v42)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint32_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v32 = buf[0];
        BOOL v33 = os_log_type_enabled(v25, (os_log_type_t)buf[0]);
        if (backtrace_string)
        {
          if (v33)
          {
            LODWORD(buffer[0]) = 136446466;
            *(void *)((char *)buffer + 4) = "-[NWConcrete_nw_interpose initWithDelegatedPid:nw_context:]";
            WORD6(buffer[0]) = 2082;
            *(void *)((char *)buffer + 14) = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v25,  v32,  "%{public}s [super init] failed, dumping backtrace:%{public}s",  (uint8_t *)buffer,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_52;
        }

        if (v33)
        {
          LODWORD(buffer[0]) = 136446210;
          *(void *)((char *)buffer + 4) = "-[NWConcrete_nw_interpose initWithDelegatedPid:nw_context:]";
          _os_log_impl( &dword_181A5C000,  v25,  v32,  "%{public}s [super init] failed, no backtrace",  (uint8_t *)buffer,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint32_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v37 = buf[0];
        if (os_log_type_enabled(v25, (os_log_type_t)buf[0]))
        {
          LODWORD(buffer[0]) = 136446210;
          *(void *)((char *)buffer + 4) = "-[NWConcrete_nw_interpose initWithDelegatedPid:nw_context:]";
          _os_log_impl( &dword_181A5C000,  v25,  v37,  "%{public}s [super init] failed, backtrace limit exceeded",  (uint8_t *)buffer,  0xCu);
        }
      }
    }

void sub_1823DFE94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id *nw_interpose_client_claim(const unsigned __int8 *a1, void *a2)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  id v4 = a2;
  nw_allow_use_of_dispatch_internal();
  if (uuid_is_null(a1))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    if (!os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_ERROR))
    {
LABEL_5:

      os_log_type_t v7 = 0LL;
      goto LABEL_18;
    }

    *(_DWORD *)buf = 136446466;
    os_log_type_t v31 = "nw_interpose_client_claim";
    __int16 v32 = 2114;
    BOOL v33 = 0LL;
    id v6 = "%{public}s [%{public}@] no client UUID";
LABEL_4:
    _os_log_impl(&dword_181A5C000, (os_log_t)v5, OS_LOG_TYPE_ERROR, v6, buf, 0x16u);
    goto LABEL_5;
  }

  uint32_t v8 = objc_alloc(&OBJC_CLASS___NWConcrete_nw_interpose);
  id v9 = v4;
  if (!v8)
  {
LABEL_22:

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (id)gLogObj;
    if (!os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_ERROR)) {
      goto LABEL_5;
    }
    *(_DWORD *)buf = 136446466;
    os_log_type_t v31 = "nw_interpose_client_claim";
    __int16 v32 = 2114;
    BOOL v33 = 0LL;
    id v6 = "%{public}s [%{public}@] failed to allocate interpose";
    goto LABEL_4;
  }

  v29.receiver = v8;
  v29.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_interpose;
  id v10 = (char *)objc_msgSendSuper2(&v29, sel_init);
  os_log_type_t v7 = (id *)v10;
  if (!v10)
  {
    __nwlog_obj();
    uint32_t v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v31 = "-[NWConcrete_nw_interpose initWithClientUUID:nw_context:]";
    int v20 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if ((__nwlog_fault(v20, &type, &v27) & 1) != 0)
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint32_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v31 = "-[NWConcrete_nw_interpose initWithClientUUID:nw_context:]";
          _os_log_impl(&dword_181A5C000, v21, v22, "%{public}s [super init] failed", buf, 0xCu);
        }
      }

      else if (v27)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint32_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v24 = type;
        BOOL v25 = os_log_type_enabled(v21, type);
        if (backtrace_string)
        {
          if (v25)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v31 = "-[NWConcrete_nw_interpose initWithClientUUID:nw_context:]";
            __int16 v32 = 2082;
            BOOL v33 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v21,  v24,  "%{public}s [super init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_40;
        }

        if (v25)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v31 = "-[NWConcrete_nw_interpose initWithClientUUID:nw_context:]";
          _os_log_impl(&dword_181A5C000, v21, v24, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint32_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v31 = "-[NWConcrete_nw_interpose initWithClientUUID:nw_context:]";
          _os_log_impl( &dword_181A5C000,  v21,  v26,  "%{public}s [super init] failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_1823E04D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_interpose_get_client_uuid(void *a1, _OWORD *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    os_unfair_lock_lock(v3 + 2);
    BOOL client_id = nw_path_evaluator_get_client_id(*(void **)&v4[10]._os_unfair_lock_opaque, a2);
    os_unfair_lock_unlock(v4 + 2);
    goto LABEL_3;
  }

  __nwlog_obj();
  os_log_type_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  BOOL v18 = "nw_interpose_get_client_uuid";
  uint32_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_interpose_get_client_uuid";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null interpose", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v18 = "nw_interpose_get_client_uuid";
          __int16 v19 = 2082;
          int v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null interpose, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_interpose_get_client_uuid";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null interpose, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v18 = "nw_interpose_get_client_uuid";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null interpose, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_interpose_set_queue(void *a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    id v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint32_t v23 = "nw_interpose_set_queue";
    os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint32_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint32_t v23 = "nw_interpose_set_queue";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null interpose", buf, 0xCu);
      }
    }

    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint32_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          uint32_t v23 = "nw_interpose_set_queue";
          __int16 v24 = 2082;
          BOOL v25 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null interpose, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v7) {
          goto LABEL_4;
        }
LABEL_39:
        free(v7);
        goto LABEL_4;
      }

      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        uint32_t v23 = "nw_interpose_set_queue";
        _os_log_impl(&dword_181A5C000, v8, v13, "%{public}s called with null interpose, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint32_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        uint32_t v23 = "nw_interpose_set_queue";
        _os_log_impl( &dword_181A5C000,  v8,  v18,  "%{public}s called with null interpose, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void nw_interpose_set_flow_event_handler(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    uint64_t v26 = "nw_interpose_set_flow_event_handler";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_interpose_set_flow_event_handler";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null interpose", buf, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v26 = "nw_interpose_set_flow_event_handler";
          __int16 v27 = 2082;
          char v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null interpose, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v10) {
          goto LABEL_4;
        }
LABEL_39:
        free(v10);
        goto LABEL_4;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_interpose_set_flow_event_handler";
        _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null interpose, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_interpose_set_flow_event_handler";
        _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s called with null interpose, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void nw_interpose_start(void *a1)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  BOOL v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 2);
    objc_initWeak((id *)location, v2);
    id v3 = *(void **)&v2[10]._os_unfair_lock_opaque;
    id v4 = *(void **)&v2[18]._os_unfair_lock_opaque;
    uint64_t v5 = MEMORY[0x1895F87A8];
    v17[0] = MEMORY[0x1895F87A8];
    v17[1] = 3221225472LL;
    v17[2] = __nw_interpose_start_block_invoke;
    v17[3] = &unk_189BC8C90;
    objc_copyWeak(&v18, (id *)location);
    nw_path_evaluator_set_update_handler(v3, v4, v17);
    id v6 = *(void **)&v2[16]._os_unfair_lock_opaque;
    v15[0] = v5;
    v15[1] = 3221225472LL;
    v15[2] = __nw_interpose_start_block_invoke_5;
    v15[3] = &unk_189BC93A0;
    os_log_type_t v16 = v2;
    nw_queue_context_async(v6, v15);
    os_unfair_lock_unlock(v2 + 2);

    objc_destroyWeak(&v18);
    objc_destroyWeak((id *)location);
    goto LABEL_3;
  }

  __nwlog_obj();
  os_log_type_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)location = 136446210;
  *(void *)&location[4] = "nw_interpose_start";
  uint32_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v20 = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v8, &v20, &v19))
  {
    if (v20 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = v20;
      if (os_log_type_enabled(v9, v20))
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_interpose_start";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null interpose", location, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = v20;
      BOOL v13 = os_log_type_enabled(v9, v20);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)location = 136446466;
          *(void *)&location[4] = "nw_interpose_start";
          __int16 v22 = 2082;
          char v23 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null interpose, dumping backtrace:%{public}s",  location,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v13)
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_interpose_start";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null interpose, no backtrace", location, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = v20;
      if (os_log_type_enabled(v9, v20))
      {
        *(_DWORD *)location = 136446210;
        *(void *)&location[4] = "nw_interpose_start";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null interpose, backtrace limit exceeded",  location,  0xCu);
      }
    }
  }

void sub_1823E14B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  objc_destroyWeak(v19);
  objc_destroyWeak((id *)(v20 - 96));

  _Unwind_Resume(a1);
}

void __nw_interpose_start_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  WeakRetained = (os_unfair_lock_s *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v5 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      int v6 = 136446722;
      os_log_type_t v7 = "nw_interpose_start_block_invoke";
      __int16 v8 = 2114;
      os_log_type_t v9 = WeakRetained;
      __int16 v10 = 2114;
      id v11 = v3;
      _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_DEBUG,  "%{public}s [%{public}@] Handling new path %{public}@",  (uint8_t *)&v6,  0x20u);
    }

    os_unfair_lock_lock(WeakRetained + 2);
    nw_interpose_handle_path_update_locked(WeakRetained, v3);
    os_unfair_lock_unlock(WeakRetained + 2);
  }
}

void sub_1823E1608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_interpose_start_block_invoke_5(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (os_unfair_lock_s *)v2[5];
  if (v3)
  {
    id v4 = v3 + 24;
    uint64_t v5 = v3;
    os_unfair_lock_lock(v4);
    id v6 = v5[6];
    os_unfair_lock_unlock(v4);
  }

  else
  {
    id v6 = 0LL;
  }

  nw_interpose_handle_path_update_locked(v2, v6);

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8LL));
}

void sub_1823E16B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_interpose_handle_path_update_locked(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = nw_dictionary_create();
  uint64_t v6 = MEMORY[0x1895F87A8];
  v22[0] = MEMORY[0x1895F87A8];
  v22[1] = 3221225472LL;
  v22[2] = ___ZL38nw_interpose_handle_path_update_lockedP23NWConcrete_nw_interposePU21objcproto10OS_nw_path8NSObject_block_invoke;
  v22[3] = &unk_189BC4A68;
  os_log_type_t v7 = (uint64_t *)v3;
  char v23 = v7;
  __int16 v8 = v5;
  id v24 = v8;
  nw_path_enumerate_interface_options(v4, v22);
  uint64_t v9 = v7[6];
  if (v9)
  {
    v20[0] = v6;
    v20[1] = 3221225472LL;
    v20[2] = ___ZL38nw_interpose_handle_path_update_lockedP23NWConcrete_nw_interposePU21objcproto10OS_nw_path8NSObject_block_invoke_79;
    v20[3] = &unk_189BC5058;
    os_log_type_t v21 = v8;
    nw_dictionary_apply(v9, (uint64_t)v20);
  }

  objc_storeStrong((id *)v7 + 6, v5);
  __int16 v10 = (void *)v7[8];
  v18[0] = v6;
  v18[1] = 3221225472LL;
  v18[2] = ___ZL38nw_interpose_handle_path_update_lockedP23NWConcrete_nw_interposePU21objcproto10OS_nw_path8NSObject_block_invoke_2;
  v18[3] = &unk_189BC93A0;
  id v11 = v7;
  char v19 = v11;
  nw_queue_context_async(v10, v18);
  uint64_t v12 = (unsigned __int8 *)nw_path_copy_flows(v4);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  BOOL v13 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (v12) {
      uint64_t v14 = (*((void *)v12 + 3) - *((void *)v12 + 2)) >> 3;
    }
    else {
      LODWORD(v14) = 0;
    }
    *(_DWORD *)buf = 136446722;
    uint64_t v26 = "nw_interpose_handle_path_update_locked";
    __int16 v27 = 2114;
    char v28 = v11;
    __int16 v29 = 1024;
    int v30 = v14;
    _os_log_impl(&dword_181A5C000, v13, OS_LOG_TYPE_DEBUG, "%{public}s [%{public}@] got %d flows from path", buf, 0x1Cu);
  }

  v16[0] = v6;
  v16[1] = 3221225472LL;
  v16[2] = ___ZL38nw_interpose_handle_path_update_lockedP23NWConcrete_nw_interposePU21objcproto10OS_nw_path8NSObject_block_invoke_80;
  v16[3] = &unk_189BC85B0;
  char v15 = v11;
  BOOL v17 = v15;
  nw_array_apply(v12, (uint64_t)v16);
}

void sub_1823E193C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, void *a30)
{
  _Unwind_Resume(a1);
}

void ___ZL38nw_interpose_handle_path_update_lockedP23NWConcrete_nw_interposePU21objcproto10OS_nw_path8NSObject_block_invoke( uint64_t a1, void *a2, const unsigned __int8 *a3)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  uint64_t v5 = a2;
  uint64_t v6 = (char *)v5;
  if (v5) {
    os_log_type_t v7 = v5 + 104;
  }
  else {
    os_log_type_t v7 = 0LL;
  }
  if (v5)
  {
    if (uuid_is_null(a3))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v8 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 136446466;
        char v28 = "nw_interpose_handle_path_update_locked_block_invoke";
        __int16 v29 = 2114;
        uint64_t v30 = v9;
        __int16 v10 = "%{public}s [%{public}@] no nexus agent";
LABEL_10:
        _os_log_impl(&dword_181A5C000, v8, OS_LOG_TYPE_ERROR, v10, buf, 0x16u);
        goto LABEL_34;
      }

      goto LABEL_34;
    }

    uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 48LL);
    if (v12 && (BOOL v13 = (nw_interpose_flow *)nw_dictionary_copy_value(v12, (uint64_t)v7)) != 0LL)
    {
      uint64_t v14 = v13;
      if (-[nw_interpose_flow matchNexusAgent:](v13, "matchNexusAgent:", a3))
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v15 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v16 = *(void *)(a1 + 32);
          *(_DWORD *)buf = 136447234;
          char v28 = "nw_interpose_handle_path_update_locked_block_invoke";
          __int16 v29 = 2114;
          uint64_t v30 = v16;
          __int16 v31 = 1042;
          int v32 = 16;
          __int16 v33 = 2098;
          __int16 v34 = a3;
          __int16 v35 = 2080;
          __int16 v36 = v7;
          _os_log_impl( &dword_181A5C000,  v15,  OS_LOG_TYPE_DEBUG,  "%{public}s [%{public}@] flow registration already exists for nexus agent %{public,uuid_t}.16P on %s",  buf,  0x30u);
        }

LABEL_26:
        nw_dictionary_set_value(*(void *)(a1 + 40), v7, v14);
        __int16 v8 = (os_log_s *)v14;
        goto LABEL_34;
      }

      __int16 v8 = (os_log_s *)v14;
    }

    else
    {
      __int16 v8 = 0LL;
    }

    __int128 v26 = *(_OWORD *)a3;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v17 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v18 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 136447234;
      char v28 = "nw_interpose_handle_path_update_locked_block_invoke";
      __int16 v29 = 2114;
      uint64_t v30 = v18;
      __int16 v31 = 1042;
      int v32 = 16;
      __int16 v33 = 2098;
      __int16 v34 = (const unsigned __int8 *)&v26;
      __int16 v35 = 2080;
      __int16 v36 = v7;
      _os_log_impl( &dword_181A5C000,  v17,  OS_LOG_TYPE_DEBUG,  "%{public}s [%{public}@] adding flow registration for nexus agent %{public,uuid_t}.16P on %s",  buf,  0x30u);
    }

    char v19 = nw_path_evaluator_create_flow_inner(*(void **)(*(void *)(a1 + 32) + 40LL), 0, 1, 0, 0, &v26, 0LL, 0, 0LL);
    if (v19)
    {
      uint64_t v14 = -[nw_interpose_flow initWithInterface:registration:eventHandler:]( objc_alloc(&OBJC_CLASS___nw_interpose_flow),  "initWithInterface:registration:eventHandler:",  v6,  v19,  *(void *)(*(void *)(a1 + 32) + 56LL));

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v20 = (os_log_s *)(id)gLogObj;
      os_log_type_t v21 = v20;
      if (v14)
      {
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v22 = *(void *)(a1 + 32);
          *(_DWORD *)buf = 136447234;
          char v28 = "nw_interpose_handle_path_update_locked_block_invoke";
          __int16 v29 = 2114;
          uint64_t v30 = v22;
          __int16 v31 = 1042;
          int v32 = 16;
          __int16 v33 = 2098;
          __int16 v34 = (const unsigned __int8 *)&v26;
          __int16 v35 = 2080;
          __int16 v36 = v7;
          _os_log_impl( &dword_181A5C000,  v21,  OS_LOG_TYPE_DEBUG,  "%{public}s [%{public}@] added flow registration for nexus agent %{public,uuid_t}.16P on %s",  buf,  0x30u);
        }

        goto LABEL_26;
      }

      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        uint64_t v25 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 136447234;
        char v28 = "nw_interpose_handle_path_update_locked_block_invoke";
        __int16 v29 = 2114;
        uint64_t v30 = v25;
        __int16 v31 = 1042;
        int v32 = 16;
        __int16 v33 = 2098;
        __int16 v34 = (const unsigned __int8 *)&v26;
        __int16 v35 = 2080;
        __int16 v36 = v7;
        _os_log_impl( &dword_181A5C000,  v21,  OS_LOG_TYPE_ERROR,  "%{public}s [%{public}@] failed to create flow object for nexus agent %{public,uuid_t}.16P on %s",  buf,  0x30u);
      }

      __int16 v8 = 0LL;
      nw_path_flow_registration_close(v19);
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v23 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        uint64_t v24 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 136447234;
        char v28 = "nw_interpose_handle_path_update_locked_block_invoke";
        __int16 v29 = 2114;
        uint64_t v30 = v24;
        __int16 v31 = 1042;
        int v32 = 16;
        __int16 v33 = 2098;
        __int16 v34 = (const unsigned __int8 *)&v26;
        __int16 v35 = 2080;
        __int16 v36 = v7;
        _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_ERROR,  "%{public}s [%{public}@] failed to create flow registration for nexus agent %{public,uuid_t}.16P on %s",  buf,  0x30u);
      }
    }

    goto LABEL_34;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  __int16 v8 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 136446466;
    char v28 = "nw_interpose_handle_path_update_locked_block_invoke";
    __int16 v29 = 2114;
    uint64_t v30 = v11;
    __int16 v10 = "%{public}s [%{public}@] no interface name";
    goto LABEL_10;
  }

void sub_1823E1F2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL38nw_interpose_handle_path_update_lockedP23NWConcrete_nw_interposePU21objcproto10OS_nw_path8NSObject_block_invoke_79( uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = nw_dictionary_copy_value(*(void *)(a1 + 32), a2);
  os_log_type_t v7 = v6;
  if (v6) {
    BOOL v8 = v6 == v5;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8) {
    [v5 close];
  }

  return 1LL;
}

void sub_1823E1FD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL38nw_interpose_handle_path_update_lockedP23NWConcrete_nw_interposePU21objcproto10OS_nw_path8NSObject_block_invoke_2( uint64_t a1)
{
}

uint64_t ___ZL38nw_interpose_handle_path_update_lockedP23NWConcrete_nw_interposePU21objcproto10OS_nw_path8NSObject_block_invoke_80( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  id v4 = a3;
  id v5 = *(id *)(a1 + 32);
  id v6 = v4;
  os_log_type_t v7 = v6;
  if (!v5)
  {
    __nwlog_obj();
    BOOL v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_interpose_flow_get_locked";
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interpose_flow_get_locked";
        _os_log_impl(&dword_181A5C000, v15, v16, "%{public}s called with null interpose", buf, 0xCu);
      }

      goto LABEL_56;
    }

    if (!v37)
    {
      __nwlog_obj();
      char v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interpose_flow_get_locked";
        _os_log_impl( &dword_181A5C000,  v15,  v29,  "%{public}s called with null interpose, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_56;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    char v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v22 = type;
    BOOL v23 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interpose_flow_get_locked";
        _os_log_impl(&dword_181A5C000, v15, v22, "%{public}s called with null interpose, no backtrace", buf, 0xCu);
      }

      goto LABEL_56;
    }

    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_interpose_flow_get_locked";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v15,  v22,  "%{public}s called with null interpose, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_32;
  }

  uint64_t v8 = v5[6];
  if (!v8)
  {
    __nwlog_obj();
    BOOL v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_interpose_flow_get_locked";
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interpose_flow_get_locked";
        _os_log_impl(&dword_181A5C000, v15, v18, "%{public}s called with null interpose->flows", buf, 0xCu);
      }

      goto LABEL_56;
    }

    if (!v37)
    {
      __nwlog_obj();
      char v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interpose_flow_get_locked";
        _os_log_impl( &dword_181A5C000,  v15,  v30,  "%{public}s called with null interpose->flows, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_56;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    char v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v24 = type;
    BOOL v25 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interpose_flow_get_locked";
        _os_log_impl( &dword_181A5C000,  v15,  v24,  "%{public}s called with null interpose->flows, no backtrace",  buf,  0xCu);
      }

      goto LABEL_56;
    }

    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_interpose_flow_get_locked";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v15,  v24,  "%{public}s called with null interpose->flows, dumping backtrace:%{public}s",  buf,  0x16u);
    }

void sub_1823E288C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__63069(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__63070(uint64_t a1)
{
}

uint64_t ___ZL28nw_interpose_flow_get_lockedP23NWConcrete_nw_interposePU26objcproto15OS_nw_path_flow8NSObject_block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  int v6 = [v5 matchNexusAgentWithFlow:*(void *)(a1 + 32)];
  if (v6) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a3);
  }

  return v6 ^ 1u;
}

void sub_1823E292C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_interpose_cancel(void *a1)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  BOOL v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 2);
    id v3 = v2;
    uint64_t v4 = *(void *)&v3[12]._os_unfair_lock_opaque;
    if (v4)
    {
      nw_dictionary_apply(v4, (uint64_t)&__block_literal_global_63092);
LABEL_4:
      id v5 = *(void **)&v3[14]._os_unfair_lock_opaque;
      *(void *)&v3[14]._uint32_t os_unfair_lock_opaque = 0LL;

      int v6 = *(void **)&v3[10]._os_unfair_lock_opaque;
      if (v6)
      {
        nw_path_evaluator_cancel(v6);
        os_log_type_t v7 = *(void **)&v3[10]._os_unfair_lock_opaque;
        *(void *)&v3[10]._uint32_t os_unfair_lock_opaque = 0LL;
      }

      os_unfair_lock_unlock(v2 + 2);
      goto LABEL_7;
    }

    __nwlog_obj();
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v27 = "nw_interpose_flow_clear_handlers_locked";
    BOOL v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v13, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v27 = "nw_interpose_flow_clear_handlers_locked";
          _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s called with null interpose->flows", buf, 0xCu);
        }
      }

      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = type;
        BOOL v21 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v21)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v27 = "nw_interpose_flow_clear_handlers_locked";
            __int16 v28 = 2082;
            os_log_type_t v29 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v14,  v20,  "%{public}s called with null interpose->flows, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }

        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v27 = "nw_interpose_flow_clear_handlers_locked";
          _os_log_impl( &dword_181A5C000,  v14,  v20,  "%{public}s called with null interpose->flows, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v23 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v27 = "nw_interpose_flow_clear_handlers_locked";
          _os_log_impl( &dword_181A5C000,  v14,  v23,  "%{public}s called with null interpose->flows, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_1823E2E2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL39nw_interpose_flow_clear_handlers_lockedP23NWConcrete_nw_interpose_block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  return 1LL;
}

void __nw_http_cookie_storage_copy_shared_block_invoke()
{
  dispatch_queue_t v0 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_http_cookie_storage);
  BOOL v1 = (void *)nw_http_cookie_storage_copy_shared_storage;
  nw_http_cookie_storage_copy_shared_storage = (uint64_t)v0;

  uint64_t v2 = [MEMORY[0x189601E98] sharedHTTPCookieStorage];
  id v3 = *(void **)(nw_http_cookie_storage_copy_shared_storage + 8);
  *(void *)(nw_http_cookie_storage_copy_shared_storage + 8) = v2;
}

NWConcrete_nw_http_cookie_storage *nw_http_cookie_storage_create_ns(void *a1)
{
  BOOL v1 = a1;
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_http_cookie_storage);
  cookieStorage = v2->cookieStorage;
  v2->cookieStorage = v1;

  return v2;
}

void __nw_http_cookie_enumerate_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    uint64_t v5 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v13;
      do
      {
        for (uint64_t i = 0LL; i != v6; ++i)
        {
          if (*(void *)v13 != v7) {
            objc_enumerationMutation(v4);
          }
          id v9 = *(void **)(*((void *)&v12 + 1) + 8 * i);
          [v9 name];
          id v10 = (void *)objc_claimAutoreleasedReturnValue();
          [v9 value];
          os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
          (*(void (**)(void, uint64_t, uint64_t))(*(void *)(a1 + 32) + 16))( *(void *)(a1 + 32),  [v10 UTF8String],  objc_msgSend(v11, "UTF8String"));
        }

        uint64_t v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }

      while (v6);
    }
  }
}

uint64_t __nw_http_cookie_parse_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = (void *)[objc_alloc(NSString) initWithBytes:a4 length:a5 encoding:5];
  if (*(void *)(a1 + 40))
  {
    objc_msgSend(NSString, "stringWithUTF8String:");
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  [MEMORY[0x189601E90] _cookieForSetCookieString:v6 forURL:*(void *)(a1 + 48) partition:v7];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8) {
    [*(id *)(a1 + 32) addObject:v8];
  }

  return 1LL;
}

void ___ZL32nw_protocol_setup_tcp_definitionv_block_invoke()
{
  dispatch_queue_t v0 = (__int128 *)nw_protocol_tcp_identifier();
  BOOL v1 = nw_protocol_definition_create_with_identifier(v0);
  uint64_t v2 = (void *)g_tcp_definition;
  g_tcp_definition = (uint64_t)v1;

  nw_protocol_definition_set_options_allocator( (void *)g_tcp_definition,  (uint64_t)nw_tcp_allocate_options,  (uint64_t)nw_tcp_copy_options,  (uint64_t)nw_tcp_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)g_tcp_definition, (uint64_t)nw_tcp_option_is_equal);
  nw_protocol_definition_set_metadata_allocator( (void *)g_tcp_definition,  (uint64_t)nw_tcp_allocate_metadata,  (uint64_t)nw_tcp_deallocate_metadata);
  nw_protocol_definition_set_context_globals_allocator( (void *)g_tcp_definition,  nw_tcp_allocate_globals,  nw_tcp_deallocate_globals);
  nw_protocol_definition_set_has_global_definition((void *)g_tcp_definition);
}

BOOL nw_tcp_allocate_options(void *a1)
{
  id v1 = a1;
  uint64_t v2 = calloc(1uLL, 0x28uLL);
  if (v2) {
    goto LABEL_2;
  }
  __nwlog_obj();
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  uint64_t v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    v2[4] = 0LL;
    *(_OWORD *)uint64_t v2 = 0u;
    *((_OWORD *)v2 + 1) = 0u;
    *((_BYTE *)v2 + 38) = 0;
    *((_WORD *)v2 + 18) = 1;
    *(void *)((char *)v2 + 28) = 0x2FFFFFFFFLL;

    return (BOOL)v2;
  }

  __break(1u);
  return result;
}

void sub_1823E32E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_tcp_copy_options(void *a1, __int128 *a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    BOOL v21 = "nw_tcp_copy_options";
    id v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v9, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v21 = "nw_tcp_copy_options";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null existing_handle", buf, 0xCu);
        }
      }

      else if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v21 = "nw_tcp_copy_options";
            __int16 v22 = 2082;
            uint64_t v23 = (uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }

        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v21 = "nw_tcp_copy_options";
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null existing_handle, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v21 = "nw_tcp_copy_options";
          _os_log_impl( &dword_181A5C000,  v10,  v17,  "%{public}s called with null existing_handle, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_1823E366C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_tcp_deallocate_options(int a1, void *a2)
{
  if (a2) {
    free(a2);
  }
}

BOOL nw_tcp_option_is_equal(uint64_t a1, void *a2, void *a3)
{
  if (!a2 || !a3) {
    return a2 == a3;
  }
  return *a2 == *a3 && a2[1] == a3[1] && a2[2] == a3[2] && a2[3] == a3[3] && a2[4] == a3[4];
}

BOOL nw_tcp_allocate_metadata(void *a1)
{
  id v1 = a1;
  uint64_t v2 = calloc(1uLL, 0x40uLL);
  if (v2) {
    goto LABEL_2;
  }
  __nwlog_obj();
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  __int128 v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    v2[2] = 0u;
    v2[3] = 0u;
    _OWORD *v2 = 0u;
    v2[1] = 0u;

    return (BOOL)v2;
  }

  __break(1u);
  return result;
}

void sub_1823E380C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_tcp_deallocate_metadata(int a1, void *a2)
{
  if (a2) {
    free(a2);
  }
}

BOOL nw_tcp_allocate_globals(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  __int128 v5 = calloc(1uLL, 0x14CuLL);
  if (v5) {
    goto LABEL_2;
  }
  __nwlog_obj();
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  uint64_t v8 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v8);
  if (!result)
  {
    free(v8);
LABEL_2:
    nw_tcp_init_globals();

    return (BOOL)v5;
  }

  __break(1u);
  return result;
}

void sub_1823E397C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_tcp_deallocate_globals(uint64_t a1, void *a2)
{
  if (a2) {
    free(a2);
  }
}

nw_protocol_options_t nw_tcp_create_options(void)
{
  return (nw_protocol_options_t)nw_protocol_create_options((void *)g_tcp_definition);
}

void nw_tcp_options_set_reduce_buffering(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_tcp_options_set_reduce_buffering_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v17 = "nw_tcp_options_set_reduce_buffering";
  __int128 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_tcp_options_set_reduce_buffering";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_tcp(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v17 = "nw_tcp_options_set_reduce_buffering";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_tcp_options_set_reduce_buffering";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_tcp_options_set_reduce_buffering";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823E3CDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_reduce_buffering_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a2 + 36) = *(_WORD *)(a2 + 36) & 0xFFFE | *(unsigned __int8 *)(a1 + 32);
  return 1LL;
}

void nw_tcp_options_set_no_delay(nw_protocol_options_t options, BOOL no_delay)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = options;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_tcp_options_set_no_delay_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    BOOL v13 = no_delay;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v17 = "nw_tcp_options_set_no_delay";
  __int128 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_tcp_options_set_no_delay";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_tcp(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v17 = "nw_tcp_options_set_no_delay";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_tcp_options_set_no_delay";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_tcp_options_set_no_delay";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823E3FD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_no_delay_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 36);
  uint64_t v2 = a2 + 36;
  unsigned int v4 = v3 & 0xFFFFFFFD | (*(unsigned __int8 *)(v2 + 2) << 16);
  *(_WORD *)uint64_t v2 = v3 & 0xFFFD | (2 * (*(_BYTE *)(a1 + 32) & 0x7F));
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1LL;
}

void nw_tcp_options_set_no_timewait(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_tcp_options_set_no_timewait_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v17 = "nw_tcp_options_set_no_timewait";
  __int128 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_tcp_options_set_no_timewait";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_tcp(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v17 = "nw_tcp_options_set_no_timewait";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_tcp_options_set_no_timewait";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_tcp_options_set_no_timewait";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823E42E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_no_timewait_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 36);
  uint64_t v2 = a2 + 36;
  unsigned int v4 = v3 & 0xFFFFFFFB | (*(unsigned __int8 *)(v2 + 2) << 16);
  *(_WORD *)uint64_t v2 = v3 & 0xFFFB | (4 * (*(_BYTE *)(a1 + 32) & 0x3F));
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1LL;
}

void nw_tcp_options_set_no_push(nw_protocol_options_t options, BOOL no_push)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  int v3 = options;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_tcp_options_set_no_push_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    BOOL v13 = no_push;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v17 = "nw_tcp_options_set_no_push";
  __int128 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_tcp_options_set_no_push";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_tcp(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v17 = "nw_tcp_options_set_no_push";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_tcp_options_set_no_push";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_tcp_options_set_no_push";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823E45EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_no_push_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 36);
  uint64_t v2 = a2 + 36;
  unsigned int v4 = v3 & 0xFFFFFFF7 | (*(unsigned __int8 *)(v2 + 2) << 16);
  *(_WORD *)uint64_t v2 = v3 & 0xFFF7 | (8 * (*(_BYTE *)(a1 + 32) & 0x1F));
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1LL;
}

void nw_tcp_options_set_no_options(nw_protocol_options_t options, BOOL no_options)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  int v3 = options;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_tcp_options_set_no_options_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    BOOL v13 = no_options;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v17 = "nw_tcp_options_set_no_options";
  __int128 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_tcp_options_set_no_options";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_tcp(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v17 = "nw_tcp_options_set_no_options";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_tcp_options_set_no_options";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_tcp_options_set_no_options";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823E48F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_no_options_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 36);
  uint64_t v2 = a2 + 36;
  unsigned int v4 = v3 & 0xFFFFFFEF | (*(unsigned __int8 *)(v2 + 2) << 16);
  *(_WORD *)uint64_t v2 = v3 & 0xFFEF | (16 * (*(_BYTE *)(a1 + 32) & 0xF));
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1LL;
}

void nw_tcp_options_set_enable_keepalive(nw_protocol_options_t options, BOOL enable_keepalive)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  int v3 = options;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_tcp_options_set_enable_keepalive_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    BOOL v13 = enable_keepalive;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v17 = "nw_tcp_options_set_enable_keepalive";
  __int128 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_tcp_options_set_enable_keepalive";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_tcp(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v17 = "nw_tcp_options_set_enable_keepalive";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_tcp_options_set_enable_keepalive";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_tcp_options_set_enable_keepalive";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823E4C04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_enable_keepalive_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 36);
  uint64_t v2 = a2 + 36;
  unsigned int v4 = v3 & 0xFFFFFFDF | (*(unsigned __int8 *)(v2 + 2) << 16);
  *(_WORD *)uint64_t v2 = v3 & 0xFFDF | (32 * (*(_BYTE *)(a1 + 32) & 7));
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1LL;
}

void nw_tcp_options_set_enable_keepalive_offload(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_tcp_options_set_enable_keepalive_offload_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v17 = "nw_tcp_options_set_enable_keepalive_offload";
  __int128 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_tcp_options_set_enable_keepalive_offload";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_tcp(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v17 = "nw_tcp_options_set_enable_keepalive_offload";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_tcp_options_set_enable_keepalive_offload";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v17 = "nw_tcp_options_set_enable_keepalive_offload";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823E4F10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_enable_keepalive_offload_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 36);
  uint64_t v2 = a2 + 36;
  unsigned int v4 = v3 & 0xFFFFFFBF | (*(unsigned __int8 *)(v2 + 2) << 16);
  *(_WORD *)uint64_t v2 = v3 & 0xFFBF | ((*(_BYTE *)(a1 + 32) & 3) << 6);
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1LL;
}

BOOL nw_tcp_options_get_enable_keepalive_offload(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_tcp(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v16 = 0;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_tcp_options_get_enable_keepalive_offload_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_tcp_options_get_enable_keepalive_offload";
  __int128 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_enable_keepalive_offload";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_tcp(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_tcp_options_get_enable_keepalive_offload";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_enable_keepalive_offload";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_enable_keepalive_offload";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823E5250( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_get_enable_keepalive_offload_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (*(_BYTE *)(a2 + 36) & 0x40) != 0;
  return 1LL;
}

void nw_tcp_options_set_disable_ack_stretching(nw_protocol_options_t options, BOOL disable_ack_stretching)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  int v3 = options;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_tcp_options_set_disable_ack_stretching_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    BOOL v13 = disable_ack_stretching;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_tcp_options_set_disable_ack_stretching";
  __int128 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_disable_ack_stretching";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_tcp(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_tcp_options_set_disable_ack_stretching";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_disable_ack_stretching";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_disable_ack_stretching";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823E5564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_disable_ack_stretching_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 36);
  uint64_t v2 = a2 + 36;
  unsigned int v4 = v3 & 0xFFFFFF7F | (*(unsigned __int8 *)(v2 + 2) << 16);
  *(_WORD *)uint64_t v2 = v3 & 0xFF7F | ((*(_BYTE *)(a1 + 32) & 1) << 7);
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1LL;
}

void nw_tcp_options_set_disable_blackhole_detection(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_tcp_options_set_disable_blackhole_detection_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_tcp_options_set_disable_blackhole_detection";
  __int128 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_disable_blackhole_detection";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_tcp(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_tcp_options_set_disable_blackhole_detection";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_disable_blackhole_detection";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_disable_blackhole_detection";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823E5870(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_disable_blackhole_detection_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 36);
  uint64_t v2 = a2 + 36;
  unsigned int v4 = v3 & 0xFFFFFEFF | (*(unsigned __int8 *)(v2 + 2) << 16);
  *(_WORD *)uint64_t v2 = v3 & 0xFEFF | (*(unsigned __int8 *)(a1 + 32) << 8);
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1LL;
}

void nw_tcp_options_set_enable_background_traffic_management(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_tcp_options_set_enable_background_traffic_management_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_tcp_options_set_enable_background_traffic_management";
  __int128 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_enable_background_traffic_management";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_tcp(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_tcp_options_set_enable_background_traffic_management";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_enable_background_traffic_management";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_enable_background_traffic_management";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823E5B78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_enable_background_traffic_management_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 36);
  uint64_t v2 = a2 + 36;
  unsigned int v4 = v3 & 0xFFFFFDFF | (*(unsigned __int8 *)(v2 + 2) << 16) | (*(unsigned __int8 *)(a1 + 32) << 9);
  *(_WORD *)uint64_t v2 = v3 & 0xFDFF | (*(unsigned __int8 *)(a1 + 32) << 9);
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1LL;
}

void nw_tcp_options_set_enable_fast_open(nw_protocol_options_t options, BOOL enable_fast_open)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  int v3 = options;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_tcp_options_set_enable_fast_open_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    BOOL v13 = enable_fast_open;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_tcp_options_set_enable_fast_open";
  __int128 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_enable_fast_open";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_tcp(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_tcp_options_set_enable_fast_open";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_enable_fast_open";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_enable_fast_open";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823E5E80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_enable_fast_open_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 36);
  uint64_t v2 = a2 + 36;
  unsigned int v4 = v3 & 0xFFFFF7FF | (*(unsigned __int8 *)(v2 + 2) << 16) | (*(unsigned __int8 *)(a1 + 32) << 11);
  *(_WORD *)uint64_t v2 = v3 & 0xF7FF | (*(unsigned __int8 *)(a1 + 32) << 11);
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1LL;
}

void nw_tcp_options_set_no_fast_open_cookie(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_tcp_options_set_no_fast_open_cookie_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_tcp_options_set_no_fast_open_cookie";
  __int128 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_no_fast_open_cookie";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_tcp(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_tcp_options_set_no_fast_open_cookie";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_no_fast_open_cookie";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_no_fast_open_cookie";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823E6188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_no_fast_open_cookie_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 36);
  uint64_t v2 = a2 + 36;
  unsigned int v4 = v3 & 0xFFFFDFFF | (*(unsigned __int8 *)(v2 + 2) << 16) | (*(unsigned __int8 *)(a1 + 32) << 13);
  *(_WORD *)uint64_t v2 = v3 & 0xDFFF | (*(unsigned __int8 *)(a1 + 32) << 13);
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1LL;
}

BOOL nw_tcp_options_get_no_fast_open_cookie(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_tcp(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v16 = 0;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_tcp_options_get_no_fast_open_cookie_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_tcp_options_get_no_fast_open_cookie";
  __int128 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_no_fast_open_cookie";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_tcp(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_tcp_options_get_no_fast_open_cookie";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_no_fast_open_cookie";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_no_fast_open_cookie";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823E64C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_get_no_fast_open_cookie_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (*(_WORD *)(a2 + 36) & 0x2000) != 0;
  return 1LL;
}

void nw_tcp_options_set_fast_open_force_enable(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_tcp_options_set_fast_open_force_enable_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_tcp_options_set_fast_open_force_enable";
  __int128 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_fast_open_force_enable";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_tcp(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_tcp_options_set_fast_open_force_enable";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_fast_open_force_enable";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_fast_open_force_enable";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823E67D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_fast_open_force_enable_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 36);
  uint64_t v2 = a2 + 36;
  unsigned int v4 = v3 & 0xFFFFBFFF | (*(unsigned __int8 *)(v2 + 2) << 16) | (*(unsigned __int8 *)(a1 + 32) << 14);
  *(_WORD *)uint64_t v2 = v3 & 0xBFFF | (*(unsigned __int8 *)(a1 + 32) << 14);
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1LL;
}

void nw_tcp_options_set_retransmit_fin_drop(nw_protocol_options_t options, BOOL retransmit_fin_drop)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  int v3 = options;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_tcp_options_set_retransmit_fin_drop_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    BOOL v13 = retransmit_fin_drop;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_tcp_options_set_retransmit_fin_drop";
  __int128 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_retransmit_fin_drop";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_tcp(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_tcp_options_set_retransmit_fin_drop";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_retransmit_fin_drop";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_retransmit_fin_drop";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823E6AE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_retransmit_fin_drop_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 36);
  uint64_t v2 = a2 + 36;
  unsigned int v4 = v3 & 0xFFFFFBFF | (*(unsigned __int8 *)(v2 + 2) << 16) | (*(unsigned __int8 *)(a1 + 32) << 10);
  *(_WORD *)uint64_t v2 = v3 & 0xFBFF | (*(unsigned __int8 *)(a1 + 32) << 10);
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1LL;
}

void nw_tcp_options_set_disable_ecn(nw_protocol_options_t options, BOOL disable_ecn)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  int v3 = options;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_tcp_options_set_disable_ecn_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    BOOL v13 = disable_ecn;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_tcp_options_set_disable_ecn";
  __int128 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_disable_ecn";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_tcp(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_tcp_options_set_disable_ecn";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_disable_ecn";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_disable_ecn";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823E6DE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_disable_ecn_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 36);
  uint64_t v2 = a2 + 36;
  unsigned int v4 = v3 & 0xFFFF7FFF | (*(unsigned __int8 *)(v2 + 2) << 16) | (*(unsigned __int8 *)(a1 + 32) << 15);
  *(_WORD *)uint64_t v2 = v3 & 0x7FFF | (*(unsigned __int8 *)(a1 + 32) << 15);
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1LL;
}

BOOL nw_tcp_options_get_disable_ecn(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_tcp(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v16 = 0;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_tcp_options_get_disable_ecn_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_tcp_options_get_disable_ecn";
  __int128 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_disable_ecn";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_tcp(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_tcp_options_get_disable_ecn";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_disable_ecn";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_disable_ecn";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823E7124( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_get_disable_ecn_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(unsigned __int16 *)(a2 + 36) >> 15;
  return 1LL;
}

void nw_tcp_options_set_reset_local_port(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_tcp_options_set_reset_local_port_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_tcp_options_set_reset_local_port";
  __int128 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_reset_local_port";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_tcp(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_tcp_options_set_reset_local_port";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_reset_local_port";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_reset_local_port";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823E7438(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_reset_local_port_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 36);
  uint64_t v2 = a2 + 36;
  unsigned int v4 = (v3 | (*(unsigned __int8 *)(v2 + 2) << 16)) & 0xFFFEFFFF | (*(unsigned __int8 *)(a1 + 32) << 16);
  *(_WORD *)uint64_t v2 = v3;
  *(_BYTE *)(v2 + 2) = BYTE2(v4);
  return 1LL;
}

BOOL nw_tcp_options_get_reset_local_port(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_tcp(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v16 = 0;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_tcp_options_get_reset_local_port_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    BOOL v2 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_tcp_options_get_reset_local_port";
  __int128 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_reset_local_port";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_tcp(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_tcp_options_get_reset_local_port";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_reset_local_port";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_reset_local_port";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823E7774( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_get_reset_local_port_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_BYTE *)(a2 + 38) & 1;
  return 1LL;
}

void nw_tcp_options_set_maximum_segment_size(nw_protocol_options_t options, uint32_t maximum_segment_size)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  int v3 = options;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_tcp_options_set_maximum_segment_size_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    uint32_t v13 = maximum_segment_size;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_tcp_options_set_maximum_segment_size";
  __int128 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_maximum_segment_size";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_tcp(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_tcp_options_set_maximum_segment_size";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_maximum_segment_size";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_maximum_segment_size";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823E7A88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_maximum_segment_size_block_invoke(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 32);
  return 1LL;
}

void nw_tcp_options_set_connection_timeout(nw_protocol_options_t options, uint32_t connection_timeout)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  int v3 = options;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_tcp_options_set_connection_timeout_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    uint32_t v13 = connection_timeout;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_tcp_options_set_connection_timeout";
  __int128 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_connection_timeout";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_tcp(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_tcp_options_set_connection_timeout";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_connection_timeout";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_connection_timeout";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823E7D74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_connection_timeout_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 32);
  return 1LL;
}

void nw_tcp_options_set_persist_timeout(nw_protocol_options_t options, uint32_t persist_timeout)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  int v3 = options;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_tcp_options_set_persist_timeout_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    uint32_t v13 = persist_timeout;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_tcp_options_set_persist_timeout";
  __int128 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_persist_timeout";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_tcp(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_tcp_options_set_persist_timeout";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_persist_timeout";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_persist_timeout";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823E8060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_persist_timeout_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + _Block_object_dispose(va, 8) = *(_DWORD *)(a1 + 32);
  return 1LL;
}

void nw_tcp_options_set_retransmit_connection_drop_time( nw_protocol_options_t options, uint32_t retransmit_connection_drop_time)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  int v3 = options;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_tcp_options_set_retransmit_connection_drop_time_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    uint32_t v13 = retransmit_connection_drop_time;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_tcp_options_set_retransmit_connection_drop_time";
  __int128 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_retransmit_connection_drop_time";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_tcp(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_tcp_options_set_retransmit_connection_drop_time";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_retransmit_connection_drop_time";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_retransmit_connection_drop_time";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823E834C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_retransmit_connection_drop_time_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 32);
  return 1LL;
}

void nw_tcp_options_set_keepalive_count(nw_protocol_options_t options, uint32_t keepalive_count)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  int v3 = options;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_tcp_options_set_keepalive_count_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    uint32_t v13 = keepalive_count;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_tcp_options_set_keepalive_count";
  __int128 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_keepalive_count";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_tcp(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_tcp_options_set_keepalive_count";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_keepalive_count";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_keepalive_count";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823E8638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_keepalive_count_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 32);
  return 1LL;
}

uint64_t nw_tcp_options_get_keepalive_count(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_tcp(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    int v16 = 0;
    *(void *)&buf[16] = 0x2020000000LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_tcp_options_get_keepalive_count_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(unsigned int *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_tcp_options_get_keepalive_count";
  __int128 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_keepalive_count";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_tcp(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_tcp_options_get_keepalive_count";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_keepalive_count";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_keepalive_count";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823E8950( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_get_keepalive_count_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_DWORD *)(a2 + 24);
  return 1LL;
}

void nw_tcp_options_set_keepalive_idle_time(nw_protocol_options_t options, uint32_t keepalive_idle_time)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  int v3 = options;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_tcp_options_set_keepalive_idle_time_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    uint32_t v13 = keepalive_idle_time;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_tcp_options_set_keepalive_idle_time";
  __int128 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_keepalive_idle_time";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_tcp(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_tcp_options_set_keepalive_idle_time";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_keepalive_idle_time";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_keepalive_idle_time";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823E8C60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_keepalive_idle_time_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 32);
  return 1LL;
}

uint64_t nw_tcp_options_get_keepalive_idle_time(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_tcp(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    int v16 = 0;
    *(void *)&buf[16] = 0x2020000000LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_tcp_options_get_keepalive_idle_time_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(unsigned int *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_tcp_options_get_keepalive_idle_time";
  __int128 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_keepalive_idle_time";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_tcp(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_tcp_options_get_keepalive_idle_time";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_keepalive_idle_time";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_keepalive_idle_time";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823E8F78( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_get_keepalive_idle_time_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_DWORD *)(a2 + 16);
  return 1LL;
}

void nw_tcp_options_set_keepalive_interval(nw_protocol_options_t options, uint32_t keepalive_interval)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  int v3 = options;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_tcp_options_set_keepalive_interval_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    uint32_t v13 = keepalive_interval;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_tcp_options_set_keepalive_interval";
  __int128 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_keepalive_interval";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_tcp(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_tcp_options_set_keepalive_interval";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_keepalive_interval";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_keepalive_interval";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823E9288(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_keepalive_interval_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 20) = *(_DWORD *)(a1 + 32);
  return 1LL;
}

uint64_t nw_tcp_options_get_keepalive_interval(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_tcp(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    int v16 = 0;
    *(void *)&buf[16] = 0x2020000000LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_tcp_options_get_keepalive_interval_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(unsigned int *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_tcp_options_get_keepalive_interval";
  __int128 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_keepalive_interval";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_tcp(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_tcp_options_get_keepalive_interval";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_keepalive_interval";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_keepalive_interval";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823E95A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_get_keepalive_interval_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_DWORD *)(a2 + 20);
  return 1LL;
}

void nw_tcp_options_set_multipath_force_version( nw_protocol_options_t options, nw_multipath_version_t multipath_force_version)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  int v3 = options;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_tcp_options_set_multipath_force_version_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    nw_multipath_version_t v13 = multipath_force_version;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_tcp_options_set_multipath_force_version";
  __int128 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_multipath_force_version";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_tcp(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_tcp_options_set_multipath_force_version";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_multipath_force_version";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_multipath_force_version";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823E98B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_multipath_force_version_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 2_Block_object_dispose(va, 8) = *(_DWORD *)(a1 + 32);
  return 1LL;
}

uint64_t nw_tcp_options_get_multipath_force_version(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_tcp(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    int v16 = 0;
    *(void *)&buf[16] = 0x2020000000LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_tcp_options_get_multipath_force_version_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    uint64_t v2 = *(unsigned int *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_tcp_options_get_multipath_force_version";
  __int128 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_multipath_force_version";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_tcp(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_tcp_options_get_multipath_force_version";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_multipath_force_version";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_options_get_multipath_force_version";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823E9BC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_get_multipath_force_version_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_DWORD *)(a2 + 28);
  return 1LL;
}

void nw_tcp_options_set_enable_l4s(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_tcp(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_tcp_options_set_enable_l4s_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    int v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  uint64_t v17 = "nw_tcp_options_set_enable_l4s";
  __int128 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_enable_l4s";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_tcp(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v17 = "nw_tcp_options_set_enable_l4s";
          __int16 v18 = 2082;
          char v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_enable_l4s";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_tcp(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v17 = "nw_tcp_options_set_enable_l4s";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_tcp(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823E9ED8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_options_set_enable_l4s_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
  return 1LL;
}

uint32_t nw_tcp_get_available_receive_buffer(nw_protocol_metadata_t metadata)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = metadata;
  if (nw_protocol_metadata_is_tcp(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    int v16 = 0;
    *(void *)&buf[16] = 0x2020000000LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_tcp_get_available_receive_buffer_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_metadata_access_handle((uint64_t)v1, (uint64_t)v12);
    uint32_t v2 = *(_DWORD *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_tcp_get_available_receive_buffer";
  __int128 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_get_available_receive_buffer";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_tcp(metadata)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_tcp_get_available_receive_buffer";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_tcp(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_get_available_receive_buffer";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_tcp(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_get_available_receive_buffer";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_tcp(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823EA1F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_get_available_receive_buffer_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (os_unfair_lock_s *)(a2 + 56);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 56));
  if (*(void *)a2) {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (*(uint64_t (**)(void))a2)(*(void *)(a2 + 48));
  }
  os_unfair_lock_unlock(v4);
  return 1LL;
}

uint32_t nw_tcp_get_available_send_buffer(nw_protocol_metadata_t metadata)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = metadata;
  if (nw_protocol_metadata_is_tcp(v1))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    int v16 = 0;
    *(void *)&buf[16] = 0x2020000000LL;
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_tcp_get_available_send_buffer_block_invoke;
    v12[3] = &unk_189BC60A8;
    void v12[4] = buf;
    nw_protocol_metadata_access_handle((uint64_t)v1, (uint64_t)v12);
    uint32_t v2 = *(_DWORD *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_tcp_get_available_send_buffer";
  __int128 v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_get_available_send_buffer";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_metadata_is_tcp(metadata)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_tcp_get_available_send_buffer";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_tcp(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_get_available_send_buffer";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_metadata_is_tcp(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_get_available_send_buffer";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_metadata_is_tcp(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823EA570( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_get_available_send_buffer_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (os_unfair_lock_s *)(a2 + 56);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 56));
  __int128 v5 = *(uint64_t (**)(void))(a2 + 8);
  if (v5) {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v5(*(void *)(a2 + 48));
  }
  os_unfair_lock_unlock(v4);
  return 1LL;
}

uint64_t nw_tcp_reset_keepalives(void *a1, char a2, int a3, int a4, int a5)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  os_log_type_t v9 = a1;
  if (nw_protocol_metadata_is_tcp(v9))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    int v28 = 0;
    *(void *)&buf[16] = 0x2020000000LL;
    v20[0] = MEMORY[0x1895F87A8];
    v20[1] = 3221225472LL;
    v20[2] = __nw_tcp_reset_keepalives_block_invoke;
    v20[3] = &unk_189BC4AD8;
    void v20[4] = buf;
    char v24 = a2;
    int v21 = a3;
    int v22 = a4;
    int v23 = a5;
    nw_protocol_metadata_access_handle((uint64_t)v9, (uint64_t)v20);
    uint64_t v10 = *(unsigned int *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  __int128 v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_tcp_reset_keepalives";
  char v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v25 = 0;
  if (__nwlog_fault(v13, &type, &v25))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_reset_keepalives";
        _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s called with null nw_protocol_metadata_is_tcp(metadata)",  buf,  0xCu);
      }
    }

    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_tcp_reset_keepalives";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v14,  v17,  "%{public}s called with null nw_protocol_metadata_is_tcp(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_reset_keepalives";
        _os_log_impl( &dword_181A5C000,  v14,  v17,  "%{public}s called with null nw_protocol_metadata_is_tcp(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_reset_keepalives";
        _os_log_impl( &dword_181A5C000,  v14,  v19,  "%{public}s called with null nw_protocol_metadata_is_tcp(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823EA90C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_reset_keepalives_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (os_unfair_lock_s *)(a2 + 56);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 56));
  __int128 v5 = *(uint64_t (**)(void, void, void, void, void))(a2 + 16);
  if (v5) {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v5( *(void *)(a2 + 48),  *(unsigned __int8 *)(a1 + 52),  *(unsigned int *)(a1 + 40),  *(unsigned int *)(a1 + 44),  *(unsigned int *)(a1 + 48));
  }
  os_unfair_lock_unlock(v4);
  return 1LL;
}

uint64_t nw_tcp_enable_nodelay(void *a1)
{
  return nw_tcp_set_no_delay(a1, 1);
}

uint64_t nw_tcp_set_no_delay(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_metadata_is_tcp(v3))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    int v19 = 0;
    *(void *)&buf[16] = 0x2020000000LL;
    v14[0] = MEMORY[0x1895F87A8];
    v14[1] = 3221225472LL;
    v14[2] = __nw_tcp_set_no_delay_block_invoke;
    v14[3] = &unk_189BC4B00;
    v14[4] = buf;
    char v15 = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v14);
    uint64_t v4 = *(unsigned int *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  __int128 v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_tcp_set_no_delay";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v7, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_set_no_delay";
        _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null nw_protocol_metadata_is_tcp(metadata)",  buf,  0xCu);
      }
    }

    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_tcp_set_no_delay";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null nw_protocol_metadata_is_tcp(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_set_no_delay";
        _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null nw_protocol_metadata_is_tcp(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_set_no_delay";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null nw_protocol_metadata_is_tcp(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823EACA8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_set_no_delay_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a2 + 56);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 56));
  __int128 v5 = *(uint64_t (**)(void, void))(a2 + 24);
  if (v5) {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v5( *(void *)(a2 + 48),  *(unsigned __int8 *)(a1 + 40));
  }
  os_unfair_lock_unlock(v4);
  return 1LL;
}

uint64_t nw_tcp_set_no_push(void *a1, char a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_metadata_is_tcp(v3))
  {
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    int v19 = 0;
    *(void *)&buf[16] = 0x2020000000LL;
    v14[0] = MEMORY[0x1895F87A8];
    v14[1] = 3221225472LL;
    v14[2] = __nw_tcp_set_no_push_block_invoke;
    v14[3] = &unk_189BC4B00;
    v14[4] = buf;
    char v15 = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v14);
    uint64_t v4 = *(unsigned int *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  __int128 v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_tcp_set_no_push";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v7, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_set_no_push";
        _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null nw_protocol_metadata_is_tcp(metadata)",  buf,  0xCu);
      }
    }

    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_tcp_set_no_push";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null nw_protocol_metadata_is_tcp(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_set_no_push";
        _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null nw_protocol_metadata_is_tcp(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_set_no_push";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null nw_protocol_metadata_is_tcp(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823EB034( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_set_no_push_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a2 + 56);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 56));
  __int128 v5 = *(uint64_t (**)(void, void))(a2 + 32);
  if (v5) {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v5( *(void *)(a2 + 48),  *(unsigned __int8 *)(a1 + 40));
  }
  os_unfair_lock_unlock(v4);
  return 1LL;
}

uint64_t nw_tcp_set_no_wake_from_sleep(void *a1, int a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_metadata_is_tcp(v3))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v4 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_tcp_set_no_wake_from_sleep";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = a2;
      _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_INFO,  "%{public}s nw_tcp_set_no_wake_from_sleep do_not_wake %d",  buf,  0x12u);
    }

    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    int v20 = 0;
    *(void *)&buf[16] = 0x2020000000LL;
    v15[0] = MEMORY[0x1895F87A8];
    v15[1] = 3221225472LL;
    v15[2] = __nw_tcp_set_no_wake_from_sleep_block_invoke;
    v15[3] = &unk_189BC4B00;
    void v15[4] = buf;
    char v16 = a2;
    nw_protocol_metadata_access_handle((uint64_t)v3, (uint64_t)v15);
    uint64_t v5 = *(unsigned int *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }

  __nwlog_obj();
  os_log_type_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_tcp_set_no_wake_from_sleep";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v8, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_set_no_wake_from_sleep";
        _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null nw_protocol_metadata_is_tcp(metadata)",  buf,  0xCu);
      }
    }

    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_tcp_set_no_wake_from_sleep";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null nw_protocol_metadata_is_tcp(metadata), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_set_no_wake_from_sleep";
        _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null nw_protocol_metadata_is_tcp(metadata), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tcp_set_no_wake_from_sleep";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null nw_protocol_metadata_is_tcp(metadata), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823EB440( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tcp_set_no_wake_from_sleep_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a2 + 56);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 56));
  uint64_t v5 = *(uint64_t (**)(void, void))(a2 + 40);
  if (v5) {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v5( *(void *)(a2 + 48),  *(unsigned __int8 *)(a1 + 40));
  }
  os_unfair_lock_unlock(v4);
  return 1LL;
}

BOOL nw_mem_buffer_manager_initialize( dispatch_object_s *a1, const char *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v165 = *MEMORY[0x1895F89C0];
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v156 = "nw_mem_buffer_manager_initialize";
    v77 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v153 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v78 = (os_log_s *)__nwlog_obj();
      os_log_type_t v79 = type[0];
      if (!os_log_type_enabled(v78, type[0])) {
        goto LABEL_213;
      }
      *(_DWORD *)buf = 136446210;
      v156 = "nw_mem_buffer_manager_initialize";
      v80 = "%{public}s called with null name";
    }

    else if (v153)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v78 = (os_log_s *)__nwlog_obj();
      os_log_type_t v79 = type[0];
      BOOL v136 = os_log_type_enabled(v78, type[0]);
      if (backtrace_string)
      {
        if (v136)
        {
          *(_DWORD *)buf = 136446466;
          v156 = "nw_mem_buffer_manager_initialize";
          __int16 v157 = 2082;
          *(void *)v158 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v78,  v79,  "%{public}s called with null name, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_213:
        if (!v77) {
          return 0LL;
        }
LABEL_214:
        free(v77);
        return 0LL;
      }

      if (!v136) {
        goto LABEL_213;
      }
      *(_DWORD *)buf = 136446210;
      v156 = "nw_mem_buffer_manager_initialize";
      v80 = "%{public}s called with null name, no backtrace";
    }

    else
    {
      v78 = (os_log_s *)__nwlog_obj();
      os_log_type_t v79 = type[0];
      if (!os_log_type_enabled(v78, type[0])) {
        goto LABEL_213;
      }
      *(_DWORD *)buf = 136446210;
      v156 = "nw_mem_buffer_manager_initialize";
      v80 = "%{public}s called with null name, backtrace limit exceeded";
    }

    goto LABEL_212;
  }

  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v156 = "nw_mem_buffer_manager_initialize";
    v77 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v153 = 0;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!v153)
      {
        v78 = (os_log_s *)__nwlog_obj();
        os_log_type_t v79 = type[0];
        if (!os_log_type_enabled(v78, type[0])) {
          goto LABEL_213;
        }
        *(_DWORD *)buf = 136446210;
        v156 = "nw_mem_buffer_manager_initialize";
        v80 = "%{public}s called with null (obj_size > 0), backtrace limit exceeded";
        goto LABEL_212;
      }

      v137 = (char *)__nw_create_backtrace_string();
      v78 = (os_log_s *)__nwlog_obj();
      os_log_type_t v79 = type[0];
      BOOL v138 = os_log_type_enabled(v78, type[0]);
      if (!v137)
      {
        if (!v138) {
          goto LABEL_213;
        }
        *(_DWORD *)buf = 136446210;
        v156 = "nw_mem_buffer_manager_initialize";
        v80 = "%{public}s called with null (obj_size > 0), no backtrace";
        goto LABEL_212;
      }

      if (v138)
      {
        *(_DWORD *)buf = 136446466;
        v156 = "nw_mem_buffer_manager_initialize";
        __int16 v157 = 2082;
        *(void *)v158 = v137;
        v139 = "%{public}s called with null (obj_size > 0), dumping backtrace:%{public}s";
LABEL_195:
        _os_log_impl(&dword_181A5C000, v78, v79, v139, buf, 0x16u);
      }

void nw_mem_buffer_manager_close(void *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unint64_t v20 = "nw_mem_buffer_manager_close";
    unint64_t v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v20 = "nw_mem_buffer_manager_close";
      BOOL v13 = "%{public}s called with null buffer_manager";
    }

    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v16 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          unint64_t v20 = "nw_mem_buffer_manager_close";
          __int16 v21 = 2082;
          int v22 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s called with null buffer_manager, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_34;
      }

      if (!v16)
      {
LABEL_34:
        if (v10) {
          free(v10);
        }
        return;
      }

      *(_DWORD *)buf = 136446210;
      unint64_t v20 = "nw_mem_buffer_manager_close";
      BOOL v13 = "%{public}s called with null buffer_manager, no backtrace";
    }

    else
    {
      unint64_t v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v20 = "nw_mem_buffer_manager_close";
      BOOL v13 = "%{public}s called with null buffer_manager, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
    goto LABEL_34;
  }

  uint32_t v2 = (void *)a1[11];
  if (v2)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&nw_mem_cache_lock);
    uint64_t v3 = v2[10];
    uint64_t v4 = (void *)v2[11];
    if (v3)
    {
      *(void *)(v3 + 8_Block_object_dispose(va, 8) = v4;
      uint64_t v4 = (void *)v2[11];
    }

    else
    {
      qword_18C45F238 = v2[11];
    }

    *uint64_t v4 = v3;
    os_unfair_lock_unlock((os_unfair_lock_t)&nw_mem_cache_lock);
    nw_mem_cache_magazine_purge((uint64_t)v2);
    if (v2[1])
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
      uint64_t v5 = v2[1];
      *(_DWORD *)buf = 136446978;
      unint64_t v20 = "nw_mem_cache_destroy";
      __int16 v21 = 2082;
      int v22 = (char *)(v2 + 12);
      __int16 v23 = 2048;
      uint64_t v24 = v2;
      __int16 v25 = 2048;
      uint64_t v26 = v5;
      __int128 v6 = (void *)_os_log_send_and_compose_impl();
      if (__nwlog_abort((uint64_t)v6))
      {
        __break(1u);
        return;
      }

      free(v6);
    }

    v2[23] = -1LL;
    v2[24] = -1LL;
    v2[25] = 0LL;
    os_log_type_t v7 = (void *)v2[36];
    if (v7)
    {
      free(v7);
      v2[36] = 0LL;
    }

    if (gLogDatapath)
    {
      uint64_t v14 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        unint64_t v20 = "nw_mem_cache_destroy";
        __int16 v21 = 2082;
        int v22 = (char *)(v2 + 12);
        __int16 v23 = 2048;
        uint64_t v24 = v2;
        _os_log_impl(&dword_181A5C000, v14, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s: nwm %p", buf, 0x20u);
      }
    }

    nw_mem_region_release(v2[27]);
    v2[27] = 0LL;
    uint64_t v8 = (void *)*(v2 - 1);
    if (v8) {
      malloc_zone_free((malloc_zone_t *)g_slab_zone, v8);
    }
    a1[11] = 0LL;
  }

  uint64_t v9 = a1[10];
  if (v9) {
    nw_mem_region_release(v9);
  }
  free(a1);
}

void __nw_mem_buffer_manager_initialize_block_invoke()
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  unsigned int int64_with_default = networkd_settings_get_int64_with_default( (const char *)nw_setting_slab_allocator_segment_size,  0x4000LL);
  else {
    int v1 = int64_with_default;
  }
  unsigned int v2 = -v1 & 0xFFFFC000;
  unsigned int v3 = -v2;
  nw_mem_seg_size = -v2;
  if (!v2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446466;
    uint64_t v24 = "nw_mem_region_init";
    __int16 v25 = 2082;
    *(void *)uint64_t v26 = "VERIFY nw_mem_seg_size != 0 && (nw_mem_seg_size % NW_MEM_PAGE_SIZE) == 0 failed";
    unint64_t v18 = (void *)_os_log_send_and_compose_impl();
    free(v18);
    unsigned int v3 = nw_mem_seg_size;
  }

  unsigned int v4 = networkd_settings_get_int64_with_default((const char *)nw_setting_slab_allocator_buffer_segment_size, v3);
  int v5 = nw_mem_seg_size;
  if (nw_mem_seg_size <= v4) {
    int v5 = v4;
  }
  nw_mem_buf_seg_size = -(-v5 & 0xFFFFC000);
  nw_mem_seg_min_buf_cnt = networkd_settings_get_int64_with_default( (const char *)nw_setting_slab_allocator_buffer_count,  8LL);
  nw_mem_batch_seg_count = networkd_settings_get_int64_with_default( (const char *)nw_setting_slab_allocator_batch_seg_count,  8LL);
  if (gLogDatapath)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v19 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136447234;
      uint64_t v24 = "nw_mem_region_init";
      __int16 v25 = 1024;
      *(_DWORD *)uint64_t v26 = nw_mem_seg_size;
      *(_WORD *)&v26[4] = 1024;
      *(_DWORD *)&v26[6] = nw_mem_buf_seg_size;
      *(_WORD *)uint64_t v27 = 1024;
      *(_DWORD *)&v27[2] = nw_mem_seg_min_buf_cnt;
      LOWORD(v28[0]) = 1024;
      *(_DWORD *)((char *)v28 + 2) = nw_mem_batch_seg_count;
      _os_log_impl( &dword_181A5C000,  v19,  OS_LOG_TYPE_DEBUG,  "%{public}s seg_size %u, buf_seg_size %u buf count %u batch seg count %u",  buf,  0x24u);
    }
  }

  nw_mem_region_head = 0LL;
  qword_18C45F258 = (uint64_t)&nw_mem_region_head;
  if (nw_context_copy_implicit_context::onceToken != -1) {
    dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
  }
  BOOL source = nw_queue_context_create_source( (id)nw_context_copy_implicit_context::implicit_context,  2,  3,  0,  &__block_literal_global_22953,  0LL);
  nw_mem_region_update_BOOL source = source;
  if (source)
  {
    uint64_t v7 = source;
    dispatch_time_t v8 = dispatch_time(0x8000000000000000LL, 13000000000LL);
    if (*(void *)v7)
    {
      dispatch_source_set_timer(*(dispatch_source_t *)v7, v8, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
    }

    else
    {
      *(void *)(v7 + 32) = v8;
      *(void *)(v7 + 40) = -1LL;
      if (*(_BYTE *)(v7 + 48) && *(_BYTE *)(v7 + 49)) {
        nw_queue_source_run_timer(v7, v8);
      }
    }

    nw_queue_activate_source(nw_mem_region_update_source, v8);
  }

  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    uint64_t v24 = "nw_mem_region_init";
    uint64_t v9 = (void *)_os_log_send_and_compose_impl();
    free(v9);
  }

  LOBYTE(nw_mem_debug) = networkd_settings_get_int64_with_default( (const char *)nw_setting_slab_allocator_debug,  nw_mem_debug) & 3;
  nw_mem_debug = nw_mem_debug;
  nw_mem_dump_slab_stats = networkd_settings_get_BOOL((const char *)nw_setting_slab_allocator_dump_stats_enable);
  nw_mem_cache_head = 0LL;
  qword_18C45F238 = (uint64_t)&nw_mem_cache_head;
  if (dword_18C45E914 < 128
    || (uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)dword_18C45E914), v10.i16[0] = vaddlv_u8(v10), v10.i32[0] >= 2u))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446466;
    uint64_t v24 = "nw_mem_cache_init";
    __int16 v25 = 1024;
    *(_DWORD *)uint64_t v26 = dword_18C45E914;
    unint64_t v11 = (void *)_os_log_send_and_compose_impl();
    free(v11);
  }

  snprintf(byte_18C45E928, 0x40uLL, "%s_mem_mg_%d", "NWSlab", nw_mem_magtype);
  if (nw_mem_magtype > nw_mem_cache_magsize_max) {
    nw_mem_cache_magsize_max = nw_mem_magtype;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&nw_mem_cache_lock);
  uint64_t v13 = nw_mem_cache_head;
  if (nw_mem_cache_head)
  {
    *(void *)&__int128 v12 = 136446978LL;
    do
    {
      if ((*(_BYTE *)(v13 + 176) & 1) == 0)
      {
        *(_DWORD *)(v13 + 560) = **(_DWORD **)(v13 + 336);
        if (gLogDatapath)
        {
          __int128 v22 = v12;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          log = (os_log_s *)gLogObj;
          BOOL v14 = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG);
          __int128 v12 = v22;
          if (v14)
          {
            uint64_t v15 = *(void *)(v13 + 232);
            int v16 = *(_DWORD *)(v13 + 560);
            *(_DWORD *)buf = v22;
            uint64_t v24 = "nw_mem_cache_magazine_enable";
            __int16 v25 = 2048;
            *(void *)uint64_t v26 = v13;
            *(_WORD *)&v26[8] = 1024;
            *(_DWORD *)uint64_t v27 = v15;
            *(_WORD *)&v27[4] = 1024;
            v28[0] = v16;
            _os_log_impl( &dword_181A5C000,  log,  OS_LOG_TYPE_DEBUG,  "%{public}s nwm %p chunksize %u magsize %d",  buf,  0x22u);
            __int128 v12 = v22;
          }
        }
      }

      uint64_t v13 = *(void *)(v13 + 80);
    }

    while (v13);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&nw_mem_cache_lock);
  nw_mem_cache_ready = 1;
  if (nw_mem_dump_slab_stats) {
    atexit(nw_mem_cache_stats_dump);
  }
  zone = malloc_create_zone((((dword_18C45E914 + 8 * nw_mem_magtype) << 9) + 556288), 0);
  g_slab_zone = (uint64_t)zone;
  if (zone) {
    goto LABEL_32;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  uint64_t v24 = "nw_mem_allocate_zone";
  unint64_t v20 = (void *)_os_log_send_and_compose_impl();
  if (!__nwlog_abort((uint64_t)v20))
  {
    free(v20);
    zone = (malloc_zone_t *)g_slab_zone;
LABEL_32:
    malloc_set_zone_name(zone, "NWMallocZone");
    return;
  }

BOOL nw_protocol_http_early_data_create(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v21 = "nw_protocol_http_early_data_create";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v9, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint8x8_t v10 = (os_log_s *)__nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v21 = "nw_protocol_http_early_data_create";
          __int128 v12 = "%{public}s called with null parameters";
LABEL_27:
          _os_log_impl(&dword_181A5C000, v10, v11, v12, buf, 0xCu);
        }
      }

      else if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint8x8_t v10 = (os_log_s *)__nwlog_obj();
        os_log_type_t v11 = type;
        BOOL v17 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v21 = "nw_protocol_http_early_data_create";
            __int16 v22 = 2082;
            uint64_t v23 = (uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_28;
        }

        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v21 = "nw_protocol_http_early_data_create";
          __int128 v12 = "%{public}s called with null parameters, no backtrace";
          goto LABEL_27;
        }
      }

      else
      {
        uint8x8_t v10 = (os_log_s *)__nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v21 = "nw_protocol_http_early_data_create";
          __int128 v12 = "%{public}s called with null parameters, backtrace limit exceeded";
          goto LABEL_27;
        }
      }
    }

uint64_t nw_protocol_http_early_data_create::$_0::__invoke( nw_protocol_http_early_data_create::$_0 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1LL;
}

void ___ZL41nw_protocol_http_early_data_get_callbacksv_block_invoke()
{
  qword_18C5A42C8 = (uint64_t)nw_protocol_common_get_parameters;
  unk_18C5A42D0 = nw_protocol_common_get_path;
  qword_18C5A42D8 = (uint64_t)nw_protocol_common_get_local_endpoint;
  unk_18C5A42E0 = nw_protocol_common_get_remote_endpoint;
  qword_18C5A4268 = (uint64_t)nw_protocol_common_replace_input_handler;
  unk_18C5A4270 = nw_protocol_common_connect;
  qword_18C5A4318 = (uint64_t)nw_protocol_common_output_finished;
  unk_18C5A4320 = nw_protocol_common_get_output_local_endpoint;
  qword_18C5A4360 = (uint64_t)nw_protocol_common_input_flush;
  qword_18C5A4328 = (uint64_t)nw_protocol_common_get_output_interface;
  qword_18C5A4330 = (uint64_t)nw_protocol_common_waiting_for_output;
  unk_18C5A4338 = nw_protocol_common_copy_info;
  qword_18C5A42E8 = (uint64_t)nw_protocol_common_register_notification;
  unk_18C5A42F0 = nw_protocol_common_unregister_notification;
  qword_18C5A42F8 = (uint64_t)nw_protocol_common_notify;
  unk_18C5A4300 = nw_protocol_common_updated_path;
  qword_18C5A42A8 = (uint64_t)nw_protocol_common_get_input_frames;
  unk_18C5A42B0 = nw_protocol_http_early_data_get_output_frames;
  qword_18C5A42B8 = (uint64_t)nw_protocol_http_early_data_finalize_output_frames;
  unk_18C5A42C0 = nw_protocol_common_link_state;
  qword_18C5A4298 = (uint64_t)nw_protocol_common_input_available;
  unk_18C5A42A0 = nw_protocol_http_early_data_output_available;
  nw_protocol_http_early_data_get_callbacks(void)::protocol_callbacks = (uint64_t)nw_protocol_common_add_input_handler;
  unk_18C5A4260 = nw_protocol_http_early_data_remove_input_handler;
  qword_18C5A4350 = (uint64_t)nw_protocol_common_get_message_properties;
  unk_18C5A4358 = nw_protocol_http_early_data_reset;
  qword_18C5A4278 = (uint64_t)nw_protocol_common_disconnect;
  unk_18C5A4280 = nw_protocol_http_early_data_connected;
  qword_18C5A4288 = (uint64_t)nw_protocol_http_early_data_disconnected;
  unk_18C5A4290 = nw_protocol_http_early_data_error;
  qword_18C5A4308 = (uint64_t)nw_protocol_http_early_data_supports_external_data;
  unk_18C5A4310 = nw_protocol_common_input_finished;
}

uint64_t nw_protocol_http_early_data_get_output_frames( nw_protocol *a1, nw_protocol *a2, uint64_t a3, uint64_t a4, uint64_t a5, nw_frame_array_s *a6)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v22 = "nw_protocol_http_early_data_get_output_frames";
    dispatch_time_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v22 = "nw_protocol_http_early_data_get_output_frames";
      os_log_type_t v11 = "%{public}s called with null protocol";
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v22 = "nw_protocol_http_early_data_get_output_frames";
          __int16 v23 = 2082;
          __int16 v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_52:
        if (!v8) {
          return 0LL;
        }
LABEL_53:
        free(v8);
        return 0LL;
      }

      if (!v13) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v22 = "nw_protocol_http_early_data_get_output_frames";
      os_log_type_t v11 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v22 = "nw_protocol_http_early_data_get_output_frames";
      os_log_type_t v11 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_51;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v22 = "nw_protocol_http_early_data_get_output_frames";
    dispatch_time_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v19)
      {
        uint64_t v9 = (os_log_s *)__nwlog_obj();
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_52;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v22 = "nw_protocol_http_early_data_get_output_frames";
        os_log_type_t v11 = "%{public}s called with null http_early_data, backtrace limit exceeded";
        goto LABEL_51;
      }

      BOOL v14 = (char *)__nw_create_backtrace_string();
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (!v14)
      {
        if (!v15) {
          goto LABEL_52;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v22 = "nw_protocol_http_early_data_get_output_frames";
        os_log_type_t v11 = "%{public}s called with null http_early_data, no backtrace";
        goto LABEL_51;
      }

      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v22 = "nw_protocol_http_early_data_get_output_frames";
        __int16 v23 = 2082;
        __int16 v24 = v14;
        int v16 = "%{public}s called with null http_early_data, dumping backtrace:%{public}s";
LABEL_34:
        _os_log_impl(&dword_181A5C000, v9, v10, v16, buf, 0x16u);
      }

uint64_t nw_protocol_http_early_data_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v26 = "nw_protocol_http_early_data_finalize_output_frames";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = (os_log_s *)__nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_53;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v26 = "nw_protocol_http_early_data_finalize_output_frames";
      __int128 v12 = "%{public}s called with null protocol";
LABEL_52:
      _os_log_impl(&dword_181A5C000, v10, v11, v12, buf, 0xCu);
      goto LABEL_53;
    }

    if (!v23)
    {
      os_log_type_t v10 = (os_log_s *)__nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_protocol_http_early_data_finalize_output_frames";
        __int128 v12 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_52;
      }

      goto LABEL_53;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = (os_log_s *)__nwlog_obj();
    os_log_type_t v11 = type;
    BOOL v15 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_protocol_http_early_data_finalize_output_frames";
        __int128 v12 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_52;
      }

      goto LABEL_53;
    }

    if (!v15) {
      goto LABEL_39;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v26 = "nw_protocol_http_early_data_finalize_output_frames";
    __int16 v27 = 2082;
    unint64_t v28 = backtrace_string;
    int v16 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_38:
    _os_log_impl(&dword_181A5C000, v10, v11, v16, buf, 0x16u);
    goto LABEL_39;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v26 = "nw_protocol_http_early_data_finalize_output_frames";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = (os_log_s *)__nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_53;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v26 = "nw_protocol_http_early_data_finalize_output_frames";
      __int128 v12 = "%{public}s called with null http_early_data";
      goto LABEL_52;
    }

    if (!v23)
    {
      os_log_type_t v10 = (os_log_s *)__nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_protocol_http_early_data_finalize_output_frames";
        __int128 v12 = "%{public}s called with null http_early_data, backtrace limit exceeded";
        goto LABEL_52;
      }

      goto LABEL_53;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = (os_log_s *)__nwlog_obj();
    os_log_type_t v11 = type;
    BOOL v17 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_protocol_http_early_data_finalize_output_frames";
        __int128 v12 = "%{public}s called with null http_early_data, no backtrace";
        goto LABEL_52;
      }

      goto LABEL_53;
    }

    if (!v17) {
      goto LABEL_39;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v26 = "nw_protocol_http_early_data_finalize_output_frames";
    __int16 v27 = 2082;
    unint64_t v28 = backtrace_string;
    int v16 = "%{public}s called with null http_early_data, dumping backtrace:%{public}s";
    goto LABEL_38;
  }

  if (a2)
  {
    if ((handle[198] & 1) == 0)
    {
      if (gLogDatapath)
      {
        BOOL v13 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          uint64_t v26 = "nw_protocol_http_early_data_finalize_output_frames";
          __int16 v27 = 2082;
          unint64_t v28 = handle + 114;
          __int16 v29 = 2080;
          uint64_t v30 = " ";
          _os_log_impl(&dword_181A5C000, v13, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
        }
      }
    }

    if ((handle[256] & 2) != 0)
    {
      v19[0] = MEMORY[0x1895F87A8];
      v19[1] = 0x40000000LL;
      unint64_t v20 = ___ZL50nw_protocol_http_early_data_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke;
      __int16 v21 = &__block_descriptor_tmp_8_63785;
      __int16 v22 = handle;
      tqh_first = a2->tqh_first;
      do
      {
        if (!tqh_first) {
          break;
        }
        __int128 v6 = (nw_frame *)*((void *)tqh_first + 4);
        char v7 = ((uint64_t (*)(void *))v20)(v19);
        tqh_first = v6;
      }

      while ((v7 & 1) != 0);
    }

    return nw_protocol_finalize_output_frames((uint64_t)a1->output_handler, (uint64_t)a2);
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v26 = "nw_protocol_http_early_data_finalize_output_frames";
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v23)
    {
      os_log_type_t v10 = (os_log_s *)__nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_protocol_http_early_data_finalize_output_frames";
        __int128 v12 = "%{public}s called with null frames, backtrace limit exceeded";
        goto LABEL_52;
      }

      goto LABEL_53;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v10 = (os_log_s *)__nwlog_obj();
    os_log_type_t v11 = type;
    BOOL v18 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v26 = "nw_protocol_http_early_data_finalize_output_frames";
        __int128 v12 = "%{public}s called with null frames, no backtrace";
        goto LABEL_52;
      }

      goto LABEL_53;
    }

    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v26 = "nw_protocol_http_early_data_finalize_output_frames";
      __int16 v27 = 2082;
      unint64_t v28 = backtrace_string;
      int v16 = "%{public}s called with null frames, dumping backtrace:%{public}s";
      goto LABEL_38;
    }

void nw_protocol_http_early_data_output_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v15 = "nw_protocol_http_early_data_output_available";
    unsigned int v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_39;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v15 = "nw_protocol_http_early_data_output_available";
      __int128 v6 = "%{public}s called with null protocol";
    }

    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v9 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v15 = "nw_protocol_http_early_data_output_available";
          __int16 v16 = 2082;
          BOOL v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v3) {
          return;
        }
LABEL_40:
        free(v3);
        return;
      }

      if (!v9) {
        goto LABEL_39;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v15 = "nw_protocol_http_early_data_output_available";
      __int128 v6 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      unsigned int v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_39;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v15 = "nw_protocol_http_early_data_output_available";
      __int128 v6 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

uint64_t nw_protocol_http_early_data_remove_input_handler(nw_protocol *a1, nw_protocol *a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    handle = a1->handle;
    if (handle)
    {
      v13[0] = MEMORY[0x1895F87A8];
      v13[1] = 0x40000000LL;
      v13[2] = ___ZL48nw_protocol_http_early_data_remove_input_handlerP11nw_protocolS0_b_block_invoke_2;
      v13[3] = &__block_descriptor_tmp_14_63754;
      char v14 = a3;
      v13[4] = handle;
      return nw_protocol_common_remove_input_handler_with_cleanup_blocks( a1,  a2,  a3,  (uint64_t)&__block_literal_global_13_63755,  (uint64_t)v13);
    }

    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v18 = "nw_protocol_http_early_data_remove_input_handler";
    os_log_type_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v16 = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (v16 == OS_LOG_TYPE_FAULT)
    {
      __int128 v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = v16;
      if (os_log_type_enabled(v6, v16))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_protocol_http_early_data_remove_input_handler";
        dispatch_time_t v8 = "%{public}s called with null http_early_data";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (!v15)
    {
      __int128 v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = v16;
      if (os_log_type_enabled(v6, v16))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_protocol_http_early_data_remove_input_handler";
        dispatch_time_t v8 = "%{public}s called with null http_early_data, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __int128 v6 = (os_log_s *)__nwlog_obj();
    os_log_type_t v7 = v16;
    BOOL v12 = os_log_type_enabled(v6, v16);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_protocol_http_early_data_remove_input_handler";
        dispatch_time_t v8 = "%{public}s called with null http_early_data, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v18 = "nw_protocol_http_early_data_remove_input_handler";
      __int16 v19 = 2082;
      uint64_t v20 = backtrace_string;
      BOOL v11 = "%{public}s called with null http_early_data, dumping backtrace:%{public}s";
      goto LABEL_21;
    }

    goto LABEL_22;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v18 = "nw_protocol_http_early_data_remove_input_handler";
  os_log_type_t v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v16 = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (v16 != OS_LOG_TYPE_FAULT)
  {
    if (!v15)
    {
      __int128 v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = v16;
      if (os_log_type_enabled(v6, v16))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_protocol_http_early_data_remove_input_handler";
        dispatch_time_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __int128 v6 = (os_log_s *)__nwlog_obj();
    os_log_type_t v7 = v16;
    BOOL v10 = os_log_type_enabled(v6, v16);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v18 = "nw_protocol_http_early_data_remove_input_handler";
        dispatch_time_t v8 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v18 = "nw_protocol_http_early_data_remove_input_handler";
      __int16 v19 = 2082;
      uint64_t v20 = backtrace_string;
      BOOL v11 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v6, v7, v11, buf, 0x16u);
    }

uint64_t nw_protocol_http_early_data_reset(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v25 = "nw_protocol_http_early_data_reset";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_58;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v25 = "nw_protocol_http_early_data_reset";
      char v15 = "%{public}s called with null protocol";
LABEL_57:
      _os_log_impl(&dword_181A5C000, v13, v14, v15, buf, 0xCu);
      goto LABEL_58;
    }

    if (!v22)
    {
      BOOL v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v25 = "nw_protocol_http_early_data_reset";
        char v15 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_57;
      }

      goto LABEL_58;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v13 = (os_log_s *)__nwlog_obj();
    os_log_type_t v14 = type;
    BOOL v18 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v25 = "nw_protocol_http_early_data_reset";
        char v15 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_57;
      }

      goto LABEL_58;
    }

    if (!v18) {
      goto LABEL_44;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v25 = "nw_protocol_http_early_data_reset";
    __int16 v26 = 2082;
    __int16 v27 = backtrace_string;
    __int16 v19 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_43:
    _os_log_impl(&dword_181A5C000, v13, v14, v19, buf, 0x16u);
    goto LABEL_44;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v25 = "nw_protocol_http_early_data_reset";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      if (!os_log_type_enabled(v13, type)) {
        goto LABEL_58;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v25 = "nw_protocol_http_early_data_reset";
      char v15 = "%{public}s called with null http_early_data";
      goto LABEL_57;
    }

    if (!v22)
    {
      BOOL v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v25 = "nw_protocol_http_early_data_reset";
        char v15 = "%{public}s called with null http_early_data, backtrace limit exceeded";
        goto LABEL_57;
      }

      goto LABEL_58;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v13 = (os_log_s *)__nwlog_obj();
    os_log_type_t v14 = type;
    BOOL v20 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v25 = "nw_protocol_http_early_data_reset";
        char v15 = "%{public}s called with null http_early_data, no backtrace";
        goto LABEL_57;
      }

      goto LABEL_58;
    }

    if (!v20) {
      goto LABEL_44;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v25 = "nw_protocol_http_early_data_reset";
    __int16 v26 = 2082;
    __int16 v27 = backtrace_string;
    __int16 v19 = "%{public}s called with null http_early_data, dumping backtrace:%{public}s";
    goto LABEL_43;
  }

  if (a2)
  {
    if ((handle[198] & 1) == 0)
    {
      if (gLogDatapath)
      {
        os_log_type_t v16 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          __int16 v25 = "nw_protocol_http_early_data_reset";
          __int16 v26 = 2082;
          __int16 v27 = handle + 114;
          __int16 v28 = 2080;
          __int16 v29 = " ";
          _os_log_impl(&dword_181A5C000, v16, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
        }
      }
    }

    char v5 = handle[208];
    if ((v5 & 1) != 0)
    {
      __int128 v6 = (void *)*((void *)handle + 25);
      if (v6)
      {
        os_release(v6);
        char v5 = handle[208];
      }
    }

    *((void *)handle + 25) = 0LL;
    handle[208] = v5 | 1;
    char v7 = handle[224];
    if ((v7 & 1) != 0)
    {
      dispatch_time_t v8 = (void *)*((void *)handle + 27);
      if (v8)
      {
        os_release(v8);
        char v7 = handle[224];
      }
    }

    *((void *)handle + 27) = 0LL;
    handle[224] = v7 | 1;
    char v9 = handle[240];
    if ((v9 & 1) != 0)
    {
      BOOL v10 = (dispatch_object_s *)*((void *)handle + 29);
      if (v10)
      {
        dispatch_release(v10);
        char v9 = handle[240];
      }
    }

    *((void *)handle + 29) = 0LL;
    handle[240] = v9 | 1;
    handle[256] &= 0xF1u;
    nw_protocol_reset((uint64_t)a1->output_handler, (uint64_t)a2);
    return 1LL;
  }

  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v25 = "nw_protocol_http_early_data_reset";
  BOOL v12 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v22)
    {
      BOOL v13 = (os_log_s *)__nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v25 = "nw_protocol_http_early_data_reset";
        char v15 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_57;
      }

      goto LABEL_58;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v13 = (os_log_s *)__nwlog_obj();
    os_log_type_t v14 = type;
    BOOL v21 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v25 = "nw_protocol_http_early_data_reset";
        char v15 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_57;
      }

      goto LABEL_58;
    }

    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v25 = "nw_protocol_http_early_data_reset";
      __int16 v26 = 2082;
      __int16 v27 = backtrace_string;
      __int16 v19 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_43;
    }

void nw_protocol_http_early_data_connected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v27 = "nw_protocol_http_early_data_connected";
    BOOL v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v27 = "nw_protocol_http_early_data_connected";
      os_log_type_t v16 = "%{public}s called with null protocol";
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v21 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v27 = "nw_protocol_http_early_data_connected";
          __int16 v28 = 2082;
          __int16 v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_40;
      }

      if (!v21) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v27 = "nw_protocol_http_early_data_connected";
      os_log_type_t v16 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      os_log_type_t v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v27 = "nw_protocol_http_early_data_connected";
      os_log_type_t v16 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_39;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v27 = "nw_protocol_http_early_data_connected";
    BOOL v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v27 = "nw_protocol_http_early_data_connected";
      os_log_type_t v16 = "%{public}s called with null http_early_data";
    }

    else if (v24)
    {
      BOOL v17 = (char *)__nw_create_backtrace_string();
      os_log_type_t v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v22 = os_log_type_enabled(v14, type);
      if (v17)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v27 = "nw_protocol_http_early_data_connected";
          __int16 v28 = 2082;
          __int16 v29 = v17;
          __int16 v19 = "%{public}s called with null http_early_data, dumping backtrace:%{public}s";
          goto LABEL_32;
        }

void nw_protocol_http_early_data_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v25 = "nw_protocol_http_early_data_disconnected";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_64;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v25 = "nw_protocol_http_early_data_disconnected";
      BOOL v13 = "%{public}s called with null protocol";
    }

    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v25 = "nw_protocol_http_early_data_disconnected";
          __int16 v26 = 2082;
          __int16 v27 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_64:
        if (!v10) {
          return;
        }
        goto LABEL_65;
      }

      if (!v15) {
        goto LABEL_64;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v25 = "nw_protocol_http_early_data_disconnected";
      BOOL v13 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      char v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_64;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v25 = "nw_protocol_http_early_data_disconnected";
      BOOL v13 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_63;
  }

  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v25 = "nw_protocol_http_early_data_disconnected";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v22)
      {
        char v11 = (os_log_s *)__nwlog_obj();
        os_log_type_t v12 = type;
        if (!os_log_type_enabled(v11, type)) {
          goto LABEL_64;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v25 = "nw_protocol_http_early_data_disconnected";
        BOOL v13 = "%{public}s called with null http_early_data, backtrace limit exceeded";
        goto LABEL_63;
      }

      os_log_type_t v16 = (char *)__nw_create_backtrace_string();
      char v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (!v16)
      {
        if (!v17) {
          goto LABEL_64;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v25 = "nw_protocol_http_early_data_disconnected";
        BOOL v13 = "%{public}s called with null http_early_data, no backtrace";
        goto LABEL_63;
      }

      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v25 = "nw_protocol_http_early_data_disconnected";
        __int16 v26 = 2082;
        __int16 v27 = v16;
        BOOL v18 = "%{public}s called with null http_early_data, dumping backtrace:%{public}s";
LABEL_46:
        _os_log_impl(&dword_181A5C000, v11, v12, v18, buf, 0x16u);
      }

void nw_protocol_http_early_data_error(nw_protocol *a1, nw_protocol *a2, int a3)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v17 = "nw_protocol_http_early_data_error";
    int v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v17 = "nw_protocol_http_early_data_error";
      id v7 = "%{public}s called with null protocol";
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v17 = "nw_protocol_http_early_data_error";
          __int16 v18 = 2082;
          BOOL v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_50:
        if (!v4) {
          return;
        }
        goto LABEL_51;
      }

      if (!v9) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v17 = "nw_protocol_http_early_data_error";
      id v7 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      char v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v17 = "nw_protocol_http_early_data_error";
      id v7 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_49;
  }

  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v17 = "nw_protocol_http_early_data_error";
    int v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v14)
      {
        char v5 = (os_log_s *)__nwlog_obj();
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_50;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_protocol_http_early_data_error";
        id v7 = "%{public}s called with null http_early_data, backtrace limit exceeded";
        goto LABEL_49;
      }

      BOOL v10 = (char *)__nw_create_backtrace_string();
      char v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v11 = os_log_type_enabled(v5, type);
      if (!v10)
      {
        if (!v11) {
          goto LABEL_50;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v17 = "nw_protocol_http_early_data_error";
        id v7 = "%{public}s called with null http_early_data, no backtrace";
        goto LABEL_49;
      }

      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v17 = "nw_protocol_http_early_data_error";
        __int16 v18 = 2082;
        BOOL v19 = v10;
        os_log_type_t v12 = "%{public}s called with null http_early_data, dumping backtrace:%{public}s";
LABEL_34:
        _os_log_impl(&dword_181A5C000, v5, v6, v12, buf, 0x16u);
      }

uint64_t nw_protocol_http_early_data_supports_external_data(nw_protocol *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    handle = a1->handle;
    if (handle) {
      return nw_protocol_supports_external_data(handle[6]);
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v14 = "nw_protocol_http_early_data_supports_external_data";
    unsigned int v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (__nwlog_fault(v3, &type, &v11))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v4 = (os_log_s *)__nwlog_obj();
        os_log_type_t v5 = type;
        if (!os_log_type_enabled(v4, type)) {
          goto LABEL_32;
        }
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_protocol_http_early_data_supports_external_data";
        os_log_type_t v6 = "%{public}s called with null http_early_data";
        goto LABEL_31;
      }

      if (!v11)
      {
        int v4 = (os_log_s *)__nwlog_obj();
        os_log_type_t v5 = type;
        if (!os_log_type_enabled(v4, type)) {
          goto LABEL_32;
        }
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_protocol_http_early_data_supports_external_data";
        os_log_type_t v6 = "%{public}s called with null http_early_data, backtrace limit exceeded";
        goto LABEL_31;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      int v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v10 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          char v14 = "nw_protocol_http_early_data_supports_external_data";
          __int16 v15 = 2082;
          os_log_type_t v16 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null http_early_data, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v3) {
          return 0LL;
        }
        goto LABEL_33;
      }

      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        char v14 = "nw_protocol_http_early_data_supports_external_data";
        os_log_type_t v6 = "%{public}s called with null http_early_data, no backtrace";
LABEL_31:
        _os_log_impl(&dword_181A5C000, v4, v5, v6, buf, 0xCu);
      }
    }
  }

  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v14 = "nw_protocol_http_early_data_supports_external_data";
    unsigned int v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      char v14 = "nw_protocol_http_early_data_supports_external_data";
      os_log_type_t v6 = "%{public}s called with null protocol";
      goto LABEL_31;
    }

    if (!v11)
    {
      int v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (!os_log_type_enabled(v4, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      char v14 = "nw_protocol_http_early_data_supports_external_data";
      os_log_type_t v6 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_31;
    }

    id v7 = (char *)__nw_create_backtrace_string();
    int v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!v7)
    {
      if (!v8) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 136446210;
      char v14 = "nw_protocol_http_early_data_supports_external_data";
      os_log_type_t v6 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_31;
    }

    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      char v14 = "nw_protocol_http_early_data_supports_external_data";
      __int16 v15 = 2082;
      os_log_type_t v16 = v7;
      _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v7);
  }

void nw_http_early_data_replay(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 256) & 4) != 0)
  {
    uint64_t v2 = MEMORY[0x1895F87A8];
    while (1)
    {
      v13[0] = 0LL;
      v13[1] = v13;
      unsigned int v3 = *(dispatch_data_s **)(a1 + 232);
      uint64_t v4 = v3 ? dispatch_data_get_size(v3) : 0LL;
      if (!nw_protocol_get_output_frames( *(void *)(a1 + 32),  a1,  (_DWORD)v4 != 0,  v4,  0xFFFFFFFFLL,  (uint64_t)v13)) {
        break;
      }
      v8[0] = v2;
      v8[1] = 0x40000000LL;
      BOOL v9 = ___ZL25nw_http_early_data_replayP27nw_protocol_http_early_data_block_invoke;
      BOOL v10 = &__block_descriptor_tmp_11_63719;
      uint64_t v11 = a1;
      int v12 = v4;
      uint64_t v5 = v13[0];
      do
      {
        if (!v5) {
          break;
        }
        uint64_t v6 = *(void *)(v5 + 32);
        char v7 = ((uint64_t (*)(void *))v9)(v8);
        uint64_t v5 = v6;
      }

      while ((v7 & 1) != 0);
      nw_protocol_finalize_output_frames(*(void *)(a1 + 32), (uint64_t)v13);
      if ((*(_BYTE *)(a1 + 256) & 4) == 0) {
        goto LABEL_2;
      }
    }
  }

  else
  {
LABEL_2:
    nw_protocol_connected(*(void **)(a1 + 48), a1);
  }

uint64_t ___ZL25nw_http_early_data_replayP27nw_protocol_http_early_data_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v60 = *MEMORY[0x1895F89C0];
  uint64_t v4 = *(void *)(a1 + 32);
  if (!*(void *)(v4 + 232))
  {
LABEL_8:
    *(_BYTE *)(v4 + 256) &= ~4u;
    int v8 = (*(unsigned __int8 *)(*(void *)(a1 + 32) + 256LL) >> 3) & 1;
    goto LABEL_41;
  }

  if (!nw_frame_uses_external_data(a2))
  {
    uint64_t v48 = 0LL;
    int v51 = 0;
    __int16 v49 = &v48;
    uint64_t v50 = 0x2000000000LL;
    v47[0] = 0LL;
    v47[1] = v47;
    v47[2] = 0x2000000000LL;
    v47[3] = nw_frame_unclaimed_bytes(a2, &v51);
    uint64_t v43 = 0LL;
    __int16 v44 = &v43;
    int v46 = 0;
    uint64_t v45 = 0x2000000000LL;
    BOOL v9 = *(dispatch_data_s **)(*(void *)(a1 + 32) + 232LL);
    applier[0] = MEMORY[0x1895F87A8];
    applier[1] = 0x40000000LL;
    applier[2] = ___ZL25nw_http_early_data_replayP27nw_protocol_http_early_data_block_invoke_2;
    applier[3] = &unk_189BC4C28;
    applier[4] = &v48;
    applier[5] = v47;
    applier[6] = &v43;
    dispatch_data_apply(v9, applier);
    if (!*((_DWORD *)v49 + 6))
    {
LABEL_31:
      size_t v31 = *((unsigned int *)v44 + 6);
      uint64_t v32 = *(void *)(a1 + 32);
      if (*(_DWORD *)(a1 + 40) == (_DWORD)v31)
      {
        char v33 = *(_BYTE *)(v32 + 240);
        if ((v33 & 1) != 0)
        {
          uint64_t v34 = *(dispatch_object_s **)(v32 + 232);
          if (v34)
          {
            dispatch_release(v34);
            char v33 = *(_BYTE *)(v32 + 240);
          }
        }

        *(void *)(v32 + 232) = 0LL;
        *(_BYTE *)(v32 + 240) = v33 | 1;
        *(_BYTE *)(*(void *)(a1 + 32) + 256LL) &= ~4u;
        int v8 = (*(unsigned __int8 *)(*(void *)(a1 + 32) + 256LL) >> 3) & 1;
      }

      else
      {
        dispatch_data_t subrange = dispatch_data_create_subrange(*(dispatch_data_t *)(v32 + 232), v31, 0xFFFFFFFFFFFFFFFFLL);
        uint64_t v36 = *(void *)(a1 + 32);
        char v37 = *(_BYTE *)(v36 + 240);
        if ((v37 & 1) != 0)
        {
          int v38 = *(dispatch_object_s **)(v36 + 232);
          if (v38)
          {
            dispatch_release(v38);
            char v37 = *(_BYTE *)(v36 + 240);
          }
        }

        int v8 = 0;
        *(void *)(v36 + 232) = subrange;
        *(_BYTE *)(v36 + 240) = v37 | 1;
      }

      _Block_object_dispose(&v43, 8);
      _Block_object_dispose(v47, 8);
      _Block_object_dispose(&v48, 8);
      goto LABEL_41;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v10 = *((_DWORD *)v44 + 6);
    int v11 = *((_DWORD *)v49 + 6);
    unsigned int buf = 136446722;
    unint64_t v53 = "nw_http_early_data_replay_block_invoke";
    __int16 v54 = 1024;
    int v55 = v10;
    __int16 v56 = 1024;
    int v57 = v11;
    int v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (__nwlog_fault(v12, &type, &v40))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v14 = (os_log_s *)gLogObj;
        os_log_type_t v15 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          int v16 = *((_DWORD *)v44 + 6);
          int v17 = *((_DWORD *)v49 + 6);
          unsigned int buf = 136446722;
          unint64_t v53 = "nw_http_early_data_replay_block_invoke";
          __int16 v54 = 1024;
          int v55 = v16;
          __int16 v56 = 1024;
          int v57 = v17;
          __int16 v18 = "%{public}s Frame is larger than requested (copied=%u, remaining=%u)";
LABEL_27:
          _os_log_impl(&dword_181A5C000, v14, v15, v18, (uint8_t *)&buf, 0x18u);
        }
      }

      else if (v40)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v14 = (os_log_s *)gLogObj;
        os_log_type_t v15 = type;
        BOOL v24 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (backtrace_string)
        {
          if (v24)
          {
            int v25 = *((_DWORD *)v44 + 6);
            int v26 = *((_DWORD *)v49 + 6);
            unsigned int buf = 136446978;
            unint64_t v53 = "nw_http_early_data_replay_block_invoke";
            __int16 v54 = 1024;
            int v55 = v25;
            __int16 v56 = 1024;
            int v57 = v26;
            __int16 v58 = 2082;
            uint64_t v59 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s Frame is larger than requested (copied=%u, remaining=%u), dumping backtrace:%{public}s",  (uint8_t *)&buf,  0x22u);
          }

          free(backtrace_string);
          goto LABEL_28;
        }

        if (v24)
        {
          int v29 = *((_DWORD *)v44 + 6);
          int v30 = *((_DWORD *)v49 + 6);
          unsigned int buf = 136446722;
          unint64_t v53 = "nw_http_early_data_replay_block_invoke";
          __int16 v54 = 1024;
          int v55 = v29;
          __int16 v56 = 1024;
          int v57 = v30;
          __int16 v18 = "%{public}s Frame is larger than requested (copied=%u, remaining=%u), no backtrace";
          goto LABEL_27;
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v14 = (os_log_s *)gLogObj;
        os_log_type_t v15 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          int v27 = *((_DWORD *)v44 + 6);
          int v28 = *((_DWORD *)v49 + 6);
          unsigned int buf = 136446722;
          unint64_t v53 = "nw_http_early_data_replay_block_invoke";
          __int16 v54 = 1024;
          int v55 = v27;
          __int16 v56 = 1024;
          int v57 = v28;
          __int16 v18 = "%{public}s Frame is larger than requested (copied=%u, remaining=%u), backtrace limit exceeded";
          goto LABEL_27;
        }
      }
    }

BOOL ___ZL25nw_http_early_data_replayP27nw_protocol_http_early_data_block_invoke_2( void *a1, int a2, int a3, void *__src, unsigned int a5)
{
  unsigned int v6 = *(_DWORD *)(*(void *)(a1[4] + 8LL) + 24LL);
  if (v6 >= a5) {
    size_t v7 = a5;
  }
  else {
    size_t v7 = v6;
  }
  memcpy(*(void **)(*(void *)(a1[5] + 8LL) + 24LL), __src, v7);
  *(_DWORD *)(*(void *)(a1[4] + 8LL) + 24LL) -= v7;
  *(void *)(*(void *)(a1[5] + 8LL) + 24LL) += v7;
  *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL) += v7;
  return *(_DWORD *)(*(void *)(a1[4] + 8LL) + 24LL) != 0;
}

void ___ZL48nw_protocol_http_early_data_remove_input_handlerP11nw_protocolS0_b_block_invoke_2(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 40))
  {
    uint64_t v1 = *(void *)(a1 + 32);
    if ((*(_BYTE *)(v1 + 198) & 1) == 0)
    {
      if (gLogDatapath)
      {
        uint64_t v5 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
        {
          int v6 = 136446722;
          size_t v7 = "nw_http_early_data_destroy";
          __int16 v8 = 2082;
          uint64_t v9 = v1 + 114;
          __int16 v10 = 2080;
          int v11 = " ";
          _os_log_impl(&dword_181A5C000, v5, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", (uint8_t *)&v6, 0x20u);
        }
      }
    }

    if ((*(_BYTE *)(v1 + 240) & 1) != 0)
    {
      uint64_t v2 = *(dispatch_object_s **)(v1 + 232);
      if (v2) {
        dispatch_release(v2);
      }
    }

    *(void *)(v1 + 232) = 0LL;
    if ((*(_BYTE *)(v1 + 224) & 1) != 0)
    {
      unsigned int v3 = *(void **)(v1 + 216);
      if (v3) {
        os_release(v3);
      }
    }

    *(void *)(v1 + 216) = 0LL;
    if ((*(_BYTE *)(v1 + 208) & 1) != 0)
    {
      uint64_t v4 = *(void **)(v1 + 200);
      if (v4) {
        os_release(v4);
      }
    }

    free((void *)v1);
  }

uint64_t ___ZL50nw_protocol_http_early_data_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke( uint64_t a1, uint64_t a2)
{
  if (!*(void *)(*(void *)(a1 + 32) + 200LL))
  {
    if (nw_protocol_copy_http_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
    }
    id v4 = (id)nw_protocol_copy_http_definition_http_definition;
    uint64_t v5 = nw_frame_copy_metadata_for_protocol(a2, (uint64_t)v4);
    if (v4) {
      os_release(v4);
    }
    id v6 = nw_http_metadata_copy_request(v5);
    BOOL v7 = nw_http_request_copy(v6);
    nw_http_fields_append((void *)v7, (uint64_t)"Early-Data", (uint64_t)"1");
    uint64_t v8 = *(void *)(a1 + 32);
    char v9 = *(_BYTE *)(v8 + 208);
    if ((v9 & 1) != 0)
    {
      __int16 v10 = *(void **)(v8 + 200);
      if (v10)
      {
        os_release(v10);
        char v9 = *(_BYTE *)(v8 + 208);
      }
    }

    *(void *)(v8 + 200) = v5;
    *(_BYTE *)(v8 + 20_Block_object_dispose(va, 8) = v9 | 1;
    metadata_for_request = nw_http_create_metadata_for_request((void *)v7);
    uint64_t v12 = *(void *)(a1 + 32);
    char v13 = *(_BYTE *)(v12 + 224);
    if ((v13 & 1) != 0)
    {
      char v14 = *(void **)(v12 + 216);
      if (v14)
      {
        os_release(v14);
        char v13 = *(_BYTE *)(v12 + 224);
      }
    }

    *(void *)(v12 + 216) = metadata_for_request;
    *(_BYTE *)(v12 + 224) = v13 | 1;
    if (v7) {
      os_release((void *)v7);
    }
    if (v6) {
      os_release(v6);
    }
  }

  if (nw_frame_uses_external_data(a2))
  {
    *(void *)&size[1] = 0LL;
    os_log_type_t v15 = (dispatch_data_s *)nw_frame_copy_external_data(a2, &size[2], &size[1]);
    dispatch_data_t subrange = dispatch_data_create_subrange(v15, size[2], size[1]);
    if (v15) {
      dispatch_release(v15);
    }
  }

  else
  {
    size[0] = 0;
    int v17 = (const void *)nw_frame_unclaimed_bytes(a2, size);
    dispatch_data_t subrange = dispatch_data_create(v17, size[0], 0LL, 0LL);
  }

  uint64_t v18 = *(void *)(a1 + 32);
  dispatch_data_t v19 = *(dispatch_data_s **)(v18 + 232);
  if (v19)
  {
    dispatch_data_t concat = dispatch_data_create_concat(v19, subrange);
    uint64_t v21 = *(void *)(a1 + 32);
    BOOL v23 = (_BYTE *)(v21 + 240);
    char v22 = *(_BYTE *)(v21 + 240);
    if ((v22 & 1) != 0)
    {
      BOOL v24 = *(dispatch_object_s **)(v21 + 232);
      if (v24)
      {
        dispatch_release(v24);
        char v22 = *v23;
      }
    }

    *(void *)(v21 + 232) = concat;
  }

  else
  {
    char v25 = *(_BYTE *)(v18 + 240);
    BOOL v23 = (_BYTE *)(v18 + 240);
    char v22 = v25;
    *((void *)v23 - 1) = subrange;
    dispatch_data_t subrange = 0LL;
  }

  *BOOL v23 = v22 | 1;
  else {
    char v26 = 0;
  }
  *(_BYTE *)(*(void *)(a1 + 32) + 256LL) = *(_BYTE *)(*(void *)(a1 + 32) + 256LL) & 0xF7 | v26;
  nw_frame_set_metadata( a2,  *(nw_protocol_metadata **)(*(void *)(a1 + 32) + 216LL),  0,  (*(unsigned __int8 *)(*(void *)(a1 + 32) + 256LL) >> 3) & 1);
  if (subrange) {
    dispatch_release(subrange);
  }
  return 1LL;
}

double __nw_protocol_http_early_data_identifier_block_invoke()
{
  *(void *)&double result = 0x100000004LL;
  qword_18C5A4248 = 0x100000004LL;
  return result;
}

nw_path_monitor_t nw_path_monitor_create(void)
{
  dispatch_queue_t v0 = nw_parameters_create();
  nw_parameters_set_multipath_service(v0, nw_multipath_service_handover);
  evaluator_for_endpoint_no_evaluate = nw_path_create_evaluator_for_endpoint_no_evaluate(0LL, v0);

  return (nw_path_monitor_t)evaluator_for_endpoint_no_evaluate;
}

void sub_1823F20A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_path_monitor_t nw_path_monitor_create_with_type(nw_interface_type_t required_interface_type)
{
  uint64_t v2 = nw_parameters_create();
  nw_parameters_set_multipath_service(v2, nw_multipath_service_handover);
  nw_parameters_set_required_interface_type(v2, required_interface_type);
  evaluator_for_endpoint_no_evaluate = nw_path_create_evaluator_for_endpoint_no_evaluate(0LL, v2);

  return (nw_path_monitor_t)evaluator_for_endpoint_no_evaluate;
}

void sub_1823F2108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

nw_path_monitor_t nw_path_monitor_create_for_ethernet_channel(void)
{
  nw_parameters_t v0 = nw_parameters_create();
  nw_path_create_evaluator_for_all_custom_ether_interfaces(v0);
  uint64_t v1 = (nw_path_monitor *)objc_claimAutoreleasedReturnValue();

  return v1;
}

void sub_1823F2150(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_path_monitor_prohibit_interface_type(nw_path_monitor_t monitor, nw_interface_type_t interface_type)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  unsigned int v3 = monitor;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = v3;
    os_unfair_lock_lock((os_unfair_lock_t)v5 + 24);
    id v6 = (nw_parameters *)*((id *)v5 + 1);
    os_unfair_lock_unlock((os_unfair_lock_t)v5 + 24);

    if (v6)
    {
      nw_parameters_prohibit_interface_type(v6, interface_type);
LABEL_4:

      goto LABEL_5;
    }

    __nwlog_obj();
    int v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)unsigned int buf = 136446210;
    char v26 = "nw_path_monitor_prohibit_interface_type";
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v12, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)unsigned int buf = 136446210;
          char v26 = "nw_path_monitor_prohibit_interface_type";
          _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
        }
      }

      else if (v23)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        BOOL v20 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)unsigned int buf = 136446466;
            char v26 = "nw_path_monitor_prohibit_interface_type";
            __int16 v27 = 2082;
            int v28 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v13,  v19,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_40;
        }

        if (v20)
        {
          *(_DWORD *)unsigned int buf = 136446210;
          char v26 = "nw_path_monitor_prohibit_interface_type";
          _os_log_impl(&dword_181A5C000, v13, v19, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)unsigned int buf = 136446210;
          char v26 = "nw_path_monitor_prohibit_interface_type";
          _os_log_impl( &dword_181A5C000,  v13,  v22,  "%{public}s called with null parameters, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_1823F2630(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_path_monitor_set_cancel_handler( nw_path_monitor_t monitor, nw_path_monitor_cancel_handler_t cancel_handler)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  unsigned int v3 = monitor;
  nw_path_monitor_cancel_handler_t v4 = cancel_handler;
  uint64_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)unsigned int buf = 136446210;
    __int16 v27 = "nw_path_monitor_set_cancel_handler";
    int v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        __int16 v27 = "nw_path_monitor_set_cancel_handler";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null monitor", buf, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)unsigned int buf = 136446466;
          __int16 v27 = "nw_path_monitor_set_cancel_handler";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null monitor, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v11) {
          goto LABEL_4;
        }
LABEL_39:
        free(v11);
        goto LABEL_4;
      }

      if (v18)
      {
        *(_DWORD *)unsigned int buf = 136446210;
        __int16 v27 = "nw_path_monitor_set_cancel_handler";
        _os_log_impl(&dword_181A5C000, v12, v17, "%{public}s called with null monitor, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        __int16 v27 = "nw_path_monitor_set_cancel_handler";
        _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s called with null monitor, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void nw_path_monitor_set_update_handler( nw_path_monitor_t monitor, nw_path_monitor_update_handler_t update_handler)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  unsigned int v3 = monitor;
  nw_path_monitor_update_handler_t v4 = update_handler;
  uint64_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)unsigned int buf = 136446210;
    __int16 v27 = "nw_path_monitor_set_update_handler";
    int v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        __int16 v27 = "nw_path_monitor_set_update_handler";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null monitor", buf, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)unsigned int buf = 136446466;
          __int16 v27 = "nw_path_monitor_set_update_handler";
          __int16 v28 = 2082;
          uint64_t v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null monitor, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v11) {
          goto LABEL_4;
        }
LABEL_39:
        free(v11);
        goto LABEL_4;
      }

      if (v18)
      {
        *(_DWORD *)unsigned int buf = 136446210;
        __int16 v27 = "nw_path_monitor_set_update_handler";
        _os_log_impl(&dword_181A5C000, v12, v17, "%{public}s called with null monitor, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        __int16 v27 = "nw_path_monitor_set_update_handler";
        _os_log_impl( &dword_181A5C000,  v12,  v22,  "%{public}s called with null monitor, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void nw_path_monitor_set_queue(nw_path_monitor_t monitor, dispatch_queue_t queue)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  unsigned int v3 = monitor;
  nw_path_monitor_update_handler_t v4 = queue;
  uint64_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    id v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)unsigned int buf = 136446210;
    os_log_type_t v23 = "nw_path_monitor_set_queue";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        os_log_type_t v23 = "nw_path_monitor_set_queue";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null monitor", buf, 0xCu);
      }
    }

    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)unsigned int buf = 136446466;
          os_log_type_t v23 = "nw_path_monitor_set_queue";
          __int16 v24 = 2082;
          char v25 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null monitor, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v7) {
          goto LABEL_4;
        }
LABEL_39:
        free(v7);
        goto LABEL_4;
      }

      if (v14)
      {
        *(_DWORD *)unsigned int buf = 136446210;
        os_log_type_t v23 = "nw_path_monitor_set_queue";
        _os_log_impl(&dword_181A5C000, v8, v13, "%{public}s called with null monitor, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        os_log_type_t v23 = "nw_path_monitor_set_queue";
        _os_log_impl( &dword_181A5C000,  v8,  v18,  "%{public}s called with null monitor, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void nw_path_monitor_start(nw_path_monitor_t monitor)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  uint64_t v1 = monitor;
  uint64_t v2 = v1;
  if (v1)
  {
    nw_path_evaluator_start(v1);
    nw_path_evaluator_call_update_handler(v2);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)unsigned int buf = 136446210;
  BOOL v14 = "nw_path_monitor_start";
  nw_path_monitor_update_handler_t v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v14 = "nw_path_monitor_start";
        _os_log_impl(&dword_181A5C000, v5, v6, "%{public}s called with null monitor", buf, 0xCu);
      }
    }

    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)unsigned int buf = 136446466;
          BOOL v14 = "nw_path_monitor_start";
          __int16 v15 = 2082;
          os_log_type_t v16 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v5,  v8,  "%{public}s called with null monitor, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v9)
      {
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v14 = "nw_path_monitor_start";
        _os_log_impl(&dword_181A5C000, v5, v8, "%{public}s called with null monitor, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v14 = "nw_path_monitor_start";
        _os_log_impl( &dword_181A5C000,  v5,  v10,  "%{public}s called with null monitor, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823F3774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_path_monitor_cancel(nw_path_monitor_t monitor)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  uint64_t v1 = monitor;
  uint64_t v2 = v1;
  if (v1)
  {
    nw_path_evaluator_cancel(v1);
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)unsigned int buf = 136446210;
  BOOL v14 = "nw_path_monitor_cancel";
  nw_path_monitor_update_handler_t v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v14 = "nw_path_monitor_cancel";
        _os_log_impl(&dword_181A5C000, v5, v6, "%{public}s called with null monitor", buf, 0xCu);
      }
    }

    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)unsigned int buf = 136446466;
          BOOL v14 = "nw_path_monitor_cancel";
          __int16 v15 = 2082;
          os_log_type_t v16 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v5,  v8,  "%{public}s called with null monitor, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v9)
      {
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v14 = "nw_path_monitor_cancel";
        _os_log_impl(&dword_181A5C000, v5, v8, "%{public}s called with null monitor, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v14 = "nw_path_monitor_cancel";
        _os_log_impl( &dword_181A5C000,  v5,  v10,  "%{public}s called with null monitor, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1823F3A10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_settings_get_l4s_enabled_internal_block_invoke()
{
  nw_parameters_t v0 = CFStringCreateWithBytesNoCopy( (CFAllocatorRef)*MEMORY[0x189604DB0],  (const UInt8 *)"network_enable_l4s",  18LL,  0x8000100u,  0,  (CFAllocatorRef)*MEMORY[0x189604DC8]);
  Boolean keyExistsAndHasValidFormat = 0;
  int AppBooleanValue = CFPreferencesGetAppBooleanValue(v0, @"Apple Global Domain", &keyExistsAndHasValidFormat);
  int v2 = keyExistsAndHasValidFormat;
  if (v0) {
    CFRelease(v0);
  }
  if (v2) {
    BOOL v3 = AppBooleanValue == 0;
  }
  else {
    BOOL v3 = 1;
  }
  char v4 = !v3;
  nw_settings_get_l4s_enabled_internal::l4s_enabled = v4;
}

void sub_1823F3C50(_Unwind_Exception *a1)
{
}

void sub_1823F40F8(_Unwind_Exception *a1)
{
}

void sub_1823F4308(_Unwind_Exception *a1)
{
}

uint64_t __nw_socket_set_connected_fd_block_invoke(uint64_t a1, int a2)
{
  *(_DWORD *)(*(void *)(a1 + 32) + 172LL) = a2;
  return 1LL;
}

void nw_socket_frame_input_finalizer(nw_frame *a1, BOOL a2, void *a3)
{
  uint64_t v6 = *((void *)a1 + 2);
  id v7 = (void *)*((void *)a1 + 3);
  uint64_t v5 = (void *)((char *)a1 + 16);
  if (v6)
  {
    *(void *)(v6 + 24) = v7;
    id v7 = (void *)*((void *)a1 + 3);
  }

  else
  {
    a3[34] = v7;
  }

  *id v7 = v6;
  *uint64_t v5 = 0LL;
  *((void *)a1 + 3) = 0LL;
  os_log_type_t v8 = (void *)a3[32];
  *((void *)a1 + 3) = v8;
  *os_log_type_t v8 = a1;
  a3[32] = v5;
}

__int128 *nw_socket_protocol_identifier()
{
  if (nw_socket_protocol_identifier::onceToken != -1) {
    dispatch_once(&nw_socket_protocol_identifier::onceToken, &__block_literal_global_64023);
  }
  return &nw_socket_protocol_identifier::identifier;
}

BOOL __nw_socket_protocol_identifier_block_invoke()
{
  unk_18C59426F = 0LL;
  unk_18C594267 = 0LL;
  byte_18C59427F = 0;
  unk_18C594277 = 0LL;
  strcpy((char *)&nw_socket_protocol_identifier::identifier, "socket");
  qword_18C594280 = 0x100000003LL;
  return nw_protocol_register_extended(&nw_socket_protocol_identifier::identifier, (uint64_t)nw_protocol_socket_create);
}

void *nw_protocol_socket_create(const nw_protocol_identifier *a1, nw_endpoint *a2, nw_parameters *a3)
{
  if (nw_socket_protocol_identifier::onceToken != -1) {
    dispatch_once(&nw_socket_protocol_identifier::onceToken, &__block_literal_global_64023);
  }
  char v4 = (void *)nw_protocol_new( 392LL,  (uint64_t)a3,  (uint64_t)&nw_socket_protocol_identifier::identifier,  nw_socket_protocol_callbacks(void)::callbacks);
  v4[25] = 0LL;
  v4 += 25;
  *(v4 - 17) = 0LL;
  *(v4 - 9) = 0LL;
  *((_DWORD *)v4 - 7) = -1;
  *((_DWORD *)v4 - 5) = 6159;
  v4[2] = 0LL;
  v4[3] = v4 + 2;
  v4[4] = 0LL;
  v4[5] = v4 + 4;
  v4[6] = 0LL;
  v4[7] = v4 + 6;
  v4[8] = 0LL;
  v4[9] = v4 + 8;
  v4[10] = 0LL;
  v4[11] = v4 + 10;
  v4[1] = v4;
  return v4 - 37;
}

void ___ZL28nw_socket_protocol_callbacksv_block_invoke()
{
  nw_socket_protocol_callbacks(void)::callbacks = nw_protocol_one_to_one_callbacks_new();
  nw_protocol_callbacks_set_add_input_handler( (void *)nw_socket_protocol_callbacks(void)::callbacks,  (uint64_t)nw_socket_add_input_handler);
  nw_protocol_callbacks_set_replace_input_handler( nw_socket_protocol_callbacks(void)::callbacks,  (uint64_t)nw_socket_replace_input_handler);
  nw_protocol_callbacks_set_remove_input_handler( nw_socket_protocol_callbacks(void)::callbacks,  (uint64_t)nw_socket_remove_input_handler);
  nw_protocol_callbacks_set_input_available( nw_socket_protocol_callbacks(void)::callbacks,  (uint64_t)nw_socket_input_available);
  nw_protocol_callbacks_set_input_finished( nw_socket_protocol_callbacks(void)::callbacks,  (uint64_t)nw_socket_input_finished);
  nw_protocol_callbacks_set_output_available( nw_socket_protocol_callbacks(void)::callbacks,  (uint64_t)nw_socket_output_available);
  nw_protocol_callbacks_set_output_finished( nw_socket_protocol_callbacks(void)::callbacks,  (uint64_t)nw_socket_output_finished);
  nw_protocol_callbacks_set_get_input_frames( nw_socket_protocol_callbacks(void)::callbacks,  (uint64_t)nw_socket_get_input_frames);
  nw_protocol_callbacks_set_get_output_frames( nw_socket_protocol_callbacks(void)::callbacks,  (uint64_t)nw_socket_get_output_frames);
  nw_protocol_callbacks_set_finalize_output_frames( nw_socket_protocol_callbacks(void)::callbacks,  (uint64_t)nw_socket_finalize_output_frames);
  nw_protocol_callbacks_set_get_parameters( nw_socket_protocol_callbacks(void)::callbacks,  (uint64_t)nw_socket_get_parameters);
  nw_protocol_callbacks_set_get_path(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_get_path);
  nw_protocol_callbacks_set_updated_path(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_updated_path);
  nw_protocol_callbacks_set_get_local_endpoint( nw_socket_protocol_callbacks(void)::callbacks,  (uint64_t)nw_socket_get_local);
  nw_protocol_callbacks_set_get_remote_endpoint( nw_socket_protocol_callbacks(void)::callbacks,  (uint64_t)nw_socket_get_remote);
  nw_protocol_callbacks_set_get_output_local_endpoint( nw_socket_protocol_callbacks(void)::callbacks,  (uint64_t)nw_socket_get_output_local);
  nw_protocol_callbacks_set_get_output_interface( nw_socket_protocol_callbacks(void)::callbacks,  (uint64_t)nw_socket_get_output_interface);
  nw_protocol_callbacks_set_waiting_for_output( nw_socket_protocol_callbacks(void)::callbacks,  (uint64_t)nw_socket_waiting_for_output);
  nw_protocol_callbacks_set_connect(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_connect);
  nw_protocol_callbacks_set_disconnect(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_disconnect);
  nw_protocol_callbacks_set_error(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_error);
  nw_protocol_callbacks_set_reset(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_reset);
  nw_protocol_callbacks_set_copy_info(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_socket_copy_info);
  nw_protocol_callbacks_set_register_notification( nw_socket_protocol_callbacks(void)::callbacks,  (uint64_t)nw_socket_register_notification);
  nw_protocol_callbacks_set_unregister_notification( nw_socket_protocol_callbacks(void)::callbacks,  (uint64_t)nw_socket_unregister_notification);
  nw_protocol_callbacks_set_notify(nw_socket_protocol_callbacks(void)::callbacks, (uint64_t)nw_protocol_socket_notify);
  nw_protocol_callbacks_set_get_message_properties( nw_socket_protocol_callbacks(void)::callbacks,  (uint64_t)nw_protocol_socket_get_message_properties);
}

BOOL nw_socket_add_input_handler(nw_protocol *a1, nw_protocol_identifier *a2)
{
  uint64_t v72 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    int v69 = "nw_socket_add_input_handler";
    int v57 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v66 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __int16 v58 = (os_log_s *)__nwlog_obj();
      os_log_type_t v59 = type[0];
      if (!os_log_type_enabled(v58, type[0])) {
        goto LABEL_156;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      int v69 = "nw_socket_add_input_handler";
      uint64_t v60 = "%{public}s called with null protocol";
      goto LABEL_155;
    }

    if (!v66)
    {
      __int16 v58 = (os_log_s *)__nwlog_obj();
      os_log_type_t v59 = type[0];
      if (!os_log_type_enabled(v58, type[0])) {
        goto LABEL_156;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      int v69 = "nw_socket_add_input_handler";
      uint64_t v60 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_155;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v58 = (os_log_s *)__nwlog_obj();
    os_log_type_t v59 = type[0];
    BOOL v62 = os_log_type_enabled(v58, type[0]);
    if (!backtrace_string)
    {
      if (!v62) {
        goto LABEL_156;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      int v69 = "nw_socket_add_input_handler";
      uint64_t v60 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_155;
    }

    if (!v62) {
      goto LABEL_142;
    }
    *(_DWORD *)unsigned int buf = 136446466;
    int v69 = "nw_socket_add_input_handler";
    __int16 v70 = 2082;
    __int128 v71 = backtrace_string;
    uint64_t v63 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_141:
    _os_log_impl(&dword_181A5C000, v58, v59, v63, buf, 0x16u);
    goto LABEL_142;
  }

  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    int v69 = "nw_socket_add_input_handler";
    int v57 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v66 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __int16 v58 = (os_log_s *)__nwlog_obj();
      os_log_type_t v59 = type[0];
      if (!os_log_type_enabled(v58, type[0])) {
        goto LABEL_156;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      int v69 = "nw_socket_add_input_handler";
      uint64_t v60 = "%{public}s called with null socket_handler";
      goto LABEL_155;
    }

    if (!v66)
    {
      __int16 v58 = (os_log_s *)__nwlog_obj();
      os_log_type_t v59 = type[0];
      if (!os_log_type_enabled(v58, type[0])) {
        goto LABEL_156;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      int v69 = "nw_socket_add_input_handler";
      uint64_t v60 = "%{public}s called with null socket_handler, backtrace limit exceeded";
      goto LABEL_155;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v58 = (os_log_s *)__nwlog_obj();
    os_log_type_t v59 = type[0];
    BOOL v64 = os_log_type_enabled(v58, type[0]);
    if (!backtrace_string)
    {
      if (!v64) {
        goto LABEL_156;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      int v69 = "nw_socket_add_input_handler";
      uint64_t v60 = "%{public}s called with null socket_handler, no backtrace";
      goto LABEL_155;
    }

    if (!v64) {
      goto LABEL_142;
    }
    *(_DWORD *)unsigned int buf = 136446466;
    int v69 = "nw_socket_add_input_handler";
    __int16 v70 = 2082;
    __int128 v71 = backtrace_string;
    uint64_t v63 = "%{public}s called with null socket_handler, dumping backtrace:%{public}s";
    goto LABEL_141;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    int v69 = "nw_socket_add_input_handler";
    int v57 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v66 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __int16 v58 = (os_log_s *)__nwlog_obj();
      os_log_type_t v59 = type[0];
      if (!os_log_type_enabled(v58, type[0])) {
        goto LABEL_156;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      int v69 = "nw_socket_add_input_handler";
      uint64_t v60 = "%{public}s called with null input_protocol";
      goto LABEL_155;
    }

    if (!v66)
    {
      __int16 v58 = (os_log_s *)__nwlog_obj();
      os_log_type_t v59 = type[0];
      if (!os_log_type_enabled(v58, type[0])) {
        goto LABEL_156;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      int v69 = "nw_socket_add_input_handler";
      uint64_t v60 = "%{public}s called with null input_protocol, backtrace limit exceeded";
      goto LABEL_155;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v58 = (os_log_s *)__nwlog_obj();
    os_log_type_t v59 = type[0];
    BOOL v65 = os_log_type_enabled(v58, type[0]);
    if (backtrace_string)
    {
      if (v65)
      {
        *(_DWORD *)unsigned int buf = 136446466;
        int v69 = "nw_socket_add_input_handler";
        __int16 v70 = 2082;
        __int128 v71 = backtrace_string;
        uint64_t v63 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
        goto LABEL_141;
      }

BOOL nw_socket_replace_input_handler(nw_protocol *a1, nw_protocol *a2, nw_protocol_identifier *a3)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    int v34 = "nw_socket_replace_input_handler";
    int v9 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (__nwlog_fault(v9, &type, &v31))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v10 = (os_log_s *)__nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)unsigned int buf = 136446210;
          int v34 = "nw_socket_replace_input_handler";
          uint64_t v12 = "%{public}s called with null protocol";
          goto LABEL_53;
        }
      }

      else if (v31)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v10 = (os_log_s *)__nwlog_obj();
        os_log_type_t v11 = type;
        BOOL v29 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (!v29) {
            goto LABEL_35;
          }
          *(_DWORD *)unsigned int buf = 136446466;
          int v34 = "nw_socket_replace_input_handler";
          __int16 v35 = 2082;
          uint64_t v36 = backtrace_string;
          __int16 v15 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
          goto LABEL_34;
        }

        if (v29)
        {
          *(_DWORD *)unsigned int buf = 136446210;
          int v34 = "nw_socket_replace_input_handler";
          uint64_t v12 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_53;
        }
      }

      else
      {
        os_log_type_t v10 = (os_log_s *)__nwlog_obj();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)unsigned int buf = 136446210;
          int v34 = "nw_socket_replace_input_handler";
          uint64_t v12 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_53;
        }
      }
    }

uint64_t nw_socket_remove_input_handler(nw_protocol *a1, nw_protocol *a2, int a3)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    uint64_t v36 = "nw_socket_remove_input_handler";
    int v19 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!v33)
      {
        BOOL v20 = (os_log_s *)__nwlog_obj();
        os_log_type_t v21 = type[0];
        if (!os_log_type_enabled(v20, type[0])) {
          goto LABEL_75;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        uint64_t v36 = "nw_socket_remove_input_handler";
        unsigned int v22 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_74;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v20 = (os_log_s *)__nwlog_obj();
      os_log_type_t v21 = type[0];
      BOOL v28 = os_log_type_enabled(v20, type[0]);
      if (!backtrace_string)
      {
        if (!v28) {
          goto LABEL_75;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        uint64_t v36 = "nw_socket_remove_input_handler";
        unsigned int v22 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_74;
      }

      if (v28)
      {
        *(_DWORD *)unsigned int buf = 136446466;
        uint64_t v36 = "nw_socket_remove_input_handler";
        __int16 v37 = 2082;
        int v38 = backtrace_string;
        BOOL v29 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_57:
        _os_log_impl(&dword_181A5C000, v20, v21, v29, buf, 0x16u);
      }

void nw_socket_input_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    os_log_type_t v18 = "nw_socket_input_available";
    id v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_41;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      os_log_type_t v18 = "nw_socket_input_available";
      os_log_type_t v10 = "%{public}s called with null protocol";
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)unsigned int buf = 136446466;
          os_log_type_t v18 = "nw_socket_input_available";
          __int16 v19 = 2082;
          BOOL v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v7) {
          return;
        }
LABEL_42:
        free(v7);
        return;
      }

      if (!v12) {
        goto LABEL_41;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      os_log_type_t v18 = "nw_socket_input_available";
      os_log_type_t v10 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      __int16 v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_41;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      os_log_type_t v18 = "nw_socket_input_available";
      os_log_type_t v10 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

void nw_socket_input_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    __int16 v19 = "nw_socket_input_finished";
    __int16 v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_42;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      __int16 v19 = "nw_socket_input_finished";
      os_log_type_t v11 = "%{public}s called with null protocol";
    }

    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)unsigned int buf = 136446466;
          __int16 v19 = "nw_socket_input_finished";
          __int16 v20 = 2082;
          uint64_t v21 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v8) {
          return;
        }
LABEL_43:
        free(v8);
        return;
      }

      if (!v13) {
        goto LABEL_42;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      __int16 v19 = "nw_socket_input_finished";
      os_log_type_t v11 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      os_log_type_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_42;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      __int16 v19 = "nw_socket_input_finished";
      os_log_type_t v11 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

void nw_socket_output_available(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    os_log_type_t v18 = "nw_socket_output_available";
    id v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_41;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      os_log_type_t v18 = "nw_socket_output_available";
      os_log_type_t v10 = "%{public}s called with null protocol";
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)unsigned int buf = 136446466;
          os_log_type_t v18 = "nw_socket_output_available";
          __int16 v19 = 2082;
          __int16 v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v7) {
          return;
        }
LABEL_42:
        free(v7);
        return;
      }

      if (!v12) {
        goto LABEL_41;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      os_log_type_t v18 = "nw_socket_output_available";
      os_log_type_t v10 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      __int16 v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_41;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      os_log_type_t v18 = "nw_socket_output_available";
      os_log_type_t v10 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

void nw_socket_output_finished(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    __int16 v27 = "nw_socket_output_finished";
    char v15 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v16 = (os_log_s *)__nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      __int16 v27 = "nw_socket_output_finished";
      os_log_type_t v18 = "%{public}s called with null protocol";
      goto LABEL_66;
    }

    if (!v24)
    {
      char v16 = (os_log_s *)__nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      __int16 v27 = "nw_socket_output_finished";
      os_log_type_t v18 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_66;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    char v16 = (os_log_s *)__nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v20 = os_log_type_enabled(v16, type);
    if (!backtrace_string)
    {
      if (!v20) {
        goto LABEL_67;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      __int16 v27 = "nw_socket_output_finished";
      os_log_type_t v18 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_66;
    }

    if (v20)
    {
      *(_DWORD *)unsigned int buf = 136446466;
      __int16 v27 = "nw_socket_output_finished";
      __int16 v28 = 2082;
      BOOL v29 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v16,  v17,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
LABEL_67:
    if (!v15) {
      return;
    }
    goto LABEL_68;
  }

  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    __int16 v27 = "nw_socket_output_finished";
    char v15 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v16 = (os_log_s *)__nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      __int16 v27 = "nw_socket_output_finished";
      os_log_type_t v18 = "%{public}s called with null socket_handler";
      goto LABEL_66;
    }

    if (!v24)
    {
      char v16 = (os_log_s *)__nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_67;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      __int16 v27 = "nw_socket_output_finished";
      os_log_type_t v18 = "%{public}s called with null socket_handler, backtrace limit exceeded";
      goto LABEL_66;
    }

    uint64_t v21 = (char *)__nw_create_backtrace_string();
    char v16 = (os_log_s *)__nwlog_obj();
    os_log_type_t v17 = type;
    BOOL v22 = os_log_type_enabled(v16, type);
    if (v21)
    {
      if (v22)
      {
        *(_DWORD *)unsigned int buf = 136446466;
        __int16 v27 = "nw_socket_output_finished";
        __int16 v28 = 2082;
        BOOL v29 = v21;
        _os_log_impl( &dword_181A5C000,  v16,  v17,  "%{public}s called with null socket_handler, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v21);
      if (!v15) {
        return;
      }
LABEL_68:
      free(v15);
      return;
    }

    if (v22)
    {
      *(_DWORD *)unsigned int buf = 136446210;
      __int16 v27 = "nw_socket_output_finished";
      os_log_type_t v18 = "%{public}s called with null socket_handler, no backtrace";
LABEL_66:
      _os_log_impl(&dword_181A5C000, v16, v17, v18, buf, 0xCu);
      goto LABEL_67;
    }

    goto LABEL_67;
  }

  int v3 = *(_DWORD *)&a1[4].flow_id[12];
  if (v3 < 0)
  {
    if ((*(_WORD *)&a1[6].flow_id[13] & 0x80) != 0) {
      return;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v4 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)unsigned int buf = 136446466;
    __int16 v27 = "nw_socket_output_finished";
    __int16 v28 = 2082;
    BOOL v29 = (char *)&a1[6].identifier + 4;
    uint64_t v5 = "%{public}s %{public}s Socket protocol does not have valid fd";
    int v6 = (os_log_s *)v4;
    os_log_type_t v7 = OS_LOG_TYPE_ERROR;
LABEL_14:
    uint32_t v8 = 22;
LABEL_15:
    _os_log_impl(&dword_181A5C000, v6, v7, v5, buf, v8);
    return;
  }

  if (a1[4].output_handler_context || *(void *)&a1[5].flow_id[8])
  {
    if ((*(_WORD *)&a1[6].flow_id[13] & 0x80) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      int v23 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)unsigned int buf = 136446466;
        __int16 v27 = "nw_socket_output_finished";
        __int16 v28 = 2082;
        BOOL v29 = (char *)&a1[6].identifier + 4;
        _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s Waiting for writes to finish, deferring output_finished",  buf,  0x16u);
      }
    }

    *(_WORD *)&a1[6].flow_id[13] |= 8u;
    return;
  }

  __int16 v9 = *(_WORD *)&a1[6].flow_id[13];
  int v10 = v9 & 0xFFF7 | (a1[6].flow_id[15] << 16);
  *(_WORD *)&a1[6].flow_id[13] = v9 & 0xFFF7;
  a1[6].flow_id[15] = BYTE2(v10);
  if (LODWORD(a1[4].identifier) != 2)
  {
    if ((v9 & 0x80) != 0) {
      return;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v14 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    *(_DWORD *)unsigned int buf = 136446466;
    __int16 v27 = "nw_socket_output_finished";
    __int16 v28 = 2082;
    BOOL v29 = (char *)&a1[6].identifier + 4;
    uint64_t v5 = "%{public}s %{public}s Ignoring output finished for non-stream socket";
    goto LABEL_28;
  }

  if (!shutdown(v3, 1))
  {
    if ((*(_WORD *)&a1[6].flow_id[13] & 0x80) != 0 || !gLogDatapath) {
      return;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v14 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    *(_DWORD *)unsigned int buf = 136446466;
    __int16 v27 = "nw_socket_output_finished";
    __int16 v28 = 2082;
    BOOL v29 = (char *)&a1[6].identifier + 4;
    uint64_t v5 = "%{public}s %{public}s Closed writes based on output finished";
LABEL_28:
    int v6 = (os_log_s *)v14;
    os_log_type_t v7 = OS_LOG_TYPE_DEBUG;
    goto LABEL_14;
  }

  int v11 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
  }
  uint64_t v12 = gconnectionLogObj;
  if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
  {
    int v13 = *(_DWORD *)&a1[4].flow_id[12];
    *(_DWORD *)unsigned int buf = 136446978;
    __int16 v27 = "nw_socket_output_finished";
    __int16 v28 = 2080;
    BOOL v29 = (char *)&a1[6].identifier + 4;
    __int16 v30 = 1024;
    int v31 = v13;
    __int16 v32 = 1024;
    int v33 = v11;
    uint64_t v5 = "%{public}s %s shutdown(%d, SHUT_WR) %{darwin.errno}d";
    int v6 = (os_log_s *)v12;
    os_log_type_t v7 = OS_LOG_TYPE_ERROR;
    uint32_t v8 = 34;
    goto LABEL_15;
  }

uint64_t nw_socket_get_input_frames( nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, uint64_t a5, nw_frame_array_s *a6)
{
  uint64_t v191 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)v177 = 136446210;
    *(void *)&v177[4] = "nw_socket_get_input_frames";
    v154 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    LOBYTE(v168.msg_name) = 0;
    if (buf[0] == 17)
    {
      __int16 v56 = (os_log_s *)__nwlog_obj();
      os_log_type_t v57 = buf[0];
      if (os_log_type_enabled(v56, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v177 = 136446210;
        *(void *)&v177[4] = "nw_socket_get_input_frames";
        __int16 v58 = "%{public}s called with null protocol";
LABEL_138:
        _os_log_impl(&dword_181A5C000, v56, v57, v58, v177, 0xCu);
      }

uint64_t nw_socket_get_output_frames( nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v74 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    __int128 v71 = "nw_socket_get_output_frames";
    __int16 v56 = (char *)_os_log_send_and_compose_impl();
    v69[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v6_Block_object_dispose(va, 8) = 0;
    if (v69[0] == OS_LOG_TYPE_FAULT)
    {
      int v53 = (os_log_s *)__nwlog_obj();
      os_log_type_t v54 = v69[0];
      if (!os_log_type_enabled(v53, v69[0])) {
        goto LABEL_130;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      __int128 v71 = "nw_socket_get_output_frames";
      int v55 = "%{public}s called with null protocol";
    }

    else
    {
      if ((_BYTE)v68)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        int v53 = (os_log_s *)__nwlog_obj();
        os_log_type_t v54 = v69[0];
        BOOL v59 = os_log_type_enabled(v53, v69[0]);
        if (!backtrace_string)
        {
          if (!v59) {
            goto LABEL_130;
          }
          *(_DWORD *)unsigned int buf = 136446210;
          __int128 v71 = "nw_socket_get_output_frames";
          int v55 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_129;
        }

        if (v59)
        {
          *(_DWORD *)unsigned int buf = 136446466;
          __int128 v71 = "nw_socket_get_output_frames";
          __int16 v72 = 2082;
          *(void *)v73 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v53,  v54,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_130;
      }

      int v53 = (os_log_s *)__nwlog_obj();
      os_log_type_t v54 = v69[0];
      if (!os_log_type_enabled(v53, v69[0])) {
        goto LABEL_130;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      __int128 v71 = "nw_socket_get_output_frames";
      int v55 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

uint64_t nw_socket_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    unsigned int v18 = "nw_socket_finalize_output_frames";
    os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint32_t v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_38;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      unsigned int v18 = "nw_socket_finalize_output_frames";
      int v10 = "%{public}s called with null protocol";
    }

    else
    {
      if (!v15)
      {
        uint32_t v8 = (os_log_s *)__nwlog_obj();
        os_log_type_t v9 = type;
        if (!os_log_type_enabled(v8, type)) {
          goto LABEL_38;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        unsigned int v18 = "nw_socket_finalize_output_frames";
        int v10 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_37;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint32_t v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)unsigned int buf = 136446466;
          unsigned int v18 = "nw_socket_finalize_output_frames";
          __int16 v19 = 2082;
          uint64_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v7) {
          return 0LL;
        }
        goto LABEL_39;
      }

      if (!v12) {
        goto LABEL_38;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      unsigned int v18 = "nw_socket_finalize_output_frames";
      int v10 = "%{public}s called with null protocol, no backtrace";
    }

uint64_t nw_socket_get_parameters(nw_protocol *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    char v24 = "nw_socket_get_parameters";
    int v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_54;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      char v24 = "nw_socket_get_parameters";
      char v16 = "%{public}s called with null protocol";
    }

    else
    {
      if (!v21)
      {
        BOOL v14 = (os_log_s *)__nwlog_obj();
        os_log_type_t v15 = type;
        if (!os_log_type_enabled(v14, type)) {
          goto LABEL_54;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        char v24 = "nw_socket_get_parameters";
        char v16 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_53;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v18 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)unsigned int buf = 136446466;
          char v24 = "nw_socket_get_parameters";
          __int16 v25 = 2082;
          uint64_t v26 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v13) {
          return 0LL;
        }
        goto LABEL_55;
      }

      if (!v18) {
        goto LABEL_54;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      char v24 = "nw_socket_get_parameters";
      char v16 = "%{public}s called with null protocol, no backtrace";
    }

uint64_t nw_socket_get_path(nw_protocol *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    char v24 = "nw_socket_get_path";
    int v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_54;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      char v24 = "nw_socket_get_path";
      char v16 = "%{public}s called with null protocol";
    }

    else
    {
      if (!v21)
      {
        BOOL v14 = (os_log_s *)__nwlog_obj();
        os_log_type_t v15 = type;
        if (!os_log_type_enabled(v14, type)) {
          goto LABEL_54;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        char v24 = "nw_socket_get_path";
        char v16 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_53;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v18 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)unsigned int buf = 136446466;
          char v24 = "nw_socket_get_path";
          __int16 v25 = 2082;
          uint64_t v26 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v13) {
          return 0LL;
        }
        goto LABEL_55;
      }

      if (!v18) {
        goto LABEL_54;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      char v24 = "nw_socket_get_path";
      char v16 = "%{public}s called with null protocol, no backtrace";
    }

uint64_t nw_socket_updated_path(nw_protocol *a1, nw_protocol *a2, nw_path *a3)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if (a1->handle == &nw_protocol_ref_counted_handle)
    {
      int effective_traffic_class = nw_path_get_effective_traffic_class(a3);
      nw_socket_set_traffic_class((uint64_t)&a1[1].output_handler, effective_traffic_class);
      if (*(_DWORD *)a1[4].flow_id != 9216) {
        *(_DWORD *)a1[4].flow_id = nw_path_get_maximum_datagram_size(a3);
      }
      return 1LL;
    }

    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v18 = "nw_socket_updated_path";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v18 = "nw_socket_updated_path";
        uint64_t v10 = "%{public}s called with null socket_handler";
        goto LABEL_33;
      }

      goto LABEL_34;
    }

    if (!v15)
    {
      uint64_t v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v18 = "nw_socket_updated_path";
        uint64_t v10 = "%{public}s called with null socket_handler, backtrace limit exceeded";
        goto LABEL_33;
      }

      goto LABEL_34;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v8 = (os_log_s *)__nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v14 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v18 = "nw_socket_updated_path";
        uint64_t v10 = "%{public}s called with null socket_handler, no backtrace";
        goto LABEL_33;
      }

      goto LABEL_34;
    }

    if (v14)
    {
      *(_DWORD *)unsigned int buf = 136446466;
      BOOL v18 = "nw_socket_updated_path";
      __int16 v19 = 2082;
      BOOL v20 = backtrace_string;
      int v13 = "%{public}s called with null socket_handler, dumping backtrace:%{public}s";
      goto LABEL_23;
    }

    goto LABEL_24;
  }

  __nwlog_obj();
  *(_DWORD *)unsigned int buf = 136446210;
  BOOL v18 = "nw_socket_updated_path";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v15)
    {
      uint64_t v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v18 = "nw_socket_updated_path";
        uint64_t v10 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_33;
      }

      goto LABEL_34;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v8 = (os_log_s *)__nwlog_obj();
    os_log_type_t v9 = type;
    BOOL v12 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v18 = "nw_socket_updated_path";
        uint64_t v10 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_33;
      }

      goto LABEL_34;
    }

    if (v12)
    {
      *(_DWORD *)unsigned int buf = 136446466;
      BOOL v18 = "nw_socket_updated_path";
      __int16 v19 = 2082;
      BOOL v20 = backtrace_string;
      int v13 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_23:
      _os_log_impl(&dword_181A5C000, v8, v9, v13, buf, 0x16u);
    }

uint64_t nw_socket_get_local(nw_protocol *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    char v24 = "nw_socket_get_local";
    int v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_54;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      char v24 = "nw_socket_get_local";
      char v16 = "%{public}s called with null protocol";
    }

    else
    {
      if (!v21)
      {
        BOOL v14 = (os_log_s *)__nwlog_obj();
        os_log_type_t v15 = type;
        if (!os_log_type_enabled(v14, type)) {
          goto LABEL_54;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        char v24 = "nw_socket_get_local";
        char v16 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_53;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v18 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)unsigned int buf = 136446466;
          char v24 = "nw_socket_get_local";
          __int16 v25 = 2082;
          uint64_t v26 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v13) {
          return 0LL;
        }
        goto LABEL_55;
      }

      if (!v18) {
        goto LABEL_54;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      char v24 = "nw_socket_get_local";
      char v16 = "%{public}s called with null protocol, no backtrace";
    }

uint64_t nw_socket_get_remote(nw_protocol *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    char v24 = "nw_socket_get_remote";
    int v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_54;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      char v24 = "nw_socket_get_remote";
      char v16 = "%{public}s called with null protocol";
    }

    else
    {
      if (!v21)
      {
        BOOL v14 = (os_log_s *)__nwlog_obj();
        os_log_type_t v15 = type;
        if (!os_log_type_enabled(v14, type)) {
          goto LABEL_54;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        char v24 = "nw_socket_get_remote";
        char v16 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_53;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v18 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)unsigned int buf = 136446466;
          char v24 = "nw_socket_get_remote";
          __int16 v25 = 2082;
          uint64_t v26 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v13) {
          return 0LL;
        }
        goto LABEL_55;
      }

      if (!v18) {
        goto LABEL_54;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      char v24 = "nw_socket_get_remote";
      char v16 = "%{public}s called with null protocol, no backtrace";
    }

nw_protocol *nw_socket_get_output_local(nw_protocol *a1)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if (a1->handle == &nw_protocol_ref_counted_handle) {
      return a1[2].default_input_handler;
    }
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    int v13 = "nw_socket_get_output_local";
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        int v13 = "nw_socket_get_output_local";
        uint64_t v5 = "%{public}s called with null socket_handler";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (!v10)
    {
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        int v13 = "nw_socket_get_output_local";
        uint64_t v5 = "%{public}s called with null socket_handler, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v3 = (os_log_s *)__nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v9 = os_log_type_enabled(v3, type);
    if (!backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)unsigned int buf = 136446210;
        int v13 = "nw_socket_get_output_local";
        uint64_t v5 = "%{public}s called with null socket_handler, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v9)
    {
      *(_DWORD *)unsigned int buf = 136446466;
      int v13 = "nw_socket_get_output_local";
      __int16 v14 = 2082;
      os_log_type_t v15 = backtrace_string;
      uint64_t v8 = "%{public}s called with null socket_handler, dumping backtrace:%{public}s";
      goto LABEL_21;
    }

    goto LABEL_22;
  }

  __nwlog_obj();
  *(_DWORD *)unsigned int buf = 136446210;
  int v13 = "nw_socket_get_output_local";
  uint64_t v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v10)
    {
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        int v13 = "nw_socket_get_output_local";
        uint64_t v5 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v3 = (os_log_s *)__nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v7 = os_log_type_enabled(v3, type);
    if (!backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)unsigned int buf = 136446210;
        int v13 = "nw_socket_get_output_local";
        uint64_t v5 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v7)
    {
      *(_DWORD *)unsigned int buf = 136446466;
      int v13 = "nw_socket_get_output_local";
      __int16 v14 = 2082;
      os_log_type_t v15 = backtrace_string;
      uint64_t v8 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v3, v4, v8, buf, 0x16u);
    }

void *nw_socket_get_output_interface(nw_protocol *a1)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if (a1->handle == &nw_protocol_ref_counted_handle) {
      return a1[2].output_handler_context;
    }
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    int v13 = "nw_socket_get_output_interface";
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v10 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        int v13 = "nw_socket_get_output_interface";
        uint64_t v5 = "%{public}s called with null socket_handler";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (!v10)
    {
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        int v13 = "nw_socket_get_output_interface";
        uint64_t v5 = "%{public}s called with null socket_handler, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v3 = (os_log_s *)__nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v9 = os_log_type_enabled(v3, type);
    if (!backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)unsigned int buf = 136446210;
        int v13 = "nw_socket_get_output_interface";
        uint64_t v5 = "%{public}s called with null socket_handler, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v9)
    {
      *(_DWORD *)unsigned int buf = 136446466;
      int v13 = "nw_socket_get_output_interface";
      __int16 v14 = 2082;
      os_log_type_t v15 = backtrace_string;
      uint64_t v8 = "%{public}s called with null socket_handler, dumping backtrace:%{public}s";
      goto LABEL_21;
    }

    goto LABEL_22;
  }

  __nwlog_obj();
  *(_DWORD *)unsigned int buf = 136446210;
  int v13 = "nw_socket_get_output_interface";
  uint64_t v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v10 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v10)
    {
      uint64_t v3 = (os_log_s *)__nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        int v13 = "nw_socket_get_output_interface";
        uint64_t v5 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v3 = (os_log_s *)__nwlog_obj();
    os_log_type_t v4 = type;
    BOOL v7 = os_log_type_enabled(v3, type);
    if (!backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)unsigned int buf = 136446210;
        int v13 = "nw_socket_get_output_interface";
        uint64_t v5 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v7)
    {
      *(_DWORD *)unsigned int buf = 136446466;
      int v13 = "nw_socket_get_output_interface";
      __int16 v14 = 2082;
      os_log_type_t v15 = backtrace_string;
      uint64_t v8 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v3, v4, v8, buf, 0x16u);
    }

uint64_t nw_socket_waiting_for_output(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if (a1->handle == &nw_protocol_ref_counted_handle) {
      return *(unsigned __int16 *)&a1[6].flow_id[13] >> 15;
    }
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    __int16 v14 = "nw_socket_waiting_for_output";
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        __int16 v14 = "nw_socket_waiting_for_output";
        int v6 = "%{public}s called with null socket_handler";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (!v11)
    {
      os_log_type_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        __int16 v14 = "nw_socket_waiting_for_output";
        int v6 = "%{public}s called with null socket_handler, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v10)
      {
        *(_DWORD *)unsigned int buf = 136446210;
        __int16 v14 = "nw_socket_waiting_for_output";
        int v6 = "%{public}s called with null socket_handler, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v10)
    {
      *(_DWORD *)unsigned int buf = 136446466;
      __int16 v14 = "nw_socket_waiting_for_output";
      __int16 v15 = 2082;
      uint64_t v16 = backtrace_string;
      BOOL v9 = "%{public}s called with null socket_handler, dumping backtrace:%{public}s";
      goto LABEL_21;
    }

    goto LABEL_22;
  }

  __nwlog_obj();
  *(_DWORD *)unsigned int buf = 136446210;
  __int16 v14 = "nw_socket_waiting_for_output";
  uint64_t v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v11)
    {
      os_log_type_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        __int16 v14 = "nw_socket_waiting_for_output";
        int v6 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v4 = (os_log_s *)__nwlog_obj();
    os_log_type_t v5 = type;
    BOOL v8 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (v8)
      {
        *(_DWORD *)unsigned int buf = 136446210;
        __int16 v14 = "nw_socket_waiting_for_output";
        int v6 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v8)
    {
      *(_DWORD *)unsigned int buf = 136446466;
      __int16 v14 = "nw_socket_waiting_for_output";
      __int16 v15 = 2082;
      uint64_t v16 = backtrace_string;
      BOOL v9 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v4, v5, v9, buf, 0x16u);
    }

uint64_t nw_socket_connect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v183 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_socket_connect";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(type.sae_srcif) = 16;
    LOBYTE(v160) = 0;
    if (__nwlog_fault(v9, &type, &v160))
    {
      if (LOBYTE(type.sae_srcif) == 17)
      {
        BOOL v10 = (os_log_s *)__nwlog_obj();
        os_log_type_t sae_srcif = type.sae_srcif;
        if (os_log_type_enabled(v10, type.sae_srcif))
        {
          *(_DWORD *)unsigned int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_socket_connect";
          BOOL v12 = "%{public}s called with null protocol";
          goto LABEL_183;
        }
      }

      else if ((_BYTE)v160)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v10 = (os_log_s *)__nwlog_obj();
        os_log_type_t sae_srcif = type.sae_srcif;
        BOOL v142 = os_log_type_enabled(v10, type.sae_srcif);
        if (backtrace_string)
        {
          if (v142)
          {
            *(_DWORD *)unsigned int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_socket_connect";
            *(_WORD *)&buf[12] = 2082;
            *(void *)&_BYTE buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v10,  sae_srcif,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
        }

        else if (v142)
        {
          *(_DWORD *)unsigned int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_socket_connect";
          BOOL v12 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_183;
        }
      }

      else
      {
        BOOL v10 = (os_log_s *)__nwlog_obj();
        os_log_type_t sae_srcif = type.sae_srcif;
        if (os_log_type_enabled(v10, type.sae_srcif))
        {
          *(_DWORD *)unsigned int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_socket_connect";
          BOOL v12 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_183;
        }
      }
    }

void sub_1823FF668(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_socket_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    uint64_t v16 = "nw_socket_disconnect";
    os_log_type_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_42;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      uint64_t v16 = "nw_socket_disconnect";
      BOOL v8 = "%{public}s called with null protocol";
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)unsigned int buf = 136446466;
          uint64_t v16 = "nw_socket_disconnect";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v5) {
          return;
        }
LABEL_43:
        free(v5);
        return;
      }

      if (!v10) {
        goto LABEL_42;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      uint64_t v16 = "nw_socket_disconnect";
      BOOL v8 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      char v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_42;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      uint64_t v16 = "nw_socket_disconnect";
      BOOL v8 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

void nw_socket_error(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v44 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if (a1->handle == &nw_protocol_ref_counted_handle)
    {
      int identifier = a1[2].identifier;
      if (identifier)
      {
        uint64_t v4 = *(void *)&identifier->name[24];
        if (v4)
        {
          os_log_type_t v5 = *(void (**)(void))(v4 + 56);
          if (v5)
          {
            v5();
            return;
          }
        }
      }

      __nwlog_obj();
      char v6 = a1[2].identifier;
      os_log_type_t v7 = "invalid";
      if (v6)
      {
        BOOL v8 = *(const char **)&v6->name[16];
        if (v8) {
          os_log_type_t v7 = v8;
        }
      }

      *(_DWORD *)unsigned int buf = 136446466;
      int v39 = "nw_socket_error";
      __int16 v40 = 2082;
      int v41 = (void *)v7;
      BOOL v9 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v36 = 0;
      if (__nwlog_fault(v9, &type, &v36))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          BOOL v10 = (os_log_s *)__nwlog_obj();
          os_log_type_t v11 = type;
          if (!os_log_type_enabled(v10, type)) {
            goto LABEL_65;
          }
          BOOL v12 = a1[2].identifier;
          char v13 = "invalid";
          if (v12)
          {
            BOOL v14 = *(const char **)&v12->name[16];
            if (v14) {
              char v13 = v14;
            }
          }

          *(_DWORD *)unsigned int buf = 136446466;
          int v39 = "nw_socket_error";
          __int16 v40 = 2082;
          int v41 = (void *)v13;
          __int16 v15 = "%{public}s protocol %{public}s has invalid error callback";
LABEL_54:
          int v33 = v10;
          os_log_type_t v34 = v11;
          uint32_t v35 = 22;
LABEL_64:
          _os_log_impl(&dword_181A5C000, v33, v34, v15, buf, v35);
          goto LABEL_65;
        }

        if (!v36)
        {
          BOOL v10 = (os_log_s *)__nwlog_obj();
          os_log_type_t v11 = type;
          if (!os_log_type_enabled(v10, type)) {
            goto LABEL_65;
          }
          BOOL v23 = a1[2].identifier;
          int v24 = "invalid";
          if (v23)
          {
            unsigned int v25 = *(const char **)&v23->name[16];
            if (v25) {
              int v24 = v25;
            }
          }

          *(_DWORD *)unsigned int buf = 136446466;
          int v39 = "nw_socket_error";
          __int16 v40 = 2082;
          int v41 = (void *)v24;
          __int16 v15 = "%{public}s protocol %{public}s has invalid error callback, backtrace limit exceeded";
          goto LABEL_54;
        }

        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v10 = (os_log_s *)__nwlog_obj();
        os_log_type_t v11 = type;
        BOOL v17 = os_log_type_enabled(v10, type);
        if (!backtrace_string)
        {
          if (!v17) {
            goto LABEL_65;
          }
          os_log_type_t v30 = a1[2].identifier;
          int v31 = "invalid";
          if (v30)
          {
            __int16 v32 = *(const char **)&v30->name[16];
            if (v32) {
              int v31 = v32;
            }
          }

          *(_DWORD *)unsigned int buf = 136446466;
          int v39 = "nw_socket_error";
          __int16 v40 = 2082;
          int v41 = (void *)v31;
          __int16 v15 = "%{public}s protocol %{public}s has invalid error callback, no backtrace";
          goto LABEL_54;
        }

        if (v17)
        {
          BOOL v18 = a1[2].identifier;
          uint64_t v19 = "invalid";
          if (v18)
          {
            int v20 = *(const char **)&v18->name[16];
            if (v20) {
              uint64_t v19 = v20;
            }
          }

          *(_DWORD *)unsigned int buf = 136446722;
          int v39 = "nw_socket_error";
          __int16 v40 = 2082;
          int v41 = (void *)v19;
          __int16 v42 = 2082;
          uint64_t v43 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s protocol %{public}s has invalid error callback, dumping backtrace:%{public}s",  buf,  0x20u);
        }

        free(backtrace_string);
      }

uint64_t nw_socket_reset(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    uint64_t v19 = "nw_socket_reset";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v16)
      {
        BOOL v9 = (os_log_s *)__nwlog_obj();
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_39;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        uint64_t v19 = "nw_socket_reset";
        os_log_type_t v11 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_38;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (!v13) {
          goto LABEL_39;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        uint64_t v19 = "nw_socket_reset";
        os_log_type_t v11 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_38;
      }

      if (v13)
      {
        *(_DWORD *)unsigned int buf = 136446466;
        uint64_t v19 = "nw_socket_reset";
        __int16 v20 = 2082;
        uint64_t v21 = backtrace_string;
        BOOL v14 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_28:
        _os_log_impl(&dword_181A5C000, v9, v10, v14, buf, 0x16u);
      }

void *nw_socket_copy_info(uint64_t a1, int a2, void *a3)
{
  uint64_t v111 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_socket_copy_info";
    uint64_t v4 = _os_log_send_and_compose_impl();
    v86[0] = 16;
    LOBYTE(v85[0]) = 0;
    if (v86[0] == 17)
    {
      __int16 v32 = (os_log_s *)__nwlog_obj();
      os_log_type_t v33 = v86[0];
      if (os_log_type_enabled(v32, (os_log_type_t)v86[0]))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_socket_copy_info";
        os_log_type_t v34 = "%{public}s called with null protocol";
LABEL_181:
        _os_log_impl(&dword_181A5C000, v32, v33, v34, buf, 0xCu);
      }

uint64_t nw_socket_register_notification(uint64_t a1, uint64_t a2, int a3, int *a4, uint64_t a5)
{
  uint64_t v48 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    os_log_type_t v41 = "nw_socket_register_notification";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v30 = (os_log_s *)__nwlog_obj();
      os_log_type_t v31 = type;
      if (!os_log_type_enabled(v30, type)) {
        goto LABEL_83;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      os_log_type_t v41 = "nw_socket_register_notification";
      os_log_type_t v11 = "%{public}s called with null protocol";
      goto LABEL_143;
    }

    if (!v38)
    {
      os_log_type_t v30 = (os_log_s *)__nwlog_obj();
      os_log_type_t v31 = type;
      if (!os_log_type_enabled(v30, type)) {
        goto LABEL_83;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      os_log_type_t v41 = "nw_socket_register_notification";
      os_log_type_t v11 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_143;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    os_log_type_t v30 = (os_log_s *)__nwlog_obj();
    os_log_type_t v31 = type;
    BOOL v33 = os_log_type_enabled(v30, type);
    if (!backtrace_string)
    {
      if (!v33) {
        goto LABEL_83;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      os_log_type_t v41 = "nw_socket_register_notification";
      os_log_type_t v11 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_143;
    }

    if (!v33)
    {
LABEL_109:
      free(backtrace_string);
      if (!v8) {
        return 0LL;
      }
      goto LABEL_84;
    }

    *(_DWORD *)unsigned int buf = 136446466;
    os_log_type_t v41 = "nw_socket_register_notification";
    __int16 v42 = 2082;
    uint64_t v43 = backtrace_string;
    os_log_type_t v34 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_108:
    _os_log_impl(&dword_181A5C000, v30, v31, v34, buf, 0x16u);
    goto LABEL_109;
  }

  if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
  {
    uint64_t v6 = a1 + 96;
    switch(a3)
    {
      case 0:
        if ((*(_WORD *)(a1 + 397) & 0x80) != 0) {
          return 0LL;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        int v7 = (char *)(a1 + 404);
        *(_DWORD *)unsigned int buf = 136446722;
        os_log_type_t v41 = "nw_socket_register_notification";
        __int16 v42 = 2082;
        uint64_t v43 = (char *)(a1 + 404);
        __int16 v44 = 2082;
        uint64_t v45 = "undefined";
        BOOL v8 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v38 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          uint64_t v9 = gconnectionLogObj;
          os_log_type_t v10 = type;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
          {
            *(_DWORD *)unsigned int buf = 136446722;
            os_log_type_t v41 = "nw_socket_register_notification";
            __int16 v42 = 2082;
            uint64_t v43 = v7;
            __int16 v44 = 2082;
            uint64_t v45 = "undefined";
            os_log_type_t v11 = "%{public}s %{public}s invalid registration notification: %{public}s";
            goto LABEL_80;
          }

          goto LABEL_83;
        }

        if (!v38)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          uint64_t v9 = gconnectionLogObj;
          os_log_type_t v10 = type;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
          {
            *(_DWORD *)unsigned int buf = 136446722;
            os_log_type_t v41 = "nw_socket_register_notification";
            __int16 v42 = 2082;
            uint64_t v43 = v7;
            __int16 v44 = 2082;
            uint64_t v45 = "undefined";
            os_log_type_t v11 = "%{public}s %{public}s invalid registration notification: %{public}s, backtrace limit exceeded";
            goto LABEL_80;
          }

          goto LABEL_83;
        }

        id v20 = (char *)__nw_create_backtrace_string();
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v21 = (os_log_s *)gconnectionLogObj;
        os_log_type_t v22 = type;
        BOOL v23 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
        if (v20)
        {
          if (v23)
          {
            *(_DWORD *)unsigned int buf = 136446978;
            os_log_type_t v41 = "nw_socket_register_notification";
            __int16 v42 = 2082;
            uint64_t v43 = v7;
            __int16 v44 = 2082;
            uint64_t v45 = "undefined";
            __int16 v46 = 2082;
            BOOL v47 = v20;
            _os_log_impl( &dword_181A5C000,  v21,  v22,  "%{public}s %{public}s invalid registration notification: %{public}s, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

          free(v20);
          goto LABEL_83;
        }

        if (!v23) {
          goto LABEL_83;
        }
        *(_DWORD *)unsigned int buf = 136446722;
        os_log_type_t v41 = "nw_socket_register_notification";
        __int16 v42 = 2082;
        uint64_t v43 = v7;
        __int16 v44 = 2082;
        uint64_t v45 = "undefined";
        os_log_type_t v11 = "%{public}s %{public}s invalid registration notification: %{public}s, no backtrace";
        goto LABEL_91;
      case 1:
        if (!a4)
        {
          __nwlog_obj();
          *(_DWORD *)unsigned int buf = 136446210;
          os_log_type_t v41 = "nw_socket_register_notification";
          BOOL v8 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v38 = 0;
          if (type == OS_LOG_TYPE_FAULT)
          {
            os_log_type_t v30 = (os_log_s *)__nwlog_obj();
            os_log_type_t v31 = type;
            if (!os_log_type_enabled(v30, type)) {
              goto LABEL_83;
            }
            *(_DWORD *)unsigned int buf = 136446210;
            os_log_type_t v41 = "nw_socket_register_notification";
            os_log_type_t v11 = "%{public}s called with null val";
            goto LABEL_143;
          }

          if (v38)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            os_log_type_t v30 = (os_log_s *)__nwlog_obj();
            os_log_type_t v31 = type;
            BOOL v36 = os_log_type_enabled(v30, type);
            if (backtrace_string)
            {
              if (!v36) {
                goto LABEL_109;
              }
              goto LABEL_130;
            }

            if (!v36) {
              goto LABEL_83;
            }
            *(_DWORD *)unsigned int buf = 136446210;
            os_log_type_t v41 = "nw_socket_register_notification";
            os_log_type_t v11 = "%{public}s called with null val, no backtrace";
          }

          else
          {
            os_log_type_t v30 = (os_log_s *)__nwlog_obj();
            os_log_type_t v31 = type;
            if (!os_log_type_enabled(v30, type)) {
              goto LABEL_83;
            }
            *(_DWORD *)unsigned int buf = 136446210;
            os_log_type_t v41 = "nw_socket_register_notification";
            os_log_type_t v11 = "%{public}s called with null val, backtrace limit exceeded";
          }

          goto LABEL_143;
        }

        if (a5)
        {
          int v12 = *a4;
          int v13 = *(_DWORD *)(a1 + 288);
          if (!*a4) {
            int v12 = 5;
          }
          *(_DWORD *)(a1 + 28_Block_object_dispose(va, 8) = v12;
          uint64_t v14 = 1LL;
          if ((nw_socket_add_socket_events(v6, 1, 1024, 0) & 1) == 0)
          {
            uint64_t v14 = 0LL;
            *(_DWORD *)(a1 + 28_Block_object_dispose(va, 8) = v13;
          }

          return v14;
        }

        if ((*(_WORD *)(a1 + 397) & 0x80) != 0) {
          return 0LL;
        }
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        BOOL v18 = (char *)(a1 + 404);
        *(_DWORD *)unsigned int buf = 136446722;
        os_log_type_t v41 = "nw_socket_register_notification";
        __int16 v42 = 2082;
        uint64_t v43 = (char *)(a1 + 404);
        __int16 v44 = 2082;
        uint64_t v45 = "read_timeout";
        BOOL v8 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v38 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          uint64_t v9 = gconnectionLogObj;
          os_log_type_t v10 = type;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
          {
            *(_DWORD *)unsigned int buf = 136446722;
            os_log_type_t v41 = "nw_socket_register_notification";
            __int16 v42 = 2082;
            uint64_t v43 = v18;
            __int16 v44 = 2082;
            uint64_t v45 = "read_timeout";
            os_log_type_t v11 = "%{public}s %{public}s register notification for %{public}s called with zero length";
            goto LABEL_80;
          }

          goto LABEL_83;
        }

        if (!v38)
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          uint64_t v9 = gconnectionLogObj;
          os_log_type_t v10 = type;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
          {
            *(_DWORD *)unsigned int buf = 136446722;
            os_log_type_t v41 = "nw_socket_register_notification";
            __int16 v42 = 2082;
            uint64_t v43 = v18;
            __int16 v44 = 2082;
            uint64_t v45 = "read_timeout";
            os_log_type_t v11 = "%{public}s %{public}s register notification for %{public}s called with zero length, backtrace limit exceeded";
            goto LABEL_80;
          }

          goto LABEL_83;
        }

        int v24 = (char *)__nw_create_backtrace_string();
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v21 = (os_log_s *)gconnectionLogObj;
        os_log_type_t v22 = type;
        BOOL v25 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
        if (v24)
        {
          if (!v25) {
            goto LABEL_68;
          }
          *(_DWORD *)unsigned int buf = 136446978;
          os_log_type_t v41 = "nw_socket_register_notification";
          __int16 v42 = 2082;
          uint64_t v43 = v18;
          __int16 v44 = 2082;
          uint64_t v45 = "read_timeout";
          __int16 v46 = 2082;
          BOOL v47 = v24;
          goto LABEL_67;
        }

        if (!v25) {
          goto LABEL_83;
        }
        *(_DWORD *)unsigned int buf = 136446722;
        os_log_type_t v41 = "nw_socket_register_notification";
        __int16 v42 = 2082;
        uint64_t v43 = v18;
        __int16 v44 = 2082;
        uint64_t v45 = "read_timeout";
        os_log_type_t v11 = "%{public}s %{public}s register notification for %{public}s called with zero length, no backtrace";
        goto LABEL_91;
      case 2:
        if (a4)
        {
          if (a5)
          {
            int v15 = *a4;
            int v16 = *(_DWORD *)(a1 + 292);
            if (!*a4) {
              int v15 = 5;
            }
            *(_DWORD *)(a1 + 292) = v15;
            uint64_t v14 = 1LL;
            if ((nw_socket_add_socket_events(v6, 1, 512, 0) & 1) == 0)
            {
              uint64_t v14 = 0LL;
              *(_DWORD *)(a1 + 292) = v16;
            }

            return v14;
          }

          if ((*(_WORD *)(a1 + 397) & 0x80) != 0) {
            return 0LL;
          }
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          uint64_t v19 = (char *)(a1 + 404);
          *(_DWORD *)unsigned int buf = 136446722;
          os_log_type_t v41 = "nw_socket_register_notification";
          __int16 v42 = 2082;
          uint64_t v43 = (char *)(a1 + 404);
          __int16 v44 = 2082;
          uint64_t v45 = "write_timeout";
          BOOL v8 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v38 = 0;
          if (type == OS_LOG_TYPE_FAULT)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            uint64_t v9 = gconnectionLogObj;
            os_log_type_t v10 = type;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
            {
              *(_DWORD *)unsigned int buf = 136446722;
              os_log_type_t v41 = "nw_socket_register_notification";
              __int16 v42 = 2082;
              uint64_t v43 = v19;
              __int16 v44 = 2082;
              uint64_t v45 = "write_timeout";
              os_log_type_t v11 = "%{public}s %{public}s register notification for %{public}s called with zero length";
LABEL_80:
              os_log_type_t v27 = (os_log_s *)v9;
              os_log_type_t v28 = v10;
LABEL_81:
              uint32_t v29 = 32;
              goto LABEL_82;
            }

            goto LABEL_83;
          }

          if (!v38)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            uint64_t v9 = gconnectionLogObj;
            os_log_type_t v10 = type;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, type))
            {
              *(_DWORD *)unsigned int buf = 136446722;
              os_log_type_t v41 = "nw_socket_register_notification";
              __int16 v42 = 2082;
              uint64_t v43 = v19;
              __int16 v44 = 2082;
              uint64_t v45 = "write_timeout";
              os_log_type_t v11 = "%{public}s %{public}s register notification for %{public}s called with zero length, backtrace limit exceeded";
              goto LABEL_80;
            }

            goto LABEL_83;
          }

          int v24 = (char *)__nw_create_backtrace_string();
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          uint64_t v21 = (os_log_s *)gconnectionLogObj;
          os_log_type_t v22 = type;
          BOOL v26 = os_log_type_enabled((os_log_t)gconnectionLogObj, type);
          if (!v24)
          {
            if (v26)
            {
              *(_DWORD *)unsigned int buf = 136446722;
              os_log_type_t v41 = "nw_socket_register_notification";
              __int16 v42 = 2082;
              uint64_t v43 = v19;
              __int16 v44 = 2082;
              uint64_t v45 = "write_timeout";
              os_log_type_t v11 = "%{public}s %{public}s register notification for %{public}s called with zero length, no backtrace";
LABEL_91:
              os_log_type_t v27 = v21;
              os_log_type_t v28 = v22;
              goto LABEL_81;
            }

            goto LABEL_83;
          }

          if (v26)
          {
            *(_DWORD *)unsigned int buf = 136446978;
            os_log_type_t v41 = "nw_socket_register_notification";
            __int16 v42 = 2082;
            uint64_t v43 = v19;
            __int16 v44 = 2082;
            uint64_t v45 = "write_timeout";
            __int16 v46 = 2082;
            BOOL v47 = v24;
LABEL_67:
            _os_log_impl( &dword_181A5C000,  v21,  v22,  "%{public}s %{public}s register notification for %{public}s called with zero length, dumping backtrace:%{public}s",  buf,  0x2Au);
          }

uint64_t nw_socket_unregister_notification(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    uint32_t v29 = "nw_socket_unregister_notification";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v20 = (os_log_s *)__nwlog_obj();
      os_log_type_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      uint32_t v29 = "nw_socket_unregister_notification";
      uint64_t v9 = "%{public}s called with null protocol";
LABEL_65:
      BOOL v17 = v20;
      os_log_type_t v18 = v21;
      uint32_t v19 = 12;
LABEL_32:
      _os_log_impl(&dword_181A5C000, v17, v18, v9, buf, v19);
      goto LABEL_33;
    }

    if (!v26)
    {
      id v20 = (os_log_s *)__nwlog_obj();
      os_log_type_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      uint32_t v29 = "nw_socket_unregister_notification";
      uint64_t v9 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_65;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    id v20 = (os_log_s *)__nwlog_obj();
    os_log_type_t v21 = type;
    BOOL v23 = os_log_type_enabled(v20, type);
    if (!backtrace_string)
    {
      if (!v23) {
        goto LABEL_33;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      uint32_t v29 = "nw_socket_unregister_notification";
      uint64_t v9 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_65;
    }

    if (v23)
    {
      *(_DWORD *)unsigned int buf = 136446466;
      uint32_t v29 = "nw_socket_unregister_notification";
      __int16 v30 = 2082;
      os_log_type_t v31 = backtrace_string;
      int v24 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_54:
      _os_log_impl(&dword_181A5C000, v20, v21, v24, buf, 0x16u);
    }

void nw_protocol_socket_notify(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    int v12 = "nw_protocol_socket_notify";
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v9 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v2 = (os_log_s *)__nwlog_obj();
      os_log_type_t v3 = type;
      if (!os_log_type_enabled(v2, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      int v12 = "nw_protocol_socket_notify";
      uint64_t v4 = "%{public}s called with null protocol";
    }

    else
    {
      if (!v9)
      {
        uint64_t v2 = (os_log_s *)__nwlog_obj();
        os_log_type_t v3 = type;
        if (!os_log_type_enabled(v2, type)) {
          goto LABEL_32;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        int v12 = "nw_protocol_socket_notify";
        uint64_t v4 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v2 = (os_log_s *)__nwlog_obj();
      os_log_type_t v3 = type;
      BOOL v6 = os_log_type_enabled(v2, type);
      if (backtrace_string)
      {
        if (v6)
        {
          *(_DWORD *)unsigned int buf = 136446466;
          int v12 = "nw_protocol_socket_notify";
          __int16 v13 = 2082;
          uint64_t v14 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v2,  v3,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (v1) {
          goto LABEL_33;
        }
        return;
      }

      if (!v6) {
        goto LABEL_32;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      int v12 = "nw_protocol_socket_notify";
      uint64_t v4 = "%{public}s called with null protocol, no backtrace";
    }

void nw_protocol_socket_get_message_properties(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v16 = "nw_protocol_socket_get_message_properties";
    os_log_type_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_37;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      BOOL v16 = "nw_protocol_socket_get_message_properties";
      BOOL v8 = "%{public}s called with null protocol";
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)unsigned int buf = 136446466;
          BOOL v16 = "nw_protocol_socket_get_message_properties";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_37:
        if (!v5) {
          return;
        }
LABEL_38:
        free(v5);
        return;
      }

      if (!v10) {
        goto LABEL_37;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      BOOL v16 = "nw_protocol_socket_get_message_properties";
      BOOL v8 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      BOOL v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_37;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      BOOL v16 = "nw_protocol_socket_get_message_properties";
      BOOL v8 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

uint64_t nw_socket_add_socket_events(uint64_t a1, int a2, int a3, char a4)
{
  __int16 v4 = a3;
  uint64_t v78 = *MEMORY[0x1895F89C0];
  uint64_t v7 = *(void *)(a1 + 96);
  int v8 = *(_DWORD *)(a1 + 180);
  int v9 = v8 | a3;
  int v10 = v8 & ~a3;
  if (a2) {
    unsigned int v11 = v9;
  }
  else {
    unsigned int v11 = v10;
  }
  *(_DWORD *)(a1 + 180) = v11;
  if ((a4 & 1) == 0 && (*(_WORD *)(a1 + 301) & 4) == 0 || *(_DWORD *)(a1 + 184) == v11) {
    return 1LL;
  }
  uint64_t v12 = 0LL;
  uint64_t v66 = 0LL;
  BOOL v67 = &v66;
  uint64_t v68 = 0x2000000000LL;
  if (*(_UNKNOWN **)(a1 - 56) == &nw_protocol_ref_counted_handle)
  {
    uint64_t v12 = a1 - 96;
    uint64_t v13 = *(void *)(a1 - 8);
    if (v13) {
      *(void *)(a1 - _Block_object_dispose(va, 8) = v13 + 1;
    }
  }

  uint64_t v69 = v12;
  *(void *)uint64_t v74 = 0LL;
  *(void *)&v74[8] = v74;
  uint64_t v14 = __Block_byref_object_copy__64064;
  *(void *)&v74[16] = 0x3802000000LL;
  *(void *)&v74[24] = __Block_byref_object_copy__64064;
  v75 = __Block_byref_object_dispose__64065;
  uint64_t v15 = *(void **)(a1 + 64);
  if (v15)
  {
    uint64_t v15 = os_retain(v15);
    LOBYTE(v14) = v77;
  }

  uint64_t v76 = v15;
  char v77 = v14 | 1;
  BOOL v16 = *(void **)(a1 + 128);
  int v17 = *(_DWORD *)(a1 + 172);
  *(void *)BOOL v61 = MEMORY[0x1895F87A8];
  uint64_t v62 = 0x40000000LL;
  uint64_t v63 = ___ZL34nw_socket_init_socket_event_sourceP9nw_socketj_block_invoke;
  os_log_type_t v64 = &__block_descriptor_tmp_38_64066;
  uint64_t v65 = a1;
  v60[0] = MEMORY[0x1895F87A8];
  v60[1] = 0x40000000LL;
  v60[2] = ___ZL34nw_socket_init_socket_event_sourceP9nw_socketj_block_invoke_2;
  v60[3] = &unk_189BC4F10;
  v60[4] = v74;
  v60[5] = &v66;
  BOOL source = nw_queue_context_create_source(v16, v17, 4, v11, v61, v60);
  BOOL v20 = source;
  *(void *)(a1 + 96) = source;
  if (source)
  {
    nw_queue_activate_source(source, v19);
    goto LABEL_43;
  }

  uint64_t v21 = *(void *)&v74[8];
  char v22 = *(_BYTE *)(*(void *)&v74[8] + 48LL);
  if ((v22 & 1) != 0)
  {
    BOOL v23 = *(void **)(*(void *)&v74[8] + 40LL);
    if (v23)
    {
      os_release(v23);
      char v22 = *(_BYTE *)(v21 + 48);
    }
  }

  *(void *)(v21 + 40) = 0LL;
  *(_BYTE *)(v21 + 4_Block_object_dispose(va, 8) = v22 | 1;
  uint64_t v24 = v67[3];
  if (v24)
  {
    if (*(_UNKNOWN **)(v24 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v31 = *(void *)(v24 + 88);
      if (v31)
      {
        uint64_t v32 = v31 - 1;
        *(void *)(v24 + 8_Block_object_dispose(va, 8) = v32;
        if (!v32)
        {
          BOOL v33 = *(void (***)(void))(v24 + 64);
          if (v33)
          {
            *(void *)(v24 + 64) = 0LL;
            v33[2](v33);
            _Block_release(v33);
          }

          if ((*(_BYTE *)(v24 + 72) & 1) != 0)
          {
            __int16 v34 = *(const void **)(v24 + 64);
            if (v34) {
              _Block_release(v34);
            }
          }

          free((void *)v24);
        }
      }
    }
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)unsigned int buf = 136446210;
  BOOL v71 = "nw_socket_init_socket_event_source";
  BOOL v25 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v58 = 0;
  if (__nwlog_fault(v25, &type, &v58))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v26 = (os_log_s *)gLogObj;
      os_log_type_t v27 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_41;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      BOOL v71 = "nw_socket_init_socket_event_source";
      os_log_type_t v28 = "%{public}s nw_queue_context_create_source failed";
      goto LABEL_40;
    }

    if (!v58)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      char v26 = (os_log_s *)gLogObj;
      os_log_type_t v27 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_41;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      BOOL v71 = "nw_socket_init_socket_event_source";
      os_log_type_t v28 = "%{public}s nw_queue_context_create_source failed, backtrace limit exceeded";
      goto LABEL_40;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v26 = (os_log_s *)gLogObj;
    os_log_type_t v27 = type;
    BOOL v30 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v30)
      {
        *(_DWORD *)unsigned int buf = 136446466;
        BOOL v71 = "nw_socket_init_socket_event_source";
        __int16 v72 = 2082;
        BOOL v73 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v26,  v27,  "%{public}s nw_queue_context_create_source failed, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_41;
    }

    if (v30)
    {
      *(_DWORD *)unsigned int buf = 136446210;
      BOOL v71 = "nw_socket_init_socket_event_source";
      os_log_type_t v28 = "%{public}s nw_queue_context_create_source failed, no backtrace";
LABEL_40:
      _os_log_impl(&dword_181A5C000, v26, v27, v28, buf, 0xCu);
    }
  }

uint64_t __Block_byref_object_copy__64064(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(_BYTE *)(result + 4_Block_object_dispose(va, 8) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0LL;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__64065(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    uint64_t v2 = *(void **)(a1 + 40);
    if (v2) {
      os_release(v2);
    }
  }

  *(void *)(a1 + 40) = 0LL;
}

void ___ZL34nw_socket_init_socket_event_sourceP9nw_socketj_block_invoke(uint64_t a1)
{
  uint64_t v108 = *MEMORY[0x1895F89C0];
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = (_WORD *)(v1 + 301);
    if ((*(_WORD *)(v1 + 301) & 0x4000) != 0) {
      return;
    }
    unsigned int v4 = *(_DWORD *)(v1 + 180) & nw_queue_source_get_data(*(dispatch_source_s ***)(v1 + 96));
    if (!v4) {
      return;
    }
    if ((*v2 & 0x80) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      os_log_type_t v5 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)unsigned int buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_socket_handle_socket_event";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&_BYTE buf[14] = v1 + 308;
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v105) = v4;
        _os_log_impl(&dword_181A5C000, v5, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s Event mask: %#x", buf, 0x1Cu);
      }
    }

    char v6 = v4 & 1;
    if ((v4 & 1) == 0)
    {
      int v9 = 0;
      int v8 = 60;
      if ((v4 & 8) == 0)
      {
LABEL_20:
        unsigned int v99 = v9;
        if ((v4 & 0x800) == 0) {
          goto LABEL_117;
        }
LABEL_42:
        if ((*v2 & 0x40) != 0)
        {
          if ((*v2 & 0x80) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            BOOL v30 = (os_log_s *)gconnectionLogObj;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)unsigned int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_socket_handle_socket_event";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&_BYTE buf[14] = v1 + 308;
              _os_log_impl( &dword_181A5C000,  v30,  OS_LOG_TYPE_DEFAULT,  "%{public}s %{public}s Socket received CONNECTED event, but ignoring because disconnect has been requested",  buf,  0x16u);
            }
          }

void ___ZL34nw_socket_init_socket_event_sourceP9nw_socketj_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8LL);
  char v3 = *(_BYTE *)(v2 + 48);
  if ((v3 & 1) != 0)
  {
    unsigned int v4 = *(void **)(v2 + 40);
    if (v4)
    {
      os_release(v4);
      char v3 = *(_BYTE *)(v2 + 48);
    }
  }

  *(void *)(v2 + 40) = 0LL;
  *(_BYTE *)(v2 + 4_Block_object_dispose(va, 8) = v3 | 1;
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  if (v5)
  {
    if (*(_UNKNOWN **)(v5 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v6 = *(void *)(v5 + 88);
      if (v6)
      {
        uint64_t v7 = v6 - 1;
        *(void *)(v5 + 8_Block_object_dispose(va, 8) = v7;
        if (!v7)
        {
          int v8 = *(void (***)(void))(v5 + 64);
          if (v8)
          {
            *(void *)(v5 + 64) = 0LL;
            v8[2](v8);
            _Block_release(v8);
          }

          if ((*(_BYTE *)(v5 + 72) & 1) != 0)
          {
            int v9 = *(const void **)(v5 + 64);
            if (v9) {
              _Block_release(v9);
            }
          }

          free((void *)v5);
        }
      }
    }
  }

void nw_socket_fillout_socket_properties(nw_protocol *a1)
{
  uint64_t v49 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)&__dst[0].socklen_t sa_len = 136446210;
    *(void *)&__dst[0].sa_data[2] = "nw_socket_fillout_socket_properties";
    uint64_t v31 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    LOBYTE(v42) = 0;
    if (buf[0] == 17)
    {
      int v32 = (os_log_s *)__nwlog_obj();
      os_log_type_t v33 = buf[0];
      if (!os_log_type_enabled(v32, (os_log_type_t)buf[0])) {
        goto LABEL_106;
      }
      *(_DWORD *)&__dst[0].socklen_t sa_len = 136446210;
      *(void *)&__dst[0].sa_data[2] = "nw_socket_fillout_socket_properties";
      __int16 v34 = "%{public}s called with null protocol";
    }

    else if ((_BYTE)v42)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v32 = (os_log_s *)__nwlog_obj();
      os_log_type_t v33 = buf[0];
      BOOL v36 = os_log_type_enabled(v32, (os_log_type_t)buf[0]);
      if (backtrace_string)
      {
        if (v36)
        {
          *(_DWORD *)&__dst[0].socklen_t sa_len = 136446466;
          *(void *)&__dst[0].sa_data[2] = "nw_socket_fillout_socket_properties";
          *(_WORD *)&__dst[0].sa_data[10] = 2082;
          *(void *)&__dst[0].sa_data[12] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v32,  v33,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  &__dst[0].sa_len,  0x16u);
        }

        free(backtrace_string);
LABEL_106:
        if (!v31) {
          return;
        }
LABEL_107:
        free(v31);
        return;
      }

      if (!v36) {
        goto LABEL_106;
      }
      *(_DWORD *)&__dst[0].socklen_t sa_len = 136446210;
      *(void *)&__dst[0].sa_data[2] = "nw_socket_fillout_socket_properties";
      __int16 v34 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      int v32 = (os_log_s *)__nwlog_obj();
      os_log_type_t v33 = buf[0];
      if (!os_log_type_enabled(v32, (os_log_type_t)buf[0])) {
        goto LABEL_106;
      }
      *(_DWORD *)&__dst[0].socklen_t sa_len = 136446210;
      *(void *)&__dst[0].sa_data[2] = "nw_socket_fillout_socket_properties";
      __int16 v34 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

void sub_1824075A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_socket_internal_connect(void *a1)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  uint64_t v2 = a1[4];
  uint64_t v3 = mach_continuous_time();
  if (v3 <= 1) {
    uint64_t v4 = 1LL;
  }
  else {
    uint64_t v4 = v3;
  }
  unint64_t v5 = nw_delta_nanos(v2, v4);
  uint64_t v6 = (v5 / 0xF4240);
  if (v5 > 0xF423FFFFFFFFFLL) {
    uint64_t v6 = 0xFFFFFFFFLL;
  }
  a1[5] = v6;
  uint64_t v7 = a1[6];
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 24);
    if (v8)
    {
      uint64_t v9 = *(void (**)(void, void *))(v8 + 40);
      if (v9)
      {
        v9(a1[6], a1 - 12);
        return;
      }
    }

    __nwlog_obj();
    int v10 = *(const char **)(v7 + 16);
    if (!v10) {
      int v10 = "invalid";
    }
  }

  else
  {
    __nwlog_obj();
    int v10 = "invalid";
  }

  *(_DWORD *)unsigned int buf = 136446466;
  uint64_t v24 = "nw_socket_internal_connect";
  __int16 v25 = 2082;
  char v26 = v10;
  size_t v11 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (__nwlog_fault(v11, &type, &v21))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v12 = (os_log_s *)__nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_40;
      }
      uint64_t v14 = "invalid";
      if (v7 && *(void *)(v7 + 16)) {
        uint64_t v14 = *(const char **)(v7 + 16);
      }
      *(_DWORD *)unsigned int buf = 136446466;
      uint64_t v24 = "nw_socket_internal_connect";
      __int16 v25 = 2082;
      char v26 = v14;
      os_log_type_t v15 = "%{public}s protocol %{public}s has invalid connected callback";
      goto LABEL_39;
    }

    if (!v21)
    {
      int v12 = (os_log_s *)__nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_40;
      }
      int v19 = "invalid";
      if (v7 && *(void *)(v7 + 16)) {
        int v19 = *(const char **)(v7 + 16);
      }
      *(_DWORD *)unsigned int buf = 136446466;
      uint64_t v24 = "nw_socket_internal_connect";
      __int16 v25 = 2082;
      char v26 = v19;
      os_log_type_t v15 = "%{public}s protocol %{public}s has invalid connected callback, backtrace limit exceeded";
      goto LABEL_39;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v12 = (os_log_s *)__nwlog_obj();
    os_log_type_t v13 = type;
    BOOL v17 = os_log_type_enabled(v12, type);
    if (backtrace_string)
    {
      if (v17)
      {
        int v18 = "invalid";
        if (v7 && *(void *)(v7 + 16)) {
          int v18 = *(const char **)(v7 + 16);
        }
        *(_DWORD *)unsigned int buf = 136446722;
        uint64_t v24 = "nw_socket_internal_connect";
        __int16 v25 = 2082;
        char v26 = v18;
        __int16 v27 = 2082;
        os_log_type_t v28 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v12,  v13,  "%{public}s protocol %{public}s has invalid connected callback, dumping backtrace:%{public}s",  buf,  0x20u);
      }

      free(backtrace_string);
      goto LABEL_40;
    }

    if (v17)
    {
      int v20 = "invalid";
      if (v7 && *(void *)(v7 + 16)) {
        int v20 = *(const char **)(v7 + 16);
      }
      *(_DWORD *)unsigned int buf = 136446466;
      uint64_t v24 = "nw_socket_internal_connect";
      __int16 v25 = 2082;
      char v26 = v20;
      os_log_type_t v15 = "%{public}s protocol %{public}s has invalid connected callback, no backtrace";
LABEL_39:
      _os_log_impl(&dword_181A5C000, v12, v13, v15, buf, 0x16u);
    }
  }

void nw_socket_set_maximum_segment_size(uint64_t a1, int a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if (*(_DWORD *)(a1 + 176) == 2)
  {
    if ((*(_WORD *)(a1 + 301) & 0x80) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v4 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)unsigned int buf = 136446722;
        int v18 = "nw_socket_set_maximum_segment_size";
        __int16 v19 = 2082;
        *(void *)int v20 = a1 + 308;
        *(_WORD *)&v20[8] = 1024;
        *(_DWORD *)&v20[10] = a2;
        _os_log_impl(&dword_181A5C000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s setting MSS to %d", buf, 0x1Cu);
      }
    }

    int v16 = a2;
    if (setsockopt(*(_DWORD *)(a1 + 172), 6, 2, &v16, 4u))
    {
      int v5 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v6 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)unsigned int buf = 136446722;
        int v18 = "nw_socket_set_maximum_segment_size";
        __int16 v19 = 2080;
        *(void *)int v20 = a1 + 308;
        *(_WORD *)&v20[8] = 1024;
        *(_DWORD *)&v20[10] = v5;
        _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt TCP_MAXSEG failed %{darwin.errno}d",  buf,  0x1Cu);
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v7 = (os_log_s *)gLogObj;
      if (v5 == 22)
      {
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)unsigned int buf = 136446466;
          int v18 = "nw_socket_set_maximum_segment_size";
          __int16 v19 = 1024;
          *(_DWORD *)int v20 = 22;
          _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_ERROR,  "%{public}s setsockopt TCP_MAXSEG failed %{darwin.errno}d",  buf,  0x12u);
        }

        return;
      }

      *(_DWORD *)unsigned int buf = 136446466;
      int v18 = "nw_socket_set_maximum_segment_size";
      __int16 v19 = 1024;
      *(_DWORD *)int v20 = v5;
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v14 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v9 = (os_log_s *)gLogObj;
        os_log_type_t v10 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_29;
        }
        *(_DWORD *)unsigned int buf = 136446466;
        int v18 = "nw_socket_set_maximum_segment_size";
        __int16 v19 = 1024;
        *(_DWORD *)int v20 = v5;
        size_t v11 = "%{public}s setsockopt TCP_MAXSEG failed %{darwin.errno}d";
      }

      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v9 = (os_log_s *)gLogObj;
        os_log_type_t v10 = type;
        BOOL v13 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)unsigned int buf = 136446722;
            int v18 = "nw_socket_set_maximum_segment_size";
            __int16 v19 = 1024;
            *(_DWORD *)int v20 = v5;
            *(_WORD *)&void v20[4] = 2082;
            *(void *)&v20[6] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s setsockopt TCP_MAXSEG failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
          }

          free(backtrace_string);
          goto LABEL_29;
        }

        if (!v13)
        {
LABEL_29:
          if (v8) {
            free(v8);
          }
          return;
        }

        *(_DWORD *)unsigned int buf = 136446466;
        int v18 = "nw_socket_set_maximum_segment_size";
        __int16 v19 = 1024;
        *(_DWORD *)int v20 = v5;
        size_t v11 = "%{public}s setsockopt TCP_MAXSEG failed %{darwin.errno}d, no backtrace";
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v9 = (os_log_s *)gLogObj;
        os_log_type_t v10 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_29;
        }
        *(_DWORD *)unsigned int buf = 136446466;
        int v18 = "nw_socket_set_maximum_segment_size";
        __int16 v19 = 1024;
        *(_DWORD *)int v20 = v5;
        size_t v11 = "%{public}s setsockopt TCP_MAXSEG failed %{darwin.errno}d, backtrace limit exceeded";
      }

      _os_log_impl(&dword_181A5C000, v9, v10, v11, buf, 0x12u);
      goto LABEL_29;
    }
  }

void ___ZL29nw_socket_handle_socket_eventP9nw_socket_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if ((*(_WORD *)(v2 + 301) & 0x200) != 0) {
    nw_socket_update_input_source((char *)v2);
  }
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  if (v3)
  {
    if (*(_UNKNOWN **)(v3 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v4 = *(void *)(v3 + 88);
      if (v4)
      {
        uint64_t v5 = v4 - 1;
        *(void *)(v3 + 8_Block_object_dispose(va, 8) = v5;
        if (!v5)
        {
          uint64_t v6 = *(void (***)(void))(v3 + 64);
          if (v6)
          {
            *(void *)(v3 + 64) = 0LL;
            v6[2](v6);
            _Block_release(v6);
          }

          if ((*(_BYTE *)(v3 + 72) & 1) != 0)
          {
            uint64_t v7 = *(const void **)(v3 + 64);
            if (v7) {
              _Block_release(v7);
            }
          }

          free((void *)v3);
        }
      }
    }
  }

void nw_socket_internal_error(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 24);
    if (v3)
    {
      uint64_t v4 = *(void (**)(void, uint64_t, uint64_t))(v3 + 56);
      if (v4)
      {
        v4(*(void *)(a1 + 48), a1 - 96, a2);
        return;
      }
    }

    __nwlog_obj();
    uint64_t v5 = *(const char **)(v2 + 16);
    if (!v5) {
      uint64_t v5 = "invalid";
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v5 = "invalid";
  }

  *(_DWORD *)unsigned int buf = 136446466;
  __int16 v19 = "nw_socket_internal_error";
  __int16 v20 = 2082;
  uint64_t v21 = v5;
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_35;
      }
      uint64_t v9 = "invalid";
      if (v2 && *(void *)(v2 + 16)) {
        uint64_t v9 = *(const char **)(v2 + 16);
      }
      *(_DWORD *)unsigned int buf = 136446466;
      __int16 v19 = "nw_socket_internal_error";
      __int16 v20 = 2082;
      uint64_t v21 = v9;
      os_log_type_t v10 = "%{public}s protocol %{public}s has invalid error callback";
      goto LABEL_34;
    }

    if (!v16)
    {
      uint64_t v7 = (os_log_s *)__nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_35;
      }
      char v14 = "invalid";
      if (v2 && *(void *)(v2 + 16)) {
        char v14 = *(const char **)(v2 + 16);
      }
      *(_DWORD *)unsigned int buf = 136446466;
      __int16 v19 = "nw_socket_internal_error";
      __int16 v20 = 2082;
      uint64_t v21 = v14;
      os_log_type_t v10 = "%{public}s protocol %{public}s has invalid error callback, backtrace limit exceeded";
      goto LABEL_34;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v7 = (os_log_s *)__nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v12 = os_log_type_enabled(v7, type);
    if (backtrace_string)
    {
      if (v12)
      {
        BOOL v13 = "invalid";
        if (v2 && *(void *)(v2 + 16)) {
          BOOL v13 = *(const char **)(v2 + 16);
        }
        *(_DWORD *)unsigned int buf = 136446722;
        __int16 v19 = "nw_socket_internal_error";
        __int16 v20 = 2082;
        uint64_t v21 = v13;
        __int16 v22 = 2082;
        BOOL v23 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s protocol %{public}s has invalid error callback, dumping backtrace:%{public}s",  buf,  0x20u);
      }

      free(backtrace_string);
      goto LABEL_35;
    }

    if (v12)
    {
      os_log_type_t v15 = "invalid";
      if (v2 && *(void *)(v2 + 16)) {
        os_log_type_t v15 = *(const char **)(v2 + 16);
      }
      *(_DWORD *)unsigned int buf = 136446466;
      __int16 v19 = "nw_socket_internal_error";
      __int16 v20 = 2082;
      uint64_t v21 = v15;
      os_log_type_t v10 = "%{public}s protocol %{public}s has invalid error callback, no backtrace";
LABEL_34:
      _os_log_impl(&dword_181A5C000, v7, v8, v10, buf, 0x16u);
    }
  }

void nw_socket_internal_disconnect(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 24);
    if (v2)
    {
      uint64_t v3 = *(void (**)(void, uint64_t))(v2 + 48);
      if (v3)
      {
        v3(*(void *)(a1 + 48), a1 - 96);
        return;
      }
    }

    __nwlog_obj();
    uint64_t v4 = *(const char **)(v1 + 16);
    if (!v4) {
      uint64_t v4 = "invalid";
    }
  }

  else
  {
    __nwlog_obj();
    uint64_t v4 = "invalid";
  }

  *(_DWORD *)unsigned int buf = 136446466;
  int v18 = "nw_socket_internal_disconnect";
  __int16 v19 = 2082;
  __int16 v20 = v4;
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v5, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_35;
      }
      os_log_type_t v8 = "invalid";
      if (v1 && *(void *)(v1 + 16)) {
        os_log_type_t v8 = *(const char **)(v1 + 16);
      }
      *(_DWORD *)unsigned int buf = 136446466;
      int v18 = "nw_socket_internal_disconnect";
      __int16 v19 = 2082;
      __int16 v20 = v8;
      uint64_t v9 = "%{public}s protocol %{public}s has invalid disconnected callback";
      goto LABEL_34;
    }

    if (!v15)
    {
      uint64_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_35;
      }
      BOOL v13 = "invalid";
      if (v1 && *(void *)(v1 + 16)) {
        BOOL v13 = *(const char **)(v1 + 16);
      }
      *(_DWORD *)unsigned int buf = 136446466;
      int v18 = "nw_socket_internal_disconnect";
      __int16 v19 = 2082;
      __int16 v20 = v13;
      uint64_t v9 = "%{public}s protocol %{public}s has invalid disconnected callback, backtrace limit exceeded";
      goto LABEL_34;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v6 = (os_log_s *)__nwlog_obj();
    os_log_type_t v7 = type;
    BOOL v11 = os_log_type_enabled(v6, type);
    if (backtrace_string)
    {
      if (v11)
      {
        BOOL v12 = "invalid";
        if (v1 && *(void *)(v1 + 16)) {
          BOOL v12 = *(const char **)(v1 + 16);
        }
        *(_DWORD *)unsigned int buf = 136446722;
        int v18 = "nw_socket_internal_disconnect";
        __int16 v19 = 2082;
        __int16 v20 = v12;
        __int16 v21 = 2082;
        __int16 v22 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s protocol %{public}s has invalid disconnected callback, dumping backtrace:%{public}s",  buf,  0x20u);
      }

      free(backtrace_string);
      goto LABEL_35;
    }

    if (v11)
    {
      char v14 = "invalid";
      if (v1 && *(void *)(v1 + 16)) {
        char v14 = *(const char **)(v1 + 16);
      }
      *(_DWORD *)unsigned int buf = 136446466;
      int v18 = "nw_socket_internal_disconnect";
      __int16 v19 = 2082;
      __int16 v20 = v14;
      uint64_t v9 = "%{public}s protocol %{public}s has invalid disconnected callback, no backtrace";
LABEL_34:
      _os_log_impl(&dword_181A5C000, v6, v7, v9, buf, 0x16u);
    }
  }

void nw_socket_update_output_source(char *a1)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t v2 = (unsigned __int16 *)(a1 + 301);
    int v3 = *(unsigned __int16 *)(a1 + 301);
    if ((v3 & 0x4000) == 0)
    {
      if (nw_socket_service_writes((uint64_t)a1))
      {
        int v5 = *v2;
        int v6 = v5 | (*((unsigned __int8 *)v2 + 2) << 16);
        if ((v5 & 8) != 0)
        {
          nw_socket_output_finished((nw_protocol *)(a1 - 96), v4);
          int v6 = *v2 | (*((unsigned __int8 *)v2 + 2) << 16);
        }

        if ((v6 & 0x40) != 0)
        {
          if ((v6 & 8) == 0 && (!*((void *)a1 + 29) || (v6 & 0x40000) != 0)) {
            nw_socket_internal_disconnect((uint64_t)a1);
          }
        }

        else
        {
          uint64_t v7 = *((void *)a1 + 6);
          if (v7)
          {
            uint64_t v8 = *(void *)(v7 + 24);
            if (v8)
            {
              uint64_t v9 = *(void (**)(void))(v8 + 72);
              if (v9) {
                v9();
              }
            }
          }
        }
      }
    }

    return;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)unsigned int buf = 136446210;
  __int16 v19 = "nw_socket_update_output_source";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v10, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v11 = (os_log_s *)gLogObj;
      os_log_type_t v12 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_31;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      __int16 v19 = "nw_socket_update_output_source";
      BOOL v13 = "%{public}s called with null socket_handler";
      goto LABEL_30;
    }

    if (!v16)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v11 = (os_log_s *)gLogObj;
      os_log_type_t v12 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_31;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      __int16 v19 = "nw_socket_update_output_source";
      BOOL v13 = "%{public}s called with null socket_handler, backtrace limit exceeded";
      goto LABEL_30;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v11 = (os_log_s *)gLogObj;
    os_log_type_t v12 = type;
    BOOL v15 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)unsigned int buf = 136446466;
        __int16 v19 = "nw_socket_update_output_source";
        __int16 v20 = 2082;
        __int16 v21 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s called with null socket_handler, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
      goto LABEL_31;
    }

    if (v15)
    {
      *(_DWORD *)unsigned int buf = 136446210;
      __int16 v19 = "nw_socket_update_output_source";
      BOOL v13 = "%{public}s called with null socket_handler, no backtrace";
LABEL_30:
      _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
    }
  }

void nw_socket_update_input_source(char *a1)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)unsigned int buf = 136446210;
    __int16 v19 = "nw_socket_update_input_source";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v9 = (os_log_s *)gLogObj;
      os_log_type_t v10 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      __int16 v19 = "nw_socket_update_input_source";
      BOOL v11 = "%{public}s called with null socket_handler";
    }

    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v9 = (os_log_s *)gLogObj;
      os_log_type_t v10 = type;
      BOOL v13 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)unsigned int buf = 136446466;
          __int16 v19 = "nw_socket_update_input_source";
          __int16 v20 = 2082;
          __int16 v21 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null socket_handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_33;
      }

      if (!v13)
      {
LABEL_33:
        if (v8) {
          free(v8);
        }
        return;
      }

      *(_DWORD *)unsigned int buf = 136446210;
      __int16 v19 = "nw_socket_update_input_source";
      BOOL v11 = "%{public}s called with null socket_handler, no backtrace";
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v9 = (os_log_s *)gLogObj;
      os_log_type_t v10 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_33;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      __int16 v19 = "nw_socket_update_input_source";
      BOOL v11 = "%{public}s called with null socket_handler, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v9, v10, v11, buf, 0xCu);
    goto LABEL_33;
  }

  uint64_t v2 = (unsigned __int16 *)(a1 + 301);
  if ((*(_WORD *)(a1 + 301) & 0x80) == 0 && gLogDatapath)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    char v14 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v15 = *((_DWORD *)a1 + 43);
      *(_DWORD *)unsigned int buf = 136446722;
      __int16 v19 = "nw_socket_update_input_source";
      __int16 v20 = 2082;
      __int16 v21 = a1 + 308;
      __int16 v22 = 1024;
      int v23 = v15;
      _os_log_impl(&dword_181A5C000, v14, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s Input available for %d", buf, 0x1Cu);
    }
  }

  int v3 = *v2;
  int v4 = v3 | (*((unsigned __int8 *)v2 + 2) << 16);
  if ((v3 & 0x4000) != 0) {
    return;
  }
  *((_BYTE *)v2 + 2) = BYTE2(v4);
  unsigned __int16 *v2 = v4 | 0x200;
  if (_nw_signposts_once != -1) {
    dispatch_once(&_nw_signposts_once, &__block_literal_global_18_64095);
  }
  if (_nw_signposts_enabled && kdebug_is_enabled())
  {
    kdebug_trace();
    uint64_t v5 = *((void *)a1 + 6);
    if (!v5) {
      goto LABEL_13;
    }
  }

  else
  {
    uint64_t v5 = *((void *)a1 + 6);
    if (!v5) {
      goto LABEL_13;
    }
  }

  uint64_t v6 = *(void *)(v5 + 24);
  if (v6)
  {
    uint64_t v7 = *(void (**)(void))(v6 + 64);
    if (v7) {
      v7();
    }
  }

void nw_socket_internal_link_state(uint64_t a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void **)(a1 + 144);
  if (v5)
  {
    uint64_t v6 = v5;
    int v7 = v6[2];
    v6[2] = a2;

    if (v7 == a2)
    {
      if (gLogDatapath)
      {
        uint64_t v8 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          int v16 = 136446466;
          BOOL v17 = "nw_socket_internal_link_state";
          __int16 v18 = 1024;
          LODWORD(v19) = a2;
          _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_DEBUG,  "%{public}s Not updating link state because it's the same %d",  (uint8_t *)&v16,  0x12u);
        }
      }

      return;
    }
  }

  else
  {
    *(void *)(a1 + 144) = nw_link_info_create(a2);
  }

  uint64_t v9 = (_WORD *)(a1 + 301);
  __int16 v10 = *(_WORD *)(a1 + 301);
  if (a2)
  {
    if ((v10 & 0x80) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      BOOL v11 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO))
      {
        int v16 = 136446466;
        BOOL v17 = "nw_socket_internal_link_state";
        __int16 v18 = 2082;
        uint64_t v19 = a1 + 308;
        _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s Link is flow controlled",  (uint8_t *)&v16,  0x16u);
      }
    }

    unsigned int v12 = (unsigned __int16)*v9 | (*(unsigned __int8 *)(a1 + 303) << 16) | 0x400000;
  }

  else
  {
    if ((v10 & 0x80) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      BOOL v13 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO))
      {
        int v16 = 136446466;
        BOOL v17 = "nw_socket_internal_link_state";
        __int16 v18 = 2082;
        uint64_t v19 = a1 + 308;
        _os_log_impl( &dword_181A5C000,  v13,  OS_LOG_TYPE_INFO,  "%{public}s %{public}s Link is no longer flow controlled",  (uint8_t *)&v16,  0x16u);
      }
    }

    unsigned int v12 = ((unsigned __int16)*v9 | (*(unsigned __int8 *)(a1 + 303) << 16)) & 0xFFBFFFFF;
  }

  _WORD *v9 = v12;
  *(_BYTE *)(a1 + 303) = BYTE2(v12);
  if (v4)
  {
    uint64_t v14 = *(void *)(v4 + 24);
    if (v14)
    {
      int v15 = *(void (**)(uint64_t, uint64_t, void))(v14 + 104);
      if (v15) {
        v15(v4, a1 - 96, *(void *)(a1 + 144));
      }
    }
  }

BOOL nw_socket_service_writes(uint64_t a1)
{
  uint64_t v15 = 0LL;
  int v16 = &v15;
  int v18 = 0;
  uint64_t v17 = 0x2000000000LL;
  v10[0] = MEMORY[0x1895F87A8];
  v10[1] = 0x40000000LL;
  BOOL v11 = ___ZL24nw_socket_service_writesP9nw_socket_block_invoke;
  unsigned int v12 = &unk_189BC4E18;
  BOOL v13 = &v15;
  uint64_t v14 = a1;
  uint64_t v2 = *(void *)(a1 + 232);
  do
  {
    if (!v2) {
      break;
    }
    uint64_t v3 = *(void *)(v2 + 16);
    char v4 = ((uint64_t (*)(void *))v11)(v10);
    uint64_t v2 = v3;
  }

  while ((v4 & 1) != 0);
  int v5 = *((_DWORD *)v16 + 6);
  uint64_t v6 = (_WORD *)(a1 + 301);
  int v7 = *(unsigned __int16 *)(a1 + 301) | (*(unsigned __int8 *)(a1 + 303) << 16);
  if (v5)
  {
    if ((*(_WORD *)(a1 + 301) & 0x800) == 0)
    {
      *(_BYTE *)(a1 + 303) = BYTE2(v7);
      _WORD *v6 = v7 | 0x800;
      nw_queue_resume_source(*(void *)(a1 + 120), v2);
      LOWORD(v7) = *v6;
    }

    if ((v7 & 0x8000) == 0) {
      nw_socket_set_send_low_water_mark(a1, *((_DWORD *)v16 + 6));
    }
  }

  else if ((*(_WORD *)(a1 + 301) & 0x800) != 0)
  {
    int v8 = *(_WORD *)(a1 + 301) & 0xF7FF | (*(unsigned __int8 *)(a1 + 303) << 16);
    _WORD *v6 = *(_WORD *)(a1 + 301) & 0xF7FF;
    *(_BYTE *)(a1 + 303) = BYTE2(v8);
    nw_queue_suspend_source(*(void *)(a1 + 120));
  }

  _Block_object_dispose(&v15, 8);
  return v5 == 0;
}

BOOL ___ZL24nw_socket_service_writesP9nw_socket_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v150 = *MEMORY[0x1895F89C0];
  __size[0] = 0;
  int v4 = nw_frame_uses_external_data(a2);
  memset(&v138, 0, sizeof(v138));
  v138.msg_flags = 128;
  if (!v4)
  {
    uint64_t v9 = nw_frame_unclaimed_bytes(a2, __size);
    BOOL v10 = v9 != 0;
    uint64_t v11 = __size[0];
    BOOL v12 = __size[0] != 0;
    BOOL v13 = !v10 || !v12;
    if (v10 && v12) {
      uint64_t v14 = v9;
    }
    else {
      uint64_t v14 = 0LL;
    }
    if (v13) {
      uint64_t v11 = 0LL;
    }
    *(void *)&__size[1] = v14;
    uint64_t v140 = v11;
    v138.msg_iov = (iovec *)&__size[1];
    v138.msg_iovlen = 1;
    buffer = (void *)nw_frame_get_buffer(a2, 0LL);
    goto LABEL_14;
  }

  unsigned int v137 = 0;
  external_data = (dispatch_data_s *)nw_frame_get_external_data(a2, &v137, __size);
  if (!external_data || !__size[0])
  {
    uint64_t v15 = 0LL;
    *(void *)&__size[1] = 0LL;
    uint64_t v140 = 0LL;
    goto LABEL_31;
  }

  uint64_t v6 = external_data;
  int v7 = nw_dispatch_data_to_iovec(external_data, v137, __size[0], (uint64_t)&__size[1], 10);
  if (v7)
  {
    v138.msg_iov = (iovec *)&__size[1];
    v138.msg_iovlen = v7;
    if (v7 < 1)
    {
LABEL_139:
      nw_frame_set_external_data(a2, 0LL, 0LL);
LABEL_193:
      int v111 = *(char *)(a2 + 186);
      nw_frame_reset(a2, 0LL, 0, 0LL, 0LL);
      uint64_t v114 = *(void *)(a2 + 16);
      int v115 = *(void **)(a2 + 24);
      int v113 = (void *)(a2 + 16);
      if (v114)
      {
        *(void *)(v114 + 24) = v115;
        int v115 = *(void **)(a2 + 24);
      }

      else
      {
        *(void *)(*(void *)(a1 + 40) + 240LL) = v115;
      }

      void *v115 = v114;
      void *v113 = 0LL;
      *(void *)(a2 + 24) = 0LL;
      uint64_t v116 = *(void *)(a1 + 40);
      int v117 = *(uint64_t **)(v116 + 208);
      *(void *)(a2 + 24) = v117;
      uint64_t *v117 = a2;
      *(void *)(v116 + 20_Block_object_dispose(va, 8) = v113;
      if ((v111 & 0x80000000) == 0) {
        return 1LL;
      }
      uint64_t v119 = *(void *)(a1 + 40);
      if ((!v119 || (*(_WORD *)(v119 + 301) & 0x80) == 0) && gLogDatapath)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        char v131 = (os_log_s *)gconnectionLogObj;
        BOOL v132 = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG);
        uint64_t v119 = *(void *)(a1 + 40);
        if (v132)
        {
          if (v119) {
            uint64_t v133 = (const char *)(v119 + 308);
          }
          else {
            uint64_t v133 = "";
          }
          *(_DWORD *)applier = 136446466;
          *(void *)&applier[4] = "nw_socket_service_writes_block_invoke";
          *(_WORD *)&applier[12] = 2082;
          *(void *)&applier[14] = v133;
          _os_log_impl( &dword_181A5C000,  v131,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s calling output finished because frame indicated connection is complete",  applier,  0x16u);
          uint64_t v119 = *(void *)(a1 + 40);
        }
      }

      if (v119) {
        __int16 v120 = (nw_protocol *)(v119 - 96);
      }
      else {
        __int16 v120 = 0LL;
      }
      nw_socket_output_finished(v120, v112);
      return 0LL;
    }

    buffer = 0LL;
LABEL_14:
    uint64_t v15 = 0LL;
    if (a2)
    {
LABEL_15:
      char v16 = *(_BYTE *)(a2 + 186) & 3;
      char v17 = *(_BYTE *)(a2 + 184);
      goto LABEL_16;
    }

void nw_socket_set_send_low_water_mark(uint64_t a1, unsigned int a2)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  if (a2 <= 1) {
    unsigned int v2 = 1;
  }
  else {
    unsigned int v2 = a2;
  }
  unsigned int v34 = v2;
  unsigned int v3 = *(_DWORD *)(a1 + 156);
  if (v3 == v2) {
    return;
  }
  if (v2 > v3)
  {
    socklen_t v32 = 4;
    *(_DWORD *)int v33 = 0;
    if (getsockopt(*(_DWORD *)(a1 + 172), 0xFFFF, 4097, v33, &v32))
    {
      int v5 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v6 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)unsigned int buf = 136446722;
        uint64_t v36 = "nw_socket_set_send_low_water_mark";
        __int16 v37 = 2080;
        *(void *)&__int128 v38 = a1 + 308;
        WORD4(v3_Block_object_dispose(va, 8) = 1024;
        *(_DWORD *)((char *)&v38 + 10) = v5;
        _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_ERROR,  "%{public}s %s getsockopt SO_SNDBUF failed %{darwin.errno}d",  buf,  0x1Cu);
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)unsigned int buf = 136446466;
      uint64_t v36 = "nw_socket_set_send_low_water_mark";
      __int16 v37 = 1024;
      LODWORD(v3_Block_object_dispose(va, 8) = v5;
      int v7 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v30 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v8 = (os_log_s *)gLogObj;
        os_log_type_t v9 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_31;
        }
        *(_DWORD *)unsigned int buf = 136446466;
        uint64_t v36 = "nw_socket_set_send_low_water_mark";
        __int16 v37 = 1024;
        LODWORD(v3_Block_object_dispose(va, 8) = v5;
        BOOL v10 = "%{public}s getsockopt SO_SNDBUF failed %{darwin.errno}d";
      }

      else if (v30)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v8 = (os_log_s *)gLogObj;
        os_log_type_t v9 = type;
        BOOL v13 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)unsigned int buf = 136446722;
            uint64_t v36 = "nw_socket_set_send_low_water_mark";
            __int16 v37 = 1024;
            LODWORD(v3_Block_object_dispose(va, 8) = v5;
            WORD2(v3_Block_object_dispose(va, 8) = 2082;
            *(void *)((char *)&v38 + 6) = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s getsockopt SO_SNDBUF failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
          }

          free(backtrace_string);
          goto LABEL_31;
        }

        if (!v13)
        {
LABEL_31:
          if (v7) {
            free(v7);
          }
          goto LABEL_33;
        }

        *(_DWORD *)unsigned int buf = 136446466;
        uint64_t v36 = "nw_socket_set_send_low_water_mark";
        __int16 v37 = 1024;
        LODWORD(v3_Block_object_dispose(va, 8) = v5;
        BOOL v10 = "%{public}s getsockopt SO_SNDBUF failed %{darwin.errno}d, no backtrace";
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v8 = (os_log_s *)gLogObj;
        os_log_type_t v9 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_31;
        }
        *(_DWORD *)unsigned int buf = 136446466;
        uint64_t v36 = "nw_socket_set_send_low_water_mark";
        __int16 v37 = 1024;
        LODWORD(v3_Block_object_dispose(va, 8) = v5;
        BOOL v10 = "%{public}s getsockopt SO_SNDBUF failed %{darwin.errno}d, backtrace limit exceeded";
      }

      _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0x12u);
      goto LABEL_31;
    }

    if (*(_DWORD *)v33 && v2 > *(_DWORD *)v33 / 3u)
    {
      if (*(_DWORD *)v33 < 3u) {
        unsigned int v11 = 1;
      }
      else {
        unsigned int v11 = *(_DWORD *)v33 / 3u;
      }
      unsigned int v34 = v11;
    }
  }

BOOL ___ZL24__nw_signpost_is_enabledv_block_invoke_64232()
{
  BOOL result = networkd_settings_get_BOOL((const char *)nw_setting_enable_signposts);
  _nw_signposts_enabled = result;
  return result;
}

BOOL nw_calloc_type<nw_data_transfer_snapshot>(size_t __count)
{
  if (!__count || __count >= 0x1642C8590B21643LL)
  {
    int v4 = (os_log_s *)__nwlog_obj();
    os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    int v5 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v5);
    if (result) {
      goto LABEL_9;
    }
    free(v5);
  }

  unsigned int v2 = calloc(__count, 0xB8uLL);
  if (v2) {
    return (BOOL)v2;
  }
  uint64_t v6 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
  int v7 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v7);
  if (!result)
  {
    free(v7);
    return (BOOL)v2;
  }

void nw_socket_cancel_input_source(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 112);
  if (v2)
  {
    nw_queue_cancel_source(*(void *)(a1 + 112), a2);
    *(void *)(a1 + 112) = 0LL;
    int v5 = (_WORD *)(a1 + 301);
    if ((*(_WORD *)(a1 + 301) & 0x400) != 0)
    {
      if (_nw_signposts_once != -1) {
        dispatch_once(&_nw_signposts_once, &__block_literal_global_18_64095);
      }
      if (_nw_signposts_enabled)
      {
      }

      nw_queue_resume_source(v2, v4);
      int v6 = (unsigned __int16)*v5;
      unsigned int v7 = v6 & 0xFFFFFBFF | (*(unsigned __int8 *)(a1 + 303) << 16);
      *int v5 = v6 & 0xFBFF;
      *(_BYTE *)(a1 + 303) = BYTE2(v7);
    }
  }

void nw_protocol_socket_cancel(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    os_release(v2);
    *(void *)(a1 + 80) = 0LL;
  }

  unsigned int v3 = *(void **)(a1 + 88);
  if (v3)
  {
    os_release(v3);
    *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;
  }

  uint64_t v4 = *(void **)(a1 + 56);
  if (v4)
  {
    nw_tcp_set_callbacks(v4, 0LL, 0LL);
    int v5 = *(void **)(a1 + 56);
    if (v5)
    {
      os_release(v5);
      *(void *)(a1 + 56) = 0LL;
    }
  }

  int v6 = *(void **)(a1 + 104);
  if (v6)
  {
    xpc_release(v6);
    *(void *)(a1 + 104) = 0LL;
  }

  nw_socket_release_frame_array((nw_frame_array_s *)(a1 + 264));
  nw_socket_release_frame_array((nw_frame_array_s *)(a1 + 216));
  nw_socket_release_frame_array((nw_frame_array_s *)(a1 + 232));
  nw_socket_release_frame_array((nw_frame_array_s *)(a1 + 200));
  nw_socket_release_frame_array((nw_frame_array_s *)(a1 + 248));
  nw_socket_release_frame_array((nw_frame_array_s *)(a1 + 280));
  unsigned int v7 = *(void **)(a1 + 144);
  if (v7)
  {
    os_release(v7);
    *(void *)(a1 + 144) = 0LL;
  }

  *(_WORD *)(a1 + 301) |= 0x4000u;
}

BOOL nw_socket_initialize_socket(nw_protocol *a1)
{
  uint64_t v139 = *MEMORY[0x1895F89C0];
  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_socket_initialize_socket";
    os_log_type_t v125 = (char *)_os_log_send_and_compose_impl();
    out[0] = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (out[0] == 17)
    {
      BOOL v126 = (os_log_s *)__nwlog_obj();
      os_log_type_t v127 = out[0];
      if (!os_log_type_enabled(v126, (os_log_type_t)out[0])) {
        goto LABEL_299;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_socket_initialize_socket";
      unsigned int v128 = "%{public}s called with null socket_handler";
    }

    else if (type[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v126 = (os_log_s *)__nwlog_obj();
      os_log_type_t v127 = out[0];
      BOOL v130 = os_log_type_enabled(v126, (os_log_type_t)out[0]);
      if (backtrace_string)
      {
        if (v130)
        {
          *(_DWORD *)unsigned int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_socket_initialize_socket";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&_BYTE buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v126,  v127,  "%{public}s called with null socket_handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_299;
      }

      if (!v130)
      {
LABEL_299:
        if (v125) {
          free(v125);
        }
        return 0LL;
      }

      *(_DWORD *)unsigned int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_socket_initialize_socket";
      unsigned int v128 = "%{public}s called with null socket_handler, no backtrace";
    }

    else
    {
      BOOL v126 = (os_log_s *)__nwlog_obj();
      os_log_type_t v127 = out[0];
      if (!os_log_type_enabled(v126, (os_log_type_t)out[0])) {
        goto LABEL_299;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_socket_initialize_socket";
      unsigned int v128 = "%{public}s called with null socket_handler, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v126, v127, v128, buf, 0xCu);
    goto LABEL_299;
  }

  p_output_handler = &a1[1].output_handler;
  int identifier = a1[2].identifier;
  if (!identifier) {
    goto LABEL_12;
  }
  uint64_t v4 = *(void *)&identifier->name[24];
  if (!v4) {
    goto LABEL_12;
  }
  int v5 = *(uint64_t (**)(nw_protocol_identifier *))(v4 + 120);
  if (!v5) {
    goto LABEL_12;
  }
  if (*(_UNKNOWN **)identifier[1].name == &nw_protocol_ref_counted_handle)
  {
    uint64_t v7 = *(void *)&identifier[2].name[8];
    if (v7) {
      *(void *)&identifier[2].name[8] = v7 + 1;
    }
    int v6 = (void *)v5(identifier);
    if (*(_UNKNOWN **)identifier[1].name == &nw_protocol_ref_counted_handle)
    {
      uint64_t v19 = *(void *)&identifier[2].name[8];
      if (v19)
      {
        uint64_t v20 = v19 - 1;
        *(void *)&identifier[2].name[8] = v20;
        if (!v20)
        {
          int v21 = *(void (***)(void))&identifier[1].name[24];
          if (v21)
          {
            *(void *)&identifier[1].name[24] = 0LL;
            v21[2](v21);
            _Block_release(v21);
          }

          if ((identifier[1].level & 1) != 0)
          {
            os_log_type_t v22 = *(const void **)&identifier[1].name[24];
            if (v22) {
              _Block_release(v22);
            }
          }

          free(identifier);
        }
      }
    }
  }

  else
  {
    int v6 = (void *)v5(a1[2].identifier);
  }

  if (v6) {
    int v8 = nw_path_allows_multipath(v6);
  }
  else {
LABEL_12:
  }
    int v8 = 0;
  int v9 = (int)a1[4].identifier;
  if (v9 != 1)
  {
    if (v9 != 2)
    {
      if ((*(_WORD *)&a1[6].flow_id[13] & 0x80) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        uint64_t v13 = gconnectionLogObj;
        BOOL result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
        int v15 = (int)a1[4].identifier;
        *(_DWORD *)unsigned int buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_socket_initialize_socket";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&_BYTE buf[14] = (char *)a1 + 404;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&_BYTE buf[24] = v15;
        int v16 = "%{public}s %{public}s Data mode %d unrecognized";
        char v17 = (os_log_s *)v13;
        uint32_t v18 = 28;
        goto LABEL_73;
      }

      return 0LL;
    }

    if (!a1[2].callbacks)
    {
      uuid_generate_random(out);
      BOOL v10 = (nw_protocol_callbacks *)nw_protocol_metadata_create((void *)g_tcp_definition, out);
      a1[2].uint64_t callbacks = v10;
      *(void *)unsigned int buf = nw_protocol_socket_get_receive_buffer_size;
      *(void *)&buf[8] = nw_protocol_socket_get_send_buffer_size;
      *(void *)&buf[16] = nw_protocol_socket_reset_keepalives;
      *(void *)&_BYTE buf[24] = nw_protocol_socket_set_no_delay;
      *(void *)&uint8_t buf[32] = nw_protocol_socket_set_no_push;
      int v136 = nw_protocol_socket_set_no_wake_from_sleep;
      nw_tcp_set_callbacks(v10, (uint64_t)p_output_handler, (uint64_t)buf);
    }

    int v11 = 1;
    if (!identifier) {
      goto LABEL_173;
    }
LABEL_45:
    uint64_t v23 = *(void *)&identifier->name[24];
    if (!v23) {
      goto LABEL_173;
    }
    size_t v24 = *(uint64_t (**)(nw_protocol_identifier *))(v23 + 128);
    if (v24)
    {
      if (*(_UNKNOWN **)identifier[1].name == &nw_protocol_ref_counted_handle)
      {
        uint64_t v26 = *(void *)&identifier[2].name[8];
        if (v26) {
          *(void *)&identifier[2].name[8] = v26 + 1;
        }
        uint64_t v25 = (void *)v24(identifier);
        if (*(_UNKNOWN **)identifier[1].name == &nw_protocol_ref_counted_handle)
        {
          uint64_t v36 = *(void *)&identifier[2].name[8];
          if (v36)
          {
            uint64_t v37 = v36 - 1;
            *(void *)&identifier[2].name[8] = v37;
            if (!v37)
            {
              __int128 v38 = *(void (***)(void))&identifier[1].name[24];
              if (v38)
              {
                *(void *)&identifier[1].name[24] = 0LL;
                v38[2](v38);
                _Block_release(v38);
              }

              if ((identifier[1].level & 1) != 0)
              {
                unsigned int v39 = *(const void **)&identifier[1].name[24];
                if (v39) {
                  _Block_release(v39);
                }
              }

              free(identifier);
            }
          }
        }
      }

      else
      {
        uint64_t v25 = (void *)v24(identifier);
      }

      uint64_t v27 = *(void *)&identifier->name[24];
      if (v27)
      {
        int v28 = *(uint64_t (**)(nw_protocol_identifier *))(v27 + 136);
        if (v28)
        {
LABEL_54:
          if (*(_UNKNOWN **)identifier[1].name == &nw_protocol_ref_counted_handle)
          {
            uint64_t v30 = *(void *)&identifier[2].name[8];
            if (v30) {
              *(void *)&identifier[2].name[8] = v30 + 1;
            }
            int v29 = (void *)v28(identifier);
            if (*(_UNKNOWN **)identifier[1].name == &nw_protocol_ref_counted_handle)
            {
              uint64_t v40 = *(void *)&identifier[2].name[8];
              if (v40)
              {
                uint64_t v41 = v40 - 1;
                *(void *)&identifier[2].name[8] = v41;
                if (!v41)
                {
                  uint64_t v42 = *(void (***)(void))&identifier[1].name[24];
                  if (v42)
                  {
                    *(void *)&identifier[1].name[24] = 0LL;
                    v42[2](v42);
                    _Block_release(v42);
                  }

                  if ((identifier[1].level & 1) != 0)
                  {
                    BOOL v43 = *(const void **)&identifier[1].name[24];
                    if (v43) {
                      _Block_release(v43);
                    }
                  }

                  free(identifier);
                }
              }
            }
          }

          else
          {
            int v29 = (void *)v28(identifier);
          }

          if (v29) {
            LODWORD(v29) = nw_endpoint_get_address_family(v29);
          }
          if (v25)
          {
LABEL_62:
            if ((*(_WORD *)&a1[6].flow_id[13] & 0x80) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              uint64_t v34 = gconnectionLogObj;
              BOOL result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR);
              if (!result) {
                return result;
              }
              int address_family = nw_endpoint_get_address_family(v25);
              *(_DWORD *)unsigned int buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_socket_initialize_socket";
              *(_WORD *)&buf[12] = 2082;
              *(void *)&_BYTE buf[14] = (char *)a1 + 404;
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)&_BYTE buf[24] = address_family;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = (_DWORD)v29;
              int v16 = "%{public}s %{public}s Local endpoint family %d does not match remote endpoint %d";
              char v17 = (os_log_s *)v34;
              uint32_t v18 = 34;
LABEL_73:
              _os_log_impl(&dword_181A5C000, v17, OS_LOG_TYPE_ERROR, v16, buf, v18);
              return 0LL;
            }

            return 0LL;
          }

void sub_18240D0F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_socket_get_receive_buffer_size(_DWORD *a1)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    socklen_t v19 = 4;
    *(_DWORD *)uint64_t v20 = 0;
    if (!getsockopt(a1[43], 0xFFFF, 4128, v20, &v19)) {
      return *(unsigned int *)v20;
    }
    int v2 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    unsigned int v3 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unsigned int buf = 136446722;
      os_log_type_t v22 = "nw_protocol_socket_get_receive_buffer_size";
      __int16 v23 = 2080;
      *(void *)size_t v24 = a1 + 77;
      *(_WORD *)&v24[8] = 1024;
      *(_DWORD *)&v24[10] = v2;
      _os_log_impl( &dword_181A5C000,  v3,  OS_LOG_TYPE_ERROR,  "%{public}s %s getsockopt SO_NREAD failed %{darwin.errno}d",  buf,  0x1Cu);
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)unsigned int buf = 136446466;
    os_log_type_t v22 = "nw_protocol_socket_get_receive_buffer_size";
    __int16 v23 = 1024;
    *(_DWORD *)size_t v24 = v2;
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v4, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v5 = (os_log_s *)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_21;
        }
        *(_DWORD *)unsigned int buf = 136446466;
        os_log_type_t v22 = "nw_protocol_socket_get_receive_buffer_size";
        __int16 v23 = 1024;
        *(_DWORD *)size_t v24 = v2;
        uint64_t v7 = "%{public}s getsockopt SO_NREAD failed %{darwin.errno}d";
        goto LABEL_20;
      }

      if (!v17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v5 = (os_log_s *)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_21;
        }
        *(_DWORD *)unsigned int buf = 136446466;
        os_log_type_t v22 = "nw_protocol_socket_get_receive_buffer_size";
        __int16 v23 = 1024;
        *(_DWORD *)size_t v24 = v2;
        uint64_t v7 = "%{public}s getsockopt SO_NREAD failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_20;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v5 = (os_log_s *)gLogObj;
      os_log_type_t v6 = type;
      BOOL v9 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)unsigned int buf = 136446722;
          os_log_type_t v22 = "nw_protocol_socket_get_receive_buffer_size";
          __int16 v23 = 1024;
          *(_DWORD *)size_t v24 = v2;
          *(_WORD *)&v24[4] = 2082;
          *(void *)&v24[6] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s getsockopt SO_NREAD failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
        }

        free(backtrace_string);
        goto LABEL_21;
      }

      if (v9)
      {
        *(_DWORD *)unsigned int buf = 136446466;
        os_log_type_t v22 = "nw_protocol_socket_get_receive_buffer_size";
        __int16 v23 = 1024;
        *(_DWORD *)size_t v24 = v2;
        uint64_t v7 = "%{public}s getsockopt SO_NREAD failed %{darwin.errno}d, no backtrace";
LABEL_20:
        _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0x12u);
      }
    }

uint64_t nw_protocol_socket_get_send_buffer_size(_DWORD *a1)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    socklen_t v19 = 4;
    *(_DWORD *)uint64_t v20 = 0;
    if (!getsockopt(a1[43], 0xFFFF, 4132, v20, &v19)) {
      return *(unsigned int *)v20;
    }
    int v2 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    unsigned int v3 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unsigned int buf = 136446722;
      os_log_type_t v22 = "nw_protocol_socket_get_send_buffer_size";
      __int16 v23 = 2080;
      *(void *)size_t v24 = a1 + 77;
      *(_WORD *)&v24[8] = 1024;
      *(_DWORD *)&v24[10] = v2;
      _os_log_impl( &dword_181A5C000,  v3,  OS_LOG_TYPE_ERROR,  "%{public}s %s getsockopt SO_NWRITE failed %{darwin.errno}d",  buf,  0x1Cu);
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)unsigned int buf = 136446466;
    os_log_type_t v22 = "nw_protocol_socket_get_send_buffer_size";
    __int16 v23 = 1024;
    *(_DWORD *)size_t v24 = v2;
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v4, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v5 = (os_log_s *)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_21;
        }
        *(_DWORD *)unsigned int buf = 136446466;
        os_log_type_t v22 = "nw_protocol_socket_get_send_buffer_size";
        __int16 v23 = 1024;
        *(_DWORD *)size_t v24 = v2;
        uint64_t v7 = "%{public}s getsockopt SO_NWRITE failed %{darwin.errno}d";
        goto LABEL_20;
      }

      if (!v17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v5 = (os_log_s *)gLogObj;
        os_log_type_t v6 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_21;
        }
        *(_DWORD *)unsigned int buf = 136446466;
        os_log_type_t v22 = "nw_protocol_socket_get_send_buffer_size";
        __int16 v23 = 1024;
        *(_DWORD *)size_t v24 = v2;
        uint64_t v7 = "%{public}s getsockopt SO_NWRITE failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_20;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v5 = (os_log_s *)gLogObj;
      os_log_type_t v6 = type;
      BOOL v9 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)unsigned int buf = 136446722;
          os_log_type_t v22 = "nw_protocol_socket_get_send_buffer_size";
          __int16 v23 = 1024;
          *(_DWORD *)size_t v24 = v2;
          *(_WORD *)&v24[4] = 2082;
          *(void *)&v24[6] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s getsockopt SO_NWRITE failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
        }

        free(backtrace_string);
        goto LABEL_21;
      }

      if (v9)
      {
        *(_DWORD *)unsigned int buf = 136446466;
        os_log_type_t v22 = "nw_protocol_socket_get_send_buffer_size";
        __int16 v23 = 1024;
        *(_DWORD *)size_t v24 = v2;
        uint64_t v7 = "%{public}s getsockopt SO_NWRITE failed %{darwin.errno}d, no backtrace";
LABEL_20:
        _os_log_impl(&dword_181A5C000, v5, v6, v7, buf, 0x12u);
      }
    }

uint64_t nw_protocol_socket_reset_keepalives(_DWORD *a1, int a2, int a3, int a4, int a5)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  int v19 = a5;
  int v20 = a4;
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    os_log_type_t v22 = "nw_protocol_socket_reset_keepalives";
    int v11 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v17) = 0;
    if (__nwlog_fault(v11, type, &v17))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        BOOL v12 = (os_log_s *)__nwlog_obj();
        os_log_type_t v13 = type[0];
        if (os_log_type_enabled(v12, type[0]))
        {
          *(_DWORD *)unsigned int buf = 136446210;
          os_log_type_t v22 = "nw_protocol_socket_reset_keepalives";
          int v14 = "%{public}s called with null handle";
LABEL_38:
          _os_log_impl(&dword_181A5C000, v12, v13, v14, buf, 0xCu);
        }
      }

      else if ((_BYTE)v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v12 = (os_log_s *)__nwlog_obj();
        os_log_type_t v13 = type[0];
        BOOL v16 = os_log_type_enabled(v12, type[0]);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)unsigned int buf = 136446466;
            os_log_type_t v22 = "nw_protocol_socket_reset_keepalives";
            __int16 v23 = 2082;
            size_t v24 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v12,  v13,  "%{public}s called with null handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_39;
        }

        if (v16)
        {
          *(_DWORD *)unsigned int buf = 136446210;
          os_log_type_t v22 = "nw_protocol_socket_reset_keepalives";
          int v14 = "%{public}s called with null handle, no backtrace";
          goto LABEL_38;
        }
      }

      else
      {
        BOOL v12 = (os_log_s *)__nwlog_obj();
        os_log_type_t v13 = type[0];
        if (os_log_type_enabled(v12, type[0]))
        {
          *(_DWORD *)unsigned int buf = 136446210;
          os_log_type_t v22 = "nw_protocol_socket_reset_keepalives";
          int v14 = "%{public}s called with null handle, backtrace limit exceeded";
          goto LABEL_38;
        }
      }
    }

uint64_t nw_protocol_socket_set_no_delay(uint64_t a1, int a2)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (a1) {
    return nw_socket_set_no_delay(a1, a2);
  }
  __nwlog_obj();
  *(_DWORD *)unsigned int buf = 136446210;
  BOOL v12 = "nw_protocol_socket_set_no_delay";
  unsigned int v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v12 = "nw_protocol_socket_set_no_delay";
        os_log_type_t v6 = "%{public}s called with null handle";
LABEL_16:
        _os_log_impl(&dword_181A5C000, v4, v5, v6, buf, 0xCu);
      }
    }

    else if (v9)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)unsigned int buf = 136446466;
          BOOL v12 = "nw_protocol_socket_set_no_delay";
          __int16 v13 = 2082;
          int v14 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null handle, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_17;
      }

      if (v8)
      {
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v12 = "nw_protocol_socket_set_no_delay";
        os_log_type_t v6 = "%{public}s called with null handle, no backtrace";
        goto LABEL_16;
      }
    }

    else
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v12 = "nw_protocol_socket_set_no_delay";
        os_log_type_t v6 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_16;
      }
    }
  }

uint64_t nw_protocol_socket_set_no_push(uint64_t a1, int a2)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (a1) {
    return nw_socket_set_no_push(a1, a2);
  }
  __nwlog_obj();
  *(_DWORD *)unsigned int buf = 136446210;
  BOOL v12 = "nw_protocol_socket_set_no_push";
  unsigned int v3 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v12 = "nw_protocol_socket_set_no_push";
        os_log_type_t v6 = "%{public}s called with null handle";
LABEL_16:
        _os_log_impl(&dword_181A5C000, v4, v5, v6, buf, 0xCu);
      }
    }

    else if (v9)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)unsigned int buf = 136446466;
          BOOL v12 = "nw_protocol_socket_set_no_push";
          __int16 v13 = 2082;
          int v14 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null handle, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_17;
      }

      if (v8)
      {
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v12 = "nw_protocol_socket_set_no_push";
        os_log_type_t v6 = "%{public}s called with null handle, no backtrace";
        goto LABEL_16;
      }
    }

    else
    {
      uint64_t v4 = (os_log_s *)__nwlog_obj();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v12 = "nw_protocol_socket_set_no_push";
        os_log_type_t v6 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_16;
      }
    }
  }

uint64_t nw_protocol_socket_set_no_wake_from_sleep(_DWORD *a1, int a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    *(_DWORD *)int v20 = a2;
    if (!setsockopt(a1[43], 0xFFFF, 0x10000, v20, 4u)) {
      return 0LL;
    }
    uint64_t v3 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v4 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unsigned int buf = 136446722;
      __int16 v23 = "nw_protocol_socket_set_no_wake_from_sleep";
      __int16 v24 = 2080;
      *(void *)__int16 v25 = a1 + 77;
      *(_WORD *)&v25[8] = 1024;
      *(_DWORD *)&v25[10] = v3;
      _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt SO_NOWAKEFROMSLEEP failed %{darwin.errno}d",  buf,  0x1Cu);
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v5 = (os_log_s *)gLogObj;
    if ((_DWORD)v3 == 22)
    {
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)unsigned int buf = 136446466;
        __int16 v23 = "nw_protocol_socket_set_no_wake_from_sleep";
        __int16 v24 = 1024;
        *(_DWORD *)__int16 v25 = 22;
        _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_ERROR,  "%{public}s setsockopt SO_NOWAKEFROMSLEEP failed %{darwin.errno}d",  buf,  0x12u);
      }

      return v3;
    }

    *(_DWORD *)unsigned int buf = 136446466;
    __int16 v23 = "nw_protocol_socket_set_no_wake_from_sleep";
    __int16 v24 = 1024;
    *(_DWORD *)__int16 v25 = v3;
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v7 = (os_log_s *)gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_25;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      __int16 v23 = "nw_protocol_socket_set_no_wake_from_sleep";
      __int16 v24 = 1024;
      *(_DWORD *)__int16 v25 = v3;
      char v9 = "%{public}s setsockopt SO_NOWAKEFROMSLEEP failed %{darwin.errno}d";
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v7 = (os_log_s *)gLogObj;
      os_log_type_t v8 = type;
      BOOL v11 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)unsigned int buf = 136446722;
          __int16 v23 = "nw_protocol_socket_set_no_wake_from_sleep";
          __int16 v24 = 1024;
          *(_DWORD *)__int16 v25 = v3;
          *(_WORD *)&v25[4] = 2082;
          *(void *)&v25[6] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s setsockopt SO_NOWAKEFROMSLEEP failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
        }

        free(backtrace_string);
        goto LABEL_25;
      }

      if (!v11)
      {
LABEL_25:
        if (v6) {
          free(v6);
        }
        return v3;
      }

      *(_DWORD *)unsigned int buf = 136446466;
      __int16 v23 = "nw_protocol_socket_set_no_wake_from_sleep";
      __int16 v24 = 1024;
      *(_DWORD *)__int16 v25 = v3;
      char v9 = "%{public}s setsockopt SO_NOWAKEFROMSLEEP failed %{darwin.errno}d, no backtrace";
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v7 = (os_log_s *)gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_25;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      __int16 v23 = "nw_protocol_socket_set_no_wake_from_sleep";
      __int16 v24 = 1024;
      *(_DWORD *)__int16 v25 = v3;
      char v9 = "%{public}s setsockopt SO_NOWAKEFROMSLEEP failed %{darwin.errno}d, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0x12u);
    goto LABEL_25;
  }

  __nwlog_obj();
  *(_DWORD *)unsigned int buf = 136446210;
  __int16 v23 = "nw_protocol_socket_set_no_wake_from_sleep";
  __int16 v13 = (char *)_os_log_send_and_compose_impl();
  v20[0] = OS_LOG_TYPE_ERROR;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v13, v20, &type))
  {
    if (v20[0] == OS_LOG_TYPE_FAULT)
    {
      int v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = v20[0];
      if (os_log_type_enabled(v14, v20[0]))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        __int16 v23 = "nw_protocol_socket_set_no_wake_from_sleep";
        BOOL v16 = "%{public}s called with null handle";
LABEL_41:
        _os_log_impl(&dword_181A5C000, v14, v15, v16, buf, 0xCu);
      }
    }

    else if (type)
    {
      int v17 = (char *)__nw_create_backtrace_string();
      int v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = v20[0];
      BOOL v18 = os_log_type_enabled(v14, v20[0]);
      if (v17)
      {
        if (v18)
        {
          *(_DWORD *)unsigned int buf = 136446466;
          __int16 v23 = "nw_protocol_socket_set_no_wake_from_sleep";
          __int16 v24 = 2082;
          *(void *)__int16 v25 = v17;
          _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s called with null handle, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v17);
        goto LABEL_42;
      }

      if (v18)
      {
        *(_DWORD *)unsigned int buf = 136446210;
        __int16 v23 = "nw_protocol_socket_set_no_wake_from_sleep";
        BOOL v16 = "%{public}s called with null handle, no backtrace";
        goto LABEL_41;
      }
    }

    else
    {
      int v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = v20[0];
      if (os_log_type_enabled(v14, v20[0]))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        __int16 v23 = "nw_protocol_socket_set_no_wake_from_sleep";
        BOOL v16 = "%{public}s called with null handle, backtrace limit exceeded";
        goto LABEL_41;
      }
    }
  }

uint64_t nw_socket_set_common_sockopts(nw_protocol *a1)
{
  uint64_t v558 = *MEMORY[0x1895F89C0];
  char handle = a1->handle;
  p_output_handler = &a1[1].output_handler;
  if (handle == &nw_protocol_ref_counted_handle) {
    uint64_t v3 = &a1[1].output_handler;
  }
  else {
    uint64_t v3 = 0LL;
  }
  if (handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    v553 = "nw_socket_set_common_sockopts";
    v221 = (char *)_os_log_send_and_compose_impl();
    uu[0] = 16;
    LOBYTE(v556) = 0;
    if (uu[0] == 17)
    {
      char v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = uu[0];
      if (os_log_type_enabled(v9, (os_log_type_t)uu[0]))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        v553 = "nw_socket_set_common_sockopts";
        BOOL v11 = "%{public}s called with null socket_handler";
LABEL_96:
        _os_log_impl(&dword_181A5C000, v9, v10, v11, buf, 0xCu);
        goto LABEL_97;
      }

      goto LABEL_97;
    }

    if (!(_BYTE)v556)
    {
      char v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = uu[0];
      if (os_log_type_enabled(v9, (os_log_type_t)uu[0]))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        v553 = "nw_socket_set_common_sockopts";
        BOOL v11 = "%{public}s called with null socket_handler, backtrace limit exceeded";
        goto LABEL_96;
      }

LABEL_427:
    if (v198) {
      free(v198);
    }
    uint64_t v150 = v197;
    __int128 v188 = v534;
LABEL_430:
    *(_DWORD *)v548 = nw_ip_options_get_hop_limit(v190);
    if (!*(_DWORD *)v548) {
      goto LABEL_493;
    }
    if (v192 == 2)
    {
      if (!setsockopt(*(_DWORD *)&a1[4].flow_id[12], 0, 4, v548, 4u))
      {
        if (!nw_ip_options_get_receive_hop_limit(v190)) {
          goto LABEL_544;
        }
        goto LABEL_495;
      }

      int v204 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v205 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)unsigned int buf = 136446722;
        v553 = "nw_socket_set_common_sockopts";
        __int16 v554 = 2080;
        *(void *)v555 = (char *)a1 + 404;
        *(_WORD *)&v555[8] = 1024;
        *(_DWORD *)&v555[10] = v204;
        _os_log_impl( &dword_181A5C000,  v205,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt IP_TTL failed %{darwin.errno}d",  buf,  0x1Cu);
      }

      v206 = (os_log_s *)__nwlog_obj();
      v207 = v206;
      if (v204 == 22)
      {
        if (!os_log_type_enabled(v206, OS_LOG_TYPE_ERROR)) {
          goto LABEL_493;
        }
        *(_DWORD *)unsigned int buf = 136446466;
        v553 = "nw_socket_set_common_sockopts";
        __int16 v554 = 1024;
        *(_DWORD *)v555 = 22;
        v208 = "%{public}s setsockopt IP_TTL failed %{darwin.errno}d";
LABEL_449:
        _os_log_impl(&dword_181A5C000, v207, OS_LOG_TYPE_ERROR, v208, buf, 0x12u);
        goto LABEL_493;
      }

      v212 = v150;
      *(_DWORD *)unsigned int buf = 136446466;
      v553 = "nw_socket_set_common_sockopts";
      __int16 v554 = 1024;
      *(_DWORD *)v555 = v204;
      v213 = (char *)_os_log_send_and_compose_impl();
      v547[0] = OS_LOG_TYPE_ERROR;
      v545[0] = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v213, v547, v545))
      {
        if (v547[0] == OS_LOG_TYPE_FAULT)
        {
          v214 = (os_log_s *)__nwlog_obj();
          os_log_type_t v215 = v547[0];
          if (!os_log_type_enabled(v214, v547[0])) {
            goto LABEL_490;
          }
          *(_DWORD *)unsigned int buf = 136446466;
          v553 = "nw_socket_set_common_sockopts";
          __int16 v554 = 1024;
          *(_DWORD *)v555 = v204;
          v216 = "%{public}s setsockopt IP_TTL failed %{darwin.errno}d";
          goto LABEL_489;
        }

        if (v545[0] == OS_LOG_TYPE_DEFAULT)
        {
          v214 = (os_log_s *)__nwlog_obj();
          os_log_type_t v215 = v547[0];
          if (!os_log_type_enabled(v214, v547[0])) {
            goto LABEL_490;
          }
          *(_DWORD *)unsigned int buf = 136446466;
          v553 = "nw_socket_set_common_sockopts";
          __int16 v554 = 1024;
          *(_DWORD *)v555 = v204;
          v216 = "%{public}s setsockopt IP_TTL failed %{darwin.errno}d, backtrace limit exceeded";
          goto LABEL_489;
        }

        v217 = (char *)__nw_create_backtrace_string();
        v214 = (os_log_s *)__nwlog_obj();
        os_log_type_t v215 = v547[0];
        BOOL v218 = os_log_type_enabled(v214, v547[0]);
        if (v217)
        {
          if (v218)
          {
            *(_DWORD *)unsigned int buf = 136446722;
            v553 = "nw_socket_set_common_sockopts";
            __int16 v554 = 1024;
            *(_DWORD *)v555 = v204;
            *(_WORD *)&v555[4] = 2082;
            *(void *)&v555[6] = v217;
            _os_log_impl( &dword_181A5C000,  v214,  v215,  "%{public}s setsockopt IP_TTL failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
          }

          free(v217);
          int v192 = identifier_low;
          if (!v213) {
            goto LABEL_492;
          }
          goto LABEL_491;
        }

        int v192 = identifier_low;
        if (v218)
        {
          *(_DWORD *)unsigned int buf = 136446466;
          v553 = "nw_socket_set_common_sockopts";
          __int16 v554 = 1024;
          *(_DWORD *)v555 = v204;
          v216 = "%{public}s setsockopt IP_TTL failed %{darwin.errno}d, no backtrace";
LABEL_489:
          _os_log_impl(&dword_181A5C000, v214, v215, v216, buf, 0x12u);
        }
      }
    }

    else
    {
      if (v192 != 30 || !setsockopt(*(_DWORD *)&a1[4].flow_id[12], 41, 47, v548, 4u))
      {
LABEL_493:
        if (!nw_ip_options_get_receive_hop_limit(v190)) {
          goto LABEL_544;
        }
        if (v192 != 2)
        {
          if (v192 != 30 || !setsockopt(*(_DWORD *)&a1[4].flow_id[12], 41, 37, &v551, 4u)) {
            goto LABEL_544;
          }
          int v229 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          v230 = (os_log_s *)gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)unsigned int buf = 136446722;
            v553 = "nw_socket_set_common_sockopts";
            __int16 v554 = 2080;
            *(void *)v555 = (char *)a1 + 404;
            *(_WORD *)&v555[8] = 1024;
            *(_DWORD *)&v555[10] = v229;
            _os_log_impl( &dword_181A5C000,  v230,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt IPV6_RECVHOPLIMIT failed %{darwin.errno}d",  buf,  0x1Cu);
          }

          v231 = (os_log_s *)__nwlog_obj();
          v227 = v231;
          if (v229 == 22)
          {
            if (os_log_type_enabled(v231, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)unsigned int buf = 136446466;
              v553 = "nw_socket_set_common_sockopts";
              __int16 v554 = 1024;
              *(_DWORD *)v555 = 22;
              v228 = "%{public}s setsockopt IPV6_RECVHOPLIMIT failed %{darwin.errno}d";
              goto LABEL_512;
            }

LABEL_716:
                  if (v305) {
                    free(v305);
                  }
                  uint64_t v150 = v304;
                  __int128 v188 = v534;
                  goto LABEL_730;
                }

                if (v191) {
                  int v298 = v246;
                }
                else {
                  int v298 = 0;
                }
                if (v298 != 1 || !nw_protocol_options_is_udp(v191)) {
                  goto LABEL_730;
                }
                if (disable_multicast_loopback) {
                  v299 = &v550;
                }
                else {
                  v299 = &v551;
                }
                if (!setsockopt(*(_DWORD *)&a1[4].flow_id[12], 41, 11, v299, 4u))
                {
LABEL_725:
                  v319 = (os_log_s *)__nwlog_obj();
                  if (os_log_type_enabled(v319, OS_LOG_TYPE_DEBUG))
                  {
                    v320 = "Enabled";
                    if (disable_multicast_loopback) {
                      v320 = "Disabled";
                    }
                    *(_DWORD *)unsigned int buf = 136446466;
                    v553 = "nw_socket_set_common_sockopts";
                    __int16 v554 = 2080;
                    *(void *)v555 = v320;
                    v294 = "%{public}s %s multicast loopback";
                    v295 = v319;
                    os_log_type_t v296 = OS_LOG_TYPE_DEBUG;
                    uint32_t v297 = 22;
                    goto LABEL_729;
                  }

LABEL_730:
                  os_release(v190);
                  id v72 = v537;
                  goto LABEL_731;
                }

                int v300 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                v301 = (os_log_s *)gconnectionLogObj;
                if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)unsigned int buf = 136446722;
                  v553 = "nw_socket_set_common_sockopts";
                  __int16 v554 = 2080;
                  *(void *)v555 = (char *)a1 + 404;
                  *(_WORD *)&v555[8] = 1024;
                  *(_DWORD *)&v555[10] = v300;
                  _os_log_impl( &dword_181A5C000,  v301,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt IPV6_MULTICAST_LOOP failed %{darwin.errno}d",  buf,  0x1Cu);
                }

                v302 = (os_log_s *)__nwlog_obj();
                v303 = v302;
                if (v300 == 22)
                {
                  if (os_log_type_enabled(v302, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)unsigned int buf = 136446466;
                    v553 = "nw_socket_set_common_sockopts";
                    __int16 v554 = 1024;
                    *(_DWORD *)v555 = 22;
                    _os_log_impl( &dword_181A5C000,  v303,  OS_LOG_TYPE_ERROR,  "%{public}s setsockopt IPV6_MULTICAST_LOOP failed %{darwin.errno}d",  buf,  0x12u);
                  }

                  goto LABEL_725;
                }

                v309 = v150;
                *(_DWORD *)unsigned int buf = 136446466;
                v553 = "nw_socket_set_common_sockopts";
                __int16 v554 = 1024;
                *(_DWORD *)v555 = v300;
                v310 = (char *)_os_log_send_and_compose_impl();
                v547[0] = OS_LOG_TYPE_ERROR;
                v545[0] = OS_LOG_TYPE_DEFAULT;
                if (__nwlog_fault(v310, v547, v545))
                {
                  if (v547[0] == OS_LOG_TYPE_FAULT)
                  {
                    v311 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v312 = v547[0];
                    if (os_log_type_enabled(v311, v547[0]))
                    {
                      *(_DWORD *)unsigned int buf = 136446466;
                      v553 = "nw_socket_set_common_sockopts";
                      __int16 v554 = 1024;
                      *(_DWORD *)v555 = v300;
                      v313 = "%{public}s setsockopt IPV6_MULTICAST_LOOP failed %{darwin.errno}d";
LABEL_721:
                      _os_log_impl(&dword_181A5C000, v311, v312, v313, buf, 0x12u);
                    }
                  }

                  else if (v545[0])
                  {
                    v316 = v310;
                    v317 = (char *)__nw_create_backtrace_string();
                    v311 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v312 = v547[0];
                    BOOL v318 = os_log_type_enabled(v311, v547[0]);
                    if (v317)
                    {
                      if (v318)
                      {
                        *(_DWORD *)unsigned int buf = 136446722;
                        v553 = "nw_socket_set_common_sockopts";
                        __int16 v554 = 1024;
                        *(_DWORD *)v555 = v300;
                        *(_WORD *)&v555[4] = 2082;
                        *(void *)&v555[6] = v317;
                        _os_log_impl( &dword_181A5C000,  v311,  v312,  "%{public}s setsockopt IPV6_MULTICAST_LOOP failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
                      }

                      free(v317);
                      v310 = v316;
                      goto LABEL_722;
                    }

                    v310 = v316;
                    if (v318)
                    {
                      *(_DWORD *)unsigned int buf = 136446466;
                      v553 = "nw_socket_set_common_sockopts";
                      __int16 v554 = 1024;
                      *(_DWORD *)v555 = v300;
                      v313 = "%{public}s setsockopt IPV6_MULTICAST_LOOP failed %{darwin.errno}d, no backtrace";
                      goto LABEL_721;
                    }
                  }

                  else
                  {
                    v311 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v312 = v547[0];
                    if (os_log_type_enabled(v311, v547[0]))
                    {
                      *(_DWORD *)unsigned int buf = 136446466;
                      v553 = "nw_socket_set_common_sockopts";
                      __int16 v554 = 1024;
                      *(_DWORD *)v555 = v300;
                      v313 = "%{public}s setsockopt IPV6_MULTICAST_LOOP failed %{darwin.errno}d, backtrace limit exceeded";
                      goto LABEL_721;
                    }
                  }
                }

LABEL_624:
                if (v269) {
                  free(v269);
                }
                uint64_t v150 = v268;
LABEL_627:
                int local_address_preference = nw_ip_options_get_local_address_preference(v190);
                v241 = v537;
                if (!local_address_preference)
                {
                  int v246 = 1;
                  goto LABEL_660;
                }

                *(_DWORD *)v547 = -1;
                if (local_address_preference == 2)
                {
                  *(_DWORD *)v547 = 0;
                }

                else if (local_address_preference == 1)
                {
                  *(_DWORD *)v547 = 1;
                }

                if (!setsockopt(*(_DWORD *)&a1[4].flow_id[12], 41, 63, v547, 4u)) {
                  goto LABEL_658;
                }
                int v276 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                v277 = (os_log_s *)gconnectionLogObj;
                if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)unsigned int buf = 136446722;
                  v553 = "nw_socket_set_common_sockopts";
                  __int16 v554 = 2080;
                  *(void *)v555 = (char *)a1 + 404;
                  *(_WORD *)&v555[8] = 1024;
                  *(_DWORD *)&v555[10] = v276;
                  _os_log_impl( &dword_181A5C000,  v277,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt IPV6_PREFER_TEMPADDR failed %{darwin.errno}d",  buf,  0x1Cu);
                }

                v278 = (os_log_s *)__nwlog_obj();
                v279 = v278;
                if (v276 == 22)
                {
                  if (os_log_type_enabled(v278, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)unsigned int buf = 136446466;
                    v553 = "nw_socket_set_common_sockopts";
                    __int16 v554 = 1024;
                    *(_DWORD *)v555 = 22;
                    _os_log_impl( &dword_181A5C000,  v279,  OS_LOG_TYPE_ERROR,  "%{public}s setsockopt IPV6_PREFER_TEMPADDR failed %{darwin.errno}d",  buf,  0x12u);
                  }

LABEL_658:
                  int v246 = 1;
                  goto LABEL_659;
                }

                v280 = v150;
                *(_DWORD *)unsigned int buf = 136446466;
                v553 = "nw_socket_set_common_sockopts";
                __int16 v554 = 1024;
                *(_DWORD *)v555 = v276;
                v281 = (char *)_os_log_send_and_compose_impl();
                v545[0] = OS_LOG_TYPE_ERROR;
                os_log_type_t v546 = OS_LOG_TYPE_DEFAULT;
                if (__nwlog_fault(v281, v545, &v546))
                {
                  if (v545[0] == OS_LOG_TYPE_FAULT)
                  {
                    v282 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v283 = v545[0];
                    if (os_log_type_enabled(v282, v545[0]))
                    {
                      *(_DWORD *)unsigned int buf = 136446466;
                      v553 = "nw_socket_set_common_sockopts";
                      __int16 v554 = 1024;
                      *(_DWORD *)v555 = v276;
                      v284 = "%{public}s setsockopt IPV6_PREFER_TEMPADDR failed %{darwin.errno}d";
LABEL_654:
                      _os_log_impl(&dword_181A5C000, v282, v283, v284, buf, 0x12u);
                    }
                  }

                  else if (v546)
                  {
                    v285 = (char *)__nw_create_backtrace_string();
                    v282 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v283 = v545[0];
                    BOOL v286 = os_log_type_enabled(v282, v545[0]);
                    if (v285)
                    {
                      if (v286)
                      {
                        *(_DWORD *)unsigned int buf = 136446722;
                        v553 = "nw_socket_set_common_sockopts";
                        __int16 v554 = 1024;
                        *(_DWORD *)v555 = v276;
                        *(_WORD *)&v555[4] = 2082;
                        *(void *)&v555[6] = v285;
                        _os_log_impl( &dword_181A5C000,  v282,  v283,  "%{public}s setsockopt IPV6_PREFER_TEMPADDR failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
                      }

                      free(v285);
                      int v192 = identifier_low;
                      goto LABEL_655;
                    }

                    int v192 = identifier_low;
                    if (v286)
                    {
                      *(_DWORD *)unsigned int buf = 136446466;
                      v553 = "nw_socket_set_common_sockopts";
                      __int16 v554 = 1024;
                      *(_DWORD *)v555 = v276;
                      v284 = "%{public}s setsockopt IPV6_PREFER_TEMPADDR failed %{darwin.errno}d, no backtrace";
                      goto LABEL_654;
                    }
                  }

                  else
                  {
                    v282 = (os_log_s *)__nwlog_obj();
                    os_log_type_t v283 = v545[0];
                    if (os_log_type_enabled(v282, v545[0]))
                    {
                      *(_DWORD *)unsigned int buf = 136446466;
                      v553 = "nw_socket_set_common_sockopts";
                      __int16 v554 = 1024;
                      *(_DWORD *)v555 = v276;
                      v284 = "%{public}s setsockopt IPV6_PREFER_TEMPADDR failed %{darwin.errno}d, backtrace limit exceeded";
                      goto LABEL_654;
                    }
                  }
                }

LABEL_655:
                if (v281) {
                  free(v281);
                }
                uint64_t v150 = v280;
                goto LABEL_658;
              }
            }

            else if (v192 == 30)
            {
              goto LABEL_601;
            }

            int v246 = 0;
LABEL_659:
            v241 = v537;
            goto LABEL_660;
          }

          v232 = v150;
          *(_DWORD *)unsigned int buf = 136446466;
          v553 = "nw_socket_set_common_sockopts";
          __int16 v554 = 1024;
          *(_DWORD *)v555 = v229;
          v233 = (char *)_os_log_send_and_compose_impl();
          v547[0] = OS_LOG_TYPE_ERROR;
          v545[0] = OS_LOG_TYPE_DEFAULT;
          if (__nwlog_fault(v233, v547, v545))
          {
            if (v547[0] == OS_LOG_TYPE_FAULT)
            {
              v234 = (os_log_s *)__nwlog_obj();
              os_log_type_t v235 = v547[0];
              if (!os_log_type_enabled(v234, v547[0])) {
                goto LABEL_541;
              }
              *(_DWORD *)unsigned int buf = 136446466;
              v553 = "nw_socket_set_common_sockopts";
              __int16 v554 = 1024;
              *(_DWORD *)v555 = v229;
              v236 = "%{public}s setsockopt IPV6_RECVHOPLIMIT failed %{darwin.errno}d";
              goto LABEL_540;
            }

            if (v545[0] == OS_LOG_TYPE_DEFAULT)
            {
              v234 = (os_log_s *)__nwlog_obj();
              os_log_type_t v235 = v547[0];
              if (!os_log_type_enabled(v234, v547[0])) {
                goto LABEL_541;
              }
              *(_DWORD *)unsigned int buf = 136446466;
              v553 = "nw_socket_set_common_sockopts";
              __int16 v554 = 1024;
              *(_DWORD *)v555 = v229;
              v236 = "%{public}s setsockopt IPV6_RECVHOPLIMIT failed %{darwin.errno}d, backtrace limit exceeded";
              goto LABEL_540;
            }

            v239 = (char *)__nw_create_backtrace_string();
            v234 = (os_log_s *)__nwlog_obj();
            os_log_type_t v235 = v547[0];
            BOOL v240 = os_log_type_enabled(v234, v547[0]);
            if (!v239)
            {
              int v192 = identifier_low;
              if (!v240) {
                goto LABEL_541;
              }
              *(_DWORD *)unsigned int buf = 136446466;
              v553 = "nw_socket_set_common_sockopts";
              __int16 v554 = 1024;
              *(_DWORD *)v555 = v229;
              v236 = "%{public}s setsockopt IPV6_RECVHOPLIMIT failed %{darwin.errno}d, no backtrace";
              goto LABEL_540;
            }

            if (v240)
            {
              *(_DWORD *)unsigned int buf = 136446722;
              v553 = "nw_socket_set_common_sockopts";
              __int16 v554 = 1024;
              *(_DWORD *)v555 = v229;
              *(_WORD *)&v555[4] = 2082;
              *(void *)&v555[6] = v239;
              _os_log_impl( &dword_181A5C000,  v234,  v235,  "%{public}s setsockopt IPV6_RECVHOPLIMIT failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
            }

            free(v239);
            int v192 = identifier_low;
          }

          goto LABEL_541;
        }

LABEL_495:
        if (!setsockopt(*(_DWORD *)&a1[4].flow_id[12], 0, 24, &v551, 4u)) {
          goto LABEL_544;
        }
        int v224 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        v225 = (os_log_s *)gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)unsigned int buf = 136446722;
          v553 = "nw_socket_set_common_sockopts";
          __int16 v554 = 2080;
          *(void *)v555 = (char *)a1 + 404;
          *(_WORD *)&v555[8] = 1024;
          *(_DWORD *)&v555[10] = v224;
          _os_log_impl( &dword_181A5C000,  v225,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt IP_RECVTTL failed %{darwin.errno}d",  buf,  0x1Cu);
        }

        v226 = (os_log_s *)__nwlog_obj();
        v227 = v226;
        if (v224 == 22)
        {
          if (os_log_type_enabled(v226, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)unsigned int buf = 136446466;
            v553 = "nw_socket_set_common_sockopts";
            __int16 v554 = 1024;
            *(_DWORD *)v555 = 22;
            v228 = "%{public}s setsockopt IP_RECVTTL failed %{darwin.errno}d";
LABEL_512:
            _os_log_impl(&dword_181A5C000, v227, OS_LOG_TYPE_ERROR, v228, buf, 0x12u);
            goto LABEL_544;
          }

          goto LABEL_544;
        }

        v232 = v150;
        *(_DWORD *)unsigned int buf = 136446466;
        v553 = "nw_socket_set_common_sockopts";
        __int16 v554 = 1024;
        *(_DWORD *)v555 = v224;
        v233 = (char *)_os_log_send_and_compose_impl();
        v547[0] = OS_LOG_TYPE_ERROR;
        v545[0] = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v233, v547, v545))
        {
          if (v547[0] == OS_LOG_TYPE_FAULT)
          {
            v234 = (os_log_s *)__nwlog_obj();
            os_log_type_t v235 = v547[0];
            if (!os_log_type_enabled(v234, v547[0])) {
              goto LABEL_541;
            }
            *(_DWORD *)unsigned int buf = 136446466;
            v553 = "nw_socket_set_common_sockopts";
            __int16 v554 = 1024;
            *(_DWORD *)v555 = v224;
            v236 = "%{public}s setsockopt IP_RECVTTL failed %{darwin.errno}d";
            goto LABEL_540;
          }

          if (v545[0] == OS_LOG_TYPE_DEFAULT)
          {
            v234 = (os_log_s *)__nwlog_obj();
            os_log_type_t v235 = v547[0];
            if (!os_log_type_enabled(v234, v547[0])) {
              goto LABEL_541;
            }
            *(_DWORD *)unsigned int buf = 136446466;
            v553 = "nw_socket_set_common_sockopts";
            __int16 v554 = 1024;
            *(_DWORD *)v555 = v224;
            v236 = "%{public}s setsockopt IP_RECVTTL failed %{darwin.errno}d, backtrace limit exceeded";
            goto LABEL_540;
          }

          v237 = (char *)__nw_create_backtrace_string();
          v234 = (os_log_s *)__nwlog_obj();
          os_log_type_t v235 = v547[0];
          BOOL v238 = os_log_type_enabled(v234, v547[0]);
          if (v237)
          {
            if (v238)
            {
              *(_DWORD *)unsigned int buf = 136446722;
              v553 = "nw_socket_set_common_sockopts";
              __int16 v554 = 1024;
              *(_DWORD *)v555 = v224;
              *(_WORD *)&v555[4] = 2082;
              *(void *)&v555[6] = v237;
              _os_log_impl( &dword_181A5C000,  v234,  v235,  "%{public}s setsockopt IP_RECVTTL failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
            }

            free(v237);
            int v192 = identifier_low;
            if (!v233) {
              goto LABEL_543;
            }
            goto LABEL_542;
          }

          int v192 = identifier_low;
          if (v238)
          {
            *(_DWORD *)unsigned int buf = 136446466;
            v553 = "nw_socket_set_common_sockopts";
            __int16 v554 = 1024;
            *(_DWORD *)v555 = v224;
            v236 = "%{public}s setsockopt IP_RECVTTL failed %{darwin.errno}d, no backtrace";
LABEL_540:
            _os_log_impl(&dword_181A5C000, v234, v235, v236, buf, 0x12u);
          }
        }

LABEL_541:
        if (!v233)
        {
LABEL_543:
          uint64_t v150 = v232;
          __int128 v188 = v534;
          goto LABEL_544;
        }

LABEL_542:
        free(v233);
        goto LABEL_543;
      }

      int v209 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v210 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)unsigned int buf = 136446722;
        v553 = "nw_socket_set_common_sockopts";
        __int16 v554 = 2080;
        *(void *)v555 = (char *)a1 + 404;
        *(_WORD *)&v555[8] = 1024;
        *(_DWORD *)&v555[10] = v209;
        _os_log_impl( &dword_181A5C000,  v210,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt IPV6_HOPLIMIT failed %{darwin.errno}d",  buf,  0x1Cu);
      }

      v211 = (os_log_s *)__nwlog_obj();
      v207 = v211;
      if (v209 == 22)
      {
        if (!os_log_type_enabled(v211, OS_LOG_TYPE_ERROR)) {
          goto LABEL_493;
        }
        *(_DWORD *)unsigned int buf = 136446466;
        v553 = "nw_socket_set_common_sockopts";
        __int16 v554 = 1024;
        *(_DWORD *)v555 = 22;
        v208 = "%{public}s setsockopt IPV6_HOPLIMIT failed %{darwin.errno}d";
        goto LABEL_449;
      }

      v212 = v150;
      *(_DWORD *)unsigned int buf = 136446466;
      v553 = "nw_socket_set_common_sockopts";
      __int16 v554 = 1024;
      *(_DWORD *)v555 = v209;
      v213 = (char *)_os_log_send_and_compose_impl();
      v547[0] = OS_LOG_TYPE_ERROR;
      v545[0] = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v213, v547, v545))
      {
        if (v547[0] == OS_LOG_TYPE_FAULT)
        {
          v214 = (os_log_s *)__nwlog_obj();
          os_log_type_t v215 = v547[0];
          if (!os_log_type_enabled(v214, v547[0])) {
            goto LABEL_490;
          }
          *(_DWORD *)unsigned int buf = 136446466;
          v553 = "nw_socket_set_common_sockopts";
          __int16 v554 = 1024;
          *(_DWORD *)v555 = v209;
          v216 = "%{public}s setsockopt IPV6_HOPLIMIT failed %{darwin.errno}d";
          goto LABEL_489;
        }

        if (v545[0] == OS_LOG_TYPE_DEFAULT)
        {
          v214 = (os_log_s *)__nwlog_obj();
          os_log_type_t v215 = v547[0];
          if (!os_log_type_enabled(v214, v547[0])) {
            goto LABEL_490;
          }
          *(_DWORD *)unsigned int buf = 136446466;
          v553 = "nw_socket_set_common_sockopts";
          __int16 v554 = 1024;
          *(_DWORD *)v555 = v209;
          v216 = "%{public}s setsockopt IPV6_HOPLIMIT failed %{darwin.errno}d, backtrace limit exceeded";
          goto LABEL_489;
        }

        v219 = (char *)__nw_create_backtrace_string();
        v214 = (os_log_s *)__nwlog_obj();
        os_log_type_t v215 = v547[0];
        BOOL v220 = os_log_type_enabled(v214, v547[0]);
        if (!v219)
        {
          int v192 = identifier_low;
          if (!v220) {
            goto LABEL_490;
          }
          *(_DWORD *)unsigned int buf = 136446466;
          v553 = "nw_socket_set_common_sockopts";
          __int16 v554 = 1024;
          *(_DWORD *)v555 = v209;
          v216 = "%{public}s setsockopt IPV6_HOPLIMIT failed %{darwin.errno}d, no backtrace";
          goto LABEL_489;
        }

        if (v220)
        {
          *(_DWORD *)unsigned int buf = 136446722;
          v553 = "nw_socket_set_common_sockopts";
          __int16 v554 = 1024;
          *(_DWORD *)v555 = v209;
          *(_WORD *)&v555[4] = 2082;
          *(void *)&v555[6] = v219;
          _os_log_impl( &dword_181A5C000,  v214,  v215,  "%{public}s setsockopt IPV6_HOPLIMIT failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
        }

        free(v219);
        int v192 = identifier_low;
      }
    }

LABEL_491:
    free(v213);
    goto LABEL_492;
  }

LABEL_783:
      __int128 v188 = v534;
      if (v336) {
        free(v336);
      }
      uint64_t v150 = v335;
      id v72 = v334;
LABEL_786:
      int enable_l4s = nw_tcp_options_get_enable_l4s(v321);
      if (enable_l4s == 2) {
        goto LABEL_850;
      }
      *(_DWORD *)v548 = enable_l4s == 1;
      if (!setsockopt(*(_DWORD *)&a1[4].flow_id[12], 6, 539, v548, 4u)) {
        goto LABEL_850;
      }
      int v351 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v352 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)unsigned int buf = 136446722;
        v553 = "nw_socket_set_common_sockopts";
        __int16 v554 = 2080;
        *(void *)v555 = (char *)a1 + 404;
        *(_WORD *)&v555[8] = 1024;
        *(_DWORD *)&v555[10] = v351;
        _os_log_impl( &dword_181A5C000,  v352,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt TCP_ENABLE_L4S failed %{darwin.errno}d",  buf,  0x1Cu);
      }

      v353 = (os_log_s *)__nwlog_obj();
      v354 = v353;
      if (v351 == 22)
      {
        if (os_log_type_enabled(v353, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)unsigned int buf = 136446466;
          v553 = "nw_socket_set_common_sockopts";
          __int16 v554 = 1024;
          *(_DWORD *)v555 = 22;
          _os_log_impl( &dword_181A5C000,  v354,  OS_LOG_TYPE_ERROR,  "%{public}s setsockopt TCP_ENABLE_L4S failed %{darwin.errno}d",  buf,  0x12u);
        }

        goto LABEL_850;
      }

      id v355 = v72;
      v356 = v150;
      *(_DWORD *)unsigned int buf = 136446466;
      v553 = "nw_socket_set_common_sockopts";
      __int16 v554 = 1024;
      *(_DWORD *)v555 = v351;
      v357 = (char *)_os_log_send_and_compose_impl();
      v547[0] = OS_LOG_TYPE_ERROR;
      v545[0] = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v357, v547, v545))
      {
        if (v547[0] == OS_LOG_TYPE_FAULT)
        {
          v358 = (os_log_s *)__nwlog_obj();
          os_log_type_t v359 = v547[0];
          if (os_log_type_enabled(v358, v547[0]))
          {
            *(_DWORD *)unsigned int buf = 136446466;
            v553 = "nw_socket_set_common_sockopts";
            __int16 v554 = 1024;
            *(_DWORD *)v555 = v351;
            v360 = "%{public}s setsockopt TCP_ENABLE_L4S failed %{darwin.errno}d";
LABEL_846:
            _os_log_impl(&dword_181A5C000, v358, v359, v360, buf, 0x12u);
          }
        }

        else if (v545[0])
        {
          v361 = (char *)__nw_create_backtrace_string();
          v358 = (os_log_s *)__nwlog_obj();
          os_log_type_t v359 = v547[0];
          BOOL v362 = os_log_type_enabled(v358, v547[0]);
          if (v361)
          {
            if (v362)
            {
              *(_DWORD *)unsigned int buf = 136446722;
              v553 = "nw_socket_set_common_sockopts";
              __int16 v554 = 1024;
              *(_DWORD *)v555 = v351;
              *(_WORD *)&v555[4] = 2082;
              *(void *)&v555[6] = v361;
              _os_log_impl( &dword_181A5C000,  v358,  v359,  "%{public}s setsockopt TCP_ENABLE_L4S failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
            }

            free(v361);
            goto LABEL_847;
          }

          if (v362)
          {
            *(_DWORD *)unsigned int buf = 136446466;
            v553 = "nw_socket_set_common_sockopts";
            __int16 v554 = 1024;
            *(_DWORD *)v555 = v351;
            v360 = "%{public}s setsockopt TCP_ENABLE_L4S failed %{darwin.errno}d, no backtrace";
            goto LABEL_846;
          }
        }

        else
        {
          v358 = (os_log_s *)__nwlog_obj();
          os_log_type_t v359 = v547[0];
          if (os_log_type_enabled(v358, v547[0]))
          {
            *(_DWORD *)unsigned int buf = 136446466;
            v553 = "nw_socket_set_common_sockopts";
            __int16 v554 = 1024;
            *(_DWORD *)v555 = v351;
            v360 = "%{public}s setsockopt TCP_ENABLE_L4S failed %{darwin.errno}d, backtrace limit exceeded";
            goto LABEL_846;
          }
        }
      }

LABEL_847:
      __int128 v188 = v534;
      if (v357) {
        free(v357);
      }
      uint64_t v150 = v356;
      id v72 = v355;
LABEL_850:
      if (!nw_tcp_options_get_fast_open_force_enable(v321)
        || !setsockopt(*(_DWORD *)&a1[4].flow_id[12], 6, 536, &v551, 4u))
      {
        goto LABEL_876;
      }

      int v378 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v379 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)unsigned int buf = 136446722;
        v553 = "nw_socket_set_common_sockopts";
        __int16 v554 = 2080;
        *(void *)v555 = (char *)a1 + 404;
        *(_WORD *)&v555[8] = 1024;
        *(_DWORD *)&v555[10] = v378;
        _os_log_impl( &dword_181A5C000,  v379,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt TCP_FASTOPEN_FORCE_ENABLE failed %{darwin.errno}d",  buf,  0x1Cu);
      }

      v380 = (os_log_s *)__nwlog_obj();
      v381 = v380;
      if (v378 == 22)
      {
        if (os_log_type_enabled(v380, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)unsigned int buf = 136446466;
          v553 = "nw_socket_set_common_sockopts";
          __int16 v554 = 1024;
          *(_DWORD *)v555 = 22;
          _os_log_impl( &dword_181A5C000,  v381,  OS_LOG_TYPE_ERROR,  "%{public}s setsockopt TCP_FASTOPEN_FORCE_ENABLE failed %{darwin.errno}d",  buf,  0x12u);
        }

        goto LABEL_876;
      }

      id v382 = v72;
      v383 = v150;
      *(_DWORD *)unsigned int buf = 136446466;
      v553 = "nw_socket_set_common_sockopts";
      __int16 v554 = 1024;
      *(_DWORD *)v555 = v378;
      v384 = (char *)_os_log_send_and_compose_impl();
      v548[0] = OS_LOG_TYPE_ERROR;
      v547[0] = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v384, v548, v547))
      {
        if (v548[0] == OS_LOG_TYPE_FAULT)
        {
          v385 = (os_log_s *)__nwlog_obj();
          os_log_type_t v386 = v548[0];
          if (os_log_type_enabled(v385, v548[0]))
          {
            *(_DWORD *)unsigned int buf = 136446466;
            v553 = "nw_socket_set_common_sockopts";
            __int16 v554 = 1024;
            *(_DWORD *)v555 = v378;
            v387 = "%{public}s setsockopt TCP_FASTOPEN_FORCE_ENABLE failed %{darwin.errno}d";
LABEL_872:
            _os_log_impl(&dword_181A5C000, v385, v386, v387, buf, 0x12u);
          }
        }

        else if (v547[0])
        {
          v388 = (char *)__nw_create_backtrace_string();
          v385 = (os_log_s *)__nwlog_obj();
          os_log_type_t v386 = v548[0];
          BOOL v389 = os_log_type_enabled(v385, v548[0]);
          if (v388)
          {
            if (v389)
            {
              *(_DWORD *)unsigned int buf = 136446722;
              v553 = "nw_socket_set_common_sockopts";
              __int16 v554 = 1024;
              *(_DWORD *)v555 = v378;
              *(_WORD *)&v555[4] = 2082;
              *(void *)&v555[6] = v388;
              _os_log_impl( &dword_181A5C000,  v385,  v386,  "%{public}s setsockopt TCP_FASTOPEN_FORCE_ENABLE failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
            }

            free(v388);
            goto LABEL_873;
          }

          if (v389)
          {
            *(_DWORD *)unsigned int buf = 136446466;
            v553 = "nw_socket_set_common_sockopts";
            __int16 v554 = 1024;
            *(_DWORD *)v555 = v378;
            v387 = "%{public}s setsockopt TCP_FASTOPEN_FORCE_ENABLE failed %{darwin.errno}d, no backtrace";
            goto LABEL_872;
          }
        }

        else
        {
          v385 = (os_log_s *)__nwlog_obj();
          os_log_type_t v386 = v548[0];
          if (os_log_type_enabled(v385, v548[0]))
          {
            *(_DWORD *)unsigned int buf = 136446466;
            v553 = "nw_socket_set_common_sockopts";
            __int16 v554 = 1024;
            *(_DWORD *)v555 = v378;
            v387 = "%{public}s setsockopt TCP_FASTOPEN_FORCE_ENABLE failed %{darwin.errno}d, backtrace limit exceeded";
            goto LABEL_872;
          }
        }
      }

LABEL_873:
      __int128 v188 = v534;
      if (v384) {
        free(v384);
      }
      uint64_t v150 = v383;
      id v72 = v382;
LABEL_876:
      *(_DWORD *)v548 = nw_tcp_options_get_connection_timeout(v321);
      if (!*(_DWORD *)v548 || !setsockopt(*(_DWORD *)&a1[4].flow_id[12], 6, 32, v548, 4u)) {
        goto LABEL_902;
      }
      int v390 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v391 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)unsigned int buf = 136446722;
        v553 = "nw_socket_set_common_sockopts";
        __int16 v554 = 2080;
        *(void *)v555 = (char *)a1 + 404;
        *(_WORD *)&v555[8] = 1024;
        *(_DWORD *)&v555[10] = v390;
        _os_log_impl( &dword_181A5C000,  v391,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt TCP_CONNECTIONTIMEOUT failed %{darwin.errno}d",  buf,  0x1Cu);
      }

      v392 = (os_log_s *)__nwlog_obj();
      v393 = v392;
      if (v390 == 22)
      {
        if (os_log_type_enabled(v392, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)unsigned int buf = 136446466;
          v553 = "nw_socket_set_common_sockopts";
          __int16 v554 = 1024;
          *(_DWORD *)v555 = 22;
          _os_log_impl( &dword_181A5C000,  v393,  OS_LOG_TYPE_ERROR,  "%{public}s setsockopt TCP_CONNECTIONTIMEOUT failed %{darwin.errno}d",  buf,  0x12u);
        }

        goto LABEL_902;
      }

      id v394 = v72;
      v395 = v150;
      *(_DWORD *)unsigned int buf = 136446466;
      v553 = "nw_socket_set_common_sockopts";
      __int16 v554 = 1024;
      *(_DWORD *)v555 = v390;
      v396 = (char *)_os_log_send_and_compose_impl();
      v547[0] = OS_LOG_TYPE_ERROR;
      v545[0] = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v396, v547, v545))
      {
        if (v547[0] == OS_LOG_TYPE_FAULT)
        {
          v397 = (os_log_s *)__nwlog_obj();
          os_log_type_t v398 = v547[0];
          if (os_log_type_enabled(v397, v547[0]))
          {
            *(_DWORD *)unsigned int buf = 136446466;
            v553 = "nw_socket_set_common_sockopts";
            __int16 v554 = 1024;
            *(_DWORD *)v555 = v390;
            v399 = "%{public}s setsockopt TCP_CONNECTIONTIMEOUT failed %{darwin.errno}d";
LABEL_898:
            _os_log_impl(&dword_181A5C000, v397, v398, v399, buf, 0x12u);
          }
        }

        else if (v545[0])
        {
          v400 = (char *)__nw_create_backtrace_string();
          v397 = (os_log_s *)__nwlog_obj();
          os_log_type_t v398 = v547[0];
          BOOL v401 = os_log_type_enabled(v397, v547[0]);
          if (v400)
          {
            if (v401)
            {
              *(_DWORD *)unsigned int buf = 136446722;
              v553 = "nw_socket_set_common_sockopts";
              __int16 v554 = 1024;
              *(_DWORD *)v555 = v390;
              *(_WORD *)&v555[4] = 2082;
              *(void *)&v555[6] = v400;
              _os_log_impl( &dword_181A5C000,  v397,  v398,  "%{public}s setsockopt TCP_CONNECTIONTIMEOUT failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
            }

            free(v400);
            goto LABEL_899;
          }

          if (v401)
          {
            *(_DWORD *)unsigned int buf = 136446466;
            v553 = "nw_socket_set_common_sockopts";
            __int16 v554 = 1024;
            *(_DWORD *)v555 = v390;
            v399 = "%{public}s setsockopt TCP_CONNECTIONTIMEOUT failed %{darwin.errno}d, no backtrace";
            goto LABEL_898;
          }
        }

        else
        {
          v397 = (os_log_s *)__nwlog_obj();
          os_log_type_t v398 = v547[0];
          if (os_log_type_enabled(v397, v547[0]))
          {
            *(_DWORD *)unsigned int buf = 136446466;
            v553 = "nw_socket_set_common_sockopts";
            __int16 v554 = 1024;
            *(_DWORD *)v555 = v390;
            v399 = "%{public}s setsockopt TCP_CONNECTIONTIMEOUT failed %{darwin.errno}d, backtrace limit exceeded";
            goto LABEL_898;
          }
        }
      }

LABEL_899:
      __int128 v188 = v534;
      if (v396) {
        free(v396);
      }
      uint64_t v150 = v395;
      id v72 = v394;
LABEL_902:
      nw_multipath_service_t multipath_service = nw_parameters_get_multipath_service((nw_parameters_t)v188);
      int v403 = *(unsigned __int16 *)&a1[6].flow_id[13] | (a1[6].flow_id[15] << 16);
      if ((v403 & 0x20000) == 0) {
        goto LABEL_1048;
      }
      nw_multipath_service_t v404 = multipath_service;
      if (multipath_service == nw_multipath_service_disabled) {
        goto LABEL_1048;
      }
      *(_DWORD *)v547 = -1;
      switch(multipath_service)
      {
        case nw_multipath_service_aggregate:
          int v405 = 2;
          break;
        case nw_multipath_service_interactive:
          int v405 = 1;
          break;
        case nw_multipath_service_handover:
          *(_DWORD *)v547 = 0;
          goto LABEL_915;
        default:
          if (multipath_service == 101)
          {
            int v405 = 4;
            break;
          }

          if (multipath_service == 100)
          {
            int v405 = 3;
            break;
          }

          if ((v403 & 0x80) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            v419 = (char *)&a1[6].identifier + 4;
            *(_DWORD *)unsigned int buf = 136446722;
            v553 = "nw_socket_set_common_sockopts";
            __int16 v554 = 2082;
            *(void *)v555 = (char *)a1 + 404;
            *(_WORD *)&v555[8] = 1024;
            *(_DWORD *)&v555[10] = v404;
            v420 = (char *)_os_log_send_and_compose_impl();
            v545[0] = OS_LOG_TYPE_ERROR;
            os_log_type_t v546 = OS_LOG_TYPE_DEFAULT;
            if (v545[0] == OS_LOG_TYPE_FAULT)
            {
              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              uint64_t v421 = gconnectionLogObj;
              os_log_type_t v422 = v545[0];
              if (!os_log_type_enabled((os_log_t)gconnectionLogObj, v545[0])) {
                goto LABEL_1264;
              }
              *(_DWORD *)unsigned int buf = 136446722;
              v553 = "nw_socket_set_common_sockopts";
              __int16 v554 = 2082;
              *(void *)v555 = v419;
              *(_WORD *)&v555[8] = 1024;
              *(_DWORD *)&v555[10] = v404;
              v423 = "%{public}s %{public}s Multipath Service has not been set correctly: %u";
            }

            else
            {
              if (v546)
              {
                v434 = (char *)__nw_create_backtrace_string();
                if (__nwlog_connection_log::onceToken != -1) {
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                }
                v435 = (os_log_s *)gconnectionLogObj;
                os_log_type_t v436 = v545[0];
                BOOL v437 = os_log_type_enabled((os_log_t)gconnectionLogObj, v545[0]);
                if (v434)
                {
                  if (v437)
                  {
                    *(_DWORD *)unsigned int buf = 136446978;
                    v553 = "nw_socket_set_common_sockopts";
                    __int16 v554 = 2082;
                    *(void *)v555 = v419;
                    *(_WORD *)&v555[8] = 1024;
                    *(_DWORD *)&v555[10] = v404;
                    *(_WORD *)&v555[14] = 2082;
                    *(void *)&v555[16] = v434;
                    _os_log_impl( &dword_181A5C000,  v435,  v436,  "%{public}s %{public}s Multipath Service has not been set correctly: %u, dumping backtrace:%{public}s",  buf,  0x26u);
                  }

                  free(v434);
                  goto LABEL_1264;
                }

                if (!v437)
                {
LABEL_1264:
                  if (v420) {
                    free(v420);
                  }
                  goto LABEL_1219;
                }

                *(_DWORD *)unsigned int buf = 136446722;
                v553 = "nw_socket_set_common_sockopts";
                __int16 v554 = 2082;
                *(void *)v555 = v419;
                *(_WORD *)&v555[8] = 1024;
                *(_DWORD *)&v555[10] = v404;
                v423 = "%{public}s %{public}s Multipath Service has not been set correctly: %u, no backtrace";
                v530 = v435;
                os_log_type_t v531 = v436;
LABEL_1263:
                _os_log_impl(&dword_181A5C000, v530, v531, v423, buf, 0x1Cu);
                goto LABEL_1264;
              }

              if (__nwlog_connection_log::onceToken != -1) {
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
              }
              uint64_t v421 = gconnectionLogObj;
              os_log_type_t v422 = v545[0];
              if (!os_log_type_enabled((os_log_t)gconnectionLogObj, v545[0])) {
                goto LABEL_1264;
              }
              *(_DWORD *)unsigned int buf = 136446722;
              v553 = "nw_socket_set_common_sockopts";
              __int16 v554 = 2082;
              *(void *)v555 = v419;
              *(_WORD *)&v555[8] = 1024;
              *(_DWORD *)&v555[10] = v404;
              v423 = "%{public}s %{public}s Multipath Service has not been set correctly: %u, backtrace limit exceeded";
            }

            v530 = (os_log_s *)v421;
            os_log_type_t v531 = v422;
            goto LABEL_1263;
          }

LABEL_1219:
          os_release(v321);
          return 0LL;
      }

      *(_DWORD *)v547 = v405;
LABEL_915:
      if (setsockopt(*(_DWORD *)&a1[4].flow_id[12], 6, 531, v547, 4u))
      {
        uint64_t v406 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
        }
        v407 = (os_log_s *)gconnectionLogObj;
        if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)unsigned int buf = 136446722;
          v553 = "nw_socket_set_common_sockopts";
          __int16 v554 = 2080;
          *(void *)v555 = (char *)a1 + 404;
          *(_WORD *)&v555[8] = 1024;
          *(_DWORD *)&v555[10] = v406;
          _os_log_impl( &dword_181A5C000,  v407,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt MPTCP_SERVICE_TYPE failed %{darwin.errno}d",  buf,  0x1Cu);
        }

        if ((_DWORD)v406 == 13 || (_DWORD)v406 == 22)
        {
          v408 = (os_log_s *)__nwlog_obj();
          if (os_log_type_enabled(v408, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)unsigned int buf = 136446466;
            v553 = "nw_socket_set_common_sockopts";
            __int16 v554 = 1024;
            *(_DWORD *)v555 = v406;
            _os_log_impl( &dword_181A5C000,  v408,  OS_LOG_TYPE_ERROR,  "%{public}s setsockopt MPTCP_SERVICE_TYPE failed %{darwin.errno}d",  buf,  0x12u);
          }

LABEL_971:
          uint64_t v433 = v540;
LABEL_1218:
          nw_socket_internal_error(v433, v406);
          goto LABEL_1219;
        }

        __nwlog_obj();
        *(_DWORD *)unsigned int buf = 136446466;
        v553 = "nw_socket_set_common_sockopts";
        __int16 v554 = 1024;
        *(_DWORD *)v555 = v406;
        v413 = (char *)_os_log_send_and_compose_impl();
        v545[0] = OS_LOG_TYPE_ERROR;
        os_log_type_t v546 = OS_LOG_TYPE_DEFAULT;
        if ((__nwlog_fault(v413, v545, &v546) & 1) != 0)
        {
          if (v545[0] == OS_LOG_TYPE_FAULT)
          {
            v414 = (os_log_s *)__nwlog_obj();
            os_log_type_t v415 = v545[0];
            if (!os_log_type_enabled(v414, v545[0])) {
              goto LABEL_969;
            }
            *(_DWORD *)unsigned int buf = 136446466;
            v553 = "nw_socket_set_common_sockopts";
            __int16 v554 = 1024;
            *(_DWORD *)v555 = v406;
            v416 = "%{public}s setsockopt MPTCP_SERVICE_TYPE failed %{darwin.errno}d";
            goto LABEL_968;
          }

          if (v546 == OS_LOG_TYPE_DEFAULT)
          {
            v414 = (os_log_s *)__nwlog_obj();
            os_log_type_t v415 = v545[0];
            if (!os_log_type_enabled(v414, v545[0])) {
              goto LABEL_969;
            }
            *(_DWORD *)unsigned int buf = 136446466;
            v553 = "nw_socket_set_common_sockopts";
            __int16 v554 = 1024;
            *(_DWORD *)v555 = v406;
            v416 = "%{public}s setsockopt MPTCP_SERVICE_TYPE failed %{darwin.errno}d, backtrace limit exceeded";
            goto LABEL_968;
          }

          v417 = (char *)__nw_create_backtrace_string();
          v414 = (os_log_s *)__nwlog_obj();
          os_log_type_t v415 = v545[0];
          BOOL v418 = os_log_type_enabled(v414, v545[0]);
          if (v417)
          {
            if (v418)
            {
              *(_DWORD *)unsigned int buf = 136446722;
              v553 = "nw_socket_set_common_sockopts";
              __int16 v554 = 1024;
              *(_DWORD *)v555 = v406;
              *(_WORD *)&v555[4] = 2082;
              *(void *)&v555[6] = v417;
              _os_log_impl( &dword_181A5C000,  v414,  v415,  "%{public}s setsockopt MPTCP_SERVICE_TYPE failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
            }

            free(v417);
            goto LABEL_969;
          }

          if (v418)
          {
            *(_DWORD *)unsigned int buf = 136446466;
            v553 = "nw_socket_set_common_sockopts";
            __int16 v554 = 1024;
            *(_DWORD *)v555 = v406;
            v416 = "%{public}s setsockopt MPTCP_SERVICE_TYPE failed %{darwin.errno}d, no backtrace";
LABEL_968:
            _os_log_impl(&dword_181A5C000, v414, v415, v416, buf, 0x12u);
          }
        }

LABEL_969:
        if (v413) {
          free(v413);
        }
        goto LABEL_971;
      }

      if (!nw_parameters_get_multipath_force_enable(v188)
        || !setsockopt(*(_DWORD *)&a1[4].flow_id[12], 6, 535, &v551, 4u))
      {
LABEL_1022:
        *(_DWORD *)v545 = nw_tcp_options_get_multipath_force_version(v321);
        if (*(_DWORD *)v545 <= 1u && setsockopt(*(_DWORD *)&a1[4].flow_id[12], 6, 538, v545, 4u))
        {
          uint64_t v449 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          v450 = (os_log_s *)gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)unsigned int buf = 136446722;
            v553 = "nw_socket_set_common_sockopts";
            __int16 v554 = 2080;
            *(void *)v555 = (char *)a1 + 404;
            *(_WORD *)&v555[8] = 1024;
            *(_DWORD *)&v555[10] = v449;
            _os_log_impl( &dword_181A5C000,  v450,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt MPTCP_FORCE_VERSION failed %{darwin.errno}d",  buf,  0x1Cu);
          }

          v451 = (os_log_s *)__nwlog_obj();
          v452 = v451;
          if ((_DWORD)v449 == 22)
          {
            if (os_log_type_enabled(v451, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)unsigned int buf = 136446466;
              v553 = "nw_socket_set_common_sockopts";
              __int16 v554 = 1024;
              *(_DWORD *)v555 = 22;
              _os_log_impl( &dword_181A5C000,  v452,  OS_LOG_TYPE_ERROR,  "%{public}s setsockopt MPTCP_FORCE_VERSION failed %{darwin.errno}d",  buf,  0x12u);
            }

LABEL_1047:
            nw_socket_internal_error(v540, v449);
            goto LABEL_1048;
          }

          v453 = v150;
          id v454 = v72;
          *(_DWORD *)unsigned int buf = 136446466;
          v553 = "nw_socket_set_common_sockopts";
          __int16 v554 = 1024;
          *(_DWORD *)v555 = v449;
          v455 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t v546 = OS_LOG_TYPE_ERROR;
          char v544 = 0;
          if (__nwlog_fault(v455, &v546, &v544))
          {
            if (v546 == OS_LOG_TYPE_FAULT)
            {
              v456 = (os_log_s *)__nwlog_obj();
              os_log_type_t v457 = v546;
              if (os_log_type_enabled(v456, v546))
              {
                *(_DWORD *)unsigned int buf = 136446466;
                v553 = "nw_socket_set_common_sockopts";
                __int16 v554 = 1024;
                *(_DWORD *)v555 = v449;
                v458 = "%{public}s setsockopt MPTCP_FORCE_VERSION failed %{darwin.errno}d";
LABEL_1042:
                v462 = v456;
LABEL_1043:
                _os_log_impl(&dword_181A5C000, v462, v457, v458, buf, 0x12u);
              }
            }

            else if (v544)
            {
              v459 = (char *)__nw_create_backtrace_string();
              v460 = (os_log_s *)__nwlog_obj();
              os_log_type_t v457 = v546;
              BOOL v461 = os_log_type_enabled(v460, v546);
              if (v459)
              {
                if (v461)
                {
                  *(_DWORD *)unsigned int buf = 136446722;
                  v553 = "nw_socket_set_common_sockopts";
                  __int16 v554 = 1024;
                  *(_DWORD *)v555 = v449;
                  *(_WORD *)&v555[4] = 2082;
                  *(void *)&v555[6] = v459;
                  _os_log_impl( &dword_181A5C000,  v460,  v457,  "%{public}s setsockopt MPTCP_FORCE_VERSION failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
                }

                free(v459);
                goto LABEL_1044;
              }

              if (v461)
              {
                *(_DWORD *)unsigned int buf = 136446466;
                v553 = "nw_socket_set_common_sockopts";
                __int16 v554 = 1024;
                *(_DWORD *)v555 = v449;
                v458 = "%{public}s setsockopt MPTCP_FORCE_VERSION failed %{darwin.errno}d, no backtrace";
                v462 = v460;
                goto LABEL_1043;
              }
            }

            else
            {
              v456 = (os_log_s *)__nwlog_obj();
              os_log_type_t v457 = v546;
              if (os_log_type_enabled(v456, v546))
              {
                *(_DWORD *)unsigned int buf = 136446466;
                v553 = "nw_socket_set_common_sockopts";
                __int16 v554 = 1024;
                *(_DWORD *)v555 = v449;
                v458 = "%{public}s setsockopt MPTCP_FORCE_VERSION failed %{darwin.errno}d, backtrace limit exceeded";
                goto LABEL_1042;
              }
            }
          }

LABEL_1044:
          if (v455) {
            free(v455);
          }
          id v72 = v454;
          uint64_t v150 = v453;
          __int128 v188 = v534;
          goto LABEL_1047;
        }

LABEL_1048:
        *(_DWORD *)v547 = nw_endpoint_get_alternate_port(v72);
        if (*(_DWORD *)v547
          && ((*(unsigned __int16 *)&a1[6].flow_id[13] | (a1[6].flow_id[15] << 16)) & 0x20000) != 0
          && setsockopt(*(_DWORD *)&a1[4].flow_id[12], 6, 534, v547, 4u))
        {
          uint64_t v406 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
          }
          v463 = (os_log_s *)gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)unsigned int buf = 136446722;
            v553 = "nw_socket_set_common_sockopts";
            __int16 v554 = 2080;
            *(void *)v555 = (char *)a1 + 404;
            *(_WORD *)&v555[8] = 1024;
            *(_DWORD *)&v555[10] = v406;
            _os_log_impl( &dword_181A5C000,  v463,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt MPTCP_ALTERNATE_PORT failed %{darwin.errno}d",  buf,  0x1Cu);
          }

          v464 = (os_log_s *)__nwlog_obj();
          v465 = v464;
          if ((_DWORD)v406 == 22)
          {
            if (os_log_type_enabled(v464, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)unsigned int buf = 136446466;
              v553 = "nw_socket_set_common_sockopts";
              __int16 v554 = 1024;
              *(_DWORD *)v555 = 22;
              _os_log_impl( &dword_181A5C000,  v465,  OS_LOG_TYPE_ERROR,  "%{public}s setsockopt MPTCP_ALTERNATE_PORT failed %{darwin.errno}d",  buf,  0x12u);
            }

LABEL_1217:
            uint64_t v433 = v540;
            goto LABEL_1218;
          }

          *(_DWORD *)unsigned int buf = 136446466;
          v553 = "nw_socket_set_common_sockopts";
          __int16 v554 = 1024;
          *(_DWORD *)v555 = v406;
          v509 = (char *)_os_log_send_and_compose_impl();
          v545[0] = OS_LOG_TYPE_ERROR;
          os_log_type_t v546 = OS_LOG_TYPE_DEFAULT;
          if (__nwlog_fault(v509, v545, &v546))
          {
            if (v545[0] == OS_LOG_TYPE_FAULT)
            {
              v510 = (os_log_s *)__nwlog_obj();
              os_log_type_t v511 = v545[0];
              if (!os_log_type_enabled(v510, v545[0])) {
                goto LABEL_1215;
              }
              *(_DWORD *)unsigned int buf = 136446466;
              v553 = "nw_socket_set_common_sockopts";
              __int16 v554 = 1024;
              *(_DWORD *)v555 = v406;
              v512 = "%{public}s setsockopt MPTCP_ALTERNATE_PORT failed %{darwin.errno}d";
              goto LABEL_1214;
            }

            if (v546 == OS_LOG_TYPE_DEFAULT)
            {
              v510 = (os_log_s *)__nwlog_obj();
              os_log_type_t v511 = v545[0];
              if (!os_log_type_enabled(v510, v545[0])) {
                goto LABEL_1215;
              }
              *(_DWORD *)unsigned int buf = 136446466;
              v553 = "nw_socket_set_common_sockopts";
              __int16 v554 = 1024;
              *(_DWORD *)v555 = v406;
              v512 = "%{public}s setsockopt MPTCP_ALTERNATE_PORT failed %{darwin.errno}d, backtrace limit exceeded";
              goto LABEL_1214;
            }

            v520 = (char *)__nw_create_backtrace_string();
            v510 = (os_log_s *)__nwlog_obj();
            os_log_type_t v511 = v545[0];
            BOOL v521 = os_log_type_enabled(v510, v545[0]);
            if (v520)
            {
              if (v521)
              {
                *(_DWORD *)unsigned int buf = 136446722;
                v553 = "nw_socket_set_common_sockopts";
                __int16 v554 = 1024;
                *(_DWORD *)v555 = v406;
                *(_WORD *)&v555[4] = 2082;
                *(void *)&v555[6] = v520;
                _os_log_impl( &dword_181A5C000,  v510,  v511,  "%{public}s setsockopt MPTCP_ALTERNATE_PORT failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
              }

              free(v520);
              goto LABEL_1215;
            }

            if (v521)
            {
              *(_DWORD *)unsigned int buf = 136446466;
              v553 = "nw_socket_set_common_sockopts";
              __int16 v554 = 1024;
              *(_DWORD *)v555 = v406;
              v512 = "%{public}s setsockopt MPTCP_ALTERNATE_PORT failed %{darwin.errno}d, no backtrace";
LABEL_1214:
              _os_log_impl(&dword_181A5C000, v510, v511, v512, buf, 0x12u);
            }
          }

LABEL_1215:
          if (v509) {
            free(v509);
          }
          goto LABEL_1217;
        }

        goto LABEL_1058;
      }

      uint64_t v409 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v410 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)unsigned int buf = 136446722;
        v553 = "nw_socket_set_common_sockopts";
        __int16 v554 = 2080;
        *(void *)v555 = (char *)a1 + 404;
        *(_WORD *)&v555[8] = 1024;
        *(_DWORD *)&v555[10] = v409;
        _os_log_impl( &dword_181A5C000,  v410,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt MPTCP_FORCE_ENABLE failed %{darwin.errno}d",  buf,  0x1Cu);
      }

      v411 = (os_log_s *)__nwlog_obj();
      v412 = v411;
      if ((_DWORD)v409 == 22)
      {
        if (os_log_type_enabled(v411, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)unsigned int buf = 136446466;
          v553 = "nw_socket_set_common_sockopts";
          __int16 v554 = 1024;
          *(_DWORD *)v555 = 22;
          _os_log_impl( &dword_181A5C000,  v412,  OS_LOG_TYPE_ERROR,  "%{public}s setsockopt MPTCP_FORCE_ENABLE failed %{darwin.errno}d",  buf,  0x12u);
        }

LABEL_1021:
        nw_socket_internal_error(v540, v409);
        goto LABEL_1022;
      }

      v424 = v150;
      id v425 = v72;
      *(_DWORD *)unsigned int buf = 136446466;
      v553 = "nw_socket_set_common_sockopts";
      __int16 v554 = 1024;
      *(_DWORD *)v555 = v409;
      v426 = (char *)_os_log_send_and_compose_impl();
      v545[0] = OS_LOG_TYPE_ERROR;
      os_log_type_t v546 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v426, v545, &v546))
      {
        if (v545[0] == OS_LOG_TYPE_FAULT)
        {
          v427 = (os_log_s *)__nwlog_obj();
          os_log_type_t v428 = v545[0];
          if (os_log_type_enabled(v427, v545[0]))
          {
            *(_DWORD *)unsigned int buf = 136446466;
            v553 = "nw_socket_set_common_sockopts";
            __int16 v554 = 1024;
            *(_DWORD *)v555 = v409;
            v429 = "%{public}s setsockopt MPTCP_FORCE_ENABLE failed %{darwin.errno}d";
LABEL_1016:
            v448 = v427;
LABEL_1017:
            _os_log_impl(&dword_181A5C000, v448, v428, v429, buf, 0x12u);
          }
        }

        else if (v546)
        {
          v430 = (char *)__nw_create_backtrace_string();
          v431 = (os_log_s *)__nwlog_obj();
          os_log_type_t v428 = v545[0];
          BOOL v432 = os_log_type_enabled(v431, v545[0]);
          if (v430)
          {
            if (v432)
            {
              *(_DWORD *)unsigned int buf = 136446722;
              v553 = "nw_socket_set_common_sockopts";
              __int16 v554 = 1024;
              *(_DWORD *)v555 = v409;
              *(_WORD *)&v555[4] = 2082;
              *(void *)&v555[6] = v430;
              _os_log_impl( &dword_181A5C000,  v431,  v428,  "%{public}s setsockopt MPTCP_FORCE_ENABLE failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
            }

            free(v430);
            goto LABEL_1018;
          }

          if (v432)
          {
            *(_DWORD *)unsigned int buf = 136446466;
            v553 = "nw_socket_set_common_sockopts";
            __int16 v554 = 1024;
            *(_DWORD *)v555 = v409;
            v429 = "%{public}s setsockopt MPTCP_FORCE_ENABLE failed %{darwin.errno}d, no backtrace";
            v448 = v431;
            goto LABEL_1017;
          }
        }

        else
        {
          v427 = (os_log_s *)__nwlog_obj();
          os_log_type_t v428 = v545[0];
          if (os_log_type_enabled(v427, v545[0]))
          {
            *(_DWORD *)unsigned int buf = 136446466;
            v553 = "nw_socket_set_common_sockopts";
            __int16 v554 = 1024;
            *(_DWORD *)v555 = v409;
            v429 = "%{public}s setsockopt MPTCP_FORCE_ENABLE failed %{darwin.errno}d, backtrace limit exceeded";
            goto LABEL_1016;
          }
        }
      }

LABEL_1018:
      if (v426) {
        free(v426);
      }
      id v72 = v425;
      uint64_t v150 = v424;
      __int128 v188 = v534;
      goto LABEL_1021;
    }

    if (!nw_protocol_options_is_udp(v321)) {
      goto LABEL_1058;
    }
    int v325 = identifier_low;
    if (!nw_udp_options_get_prefer_no_checksum(v321) || !setsockopt(*(_DWORD *)&a1[4].flow_id[12], 17, 1, &v551, 4u))
    {
LABEL_814:
      if (v325 == 2)
      {
        if ((setsockopt(*(_DWORD *)&a1[4].flow_id[12], 0, 27, &v551, 4u) & 0x80000000) == 0) {
          goto LABEL_991;
        }
        int v363 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        v364 = (os_log_s *)__nwlog_obj();
        v365 = v364;
        if (v363 == 22)
        {
          if (os_log_type_enabled(v364, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)unsigned int buf = 136446466;
            v553 = "nw_socket_set_common_sockopts";
            __int16 v554 = 1024;
            *(_DWORD *)v555 = 22;
            v366 = "%{public}s setsockopt IP_RECVTOS failed %{darwin.errno}d";
LABEL_824:
            _os_log_impl(&dword_181A5C000, v365, OS_LOG_TYPE_ERROR, v366, buf, 0x12u);
            goto LABEL_991;
          }

          goto LABEL_991;
        }

        v369 = v150;
        *(_DWORD *)unsigned int buf = 136446466;
        v553 = "nw_socket_set_common_sockopts";
        __int16 v554 = 1024;
        *(_DWORD *)v555 = v363;
        v370 = (char *)_os_log_send_and_compose_impl();
        v548[0] = OS_LOG_TYPE_ERROR;
        v547[0] = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v370, v548, v547))
        {
          if (v548[0] == OS_LOG_TYPE_FAULT)
          {
            v371 = (os_log_s *)__nwlog_obj();
            os_log_type_t v372 = v548[0];
            if (!os_log_type_enabled(v371, v548[0])) {
              goto LABEL_988;
            }
            *(_DWORD *)unsigned int buf = 136446466;
            v553 = "nw_socket_set_common_sockopts";
            __int16 v554 = 1024;
            *(_DWORD *)v555 = v363;
            v373 = "%{public}s setsockopt IP_RECVTOS failed %{darwin.errno}d";
            goto LABEL_987;
          }

          if (v547[0] == OS_LOG_TYPE_DEFAULT)
          {
            v371 = (os_log_s *)__nwlog_obj();
            os_log_type_t v372 = v548[0];
            if (!os_log_type_enabled(v371, v548[0])) {
              goto LABEL_988;
            }
            *(_DWORD *)unsigned int buf = 136446466;
            v553 = "nw_socket_set_common_sockopts";
            __int16 v554 = 1024;
            *(_DWORD *)v555 = v363;
            v373 = "%{public}s setsockopt IP_RECVTOS failed %{darwin.errno}d, backtrace limit exceeded";
            goto LABEL_987;
          }

          v374 = (char *)__nw_create_backtrace_string();
          v371 = (os_log_s *)__nwlog_obj();
          os_log_type_t v372 = v548[0];
          BOOL v375 = os_log_type_enabled(v371, v548[0]);
          if (v374)
          {
            if (v375)
            {
              *(_DWORD *)unsigned int buf = 136446722;
              v553 = "nw_socket_set_common_sockopts";
              __int16 v554 = 1024;
              *(_DWORD *)v555 = v363;
              *(_WORD *)&v555[4] = 2082;
              *(void *)&v555[6] = v374;
              _os_log_impl( &dword_181A5C000,  v371,  v372,  "%{public}s setsockopt IP_RECVTOS failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
            }

            free(v374);
            if (!v370) {
              goto LABEL_990;
            }
            goto LABEL_989;
          }

          if (v375)
          {
            *(_DWORD *)unsigned int buf = 136446466;
            v553 = "nw_socket_set_common_sockopts";
            __int16 v554 = 1024;
            *(_DWORD *)v555 = v363;
            v373 = "%{public}s setsockopt IP_RECVTOS failed %{darwin.errno}d, no backtrace";
LABEL_987:
            _os_log_impl(&dword_181A5C000, v371, v372, v373, buf, 0x12u);
          }
        }
      }

      else
      {
        if (v325 != 30 || (setsockopt(*(_DWORD *)&a1[4].flow_id[12], 41, 35, &v551, 4u) & 0x80000000) == 0) {
          goto LABEL_991;
        }
        int v367 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        v368 = (os_log_s *)__nwlog_obj();
        v365 = v368;
        if (v367 == 22)
        {
          if (os_log_type_enabled(v368, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)unsigned int buf = 136446466;
            v553 = "nw_socket_set_common_sockopts";
            __int16 v554 = 1024;
            *(_DWORD *)v555 = 22;
            v366 = "%{public}s setsockopt IPV6_RECVTCLASS failed %{darwin.errno}d";
            goto LABEL_824;
          }

LABEL_991:
          if (nw_endpoint_get_type((nw_endpoint_t)v72) == nw_endpoint_type_address
            && nw_endpoint_is_broadcast(v72, path)
            && setsockopt(*(_DWORD *)&a1[4].flow_id[12], 0xFFFF, 32, &v551, 4u) < 0)
          {
            int v438 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
            v439 = (os_log_s *)__nwlog_obj();
            v440 = v439;
            if (v438 == 22)
            {
              if (os_log_type_enabled(v439, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)unsigned int buf = 136446466;
                v553 = "nw_socket_set_common_sockopts";
                __int16 v554 = 1024;
                *(_DWORD *)v555 = 22;
                _os_log_impl( &dword_181A5C000,  v440,  OS_LOG_TYPE_ERROR,  "%{public}s setsockopt SO_BROADCAST failed %{darwin.errno}d",  buf,  0x12u);
              }

              goto LABEL_1058;
            }

            v441 = v150;
            *(_DWORD *)unsigned int buf = 136446466;
            v553 = "nw_socket_set_common_sockopts";
            __int16 v554 = 1024;
            *(_DWORD *)v555 = v438;
            v442 = (char *)_os_log_send_and_compose_impl();
            v548[0] = OS_LOG_TYPE_ERROR;
            v547[0] = OS_LOG_TYPE_DEFAULT;
            if (__nwlog_fault(v442, v548, v547))
            {
              if (v548[0] == OS_LOG_TYPE_FAULT)
              {
                v443 = (os_log_s *)__nwlog_obj();
                os_log_type_t v444 = v548[0];
                if (os_log_type_enabled(v443, v548[0]))
                {
                  *(_DWORD *)unsigned int buf = 136446466;
                  v553 = "nw_socket_set_common_sockopts";
                  __int16 v554 = 1024;
                  *(_DWORD *)v555 = v438;
                  v445 = "%{public}s setsockopt SO_BROADCAST failed %{darwin.errno}d";
LABEL_1010:
                  _os_log_impl(&dword_181A5C000, v443, v444, v445, buf, 0x12u);
                }
              }

              else if (v547[0])
              {
                v446 = (char *)__nw_create_backtrace_string();
                v443 = (os_log_s *)__nwlog_obj();
                os_log_type_t v444 = v548[0];
                BOOL v447 = os_log_type_enabled(v443, v548[0]);
                if (v446)
                {
                  if (v447)
                  {
                    *(_DWORD *)unsigned int buf = 136446722;
                    v553 = "nw_socket_set_common_sockopts";
                    __int16 v554 = 1024;
                    *(_DWORD *)v555 = v438;
                    *(_WORD *)&v555[4] = 2082;
                    *(void *)&v555[6] = v446;
                    _os_log_impl( &dword_181A5C000,  v443,  v444,  "%{public}s setsockopt SO_BROADCAST failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
                  }

                  free(v446);
                  goto LABEL_1011;
                }

                if (v447)
                {
                  *(_DWORD *)unsigned int buf = 136446466;
                  v553 = "nw_socket_set_common_sockopts";
                  __int16 v554 = 1024;
                  *(_DWORD *)v555 = v438;
                  v445 = "%{public}s setsockopt SO_BROADCAST failed %{darwin.errno}d, no backtrace";
                  goto LABEL_1010;
                }
              }

              else
              {
                v443 = (os_log_s *)__nwlog_obj();
                os_log_type_t v444 = v548[0];
                if (os_log_type_enabled(v443, v548[0]))
                {
                  *(_DWORD *)unsigned int buf = 136446466;
                  v553 = "nw_socket_set_common_sockopts";
                  __int16 v554 = 1024;
                  *(_DWORD *)v555 = v438;
                  v445 = "%{public}s setsockopt SO_BROADCAST failed %{darwin.errno}d, backtrace limit exceeded";
                  goto LABEL_1010;
                }
              }
            }

LABEL_1011:
            if (v442) {
              free(v442);
            }
            uint64_t v150 = v441;
            __int128 v188 = v534;
          }

LABEL_988:
      if (!v370)
      {
LABEL_990:
        uint64_t v150 = v369;
        __int128 v188 = v534;
        goto LABEL_991;
      }

LABEL_989:
      free(v370);
      goto LABEL_990;
    }

    int v326 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    v327 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unsigned int buf = 136446722;
      v553 = "nw_socket_set_common_sockopts";
      __int16 v554 = 2080;
      *(void *)v555 = (char *)a1 + 404;
      *(_WORD *)&v555[8] = 1024;
      *(_DWORD *)&v555[10] = v326;
      _os_log_impl( &dword_181A5C000,  v327,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt UDP_NOCKSUM failed %{darwin.errno}d",  buf,  0x1Cu);
    }

    v328 = (os_log_s *)__nwlog_obj();
    v329 = v328;
    if (v326 == 22)
    {
      if (os_log_type_enabled(v328, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)unsigned int buf = 136446466;
        v553 = "nw_socket_set_common_sockopts";
        __int16 v554 = 1024;
        *(_DWORD *)v555 = 22;
        _os_log_impl( &dword_181A5C000,  v329,  OS_LOG_TYPE_ERROR,  "%{public}s setsockopt UDP_NOCKSUM failed %{darwin.errno}d",  buf,  0x12u);
      }

      goto LABEL_814;
    }

    id v340 = v72;
    v341 = v150;
    *(_DWORD *)unsigned int buf = 136446466;
    v553 = "nw_socket_set_common_sockopts";
    __int16 v554 = 1024;
    *(_DWORD *)v555 = v326;
    v342 = (char *)_os_log_send_and_compose_impl();
    v548[0] = OS_LOG_TYPE_ERROR;
    v547[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v342, v548, v547))
    {
      if (v548[0] == OS_LOG_TYPE_FAULT)
      {
        v343 = (os_log_s *)__nwlog_obj();
        os_log_type_t v344 = v548[0];
        if (os_log_type_enabled(v343, v548[0]))
        {
          *(_DWORD *)unsigned int buf = 136446466;
          v553 = "nw_socket_set_common_sockopts";
          __int16 v554 = 1024;
          *(_DWORD *)v555 = v326;
          v345 = "%{public}s setsockopt UDP_NOCKSUM failed %{darwin.errno}d";
LABEL_810:
          _os_log_impl(&dword_181A5C000, v343, v344, v345, buf, 0x12u);
        }
      }

      else if (v547[0])
      {
        v348 = (char *)__nw_create_backtrace_string();
        v343 = (os_log_s *)__nwlog_obj();
        os_log_type_t v344 = v548[0];
        BOOL v349 = os_log_type_enabled(v343, v548[0]);
        if (v348)
        {
          if (v349)
          {
            *(_DWORD *)unsigned int buf = 136446722;
            v553 = "nw_socket_set_common_sockopts";
            __int16 v554 = 1024;
            *(_DWORD *)v555 = v326;
            *(_WORD *)&v555[4] = 2082;
            *(void *)&v555[6] = v348;
            _os_log_impl( &dword_181A5C000,  v343,  v344,  "%{public}s setsockopt UDP_NOCKSUM failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
          }

          free(v348);
          int v325 = identifier_low;
          goto LABEL_811;
        }

        int v325 = identifier_low;
        if (v349)
        {
          *(_DWORD *)unsigned int buf = 136446466;
          v553 = "nw_socket_set_common_sockopts";
          __int16 v554 = 1024;
          *(_DWORD *)v555 = v326;
          v345 = "%{public}s setsockopt UDP_NOCKSUM failed %{darwin.errno}d, no backtrace";
          goto LABEL_810;
        }
      }

      else
      {
        v343 = (os_log_s *)__nwlog_obj();
        os_log_type_t v344 = v548[0];
        if (os_log_type_enabled(v343, v548[0]))
        {
          *(_DWORD *)unsigned int buf = 136446466;
          v553 = "nw_socket_set_common_sockopts";
          __int16 v554 = 1024;
          *(_DWORD *)v555 = v326;
          v345 = "%{public}s setsockopt UDP_NOCKSUM failed %{darwin.errno}d, backtrace limit exceeded";
          goto LABEL_810;
        }
      }
    }

LABEL_811:
    __int128 v188 = v534;
    if (v342) {
      free(v342);
    }
    uint64_t v150 = v341;
    id v72 = v340;
    goto LABEL_814;
  }

LABEL_1205:
        uint64_t v71 = v540;
        goto LABEL_328;
      }

      *(_DWORD *)unsigned int buf = 136446466;
      v553 = "nw_socket_set_common_sockopts";
      __int16 v554 = 1024;
      *(_DWORD *)v555 = v45;
      v487 = (char *)_os_log_send_and_compose_impl();
      v548[0] = OS_LOG_TYPE_ERROR;
      v547[0] = OS_LOG_TYPE_DEFAULT;
      if (v548[0] == OS_LOG_TYPE_FAULT)
      {
        v488 = (os_log_s *)__nwlog_obj();
        os_log_type_t v489 = v548[0];
        if (!os_log_type_enabled(v488, v548[0])) {
          goto LABEL_1203;
        }
        *(_DWORD *)unsigned int buf = 136446466;
        v553 = "nw_socket_set_common_sockopts";
        __int16 v554 = 1024;
        *(_DWORD *)v555 = v45;
        v490 = "%{public}s setsockopt SO_REUSEADDR failed %{darwin.errno}d";
      }

      else if (v547[0])
      {
        v500 = (char *)__nw_create_backtrace_string();
        v488 = (os_log_s *)__nwlog_obj();
        os_log_type_t v489 = v548[0];
        BOOL v501 = os_log_type_enabled(v488, v548[0]);
        if (v500)
        {
          if (v501)
          {
            *(_DWORD *)unsigned int buf = 136446722;
            v553 = "nw_socket_set_common_sockopts";
            __int16 v554 = 1024;
            *(_DWORD *)v555 = v45;
            *(_WORD *)&v555[4] = 2082;
            *(void *)&v555[6] = v500;
            _os_log_impl( &dword_181A5C000,  v488,  v489,  "%{public}s setsockopt SO_REUSEADDR failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
          }

          free(v500);
LABEL_1203:
          if (!v487) {
            goto LABEL_1205;
          }
LABEL_1204:
          free(v487);
          goto LABEL_1205;
        }

        if (!v501) {
          goto LABEL_1203;
        }
        *(_DWORD *)unsigned int buf = 136446466;
        v553 = "nw_socket_set_common_sockopts";
        __int16 v554 = 1024;
        *(_DWORD *)v555 = v45;
        v490 = "%{public}s setsockopt SO_REUSEADDR failed %{darwin.errno}d, no backtrace";
      }

      else
      {
        v488 = (os_log_s *)__nwlog_obj();
        os_log_type_t v489 = v548[0];
        if (!os_log_type_enabled(v488, v548[0])) {
          goto LABEL_1203;
        }
        *(_DWORD *)unsigned int buf = 136446466;
        v553 = "nw_socket_set_common_sockopts";
        __int16 v554 = 1024;
        *(_DWORD *)v555 = v45;
        v490 = "%{public}s setsockopt SO_REUSEADDR failed %{darwin.errno}d, backtrace limit exceeded";
      }

LABEL_1202:
      _os_log_impl(&dword_181A5C000, v488, v489, v490, buf, 0x12u);
      goto LABEL_1203;
    }

    if (setsockopt(*(_DWORD *)&a1[4].flow_id[12], 0xFFFF, 512, &v551, 4u) < 0)
    {
      uint64_t v45 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v491 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)unsigned int buf = 136446722;
        v553 = "nw_socket_set_common_sockopts";
        __int16 v554 = 2080;
        *(void *)v555 = (char *)a1 + 404;
        *(_WORD *)&v555[8] = 1024;
        *(_DWORD *)&v555[10] = v45;
        _os_log_impl( &dword_181A5C000,  v491,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt SO_REUSEPORT failed %{darwin.errno}d",  buf,  0x1Cu);
      }

      v492 = (os_log_s *)__nwlog_obj();
      v474 = v492;
      if ((_DWORD)v45 == 22)
      {
        if (os_log_type_enabled(v492, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)unsigned int buf = 136446466;
          v553 = "nw_socket_set_common_sockopts";
          __int16 v554 = 1024;
          *(_DWORD *)v555 = 22;
          v475 = "%{public}s setsockopt SO_REUSEPORT failed %{darwin.errno}d";
          goto LABEL_1131;
        }

        goto LABEL_1205;
      }

      *(_DWORD *)unsigned int buf = 136446466;
      v553 = "nw_socket_set_common_sockopts";
      __int16 v554 = 1024;
      *(_DWORD *)v555 = v45;
      v487 = (char *)_os_log_send_and_compose_impl();
      v548[0] = OS_LOG_TYPE_ERROR;
      v547[0] = OS_LOG_TYPE_DEFAULT;
      if (v548[0] == OS_LOG_TYPE_FAULT)
      {
        v488 = (os_log_s *)__nwlog_obj();
        os_log_type_t v489 = v548[0];
        if (!os_log_type_enabled(v488, v548[0])) {
          goto LABEL_1203;
        }
        *(_DWORD *)unsigned int buf = 136446466;
        v553 = "nw_socket_set_common_sockopts";
        __int16 v554 = 1024;
        *(_DWORD *)v555 = v45;
        v490 = "%{public}s setsockopt SO_REUSEPORT failed %{darwin.errno}d";
        goto LABEL_1202;
      }

      if (v547[0] == OS_LOG_TYPE_DEFAULT)
      {
        v488 = (os_log_s *)__nwlog_obj();
        os_log_type_t v489 = v548[0];
        if (!os_log_type_enabled(v488, v548[0])) {
          goto LABEL_1203;
        }
        *(_DWORD *)unsigned int buf = 136446466;
        v553 = "nw_socket_set_common_sockopts";
        __int16 v554 = 1024;
        *(_DWORD *)v555 = v45;
        v490 = "%{public}s setsockopt SO_REUSEPORT failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_1202;
      }

      v495 = (char *)__nw_create_backtrace_string();
      v488 = (os_log_s *)__nwlog_obj();
      os_log_type_t v489 = v548[0];
      BOOL v504 = os_log_type_enabled(v488, v548[0]);
      if (!v495)
      {
        if (!v504) {
          goto LABEL_1203;
        }
        *(_DWORD *)unsigned int buf = 136446466;
        v553 = "nw_socket_set_common_sockopts";
        __int16 v554 = 1024;
        *(_DWORD *)v555 = v45;
        v490 = "%{public}s setsockopt SO_REUSEPORT failed %{darwin.errno}d, no backtrace";
        goto LABEL_1202;
      }

      if (v504)
      {
        *(_DWORD *)unsigned int buf = 136446722;
        v553 = "nw_socket_set_common_sockopts";
        __int16 v554 = 1024;
        *(_DWORD *)v555 = v45;
        *(_WORD *)&v555[4] = 2082;
        *(void *)&v555[6] = v495;
        v497 = "%{public}s setsockopt SO_REUSEPORT failed %{darwin.errno}d, dumping backtrace:%{public}s";
        goto LABEL_1168;
      }

LABEL_1169:
      free(v495);
      if (!v487) {
        goto LABEL_1205;
      }
      goto LABEL_1204;
    }
  }

  v468 = *(void **)&a1[3].flow_id[8];
  if (v468)
  {
    int v469 = *(_DWORD *)&a1[4].flow_id[12];
    bytes_ptr = xpc_data_get_bytes_ptr(v468);
    socklen_t length = xpc_data_get_length(*(xpc_object_t *)&a1[3].flow_id[8]);
    if (setsockopt(v469, 0xFFFF, 4358, bytes_ptr, length))
    {
      uint64_t v45 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      v472 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)unsigned int buf = 136446722;
        v553 = "nw_socket_set_common_sockopts";
        __int16 v554 = 2080;
        *(void *)v555 = (char *)a1 + 404;
        *(_WORD *)&v555[8] = 1024;
        *(_DWORD *)&v555[10] = v45;
        _os_log_impl( &dword_181A5C000,  v472,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt SO_FLOW_DIVERT_TOKEN failed %{darwin.errno}d",  buf,  0x1Cu);
      }

      v473 = (os_log_s *)__nwlog_obj();
      v474 = v473;
      if ((_DWORD)v45 == 22)
      {
        if (os_log_type_enabled(v473, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)unsigned int buf = 136446466;
          v553 = "nw_socket_set_common_sockopts";
          __int16 v554 = 1024;
          *(_DWORD *)v555 = 22;
          v475 = "%{public}s setsockopt SO_FLOW_DIVERT_TOKEN failed %{darwin.errno}d";
LABEL_1131:
          _os_log_impl(&dword_181A5C000, v474, OS_LOG_TYPE_ERROR, v475, buf, 0x12u);
          uint64_t v71 = v540;
          goto LABEL_328;
        }

        goto LABEL_1205;
      }

      *(_DWORD *)unsigned int buf = 136446466;
      v553 = "nw_socket_set_common_sockopts";
      __int16 v554 = 1024;
      *(_DWORD *)v555 = v45;
      v487 = (char *)_os_log_send_and_compose_impl();
      v548[0] = OS_LOG_TYPE_ERROR;
      v547[0] = OS_LOG_TYPE_DEFAULT;
      if (v548[0] == OS_LOG_TYPE_FAULT)
      {
        v488 = (os_log_s *)__nwlog_obj();
        os_log_type_t v489 = v548[0];
        if (!os_log_type_enabled(v488, v548[0])) {
          goto LABEL_1203;
        }
        *(_DWORD *)unsigned int buf = 136446466;
        v553 = "nw_socket_set_common_sockopts";
        __int16 v554 = 1024;
        *(_DWORD *)v555 = v45;
        v490 = "%{public}s setsockopt SO_FLOW_DIVERT_TOKEN failed %{darwin.errno}d";
        goto LABEL_1202;
      }

      if (v547[0] == OS_LOG_TYPE_DEFAULT)
      {
        v488 = (os_log_s *)__nwlog_obj();
        os_log_type_t v489 = v548[0];
        if (!os_log_type_enabled(v488, v548[0])) {
          goto LABEL_1203;
        }
        *(_DWORD *)unsigned int buf = 136446466;
        v553 = "nw_socket_set_common_sockopts";
        __int16 v554 = 1024;
        *(_DWORD *)v555 = v45;
        v490 = "%{public}s setsockopt SO_FLOW_DIVERT_TOKEN failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_1202;
      }

      v495 = (char *)__nw_create_backtrace_string();
      v488 = (os_log_s *)__nwlog_obj();
      os_log_type_t v489 = v548[0];
      BOOL v496 = os_log_type_enabled(v488, v548[0]);
      if (!v495)
      {
        if (!v496) {
          goto LABEL_1203;
        }
        *(_DWORD *)unsigned int buf = 136446466;
        v553 = "nw_socket_set_common_sockopts";
        __int16 v554 = 1024;
        *(_DWORD *)v555 = v45;
        v490 = "%{public}s setsockopt SO_FLOW_DIVERT_TOKEN failed %{darwin.errno}d, no backtrace";
        goto LABEL_1202;
      }

      if (v496)
      {
        *(_DWORD *)unsigned int buf = 136446722;
        v553 = "nw_socket_set_common_sockopts";
        __int16 v554 = 1024;
        *(_DWORD *)v555 = v45;
        *(_WORD *)&v555[4] = 2082;
        *(void *)&v555[6] = v495;
        v497 = "%{public}s setsockopt SO_FLOW_DIVERT_TOKEN failed %{darwin.errno}d, dumping backtrace:%{public}s";
LABEL_1168:
        _os_log_impl(&dword_181A5C000, v488, v489, v497, buf, 0x1Cu);
        goto LABEL_1169;
      }

      goto LABEL_1169;
    }
  }

  if (path
    && nw_path_uses_interface_subtype(path, 4001)
    && setsockopt(*(_DWORD *)&a1[4].flow_id[12], 0xFFFF, 4376, &v551, 4u) < 0)
  {
    uint64_t v45 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    v498 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unsigned int buf = 136446722;
      v553 = "nw_socket_set_common_sockopts";
      __int16 v554 = 2080;
      *(void *)v555 = (char *)a1 + 404;
      *(_WORD *)&v555[8] = 1024;
      *(_DWORD *)&v555[10] = v45;
      _os_log_impl( &dword_181A5C000,  v498,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt SO_INTCOPROC_ALLOW failed %{darwin.errno}d",  buf,  0x1Cu);
    }

    v499 = (os_log_s *)__nwlog_obj();
    v474 = v499;
    if ((_DWORD)v45 == 22)
    {
      if (os_log_type_enabled(v499, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)unsigned int buf = 136446466;
        v553 = "nw_socket_set_common_sockopts";
        __int16 v554 = 1024;
        *(_DWORD *)v555 = 22;
        v475 = "%{public}s setsockopt SO_INTCOPROC_ALLOW failed %{darwin.errno}d";
        goto LABEL_1131;
      }

      goto LABEL_1205;
    }

    *(_DWORD *)unsigned int buf = 136446466;
    v553 = "nw_socket_set_common_sockopts";
    __int16 v554 = 1024;
    *(_DWORD *)v555 = v45;
    v487 = (char *)_os_log_send_and_compose_impl();
    v548[0] = OS_LOG_TYPE_ERROR;
    v547[0] = OS_LOG_TYPE_DEFAULT;
    if (v548[0] == OS_LOG_TYPE_FAULT)
    {
      v488 = (os_log_s *)__nwlog_obj();
      os_log_type_t v489 = v548[0];
      if (!os_log_type_enabled(v488, v548[0])) {
        goto LABEL_1203;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      v553 = "nw_socket_set_common_sockopts";
      __int16 v554 = 1024;
      *(_DWORD *)v555 = v45;
      v490 = "%{public}s setsockopt SO_INTCOPROC_ALLOW failed %{darwin.errno}d";
      goto LABEL_1202;
    }

    if (v547[0] == OS_LOG_TYPE_DEFAULT)
    {
      v488 = (os_log_s *)__nwlog_obj();
      os_log_type_t v489 = v548[0];
      if (!os_log_type_enabled(v488, v548[0])) {
        goto LABEL_1203;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      v553 = "nw_socket_set_common_sockopts";
      __int16 v554 = 1024;
      *(_DWORD *)v555 = v45;
      v490 = "%{public}s setsockopt SO_INTCOPROC_ALLOW failed %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_1202;
    }

    v495 = (char *)__nw_create_backtrace_string();
    v488 = (os_log_s *)__nwlog_obj();
    os_log_type_t v489 = v548[0];
    BOOL v513 = os_log_type_enabled(v488, v548[0]);
    if (!v495)
    {
      if (!v513) {
        goto LABEL_1203;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      v553 = "nw_socket_set_common_sockopts";
      __int16 v554 = 1024;
      *(_DWORD *)v555 = v45;
      v490 = "%{public}s setsockopt SO_INTCOPROC_ALLOW failed %{darwin.errno}d, no backtrace";
      goto LABEL_1202;
    }

    if (v513)
    {
      *(_DWORD *)unsigned int buf = 136446722;
      v553 = "nw_socket_set_common_sockopts";
      __int16 v554 = 1024;
      *(_DWORD *)v555 = v45;
      *(_WORD *)&v555[4] = 2082;
      *(void *)&v555[6] = v495;
      v497 = "%{public}s setsockopt SO_INTCOPROC_ALLOW failed %{darwin.errno}d, dumping backtrace:%{public}s";
      goto LABEL_1168;
    }

    goto LABEL_1169;
  }

  id v476 = nw_parameters_copy_context(v466);
  int do_not_log_trackers = nw_context_get_do_not_log_trackers(v476);
  if (v476) {
    os_release(v476);
  }
  if (do_not_log_trackers)
  {
    if ((setsockopt(*(_DWORD *)&a1[4].flow_id[12], 0xFFFF, 4405, &v551, 4u) & 0x80000000) == 0)
    {
      if ((*(_WORD *)&a1[6].flow_id[13] & 0x80) != 0) {
        goto LABEL_1240;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v478 = gconnectionLogObj;
      if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_1240;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      v553 = "nw_socket_set_common_sockopts";
      __int16 v554 = 2082;
      *(void *)v555 = (char *)a1 + 404;
      v479 = "%{public}s %{public}s set SO_MARK_DOMAIN_INFO_SILENT on";
      goto LABEL_1232;
    }

    int v493 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (v493 == 22 || v493 == 42)
    {
      v494 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v494, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)unsigned int buf = 136446466;
        v553 = "nw_socket_set_common_sockopts";
        __int16 v554 = 1024;
        *(_DWORD *)v555 = v493;
        v479 = "%{public}s setsockopt SO_MARK_DOMAIN_INFO_SILENT failed %{darwin.errno}d";
LABEL_1238:
        v524 = v494;
        os_log_type_t v525 = OS_LOG_TYPE_ERROR;
        uint32_t v526 = 18;
        goto LABEL_1239;
      }

      goto LABEL_1240;
    }

    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446466;
    v553 = "nw_socket_set_common_sockopts";
    __int16 v554 = 1024;
    *(_DWORD *)v555 = v493;
    v505 = (char *)_os_log_send_and_compose_impl();
    v548[0] = OS_LOG_TYPE_ERROR;
    v547[0] = OS_LOG_TYPE_DEFAULT;
    if ((__nwlog_fault(v505, v548, v547) & 1) == 0) {
      goto LABEL_1256;
    }
    if (v548[0] == OS_LOG_TYPE_FAULT)
    {
      v506 = (os_log_s *)__nwlog_obj();
      os_log_type_t v507 = v548[0];
      if (!os_log_type_enabled(v506, v548[0])) {
        goto LABEL_1256;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      v553 = "nw_socket_set_common_sockopts";
      __int16 v554 = 1024;
      *(_DWORD *)v555 = v493;
      v508 = "%{public}s setsockopt SO_MARK_DOMAIN_INFO_SILENT failed %{darwin.errno}d";
      goto LABEL_1255;
    }

    if (v547[0] == OS_LOG_TYPE_DEFAULT)
    {
      v506 = (os_log_s *)__nwlog_obj();
      os_log_type_t v507 = v548[0];
      if (!os_log_type_enabled(v506, v548[0])) {
        goto LABEL_1256;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      v553 = "nw_socket_set_common_sockopts";
      __int16 v554 = 1024;
      *(_DWORD *)v555 = v493;
      v508 = "%{public}s setsockopt SO_MARK_DOMAIN_INFO_SILENT failed %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_1255;
    }

    v518 = (char *)__nw_create_backtrace_string();
    v506 = (os_log_s *)__nwlog_obj();
    os_log_type_t v507 = v548[0];
    BOOL v519 = os_log_type_enabled(v506, v548[0]);
    if (!v518)
    {
      if (!v519) {
        goto LABEL_1256;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      v553 = "nw_socket_set_common_sockopts";
      __int16 v554 = 1024;
      *(_DWORD *)v555 = v493;
      v508 = "%{public}s setsockopt SO_MARK_DOMAIN_INFO_SILENT failed %{darwin.errno}d, no backtrace";
      goto LABEL_1255;
    }

    if (v519)
    {
      *(_DWORD *)unsigned int buf = 136446722;
      v553 = "nw_socket_set_common_sockopts";
      __int16 v554 = 1024;
      *(_DWORD *)v555 = v493;
      *(_WORD *)&v555[4] = 2082;
      *(void *)&v555[6] = v518;
      _os_log_impl( &dword_181A5C000,  v506,  v507,  "%{public}s setsockopt SO_MARK_DOMAIN_INFO_SILENT failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
    }

    free(v518);
    goto LABEL_1256;
  }

  if (setsockopt(*(_DWORD *)&a1[4].flow_id[12], 0xFFFF, 4389, &v551, 4u) < 0)
  {
    int v502 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (v502 == 22 || v502 == 42)
    {
      v503 = (os_log_s *)__nwlog_obj();
      if (!os_log_type_enabled(v503, OS_LOG_TYPE_ERROR)) {
        goto LABEL_1225;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      v553 = "nw_socket_set_common_sockopts";
      __int16 v554 = 1024;
      *(_DWORD *)v555 = v502;
      v483 = "%{public}s setsockopt SO_MARK_KNOWN_TRACKER failed %{darwin.errno}d";
      v484 = v503;
      os_log_type_t v485 = OS_LOG_TYPE_ERROR;
      uint32_t v486 = 18;
      goto LABEL_1141;
    }

    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446466;
    v553 = "nw_socket_set_common_sockopts";
    __int16 v554 = 1024;
    *(_DWORD *)v555 = v502;
    v514 = (char *)_os_log_send_and_compose_impl();
    v548[0] = OS_LOG_TYPE_ERROR;
    v547[0] = OS_LOG_TYPE_DEFAULT;
    if ((__nwlog_fault(v514, v548, v547) & 1) == 0) {
      goto LABEL_1223;
    }
    if (v548[0] == OS_LOG_TYPE_FAULT)
    {
      v515 = (os_log_s *)__nwlog_obj();
      os_log_type_t v516 = v548[0];
      if (!os_log_type_enabled(v515, v548[0])) {
        goto LABEL_1223;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      v553 = "nw_socket_set_common_sockopts";
      __int16 v554 = 1024;
      *(_DWORD *)v555 = v502;
      v517 = "%{public}s setsockopt SO_MARK_KNOWN_TRACKER failed %{darwin.errno}d";
    }

    else if (v547[0])
    {
      v522 = (char *)__nw_create_backtrace_string();
      v515 = (os_log_s *)__nwlog_obj();
      os_log_type_t v516 = v548[0];
      BOOL v523 = os_log_type_enabled(v515, v548[0]);
      if (v522)
      {
        if (v523)
        {
          *(_DWORD *)unsigned int buf = 136446722;
          v553 = "nw_socket_set_common_sockopts";
          __int16 v554 = 1024;
          *(_DWORD *)v555 = v502;
          *(_WORD *)&v555[4] = 2082;
          *(void *)&v555[6] = v522;
          _os_log_impl( &dword_181A5C000,  v515,  v516,  "%{public}s setsockopt SO_MARK_KNOWN_TRACKER failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
        }

        free(v522);
        goto LABEL_1223;
      }

      if (!v523)
      {
LABEL_1223:
        if (v514) {
          free(v514);
        }
        goto LABEL_1225;
      }

      *(_DWORD *)unsigned int buf = 136446466;
      v553 = "nw_socket_set_common_sockopts";
      __int16 v554 = 1024;
      *(_DWORD *)v555 = v502;
      v517 = "%{public}s setsockopt SO_MARK_KNOWN_TRACKER failed %{darwin.errno}d, no backtrace";
    }

    else
    {
      v515 = (os_log_s *)__nwlog_obj();
      os_log_type_t v516 = v548[0];
      if (!os_log_type_enabled(v515, v548[0])) {
        goto LABEL_1223;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      v553 = "nw_socket_set_common_sockopts";
      __int16 v554 = 1024;
      *(_DWORD *)v555 = v502;
      v517 = "%{public}s setsockopt SO_MARK_KNOWN_TRACKER failed %{darwin.errno}d, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v515, v516, v517, buf, 0x12u);
    goto LABEL_1223;
  }

  if ((*(_WORD *)&a1[6].flow_id[13] & 0x80) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v482 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)unsigned int buf = 136446466;
      v553 = "nw_socket_set_common_sockopts";
      __int16 v554 = 2082;
      *(void *)v555 = v541 + 308;
      v483 = "%{public}s %{public}s set SO_MARK_KNOWN_TRACKER on";
      v484 = (os_log_s *)v482;
      os_log_type_t v485 = OS_LOG_TYPE_DEBUG;
      uint32_t v486 = 22;
LABEL_1141:
      _os_log_impl(&dword_181A5C000, v484, v485, v483, buf, v486);
    }
  }

LABEL_1225:
  if (nw_parameters_get_attribution((nw_parameters_t)v466) != nw_parameters_attribution_user) {
    goto LABEL_1240;
  }
  if ((setsockopt(*(_DWORD *)&a1[4].flow_id[12], 0xFFFF, 4390, &v551, 4u) & 0x80000000) == 0)
  {
    if ((*(_WORD *)(v541 + 301) & 0x80) != 0) {
      goto LABEL_1240;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    uint64_t v478 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_1240;
    }
    *(_DWORD *)unsigned int buf = 136446466;
    v553 = "nw_socket_set_common_sockopts";
    __int16 v554 = 2082;
    *(void *)v555 = v541 + 308;
    v479 = "%{public}s %{public}s set SO_MARK_KNOWN_TRACKER_NON_APP_INITIATED on";
LABEL_1232:
    v524 = (os_log_s *)v478;
    os_log_type_t v525 = OS_LOG_TYPE_DEBUG;
    uint32_t v526 = 22;
LABEL_1239:
    _os_log_impl(&dword_181A5C000, v524, v525, v479, buf, v526);
    goto LABEL_1240;
  }

  int v527 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  if (v527 != 22 && v527 != 42 && v527 != 100)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446466;
    v553 = "nw_socket_set_common_sockopts";
    __int16 v554 = 1024;
    *(_DWORD *)v555 = v527;
    v505 = (char *)_os_log_send_and_compose_impl();
    v548[0] = OS_LOG_TYPE_ERROR;
    v547[0] = OS_LOG_TYPE_DEFAULT;
    if ((__nwlog_fault(v505, v548, v547) & 1) == 0) {
      goto LABEL_1256;
    }
    if (v548[0] == OS_LOG_TYPE_FAULT)
    {
      v506 = (os_log_s *)__nwlog_obj();
      os_log_type_t v507 = v548[0];
      if (!os_log_type_enabled(v506, v548[0])) {
        goto LABEL_1256;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      v553 = "nw_socket_set_common_sockopts";
      __int16 v554 = 1024;
      *(_DWORD *)v555 = v527;
      v508 = "%{public}s setsockopt SO_MARK_KNOWN_TRACKER_NON_APP_INITIATED failed %{darwin.errno}d";
      goto LABEL_1255;
    }

    if (v547[0] == OS_LOG_TYPE_DEFAULT)
    {
      v506 = (os_log_s *)__nwlog_obj();
      os_log_type_t v507 = v548[0];
      if (!os_log_type_enabled(v506, v548[0])) {
        goto LABEL_1256;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      v553 = "nw_socket_set_common_sockopts";
      __int16 v554 = 1024;
      *(_DWORD *)v555 = v527;
      v508 = "%{public}s setsockopt SO_MARK_KNOWN_TRACKER_NON_APP_INITIATED failed %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_1255;
    }

    v528 = (char *)__nw_create_backtrace_string();
    v506 = (os_log_s *)__nwlog_obj();
    os_log_type_t v507 = v548[0];
    BOOL v529 = os_log_type_enabled(v506, v548[0]);
    if (v528)
    {
      if (v529)
      {
        *(_DWORD *)unsigned int buf = 136446722;
        v553 = "nw_socket_set_common_sockopts";
        __int16 v554 = 1024;
        *(_DWORD *)v555 = v527;
        *(_WORD *)&v555[4] = 2082;
        *(void *)&v555[6] = v528;
        _os_log_impl( &dword_181A5C000,  v506,  v507,  "%{public}s setsockopt SO_MARK_KNOWN_TRACKER_NON_APP_INITIATED failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
      }

      free(v528);
      if (!v505) {
        goto LABEL_1240;
      }
      goto LABEL_1257;
    }

    if (v529)
    {
      *(_DWORD *)unsigned int buf = 136446466;
      v553 = "nw_socket_set_common_sockopts";
      __int16 v554 = 1024;
      *(_DWORD *)v555 = v527;
      v508 = "%{public}s setsockopt SO_MARK_KNOWN_TRACKER_NON_APP_INITIATED failed %{darwin.errno}d, no backtrace";
LABEL_1255:
      _os_log_impl(&dword_181A5C000, v506, v507, v508, buf, 0x12u);
    }

LABEL_1240:
  nw_protocol_socket_set_necp_attributes(v541, v466, (const char **)v72);
  return 1LL;
}

void sub_182418024(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_socket_set_bidirectional_tcp_sockopts(uint64_t a1, void *a2)
{
  uint64_t v110 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    os_log_type_t v107 = "nw_socket_set_bidirectional_tcp_sockopts";
    int v92 = (char *)_os_log_send_and_compose_impl();
    v105[0] = OS_LOG_TYPE_ERROR;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (v105[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v93 = (os_log_s *)__nwlog_obj();
      os_log_type_t v94 = v105[0];
      if (!os_log_type_enabled(v93, v105[0])) {
        goto LABEL_322;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      os_log_type_t v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      uint64_t v95 = "%{public}s called with null socket_handler";
    }

    else if (type[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v93 = (os_log_s *)__nwlog_obj();
      os_log_type_t v94 = v105[0];
      BOOL v97 = os_log_type_enabled(v93, v105[0]);
      if (backtrace_string)
      {
        if (v97)
        {
          *(_DWORD *)unsigned int buf = 136446466;
          os_log_type_t v107 = "nw_socket_set_bidirectional_tcp_sockopts";
          __int16 v108 = 2082;
          *(void *)__int128 v109 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v93,  v94,  "%{public}s called with null socket_handler, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_322;
      }

      if (!v97)
      {
LABEL_322:
        if (v92) {
          free(v92);
        }
        return 0LL;
      }

      *(_DWORD *)unsigned int buf = 136446210;
      os_log_type_t v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      uint64_t v95 = "%{public}s called with null socket_handler, no backtrace";
    }

    else
    {
      uint64_t v93 = (os_log_s *)__nwlog_obj();
      os_log_type_t v94 = v105[0];
      if (!os_log_type_enabled(v93, v105[0])) {
        goto LABEL_322;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      os_log_type_t v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      uint64_t v95 = "%{public}s called with null socket_handler, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v93, v94, v95, buf, 0xCu);
    goto LABEL_322;
  }

  if (*(_BYTE *)(a1 + 304) == 1)
  {
    if ((*(_WORD *)(a1 + 301) & 0x80) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
      }
      uint64_t v3 = (os_log_s *)gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)unsigned int buf = 136446466;
        os_log_type_t v107 = "nw_socket_set_bidirectional_tcp_sockopts";
        __int16 v108 = 2082;
        *(void *)__int128 v109 = a1 + 308;
        _os_log_impl( &dword_181A5C000,  v3,  OS_LOG_TYPE_DEBUG,  "%{public}s %{public}s Ignoring TCP options for UNIX socket",  buf,  0x16u);
        return 1LL;
      }
    }

    return 1LL;
  }

  *(_DWORD *)os_log_type_t v105 = 1;
  if (nw_tcp_options_get_reduce_buffering(a2)) {
    __int16 v6 = 0x2000;
  }
  else {
    __int16 v6 = 0;
  }
  int v7 = *(_WORD *)(a1 + 301) & 0xDFFF | (*(unsigned __int8 *)(a1 + 303) << 16);
  *(_WORD *)(a1 + 301) = *(_WORD *)(a1 + 301) & 0xDFFF | v6;
  *(_BYTE *)(a1 + 303) = BYTE2(v7);
  if (nw_tcp_options_get_no_delay(a2)) {
    nw_socket_set_no_delay(a1, 1);
  }
  if (nw_tcp_options_get_no_push(a2)) {
    nw_socket_set_no_push(a1, 1);
  }
  if (nw_tcp_options_get_disable_ack_stretching(a2) && setsockopt(*(_DWORD *)(a1 + 172), 6, 259, v105, 4u))
  {
    int v8 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
    }
    char v9 = (os_log_s *)gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unsigned int buf = 136446722;
      os_log_type_t v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 2080;
      *(void *)__int128 v109 = a1 + 308;
      *(_WORD *)&v109[8] = 1024;
      *(_DWORD *)&v109[10] = v8;
      _os_log_impl( &dword_181A5C000,  v9,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt TCP_SENDMOREACKS failed %{darwin.errno}d",  buf,  0x1Cu);
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v10 = (os_log_s *)gLogObj;
    if (v8 == 22)
    {
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)unsigned int buf = 136446466;
        os_log_type_t v107 = "nw_socket_set_bidirectional_tcp_sockopts";
        __int16 v108 = 1024;
        *(_DWORD *)__int128 v109 = 22;
        _os_log_impl( &dword_181A5C000,  v10,  OS_LOG_TYPE_ERROR,  "%{public}s setsockopt TCP_SENDMOREACKS failed %{darwin.errno}d",  buf,  0x12u);
      }

      goto LABEL_40;
    }

    *(_DWORD *)unsigned int buf = 136446466;
    os_log_type_t v107 = "nw_socket_set_bidirectional_tcp_sockopts";
    __int16 v108 = 1024;
    *(_DWORD *)__int128 v109 = v8;
    BOOL v11 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v103[0] = OS_LOG_TYPE_DEFAULT;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v12 = (os_log_s *)gLogObj;
      os_log_type_t v13 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_38;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      os_log_type_t v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 1024;
      *(_DWORD *)__int128 v109 = v8;
      uint64_t v14 = "%{public}s setsockopt TCP_SENDMOREACKS failed %{darwin.errno}d";
    }

    else if (v103[0])
    {
      os_log_type_t v15 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v12 = (os_log_s *)gLogObj;
      os_log_type_t v13 = type[0];
      BOOL v16 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
      if (v15)
      {
        if (v16)
        {
          *(_DWORD *)unsigned int buf = 136446722;
          os_log_type_t v107 = "nw_socket_set_bidirectional_tcp_sockopts";
          __int16 v108 = 1024;
          *(_DWORD *)__int128 v109 = v8;
          *(_WORD *)&v109[4] = 2082;
          *(void *)&v109[6] = v15;
          _os_log_impl( &dword_181A5C000,  v12,  v13,  "%{public}s setsockopt TCP_SENDMOREACKS failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
        }

        free(v15);
        goto LABEL_38;
      }

      if (!v16)
      {
LABEL_38:
        if (v11) {
          free(v11);
        }
        goto LABEL_40;
      }

      *(_DWORD *)unsigned int buf = 136446466;
      os_log_type_t v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 1024;
      *(_DWORD *)__int128 v109 = v8;
      uint64_t v14 = "%{public}s setsockopt TCP_SENDMOREACKS failed %{darwin.errno}d, no backtrace";
    }

    else
    {
      uint64_t v12 = (os_log_s *)__nwlog_obj();
      os_log_type_t v13 = type[0];
      if (!os_log_type_enabled(v12, type[0])) {
        goto LABEL_38;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      os_log_type_t v107 = "nw_socket_set_bidirectional_tcp_sockopts";
      __int16 v108 = 1024;
      *(_DWORD *)__int128 v109 = v8;
      uint64_t v14 = "%{public}s setsockopt TCP_SENDMOREACKS failed %{darwin.errno}d, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v12, v13, v14, buf, 0x12u);
    goto LABEL_38;
  }

uint64_t nw_socket_set_no_delay(uint64_t a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (*(_DWORD *)(a1 + 176) != 2) {
    return 22LL;
  }
  int v15 = a2;
  if (!setsockopt(*(_DWORD *)(a1 + 172), 6, 1, &v15, 4u)) {
    return 0LL;
  }
  uint64_t v3 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
  }
  uint64_t v4 = (os_log_s *)gconnectionLogObj;
  if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)unsigned int buf = 136446722;
    int v17 = "nw_socket_set_no_delay";
    __int16 v18 = 2080;
    *(void *)char v19 = a1 + 308;
    *(_WORD *)&v19[8] = 1024;
    *(_DWORD *)&v19[10] = v3;
    _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt TCP_NODELAY failed %{darwin.errno}d",  buf,  0x1Cu);
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v5 = (os_log_s *)gLogObj;
  if ((_DWORD)v3 == 22)
  {
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unsigned int buf = 136446466;
      int v17 = "nw_socket_set_no_delay";
      __int16 v18 = 1024;
      *(_DWORD *)char v19 = 22;
      _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_ERROR,  "%{public}s setsockopt TCP_NODELAY failed %{darwin.errno}d",  buf,  0x12u);
    }

    return v3;
  }

  *(_DWORD *)unsigned int buf = 136446466;
  int v17 = "nw_socket_set_no_delay";
  __int16 v18 = 1024;
  *(_DWORD *)char v19 = v3;
  __int16 v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v7 = (os_log_s *)gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_26;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      int v17 = "nw_socket_set_no_delay";
      __int16 v18 = 1024;
      *(_DWORD *)char v19 = v3;
      char v9 = "%{public}s setsockopt TCP_NODELAY failed %{darwin.errno}d";
      goto LABEL_25;
    }

    if (!v13)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v7 = (os_log_s *)gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_26;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      int v17 = "nw_socket_set_no_delay";
      __int16 v18 = 1024;
      *(_DWORD *)char v19 = v3;
      char v9 = "%{public}s setsockopt TCP_NODELAY failed %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_25;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v7 = (os_log_s *)gLogObj;
    os_log_type_t v8 = type;
    BOOL v11 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)unsigned int buf = 136446722;
        int v17 = "nw_socket_set_no_delay";
        __int16 v18 = 1024;
        *(_DWORD *)char v19 = v3;
        *(_WORD *)&v19[4] = 2082;
        *(void *)&v19[6] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s setsockopt TCP_NODELAY failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
      }

      free(backtrace_string);
      goto LABEL_26;
    }

    if (v11)
    {
      *(_DWORD *)unsigned int buf = 136446466;
      int v17 = "nw_socket_set_no_delay";
      __int16 v18 = 1024;
      *(_DWORD *)char v19 = v3;
      char v9 = "%{public}s setsockopt TCP_NODELAY failed %{darwin.errno}d, no backtrace";
LABEL_25:
      _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0x12u);
    }
  }

uint64_t nw_socket_set_no_push(uint64_t a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (*(_DWORD *)(a1 + 176) != 2) {
    return 22LL;
  }
  int v15 = a2;
  if (!setsockopt(*(_DWORD *)(a1 + 172), 6, 4, &v15, 4u)) {
    return 0LL;
  }
  uint64_t v3 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
  }
  uint64_t v4 = (os_log_s *)gconnectionLogObj;
  if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)unsigned int buf = 136446722;
    int v17 = "nw_socket_set_no_push";
    __int16 v18 = 2080;
    *(void *)char v19 = a1 + 308;
    *(_WORD *)&v19[8] = 1024;
    *(_DWORD *)&v19[10] = v3;
    _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt TCP_NOPUSH failed %{darwin.errno}d",  buf,  0x1Cu);
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v5 = (os_log_s *)gLogObj;
  if ((_DWORD)v3 == 22)
  {
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unsigned int buf = 136446466;
      int v17 = "nw_socket_set_no_push";
      __int16 v18 = 1024;
      *(_DWORD *)char v19 = 22;
      _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_ERROR,  "%{public}s setsockopt TCP_NOPUSH failed %{darwin.errno}d",  buf,  0x12u);
    }

    return v3;
  }

  *(_DWORD *)unsigned int buf = 136446466;
  int v17 = "nw_socket_set_no_push";
  __int16 v18 = 1024;
  *(_DWORD *)char v19 = v3;
  __int16 v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v7 = (os_log_s *)gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_26;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      int v17 = "nw_socket_set_no_push";
      __int16 v18 = 1024;
      *(_DWORD *)char v19 = v3;
      char v9 = "%{public}s setsockopt TCP_NOPUSH failed %{darwin.errno}d";
      goto LABEL_25;
    }

    if (!v13)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v7 = (os_log_s *)gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_26;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      int v17 = "nw_socket_set_no_push";
      __int16 v18 = 1024;
      *(_DWORD *)char v19 = v3;
      char v9 = "%{public}s setsockopt TCP_NOPUSH failed %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_25;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v7 = (os_log_s *)gLogObj;
    os_log_type_t v8 = type;
    BOOL v11 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)unsigned int buf = 136446722;
        int v17 = "nw_socket_set_no_push";
        __int16 v18 = 1024;
        *(_DWORD *)char v19 = v3;
        *(_WORD *)&v19[4] = 2082;
        *(void *)&v19[6] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s setsockopt TCP_NOPUSH failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
      }

      free(backtrace_string);
      goto LABEL_26;
    }

    if (v11)
    {
      *(_DWORD *)unsigned int buf = 136446466;
      int v17 = "nw_socket_set_no_push";
      __int16 v18 = 1024;
      *(_DWORD *)char v19 = v3;
      char v9 = "%{public}s setsockopt TCP_NOPUSH failed %{darwin.errno}d, no backtrace";
LABEL_25:
      _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0x12u);
    }
  }

uint64_t nw_socket_set_traffic_class(uint64_t a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  int v15 = a2;
  if (*(_DWORD *)(a1 + 168) == a2) {
    return 0LL;
  }
  if (!setsockopt(*(_DWORD *)(a1 + 172), 0xFFFF, 4230, &v15, 4u))
  {
    uint64_t v2 = 0LL;
    *(_DWORD *)(a1 + 16_Block_object_dispose(va, 8) = v15;
    return v2;
  }

  uint64_t v2 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
  }
  uint64_t v4 = (os_log_s *)gconnectionLogObj;
  if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)unsigned int buf = 136446722;
    int v17 = "nw_socket_set_traffic_class";
    __int16 v18 = 2080;
    *(void *)char v19 = a1 + 308;
    *(_WORD *)&v19[8] = 1024;
    *(_DWORD *)&v19[10] = v2;
    _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_ERROR,  "%{public}s %s setsockopt SO_TRAFFIC_CLASS failed %{darwin.errno}d",  buf,  0x1Cu);
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v5 = (os_log_s *)gLogObj;
  if ((_DWORD)v2 == 22)
  {
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unsigned int buf = 136446466;
      int v17 = "nw_socket_set_traffic_class";
      __int16 v18 = 1024;
      *(_DWORD *)char v19 = 22;
      _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_ERROR,  "%{public}s setsockopt SO_TRAFFIC_CLASS failed %{darwin.errno}d",  buf,  0x12u);
    }

    return v2;
  }

  *(_DWORD *)unsigned int buf = 136446466;
  int v17 = "nw_socket_set_traffic_class";
  __int16 v18 = 1024;
  *(_DWORD *)char v19 = v2;
  __int16 v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v7 = (os_log_s *)gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_26;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      int v17 = "nw_socket_set_traffic_class";
      __int16 v18 = 1024;
      *(_DWORD *)char v19 = v2;
      char v9 = "%{public}s setsockopt SO_TRAFFIC_CLASS failed %{darwin.errno}d";
      goto LABEL_25;
    }

    if (!v13)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v7 = (os_log_s *)gLogObj;
      os_log_type_t v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_26;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      int v17 = "nw_socket_set_traffic_class";
      __int16 v18 = 1024;
      *(_DWORD *)char v19 = v2;
      char v9 = "%{public}s setsockopt SO_TRAFFIC_CLASS failed %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_25;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v7 = (os_log_s *)gLogObj;
    os_log_type_t v8 = type;
    BOOL v11 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)unsigned int buf = 136446722;
        int v17 = "nw_socket_set_traffic_class";
        __int16 v18 = 1024;
        *(_DWORD *)char v19 = v2;
        *(_WORD *)&v19[4] = 2082;
        *(void *)&v19[6] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s setsockopt SO_TRAFFIC_CLASS failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
      }

      free(backtrace_string);
      goto LABEL_26;
    }

    if (v11)
    {
      *(_DWORD *)unsigned int buf = 136446466;
      int v17 = "nw_socket_set_traffic_class";
      __int16 v18 = 1024;
      *(_DWORD *)char v19 = v2;
      char v9 = "%{public}s setsockopt SO_TRAFFIC_CLASS failed %{darwin.errno}d, no backtrace";
LABEL_25:
      _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0x12u);
    }
  }

void nw_protocol_socket_set_necp_attributes(uint64_t a1, NWConcrete_nw_parameters *a2, const char **a3)
{
  uint64_t v187 = *MEMORY[0x1895F89C0];
  BOOL domain_for_policy = nw_endpoint_get_domain_for_policy(a3);
  int v7 = (const char *)domain_for_policy;
  if (domain_for_policy) {
    socklen_t v8 = strlen((const char *)domain_for_policy) + 6;
  }
  else {
    socklen_t v8 = 0;
  }
  account_id = (const char *)nw_parameters_get_account_id(a2);
  os_log_type_t v10 = account_id;
  if (account_id) {
    v8 += strlen(account_id) + 6;
  }
  if (a3)
  {
    BOOL v11 = a3[12];
    if (v11)
    {
      char v12 = 0;
      v8 += strlen(a3[12]) + 6;
      goto LABEL_11;
    }
  }

  else
  {
    BOOL v11 = 0LL;
  }

  char v12 = 1;
LABEL_11:
  attribution_context = (const char *)nw_parameters_get_attribution_context(a2);
  uint64_t v14 = attribution_context;
  if (attribution_context) {
    v8 += strlen(attribution_context) + 6;
  }
  if (a3)
  {
    int v15 = a3[11];
    if (v15)
    {
      char v173 = 0;
      int v16 = v8 + strlen(a3[11]);
      socklen_t v8 = v16 + 6;
      if (v16 == -6) {
        return;
      }
      goto LABEL_19;
    }
  }

  else
  {
    int v15 = 0LL;
  }

  char v173 = 1;
  if (!v8) {
    return;
  }
LABEL_19:
  BOOL v170 = a2;
  uint64_t v171 = a1;
  uint64_t v167 = a3;
  unint64_t v17 = v8;
  __int16 v18 = (void *)nw_calloc_type<unsigned char>(v8);
  __int16 v174 = v18;
  id v175 = (char *)v18 + v8;
  char v19 = (char *)v18;
  __int128 v172 = v15;
  if (!v7) {
    goto LABEL_42;
  }
  int v20 = strlen(v7);
  if (v18)
  {
    socklen_t v168 = v8;
    int v21 = v14;
    char v22 = v12;
    size_t v23 = (v20 + 1);
    if (v23 + 5 <= v17)
    {
      *(_BYTE *)__int16 v18 = 7;
      *(_DWORD *)((char *)v18 + 1) = v23;
      if (v20 != -1) {
        memcpy((char *)v18 + 5, v7, v23);
      }
      char v19 = (char *)v18 + v23 + 5;
      goto LABEL_41;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)unsigned int buf = 136447490;
    __int128 v179 = "nw_necp_append_tlv";
    __int16 v180 = 2048;
    *(void *)__int16 v181 = v18;
    *(_WORD *)&v181[8] = 2048;
    *(void *)__int128 v182 = v23 + 5;
    *(_WORD *)&v182[8] = 2048;
    *(void *)&v182[10] = v175;
    *(_WORD *)&v182[18] = 1024;
    *(_DWORD *)&v182[20] = 7;
    *(_WORD *)&v182[24] = 1024;
    *(_DWORD *)&v182[26] = v23;
    BOOL v24 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v176 = 0;
    if (__nwlog_fault(v24, &type, &v176))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v25 = gLogObj;
        os_log_type_t v26 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)unsigned int buf = 136447490;
          __int128 v179 = "nw_necp_append_tlv";
          __int16 v180 = 2048;
          *(void *)__int16 v181 = v174;
          *(_WORD *)&v181[8] = 2048;
          *(void *)__int128 v182 = v23 + 5;
          *(_WORD *)&v182[8] = 2048;
          *(void *)&v182[10] = v175;
          *(_WORD *)&v182[18] = 1024;
          *(_DWORD *)&v182[20] = 7;
          *(_WORD *)&v182[24] = 1024;
          *(_DWORD *)&v182[26] = v23;
          uint64_t v27 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u";
LABEL_36:
          int v32 = (os_log_s *)v25;
          os_log_type_t v33 = v26;
LABEL_37:
          _os_log_impl(&dword_181A5C000, v32, v33, v27, buf, 0x36u);
        }
      }

      else if (v176)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v29 = (os_log_s *)gLogObj;
        os_log_type_t v30 = type;
        BOOL v31 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (backtrace_string)
        {
          if (v31)
          {
            *(_DWORD *)unsigned int buf = 136447746;
            __int128 v179 = "nw_necp_append_tlv";
            __int16 v180 = 2048;
            *(void *)__int16 v181 = v174;
            *(_WORD *)&v181[8] = 2048;
            *(void *)__int128 v182 = v23 + 5;
            *(_WORD *)&v182[8] = 2048;
            *(void *)&v182[10] = v175;
            *(_WORD *)&v182[18] = 1024;
            *(_DWORD *)&v182[20] = 7;
            *(_WORD *)&v182[24] = 1024;
            *(_DWORD *)&v182[26] = v23;
            *(_WORD *)&v182[30] = 2082;
            *(void *)&v182[32] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v29,  v30,  "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s",  buf,  0x40u);
          }

          free(backtrace_string);
          goto LABEL_38;
        }

        if (v31)
        {
          *(_DWORD *)unsigned int buf = 136447490;
          __int128 v179 = "nw_necp_append_tlv";
          __int16 v180 = 2048;
          *(void *)__int16 v181 = v174;
          *(_WORD *)&v181[8] = 2048;
          *(void *)__int128 v182 = v23 + 5;
          *(_WORD *)&v182[8] = 2048;
          *(void *)&v182[10] = v175;
          *(_WORD *)&v182[18] = 1024;
          *(_DWORD *)&v182[20] = 7;
          *(_WORD *)&v182[24] = 1024;
          *(_DWORD *)&v182[26] = v23;
          uint64_t v27 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace";
          int v32 = v29;
          os_log_type_t v33 = v30;
          goto LABEL_37;
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v25 = gLogObj;
        os_log_type_t v26 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)unsigned int buf = 136447490;
          __int128 v179 = "nw_necp_append_tlv";
          __int16 v180 = 2048;
          *(void *)__int16 v181 = v174;
          *(_WORD *)&v181[8] = 2048;
          *(void *)__int128 v182 = v23 + 5;
          *(_WORD *)&v182[8] = 2048;
          *(void *)&v182[10] = v175;
          *(_WORD *)&v182[18] = 1024;
          *(_DWORD *)&v182[20] = 7;
          *(_WORD *)&v182[24] = 1024;
          *(_DWORD *)&v182[26] = v23;
          uint64_t v27 = "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded";
          goto LABEL_36;
        }
      }
    }

void nw_socket_release_frame_array(nw_frame_array_s *a1)
{
  while (1)
  {
    tqh_first = a1->tqh_first;
    if (!a1->tqh_first) {
      break;
    }
    uint64_t v3 = *((void *)tqh_first + 2);
    uint64_t v4 = (nw_frame **)*((void *)tqh_first + 3);
    if (v3)
    {
      *(void *)(v3 + 24) = v4;
      uint64_t v4 = (nw_frame **)*((void *)tqh_first + 3);
    }

    else
    {
      a1->tqh_last = v4;
    }

    *uint64_t v4 = (nw_frame *)v3;
    *((void *)tqh_first + 2) = 0LL;
    *((void *)tqh_first + 3) = 0LL;
    else {
      nw_frame_free_buffer((uint64_t)tqh_first);
    }
    nw_frame_reset((uint64_t)tqh_first, 0LL, 0, 0LL, 0LL);
    os_release(tqh_first);
  }

void ___ZL28nw_socket_setup_input_eventsP9nw_socket_block_invoke(uint64_t a1)
{
}

void ___ZL28nw_socket_setup_input_eventsP9nw_socket_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8LL);
  char v3 = *(_BYTE *)(v2 + 48);
  if ((v3 & 1) != 0)
  {
    uint64_t v4 = *(void **)(v2 + 40);
    if (v4)
    {
      os_release(v4);
      char v3 = *(_BYTE *)(v2 + 48);
    }
  }

  *(void *)(v2 + 40) = 0LL;
  *(_BYTE *)(v2 + 4_Block_object_dispose(va, 8) = v3 | 1;
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  if (v5)
  {
    if (*(_UNKNOWN **)(v5 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v6 = *(void *)(v5 + 88);
      if (v6)
      {
        uint64_t v7 = v6 - 1;
        *(void *)(v5 + 8_Block_object_dispose(va, 8) = v7;
        if (!v7)
        {
          socklen_t v8 = *(void (***)(void))(v5 + 64);
          if (v8)
          {
            *(void *)(v5 + 64) = 0LL;
            v8[2](v8);
            _Block_release(v8);
          }

          if ((*(_BYTE *)(v5 + 72) & 1) != 0)
          {
            char v9 = *(const void **)(v5 + 64);
            if (v9) {
              _Block_release(v9);
            }
          }

          free((void *)v5);
        }
      }
    }
  }

void ___ZL29nw_socket_setup_output_eventsP9nw_socket_block_invoke(uint64_t a1)
{
}

void ___ZL29nw_socket_setup_output_eventsP9nw_socket_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8LL);
  char v3 = *(_BYTE *)(v2 + 48);
  if ((v3 & 1) != 0)
  {
    uint64_t v4 = *(void **)(v2 + 40);
    if (v4)
    {
      os_release(v4);
      char v3 = *(_BYTE *)(v2 + 48);
    }
  }

  *(void *)(v2 + 40) = 0LL;
  *(_BYTE *)(v2 + 4_Block_object_dispose(va, 8) = v3 | 1;
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  if (v5)
  {
    if (*(_UNKNOWN **)(v5 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v6 = *(void *)(v5 + 88);
      if (v6)
      {
        uint64_t v7 = v6 - 1;
        *(void *)(v5 + 8_Block_object_dispose(va, 8) = v7;
        if (!v7)
        {
          socklen_t v8 = *(void (***)(void))(v5 + 64);
          if (v8)
          {
            *(void *)(v5 + 64) = 0LL;
            v8[2](v8);
            _Block_release(v8);
          }

          if ((*(_BYTE *)(v5 + 72) & 1) != 0)
          {
            char v9 = *(const void **)(v5 + 64);
            if (v9) {
              _Block_release(v9);
            }
          }

          free((void *)v5);
        }
      }
    }
  }

BOOL ___ZL17nw_socket_connectP11nw_protocolS0__block_invoke(uint64_t a1, int a2)
{
  return *(_DWORD *)(*(void *)(a1 + 32) + 172LL) == a2;
}

uint64_t nw_socket_allocate_output_frame(uint64_t a1, size_t __count)
{
  unsigned int v2 = __count;
  uint64_t v29 = *MEMORY[0x1895F89C0];
  uint64_t external = *(void *)(a1 + 200);
  if (external)
  {
    uint64_t v5 = *(void *)(external + 16);
    uint64_t v6 = *(void **)(external + 24);
    if (v5)
    {
      *(void *)(v5 + 24) = v6;
      uint64_t v6 = *(void **)(external + 24);
    }

    else
    {
      *(void *)(a1 + 20_Block_object_dispose(va, 8) = v6;
    }

    void *v6 = v5;
    *(void *)(external + 16) = 0LL;
    *(void *)(external + 24) = 0LL;
    int v8 = nw_frame_uses_external_data(external);
    if (!v2 || v8)
    {
      uint64_t v10 = external;
      BOOL v9 = 0LL;
    }

    else
    {
      BOOL v9 = nw_calloc_type<unsigned char>(v2);
      uint64_t v10 = external;
    }

    nw_frame_reset(v10, v9, v2, (uint64_t)nw_socket_frame_output_finalizer, a1);
    return external;
  }

  if ((*(_WORD *)(a1 + 301) & 0x1000) == 0)
  {
    if ((_DWORD)__count)
    {
      uint64_t v7 = nw_calloc_type<unsigned char>(__count);
      uint64_t external = nw_frame_create(0, v7, v2, (uint64_t)nw_socket_frame_output_finalizer, a1);
      if (external) {
        return external;
      }
    }

    else
    {
      uint64_t external = nw_frame_create(0, 0LL, 0, (uint64_t)nw_socket_frame_output_finalizer, a1);
      uint64_t v7 = 0LL;
      if (external) {
        return external;
      }
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)unsigned int buf = 136446210;
    os_log_type_t v26 = "nw_socket_allocate_output_frame";
    int v15 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v16 = (os_log_s *)gLogObj;
      os_log_type_t v17 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_45;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      os_log_type_t v26 = "nw_socket_allocate_output_frame";
      __int16 v18 = "%{public}s nw_frame_create failed";
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v16 = (os_log_s *)gLogObj;
      os_log_type_t v17 = type;
      BOOL v22 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)unsigned int buf = 136446466;
          os_log_type_t v26 = "nw_socket_allocate_output_frame";
          __int16 v27 = 2082;
          int v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v16,  v17,  "%{public}s nw_frame_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_45;
      }

      if (!v22)
      {
LABEL_45:
        if (v15) {
          free(v15);
        }
        goto LABEL_47;
      }

      *(_DWORD *)unsigned int buf = 136446210;
      os_log_type_t v26 = "nw_socket_allocate_output_frame";
      __int16 v18 = "%{public}s nw_frame_create failed, no backtrace";
    }

    else
    {
      int v16 = (os_log_s *)__nwlog_obj();
      os_log_type_t v17 = type;
      if (!os_log_type_enabled(v16, type)) {
        goto LABEL_45;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      os_log_type_t v26 = "nw_socket_allocate_output_frame";
      __int16 v18 = "%{public}s nw_frame_create failed, backtrace limit exceeded";
    }

    _os_log_impl(&dword_181A5C000, v16, v17, v18, buf, 0xCu);
    goto LABEL_45;
  }

  uint64_t external = nw_frame_create_external(0, __count, (uint64_t)nw_socket_frame_output_finalizer, a1);
  if (external) {
    return external;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)unsigned int buf = 136446210;
  os_log_type_t v26 = "nw_socket_allocate_output_frame";
  uint64_t v7 = _os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v12 = (os_log_s *)gLogObj;
    os_log_type_t v13 = type;
    if (os_log_type_enabled((os_log_t)gLogObj, type))
    {
      *(_DWORD *)unsigned int buf = 136446210;
      os_log_type_t v26 = "nw_socket_allocate_output_frame";
      uint64_t v14 = "%{public}s nw_frame_create_external failed";
LABEL_41:
      _os_log_impl(&dword_181A5C000, v12, v13, v14, buf, 0xCu);
    }
  }

  else if (v23)
  {
    char v19 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    char v12 = (os_log_s *)gLogObj;
    os_log_type_t v13 = type;
    BOOL v20 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (v19)
    {
      if (v20)
      {
        *(_DWORD *)unsigned int buf = 136446466;
        os_log_type_t v26 = "nw_socket_allocate_output_frame";
        __int16 v27 = 2082;
        int v28 = v19;
        _os_log_impl( &dword_181A5C000,  v12,  v13,  "%{public}s nw_frame_create_external failed, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v19);
      goto LABEL_47;
    }

    if (v20)
    {
      *(_DWORD *)unsigned int buf = 136446210;
      os_log_type_t v26 = "nw_socket_allocate_output_frame";
      uint64_t v14 = "%{public}s nw_frame_create_external failed, no backtrace";
      goto LABEL_41;
    }
  }

  else
  {
    char v12 = (os_log_s *)__nwlog_obj();
    os_log_type_t v13 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)unsigned int buf = 136446210;
      os_log_type_t v26 = "nw_socket_allocate_output_frame";
      uint64_t v14 = "%{public}s nw_frame_create_external failed, backtrace limit exceeded";
      goto LABEL_41;
    }
  }

void nw_socket_frame_output_finalizer(nw_frame *a1, nw_protocol *a2, char *a3)
{
  uint64_t v5 = *((void *)a1 + 2);
  uint64_t v6 = (void *)*((void *)a1 + 3);
  uint64_t v4 = (void *)((char *)a1 + 16);
  if (v5)
  {
    *(void *)(v5 + 24) = v6;
    uint64_t v6 = (void *)*((void *)a1 + 3);
  }

  else
  {
    *((void *)a3 + 2_Block_object_dispose(va, 8) = v6;
  }

  void *v6 = v5;
  *uint64_t v4 = 0LL;
  *((void *)a1 + 3) = 0LL;
  if ((_DWORD)a2)
  {
    uint64_t v7 = (void *)*((void *)a3 + 30);
    *((void *)a1 + 3) = v7;
    *uint64_t v7 = a1;
    *((void *)a3 + 30) = v4;
    nw_socket_service_writes((uint64_t)a3);
  }

  else
  {
    int v8 = (void *)*((void *)a3 + 26);
    *((void *)a1 + 3) = v8;
    *int v8 = a1;
    *((void *)a3 + 26) = v4;
  }

  if ((*(_WORD *)(a3 + 301) & 8) != 0) {
    nw_socket_output_finished((nw_protocol *)(a3 - 96), a2);
  }
}

const sockaddr *NWUtilsCreateNSStringFromSockaddr(const sockaddr *result, int a2)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  if (result)
  {
    unsigned int v2 = result;
    if (a2)
    {
      if (getnameinfo(result, result->sa_len, v6, 0x46u, v5, 6u, 10))
      {
        return 0LL;
      }

      else
      {
        if (v2->sa_family == 30) {
          uint64_t v4 = ".";
        }
        else {
          uint64_t v4 = ":";
        }
        objc_msgSend(NSString, "stringWithFormat:", @"%s%s%s", v6, v4, v5);
        return (const sockaddr *)objc_claimAutoreleasedReturnValue();
      }
    }

    else
    {
      int v3 = getnameinfo(result, result->sa_len, v6, 0x46u, 0LL, 0, 10);
      BOOL result = 0LL;
      if (!v3)
      {
        [NSString stringWithUTF8String:v6];
        return (const sockaddr *)objc_claimAutoreleasedReturnValue();
      }
    }
  }

  return result;
}

uint64_t NWUtilsStringMatchesPattern(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    if ([v4 hasSuffix:@"*"])
    {
      objc_msgSend(v4, "substringWithRange:", 0, objc_msgSend(v4, "length") - 1);
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
      uint64_t v6 = [v3 hasPrefix:v5];
    }

    else
    {
      if (![v4 hasPrefix:@"*"])
      {
        uint64_t v7 = [v3 isEqualToString:v4];
        goto LABEL_6;
      }

      objc_msgSend(v4, "substringWithRange:", 1, objc_msgSend(v4, "length") - 1);
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
      uint64_t v9 = [v3 length];
      if (v9 == [v5 length] - 1 && objc_msgSend(v5, "hasPrefix:", @"."))
      {
        uint64_t v10 = objc_msgSend(v5, "substringWithRange:", 1, objc_msgSend(v5, "length") - 1);

        uint64_t v5 = (void *)v10;
      }

      uint64_t v6 = [v3 hasSuffix:v5];
    }

    uint64_t v7 = v6;
  }

  else
  {
    uint64_t v7 = 0LL;
  }

uint64_t NWUtilsStringMatchesPatternSet(void *a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    id v5 = v4;
    uint64_t v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v11;
      while (2)
      {
        for (uint64_t i = 0LL; i != v6; ++i)
        {
          if (*(void *)v11 != v7) {
            objc_enumerationMutation(v5);
          }
          if ((NWUtilsStringMatchesPattern(v3, *(void **)(*((void *)&v10 + 1) + 8 * i)) & 1) != 0)
          {
            uint64_t v6 = 1LL;
            goto LABEL_13;
          }
        }

        uint64_t v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
        if (v6) {
          continue;
        }
        break;
      }
    }

uint64_t NWUtilsAnyStringsMatchPatternSet(void *a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v5 = v3;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v11;
    while (2)
    {
      for (uint64_t i = 0LL; i != v6; ++i)
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v5);
        }
        if ((NWUtilsStringMatchesPatternSet(*(void **)(*((void *)&v10 + 1) + 8 * i), v4) & 1) != 0)
        {
          uint64_t v6 = 1LL;
          goto LABEL_11;
        }
      }

      uint64_t v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }

void *NWCreateNSDataFromDispatchData(void *a1)
{
  id v1 = a1;
  unsigned int v2 = v1;
  if (v1) {
    id v3 = v1;
  }

  return v2;
}

void *NWCreateDispatchDataFromNSData(void *a1, const char *a2)
{
  if (a1) {
    return (void *)[a1 _createDispatchData];
  }
  return a1;
}

uint64_t NWUtilsAreNSObjectsEqual(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  uint64_t v6 = v3 == v4;
  if (v3 != v4 && v3 && v4)
  {
    else {
      uint64_t v6 = 0LL;
    }
  }

  return v6;
}

id NWUtilsCreateNSDictionaryFromXPCDictionary(void *a1)
{
  id v1 = (void *)MEMORY[0x189603FC8];
  id v2 = a1;
  [v1 dictionary];
  id v3 = (void *)objc_claimAutoreleasedReturnValue();
  applier[0] = MEMORY[0x1895F87A8];
  applier[1] = 3221225472LL;
  applier[2] = __NWUtilsCreateNSDictionaryFromXPCDictionary_block_invoke;
  applier[3] = &unk_189BC5148;
  id v4 = v3;
  id v7 = v4;
  xpc_dictionary_apply(v2, applier);

  return v4;
}

uint64_t __NWUtilsCreateNSArrayFromXPCArray_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  Class Class = object_getClass(v4);
  if (Class == (Class)MEMORY[0x1895F9220])
  {
    id v7 = (void *)MEMORY[0x189603FA8];
    id v8 = v4;
    [v7 array];
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t applier = MEMORY[0x1895F87A8];
    uint64_t v14 = 3221225472LL;
    uint64_t v15 = __NWUtilsCreateNSArrayFromXPCArray_block_invoke;
    int v16 = &unk_189BC8CB8;
    id NSObjectFromSimpleXPCObject = v9;
    id v17 = NSObjectFromSimpleXPCObject;
    xpc_array_apply(v8, &applier);
  }

  else
  {
    if (Class != (Class)MEMORY[0x1895F9250])
    {
      id NSObjectFromSimpleXPCObject = NWUtilsCreateNSObjectFromSimpleXPCObject(v4);
      if (!NSObjectFromSimpleXPCObject) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }

    __int128 v10 = (void *)MEMORY[0x189603FC8];
    id v8 = v4;
    [v10 dictionary];
    __int128 v11 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t applier = MEMORY[0x1895F87A8];
    uint64_t v14 = 3221225472LL;
    uint64_t v15 = __NWUtilsCreateNSDictionaryFromXPCDictionary_block_invoke;
    int v16 = &unk_189BC5148;
    id NSObjectFromSimpleXPCObject = v11;
    id v17 = NSObjectFromSimpleXPCObject;
    xpc_dictionary_apply(v8, &applier);
  }

  if (NSObjectFromSimpleXPCObject) {
LABEL_8:
  }
    [*(id *)(a1 + 32) addObject:NSObjectFromSimpleXPCObject];
LABEL_9:

  return 1LL;
}

xpc_object_t NWUtilsCreateXPCDictionaryFromNSDictionary(void *a1)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  xpc_object_t xdict = xpc_dictionary_create(0LL, 0LL, 0LL);
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  id v2 = v1;
  uint64_t v3 = [v2 countByEnumeratingWithState:&v32 objects:v42 count:16];
  if (v3)
  {
    uint64_t v5 = v3;
    uint64_t v6 = @"INT64-";
    uint64_t v7 = *(void *)v33;
    unint64_t v8 = 0x189603000uLL;
    *(void *)&__int128 v4 = 136446722LL;
    __int128 v29 = v4;
    do
    {
      for (uint64_t i = 0LL; i != v5; ++i)
      {
        if (*(void *)v33 != v7) {
          objc_enumerationMutation(v2);
        }
        id v10 = *(id *)(*((void *)&v32 + 1) + 8 * i);
        if ([v10 hasPrefix:v6])
        {
          __int128 v11 = (__CFString *)v6;
LABEL_18:
          objc_msgSend(v10, "substringFromIndex:", -[__CFString length](v11, "length", v29));
          id v12 = (id)objc_claimAutoreleasedReturnValue();
          goto LABEL_19;
        }

        if ([v10 hasPrefix:@"DOUBLE-"])
        {
          __int128 v11 = @"DOUBLE-";
          goto LABEL_18;
        }

        if ([v10 hasPrefix:@"UINT64-"])
        {
          __int128 v11 = @"UINT64-";
          goto LABEL_18;
        }

        if ([v10 hasPrefix:@"BOOL-"])
        {
          __int128 v11 = @"BOOL-";
          goto LABEL_18;
        }

        id v12 = v10;
LABEL_19:
        __int128 v13 = v12;

        [v2 objectForKeyedSubscript:v10];
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          xpc_object_t XPCArrayFromNSArray = NWUtilsCreateXPCArrayFromNSArray(v10, v14);
          if (!XPCArrayFromNSArray) {
            goto LABEL_27;
          }
        }

        else
        {
          BOOL v31 = v13;
          uint64_t v17 = v5;
          uint64_t v18 = v7;
          char v19 = v6;
          unint64_t v20 = v8;
          id v21 = v14;
          objc_opt_class();
          isKindOfClass Class = objc_opt_isKindOfClass();

          if ((isKindOfClass & 1) != 0) {
            uint64_t XPCDictionaryFromNSDictionary = NWUtilsCreateXPCDictionaryFromNSDictionary(v21);
          }
          else {
            uint64_t XPCDictionaryFromNSDictionary = NWUtilsCreateXPCObjectFromSimpleNSObject(v10, v21);
          }
          xpc_object_t XPCArrayFromNSArray = (xpc_object_t)XPCDictionaryFromNSDictionary;
          unint64_t v8 = v20;
          uint64_t v6 = v19;
          uint64_t v7 = v18;
          uint64_t v5 = v17;
          __int128 v13 = v31;
          if (!XPCDictionaryFromNSDictionary)
          {
LABEL_27:
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            BOOL v24 = (os_log_s *)(id)gLogObj;
            if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)unsigned int buf = 136446466;
              uint64_t v37 = "NWUtilsCreateXPCDictionaryFromNSDictionary";
              __int16 v38 = 2114;
              os_log_type_t v39 = v14;
              uint64_t v25 = v24;
              os_log_type_t v26 = "%{public}s Could not create xpc object for %{public}@";
              uint32_t v27 = 22;
              goto LABEL_5;
            }

xpc_object_t NWUtilsCreateXPCArrayFromNSArray(void *a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  xpc_object_t v5 = xpc_array_create(0LL, 0LL);
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  id v6 = v4;
  uint64_t v7 = [v6 countByEnumeratingWithState:&v18 objects:v26 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v19;
    do
    {
      for (uint64_t i = 0LL; i != v8; ++i)
      {
        if (*(void *)v19 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = *(id *)(*((void *)&v18 + 1) + 8 * i);
        objc_opt_class();
        isKindOfClass Class = objc_opt_isKindOfClass();

        if ((isKindOfClass & 1) != 0)
        {
          xpc_object_t XPCArrayFromNSArray = (void *)NWUtilsCreateXPCArrayFromNSArray(v3, v11);
          if (XPCArrayFromNSArray) {
            goto LABEL_14;
          }
        }

        else
        {
          id v14 = v11;
          objc_opt_class();
          char v15 = objc_opt_isKindOfClass();

          if ((v15 & 1) != 0)
          {
            xpc_object_t XPCArrayFromNSArray = (void *)NWUtilsCreateXPCDictionaryFromNSDictionary(v14);
            if (XPCArrayFromNSArray) {
              goto LABEL_14;
            }
          }

          else
          {
            xpc_object_t XPCArrayFromNSArray = (void *)NWUtilsCreateXPCObjectFromSimpleNSObject(v3, v14);
            if (XPCArrayFromNSArray)
            {
LABEL_14:
              xpc_array_append_value(v5, XPCArrayFromNSArray);
              goto LABEL_6;
            }
          }
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v16 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)unsigned int buf = 136446466;
          char v23 = "NWUtilsCreateXPCArrayFromNSArray";
          __int16 v24 = 2114;
          id v25 = v11;
          _os_log_impl( &dword_181A5C000,  v16,  OS_LOG_TYPE_ERROR,  "%{public}s Could not create xpc object for %{public}@",  buf,  0x16u);
        }

LABEL_6:
      }

      uint64_t v8 = [v6 countByEnumeratingWithState:&v18 objects:v26 count:16];
    }

    while (v8);
  }

  return v5;
}

uint64_t NWUtilsCreateXPCObjectFromSimpleNSObject(void *a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    || (id v5 = v4,
        objc_opt_class(),
        isKindOfClass Class = objc_opt_isKindOfClass(),
        v5,
        (isKindOfClass & 1) != 0))
  {
    uint64_t v7 = _CFXPCCreateXPCObjectFromCFObject();
LABEL_4:
    uint64_t v8 = v7;
    goto LABEL_5;
  }

  id v10 = v5;
  objc_opt_class();
  char v11 = objc_opt_isKindOfClass();

  if ((v11 & 1) != 0)
  {
    [v10 getUUIDBytes:uuid];
    uint64_t v7 = (uint64_t)xpc_uuid_create(uuid);
    goto LABEL_4;
  }

  id v12 = v10;
  objc_opt_class();
  char v13 = objc_opt_isKindOfClass();

  if ((v13 & 1) != 0)
  {
    if ([v3 hasPrefix:@"INT64-"])
    {
      uint64_t v7 = (uint64_t)xpc_int64_create([v12 longLongValue]);
    }

    else if ([v3 hasPrefix:@"DOUBLE-"])
    {
      [v12 doubleValue];
      uint64_t v7 = (uint64_t)xpc_double_create(v22);
    }

    else if ([v3 hasPrefix:@"BOOL-"])
    {
      uint64_t v7 = (uint64_t)xpc_BOOL_create([v12 BOOLValue]);
    }

    else
    {
      uint64_t v7 = (uint64_t)xpc_uint64_create([v12 unsignedLongLongValue]);
    }

    goto LABEL_4;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v14 = (id)gLogObj;
  *(_DWORD *)uuid = 136446466;
  __int128 v32 = "NWUtilsCreateXPCObjectFromSimpleNSObject";
  __int16 v33 = 2114;
  id v34 = (id)objc_opt_class();
  id v15 = v34;
  int v16 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v29 = 0;
  if (__nwlog_fault(v16, &type, &v29))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v17 = (os_log_s *)(id)gLogObj;
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        __int128 v19 = (void *)objc_opt_class();
        *(_DWORD *)uuid = 136446466;
        __int128 v32 = "NWUtilsCreateXPCObjectFromSimpleNSObject";
        __int16 v33 = 2114;
        id v34 = v19;
        id v20 = v19;
        __int128 v21 = "%{public}s Unknown NSObject type %{public}@";
LABEL_29:
        _os_log_impl(&dword_181A5C000, v17, v18, v21, uuid, 0x16u);
      }
    }

    else
    {
      if (v29)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        BOOL v24 = os_log_type_enabled(v17, type);
        if (backtrace_string)
        {
          if (v24)
          {
            id v25 = (void *)objc_opt_class();
            *(_DWORD *)uuid = 136446722;
            __int128 v32 = "NWUtilsCreateXPCObjectFromSimpleNSObject";
            __int16 v33 = 2114;
            id v34 = v25;
            __int16 v35 = 2082;
            int v36 = backtrace_string;
            id v26 = v25;
            _os_log_impl( &dword_181A5C000,  v17,  v18,  "%{public}s Unknown NSObject type %{public}@, dumping backtrace:%{public}s",  uuid,  0x20u);
          }

          free(backtrace_string);
          goto LABEL_31;
        }

        if (!v24) {
          goto LABEL_30;
        }
        int v28 = (void *)objc_opt_class();
        *(_DWORD *)uuid = 136446466;
        __int128 v32 = "NWUtilsCreateXPCObjectFromSimpleNSObject";
        __int16 v33 = 2114;
        id v34 = v28;
        id v20 = v28;
        __int128 v21 = "%{public}s Unknown NSObject type %{public}@, no backtrace";
        goto LABEL_29;
      }

      __nwlog_obj();
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        uint64_t v27 = (void *)objc_opt_class();
        *(_DWORD *)uuid = 136446466;
        __int128 v32 = "NWUtilsCreateXPCObjectFromSimpleNSObject";
        __int16 v33 = 2114;
        id v34 = v27;
        id v20 = v27;
        __int128 v21 = "%{public}s Unknown NSObject type %{public}@, backtrace limit exceeded";
        goto LABEL_29;
      }
    }

BOOL NWUtilsCurrentProcessHasEntitlement(void *a1)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = SecTaskCreateFromSelf((CFAllocatorRef)*MEMORY[0x189604DB0]);
  if (!v2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v10 = (id)gLogObj;
    *(_DWORD *)unsigned int buf = 136446210;
    __int128 v32 = "NWUtilsCurrentProcessHasEntitlement";
    char v11 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(error) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v11, &error, &type))
    {
      if (error == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v12 = (os_log_s *)(id)gLogObj;
        os_log_type_t v13 = error;
        if (!os_log_type_enabled(v12, (os_log_type_t)error)) {
          goto LABEL_46;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        __int128 v32 = "NWUtilsCurrentProcessHasEntitlement";
        id v14 = "%{public}s SecTaskCreateFromSelf failed";
LABEL_44:
        id v26 = v12;
        os_log_type_t v27 = v13;
        goto LABEL_45;
      }

      if (type == OS_LOG_TYPE_DEFAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v12 = (os_log_s *)(id)gLogObj;
        os_log_type_t v13 = error;
        if (!os_log_type_enabled(v12, (os_log_type_t)error)) {
          goto LABEL_46;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        __int128 v32 = "NWUtilsCurrentProcessHasEntitlement";
        id v14 = "%{public}s SecTaskCreateFromSelf failed, backtrace limit exceeded";
        goto LABEL_44;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (os_log_s *)(id)gLogObj;
      os_log_type_t v21 = error;
      BOOL v22 = os_log_type_enabled(v12, (os_log_type_t)error);
      if (!backtrace_string)
      {
        if (!v22)
        {
LABEL_46:

          if (!v11) {
            goto LABEL_34;
          }
          goto LABEL_33;
        }

        *(_DWORD *)unsigned int buf = 136446210;
        __int128 v32 = "NWUtilsCurrentProcessHasEntitlement";
        id v14 = "%{public}s SecTaskCreateFromSelf failed, no backtrace";
        id v26 = v12;
        os_log_type_t v27 = v21;
LABEL_45:
        _os_log_impl(&dword_181A5C000, v26, v27, v14, buf, 0xCu);
        goto LABEL_46;
      }

      if (v22)
      {
        *(_DWORD *)unsigned int buf = 136446466;
        __int128 v32 = "NWUtilsCurrentProcessHasEntitlement";
        __int16 v33 = 2082;
        id v34 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v12,  v21,  "%{public}s SecTaskCreateFromSelf failed, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(backtrace_string);
    }

    if (!v11)
    {
LABEL_34:
      BOOL v19 = 0LL;
      goto LABEL_35;
    }

uint64_t *nw_protocol_recorder_identifier()
{
  if (nw_protocol_recorder_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_recorder_identifier::onceToken, &__block_literal_global_65416);
  }
  return &g_recorder_protocol_identifier;
}

BOOL __nw_protocol_recorder_identifier_block_invoke()
{
  *(void *)&algn_18C5A4381[8] = 0LL;
  *(void *)algn_18C5A4381 = 0LL;
  qword_18C5A4390 = 0LL;
  strcpy((char *)&g_recorder_protocol_identifier, "recorder");
  qword_18C5A43E0 = (uint64_t)nw_protocol_default_input_available;
  unk_18C5A43E8 = nw_protocol_default_output_available;
  qword_18C5A4420 = (uint64_t)nw_protocol_default_get_local;
  unk_18C5A4428 = nw_protocol_default_get_remote;
  qword_18C5A4410 = (uint64_t)nw_protocol_default_get_parameters;
  unk_18C5A4418 = nw_protocol_default_get_path;
  qword_18C5A4460 = (uint64_t)nw_protocol_default_output_finished;
  unk_18C5A4468 = nw_protocol_default_get_output_local;
  qword_18C5A43B0 = (uint64_t)nw_protocol_default_replace_input_handler;
  unk_18C5A43B8 = nw_protocol_default_connect;
  qword_18C5A43C0 = (uint64_t)nw_protocol_default_disconnect;
  unk_18C5A43C8 = nw_protocol_default_connected;
  qword_18C5A43D0 = (uint64_t)nw_protocol_default_disconnected;
  unk_18C5A43D8 = nw_protocol_default_error;
  qword_18C5A44A0 = (uint64_t)nw_protocol_default_reset;
  unk_18C5A44A8 = nw_protocol_default_input_flush;
  qword_18C5A4450 = (uint64_t)nw_protocol_default_supports_external_data;
  unk_18C5A4458 = nw_protocol_default_input_finished;
  qword_18C5A4470 = (uint64_t)nw_protocol_default_get_output_interface;
  unk_18C5A4478 = nw_protocol_default_waiting_for_output;
  qword_18C5A4430 = (uint64_t)nw_protocol_default_register_notification;
  unk_18C5A4438 = nw_protocol_default_unregister_notification;
  qword_18C5A4440 = (uint64_t)nw_protocol_default_notify;
  unk_18C5A4448 = nw_protocol_default_updated_path;
  qword_18C5A4480 = (uint64_t)nw_protocol_default_copy_info;
  unk_18C5A4488 = nw_protocol_default_add_listen_handler;
  qword_18C5A4490 = (uint64_t)nw_protocol_default_remove_listen_handler;
  unk_18C5A4498 = nw_protocol_default_get_message_properties;
  g_recorder_protocol_uint64_t callbacks = (uint64_t)nw_protocol_recorder_add_input_handler;
  *(void *)algn_18C5A43A8 = nw_protocol_recorder_remove_input_handler;
  qword_18C5A43F0 = (uint64_t)nw_protocol_recorder_get_input_frames;
  unk_18C5A43F8 = nw_protocol_recorder_get_output_frames;
  qword_18C5A4400 = (uint64_t)nw_protocol_recorder_finalize_output_frames;
  unk_18C5A4408 = nw_protocol_default_link_state;
  qword_18C5A4398 = 0x100000000LL;
  return nw_protocol_register(&g_recorder_protocol_identifier, (uint64_t)nw_protocol_recorder_create);
}

uint64_t nw_protocol_recorder_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    LODWORD(v40[0]) = 136446210;
    *(void *)((char *)v40 + 4) = "nw_protocol_recorder_add_input_handler";
    char v11 = (char *)_os_log_send_and_compose_impl();
    __str[0] = 16;
    out[0] = 0;
    if (__str[0] == 17)
    {
      char v28 = (os_log_s *)__nwlog_obj();
      char v29 = __str[0];
      if (!os_log_type_enabled(v28, (os_log_type_t)__str[0])) {
        goto LABEL_41;
      }
      LODWORD(v40[0]) = 136446210;
      *(void *)((char *)v40 + 4) = "nw_protocol_recorder_add_input_handler";
      id v14 = "%{public}s called with null protocol";
      goto LABEL_69;
    }

    if (out[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v28 = (os_log_s *)__nwlog_obj();
      char v29 = __str[0];
      BOOL v30 = os_log_type_enabled(v28, (os_log_type_t)__str[0]);
      if (backtrace_string)
      {
        if (!v30) {
          goto LABEL_24;
        }
        LODWORD(v40[0]) = 136446466;
        *(void *)((char *)v40 + 4) = "nw_protocol_recorder_add_input_handler";
        WORD6(v40[0]) = 2082;
        *(void *)((char *)v40 + 14) = backtrace_string;
        BOOL v17 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
        goto LABEL_60;
      }

      if (!v30) {
        goto LABEL_41;
      }
      LODWORD(v40[0]) = 136446210;
      *(void *)((char *)v40 + 4) = "nw_protocol_recorder_add_input_handler";
      id v14 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      char v28 = (os_log_s *)__nwlog_obj();
      char v29 = __str[0];
      if (!os_log_type_enabled(v28, (os_log_type_t)__str[0])) {
        goto LABEL_41;
      }
      LODWORD(v40[0]) = 136446210;
      *(void *)((char *)v40 + 4) = "nw_protocol_recorder_add_input_handler";
      id v14 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

uint64_t nw_protocol_recorder_remove_input_handler(nw_protocol *a1, nw_protocol *a2, int a3)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    uint32_t v21 = "nw_protocol_recorder_remove_input_handler";
    id v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v18)
      {
        char v11 = (os_log_s *)__nwlog_obj();
        os_log_type_t v12 = type;
        if (!os_log_type_enabled(v11, type)) {
          goto LABEL_44;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        uint32_t v21 = "nw_protocol_recorder_remove_input_handler";
        os_log_type_t v13 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_43;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      char v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (!v15) {
          goto LABEL_44;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        uint32_t v21 = "nw_protocol_recorder_remove_input_handler";
        os_log_type_t v13 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_43;
      }

      if (v15)
      {
        *(_DWORD *)unsigned int buf = 136446466;
        uint32_t v21 = "nw_protocol_recorder_remove_input_handler";
        __int16 v22 = 2082;
        BOOL v23 = backtrace_string;
        BOOL v16 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_33:
        _os_log_impl(&dword_181A5C000, v11, v12, v16, buf, 0x16u);
      }

uint64_t nw_protocol_recorder_get_input_frames( nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    char handle = a1->handle;
    if (handle)
    {
      uint64_t v8 = (*(uint64_t (**)(void))(*(void *)(handle[4] + 24LL) + 80LL))();
      v21[0] = MEMORY[0x1895F87A8];
      v21[1] = 0x40000000LL;
      __int16 v22 = ___ZL37nw_protocol_recorder_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke;
      BOOL v23 = &__block_descriptor_tmp_12_65459;
      uint64_t v24 = handle;
      tqh_first = a6->tqh_first;
      do
      {
        if (!tqh_first) {
          break;
        }
        id v10 = (nw_frame *)*((void *)tqh_first + 4);
        char v11 = ((uint64_t (*)(void *))v22)(v21);
        tqh_first = v10;
      }

      while ((v11 & 1) != 0);
      return v8;
    }

    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    char v28 = "nw_protocol_recorder_get_input_frames";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v26 = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (v26 == OS_LOG_TYPE_FAULT)
    {
      id v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = v26;
      if (os_log_type_enabled(v14, v26))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        char v28 = "nw_protocol_recorder_get_input_frames";
        BOOL v16 = "%{public}s called with null recorder";
        goto LABEL_33;
      }

      goto LABEL_34;
    }

    if (!v25)
    {
      id v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = v26;
      if (os_log_type_enabled(v14, v26))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        char v28 = "nw_protocol_recorder_get_input_frames";
        BOOL v16 = "%{public}s called with null recorder, backtrace limit exceeded";
        goto LABEL_33;
      }

      goto LABEL_34;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    id v14 = (os_log_s *)__nwlog_obj();
    os_log_type_t v15 = v26;
    BOOL v20 = os_log_type_enabled(v14, v26);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)unsigned int buf = 136446210;
        char v28 = "nw_protocol_recorder_get_input_frames";
        BOOL v16 = "%{public}s called with null recorder, no backtrace";
        goto LABEL_33;
      }

      goto LABEL_34;
    }

    if (v20)
    {
      *(_DWORD *)unsigned int buf = 136446466;
      char v28 = "nw_protocol_recorder_get_input_frames";
      __int16 v29 = 2082;
      BOOL v30 = backtrace_string;
      BOOL v19 = "%{public}s called with null recorder, dumping backtrace:%{public}s";
      goto LABEL_23;
    }

    goto LABEL_24;
  }

  __nwlog_obj();
  *(_DWORD *)unsigned int buf = 136446210;
  char v28 = "nw_protocol_recorder_get_input_frames";
  os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v26 = OS_LOG_TYPE_ERROR;
  char v25 = 0;
  if (v26 != OS_LOG_TYPE_FAULT)
  {
    if (!v25)
    {
      id v14 = (os_log_s *)__nwlog_obj();
      os_log_type_t v15 = v26;
      if (os_log_type_enabled(v14, v26))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        char v28 = "nw_protocol_recorder_get_input_frames";
        BOOL v16 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_33;
      }

      goto LABEL_34;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    id v14 = (os_log_s *)__nwlog_obj();
    os_log_type_t v15 = v26;
    BOOL v18 = os_log_type_enabled(v14, v26);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)unsigned int buf = 136446210;
        char v28 = "nw_protocol_recorder_get_input_frames";
        BOOL v16 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_33;
      }

      goto LABEL_34;
    }

    if (v18)
    {
      *(_DWORD *)unsigned int buf = 136446466;
      char v28 = "nw_protocol_recorder_get_input_frames";
      __int16 v29 = 2082;
      BOOL v30 = backtrace_string;
      BOOL v19 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_23:
      _os_log_impl(&dword_181A5C000, v14, v15, v19, buf, 0x16u);
    }

uint64_t nw_protocol_recorder_get_output_frames( nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    char handle = a1->handle;
    if (handle) {
      return (*(uint64_t (**)(void))(*(void *)(handle[4] + 24LL) + 88LL))();
    }
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v19 = "nw_protocol_recorder_get_output_frames";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v8, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v9 = (os_log_s *)__nwlog_obj();
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_32;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v19 = "nw_protocol_recorder_get_output_frames";
        char v11 = "%{public}s called with null recorder";
        goto LABEL_31;
      }

      if (!v16)
      {
        uint64_t v9 = (os_log_s *)__nwlog_obj();
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_32;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v19 = "nw_protocol_recorder_get_output_frames";
        char v11 = "%{public}s called with null recorder, backtrace limit exceeded";
        goto LABEL_31;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)unsigned int buf = 136446466;
          BOOL v19 = "nw_protocol_recorder_get_output_frames";
          __int16 v20 = 2082;
          uint32_t v21 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null recorder, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v8) {
          return 0LL;
        }
        goto LABEL_33;
      }

      if (v15)
      {
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v19 = "nw_protocol_recorder_get_output_frames";
        char v11 = "%{public}s called with null recorder, no backtrace";
LABEL_31:
        _os_log_impl(&dword_181A5C000, v9, v10, v11, buf, 0xCu);
      }
    }
  }

  else
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v19 = "nw_protocol_recorder_get_output_frames";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      BOOL v19 = "nw_protocol_recorder_get_output_frames";
      char v11 = "%{public}s called with null protocol";
      goto LABEL_31;
    }

    if (!v16)
    {
      uint64_t v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_32;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      BOOL v19 = "nw_protocol_recorder_get_output_frames";
      char v11 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_31;
    }

    os_log_type_t v12 = (char *)__nw_create_backtrace_string();
    uint64_t v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v13 = os_log_type_enabled(v9, type);
    if (!v12)
    {
      if (!v13) {
        goto LABEL_32;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      BOOL v19 = "nw_protocol_recorder_get_output_frames";
      char v11 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_31;
    }

    if (v13)
    {
      *(_DWORD *)unsigned int buf = 136446466;
      BOOL v19 = "nw_protocol_recorder_get_output_frames";
      __int16 v20 = 2082;
      uint32_t v21 = v12;
      _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v12);
  }

uint64_t nw_protocol_recorder_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    uint64_t v22 = "nw_protocol_recorder_finalize_output_frames";
    double v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v20 = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (v20 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = v20;
      if (!os_log_type_enabled(v8, v20)) {
        goto LABEL_35;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      uint64_t v22 = "nw_protocol_recorder_finalize_output_frames";
      os_log_type_t v10 = "%{public}s called with null protocol";
      goto LABEL_34;
    }

    if (!v19)
    {
      uint64_t v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = v20;
      if (!os_log_type_enabled(v8, v20)) {
        goto LABEL_35;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      uint64_t v22 = "nw_protocol_recorder_finalize_output_frames";
      os_log_type_t v10 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_34;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v8 = (os_log_s *)__nwlog_obj();
    os_log_type_t v9 = v20;
    BOOL v12 = os_log_type_enabled(v8, v20);
    if (!backtrace_string)
    {
      if (!v12) {
        goto LABEL_35;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      uint64_t v22 = "nw_protocol_recorder_finalize_output_frames";
      os_log_type_t v10 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_34;
    }

    if (v12)
    {
      *(_DWORD *)unsigned int buf = 136446466;
      uint64_t v22 = "nw_protocol_recorder_finalize_output_frames";
      __int16 v23 = 2082;
      uint64_t v24 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(backtrace_string);
LABEL_35:
    if (!v7) {
      return 0LL;
    }
LABEL_36:
    free(v7);
    return 0LL;
  }

  char handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    uint64_t v22 = "nw_protocol_recorder_finalize_output_frames";
    double v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v20 = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (v20 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = v20;
      if (!os_log_type_enabled(v8, v20)) {
        goto LABEL_35;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      uint64_t v22 = "nw_protocol_recorder_finalize_output_frames";
      os_log_type_t v10 = "%{public}s called with null recorder";
      goto LABEL_34;
    }

    if (!v19)
    {
      uint64_t v8 = (os_log_s *)__nwlog_obj();
      os_log_type_t v9 = v20;
      if (!os_log_type_enabled(v8, v20)) {
        goto LABEL_35;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      uint64_t v22 = "nw_protocol_recorder_finalize_output_frames";
      os_log_type_t v10 = "%{public}s called with null recorder, backtrace limit exceeded";
      goto LABEL_34;
    }

    BOOL v13 = (char *)__nw_create_backtrace_string();
    uint64_t v8 = (os_log_s *)__nwlog_obj();
    os_log_type_t v9 = v20;
    BOOL v14 = os_log_type_enabled(v8, v20);
    if (v13)
    {
      if (v14)
      {
        *(_DWORD *)unsigned int buf = 136446466;
        uint64_t v22 = "nw_protocol_recorder_finalize_output_frames";
        __int16 v23 = 2082;
        uint64_t v24 = v13;
        _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null recorder, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      free(v13);
      if (!v7) {
        return 0LL;
      }
      goto LABEL_36;
    }

    if (v14)
    {
      *(_DWORD *)unsigned int buf = 136446210;
      uint64_t v22 = "nw_protocol_recorder_finalize_output_frames";
      os_log_type_t v10 = "%{public}s called with null recorder, no backtrace";
LABEL_34:
      _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
      goto LABEL_35;
    }

    goto LABEL_35;
  }

  v15[0] = MEMORY[0x1895F87A8];
  v15[1] = 0x40000000LL;
  char v16 = ___ZL43nw_protocol_recorder_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke;
  BOOL v17 = &__block_descriptor_tmp_13_65432;
  BOOL v18 = handle;
  tqh_first = a2->tqh_first;
  do
  {
    if (!tqh_first) {
      break;
    }
    uint64_t v4 = (nw_frame *)*((void *)tqh_first + 4);
    char v5 = ((uint64_t (*)(void *))v16)(v15);
    tqh_first = v4;
  }

  while ((v5 & 1) != 0);
  return (*(uint64_t (**)(void))(*(void *)(handle[4] + 24LL) + 96LL))();
}

uint64_t nw_protocol_recorder_create(const nw_protocol_identifier *a1)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  __memptr = 0LL;
  if (!posix_memalign(&__memptr, 8uLL, 0x58uLL))
  {
    uint64_t result = (uint64_t)__memptr;
    if (__memptr) {
      goto LABEL_3;
    }
  }

  id v2 = (os_log_s *)__nwlog_obj();
  os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
  int v5 = 136446722;
  id v6 = "strict_memalign";
  __int16 v7 = 2048;
  uint64_t v8 = 8LL;
  __int16 v9 = 2048;
  uint64_t v10 = 88LL;
  id v3 = (void *)_os_log_send_and_compose_impl();
  uint64_t result = __nwlog_abort((uint64_t)v3);
  if (!(_DWORD)result)
  {
    free(v3);
    uint64_t result = (uint64_t)__memptr;
LABEL_3:
    *(void *)(result + 80) = 0LL;
    *(_OWORD *)(result + 4_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(void *)(result + 16) = &g_recorder_protocol_identifier;
    *(void *)(result + 24) = &g_recorder_protocol_callbacks;
    *(void *)(result + 40) = result;
    return result;
  }

  __break(1u);
  return result;
}

uint64_t ___ZL43nw_protocol_recorder_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke( uint64_t a1, uint64_t a2)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  int v25 = 0;
  if (!nw_frame_unclaimed_bytes(a2, &v25) || !v25) {
    return 1LL;
  }
  if (pcap_ng_block_alloc_delayInitStub(v3))
  {
    pcap_ng_block_reset_delayInitStub(v4);
    enhanced_packet_fields_uint64_t delayInitStub = pcap_ng_get_enhanced_packet_fields_delayInitStub(v5);
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 64LL);
    uint64_t v8 = mach_continuous_time();
    if (v8 <= 1) {
      uint64_t v9 = 1LL;
    }
    else {
      uint64_t v9 = v8;
    }
    *(_DWORD *)(enhanced_packet_fields_delayInitStub + 4) = nw_delta_nanos(v7, v9) / 0x3B9ACA00uLL;
    uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 64LL);
    uint64_t v11 = mach_continuous_time();
    if (v11 <= 1) {
      uint64_t v12 = 1LL;
    }
    else {
      uint64_t v12 = v11;
    }
    *(_DWORD *)(enhanced_packet_fields_delayInitStub + _Block_object_dispose(va, 8) = nw_delta_nanos(v10, v12) / 0xF4240uLL;
    pcap_ng_block_packet_set_data_delayInitStub(v13);
    pcap_ng_dump_block_delayInitStub(v14);
    pcap_ng_free_block_delayInitStub(v15);
    return 1LL;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)unsigned int buf = 136446466;
  uint32_t v27 = "nw_protocol_recorder_finalize_output_frames_block_invoke";
  __int16 v28 = 1024;
  int v29 = v25 + 2048;
  char v16 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (__nwlog_fault(v16, &type, &v23))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v17 = (os_log_s *)gLogObj;
      os_log_type_t v18 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_25;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      uint32_t v27 = "nw_protocol_recorder_finalize_output_frames_block_invoke";
      __int16 v28 = 1024;
      int v29 = v25 + 2048;
      char v19 = "%{public}s pcap_ng_block_alloc(%u) failed";
      goto LABEL_24;
    }

    if (!v23)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v17 = (os_log_s *)gLogObj;
      os_log_type_t v18 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_25;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      uint32_t v27 = "nw_protocol_recorder_finalize_output_frames_block_invoke";
      __int16 v28 = 1024;
      int v29 = v25 + 2048;
      char v19 = "%{public}s pcap_ng_block_alloc(%u) failed, backtrace limit exceeded";
      goto LABEL_24;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v17 = (os_log_s *)gLogObj;
    os_log_type_t v18 = type;
    BOOL v21 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)unsigned int buf = 136446722;
        uint32_t v27 = "nw_protocol_recorder_finalize_output_frames_block_invoke";
        __int16 v28 = 1024;
        int v29 = v25 + 2048;
        __int16 v30 = 2082;
        uint64_t v31 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v17,  v18,  "%{public}s pcap_ng_block_alloc(%u) failed, dumping backtrace:%{public}s",  buf,  0x1Cu);
      }

      free(backtrace_string);
      goto LABEL_25;
    }

    if (v21)
    {
      *(_DWORD *)unsigned int buf = 136446466;
      uint32_t v27 = "nw_protocol_recorder_finalize_output_frames_block_invoke";
      __int16 v28 = 1024;
      int v29 = v25 + 2048;
      char v19 = "%{public}s pcap_ng_block_alloc(%u) failed, no backtrace";
LABEL_24:
      _os_log_impl(&dword_181A5C000, v17, v18, v19, buf, 0x12u);
    }
  }

uint64_t ___ZL37nw_protocol_recorder_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke( uint64_t a1, uint64_t a2)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  int v25 = 0;
  if (!nw_frame_unclaimed_bytes(a2, &v25) || !v25) {
    return 1LL;
  }
  if (pcap_ng_block_alloc_delayInitStub(v3))
  {
    pcap_ng_block_reset_delayInitStub(v4);
    enhanced_packet_fields_uint64_t delayInitStub = pcap_ng_get_enhanced_packet_fields_delayInitStub(v5);
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 64LL);
    uint64_t v8 = mach_continuous_time();
    if (v8 <= 1) {
      uint64_t v9 = 1LL;
    }
    else {
      uint64_t v9 = v8;
    }
    *(_DWORD *)(enhanced_packet_fields_delayInitStub + 4) = nw_delta_nanos(v7, v9) / 0x3B9ACA00uLL;
    uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 64LL);
    uint64_t v11 = mach_continuous_time();
    if (v11 <= 1) {
      uint64_t v12 = 1LL;
    }
    else {
      uint64_t v12 = v11;
    }
    *(_DWORD *)(enhanced_packet_fields_delayInitStub + _Block_object_dispose(va, 8) = nw_delta_nanos(v10, v12) / 0xF4240uLL;
    pcap_ng_block_packet_set_data_delayInitStub(v13);
    pcap_ng_dump_block_delayInitStub(v14);
    pcap_ng_free_block_delayInitStub(v15);
    return 1LL;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)unsigned int buf = 136446466;
  uint32_t v27 = "nw_protocol_recorder_get_input_frames_block_invoke";
  __int16 v28 = 1024;
  int v29 = v25 + 2048;
  char v16 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (__nwlog_fault(v16, &type, &v23))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v17 = (os_log_s *)gLogObj;
      os_log_type_t v18 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_25;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      uint32_t v27 = "nw_protocol_recorder_get_input_frames_block_invoke";
      __int16 v28 = 1024;
      int v29 = v25 + 2048;
      char v19 = "%{public}s pcap_ng_block_alloc(%u) failed";
      goto LABEL_24;
    }

    if (!v23)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v17 = (os_log_s *)gLogObj;
      os_log_type_t v18 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_25;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      uint32_t v27 = "nw_protocol_recorder_get_input_frames_block_invoke";
      __int16 v28 = 1024;
      int v29 = v25 + 2048;
      char v19 = "%{public}s pcap_ng_block_alloc(%u) failed, backtrace limit exceeded";
      goto LABEL_24;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v17 = (os_log_s *)gLogObj;
    os_log_type_t v18 = type;
    BOOL v21 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)unsigned int buf = 136446722;
        uint32_t v27 = "nw_protocol_recorder_get_input_frames_block_invoke";
        __int16 v28 = 1024;
        int v29 = v25 + 2048;
        __int16 v30 = 2082;
        uint64_t v31 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v17,  v18,  "%{public}s pcap_ng_block_alloc(%u) failed, dumping backtrace:%{public}s",  buf,  0x1Cu);
      }

      free(backtrace_string);
      goto LABEL_25;
    }

    if (v21)
    {
      *(_DWORD *)unsigned int buf = 136446466;
      uint32_t v27 = "nw_protocol_recorder_get_input_frames_block_invoke";
      __int16 v28 = 1024;
      int v29 = v25 + 2048;
      char v19 = "%{public}s pcap_ng_block_alloc(%u) failed, no backtrace";
LABEL_24:
      _os_log_impl(&dword_181A5C000, v17, v18, v19, buf, 0x12u);
    }
  }

BOOL nw_http_oblivious_config_is_valid(unsigned __int16 *a1, uint64_t a2)
{
  return nw_http_oblivious_config_select(a1, a2, 0LL) != 0LL;
}

unsigned __int16 *nw_http_oblivious_config_select(unsigned __int16 *a1, uint64_t a2, void *a3)
{
  double v3 = 0LL;
  uint64_t v38 = *MEMORY[0x1895F89C0];
  if (!a1) {
    return v3;
  }
  unint64_t v4 = a2;
  if (*(unsigned __int16 *)((char *)a1 + 1) == 0x2000)
  {
    if (a2 < 45) {
      goto LABEL_7;
    }
    unint64_t v17 = (unint64_t)a1 + a2;
    os_log_type_t v18 = (char *)a1 + 45;
    char v19 = (unsigned __int16 *)((char *)a1 + 41);
    while (1)
    {
      os_log_type_t v20 = v18;
      if (*v19 == 256)
      {
        int v21 = (unsigned __int16)v19[1];
        if (v21 == 256 || (unint64_t)v20 >= v17)
        {
          if (v21 != 256) {
            goto LABEL_7;
          }
LABEL_40:
          if (a3) {
            *a3 = a2;
          }
          return a1;
        }
      }

      else if ((unint64_t)v18 >= v17)
      {
        goto LABEL_7;
      }

      os_log_type_t v18 = (char *)(v20 + 2);
      char v19 = v20;
    }
  }

  while (1)
  {
LABEL_7:
    double v3 = a1 + 1;
    unint64_t v5 = bswap32(*a1) >> 16;
    unint64_t v6 = v4 - 2;
    if (v4 - 2 < v5) {
      return 0LL;
    }
LABEL_23:
    unint64_t v4 = v6 - v5;
    if (v6 < v5)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)unsigned int buf = 136446978;
      int v29 = "nw_http_oblivious_config_select";
      __int16 v30 = 2082;
      uint64_t v31 = "remaining_length";
      __int16 v32 = 2048;
      unint64_t v33 = v5;
      __int16 v34 = 2048;
      unint64_t v35 = v4;
      double v13 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v26 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        double v14 = (os_log_s *)gLogObj;
        os_log_type_t v15 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)unsigned int buf = 136446978;
          int v29 = "nw_http_oblivious_config_select";
          __int16 v30 = 2082;
          uint64_t v31 = "remaining_length";
          __int16 v32 = 2048;
          unint64_t v33 = v5;
          __int16 v34 = 2048;
          unint64_t v35 = v4;
          char v16 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
          goto LABEL_55;
        }

        goto LABEL_56;
      }

      if (v26)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        double v14 = (os_log_s *)gLogObj;
        os_log_type_t v15 = type;
        BOOL v24 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (backtrace_string)
        {
          if (v24)
          {
            *(_DWORD *)unsigned int buf = 136447234;
            int v29 = "nw_http_oblivious_config_select";
            __int16 v30 = 2082;
            uint64_t v31 = "remaining_length";
            __int16 v32 = 2048;
            unint64_t v33 = v5;
            __int16 v34 = 2048;
            unint64_t v35 = v4;
            __int16 v36 = 2082;
            __int16 v37 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v14,  v15,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
          }

          free(backtrace_string);
          goto LABEL_56;
        }

        if (!v24)
        {
LABEL_56:
          if (v13) {
            free(v13);
          }
          return 0LL;
        }

        *(_DWORD *)unsigned int buf = 136446978;
        int v29 = "nw_http_oblivious_config_select";
        __int16 v30 = 2082;
        uint64_t v31 = "remaining_length";
        __int16 v32 = 2048;
        unint64_t v33 = v5;
        __int16 v34 = 2048;
        unint64_t v35 = v4;
        char v16 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        double v14 = (os_log_s *)gLogObj;
        os_log_type_t v15 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_56;
        }
        *(_DWORD *)unsigned int buf = 136446978;
        int v29 = "nw_http_oblivious_config_select";
        __int16 v30 = 2082;
        uint64_t v31 = "remaining_length";
        __int16 v32 = 2048;
        unint64_t v33 = v5;
        __int16 v34 = 2048;
        unint64_t v35 = v4;
        char v16 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
      }

BOOL nw_http_encrypt_oblivious_request( const void *a1, size_t a2, const char *a3, unsigned __int16 *a4, uint64_t a5, char **a6, void *a7, void *a8, size_t *a9, size_t *a10)
{
  uint64_t v88 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
    BOOL v44 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v80) = 0;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v80)
      {
        int v45 = (os_log_s *)__nwlog_obj();
        os_log_type_t v46 = type[0];
        if (os_log_type_enabled(v45, type[0]))
        {
          *(_DWORD *)unsigned int buf = 136446210;
          os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
          uint32_t v47 = "%{public}s called with null message_buffer, backtrace limit exceeded";
          goto LABEL_168;
        }

        goto LABEL_169;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      int v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = type[0];
      BOOL v49 = os_log_type_enabled(v45, type[0]);
      if (!backtrace_string)
      {
        if (v49)
        {
          *(_DWORD *)unsigned int buf = 136446210;
          os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
          uint32_t v47 = "%{public}s called with null message_buffer, no backtrace";
          goto LABEL_168;
        }

        goto LABEL_169;
      }

      if (!v49) {
        goto LABEL_119;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
      __int16 v84 = 2082;
      uint64_t v85 = (uint64_t)backtrace_string;
      os_log_type_t v50 = "%{public}s called with null message_buffer, dumping backtrace:%{public}s";
      goto LABEL_118;
    }

    int v45 = (os_log_s *)__nwlog_obj();
    os_log_type_t v46 = type[0];
    if (!os_log_type_enabled(v45, type[0])) {
      goto LABEL_169;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
    uint32_t v47 = "%{public}s called with null message_buffer";
LABEL_168:
    _os_log_impl(&dword_181A5C000, v45, v46, v47, buf, 0xCu);
    goto LABEL_169;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
    BOOL v44 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v80) = 0;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v80)
      {
        int v45 = (os_log_s *)__nwlog_obj();
        os_log_type_t v46 = type[0];
        if (os_log_type_enabled(v45, type[0]))
        {
          *(_DWORD *)unsigned int buf = 136446210;
          os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
          uint32_t v47 = "%{public}s called with null message_length, backtrace limit exceeded";
          goto LABEL_168;
        }

        goto LABEL_169;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      int v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = type[0];
      BOOL v51 = os_log_type_enabled(v45, type[0]);
      if (!backtrace_string)
      {
        if (v51)
        {
          *(_DWORD *)unsigned int buf = 136446210;
          os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
          uint32_t v47 = "%{public}s called with null message_length, no backtrace";
          goto LABEL_168;
        }

        goto LABEL_169;
      }

      if (!v51) {
        goto LABEL_119;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
      __int16 v84 = 2082;
      uint64_t v85 = (uint64_t)backtrace_string;
      os_log_type_t v50 = "%{public}s called with null message_length, dumping backtrace:%{public}s";
      goto LABEL_118;
    }

    int v45 = (os_log_s *)__nwlog_obj();
    os_log_type_t v46 = type[0];
    if (!os_log_type_enabled(v45, type[0])) {
      goto LABEL_169;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
    uint32_t v47 = "%{public}s called with null message_length";
    goto LABEL_168;
  }

  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
    BOOL v44 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v80) = 0;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v80)
      {
        int v45 = (os_log_s *)__nwlog_obj();
        os_log_type_t v46 = type[0];
        if (os_log_type_enabled(v45, type[0]))
        {
          *(_DWORD *)unsigned int buf = 136446210;
          os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
          uint32_t v47 = "%{public}s called with null media_type, backtrace limit exceeded";
          goto LABEL_168;
        }

        goto LABEL_169;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      int v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = type[0];
      BOOL v52 = os_log_type_enabled(v45, type[0]);
      if (!backtrace_string)
      {
        if (v52)
        {
          *(_DWORD *)unsigned int buf = 136446210;
          os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
          uint32_t v47 = "%{public}s called with null media_type, no backtrace";
          goto LABEL_168;
        }

        goto LABEL_169;
      }

      if (!v52) {
        goto LABEL_119;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
      __int16 v84 = 2082;
      uint64_t v85 = (uint64_t)backtrace_string;
      os_log_type_t v50 = "%{public}s called with null media_type, dumping backtrace:%{public}s";
      goto LABEL_118;
    }

    int v45 = (os_log_s *)__nwlog_obj();
    os_log_type_t v46 = type[0];
    if (!os_log_type_enabled(v45, type[0])) {
      goto LABEL_169;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
    uint32_t v47 = "%{public}s called with null media_type";
    goto LABEL_168;
  }

  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
    BOOL v44 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v80) = 0;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v80)
      {
        int v45 = (os_log_s *)__nwlog_obj();
        os_log_type_t v46 = type[0];
        if (os_log_type_enabled(v45, type[0]))
        {
          *(_DWORD *)unsigned int buf = 136446210;
          os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
          uint32_t v47 = "%{public}s called with null config_buffer, backtrace limit exceeded";
          goto LABEL_168;
        }

        goto LABEL_169;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      int v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = type[0];
      BOOL v53 = os_log_type_enabled(v45, type[0]);
      if (!backtrace_string)
      {
        if (v53)
        {
          *(_DWORD *)unsigned int buf = 136446210;
          os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
          uint32_t v47 = "%{public}s called with null config_buffer, no backtrace";
          goto LABEL_168;
        }

        goto LABEL_169;
      }

      if (!v53) {
        goto LABEL_119;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
      __int16 v84 = 2082;
      uint64_t v85 = (uint64_t)backtrace_string;
      os_log_type_t v50 = "%{public}s called with null config_buffer, dumping backtrace:%{public}s";
      goto LABEL_118;
    }

    int v45 = (os_log_s *)__nwlog_obj();
    os_log_type_t v46 = type[0];
    if (!os_log_type_enabled(v45, type[0])) {
      goto LABEL_169;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
    uint32_t v47 = "%{public}s called with null config_buffer";
    goto LABEL_168;
  }

  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
    BOOL v44 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v80) = 0;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v80)
      {
        int v45 = (os_log_s *)__nwlog_obj();
        os_log_type_t v46 = type[0];
        if (os_log_type_enabled(v45, type[0]))
        {
          *(_DWORD *)unsigned int buf = 136446210;
          os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
          uint32_t v47 = "%{public}s called with null in_config_length, backtrace limit exceeded";
          goto LABEL_168;
        }

        goto LABEL_169;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      int v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = type[0];
      BOOL v54 = os_log_type_enabled(v45, type[0]);
      if (!backtrace_string)
      {
        if (v54)
        {
          *(_DWORD *)unsigned int buf = 136446210;
          os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
          uint32_t v47 = "%{public}s called with null in_config_length, no backtrace";
          goto LABEL_168;
        }

        goto LABEL_169;
      }

      if (!v54) {
        goto LABEL_119;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
      __int16 v84 = 2082;
      uint64_t v85 = (uint64_t)backtrace_string;
      os_log_type_t v50 = "%{public}s called with null in_config_length, dumping backtrace:%{public}s";
      goto LABEL_118;
    }

    int v45 = (os_log_s *)__nwlog_obj();
    os_log_type_t v46 = type[0];
    if (!os_log_type_enabled(v45, type[0])) {
      goto LABEL_169;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
    uint32_t v47 = "%{public}s called with null in_config_length";
    goto LABEL_168;
  }

  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
    BOOL v44 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v80) = 0;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v80)
      {
        int v45 = (os_log_s *)__nwlog_obj();
        os_log_type_t v46 = type[0];
        if (os_log_type_enabled(v45, type[0]))
        {
          *(_DWORD *)unsigned int buf = 136446210;
          os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
          uint32_t v47 = "%{public}s called with null out_context, backtrace limit exceeded";
          goto LABEL_168;
        }

        goto LABEL_169;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      int v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = type[0];
      BOOL v55 = os_log_type_enabled(v45, type[0]);
      if (!backtrace_string)
      {
        if (v55)
        {
          *(_DWORD *)unsigned int buf = 136446210;
          os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
          uint32_t v47 = "%{public}s called with null out_context, no backtrace";
          goto LABEL_168;
        }

        goto LABEL_169;
      }

      if (!v55) {
        goto LABEL_119;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
      __int16 v84 = 2082;
      uint64_t v85 = (uint64_t)backtrace_string;
      os_log_type_t v50 = "%{public}s called with null out_context, dumping backtrace:%{public}s";
      goto LABEL_118;
    }

    int v45 = (os_log_s *)__nwlog_obj();
    os_log_type_t v46 = type[0];
    if (!os_log_type_enabled(v45, type[0])) {
      goto LABEL_169;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
    uint32_t v47 = "%{public}s called with null out_context";
    goto LABEL_168;
  }

  if (!a7)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
    BOOL v44 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v80) = 0;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v80)
      {
        int v45 = (os_log_s *)__nwlog_obj();
        os_log_type_t v46 = type[0];
        if (os_log_type_enabled(v45, type[0]))
        {
          *(_DWORD *)unsigned int buf = 136446210;
          os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
          uint32_t v47 = "%{public}s called with null out_context_length, backtrace limit exceeded";
          goto LABEL_168;
        }

        goto LABEL_169;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      int v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = type[0];
      BOOL v56 = os_log_type_enabled(v45, type[0]);
      if (!backtrace_string)
      {
        if (v56)
        {
          *(_DWORD *)unsigned int buf = 136446210;
          os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
          uint32_t v47 = "%{public}s called with null out_context_length, no backtrace";
          goto LABEL_168;
        }

        goto LABEL_169;
      }

      if (!v56) {
        goto LABEL_119;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
      __int16 v84 = 2082;
      uint64_t v85 = (uint64_t)backtrace_string;
      os_log_type_t v50 = "%{public}s called with null out_context_length, dumping backtrace:%{public}s";
      goto LABEL_118;
    }

    int v45 = (os_log_s *)__nwlog_obj();
    os_log_type_t v46 = type[0];
    if (!os_log_type_enabled(v45, type[0])) {
      goto LABEL_169;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
    uint32_t v47 = "%{public}s called with null out_context_length";
    goto LABEL_168;
  }

  if (!a8)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
    BOOL v44 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v80) = 0;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v80)
      {
        int v45 = (os_log_s *)__nwlog_obj();
        os_log_type_t v46 = type[0];
        if (os_log_type_enabled(v45, type[0]))
        {
          *(_DWORD *)unsigned int buf = 136446210;
          os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
          uint32_t v47 = "%{public}s called with null out_request_enc, backtrace limit exceeded";
          goto LABEL_168;
        }

        goto LABEL_169;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      int v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = type[0];
      BOOL v57 = os_log_type_enabled(v45, type[0]);
      if (!backtrace_string)
      {
        if (v57)
        {
          *(_DWORD *)unsigned int buf = 136446210;
          os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
          uint32_t v47 = "%{public}s called with null out_request_enc, no backtrace";
          goto LABEL_168;
        }

        goto LABEL_169;
      }

      if (!v57) {
        goto LABEL_119;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
      __int16 v84 = 2082;
      uint64_t v85 = (uint64_t)backtrace_string;
      os_log_type_t v50 = "%{public}s called with null out_request_enc, dumping backtrace:%{public}s";
      goto LABEL_118;
    }

    int v45 = (os_log_s *)__nwlog_obj();
    os_log_type_t v46 = type[0];
    if (!os_log_type_enabled(v45, type[0])) {
      goto LABEL_169;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
    uint32_t v47 = "%{public}s called with null out_request_enc";
    goto LABEL_168;
  }

  if (!a9)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
    BOOL v44 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v80) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      int v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = type[0];
      if (!os_log_type_enabled(v45, type[0])) {
        goto LABEL_169;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
      uint32_t v47 = "%{public}s called with null out_request_enc_length";
      goto LABEL_168;
    }

    if (!(_BYTE)v80)
    {
      int v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = type[0];
      if (os_log_type_enabled(v45, type[0]))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
        uint32_t v47 = "%{public}s called with null out_request_enc_length, backtrace limit exceeded";
        goto LABEL_168;
      }

      goto LABEL_169;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v45 = (os_log_s *)__nwlog_obj();
    os_log_type_t v46 = type[0];
    BOOL v58 = os_log_type_enabled(v45, type[0]);
    if (!backtrace_string)
    {
      if (v58)
      {
        *(_DWORD *)unsigned int buf = 136446210;
        os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
        uint32_t v47 = "%{public}s called with null out_request_enc_length, no backtrace";
        goto LABEL_168;
      }

      goto LABEL_169;
    }

    if (!v58) {
      goto LABEL_119;
    }
    *(_DWORD *)unsigned int buf = 136446466;
    os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
    __int16 v84 = 2082;
    uint64_t v85 = (uint64_t)backtrace_string;
    os_log_type_t v50 = "%{public}s called with null out_request_enc_length, dumping backtrace:%{public}s";
LABEL_118:
    _os_log_impl(&dword_181A5C000, v45, v46, v50, buf, 0x16u);
    goto LABEL_119;
  }

  if (!a10)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
    BOOL v44 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v80) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      int v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = type[0];
      if (os_log_type_enabled(v45, type[0]))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        os_log_type_t v83 = "nw_http_encrypt_oblivious_request";
        uint32_t v47 = "%{public}s called with null out_encrypted_length";
        goto LABEL_168;
      }

BOOL nw_http_encrypt_chunked_oblivious_request_header( const char *a1, unsigned __int16 *a2, uint64_t a3, char **a4, void *a5, void *a6, size_t *a7, void *a8)
{
  uint64_t v70 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v65 = "nw_http_encrypt_chunked_oblivious_request_header";
    uint64_t v33 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v62) = 0;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v62)
      {
        __int16 v34 = (os_log_s *)__nwlog_obj();
        os_log_type_t v35 = type[0];
        if (os_log_type_enabled(v34, type[0]))
        {
          *(_DWORD *)unsigned int buf = 136446210;
          BOOL v65 = "nw_http_encrypt_chunked_oblivious_request_header";
          int v36 = "%{public}s called with null media_type, backtrace limit exceeded";
          goto LABEL_138;
        }

        goto LABEL_139;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v34 = (os_log_s *)__nwlog_obj();
      os_log_type_t v35 = type[0];
      BOOL v38 = os_log_type_enabled(v34, type[0]);
      if (!backtrace_string)
      {
        if (v38)
        {
          *(_DWORD *)unsigned int buf = 136446210;
          BOOL v65 = "nw_http_encrypt_chunked_oblivious_request_header";
          int v36 = "%{public}s called with null media_type, no backtrace";
          goto LABEL_138;
        }

        goto LABEL_139;
      }

      if (!v38) {
        goto LABEL_97;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      BOOL v65 = "nw_http_encrypt_chunked_oblivious_request_header";
      __int16 v66 = 2082;
      uint64_t v67 = (uint64_t)backtrace_string;
      uint64_t v39 = "%{public}s called with null media_type, dumping backtrace:%{public}s";
      goto LABEL_96;
    }

    __int16 v34 = (os_log_s *)__nwlog_obj();
    os_log_type_t v35 = type[0];
    if (!os_log_type_enabled(v34, type[0])) {
      goto LABEL_139;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v65 = "nw_http_encrypt_chunked_oblivious_request_header";
    int v36 = "%{public}s called with null media_type";
LABEL_138:
    _os_log_impl(&dword_181A5C000, v34, v35, v36, buf, 0xCu);
    goto LABEL_139;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v65 = "nw_http_encrypt_chunked_oblivious_request_header";
    uint64_t v33 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v62) = 0;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v62)
      {
        __int16 v34 = (os_log_s *)__nwlog_obj();
        os_log_type_t v35 = type[0];
        if (os_log_type_enabled(v34, type[0]))
        {
          *(_DWORD *)unsigned int buf = 136446210;
          BOOL v65 = "nw_http_encrypt_chunked_oblivious_request_header";
          int v36 = "%{public}s called with null config_buffer, backtrace limit exceeded";
          goto LABEL_138;
        }

        goto LABEL_139;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v34 = (os_log_s *)__nwlog_obj();
      os_log_type_t v35 = type[0];
      BOOL v40 = os_log_type_enabled(v34, type[0]);
      if (!backtrace_string)
      {
        if (v40)
        {
          *(_DWORD *)unsigned int buf = 136446210;
          BOOL v65 = "nw_http_encrypt_chunked_oblivious_request_header";
          int v36 = "%{public}s called with null config_buffer, no backtrace";
          goto LABEL_138;
        }

        goto LABEL_139;
      }

      if (!v40) {
        goto LABEL_97;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      BOOL v65 = "nw_http_encrypt_chunked_oblivious_request_header";
      __int16 v66 = 2082;
      uint64_t v67 = (uint64_t)backtrace_string;
      uint64_t v39 = "%{public}s called with null config_buffer, dumping backtrace:%{public}s";
      goto LABEL_96;
    }

    __int16 v34 = (os_log_s *)__nwlog_obj();
    os_log_type_t v35 = type[0];
    if (!os_log_type_enabled(v34, type[0])) {
      goto LABEL_139;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v65 = "nw_http_encrypt_chunked_oblivious_request_header";
    int v36 = "%{public}s called with null config_buffer";
    goto LABEL_138;
  }

  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v65 = "nw_http_encrypt_chunked_oblivious_request_header";
    uint64_t v33 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v62) = 0;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v62)
      {
        __int16 v34 = (os_log_s *)__nwlog_obj();
        os_log_type_t v35 = type[0];
        if (os_log_type_enabled(v34, type[0]))
        {
          *(_DWORD *)unsigned int buf = 136446210;
          BOOL v65 = "nw_http_encrypt_chunked_oblivious_request_header";
          int v36 = "%{public}s called with null in_config_length, backtrace limit exceeded";
          goto LABEL_138;
        }

        goto LABEL_139;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v34 = (os_log_s *)__nwlog_obj();
      os_log_type_t v35 = type[0];
      BOOL v41 = os_log_type_enabled(v34, type[0]);
      if (!backtrace_string)
      {
        if (v41)
        {
          *(_DWORD *)unsigned int buf = 136446210;
          BOOL v65 = "nw_http_encrypt_chunked_oblivious_request_header";
          int v36 = "%{public}s called with null in_config_length, no backtrace";
          goto LABEL_138;
        }

        goto LABEL_139;
      }

      if (!v41) {
        goto LABEL_97;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      BOOL v65 = "nw_http_encrypt_chunked_oblivious_request_header";
      __int16 v66 = 2082;
      uint64_t v67 = (uint64_t)backtrace_string;
      uint64_t v39 = "%{public}s called with null in_config_length, dumping backtrace:%{public}s";
      goto LABEL_96;
    }

    __int16 v34 = (os_log_s *)__nwlog_obj();
    os_log_type_t v35 = type[0];
    if (!os_log_type_enabled(v34, type[0])) {
      goto LABEL_139;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v65 = "nw_http_encrypt_chunked_oblivious_request_header";
    int v36 = "%{public}s called with null in_config_length";
    goto LABEL_138;
  }

  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v65 = "nw_http_encrypt_chunked_oblivious_request_header";
    uint64_t v33 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v62) = 0;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v62)
      {
        __int16 v34 = (os_log_s *)__nwlog_obj();
        os_log_type_t v35 = type[0];
        if (os_log_type_enabled(v34, type[0]))
        {
          *(_DWORD *)unsigned int buf = 136446210;
          BOOL v65 = "nw_http_encrypt_chunked_oblivious_request_header";
          int v36 = "%{public}s called with null out_context, backtrace limit exceeded";
          goto LABEL_138;
        }

        goto LABEL_139;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v34 = (os_log_s *)__nwlog_obj();
      os_log_type_t v35 = type[0];
      BOOL v42 = os_log_type_enabled(v34, type[0]);
      if (!backtrace_string)
      {
        if (v42)
        {
          *(_DWORD *)unsigned int buf = 136446210;
          BOOL v65 = "nw_http_encrypt_chunked_oblivious_request_header";
          int v36 = "%{public}s called with null out_context, no backtrace";
          goto LABEL_138;
        }

        goto LABEL_139;
      }

      if (!v42) {
        goto LABEL_97;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      BOOL v65 = "nw_http_encrypt_chunked_oblivious_request_header";
      __int16 v66 = 2082;
      uint64_t v67 = (uint64_t)backtrace_string;
      uint64_t v39 = "%{public}s called with null out_context, dumping backtrace:%{public}s";
      goto LABEL_96;
    }

    __int16 v34 = (os_log_s *)__nwlog_obj();
    os_log_type_t v35 = type[0];
    if (!os_log_type_enabled(v34, type[0])) {
      goto LABEL_139;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v65 = "nw_http_encrypt_chunked_oblivious_request_header";
    int v36 = "%{public}s called with null out_context";
    goto LABEL_138;
  }

  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v65 = "nw_http_encrypt_chunked_oblivious_request_header";
    uint64_t v33 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v62) = 0;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v62)
      {
        __int16 v34 = (os_log_s *)__nwlog_obj();
        os_log_type_t v35 = type[0];
        if (os_log_type_enabled(v34, type[0]))
        {
          *(_DWORD *)unsigned int buf = 136446210;
          BOOL v65 = "nw_http_encrypt_chunked_oblivious_request_header";
          int v36 = "%{public}s called with null out_context_length, backtrace limit exceeded";
          goto LABEL_138;
        }

        goto LABEL_139;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v34 = (os_log_s *)__nwlog_obj();
      os_log_type_t v35 = type[0];
      BOOL v43 = os_log_type_enabled(v34, type[0]);
      if (!backtrace_string)
      {
        if (v43)
        {
          *(_DWORD *)unsigned int buf = 136446210;
          BOOL v65 = "nw_http_encrypt_chunked_oblivious_request_header";
          int v36 = "%{public}s called with null out_context_length, no backtrace";
          goto LABEL_138;
        }

        goto LABEL_139;
      }

      if (!v43) {
        goto LABEL_97;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      BOOL v65 = "nw_http_encrypt_chunked_oblivious_request_header";
      __int16 v66 = 2082;
      uint64_t v67 = (uint64_t)backtrace_string;
      uint64_t v39 = "%{public}s called with null out_context_length, dumping backtrace:%{public}s";
      goto LABEL_96;
    }

    __int16 v34 = (os_log_s *)__nwlog_obj();
    os_log_type_t v35 = type[0];
    if (!os_log_type_enabled(v34, type[0])) {
      goto LABEL_139;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v65 = "nw_http_encrypt_chunked_oblivious_request_header";
    int v36 = "%{public}s called with null out_context_length";
    goto LABEL_138;
  }

  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v65 = "nw_http_encrypt_chunked_oblivious_request_header";
    uint64_t v33 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v62) = 0;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!(_BYTE)v62)
      {
        __int16 v34 = (os_log_s *)__nwlog_obj();
        os_log_type_t v35 = type[0];
        if (os_log_type_enabled(v34, type[0]))
        {
          *(_DWORD *)unsigned int buf = 136446210;
          BOOL v65 = "nw_http_encrypt_chunked_oblivious_request_header";
          int v36 = "%{public}s called with null out_request_enc, backtrace limit exceeded";
          goto LABEL_138;
        }

        goto LABEL_139;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v34 = (os_log_s *)__nwlog_obj();
      os_log_type_t v35 = type[0];
      BOOL v44 = os_log_type_enabled(v34, type[0]);
      if (!backtrace_string)
      {
        if (v44)
        {
          *(_DWORD *)unsigned int buf = 136446210;
          BOOL v65 = "nw_http_encrypt_chunked_oblivious_request_header";
          int v36 = "%{public}s called with null out_request_enc, no backtrace";
          goto LABEL_138;
        }

        goto LABEL_139;
      }

      if (!v44) {
        goto LABEL_97;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      BOOL v65 = "nw_http_encrypt_chunked_oblivious_request_header";
      __int16 v66 = 2082;
      uint64_t v67 = (uint64_t)backtrace_string;
      uint64_t v39 = "%{public}s called with null out_request_enc, dumping backtrace:%{public}s";
      goto LABEL_96;
    }

    __int16 v34 = (os_log_s *)__nwlog_obj();
    os_log_type_t v35 = type[0];
    if (!os_log_type_enabled(v34, type[0])) {
      goto LABEL_139;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v65 = "nw_http_encrypt_chunked_oblivious_request_header";
    int v36 = "%{public}s called with null out_request_enc";
    goto LABEL_138;
  }

  if (!a7)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v65 = "nw_http_encrypt_chunked_oblivious_request_header";
    uint64_t v33 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v62) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __int16 v34 = (os_log_s *)__nwlog_obj();
      os_log_type_t v35 = type[0];
      if (!os_log_type_enabled(v34, type[0])) {
        goto LABEL_139;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      BOOL v65 = "nw_http_encrypt_chunked_oblivious_request_header";
      int v36 = "%{public}s called with null out_request_enc_length";
      goto LABEL_138;
    }

    if (!(_BYTE)v62)
    {
      __int16 v34 = (os_log_s *)__nwlog_obj();
      os_log_type_t v35 = type[0];
      if (os_log_type_enabled(v34, type[0]))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v65 = "nw_http_encrypt_chunked_oblivious_request_header";
        int v36 = "%{public}s called with null out_request_enc_length, backtrace limit exceeded";
        goto LABEL_138;
      }

      goto LABEL_139;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v34 = (os_log_s *)__nwlog_obj();
    os_log_type_t v35 = type[0];
    BOOL v45 = os_log_type_enabled(v34, type[0]);
    if (!backtrace_string)
    {
      if (v45)
      {
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v65 = "nw_http_encrypt_chunked_oblivious_request_header";
        int v36 = "%{public}s called with null out_request_enc_length, no backtrace";
        goto LABEL_138;
      }

      goto LABEL_139;
    }

    if (!v45) {
      goto LABEL_97;
    }
    *(_DWORD *)unsigned int buf = 136446466;
    BOOL v65 = "nw_http_encrypt_chunked_oblivious_request_header";
    __int16 v66 = 2082;
    uint64_t v67 = (uint64_t)backtrace_string;
    uint64_t v39 = "%{public}s called with null out_request_enc_length, dumping backtrace:%{public}s";
LABEL_96:
    _os_log_impl(&dword_181A5C000, v34, v35, v39, buf, 0x16u);
    goto LABEL_97;
  }

  if (!a8)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v65 = "nw_http_encrypt_chunked_oblivious_request_header";
    uint64_t v33 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v62) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __int16 v34 = (os_log_s *)__nwlog_obj();
      os_log_type_t v35 = type[0];
      if (os_log_type_enabled(v34, type[0]))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v65 = "nw_http_encrypt_chunked_oblivious_request_header";
        int v36 = "%{public}s called with null out_header_length";
        goto LABEL_138;
      }

BOOL nw_http_encrypt_chunked_oblivious_request_chunk( const void *a1, size_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, size_t *a8)
{
  uint64_t v42 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    int v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
    unint64_t v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v34)
      {
        size_t v18 = (os_log_s *)__nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)unsigned int buf = 136446210;
          int v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
          uint64_t v20 = "%{public}s called with null message_buffer, backtrace limit exceeded";
          goto LABEL_107;
        }

        goto LABEL_108;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v26 = os_log_type_enabled(v18, type);
      if (!backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)unsigned int buf = 136446210;
          int v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
          uint64_t v20 = "%{public}s called with null message_buffer, no backtrace";
          goto LABEL_107;
        }

        goto LABEL_108;
      }

      if (!v26) {
        goto LABEL_78;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      int v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
      __int16 v38 = 2082;
      uint64_t v39 = (uint64_t)backtrace_string;
      size_t v27 = "%{public}s called with null message_buffer, dumping backtrace:%{public}s";
      goto LABEL_77;
    }

    size_t v18 = (os_log_s *)__nwlog_obj();
    os_log_type_t v19 = type;
    if (!os_log_type_enabled(v18, type)) {
      goto LABEL_108;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    int v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
    uint64_t v20 = "%{public}s called with null message_buffer";
LABEL_107:
    _os_log_impl(&dword_181A5C000, v18, v19, v20, buf, 0xCu);
    goto LABEL_108;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    int v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
    unint64_t v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v34)
      {
        size_t v18 = (os_log_s *)__nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)unsigned int buf = 136446210;
          int v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
          uint64_t v20 = "%{public}s called with null message_length, backtrace limit exceeded";
          goto LABEL_107;
        }

        goto LABEL_108;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v28 = os_log_type_enabled(v18, type);
      if (!backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)unsigned int buf = 136446210;
          int v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
          uint64_t v20 = "%{public}s called with null message_length, no backtrace";
          goto LABEL_107;
        }

        goto LABEL_108;
      }

      if (!v28) {
        goto LABEL_78;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      int v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
      __int16 v38 = 2082;
      uint64_t v39 = (uint64_t)backtrace_string;
      size_t v27 = "%{public}s called with null message_length, dumping backtrace:%{public}s";
      goto LABEL_77;
    }

    size_t v18 = (os_log_s *)__nwlog_obj();
    os_log_type_t v19 = type;
    if (!os_log_type_enabled(v18, type)) {
      goto LABEL_108;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    int v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
    uint64_t v20 = "%{public}s called with null message_length";
    goto LABEL_107;
  }

  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    int v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
    unint64_t v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v34)
      {
        size_t v18 = (os_log_s *)__nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)unsigned int buf = 136446210;
          int v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
          uint64_t v20 = "%{public}s called with null request_context, backtrace limit exceeded";
          goto LABEL_107;
        }

        goto LABEL_108;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v29 = os_log_type_enabled(v18, type);
      if (!backtrace_string)
      {
        if (v29)
        {
          *(_DWORD *)unsigned int buf = 136446210;
          int v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
          uint64_t v20 = "%{public}s called with null request_context, no backtrace";
          goto LABEL_107;
        }

        goto LABEL_108;
      }

      if (!v29) {
        goto LABEL_78;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      int v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
      __int16 v38 = 2082;
      uint64_t v39 = (uint64_t)backtrace_string;
      size_t v27 = "%{public}s called with null request_context, dumping backtrace:%{public}s";
      goto LABEL_77;
    }

    size_t v18 = (os_log_s *)__nwlog_obj();
    os_log_type_t v19 = type;
    if (!os_log_type_enabled(v18, type)) {
      goto LABEL_108;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    int v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
    uint64_t v20 = "%{public}s called with null request_context";
    goto LABEL_107;
  }

  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    int v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
    unint64_t v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v34)
      {
        size_t v18 = (os_log_s *)__nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)unsigned int buf = 136446210;
          int v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
          uint64_t v20 = "%{public}s called with null request_context_length, backtrace limit exceeded";
          goto LABEL_107;
        }

        goto LABEL_108;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v30 = os_log_type_enabled(v18, type);
      if (!backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)unsigned int buf = 136446210;
          int v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
          uint64_t v20 = "%{public}s called with null request_context_length, no backtrace";
          goto LABEL_107;
        }

        goto LABEL_108;
      }

      if (!v30) {
        goto LABEL_78;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      int v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
      __int16 v38 = 2082;
      uint64_t v39 = (uint64_t)backtrace_string;
      size_t v27 = "%{public}s called with null request_context_length, dumping backtrace:%{public}s";
      goto LABEL_77;
    }

    size_t v18 = (os_log_s *)__nwlog_obj();
    os_log_type_t v19 = type;
    if (!os_log_type_enabled(v18, type)) {
      goto LABEL_108;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    int v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
    uint64_t v20 = "%{public}s called with null request_context_length";
    goto LABEL_107;
  }

  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    int v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
    unint64_t v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v34)
      {
        size_t v18 = (os_log_s *)__nwlog_obj();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)unsigned int buf = 136446210;
          int v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
          uint64_t v20 = "%{public}s called with null request_enc, backtrace limit exceeded";
          goto LABEL_107;
        }

        goto LABEL_108;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v31 = os_log_type_enabled(v18, type);
      if (!backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)unsigned int buf = 136446210;
          int v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
          uint64_t v20 = "%{public}s called with null request_enc, no backtrace";
          goto LABEL_107;
        }

        goto LABEL_108;
      }

      if (!v31) {
        goto LABEL_78;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      int v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
      __int16 v38 = 2082;
      uint64_t v39 = (uint64_t)backtrace_string;
      size_t v27 = "%{public}s called with null request_enc, dumping backtrace:%{public}s";
      goto LABEL_77;
    }

    size_t v18 = (os_log_s *)__nwlog_obj();
    os_log_type_t v19 = type;
    if (!os_log_type_enabled(v18, type)) {
      goto LABEL_108;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    int v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
    uint64_t v20 = "%{public}s called with null request_enc";
    goto LABEL_107;
  }

  if (!a7)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    int v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
    unint64_t v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_108;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      int v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
      uint64_t v20 = "%{public}s called with null request_enc_length";
      goto LABEL_107;
    }

    if (!v34)
    {
      size_t v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        int v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
        uint64_t v20 = "%{public}s called with null request_enc_length, backtrace limit exceeded";
        goto LABEL_107;
      }

      goto LABEL_108;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    size_t v18 = (os_log_s *)__nwlog_obj();
    os_log_type_t v19 = type;
    BOOL v32 = os_log_type_enabled(v18, type);
    if (!backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)unsigned int buf = 136446210;
        int v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
        uint64_t v20 = "%{public}s called with null request_enc_length, no backtrace";
        goto LABEL_107;
      }

      goto LABEL_108;
    }

    if (!v32) {
      goto LABEL_78;
    }
    *(_DWORD *)unsigned int buf = 136446466;
    int v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
    __int16 v38 = 2082;
    uint64_t v39 = (uint64_t)backtrace_string;
    size_t v27 = "%{public}s called with null request_enc_length, dumping backtrace:%{public}s";
LABEL_77:
    _os_log_impl(&dword_181A5C000, v18, v19, v27, buf, 0x16u);
    goto LABEL_78;
  }

  if (!a8)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    int v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
    unint64_t v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v34 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v18 = (os_log_s *)__nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        int v37 = "nw_http_encrypt_chunked_oblivious_request_chunk";
        uint64_t v20 = "%{public}s called with null out_encrypted_length";
        goto LABEL_107;
      }

BOOL nw_http_decrypt_oblivious_request( uint64_t a1, unint64_t a2, char *__s, uint64_t a4, uint64_t a5, char **a6, void *a7, void *a8, size_t *a9, size_t *a10)
{
  uint64_t v87 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    uint64_t v82 = "nw_http_decrypt_oblivious_request";
    __int16 v40 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v79 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v79)
      {
        size_t v41 = (os_log_s *)__nwlog_obj();
        os_log_type_t v42 = type;
        if (!os_log_type_enabled(v41, type)) {
          goto LABEL_206;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        uint64_t v82 = "nw_http_decrypt_oblivious_request";
        BOOL v43 = "%{public}s called with null request_buffer, backtrace limit exceeded";
        goto LABEL_205;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v41 = (os_log_s *)__nwlog_obj();
      os_log_type_t v42 = type;
      BOOL v45 = os_log_type_enabled(v41, type);
      if (!backtrace_string)
      {
        if (!v45) {
          goto LABEL_206;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        uint64_t v82 = "nw_http_decrypt_oblivious_request";
        BOOL v43 = "%{public}s called with null request_buffer, no backtrace";
        goto LABEL_205;
      }

      if (!v45) {
        goto LABEL_132;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      uint64_t v82 = "nw_http_decrypt_oblivious_request";
      __int16 v83 = 2082;
      uint64_t v84 = (uint64_t)backtrace_string;
      BOOL v46 = "%{public}s called with null request_buffer, dumping backtrace:%{public}s";
      goto LABEL_131;
    }

    size_t v41 = (os_log_s *)__nwlog_obj();
    os_log_type_t v42 = type;
    if (!os_log_type_enabled(v41, type)) {
      goto LABEL_206;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    uint64_t v82 = "nw_http_decrypt_oblivious_request";
    BOOL v43 = "%{public}s called with null request_buffer";
LABEL_205:
    _os_log_impl(&dword_181A5C000, v41, v42, v43, buf, 0xCu);
    goto LABEL_206;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    uint64_t v82 = "nw_http_decrypt_oblivious_request";
    __int16 v40 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v79 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v79)
      {
        size_t v41 = (os_log_s *)__nwlog_obj();
        os_log_type_t v42 = type;
        if (!os_log_type_enabled(v41, type)) {
          goto LABEL_206;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        uint64_t v82 = "nw_http_decrypt_oblivious_request";
        BOOL v43 = "%{public}s called with null request_length, backtrace limit exceeded";
        goto LABEL_205;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v41 = (os_log_s *)__nwlog_obj();
      os_log_type_t v42 = type;
      BOOL v47 = os_log_type_enabled(v41, type);
      if (!backtrace_string)
      {
        if (!v47) {
          goto LABEL_206;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        uint64_t v82 = "nw_http_decrypt_oblivious_request";
        BOOL v43 = "%{public}s called with null request_length, no backtrace";
        goto LABEL_205;
      }

      if (!v47) {
        goto LABEL_132;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      uint64_t v82 = "nw_http_decrypt_oblivious_request";
      __int16 v83 = 2082;
      uint64_t v84 = (uint64_t)backtrace_string;
      BOOL v46 = "%{public}s called with null request_length, dumping backtrace:%{public}s";
      goto LABEL_131;
    }

    size_t v41 = (os_log_s *)__nwlog_obj();
    os_log_type_t v42 = type;
    if (!os_log_type_enabled(v41, type)) {
      goto LABEL_206;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    uint64_t v82 = "nw_http_decrypt_oblivious_request";
    BOOL v43 = "%{public}s called with null request_length";
    goto LABEL_205;
  }

  if (!__s)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    uint64_t v82 = "nw_http_decrypt_oblivious_request";
    __int16 v40 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v79 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v79)
      {
        size_t v41 = (os_log_s *)__nwlog_obj();
        os_log_type_t v42 = type;
        if (!os_log_type_enabled(v41, type)) {
          goto LABEL_206;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        uint64_t v82 = "nw_http_decrypt_oblivious_request";
        BOOL v43 = "%{public}s called with null media_type, backtrace limit exceeded";
        goto LABEL_205;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v41 = (os_log_s *)__nwlog_obj();
      os_log_type_t v42 = type;
      BOOL v48 = os_log_type_enabled(v41, type);
      if (!backtrace_string)
      {
        if (!v48) {
          goto LABEL_206;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        uint64_t v82 = "nw_http_decrypt_oblivious_request";
        BOOL v43 = "%{public}s called with null media_type, no backtrace";
        goto LABEL_205;
      }

      if (!v48) {
        goto LABEL_132;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      uint64_t v82 = "nw_http_decrypt_oblivious_request";
      __int16 v83 = 2082;
      uint64_t v84 = (uint64_t)backtrace_string;
      BOOL v46 = "%{public}s called with null media_type, dumping backtrace:%{public}s";
      goto LABEL_131;
    }

    size_t v41 = (os_log_s *)__nwlog_obj();
    os_log_type_t v42 = type;
    if (!os_log_type_enabled(v41, type)) {
      goto LABEL_206;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    uint64_t v82 = "nw_http_decrypt_oblivious_request";
    BOOL v43 = "%{public}s called with null media_type";
    goto LABEL_205;
  }

  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    uint64_t v82 = "nw_http_decrypt_oblivious_request";
    __int16 v40 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v79 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v79)
      {
        size_t v41 = (os_log_s *)__nwlog_obj();
        os_log_type_t v42 = type;
        if (!os_log_type_enabled(v41, type)) {
          goto LABEL_206;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        uint64_t v82 = "nw_http_decrypt_oblivious_request";
        BOOL v43 = "%{public}s called with null private_key, backtrace limit exceeded";
        goto LABEL_205;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v41 = (os_log_s *)__nwlog_obj();
      os_log_type_t v42 = type;
      BOOL v49 = os_log_type_enabled(v41, type);
      if (!backtrace_string)
      {
        if (!v49) {
          goto LABEL_206;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        uint64_t v82 = "nw_http_decrypt_oblivious_request";
        BOOL v43 = "%{public}s called with null private_key, no backtrace";
        goto LABEL_205;
      }

      if (!v49) {
        goto LABEL_132;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      uint64_t v82 = "nw_http_decrypt_oblivious_request";
      __int16 v83 = 2082;
      uint64_t v84 = (uint64_t)backtrace_string;
      BOOL v46 = "%{public}s called with null private_key, dumping backtrace:%{public}s";
      goto LABEL_131;
    }

    size_t v41 = (os_log_s *)__nwlog_obj();
    os_log_type_t v42 = type;
    if (!os_log_type_enabled(v41, type)) {
      goto LABEL_206;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    uint64_t v82 = "nw_http_decrypt_oblivious_request";
    BOOL v43 = "%{public}s called with null private_key";
    goto LABEL_205;
  }

  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    uint64_t v82 = "nw_http_decrypt_oblivious_request";
    __int16 v40 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v79 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v79)
      {
        size_t v41 = (os_log_s *)__nwlog_obj();
        os_log_type_t v42 = type;
        if (!os_log_type_enabled(v41, type)) {
          goto LABEL_206;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        uint64_t v82 = "nw_http_decrypt_oblivious_request";
        BOOL v43 = "%{public}s called with null private_key_length, backtrace limit exceeded";
        goto LABEL_205;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v41 = (os_log_s *)__nwlog_obj();
      os_log_type_t v42 = type;
      BOOL v50 = os_log_type_enabled(v41, type);
      if (!backtrace_string)
      {
        if (!v50) {
          goto LABEL_206;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        uint64_t v82 = "nw_http_decrypt_oblivious_request";
        BOOL v43 = "%{public}s called with null private_key_length, no backtrace";
        goto LABEL_205;
      }

      if (!v50) {
        goto LABEL_132;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      uint64_t v82 = "nw_http_decrypt_oblivious_request";
      __int16 v83 = 2082;
      uint64_t v84 = (uint64_t)backtrace_string;
      BOOL v46 = "%{public}s called with null private_key_length, dumping backtrace:%{public}s";
      goto LABEL_131;
    }

    size_t v41 = (os_log_s *)__nwlog_obj();
    os_log_type_t v42 = type;
    if (!os_log_type_enabled(v41, type)) {
      goto LABEL_206;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    uint64_t v82 = "nw_http_decrypt_oblivious_request";
    BOOL v43 = "%{public}s called with null private_key_length";
    goto LABEL_205;
  }

  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    uint64_t v82 = "nw_http_decrypt_oblivious_request";
    __int16 v40 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v79 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v79)
      {
        size_t v41 = (os_log_s *)__nwlog_obj();
        os_log_type_t v42 = type;
        if (!os_log_type_enabled(v41, type)) {
          goto LABEL_206;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        uint64_t v82 = "nw_http_decrypt_oblivious_request";
        BOOL v43 = "%{public}s called with null out_context, backtrace limit exceeded";
        goto LABEL_205;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v41 = (os_log_s *)__nwlog_obj();
      os_log_type_t v42 = type;
      BOOL v51 = os_log_type_enabled(v41, type);
      if (!backtrace_string)
      {
        if (!v51) {
          goto LABEL_206;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        uint64_t v82 = "nw_http_decrypt_oblivious_request";
        BOOL v43 = "%{public}s called with null out_context, no backtrace";
        goto LABEL_205;
      }

      if (!v51) {
        goto LABEL_132;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      uint64_t v82 = "nw_http_decrypt_oblivious_request";
      __int16 v83 = 2082;
      uint64_t v84 = (uint64_t)backtrace_string;
      BOOL v46 = "%{public}s called with null out_context, dumping backtrace:%{public}s";
      goto LABEL_131;
    }

    size_t v41 = (os_log_s *)__nwlog_obj();
    os_log_type_t v42 = type;
    if (!os_log_type_enabled(v41, type)) {
      goto LABEL_206;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    uint64_t v82 = "nw_http_decrypt_oblivious_request";
    BOOL v43 = "%{public}s called with null out_context";
    goto LABEL_205;
  }

  if (!a7)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    uint64_t v82 = "nw_http_decrypt_oblivious_request";
    __int16 v40 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v79 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v79)
      {
        size_t v41 = (os_log_s *)__nwlog_obj();
        os_log_type_t v42 = type;
        if (!os_log_type_enabled(v41, type)) {
          goto LABEL_206;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        uint64_t v82 = "nw_http_decrypt_oblivious_request";
        BOOL v43 = "%{public}s called with null out_context_length, backtrace limit exceeded";
        goto LABEL_205;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v41 = (os_log_s *)__nwlog_obj();
      os_log_type_t v42 = type;
      BOOL v52 = os_log_type_enabled(v41, type);
      if (!backtrace_string)
      {
        if (!v52) {
          goto LABEL_206;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        uint64_t v82 = "nw_http_decrypt_oblivious_request";
        BOOL v43 = "%{public}s called with null out_context_length, no backtrace";
        goto LABEL_205;
      }

      if (!v52) {
        goto LABEL_132;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      uint64_t v82 = "nw_http_decrypt_oblivious_request";
      __int16 v83 = 2082;
      uint64_t v84 = (uint64_t)backtrace_string;
      BOOL v46 = "%{public}s called with null out_context_length, dumping backtrace:%{public}s";
      goto LABEL_131;
    }

    size_t v41 = (os_log_s *)__nwlog_obj();
    os_log_type_t v42 = type;
    if (!os_log_type_enabled(v41, type)) {
      goto LABEL_206;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    uint64_t v82 = "nw_http_decrypt_oblivious_request";
    BOOL v43 = "%{public}s called with null out_context_length";
    goto LABEL_205;
  }

  if (!a8)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    uint64_t v82 = "nw_http_decrypt_oblivious_request";
    __int16 v40 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v79 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v79)
      {
        size_t v41 = (os_log_s *)__nwlog_obj();
        os_log_type_t v42 = type;
        if (!os_log_type_enabled(v41, type)) {
          goto LABEL_206;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        uint64_t v82 = "nw_http_decrypt_oblivious_request";
        BOOL v43 = "%{public}s called with null out_request_enc, backtrace limit exceeded";
        goto LABEL_205;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v41 = (os_log_s *)__nwlog_obj();
      os_log_type_t v42 = type;
      BOOL v53 = os_log_type_enabled(v41, type);
      if (!backtrace_string)
      {
        if (!v53) {
          goto LABEL_206;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        uint64_t v82 = "nw_http_decrypt_oblivious_request";
        BOOL v43 = "%{public}s called with null out_request_enc, no backtrace";
        goto LABEL_205;
      }

      if (!v53) {
        goto LABEL_132;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      uint64_t v82 = "nw_http_decrypt_oblivious_request";
      __int16 v83 = 2082;
      uint64_t v84 = (uint64_t)backtrace_string;
      BOOL v46 = "%{public}s called with null out_request_enc, dumping backtrace:%{public}s";
      goto LABEL_131;
    }

    size_t v41 = (os_log_s *)__nwlog_obj();
    os_log_type_t v42 = type;
    if (!os_log_type_enabled(v41, type)) {
      goto LABEL_206;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    uint64_t v82 = "nw_http_decrypt_oblivious_request";
    BOOL v43 = "%{public}s called with null out_request_enc";
    goto LABEL_205;
  }

  if (!a9)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    uint64_t v82 = "nw_http_decrypt_oblivious_request";
    __int16 v40 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v79 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v79)
      {
        size_t v41 = (os_log_s *)__nwlog_obj();
        os_log_type_t v42 = type;
        if (!os_log_type_enabled(v41, type)) {
          goto LABEL_206;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        uint64_t v82 = "nw_http_decrypt_oblivious_request";
        BOOL v43 = "%{public}s called with null out_request_enc_length, backtrace limit exceeded";
        goto LABEL_205;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v41 = (os_log_s *)__nwlog_obj();
      os_log_type_t v42 = type;
      BOOL v54 = os_log_type_enabled(v41, type);
      if (!backtrace_string)
      {
        if (!v54) {
          goto LABEL_206;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        uint64_t v82 = "nw_http_decrypt_oblivious_request";
        BOOL v43 = "%{public}s called with null out_request_enc_length, no backtrace";
        goto LABEL_205;
      }

      if (!v54) {
        goto LABEL_132;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      uint64_t v82 = "nw_http_decrypt_oblivious_request";
      __int16 v83 = 2082;
      uint64_t v84 = (uint64_t)backtrace_string;
      BOOL v46 = "%{public}s called with null out_request_enc_length, dumping backtrace:%{public}s";
      goto LABEL_131;
    }

    size_t v41 = (os_log_s *)__nwlog_obj();
    os_log_type_t v42 = type;
    if (!os_log_type_enabled(v41, type)) {
      goto LABEL_206;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    uint64_t v82 = "nw_http_decrypt_oblivious_request";
    BOOL v43 = "%{public}s called with null out_request_enc_length";
    goto LABEL_205;
  }

  if (!a10)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    uint64_t v82 = "nw_http_decrypt_oblivious_request";
    __int16 v40 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v79 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v79)
      {
        size_t v41 = (os_log_s *)__nwlog_obj();
        os_log_type_t v42 = type;
        if (!os_log_type_enabled(v41, type)) {
          goto LABEL_206;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        uint64_t v82 = "nw_http_decrypt_oblivious_request";
        BOOL v43 = "%{public}s called with null out_decrypted_length, backtrace limit exceeded";
        goto LABEL_205;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v41 = (os_log_s *)__nwlog_obj();
      os_log_type_t v42 = type;
      BOOL v55 = os_log_type_enabled(v41, type);
      if (!backtrace_string)
      {
        if (!v55) {
          goto LABEL_206;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        uint64_t v82 = "nw_http_decrypt_oblivious_request";
        BOOL v43 = "%{public}s called with null out_decrypted_length, no backtrace";
        goto LABEL_205;
      }

      if (!v55) {
        goto LABEL_132;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      uint64_t v82 = "nw_http_decrypt_oblivious_request";
      __int16 v83 = 2082;
      uint64_t v84 = (uint64_t)backtrace_string;
      BOOL v46 = "%{public}s called with null out_decrypted_length, dumping backtrace:%{public}s";
      goto LABEL_131;
    }

    size_t v41 = (os_log_s *)__nwlog_obj();
    os_log_type_t v42 = type;
    if (!os_log_type_enabled(v41, type)) {
      goto LABEL_206;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    uint64_t v82 = "nw_http_decrypt_oblivious_request";
    BOOL v43 = "%{public}s called with null out_decrypted_length";
    goto LABEL_205;
  }

  if (a2 <= 7)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    uint64_t v82 = "nw_http_decrypt_oblivious_request";
    __int16 v40 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v79 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v41 = (os_log_s *)__nwlog_obj();
      os_log_type_t v42 = type;
      if (!os_log_type_enabled(v41, type)) {
        goto LABEL_206;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      uint64_t v82 = "nw_http_decrypt_oblivious_request";
      BOOL v43 = "%{public}s called with null (request_length > hdr_length)";
      goto LABEL_205;
    }

    if (!v79)
    {
      size_t v41 = (os_log_s *)__nwlog_obj();
      os_log_type_t v42 = type;
      if (!os_log_type_enabled(v41, type)) {
        goto LABEL_206;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      uint64_t v82 = "nw_http_decrypt_oblivious_request";
      BOOL v43 = "%{public}s called with null (request_length > hdr_length), backtrace limit exceeded";
      goto LABEL_205;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    size_t v41 = (os_log_s *)__nwlog_obj();
    os_log_type_t v42 = type;
    BOOL v56 = os_log_type_enabled(v41, type);
    if (!backtrace_string)
    {
      if (!v56) {
        goto LABEL_206;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      uint64_t v82 = "nw_http_decrypt_oblivious_request";
      BOOL v43 = "%{public}s called with null (request_length > hdr_length), no backtrace";
      goto LABEL_205;
    }

    if (!v56) {
      goto LABEL_132;
    }
    *(_DWORD *)unsigned int buf = 136446466;
    uint64_t v82 = "nw_http_decrypt_oblivious_request";
    __int16 v83 = 2082;
    uint64_t v84 = (uint64_t)backtrace_string;
    BOOL v46 = "%{public}s called with null (request_length > hdr_length), dumping backtrace:%{public}s";
LABEL_131:
    _os_log_impl(&dword_181A5C000, v41, v42, v46, buf, 0x16u);
    goto LABEL_132;
  }

  if (*(_WORD *)(a1 + 1) != 0x2000 || *(_WORD *)(a1 + 3) != 256 || *(_WORD *)(a1 + 5) != 256) {
    return 0LL;
  }
  unint64_t v78 = a2 - 7;
  size_t v15 = strlen(__s);
  if (v15 >= 0x101)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    size_t v16 = (os_log_s *)gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unsigned int buf = 136446210;
      uint64_t v82 = "nw_http_decrypt_oblivious_request";
      _os_log_impl(&dword_181A5C000, v16, OS_LOG_TYPE_ERROR, "%{public}s Media type exceeds max length", buf, 0xCu);
    }

    return 0LL;
  }

  size_t v17 = v15;
  cchpke_params_x25519_AESGCM128_HKDF_SHA256();
  size_t v18 = cchpke_params_sizeof_aead_tag();
  uint64_t v19 = cchpke_params_sizeof_kem_enc();
  size_t v77 = v19;
  size_t __size = v18;
  if (v19 + v18 + 7 >= a2)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    uint64_t v82 = "nw_http_decrypt_oblivious_request";
    __int16 v40 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v79 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v41 = (os_log_s *)__nwlog_obj();
      os_log_type_t v42 = type;
      if (os_log_type_enabled(v41, type))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        uint64_t v82 = "nw_http_decrypt_oblivious_request";
        BOOL v43 = "%{public}s called with null (request_length > (hdr_length + tag_length + enc_length))";
        goto LABEL_205;
      }

uint64_t nw_http_decrypt_get_chunked_oblivious_request_header_length()
{
  return cchpke_params_sizeof_kem_enc() + 7;
}

BOOL nw_http_decrypt_chunked_oblivious_request_header( uint64_t a1, unint64_t a2, char *__s, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8, size_t *a9)
{
  uint64_t v63 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    BOOL v29 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v55)
      {
        BOOL v30 = (os_log_s *)__nwlog_obj();
        os_log_type_t v31 = type;
        if (!os_log_type_enabled(v30, type)) {
          goto LABEL_173;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
        BOOL v32 = "%{public}s called with null header_buffer, backtrace limit exceeded";
        goto LABEL_172;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v30 = (os_log_s *)__nwlog_obj();
      os_log_type_t v31 = type;
      BOOL v34 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (!v34) {
          goto LABEL_173;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
        BOOL v32 = "%{public}s called with null header_buffer, no backtrace";
        goto LABEL_172;
      }

      if (!v34) {
        goto LABEL_111;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
      __int16 v59 = 2082;
      uint64_t v60 = (uint64_t)backtrace_string;
      os_log_type_t v35 = "%{public}s called with null header_buffer, dumping backtrace:%{public}s";
      goto LABEL_110;
    }

    BOOL v30 = (os_log_s *)__nwlog_obj();
    os_log_type_t v31 = type;
    if (!os_log_type_enabled(v30, type)) {
      goto LABEL_173;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    BOOL v32 = "%{public}s called with null header_buffer";
LABEL_172:
    _os_log_impl(&dword_181A5C000, v30, v31, v32, buf, 0xCu);
    goto LABEL_173;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    BOOL v29 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v55)
      {
        BOOL v30 = (os_log_s *)__nwlog_obj();
        os_log_type_t v31 = type;
        if (!os_log_type_enabled(v30, type)) {
          goto LABEL_173;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
        BOOL v32 = "%{public}s called with null header_length, backtrace limit exceeded";
        goto LABEL_172;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v30 = (os_log_s *)__nwlog_obj();
      os_log_type_t v31 = type;
      BOOL v36 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (!v36) {
          goto LABEL_173;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
        BOOL v32 = "%{public}s called with null header_length, no backtrace";
        goto LABEL_172;
      }

      if (!v36) {
        goto LABEL_111;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
      __int16 v59 = 2082;
      uint64_t v60 = (uint64_t)backtrace_string;
      os_log_type_t v35 = "%{public}s called with null header_length, dumping backtrace:%{public}s";
      goto LABEL_110;
    }

    BOOL v30 = (os_log_s *)__nwlog_obj();
    os_log_type_t v31 = type;
    if (!os_log_type_enabled(v30, type)) {
      goto LABEL_173;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    BOOL v32 = "%{public}s called with null header_length";
    goto LABEL_172;
  }

  if (!__s)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    BOOL v29 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v55)
      {
        BOOL v30 = (os_log_s *)__nwlog_obj();
        os_log_type_t v31 = type;
        if (!os_log_type_enabled(v30, type)) {
          goto LABEL_173;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
        BOOL v32 = "%{public}s called with null media_type, backtrace limit exceeded";
        goto LABEL_172;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v30 = (os_log_s *)__nwlog_obj();
      os_log_type_t v31 = type;
      BOOL v37 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (!v37) {
          goto LABEL_173;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
        BOOL v32 = "%{public}s called with null media_type, no backtrace";
        goto LABEL_172;
      }

      if (!v37) {
        goto LABEL_111;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
      __int16 v59 = 2082;
      uint64_t v60 = (uint64_t)backtrace_string;
      os_log_type_t v35 = "%{public}s called with null media_type, dumping backtrace:%{public}s";
      goto LABEL_110;
    }

    BOOL v30 = (os_log_s *)__nwlog_obj();
    os_log_type_t v31 = type;
    if (!os_log_type_enabled(v30, type)) {
      goto LABEL_173;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    BOOL v32 = "%{public}s called with null media_type";
    goto LABEL_172;
  }

  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    BOOL v29 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v55)
      {
        BOOL v30 = (os_log_s *)__nwlog_obj();
        os_log_type_t v31 = type;
        if (!os_log_type_enabled(v30, type)) {
          goto LABEL_173;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
        BOOL v32 = "%{public}s called with null private_key, backtrace limit exceeded";
        goto LABEL_172;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v30 = (os_log_s *)__nwlog_obj();
      os_log_type_t v31 = type;
      BOOL v38 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (!v38) {
          goto LABEL_173;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
        BOOL v32 = "%{public}s called with null private_key, no backtrace";
        goto LABEL_172;
      }

      if (!v38) {
        goto LABEL_111;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
      __int16 v59 = 2082;
      uint64_t v60 = (uint64_t)backtrace_string;
      os_log_type_t v35 = "%{public}s called with null private_key, dumping backtrace:%{public}s";
      goto LABEL_110;
    }

    BOOL v30 = (os_log_s *)__nwlog_obj();
    os_log_type_t v31 = type;
    if (!os_log_type_enabled(v30, type)) {
      goto LABEL_173;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    BOOL v32 = "%{public}s called with null private_key";
    goto LABEL_172;
  }

  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    BOOL v29 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v55)
      {
        BOOL v30 = (os_log_s *)__nwlog_obj();
        os_log_type_t v31 = type;
        if (!os_log_type_enabled(v30, type)) {
          goto LABEL_173;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
        BOOL v32 = "%{public}s called with null private_key_length, backtrace limit exceeded";
        goto LABEL_172;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v30 = (os_log_s *)__nwlog_obj();
      os_log_type_t v31 = type;
      BOOL v39 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (!v39) {
          goto LABEL_173;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
        BOOL v32 = "%{public}s called with null private_key_length, no backtrace";
        goto LABEL_172;
      }

      if (!v39) {
        goto LABEL_111;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
      __int16 v59 = 2082;
      uint64_t v60 = (uint64_t)backtrace_string;
      os_log_type_t v35 = "%{public}s called with null private_key_length, dumping backtrace:%{public}s";
      goto LABEL_110;
    }

    BOOL v30 = (os_log_s *)__nwlog_obj();
    os_log_type_t v31 = type;
    if (!os_log_type_enabled(v30, type)) {
      goto LABEL_173;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    BOOL v32 = "%{public}s called with null private_key_length";
    goto LABEL_172;
  }

  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    BOOL v29 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v55)
      {
        BOOL v30 = (os_log_s *)__nwlog_obj();
        os_log_type_t v31 = type;
        if (!os_log_type_enabled(v30, type)) {
          goto LABEL_173;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
        BOOL v32 = "%{public}s called with null out_context, backtrace limit exceeded";
        goto LABEL_172;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v30 = (os_log_s *)__nwlog_obj();
      os_log_type_t v31 = type;
      BOOL v40 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (!v40) {
          goto LABEL_173;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
        BOOL v32 = "%{public}s called with null out_context, no backtrace";
        goto LABEL_172;
      }

      if (!v40) {
        goto LABEL_111;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
      __int16 v59 = 2082;
      uint64_t v60 = (uint64_t)backtrace_string;
      os_log_type_t v35 = "%{public}s called with null out_context, dumping backtrace:%{public}s";
      goto LABEL_110;
    }

    BOOL v30 = (os_log_s *)__nwlog_obj();
    os_log_type_t v31 = type;
    if (!os_log_type_enabled(v30, type)) {
      goto LABEL_173;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    BOOL v32 = "%{public}s called with null out_context";
    goto LABEL_172;
  }

  if (!a7)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    BOOL v29 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v55)
      {
        BOOL v30 = (os_log_s *)__nwlog_obj();
        os_log_type_t v31 = type;
        if (!os_log_type_enabled(v30, type)) {
          goto LABEL_173;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
        BOOL v32 = "%{public}s called with null out_context_length, backtrace limit exceeded";
        goto LABEL_172;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v30 = (os_log_s *)__nwlog_obj();
      os_log_type_t v31 = type;
      BOOL v41 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (!v41) {
          goto LABEL_173;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
        BOOL v32 = "%{public}s called with null out_context_length, no backtrace";
        goto LABEL_172;
      }

      if (!v41) {
        goto LABEL_111;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
      __int16 v59 = 2082;
      uint64_t v60 = (uint64_t)backtrace_string;
      os_log_type_t v35 = "%{public}s called with null out_context_length, dumping backtrace:%{public}s";
      goto LABEL_110;
    }

    BOOL v30 = (os_log_s *)__nwlog_obj();
    os_log_type_t v31 = type;
    if (!os_log_type_enabled(v30, type)) {
      goto LABEL_173;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    BOOL v32 = "%{public}s called with null out_context_length";
    goto LABEL_172;
  }

  if (!a8)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    BOOL v29 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v55)
      {
        BOOL v30 = (os_log_s *)__nwlog_obj();
        os_log_type_t v31 = type;
        if (!os_log_type_enabled(v30, type)) {
          goto LABEL_173;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
        BOOL v32 = "%{public}s called with null out_request_enc, backtrace limit exceeded";
        goto LABEL_172;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v30 = (os_log_s *)__nwlog_obj();
      os_log_type_t v31 = type;
      BOOL v42 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (!v42) {
          goto LABEL_173;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
        BOOL v32 = "%{public}s called with null out_request_enc, no backtrace";
        goto LABEL_172;
      }

      if (!v42) {
        goto LABEL_111;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
      __int16 v59 = 2082;
      uint64_t v60 = (uint64_t)backtrace_string;
      os_log_type_t v35 = "%{public}s called with null out_request_enc, dumping backtrace:%{public}s";
      goto LABEL_110;
    }

    BOOL v30 = (os_log_s *)__nwlog_obj();
    os_log_type_t v31 = type;
    if (!os_log_type_enabled(v30, type)) {
      goto LABEL_173;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    BOOL v32 = "%{public}s called with null out_request_enc";
    goto LABEL_172;
  }

  if (!a9)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    BOOL v29 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v55)
      {
        BOOL v30 = (os_log_s *)__nwlog_obj();
        os_log_type_t v31 = type;
        if (!os_log_type_enabled(v30, type)) {
          goto LABEL_173;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
        BOOL v32 = "%{public}s called with null out_request_enc_length, backtrace limit exceeded";
        goto LABEL_172;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v30 = (os_log_s *)__nwlog_obj();
      os_log_type_t v31 = type;
      BOOL v43 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (!v43) {
          goto LABEL_173;
        }
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
        BOOL v32 = "%{public}s called with null out_request_enc_length, no backtrace";
        goto LABEL_172;
      }

      if (!v43) {
        goto LABEL_111;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
      __int16 v59 = 2082;
      uint64_t v60 = (uint64_t)backtrace_string;
      os_log_type_t v35 = "%{public}s called with null out_request_enc_length, dumping backtrace:%{public}s";
      goto LABEL_110;
    }

    BOOL v30 = (os_log_s *)__nwlog_obj();
    os_log_type_t v31 = type;
    if (!os_log_type_enabled(v30, type)) {
      goto LABEL_173;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    BOOL v32 = "%{public}s called with null out_request_enc_length";
    goto LABEL_172;
  }

  if (a2 <= 7)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    BOOL v29 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v30 = (os_log_s *)__nwlog_obj();
      os_log_type_t v31 = type;
      if (!os_log_type_enabled(v30, type)) {
        goto LABEL_173;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
      BOOL v32 = "%{public}s called with null (header_length > hdr_length)";
      goto LABEL_172;
    }

    if (!v55)
    {
      BOOL v30 = (os_log_s *)__nwlog_obj();
      os_log_type_t v31 = type;
      if (!os_log_type_enabled(v30, type)) {
        goto LABEL_173;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
      BOOL v32 = "%{public}s called with null (header_length > hdr_length), backtrace limit exceeded";
      goto LABEL_172;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v30 = (os_log_s *)__nwlog_obj();
    os_log_type_t v31 = type;
    BOOL v44 = os_log_type_enabled(v30, type);
    if (!backtrace_string)
    {
      if (!v44) {
        goto LABEL_173;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
      BOOL v32 = "%{public}s called with null (header_length > hdr_length), no backtrace";
      goto LABEL_172;
    }

    if (!v44) {
      goto LABEL_111;
    }
    *(_DWORD *)unsigned int buf = 136446466;
    BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
    __int16 v59 = 2082;
    uint64_t v60 = (uint64_t)backtrace_string;
    os_log_type_t v35 = "%{public}s called with null (header_length > hdr_length), dumping backtrace:%{public}s";
LABEL_110:
    _os_log_impl(&dword_181A5C000, v30, v31, v35, buf, 0x16u);
    goto LABEL_111;
  }

  if (*(_WORD *)(a1 + 1) != 0x2000 || *(_WORD *)(a1 + 3) != 256 || *(_WORD *)(a1 + 5) != 256) {
    return 0LL;
  }
  size_t v15 = strlen(__s);
  if (v15 < 0x101)
  {
    size_t v18 = v15;
    cchpke_params_x25519_AESGCM128_HKDF_SHA256();
    uint64_t v54 = cchpke_params_sizeof_kem_enc();
    if (v54 + 7 == a2)
    {
      uint64_t v19 = (char *)calloc(1uLL, v18 + 24);
      if (!v19)
      {
        BOOL v45 = (os_log_s *)__nwlog_obj();
        os_log_type_enabled(v45, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unsigned int buf = 136446722;
        BOOL v58 = "strict_calloc";
        __int16 v59 = 2048;
        uint64_t v60 = 1LL;
        __int16 v61 = 2048;
        uint64_t v62 = v18 + 24;
        BOOL v53 = (void *)_os_log_send_and_compose_impl();
        BOOL result = __nwlog_abort((uint64_t)v53);
        if (result) {
          goto LABEL_175;
        }
        free(v53);
      }

      size_t v20 = v18 + 17;
      snprintf(v19, v20, "%s chunked request", __s);
      size_t v21 = &v19[v20];
      int v22 = *(_DWORD *)(a1 + 3);
      *(_DWORD *)size_t v21 = *(_DWORD *)a1;
      *(_DWORD *)(v21 + 3) = v22;
      int v23 = calloc(1uLL, 0x60uLL);
      if (!v23)
      {
        BOOL v46 = (os_log_s *)__nwlog_obj();
        os_log_type_enabled(v46, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unsigned int buf = 136446722;
        BOOL v58 = "strict_calloc";
        __int16 v59 = 2048;
        uint64_t v60 = 1LL;
        __int16 v61 = 2048;
        uint64_t v62 = 96LL;
        BOOL v47 = (void *)_os_log_send_and_compose_impl();
        BOOL result = __nwlog_abort((uint64_t)v47);
        if (result) {
          goto LABEL_175;
        }
        free(v47);
      }

      size_t v24 = (const void *)(a1 + 7);
      size_t v25 = v54;
      int v26 = cchpke_responder_setup();
      free(v19);
      if (v26)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        size_t v27 = (os_log_s *)gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)unsigned int buf = 136446466;
          BOOL v58 = "nw_http_decrypt_chunked_oblivious_request_header";
          __int16 v59 = 1024;
          LODWORD(v60) = v26;
          _os_log_impl(&dword_181A5C000, v27, OS_LOG_TYPE_ERROR, "%{public}s Setup error: %d", buf, 0x12u);
        }

        if (v23) {
          free(v23);
        }
        return 0LL;
      }

      *a6 = v23;
      *a7 = 96LL;
      if (!v54)
      {
        BOOL v49 = (os_log_s *)__nwlog_obj();
        os_log_type_enabled(v49, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v58 = "strict_calloc";
        BOOL v50 = (void *)_os_log_send_and_compose_impl();
        BOOL result = __nwlog_abort((uint64_t)v50);
        if (result) {
          goto LABEL_175;
        }
        free(v50);
        size_t v25 = v54;
      }

      int v28 = calloc(1uLL, v25);
      if (v28)
      {
LABEL_29:
        *a8 = v28;
        memcpy(v28, v24, v25);
        *a9 = v25;
        return 1LL;
      }

      BOOL v51 = (os_log_s *)__nwlog_obj();
      os_log_type_enabled(v51, OS_LOG_TYPE_ERROR);
      *(_DWORD *)unsigned int buf = 136446722;
      BOOL v58 = "strict_calloc";
      __int16 v59 = 2048;
      uint64_t v60 = 1LL;
      __int16 v61 = 2048;
      uint64_t v62 = v25;
      BOOL v52 = (void *)_os_log_send_and_compose_impl();
      BOOL result = __nwlog_abort((uint64_t)v52);
      if (!result)
      {
        free(v52);
        size_t v25 = v54;
        goto LABEL_29;
      }

BOOL nw_http_decrypt_chunked_oblivious_request_chunk( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, size_t *a8)
{
  uint64_t v49 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v41)
      {
        size_t v20 = (os_log_s *)__nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)unsigned int buf = 136446210;
          BOOL v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
          int v22 = "%{public}s called with null request_buffer, backtrace limit exceeded";
          goto LABEL_128;
        }

        goto LABEL_129;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v20 = (os_log_s *)__nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v32 = os_log_type_enabled(v20, type);
      if (!backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)unsigned int buf = 136446210;
          BOOL v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
          int v22 = "%{public}s called with null request_buffer, no backtrace";
          goto LABEL_128;
        }

        goto LABEL_129;
      }

      if (!v32) {
        goto LABEL_95;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      BOOL v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
      __int16 v45 = 2082;
      uint64_t v46 = (uint64_t)backtrace_string;
      int v33 = "%{public}s called with null request_buffer, dumping backtrace:%{public}s";
      goto LABEL_94;
    }

    size_t v20 = (os_log_s *)__nwlog_obj();
    os_log_type_t v21 = type;
    if (!os_log_type_enabled(v20, type)) {
      goto LABEL_129;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
    int v22 = "%{public}s called with null request_buffer";
LABEL_128:
    _os_log_impl(&dword_181A5C000, v20, v21, v22, buf, 0xCu);
    goto LABEL_129;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v41)
      {
        size_t v20 = (os_log_s *)__nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)unsigned int buf = 136446210;
          BOOL v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
          int v22 = "%{public}s called with null request_length, backtrace limit exceeded";
          goto LABEL_128;
        }

        goto LABEL_129;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v20 = (os_log_s *)__nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v34 = os_log_type_enabled(v20, type);
      if (!backtrace_string)
      {
        if (v34)
        {
          *(_DWORD *)unsigned int buf = 136446210;
          BOOL v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
          int v22 = "%{public}s called with null request_length, no backtrace";
          goto LABEL_128;
        }

        goto LABEL_129;
      }

      if (!v34) {
        goto LABEL_95;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      BOOL v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
      __int16 v45 = 2082;
      uint64_t v46 = (uint64_t)backtrace_string;
      int v33 = "%{public}s called with null request_length, dumping backtrace:%{public}s";
      goto LABEL_94;
    }

    size_t v20 = (os_log_s *)__nwlog_obj();
    os_log_type_t v21 = type;
    if (!os_log_type_enabled(v20, type)) {
      goto LABEL_129;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
    int v22 = "%{public}s called with null request_length";
    goto LABEL_128;
  }

  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v41)
      {
        size_t v20 = (os_log_s *)__nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)unsigned int buf = 136446210;
          BOOL v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
          int v22 = "%{public}s called with null request_context, backtrace limit exceeded";
          goto LABEL_128;
        }

        goto LABEL_129;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v20 = (os_log_s *)__nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v35 = os_log_type_enabled(v20, type);
      if (!backtrace_string)
      {
        if (v35)
        {
          *(_DWORD *)unsigned int buf = 136446210;
          BOOL v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
          int v22 = "%{public}s called with null request_context, no backtrace";
          goto LABEL_128;
        }

        goto LABEL_129;
      }

      if (!v35) {
        goto LABEL_95;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      BOOL v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
      __int16 v45 = 2082;
      uint64_t v46 = (uint64_t)backtrace_string;
      int v33 = "%{public}s called with null request_context, dumping backtrace:%{public}s";
      goto LABEL_94;
    }

    size_t v20 = (os_log_s *)__nwlog_obj();
    os_log_type_t v21 = type;
    if (!os_log_type_enabled(v20, type)) {
      goto LABEL_129;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
    int v22 = "%{public}s called with null request_context";
    goto LABEL_128;
  }

  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v41)
      {
        size_t v20 = (os_log_s *)__nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)unsigned int buf = 136446210;
          BOOL v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
          int v22 = "%{public}s called with null request_context_length, backtrace limit exceeded";
          goto LABEL_128;
        }

        goto LABEL_129;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v20 = (os_log_s *)__nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v36 = os_log_type_enabled(v20, type);
      if (!backtrace_string)
      {
        if (v36)
        {
          *(_DWORD *)unsigned int buf = 136446210;
          BOOL v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
          int v22 = "%{public}s called with null request_context_length, no backtrace";
          goto LABEL_128;
        }

        goto LABEL_129;
      }

      if (!v36) {
        goto LABEL_95;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      BOOL v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
      __int16 v45 = 2082;
      uint64_t v46 = (uint64_t)backtrace_string;
      int v33 = "%{public}s called with null request_context_length, dumping backtrace:%{public}s";
      goto LABEL_94;
    }

    size_t v20 = (os_log_s *)__nwlog_obj();
    os_log_type_t v21 = type;
    if (!os_log_type_enabled(v20, type)) {
      goto LABEL_129;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
    int v22 = "%{public}s called with null request_context_length";
    goto LABEL_128;
  }

  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v41)
      {
        size_t v20 = (os_log_s *)__nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)unsigned int buf = 136446210;
          BOOL v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
          int v22 = "%{public}s called with null request_enc, backtrace limit exceeded";
          goto LABEL_128;
        }

        goto LABEL_129;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v20 = (os_log_s *)__nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v37 = os_log_type_enabled(v20, type);
      if (!backtrace_string)
      {
        if (v37)
        {
          *(_DWORD *)unsigned int buf = 136446210;
          BOOL v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
          int v22 = "%{public}s called with null request_enc, no backtrace";
          goto LABEL_128;
        }

        goto LABEL_129;
      }

      if (!v37) {
        goto LABEL_95;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      BOOL v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
      __int16 v45 = 2082;
      uint64_t v46 = (uint64_t)backtrace_string;
      int v33 = "%{public}s called with null request_enc, dumping backtrace:%{public}s";
      goto LABEL_94;
    }

    size_t v20 = (os_log_s *)__nwlog_obj();
    os_log_type_t v21 = type;
    if (!os_log_type_enabled(v20, type)) {
      goto LABEL_129;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
    int v22 = "%{public}s called with null request_enc";
    goto LABEL_128;
  }

  if (!a7)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v41)
      {
        size_t v20 = (os_log_s *)__nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)unsigned int buf = 136446210;
          BOOL v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
          int v22 = "%{public}s called with null request_enc_length, backtrace limit exceeded";
          goto LABEL_128;
        }

        goto LABEL_129;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v20 = (os_log_s *)__nwlog_obj();
      os_log_type_t v21 = type;
      BOOL v38 = os_log_type_enabled(v20, type);
      if (!backtrace_string)
      {
        if (v38)
        {
          *(_DWORD *)unsigned int buf = 136446210;
          BOOL v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
          int v22 = "%{public}s called with null request_enc_length, no backtrace";
          goto LABEL_128;
        }

        goto LABEL_129;
      }

      if (!v38) {
        goto LABEL_95;
      }
      *(_DWORD *)unsigned int buf = 136446466;
      BOOL v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
      __int16 v45 = 2082;
      uint64_t v46 = (uint64_t)backtrace_string;
      int v33 = "%{public}s called with null request_enc_length, dumping backtrace:%{public}s";
      goto LABEL_94;
    }

    size_t v20 = (os_log_s *)__nwlog_obj();
    os_log_type_t v21 = type;
    if (!os_log_type_enabled(v20, type)) {
      goto LABEL_129;
    }
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
    int v22 = "%{public}s called with null request_enc_length";
    goto LABEL_128;
  }

  if (!a8)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v20 = (os_log_s *)__nwlog_obj();
      os_log_type_t v21 = type;
      if (!os_log_type_enabled(v20, type)) {
        goto LABEL_129;
      }
      *(_DWORD *)unsigned int buf = 136446210;
      BOOL v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
      int v22 = "%{public}s called with null out_decrypted_length";
      goto LABEL_128;
    }

    if (!v41)
    {
      size_t v20 = (os_log_s *)__nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
        int v22 = "%{public}s called with null out_decrypted_length, backtrace limit exceeded";
        goto LABEL_128;
      }

      goto LABEL_129;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    size_t v20 = (os_log_s *)__nwlog_obj();
    os_log_type_t v21 = type;
    BOOL v39 = os_log_type_enabled(v20, type);
    if (!backtrace_string)
    {
      if (v39)
      {
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
        int v22 = "%{public}s called with null out_decrypted_length, no backtrace";
        goto LABEL_128;
      }

      goto LABEL_129;
    }

    if (!v39) {
      goto LABEL_95;
    }
    *(_DWORD *)unsigned int buf = 136446466;
    BOOL v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
    __int16 v45 = 2082;
    uint64_t v46 = (uint64_t)backtrace_string;
    int v33 = "%{public}s called with null out_decrypted_length, dumping backtrace:%{public}s";
LABEL_94:
    _os_log_impl(&dword_181A5C000, v20, v21, v33, buf, 0x16u);
    goto LABEL_95;
  }

  cchpke_params_x25519_AESGCM128_HKDF_SHA256();
  unint64_t v11 = cchpke_params_sizeof_aead_tag();
  size_t v12 = a2 - v11;
  if (a2 <= v11)
  {
    __nwlog_obj();
    *(_DWORD *)unsigned int buf = 136446210;
    BOOL v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v20 = (os_log_s *)__nwlog_obj();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)unsigned int buf = 136446210;
        BOOL v44 = "nw_http_decrypt_chunked_oblivious_request_chunk";
        int v22 = "%{public}s called with null (request_length > tag_length)";
        goto LABEL_128;
      }

BOOL nw_http_encrypt_oblivious_response( uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, const void *a6, size_t a7, void *a8)
{
  uint64_t v98 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
    BOOL v35 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v76 = 0;
    if (buf != 17)
    {
      if (!v76)
      {
        BOOL v36 = (os_log_s *)__nwlog_obj();
        os_log_type_t v37 = buf;
        if (os_log_type_enabled(v36, (os_log_type_t)buf))
        {
          *(_DWORD *)__str = 136446210;
          *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
          BOOL v38 = "%{public}s called with null message_buffer, backtrace limit exceeded";
          goto LABEL_185;
        }

        goto LABEL_186;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v36 = (os_log_s *)__nwlog_obj();
      os_log_type_t v37 = buf;
      BOOL v43 = os_log_type_enabled(v36, (os_log_type_t)buf);
      if (!backtrace_string)
      {
        if (v43)
        {
          *(_DWORD *)__str = 136446210;
          *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
          BOOL v38 = "%{public}s called with null message_buffer, no backtrace";
          goto LABEL_185;
        }

        goto LABEL_186;
      }

      if (!v43) {
        goto LABEL_136;
      }
      *(_DWORD *)__str = 136446466;
      *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
      *(_WORD *)&__str[12] = 2082;
      *(void *)&__str[14] = backtrace_string;
      BOOL v44 = "%{public}s called with null message_buffer, dumping backtrace:%{public}s";
      goto LABEL_135;
    }

    BOOL v36 = (os_log_s *)__nwlog_obj();
    os_log_type_t v37 = buf;
    if (!os_log_type_enabled(v36, (os_log_type_t)buf)) {
      goto LABEL_186;
    }
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
    BOOL v38 = "%{public}s called with null message_buffer";
LABEL_185:
    _os_log_impl(&dword_181A5C000, v36, v37, v38, (uint8_t *)__str, 0xCu);
    goto LABEL_186;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
    BOOL v35 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v76 = 0;
    if (buf != 17)
    {
      if (!v76)
      {
        BOOL v36 = (os_log_s *)__nwlog_obj();
        os_log_type_t v37 = buf;
        if (os_log_type_enabled(v36, (os_log_type_t)buf))
        {
          *(_DWORD *)__str = 136446210;
          *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
          BOOL v38 = "%{public}s called with null message_length, backtrace limit exceeded";
          goto LABEL_185;
        }

        goto LABEL_186;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v36 = (os_log_s *)__nwlog_obj();
      os_log_type_t v37 = buf;
      BOOL v45 = os_log_type_enabled(v36, (os_log_type_t)buf);
      if (!backtrace_string)
      {
        if (v45)
        {
          *(_DWORD *)__str = 136446210;
          *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
          BOOL v38 = "%{public}s called with null message_length, no backtrace";
          goto LABEL_185;
        }

        goto LABEL_186;
      }

      if (!v45) {
        goto LABEL_136;
      }
      *(_DWORD *)__str = 136446466;
      *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
      *(_WORD *)&__str[12] = 2082;
      *(void *)&__str[14] = backtrace_string;
      BOOL v44 = "%{public}s called with null message_length, dumping backtrace:%{public}s";
      goto LABEL_135;
    }

    BOOL v36 = (os_log_s *)__nwlog_obj();
    os_log_type_t v37 = buf;
    if (!os_log_type_enabled(v36, (os_log_type_t)buf)) {
      goto LABEL_186;
    }
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
    BOOL v38 = "%{public}s called with null message_length";
    goto LABEL_185;
  }

  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
    BOOL v35 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v76 = 0;
    if (buf != 17)
    {
      if (!v76)
      {
        BOOL v36 = (os_log_s *)__nwlog_obj();
        os_log_type_t v37 = buf;
        if (os_log_type_enabled(v36, (os_log_type_t)buf))
        {
          *(_DWORD *)__str = 136446210;
          *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
          BOOL v38 = "%{public}s called with null media_type, backtrace limit exceeded";
          goto LABEL_185;
        }

        goto LABEL_186;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v36 = (os_log_s *)__nwlog_obj();
      os_log_type_t v37 = buf;
      BOOL v46 = os_log_type_enabled(v36, (os_log_type_t)buf);
      if (!backtrace_string)
      {
        if (v46)
        {
          *(_DWORD *)__str = 136446210;
          *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
          BOOL v38 = "%{public}s called with null media_type, no backtrace";
          goto LABEL_185;
        }

        goto LABEL_186;
      }

      if (!v46) {
        goto LABEL_136;
      }
      *(_DWORD *)__str = 136446466;
      *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
      *(_WORD *)&__str[12] = 2082;
      *(void *)&__str[14] = backtrace_string;
      BOOL v44 = "%{public}s called with null media_type, dumping backtrace:%{public}s";
      goto LABEL_135;
    }

    BOOL v36 = (os_log_s *)__nwlog_obj();
    os_log_type_t v37 = buf;
    if (!os_log_type_enabled(v36, (os_log_type_t)buf)) {
      goto LABEL_186;
    }
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
    BOOL v38 = "%{public}s called with null media_type";
    goto LABEL_185;
  }

  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
    BOOL v35 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v76 = 0;
    if (buf != 17)
    {
      if (!v76)
      {
        BOOL v36 = (os_log_s *)__nwlog_obj();
        os_log_type_t v37 = buf;
        if (os_log_type_enabled(v36, (os_log_type_t)buf))
        {
          *(_DWORD *)__str = 136446210;
          *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
          BOOL v38 = "%{public}s called with null request_context, backtrace limit exceeded";
          goto LABEL_185;
        }

        goto LABEL_186;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v36 = (os_log_s *)__nwlog_obj();
      os_log_type_t v37 = buf;
      BOOL v47 = os_log_type_enabled(v36, (os_log_type_t)buf);
      if (!backtrace_string)
      {
        if (v47)
        {
          *(_DWORD *)__str = 136446210;
          *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
          BOOL v38 = "%{public}s called with null request_context, no backtrace";
          goto LABEL_185;
        }

        goto LABEL_186;
      }

      if (!v47) {
        goto LABEL_136;
      }
      *(_DWORD *)__str = 136446466;
      *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
      *(_WORD *)&__str[12] = 2082;
      *(void *)&__str[14] = backtrace_string;
      BOOL v44 = "%{public}s called with null request_context, dumping backtrace:%{public}s";
      goto LABEL_135;
    }

    BOOL v36 = (os_log_s *)__nwlog_obj();
    os_log_type_t v37 = buf;
    if (!os_log_type_enabled(v36, (os_log_type_t)buf)) {
      goto LABEL_186;
    }
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
    BOOL v38 = "%{public}s called with null request_context";
    goto LABEL_185;
  }

  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
    BOOL v35 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v76 = 0;
    if (buf != 17)
    {
      if (!v76)
      {
        BOOL v36 = (os_log_s *)__nwlog_obj();
        os_log_type_t v37 = buf;
        if (os_log_type_enabled(v36, (os_log_type_t)buf))
        {
          *(_DWORD *)__str = 136446210;
          *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
          BOOL v38 = "%{public}s called with null request_context_length, backtrace limit exceeded";
          goto LABEL_185;
        }

        goto LABEL_186;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v36 = (os_log_s *)__nwlog_obj();
      os_log_type_t v37 = buf;
      BOOL v48 = os_log_type_enabled(v36, (os_log_type_t)buf);
      if (!backtrace_string)
      {
        if (v48)
        {
          *(_DWORD *)__str = 136446210;
          *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
          BOOL v38 = "%{public}s called with null request_context_length, no backtrace";
          goto LABEL_185;
        }

        goto LABEL_186;
      }

      if (!v48) {
        goto LABEL_136;
      }
      *(_DWORD *)__str = 136446466;
      *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
      *(_WORD *)&__str[12] = 2082;
      *(void *)&__str[14] = backtrace_string;
      BOOL v44 = "%{public}s called with null request_context_length, dumping backtrace:%{public}s";
      goto LABEL_135;
    }

    BOOL v36 = (os_log_s *)__nwlog_obj();
    os_log_type_t v37 = buf;
    if (!os_log_type_enabled(v36, (os_log_type_t)buf)) {
      goto LABEL_186;
    }
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
    BOOL v38 = "%{public}s called with null request_context_length";
    goto LABEL_185;
  }

  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
    BOOL v35 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v76 = 0;
    if (buf != 17)
    {
      if (!v76)
      {
        BOOL v36 = (os_log_s *)__nwlog_obj();
        os_log_type_t v37 = buf;
        if (os_log_type_enabled(v36, (os_log_type_t)buf))
        {
          *(_DWORD *)__str = 136446210;
          *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
          BOOL v38 = "%{public}s called with null request_enc, backtrace limit exceeded";
          goto LABEL_185;
        }

        goto LABEL_186;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v36 = (os_log_s *)__nwlog_obj();
      os_log_type_t v37 = buf;
      BOOL v49 = os_log_type_enabled(v36, (os_log_type_t)buf);
      if (!backtrace_string)
      {
        if (v49)
        {
          *(_DWORD *)__str = 136446210;
          *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
          BOOL v38 = "%{public}s called with null request_enc, no backtrace";
          goto LABEL_185;
        }

        goto LABEL_186;
      }

      if (!v49) {
        goto LABEL_136;
      }
      *(_DWORD *)__str = 136446466;
      *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
      *(_WORD *)&__str[12] = 2082;
      *(void *)&__str[14] = backtrace_string;
      BOOL v44 = "%{public}s called with null request_enc, dumping backtrace:%{public}s";
      goto LABEL_135;
    }

    BOOL v36 = (os_log_s *)__nwlog_obj();
    os_log_type_t v37 = buf;
    if (!os_log_type_enabled(v36, (os_log_type_t)buf)) {
      goto LABEL_186;
    }
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
    BOOL v38 = "%{public}s called with null request_enc";
    goto LABEL_185;
  }

  if (!a7)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
    BOOL v35 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v76 = 0;
    if (buf == 17)
    {
      BOOL v36 = (os_log_s *)__nwlog_obj();
      os_log_type_t v37 = buf;
      if (!os_log_type_enabled(v36, (os_log_type_t)buf)) {
        goto LABEL_186;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
      BOOL v38 = "%{public}s called with null request_enc_length";
      goto LABEL_185;
    }

    if (!v76)
    {
      BOOL v36 = (os_log_s *)__nwlog_obj();
      os_log_type_t v37 = buf;
      if (os_log_type_enabled(v36, (os_log_type_t)buf))
      {
        *(_DWORD *)__str = 136446210;
        *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
        BOOL v38 = "%{public}s called with null request_enc_length, backtrace limit exceeded";
        goto LABEL_185;
      }

      goto LABEL_186;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v36 = (os_log_s *)__nwlog_obj();
    os_log_type_t v37 = buf;
    BOOL v50 = os_log_type_enabled(v36, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (v50)
      {
        *(_DWORD *)__str = 136446210;
        *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
        BOOL v38 = "%{public}s called with null request_enc_length, no backtrace";
        goto LABEL_185;
      }

      goto LABEL_186;
    }

    if (!v50) {
      goto LABEL_136;
    }
    *(_DWORD *)__str = 136446466;
    *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
    *(_WORD *)&__str[12] = 2082;
    *(void *)&__str[14] = backtrace_string;
    BOOL v44 = "%{public}s called with null request_enc_length, dumping backtrace:%{public}s";
LABEL_135:
    _os_log_impl(&dword_181A5C000, v36, v37, v44, (uint8_t *)__str, 0x16u);
    goto LABEL_136;
  }

  if (!a8)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
    BOOL v35 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v76 = 0;
    if (buf == 17)
    {
      BOOL v36 = (os_log_s *)__nwlog_obj();
      os_log_type_t v37 = buf;
      if (os_log_type_enabled(v36, (os_log_type_t)buf))
      {
        *(_DWORD *)__str = 136446210;
        *(void *)&__str[4] = "nw_http_encrypt_oblivious_response";
        BOOL v38 = "%{public}s called with null out_encrypted_length";
        goto LABEL_185;
      }

BOOL nw_http_generate_chunked_oblivious_response_nonce(size_t *a1)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    size_t v20 = "nw_http_generate_chunked_oblivious_response_nonce";
    unint64_t v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v7, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v8 = (os_log_s *)__nwlog_obj();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)int buf = 136446210;
          size_t v20 = "nw_http_generate_chunked_oblivious_response_nonce";
          uint64_t v10 = "%{public}s called with null out_nonce_length";
LABEL_26:
          _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
        }
      }

      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v8 = (os_log_s *)__nwlog_obj();
        os_log_type_t v9 = type;
        BOOL v16 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)int buf = 136446466;
            size_t v20 = "nw_http_generate_chunked_oblivious_response_nonce";
            __int16 v21 = 2082;
            uint64_t v22 = (uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null out_nonce_length, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_27;
        }

        if (v16)
        {
          *(_DWORD *)int buf = 136446210;
          size_t v20 = "nw_http_generate_chunked_oblivious_response_nonce";
          uint64_t v10 = "%{public}s called with null out_nonce_length, no backtrace";
          goto LABEL_26;
        }
      }

      else
      {
        uint64_t v8 = (os_log_s *)__nwlog_obj();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)int buf = 136446210;
          size_t v20 = "nw_http_generate_chunked_oblivious_response_nonce";
          uint64_t v10 = "%{public}s called with null out_nonce_length, backtrace limit exceeded";
          goto LABEL_26;
        }
      }
    }

unint64_t nw_http_get_chunked_oblivious_response_nonce_length()
{
  unint64_t v0 = cchpke_params_sizeof_aead_key();
  unint64_t result = cchpke_params_sizeof_aead_nonce();
  if (v0 > result) {
    return v0;
  }
  return result;
}

BOOL nw_http_encrypt_chunked_oblivious_response_chunk( uint64_t a1, uint64_t a2, const char *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const void *a8, size_t a9, const void *a10, size_t a11, size_t *a12)
{
  uint64_t v110 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    BOOL v44 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v88 = 0;
    if (buf == 17)
    {
      BOOL v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf)) {
        goto LABEL_220;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      BOOL v47 = "%{public}s called with null message_buffer";
      goto LABEL_219;
    }

    if (!v88)
    {
      BOOL v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf)) {
        goto LABEL_220;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      BOOL v47 = "%{public}s called with null message_buffer, backtrace limit exceeded";
      goto LABEL_219;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v45 = (os_log_s *)__nwlog_obj();
    os_log_type_t v46 = buf;
    BOOL v51 = os_log_type_enabled(v45, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (!v51) {
        goto LABEL_220;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      BOOL v47 = "%{public}s called with null message_buffer, no backtrace";
      goto LABEL_219;
    }

    if (!v51) {
      goto LABEL_162;
    }
    *(_DWORD *)__str = 136446466;
    *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    *(_WORD *)&__str[12] = 2082;
    *(void *)&__str[14] = backtrace_string;
    BOOL v52 = "%{public}s called with null message_buffer, dumping backtrace:%{public}s";
LABEL_161:
    _os_log_impl(&dword_181A5C000, v45, v46, v52, (uint8_t *)__str, 0x16u);
    goto LABEL_162;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    BOOL v44 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v88 = 0;
    if (buf == 17)
    {
      BOOL v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf)) {
        goto LABEL_220;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      BOOL v47 = "%{public}s called with null message_length";
      goto LABEL_219;
    }

    if (!v88)
    {
      BOOL v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf)) {
        goto LABEL_220;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      BOOL v47 = "%{public}s called with null message_length, backtrace limit exceeded";
      goto LABEL_219;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v45 = (os_log_s *)__nwlog_obj();
    os_log_type_t v46 = buf;
    BOOL v53 = os_log_type_enabled(v45, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (!v53) {
        goto LABEL_220;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      BOOL v47 = "%{public}s called with null message_length, no backtrace";
      goto LABEL_219;
    }

    if (!v53) {
      goto LABEL_162;
    }
    *(_DWORD *)__str = 136446466;
    *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    *(_WORD *)&__str[12] = 2082;
    *(void *)&__str[14] = backtrace_string;
    BOOL v52 = "%{public}s called with null message_length, dumping backtrace:%{public}s";
    goto LABEL_161;
  }

  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    BOOL v44 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v88 = 0;
    if (buf == 17)
    {
      BOOL v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf)) {
        goto LABEL_220;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      BOOL v47 = "%{public}s called with null media_type";
      goto LABEL_219;
    }

    if (!v88)
    {
      BOOL v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf)) {
        goto LABEL_220;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      BOOL v47 = "%{public}s called with null media_type, backtrace limit exceeded";
      goto LABEL_219;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v45 = (os_log_s *)__nwlog_obj();
    os_log_type_t v46 = buf;
    BOOL v54 = os_log_type_enabled(v45, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (!v54) {
        goto LABEL_220;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      BOOL v47 = "%{public}s called with null media_type, no backtrace";
      goto LABEL_219;
    }

    if (!v54) {
      goto LABEL_162;
    }
    *(_DWORD *)__str = 136446466;
    *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    *(_WORD *)&__str[12] = 2082;
    *(void *)&__str[14] = backtrace_string;
    BOOL v52 = "%{public}s called with null media_type, dumping backtrace:%{public}s";
    goto LABEL_161;
  }

  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    BOOL v44 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v88 = 0;
    if (buf == 17)
    {
      BOOL v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf)) {
        goto LABEL_220;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      BOOL v47 = "%{public}s called with null request_context";
      goto LABEL_219;
    }

    if (!v88)
    {
      BOOL v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf)) {
        goto LABEL_220;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      BOOL v47 = "%{public}s called with null request_context, backtrace limit exceeded";
      goto LABEL_219;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v45 = (os_log_s *)__nwlog_obj();
    os_log_type_t v46 = buf;
    BOOL v55 = os_log_type_enabled(v45, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (!v55) {
        goto LABEL_220;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      BOOL v47 = "%{public}s called with null request_context, no backtrace";
      goto LABEL_219;
    }

    if (!v55) {
      goto LABEL_162;
    }
    *(_DWORD *)__str = 136446466;
    *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    *(_WORD *)&__str[12] = 2082;
    *(void *)&__str[14] = backtrace_string;
    BOOL v52 = "%{public}s called with null request_context, dumping backtrace:%{public}s";
    goto LABEL_161;
  }

  if (!a7)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    BOOL v44 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v88 = 0;
    if (buf == 17)
    {
      BOOL v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf)) {
        goto LABEL_220;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      BOOL v47 = "%{public}s called with null request_context_length";
      goto LABEL_219;
    }

    if (!v88)
    {
      BOOL v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf)) {
        goto LABEL_220;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      BOOL v47 = "%{public}s called with null request_context_length, backtrace limit exceeded";
      goto LABEL_219;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v45 = (os_log_s *)__nwlog_obj();
    os_log_type_t v46 = buf;
    BOOL v56 = os_log_type_enabled(v45, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (!v56) {
        goto LABEL_220;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      BOOL v47 = "%{public}s called with null request_context_length, no backtrace";
      goto LABEL_219;
    }

    if (!v56) {
      goto LABEL_162;
    }
    *(_DWORD *)__str = 136446466;
    *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    *(_WORD *)&__str[12] = 2082;
    *(void *)&__str[14] = backtrace_string;
    BOOL v52 = "%{public}s called with null request_context_length, dumping backtrace:%{public}s";
    goto LABEL_161;
  }

  if (!a8)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    BOOL v44 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v88 = 0;
    if (buf == 17)
    {
      BOOL v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf)) {
        goto LABEL_220;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      BOOL v47 = "%{public}s called with null request_enc";
      goto LABEL_219;
    }

    if (!v88)
    {
      BOOL v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf)) {
        goto LABEL_220;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      BOOL v47 = "%{public}s called with null request_enc, backtrace limit exceeded";
      goto LABEL_219;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v45 = (os_log_s *)__nwlog_obj();
    os_log_type_t v46 = buf;
    BOOL v57 = os_log_type_enabled(v45, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (!v57) {
        goto LABEL_220;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      BOOL v47 = "%{public}s called with null request_enc, no backtrace";
      goto LABEL_219;
    }

    if (!v57) {
      goto LABEL_162;
    }
    *(_DWORD *)__str = 136446466;
    *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    *(_WORD *)&__str[12] = 2082;
    *(void *)&__str[14] = backtrace_string;
    BOOL v52 = "%{public}s called with null request_enc, dumping backtrace:%{public}s";
    goto LABEL_161;
  }

  if (!a9)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    BOOL v44 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v88 = 0;
    if (buf == 17)
    {
      BOOL v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf)) {
        goto LABEL_220;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      BOOL v47 = "%{public}s called with null request_enc_length";
      goto LABEL_219;
    }

    if (!v88)
    {
      BOOL v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf)) {
        goto LABEL_220;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      BOOL v47 = "%{public}s called with null request_enc_length, backtrace limit exceeded";
      goto LABEL_219;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v45 = (os_log_s *)__nwlog_obj();
    os_log_type_t v46 = buf;
    BOOL v58 = os_log_type_enabled(v45, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (!v58) {
        goto LABEL_220;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      BOOL v47 = "%{public}s called with null request_enc_length, no backtrace";
      goto LABEL_219;
    }

    if (!v58) {
      goto LABEL_162;
    }
    *(_DWORD *)__str = 136446466;
    *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    *(_WORD *)&__str[12] = 2082;
    *(void *)&__str[14] = backtrace_string;
    BOOL v52 = "%{public}s called with null request_enc_length, dumping backtrace:%{public}s";
    goto LABEL_161;
  }

  if (!a10)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    BOOL v44 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v88 = 0;
    if (buf == 17)
    {
      BOOL v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf)) {
        goto LABEL_220;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      BOOL v47 = "%{public}s called with null response_nonce";
      goto LABEL_219;
    }

    if (!v88)
    {
      BOOL v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf)) {
        goto LABEL_220;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      BOOL v47 = "%{public}s called with null response_nonce, backtrace limit exceeded";
      goto LABEL_219;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v45 = (os_log_s *)__nwlog_obj();
    os_log_type_t v46 = buf;
    BOOL v59 = os_log_type_enabled(v45, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (!v59) {
        goto LABEL_220;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      BOOL v47 = "%{public}s called with null response_nonce, no backtrace";
      goto LABEL_219;
    }

    if (!v59) {
      goto LABEL_162;
    }
    *(_DWORD *)__str = 136446466;
    *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    *(_WORD *)&__str[12] = 2082;
    *(void *)&__str[14] = backtrace_string;
    BOOL v52 = "%{public}s called with null response_nonce, dumping backtrace:%{public}s";
    goto LABEL_161;
  }

  if (!a11)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    BOOL v44 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v88 = 0;
    if (buf == 17)
    {
      BOOL v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf)) {
        goto LABEL_220;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      BOOL v47 = "%{public}s called with null response_nonce_length";
      goto LABEL_219;
    }

    if (!v88)
    {
      BOOL v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf)) {
        goto LABEL_220;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      BOOL v47 = "%{public}s called with null response_nonce_length, backtrace limit exceeded";
      goto LABEL_219;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v45 = (os_log_s *)__nwlog_obj();
    os_log_type_t v46 = buf;
    BOOL v60 = os_log_type_enabled(v45, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (!v60) {
        goto LABEL_220;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      BOOL v47 = "%{public}s called with null response_nonce_length, no backtrace";
      goto LABEL_219;
    }

    if (!v60) {
      goto LABEL_162;
    }
    *(_DWORD *)__str = 136446466;
    *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    *(_WORD *)&__str[12] = 2082;
    *(void *)&__str[14] = backtrace_string;
    BOOL v52 = "%{public}s called with null response_nonce_length, dumping backtrace:%{public}s";
    goto LABEL_161;
  }

  if (!a12)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    BOOL v44 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v88 = 0;
    if (buf == 17)
    {
      BOOL v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf)) {
        goto LABEL_220;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      BOOL v47 = "%{public}s called with null out_encrypted_length";
      goto LABEL_219;
    }

    if (!v88)
    {
      BOOL v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf)) {
        goto LABEL_220;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      BOOL v47 = "%{public}s called with null out_encrypted_length, backtrace limit exceeded";
      goto LABEL_219;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v45 = (os_log_s *)__nwlog_obj();
    os_log_type_t v46 = buf;
    BOOL v61 = os_log_type_enabled(v45, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (!v61) {
        goto LABEL_220;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      BOOL v47 = "%{public}s called with null out_encrypted_length, no backtrace";
      goto LABEL_219;
    }

    if (!v61) {
      goto LABEL_162;
    }
    *(_DWORD *)__str = 136446466;
    *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    *(_WORD *)&__str[12] = 2082;
    *(void *)&__str[14] = backtrace_string;
    BOOL v52 = "%{public}s called with null out_encrypted_length, dumping backtrace:%{public}s";
    goto LABEL_161;
  }

  cchpke_params_x25519_AESGCM128_HKDF_SHA256();
  unint64_t v14 = cchpke_params_sizeof_aead_key();
  unint64_t v15 = cchpke_params_sizeof_aead_nonce();
  uint64_t v85 = cchpke_params_sizeof_aead_tag();
  size_t __size = v15;
  if (v14 <= v15) {
    unint64_t v16 = v15;
  }
  else {
    unint64_t v16 = v14;
  }
  if (v16 != a11)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
    BOOL v44 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v88 = 0;
    if (buf == 17)
    {
      BOOL v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf)) {
        goto LABEL_220;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      BOOL v47 = "%{public}s called with null (exported_secret_length == response_nonce_length)";
      goto LABEL_219;
    }

    if (!v88)
    {
      BOOL v45 = (os_log_s *)__nwlog_obj();
      os_log_type_t v46 = buf;
      if (!os_log_type_enabled(v45, (os_log_type_t)buf)) {
        goto LABEL_220;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
      BOOL v47 = "%{public}s called with null (exported_secret_length == response_nonce_length), backtrace limit exceeded";
      goto LABEL_219;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v45 = (os_log_s *)__nwlog_obj();
    os_log_type_t v46 = buf;
    BOOL v62 = os_log_type_enabled(v45, (os_log_type_t)buf);
    if (backtrace_string)
    {
      if (v62)
      {
        *(_DWORD *)__str = 136446466;
        *(void *)&__str[4] = "nw_http_encrypt_chunked_oblivious_response_chunk";
        *(_WORD *)&__str[12] = 2082;
        *(void *)&__str[14] = backtrace_string;
        BOOL v52 = "%{public}s called with null (exported_secret_length == response_nonce_length), dumping backtrace:%{public}s";
        goto LABEL_161;
      }

BOOL nw_http_decrypt_oblivious_response( char *a1, unint64_t a2, const char *a3, uint64_t a4, uint64_t a5, const void *a6, size_t a7, size_t *a8)
{
  uint64_t v113 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
    size_t v41 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v91 = 0;
    if (buf == 17)
    {
      int v42 = (os_log_s *)__nwlog_obj();
      os_log_type_t v43 = buf;
      if (!os_log_type_enabled(v42, (os_log_type_t)buf)) {
        goto LABEL_201;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
      BOOL v44 = "%{public}s called with null response_buffer";
      goto LABEL_200;
    }

    if (!v91)
    {
      int v42 = (os_log_s *)__nwlog_obj();
      os_log_type_t v43 = buf;
      if (!os_log_type_enabled(v42, (os_log_type_t)buf)) {
        goto LABEL_201;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
      BOOL v44 = "%{public}s called with null response_buffer, backtrace limit exceeded";
      goto LABEL_200;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v42 = (os_log_s *)__nwlog_obj();
    os_log_type_t v43 = buf;
    BOOL v53 = os_log_type_enabled(v42, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (!v53) {
        goto LABEL_201;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
      BOOL v44 = "%{public}s called with null response_buffer, no backtrace";
      goto LABEL_200;
    }

    if (!v53) {
      goto LABEL_155;
    }
    *(_DWORD *)__str = 136446466;
    *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
    *(_WORD *)&__str[12] = 2082;
    *(void *)&__str[14] = backtrace_string;
    BOOL v54 = "%{public}s called with null response_buffer, dumping backtrace:%{public}s";
LABEL_154:
    _os_log_impl(&dword_181A5C000, v42, v43, v54, (uint8_t *)__str, 0x16u);
    goto LABEL_155;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
    size_t v41 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v91 = 0;
    if (buf == 17)
    {
      int v42 = (os_log_s *)__nwlog_obj();
      os_log_type_t v43 = buf;
      if (!os_log_type_enabled(v42, (os_log_type_t)buf)) {
        goto LABEL_201;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
      BOOL v44 = "%{public}s called with null response_length";
      goto LABEL_200;
    }

    if (!v91)
    {
      int v42 = (os_log_s *)__nwlog_obj();
      os_log_type_t v43 = buf;
      if (!os_log_type_enabled(v42, (os_log_type_t)buf)) {
        goto LABEL_201;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
      BOOL v44 = "%{public}s called with null response_length, backtrace limit exceeded";
      goto LABEL_200;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v42 = (os_log_s *)__nwlog_obj();
    os_log_type_t v43 = buf;
    BOOL v55 = os_log_type_enabled(v42, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (!v55) {
        goto LABEL_201;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
      BOOL v44 = "%{public}s called with null response_length, no backtrace";
      goto LABEL_200;
    }

    if (!v55) {
      goto LABEL_155;
    }
    *(_DWORD *)__str = 136446466;
    *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
    *(_WORD *)&__str[12] = 2082;
    *(void *)&__str[14] = backtrace_string;
    BOOL v54 = "%{public}s called with null response_length, dumping backtrace:%{public}s";
    goto LABEL_154;
  }

  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
    size_t v41 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v91 = 0;
    if (buf == 17)
    {
      int v42 = (os_log_s *)__nwlog_obj();
      os_log_type_t v43 = buf;
      if (!os_log_type_enabled(v42, (os_log_type_t)buf)) {
        goto LABEL_201;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
      BOOL v44 = "%{public}s called with null media_type";
      goto LABEL_200;
    }

    if (!v91)
    {
      int v42 = (os_log_s *)__nwlog_obj();
      os_log_type_t v43 = buf;
      if (!os_log_type_enabled(v42, (os_log_type_t)buf)) {
        goto LABEL_201;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
      BOOL v44 = "%{public}s called with null media_type, backtrace limit exceeded";
      goto LABEL_200;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v42 = (os_log_s *)__nwlog_obj();
    os_log_type_t v43 = buf;
    BOOL v56 = os_log_type_enabled(v42, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (!v56) {
        goto LABEL_201;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
      BOOL v44 = "%{public}s called with null media_type, no backtrace";
      goto LABEL_200;
    }

    if (!v56) {
      goto LABEL_155;
    }
    *(_DWORD *)__str = 136446466;
    *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
    *(_WORD *)&__str[12] = 2082;
    *(void *)&__str[14] = backtrace_string;
    BOOL v54 = "%{public}s called with null media_type, dumping backtrace:%{public}s";
    goto LABEL_154;
  }

  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
    size_t v41 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v91 = 0;
    if (buf == 17)
    {
      int v42 = (os_log_s *)__nwlog_obj();
      os_log_type_t v43 = buf;
      if (!os_log_type_enabled(v42, (os_log_type_t)buf)) {
        goto LABEL_201;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
      BOOL v44 = "%{public}s called with null request_context";
      goto LABEL_200;
    }

    if (!v91)
    {
      int v42 = (os_log_s *)__nwlog_obj();
      os_log_type_t v43 = buf;
      if (!os_log_type_enabled(v42, (os_log_type_t)buf)) {
        goto LABEL_201;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
      BOOL v44 = "%{public}s called with null request_context, backtrace limit exceeded";
      goto LABEL_200;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v42 = (os_log_s *)__nwlog_obj();
    os_log_type_t v43 = buf;
    BOOL v57 = os_log_type_enabled(v42, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (!v57) {
        goto LABEL_201;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
      BOOL v44 = "%{public}s called with null request_context, no backtrace";
      goto LABEL_200;
    }

    if (!v57) {
      goto LABEL_155;
    }
    *(_DWORD *)__str = 136446466;
    *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
    *(_WORD *)&__str[12] = 2082;
    *(void *)&__str[14] = backtrace_string;
    BOOL v54 = "%{public}s called with null request_context, dumping backtrace:%{public}s";
    goto LABEL_154;
  }

  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
    size_t v41 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v91 = 0;
    if (buf == 17)
    {
      int v42 = (os_log_s *)__nwlog_obj();
      os_log_type_t v43 = buf;
      if (!os_log_type_enabled(v42, (os_log_type_t)buf)) {
        goto LABEL_201;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
      BOOL v44 = "%{public}s called with null request_context_length";
      goto LABEL_200;
    }

    if (!v91)
    {
      int v42 = (os_log_s *)__nwlog_obj();
      os_log_type_t v43 = buf;
      if (!os_log_type_enabled(v42, (os_log_type_t)buf)) {
        goto LABEL_201;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
      BOOL v44 = "%{public}s called with null request_context_length, backtrace limit exceeded";
      goto LABEL_200;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v42 = (os_log_s *)__nwlog_obj();
    os_log_type_t v43 = buf;
    BOOL v58 = os_log_type_enabled(v42, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (!v58) {
        goto LABEL_201;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
      BOOL v44 = "%{public}s called with null request_context_length, no backtrace";
      goto LABEL_200;
    }

    if (!v58) {
      goto LABEL_155;
    }
    *(_DWORD *)__str = 136446466;
    *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
    *(_WORD *)&__str[12] = 2082;
    *(void *)&__str[14] = backtrace_string;
    BOOL v54 = "%{public}s called with null request_context_length, dumping backtrace:%{public}s";
    goto LABEL_154;
  }

  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
    size_t v41 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v91 = 0;
    if (buf == 17)
    {
      int v42 = (os_log_s *)__nwlog_obj();
      os_log_type_t v43 = buf;
      if (!os_log_type_enabled(v42, (os_log_type_t)buf)) {
        goto LABEL_201;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
      BOOL v44 = "%{public}s called with null request_enc";
      goto LABEL_200;
    }

    if (!v91)
    {
      int v42 = (os_log_s *)__nwlog_obj();
      os_log_type_t v43 = buf;
      if (!os_log_type_enabled(v42, (os_log_type_t)buf)) {
        goto LABEL_201;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
      BOOL v44 = "%{public}s called with null request_enc, backtrace limit exceeded";
      goto LABEL_200;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v42 = (os_log_s *)__nwlog_obj();
    os_log_type_t v43 = buf;
    BOOL v59 = os_log_type_enabled(v42, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (!v59) {
        goto LABEL_201;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
      BOOL v44 = "%{public}s called with null request_enc, no backtrace";
      goto LABEL_200;
    }

    if (!v59) {
      goto LABEL_155;
    }
    *(_DWORD *)__str = 136446466;
    *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
    *(_WORD *)&__str[12] = 2082;
    *(void *)&__str[14] = backtrace_string;
    BOOL v54 = "%{public}s called with null request_enc, dumping backtrace:%{public}s";
    goto LABEL_154;
  }

  if (!a7)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
    size_t v41 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v91 = 0;
    if (buf == 17)
    {
      int v42 = (os_log_s *)__nwlog_obj();
      os_log_type_t v43 = buf;
      if (!os_log_type_enabled(v42, (os_log_type_t)buf)) {
        goto LABEL_201;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
      BOOL v44 = "%{public}s called with null request_enc_length";
      goto LABEL_200;
    }

    if (!v91)
    {
      int v42 = (os_log_s *)__nwlog_obj();
      os_log_type_t v43 = buf;
      if (!os_log_type_enabled(v42, (os_log_type_t)buf)) {
        goto LABEL_201;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
      BOOL v44 = "%{public}s called with null request_enc_length, backtrace limit exceeded";
      goto LABEL_200;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v42 = (os_log_s *)__nwlog_obj();
    os_log_type_t v43 = buf;
    BOOL v60 = os_log_type_enabled(v42, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (!v60) {
        goto LABEL_201;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
      BOOL v44 = "%{public}s called with null request_enc_length, no backtrace";
      goto LABEL_200;
    }

    if (!v60) {
      goto LABEL_155;
    }
    *(_DWORD *)__str = 136446466;
    *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
    *(_WORD *)&__str[12] = 2082;
    *(void *)&__str[14] = backtrace_string;
    BOOL v54 = "%{public}s called with null request_enc_length, dumping backtrace:%{public}s";
    goto LABEL_154;
  }

  if (!a8)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
    size_t v41 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v91 = 0;
    if (buf == 17)
    {
      int v42 = (os_log_s *)__nwlog_obj();
      os_log_type_t v43 = buf;
      if (!os_log_type_enabled(v42, (os_log_type_t)buf)) {
        goto LABEL_201;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
      BOOL v44 = "%{public}s called with null out_decrypted_length";
      goto LABEL_200;
    }

    if (!v91)
    {
      int v42 = (os_log_s *)__nwlog_obj();
      os_log_type_t v43 = buf;
      if (!os_log_type_enabled(v42, (os_log_type_t)buf)) {
        goto LABEL_201;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
      BOOL v44 = "%{public}s called with null out_decrypted_length, backtrace limit exceeded";
      goto LABEL_200;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v42 = (os_log_s *)__nwlog_obj();
    os_log_type_t v43 = buf;
    BOOL v61 = os_log_type_enabled(v42, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (!v61) {
        goto LABEL_201;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
      BOOL v44 = "%{public}s called with null out_decrypted_length, no backtrace";
      goto LABEL_200;
    }

    if (!v61) {
      goto LABEL_155;
    }
    *(_DWORD *)__str = 136446466;
    *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
    *(_WORD *)&__str[12] = 2082;
    *(void *)&__str[14] = backtrace_string;
    BOOL v54 = "%{public}s called with null out_decrypted_length, dumping backtrace:%{public}s";
    goto LABEL_154;
  }

  cchpke_params_x25519_AESGCM128_HKDF_SHA256();
  size_t v12 = cchpke_params_sizeof_aead_key();
  unint64_t v13 = cchpke_params_sizeof_aead_nonce();
  uint64_t v14 = cchpke_params_sizeof_aead_tag();
  size_t __size = v14;
  size_t v89 = v13;
  if (v12 <= v13) {
    size_t v15 = v13;
  }
  else {
    size_t v15 = v12;
  }
  size_t v87 = a2 - (v15 + v14);
  if (a2 <= v15 + v14)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
    size_t v41 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v91 = 0;
    if (buf == 17)
    {
      int v42 = (os_log_s *)__nwlog_obj();
      os_log_type_t v43 = buf;
      if (!os_log_type_enabled(v42, (os_log_type_t)buf)) {
        goto LABEL_201;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
      BOOL v44 = "%{public}s called with null (response_length > response_nonce_length + tag_length)";
      goto LABEL_200;
    }

    if (!v91)
    {
      int v42 = (os_log_s *)__nwlog_obj();
      os_log_type_t v43 = buf;
      if (!os_log_type_enabled(v42, (os_log_type_t)buf)) {
        goto LABEL_201;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
      BOOL v44 = "%{public}s called with null (response_length > response_nonce_length + tag_length), backtrace limit exceeded";
      goto LABEL_200;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    int v42 = (os_log_s *)__nwlog_obj();
    os_log_type_t v43 = buf;
    BOOL v62 = os_log_type_enabled(v42, (os_log_type_t)buf);
    if (backtrace_string)
    {
      if (v62)
      {
        *(_DWORD *)__str = 136446466;
        *(void *)&__str[4] = "nw_http_decrypt_oblivious_response";
        *(_WORD *)&__str[12] = 2082;
        *(void *)&__str[14] = backtrace_string;
        BOOL v54 = "%{public}s called with null (response_length > response_nonce_length + tag_length), dumping backtrace:%{public}s";
        goto LABEL_154;
      }

BOOL nw_http_decrypt_chunked_oblivious_response_chunk( uint64_t a1, uint64_t a2, const char *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const void *a8, size_t a9, const void *a10, size_t a11, void *a12)
{
  uint64_t v118 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    os_log_type_t v46 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v96 = 0;
    if (buf != 17)
    {
      if (!v96)
      {
        BOOL v47 = (os_log_s *)__nwlog_obj();
        os_log_type_t v48 = buf;
        if (os_log_type_enabled(v47, (os_log_type_t)buf))
        {
          *(_DWORD *)__str = 136446210;
          *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
          BOOL v49 = "%{public}s called with null response_buffer, backtrace limit exceeded";
          goto LABEL_226;
        }

        goto LABEL_227;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v47 = (os_log_s *)__nwlog_obj();
      os_log_type_t v48 = buf;
      BOOL v57 = os_log_type_enabled(v47, (os_log_type_t)buf);
      if (!backtrace_string)
      {
        if (v57)
        {
          *(_DWORD *)__str = 136446210;
          *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
          BOOL v49 = "%{public}s called with null response_buffer, no backtrace";
          goto LABEL_226;
        }

        goto LABEL_227;
      }

      if (!v57) {
        goto LABEL_173;
      }
      *(_DWORD *)__str = 136446466;
      *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
      *(_WORD *)&__str[12] = 2082;
      *(void *)&__str[14] = backtrace_string;
      BOOL v58 = "%{public}s called with null response_buffer, dumping backtrace:%{public}s";
      goto LABEL_172;
    }

    BOOL v47 = (os_log_s *)__nwlog_obj();
    os_log_type_t v48 = buf;
    if (!os_log_type_enabled(v47, (os_log_type_t)buf)) {
      goto LABEL_227;
    }
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    BOOL v49 = "%{public}s called with null response_buffer";
LABEL_226:
    _os_log_impl(&dword_181A5C000, v47, v48, v49, (uint8_t *)__str, 0xCu);
    goto LABEL_227;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    os_log_type_t v46 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v96 = 0;
    if (buf != 17)
    {
      if (!v96)
      {
        BOOL v47 = (os_log_s *)__nwlog_obj();
        os_log_type_t v48 = buf;
        if (os_log_type_enabled(v47, (os_log_type_t)buf))
        {
          *(_DWORD *)__str = 136446210;
          *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
          BOOL v49 = "%{public}s called with null response_length, backtrace limit exceeded";
          goto LABEL_226;
        }

        goto LABEL_227;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v47 = (os_log_s *)__nwlog_obj();
      os_log_type_t v48 = buf;
      BOOL v59 = os_log_type_enabled(v47, (os_log_type_t)buf);
      if (!backtrace_string)
      {
        if (v59)
        {
          *(_DWORD *)__str = 136446210;
          *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
          BOOL v49 = "%{public}s called with null response_length, no backtrace";
          goto LABEL_226;
        }

        goto LABEL_227;
      }

      if (!v59) {
        goto LABEL_173;
      }
      *(_DWORD *)__str = 136446466;
      *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
      *(_WORD *)&__str[12] = 2082;
      *(void *)&__str[14] = backtrace_string;
      BOOL v58 = "%{public}s called with null response_length, dumping backtrace:%{public}s";
      goto LABEL_172;
    }

    BOOL v47 = (os_log_s *)__nwlog_obj();
    os_log_type_t v48 = buf;
    if (!os_log_type_enabled(v47, (os_log_type_t)buf)) {
      goto LABEL_227;
    }
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    BOOL v49 = "%{public}s called with null response_length";
    goto LABEL_226;
  }

  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    os_log_type_t v46 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v96 = 0;
    if (buf != 17)
    {
      if (!v96)
      {
        BOOL v47 = (os_log_s *)__nwlog_obj();
        os_log_type_t v48 = buf;
        if (os_log_type_enabled(v47, (os_log_type_t)buf))
        {
          *(_DWORD *)__str = 136446210;
          *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
          BOOL v49 = "%{public}s called with null media_type, backtrace limit exceeded";
          goto LABEL_226;
        }

        goto LABEL_227;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v47 = (os_log_s *)__nwlog_obj();
      os_log_type_t v48 = buf;
      BOOL v60 = os_log_type_enabled(v47, (os_log_type_t)buf);
      if (!backtrace_string)
      {
        if (v60)
        {
          *(_DWORD *)__str = 136446210;
          *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
          BOOL v49 = "%{public}s called with null media_type, no backtrace";
          goto LABEL_226;
        }

        goto LABEL_227;
      }

      if (!v60) {
        goto LABEL_173;
      }
      *(_DWORD *)__str = 136446466;
      *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
      *(_WORD *)&__str[12] = 2082;
      *(void *)&__str[14] = backtrace_string;
      BOOL v58 = "%{public}s called with null media_type, dumping backtrace:%{public}s";
      goto LABEL_172;
    }

    BOOL v47 = (os_log_s *)__nwlog_obj();
    os_log_type_t v48 = buf;
    if (!os_log_type_enabled(v47, (os_log_type_t)buf)) {
      goto LABEL_227;
    }
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    BOOL v49 = "%{public}s called with null media_type";
    goto LABEL_226;
  }

  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    os_log_type_t v46 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v96 = 0;
    if (buf != 17)
    {
      if (!v96)
      {
        BOOL v47 = (os_log_s *)__nwlog_obj();
        os_log_type_t v48 = buf;
        if (os_log_type_enabled(v47, (os_log_type_t)buf))
        {
          *(_DWORD *)__str = 136446210;
          *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
          BOOL v49 = "%{public}s called with null request_context, backtrace limit exceeded";
          goto LABEL_226;
        }

        goto LABEL_227;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v47 = (os_log_s *)__nwlog_obj();
      os_log_type_t v48 = buf;
      BOOL v61 = os_log_type_enabled(v47, (os_log_type_t)buf);
      if (!backtrace_string)
      {
        if (v61)
        {
          *(_DWORD *)__str = 136446210;
          *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
          BOOL v49 = "%{public}s called with null request_context, no backtrace";
          goto LABEL_226;
        }

        goto LABEL_227;
      }

      if (!v61) {
        goto LABEL_173;
      }
      *(_DWORD *)__str = 136446466;
      *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
      *(_WORD *)&__str[12] = 2082;
      *(void *)&__str[14] = backtrace_string;
      BOOL v58 = "%{public}s called with null request_context, dumping backtrace:%{public}s";
      goto LABEL_172;
    }

    BOOL v47 = (os_log_s *)__nwlog_obj();
    os_log_type_t v48 = buf;
    if (!os_log_type_enabled(v47, (os_log_type_t)buf)) {
      goto LABEL_227;
    }
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    BOOL v49 = "%{public}s called with null request_context";
    goto LABEL_226;
  }

  if (!a7)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    os_log_type_t v46 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v96 = 0;
    if (buf != 17)
    {
      if (!v96)
      {
        BOOL v47 = (os_log_s *)__nwlog_obj();
        os_log_type_t v48 = buf;
        if (os_log_type_enabled(v47, (os_log_type_t)buf))
        {
          *(_DWORD *)__str = 136446210;
          *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
          BOOL v49 = "%{public}s called with null request_context_length, backtrace limit exceeded";
          goto LABEL_226;
        }

        goto LABEL_227;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v47 = (os_log_s *)__nwlog_obj();
      os_log_type_t v48 = buf;
      BOOL v62 = os_log_type_enabled(v47, (os_log_type_t)buf);
      if (!backtrace_string)
      {
        if (v62)
        {
          *(_DWORD *)__str = 136446210;
          *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
          BOOL v49 = "%{public}s called with null request_context_length, no backtrace";
          goto LABEL_226;
        }

        goto LABEL_227;
      }

      if (!v62) {
        goto LABEL_173;
      }
      *(_DWORD *)__str = 136446466;
      *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
      *(_WORD *)&__str[12] = 2082;
      *(void *)&__str[14] = backtrace_string;
      BOOL v58 = "%{public}s called with null request_context_length, dumping backtrace:%{public}s";
      goto LABEL_172;
    }

    BOOL v47 = (os_log_s *)__nwlog_obj();
    os_log_type_t v48 = buf;
    if (!os_log_type_enabled(v47, (os_log_type_t)buf)) {
      goto LABEL_227;
    }
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    BOOL v49 = "%{public}s called with null request_context_length";
    goto LABEL_226;
  }

  if (!a8)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    os_log_type_t v46 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v96 = 0;
    if (buf != 17)
    {
      if (!v96)
      {
        BOOL v47 = (os_log_s *)__nwlog_obj();
        os_log_type_t v48 = buf;
        if (os_log_type_enabled(v47, (os_log_type_t)buf))
        {
          *(_DWORD *)__str = 136446210;
          *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
          BOOL v49 = "%{public}s called with null request_enc, backtrace limit exceeded";
          goto LABEL_226;
        }

        goto LABEL_227;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v47 = (os_log_s *)__nwlog_obj();
      os_log_type_t v48 = buf;
      BOOL v63 = os_log_type_enabled(v47, (os_log_type_t)buf);
      if (!backtrace_string)
      {
        if (v63)
        {
          *(_DWORD *)__str = 136446210;
          *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
          BOOL v49 = "%{public}s called with null request_enc, no backtrace";
          goto LABEL_226;
        }

        goto LABEL_227;
      }

      if (!v63) {
        goto LABEL_173;
      }
      *(_DWORD *)__str = 136446466;
      *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
      *(_WORD *)&__str[12] = 2082;
      *(void *)&__str[14] = backtrace_string;
      BOOL v58 = "%{public}s called with null request_enc, dumping backtrace:%{public}s";
      goto LABEL_172;
    }

    BOOL v47 = (os_log_s *)__nwlog_obj();
    os_log_type_t v48 = buf;
    if (!os_log_type_enabled(v47, (os_log_type_t)buf)) {
      goto LABEL_227;
    }
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    BOOL v49 = "%{public}s called with null request_enc";
    goto LABEL_226;
  }

  if (!a9)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    os_log_type_t v46 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v96 = 0;
    if (buf != 17)
    {
      if (!v96)
      {
        BOOL v47 = (os_log_s *)__nwlog_obj();
        os_log_type_t v48 = buf;
        if (os_log_type_enabled(v47, (os_log_type_t)buf))
        {
          *(_DWORD *)__str = 136446210;
          *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
          BOOL v49 = "%{public}s called with null request_enc_length, backtrace limit exceeded";
          goto LABEL_226;
        }

        goto LABEL_227;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v47 = (os_log_s *)__nwlog_obj();
      os_log_type_t v48 = buf;
      BOOL v64 = os_log_type_enabled(v47, (os_log_type_t)buf);
      if (!backtrace_string)
      {
        if (v64)
        {
          *(_DWORD *)__str = 136446210;
          *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
          BOOL v49 = "%{public}s called with null request_enc_length, no backtrace";
          goto LABEL_226;
        }

        goto LABEL_227;
      }

      if (!v64) {
        goto LABEL_173;
      }
      *(_DWORD *)__str = 136446466;
      *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
      *(_WORD *)&__str[12] = 2082;
      *(void *)&__str[14] = backtrace_string;
      BOOL v58 = "%{public}s called with null request_enc_length, dumping backtrace:%{public}s";
      goto LABEL_172;
    }

    BOOL v47 = (os_log_s *)__nwlog_obj();
    os_log_type_t v48 = buf;
    if (!os_log_type_enabled(v47, (os_log_type_t)buf)) {
      goto LABEL_227;
    }
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    BOOL v49 = "%{public}s called with null request_enc_length";
    goto LABEL_226;
  }

  if (!a10)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    os_log_type_t v46 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v96 = 0;
    if (buf != 17)
    {
      if (!v96)
      {
        BOOL v47 = (os_log_s *)__nwlog_obj();
        os_log_type_t v48 = buf;
        if (os_log_type_enabled(v47, (os_log_type_t)buf))
        {
          *(_DWORD *)__str = 136446210;
          *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
          BOOL v49 = "%{public}s called with null response_nonce, backtrace limit exceeded";
          goto LABEL_226;
        }

        goto LABEL_227;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v47 = (os_log_s *)__nwlog_obj();
      os_log_type_t v48 = buf;
      BOOL v65 = os_log_type_enabled(v47, (os_log_type_t)buf);
      if (!backtrace_string)
      {
        if (v65)
        {
          *(_DWORD *)__str = 136446210;
          *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
          BOOL v49 = "%{public}s called with null response_nonce, no backtrace";
          goto LABEL_226;
        }

        goto LABEL_227;
      }

      if (!v65) {
        goto LABEL_173;
      }
      *(_DWORD *)__str = 136446466;
      *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
      *(_WORD *)&__str[12] = 2082;
      *(void *)&__str[14] = backtrace_string;
      BOOL v58 = "%{public}s called with null response_nonce, dumping backtrace:%{public}s";
      goto LABEL_172;
    }

    BOOL v47 = (os_log_s *)__nwlog_obj();
    os_log_type_t v48 = buf;
    if (!os_log_type_enabled(v47, (os_log_type_t)buf)) {
      goto LABEL_227;
    }
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    BOOL v49 = "%{public}s called with null response_nonce";
    goto LABEL_226;
  }

  if (!a11)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    os_log_type_t v46 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v96 = 0;
    if (buf != 17)
    {
      if (!v96)
      {
        BOOL v47 = (os_log_s *)__nwlog_obj();
        os_log_type_t v48 = buf;
        if (os_log_type_enabled(v47, (os_log_type_t)buf))
        {
          *(_DWORD *)__str = 136446210;
          *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
          BOOL v49 = "%{public}s called with null response_nonce_length, backtrace limit exceeded";
          goto LABEL_226;
        }

        goto LABEL_227;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v47 = (os_log_s *)__nwlog_obj();
      os_log_type_t v48 = buf;
      BOOL v66 = os_log_type_enabled(v47, (os_log_type_t)buf);
      if (!backtrace_string)
      {
        if (v66)
        {
          *(_DWORD *)__str = 136446210;
          *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
          BOOL v49 = "%{public}s called with null response_nonce_length, no backtrace";
          goto LABEL_226;
        }

        goto LABEL_227;
      }

      if (!v66) {
        goto LABEL_173;
      }
      *(_DWORD *)__str = 136446466;
      *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
      *(_WORD *)&__str[12] = 2082;
      *(void *)&__str[14] = backtrace_string;
      BOOL v58 = "%{public}s called with null response_nonce_length, dumping backtrace:%{public}s";
      goto LABEL_172;
    }

    BOOL v47 = (os_log_s *)__nwlog_obj();
    os_log_type_t v48 = buf;
    if (!os_log_type_enabled(v47, (os_log_type_t)buf)) {
      goto LABEL_227;
    }
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    BOOL v49 = "%{public}s called with null response_nonce_length";
    goto LABEL_226;
  }

  if (!a12)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    os_log_type_t v46 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v96 = 0;
    if (buf == 17)
    {
      BOOL v47 = (os_log_s *)__nwlog_obj();
      os_log_type_t v48 = buf;
      if (!os_log_type_enabled(v47, (os_log_type_t)buf)) {
        goto LABEL_227;
      }
      *(_DWORD *)__str = 136446210;
      *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
      BOOL v49 = "%{public}s called with null out_decrypted_length";
      goto LABEL_226;
    }

    if (!v96)
    {
      BOOL v47 = (os_log_s *)__nwlog_obj();
      os_log_type_t v48 = buf;
      if (os_log_type_enabled(v47, (os_log_type_t)buf))
      {
        *(_DWORD *)__str = 136446210;
        *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
        BOOL v49 = "%{public}s called with null out_decrypted_length, backtrace limit exceeded";
        goto LABEL_226;
      }

      goto LABEL_227;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v47 = (os_log_s *)__nwlog_obj();
    os_log_type_t v48 = buf;
    BOOL v67 = os_log_type_enabled(v47, (os_log_type_t)buf);
    if (!backtrace_string)
    {
      if (v67)
      {
        *(_DWORD *)__str = 136446210;
        *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
        BOOL v49 = "%{public}s called with null out_decrypted_length, no backtrace";
        goto LABEL_226;
      }

      goto LABEL_227;
    }

    if (!v67) {
      goto LABEL_173;
    }
    *(_DWORD *)__str = 136446466;
    *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    *(_WORD *)&__str[12] = 2082;
    *(void *)&__str[14] = backtrace_string;
    BOOL v58 = "%{public}s called with null out_decrypted_length, dumping backtrace:%{public}s";
LABEL_172:
    _os_log_impl(&dword_181A5C000, v47, v48, v58, (uint8_t *)__str, 0x16u);
    goto LABEL_173;
  }

  cchpke_params_x25519_AESGCM128_HKDF_SHA256();
  unint64_t v13 = cchpke_params_sizeof_aead_key();
  unint64_t v14 = cchpke_params_sizeof_aead_nonce();
  size_t v92 = cchpke_params_sizeof_aead_tag();
  size_t v93 = v14;
  size_t __size = v13;
  if (v13 <= v14) {
    unint64_t v15 = v14;
  }
  else {
    unint64_t v15 = v13;
  }
  if (v15 != a11)
  {
    __nwlog_obj();
    *(_DWORD *)__str = 136446210;
    *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
    os_log_type_t v46 = (const char *)_os_log_send_and_compose_impl();
    LOBYTE(buf) = 16;
    char v96 = 0;
    if (buf == 17)
    {
      BOOL v47 = (os_log_s *)__nwlog_obj();
      os_log_type_t v48 = buf;
      if (os_log_type_enabled(v47, (os_log_type_t)buf))
      {
        *(_DWORD *)__str = 136446210;
        *(void *)&__str[4] = "nw_http_decrypt_chunked_oblivious_response_chunk";
        BOOL v49 = "%{public}s called with null (response_nonce_length == exported_secret_length)";
        goto LABEL_226;
      }

uint64_t nw_http_get_standalone_aead_header()
{
  return 256LL;
}

uint64_t nw_http_get_standalone_aead_nonce_length()
{
  return cchpke_params_sizeof_aead_nonce();
}

BOOL nw_http_encrypt_standalone_aead_chunk( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const void *a7, size_t a8, size_t *a9)
{
  uint64_t v51 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
    int v20 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v43)
      {
        __int16 v21 = (os_log_s *)__nwlog_obj();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
          __int16 v23 = "%{public}s called with null message_buffer, backtrace limit exceeded";
          goto LABEL_136;
        }

        goto LABEL_137;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v21 = (os_log_s *)__nwlog_obj();
      os_log_type_t v22 = type;
      BOOL v30 = os_log_type_enabled(v21, type);
      if (!backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
          __int16 v23 = "%{public}s called with null message_buffer, no backtrace";
          goto LABEL_136;
        }

        goto LABEL_137;
      }

      if (!v30) {
        goto LABEL_99;
      }
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
      __int16 v47 = 2082;
      uint64_t v48 = (uint64_t)backtrace_string;
      int v31 = "%{public}s called with null message_buffer, dumping backtrace:%{public}s";
      goto LABEL_98;
    }

    __int16 v21 = (os_log_s *)__nwlog_obj();
    os_log_type_t v22 = type;
    if (!os_log_type_enabled(v21, type)) {
      goto LABEL_137;
    }
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
    __int16 v23 = "%{public}s called with null message_buffer";
LABEL_136:
    _os_log_impl(&dword_181A5C000, v21, v22, v23, buf, 0xCu);
    goto LABEL_137;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
    int v20 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v43)
      {
        __int16 v21 = (os_log_s *)__nwlog_obj();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
          __int16 v23 = "%{public}s called with null message_length, backtrace limit exceeded";
          goto LABEL_136;
        }

        goto LABEL_137;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v21 = (os_log_s *)__nwlog_obj();
      os_log_type_t v22 = type;
      BOOL v32 = os_log_type_enabled(v21, type);
      if (!backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
          __int16 v23 = "%{public}s called with null message_length, no backtrace";
          goto LABEL_136;
        }

        goto LABEL_137;
      }

      if (!v32) {
        goto LABEL_99;
      }
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
      __int16 v47 = 2082;
      uint64_t v48 = (uint64_t)backtrace_string;
      int v31 = "%{public}s called with null message_length, dumping backtrace:%{public}s";
      goto LABEL_98;
    }

    __int16 v21 = (os_log_s *)__nwlog_obj();
    os_log_type_t v22 = type;
    if (!os_log_type_enabled(v21, type)) {
      goto LABEL_137;
    }
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
    __int16 v23 = "%{public}s called with null message_length";
    goto LABEL_136;
  }

  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
    int v20 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v43)
      {
        __int16 v21 = (os_log_s *)__nwlog_obj();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
          __int16 v23 = "%{public}s called with null aead_key, backtrace limit exceeded";
          goto LABEL_136;
        }

        goto LABEL_137;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v21 = (os_log_s *)__nwlog_obj();
      os_log_type_t v22 = type;
      BOOL v33 = os_log_type_enabled(v21, type);
      if (!backtrace_string)
      {
        if (v33)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
          __int16 v23 = "%{public}s called with null aead_key, no backtrace";
          goto LABEL_136;
        }

        goto LABEL_137;
      }

      if (!v33) {
        goto LABEL_99;
      }
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
      __int16 v47 = 2082;
      uint64_t v48 = (uint64_t)backtrace_string;
      int v31 = "%{public}s called with null aead_key, dumping backtrace:%{public}s";
      goto LABEL_98;
    }

    __int16 v21 = (os_log_s *)__nwlog_obj();
    os_log_type_t v22 = type;
    if (!os_log_type_enabled(v21, type)) {
      goto LABEL_137;
    }
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
    __int16 v23 = "%{public}s called with null aead_key";
    goto LABEL_136;
  }

  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
    int v20 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v43)
      {
        __int16 v21 = (os_log_s *)__nwlog_obj();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
          __int16 v23 = "%{public}s called with null aead_key_length, backtrace limit exceeded";
          goto LABEL_136;
        }

        goto LABEL_137;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v21 = (os_log_s *)__nwlog_obj();
      os_log_type_t v22 = type;
      BOOL v34 = os_log_type_enabled(v21, type);
      if (!backtrace_string)
      {
        if (v34)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
          __int16 v23 = "%{public}s called with null aead_key_length, no backtrace";
          goto LABEL_136;
        }

        goto LABEL_137;
      }

      if (!v34) {
        goto LABEL_99;
      }
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
      __int16 v47 = 2082;
      uint64_t v48 = (uint64_t)backtrace_string;
      int v31 = "%{public}s called with null aead_key_length, dumping backtrace:%{public}s";
      goto LABEL_98;
    }

    __int16 v21 = (os_log_s *)__nwlog_obj();
    os_log_type_t v22 = type;
    if (!os_log_type_enabled(v21, type)) {
      goto LABEL_137;
    }
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
    __int16 v23 = "%{public}s called with null aead_key_length";
    goto LABEL_136;
  }

  if (!a7)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
    int v20 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v43)
      {
        __int16 v21 = (os_log_s *)__nwlog_obj();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
          __int16 v23 = "%{public}s called with null input_nonce, backtrace limit exceeded";
          goto LABEL_136;
        }

        goto LABEL_137;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v21 = (os_log_s *)__nwlog_obj();
      os_log_type_t v22 = type;
      BOOL v35 = os_log_type_enabled(v21, type);
      if (!backtrace_string)
      {
        if (v35)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
          __int16 v23 = "%{public}s called with null input_nonce, no backtrace";
          goto LABEL_136;
        }

        goto LABEL_137;
      }

      if (!v35) {
        goto LABEL_99;
      }
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
      __int16 v47 = 2082;
      uint64_t v48 = (uint64_t)backtrace_string;
      int v31 = "%{public}s called with null input_nonce, dumping backtrace:%{public}s";
      goto LABEL_98;
    }

    __int16 v21 = (os_log_s *)__nwlog_obj();
    os_log_type_t v22 = type;
    if (!os_log_type_enabled(v21, type)) {
      goto LABEL_137;
    }
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
    __int16 v23 = "%{public}s called with null input_nonce";
    goto LABEL_136;
  }

  if (!a8)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
    int v20 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v43)
      {
        __int16 v21 = (os_log_s *)__nwlog_obj();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
          __int16 v23 = "%{public}s called with null aead_nonce_length, backtrace limit exceeded";
          goto LABEL_136;
        }

        goto LABEL_137;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v21 = (os_log_s *)__nwlog_obj();
      os_log_type_t v22 = type;
      BOOL v36 = os_log_type_enabled(v21, type);
      if (!backtrace_string)
      {
        if (v36)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
          __int16 v23 = "%{public}s called with null aead_nonce_length, no backtrace";
          goto LABEL_136;
        }

        goto LABEL_137;
      }

      if (!v36) {
        goto LABEL_99;
      }
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
      __int16 v47 = 2082;
      uint64_t v48 = (uint64_t)backtrace_string;
      int v31 = "%{public}s called with null aead_nonce_length, dumping backtrace:%{public}s";
      goto LABEL_98;
    }

    __int16 v21 = (os_log_s *)__nwlog_obj();
    os_log_type_t v22 = type;
    if (!os_log_type_enabled(v21, type)) {
      goto LABEL_137;
    }
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
    __int16 v23 = "%{public}s called with null aead_nonce_length";
    goto LABEL_136;
  }

  if (!a9)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
    int v20 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v43)
      {
        __int16 v21 = (os_log_s *)__nwlog_obj();
        os_log_type_t v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
          __int16 v23 = "%{public}s called with null out_encrypted_length, backtrace limit exceeded";
          goto LABEL_136;
        }

        goto LABEL_137;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v21 = (os_log_s *)__nwlog_obj();
      os_log_type_t v22 = type;
      BOOL v37 = os_log_type_enabled(v21, type);
      if (!backtrace_string)
      {
        if (v37)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
          __int16 v23 = "%{public}s called with null out_encrypted_length, no backtrace";
          goto LABEL_136;
        }

        goto LABEL_137;
      }

      if (!v37) {
        goto LABEL_99;
      }
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
      __int16 v47 = 2082;
      uint64_t v48 = (uint64_t)backtrace_string;
      int v31 = "%{public}s called with null out_encrypted_length, dumping backtrace:%{public}s";
      goto LABEL_98;
    }

    __int16 v21 = (os_log_s *)__nwlog_obj();
    os_log_type_t v22 = type;
    if (!os_log_type_enabled(v21, type)) {
      goto LABEL_137;
    }
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
    __int16 v23 = "%{public}s called with null out_encrypted_length";
    goto LABEL_136;
  }

  cchpke_params_x25519_AESGCM128_HKDF_SHA256();
  uint64_t v42 = cchpke_params_sizeof_aead_tag();
  if (cchpke_params_sizeof_aead_key() != a6)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
    int v20 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v21 = (os_log_s *)__nwlog_obj();
      os_log_type_t v22 = type;
      if (!os_log_type_enabled(v21, type)) {
        goto LABEL_137;
      }
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
      __int16 v23 = "%{public}s called with null (aead_key_length == cchpke_params_sizeof_aead_key(params))";
      goto LABEL_136;
    }

    if (!v43)
    {
      __int16 v21 = (os_log_s *)__nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
        __int16 v23 = "%{public}s called with null (aead_key_length == cchpke_params_sizeof_aead_key(params)), backtrace limit exceeded";
        goto LABEL_136;
      }

      goto LABEL_137;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v21 = (os_log_s *)__nwlog_obj();
    os_log_type_t v22 = type;
    BOOL v38 = os_log_type_enabled(v21, type);
    if (!backtrace_string)
    {
      if (v38)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
        __int16 v23 = "%{public}s called with null (aead_key_length == cchpke_params_sizeof_aead_key(params)), no backtrace";
        goto LABEL_136;
      }

      goto LABEL_137;
    }

    if (!v38) {
      goto LABEL_99;
    }
    *(_DWORD *)int buf = 136446466;
    os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
    __int16 v47 = 2082;
    uint64_t v48 = (uint64_t)backtrace_string;
    int v31 = "%{public}s called with null (aead_key_length == cchpke_params_sizeof_aead_key(params)), dumping backtrace:%{public}s";
LABEL_98:
    _os_log_impl(&dword_181A5C000, v21, v22, v31, buf, 0x16u);
    goto LABEL_99;
  }

  if (cchpke_params_sizeof_aead_nonce() != a8)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
    int v20 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v21 = (os_log_s *)__nwlog_obj();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v46 = "nw_http_encrypt_standalone_aead_chunk";
        __int16 v23 = "%{public}s called with null (aead_nonce_length == cchpke_params_sizeof_aead_nonce(params))";
        goto LABEL_136;
      }

BOOL nw_http_decrypt_standalone_aead_chunk( uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const void *a7, size_t a8, size_t *a9)
{
  uint64_t v58 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
    int v24 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v50)
      {
        uint64_t v25 = (os_log_s *)__nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
          int v27 = "%{public}s called with null encrypted_buffer, backtrace limit exceeded";
          goto LABEL_157;
        }

        goto LABEL_158;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v25 = (os_log_s *)__nwlog_obj();
      os_log_type_t v26 = type;
      BOOL v38 = os_log_type_enabled(v25, type);
      if (!backtrace_string)
      {
        if (v38)
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
          int v27 = "%{public}s called with null encrypted_buffer, no backtrace";
          goto LABEL_157;
        }

        goto LABEL_158;
      }

      if (!v38) {
        goto LABEL_116;
      }
      *(_DWORD *)int buf = 136446466;
      BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
      __int16 v54 = 2082;
      uint64_t v55 = (uint64_t)backtrace_string;
      BOOL v39 = "%{public}s called with null encrypted_buffer, dumping backtrace:%{public}s";
      goto LABEL_115;
    }

    uint64_t v25 = (os_log_s *)__nwlog_obj();
    os_log_type_t v26 = type;
    if (!os_log_type_enabled(v25, type)) {
      goto LABEL_158;
    }
    *(_DWORD *)int buf = 136446210;
    BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
    int v27 = "%{public}s called with null encrypted_buffer";
LABEL_157:
    _os_log_impl(&dword_181A5C000, v25, v26, v27, buf, 0xCu);
    goto LABEL_158;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
    int v24 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v50)
      {
        uint64_t v25 = (os_log_s *)__nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
          int v27 = "%{public}s called with null encrypted_length, backtrace limit exceeded";
          goto LABEL_157;
        }

        goto LABEL_158;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v25 = (os_log_s *)__nwlog_obj();
      os_log_type_t v26 = type;
      BOOL v40 = os_log_type_enabled(v25, type);
      if (!backtrace_string)
      {
        if (v40)
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
          int v27 = "%{public}s called with null encrypted_length, no backtrace";
          goto LABEL_157;
        }

        goto LABEL_158;
      }

      if (!v40) {
        goto LABEL_116;
      }
      *(_DWORD *)int buf = 136446466;
      BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
      __int16 v54 = 2082;
      uint64_t v55 = (uint64_t)backtrace_string;
      BOOL v39 = "%{public}s called with null encrypted_length, dumping backtrace:%{public}s";
      goto LABEL_115;
    }

    uint64_t v25 = (os_log_s *)__nwlog_obj();
    os_log_type_t v26 = type;
    if (!os_log_type_enabled(v25, type)) {
      goto LABEL_158;
    }
    *(_DWORD *)int buf = 136446210;
    BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
    int v27 = "%{public}s called with null encrypted_length";
    goto LABEL_157;
  }

  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
    int v24 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v50)
      {
        uint64_t v25 = (os_log_s *)__nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
          int v27 = "%{public}s called with null aead_key, backtrace limit exceeded";
          goto LABEL_157;
        }

        goto LABEL_158;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v25 = (os_log_s *)__nwlog_obj();
      os_log_type_t v26 = type;
      BOOL v41 = os_log_type_enabled(v25, type);
      if (!backtrace_string)
      {
        if (v41)
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
          int v27 = "%{public}s called with null aead_key, no backtrace";
          goto LABEL_157;
        }

        goto LABEL_158;
      }

      if (!v41) {
        goto LABEL_116;
      }
      *(_DWORD *)int buf = 136446466;
      BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
      __int16 v54 = 2082;
      uint64_t v55 = (uint64_t)backtrace_string;
      BOOL v39 = "%{public}s called with null aead_key, dumping backtrace:%{public}s";
      goto LABEL_115;
    }

    uint64_t v25 = (os_log_s *)__nwlog_obj();
    os_log_type_t v26 = type;
    if (!os_log_type_enabled(v25, type)) {
      goto LABEL_158;
    }
    *(_DWORD *)int buf = 136446210;
    BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
    int v27 = "%{public}s called with null aead_key";
    goto LABEL_157;
  }

  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
    int v24 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v50)
      {
        uint64_t v25 = (os_log_s *)__nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
          int v27 = "%{public}s called with null aead_key_length, backtrace limit exceeded";
          goto LABEL_157;
        }

        goto LABEL_158;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v25 = (os_log_s *)__nwlog_obj();
      os_log_type_t v26 = type;
      BOOL v42 = os_log_type_enabled(v25, type);
      if (!backtrace_string)
      {
        if (v42)
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
          int v27 = "%{public}s called with null aead_key_length, no backtrace";
          goto LABEL_157;
        }

        goto LABEL_158;
      }

      if (!v42) {
        goto LABEL_116;
      }
      *(_DWORD *)int buf = 136446466;
      BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
      __int16 v54 = 2082;
      uint64_t v55 = (uint64_t)backtrace_string;
      BOOL v39 = "%{public}s called with null aead_key_length, dumping backtrace:%{public}s";
      goto LABEL_115;
    }

    uint64_t v25 = (os_log_s *)__nwlog_obj();
    os_log_type_t v26 = type;
    if (!os_log_type_enabled(v25, type)) {
      goto LABEL_158;
    }
    *(_DWORD *)int buf = 136446210;
    BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
    int v27 = "%{public}s called with null aead_key_length";
    goto LABEL_157;
  }

  if (!a7)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
    int v24 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v50)
      {
        uint64_t v25 = (os_log_s *)__nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
          int v27 = "%{public}s called with null input_nonce, backtrace limit exceeded";
          goto LABEL_157;
        }

        goto LABEL_158;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v25 = (os_log_s *)__nwlog_obj();
      os_log_type_t v26 = type;
      BOOL v43 = os_log_type_enabled(v25, type);
      if (!backtrace_string)
      {
        if (v43)
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
          int v27 = "%{public}s called with null input_nonce, no backtrace";
          goto LABEL_157;
        }

        goto LABEL_158;
      }

      if (!v43) {
        goto LABEL_116;
      }
      *(_DWORD *)int buf = 136446466;
      BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
      __int16 v54 = 2082;
      uint64_t v55 = (uint64_t)backtrace_string;
      BOOL v39 = "%{public}s called with null input_nonce, dumping backtrace:%{public}s";
      goto LABEL_115;
    }

    uint64_t v25 = (os_log_s *)__nwlog_obj();
    os_log_type_t v26 = type;
    if (!os_log_type_enabled(v25, type)) {
      goto LABEL_158;
    }
    *(_DWORD *)int buf = 136446210;
    BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
    int v27 = "%{public}s called with null input_nonce";
    goto LABEL_157;
  }

  if (!a8)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
    int v24 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v50)
      {
        uint64_t v25 = (os_log_s *)__nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
          int v27 = "%{public}s called with null aead_nonce_length, backtrace limit exceeded";
          goto LABEL_157;
        }

        goto LABEL_158;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v25 = (os_log_s *)__nwlog_obj();
      os_log_type_t v26 = type;
      BOOL v44 = os_log_type_enabled(v25, type);
      if (!backtrace_string)
      {
        if (v44)
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
          int v27 = "%{public}s called with null aead_nonce_length, no backtrace";
          goto LABEL_157;
        }

        goto LABEL_158;
      }

      if (!v44) {
        goto LABEL_116;
      }
      *(_DWORD *)int buf = 136446466;
      BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
      __int16 v54 = 2082;
      uint64_t v55 = (uint64_t)backtrace_string;
      BOOL v39 = "%{public}s called with null aead_nonce_length, dumping backtrace:%{public}s";
      goto LABEL_115;
    }

    uint64_t v25 = (os_log_s *)__nwlog_obj();
    os_log_type_t v26 = type;
    if (!os_log_type_enabled(v25, type)) {
      goto LABEL_158;
    }
    *(_DWORD *)int buf = 136446210;
    BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
    int v27 = "%{public}s called with null aead_nonce_length";
    goto LABEL_157;
  }

  if (!a9)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
    int v24 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v50)
      {
        uint64_t v25 = (os_log_s *)__nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
          int v27 = "%{public}s called with null out_decrypted_length, backtrace limit exceeded";
          goto LABEL_157;
        }

        goto LABEL_158;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v25 = (os_log_s *)__nwlog_obj();
      os_log_type_t v26 = type;
      BOOL v45 = os_log_type_enabled(v25, type);
      if (!backtrace_string)
      {
        if (v45)
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
          int v27 = "%{public}s called with null out_decrypted_length, no backtrace";
          goto LABEL_157;
        }

        goto LABEL_158;
      }

      if (!v45) {
        goto LABEL_116;
      }
      *(_DWORD *)int buf = 136446466;
      BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
      __int16 v54 = 2082;
      uint64_t v55 = (uint64_t)backtrace_string;
      BOOL v39 = "%{public}s called with null out_decrypted_length, dumping backtrace:%{public}s";
      goto LABEL_115;
    }

    uint64_t v25 = (os_log_s *)__nwlog_obj();
    os_log_type_t v26 = type;
    if (!os_log_type_enabled(v25, type)) {
      goto LABEL_158;
    }
    *(_DWORD *)int buf = 136446210;
    BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
    int v27 = "%{public}s called with null out_decrypted_length";
    goto LABEL_157;
  }

  cchpke_params_x25519_AESGCM128_HKDF_SHA256();
  if (cchpke_params_sizeof_aead_key() != a6)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
    int v24 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v50)
      {
        uint64_t v25 = (os_log_s *)__nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
          int v27 = "%{public}s called with null (aead_key_length == cchpke_params_sizeof_aead_key(params)), backtrace limit exceeded";
          goto LABEL_157;
        }

        goto LABEL_158;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v25 = (os_log_s *)__nwlog_obj();
      os_log_type_t v26 = type;
      BOOL v46 = os_log_type_enabled(v25, type);
      if (!backtrace_string)
      {
        if (v46)
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
          int v27 = "%{public}s called with null (aead_key_length == cchpke_params_sizeof_aead_key(params)), no backtrace";
          goto LABEL_157;
        }

        goto LABEL_158;
      }

      if (!v46) {
        goto LABEL_116;
      }
      *(_DWORD *)int buf = 136446466;
      BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
      __int16 v54 = 2082;
      uint64_t v55 = (uint64_t)backtrace_string;
      BOOL v39 = "%{public}s called with null (aead_key_length == cchpke_params_sizeof_aead_key(params)), dumping backtrace:%{public}s";
      goto LABEL_115;
    }

    uint64_t v25 = (os_log_s *)__nwlog_obj();
    os_log_type_t v26 = type;
    if (!os_log_type_enabled(v25, type)) {
      goto LABEL_158;
    }
    *(_DWORD *)int buf = 136446210;
    BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
    int v27 = "%{public}s called with null (aead_key_length == cchpke_params_sizeof_aead_key(params))";
    goto LABEL_157;
  }

  if (cchpke_params_sizeof_aead_nonce() != a8)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
    int v24 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v25 = (os_log_s *)__nwlog_obj();
      os_log_type_t v26 = type;
      if (!os_log_type_enabled(v25, type)) {
        goto LABEL_158;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
      int v27 = "%{public}s called with null (aead_nonce_length == cchpke_params_sizeof_aead_nonce(params))";
      goto LABEL_157;
    }

    if (!v50)
    {
      uint64_t v25 = (os_log_s *)__nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
        int v27 = "%{public}s called with null (aead_nonce_length == cchpke_params_sizeof_aead_nonce(params)), backtrace limit exceeded";
        goto LABEL_157;
      }

      goto LABEL_158;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v25 = (os_log_s *)__nwlog_obj();
    os_log_type_t v26 = type;
    BOOL v47 = os_log_type_enabled(v25, type);
    if (!backtrace_string)
    {
      if (v47)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
        int v27 = "%{public}s called with null (aead_nonce_length == cchpke_params_sizeof_aead_nonce(params)), no backtrace";
        goto LABEL_157;
      }

      goto LABEL_158;
    }

    if (!v47) {
      goto LABEL_116;
    }
    *(_DWORD *)int buf = 136446466;
    BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
    __int16 v54 = 2082;
    uint64_t v55 = (uint64_t)backtrace_string;
    BOOL v39 = "%{public}s called with null (aead_nonce_length == cchpke_params_sizeof_aead_nonce(params)), dumping backtrace:%{public}s";
LABEL_115:
    _os_log_impl(&dword_181A5C000, v25, v26, v39, buf, 0x16u);
    goto LABEL_116;
  }

  unint64_t v15 = cchpke_params_sizeof_aead_tag();
  size_t v16 = a2 - v15;
  if (a2 <= v15)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
    int v24 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v25 = (os_log_s *)__nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v53 = "nw_http_decrypt_standalone_aead_chunk";
        int v27 = "%{public}s called with null (encrypted_length > tag_length)";
        goto LABEL_157;
      }

void sub_18243423C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)&OBJC_CLASS___NWConcrete_nw_proxy_hop;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

NWConcrete_nw_proxy_hop *nw_proxy_hop_create_masque(void *a1)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  id v2 = a1;
  if (v2)
  {
    unint64_t v3 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_proxy_hop);
    size_t v4 = v3;
    if (v3)
    {
      objc_storeStrong((id *)&v3->endpoint, a1);
      if (nw_protocol_masque_get_definition(void)::definition
        && (unint64_t v5 = os_retain((void *)nw_protocol_masque_get_definition(void)::definition)) != 0LL)
      {
        unint64_t v6 = os_retain(v5);
      }

      else
      {
        unint64_t v6 = 0LL;
      }

      options = nw_proxy_create_options(v6);
      uint64_t v8 = v4->options;
      v4->options = (OS_nw_protocol_options *)options;

      os_log_type_t v9 = v4;
      goto LABEL_29;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v10 = (id)gLogObj;
    *(_DWORD *)int buf = 136446210;
    BOOL v30 = "nw_proxy_hop_create_masque";
    size_t v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (__nwlog_fault(v11, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        size_t v12 = (os_log_s *)(id)gLogObj;
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v30 = "nw_proxy_hop_create_masque";
          _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s [nw_proxy_hop init] failed", buf, 0xCu);
        }
      }

      else if (v27)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        size_t v12 = (os_log_s *)(id)gLogObj;
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)int buf = 136446466;
            BOOL v30 = "nw_proxy_hop_create_masque";
            __int16 v31 = 2082;
            BOOL v32 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s [nw_proxy_hop init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          if (!v11) {
            goto LABEL_29;
          }
          goto LABEL_28;
        }

        if (v16)
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v30 = "nw_proxy_hop_create_masque";
          _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s [nw_proxy_hop init] failed, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        size_t v12 = (os_log_s *)(id)gLogObj;
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v30 = "nw_proxy_hop_create_masque";
          _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s [nw_proxy_hop init] failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v11)
    {
LABEL_29:

      goto LABEL_30;
    }

void sub_182434834(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_hop_set_masque_version(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  unint64_t v3 = a1;
  size_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v22 = "nw_proxy_hop_set_masque_version";
    unint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v22 = "nw_proxy_hop_set_masque_version";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null hop", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v22 = "nw_proxy_hop_set_masque_version";
          __int16 v23 = 2082;
          os_log_type_t v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null hop, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6) {
          goto LABEL_4;
        }
LABEL_39:
        free(v6);
        goto LABEL_4;
      }

      if (v13)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v22 = "nw_proxy_hop_set_masque_version";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v22 = "nw_proxy_hop_set_masque_version";
        _os_log_impl(&dword_181A5C000, v7, v17, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }

void nw_proxy_hop_set_supports_raw_ip(void *a1, char a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  unint64_t v3 = a1;
  size_t v4 = v3;
  if (v3)
  {
    *((_BYTE *)v3 + 80) = (_BYTE)v3[10] & 0xFE | a2;
    if (nw_protocol_options_is_masque(v3[5]))
    {
      nw_masque_options_set_allow_connect_ip(v4[5], a2);
    }

    goto LABEL_5;
  }

  __nwlog_obj();
  unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  BOOL v16 = "nw_proxy_hop_set_supports_raw_ip";
  unint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_proxy_hop_set_supports_raw_ip";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null hop", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v16 = "nw_proxy_hop_set_supports_raw_ip";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null hop, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_proxy_hop_set_supports_raw_ip";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_proxy_hop_set_supports_raw_ip";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

void nw_proxy_hop_set_supports_udp_listen(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  unint64_t v3 = a1;
  size_t v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 64;
    }
    else {
      char v5 = 0;
    }
    *((_BYTE *)v3 + 80) = (_BYTE)v3[10] & 0xBF | v5;
    goto LABEL_8;
  }

  __nwlog_obj();
  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  __int16 v17 = "nw_proxy_hop_set_supports_udp_listen";
  unint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_proxy_hop_set_supports_udp_listen";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null hop", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v17 = "nw_proxy_hop_set_supports_udp_listen";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null hop, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }

      if (v12)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_proxy_hop_set_supports_udp_listen";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_proxy_hop_set_supports_udp_listen";
        _os_log_impl(&dword_181A5C000, v8, v13, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

void nw_proxy_hop_set_supports_resumption(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  size_t v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 2;
    }
    else {
      char v5 = 0;
    }
    *((_BYTE *)v3 + 80) = *((_BYTE *)v3 + 80) & 0xFD | v5;
    goto LABEL_6;
  }

  __nwlog_obj();
  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  __int16 v17 = "nw_proxy_hop_set_supports_resumption";
  unint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_proxy_hop_set_supports_resumption";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null hop", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v17 = "nw_proxy_hop_set_supports_resumption";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null hop, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v12)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_proxy_hop_set_supports_resumption";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_proxy_hop_set_supports_resumption";
        _os_log_impl(&dword_181A5C000, v8, v13, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

void nw_proxy_hop_set_resumable_session_agent(void *a1, _OWORD *a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  size_t v4 = v3;
  if (v3)
  {
    *(_OWORD *)(v3 + _Block_object_dispose(va, 8) = *a2;
    goto LABEL_3;
  }

  __nwlog_obj();
  char v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  BOOL v16 = "nw_proxy_hop_set_resumable_session_agent";
  unint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_proxy_hop_set_resumable_session_agent";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null hop", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v16 = "nw_proxy_hop_set_resumable_session_agent";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null hop, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_proxy_hop_set_resumable_session_agent";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_proxy_hop_set_resumable_session_agent";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

void nw_proxy_hop_set_supports_l4s(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  size_t v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 4;
    }
    else {
      char v5 = 0;
    }
    *((_BYTE *)v3 + 80) = *((_BYTE *)v3 + 80) & 0xFB | v5;
    goto LABEL_6;
  }

  __nwlog_obj();
  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  __int16 v17 = "nw_proxy_hop_set_supports_l4s";
  unint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_proxy_hop_set_supports_l4s";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null hop", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v17 = "nw_proxy_hop_set_supports_l4s";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null hop, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v12)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_proxy_hop_set_supports_l4s";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_proxy_hop_set_supports_l4s";
        _os_log_impl(&dword_181A5C000, v8, v13, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

void nw_proxy_hop_set_enable_multipath(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  size_t v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 8;
    }
    else {
      char v5 = 0;
    }
    *((_BYTE *)v3 + 80) = *((_BYTE *)v3 + 80) & 0xF7 | v5;
    goto LABEL_6;
  }

  __nwlog_obj();
  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  __int16 v17 = "nw_proxy_hop_set_enable_multipath";
  unint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_proxy_hop_set_enable_multipath";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null hop", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v17 = "nw_proxy_hop_set_enable_multipath";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null hop, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v12)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_proxy_hop_set_enable_multipath";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_proxy_hop_set_enable_multipath";
        _os_log_impl(&dword_181A5C000, v8, v13, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

NWConcrete_nw_proxy_hop *nw_proxy_hop_create_oblivious_http(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    BOOL v40 = "nw_proxy_hop_create_oblivious_http";
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v37 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v40 = "nw_proxy_hop_create_oblivious_http";
        _os_log_impl(&dword_181A5C000, v21, v22, "%{public}s called with null oblivious_config", buf, 0xCu);
      }

      goto LABEL_74;
    }

    if (!v37)
    {
      __nwlog_obj();
      int v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v34 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v40 = "nw_proxy_hop_create_oblivious_http";
        _os_log_impl( &dword_181A5C000,  v21,  v34,  "%{public}s called with null oblivious_config, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_74;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    int v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v28 = type;
    BOOL v29 = os_log_type_enabled(v21, type);
    if (!backtrace_string)
    {
      if (v29)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v40 = "nw_proxy_hop_create_oblivious_http";
        _os_log_impl( &dword_181A5C000,  v21,  v28,  "%{public}s called with null oblivious_config, no backtrace",  buf,  0xCu);
      }

      goto LABEL_74;
    }

    if (v29)
    {
      *(_DWORD *)int buf = 136446466;
      BOOL v40 = "nw_proxy_hop_create_oblivious_http";
      __int16 v41 = 2082;
      BOOL v42 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v21,  v28,  "%{public}s called with null oblivious_config, dumping backtrace:%{public}s",  buf,  0x16u);
    }

void sub_18243664C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_proxy_hop *nw_proxy_hop_create_oblivious_http_with_context( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v45 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    int v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    BOOL v42 = "nw_proxy_hop_create_oblivious_http_with_context";
    os_log_type_t v22 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v42 = "nw_proxy_hop_create_oblivious_http_with_context";
        _os_log_impl(&dword_181A5C000, v23, v24, "%{public}s called with null oblivious_config", buf, 0xCu);
      }

      goto LABEL_74;
    }

    if (!v39)
    {
      __nwlog_obj();
      __int16 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v36 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v42 = "nw_proxy_hop_create_oblivious_http_with_context";
        _os_log_impl( &dword_181A5C000,  v23,  v36,  "%{public}s called with null oblivious_config, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_74;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    __int16 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v30 = type;
    BOOL v31 = os_log_type_enabled(v23, type);
    if (!backtrace_string)
    {
      if (v31)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v42 = "nw_proxy_hop_create_oblivious_http_with_context";
        _os_log_impl( &dword_181A5C000,  v23,  v30,  "%{public}s called with null oblivious_config, no backtrace",  buf,  0xCu);
      }

      goto LABEL_74;
    }

    if (v31)
    {
      *(_DWORD *)int buf = 136446466;
      BOOL v42 = "nw_proxy_hop_create_oblivious_http_with_context";
      __int16 v43 = 2082;
      BOOL v44 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v23,  v30,  "%{public}s called with null oblivious_config, dumping backtrace:%{public}s",  buf,  0x16u);
    }

void sub_182436F7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_hop_set_enable_chunked_oblivious_http(void *a1, char a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  size_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    char v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v22 = "nw_proxy_hop_set_enable_chunked_oblivious_http";
    unint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v22 = "nw_proxy_hop_set_enable_chunked_oblivious_http";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null hop", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v22 = "nw_proxy_hop_set_enable_chunked_oblivious_http";
          __int16 v23 = 2082;
          os_log_type_t v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null hop, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6) {
          goto LABEL_4;
        }
LABEL_39:
        free(v6);
        goto LABEL_4;
      }

      if (v13)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v22 = "nw_proxy_hop_set_enable_chunked_oblivious_http";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v22 = "nw_proxy_hop_set_enable_chunked_oblivious_http";
        _os_log_impl(&dword_181A5C000, v7, v17, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }

void sub_182437444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_hop_set_oblivious_http_context_id(void *a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  size_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    char v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v22 = "nw_proxy_hop_set_oblivious_http_context_id";
    unint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v22 = "nw_proxy_hop_set_oblivious_http_context_id";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null hop", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v22 = "nw_proxy_hop_set_oblivious_http_context_id";
          __int16 v23 = 2082;
          os_log_type_t v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null hop, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6) {
          goto LABEL_4;
        }
LABEL_39:
        free(v6);
        goto LABEL_4;
      }

      if (v13)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v22 = "nw_proxy_hop_set_oblivious_http_context_id";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v22 = "nw_proxy_hop_set_oblivious_http_context_id";
        _os_log_impl(&dword_181A5C000, v7, v17, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }

void sub_182437908(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_hop_add_next_hop_host(void *a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  char v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    BOOL v29 = "nw_proxy_hop_add_next_hop_host";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v29 = "nw_proxy_hop_add_next_hop_host";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null hop", buf, 0xCu);
      }
    }

    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v29 = "nw_proxy_hop_add_next_hop_host";
          __int16 v30 = 2082;
          BOOL v31 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v16,  "%{public}s called with null hop, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v8) {
          goto LABEL_5;
        }
LABEL_56:
        free(v8);
        goto LABEL_5;
      }

      if (v17)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v29 = "nw_proxy_hop_add_next_hop_host";
        _os_log_impl(&dword_181A5C000, v9, v16, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v29 = "nw_proxy_hop_add_next_hop_host";
        _os_log_impl(&dword_181A5C000, v9, v23, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }

void nw_proxy_hop_add_extra_header(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  char v5 = a1;
  unint64_t v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v34 = "nw_proxy_hop_add_extra_header";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v34 = "nw_proxy_hop_add_extra_header";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null hop", buf, 0xCu);
      }
    }

    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v34 = "nw_proxy_hop_add_extra_header";
          __int16 v35 = 2082;
          os_log_type_t v36 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v18,  "%{public}s called with null hop, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_72:
        if (!v8) {
          goto LABEL_6;
        }
LABEL_73:
        free(v8);
        goto LABEL_6;
      }

      if (v19)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v34 = "nw_proxy_hop_add_extra_header";
        _os_log_impl(&dword_181A5C000, v9, v18, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v34 = "nw_proxy_hop_add_extra_header";
        _os_log_impl(&dword_181A5C000, v9, v27, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }

void nw_proxy_hop_add_token_header_with_agent_type( void *a1, uint64_t a2, const char *a3, const char *a4, const char *a5, const char *a6)
{
  uint64_t v66 = *MEMORY[0x1895F89C0];
  os_log_type_t v11 = a1;
  os_log_type_t v12 = v11;
  if (!v11)
  {
    __nwlog_obj();
    os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    BOOL v63 = "nw_proxy_hop_add_token_header_with_agent_type";
    os_log_type_t v15 = (const char *)_os_log_send_and_compose_impl();

    LOBYTE(v60) = 16;
    os_log_type_t v61 = OS_LOG_TYPE_DEFAULT;
    if (v60 == 17)
    {
      __nwlog_obj();
      os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s called with null hop", buf, 0xCu);
      }
    }

    else if (v61)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v34 = v60;
      BOOL v35 = os_log_type_enabled(v16, (os_log_type_t)v60);
      if (backtrace_string)
      {
        if (v35)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v63 = "nw_proxy_hop_add_token_header_with_agent_type";
          __int16 v64 = 2082;
          BOOL v65 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v16,  v34,  "%{public}s called with null hop, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_142:
        if (!v15) {
          goto LABEL_11;
        }
        goto LABEL_143;
      }

      if (v35)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_181A5C000, v16, v34, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v51 = v60;
      if (os_log_type_enabled(v16, (os_log_type_t)v60))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v63 = "nw_proxy_hop_add_token_header_with_agent_type";
        _os_log_impl(&dword_181A5C000, v16, v51, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }

void sub_182439978(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_hop_add_token_header( void *a1, uint64_t a2, const char *a3, const char *a4, const unsigned __int8 *a5)
{
  uint64_t v60 = *MEMORY[0x1895F89C0];
  os_log_type_t v9 = a1;
  os_log_type_t v10 = v9;
  if (!v9)
  {
    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)uuid_string_t out = 136446210;
    *(void *)&out[4] = "nw_proxy_hop_add_token_header";
    BOOL v13 = (const char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v54) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        *(_DWORD *)uuid_string_t out = 136446210;
        *(void *)&out[4] = "nw_proxy_hop_add_token_header";
        _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s called with null hop", (uint8_t *)out, 0xCu);
      }
    }

    else if ((_BYTE)v54)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v30 = type[0];
      BOOL v31 = os_log_type_enabled(v14, type[0]);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)uuid_string_t out = 136446466;
          *(void *)&out[4] = "nw_proxy_hop_add_token_header";
          *(_WORD *)&out[12] = 2082;
          *(void *)&out[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v14,  v30,  "%{public}s called with null hop, dumping backtrace:%{public}s",  (uint8_t *)out,  0x16u);
        }

        free(backtrace_string);
LABEL_125:
        if (!v13) {
          goto LABEL_10;
        }
        goto LABEL_126;
      }

      if (v31)
      {
        *(_DWORD *)uuid_string_t out = 136446210;
        *(void *)&out[4] = "nw_proxy_hop_add_token_header";
        _os_log_impl(&dword_181A5C000, v14, v30, "%{public}s called with null hop, no backtrace", (uint8_t *)out, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v45 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        *(_DWORD *)uuid_string_t out = 136446210;
        *(void *)&out[4] = "nw_proxy_hop_add_token_header";
        _os_log_impl( &dword_181A5C000,  v14,  v45,  "%{public}s called with null hop, backtrace limit exceeded",  (uint8_t *)out,  0xCu);
      }
    }

void sub_18243A8CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_hop_add_server_raw_public_key(void *a1, const UInt8 *a2, CFIndex a3)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  unint64_t v6 = (CFMutableArrayRef *)v5;
  if (!v5)
  {
    __nwlog_obj();
    os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    BOOL v36 = "nw_proxy_hop_add_server_raw_public_key";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v36 = "nw_proxy_hop_add_server_raw_public_key";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null hop", buf, 0xCu);
      }
    }

    else if (v33)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v36 = "nw_proxy_hop_add_server_raw_public_key";
          __int16 v37 = 2082;
          BOOL v38 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v20,  "%{public}s called with null hop, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_75:
        if (!v10) {
          goto LABEL_9;
        }
LABEL_76:
        free(v10);
        goto LABEL_9;
      }

      if (v21)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v36 = "nw_proxy_hop_add_server_raw_public_key";
        _os_log_impl(&dword_181A5C000, v11, v20, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v36 = "nw_proxy_hop_add_server_raw_public_key";
        _os_log_impl(&dword_181A5C000, v11, v29, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }

void sub_18243B1F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_hop_set_server_raw_public_key(void *a1, const UInt8 *a2, CFIndex a3)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  unint64_t v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    BOOL v34 = "nw_proxy_hop_set_server_raw_public_key";
    CFDataRef v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v34 = "nw_proxy_hop_set_server_raw_public_key";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null hop", buf, 0xCu);
      }
    }

    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      BOOL v19 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v34 = "nw_proxy_hop_set_server_raw_public_key";
          __int16 v35 = 2082;
          BOOL v36 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v18,  "%{public}s called with null hop, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_72:
        if (!v8) {
          goto LABEL_6;
        }
LABEL_73:
        free(v8);
        goto LABEL_6;
      }

      if (v19)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v34 = "nw_proxy_hop_set_server_raw_public_key";
        _os_log_impl(&dword_181A5C000, v9, v18, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v34 = "nw_proxy_hop_set_server_raw_public_key";
        _os_log_impl(&dword_181A5C000, v9, v27, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }

void sub_18243BADC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_hop_set_client_identity_reference(void *a1, const void *a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v23 = "nw_proxy_hop_set_client_identity_reference";
    unint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      CFDataRef v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v23 = "nw_proxy_hop_set_client_identity_reference";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null hop", buf, 0xCu);
      }
    }

    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      CFDataRef v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v23 = "nw_proxy_hop_set_client_identity_reference";
          __int16 v24 = 2082;
          os_log_type_t v25 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null hop, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v7) {
          goto LABEL_6;
        }
LABEL_41:
        free(v7);
        goto LABEL_6;
      }

      if (v14)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v23 = "nw_proxy_hop_set_client_identity_reference";
        _os_log_impl(&dword_181A5C000, v8, v13, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      CFDataRef v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v23 = "nw_proxy_hop_set_client_identity_reference";
        _os_log_impl(&dword_181A5C000, v8, v18, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }

void sub_18243BFA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_hop_add_client_certificate_reference(void *a1, const void *a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v23 = "nw_proxy_hop_add_client_certificate_reference";
    unint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      CFDataRef v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v23 = "nw_proxy_hop_add_client_certificate_reference";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null hop", buf, 0xCu);
      }
    }

    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      CFDataRef v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v23 = "nw_proxy_hop_add_client_certificate_reference";
          __int16 v24 = 2082;
          os_log_type_t v25 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null hop, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v7) {
          goto LABEL_6;
        }
LABEL_41:
        free(v7);
        goto LABEL_6;
      }

      if (v14)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v23 = "nw_proxy_hop_add_client_certificate_reference";
        _os_log_impl(&dword_181A5C000, v8, v13, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      CFDataRef v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v23 = "nw_proxy_hop_add_client_certificate_reference";
        _os_log_impl(&dword_181A5C000, v8, v18, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }

void sub_18243C488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_proxy_hop_set_use_x25519(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 0x80;
    }
    else {
      char v5 = 0;
    }
    *((_BYTE *)v3 + 80) = v5 & 0x80 | *((_BYTE *)v3 + 80) & 0x7F;
    goto LABEL_6;
  }

  __nwlog_obj();
  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  BOOL v17 = "nw_proxy_hop_set_use_x25519";
  unint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      CFDataRef v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v17 = "nw_proxy_hop_set_use_x25519";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null hop", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      CFDataRef v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v17 = "nw_proxy_hop_set_use_x25519";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null hop, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v12)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v17 = "nw_proxy_hop_set_use_x25519";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      CFDataRef v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v17 = "nw_proxy_hop_set_use_x25519";
        _os_log_impl(&dword_181A5C000, v8, v13, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

void nw_proxy_hop_set_client_identity_is_raw_public_key(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 4;
    }
    else {
      char v5 = 0;
    }
    *((_BYTE *)v3 + 81) = *((_BYTE *)v3 + 81) & 0xFB | v5;
    goto LABEL_6;
  }

  __nwlog_obj();
  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  BOOL v17 = "nw_proxy_hop_set_client_identity_is_raw_public_key";
  unint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      CFDataRef v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v17 = "nw_proxy_hop_set_client_identity_is_raw_public_key";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null hop", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      CFDataRef v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v17 = "nw_proxy_hop_set_client_identity_is_raw_public_key";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null hop, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v12)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v17 = "nw_proxy_hop_set_client_identity_is_raw_public_key";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      CFDataRef v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v17 = "nw_proxy_hop_set_client_identity_is_raw_public_key";
        _os_log_impl(&dword_181A5C000, v8, v13, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

void nw_proxy_hop_set_trust_certs(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 16;
    }
    else {
      char v5 = 0;
    }
    *((_BYTE *)v3 + 80) = *((_BYTE *)v3 + 80) & 0xEF | v5;
    goto LABEL_6;
  }

  __nwlog_obj();
  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  BOOL v17 = "nw_proxy_hop_set_trust_certs";
  unint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      CFDataRef v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v17 = "nw_proxy_hop_set_trust_certs";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null hop", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      CFDataRef v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v17 = "nw_proxy_hop_set_trust_certs";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null hop, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v12)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v17 = "nw_proxy_hop_set_trust_certs";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      CFDataRef v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v17 = "nw_proxy_hop_set_trust_certs";
        _os_log_impl(&dword_181A5C000, v8, v13, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

void nw_proxy_hop_set_enable_demux(void *a1, char a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    *((_BYTE *)v3 + 81) = *((_BYTE *)v3 + 81) & 0xFE | a2;
    goto LABEL_3;
  }

  __nwlog_obj();
  char v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_proxy_hop_set_enable_demux";
  unint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_proxy_hop_set_enable_demux";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null hop", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v16 = "nw_proxy_hop_set_enable_demux";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null hop, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_proxy_hop_set_enable_demux";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_proxy_hop_set_enable_demux";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

void nw_proxy_hop_supports_udp_proxying_over_http2(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 2;
    }
    else {
      char v5 = 0;
    }
    *((_BYTE *)v3 + 81) = *((_BYTE *)v3 + 81) & 0xFD | v5;
    goto LABEL_6;
  }

  __nwlog_obj();
  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  __int16 v17 = "nw_proxy_hop_supports_udp_proxying_over_http2";
  unint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_proxy_hop_supports_udp_proxying_over_http2";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null hop", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v17 = "nw_proxy_hop_supports_udp_proxying_over_http2";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null hop, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v12)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_proxy_hop_supports_udp_proxying_over_http2";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null hop, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_proxy_hop_supports_udp_proxying_over_http2";
        _os_log_impl(&dword_181A5C000, v8, v13, "%{public}s called with null hop, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

NWConcrete_nw_proxy_config *nw_proxy_config_create_privacy_proxy_internal(void *a1)
{
  uint64_t v103 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    BOOL v75 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    __int128 v100 = "nw_proxy_config_create_privacy_proxy_internal";
    char v76 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v97 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      size_t v77 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v78 = type;
      if (os_log_type_enabled(v77, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int128 v100 = "nw_proxy_config_create_privacy_proxy_internal";
        _os_log_impl(&dword_181A5C000, v77, v78, "%{public}s called with null array", buf, 0xCu);
      }
    }

    else if (v97)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      size_t v77 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v82 = type;
      BOOL v83 = os_log_type_enabled(v77, type);
      if (backtrace_string)
      {
        if (v83)
        {
          *(_DWORD *)int buf = 136446466;
          __int128 v100 = "nw_proxy_config_create_privacy_proxy_internal";
          __int16 v101 = 2082;
          __int128 v102 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v77,  v82,  "%{public}s called with null array, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v76) {
          goto LABEL_205;
        }
        goto LABEL_204;
      }

      if (v83)
      {
        *(_DWORD *)int buf = 136446210;
        __int128 v100 = "nw_proxy_config_create_privacy_proxy_internal";
        _os_log_impl(&dword_181A5C000, v77, v82, "%{public}s called with null array, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      size_t v77 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v87 = type;
      if (os_log_type_enabled(v77, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int128 v100 = "nw_proxy_config_create_privacy_proxy_internal";
        _os_log_impl( &dword_181A5C000,  v77,  v87,  "%{public}s called with null array, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_202;
  }

  uint64_t v4 = *((void *)v1 + 2);
  uint64_t v3 = *((void *)v1 + 3);
  uint64_t v5 = v3 - v4;
  if (v3 == v4)
  {
    __nwlog_obj();
    __int128 v79 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    __int128 v100 = "nw_proxy_config_create_privacy_proxy_internal";
    char v76 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v97 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      size_t v77 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v80 = type;
      if (os_log_type_enabled(v77, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int128 v100 = "nw_proxy_config_create_privacy_proxy_internal";
        _os_log_impl(&dword_181A5C000, v77, v80, "%{public}s called with null (hop_count > 0)", buf, 0xCu);
      }
    }

    else if (v97)
    {
      uint64_t v84 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      size_t v77 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v85 = type;
      BOOL v86 = os_log_type_enabled(v77, type);
      if (v84)
      {
        if (v86)
        {
          *(_DWORD *)int buf = 136446466;
          __int128 v100 = "nw_proxy_config_create_privacy_proxy_internal";
          __int16 v101 = 2082;
          __int128 v102 = v84;
          _os_log_impl( &dword_181A5C000,  v77,  v85,  "%{public}s called with null (hop_count > 0), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v84);
LABEL_203:
        if (!v76)
        {
LABEL_205:
          uint64_t v19 = 0LL;
          goto LABEL_169;
        }

void sub_18243E8E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_18243EB34(_Unwind_Exception *a1)
{
}

NWConcrete_nw_proxy_config *nw_proxy_config_create_fallback_privacy_proxy(void *a1)
{
  uint64_t v90 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    id v68 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v87 = "nw_proxy_config_create_fallback_privacy_proxy";
    uint64_t v69 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v84 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v70 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v71 = type;
      if (os_log_type_enabled(v70, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v87 = "nw_proxy_config_create_fallback_privacy_proxy";
        _os_log_impl(&dword_181A5C000, v70, v71, "%{public}s called with null array", buf, 0xCu);
      }
    }

    else if (v84)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v70 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v75 = type;
      BOOL v76 = os_log_type_enabled(v70, type);
      if (backtrace_string)
      {
        if (v76)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v87 = "nw_proxy_config_create_fallback_privacy_proxy";
          __int16 v88 = 2082;
          size_t v89 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v70,  v75,  "%{public}s called with null array, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v69) {
          goto LABEL_179;
        }
        goto LABEL_178;
      }

      if (v76)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v87 = "nw_proxy_config_create_fallback_privacy_proxy";
        _os_log_impl(&dword_181A5C000, v70, v75, "%{public}s called with null array, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v70 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v80 = type;
      if (os_log_type_enabled(v70, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v87 = "nw_proxy_config_create_fallback_privacy_proxy";
        _os_log_impl( &dword_181A5C000,  v70,  v80,  "%{public}s called with null array, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_176;
  }

  uint64_t v4 = *((void *)v1 + 2);
  uint64_t v3 = *((void *)v1 + 3);
  uint64_t v5 = v3 - v4;
  if (v3 == v4)
  {
    __nwlog_obj();
    id v72 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v87 = "nw_proxy_config_create_fallback_privacy_proxy";
    uint64_t v69 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v84 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v70 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v73 = type;
      if (os_log_type_enabled(v70, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v87 = "nw_proxy_config_create_fallback_privacy_proxy";
        _os_log_impl(&dword_181A5C000, v70, v73, "%{public}s called with null (hop_count > 0)", buf, 0xCu);
      }
    }

    else if (v84)
    {
      size_t v77 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v70 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v78 = type;
      BOOL v79 = os_log_type_enabled(v70, type);
      if (v77)
      {
        if (v79)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v87 = "nw_proxy_config_create_fallback_privacy_proxy";
          __int16 v88 = 2082;
          size_t v89 = v77;
          _os_log_impl( &dword_181A5C000,  v70,  v78,  "%{public}s called with null (hop_count > 0), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v77);
LABEL_177:
        if (!v69)
        {
LABEL_179:
          BOOL v22 = 0LL;
          goto LABEL_143;
        }

void sub_18243FF10( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1824400A8(_Unwind_Exception *a1)
{
}

void sub_182441718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_182441B24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__66670(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__66671(uint64_t a1)
{
}

void __39__nw_listener_inbox_socket_description__block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 24);
  if (!v3)
  {
    description = nw_endpoint_get_description(*(void **)(v2 + 32));
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(v5 + 40);
    if (v6) {
      uint64_t v7 = (const char *)(v6 + 104);
    }
    else {
      uint64_t v7 = "<NULL>";
    }
    CFStringRef v8 = CFStringCreateWithFormat( (CFAllocatorRef)*MEMORY[0x189604DB0],  0LL,  @"socket: %d, endpoint: %s, interface: %s",  *(unsigned int *)(v5 + 80),  description,  v7);
    uint64_t v9 = *(void *)(a1 + 32);
    os_log_type_t v10 = *(void **)(v9 + 24);
    *(void *)(v9 + 24) = v8;

    uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 24LL);
  }

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), v3);
}

nw_error *nw_listener_socket_inbox_create_socket(void *a1, const unsigned __int8 *a2, int *a3)
{
  uint64_t v288 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  uint64_t v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    __int16 v114 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)address = 136446210;
    *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
    uint64_t v115 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v282) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v116 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v117 = type[0];
      if (os_log_type_enabled(v116, type[0]))
      {
        *(_DWORD *)address = 136446210;
        *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
        _os_log_impl(&dword_181A5C000, v116, v117, "%{public}s called with null parameters", (uint8_t *)address, 0xCu);
      }
    }

    else if ((_BYTE)v282)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v116 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v125 = type[0];
      BOOL v126 = os_log_type_enabled(v116, type[0]);
      if (backtrace_string)
      {
        if (v126)
        {
          *(_DWORD *)address = 136446466;
          *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
          address[6] = 2082;
          *(void *)&address[7] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v116,  v125,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  (uint8_t *)address,  0x16u);
        }

        free(backtrace_string);
        if (!v115) {
          goto LABEL_377;
        }
        goto LABEL_376;
      }

      if (v126)
      {
        *(_DWORD *)address = 136446210;
        *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
        _os_log_impl( &dword_181A5C000,  v116,  v125,  "%{public}s called with null parameters, no backtrace",  (uint8_t *)address,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int16 v116 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v131 = type[0];
      if (os_log_type_enabled(v116, type[0]))
      {
        *(_DWORD *)address = 136446210;
        *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
        _os_log_impl( &dword_181A5C000,  v116,  v131,  "%{public}s called with null parameters, backtrace limit exceeded",  (uint8_t *)address,  0xCu);
      }
    }

    goto LABEL_374;
  }

  if (!a3)
  {
    __nwlog_obj();
    uint64_t v118 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)address = 136446210;
    *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
    uint64_t v115 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v282) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v116 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v119 = type[0];
      if (os_log_type_enabled(v116, type[0]))
      {
        *(_DWORD *)address = 136446210;
        *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
        _os_log_impl(&dword_181A5C000, v116, v119, "%{public}s called with null outFD", (uint8_t *)address, 0xCu);
      }
    }

    else if ((_BYTE)v282)
    {
      int v127 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v116 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v128 = type[0];
      BOOL v129 = os_log_type_enabled(v116, type[0]);
      if (v127)
      {
        if (v129)
        {
          *(_DWORD *)address = 136446466;
          *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
          address[6] = 2082;
          *(void *)&address[7] = v127;
          _os_log_impl( &dword_181A5C000,  v116,  v128,  "%{public}s called with null outFD, dumping backtrace:%{public}s",  (uint8_t *)address,  0x16u);
        }

        free(v127);
LABEL_375:
        if (!v115)
        {
LABEL_377:
          char v24 = 0LL;
          goto LABEL_111;
        }

LABEL_376:
        free(v115);
        goto LABEL_377;
      }

      if (v129)
      {
        *(_DWORD *)address = 136446210;
        *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
        _os_log_impl( &dword_181A5C000,  v116,  v128,  "%{public}s called with null outFD, no backtrace",  (uint8_t *)address,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int16 v116 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v132 = type[0];
      if (os_log_type_enabled(v116, type[0]))
      {
        *(_DWORD *)address = 136446210;
        *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
        _os_log_impl( &dword_181A5C000,  v116,  v132,  "%{public}s called with null outFD, backtrace limit exceeded",  (uint8_t *)address,  0xCu);
      }
    }

LABEL_433:
            int *v273 = v74;
            goto LABEL_434;
          }

LABEL_428:
              goto LABEL_429;
            }

            if (v20 == 6)
            {
              if (listen(v78, 1024))
              {
                v270 = (nw_error *)nw_error_create_posix_error(**(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3))
                                                                           + 8));
                int v137 = nw_error_get_error_code(v270);
                __nwlog_obj();
                char v138 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)address = 136446466;
                *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                address[6] = 1024;
                *(_DWORD *)&address[7] = v137;
                BOOL v83 = (char *)_os_log_send_and_compose_impl();

                type[0] = OS_LOG_TYPE_ERROR;
                os_log_type_t v279 = OS_LOG_TYPE_DEFAULT;
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  char v84 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  os_log_type_t v139 = type[0];
                  if (os_log_type_enabled(v84, type[0]))
                  {
                    *(_DWORD *)address = 136446466;
                    *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 1024;
                    *(_DWORD *)&address[7] = v137;
                    _os_log_impl( &dword_181A5C000,  v84,  v139,  "%{public}s listen failed %{darwin.errno}d",  (uint8_t *)address,  0x12u);
                  }

                  goto LABEL_400;
                }

                if (v279 == OS_LOG_TYPE_DEFAULT)
                {
                  __nwlog_obj();
                  char v84 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  os_log_type_t v164 = type[0];
                  if (os_log_type_enabled(v84, type[0]))
                  {
                    *(_DWORD *)address = 136446466;
                    *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 1024;
                    *(_DWORD *)&address[7] = v137;
                    _os_log_impl( &dword_181A5C000,  v84,  v164,  "%{public}s listen failed %{darwin.errno}d, backtrace limit exceeded",  (uint8_t *)address,  0x12u);
                  }

                  goto LABEL_400;
                }

                BOOL v153 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                char v96 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v154 = type[0];
                BOOL v155 = os_log_type_enabled(v96, type[0]);
                if (!v153)
                {
                  if (v155)
                  {
                    *(_DWORD *)address = 136446466;
                    *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 1024;
                    *(_DWORD *)&address[7] = v137;
                    _os_log_impl( &dword_181A5C000,  v96,  v154,  "%{public}s listen failed %{darwin.errno}d, no backtrace",  (uint8_t *)address,  0x12u);
                  }

                  goto LABEL_428;
                }

                if (v155)
                {
                  *(_DWORD *)address = 136446722;
                  *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 1024;
                  *(_DWORD *)&address[7] = v137;
                  address[9] = 2082;
                  *(void *)&address[10] = v153;
                  _os_log_impl( &dword_181A5C000,  v96,  v154,  "%{public}s listen failed %{darwin.errno}d, dumping backtrace:%{public}s",  (uint8_t *)address,  0x1Cu);
                }

LABEL_486:
                if (v191) {
                  free(v191);
                }
LABEL_488:
                if ((setsockopt(v274, 41, 12, type, 0x14u) & 0x80000000) == 0)
                {
                  v212 = nw_parameters_copy_default_protocol_stack((nw_parameters_t)v75);
                  v213 = v212;
                  if (v212)
                  {
                    nw_protocol_options_t v214 = nw_protocol_stack_copy_internet_protocol(v212);
                    nw_protocol_options_t v215 = v214;
                    if (v214)
                    {
                      v216 = nw_ip_options_get_disable_multicast_loopback(v214) ? &v281 : &v282;
                      if (setsockopt(v274, 41, 11, v216, 4u))
                      {
                        int v217 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
                        __nwlog_obj();
                        BOOL v218 = (void *)objc_claimAutoreleasedReturnValue();
                        *(_DWORD *)address = 136446466;
                        *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                        address[6] = 1024;
                        int v219 = v217;
                        *(_DWORD *)&address[7] = v217;
                        BOOL v220 = (char *)_os_log_send_and_compose_impl();

                        os_log_type_t v279 = OS_LOG_TYPE_ERROR;
                        char v278 = 0;
                        if (__nwlog_fault(v220, &v279, &v278))
                        {
                          if (v279 == OS_LOG_TYPE_FAULT)
                          {
                            __nwlog_obj();
                            v221 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                            os_log_type_t v222 = v279;
                            if (os_log_type_enabled(v221, v279))
                            {
                              *(_DWORD *)address = 136446466;
                              *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                              address[6] = 1024;
                              *(_DWORD *)&address[7] = v219;
                              _os_log_impl( &dword_181A5C000,  v221,  v222,  "%{public}s IPV6_MULTICAST_LOOP failed %{darwin.errno}d",  (uint8_t *)address,  0x12u);
                            }
                          }

                          else
                          {
                            if (v278)
                            {
                              v232 = (char *)__nw_create_backtrace_string();
                              __nwlog_obj();
                              v233 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                              os_log_type_t v267 = v279;
                              BOOL v234 = os_log_type_enabled(v233, v279);
                              if (v232)
                              {
                                if (v234)
                                {
                                  *(_DWORD *)address = 136446722;
                                  *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                                  address[6] = 1024;
                                  *(_DWORD *)&address[7] = v219;
                                  address[9] = 2082;
                                  *(void *)&address[10] = v232;
                                  _os_log_impl( &dword_181A5C000,  v233,  v267,  "%{public}s IPV6_MULTICAST_LOOP failed %{darwin.errno}d, dumping backtrace:%{public}s",  (uint8_t *)address,  0x1Cu);
                                }

                                free(v232);
                              }

                              else
                              {
                                if (v234)
                                {
                                  *(_DWORD *)address = 136446466;
                                  *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                                  address[6] = 1024;
                                  *(_DWORD *)&address[7] = v219;
                                  _os_log_impl( &dword_181A5C000,  v233,  v267,  "%{public}s IPV6_MULTICAST_LOOP failed %{darwin.errno}d, no backtrace",  (uint8_t *)address,  0x12u);
                                }
                              }

                              goto LABEL_533;
                            }

                            __nwlog_obj();
                            v221 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                            os_log_type_t v236 = v279;
                            if (os_log_type_enabled(v221, v279))
                            {
                              *(_DWORD *)address = 136446466;
                              *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                              address[6] = 1024;
                              *(_DWORD *)&address[7] = v219;
                              _os_log_impl( &dword_181A5C000,  v221,  v236,  "%{public}s IPV6_MULTICAST_LOOP failed %{darwin.errno}d, backtrace limit exceeded",  (uint8_t *)address,  0x12u);
                            }
                          }
                        }

LABEL_533:
                        if (v220) {
                          free(v220);
                        }
                      }
                    }
                  }

                  else
                  {
                    nw_protocol_options_t v215 = 0LL;
                  }

                  v270 = 0LL;
                  goto LABEL_536;
                }

                unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
                v270 = (nw_error *)nw_error_create_posix_error(**(_DWORD **)(StatusReg + 8));
                int v224 = **(_DWORD **)(StatusReg + 8);
                __nwlog_obj();
                v225 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)address = 136446466;
                *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                address[6] = 1024;
                *(_DWORD *)&address[7] = v224;
                v226 = (char *)_os_log_send_and_compose_impl();

                os_log_type_t v279 = OS_LOG_TYPE_ERROR;
                char v278 = 0;
                if (__nwlog_fault(v226, &v279, &v278))
                {
                  if (v279 == OS_LOG_TYPE_FAULT)
                  {
                    __nwlog_obj();
                    v227 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    os_log_type_t v228 = v279;
                    if (os_log_type_enabled(v227, v279))
                    {
                      *(_DWORD *)address = 136446466;
                      *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                      address[6] = 1024;
                      *(_DWORD *)&address[7] = v224;
                      _os_log_impl( &dword_181A5C000,  v227,  v228,  "%{public}s IPV6_JOIN_GROUP failed %{darwin.errno}d",  (uint8_t *)address,  0x12u);
                    }

LABEL_521:
                    goto LABEL_522;
                  }

                  if (!v278)
                  {
                    __nwlog_obj();
                    v227 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    os_log_type_t v235 = v279;
                    if (os_log_type_enabled(v227, v279))
                    {
                      *(_DWORD *)address = 136446466;
                      *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                      address[6] = 1024;
                      *(_DWORD *)&address[7] = v224;
                      _os_log_impl( &dword_181A5C000,  v227,  v235,  "%{public}s IPV6_JOIN_GROUP failed %{darwin.errno}d, backtrace limit exceeded",  (uint8_t *)address,  0x12u);
                    }

                    goto LABEL_521;
                  }

                  int v229 = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v227 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  os_log_type_t v230 = v279;
                  BOOL v231 = os_log_type_enabled(v227, v279);
                  if (!v229)
                  {
                    if (v231)
                    {
                      *(_DWORD *)address = 136446466;
                      *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                      address[6] = 1024;
                      *(_DWORD *)&address[7] = v224;
                      _os_log_impl( &dword_181A5C000,  v227,  v230,  "%{public}s IPV6_JOIN_GROUP failed %{darwin.errno}d, no backtrace",  (uint8_t *)address,  0x12u);
                    }

                    goto LABEL_521;
                  }

                  if (v231)
                  {
                    *(_DWORD *)address = 136446722;
                    *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 1024;
                    *(_DWORD *)&address[7] = v224;
                    address[9] = 2082;
                    *(void *)&address[10] = v229;
                    _os_log_impl( &dword_181A5C000,  v227,  v230,  "%{public}s IPV6_JOIN_GROUP failed %{darwin.errno}d, dumping backtrace:%{public}s",  (uint8_t *)address,  0x1Cu);
                  }

                  free(v229);
                }

              if (v216) {
                free(v216);
              }
LABEL_431:
              if (address[1] == 2)
              {
                if ((address[4] & 0xF0) == 0xE0) {
                  goto LABEL_439;
                }
              }

              else if (address[1] == 30 && address[8] == 255)
              {
LABEL_440:
                *(void *)&address[8] = 0LL;
                *(void *)&address[16] = 0LL;
LABEL_441:
                if (bind(v97, (const sockaddr *)address, address[0]))
                {
                  os_log_type_t v208 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
                  if (v208 > 0x31 || ((1LL << v208) & 0x3000000002002LL) == 0)
                  {
                    __nwlog_obj();
                    os_log_type_t v211 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)int buf = 136447234;
                    *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&_BYTE buf[14] = v97;
                    *(_WORD *)&buf[18] = 1040;
                    *(_DWORD *)&buf[20] = address[0];
                    *(_WORD *)&_BYTE buf[24] = 2098;
                    *(void *)&buf[26] = address;
                    *(_WORD *)&buf[34] = 1024;
                    *(_DWORD *)&buf[36] = v208;
                    __int128 v100 = (char *)_os_log_send_and_compose_impl();

                    v283.socklen_t sa_len = 16;
                    LOBYTE(v286) = 0;
                    if (v283.sa_len == 17)
                    {
                      __nwlog_obj();
                      os_log_type_t v101 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      v212 = v283.sa_len;
                      if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
                      {
                        *(_DWORD *)int buf = 136447234;
                        *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&_BYTE buf[14] = v97;
                        *(_WORD *)&buf[18] = 1040;
                        *(_DWORD *)&buf[20] = address[0];
                        *(_WORD *)&_BYTE buf[24] = 2098;
                        *(void *)&buf[26] = address;
                        *(_WORD *)&buf[34] = 1024;
                        *(_DWORD *)&buf[36] = v208;
                        _os_log_impl( &dword_181A5C000,  v101,  v212,  "%{public}s bind %d %{public,network:sockaddr}.*P failed %{darwin.errno}d",  buf,  0x28u);
                      }

                      goto LABEL_525;
                    }

                    if (!(_BYTE)v286)
                    {
                      __nwlog_obj();
                      os_log_type_t v101 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      BOOL v223 = v283.sa_len;
                      if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
                      {
                        *(_DWORD *)int buf = 136447234;
                        *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&_BYTE buf[14] = v97;
                        *(_WORD *)&buf[18] = 1040;
                        *(_DWORD *)&buf[20] = address[0];
                        *(_WORD *)&_BYTE buf[24] = 2098;
                        *(void *)&buf[26] = address;
                        *(_WORD *)&buf[34] = 1024;
                        *(_DWORD *)&buf[36] = v208;
                        _os_log_impl( &dword_181A5C000,  v101,  v223,  "%{public}s bind %d %{public,network:sockaddr}.*P failed %{darwin.errno}d, backtrace limit exceeded",  buf,  0x28u);
                      }

                      goto LABEL_525;
                    }

                    __int128 v111 = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    os_log_type_t v101 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    v213 = v283.sa_len;
                    nw_protocol_options_t v214 = os_log_type_enabled(v101, (os_log_type_t)v283.sa_len);
                    if (!v111)
                    {
                      if (v214)
                      {
                        *(_DWORD *)int buf = 136447234;
                        *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&_BYTE buf[14] = v97;
                        *(_WORD *)&buf[18] = 1040;
                        *(_DWORD *)&buf[20] = address[0];
                        *(_WORD *)&_BYTE buf[24] = 2098;
                        *(void *)&buf[26] = address;
                        *(_WORD *)&buf[34] = 1024;
                        *(_DWORD *)&buf[36] = v208;
                        _os_log_impl( &dword_181A5C000,  v101,  v213,  "%{public}s bind %d %{public,network:sockaddr}.*P failed %{darwin.errno}d, no backtrace",  buf,  0x28u);
                      }

                      goto LABEL_525;
                    }

                    if (v214)
                    {
                      *(_DWORD *)int buf = 136447490;
                      *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&_BYTE buf[14] = v97;
                      *(_WORD *)&buf[18] = 1040;
                      *(_DWORD *)&buf[20] = address[0];
                      *(_WORD *)&_BYTE buf[24] = 2098;
                      *(void *)&buf[26] = address;
                      *(_WORD *)&buf[34] = 1024;
                      *(_DWORD *)&buf[36] = v208;
                      *(_WORD *)uint32_t v297 = 2082;
                      *(void *)&v297[2] = v111;
                      _os_log_impl( &dword_181A5C000,  v101,  v213,  "%{public}s bind %d %{public,network:sockaddr}.*P failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x32u);
                    }

                    goto LABEL_192;
                  }

                  __nwlog_obj();
                  int v209 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v209, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)int buf = 136447234;
                    *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&_BYTE buf[14] = v97;
                    *(_WORD *)&buf[18] = 1040;
                    *(_DWORD *)&buf[20] = address[0];
                    *(_WORD *)&_BYTE buf[24] = 2098;
                    *(void *)&buf[26] = address;
                    *(_WORD *)&buf[34] = 1024;
                    *(_DWORD *)&buf[36] = v208;
                    _os_log_impl( &dword_181A5C000,  v209,  OS_LOG_TYPE_ERROR,  "%{public}s bind %d %{public,network:sockaddr}.*P failed %{darwin.errno}d",  buf,  0x28u);
                  }
                }

                else
                {
                  if (!connect(v97, v7, v7->sa_len))
                  {
                    *os_log_type_t v11 = v97;
                    BOOL v65 = dataa;
                    os_log_type_t v62 = dataa;
                    goto LABEL_530;
                  }

                  BOOL v210 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
                  if (v210 > 0x31 || ((1LL << v210) & 0x3000000002002LL) == 0)
                  {
                    __nwlog_obj();
                    int v219 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)int buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&_BYTE buf[14] = v210;
                    __int128 v100 = (char *)_os_log_send_and_compose_impl();

                    v283.socklen_t sa_len = 16;
                    LOBYTE(v286) = 0;
                    if (v283.sa_len == 17)
                    {
                      __nwlog_obj();
                      os_log_type_t v101 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      BOOL v220 = v283.sa_len;
                      if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
                      {
                        *(_DWORD *)int buf = 136446466;
                        *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&_BYTE buf[14] = v210;
                        _os_log_impl( &dword_181A5C000,  v101,  v220,  "%{public}s connect failed %{darwin.errno}d",  buf,  0x12u);
                      }
                    }

                    else if ((_BYTE)v286)
                    {
                      int v224 = (char *)__nw_create_backtrace_string();
                      __nwlog_obj();
                      os_log_type_t v101 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      v225 = v283.sa_len;
                      v226 = os_log_type_enabled(v101, (os_log_type_t)v283.sa_len);
                      if (v224)
                      {
                        if (v226)
                        {
                          *(_DWORD *)int buf = 136446722;
                          *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&_BYTE buf[14] = v210;
                          *(_WORD *)&buf[18] = 2082;
                          *(void *)&buf[20] = v224;
                          _os_log_impl( &dword_181A5C000,  v101,  v225,  "%{public}s connect failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
                        }

                        free(v224);
LABEL_526:
                        if (v100) {
LABEL_527:
                        }
                          free(v100);
LABEL_528:
                        close(v97);
                        goto LABEL_529;
                      }

                      if (v226)
                      {
                        *(_DWORD *)int buf = 136446466;
                        *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&_BYTE buf[14] = v210;
                        _os_log_impl( &dword_181A5C000,  v101,  v225,  "%{public}s connect failed %{darwin.errno}d, no backtrace",  buf,  0x12u);
                      }
                    }

                    else
                    {
                      __nwlog_obj();
                      os_log_type_t v101 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                      os_log_type_t v236 = v283.sa_len;
                      if (os_log_type_enabled(v101, (os_log_type_t)v283.sa_len))
                      {
                        *(_DWORD *)int buf = 136446466;
                        *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&_BYTE buf[14] = v210;
                        _os_log_impl( &dword_181A5C000,  v101,  v236,  "%{public}s connect failed %{darwin.errno}d, backtrace limit exceeded",  buf,  0x12u);
                      }
                    }

LABEL_522:
                if (v226) {
LABEL_523:
                }
                  free(v226);
LABEL_536:

                goto LABEL_431;
              }

              if (nw_interface_supports_multicast(v185))
              {
                int v277 = v186[2];
                goto LABEL_413;
              }

              __nwlog_obj();
              nw_protocol_options_t v190 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v190, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)address = 136446466;
                *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                address[6] = 2112;
                *(void *)&address[7] = v186;
                _os_log_impl( &dword_181A5C000,  v190,  OS_LOG_TYPE_ERROR,  "%{public}s Interface %@ doesn't support multicast",  (uint8_t *)address,  0x16u);
              }

LABEL_420:
              v270 = (nw_error *)nw_error_create_posix_error(22);
              goto LABEL_536;
            }

            if (setsockopt(v78, 0, 20, &v282, 4u) < 0)
            {
              v270 = (nw_error *)nw_error_create_posix_error(**(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3))
                                                                         + 8));
              int v161 = nw_error_get_error_code(v270);
              __nwlog_obj();
              os_log_type_t v162 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)address = 136446466;
              *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
              address[6] = 1024;
              *(_DWORD *)&address[7] = v161;
              BOOL v83 = (char *)_os_log_send_and_compose_impl();

              type[0] = OS_LOG_TYPE_ERROR;
              os_log_type_t v279 = OS_LOG_TYPE_DEFAULT;
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                char v84 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v163 = type[0];
                if (os_log_type_enabled(v84, type[0]))
                {
                  *(_DWORD *)address = 136446466;
                  *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 1024;
                  *(_DWORD *)&address[7] = v161;
                  _os_log_impl( &dword_181A5C000,  v84,  v163,  "%{public}s IP_RECVIF failed %{darwin.errno}d",  (uint8_t *)address,  0x12u);
                }

                goto LABEL_400;
              }

              if (v279 == OS_LOG_TYPE_DEFAULT)
              {
                __nwlog_obj();
                char v84 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v181 = type[0];
                if (os_log_type_enabled(v84, type[0]))
                {
                  *(_DWORD *)address = 136446466;
                  *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 1024;
                  *(_DWORD *)&address[7] = v161;
                  _os_log_impl( &dword_181A5C000,  v84,  v181,  "%{public}s IP_RECVIF failed %{darwin.errno}d, backtrace limit exceeded",  (uint8_t *)address,  0x12u);
                }

                goto LABEL_400;
              }

              BOOL v153 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              char v96 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v171 = type[0];
              BOOL v172 = os_log_type_enabled(v96, type[0]);
              if (!v153)
              {
                if (v172)
                {
                  *(_DWORD *)address = 136446466;
                  *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 1024;
                  *(_DWORD *)&address[7] = v161;
                  _os_log_impl( &dword_181A5C000,  v96,  v171,  "%{public}s IP_RECVIF failed %{darwin.errno}d, no backtrace",  (uint8_t *)address,  0x12u);
                }

                goto LABEL_428;
              }

              if (v172)
              {
                *(_DWORD *)address = 136446722;
                *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                address[6] = 1024;
                *(_DWORD *)&address[7] = v161;
                address[9] = 2082;
                *(void *)&address[10] = v153;
                _os_log_impl( &dword_181A5C000,  v96,  v171,  "%{public}s IP_RECVIF failed %{darwin.errno}d, dumping backtrace:%{public}s",  (uint8_t *)address,  0x1Cu);
              }

              goto LABEL_315;
            }

            if (setsockopt(v78, 0, 7, &v282, 4u) < 0)
            {
              v270 = (nw_error *)nw_error_create_posix_error(**(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3))
                                                                         + 8));
              int v166 = nw_error_get_error_code(v270);
              __nwlog_obj();
              uint64_t v167 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)address = 136446466;
              *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
              address[6] = 1024;
              *(_DWORD *)&address[7] = v166;
              BOOL v83 = (char *)_os_log_send_and_compose_impl();

              type[0] = OS_LOG_TYPE_ERROR;
              os_log_type_t v279 = OS_LOG_TYPE_DEFAULT;
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                char v84 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v168 = type[0];
                if (os_log_type_enabled(v84, type[0]))
                {
                  *(_DWORD *)address = 136446466;
                  *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 1024;
                  *(_DWORD *)&address[7] = v166;
                  _os_log_impl( &dword_181A5C000,  v84,  v168,  "%{public}s IP_RECVDSTADDR failed %{darwin.errno}d",  (uint8_t *)address,  0x12u);
                }

                goto LABEL_400;
              }

              if (v279 == OS_LOG_TYPE_DEFAULT)
              {
                __nwlog_obj();
                char v84 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v183 = type[0];
                if (os_log_type_enabled(v84, type[0]))
                {
                  *(_DWORD *)address = 136446466;
                  *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 1024;
                  *(_DWORD *)&address[7] = v166;
                  _os_log_impl( &dword_181A5C000,  v84,  v183,  "%{public}s IP_RECVDSTADDR failed %{darwin.errno}d, backtrace limit exceeded",  (uint8_t *)address,  0x12u);
                }

                goto LABEL_400;
              }

              BOOL v153 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              char v96 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v176 = type[0];
              BOOL v177 = os_log_type_enabled(v96, type[0]);
              if (!v153)
              {
                if (v177)
                {
                  *(_DWORD *)address = 136446466;
                  *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 1024;
                  *(_DWORD *)&address[7] = v166;
                  _os_log_impl( &dword_181A5C000,  v96,  v176,  "%{public}s IP_RECVDSTADDR failed %{darwin.errno}d, no backtrace",  (uint8_t *)address,  0x12u);
                }

                goto LABEL_428;
              }

              if (v177)
              {
                *(_DWORD *)address = 136446722;
                *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                address[6] = 1024;
                *(_DWORD *)&address[7] = v166;
                address[9] = 2082;
                *(void *)&address[10] = v153;
                _os_log_impl( &dword_181A5C000,  v96,  v176,  "%{public}s IP_RECVDSTADDR failed %{darwin.errno}d, dumping backtrace:%{public}s",  (uint8_t *)address,  0x1Cu);
              }

              goto LABEL_315;
            }

            if ((setsockopt(v78, 0, 27, &v282, 4u) & 0x80000000) == 0)
            {
LABEL_449:
              __nwlog_obj();
              v197 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v197, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)address = 136446466;
                *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                address[6] = 2112;
                *(void *)&address[7] = endpoint;
                _os_log_impl( &dword_181A5C000,  v197,  OS_LOG_TYPE_DEBUG,  "%{public}s Joining multicast group %@",  (uint8_t *)address,  0x16u);
              }

              *(void *)os_log_type_t type = 0LL;
              *(_DWORD *)os_log_type_t type = *(_DWORD *)&nw_endpoint_get_address(endpoint)->sa_data[2];
              *(_DWORD *)&os_log_type_t type[4] = 0;
              nw_interface_t v198 = nw_parameters_copy_required_interface((nw_parameters_t)v75);
              __int128 v186 = v198;
              if (v198)
              {
                if (!nw_interface_supports_multicast(v198))
                {
                  __nwlog_obj();
                  nw_protocol_options_t v190 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v190, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)address = 136446466;
                    *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 2112;
                    *(void *)&address[7] = v186;
                    _os_log_impl( &dword_181A5C000,  v190,  OS_LOG_TYPE_ERROR,  "%{public}s Interface %@ doesn't support multicast",  (uint8_t *)address,  0x16u);
                  }

                  goto LABEL_420;
                }

                nw_endpoint_t host = nw_endpoint_create_host("0.0.0.0", "0");
                os_log_type_t v200 = nw_interface_copy_local_address_for_remote_address(v186, host);
                v201 = v200;
                if (!v200)
                {
                  __nwlog_obj();
                  v205 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v205, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)address = 136446466;
                    *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 2112;
                    *(void *)&address[7] = v186;
                    _os_log_impl( &dword_181A5C000,  v205,  OS_LOG_TYPE_ERROR,  "%{public}s Did not find interface address for %@",  (uint8_t *)address,  0x16u);
                  }

                  v270 = (nw_error *)nw_error_create_posix_error(2);
                  goto LABEL_536;
                }
              }

              if ((setsockopt(v274, 0, 13, type, 8u) & 0x80000000) == 0)
              {
LABEL_542:
                if ((setsockopt(v274, 0, 12, type, 8u) & 0x80000000) == 0)
                {
                  BOOL v238 = nw_parameters_copy_default_protocol_stack((nw_parameters_t)v75);
                  v239 = v238;
                  if (v238)
                  {
                    nw_protocol_options_t v240 = nw_protocol_stack_copy_internet_protocol(v238);
                    nw_protocol_options_t v241 = v240;
                    if (v240)
                    {
                      int v242 = nw_ip_options_get_disable_multicast_loopback(v240) ? &v281 : &v282;
                      if (setsockopt(v274, 0, 11, v242, 4u))
                      {
                        int v243 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
                        __nwlog_obj();
                        v244 = (void *)objc_claimAutoreleasedReturnValue();
                        *(_DWORD *)address = 136446466;
                        *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                        address[6] = 1024;
                        int v245 = v243;
                        *(_DWORD *)&address[7] = v243;
                        int v246 = (char *)_os_log_send_and_compose_impl();

                        os_log_type_t v279 = OS_LOG_TYPE_ERROR;
                        char v278 = 0;
                        if (__nwlog_fault(v246, &v279, &v278))
                        {
                          if (v279 == OS_LOG_TYPE_FAULT)
                          {
                            __nwlog_obj();
                            int v247 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                            os_log_type_t v248 = v279;
                            if (os_log_type_enabled(v247, v279))
                            {
                              *(_DWORD *)address = 136446466;
                              *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                              address[6] = 1024;
                              *(_DWORD *)&address[7] = v245;
                              _os_log_impl( &dword_181A5C000,  v247,  v248,  "%{public}s IP_MULTICAST_LOOP failed %{darwin.errno}d",  (uint8_t *)address,  0x12u);
                            }
                          }

                          else
                          {
                            if (v278)
                            {
                              v257 = (char *)__nw_create_backtrace_string();
                              __nwlog_obj();
                              os_log_type_t v258 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                              os_log_type_t v268 = v279;
                              BOOL v259 = os_log_type_enabled(v258, v279);
                              if (v257)
                              {
                                if (v259)
                                {
                                  *(_DWORD *)address = 136446722;
                                  *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                                  address[6] = 1024;
                                  *(_DWORD *)&address[7] = v245;
                                  address[9] = 2082;
                                  *(void *)&address[10] = v257;
                                  _os_log_impl( &dword_181A5C000,  v258,  v268,  "%{public}s IP_MULTICAST_LOOP failed %{darwin.errno}d, dumping backtrace:%{public}s",  (uint8_t *)address,  0x1Cu);
                                }

                                free(v257);
                              }

                              else
                              {
                                if (v259)
                                {
                                  *(_DWORD *)address = 136446466;
                                  *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                                  address[6] = 1024;
                                  *(_DWORD *)&address[7] = v245;
                                  _os_log_impl( &dword_181A5C000,  v258,  v268,  "%{public}s IP_MULTICAST_LOOP failed %{darwin.errno}d, no backtrace",  (uint8_t *)address,  0x12u);
                                }
                              }

                              goto LABEL_584;
                            }

                            __nwlog_obj();
                            int v247 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                            os_log_type_t v261 = v279;
                            if (os_log_type_enabled(v247, v279))
                            {
                              *(_DWORD *)address = 136446466;
                              *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                              address[6] = 1024;
                              *(_DWORD *)&address[7] = v245;
                              _os_log_impl( &dword_181A5C000,  v247,  v261,  "%{public}s IP_MULTICAST_LOOP failed %{darwin.errno}d, backtrace limit exceeded",  (uint8_t *)address,  0x12u);
                            }
                          }
                        }

LABEL_575:
                    goto LABEL_576;
                  }

                  if (!v278)
                  {
                    __nwlog_obj();
                    v252 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                    os_log_type_t v260 = v279;
                    if (os_log_type_enabled(v252, v279))
                    {
                      *(_DWORD *)address = 136446466;
                      *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                      address[6] = 1024;
                      *(_DWORD *)&address[7] = v250;
                      _os_log_impl( &dword_181A5C000,  v252,  v260,  "%{public}s IP_ADD_MEMBERSHIP failed %{darwin.errno}d, backtrace limit exceeded",  (uint8_t *)address,  0x12u);
                    }

                    goto LABEL_575;
                  }

                  v254 = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v252 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  os_log_type_t v255 = v279;
                  BOOL v256 = os_log_type_enabled(v252, v279);
                  if (!v254)
                  {
                    if (v256)
                    {
                      *(_DWORD *)address = 136446466;
                      *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                      address[6] = 1024;
                      *(_DWORD *)&address[7] = v250;
                      _os_log_impl( &dword_181A5C000,  v252,  v255,  "%{public}s IP_ADD_MEMBERSHIP failed %{darwin.errno}d, no backtrace",  (uint8_t *)address,  0x12u);
                    }

                    goto LABEL_575;
                  }

                  if (v256)
                  {
                    *(_DWORD *)address = 136446722;
                    *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 1024;
                    *(_DWORD *)&address[7] = v250;
                    address[9] = 2082;
                    *(void *)&address[10] = v254;
                    _os_log_impl( &dword_181A5C000,  v252,  v255,  "%{public}s IP_ADD_MEMBERSHIP failed %{darwin.errno}d, dumping backtrace:%{public}s",  (uint8_t *)address,  0x1Cu);
                  }

                  free(v254);
                }

LABEL_576:
                if (!v226) {
                  goto LABEL_536;
                }
                goto LABEL_523;
              }

              int v202 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
              __nwlog_obj();
              BOOL v203 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              int v204 = v203;
              if (v202 == 49)
              {
                if (os_log_type_enabled(v203, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)address = 136446722;
                  *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 2112;
                  *(void *)&address[7] = endpoint;
                  address[11] = 1024;
                  *(_DWORD *)&address[12] = 49;
                  _os_log_impl( &dword_181A5C000,  v204,  OS_LOG_TYPE_ERROR,  "%{public}s IP_DROP_MEMBERSHIP %@ failed %{darwin.errno}d",  (uint8_t *)address,  0x1Cu);
                }

                goto LABEL_542;
              }

              *(_DWORD *)address = 136446722;
              *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
              address[6] = 2112;
              *(void *)&address[7] = endpoint;
              address[11] = 1024;
              *(_DWORD *)&address[12] = v202;
              v206 = (char *)_os_log_send_and_compose_impl();

              os_log_type_t v279 = OS_LOG_TYPE_ERROR;
              char v278 = 0;
              if (__nwlog_fault(v206, &v279, &v278))
              {
                if (v279 == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v207 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  os_log_type_t v208 = v279;
                  if (os_log_type_enabled(v207, v279))
                  {
                    *(_DWORD *)address = 136446722;
                    *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 2112;
                    *(void *)&address[7] = endpoint;
                    address[11] = 1024;
                    *(_DWORD *)&address[12] = v202;
                    _os_log_impl( &dword_181A5C000,  v207,  v208,  "%{public}s IP_DROP_MEMBERSHIP %@ failed %{darwin.errno}d",  (uint8_t *)address,  0x1Cu);
                  }
                }

                else if (v278)
                {
                  int v209 = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v207 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  os_log_type_t v266 = v279;
                  BOOL v210 = os_log_type_enabled(v207, v279);
                  if (v209)
                  {
                    if (v210)
                    {
                      *(_DWORD *)address = 136446978;
                      *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                      address[6] = 2112;
                      *(void *)&address[7] = endpoint;
                      address[11] = 1024;
                      *(_DWORD *)&address[12] = v202;
                      address[14] = 2082;
                      *(void *)&address[15] = v209;
                      _os_log_impl( &dword_181A5C000,  v207,  v266,  "%{public}s IP_DROP_MEMBERSHIP %@ failed %{darwin.errno}d, dumping backtrace:%{public}s",  (uint8_t *)address,  0x26u);
                    }

                    free(v209);
                    goto LABEL_540;
                  }

                  if (v210)
                  {
                    *(_DWORD *)address = 136446722;
                    *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 2112;
                    *(void *)&address[7] = endpoint;
                    address[11] = 1024;
                    *(_DWORD *)&address[12] = v202;
                    _os_log_impl( &dword_181A5C000,  v207,  v266,  "%{public}s IP_DROP_MEMBERSHIP %@ failed %{darwin.errno}d, no backtrace",  (uint8_t *)address,  0x1Cu);
                  }
                }

                else
                {
                  __nwlog_obj();
                  v207 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  os_log_type_t v237 = v279;
                  if (os_log_type_enabled(v207, v279))
                  {
                    *(_DWORD *)address = 136446722;
                    *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 2112;
                    *(void *)&address[7] = endpoint;
                    address[11] = 1024;
                    *(_DWORD *)&address[12] = v202;
                    _os_log_impl( &dword_181A5C000,  v207,  v237,  "%{public}s IP_DROP_MEMBERSHIP %@ failed %{darwin.errno}d, backtrace limit exceeded",  (uint8_t *)address,  0x1Cu);
                  }
                }
              }

LABEL_540:
              if (v206) {
                free(v206);
              }
              goto LABEL_542;
            }

            int v148 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
            __nwlog_obj();
            uint64_t v149 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)address = 136446466;
            *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
            address[6] = 1024;
            *(_DWORD *)&address[7] = v148;
            os_log_type_t v150 = (char *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            os_log_type_t v279 = OS_LOG_TYPE_DEFAULT;
            if (__nwlog_fault(v150, type, &v279))
            {
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                BOOL v151 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v152 = type[0];
                if (os_log_type_enabled(v151, type[0]))
                {
                  *(_DWORD *)address = 136446466;
                  *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 1024;
                  *(_DWORD *)&address[7] = v148;
                  _os_log_impl( &dword_181A5C000,  v151,  v152,  "%{public}s IP_RECVTOS failed %{darwin.errno}d",  (uint8_t *)address,  0x12u);
                }
              }

              else if (v279)
              {
                int v178 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                BOOL v151 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v264 = type[0];
                BOOL v179 = os_log_type_enabled(v151, type[0]);
                if (v178)
                {
                  if (v179)
                  {
                    *(_DWORD *)address = 136446722;
                    *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                    address[6] = 1024;
                    *(_DWORD *)&address[7] = v148;
                    address[9] = 2082;
                    *(void *)&address[10] = v178;
                    _os_log_impl( &dword_181A5C000,  v151,  v264,  "%{public}s IP_RECVTOS failed %{darwin.errno}d, dumping backtrace:%{public}s",  (uint8_t *)address,  0x1Cu);
                  }

                  free(v178);
                  goto LABEL_446;
                }

                if (v179)
                {
                  *(_DWORD *)address = 136446466;
                  *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 1024;
                  *(_DWORD *)&address[7] = v148;
                  _os_log_impl( &dword_181A5C000,  v151,  v264,  "%{public}s IP_RECVTOS failed %{darwin.errno}d, no backtrace",  (uint8_t *)address,  0x12u);
                }
              }

              else
              {
                __nwlog_obj();
                BOOL v151 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                os_log_type_t v194 = type[0];
                if (os_log_type_enabled(v151, type[0]))
                {
                  *(_DWORD *)address = 136446466;
                  *(void *)&address[2] = "nw_listener_socket_inbox_create_socket";
                  address[6] = 1024;
                  *(_DWORD *)&address[7] = v148;
                  _os_log_impl( &dword_181A5C000,  v151,  v194,  "%{public}s IP_RECVTOS failed %{darwin.errno}d, backtrace limit exceeded",  (uint8_t *)address,  0x12u);
                }
              }
            }

void sub_1824467E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23)
{
  _Unwind_Resume(a1);
}

void __33__nw_listener_inbox_socket_start__block_invoke(uint64_t a1)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  int v1 = *(_DWORD *)(a1 + 40);
  uint64_t v2 = (id *)*(id *)(a1 + 32);
  BOOL v3 = *((_BYTE *)v2 + 88) == 17 && nw_array_create();
  while ((objc_msgSend(v2[1], "canHandleNewConnection:", v2, v21, v22) & 1) != 0)
  {
    __int128 v41 = 0u;
    __int128 v42 = 0u;
    __int128 v40 = 0u;
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    sockaddr address = (sockaddr)0;
    socklen_t v25 = 128;
    int v4 = *((unsigned __int8 *)v2 + 88);
    if (v4 == 17)
    {
      int v26 = -1;
      *(_DWORD *)int buf = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      BOOL v7 = nw_listener_inbox_accept_udp((uint64_t)v2);
      int v8 = v26;
      if (v26 != -1)
      {
        nw_endpoint_t v9 = nw_endpoint_create_address(&address);
        nw_listener_inbox_socket_handle_new_socket(v2, v8, v9, (void *)v7, *(int *)buf, (void *)v3);
      }

      BOOL v10 = type == OS_LOG_TYPE_DEFAULT;

      if (v10) {
        goto LABEL_39;
      }
    }

    else
    {
      if (v4 != 6) {
        goto LABEL_39;
      }
      int v5 = accept(v1, &address, &v25);
      int v26 = v5;
      if (v5 == -1) {
        goto LABEL_39;
      }
      if (v25 && v25 >= address.sa_len)
      {
        nw_endpoint_t v6 = nw_endpoint_create_address(&address);
        nw_listener_inbox_socket_handle_new_socket(v2, v5, v6, 0LL, 0, (void *)v3);
      }

      else
      {
        if (!v25) {
          goto LABEL_23;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v11 = (id)gLogObj;
        *(_DWORD *)int buf = 136446722;
        uint64_t v28 = "nw_listener_inbox_socket_handle_accept_event";
        __int16 v29 = 1024;
        socklen_t v30 = v25;
        __int16 v31 = 1024;
        int sa_len = address.sa_len;
        LODWORD(v22) = 24;
        int v21 = buf;
        int v12 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v23 = 0;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v13 = (os_log_s *)(id)gLogObj;
          os_log_type_t v14 = type;
          if (os_log_type_enabled(v13, type))
          {
            *(_DWORD *)int buf = 136446722;
            uint64_t v28 = "nw_listener_inbox_socket_handle_accept_event";
            __int16 v29 = 1024;
            socklen_t v30 = v25;
            __int16 v31 = 1024;
            int sa_len = address.sa_len;
            _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s Bad sockaddr length from kernel: slen = %u, ss.ss_len = %u",  buf,  0x18u);
          }

          goto LABEL_20;
        }

        if (!v23)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v13 = (os_log_s *)(id)gLogObj;
          os_log_type_t v19 = type;
          if (os_log_type_enabled(v13, type))
          {
            *(_DWORD *)int buf = 136446722;
            uint64_t v28 = "nw_listener_inbox_socket_handle_accept_event";
            __int16 v29 = 1024;
            socklen_t v30 = v25;
            __int16 v31 = 1024;
            int sa_len = address.sa_len;
            _os_log_impl( &dword_181A5C000,  v13,  v19,  "%{public}s Bad sockaddr length from kernel: slen = %u, ss.ss_len = %u, backtrace limit exceeded",  buf,  0x18u);
          }

void sub_182446E90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __33__nw_listener_inbox_socket_start__block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 40) + 8), "handleInboxCancelComplete:");
}

void nw_listener_inbox_socket_handle_new_socket(void *a1, int a2, void *a3, void *a4, int a5, void *a6)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  id v11 = a1;
  id v12 = a3;
  id v33 = a4;
  id v32 = a6;
  int v34 = 1;
  BOOL v13 = nw_fd_wrapper_create(a2);
  if (!setsockopt(a2, 0xFFFF, 4130, &v34, 4u))
  {
    os_log_type_t v17 = nw_endpoint_create_with_sock_name(a2);
    id v18 = v11[6];
    BOOL v19 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]( (id *)objc_alloc(&OBJC_CLASS___NWConcrete_nw_parameters),  v18,  0,  0);

    nw_parameters_set_server_mode((void *)v19, 1);
    if (v17) {
      nw_parameters_set_local_endpoint((nw_parameters_t)v19, v17);
    }
    id v20 = nw_parameters_copy_context((void *)v19);
    id v21 = nw_context_copy_registered_endpoint(v20, v12);

    uint64_t v22 = nw_endpoint_copy_association_with_evaluator(v21, (void *)v19, 0LL);
    char v23 = v22;
    if (v22)
    {
      id v24 = nw_association_copy_current_path(v22, (void *)v19);
      if (nw_parameters_get_local_only((nw_parameters_t)v11[6]))
      {
        if (!v24)
        {
          socklen_t v25 = 0LL;
          goto LABEL_24;
        }

        socklen_t v25 = v24;
        BOOL v26 = (v25[473] & 0x20) == 0;

        if (v26)
        {
LABEL_24:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v29 = (id)gLogObj;
          if (os_log_type_enabled((os_log_t)v29, OS_LOG_TYPE_DEBUG))
          {
          }

          else
          {
            BOOL v30 = gLogFDOverride == -1;

            if (v30)
            {
LABEL_30:
              id v16 = 0LL;
LABEL_31:

              id v12 = v21;
              goto LABEL_32;
            }
          }

          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v31 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int buf = 136446466;
            __int128 v36 = "nw_listener_inbox_socket_handle_new_socket";
            __int16 v37 = 2114;
            __int128 v38 = (const char *)v21;
            _os_log_impl( &dword_181A5C000,  v31,  OS_LOG_TYPE_DEBUG,  "%{public}s Ignoring non-local connection from %{public}@",  buf,  0x16u);
          }

          goto LABEL_30;
        }
      }

      else
      {
        socklen_t v25 = v24;
      }
    }

    else
    {
      socklen_t v25 = 0LL;
      if (nw_parameters_get_local_only((nw_parameters_t)v11[6])) {
        goto LABEL_24;
      }
    }

    [v11[1] updateParametersForNewConnection:v19];
    uint64_t v27 = (char *)[v11[1] getPeerDeviceID];
    if (v27)
    {
      nw_endpoint_set_device_id(v21, v27);
      free(v27);
    }

    uint64_t v28 = nw_connection_create_with_connected_socket_internal(v13, (void *)v19, v17, v21, 1);
    id v16 = v28;
    if (v28)
    {
      if (v33) {
        nw_connection_add_initial_inbound_data(v28, v33, a5);
      }
      [v11[1] handleInbound:v16 addProtocolInbox:nw_parameters_get_attach_protocol_listener((void *)v19)];
      if (v32) {
        nw_array_append((uint64_t)v32, v16);
      }
    }

    goto LABEL_31;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v14 = (os_log_s *)(id)gLogObj;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    logging_description = nw_endpoint_get_logging_description(v12);
    *(_DWORD *)int buf = 136446466;
    __int128 v36 = "nw_listener_inbox_socket_handle_new_socket";
    __int16 v37 = 2082;
    __int128 v38 = logging_description;
    _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_INFO,  "%{public}s Failed to set SO_NOSIGPIPE on new connection from %{public}s",  buf,  0x16u);
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v16 = (id)gLogObj;
  if (os_log_type_enabled((os_log_t)v16, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 136446210;
    __int128 v36 = "nw_listener_inbox_socket_handle_new_socket";
    _os_log_impl( &dword_181A5C000,  (os_log_t)v16,  OS_LOG_TYPE_ERROR,  "%{public}s Failed to set SO_NOSIGPIPE on new connection from <nw_redacted>",  buf,  0xCu);
  }

void sub_182447364( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

BOOL nw_listener_inbox_accept_udp(uint64_t a1)
{
  int v1 = (void *)MEMORY[0x1895F8858](a1);
  BOOL v3 = v2;
  int v5 = v4;
  BOOL v7 = v6;
  nw_endpoint_t v9 = v8;
  id v11 = v10;
  int v13 = v12;
  uint64_t v311 = *MEMORY[0x1895F89C0];
  os_log_type_t v14 = v1;
  object = v3;
  if (!v14)
  {
    __nwlog_obj();
    unsigned int v135 = (void *)objc_claimAutoreleasedReturnValue();
    int buffer = 136446210;
    v308 = "nw_listener_inbox_accept_udp";
    os_log_type_t v47 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v304[0]) = 16;
    buf[0] = 0;
    if (LOBYTE(v304[0]) == 17)
    {
      __nwlog_obj();
      os_log_type_t v136 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v137 = v304[0];
      if (os_log_type_enabled(v136, v304[0]))
      {
        int buffer = 136446210;
        v308 = "nw_listener_inbox_accept_udp";
        _os_log_impl(&dword_181A5C000, v136, v137, "%{public}s called with null inbox", (uint8_t *)&buffer, 0xCu);
      }
    }

    else if (buf[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v136 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v143 = v304[0];
      BOOL v144 = os_log_type_enabled(v136, v304[0]);
      if (backtrace_string)
      {
        if (v144)
        {
          int buffer = 136446466;
          v308 = "nw_listener_inbox_accept_udp";
          __int16 v309 = 2082;
          v310 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v136,  v143,  "%{public}s called with null inbox, dumping backtrace:%{public}s",  (uint8_t *)&buffer,  0x16u);
        }

        free(backtrace_string);
        if (!v47) {
          goto LABEL_82;
        }
        goto LABEL_81;
      }

      if (v144)
      {
        int buffer = 136446210;
        v308 = "nw_listener_inbox_accept_udp";
        _os_log_impl( &dword_181A5C000,  v136,  v143,  "%{public}s called with null inbox, no backtrace",  (uint8_t *)&buffer,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v136 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v159 = v304[0];
      if (os_log_type_enabled(v136, v304[0]))
      {
        int buffer = 136446210;
        v308 = "nw_listener_inbox_accept_udp";
        _os_log_impl( &dword_181A5C000,  v136,  v159,  "%{public}s called with null inbox, backtrace limit exceeded",  (uint8_t *)&buffer,  0xCu);
      }
    }

    goto LABEL_299;
  }

  if (v14[88] != 17)
  {
    __nwlog_obj();
    char v138 = (void *)objc_claimAutoreleasedReturnValue();
    int buffer = 136446210;
    v308 = "nw_listener_inbox_accept_udp";
    os_log_type_t v47 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v304[0]) = 16;
    buf[0] = 0;
    if (LOBYTE(v304[0]) == 17)
    {
      __nwlog_obj();
      os_log_type_t v136 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v139 = v304[0];
      if (os_log_type_enabled(v136, v304[0]))
      {
        int buffer = 136446210;
        v308 = "nw_listener_inbox_accept_udp";
        _os_log_impl( &dword_181A5C000,  v136,  v139,  "%{public}s called with null (inbox->_ipProtocol == 17)",  (uint8_t *)&buffer,  0xCu);
      }
    }

    else if (buf[0])
    {
      os_log_type_t v145 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v136 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v146 = v304[0];
      BOOL v147 = os_log_type_enabled(v136, v304[0]);
      if (v145)
      {
        if (v147)
        {
          int buffer = 136446466;
          v308 = "nw_listener_inbox_accept_udp";
          __int16 v309 = 2082;
          v310 = v145;
          _os_log_impl( &dword_181A5C000,  v136,  v146,  "%{public}s called with null (inbox->_ipProtocol == 17), dumping backtrace:%{public}s",  (uint8_t *)&buffer,  0x16u);
        }

        free(v145);
        goto LABEL_80;
      }

      if (v147)
      {
        int buffer = 136446210;
        v308 = "nw_listener_inbox_accept_udp";
        _os_log_impl( &dword_181A5C000,  v136,  v146,  "%{public}s called with null (inbox->_ipProtocol == 17), no backtrace",  (uint8_t *)&buffer,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v136 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v160 = v304[0];
      if (os_log_type_enabled(v136, v304[0]))
      {
        int buffer = 136446210;
        v308 = "nw_listener_inbox_accept_udp";
        _os_log_impl( &dword_181A5C000,  v136,  v160,  "%{public}s called with null (inbox->_ipProtocol == 17), backtrace limit exceeded",  (uint8_t *)&buffer,  0xCu);
      }
    }

LABEL_326:
              goto LABEL_528;
            }
          }
        }

        int v167 = v23->sa_family;
LABEL_333:
        if (v167 == 2)
        {
          if ((setsockopt(v97, 0, 27, type, 4u) & 0x80000000) == 0) {
            goto LABEL_424;
          }
          int v178 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
          __nwlog_obj();
          BOOL v179 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&_BYTE buf[14] = v178;
          BOOL v175 = (char *)_os_log_send_and_compose_impl();

          v283.int sa_len = 16;
          LOBYTE(v286) = 0;
          if (v283.sa_len == 17)
          {
            __nwlog_obj();
            os_log_type_t v176 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v180 = v283.sa_len;
            if (os_log_type_enabled(v176, (os_log_type_t)v283.sa_len))
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&_BYTE buf[14] = v178;
              _os_log_impl(&dword_181A5C000, v176, v180, "%{public}s IP_RECVTOS failed %{darwin.errno}d", buf, 0x12u);
            }
          }

          else if ((_BYTE)v286)
          {
            int v187 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            os_log_type_t v176 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            os_log_type_t v266 = v283.sa_len;
            BOOL v188 = os_log_type_enabled(v176, (os_log_type_t)v283.sa_len);
            if (v187)
            {
              if (v188)
              {
                *(_DWORD *)int buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&_BYTE buf[14] = v178;
                *(_WORD *)&buf[18] = 2082;
                *(void *)&buf[20] = v187;
                _os_log_impl( &dword_181A5C000,  v176,  v266,  "%{public}s IP_RECVTOS failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
              }

              free(v187);
LABEL_422:
              if (v175) {
LABEL_423:
              }
                free(v175);
LABEL_424:
              unsigned int v206 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
              if (v206 <= 0x2A && ((1LL << v206) & 0x40000400004LL) != 0)
              {
                __nwlog_obj();
                v207 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v207, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)int buf = 136446466;
                  *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&_BYTE buf[14] = v206;
                  _os_log_impl( &dword_181A5C000,  v207,  OS_LOG_TYPE_ERROR,  "%{public}s setsockopt SO_NECP_LISTENUUID failed %{darwin.errno}d",  buf,  0x12u);
                }

                goto LABEL_431;
              }

              __nwlog_obj();
              nw_protocol_options_t v215 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&_BYTE buf[14] = v206;
              v216 = (char *)_os_log_send_and_compose_impl();

              v283.int sa_len = 16;
              LOBYTE(v286) = 0;
              if (__nwlog_fault(v216, &v283, &v286))
              {
                if (v283.sa_len == 17)
                {
                  __nwlog_obj();
                  int v217 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  os_log_type_t v218 = v283.sa_len;
                  if (os_log_type_enabled(v217, (os_log_type_t)v283.sa_len))
                  {
                    *(_DWORD *)int buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&_BYTE buf[14] = v206;
                    _os_log_impl( &dword_181A5C000,  v217,  v218,  "%{public}s setsockopt SO_NECP_LISTENUUID failed %{darwin.errno}d",  buf,  0x12u);
                  }
                }

                else if ((_BYTE)v286)
                {
                  v221 = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  int v217 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  os_log_type_t v267 = v283.sa_len;
                  BOOL v222 = os_log_type_enabled(v217, (os_log_type_t)v283.sa_len);
                  if (v221)
                  {
                    if (v222)
                    {
                      *(_DWORD *)int buf = 136446722;
                      *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&_BYTE buf[14] = v206;
                      *(_WORD *)&buf[18] = 2082;
                      *(void *)&buf[20] = v221;
                      _os_log_impl( &dword_181A5C000,  v217,  v267,  "%{public}s setsockopt SO_NECP_LISTENUUID failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
                    }

                    free(v221);
                    goto LABEL_521;
                  }

                  if (v222)
                  {
                    *(_DWORD *)int buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&_BYTE buf[14] = v206;
                    _os_log_impl( &dword_181A5C000,  v217,  v267,  "%{public}s setsockopt SO_NECP_LISTENUUID failed %{darwin.errno}d, no backtrace",  buf,  0x12u);
                  }
                }

                else
                {
                  __nwlog_obj();
                  int v217 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  os_log_type_t v235 = v283.sa_len;
                  if (os_log_type_enabled(v217, (os_log_type_t)v283.sa_len))
                  {
                    *(_DWORD *)int buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_listener_inbox_accept_udp";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&_BYTE buf[14] = v206;
                    _os_log_impl( &dword_181A5C000,  v217,  v235,  "%{public}s setsockopt SO_NECP_LISTENUUID failed %{darwin.errno}d, backtrace limit exceeded",  buf,  0x12u);
                  }
                }
              }

                              if (v178) {
                                free(v178);
                              }
                              goto LABEL_197;
                            }

                free(v111);
                goto LABEL_343;
              }

              if (!v157) {
                goto LABEL_343;
              }
              os_log_type_t v161 = *(void *)(a1 + 104);
              os_log_type_t v122 = (const char *)(v161 + 390);
              os_log_type_t v162 = v161 == 0;
              if (!v161) {
                os_log_type_t v122 = "";
              }
              os_log_type_t v124 = *(_DWORD *)(v161 + 368);
              if (v162) {
                int v125 = "";
              }
              else {
                int v125 = " ";
              }
LABEL_341:
              *(_DWORD *)int buf = 136446978;
              BOOL v256 = "send_data_callback_block_invoke";
              nw_endpoint_t v257 = 2082;
              os_log_type_t v258 = v122;
              BOOL v259 = 2080;
              os_log_type_t v260 = (size_t)v125;
              nw_endpoint_t v261 = 1024;
              *(_DWORD *)os_log_type_t v262 = v124;
              os_log_type_t v102 = "%{public}s %{public}s%s<i%u> unexpected NULL in source frame, no backtrace";
              goto LABEL_342;
            }

            if (__nwlog_connection_log::onceToken != -1) {
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
            }
            __int128 v95 = (os_log_s *)gconnectionLogObj;
            int v96 = v253;
            if (!os_log_type_enabled((os_log_t)gconnectionLogObj, v253)) {
              goto LABEL_343;
            }
            os_log_type_t v159 = *(void *)(a1 + 104);
            int v117 = (const char *)(v159 + 390);
            os_log_type_t v160 = v159 == 0;
            if (!v159) {
              int v117 = "";
            }
            os_log_type_t v119 = *(_DWORD *)(v159 + 368);
            if (v160) {
              os_log_type_t v120 = "";
            }
            else {
              os_log_type_t v120 = " ";
            }
LABEL_245:
            *(_DWORD *)int buf = 136446978;
            BOOL v256 = "send_data_callback_block_invoke";
            nw_endpoint_t v257 = 2082;
            os_log_type_t v258 = v117;
            BOOL v259 = 2080;
            os_log_type_t v260 = (size_t)v120;
            nw_endpoint_t v261 = 1024;
            *(_DWORD *)os_log_type_t v262 = v119;
            os_log_type_t v102 = "%{public}s %{public}s%s<i%u> unexpected NULL in source frame, backtrace limit exceeded";
            goto LABEL_342;
          }

          return 0LL;
        }

        __nwlog_obj();
        *(_DWORD *)int buf = 136446978;
        BOOL v256 = "send_data_callback_block_invoke";
        nw_endpoint_t v257 = 2082;
        os_log_type_t v258 = "bodyCopySize";
        BOOL v259 = 2048;
        os_log_type_t v260 = v69;
        nw_endpoint_t v261 = 2048;
        *(void *)os_log_type_t v262 = v70;
        BOOL v71 = (char *)_os_log_send_and_compose_impl();
        type[0] = OS_LOG_TYPE_ERROR;
        os_log_type_t v253 = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v71, type, &v253))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            int v72 = (os_log_s *)__nwlog_obj();
            int v73 = type[0];
            if (os_log_type_enabled(v72, type[0]))
            {
              *(_DWORD *)int buf = 136446978;
              BOOL v256 = "send_data_callback_block_invoke";
              nw_endpoint_t v257 = 2082;
              os_log_type_t v258 = "bodyCopySize";
              BOOL v259 = 2048;
              os_log_type_t v260 = v69;
              nw_endpoint_t v261 = 2048;
              *(void *)os_log_type_t v262 = v70;
              int v74 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_259:
              _os_log_impl(&dword_181A5C000, v72, v73, v74, buf, 0x2Au);
            }
          }

          else if (v253)
          {
            int v75 = (char *)__nw_create_backtrace_string();
            int v72 = (os_log_s *)__nwlog_obj();
            int v73 = type[0];
            BOOL v76 = os_log_type_enabled(v72, type[0]);
            if (v75)
            {
              if (v76)
              {
                *(_DWORD *)int buf = 136447234;
                BOOL v256 = "send_data_callback_block_invoke";
                nw_endpoint_t v257 = 2082;
                os_log_type_t v258 = "bodyCopySize";
                BOOL v259 = 2048;
                os_log_type_t v260 = v69;
                nw_endpoint_t v261 = 2048;
                *(void *)os_log_type_t v262 = v70;
                *(_WORD *)&v262[8] = 2082;
                *(void *)&v262[10] = v75;
                _os_log_impl( &dword_181A5C000,  v72,  v73,  "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s",  buf,  0x34u);
              }

              free(v75);
              goto LABEL_260;
            }

            if (v76)
            {
              *(_DWORD *)int buf = 136446978;
              BOOL v256 = "send_data_callback_block_invoke";
              nw_endpoint_t v257 = 2082;
              os_log_type_t v258 = "bodyCopySize";
              BOOL v259 = 2048;
              os_log_type_t v260 = v69;
              nw_endpoint_t v261 = 2048;
              *(void *)os_log_type_t v262 = v70;
              int v74 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
              goto LABEL_259;
            }
          }

          else
          {
            int v72 = (os_log_s *)__nwlog_obj();
            int v73 = type[0];
            if (os_log_type_enabled(v72, type[0]))
            {
              *(_DWORD *)int buf = 136446978;
              BOOL v256 = "send_data_callback_block_invoke";
              nw_endpoint_t v257 = 2082;
              os_log_type_t v258 = "bodyCopySize";
              BOOL v259 = 2048;
              os_log_type_t v260 = v69;
              nw_endpoint_t v261 = 2048;
              *(void *)os_log_type_t v262 = v70;
              int v74 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
              goto LABEL_259;
            }
          }
        }

LABEL_548:
    goto LABEL_549;
  }

  if (!v36)
  {
    __nwlog_obj();
    nw_interface_t v198 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_listener_inbox_socket_handle_new_packet";
    v195 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v283.int sa_len = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v196 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v199 = type[0];
      if (os_log_type_enabled(v196, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_listener_inbox_socket_handle_new_packet";
        _os_log_impl(&dword_181A5C000, v196, v199, "%{public}s called with null peer", buf, 0xCu);
      }

      goto LABEL_548;
    }

    if (!v283.sa_len)
    {
      __nwlog_obj();
      BOOL v196 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v238 = type[0];
      if (os_log_type_enabled(v196, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_listener_inbox_socket_handle_new_packet";
        _os_log_impl( &dword_181A5C000,  v196,  v238,  "%{public}s called with null peer, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_548;
    }

    os_log_type_t v230 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    BOOL v196 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v231 = type[0];
    BOOL v232 = os_log_type_enabled(v196, type[0]);
    if (!v230)
    {
      if (v232)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_listener_inbox_socket_handle_new_packet";
        _os_log_impl(&dword_181A5C000, v196, v231, "%{public}s called with null peer, no backtrace", buf, 0xCu);
      }

      goto LABEL_548;
    }

    if (v232)
    {
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_listener_inbox_socket_handle_new_packet";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&_BYTE buf[14] = v230;
      _os_log_impl( &dword_181A5C000,  v196,  v231,  "%{public}s called with null peer, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_504;
  }

  if (!data)
  {
    __nwlog_obj();
    os_log_type_t v200 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_listener_inbox_socket_handle_new_packet";
    v195 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v283.int sa_len = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v196 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v201 = type[0];
      if (os_log_type_enabled(v196, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_listener_inbox_socket_handle_new_packet";
        _os_log_impl(&dword_181A5C000, v196, v201, "%{public}s called with null interface", buf, 0xCu);
      }

      goto LABEL_548;
    }

    if (!v283.sa_len)
    {
      __nwlog_obj();
      BOOL v196 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v239 = type[0];
      if (os_log_type_enabled(v196, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_listener_inbox_socket_handle_new_packet";
        _os_log_impl( &dword_181A5C000,  v196,  v239,  "%{public}s called with null interface, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_548;
    }

    os_log_type_t v230 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    BOOL v196 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v233 = type[0];
    BOOL v234 = os_log_type_enabled(v196, type[0]);
    if (!v230)
    {
      if (v234)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_listener_inbox_socket_handle_new_packet";
        _os_log_impl(&dword_181A5C000, v196, v233, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }

      goto LABEL_548;
    }

    if (v234)
    {
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_listener_inbox_socket_handle_new_packet";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&_BYTE buf[14] = v230;
      _os_log_impl( &dword_181A5C000,  v196,  v233,  "%{public}s called with null interface, dumping backtrace:%{public}s",  buf,  0x16u);
    }

LABEL_504:
    free(v230);
    if (!v195) {
      goto LABEL_124;
    }
LABEL_550:
    free(v195);
    goto LABEL_124;
  }

  if (nw_context_copy_implicit_context::onceToken != -1) {
    dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
  }
  id v37 = (id)nw_context_copy_implicit_context::implicit_context;
  id v38 = nw_context_copy_registered_endpoint(v37, v268);

  id v39 = v263[6];
  BOOL v40 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]( (id *)objc_alloc(&OBJC_CLASS___NWConcrete_nw_parameters),  v39,  0,  0);

  __int128 v41 = nw_endpoint_copy_association_with_evaluator(v38, (void *)v40, 0LL);
  __int128 v42 = v41;
  if (!v41)
  {
    if (nw_parameters_get_local_only((nw_parameters_t)v40)) {
      goto LABEL_92;
    }
    os_log_type_t v44 = 0LL;
LABEL_116:
    id v79 = v263[1];
    if (v79)
    {
      if (v38) {
        int v80 = (nw_endpoint *)v38;
      }
      else {
        int v80 = v268;
      }
      os_log_type_t v81 = v260;
      if (!v260) {
        os_log_type_t v81 = (nw_endpoint *)*((void *)v14 + 4);
      }
      [v79 handleInboundPacket:&buffer length:(unsigned __int16)v16 from:v80 to:v81 interface:data socket:v263[9]];
    }

    goto LABEL_123;
  }

  id v43 = nw_association_copy_current_path(v41, (void *)v40);
  if (!nw_parameters_get_local_only((nw_parameters_t)v40))
  {
    os_log_type_t v44 = v43;
    goto LABEL_116;
  }

  if (!v43)
  {
LABEL_92:
    __nwlog_obj();
    uint64_t v69 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_listener_inbox_socket_handle_new_packet";
      _os_log_impl(&dword_181A5C000, v69, OS_LOG_TYPE_ERROR, "%{public}s nw_association has no path", buf, 0xCu);
    }

    id v43 = 0LL;
    goto LABEL_95;
  }

  os_log_type_t v44 = v43;
  if ((nw_path_is_direct(v43) & 1) != 0) {
    goto LABEL_116;
  }
LABEL_95:
  __nwlog_obj();
  BOOL v70 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  BOOL v71 = os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG);
  int v72 = gLogFDOverride != -1 || v71;

  if (v43) {
    int v73 = v72;
  }
  else {
    int v73 = 0;
  }
  if (v73 == 1)
  {
    __nwlog_obj();
    int v74 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_listener_inbox_socket_handle_new_packet";
      *(_WORD *)&buf[12] = 2114;
      *(void *)&_BYTE buf[14] = v38;
      _os_log_impl( &dword_181A5C000,  v74,  OS_LOG_TYPE_DEBUG,  "%{public}s Ignoring data from non-local endpoint %{public}@",  buf,  0x16u);
    }
  }

  os_log_type_t v44 = v43;
LABEL_123:

LABEL_124:
LABEL_82:
  os_log_type_t v62 = 0LL;
LABEL_83:

  return (BOOL)v62;
}

void sub_18244BBD8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20, uint64_t a21, void *a22, void *a23, uint64_t a24, void *a25, uint64_t a26, void *a27, uint64_t a28, void *a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, id a45)
{
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL28nw_listener_inbox_accept_udpP24nw_listener_inbox_socketiPiPbP8sockaddrjP16nw_ip_ecn_flag_tPU22objcproto11OS_nw_array8NSObject_block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  int v4 = a3;
  nw_endpoint_t v5 = nw_connection_copy_endpoint(v4);
  nw_endpoint_t v6 = nw_connection_copy_parameters(v4);
  nw_endpoint_t v7 = nw_parameters_copy_local_endpoint(v6);
  if (!v5) {
    goto LABEL_10;
  }
  int v8 = v5;
  int v9 = -[nw_endpoint type](v8, "type");

  if (v9 != 1) {
    goto LABEL_10;
  }
  int v10 = nw_endpoint_address_endpoint_matches_address(v8, *(unsigned __int8 **)(a1 + 40), 0, 0);
  int v11 = v7 ? v10 : 0;
  if (v11 == 1
    && (int v12 = v7, v13 = -[nw_endpoint type](v12, "type"), v12, v13 == 1)
    && nw_endpoint_address_endpoint_matches_address(v12, (unsigned __int8 *)(a1 + 56), 0, 0))
  {
    nw_connection_add_initial_inbound_data(v4, *(void **)(a1 + 32), **(_DWORD **)(a1 + 48));
    uint64_t v14 = 0LL;
  }

  else
  {
LABEL_10:
    uint64_t v14 = 1LL;
  }

  return v14;
}

void sub_18244BEB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL28nw_listener_inbox_accept_udpP24nw_listener_inbox_socketiPiPbP8sockaddrjP16nw_ip_ecn_flag_tPU22objcproto11OS_nw_array8NSObject_block_invoke_85( uint64_t a1, void *a2, _OWORD *a3)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  nw_endpoint_t v5 = a2;
  if (nw_interface_shallow_compare(v5, *(void **)(a1 + 32)))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    nw_endpoint_t v6 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      nw_endpoint_t v7 = v5 + 104;
      int v8 = 136446978;
      int v9 = "nw_listener_inbox_accept_udp_block_invoke";
      if (!v5) {
        nw_endpoint_t v7 = 0LL;
      }
      __int16 v10 = 2080;
      int v11 = v7;
      __int16 v12 = 1040;
      int v13 = 16;
      __int16 v14 = 2096;
      int v15 = a3;
      _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_INFO,  "%{public}s Found interface %s, using agent id %{uuid_t}.16P",  (uint8_t *)&v8,  0x26u);
    }

    *(_OWORD *)*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = *a3;
  }
}

uint64_t nw_ip_is_broadcast(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  int v5 = *(unsigned __int8 *)(a1 + 1);
  if (v5 != 30)
  {
    if (v5 == 2)
    {
      nw_endpoint_t v6 = (int *)(a1 + 4);
      goto LABEL_4;
    }

void sub_18244C3E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __41__nw_listener_inbox_protocol_description__block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 24);
  if (!v3)
  {
    uint64_t v4 = *(void *)(v2 + 88);
    if (v4) {
      int v5 = *(const char **)(v4 + 16);
    }
    else {
      int v5 = "(null)";
    }
    CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x189604DB0], 0LL, @"<protocol: %s>", v5);
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = *(void **)(v7 + 24);
    *(void *)(v7 + 24) = v6;

    id v3 = *(void **)(*(void *)(a1 + 32) + 24LL);
  }

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), v3);
}

void sub_18244CB58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18244CF44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_listen_protocol_new_flow(uint64_t a1, void *a2, void *a3)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v7 = (id *)*(id *)(a1 + 24);
    if (v7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v8 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446978;
        unsigned int v32 = "nw_listen_protocol_new_flow";
        __int16 v33 = 2114;
        int v34 = v7;
        __int16 v35 = 2114;
        id v36 = v5;
        __int16 v37 = 2114;
        id v38 = v6;
        _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_DEBUG,  "%{public}s Listener %{public}@ received new flow %{public}@ : %{public}@",  buf,  0x2Au);
      }

      nw_parameters_set_server_mode(v6, 1);
      [v7[1] updateParametersForNewConnection:v6];
      int v9 = nw_connection_create_from_protocol_on_nw_queue(v5, v6, *(nw_protocol **)(a1 + 8));
      BOOL v10 = v9 != 0LL;
      if (v9)
      {
        [v7[1] handleInbound:v9 addProtocolInbox:0];
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v11 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136446210;
          unsigned int v32 = "nw_listen_protocol_new_flow";
          _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_ERROR,  "%{public}s nw_connection_create_from_protocol_on_nw_queue failed",  buf,  0xCu);
        }
      }

LABEL_11:
      goto LABEL_12;
    }

    __nwlog_obj();
    int v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    unsigned int v32 = "nw_listen_protocol_new_flow";
    id v18 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (__nwlog_fault(v18, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)int buf = 136446210;
          unsigned int v32 = "nw_listen_protocol_new_flow";
          _os_log_impl(&dword_181A5C000, v19, v20, "%{public}s called with null inbox", buf, 0xCu);
        }
      }

      else if (v29)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v25 = type;
        BOOL v26 = os_log_type_enabled(v19, type);
        if (backtrace_string)
        {
          if (v26)
          {
            *(_DWORD *)int buf = 136446466;
            unsigned int v32 = "nw_listen_protocol_new_flow";
            __int16 v33 = 2082;
            int v34 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v19,  v25,  "%{public}s called with null inbox, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_48;
        }

        if (v26)
        {
          *(_DWORD *)int buf = 136446210;
          unsigned int v32 = "nw_listen_protocol_new_flow";
          _os_log_impl(&dword_181A5C000, v19, v25, "%{public}s called with null inbox, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)int buf = 136446210;
          unsigned int v32 = "nw_listen_protocol_new_flow";
          _os_log_impl( &dword_181A5C000,  v19,  v28,  "%{public}s called with null inbox, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_18244D580(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_listen_protocol_disconnected(nw_listen_protocol *a1, nw_protocol *a2, int a3)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    id v6 = a1->handle;
    if (v6)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v7 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)int buf = 136446722;
        os_log_type_t v28 = "nw_listen_protocol_disconnected";
        __int16 v29 = 2114;
        unsigned int v30 = v6;
        __int16 v31 = 1024;
        int v32 = a3;
        _os_log_impl( &dword_181A5C000,  v7,  OS_LOG_TYPE_INFO,  "%{public}s Listener %{public}@ disconnected with error %d",  buf,  0x1Cu);
      }

      ((void (*)(nw_protocol *, nw_listen_protocol *))a2->callbacks->remove_listen_handler)(a2, a1);
      if (a3) {
        posix_CFErrorRef error = nw_error_create_posix_error(a3);
      }
      else {
        posix_CFErrorRef error = 0LL;
      }
      [v6[1] handleInboxFailed:v6 error:posix_error];

LABEL_9:
      return;
    }

    __nwlog_obj();
    int v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v28 = "nw_listen_protocol_disconnected";
    int v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v14, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v28 = "nw_listen_protocol_disconnected";
          _os_log_impl(&dword_181A5C000, v15, v16, "%{public}s called with null inbox", buf, 0xCu);
        }
      }

      else if (v25)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = type;
        BOOL v22 = os_log_type_enabled(v15, type);
        if (backtrace_string)
        {
          if (v22)
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v28 = "nw_listen_protocol_disconnected";
            __int16 v29 = 2082;
            unsigned int v30 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v15,  v21,  "%{public}s called with null inbox, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_45;
        }

        if (v22)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v28 = "nw_listen_protocol_disconnected";
          _os_log_impl(&dword_181A5C000, v15, v21, "%{public}s called with null inbox, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v28 = "nw_listen_protocol_disconnected";
          _os_log_impl( &dword_181A5C000,  v15,  v24,  "%{public}s called with null inbox, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_18244DB1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *nw_path_evaluator_copy_description_level(void *a1, int a2)
{
  out[7] = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    os_log_type_t v20 = 0LL;
    id v5 = (void *)*((void *)v3 + 2);
    if (v5)
    {
      if (a2 == 1)
      {
        id v6 = v5;
        *(void *)os_log_type_t type = 0LL;
        BOOL v22 = type;
        uint64_t v23 = 0x2020000000LL;
        uint64_t v24 = 0LL;
        uint64_t v7 = v6 + 45;
        out[0] = MEMORY[0x1895F87A8];
        out[1] = 3221225472LL;
        out[2] = __nw_endpoint_get_description_block_invoke;
        out[3] = &unk_189BC9210;
        int v8 = v6;
        out[4] = v8;
        out[5] = type;
        os_unfair_lock_lock(v7);
        __nw_endpoint_get_description_block_invoke((uint64_t)out);
        os_unfair_lock_unlock(v7);
        logging_description = (const char *)*((void *)v22 + 3);

        _Block_object_dispose(type, 8);
      }

      else
      {
        logging_description = nw_endpoint_get_logging_description(v5);
      }

      memset(out, 0, 37);
      uuid_unparse(v4 + 80, (char *)out);
      asprintf(&v20, "Evaluator %s to %s", (const char *)out, logging_description);
    }

    else
    {
      asprintf(&v20, "Default evaluator");
    }

    BOOL v10 = v20;
    goto LABEL_9;
  }

  __nwlog_obj();
  os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(out[0]) = 136446210;
  *(void *)((char *)out + 4) = "nw_path_evaluator_copy_description_level";
  int v13 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v20) = 0;
  if (__nwlog_fault(v13, type, &v20))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        LODWORD(out[0]) = 136446210;
        *(void *)((char *)out + 4) = "nw_path_evaluator_copy_description_level";
        _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s called with null evaluator", (uint8_t *)out, 0xCu);
      }
    }

    else if ((_BYTE)v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type[0];
      BOOL v18 = os_log_type_enabled(v14, type[0]);
      if (backtrace_string)
      {
        if (v18)
        {
          LODWORD(out[0]) = 136446466;
          *(void *)((char *)out + 4) = "nw_path_evaluator_copy_description_level";
          WORD2(out[1]) = 2082;
          *(void *)((char *)&out[1] + 6) = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v14,  v17,  "%{public}s called with null evaluator, dumping backtrace:%{public}s",  (uint8_t *)out,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_26;
      }

      if (v18)
      {
        LODWORD(out[0]) = 136446210;
        *(void *)((char *)out + 4) = "nw_path_evaluator_copy_description_level";
        _os_log_impl( &dword_181A5C000,  v14,  v17,  "%{public}s called with null evaluator, no backtrace",  (uint8_t *)out,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        LODWORD(out[0]) = 136446210;
        *(void *)((char *)out + 4) = "nw_path_evaluator_copy_description_level";
        _os_log_impl( &dword_181A5C000,  v14,  v19,  "%{public}s called with null evaluator, backtrace limit exceeded",  (uint8_t *)out,  0xCu);
      }
    }
  }

void sub_18244EBB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *nw_path_evaluator_copy_description(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = nw_path_evaluator_copy_description_level(v1, 1);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_path_evaluator_copy_description";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_evaluator_copy_description";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null evaluator", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v16 = "nw_path_evaluator_copy_description";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null evaluator, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_evaluator_copy_description";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null evaluator, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_evaluator_copy_description";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null evaluator, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18244EE74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_path_shared_necp_fd(void *a1)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  pthread_once(&nw_settings_setup_atfork::pOnce, (void (*)(void))nw_settings_setup_atfork_inner);
  uint64_t globals_for_path = nw_context_get_globals_for_path(v1);
  id v3 = (os_unfair_lock_s *)(globals_for_path + 120);
  os_unfair_lock_lock((os_unfair_lock_t)(globals_for_path + 120));
  if ((*(_DWORD *)(globals_for_path + 132) & 0x80000000) == 0) {
    goto LABEL_2;
  }
  int v6 = necp_open();
  if ((v6 & 0x80000000) == 0)
  {
    arc4random_buf((void *)(globals_for_path + 24), 8uLL);
    if (!change_fdguard_np())
    {
      *(_BYTE *)(globals_for_path + 140) |= 2u;
      *(_DWORD *)(globals_for_path + 132) = v6;
      goto LABEL_2;
    }

    int v7 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = (id)gLogObj;
    *(_DWORD *)int buf = 136446722;
    uint64_t v23 = "nw_path_shared_necp_fd";
    __int16 v24 = 1024;
    int v25 = v6;
    __int16 v26 = 1024;
    int v27 = v7;
    int v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v9, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v10 = (os_log_s *)(id)gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)int buf = 136446722;
          uint64_t v23 = "nw_path_shared_necp_fd";
          __int16 v24 = 1024;
          int v25 = v6;
          __int16 v26 = 1024;
          int v27 = v7;
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s Failed to guard necp fd %d %{darwin.errno}d", buf, 0x18u);
        }
      }

      else if (v20)
      {
        backtrace_string = __nw_create_backtrace_string();
        if (backtrace_string)
        {
          os_log_type_t v15 = (char *)backtrace_string;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v16 = (os_log_s *)(id)gLogObj;
          os_log_type_t v17 = type;
          if (os_log_type_enabled(v16, type))
          {
            *(_DWORD *)int buf = 136446978;
            uint64_t v23 = "nw_path_shared_necp_fd";
            __int16 v24 = 1024;
            int v25 = v6;
            __int16 v26 = 1024;
            int v27 = v7;
            __int16 v28 = 2082;
            __int16 v29 = v15;
            _os_log_impl( &dword_181A5C000,  v16,  v17,  "%{public}s Failed to guard necp fd %d %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x22u);
          }

          free(v15);
          if (!v9) {
            goto LABEL_12;
          }
          goto LABEL_11;
        }

        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)int buf = 136446722;
          uint64_t v23 = "nw_path_shared_necp_fd";
          __int16 v24 = 1024;
          int v25 = v6;
          __int16 v26 = 1024;
          int v27 = v7;
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s Failed to guard necp fd %d %{darwin.errno}d, no backtrace",  buf,  0x18u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v10 = (os_log_s *)(id)gLogObj;
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)int buf = 136446722;
          uint64_t v23 = "nw_path_shared_necp_fd";
          __int16 v24 = 1024;
          int v25 = v6;
          __int16 v26 = 1024;
          int v27 = v7;
          _os_log_impl( &dword_181A5C000,  v10,  v18,  "%{public}s Failed to guard necp fd %d %{darwin.errno}d, backtrace limit exceeded",  buf,  0x18u);
        }
      }
    }

    if (!v9)
    {
LABEL_12:
      close(v6);
      goto LABEL_2;
    }

void sub_18244F328(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double ___ZL19nw_path_get_globalsPU24objcproto13OS_nw_context8NSObject_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 12_Block_object_dispose(va, 8) = 0u;
  *(void *)(a2 + 144) = 0LL;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 4_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  double result = NAN;
  *(void *)(a2 + 132) = -1LL;
  return result;
}

char *nw_path_flow_copy_description(void *a1)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[2];
    if (v3) {
      snprintf(__str, 0x28uLL, ", interface: %s", (const char *)(v3 + 104));
    }
    else {
      __str[0] = 0;
    }
    char v4 = *((_BYTE *)v2 + 185);
    uuid_unparse((const unsigned __int8 *)v2 + 144, out);
    id v5 = ", assigned";
    int v6 = "";
    if ((v4 & 2) == 0) {
      id v5 = "";
    }
    if ((v4 & 1) != 0) {
      int v6 = ", viable";
    }
    os_log_type_t v17 = 0LL;
    asprintf(&v17, "%s%s%s%s", out, __str, v6, v5);
    int v7 = v17;
    goto LABEL_10;
  }

  __nwlog_obj();
  int v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)__str = 136446210;
  char v20 = "nw_path_flow_copy_description";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  out[0] = 16;
  LOBYTE(v17) = 0;
  if (__nwlog_fault(v10, out, &v17))
  {
    if (out[0] == 17)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = out[0];
      if (os_log_type_enabled(v11, (os_log_type_t)out[0]))
      {
        *(_DWORD *)__str = 136446210;
        char v20 = "nw_path_flow_copy_description";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null flow", (uint8_t *)__str, 0xCu);
      }
    }

    else if ((_BYTE)v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = out[0];
      BOOL v15 = os_log_type_enabled(v11, (os_log_type_t)out[0]);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)__str = 136446466;
          char v20 = "nw_path_flow_copy_description";
          __int16 v21 = 2082;
          BOOL v22 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v14,  "%{public}s called with null flow, dumping backtrace:%{public}s",  (uint8_t *)__str,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_27;
      }

      if (v15)
      {
        *(_DWORD *)__str = 136446210;
        char v20 = "nw_path_flow_copy_description";
        _os_log_impl( &dword_181A5C000,  v11,  v14,  "%{public}s called with null flow, no backtrace",  (uint8_t *)__str,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = out[0];
      if (os_log_type_enabled(v11, (os_log_type_t)out[0]))
      {
        *(_DWORD *)__str = 136446210;
        char v20 = "nw_path_flow_copy_description";
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null flow, backtrace limit exceeded",  (uint8_t *)__str,  0xCu);
      }
    }
  }

void sub_18244F6CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__67543(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__67544(uint64_t a1)
{
}

uint64_t nw_path_is_ultra_constrained(void *a1)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = nw_path_copy_connected_interface(v1);
    char v4 = v3;
    if (v3)
    {
      id v5 = v3;
      __int16 v6 = *(_WORD *)(v5 + 85);

      if ((v6 & 4) != 0) {
        goto LABEL_12;
      }
    }

    if (!nw_path_agents_are_satisfied_update_reason(v2, 0, 0, 0, 0LL)) {
      goto LABEL_11;
    }
    direct = v2->direct;
    if (direct)
    {
      id v8 = direct;
      __int16 v9 = *(_WORD *)((char *)v8 + 85);

      if ((v9 & 4) != 0) {
        goto LABEL_12;
      }
    }

    delegate = v2->delegate;
    if (delegate)
    {
      os_log_type_t v11 = delegate;
      __int16 v12 = *(_WORD *)((char *)v11 + 85);

      if ((v12 & 4) != 0) {
        goto LABEL_12;
      }
    }

    fallback_interface = v2->fallback_interface;
    if (fallback_interface
      && (os_log_type_t v14 = fallback_interface, v15 = *(_WORD *)((char *)v14 + 85), v14, (v15 & 4) != 0))
    {
LABEL_12:
      uint64_t v16 = 1LL;
    }

    else
    {
LABEL_11:
      uint64_t v16 = 0LL;
    }

    goto LABEL_14;
  }

  __nwlog_obj();
  os_log_type_t v18 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  __int16 v29 = "nw_path_is_ultra_constrained";
  os_log_type_t v19 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v26 = 0;
  if (__nwlog_fault(v19, &type, &v26))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v29 = "nw_path_is_ultra_constrained";
        _os_log_impl(&dword_181A5C000, v20, v21, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = type;
      BOOL v24 = os_log_type_enabled(v20, type);
      if (backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v29 = "nw_path_is_ultra_constrained";
          __int16 v30 = 2082;
          __int16 v31 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v20,  v23,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_31;
      }

      if (v24)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v29 = "nw_path_is_ultra_constrained";
        _os_log_impl(&dword_181A5C000, v20, v23, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      char v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v29 = "nw_path_is_ultra_constrained";
        _os_log_impl( &dword_181A5C000,  v20,  v25,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18244FDB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL28nw_path_fallback_descriptionP18NWConcrete_nw_pathPcm_block_invoke( void *a1, int a2, xpc_object_t xstring)
{
  char v4 = *(char **)(*(void *)(a1[4] + 8LL) + 24LL);
  size_t v5 = *(void *)(*(void *)(a1[5] + 8LL) + 24LL);
  int v6 = *(unsigned __int8 *)(*(void *)(a1[6] + 8LL) + 24LL);
  string_ptr = xpc_string_get_string_ptr(xstring);
  id v8 = ", ";
  if (!v6) {
    id v8 = "";
  }
  int v9 = snprintf(v4, v5, "%s%s", v8, string_ptr);
  if (*(void *)(*(void *)(a1[5] + 8LL) + 24LL) <= (unint64_t)v9)
  {
    **(_BYTE **)(*(void *)(a1[4] + 8LL) + 24LL) = 0;
    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else if (v9 >= 1)
  {
    *(void *)(*(void *)(a1[4] + 8LL) + 24LL) += v9;
    *(void *)(*(void *)(a1[5] + 8LL) + 24LL) -= v9;
  }

  *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
  return 1LL;
}

uint64_t ___ZL28nw_path_fallback_descriptionP18NWConcrete_nw_pathPcm_block_invoke_2( void *a1, int a2, xpc_object_t xstring)
{
  char v4 = *(char **)(*(void *)(a1[4] + 8LL) + 24LL);
  size_t v5 = *(void *)(*(void *)(a1[5] + 8LL) + 24LL);
  int v6 = *(unsigned __int8 *)(*(void *)(a1[6] + 8LL) + 24LL);
  string_ptr = xpc_string_get_string_ptr(xstring);
  id v8 = ", ";
  if (!v6) {
    id v8 = "";
  }
  int v9 = snprintf(v4, v5, "%s%s", v8, string_ptr);
  if (*(void *)(*(void *)(a1[5] + 8LL) + 24LL) <= (unint64_t)v9)
  {
    **(_BYTE **)(*(void *)(a1[4] + 8LL) + 24LL) = 0;
    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  else if (v9 >= 1)
  {
    *(void *)(*(void *)(a1[4] + 8LL) + 24LL) += v9;
    *(void *)(*(void *)(a1[5] + 8LL) + 24LL) -= v9;
  }

  *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
  return 1LL;
}

BOOL nw_path_has_unsatisfied_cellular_agent(void *a1, char a2)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  char v4 = v3;
  if (v3)
  {
    *(void *)int buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v21 = 0;
    size_t v5 = (void *)*((void *)v3 + 28);
    if (v5)
    {
      applier[0] = MEMORY[0x1895F87A8];
      applier[1] = 3221225472LL;
      applier[2] = __nw_path_has_unsatisfied_cellular_agent_block_invoke;
      applier[3] = &unk_189BC5170;
      char v17 = a2;
      void applier[4] = buf;
      xpc_dictionary_apply(v5, applier);
      BOOL v6 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
    }

    else
    {
      BOOL v6 = 0LL;
    }

    _Block_object_dispose(buf, 8);
    goto LABEL_6;
  }

  __nwlog_obj();
  id v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_path_has_unsatisfied_cellular_agent";
  int v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (__nwlog_fault(v9, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_has_unsatisfied_cellular_agent";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_has_unsatisfied_cellular_agent";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&_BYTE buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v14)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_has_unsatisfied_cellular_agent";
        _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_has_unsatisfied_cellular_agent";
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1824502E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_path_has_unsatisfied_cellular_agent_block_invoke(uint64_t a1, int a2, xpc_object_t xdict)
{
  size_t length = 0LL;
  if (!xdict) {
    return 1LL;
  }
  data = (const char *)xpc_dictionary_get_data(xdict, "data", &length);
  if (!data) {
    return 1LL;
  }
  if (length < 0xD8) {
    return 1LL;
  }
  size_t v5 = data;
  if (length != *((unsigned int *)data + 53) + 216LL
    || strncmp(data + 16, "Cellular", 0x20uLL)
    || *(_BYTE *)(a1 + 40) && strncmp(v5 + 48, "Internet", 0x20uLL))
  {
    return 1LL;
  }

  uint64_t result = 1LL;
  if ((*((_DWORD *)v5 + 52) & 3) == 1)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
    return 0LL;
  }

  return result;
}

BOOL nw_path_agents_are_satisfied_update_reason(NWConcrete_nw_path *a1, char a2, char a3, char a4, BOOL *a5)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  int v9 = a1;
  os_log_type_t v10 = v9;
  if (v9)
  {
    if (a5) {
      *a5 = 0;
    }
    *(void *)int buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    BOOL v11 = 1LL;
    char v32 = 1;
    network_agent_dictionary = v9->network_agent_dictionary;
    if (network_agent_dictionary)
    {
      applier[0] = MEMORY[0x1895F87A8];
      applier[1] = 3221225472LL;
      applier[2] = ___ZL42nw_path_agents_are_satisfied_update_reasonP18NWConcrete_nw_pathbbbPb_block_invoke;
      applier[3] = &unk_189BC5510;
      char v26 = a3;
      char v27 = a4;
      os_log_type_t v23 = v9;
      BOOL v24 = buf;
      os_log_type_t v25 = a5;
      char v28 = a2;
      xpc_dictionary_apply(network_agent_dictionary, applier);

      BOOL v11 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
    }

    _Block_object_dispose(buf, 8);
    goto LABEL_7;
  }

  __nwlog_obj();
  BOOL v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_path_agents_are_satisfied_update_reason";
  os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v29 = 0;
  if (__nwlog_fault(v15, &type, &v29))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_agents_are_satisfied_update_reason";
        _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v29)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v16, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_agents_are_satisfied_update_reason";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&_BYTE buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v16,  v19,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }

      if (v20)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_agents_are_satisfied_update_reason";
        _os_log_impl(&dword_181A5C000, v16, v19, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_agents_are_satisfied_update_reason";
        _os_log_impl( &dword_181A5C000,  v16,  v21,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18245070C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL42nw_path_agents_are_satisfied_update_reasonP18NWConcrete_nw_pathbbbPb_block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  length[5] = *MEMORY[0x1895F89C0];
  id v4 = a3;
  size_t v5 = v4;
  length[0] = 0LL;
  if (v4)
  {
    data = (const unsigned __int8 *)xpc_dictionary_get_data(v4, "data", length);
    if (data)
    {
      if (length[0] >= 0xD8)
      {
        int v7 = data;
        if (length[0] == *((unsigned int *)data + 53) + 216LL)
        {
          BOOL is_required = nw_path_netagent_is_required(*(void **)(a1 + 32), v5);
          unsigned int v9 = *((_DWORD *)v7 + 52);
          BOOL v10 = is_required || *(_BYTE *)(a1 + 56) != 0;
          if ((*((_DWORD *)v7 + 52) & 3) == 1
            && ((v9 & 0x40) != 0 || !*(_BYTE *)(a1 + 57))
            && (!v10 & (v9 >> 4) & 1) == 0)
          {
            *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
            BOOL v11 = *(_BYTE **)(a1 + 48);
            if (v11 && !*v11) {
              *BOOL v11 = v9 & ((v9 & 0xC) != 0);
            }
            if (*(_BYTE *)(a1 + 58))
            {
              int v21 = 0;
              ne_session_get_config_id_from_network_agent();
              BOOL v20 = 0LL;
              uuid_unparse_upper(v7, (char *)length);
              asprintf( &v20,  "Network Agent [domain: %s, type: %s, description: %s, uuid: %s, flags: %x]",  (const char *)v7 + 16,  (const char *)v7 + 48,  (const char *)v7 + 80,  (const char *)length,  *((_DWORD *)v7 + 52));
              os_log_type_t v17 = *(void **)(a1 + 32);
              if (v20)
              {
                nw_path_set_reason(v17, 4, "%s is unsatisfied", v12, v13, v14, v15, v16, (char)v20);
                if (v20) {
                  free(v20);
                }
              }

              else
              {
                nw_path_set_reason(v17, 4, "Unknown network agent is unsatisfied", v12, v13, v14, v15, v16, v19);
              }
            }
          }
        }
      }
    }
  }

  return 1LL;
}

void sub_182450938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_netagent_is_required(void *a1, void *a2)
{
  uint64_t v54 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  size_t v5 = (void **)v3;
  id v6 = v4;
  int v7 = v6;
  if (!v5)
  {
    __nwlog_obj();
    __int16 v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_netagent_applies_to_path";
    unsigned int v9 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(applier[0]) = 0;
    if (__nwlog_fault(v9, type, applier))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v32 = type[0];
        if (os_log_type_enabled(v10, type[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_netagent_applies_to_path";
          _os_log_impl(&dword_181A5C000, v10, v32, "%{public}s called with null path", buf, 0xCu);
        }

void sub_18245111C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

BOOL ___ZL32nw_path_netagent_applies_to_pathP18NWConcrete_nw_pathPU24objcproto13OS_xpc_object8NSObjectb_block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  bytes = xpc_uuid_get_bytes(v4);
  int v6 = uuid_compare(bytes, *(const unsigned __int8 **)(a1 + 40));
  if (!v6) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
  }
  BOOL v7 = v6 != 0;

  return v7;
}

void sub_1824511F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL32nw_path_netagent_applies_to_pathP18NWConcrete_nw_pathPU24objcproto13OS_xpc_object8NSObjectb_block_invoke_2( uint64_t a1, size_t a2, xpc_object_t xstring)
{
  string_ptr = xpc_string_get_string_ptr(xstring);
  string = xpc_array_get_string(*(xpc_object_t *)(a1 + 32), a2);
  uint64_t result = 1LL;
  if (string_ptr && string)
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (!strncmp(string_ptr, (const char *)(v8 + 16), 0x20uLL))
    {
      int v9 = strncmp(string, (const char *)(v8 + 48), 0x20uLL);
      uint64_t result = 1LL;
      if (!v9)
      {
        *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
        return 0LL;
      }
    }

    else
    {
      return 1LL;
    }
  }

  return result;
}

uint64_t ___ZL32nw_path_netagent_applies_to_pathP18NWConcrete_nw_pathPU24objcproto13OS_xpc_object8NSObjectb_block_invoke_3( uint64_t a1, size_t a2, xpc_object_t xstring)
{
  string_ptr = xpc_string_get_string_ptr(xstring);
  string = xpc_array_get_string(*(xpc_object_t *)(a1 + 32), a2);
  uint64_t result = 1LL;
  if (string_ptr && string)
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (!strncmp(string_ptr, (const char *)(v8 + 16), 0x20uLL))
    {
      int v9 = strncmp(string, (const char *)(v8 + 48), 0x20uLL);
      uint64_t result = 1LL;
      if (!v9)
      {
        *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
        return 0LL;
      }
    }

    else
    {
      return 1LL;
    }
  }

  return result;
}

void ___ZL18nw_path_update_dnsP18NWConcrete_nw_path_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(char *)(v1 + 474);
  if ((v2 & 0x80000000) == 0)
  {
    id v3 = *(void **)(v1 + 224);
    if (v3)
    {
      applier[0] = MEMORY[0x1895F87A8];
      applier[1] = 3221225472LL;
      applier[2] = ___ZL18nw_path_update_dnsP18NWConcrete_nw_path_block_invoke_2;
      applier[3] = &unk_189BC5148;
      id v6 = (id)v1;
      xpc_dictionary_apply(v3, applier);

      uint64_t v1 = *(void *)(a1 + 32);
      LOBYTE(v2) = *(_BYTE *)(v1 + 474);
    }

    *(_BYTE *)(v1 + 474) = v2 | 0x80;
  }

void sub_1824513D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

uint64_t ___ZL18nw_path_update_dnsP18NWConcrete_nw_path_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  size_t v5 = v4;
  size_t length = 0LL;
  if (v4)
  {
    data = (unsigned int *)xpc_dictionary_get_data(v4, "data", &length);
    BOOL v7 = 0LL;
    if (data && length >= 0xD8)
    {
      if (length == data[53] + 216LL) {
        BOOL v7 = data;
      }
      else {
        BOOL v7 = 0LL;
      }
    }
  }

  else
  {
    BOOL v7 = 0LL;
  }

  if (is_config_agent_type_dns())
  {
    config_agent_copy_dns_information();
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    int v9 = v8;
    if (v8)
    {
      BOOL v10 = nw_resolver_config_create_with_dictionary(v8);
      if (v10)
      {
        unsigned int uint64 = xpc_dictionary_get_uint64(v5, "generation");
        uint64_t v12 = v10;
        v12->generation = uint64;

        os_log_type_t v13 = v12;
        *(_OWORD *)v13->int identifier = *v7;

        nw_resolver_config_set_provider_description(v13, (uint64_t)(v7 + 5));
        uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 184LL);
        if (!v14)
        {
          BOOL v15 = nw_array_create();
          uint64_t v16 = *(void *)(a1 + 32);
          id v17 = *(void **)(v16 + 184);
          *(void *)(v16 + 184) = v15;

          uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 184LL);
        }

        nw_array_append(v14, v13);
      }

      config_agent_free_dns_information();
    }
  }

  return 1LL;
}

void sub_18245152C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_uses_nexus_internal(NWConcrete_nw_path *a1, char a2)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (!v3)
  {
    __nwlog_obj();
    BOOL v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    BOOL v19 = "nw_path_uses_nexus_internal";
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v8, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v19 = "nw_path_uses_nexus_internal";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null path", buf, 0xCu);
        }
      }

      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)int buf = 136446466;
            BOOL v19 = "nw_path_uses_nexus_internal";
            __int16 v20 = 2082;
            os_log_type_t v21 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_33;
        }

        if (v13)
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v19 = "nw_path_uses_nexus_internal";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v19 = "nw_path_uses_nexus_internal";
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_1824518B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_path_get_nexus_agent(NWConcrete_nw_path *a1, char a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  uint64_t v18 = 0LL;
  BOOL v19 = &v18;
  uint64_t v20 = 0x2020000000LL;
  uint64_t v21 = 0LL;
  if (v3->network_agent_dictionary)
  {
    if (v3->policy_result.num_interface_options)
    {
      unint64_t v5 = 0LL;
      uint64_t v6 = 8LL;
      do
      {
        BOOL v7 = (const unsigned __int8 *)v4->policy_result.interface_options + v6;
        if (!uuid_is_null(v7))
        {
          memset(out, 0, 37);
          uuid_unparse(v7, out);
          xpc_dictionary_get_value(v4->network_agent_dictionary, out);
          uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
          int v9 = v8;
          if (v8)
          {
            size_t length = 0LL;
            data = xpc_dictionary_get_data(v8, "data", &length);
            if (data)
            {
              if (length >= 0xD8 && length == data[53] + 216LL)
              {
                int v11 = data[52];
                if ((v11 & 0xE080) != 0)
                {
                  char v12 = (v11 & 0x40) != 0 ? 0 : a2;
                  if ((data[52] & 0x13) != 1 && (v12 & 1) == 0)
                  {
                    v19[3] = (uint64_t)data;

                    break;
                  }
                }
              }
            }
          }
        }

        ++v5;
        v6 += 24LL;
      }

      while (v5 < v4->policy_result.num_interface_options);
    }

    uint64_t v13 = v19[3];
    if (!v13)
    {
      network_agent_dictionary = v4->network_agent_dictionary;
      applier[0] = MEMORY[0x1895F87A8];
      applier[1] = 3221225472LL;
      applier[2] = ___ZL23nw_path_get_nexus_agentP18NWConcrete_nw_pathb_block_invoke;
      applier[3] = &unk_189BC5170;
      char v17 = a2;
      void applier[4] = &v18;
      xpc_dictionary_apply(network_agent_dictionary, applier);
      uint64_t v13 = v19[3];
    }
  }

  else
  {
    uint64_t v13 = 0LL;
  }

  _Block_object_dispose(&v18, 8);

  return v13;
}

void sub_182451ABC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL23nw_path_get_nexus_agentP18NWConcrete_nw_pathb_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  unint64_t v5 = v4;
  size_t length = 0LL;
  if (v4
    && (data = xpc_dictionary_get_data(v4, "data", &length)) != 0LL
    && length >= 0xD8
    && length == data[53] + 216LL
    && (int v7 = data[52], (v7 & 0xE080) != 0))
  {
    BOOL v9 = (v7 & 0x40) == 0 && *(_BYTE *)(a1 + 40) != 0;
    uint64_t v10 = 1LL;
    if ((data[52] & 0x13) != 1 && !v9)
    {
      uint64_t v10 = 0LL;
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = data;
    }
  }

  else
  {
    uint64_t v10 = 1LL;
  }

  return v10;
}

void ___ZL32nw_path_can_use_channel_syscallsv_block_invoke()
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  getpid();
  if (sandbox_check())
  {
    nw_path_can_use_channel_syscalls(void)::can_use_channel_syscalls = 0;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v0 = (id)gLogObj;
    if (!os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_ERROR))
    {
LABEL_5:

      return;
    }

    *(_DWORD *)int buf = 136446210;
    unint64_t v5 = "nw_path_can_use_channel_syscalls_block_invoke";
    uint64_t v1 = "%{public}s Sandbox does not allow access to channel system calls";
    int v2 = (os_log_s *)v0;
    os_log_type_t v3 = OS_LOG_TYPE_ERROR;
LABEL_4:
    _os_log_impl(&dword_181A5C000, v2, v3, v1, buf, 0xCu);
    goto LABEL_5;
  }

  nw_path_can_use_channel_syscalls(void)::can_use_channel_syscalls = 1;
  if (gLogDatapath)
  {
    __nwlog_obj();
    id v0 = (id)objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_5;
    }
    *(_DWORD *)int buf = 136446210;
    unint64_t v5 = "nw_path_can_use_channel_syscalls_block_invoke";
    uint64_t v1 = "%{public}s Sandbox allows access to channel system calls";
    int v2 = (os_log_s *)v0;
    os_log_type_t v3 = OS_LOG_TYPE_DEBUG;
    goto LABEL_4;
  }

void nw_path_release_globals(uint64_t a1, uint64_t a2)
{
  *(void *)&v40[5] = *MEMORY[0x1895F89C0];
  if (a1)
  {
    char v2 = a2;
    id v4 = *(os_unfair_lock_s **)(a1 + 40);
    if (v4)
    {
      _nw_hash_table_release(v4, a2);
      *(void *)(a1 + 40) = 0LL;
    }

    unint64_t v5 = *(void **)(a1 + 32);
    *(void *)(a1 + 32) = 0LL;

    uint64_t v6 = *(void **)(a1 + 48);
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;

    int v7 = *(void **)(a1 + 64);
    *(void *)(a1 + 64) = 0LL;

    uint64_t v8 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = 0LL;

    BOOL v9 = *(void **)(a1 + 80);
    *(void *)(a1 + 80) = 0LL;

    uint64_t v10 = *(void **)(a1 + 88);
    *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;

    int v11 = *(void **)(a1 + 104);
    *(void *)(a1 + 104) = 0LL;

    if (*(void *)(a1 + 112))
    {
      NEFlowDirectorDestroy_delayInitStub(v13);
      *(void *)(a1 + 112) = 0LL;
    }

    if ((v2 & 1) == 0)
    {
      uint64_t v14 = *(void *)(a1 + 56);
      if (v14)
      {
        nw_queue_cancel_source(v14, v12);
        *(void *)(a1 + 56) = 0LL;
      }
    }

    *(_DWORD *)(a1 + 120) = 0;
    *(_DWORD *)(a1 + 124) = 0;
    pthread_once(&nw_settings_setup_atfork::pOnce, (void (*)(void))nw_settings_setup_atfork_inner);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 120));
    int v15 = *(_DWORD *)(a1 + 132);
    if ((v15 & 0x80000000) == 0)
    {
      if ((*(_BYTE *)(a1 + 140) & 2) != 0)
      {
        if (guarded_close_np() && (v2 & 1) == 0)
        {
          int v16 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
          uint64_t v17 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init(v17);
          uint64_t v18 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            int v19 = *(_DWORD *)(a1 + 132);
            *(_DWORD *)int buf = 136446722;
            uint64_t v38 = "nw_path_close_fd";
            __int16 v39 = 1024;
            *(_DWORD *)BOOL v40 = v19;
            v40[2] = 1024;
            *(_DWORD *)&v40[3] = v16;
            _os_log_impl( &dword_181A5C000,  v18,  OS_LOG_TYPE_ERROR,  "%{public}s Failed to close guarded necp fd %d %{darwin.errno}d",  buf,  0x18u);
          }
        }
      }

      else
      {
        close(v15);
      }

      *(_DWORD *)(a1 + 132) = -1;
    }

    int v20 = *(_DWORD *)(a1 + 136);
    if ((v20 & 0x80000000) == 0)
    {
      if ((*(_BYTE *)(a1 + 140) & 4) != 0)
      {
        if (guarded_close_np() && (v2 & 1) == 0)
        {
          int v21 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
          uint64_t v22 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init(v22);
          id v23 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          {
            int v24 = *(_DWORD *)(a1 + 136);
            *(_DWORD *)int buf = 136446722;
            uint64_t v38 = "nw_path_close_fd";
            __int16 v39 = 1024;
            *(_DWORD *)BOOL v40 = v24;
            v40[2] = 1024;
            *(_DWORD *)&v40[3] = v21;
            _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_ERROR,  "%{public}s Failed to close guarded necp observer fd %d %{darwin.errno}d",  buf,  0x18u);
          }
        }
      }

      else
      {
        close(v20);
      }

      *(_DWORD *)(a1 + 136) = -1;
    }

    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 120));
    uuid_clear((unsigned __int8 *)a1);

    return;
  }

  __nwlog_obj(0LL, a2);
  os_log_type_t v25 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  uint64_t v38 = "nw_path_release_globals";
  char v26 = (void *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v35 = 0;
  uint64_t v27 = __nwlog_fault(v26, &type, &v35);
  if ((_DWORD)v27)
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj(v27, v28);
      char v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v38 = "nw_path_release_globals";
        __int16 v31 = "%{public}s called with null globals";
LABEL_42:
        _os_log_impl(&dword_181A5C000, v29, v30, v31, buf, 0xCu);
      }
    }

    else
    {
      if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj(backtrace_string, v33);
        char v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v30 = type;
        BOOL v34 = os_log_type_enabled(v29, type);
        if (backtrace_string)
        {
          if (v34)
          {
            *(_DWORD *)int buf = 136446466;
            uint64_t v38 = "nw_path_release_globals";
            __int16 v39 = 2082;
            *(void *)BOOL v40 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v29,  v30,  "%{public}s called with null globals, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_44;
        }

        if (!v34) {
          goto LABEL_43;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v38 = "nw_path_release_globals";
        __int16 v31 = "%{public}s called with null globals, no backtrace";
        goto LABEL_42;
      }

      __nwlog_obj(v27, v28);
      char v29 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v30 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v38 = "nw_path_release_globals";
        __int16 v31 = "%{public}s called with null globals, backtrace limit exceeded";
        goto LABEL_42;
      }
    }

const char *nw_path_status_get_description(unsigned int a1)
{
  if (a1 > 3) {
    return "unknown";
  }
  else {
    return off_189BC5688[a1];
  }
}

char *nw_path_flow_registration_copy_description(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  uuid_unparse_upper((const unsigned __int8 *)(a1 + 32), out);
  char v2 = 0LL;
  asprintf(&v2, "%s", out);
  return v2;
}

NWConcrete_nw_path_flow_registration *nw_path_flow_registration_create_internal()
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v0 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_path_flow_registration);
  uint64_t v1 = v0;
  if (v0)
  {
    char v2 = v0;
    goto LABEL_10;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v3 = (id)gLogObj;
  *(_DWORD *)int buf = 136446210;
  int v15 = "nw_path_flow_registration_create_internal";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unint64_t v5 = (os_log_s *)(id)gLogObj;
    os_log_type_t v6 = type;
    if (os_log_type_enabled(v5, type))
    {
      *(_DWORD *)int buf = 136446210;
      int v15 = "nw_path_flow_registration_create_internal";
      _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_flow_registration) alloc] init] failed",  buf,  0xCu);
    }

uint64_t nw_path_flow_registration_get_id(void *a1, _OWORD *a2)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    int v19 = "nw_path_flow_registration_get_id";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v9, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)int buf = 136446210;
          int v19 = "nw_path_flow_registration_get_id";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null registration", buf, 0xCu);
        }
      }

      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        BOOL v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)int buf = 136446466;
            int v19 = "nw_path_flow_registration_get_id";
            __int16 v20 = 2082;
            int v21 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null registration, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }

        if (v14)
        {
          *(_DWORD *)int buf = 136446210;
          int v19 = "nw_path_flow_registration_get_id";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null registration, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)int buf = 136446210;
          int v19 = "nw_path_flow_registration_get_id";
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null registration, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_182452820(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_path *nw_path_create(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v4 = a1;
  id v5 = a2;
  uint64_t v6 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_path);
  int v7 = v6;
  if (!v6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = (id)gLogObj;
    *(_DWORD *)int buf = 136446210;
    uint64_t v28 = "nw_path_create";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v10 = (os_log_s *)(id)gLogObj;
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v28 = "nw_path_create";
        _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path) alloc] init] failed",  buf,  0xCu);
      }

      goto LABEL_40;
    }

    if (!v25)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v10 = (os_log_s *)(id)gLogObj;
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v28 = "nw_path_create";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path) alloc] init] failed, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_40;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v10 = (os_log_s *)(id)gLogObj;
    os_log_type_t v16 = type;
    BOOL v17 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v28 = "nw_path_create";
        _os_log_impl( &dword_181A5C000,  v10,  v16,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path) alloc] init] failed, no backtrace",  buf,  0xCu);
      }

      goto LABEL_40;
    }

    if (v17)
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v28 = "nw_path_create";
      __int16 v29 = 2082;
      os_log_type_t v30 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v10,  v16,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path) alloc] init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_17;
  }

  if (!v5)
  {
    nw_parameters_t v12 = nw_parameters_create();
    parameters = v7->parameters;
    v7->parameters = v12;

    if (v7->parameters) {
      goto LABEL_10;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v18 = (id)gLogObj;
    *(_DWORD *)int buf = 136446210;
    uint64_t v28 = "nw_path_create";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v9, &type, &v25))
    {
LABEL_41:
      if (!v9)
      {
LABEL_43:
        BOOL v14 = 0LL;
        goto LABEL_44;
      }

void sub_182452DB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_path_copy_for_flow_registration_block_invoke_3(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = v4;
  uint64_t v6 = *(void *)(a1 + 32);
  if (*(void *)(v6 + 144) == *((void *)v4 + 4)
    && *(void *)(v6 + 152) == *((void *)v4 + 5)
    && (*((_BYTE *)v4 + 149) & 1) == 0)
  {
    nw_array_append(*(void *)(*(void *)(a1 + 40) + 72LL), *(void **)(a1 + 48));
    uint64_t v7 = 0LL;
  }

  else
  {
    uint64_t v7 = 1LL;
  }

  return v7;
}

void nw_path_prepare_fork()
{
  if (nw_context_copy_implicit_context::onceToken != -1) {
    dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
  }
  id v0 = (id)nw_context_copy_implicit_context::implicit_context;
  uint64_t globals_for_path = (os_unfair_lock_s *)nw_context_get_globals_for_path(v0);

  os_unfair_lock_lock(globals_for_path + 31);
  os_unfair_lock_lock(globals_for_path + 30);
}

void sub_182452EB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_path_parent_has_forked()
{
  if (nw_context_copy_implicit_context::onceToken != -1) {
    dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
  }
  id v0 = (id)nw_context_copy_implicit_context::implicit_context;
  uint64_t globals_for_path = (os_unfair_lock_s *)nw_context_get_globals_for_path(v0);

  os_unfair_lock_unlock(globals_for_path + 30);
  os_unfair_lock_unlock(globals_for_path + 31);
}

void sub_182452F30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_path_evaluator_evaluate(NWConcrete_nw_path_evaluator *a1, int *a2)
{
  uint64_t v80 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = (void *)*((void *)v3 + 1);
  if (v4)
  {
    id v5 = v4;
    id v6 = *(id *)(v5[13] + 136LL);

    if (nw_path_endpoint_is_always_satisfied(*((void **)v3 + 2)))
    {
      uuid_generate_random((unsigned __int8 *)v3 + 80);
      uint64_t v7 = nw_path_create(*((void **)v3 + 2), *((void **)v3 + 1));
      id v8 = (void *)*((void *)v3 + 6);
      *((void *)v3 + 6) = v7;

      uint64_t v9 = *((void *)v3 + 6);
      if (v9)
      {
        objc_storeStrong((id *)(v9 + 32), *((id *)v3 + 3));
        BOOL v10 = (char *)v3 + 48;
        objc_storeStrong((id *)(*((void *)v3 + 6) + 40LL), *((id *)v3 + 4));
        objc_storeStrong((id *)(*((void *)v3 + 6) + 48LL), *((id *)v3 + 5));
        *(_BYTE *)(*(void *)v10 + 475LL) = *(_BYTE *)(*(void *)v10 + 475LL) & 0xFE | ((*((_BYTE *)v3 + 107) & 2) != 0);
        *(_WORD *)(*(void *)v10 + 384LL) = *((_WORD *)v3 + 52);
        *(_BYTE *)(*(void *)v10 + 386LL) = *((_BYTE *)v3 + 106);
        *(_BYTE *)(*(void *)v10 + 475LL) = *(_BYTE *)(*(void *)v10 + 475LL) & 0xFD | (*((_BYTE *)v3 + 107) >> 1) & 2;
        *(_OWORD *)(*(void *)v10 + 120LL) = *((_OWORD *)v3 + 5);
LABEL_67:
        nw_path_snapshot_path(*((NWConcrete_nw_path **)v3 + 6));
        uint64_t v44 = 1LL;
LABEL_86:

        goto LABEL_87;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v22 = (id)gLogObj;
      *(_DWORD *)BOOL v76 = 136446210;
      os_log_type_t v77 = "nw_path_evaluator_evaluate";
      nw_parameters_t v12 = (char *)_os_log_send_and_compose_impl();

      buf[0] = 16;
      LOBYTE(v67) = 0;
      if (!__nwlog_fault(v12, buf, &v67))
      {
LABEL_74:
        if (!v12) {
          goto LABEL_85;
        }
        goto LABEL_84;
      }

      if (buf[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v23 = (os_log_s *)(id)gLogObj;
        os_log_type_t v24 = buf[0];
        if (os_log_type_enabled(v23, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)BOOL v76 = 136446210;
          os_log_type_t v77 = "nw_path_evaluator_evaluate";
          _os_log_impl(&dword_181A5C000, v23, v24, "%{public}s nw_path_create failed", v76, 0xCu);
        }

void sub_182453F6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_path_snapshot_path(NWConcrete_nw_path *a1)
{
  length[15] = *MEMORY[0x1895F89C0];
  uint64_t v1 = a1;
  direct = v1->direct;
  v1->direct = 0LL;

  delegate = v1->delegate;
  v1->delegate = 0LL;

  unsigned int routed_interface_index = v1->policy_result.routed_interface_index;
  if (routed_interface_index
    || (unsigned int routed_interface_index = v1->policy_result.direct_interface_index) != 0
    || (unsigned int routed_interface_index = nw_parameters_get_required_interface_index(v1->parameters)) != 0)
  {
    id v5 = nw_parameters_copy_context(v1->parameters);
    id v6 = nw_path_copy_interface_with_generation( v5,  routed_interface_index,  v1->policy_result.direct_interface_generation);
    uint64_t v7 = v1->direct;
    v1->direct = (OS_nw_interface *)v6;

    id v8 = nw_parameters_copy_context(v1->parameters);
    uint64_t v9 = nw_path_copy_interface_with_generation( v8,  v1->policy_result.delegate_interface_index,  v1->policy_result.delegate_interface_generation);
    BOOL v10 = v1->delegate;
    v1->delegate = (OS_nw_interface *)v9;
  }

  else
  {
    endpoint = v1->endpoint;
    BOOL v126 = endpoint;
    int v127 = -[OS_nw_endpoint type](v126, "type");

    id v8 = nw_parameters_copy_context(v1->parameters);
    os_log_type_t v128 = nw_path_copy_interface_with_generation(v8, nw_interface_get_loopback_index::index, 0);
    BOOL v10 = v1->direct;
    v1->direct = (OS_nw_interface *)v128;
  }

LABEL_7:
  unsigned int v11 = v1;
  network_agent_dictionary = v11->network_agent_dictionary;
  v11->network_agent_dictionary = 0LL;

  if (!v11->policy_result.netagents) {
    goto LABEL_231;
  }
  if (!v11->policy_result.num_netagents) {
    goto LABEL_231;
  }
  os_log_type_t v13 = (OS_xpc_object *)xpc_dictionary_create(0LL, 0LL, 0LL);
  BOOL v14 = v11->network_agent_dictionary;
  v11->network_agent_dictionary = v13;

  if (!v11->policy_result.num_netagents) {
    goto LABEL_231;
  }
  unint64_t v15 = 0LL;
  allocator = (const __CFAllocator *)*MEMORY[0x189604DB0];
  do
  {
    if (uuid_is_null(v11->policy_result.netagents[v15].netagent_uuid)) {
      break;
    }
    id v16 = nw_parameters_copy_context(v11->parameters);
    id v244 = 0LL;
    id v208 = nw_path_copy_dictionary_for_agent_with_generation( v16,  v11->policy_result.netagents[v15].netagent_uuid,  v11->policy_result.netagents[v15].generation,  &v244);
    if (!v208) {
      goto LABEL_193;
    }
    uuid_unparse(v11->policy_result.netagents[v15].netagent_uuid, out);
    xpc_dictionary_set_value(v11->network_agent_dictionary, out, v208);
    length[0] = 0LL;
    data = (const char *)xpc_dictionary_get_data(v208, "data", length);
    id v18 = 0LL;
    if (data && length[0] >= 0xD8)
    {
      else {
        id v18 = 0LL;
      }
    }

    if (is_config_agent_type_proxy())
    {
      id v19 = v11;
      config_agent_copy_proxy_information();
      os_log_type_t v20 = (void *)objc_claimAutoreleasedReturnValue();
      if (v20)
      {
        proxy_settings = v11->proxy_settings;
        if (!proxy_settings)
        {
          id v22 = (OS_xpc_object *)xpc_array_create(0LL, 0LL);
          os_log_type_t v23 = v11->proxy_settings;
          v11->proxy_settings = v22;

          proxy_settings = v11->proxy_settings;
        }

        xpc_array_append_value(proxy_settings, v20);
        config_agent_free_proxy_information();
      }
    }

    id v24 = v244;
    if (v244)
    {
      uint64_t proxy_configs = (uint64_t)v11->proxy_configs;
      if (!proxy_configs)
      {
        BOOL v26 = nw_array_create();
        uint64_t v27 = v11->proxy_configs;
        v11->uint64_t proxy_configs = (OS_nw_array *)v26;

        uint64_t proxy_configs = (uint64_t)v11->proxy_configs;
        id v24 = v244;
      }

      nw_array_append(proxy_configs, v24);
      length[0] = 0LL;
      length[1] = 0LL;
      nw_proxy_config_copy_fallback_proxy_agent(v244, length);
      for (unsigned int i = 0; !uuid_is_null((const unsigned __int8 *)length) && i <= 7; ++i)
      {
        id v29 = nw_path_copy_proxy_config_for_agent_uuid( (const unsigned __int8 *)length,  v11->policy_result.netagents[v15].generation,  v16);
        uuid_clear((unsigned __int8 *)length);
        if (v29)
        {
          os_log_type_t v30 = v29;
          v30[171] |= 0x20u;

          nw_array_append((uint64_t)v11->proxy_configs, v30);
          BOOL v31 = v30;
          *(_OWORD *)size_t length = *(_OWORD *)(v31 + 72);
        }
      }
    }

    if (!v18)
    {
      __nwlog_obj();
      __int128 v99 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(length[0]) = 136446210;
      *(size_t *)((char *)length + 4) = (size_t)"nw_agent_has_path_override_info";
      BOOL v196 = length;
      __int128 v100 = (char *)_os_log_send_and_compose_impl();

      LOBYTE(type) = 16;
      LOBYTE(v236) = 0;
      if (__nwlog_fault(v100, &type, &v236))
      {
        if (type == 17)
        {
          __nwlog_obj();
          os_log_type_t v101 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v102 = type;
          if (os_log_type_enabled(v101, (os_log_type_t)type))
          {
            LODWORD(length[0]) = 136446210;
            *(size_t *)((char *)length + 4) = (size_t)"nw_agent_has_path_override_info";
            _os_log_impl(&dword_181A5C000, v101, v102, "%{public}s called with null netagent", (uint8_t *)length, 0xCu);
          }
        }

        else if ((_BYTE)v236)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          os_log_type_t v101 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v104 = type;
          BOOL v105 = os_log_type_enabled(v101, (os_log_type_t)type);
          if (backtrace_string)
          {
            if (v105)
            {
              LODWORD(length[0]) = 136446466;
              *(size_t *)((char *)length + 4) = (size_t)"nw_agent_has_path_override_info";
              WORD2(length[1]) = 2082;
              *(size_t *)((char *)&length[1] + 6) = (size_t)backtrace_string;
              _os_log_impl( &dword_181A5C000,  v101,  v104,  "%{public}s called with null netagent, dumping backtrace:%{public}s",  (uint8_t *)length,  0x16u);
            }

            free(backtrace_string);
            goto LABEL_216;
          }

          if (v105)
          {
            LODWORD(length[0]) = 136446210;
            *(size_t *)((char *)length + 4) = (size_t)"nw_agent_has_path_override_info";
            _os_log_impl( &dword_181A5C000,  v101,  v104,  "%{public}s called with null netagent, no backtrace",  (uint8_t *)length,  0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          os_log_type_t v101 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v106 = type;
          if (os_log_type_enabled(v101, (os_log_type_t)type))
          {
            LODWORD(length[0]) = 136446210;
            *(size_t *)((char *)length + 4) = (size_t)"nw_agent_has_path_override_info";
            _os_log_impl( &dword_181A5C000,  v101,  v106,  "%{public}s called with null netagent, backtrace limit exceeded",  (uint8_t *)length,  0xCu);
          }
        }
      }

void sub_1824569A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, void *a36, uint64_t a37, char a38, uint64_t a39, uint64_t a40, uint64_t a41, char a42, uint64_t a43, uint64_t a44, uint64_t a45, char a46, uint64_t a47, uint64_t a48, uint64_t a49, char a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  _Block_object_dispose(&a38, 8);
  _Block_object_dispose(&a42, 8);
  _Block_object_dispose(&a46, 8);
  _Block_object_dispose(&a50, 8);
  _Block_object_dispose(&a54, 8);
  _Block_object_dispose(&a58, 8);
  _Block_object_dispose(&a62, 8);
  _Block_object_dispose(&a66, 8);
  _Block_object_dispose(&a70, 8);
  _Block_object_dispose(&STACK[0x208], 8);

  _Unwind_Resume(a1);
}

id nw_path_copy_dictionary_for_agent_with_generation( void *a1, const unsigned __int8 *a2, unsigned int a3, id *a4)
{
  uint64_t v73 = *MEMORY[0x1895F89C0];
  id v7 = a1;
  pthread_once(&nw_settings_setup_atfork::pOnce, (void (*)(void))nw_settings_setup_atfork_inner);
  os_log_type_t v53 = v7;
  uint64_t globals_for_path = nw_context_get_globals_for_path(v7);
  os_unfair_lock_lock((os_unfair_lock_t)(globals_for_path + 124));
  if (*(void *)(globals_for_path + 64))
  {
    if (*(void *)(globals_for_path + 72)) {
      goto LABEL_6;
    }
  }

  else
  {
    xpc_object_t v9 = xpc_dictionary_create(0LL, 0LL, 0LL);
    BOOL v10 = *(void **)(globals_for_path + 64);
    *(void *)(globals_for_path + 64) = v9;

    if (*(void *)(globals_for_path + 72)) {
      goto LABEL_6;
    }
  }

  xpc_object_t v11 = xpc_dictionary_create(0LL, 0LL, 0LL);
  nw_parameters_t v12 = *(void **)(globals_for_path + 72);
  *(void *)(globals_for_path + 72) = v11;

LABEL_6:
  lock = (os_unfair_lock_s *)(globals_for_path + 124);
  if (!*(void *)(globals_for_path + 80))
  {
    os_log_type_t v13 = nw_dictionary_create();
    BOOL v14 = *(void **)(globals_for_path + 80);
    *(void *)(globals_for_path + 80) = v13;
  }

  id v15 = *(id *)(globals_for_path + 64);
  xpc_object_t xdict = *(id *)(globals_for_path + 72);
  id v52 = *(id *)(globals_for_path + 80);
  uint64_t v16 = mach_continuous_time();
  if (v16 <= 1) {
    uint64_t v17 = 1LL;
  }
  else {
    uint64_t v17 = v16;
  }
  uuid_unparse(a2, out);
  xpc_dictionary_get_value(v15, out);
  id v18 = (void *)objc_claimAutoreleasedReturnValue();
  id v19 = v18;
  if (a3 == -1 || !v18)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v22 = (os_log_s *)(id)gLogObj;
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_20;
    }
    *(_DWORD *)int buf = 136446722;
    *(void *)&uint8_t buf[4] = "nw_path_copy_dictionary_for_agent_with_generation";
    __int16 v66 = 1042;
    *(_DWORD *)uint64_t v67 = 16;
    *(_WORD *)&v67[4] = 2098;
    *(void *)&v67[6] = a2;
    os_log_type_t v23 = "%{public}s Agent for %{public,uuid_t}.16P cache miss";
    id v24 = v22;
    uint32_t v25 = 28;
LABEL_19:
    _os_log_impl(&dword_181A5C000, v24, OS_LOG_TYPE_DEBUG, v23, buf, v25);
LABEL_20:

    nw_path_shared_necp_fd(v7);
    xpc_object_t v26 = nw_network_agent_copy_dictionary_from_necp();
    if (!v26)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v31 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_path_copy_dictionary_for_agent_with_generation";
        __int16 v66 = 1042;
        *(_DWORD *)uint64_t v67 = 16;
        *(_WORD *)&v67[4] = 2098;
        *(void *)&v67[6] = a2;
        _os_log_impl( &dword_181A5C000,  v31,  OS_LOG_TYPE_ERROR,  "%{public}s Unable to lookup agent %{public,uuid_t}.16P dictionary from necp",  buf,  0x1Cu);
      }

      id v27 = 0LL;
      goto LABEL_42;
    }

    id v27 = v26;
    os_log_type_t type = OS_LOG_TYPE_INFO;
    *(void *)int buf = 0LL;
    data = (unsigned int *)xpc_dictionary_get_data(v26, "data", (size_t *)buf);
    if (!data || *(void *)buf < 0xD8uLL || (id v29 = data, v30 = data[53], *(void *)buf != v30 + 216))
    {
      BOOL v31 = 0LL;
      goto LABEL_33;
    }

    if (!strcmp((const char *)data + 16, "Network"))
    {
      BOOL v31 = 0LL;
      if (!strcmp((const char *)v29 + 48, "Proxy") && (_DWORD)v30)
      {
        os_log_type_t v49 = nw_proxy_config_create_with_agent_data_extended((uint64_t)(v29 + 54), v30, v29, &type);
        BOOL v31 = (os_log_s *)v49;
        if (v49 && type)
        {
          nw_proxy_config_set_generation(v49, a3);
          nw_dictionary_set_value((uint64_t)v52, out, v31);
          id v29 = nw_network_agent_truncate_agent_data_in_dictionary(v27);
        }

        if (a4) {
          objc_storeStrong(a4, v31);
        }
        if (!v29) {
          goto LABEL_33;
        }
      }
    }

    else
    {
      BOOL v31 = 0LL;
    }

    if (!strcmp((const char *)v29 + 16, "Network")
      && !strcmp((const char *)v29 + 48, "Proxy")
      && v29[53]
      && type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      size_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446722;
        *(void *)&uint8_t buf[4] = "nw_path_copy_dictionary_for_agent_with_generation";
        __int16 v66 = 1042;
        *(_DWORD *)uint64_t v67 = 16;
        *(_WORD *)&v67[4] = 2098;
        *(void *)&v67[6] = a2;
        BOOL v33 = "%{public}s Skipping saving agent %{public,uuid_t}.16P to the cache due to incomplete proxy config";
LABEL_35:
        _os_log_impl(&dword_181A5C000, v32, OS_LOG_TYPE_DEBUG, v33, buf, 0x1Cu);
        goto LABEL_36;
      }

      goto LABEL_36;
    }

void sub_182457558( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, void *a23, void *a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, void *a30)
{
  _Unwind_Resume(a1);
}

id nw_path_copy_proxy_config_for_agent_uuid(const unsigned __int8 *a1, unsigned int a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v5 = a3;
  if (!uuid_is_null(a1))
  {
    *(void *)int buf = 0LL;

    id v6 = *(id *)buf;
    goto LABEL_3;
  }

  __nwlog_obj();
  id v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_path_copy_proxy_config_for_agent_uuid";
  xpc_object_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_copy_proxy_config_for_agent_uuid";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null (!uuid_is_null(agent_uuid))", buf, 0xCu);
      }
    }

    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_copy_proxy_config_for_agent_uuid";
          __int16 v19 = 2082;
          os_log_type_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null (!uuid_is_null(agent_uuid)), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v14)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_copy_proxy_config_for_agent_uuid";
        _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null (!uuid_is_null(agent_uuid)), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_copy_proxy_config_for_agent_uuid";
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null (!uuid_is_null(agent_uuid)), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1824578C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL23nw_path_snapshot_agentsP18NWConcrete_nw_path_block_invoke(uint64_t a1, int a2, void *object)
{
  return 1LL;
}

uint64_t ___ZL22nw_path_snapshot_flowsP18NWConcrete_nw_path_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = (void ***)*((void *)v4 + 6);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(v6 + 56);
    if (v7)
    {
      uint64_t v8 = nw_array_create();
      std::vector<nw_object_wrapper_t>::reserve( v8 + 16,  v5[3] - v5[2] + ((uint64_t)(*(void *)(v7 + 24) - *(void *)(v7 + 16)) >> 3));
      std::vector<nw_object_wrapper_t>::__insert_with_size[abi:nn180100]<std::__wrap_iter<nw_object_wrapper_t*>,std::__wrap_iter<nw_object_wrapper_t*>>( (int64_t *)(v8 + 16),  *(void *)(v8 + 16),  *(void ***)(v7 + 16),  *(void ***)(v7 + 24),  (uint64_t)(*(void *)(v7 + 24) - *(void *)(v7 + 16)) >> 3);
      std::vector<nw_object_wrapper_t>::__insert_with_size[abi:nn180100]<std::__wrap_iter<nw_object_wrapper_t*>,std::__wrap_iter<nw_object_wrapper_t*>>( (int64_t *)(v8 + 16),  *(void *)(v8 + 24),  v5[2],  v5[3],  v5[3] - v5[2]);
      uint64_t v9 = *(void *)(a1 + 32);
      BOOL v10 = *(void **)(v9 + 56);
      *(void *)(v9 + 56) = v8;
    }

    else
    {
      os_log_type_t v11 = v5;
      BOOL v10 = *(void **)(v6 + 56);
      *(void *)(v6 + 56) = v11;
    }
  }

  nw_parameters_t v12 = (void ***)*((void *)v4 + 7);
  if (v12)
  {
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void *)(v13 + 64);
    if (v14)
    {
      uint64_t v15 = nw_array_create();
      std::vector<nw_object_wrapper_t>::reserve( v15 + 16,  v12[3] - v12[2] + ((uint64_t)(*(void *)(v14 + 24) - *(void *)(v14 + 16)) >> 3));
      std::vector<nw_object_wrapper_t>::__insert_with_size[abi:nn180100]<std::__wrap_iter<nw_object_wrapper_t*>,std::__wrap_iter<nw_object_wrapper_t*>>( (int64_t *)(v15 + 16),  *(void *)(v15 + 16),  *(void ***)(v14 + 16),  *(void ***)(v14 + 24),  (uint64_t)(*(void *)(v14 + 24) - *(void *)(v14 + 16)) >> 3);
      std::vector<nw_object_wrapper_t>::__insert_with_size[abi:nn180100]<std::__wrap_iter<nw_object_wrapper_t*>,std::__wrap_iter<nw_object_wrapper_t*>>( (int64_t *)(v15 + 16),  *(void *)(v15 + 24),  v12[2],  v12[3],  v12[3] - v12[2]);
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v17 = *(void **)(v16 + 64);
      *(void *)(v16 + 64) = v15;
    }

    else
    {
      id v18 = v12;
      uint64_t v17 = *(void **)(v13 + 64);
      *(void *)(v13 + 64) = v18;
    }
  }

  if (!uuid_is_null((const unsigned __int8 *)v4 + 84))
  {
    id v19 = nw_parameters_copy_context(*(void **)(*(void *)(a1 + 32) + 16LL));
    id v20 = nw_path_copy_dictionary_for_agent_with_generation( v19,  (const unsigned __int8 *)v4 + 84,  *((_DWORD *)v4 + 20),  0LL);
    uint64_t v21 = (void *)*((void *)v4 + 3);
    *((void *)v4 + 3) = v20;
  }

  if (*(_BYTE *)(*(void *)(a1 + 32) + 386LL)) {
    *((_BYTE *)v4 + 186) |= 8u;
  }

  return 1LL;
}

void sub_182457AC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL25nw_path_snapshot_fallbackP18NWConcrete_nw_path_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v4 = a3;
  id v5 = v4;
  *(void *)size_t length = 0LL;
  if (!v4
    || (data = (unsigned int *)xpc_dictionary_get_data(v4, "data", (size_t *)length)) == 0LL
    || *(void *)length < 0xD8uLL
    || (uint64_t v7 = data, *(void *)length != data[53] + 216LL)
    || (data[52] & 2) == 0
    || (nw_path_get_interface_index(*(void **)(a1 + 32)),
        (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = ne_session_agent_get_advisory()) == 0)
    || !*(_DWORD *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL)
    && (!*(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL)
     || !*(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 24LL)))
  {
    uint64_t v9 = 1LL;
    goto LABEL_13;
  }

  uint64_t v8 = calloc(1uLL, 0x10uLL);
  if (v8)
  {
LABEL_9:
    *(void *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 24LL) = v8;
    *(_OWORD *)*(void *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 24LL) = *v7;
    uint64_t v9 = 0LL;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 112) + 8LL) + 24LL) = xpc_dictionary_get_uint64(v5, "generation");
LABEL_13:

    return v9;
  }

  __nwlog_obj();
  os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  *(_DWORD *)size_t length = 136446722;
  *(void *)&length[4] = "strict_calloc";
  __int16 v14 = 2048;
  uint64_t v15 = 1LL;
  __int16 v16 = 2048;
  uint64_t v17 = 16LL;
  nw_parameters_t v12 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v12);
  if (!result)
  {
    free(v12);
    uint64_t v8 = 0LL;
    goto LABEL_9;
  }

  __break(1u);
  return result;
}

void sub_182457D5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_network_is_satisfied_update_reason(NWConcrete_nw_path *a1, BOOL a2)
{
  uint64_t v127 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v9 = v3;
  if (!v3)
  {
    __nwlog_obj();
    BOOL v76 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_network_is_satisfied_update_reason";
    os_log_type_t v77 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v90[0]) = 0;
    if (__nwlog_fault(v77, type, v90))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v78 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v79 = type[0];
        if (os_log_type_enabled(v78, type[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_network_is_satisfied_update_reason";
          _os_log_impl(&dword_181A5C000, v78, v79, "%{public}s called with null path", buf, 0xCu);
        }
      }

      else if (LOBYTE(v90[0]))
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v78 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v81 = type[0];
        BOOL v82 = os_log_type_enabled(v78, type[0]);
        if (backtrace_string)
        {
          if (v82)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_network_is_satisfied_update_reason";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&_BYTE buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v78,  v81,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_141;
        }

        if (v82)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_network_is_satisfied_update_reason";
          _os_log_impl(&dword_181A5C000, v78, v81, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v78 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v83 = type[0];
        if (os_log_type_enabled(v78, type[0]))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_network_is_satisfied_update_reason";
          _os_log_impl( &dword_181A5C000,  v78,  v83,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_1824587E8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v4 - 208), 8);
  _Unwind_Resume(a1);
}

uint64_t nw_path_create_bridged_flow_director(void *a1, _BYTE *a2)
{
  uint64_t v78 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t globals_for_path = nw_context_get_globals_for_path(v3);
    uint64_t v6 = (os_unfair_lock_s *)(globals_for_path + 124);
    os_unfair_lock_lock((os_unfair_lock_t)(globals_for_path + 124));
    id v7 = v4;
    if (globals_for_path)
    {
      if (*(void *)(globals_for_path + 112))
      {
        if (a2) {
          *a2 = 0;
        }
        uint64_t v9 = 1LL;
        goto LABEL_74;
      }

      gotLoadHelper_x8__NEFlowDirectorCreateBridge(v8);
      if (!*(void *)(v10 + 392))
      {
LABEL_73:
        uint64_t v9 = 0LL;
LABEL_74:

        os_unfair_lock_unlock(v6);
        goto LABEL_75;
      }

      int v11 = socket(32, 2, 2);
      int v12 = v11;
      if ((v11 & 0x80000000) == 0)
      {
        unsigned int v71 = 0;
        *(void *)&v72[20] = 0LL;
        int v77 = 0;
        __int128 v75 = 0u;
        __int128 v76 = 0u;
        __int128 v73 = 0u;
        __int128 v74 = 0u;
        strcpy(v72, "com.apple.flow-divert");
        if (ioctl(v11, 0xC0644E03uLL, &v71))
        {
          int v13 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v14 = (id)gLogObj;
          *(_DWORD *)int buf = 136446466;
          BOOL v67 = "nw_path_open_in_process_flow_divert_socket";
          LOWORD(v6_Block_object_dispose(va, 8) = 1024;
          *(_DWORD *)((char *)&v68 + 2) = v13;
          uint64_t v15 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          os_log_type_t v59 = OS_LOG_TYPE_DEFAULT;
          if (__nwlog_fault(v15, type, &v59))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              __int16 v16 = (os_log_s *)(id)gLogObj;
              os_log_type_t v17 = type[0];
              if (os_log_type_enabled(v16, type[0]))
              {
                *(_DWORD *)int buf = 136446466;
                BOOL v67 = "nw_path_open_in_process_flow_divert_socket";
                LOWORD(v6_Block_object_dispose(va, 8) = 1024;
                *(_DWORD *)((char *)&v68 + 2) = v13;
                _os_log_impl( &dword_181A5C000,  v16,  v17,  "%{public}s ioctl(CTLIOCGINFO) failed %{darwin.errno}d",  buf,  0x12u);
              }
            }

            else if (v59)
            {
              backtrace_string = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              __int16 v16 = (os_log_s *)(id)gLogObj;
              os_log_type_t v30 = type[0];
              BOOL v31 = os_log_type_enabled(v16, type[0]);
              if (backtrace_string)
              {
                if (v31)
                {
                  *(_DWORD *)int buf = 136446722;
                  BOOL v67 = "nw_path_open_in_process_flow_divert_socket";
                  LOWORD(v6_Block_object_dispose(va, 8) = 1024;
                  *(_DWORD *)((char *)&v68 + 2) = v13;
                  HIWORD(v6_Block_object_dispose(va, 8) = 2082;
                  uint64_t v69 = backtrace_string;
                  _os_log_impl( &dword_181A5C000,  v16,  v30,  "%{public}s ioctl(CTLIOCGINFO) failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
                }

                free(backtrace_string);
                if (!v15) {
                  goto LABEL_57;
                }
                goto LABEL_56;
              }

              if (v31)
              {
                *(_DWORD *)int buf = 136446466;
                BOOL v67 = "nw_path_open_in_process_flow_divert_socket";
                LOWORD(v6_Block_object_dispose(va, 8) = 1024;
                *(_DWORD *)((char *)&v68 + 2) = v13;
                _os_log_impl( &dword_181A5C000,  v16,  v30,  "%{public}s ioctl(CTLIOCGINFO) failed %{darwin.errno}d, no backtrace",  buf,  0x12u);
              }
            }

            else
            {
              __nwlog_obj();
              __int16 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v40 = type[0];
              if (os_log_type_enabled(v16, type[0]))
              {
                *(_DWORD *)int buf = 136446466;
                BOOL v67 = "nw_path_open_in_process_flow_divert_socket";
                LOWORD(v6_Block_object_dispose(va, 8) = 1024;
                *(_DWORD *)((char *)&v68 + 2) = v13;
                _os_log_impl( &dword_181A5C000,  v16,  v40,  "%{public}s ioctl(CTLIOCGINFO) failed %{darwin.errno}d, backtrace limit exceeded",  buf,  0x12u);
              }
            }
          }

          if (!v15)
          {
LABEL_57:
            close(v12);
            goto LABEL_73;
          }

void sub_182459640(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_path_may_span_multiple_interfaces(void *a1)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  uint64_t v1 = a1;
  char v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    id v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    id v19 = "nw_path_may_span_multiple_interfaces";
    double v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v8, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)int buf = 136446210;
          id v19 = "nw_path_may_span_multiple_interfaces";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null path", buf, 0xCu);
        }
      }

      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)int buf = 136446466;
            id v19 = "nw_path_may_span_multiple_interfaces";
            __int16 v20 = 2082;
            id v21 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }

        if (v13)
        {
          *(_DWORD *)int buf = 136446210;
          id v19 = "nw_path_may_span_multiple_interfaces";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)int buf = 136446210;
          id v19 = "nw_path_may_span_multiple_interfaces";
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_182459934(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL29nw_path_allowed_by_parametersP18NWConcrete_nw_pathb_block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  unsigned int value = xpc_uint64_get_value(v4);
  uint64_t v11 = *(void *)(a1 + 32);
  if (*(void *)(v11 + 96) && *(_DWORD *)(a1 + 48) == value || *(void *)(v11 + 104) && *(_DWORD *)(a1 + 52) == value)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
    if (*(_BYTE *)(a1 + 56))
    {
      if (value > 4) {
        os_log_type_t v12 = "unknown";
      }
      else {
        os_log_type_t v12 = off_189BC9540[value];
      }
      nw_path_set_reason( *(void **)(a1 + 32),  6,  "Interface type '%s' is prohibited by parameters",  v6,  v7,  v8,  v9,  v10,  (char)v12);
    }

    uint64_t v13 = 0LL;
  }

  else
  {
    uint64_t v13 = 1LL;
  }

  return v13;
}

void sub_182459A04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL29nw_path_allowed_by_parametersP18NWConcrete_nw_pathb_block_invoke_2( uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  int value = xpc_uint64_get_value(v4);
  if (*(_DWORD *)(a1 + 48) == value || *(_DWORD *)(a1 + 52) == value)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
    if (!*(_BYTE *)(a1 + 56))
    {
LABEL_18:
      uint64_t v12 = 0LL;
      goto LABEL_19;
    }

    if (value <= 1001)
    {
      if (!value)
      {
        uint64_t v11 = "other";
        goto LABEL_17;
      }

      if (value == 1001)
      {
        uint64_t v11 = "wifi_infrastructure";
        goto LABEL_17;
      }
    }

    else
    {
      switch(value)
      {
        case 1002:
          uint64_t v11 = "wifi_awdl";
          goto LABEL_17;
        case 4001:
          uint64_t v11 = "coprocessor";
          goto LABEL_17;
        case 5001:
          uint64_t v11 = "companion";
LABEL_17:
          nw_path_set_reason( *(void **)(a1 + 32),  6,  "Interface subtype '%s' is prohibited by parameters",  v6,  v7,  v8,  v9,  v10,  (char)v11);
          goto LABEL_18;
      }
    }

    uint64_t v11 = "unknown";
    goto LABEL_17;
  }

  uint64_t v12 = 1LL;
LABEL_19:

  return v12;
}

void sub_182459B10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL29nw_path_allowed_by_parametersP18NWConcrete_nw_pathb_block_invoke_3( uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = nw_interface_create_from_dictionary(a3);
  if (v4
    && (nw_interface_shallow_compare(*(void **)(*(void *)(a1 + 32) + 96LL), v4)
     || nw_interface_shallow_compare(*(void **)(*(void *)(a1 + 32) + 104LL), v4)))
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
    if (*(_BYTE *)(a1 + 48)) {
      nw_path_set_reason( *(void **)(a1 + 32),  8,  "Interface %s[%u] is prohibited by parameters",  v5,  v6,  v7,  v8,  v9,  (_BYTE)v4 + 104);
    }
    uint64_t v10 = 0LL;
  }

  else
  {
    uint64_t v10 = 1LL;
  }

  return v10;
}

void sub_182459BC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_is_roaming(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  char v2 = v1;
  if (v1)
  {
    if ((*((_BYTE *)v1 + 475) & 0x20) != 0)
    {
      BOOL v4 = 1LL;
    }

    else
    {
      *(void *)int buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      char v18 = 0;
      nw_endpoint_t v3 = (void *)*((void *)v1 + 28);
      if (v3)
      {
        applier[0] = MEMORY[0x1895F87A8];
        applier[1] = 3221225472LL;
        applier[2] = __nw_path_is_roaming_block_invoke;
        applier[3] = &unk_189BC71C0;
        void applier[4] = buf;
        xpc_dictionary_apply(v3, applier);
        BOOL v4 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
      }

      else
      {
        BOOL v4 = 0LL;
      }

      _Block_object_dispose(buf, 8);
    }

    goto LABEL_8;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_path_is_roaming";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v7, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_is_roaming";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_is_roaming";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&_BYTE buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }

      if (v12)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_is_roaming";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_is_roaming";
        _os_log_impl(&dword_181A5C000, v8, v13, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

void sub_182459EEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL29nw_path_allowed_by_parametersP18NWConcrete_nw_pathb_block_invoke_4( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  id v4 = a3;
  bytes = xpc_uuid_get_bytes(v4);
  uuid_unparse(bytes, out);
  uint64_t v6 = *(void **)(*(void *)(a1 + 32) + 224LL);
  if (v6)
  {
    xpc_dictionary_get_value(v6, out);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v8 = v7;
    if (v7)
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
      if (!*(_BYTE *)(a1 + 48))
      {
LABEL_30:
        uint64_t v17 = 0LL;
        goto LABEL_31;
      }

      xpc_object_t v26 = 0LL;
      *(void *)size_t length = 0LL;
      data = (const unsigned __int8 *)xpc_dictionary_get_data(v7, "data", (size_t *)length);
      if (data)
      {
        if (*(void *)length >= 0xD8uLL)
        {
          uint64_t v10 = data;
          if (*(void *)length == *((unsigned int *)data + 53) + 216LL)
          {
            uuid_unparse_upper(data, length);
            asprintf( &v26,  "Network Agent [domain: %s, type: %s, description: %s, uuid: %s, flags: %x]",  (const char *)v10 + 16,  (const char *)v10 + 48,  (const char *)v10 + 80,  length,  *((_DWORD *)v10 + 52));
            char v16 = *(void **)(a1 + 32);
            if (v26)
            {
              nw_path_set_reason(v16, 10, "%s is prohibited by parameters", v11, v12, v13, v14, v15, (char)v26);
              if (v26) {
                free(v26);
              }
              goto LABEL_30;
            }

            goto LABEL_29;
          }
        }
      }

      __nwlog_obj();
      *(_DWORD *)size_t length = 136446210;
      *(void *)&length[4] = "nw_network_agent_copy_full_description";
      id v25 = length;
      char v18 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v27 = 0;
      if (__nwlog_fault(v18, &type, &v27))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v19 = (os_log_s *)__nwlog_obj();
          os_log_type_t v20 = type;
          if (os_log_type_enabled(v19, type))
          {
            *(_DWORD *)size_t length = 136446210;
            *(void *)&length[4] = "nw_network_agent_copy_full_description";
            id v21 = "%{public}s called with null agent";
LABEL_25:
            _os_log_impl(&dword_181A5C000, v19, v20, v21, length, 0xCu);
          }
        }

        else if (v27)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          uint64_t v19 = (os_log_s *)__nwlog_obj();
          os_log_type_t v20 = type;
          BOOL v23 = os_log_type_enabled(v19, type);
          if (backtrace_string)
          {
            if (v23)
            {
              *(_DWORD *)size_t length = 136446466;
              *(void *)&length[4] = "nw_network_agent_copy_full_description";
              __int16 v31 = 2082;
              size_t v32 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v19,  v20,  "%{public}s called with null agent, dumping backtrace:%{public}s",  length,  0x16u);
            }

            free(backtrace_string);
            goto LABEL_26;
          }

          if (v23)
          {
            *(_DWORD *)size_t length = 136446210;
            *(void *)&length[4] = "nw_network_agent_copy_full_description";
            id v21 = "%{public}s called with null agent, no backtrace";
            goto LABEL_25;
          }
        }

        else
        {
          uint64_t v19 = (os_log_s *)__nwlog_obj();
          os_log_type_t v20 = type;
          if (os_log_type_enabled(v19, type))
          {
            *(_DWORD *)size_t length = 136446210;
            *(void *)&length[4] = "nw_network_agent_copy_full_description";
            id v21 = "%{public}s called with null agent, backtrace limit exceeded";
            goto LABEL_25;
          }
        }
      }

void sub_18245A24C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL29nw_path_allowed_by_parametersP18NWConcrete_nw_pathb_block_invoke_5( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v4 = a3;
  bytes = xpc_uuid_get_bytes(v4);
  uuid_unparse(bytes, out);
  uint64_t v11 = *(void **)(*(void *)(a1 + 32) + 224LL);
  if (!v11
    || (xpc_dictionary_get_value(v11, out),
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(),
        BOOL v13 = v12 == 0LL,
        v12,
        v13))
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
    if (*(_BYTE *)(a1 + 48)) {
      nw_path_set_reason( *(void **)(a1 + 32),  11,  "Missing network agent uuid:%s required by parameters",  v6,  v7,  v8,  v9,  v10,  (char)out);
    }
    uint64_t v14 = 0LL;
  }

  else
  {
    uint64_t v14 = 1LL;
  }

  return v14;
}

void sub_18245A34C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL29nw_path_allowed_by_parametersP18NWConcrete_nw_pathb_block_invoke_6( uint64_t a1, size_t a2, void *a3)
{
  id v5 = a3;
  string_ptr = xpc_string_get_string_ptr(v5);
  string = xpc_array_get_string(*(xpc_object_t *)(a1 + 32), a2);
  uint64_t v18 = 0LL;
  uint64_t v19 = &v18;
  uint64_t v20 = 0x2020000000LL;
  char v21 = 0;
  uint64_t v8 = *(void **)(a1 + 40);
  uint64_t v9 = (void *)v8[28];
  if (!v9) {
    goto LABEL_4;
  }
  applier[0] = MEMORY[0x1895F87A8];
  applier[1] = 3221225472LL;
  applier[2] = ___ZL29nw_path_allowed_by_parametersP18NWConcrete_nw_pathb_block_invoke_7;
  applier[3] = &unk_189BC5420;
  uint64_t v15 = string_ptr;
  char v16 = string;
  uint64_t v14 = &v18;
  char v17 = *(_BYTE *)(a1 + 56);
  BOOL v13 = v8;
  xpc_dictionary_apply(v9, applier);

  if (*((_BYTE *)v19 + 24))
  {
    uint64_t v10 = 0LL;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0;
  }

  else
  {
LABEL_4:
    uint64_t v10 = 1LL;
  }

  _Block_object_dispose(&v18, 8);

  return v10;
}

void sub_18245A464( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Block_object_dispose((const void *)(v15 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL29nw_path_allowed_by_parametersP18NWConcrete_nw_pathb_block_invoke_8( uint64_t a1, size_t a2, void *a3)
{
  id v5 = a3;
  string_ptr = xpc_string_get_string_ptr(v5);
  string = xpc_array_get_string(*(xpc_object_t *)(a1 + 32), a2);
  uint64_t v17 = 0LL;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2020000000LL;
  char v20 = 0;
  BOOL v13 = *(void **)(*(void *)(a1 + 40) + 224LL);
  if (!v13) {
    goto LABEL_4;
  }
  applier[0] = MEMORY[0x1895F87A8];
  applier[1] = 3221225472LL;
  applier[2] = ___ZL29nw_path_allowed_by_parametersP18NWConcrete_nw_pathb_block_invoke_9;
  applier[3] = &unk_189BC5470;
  void applier[5] = string_ptr;
  void applier[6] = string;
  void applier[4] = &v17;
  xpc_dictionary_apply(v13, applier);
  if (*((_BYTE *)v18 + 24))
  {
    uint64_t v14 = 1LL;
  }

  else
  {
LABEL_4:
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0;
    if (*(_BYTE *)(a1 + 56)) {
      nw_path_set_reason( *(void **)(a1 + 40),  11,  "Missing network agent domain:%s, type:%s required by parameters",  v7,  v8,  v9,  v10,  v11,  (char)string_ptr);
    }
    uint64_t v14 = 0LL;
  }

  _Block_object_dispose(&v17, 8);

  return v14;
}

void sub_18245A59C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL29nw_path_allowed_by_parametersP18NWConcrete_nw_pathb_block_invoke_9( void *a1, int a2, xpc_object_t xdict)
{
  size_t length = 0LL;
  if (!xdict) {
    return 1LL;
  }
  data = (const char *)xpc_dictionary_get_data(xdict, "data", &length);
  if (!data) {
    return 1LL;
  }
  if (length < 0xD8) {
    return 1LL;
  }
  id v5 = data;
  uint64_t v6 = (const char *)a1[5];
  if (v6)
  {
    if (*v6 && strncmp(v6, v5 + 16, 0x20uLL)) {
      return 1LL;
    }
  }

  uint64_t v7 = (const char *)a1[6];
  if (v7)
  {
    if (*v7 && strncmp(v7, v5 + 48, 0x20uLL)) {
      return 1LL;
    }
  }

  uint64_t result = 0LL;
  *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) = 1;
  return result;
}

uint64_t ___ZL29nw_path_allowed_by_parametersP18NWConcrete_nw_pathb_block_invoke_7( uint64_t a1, int a2, xpc_object_t xdict)
{
  length[5] = *MEMORY[0x1895F89C0];
  length[0] = 0LL;
  if (!xdict) {
    return 1LL;
  }
  data = (const char *)xpc_dictionary_get_data(xdict, "data", length);
  if (!data) {
    return 1LL;
  }
  if (length[0] < 0xD8) {
    return 1LL;
  }
  id v5 = data;
  uint64_t v6 = *(const char **)(a1 + 48);
  if (v6)
  {
    if (*v6 && strncmp(v6, v5 + 16, 0x20uLL)) {
      return 1LL;
    }
  }

  uint64_t v7 = *(const char **)(a1 + 56);
  if (v7)
  {
    if (*v7 && strncmp(v7, v5 + 48, 0x20uLL)) {
      return 1LL;
    }
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v15 = 0LL;
    uuid_unparse_upper((const unsigned __int8 *)v5, (char *)length);
    asprintf( &v15,  "Network Agent [domain: %s, type: %s, description: %s, uuid: %s, flags: %x]",  v5 + 16,  v5 + 48,  v5 + 80,  (const char *)length,  *((_DWORD *)v5 + 52));
    uint64_t v14 = *(void **)(a1 + 32);
    if (v15)
    {
      nw_path_set_reason( v14,  10,  "%s is prohibited by parameters domain:%s, type:%s",  v9,  v10,  v11,  v12,  v13,  (char)v15);
      if (v15) {
        free(v15);
      }
    }

    else
    {
      nw_path_set_reason( v14,  10,  "Unknown network agent is prohibited by parameters domain:%s, type:%s",  v9,  v10,  v11,  v12,  v13,  *(void *)(a1 + 48));
    }
  }

  return 0LL;
}

uint64_t __nw_path_is_roaming_block_invoke(uint64_t a1, int a2, xpc_object_t xdict)
{
  size_t length = 0LL;
  if (!xdict) {
    return 1LL;
  }
  data = (const char *)xpc_dictionary_get_data(xdict, "data", &length);
  if (!data) {
    return 1LL;
  }
  if (length < 0xD8) {
    return 1LL;
  }
  id v5 = data;
  uint64_t v6 = *((unsigned int *)data + 53);
  if (length != v6 + 216 || (data[208] & 2) == 0) {
    return 1LL;
  }
  int v8 = strncmp(data + 16, "Cellular", 0x20uLL);
  uint64_t result = 1LL;
  if (!v8 && v6 >= 4 && !v5[217] && v5[216] == 5)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
    return 0LL;
  }

  return result;
}

void ___ZL36nw_path_is_ultra_constrained_allowedv_block_invoke()
{
  id v0 = (void *)nw_utilities_copy_local_entitlement_value("com.apple.private.network.ultraconstrained");
  id v1 = v0;
  if (v0)
  {
    xpc_object_t xBOOL = v0;
    Class Class = object_getClass(v0);
    id v1 = xBOOL;
    if (Class == (Class)MEMORY[0x1895F9228])
    {
      BOOL value = xpc_BOOL_get_value(xBOOL);
      id v1 = xBOOL;
      if (value) {
        nw_path_is_ultra_constrained_allowed(void)::is_allowed = 1;
      }
    }
  }
}

void sub_18245A954( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t ___ZL49nw_path_copy_dictionary_for_agent_with_generationPU24objcproto13OS_nw_context8NSObjectPhjPU8__strongPU29objcproto18OS_nw_proxy_configS__block_invoke( uint64_t a1, const char *a2)
{
  uint64_t uint64 = xpc_dictionary_get_uint64(*(xpc_object_t *)(a1 + 32), a2);
  return 1LL;
}

uint64_t ___ZL49nw_path_copy_dictionary_for_agent_with_generationPU24objcproto13OS_nw_context8NSObjectPhjPU8__strongPU29objcproto18OS_nw_proxy_configS__block_invoke_2( uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  string_ptr = xpc_string_get_string_ptr(v4);
  if (string_ptr)
  {
    xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 32), string_ptr, 0LL);
    xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 40), string_ptr, 0LL);
    nw_dictionary_set_value(*(void *)(a1 + 48), string_ptr, 0LL);
  }

  return 1LL;
}

void sub_18245AA2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_path_copy_interface_with_generation_block_invoke(uint64_t a1, const char *a2)
{
  uint64_t uint64 = xpc_dictionary_get_uint64(*(xpc_object_t *)(a1 + 32), a2);
  return 1LL;
}

uint64_t __nw_path_copy_interface_with_generation_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  string_ptr = xpc_string_get_string_ptr(v4);
  if (string_ptr)
  {
    nw_dictionary_set_value(*(void *)(a1 + 32), string_ptr, 0LL);
    xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 40), string_ptr, 0LL);
  }

  return 1LL;
}

void sub_18245AAF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_path_evaluator *nw_path_create_evaluator_for_group(void *a1, void *a2)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  id v4 = a1;
  id v5 = a2;
  if (v4)
  {
    uint64_t v6 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_path_evaluator);
    uint64_t v7 = v6;
    if (v6)
    {
      objc_storeStrong((id *)v6 + 3, a1);
      if (v5) {
        nw_parameters_t v8 = (nw_parameters_t)v5;
      }
      else {
        nw_parameters_t v8 = nw_parameters_create();
      }
      uint64_t v13 = (void *)*((void *)v7 + 1);
      *((void *)v7 + 1) = v8;

      if ((nw_path_evaluator_evaluate(v7, 0LL) & 1) != 0)
      {
        uint64_t v14 = v7;
LABEL_44:

        goto LABEL_45;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v15 = (id)gLogObj;
      *(_DWORD *)int buf = 136446210;
      double v36 = "nw_path_create_evaluator_for_group";
      uint64_t v10 = (void *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v33 = 0;
      if (!__nwlog_fault((const char *)v10, &type, &v33))
      {
LABEL_41:
        if (!v10)
        {
LABEL_43:
          uint64_t v14 = 0LL;
          goto LABEL_44;
        }

void sub_18245B2BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_path_evaluator *nw_path_create_evaluator_for_browse(void *a1, void *a2)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  id v4 = a1;
  id v5 = a2;
  if (!v4)
  {
    __nwlog_obj();
    char v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    double v36 = "nw_path_create_evaluator_for_browse";
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (__nwlog_fault(v10, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)int buf = 136446210;
          double v36 = "nw_path_create_evaluator_for_browse";
          _os_log_impl(&dword_181A5C000, v11, v28, "%{public}s called with null browse_descriptor", buf, 0xCu);
        }

void sub_18245BA98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_path_evaluator *nw_path_create_evaluator_for_listener(void *a1, int *a2)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  id v4 = a1;
  if (!v4)
  {
    __nwlog_obj();
    os_log_type_t v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v30 = "nw_path_create_evaluator_for_listener";
    id v14 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault((const char *)v14, &type, &v27))
    {
LABEL_30:
      if (!v14)
      {
LABEL_32:
        os_log_type_t v12 = 0LL;
        goto LABEL_33;
      }

void sub_18245C0B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_path_evaluator *nw_path_create_evaluator_for_advertise(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v4 = a1;
  id v5 = a2;
  if (!v4)
  {
    __nwlog_obj();
    BOOL v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v28 = "nw_path_create_evaluator_for_advertise";
    id v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v9, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v28 = "nw_path_create_evaluator_for_advertise";
          _os_log_impl(&dword_181A5C000, v10, v20, "%{public}s called with null advertise_descriptor", buf, 0xCu);
        }

void sub_18245C6A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_path_evaluator *nw_path_create_evaluator_for_custom_ether(void *a1, __int16 a2)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v4 = a1;
  if (!v4)
  {
    __nwlog_obj();
    os_log_type_t v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v26 = "nw_path_create_evaluator_for_custom_ether";
    id v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v9, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v26 = "nw_path_create_evaluator_for_custom_ether";
          _os_log_impl(&dword_181A5C000, v10, v18, "%{public}s called with null parameters", buf, 0xCu);
        }

void sub_18245CC60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_path_evaluator *nw_path_create_evaluator_for_all_custom_ether_interfaces(void *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v2 = a1;
  if (!v2)
  {
    __nwlog_obj();
    os_log_type_t v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v24 = "nw_path_create_evaluator_for_all_custom_ether_interfaces";
    nw_parameters_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v7, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v24 = "nw_path_create_evaluator_for_all_custom_ether_interfaces";
          _os_log_impl(&dword_181A5C000, v8, v16, "%{public}s called with null parameters", buf, 0xCu);
        }

void sub_18245D21C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_path_evaluator *nw_path_create_evaluator_for_custom_ip(void *a1, char a2)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v4 = a1;
  if (!v4)
  {
    __nwlog_obj();
    os_log_type_t v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v26 = "nw_path_create_evaluator_for_custom_ip";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (__nwlog_fault(v9, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v26 = "nw_path_create_evaluator_for_custom_ip";
          _os_log_impl(&dword_181A5C000, v10, v18, "%{public}s called with null parameters", buf, 0xCu);
        }

void sub_18245D7D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_path_evaluator *nw_path_create_evaluator_for_interpose(void *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v2 = a1;
  if (!v2)
  {
    __nwlog_obj();
    os_log_type_t v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v24 = "nw_path_create_evaluator_for_interpose";
    nw_parameters_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v7, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v24 = "nw_path_create_evaluator_for_interpose";
          _os_log_impl(&dword_181A5C000, v8, v16, "%{public}s called with null parameters", buf, 0xCu);
        }

void sub_18245DD88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_path_evaluator *nw_path_create_evaluator_for_client_id(const unsigned __int8 *a1, void *a2)
{
  uint64_t v85 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v54 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v81 = "nw_path_create_evaluator_for_client_id";
    BOOL v55 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v84) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v56 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v57 = type[0];
      if (os_log_type_enabled(v56, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v81 = "nw_path_create_evaluator_for_client_id";
        _os_log_impl(&dword_181A5C000, v56, v57, "%{public}s called with null context", buf, 0xCu);
      }
    }

    else if ((_BYTE)v84)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v56 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v61 = type[0];
      BOOL v62 = os_log_type_enabled(v56, type[0]);
      if (backtrace_string)
      {
        if (v62)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v81 = "nw_path_create_evaluator_for_client_id";
          __int16 v82 = 2082;
          v83[0] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v56,  v61,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v55) {
          goto LABEL_149;
        }
        goto LABEL_148;
      }

      if (v62)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v81 = "nw_path_create_evaluator_for_client_id";
        _os_log_impl(&dword_181A5C000, v56, v61, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v56 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v66 = type[0];
      if (os_log_type_enabled(v56, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v81 = "nw_path_create_evaluator_for_client_id";
        _os_log_impl( &dword_181A5C000,  v56,  v66,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_146;
  }

  if (uuid_is_null(a1))
  {
    __nwlog_obj();
    char v58 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v81 = "nw_path_create_evaluator_for_client_id";
    BOOL v55 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v84) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v56 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v59 = type[0];
      if (os_log_type_enabled(v56, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v81 = "nw_path_create_evaluator_for_client_id";
        _os_log_impl(&dword_181A5C000, v56, v59, "%{public}s called with null !uuid_is_null(client_id)", buf, 0xCu);
      }
    }

    else if ((_BYTE)v84)
    {
      int v63 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v56 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v64 = type[0];
      BOOL v65 = os_log_type_enabled(v56, type[0]);
      if (v63)
      {
        if (v65)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v81 = "nw_path_create_evaluator_for_client_id";
          __int16 v82 = 2082;
          v83[0] = v63;
          _os_log_impl( &dword_181A5C000,  v56,  v64,  "%{public}s called with null !uuid_is_null(client_id), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v63);
LABEL_147:
        if (!v55)
        {
LABEL_149:
          os_log_type_t v18 = 0LL;
          goto LABEL_93;
        }

void sub_18245F0DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_path_evaluator *nw_path_create_default_evaluator()
{
  return nw_path_create_evaluator_for_endpoint(0LL, 0LL);
}

void nw_path_libinfo_path_check(const char *a1, const char *a2)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  pthread_once(&nw_settings_setup_atfork::pOnce, (void (*)(void))nw_settings_setup_atfork_inner);
  if (sNWIsBetweenForkAndExec != 1 || (sNWParentAllowedDispatch & 1) == 0)
  {
    if ((sNWDispatchAllowedNow & 1) != 0)
    {
      int v4 = 1;
      if (!a1) {
        return;
      }
    }

    else if ((_dispatch_is_fork_of_multithreaded_parent() & 1) == 0 && (_dispatch_is_multithreaded() & 1) != 0 {
           || (getpid(), sandbox_check() == 1))
    }
    {
      int v4 = 1;
      sNWDispatchAllowedNow = 1;
      if (!a1) {
        return;
      }
    }

    else
    {
      int v4 = sNWDispatchAllowedNow;
      if (!a1) {
        return;
      }
    }

    if (v4)
    {
      if (a2) {
        nw_parameters_t v5 = a2;
      }
      else {
        nw_parameters_t v5 = "0";
      }
      *(_WORD *)int buf = 0;
      if ((nw_utilities_port_for_string(v5, buf) & 1) != 0)
      {
        BOOL host_with_numeric_port = nw_endpoint_create_host_with_numeric_port(a1, bswap32(*(unsigned __int16 *)buf) >> 16);
        if (host_with_numeric_port)
        {
          legacy_tcp_socket = nw_parameters_create_legacy_tcp_socket(&__block_literal_global_91);
          evaluator_for_endpoint = nw_path_create_evaluator_for_endpoint( (void *)host_with_numeric_port,  legacy_tcp_socket);
          os_log_type_t v9 = evaluator_for_endpoint;
          if (evaluator_for_endpoint)
          {
            id v10 = nw_parameters_copy_context(*((void **)evaluator_for_endpoint + 1));
            nw_path_watch_necp_changes(v10);
            os_unfair_lock_lock((os_unfair_lock_t)v9 + 24);
            if ((*((_BYTE *)v9 + 107) & 0x40) != 0 && (!v10 || v10[31] != 4))
            {
              if (__nwlog_path_log::onceToken[0] != -1) {
                dispatch_once(__nwlog_path_log::onceToken, &__block_literal_global_39_44346);
              }
              os_log_type_t v11 = (os_log_s *)(id)gpathLogObj;
              if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
              {
                logging_description = nw_endpoint_get_logging_description(*((void **)v9 + 2));
                uint64_t v13 = *((void *)v9 + 1);
                uint64_t v14 = *((void *)v9 + 6);
                *(_DWORD *)int buf = 136447490;
                int v26 = "nw_path_libinfo_path_check";
                __int16 v27 = 1042;
                *(_DWORD *)os_log_type_t v28 = 16;
                *(_WORD *)&v28[4] = 2098;
                *(void *)&v28[6] = (char *)v9 + 80;
                __int16 v29 = 2082;
                os_log_type_t v30 = logging_description;
                __int16 v31 = 2112;
                uint64_t v32 = v13;
                __int16 v33 = 2112;
                uint64_t v34 = v14;
                _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_DEFAULT,  "%{public}s [%{public,uuid_t}.16P %{public}s %@]\n\tlibinfo check path: %@",  buf,  0x3Au);
              }
            }

            os_unfair_lock_unlock((os_unfair_lock_t)v9 + 24);
          }

          goto LABEL_37;
        }
      }

      __nwlog_obj();
      nw_parameters_t v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)int buf = 136446210;
      int v26 = "nw_path_libinfo_path_check";
      nw_parameters_t v16 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v23 = 0;
      if (__nwlog_fault(v16, &type, &v23))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          char v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v18 = type;
          if (os_log_type_enabled(v17, type))
          {
            *(_DWORD *)int buf = 136446210;
            int v26 = "nw_path_libinfo_path_check";
            _os_log_impl(&dword_181A5C000, v17, v18, "%{public}s called with null endpoint", buf, 0xCu);
          }
        }

        else if (v23)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          char v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v20 = type;
          BOOL v21 = os_log_type_enabled(v17, type);
          if (backtrace_string)
          {
            if (v21)
            {
              *(_DWORD *)int buf = 136446466;
              int v26 = "nw_path_libinfo_path_check";
              __int16 v27 = 2082;
              *(void *)os_log_type_t v28 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v17,  v20,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(backtrace_string);
            if (!v16) {
              goto LABEL_36;
            }
            goto LABEL_35;
          }

          if (v21)
          {
            *(_DWORD *)int buf = 136446210;
            int v26 = "nw_path_libinfo_path_check";
            _os_log_impl(&dword_181A5C000, v17, v20, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          char v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v22 = type;
          if (os_log_type_enabled(v17, type))
          {
            *(_DWORD *)int buf = 136446210;
            int v26 = "nw_path_libinfo_path_check";
            _os_log_impl( &dword_181A5C000,  v17,  v22,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

      if (!v16)
      {
LABEL_36:
        BOOL host_with_numeric_port = 0LL;
LABEL_37:

        return;
      }

void sub_18245F5D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_path_watch_necp_changes(void *a1)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (v1)
  {
    pthread_once(&nw_settings_setup_atfork::pOnce, (void (*)(void))nw_settings_setup_atfork_inner);
    uint64_t globals_for_path = nw_context_get_globals_for_path(v1);
    id v3 = (os_unfair_lock_s *)(globals_for_path + 124);
    os_unfair_lock_lock((os_unfair_lock_t)(globals_for_path + 124));
    int v4 = nw_path_shared_necp_fd(v1);
    pthread_once(&nw_settings_setup_atfork::pOnce, (void (*)(void))nw_settings_setup_atfork_inner);
    if (sNWIsBetweenForkAndExec == 1 && (sNWParentAllowedDispatch & 1) != 0) {
      goto LABEL_33;
    }
    if ((sNWDispatchAllowedNow & 1) == 0)
    {
      if ((_dispatch_is_fork_of_multithreaded_parent() & 1) == 0 && (_dispatch_is_multithreaded() & 1) != 0
        || (getpid(), sandbox_check() == 1))
      {
        sNWDispatchAllowedNow = 1;
      }

      else if (!sNWDispatchAllowedNow)
      {
LABEL_33:
        os_unfair_lock_unlock(v3);
        goto LABEL_34;
      }
    }

    if (v4 == -1 || *(void *)(globals_for_path + 56)) {
      goto LABEL_33;
    }
    v23[0] = MEMORY[0x1895F87A8];
    v23[1] = 3221225472LL;
    v23[2] = ___ZL26nw_path_watch_necp_changesPU24objcproto13OS_nw_context8NSObject_block_invoke;
    v23[3] = &unk_189BC93A0;
    id v24 = v1;
    BOOL source = nw_queue_context_create_source(v24, v4, 1, 0, v23, 0LL);
    *(void *)(globals_for_path + 56) = source;
    if (source)
    {
      nw_queue_activate_source(source, v6);
LABEL_32:

      goto LABEL_33;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = (id)gLogObj;
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v28 = "nw_path_watch_necp_changes";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v8, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v9 = (os_log_s *)(id)gLogObj;
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v28 = "nw_path_watch_necp_changes";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s nw_queue_context_create_source failed", buf, 0xCu);
        }
      }

      else if (v25)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v28 = "nw_path_watch_necp_changes";
            __int16 v29 = 2082;
            os_log_type_t v30 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s nw_queue_context_create_source failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_30;
        }

        if (v13)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v28 = "nw_path_watch_necp_changes";
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s nw_queue_context_create_source failed, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v28 = "nw_path_watch_necp_changes";
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s nw_queue_context_create_source failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_18245FC0C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void ___ZL26nw_path_watch_necp_changesPU24objcproto13OS_nw_context8NSObject_block_invoke(uint64_t a1)
{
  uint64_t globals_for_path = (os_unfair_lock_s *)nw_context_get_globals_for_path(*(void **)(a1 + 32));
  id v3 = globals_for_path + 31;
  os_unfair_lock_lock(globals_for_path + 31);
  LODWORD(globals_for_path) = globals_for_path[32];
  os_unfair_lock_unlock(v3);
  nw_path_necp_check_for_updates(*(void **)(a1 + 32), 0LL, globals_for_path);
}

void nw_path_necp_check_for_updates(void *a1, _OWORD *a2, unsigned int a3)
{
  uint64_t v156 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  pthread_once(&nw_settings_setup_atfork::pOnce, (void (*)(void))nw_settings_setup_atfork_inner);
  id v141 = v5;
  unsigned int v137 = a3;
  size_t __size = (a3 << 9) + 1024;
  BOOL globals_for_path = nw_context_get_globals_for_path(v5);
  lock = (os_unfair_lock_s *)(globals_for_path + 124);
  os_log_type_t v139 = a2;
  if (!a2) {
    goto LABEL_3;
  }
  *(_OWORD *)uuid_t uu = *a2;
  while (1)
  {
    bzero(v150, 0xC00uLL);
    nw_path_shared_necp_fd(v141);
    unsigned int v6 = necp_client_action();
    id v7 = 0LL;
    id v8 = v150;
    if ((int)v6 > 0)
    {
LABEL_20:
      BOOL v142 = v7;
      unint64_t v13 = v6;
      if (v6 < 5)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v14 = (id)gLogObj;
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_path_parse_necp_client_id";
        *(_WORD *)&_BYTE buf[12] = 2048;
        *(void *)&_BYTE buf[14] = v6;
        nw_parameters_t v15 = (void *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v148 = 0;
        if (__nwlog_fault((const char *)v15, &type, &v148))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            nw_parameters_t v16 = (os_log_s *)(id)gLogObj;
            os_log_type_t v17 = type;
            if (os_log_type_enabled(v16, type))
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_path_parse_necp_client_id";
              *(_WORD *)&_BYTE buf[12] = 2048;
              *(void *)&_BYTE buf[14] = v6;
              _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s NECP buffer too short %zu", buf, 0x16u);
            }
          }

          else if (v148)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            nw_parameters_t v16 = (os_log_s *)(id)gLogObj;
            os_log_type_t v41 = type;
            BOOL v42 = os_log_type_enabled(v16, type);
            if (backtrace_string)
            {
              if (v42)
              {
                *(_DWORD *)int buf = 136446722;
                *(void *)&uint8_t buf[4] = "nw_path_parse_necp_client_id";
                *(_WORD *)&_BYTE buf[12] = 2048;
                *(void *)&_BYTE buf[14] = v6;
                *(_WORD *)&buf[22] = 2082;
                uint64_t v153 = (uint64_t)backtrace_string;
                _os_log_impl( &dword_181A5C000,  v16,  v41,  "%{public}s NECP buffer too short %zu, dumping backtrace:%{public}s",  buf,  0x20u);
              }

              free(backtrace_string);
              if (!v15)
              {
LABEL_104:
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                id v54 = (id)gLogObj;
                *(_DWORD *)int buf = 136446466;
                *(void *)&uint8_t buf[4] = "nw_path_message_request_in_process_flow_divert";
                *(_WORD *)&_BYTE buf[12] = 2048;
                *(void *)&_BYTE buf[14] = v6;
                BOOL v55 = (char *)_os_log_send_and_compose_impl();

                os_log_type_t type = OS_LOG_TYPE_ERROR;
                char v148 = 0;
                if ((__nwlog_fault(v55, &type, &v148) & 1) == 0) {
                  goto LABEL_121;
                }
                if (type == OS_LOG_TYPE_FAULT)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  os_log_type_t v56 = (os_log_s *)(id)gLogObj;
                  os_log_type_t v57 = type;
                  if (os_log_type_enabled(v56, type))
                  {
                    *(_DWORD *)int buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_path_message_request_in_process_flow_divert";
                    *(_WORD *)&_BYTE buf[12] = 2048;
                    *(void *)&_BYTE buf[14] = v6;
                    _os_log_impl(&dword_181A5C000, v56, v57, "%{public}s NECP buffer too short %zu", buf, 0x16u);
                  }
                }

                else if (v148)
                {
                  char v58 = (char *)__nw_create_backtrace_string();
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  os_log_type_t v56 = (os_log_s *)(id)gLogObj;
                  os_log_type_t v59 = type;
                  BOOL v60 = os_log_type_enabled(v56, type);
                  if (v58)
                  {
                    if (v60)
                    {
                      *(_DWORD *)int buf = 136446722;
                      *(void *)&uint8_t buf[4] = "nw_path_message_request_in_process_flow_divert";
                      *(_WORD *)&_BYTE buf[12] = 2048;
                      *(void *)&_BYTE buf[14] = v6;
                      *(_WORD *)&buf[22] = 2082;
                      uint64_t v153 = (uint64_t)v58;
                      _os_log_impl( &dword_181A5C000,  v56,  v59,  "%{public}s NECP buffer too short %zu, dumping backtrace:%{public}s",  buf,  0x20u);
                    }

                    free(v58);
                    if (!v55) {
                      goto LABEL_198;
                    }
                    goto LABEL_122;
                  }

                  if (v60)
                  {
                    *(_DWORD *)int buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_path_message_request_in_process_flow_divert";
                    *(_WORD *)&_BYTE buf[12] = 2048;
                    *(void *)&_BYTE buf[14] = v6;
                    _os_log_impl( &dword_181A5C000,  v56,  v59,  "%{public}s NECP buffer too short %zu, no backtrace",  buf,  0x16u);
                  }
                }

                else
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  os_log_type_t v56 = (os_log_s *)(id)gLogObj;
                  os_log_type_t v61 = type;
                  if (os_log_type_enabled(v56, type))
                  {
                    *(_DWORD *)int buf = 136446466;
                    *(void *)&uint8_t buf[4] = "nw_path_message_request_in_process_flow_divert";
                    *(_WORD *)&_BYTE buf[12] = 2048;
                    *(void *)&_BYTE buf[14] = v6;
                    _os_log_impl( &dword_181A5C000,  v56,  v61,  "%{public}s NECP buffer too short %zu, backtrace limit exceeded",  buf,  0x16u);
                  }
                }

void sub_182462214()
{
  JUMPOUT(0x182462234LL);
}

void sub_182462230( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21)
{
}

uint64_t ___ZL30nw_path_necp_check_for_updatesPU24objcproto13OS_nw_context8NSObjectPA16_hj_block_invoke_2( uint64_t a1, uint64_t a2, void *a3)
{
  int v4 = a3;
  id v5 = v4;
  if (v4)
  {
    unsigned int v6 = *(void **)(a1 + 40);
    if (*((void *)v4 + 10) == *v6 && *((void *)v4 + 11) == v6[1])
    {
      nw_path_necp_update_evaluator( v4,  *(const unsigned __int8 **)(a1 + 48),  *(int *)(a1 + 56),  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
      *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0;
    }
  }

  return 1LL;
}

void sub_1824622D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_path_necp_update_evaluator( NWConcrete_nw_path_evaluator *a1, const unsigned __int8 *a2, unint64_t a3, int a4)
{
  uint64_t v48 = *MEMORY[0x1895F89C0];
  id v7 = a1;
  id v8 = nw_parameters_copy_context(*((void **)v7 + 1));
  nw_context_assert_queue(v8);
  os_log_type_t v9 = nw_path_create(*((void **)v7 + 2), *((void **)v7 + 1));
  int v10 = v9;
  if (v9)
  {
    if (a4)
    {
      if (v8) {
        BOOL v11 = v8[31] == 4;
      }
      else {
        BOOL v11 = 0;
      }
      int v16 = !v11;
    }

    else
    {
      int v16 = 0;
    }

    objc_storeStrong((id *)&v9->group_descriptor, *((id *)v7 + 3));
    objc_storeStrong((id *)&v10->browse_descriptor, *((id *)v7 + 4));
    objc_storeStrong((id *)&v10->advertise_descriptor, *((id *)v7 + 5));
    int v20 = *((_BYTE *)v10 + 475) & 0xFE | (*((unsigned __int8 *)v7 + 107) >> 1) & 1;
    *((_BYTE *)v10 + 475) = v20;
    v10->custom_etheros_log_type_t type = *((_WORD *)v7 + 52);
    v10->custom_int ip_protocol = *((_BYTE *)v7 + 106);
    *((_BYTE *)v10 + 475) = (*((_BYTE *)v7 + 107) >> 1) & 2 | v20 & 0xFD;
    *(_OWORD *)v10->BOOL client_id = *((_OWORD *)v7 + 5);
    if (a2 && a3 && nw_path_parse_necp_result(v10, (uint64_t)a2, a3))
    {
      nw_path_snapshot_path(v10);
      os_unfair_lock_lock((os_unfair_lock_t)v7 + 24);
      id v21 = *((id *)v7 + 6);
      objc_storeStrong((id *)v7 + 6, v10);
      *((_BYTE *)v10 + 474) = *((_BYTE *)v10 + 474) & 0xF7 | *((_BYTE *)v21 + 474) & 8;
      objc_storeStrong((id *)&v10->override_local_endpoint, *((id *)v21 + 10));
      objc_storeStrong((id *)&v10->override_interface, *((id *)v21 + 11));
      if (!nw_path_is_equal_inner(v10, v21, 0)) {
        *((_BYTE *)v10 + 474) |= 0x10u;
      }
      uint64_t v22 = _Block_copy(*((const void **)v7 + 8));
      char v23 = (dispatch_queue_s *)*((id *)v7 + 7);
      os_unfair_lock_unlock((os_unfair_lock_t)v7 + 24);
      if (v23)
      {
        block[0] = MEMORY[0x1895F87A8];
        block[1] = 3221225472LL;
        block[2] = ___ZL29nw_path_necp_update_evaluatorP28NWConcrete_nw_path_evaluatorPKhmb_block_invoke;
        block[3] = &unk_189BC55B0;
        BOOL v32 = v7;
        char v35 = v16;
        os_log_type_t v33 = v10;
        id v34 = v22;
        dispatch_async(v23, block);
      }

      else
      {
        int v26 = v7;
        os_unfair_lock_lock((os_unfair_lock_t)v7 + 24);
        char v27 = *((_BYTE *)v7 + 107);
        os_unfair_lock_unlock((os_unfair_lock_t)v7 + 24);

        if ((v27 & 0x20) == 0)
        {
          if ((*((_BYTE *)v7 + 107) & 0x40) != 0 && v16)
          {
            if (__nwlog_path_log::onceToken[0] != -1) {
              dispatch_once(__nwlog_path_log::onceToken, &__block_literal_global_39_44346);
            }
            os_log_type_t v28 = (os_log_s *)(id)gpathLogObj;
            if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
            {
              logging_description = nw_endpoint_get_logging_description(*((void **)v7 + 2));
              uint64_t v30 = *((void *)v7 + 1);
              *(_DWORD *)int buf = 136447490;
              uint64_t v39 = "nw_path_necp_update_evaluator";
              __int16 v40 = 1042;
              *(_DWORD *)os_log_type_t v41 = 16;
              *(_WORD *)&v41[4] = 2098;
              *(void *)&v41[6] = (char *)v7 + 80;
              __int16 v42 = 2082;
              id v43 = logging_description;
              __int16 v44 = 2112;
              uint64_t v45 = v30;
              __int16 v46 = 2112;
              os_log_type_t v47 = v10;
              _os_log_impl( &dword_181A5C000,  v28,  OS_LOG_TYPE_INFO,  "%{public}s [%{public,uuid_t}.16P %{public}s %@]\n\tpath: %@",  buf,  0x3Au);
            }
          }

          (*((void (**)(void *, NWConcrete_nw_path *))v22 + 2))(v22, v10);
        }
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v24 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v39 = "nw_path_necp_update_evaluator";
        __int16 v40 = 2048;
        *(void *)os_log_type_t v41 = a3;
        _os_log_impl( &dword_181A5C000,  v24,  OS_LOG_TYPE_ERROR,  "%{public}s Path failed to parse %zu bytes from NECP",  buf,  0x16u);
      }
    }

    goto LABEL_47;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v12 = (id)gLogObj;
  *(_DWORD *)int buf = 136446210;
  uint64_t v39 = "nw_path_necp_update_evaluator";
  unint64_t v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v36 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v14 = (os_log_s *)(id)gLogObj;
    os_log_type_t v15 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v39 = "nw_path_necp_update_evaluator";
      _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s nw_path_create failed", buf, 0xCu);
    }

void sub_182462968(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL29nw_path_necp_update_evaluatorP28NWConcrete_nw_path_evaluatorPKhmb_block_invoke(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  id v2 = *(os_unfair_lock_s **)(a1 + 32);
  id v3 = v2 + 24;
  int v4 = v2;
  os_unfair_lock_lock(v3);
  char os_unfair_lock_opaque_high = HIBYTE(v4[26]._os_unfair_lock_opaque);
  os_unfair_lock_unlock(v3);

  if ((os_unfair_lock_opaque_high & 0x20) == 0)
  {
    if ((*(_BYTE *)(*(void *)(a1 + 32) + 107LL) & 0x40) != 0 && *(_BYTE *)(a1 + 56))
    {
      if (__nwlog_path_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_path_log::onceToken, &__block_literal_global_39_44346);
      }
      unsigned int v6 = (os_log_s *)(id)gpathLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        uint64_t v7 = *(void *)(a1 + 32);
        logging_description = nw_endpoint_get_logging_description(*(void **)(v7 + 16));
        uint64_t v9 = *(void *)(a1 + 40);
        uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8LL);
        int v11 = 136447490;
        id v12 = "nw_path_necp_update_evaluator_block_invoke";
        __int16 v13 = 1042;
        int v14 = 16;
        __int16 v15 = 2098;
        uint64_t v16 = v7 + 80;
        __int16 v17 = 2082;
        os_log_type_t v18 = logging_description;
        __int16 v19 = 2112;
        uint64_t v20 = v10;
        __int16 v21 = 2112;
        uint64_t v22 = v9;
        _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_INFO,  "%{public}s [%{public,uuid_t}.16P %{public}s %@]\n\tpath: %@",  (uint8_t *)&v11,  0x3Au);
      }
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

void sub_182462B34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_network_is_satisfied(NWConcrete_nw_path *a1)
{
  id v1 = a1;
  BOOL is_satisfied_update_reason = nw_path_network_is_satisfied_update_reason(v1, 0LL);

  return is_satisfied_update_reason;
}

void sub_182462B7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_flow_is_equal(void *a1, void *a2)
{
  id v3 = a1;
  int v4 = a2;
  id v5 = v4;
  BOOL v6 = v3 == v4;
  if (v3 != v4 && v3 && v4) {
    BOOL v6 = ((*((_BYTE *)v4 + 185) ^ *((_BYTE *)v3 + 185)) & 3) == 0
  }
      && *((_DWORD *)v3 + 42) == *((_DWORD *)v4 + 42)
      && (v3[10] == v4[10] ? (BOOL v7 = v3[11] == v4[11]) : (BOOL v7 = 0),
          v7 ? (BOOL v8 = *((unsigned int *)v3 + 24) == (unint64_t)*((unsigned int *)v4 + 24)) : (BOOL v8 = 0),
          v8
       && (v3[16] == v4[16] ? (BOOL v9 = v3[17] == v4[17]) : (BOOL v9 = 0),
           v9
        && nw_interface_shallow_compare(v3[2], v4[2])
        && nw_endpoint_is_equal(v3[4], v5[4], 31LL)
        && nw_endpoint_is_equal(v3[5], v5[5], 31LL)
        && nw_buffer_is_equal( (const char *)v3[1],  *((unsigned int *)v3 + 40),  (const char *)v5[1],  *((unsigned int *)v5 + 40))
        && (unsigned int v10 = *((unsigned __int8 *)v5 + 185) ^ *((unsigned __int8 *)v3 + 185), (v10 & 0xC) == 0)
        && *((unsigned __int8 *)v3 + 184) == *((unsigned __int8 *)v5 + 184)))
      && *(void **)((char *)v3 + 108) == *(void **)((char *)v5 + 108)

  return v6;
}

void sub_182462CD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_buffer_is_equal(const char *__s1, size_t __n, const char *__s2, uint64_t a4)
{
  if (__n != a4) {
    return 0LL;
  }
  BOOL v5 = __s1 == __s2;
  BOOL result = __s1 == __s2;
  if (!v5 && __s1 && __s2) {
    return !__n || memcmp(__s1, __s2, __n) == 0;
  }
  return result;
}

os_unfair_lock_s *nw_path_evaluator_copy_path(os_unfair_lock_s *result)
{
  if (result)
  {
    id v1 = result + 24;
    id v2 = result;
    os_unfair_lock_lock(v1);
    id v3 = v2[6];
    os_unfair_lock_unlock(v1);

    return (os_unfair_lock_s *)v3;
  }

  return result;
}

xpc_object_t nw_path_copy_all_client_ids()
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  if (nw_context_copy_implicit_context::onceToken != -1) {
    dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
  }
  id v0 = (id)nw_context_copy_implicit_context::implicit_context;
  int v1 = nw_path_shared_necp_observer_fd(v0);

  if (v1 < 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = (id)gLogObj;
    *(_DWORD *)int buf = 136446210;
    uint64_t v23 = "nw_path_copy_all_client_ids";
    int v4 = (char *)_os_log_send_and_compose_impl();

    v20[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if ((__nwlog_fault(v4, v20, &type) & 1) == 0) {
      goto LABEL_40;
    }
    if (v20[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v8 = (os_log_s *)(id)gLogObj;
      os_log_type_t v9 = v20[0];
      if (os_log_type_enabled(v8, v20[0]))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v23 = "nw_path_copy_all_client_ids";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s nw_path_shared_necp_observer_fd failed", buf, 0xCu);
      }
    }

    else if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v8 = (os_log_s *)(id)gLogObj;
      os_log_type_t v13 = v20[0];
      BOOL v14 = os_log_type_enabled(v8, v20[0]);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v23 = "nw_path_copy_all_client_ids";
          __int16 v24 = 2082;
          *(void *)os_log_type_t v25 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s nw_path_shared_necp_observer_fd failed, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        goto LABEL_26;
      }

      if (v14)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v23 = "nw_path_copy_all_client_ids";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s nw_path_shared_necp_observer_fd failed, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v8 = (os_log_s *)(id)gLogObj;
      os_log_type_t v17 = v20[0];
      if (os_log_type_enabled(v8, v20[0]))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v23 = "nw_path_copy_all_client_ids";
        _os_log_impl( &dword_181A5C000,  v8,  v17,  "%{public}s nw_path_shared_necp_observer_fd failed, backtrace limit exceeded",  buf,  0xCu);
      }
    }

LABEL_40:
    if (!v4) {
      return 0LL;
    }
LABEL_41:
    free(v4);
    return 0LL;
  }

  *(_DWORD *)uint64_t v20 = 0;
  if (necp_client_action())
  {
    int v2 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v3 = (id)gLogObj;
    *(_DWORD *)int buf = 136446466;
    uint64_t v23 = "nw_path_copy_all_client_ids";
    __int16 v24 = 1024;
    *(_DWORD *)os_log_type_t v25 = v2;
    int v4 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v5 = (os_log_s *)(id)gLogObj;
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v23 = "nw_path_copy_all_client_ids";
        __int16 v24 = 1024;
        *(_DWORD *)os_log_type_t v25 = v2;
        _os_log_impl(&dword_181A5C000, v5, v6, "%{public}s NECP_CLIENT_ACTION_COPY_LIST %{darwin.errno}d", buf, 0x12u);
      }

void sub_182463A04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_path_shared_necp_observer_fd(void *a1)
{
  *(void *)&v40[5] = *MEMORY[0x1895F89C0];
  id v1 = a1;
  pthread_once(&nw_settings_setup_atfork::pOnce, (void (*)(void))nw_settings_setup_atfork_inner);
  uint64_t globals_for_path = nw_context_get_globals_for_path(v1);
  id v3 = (os_unfair_lock_s *)(globals_for_path + 120);
  os_unfair_lock_lock((os_unfair_lock_t)(globals_for_path + 120));
  uint64_t v4 = *(unsigned int *)(globals_for_path + 136);
  if ((v4 & 0x80000000) == 0) {
    goto LABEL_2;
  }
  int v5 = necp_open();
  *(_DWORD *)(globals_for_path + 136) = v5;
  if (v5 < 0)
  {
    int v13 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    os_unfair_lock_unlock(v3);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v14 = (id)gLogObj;
    *(_DWORD *)int buf = 136446466;
    char v36 = "nw_path_shared_necp_observer_fd";
    __int16 v37 = 1024;
    int v38 = v13;
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (__nwlog_fault(v9, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v15 = (os_log_s *)(id)gLogObj;
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)int buf = 136446466;
          char v36 = "nw_path_shared_necp_observer_fd";
          __int16 v37 = 1024;
          int v38 = v13;
          _os_log_impl(&dword_181A5C000, v15, v16, "%{public}s necp_open observer failed %{darwin.errno}d", buf, 0x12u);
        }
      }

      else if (v33)
      {
        backtrace_string = __nw_create_backtrace_string();
        if (backtrace_string)
        {
          uint64_t v23 = (char *)backtrace_string;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          __int16 v24 = (os_log_s *)(id)gLogObj;
          os_log_type_t v25 = type;
          if (os_log_type_enabled(v24, type))
          {
            *(_DWORD *)int buf = 136446722;
            char v36 = "nw_path_shared_necp_observer_fd";
            __int16 v37 = 1024;
            int v38 = v13;
            __int16 v39 = 2082;
            *(void *)__int16 v40 = v23;
            _os_log_impl( &dword_181A5C000,  v24,  v25,  "%{public}s necp_open observer failed %{darwin.errno}d, dumping backtrace:%{public}s",  buf,  0x1Cu);
          }

          free(v23);
          if (!v9) {
            goto LABEL_42;
          }
          goto LABEL_41;
        }

        __nwlog_obj();
        __int16 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)int buf = 136446466;
          char v36 = "nw_path_shared_necp_observer_fd";
          __int16 v37 = 1024;
          int v38 = v13;
          _os_log_impl( &dword_181A5C000,  v15,  v31,  "%{public}s necp_open observer failed %{darwin.errno}d, no backtrace",  buf,  0x12u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v15 = (os_log_s *)(id)gLogObj;
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)int buf = 136446466;
          char v36 = "nw_path_shared_necp_observer_fd";
          __int16 v37 = 1024;
          int v38 = v13;
          _os_log_impl( &dword_181A5C000,  v15,  v28,  "%{public}s necp_open observer failed %{darwin.errno}d, backtrace limit exceeded",  buf,  0x12u);
        }
      }
    }

void sub_182464124(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_path *nw_path_copy_path_for_tlv( _OWORD *a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v84 = *MEMORY[0x1895F89C0];
  id v11 = a2;
  if (!v11)
  {
    __nwlog_obj();
    os_log_type_t v52 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v81 = "nw_path_copy_path_for_tlv";
    BOOL v53 = (char *)_os_log_send_and_compose_impl();

    v79[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(obj) = 0;
    if (v79[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v54 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v55 = v79[0];
      if (os_log_type_enabled(v54, v79[0]))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v81 = "nw_path_copy_path_for_tlv";
        _os_log_impl(&dword_181A5C000, v54, v55, "%{public}s called with null context", buf, 0xCu);
      }

      goto LABEL_156;
    }

    if (!(_BYTE)obj)
    {
      __nwlog_obj();
      id v54 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v68 = v79[0];
      if (os_log_type_enabled(v54, v79[0]))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v81 = "nw_path_copy_path_for_tlv";
        _os_log_impl( &dword_181A5C000,  v54,  v68,  "%{public}s called with null context, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_156;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v54 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v61 = v79[0];
    BOOL v62 = os_log_type_enabled(v54, v79[0]);
    if (!backtrace_string)
    {
      if (v62)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v81 = "nw_path_copy_path_for_tlv";
        _os_log_impl(&dword_181A5C000, v54, v61, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }

      goto LABEL_156;
    }

    if (v62)
    {
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v81 = "nw_path_copy_path_for_tlv";
      __int16 v82 = 2082;
      BOOL v83 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v54,  v61,  "%{public}s called with null context, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_132;
  }

  if (!a3)
  {
    __nwlog_obj();
    os_log_type_t v56 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v81 = "nw_path_copy_path_for_tlv";
    BOOL v53 = (char *)_os_log_send_and_compose_impl();

    v79[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(obj) = 0;
    if (v79[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v54 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v57 = v79[0];
      if (os_log_type_enabled(v54, v79[0]))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v81 = "nw_path_copy_path_for_tlv";
        _os_log_impl(&dword_181A5C000, v54, v57, "%{public}s called with null parameters_buffer", buf, 0xCu);
      }

      goto LABEL_156;
    }

    if (!(_BYTE)obj)
    {
      __nwlog_obj();
      id v54 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v69 = v79[0];
      if (os_log_type_enabled(v54, v79[0]))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v81 = "nw_path_copy_path_for_tlv";
        _os_log_impl( &dword_181A5C000,  v54,  v69,  "%{public}s called with null parameters_buffer, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_156;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v54 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v63 = v79[0];
    BOOL v64 = os_log_type_enabled(v54, v79[0]);
    if (!backtrace_string)
    {
      if (v64)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v81 = "nw_path_copy_path_for_tlv";
        _os_log_impl( &dword_181A5C000,  v54,  v63,  "%{public}s called with null parameters_buffer, no backtrace",  buf,  0xCu);
      }

      goto LABEL_156;
    }

    if (v64)
    {
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v81 = "nw_path_copy_path_for_tlv";
      __int16 v82 = 2082;
      BOOL v83 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v54,  v63,  "%{public}s called with null parameters_buffer, dumping backtrace:%{public}s",  buf,  0x16u);
    }

void sub_182465480( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_path *nw_path_create_browse(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v4 = a1;
  id v5 = a2;
  int v6 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_path);
  id v7 = v6;
  if (!v6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = (id)gLogObj;
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v28 = "nw_path_create_browse";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unsigned int v10 = (os_log_s *)(id)gLogObj;
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v28 = "nw_path_create_browse";
        _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path) alloc] init] failed",  buf,  0xCu);
      }

      goto LABEL_38;
    }

    if (!v25)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unsigned int v10 = (os_log_s *)(id)gLogObj;
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v28 = "nw_path_create_browse";
        _os_log_impl( &dword_181A5C000,  v10,  v20,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path) alloc] init] failed, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_38;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unsigned int v10 = (os_log_s *)(id)gLogObj;
    os_log_type_t v16 = type;
    BOOL v17 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v28 = "nw_path_create_browse";
        _os_log_impl( &dword_181A5C000,  v10,  v16,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path) alloc] init] failed, no backtrace",  buf,  0xCu);
      }

      goto LABEL_38;
    }

    if (v17)
    {
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v28 = "nw_path_create_browse";
      __int16 v29 = 2082;
      BOOL v30 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v10,  v16,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path) alloc] init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_15;
  }

  if (!v5)
  {
    nw_parameters_t v12 = nw_parameters_create();
    parameters = v7->parameters;
    v7->parameters = v12;

    if (v7->parameters) {
      goto LABEL_10;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v18 = (id)gLogObj;
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v28 = "nw_path_create_browse";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (!__nwlog_fault(v9, &type, &v25))
    {
LABEL_39:
      if (!v9)
      {
LABEL_41:
        id v14 = 0LL;
        goto LABEL_42;
      }

void sub_182465A54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_copy_path_for_client_with_context(uint64_t a1)
{
  id v1 = (unsigned __int8 *)MEMORY[0x1895F8858](a1);
  uint64_t v67 = *MEMORY[0x1895F89C0];
  id v3 = v2;
  if (uuid_is_null(v1))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v59 = "nw_path_copy_path_for_client_with_context";
    id v5 = (char *)_os_log_send_and_compose_impl();

    v62[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v63) = 0;
    if (v62[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v6 = (os_log_s *)(id)gLogObj;
      os_log_type_t v7 = v62[0];
      if (os_log_type_enabled(v6, v62[0]))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v59 = "nw_path_copy_path_for_client_with_context";
        _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s called with null client_id", buf, 0xCu);
      }
    }

    else if ((_BYTE)v63)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v6 = (os_log_s *)(id)gLogObj;
      os_log_type_t v12 = v62[0];
      BOOL v13 = os_log_type_enabled(v6, v62[0]);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v59 = "nw_path_copy_path_for_client_with_context";
          __int16 v60 = 2082;
          v61[0] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v12,  "%{public}s called with null client_id, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v5) {
          goto LABEL_100;
        }
        goto LABEL_99;
      }

      if (v13)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v59 = "nw_path_copy_path_for_client_with_context";
        _os_log_impl(&dword_181A5C000, v6, v12, "%{public}s called with null client_id, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v6 = (os_log_s *)(id)gLogObj;
      os_log_type_t v16 = v62[0];
      if (os_log_type_enabled(v6, v62[0]))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v59 = "nw_path_copy_path_for_client_with_context";
        _os_log_impl( &dword_181A5C000,  v6,  v16,  "%{public}s called with null client_id, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_182466A98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_copy_path_for_client(uint64_t a1)
{
  if (nw_context_copy_implicit_context::onceToken != -1) {
    dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
  }
  id v2 = (id)nw_context_copy_implicit_context::implicit_context;
  BOOL v3 = nw_path_copy_path_for_client_with_context(a1);

  return v3;
}

void sub_182466B30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_path_observer *nw_path_create_observer(void *a1, void *a2)
{
  *(void *)&v58[13] = *MEMORY[0x1895F89C0];
  id v4 = a1;
  id v5 = a2;
  nw_allow_use_of_dispatch_internal();
  if (v5)
  {
    int v6 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_path_observer);
    if (v6)
    {
      int v7 = necp_open();
      if ((v7 & 0x80000000) == 0)
      {
        int v8 = _Block_copy(v5);
        int v9 = (void *)*((void *)v6 + 2);
        *((void *)v6 + 2) = v8;

        objc_storeStrong((id *)v6 + 1, a1);
        unsigned int v10 = nw_dictionary_create();
        os_log_type_t v11 = (void *)*((void *)v6 + 3);
        *((void *)v6 + 3) = v10;

        os_log_type_t v12 = nw_fd_wrapper_create(v7);
        BOOL v13 = (void *)*((void *)v6 + 4);
        *((void *)v6 + 4) = v12;

        id v14 = (void *)*((void *)v6 + 4);
        if (v14)
        {
          nw_fd_wrapper_guard(v14);
          if (nw_context_copy_implicit_context::onceToken != -1) {
            dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
          }
          id v15 = (id)nw_context_copy_implicit_context::implicit_context;
          v51[0] = MEMORY[0x1895F87A8];
          v51[1] = 3221225472LL;
          v51[2] = __nw_path_create_observer_block_invoke;
          v51[3] = &unk_189BC93A0;
          os_log_type_t v16 = v6;
          BOOL v52 = v16;
          *((void *)v16 + 5) = nw_queue_context_create_source(v15, v7, 1, 0, v51, 0LL);

          uint64_t v18 = *((void *)v16 + 5);
          if (v18)
          {
            nw_queue_activate_source(v18, v17);
            os_log_type_t v19 = v16;
LABEL_65:

            goto LABEL_66;
          }

          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v32 = (id)gLogObj;
          *(_DWORD *)int buf = 136446210;
          char v56 = "nw_path_create_observer";
          os_log_type_t v33 = (char *)_os_log_send_and_compose_impl();

          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v53 = 0;
          if (__nwlog_fault(v33, &type, &v53))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              id v34 = (os_log_s *)(id)gLogObj;
              os_log_type_t v35 = type;
              if (os_log_type_enabled(v34, type))
              {
                *(_DWORD *)int buf = 136446210;
                char v56 = "nw_path_create_observer";
                _os_log_impl(&dword_181A5C000, v34, v35, "%{public}s nw_queue_context_create_source failed", buf, 0xCu);
              }
            }

            else if (v53)
            {
              backtrace_string = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v38 = type;
              BOOL v39 = os_log_type_enabled(v34, type);
              if (backtrace_string)
              {
                if (v39)
                {
                  *(_DWORD *)int buf = 136446466;
                  char v56 = "nw_path_create_observer";
                  __int16 v57 = 2082;
                  *(void *)char v58 = backtrace_string;
                  _os_log_impl( &dword_181A5C000,  v34,  v38,  "%{public}s nw_queue_context_create_source failed, dumping backtrace:%{public}s",  buf,  0x16u);
                }

                free(backtrace_string);
                if (!v33) {
                  goto LABEL_64;
                }
                goto LABEL_63;
              }

              if (v39)
              {
                *(_DWORD *)int buf = 136446210;
                char v56 = "nw_path_create_observer";
                _os_log_impl( &dword_181A5C000,  v34,  v38,  "%{public}s nw_queue_context_create_source failed, no backtrace",  buf,  0xCu);
              }
            }

            else
            {
              __nwlog_obj();
              id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              os_log_type_t v41 = type;
              if (os_log_type_enabled(v34, type))
              {
                *(_DWORD *)int buf = 136446210;
                char v56 = "nw_path_create_observer";
                _os_log_impl( &dword_181A5C000,  v34,  v41,  "%{public}s nw_queue_context_create_source failed, backtrace limit exceeded",  buf,  0xCu);
              }
            }
          }

          if (!v33)
          {
LABEL_64:
            os_log_type_t v19 = 0LL;
            goto LABEL_65;
          }

void sub_182467668( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void __nw_path_create_observer_block_invoke(uint64_t a1)
{
  uint64_t v49 = *MEMORY[0x1895F89C0];
  id v1 = (os_unfair_lock_s *)*(id *)(a1 + 32);
  id v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    id v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)dispatch_block_t block = 136446210;
    *(void *)&void block[4] = "nw_path_observer_update";
    id v15 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v35) = 0;
    if (__nwlog_fault(v15, type, &v35))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v17 = type[0];
        if (os_log_type_enabled(v16, type[0]))
        {
          *(_DWORD *)dispatch_block_t block = 136446210;
          *(void *)&void block[4] = "nw_path_observer_update";
          _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s called with null observer", block, 0xCu);
        }
      }

      else if ((_BYTE)v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type[0];
        BOOL v20 = os_log_type_enabled(v16, type[0]);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)dispatch_block_t block = 136446466;
            *(void *)&void block[4] = "nw_path_observer_update";
            *(_WORD *)&block[12] = 2082;
            *(void *)&block[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v16,  v19,  "%{public}s called with null observer, dumping backtrace:%{public}s",  block,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }

        if (v20)
        {
          *(_DWORD *)dispatch_block_t block = 136446210;
          *(void *)&void block[4] = "nw_path_observer_update";
          _os_log_impl(&dword_181A5C000, v16, v19, "%{public}s called with null observer, no backtrace", block, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v23 = type[0];
        if (os_log_type_enabled(v16, type[0]))
        {
          *(_DWORD *)dispatch_block_t block = 136446210;
          *(void *)&void block[4] = "nw_path_observer_update";
          _os_log_impl( &dword_181A5C000,  v16,  v23,  "%{public}s called with null observer, backtrace limit exceeded",  block,  0xCu);
        }
      }
    }

void sub_182467BD8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, id a30, char a31)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);

  _Unwind_Resume(a1);
}

uint64_t ___ZL23nw_path_observer_updateP27NWConcrete_nw_path_observer_block_invoke(void *a1)
{
  uint64_t v89 = *MEMORY[0x1895F89C0];
  memset(uu, 0, sizeof(uu));
  bzero(&v86, 0x604uLL);
  int v2 = necp_client_action();
  unsigned int v3 = v2;
  if (v2 < 4)
  {
    if (v2 < 0)
    {
      int v11 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (id)gLogObj;
      *(_DWORD *)uuid_string_t out = 136446466;
      *(void *)&out[4] = "nw_path_observer_update_block_invoke";
      *(_WORD *)&out[12] = 1024;
      *(_DWORD *)&out[14] = v11;
      int v8 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v80[0] = OS_LOG_TYPE_DEFAULT;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v9 = (os_log_s *)(id)gLogObj;
        os_log_type_t v13 = type[0];
        if (os_log_type_enabled(v9, type[0]))
        {
          *(_DWORD *)uuid_string_t out = 136446466;
          *(void *)&out[4] = "nw_path_observer_update_block_invoke";
          *(_WORD *)&out[12] = 1024;
          *(_DWORD *)&out[14] = v11;
          _os_log_impl( &dword_181A5C000,  v9,  v13,  "%{public}s necp_client_action(NECP_CLIENT_ACTION_COPY_CLIENT_UPDATE) %{darwin.errno}d",  (uint8_t *)out,  0x12u);
        }

        goto LABEL_77;
      }

      if (v80[0] == OS_LOG_TYPE_DEFAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v9 = (os_log_s *)(id)gLogObj;
        os_log_type_t v34 = type[0];
        if (os_log_type_enabled(v9, type[0]))
        {
          *(_DWORD *)uuid_string_t out = 136446466;
          *(void *)&out[4] = "nw_path_observer_update_block_invoke";
          *(_WORD *)&out[12] = 1024;
          *(_DWORD *)&out[14] = v11;
          _os_log_impl( &dword_181A5C000,  v9,  v34,  "%{public}s necp_client_action(NECP_CLIENT_ACTION_COPY_CLIENT_UPDATE) %{darwin.errno}d, backtrace limit exceeded",  (uint8_t *)out,  0x12u);
        }

        goto LABEL_77;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v9 = (os_log_s *)(id)gLogObj;
      os_log_type_t v24 = type[0];
      BOOL v25 = os_log_type_enabled(v9, type[0]);
      if (!backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)uuid_string_t out = 136446466;
          *(void *)&out[4] = "nw_path_observer_update_block_invoke";
          *(_WORD *)&out[12] = 1024;
          *(_DWORD *)&out[14] = v11;
          _os_log_impl( &dword_181A5C000,  v9,  v24,  "%{public}s necp_client_action(NECP_CLIENT_ACTION_COPY_CLIENT_UPDATE) %{darwin.errno}d, no backtrace",  (uint8_t *)out,  0x12u);
        }

        goto LABEL_77;
      }

      if (v25)
      {
        *(_DWORD *)uuid_string_t out = 136446722;
        *(void *)&out[4] = "nw_path_observer_update_block_invoke";
        *(_WORD *)&out[12] = 1024;
        *(_DWORD *)&out[14] = v11;
        *(_WORD *)&out[18] = 2082;
        *(void *)&out[20] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v9,  v24,  "%{public}s necp_client_action(NECP_CLIENT_ACTION_COPY_CLIENT_UPDATE) %{darwin.errno}d, dumping backtrace:%{public}s",  (uint8_t *)out,  0x1Cu);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v7 = (id)gLogObj;
      *(_DWORD *)uuid_string_t out = 136446466;
      *(void *)&out[4] = "nw_path_observer_update_block_invoke";
      *(_WORD *)&out[12] = 1024;
      *(_DWORD *)&out[14] = v3;
      int v8 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v80[0] = OS_LOG_TYPE_DEFAULT;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v9 = (os_log_s *)(id)gLogObj;
        os_log_type_t v10 = type[0];
        if (os_log_type_enabled(v9, type[0]))
        {
          *(_DWORD *)uuid_string_t out = 136446466;
          *(void *)&out[4] = "nw_path_observer_update_block_invoke";
          *(_WORD *)&out[12] = 1024;
          *(_DWORD *)&out[14] = v3;
          _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s Path observer result cannot hold update header (%d)",  (uint8_t *)out,  0x12u);
        }

void sub_182468FD0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void ___ZL23nw_path_observer_updateP27NWConcrete_nw_path_observer_block_invoke_420(void *a1)
{
  int v2 = (os_unfair_lock_s *)a1[4];
  unsigned int v3 = v2 + 12;
  nw_parameters_t v4 = v2;
  os_unfair_lock_lock(v3);
  uint64_t v5 = *(void *)&v4[4]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v3);

  if (v5) {
    (*(void (**)(void))(a1[5] + 16LL))();
  }
  int v6 = *(void **)(*(void *)(a1[6] + 8LL) + 24LL);
  if (v6)
  {
    free(v6);
    *(void *)(*(void *)(a1[6] + 8LL) + 24LL) = 0LL;
  }

void nw_path_observer_cancel(void *a1)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 12);
    unsigned int v3 = *(void **)&v2[4]._os_unfair_lock_opaque;
    *(void *)&v2[4]._uint32_t os_unfair_lock_opaque = 0LL;

    nw_parameters_t v4 = *(void **)&v2[2]._os_unfair_lock_opaque;
    *(void *)&v2[2]._uint32_t os_unfair_lock_opaque = 0LL;

    nw_queue_cancel_source(*(void *)&v2[10]._os_unfair_lock_opaque, v5);
    int v6 = *(void **)&v2[8]._os_unfair_lock_opaque;
    *(void *)&v2[8]._uint32_t os_unfair_lock_opaque = 0LL;
    *(void *)&v2[10]._uint32_t os_unfair_lock_opaque = 0LL;

    id v7 = *(void **)&v2[6]._os_unfair_lock_opaque;
    *(void *)&v2[6]._uint32_t os_unfair_lock_opaque = 0LL;

    os_unfair_lock_unlock(v2 + 12);
    goto LABEL_3;
  }

  __nwlog_obj();
  int v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v19 = "nw_path_observer_cancel";
  int v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v19 = "nw_path_observer_cancel";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null observer", buf, 0xCu);
      }
    }

    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v19 = "nw_path_observer_cancel";
          __int16 v20 = 2082;
          id v21 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null observer, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v14)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v19 = "nw_path_observer_cancel";
        _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null observer, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v19 = "nw_path_observer_cancel";
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null observer, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_182469390(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *nw_path_copy_all_local_paths(void *a1)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  pthread_once(&nw_settings_setup_atfork::pOnce, (void (*)(void))nw_settings_setup_atfork_inner);
  uint64_t globals_for_path = nw_context_get_globals_for_path(v1);
  unsigned int v3 = (os_unfair_lock_s *)(globals_for_path + 124);
  os_unfair_lock_lock((os_unfair_lock_t)(globals_for_path + 124));
  uint64_t v4 = *(void *)(globals_for_path + 32);
  if (v4)
  {
    uint64_t v5 = (void *)nw_dictionary_copy(v4);
    os_unfair_lock_unlock(v3);
    if (v5)
    {
      int v6 = nw_dictionary_create();
      id v7 = v6;
      if (v6)
      {
        v21[0] = MEMORY[0x1895F87A8];
        v21[1] = 3221225472LL;
        void v21[2] = __nw_path_copy_all_local_paths_block_invoke;
        v21[3] = &unk_189BC5058;
        int v8 = v6;
        id v22 = v8;
        nw_dictionary_apply((uint64_t)v5, (uint64_t)v21);
        int v9 = v8;

LABEL_26:
        goto LABEL_27;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v10 = (id)gLogObj;
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v26 = "nw_path_copy_all_local_paths";
      os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v23 = 0;
      if (__nwlog_fault(v11, &type, &v23))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v12 = (os_log_s *)(id)gLogObj;
          os_log_type_t v13 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)int buf = 136446210;
            os_log_type_t v26 = "nw_path_copy_all_local_paths";
            _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s nw_dictionary_create failed", buf, 0xCu);
          }
        }

        else if (v23)
        {
          backtrace_string = __nw_create_backtrace_string();
          if (backtrace_string)
          {
            os_log_type_t v15 = (char *)backtrace_string;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            char v16 = (os_log_s *)(id)gLogObj;
            os_log_type_t v17 = type;
            if (os_log_type_enabled(v16, type))
            {
              *(_DWORD *)int buf = 136446466;
              os_log_type_t v26 = "nw_path_copy_all_local_paths";
              __int16 v27 = 2082;
              os_log_type_t v28 = v15;
              _os_log_impl( &dword_181A5C000,  v16,  v17,  "%{public}s nw_dictionary_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v15);
            if (!v11) {
              goto LABEL_26;
            }
            goto LABEL_25;
          }

          __nwlog_obj();
          id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v19 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)int buf = 136446210;
            os_log_type_t v26 = "nw_path_copy_all_local_paths";
            _os_log_impl(&dword_181A5C000, v12, v19, "%{public}s nw_dictionary_create failed, no backtrace", buf, 0xCu);
          }
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          id v12 = (os_log_s *)(id)gLogObj;
          os_log_type_t v18 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)int buf = 136446210;
            os_log_type_t v26 = "nw_path_copy_all_local_paths";
            _os_log_impl( &dword_181A5C000,  v12,  v18,  "%{public}s nw_dictionary_create failed, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

      if (!v11) {
        goto LABEL_26;
      }
LABEL_25:
      free(v11);
      goto LABEL_26;
    }
  }

  else
  {
    os_unfair_lock_unlock(v3);
  }

  id v7 = 0LL;
LABEL_27:

  return v7;
}

void sub_18246975C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_path_copy_all_local_paths_block_invoke(uint64_t a1, const char *a2, void *a3)
{
  uint64_t v5 = a3;
  int v6 = v5;
  if (v5)
  {
    os_unfair_lock_lock(v5 + 24);
    id v7 = *(void **)&v6[12]._os_unfair_lock_opaque;
    if (v7) {
      nw_dictionary_set_value(*(void *)(a1 + 32), a2, v7);
    }
    os_unfair_lock_unlock(v6 + 24);
  }

  return 1LL;
}

uint64_t nw_path_is_listener(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((_BYTE *)v1 + 475) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  char v16 = "nw_path_is_listener";
  int v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_is_listener";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          char v16 = "nw_path_is_listener";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_is_listener";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_is_listener";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

uint64_t nw_path_get_nexus_instance(void *a1, _OWORD *a2, _DWORD *a3)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  uint64_t v5 = a1;
  int v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    id v22 = "nw_path_get_nexus_instance";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v11, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)int buf = 136446210;
          id v22 = "nw_path_get_nexus_instance";
          _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null path", buf, 0xCu);
        }
      }

      else if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)int buf = 136446466;
            id v22 = "nw_path_get_nexus_instance";
            __int16 v23 = 2082;
            os_log_type_t v24 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }

        if (v16)
        {
          *(_DWORD *)int buf = 136446210;
          id v22 = "nw_path_get_nexus_instance";
          _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)int buf = 136446210;
          id v22 = "nw_path_get_nexus_instance";
          _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_182469D40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_path_flow_get_nexus_instance(void *a1, _OWORD *a2, _DWORD *a3)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  uint64_t v5 = a1;
  int v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    id v21 = "nw_path_flow_get_nexus_instance";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v11, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)int buf = 136446210;
          id v21 = "nw_path_flow_get_nexus_instance";
          _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null flow", buf, 0xCu);
        }
      }

      else if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)int buf = 136446466;
            id v21 = "nw_path_flow_get_nexus_instance";
            __int16 v22 = 2082;
            __int16 v23 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null flow, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }

        if (v16)
        {
          *(_DWORD *)int buf = 136446210;
          id v21 = "nw_path_flow_get_nexus_instance";
          _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null flow, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)int buf = 136446210;
          id v21 = "nw_path_flow_get_nexus_instance";
          _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null flow, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_18246A018(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_path_get_nexus_key(void *a1, _DWORD *a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    __int16 v20 = "nw_path_get_nexus_key";
    int v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v9, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)int buf = 136446210;
          __int16 v20 = "nw_path_get_nexus_key";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null path", buf, 0xCu);
        }
      }

      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        BOOL v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)int buf = 136446466;
            __int16 v20 = "nw_path_get_nexus_key";
            __int16 v21 = 2082;
            __int16 v22 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }

        if (v14)
        {
          *(_DWORD *)int buf = 136446210;
          __int16 v20 = "nw_path_get_nexus_key";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)int buf = 136446210;
          __int16 v20 = "nw_path_get_nexus_key";
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

uint64_t nw_path_flow_get_nexus_key(void *a1, _DWORD *a2)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    if (a2)
    {
      uint64_t v5 = *((void *)v3 + 1);
      if (v5 && (int v6 = *((_DWORD *)v3 + 40)) != 0)
      {
        *a2 = v6;
      }

      else
      {
        uint64_t v5 = 0LL;
        *a2 = 0;
      }

      goto LABEL_7;
    }

    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    uint64_t v24 = "nw_path_flow_get_nexus_key";
    int v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v24 = "nw_path_flow_get_nexus_key";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null length", buf, 0xCu);
        }

uint64_t nw_path_get_nexus_flow_index(void *a1, _DWORD *a2)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    __int16 v25 = "nw_path_get_nexus_flow_index";
    int v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v25 = "nw_path_get_nexus_flow_index";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null path", buf, 0xCu);
      }

      goto LABEL_38;
    }

    if (!v22)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v25 = "nw_path_get_nexus_flow_index";
        _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_38;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v15 = type;
    BOOL v16 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v25 = "nw_path_get_nexus_flow_index";
        _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }

      goto LABEL_38;
    }

    if (v16)
    {
      *(_DWORD *)int buf = 136446466;
      __int16 v25 = "nw_path_get_nexus_flow_index";
      __int16 v26 = 2082;
      uint64_t v27 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_26;
  }

  if (!a2)
  {
    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    __int16 v25 = "nw_path_get_nexus_flow_index";
    int v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v25 = "nw_path_get_nexus_flow_index";
        _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null nexus_flow_index", buf, 0xCu);
      }

BOOL nw_path_flow_registration_get_nexus_instance( NWConcrete_nw_path *a1, NWConcrete_nw_path_flow_registration *a2, _OWORD *a3, _DWORD *a4)
{
  id v6 = nw_path_copy_flow_for_registration(a1, a2);
  uint64_t v7 = v6;
  if (v6)
  {
    uint64_t v8 = v6;
    int v9 = v8;
    if (a4) {
      *a4 = *((_DWORD *)v8 + 42);
    }
    os_log_type_t v10 = v8 + 8;
    int is_null = uuid_is_null((const unsigned __int8 *)v8 + 128);
    BOOL v12 = is_null == 0;
    if (!is_null) {
      *a3 = *v10;
    }
  }

  else
  {
    BOOL v12 = 0LL;
  }

  return v12;
}

void sub_18246AD04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_path_copy_flow_for_registration(NWConcrete_nw_path *a1, NWConcrete_nw_path_flow_registration *a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = a2;
  uint64_t v5 = v4;
  if (v3)
  {
    if (v4)
    {
      *(void *)int buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      uint64_t v28 = __Block_byref_object_copy__67543;
      uint64_t v29 = __Block_byref_object_dispose__67544;
      id v30 = 0LL;
      flows = (unsigned __int8 *)v3->flows;
      v22[0] = MEMORY[0x1895F87A8];
      v22[1] = 3221225472LL;
      v22[2] = ___ZL34nw_path_copy_flow_for_registrationP18NWConcrete_nw_pathP36NWConcrete_nw_path_flow_registration_block_invoke;
      v22[3] = &unk_189BC7960;
      uint64_t v23 = v4;
      uint64_t v24 = buf;
      nw_array_apply(flows, (uint64_t)v22);
      id v7 = *(id *)(*(void *)&buf[8] + 40LL);

      _Block_object_dispose(buf, 8);
      goto LABEL_4;
    }

    __nwlog_obj();
    os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_copy_flow_for_registration";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (__nwlog_fault(v10, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_copy_flow_for_registration";
          _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null flow_registration", buf, 0xCu);
        }

uint64_t ___ZL34nw_path_copy_flow_for_registrationP18NWConcrete_nw_pathP36NWConcrete_nw_path_flow_registration_block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  uint64_t v7 = *(void *)(a1 + 32);
  if (*((void *)v5 + 18) == *(void *)(v7 + 32) && *((void *)v5 + 19) == *(void *)(v7 + 40))
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a3);
    uint64_t v8 = 0LL;
  }

  else
  {
    uint64_t v8 = 1LL;
  }

  return v8;
}

uint64_t nw_path_flow_registration_get_nexus_key( NWConcrete_nw_path *a1, NWConcrete_nw_path_flow_registration *a2, _DWORD *a3)
{
  id v4 = nw_path_copy_flow_for_registration(a1, a2);
  id v5 = v4;
  if (v4) {
    uint64_t nexus_key = nw_path_flow_get_nexus_key(v4, a3);
  }
  else {
    uint64_t nexus_key = 0LL;
  }

  return nexus_key;
}

uint64_t nw_path_flow_registration_get_protocol_level(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    id v5 = nw_path_copy_flow_for_registration(v3, v4);
    id v6 = v5;
    if (!v5) {
      goto LABEL_18;
    }
    uint64_t v7 = v5;
    uint64_t v8 = (void *)v7[3];
    if (v8
      && (*(void *)size_t length = 0LL, (data = xpc_dictionary_get_data(v8, "data", (size_t *)length)) != 0LL)
      && *(void *)length >= 0xD8uLL
      && *(void *)length == data[53] + 216LL)
    {
      int v10 = data[52];
      os_log_type_t v11 = (v10 & 0x13) == 1 ? 0LL : data;
      os_log_type_t v12 = (v10 & 0xE080) != 0 ? v11 : 0LL;
    }

    else
    {
      os_log_type_t v12 = 0LL;
    }

    if (v12[53] >= 0xCCu)
    {
      unsigned int v13 = v12[54];
      if (v13 >= 5) {
        uint64_t v14 = 0LL;
      }
      else {
        uint64_t v14 = v13;
      }
    }

    else
    {
LABEL_18:
      uint64_t v14 = 0LL;
    }

    goto LABEL_20;
  }

  __nwlog_obj();
  os_log_type_t v16 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)size_t length = 136446210;
  *(void *)&length[4] = "nw_path_flow_registration_get_protocol_level";
  BOOL v17 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (__nwlog_fault(v17, &type, &v24))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)size_t length = 136446210;
        *(void *)&length[4] = "nw_path_flow_registration_get_protocol_level";
        _os_log_impl(&dword_181A5C000, v18, v19, "%{public}s called with null path", length, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v18, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)size_t length = 136446466;
          *(void *)&length[4] = "nw_path_flow_registration_get_protocol_level";
          __int16 v27 = 2082;
          uint64_t v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v18,  v21,  "%{public}s called with null path, dumping backtrace:%{public}s",  length,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_37;
      }

      if (v22)
      {
        *(_DWORD *)size_t length = 136446210;
        *(void *)&length[4] = "nw_path_flow_registration_get_protocol_level";
        _os_log_impl(&dword_181A5C000, v18, v21, "%{public}s called with null path, no backtrace", length, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)size_t length = 136446210;
        *(void *)&length[4] = "nw_path_flow_registration_get_protocol_level";
        _os_log_impl( &dword_181A5C000,  v18,  v23,  "%{public}s called with null path, backtrace limit exceeded",  length,  0xCu);
      }
    }
  }

BOOL nw_path_flow_registration_get_nexus_flow_index(void *a1, void *a2, _DWORD *a3)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = a2;
  if (a3)
  {
    uint64_t v7 = nw_path_copy_flow_for_registration(v5, v6);
    BOOL v8 = v7 != 0LL;
    if (v7) {
      *a3 = v7[41];
    }

    goto LABEL_5;
  }

  __nwlog_obj();
  int v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v21 = "nw_path_flow_registration_get_nexus_flow_index";
  os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (__nwlog_fault(v11, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v21 = "nw_path_flow_registration_get_nexus_flow_index";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null nexus_flow_index", buf, 0xCu);
      }
    }

    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v21 = "nw_path_flow_registration_get_nexus_flow_index";
          __int16 v22 = 2082;
          os_log_type_t v23 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null nexus_flow_index, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v16)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v21 = "nw_path_flow_registration_get_nexus_flow_index";
        _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s called with null nexus_flow_index, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v21 = "nw_path_flow_registration_get_nexus_flow_index";
        _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null nexus_flow_index, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL nw_path_get_flow_registration_id(void *a1, _OWORD *a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    *a2 = *(_OWORD *)(v3 + 136);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v17 = "nw_path_get_flow_registration_id";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v17 = "nw_path_get_flow_registration_id";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v17 = "nw_path_get_flow_registration_id";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v12)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v17 = "nw_path_get_flow_registration_id";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v17 = "nw_path_get_flow_registration_id";
        _os_log_impl(&dword_181A5C000, v8, v13, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

BOOL nw_path_evaluator_get_client_id(void *a1, _OWORD *a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    *a2 = *((_OWORD *)v3 + 5);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v17 = "nw_path_evaluator_get_client_id";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v17 = "nw_path_evaluator_get_client_id";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null evaluator", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v17 = "nw_path_evaluator_get_client_id";
          __int16 v18 = 2082;
          os_log_type_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null evaluator, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v12)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v17 = "nw_path_evaluator_get_client_id";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null evaluator, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v17 = "nw_path_evaluator_get_client_id";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null evaluator, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_path_flow_registration_add_extra_interface_option(void *a1, void *a2)
{
  uint64_t v46 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
      id v6 = (unsigned __int8 *)v3[3];
      v34[0] = MEMORY[0x1895F87A8];
      v34[1] = 3221225472LL;
      v34[2] = __nw_path_flow_registration_add_extra_interface_option_block_invoke;
      v34[3] = &unk_189BC85B0;
      id v7 = v4;
      id v35 = v7;
      if (nw_array_apply(v6, (uint64_t)v34))
      {
        BOOL v8 = (id *)v7;
        id v9 = v8[3];

        if (nw_endpoint_get_address_family(v9) != 2)
        {
LABEL_11:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v15 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)int buf = 136446978;
            uint64_t v39 = "nw_path_flow_registration_add_extra_interface_option";
            __int16 v40 = 2112;
            id v41 = v8;
            __int16 v42 = 1042;
            int v43 = 16;
            __int16 v44 = 2098;
            id v45 = v3 + 4;
            _os_log_impl( &dword_181A5C000,  v15,  OS_LOG_TYPE_INFO,  "%{public}s Adding interface option_details %@ to flow %{public,uuid_t}.16P",  buf,  0x26u);
          }

          uint64_t v16 = v3[3];
          if (!v16)
          {
            BOOL v17 = nw_array_create();
            __int16 v18 = (void *)v3[3];
            v3[3] = v17;

            uint64_t v16 = v3[3];
          }

          nw_array_append(v16, v8);
          uint64_t v12 = 1LL;
          goto LABEL_16;
        }

        int v10 = v8;
        id v11 = v10[7];

        if (v11)
        {

          goto LABEL_11;
        }

        os_log_type_t v13 = v10;
        id v14 = v13[8];

        if (v14) {
          goto LABEL_11;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v20 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v39 = "nw_path_flow_registration_add_extra_interface_option";
          __int16 v40 = 2112;
          id v41 = v13;
          _os_log_impl(&dword_181A5C000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s Wrong AF %@", buf, 0x16u);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v9 = (id)gLogObj;
        if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v39 = "nw_path_flow_registration_add_extra_interface_option";
          __int16 v40 = 2112;
          id v41 = v7;
          _os_log_impl( &dword_181A5C000,  (os_log_t)v9,  OS_LOG_TYPE_DEFAULT,  "%{public}s Interface option details %@ already exists",  buf,  0x16u);
        }
      }

      uint64_t v12 = 0LL;
LABEL_16:

      goto LABEL_17;
    }

    __nwlog_obj();
    char v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    uint64_t v39 = "nw_path_flow_registration_add_extra_interface_option";
    __int16 v22 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v36 = 0;
    if (__nwlog_fault(v22, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v39 = "nw_path_flow_registration_add_extra_interface_option";
          _os_log_impl(&dword_181A5C000, v23, v26, "%{public}s called with null interface_option_details", buf, 0xCu);
        }

void sub_18246C5B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_path_flow_registration_add_extra_interface_option_block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "isEqual:") ^ 1;
}

void nw_path_flow_registration_remove_extra_interface_option(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    id v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    __int16 v27 = "nw_path_flow_registration_remove_extra_interface_option";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v25 = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (v25 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = v25;
      if (os_log_type_enabled(v9, v25))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v27 = "nw_path_flow_registration_remove_extra_interface_option";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null flow_registration", buf, 0xCu);
      }
    }

    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = v25;
      BOOL v15 = os_log_type_enabled(v9, v25);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v27 = "nw_path_flow_registration_remove_extra_interface_option";
          __int16 v28 = 2082;
          BOOL v29 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null flow_registration, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v8) {
          goto LABEL_5;
        }
LABEL_40:
        free(v8);
        goto LABEL_5;
      }

      if (v15)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v27 = "nw_path_flow_registration_remove_extra_interface_option";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null flow_registration, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = v25;
      if (os_log_type_enabled(v9, v25))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v27 = "nw_path_flow_registration_remove_extra_interface_option";
        _os_log_impl( &dword_181A5C000,  v9,  v19,  "%{public}s called with null flow_registration, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_path_flow_registration_remove_extra_interface_option_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) isEqual:v3];
  if ((_DWORD)v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v5 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 40) + 32LL;
      int v8 = 136446978;
      id v9 = "nw_path_flow_registration_remove_extra_interface_option_block_invoke";
      __int16 v10 = 2112;
      id v11 = v3;
      __int16 v12 = 1042;
      int v13 = 16;
      __int16 v14 = 2098;
      uint64_t v15 = v6;
      _os_log_impl( &dword_181A5C000,  v5,  OS_LOG_TYPE_INFO,  "%{public}s Removing %@ from %{public,uuid_t}.16P",  (uint8_t *)&v8,  0x26u);
    }
  }

  return v4;
}

void sub_18246CC20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_path_flow_registration_remove_all_interface_options(void *a1)
{
  *(void *)&v17[13] = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v2 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136446722;
      uint64_t v15 = "nw_path_flow_registration_remove_all_interface_options";
      __int16 v16 = 1042;
      *(_DWORD *)os_log_type_t v17 = 16;
      v17[2] = 2098;
      *(void *)&v17[3] = v1 + 4;
      _os_log_impl( &dword_181A5C000,  v2,  OS_LOG_TYPE_INFO,  "%{public}s Removing all interface option_details from flow %{public,uuid_t}.16P",  buf,  0x1Cu);
    }

    id v3 = (void *)v1[3];
    v1[3] = 0LL;

    goto LABEL_5;
  }

  __nwlog_obj();
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  uint64_t v15 = "nw_path_flow_registration_remove_all_interface_options";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v15 = "nw_path_flow_registration_remove_all_interface_options";
        _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s called with null flow_registration", buf, 0xCu);
      }
    }

    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v15 = "nw_path_flow_registration_remove_all_interface_options";
          __int16 v16 = 2082;
          *(void *)os_log_type_t v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null flow_registration, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v10)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v15 = "nw_path_flow_registration_remove_all_interface_options";
        _os_log_impl(&dword_181A5C000, v6, v9, "%{public}s called with null flow_registration, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v15 = "nw_path_flow_registration_remove_all_interface_options";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null flow_registration, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_path_flow_registration_override_traffic_class(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    *((_DWORD *)v3 + 36) = a2;
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  __int16 v16 = "nw_path_flow_registration_override_traffic_class";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_path_flow_registration_override_traffic_class";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null flow_registration", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v16 = "nw_path_flow_registration_override_traffic_class";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null flow_registration, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_path_flow_registration_override_traffic_class";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null flow_registration, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_path_flow_registration_override_traffic_class";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null flow_registration, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_path_flow_registration_override_interface_types(void *a1, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  id v11 = a1;
  os_log_type_t v12 = v11;
  if (v11)
  {
    if (a2) {
      char v13 = 8;
    }
    else {
      char v13 = 0;
    }
    if (a4) {
      char v14 = 32;
    }
    else {
      char v14 = 0;
    }
    if (a5) {
      char v15 = 64;
    }
    else {
      char v15 = 0;
    }
    if (a3) {
      char v16 = 16;
    }
    else {
      char v16 = 0;
    }
    if (a6) {
      char v17 = 0x80;
    }
    else {
      char v17 = 0;
    }
    *((_BYTE *)v11 + 14_Block_object_dispose((const void *)(v2 - 64), 8) = (v16 | v13 | v14 | v15 | v17) & 0xF8 | *((_BYTE *)v11 + 148) & 7;
    goto LABEL_18;
  }

  __nwlog_obj();
  BOOL v18 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  BOOL v29 = "nw_path_flow_registration_override_interface_types";
  uint64_t v19 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v26 = 0;
  if (__nwlog_fault(v19, &type, &v26))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v29 = "nw_path_flow_registration_override_interface_types";
        _os_log_impl(&dword_181A5C000, v20, v21, "%{public}s called with null flow_registration", buf, 0xCu);
      }
    }

    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = type;
      BOOL v24 = os_log_type_enabled(v20, type);
      if (backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v29 = "nw_path_flow_registration_override_interface_types";
          __int16 v30 = 2082;
          BOOL v31 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v20,  v23,  "%{public}s called with null flow_registration, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_35;
      }

      if (v24)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v29 = "nw_path_flow_registration_override_interface_types";
        _os_log_impl( &dword_181A5C000,  v20,  v23,  "%{public}s called with null flow_registration, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v29 = "nw_path_flow_registration_override_interface_types";
        _os_log_impl( &dword_181A5C000,  v20,  v25,  "%{public}s called with null flow_registration, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_path_apply_override_interface_types_from_path(void *a1, void *a2)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  os_log_type_t v10 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v38 = "nw_path_apply_override_interface_types_from_path";
    os_log_type_t v21 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v35 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v38 = "nw_path_apply_override_interface_types_from_path";
        _os_log_impl(&dword_181A5C000, v22, v23, "%{public}s called with null path_to_modify", buf, 0xCu);
      }
    }

    else if (v35)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = type;
      BOOL v28 = os_log_type_enabled(v22, type);
      if (backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v38 = "nw_path_apply_override_interface_types_from_path";
          __int16 v39 = 2082;
          __int16 v40 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v22,  v27,  "%{public}s called with null path_to_modify, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_45:
        if (!v21) {
          goto LABEL_11;
        }
        goto LABEL_46;
      }

      if (v28)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v38 = "nw_path_apply_override_interface_types_from_path";
        _os_log_impl(&dword_181A5C000, v22, v27, "%{public}s called with null path_to_modify, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v38 = "nw_path_apply_override_interface_types_from_path";
        _os_log_impl( &dword_181A5C000,  v22,  v32,  "%{public}s called with null path_to_modify, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_18246DA2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_path_flow_registration_override_evaluator(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    objc_storeStrong(v3 + 17, a2);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  char v16 = "nw_path_flow_registration_override_evaluator";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_flow_registration_override_evaluator";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null flow_registration", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          char v16 = "nw_path_flow_registration_override_evaluator";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null flow_registration, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_flow_registration_override_evaluator";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null flow_registration, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_flow_registration_override_evaluator";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null flow_registration, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_path_override_local_endpoint(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    objc_storeStrong(v3 + 10, a2);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  char v16 = "nw_path_override_local_endpoint";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_override_local_endpoint";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          char v16 = "nw_path_override_local_endpoint";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_override_local_endpoint";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_override_local_endpoint";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

void nw_path_override_interface(void *a1, void *a2, char a3)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  uint64_t v5 = a1;
  id v6 = a2;
  if (v5)
  {
    objc_storeStrong(v5 + 11, a2);
    *((_BYTE *)v5 + 476) = *((_BYTE *)v5 + 476) & 0xFE | a3;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  BOOL v18 = "nw_path_override_interface";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v18 = "nw_path_override_interface";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v18 = "nw_path_override_interface";
          __int16 v19 = 2082;
          os_log_type_t v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v13)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v18 = "nw_path_override_interface";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v18 = "nw_path_override_interface";
        _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

void nw_path_override_viable(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 8;
    }
    else {
      char v5 = 0;
    }
    *((_BYTE *)v3 + 474) = *((_BYTE *)v3 + 474) & 0xF7 | v5;
    goto LABEL_6;
  }

  __nwlog_obj();
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  __int16 v17 = "nw_path_override_viable";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_path_override_viable";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v17 = "nw_path_override_viable";
          __int16 v18 = 2082;
          __int16 v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v12)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_path_override_viable";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v17 = "nw_path_override_viable";
        _os_log_impl(&dword_181A5C000, v8, v13, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

id nw_path_evaluator_copy_parameters(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 24);
    id v3 = *(id *)&v2[2]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v2 + 24);
    goto LABEL_3;
  }

  __nwlog_obj();
  char v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  char v16 = "nw_path_evaluator_copy_parameters";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_evaluator_copy_parameters";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null evaluator", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          char v16 = "nw_path_evaluator_copy_parameters";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null evaluator, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_evaluator_copy_parameters";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null evaluator, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_evaluator_copy_parameters";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null evaluator, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL nw_path_copy_description(void *a1)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  [v1 description];
  int v2 = (void *)objc_claimAutoreleasedReturnValue();
  id v3 = v2;
  if (!v2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v11 = (id)gLogObj;
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v32 = "nw_path_copy_description";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (__nwlog_fault(v6, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v12 = (os_log_s *)(id)gLogObj;
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v32 = "nw_path_copy_description";
          _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s [path description] failed", buf, 0xCu);
        }
      }

      else if (v29)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v12 = (os_log_s *)(id)gLogObj;
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v32 = "nw_path_copy_description";
            __int16 v33 = 2082;
            size_t v34 = (size_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v12,  v15,  "%{public}s [path description] failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          if (!v6) {
            goto LABEL_42;
          }
          goto LABEL_41;
        }

        if (v16)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v32 = "nw_path_copy_description";
          _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s [path description] failed, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v12 = (os_log_s *)(id)gLogObj;
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v32 = "nw_path_copy_description";
          _os_log_impl( &dword_181A5C000,  v12,  v20,  "%{public}s [path description] failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v6)
    {
LABEL_42:
      id v6 = 0LL;
      goto LABEL_43;
    }

void sub_18246EE74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id *nw_path_create_static( void *a1, void *a2, int a3, _OWORD *a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11)
{
  uint64_t v49 = *MEMORY[0x1895F89C0];
  id v17 = a1;
  id v18 = a2;
  id v40 = a9;
  id v41 = a10;
  id v42 = a11;
  __int16 v39 = v17;
  BOOL v19 = v17;
  os_log_type_t v20 = v18;
  os_log_type_t v21 = nw_path_create(v19, v18);
  p_isa = (id *)&v21->super.isa;
  if (v21)
  {
    v21->status = a3;
    *(_OWORD *)v21->BOOL client_id = *a4;
    if (a5) {
      char v23 = 32;
    }
    else {
      char v23 = 0;
    }
    if (a6) {
      char v24 = 16;
    }
    else {
      char v24 = 0;
    }
    if (a7) {
      char v25 = 64;
    }
    else {
      char v25 = 0;
    }
    if (a8) {
      char v26 = 0x80;
    }
    else {
      char v26 = 0;
    }
    *((_BYTE *)v21 + 473) = (v24 | v23 | v25 | v26) & 0xF0 | *((_BYTE *)v21 + 473) & 0xF;
    objc_storeStrong((id *)&v21->direct, a9);
    objc_storeStrong(p_isa + 13, a10);
    objc_storeStrong(p_isa + 28, a11);
    os_log_type_t v27 = p_isa;
    goto LABEL_22;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v28 = (id)gLogObj;
  *(_DWORD *)int buf = 136446210;
  uint64_t v46 = "nw_path_create_static";
  char v29 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v43 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v30 = (os_log_s *)(id)gLogObj;
    os_log_type_t v31 = type;
    if (os_log_type_enabled(v30, type))
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v46 = "nw_path_create_static";
      _os_log_impl(&dword_181A5C000, v30, v31, "%{public}s nw_path_create failed", buf, 0xCu);
    }

void sub_18246F28C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_path *nw_path_create_from_tlv(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  size_t v5 = nw_path_create(a1, 0LL);
  id v6 = v5;
  if (!v5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v8 = (id)gLogObj;
    *(_DWORD *)int buf = 136446210;
    char v25 = "nw_path_create_from_tlv";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v10 = (os_log_s *)(id)gLogObj;
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v25 = "nw_path_create_from_tlv";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s nw_path_create failed", buf, 0xCu);
      }

      goto LABEL_36;
    }

    if (!v22)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v10 = (os_log_s *)(id)gLogObj;
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v25 = "nw_path_create_from_tlv";
        _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s nw_path_create failed, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_36;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v10 = (os_log_s *)(id)gLogObj;
    os_log_type_t v15 = type;
    BOOL v16 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)int buf = 136446210;
        char v25 = "nw_path_create_from_tlv";
        _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s nw_path_create failed, no backtrace", buf, 0xCu);
      }

      goto LABEL_36;
    }

    if (v16)
    {
      *(_DWORD *)int buf = 136446466;
      char v25 = "nw_path_create_from_tlv";
      __int16 v26 = 2082;
      os_log_type_t v27 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s nw_path_create failed, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_23;
  }

  if (!nw_path_parse_necp_result(v5, a2, a3))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v12 = (id)gLogObj;
    *(_DWORD *)int buf = 136446210;
    char v25 = "nw_path_create_from_tlv";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v10 = (os_log_s *)(id)gLogObj;
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v25 = "nw_path_create_from_tlv";
        _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s nw_path_parse_necp_result failed", buf, 0xCu);
      }

void sub_18246F82C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_copy_derived_parameters(void *a1)
{
  id v1 = a1;
  int v2 = v1;
  if (v1 && (id v3 = (void *)*((void *)v1 + 2)) != 0LL)
  {
    id v4 = v3;
    BOOL v5 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]( (id *)objc_alloc(&OBJC_CLASS___NWConcrete_nw_parameters),  v4,  0,  0);

    if ((nw_path_may_span_multiple_interfaces(v2) & 1) == 0)
    {
      id v6 = (nw_interface *)nw_path_copy_scoped_interface(v2);
      if (v6) {
        nw_parameters_require_interface((nw_parameters_t)v5, v6);
      }
    }
  }

  else
  {
    BOOL v5 = 0LL;
  }

  return v5;
}

void sub_18246F8DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_path_enumerate_gateways(nw_path_t path, nw_path_enumerate_gateways_block_t enumerate_block)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  nw_path_t v3 = path;
  nw_path_enumerate_gateways_block_t v4 = enumerate_block;
  BOOL v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    id v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    __int16 v26 = "nw_path_enumerate_gateways";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v26 = "nw_path_enumerate_gateways";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v26 = "nw_path_enumerate_gateways";
          __int16 v27 = 2082;
          uint64_t v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v8) {
          goto LABEL_5;
        }
LABEL_40:
        free(v8);
        goto LABEL_5;
      }

      if (v15)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v26 = "nw_path_enumerate_gateways";
        _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v26 = "nw_path_enumerate_gateways";
        _os_log_impl(&dword_181A5C000, v9, v19, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

uint64_t __nw_path_enumerate_gateways_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

BOOL nw_path_is_equal(nw_path_t path, nw_path_t other_path)
{
  return nw_path_is_equal_inner(path, other_path, 0);
}

uint64_t nw_path_is_preferred(void *a1, void *a2, int a3)
{
  BOOL v5 = a1;
  id v6 = a2;
  id v7 = v6;
  uint64_t v8 = 0LL;
  if (v5 && v5 != v6)
  {
    if (!v6) {
      goto LABEL_10;
    }
    int v9 = *((_DWORD *)v5 + 94);
    int v10 = *((_DWORD *)v6 + 94);
    if (v9 == v10) {
      goto LABEL_17;
    }
    if (v9 == 1 && v10 == 2) {
      goto LABEL_10;
    }
    if (v10 != 1 || v9 != 2)
    {
LABEL_17:
      if (a3 && !nw_interface_shallow_compare(v5[12], v6[12]))
      {
LABEL_10:
        uint64_t v8 = 1LL;
        goto LABEL_14;
      }
    }

    uint64_t v8 = 0LL;
  }

nw_path_status_t nw_path_get_status(nw_path_t path)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_path_t v1 = path;
  nw_path_t v2 = v1;
  if (v1)
  {
    nw_path_status_t v3 = *((_DWORD *)v1 + 94);
    goto LABEL_3;
  }

  __nwlog_obj();
  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  BOOL v16 = "nw_path_get_status";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_path_get_status";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v16 = "nw_path_get_status";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_path_get_status";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_path_get_status";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

void nw_path_evaluator_set_queue(void *a1, void *a2)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  BOOL v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v31 = "nw_path_evaluator_set_queue";
    BOOL v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v31 = "nw_path_evaluator_set_queue";
        _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s called with null evaluator", buf, 0xCu);
      }
    }

    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      BOOL v22 = os_log_type_enabled(v16, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v31 = "nw_path_evaluator_set_queue";
          __int16 v32 = 2082;
          __int16 v33 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v16,  v21,  "%{public}s called with null evaluator, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_58:
        if (!v15) {
          goto LABEL_24;
        }
LABEL_59:
        free(v15);
        goto LABEL_24;
      }

      if (v22)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v31 = "nw_path_evaluator_set_queue";
        _os_log_impl(&dword_181A5C000, v16, v21, "%{public}s called with null evaluator, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v31 = "nw_path_evaluator_set_queue";
        _os_log_impl( &dword_181A5C000,  v16,  v26,  "%{public}s called with null evaluator, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void nw_path_evaluator_call_update_handler(void *a1)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  nw_path_t v1 = a1;
  nw_path_t v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 24);
    id v3 = *(id *)&v2[12]._os_unfair_lock_opaque;
    if (v3 && (id v4 = *(const void **)&v2[16]._os_unfair_lock_opaque) != 0LL && *(void *)&v2[14]._os_unfair_lock_opaque)
    {
      BOOL v5 = _Block_copy(v4);
      if (__nwlog_path_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_path_log::onceToken, &__block_literal_global_39_44346);
      }
      id v6 = (os_log_s *)(id)gpathLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)int buf = 136446722;
        os_log_type_t v26 = "nw_path_evaluator_call_update_handler";
        __int16 v27 = 1042;
        *(_DWORD *)char v28 = 16;
        *(_WORD *)&v28[4] = 2098;
        *(void *)&v28[6] = v2 + 20;
        _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_INFO,  "%{public}s [%{public,uuid_t}.16P] scheduling update",  buf,  0x1Cu);
      }

      id v7 = *(dispatch_queue_s **)&v2[14]._os_unfair_lock_opaque;
      block[0] = MEMORY[0x1895F87A8];
      block[1] = 3221225472LL;
      block[2] = __nw_path_evaluator_call_update_handler_block_invoke;
      block[3] = &unk_189BC50A8;
      os_log_type_t v20 = v2;
      id v22 = v5;
      id v21 = v3;
      os_log_type_t v8 = v5;
      dispatch_async(v7, block);
    }

    else
    {
      if (__nwlog_path_log::onceToken[0] != -1) {
        dispatch_once(__nwlog_path_log::onceToken, &__block_literal_global_39_44346);
      }
      os_log_type_t v8 = (os_log_s *)(id)gpathLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        os_log_type_t v9 = _Block_copy(*(const void **)&v2[16]._os_unfair_lock_opaque);
        uint64_t v10 = *(void *)&v2[14]._os_unfair_lock_opaque;
        *(_DWORD *)int buf = 136447490;
        os_log_type_t v26 = "nw_path_evaluator_call_update_handler";
        __int16 v27 = 1042;
        *(_DWORD *)char v28 = 16;
        *(_WORD *)&v28[4] = 2098;
        *(void *)&v28[6] = v2 + 20;
        __int16 v29 = 2048;
        id v30 = v3;
        __int16 v31 = 2048;
        __int16 v32 = v9;
        __int16 v33 = 2048;
        uint64_t v34 = v10;
        _os_log_impl( &dword_181A5C000,  v8,  OS_LOG_TYPE_ERROR,  "%{public}s [%{public,uuid_t}.16P] not delivering update, path=%p, update_block=%p, client_queue=%p",  buf,  0x3Au);
      }
    }

    os_unfair_lock_unlock(v2 + 24);
    goto LABEL_15;
  }

  __nwlog_obj();
  os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v26 = "nw_path_evaluator_call_update_handler";
  BOOL v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (__nwlog_fault(v12, &type, &v23))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v26 = "nw_path_evaluator_call_update_handler";
        _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null evaluator", buf, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v26 = "nw_path_evaluator_call_update_handler";
          __int16 v27 = 2082;
          *(void *)char v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null evaluator, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_32;
      }

      if (v17)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v26 = "nw_path_evaluator_call_update_handler";
        _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null evaluator, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v26 = "nw_path_evaluator_call_update_handler";
        _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null evaluator, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t __nw_path_evaluator_call_update_handler_block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  if (__nwlog_path_log::onceToken[0] != -1) {
    dispatch_once(__nwlog_path_log::onceToken, &__block_literal_global_39_44346);
  }
  nw_path_t v2 = (os_log_s *)(id)gpathLogObj;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32) + 80LL;
    int v5 = 136446722;
    id v6 = "nw_path_evaluator_call_update_handler_block_invoke";
    __int16 v7 = 1042;
    int v8 = 16;
    __int16 v9 = 2098;
    uint64_t v10 = v3;
    _os_log_impl( &dword_181A5C000,  v2,  OS_LOG_TYPE_INFO,  "%{public}s [%{public,uuid_t}.16P] delivering update",  (uint8_t *)&v5,  0x1Cu);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

uint64_t __nw_path_evaluator_cancel_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t __nw_path_evaluator_cancel_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void nw_path_evaluator_set_cancel_handler(os_unfair_lock_s *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = a1 + 24;
    id v4 = a2;
    __int16 v7 = a1;
    os_unfair_lock_lock(v3);
    int v5 = _Block_copy(v4);

    id v6 = *(void **)&v7[18]._os_unfair_lock_opaque;
    *(void *)&v7[18]._uint32_t os_unfair_lock_opaque = v5;

    os_unfair_lock_unlock(v3);
  }

uint64_t nw_path_get_custom_ethertype(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_path_t v1 = a1;
  nw_path_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[192];
    goto LABEL_3;
  }

  __nwlog_obj();
  int v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_path_get_custom_ethertype";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_get_custom_ethertype";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v16 = "nw_path_get_custom_ethertype";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_get_custom_ethertype";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int16 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_get_custom_ethertype";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

BOOL nw_path_is_flow_divert(void *a1)
{
  nw_path_t v1 = a1;
  if (v1)
  {
    if (v1[88]) {
      BOOL v2 = 1LL;
    }
    else {
      BOOL v2 = v1[66] == 4;
    }
  }

  else
  {
    BOOL v2 = 0LL;
  }

  return v2;
}

uint64_t nw_path_get_flow_divert_unit(void *a1)
{
  nw_path_t v1 = a1;
  if (v1 && v1[66] == 4) {
    uint64_t v2 = v1[67];
  }
  else {
    uint64_t v2 = 0LL;
  }

  return v2;
}

uint64_t nw_path_get_flow_divert_aggregate_unit(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 352);
  }
  return result;
}

uint64_t nw_path_get_filter_unit(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 272);
  }
  return result;
}

uint64_t nw_path_get_interface_time_delta(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_path_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[92];
    goto LABEL_3;
  }

  __nwlog_obj();
  int v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_path_get_interface_time_delta";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_get_interface_time_delta";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      __int16 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v16 = "nw_path_get_interface_time_delta";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_get_interface_time_delta";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      __int16 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_get_interface_time_delta";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

uint64_t nw_path_get_maximum_datagram_size(void *a1)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  nw_path_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t mtu = nw_path_get_mtu(v1);
    uint64_t v4 = mtu;
    if ((_DWORD)mtu) {
      unsigned int v5 = mtu;
    }
    else {
      unsigned int v5 = 1500;
    }
    if (v5 >= 0x3C)
    {
      id v6 = v2[3];
      if (v6
        && (id v7 = v6, v8 = [v7 type], v7, v8 == 1)
        && nw_endpoint_get_address_family(v2[3]) == 2)
      {
        int v9 = -20;
      }

      else
      {
        int v9 = -40;
      }

      else {
        int v10 = -20;
      }
      uint64_t v4 = v10 + v5 + v9;
    }

    goto LABEL_15;
  }

  __nwlog_obj();
  os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  char v23 = "nw_path_get_maximum_datagram_size";
  char v13 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v13, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v23 = "nw_path_get_maximum_datagram_size";
        _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type;
      BOOL v18 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)int buf = 136446466;
          char v23 = "nw_path_get_maximum_datagram_size";
          __int16 v24 = 2082;
          BOOL v25 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v14,  v17,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_32;
      }

      if (v18)
      {
        *(_DWORD *)int buf = 136446210;
        char v23 = "nw_path_get_maximum_datagram_size";
        _os_log_impl(&dword_181A5C000, v14, v17, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v23 = "nw_path_get_maximum_datagram_size";
        _os_log_impl( &dword_181A5C000,  v14,  v19,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1824717BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_path_get_ipv6_network_signature(void *a1, void *a2, _BYTE *a3)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  unsigned int v5 = a1;
  id v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    int v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    __int16 v31 = "nw_path_get_ipv6_network_signature";
    int v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v31 = "nw_path_get_ipv6_network_signature";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null path", buf, 0xCu);
      }

      goto LABEL_54;
    }

    if (!v28)
    {
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v31 = "nw_path_get_ipv6_network_signature";
        _os_log_impl( &dword_181A5C000,  v11,  v24,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_54;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v18 = type;
    BOOL v19 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v31 = "nw_path_get_ipv6_network_signature";
        _os_log_impl(&dword_181A5C000, v11, v18, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }

      goto LABEL_54;
    }

    if (v19)
    {
      *(_DWORD *)int buf = 136446466;
      __int16 v31 = "nw_path_get_ipv6_network_signature";
      __int16 v32 = 2082;
      __int16 v33 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v11,  v18,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_36;
  }

  if (!a2)
  {
    __nwlog_obj();
    char v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    __int16 v31 = "nw_path_get_ipv6_network_signature";
    int v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v31 = "nw_path_get_ipv6_network_signature";
        _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null signature", buf, 0xCu);
      }

      goto LABEL_54;
    }

    if (!v28)
    {
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v31 = "nw_path_get_ipv6_network_signature";
        _os_log_impl( &dword_181A5C000,  v11,  v25,  "%{public}s called with null signature, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_54;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v20 = type;
    BOOL v21 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v31 = "nw_path_get_ipv6_network_signature";
        _os_log_impl(&dword_181A5C000, v11, v20, "%{public}s called with null signature, no backtrace", buf, 0xCu);
      }

      goto LABEL_54;
    }

    if (v21)
    {
      *(_DWORD *)int buf = 136446466;
      __int16 v31 = "nw_path_get_ipv6_network_signature";
      __int16 v32 = 2082;
      __int16 v33 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v11,  v20,  "%{public}s called with null signature, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_36;
  }

  if (!a3)
  {
    __nwlog_obj();
    os_log_type_t v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    __int16 v31 = "nw_path_get_ipv6_network_signature";
    int v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v31 = "nw_path_get_ipv6_network_signature";
        _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null signature_len", buf, 0xCu);
      }

void sub_182471EAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_path_is_defunct(NWConcrete_nw_path *a1, NWConcrete_nw_path_flow_registration *a2)
{
  uint64_t v2 = (unsigned __int8 *)nw_path_copy_flow_for_registration(a1, a2);
  if (v2) {
    uint64_t v3 = (v2[186] >> 2) & 1;
  }
  else {
    uint64_t v3 = 0LL;
  }

  return v3;
}

uint64_t nw_path_flow_registration_fast_open_blocked( NWConcrete_nw_path *a1, NWConcrete_nw_path_flow_registration *a2)
{
  uint64_t v2 = (unsigned __int8 *)nw_path_copy_flow_for_registration(a1, a2);
  if (v2) {
    uint64_t v3 = (v2[185] >> 3) & 1;
  }
  else {
    uint64_t v3 = 0LL;
  }

  return v3;
}

uint64_t nw_path_link_quality_abort(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_path_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[474] >> 6) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_path_link_quality_abort";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_link_quality_abort";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v16 = "nw_path_link_quality_abort";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_link_quality_abort";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_link_quality_abort";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

uint64_t nw_path_listener_is_interface_specific(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_path_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[475] >> 2) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_path_listener_is_interface_specific";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_listener_is_interface_specific";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v16 = "nw_path_listener_is_interface_specific";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_listener_is_interface_specific";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_listener_is_interface_specific";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

uint64_t nw_path_is_traffic_mgmt_background(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_path_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[474] >> 1) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_path_is_traffic_mgmt_background";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_is_traffic_mgmt_background";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v16 = "nw_path_is_traffic_mgmt_background";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_is_traffic_mgmt_background";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_is_traffic_mgmt_background";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

size_t nw_path_signature_changed_from_previous(void *a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  unsigned int v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__s1 = 136446210;
    *(void *)&__s1[4] = "nw_path_signature_changed_from_previous";
    int v9 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(__s2[0]) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type[0];
      if (os_log_type_enabled(v10, type[0]))
      {
        *(_DWORD *)__s1 = 136446210;
        *(void *)&__s1[4] = "nw_path_signature_changed_from_previous";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null path", __s1, 0xCu);
      }

      goto LABEL_42;
    }

    if (!LOBYTE(__s2[0]))
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type[0];
      if (os_log_type_enabled(v10, type[0]))
      {
        *(_DWORD *)__s1 = 136446210;
        *(void *)&__s1[4] = "nw_path_signature_changed_from_previous";
        _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null path, backtrace limit exceeded",  __s1,  0xCu);
      }

      goto LABEL_42;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v15 = type[0];
    BOOL v16 = os_log_type_enabled(v10, type[0]);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)__s1 = 136446210;
        *(void *)&__s1[4] = "nw_path_signature_changed_from_previous";
        _os_log_impl(&dword_181A5C000, v10, v15, "%{public}s called with null path, no backtrace", __s1, 0xCu);
      }

      goto LABEL_42;
    }

    if (v16)
    {
      *(_DWORD *)__s1 = 136446466;
      *(void *)&__s1[4] = "nw_path_signature_changed_from_previous";
      *(_WORD *)&__s1[12] = 2082;
      *(void *)&__s1[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null path, dumping backtrace:%{public}s",  __s1,  0x16u);
    }

    goto LABEL_30;
  }

  if (!v4)
  {
    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__s1 = 136446210;
    *(void *)&__s1[4] = "nw_path_signature_changed_from_previous";
    int v9 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(__s2[0]) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type[0];
      if (os_log_type_enabled(v10, type[0]))
      {
        *(_DWORD *)__s1 = 136446210;
        *(void *)&__s1[4] = "nw_path_signature_changed_from_previous";
        _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null previous_path", __s1, 0xCu);
      }

void sub_182472C64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_path_flow_registration_get_ctl_command(void *a1, void *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  int v9 = a1;
  os_log_type_t v10 = a2;
  if (a3)
  {
    if (a4)
    {
      os_log_type_t v11 = nw_path_copy_flow_for_registration(v9, v10);
      if (v11 && (*((_BYTE *)v11 + 186) & 2) != 0)
      {
        *a3 = v11[43];
        *a4 = v11[44];
        if (a5) {
          *a5 = v11[45];
        }
        uint64_t v12 = 1LL;
      }

      else
      {
        uint64_t v12 = 0LL;
      }

      goto LABEL_10;
    }

    __nwlog_obj();
    BOOL v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    int v30 = "nw_path_flow_registration_get_ctl_command";
    os_log_type_t v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (__nwlog_fault(v15, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)int buf = 136446210;
          int v30 = "nw_path_flow_registration_get_ctl_command";
          _os_log_impl(&dword_181A5C000, v16, v19, "%{public}s called with null value", buf, 0xCu);
        }

uint64_t nw_path_get_connected_interface_index(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  nw_path_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[11];
    if (v3)
    {
      uint64_t v4 = *((unsigned int *)v3 + 2);
    }

    else
    {
      *(void *)int buf = 0LL;
      *(void *)&buf[8] = buf;
      int v19 = 0;
      *(void *)&buf[16] = 0x2020000000LL;
      unsigned int v5 = v1[9];
      v15[0] = MEMORY[0x1895F87A8];
      v15[1] = 3221225472LL;
      void v15[2] = __nw_path_get_connected_interface_index_block_invoke;
      v15[3] = &unk_189BC50D0;
      void v15[4] = buf;
      nw_array_apply(v5, (uint64_t)v15);
      uint64_t v4 = *(unsigned int *)(*(void *)&buf[8] + 24LL);
      _Block_object_dispose(buf, 8);
    }

    goto LABEL_5;
  }

  __nwlog_obj();
  id v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_path_get_connected_interface_index";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v8, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_get_connected_interface_index";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_get_connected_interface_index";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&_BYTE buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v13)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_get_connected_interface_index";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_get_connected_interface_index";
        _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

uint64_t __nw_path_get_connected_interface_index_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  unsigned int v5 = v4;
  uint64_t v6 = *((void *)v4 + 2);
  if (v6 && (*((_BYTE *)v4 + 185) & 1) != 0)
  {
    uint64_t v7 = 0LL;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_DWORD *)(v6 + 8);
  }

  else
  {
    uint64_t v7 = 1LL;
  }

  return v7;
}

uint64_t nw_path_get_alternate_path_state(void *a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    BOOL v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    BOOL v24 = "nw_path_get_alternate_path_state";
    os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v14, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v24 = "nw_path_get_alternate_path_state";
          _os_log_impl(&dword_181A5C000, v15, v16, "%{public}s called with null connected_path", buf, 0xCu);
        }
      }

      else if (v21)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        BOOL v19 = os_log_type_enabled(v15, type);
        if (backtrace_string)
        {
          if (v19)
          {
            *(_DWORD *)int buf = 136446466;
            BOOL v24 = "nw_path_get_alternate_path_state";
            __int16 v25 = 2082;
            os_log_type_t v26 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v15,  v18,  "%{public}s called with null connected_path, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_35;
        }

        if (v19)
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v24 = "nw_path_get_alternate_path_state";
          _os_log_impl( &dword_181A5C000,  v15,  v18,  "%{public}s called with null connected_path, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v20 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v24 = "nw_path_get_alternate_path_state";
          _os_log_impl( &dword_181A5C000,  v15,  v20,  "%{public}s called with null connected_path, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_182473838(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_is_tunnelled(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    BOOL v3 = *((_DWORD *)v1 + 66) == 6;
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_path_is_tunnelled";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_is_tunnelled";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v16 = "nw_path_is_tunnelled";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_is_tunnelled";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_is_tunnelled";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

uint64_t nw_path_get_scoped_interface_index(void *a1)
{
  id v1 = a1;
  if (v1 && ((v2 = v1[66], v2 != 12) ? (BOOL v3 = v2 == 6) : (BOOL v3 = 1), v3)) {
    uint64_t v4 = v1[67];
  }
  else {
    uint64_t v4 = 0LL;
  }

  return v4;
}

uint64_t nw_path_has_nat64_prefixes(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((_BYTE *)v1 + 474) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_path_has_nat64_prefixes";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_has_nat64_prefixes";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v16 = "nw_path_has_nat64_prefixes";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_has_nat64_prefixes";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_has_nat64_prefixes";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

char *nw_path_nat64_prefixes(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1 + 392;
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_path_nat64_prefixes";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_nat64_prefixes";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v16 = "nw_path_nat64_prefixes";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_nat64_prefixes";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_nat64_prefixes";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

uint64_t nw_path_has_kernel_extension_filter(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[476] >> 3) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_path_has_kernel_extension_filter";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_has_kernel_extension_filter";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v16 = "nw_path_has_kernel_extension_filter";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_has_kernel_extension_filter";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_has_kernel_extension_filter";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

uint64_t nw_path_has_custom_pf_rules(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[476] >> 4) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_path_has_custom_pf_rules";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_has_custom_pf_rules";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v16 = "nw_path_has_custom_pf_rules";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_has_custom_pf_rules";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_has_custom_pf_rules";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

uint64_t nw_path_has_application_level_firewall(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[476] >> 5) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_path_has_application_level_firewall";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_has_application_level_firewall";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v16 = "nw_path_has_application_level_firewall";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_has_application_level_firewall";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_has_application_level_firewall";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

uint64_t nw_path_has_parental_controls(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[476] >> 6) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_path_has_parental_controls";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_has_parental_controls";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v16 = "nw_path_has_parental_controls";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_has_parental_controls";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_has_parental_controls";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

uint64_t nw_path_is_eligible_for_CrazyIvan46(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  int v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_is_eligible_for_CrazyIvan46";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v8, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_is_eligible_for_CrazyIvan46";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null path", buf, 0xCu);
        }
      }

      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_is_eligible_for_CrazyIvan46";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&_BYTE buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }

        if (v13)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_is_eligible_for_CrazyIvan46";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_is_eligible_for_CrazyIvan46";
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_182474DE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_path_is_override_expensive(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[475] >> 3) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  char v16 = "nw_path_is_override_expensive";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_is_override_expensive";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          char v16 = "nw_path_is_override_expensive";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_is_override_expensive";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_is_override_expensive";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

uint64_t nw_path_is_override_constrained(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[475] >> 4) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  char v16 = "nw_path_is_override_constrained";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_is_override_constrained";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          char v16 = "nw_path_is_override_constrained";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_is_override_constrained";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_is_override_constrained";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

nw_path_unsatisfied_reason_t nw_path_get_unsatisfied_reason(nw_path_t path)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  nw_path_t v1 = path;
  nw_path_t v2 = v1;
  if (v1)
  {
    int v3 = *((_DWORD *)v1 + 95);
    unsigned int v4 = v3 - 27;
    nw_path_unsatisfied_reason_t v5 = v3 - 26;
    if (v4 >= 4) {
      nw_path_unsatisfied_reason_t v6 = nw_path_unsatisfied_reason_not_available;
    }
    else {
      nw_path_unsatisfied_reason_t v6 = v5;
    }
    goto LABEL_5;
  }

  __nwlog_obj();
  os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  uint64_t v19 = "nw_path_get_unsatisfied_reason";
  int v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v19 = "nw_path_get_unsatisfied_reason";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v19 = "nw_path_get_unsatisfied_reason";
          __int16 v20 = 2082;
          uint64_t v21 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v14)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v19 = "nw_path_get_unsatisfied_reason";
        _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v19 = "nw_path_get_unsatisfied_reason";
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_path_get_reason(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  nw_path_t v1 = a1;
  nw_path_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[95];
    goto LABEL_3;
  }

  __nwlog_obj();
  nw_path_unsatisfied_reason_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  char v16 = "nw_path_get_reason";
  nw_path_unsatisfied_reason_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_get_reason";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          char v16 = "nw_path_get_reason";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_get_reason";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_get_reason";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

uint64_t nw_path_get_reason_description(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  nw_path_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((void *)v1 + 31);
    goto LABEL_3;
  }

  __nwlog_obj();
  nw_path_unsatisfied_reason_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  char v16 = "nw_path_get_reason_description";
  nw_path_unsatisfied_reason_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_get_reason_description";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          char v16 = "nw_path_get_reason_description";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_get_reason_description";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_get_reason_description";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

NWConcrete_nw_interface *nw_path_copy_interface_from_cache(unsigned int a1)
{
  if (nw_context_copy_implicit_context::onceToken != -1) {
    dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
  }
  id v2 = (id)nw_context_copy_implicit_context::implicit_context;
  uint64_t v3 = nw_path_copy_interface_with_generation(v2, a1, 0);

  return v3;
}

void sub_182475B70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_agent_action(NWConcrete_nw_path *a1, const unsigned __int8 *a2, int a3)
{
  uint64_t v67 = *MEMORY[0x1895F89C0];
  nw_path_unsatisfied_reason_t v5 = a1;
  if (!v5)
  {
    __nwlog_obj();
    __int16 v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v64 = "nw_path_agent_action";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v61 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v32 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v64 = "nw_path_agent_action";
        _os_log_impl(&dword_181A5C000, v8, v32, "%{public}s called with null path", buf, 0xCu);
      }

      goto LABEL_29;
    }

    if (!v61)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v47 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v64 = "nw_path_agent_action";
        _os_log_impl(&dword_181A5C000, v8, v47, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }

      goto LABEL_29;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v34 = type;
    BOOL v35 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v35)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v64 = "nw_path_agent_action";
        _os_log_impl(&dword_181A5C000, v8, v34, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }

      goto LABEL_29;
    }

    if (v35)
    {
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v64 = "nw_path_agent_action";
      __int16 v65 = 2082;
      *(void *)os_log_type_t v66 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v8,  v34,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_62;
  }

  if (uuid_is_null(a2))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (id)gLogObj;
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v64 = "nw_path_agent_action";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v61 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (os_log_s *)(id)gLogObj;
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v64 = "nw_path_agent_action";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null agent_uuid", buf, 0xCu);
      }
    }

    else if (v61)
    {
      os_log_type_t v18 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (os_log_s *)(id)gLogObj;
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled(v8, type);
      if (v18)
      {
        if (v20)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v64 = "nw_path_agent_action";
          __int16 v65 = 2082;
          *(void *)os_log_type_t v66 = v18;
          _os_log_impl( &dword_181A5C000,  v8,  v19,  "%{public}s called with null agent_uuid, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v18);
        if (!v7) {
          goto LABEL_32;
        }
        goto LABEL_31;
      }

      if (v20)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v64 = "nw_path_agent_action";
        _os_log_impl(&dword_181A5C000, v8, v19, "%{public}s called with null agent_uuid, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v8 = (os_log_s *)(id)gLogObj;
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v64 = "nw_path_agent_action";
        _os_log_impl( &dword_181A5C000,  v8,  v21,  "%{public}s called with null agent_uuid, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_29;
  }

  id v10 = nw_parameters_copy_context(v5->parameters);
  int v11 = nw_path_shared_necp_fd(v10);

  if (v11 < 0) {
    goto LABEL_32;
  }
  os_log_type_t v12 = (char *)calloc(1uLL, 0x15uLL);
  char v13 = v12;
  if (v12)
  {
    *os_log_type_t v12 = a3;
    *(_DWORD *)(v12 + 1) = 16;
    if (a2)
    {
      *(_OWORD *)(v12 + 5) = *(_OWORD *)a2;
      goto LABEL_12;
    }

    __nwlog_obj();
    id v42 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446722;
    os_log_type_t v64 = "nw_necp_append_tlv";
    __int16 v65 = 1024;
    int v43 = a3;
    *(_DWORD *)os_log_type_t v66 = a3;
    *(_WORD *)&v66[4] = 1024;
    *(_DWORD *)&v66[6] = 16;
    __int16 v44 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v61 = 0;
    if (__nwlog_fault(v44, &type, &v61))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v45 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v46 = type;
        if (os_log_type_enabled(v45, type))
        {
          *(_DWORD *)int buf = 136446722;
          os_log_type_t v64 = "nw_necp_append_tlv";
          __int16 v65 = 1024;
          *(_DWORD *)os_log_type_t v66 = v43;
          *(_WORD *)&v66[4] = 1024;
          *(_DWORD *)&v66[6] = 16;
          _os_log_impl(&dword_181A5C000, v45, v46, "%{public}s type=%u length=%u but value is NULL", buf, 0x18u);
        }
      }

      else if (v61)
      {
        BOOL v51 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v45 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v52 = type;
        BOOL v53 = os_log_type_enabled(v45, type);
        if (v51)
        {
          if (v53)
          {
            *(_DWORD *)int buf = 136446978;
            os_log_type_t v64 = "nw_necp_append_tlv";
            __int16 v65 = 1024;
            *(_DWORD *)os_log_type_t v66 = v43;
            *(_WORD *)&v66[4] = 1024;
            *(_DWORD *)&v66[6] = 16;
            *(_WORD *)&v66[10] = 2082;
            *(void *)&v66[12] = v51;
            _os_log_impl( &dword_181A5C000,  v45,  v52,  "%{public}s type=%u length=%u but value is NULL, dumping backtrace:%{public}s",  buf,  0x22u);
          }

          free(v51);
          goto LABEL_120;
        }

        if (v53)
        {
          *(_DWORD *)int buf = 136446722;
          os_log_type_t v64 = "nw_necp_append_tlv";
          __int16 v65 = 1024;
          *(_DWORD *)os_log_type_t v66 = v43;
          *(_WORD *)&v66[4] = 1024;
          *(_DWORD *)&v66[6] = 16;
          _os_log_impl( &dword_181A5C000,  v45,  v52,  "%{public}s type=%u length=%u but value is NULL, no backtrace",  buf,  0x18u);
        }
      }

      else
      {
        __nwlog_obj();
        id v45 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v55 = type;
        if (os_log_type_enabled(v45, type))
        {
          *(_DWORD *)int buf = 136446722;
          os_log_type_t v64 = "nw_necp_append_tlv";
          __int16 v65 = 1024;
          *(_DWORD *)os_log_type_t v66 = v43;
          *(_WORD *)&v66[4] = 1024;
          *(_DWORD *)&v66[6] = 16;
          _os_log_impl( &dword_181A5C000,  v45,  v55,  "%{public}s type=%u length=%u but value is NULL, backtrace limit exceeded",  buf,  0x18u);
        }
      }
    }

void sub_182476B48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_assert_agent(NWConcrete_nw_path *a1, const unsigned __int8 *a2)
{
  return nw_path_agent_action(a1, a2, 131);
}

const char *nw_path_evaluator_get_error_string(unsigned int a1)
{
  if (a1 > 2) {
    return "unknown error";
  }
  else {
    return off_189BC56A8[a1];
  }
}

uint64_t nw_path_evaluator_trigger_agents(void *a1, char a2, char a3, void *a4)
{
  uint64_t v7 = a1;
  id v8 = a4;
  uint64_t v26 = 0LL;
  os_log_type_t v27 = &v26;
  uint64_t v28 = 0x2020000000LL;
  char v29 = 0;
  uint64_t v22 = 0LL;
  os_log_type_t v23 = &v22;
  uint64_t v24 = 0x2020000000LL;
  char v25 = 0;
  if (v7 && (os_log_type_t v9 = (void *)v7[6]) != 0LL)
  {
    id v10 = v9;
    int v11 = v10;
    os_log_type_t v12 = (void *)*((void *)v10 + 28);
    if (!v12) {
      goto LABEL_14;
    }
    v15[0] = MEMORY[0x1895F87A8];
    v15[1] = 3221225472LL;
    void v15[2] = __nw_path_evaluator_trigger_agents_block_invoke;
    v15[3] = &unk_189BC5198;
    char v20 = a2;
    char v21 = a3;
    void v15[4] = v10;
    os_log_type_t v18 = &v26;
    os_log_type_t v19 = &v22;
    int v16 = v7;
    id v17 = v8;
    xpc_dictionary_apply(v12, v15);

    if (*((_BYTE *)v23 + 24))
    {
      uint64_t v13 = 0LL;
    }

    else
    {
LABEL_14:
      if (*((_BYTE *)v27 + 24)) {
        uint64_t v13 = 1LL;
      }
      else {
        uint64_t v13 = 2LL;
      }
    }
  }

  else
  {
    uint64_t v13 = 0LL;
  }

  _Block_object_dispose(&v22, 8);
  _Block_object_dispose(&v26, 8);

  return v13;
}

void sub_182476D04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v14 - 80), 8);

  _Unwind_Resume(a1);
}

BOOL __nw_path_evaluator_trigger_agents_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  id v4 = a3;
  nw_path_unsatisfied_reason_t v5 = v4;
  *(void *)uint64_t v24 = 0LL;
  if (!v4) {
    goto LABEL_14;
  }
  data = (unsigned int *)xpc_dictionary_get_data(v4, "data", (size_t *)v24);
  if (!data) {
    goto LABEL_14;
  }
  if (*(void *)v24 < 0xD8uLL) {
    goto LABEL_14;
  }
  uint64_t v7 = data;
  if (*(void *)v24 != data[53] + 216LL) {
    goto LABEL_14;
  }
  BOOL is_required = nw_path_netagent_is_required(*(void **)(a1 + 32), v5);
  uint64_t v9 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v9 + 376) == 3 && !*(_DWORD *)(v9 + 320))
  {
    int v11 = v7 + 52;
    unsigned int v10 = v7[52];
LABEL_10:
    BOOL v12 = *(_BYTE *)(a1 + 72) != 0;
    goto LABEL_11;
  }

  int v11 = v7 + 52;
  unsigned int v10 = v7[52];
  if (!is_required) {
    goto LABEL_10;
  }
LABEL_8:
  BOOL v12 = 1;
LABEL_11:
  if ((v10 & 3) != 1 || (v10 & 0x40) == 0 && *(_BYTE *)(a1 + 73))
  {
LABEL_14:
    BOOL v13 = 1LL;
    goto LABEL_15;
  }

  BOOL v13 = 1LL;
  if ((!v12 & (v10 >> 4) & 1) == 0)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = 1;
    if ((v10 & 1) != 0 && (v10 & 0xC) != 0)
    {
      *(_OWORD *)uuid_t uu = *(_OWORD *)v7;
      if (!uuid_is_null(uu))
      {
        BOOL v15 = *(NWConcrete_nw_path **)(a1 + 32);
        if ((*((_BYTE *)v11 + 1) & 2) != 0)
        {
          *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = nw_path_agent_action(v15, uu, 131);
          int v16 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
          id v17 = "assert";
          os_log_type_t v18 = "assert failed";
        }

        else
        {
          *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = nw_path_agent_action(v15, uu, 130);
          int v16 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
          id v17 = "triggered";
          os_log_type_t v18 = "trigger failed";
        }

        if (v16) {
          os_log_type_t v19 = v17;
        }
        else {
          os_log_type_t v19 = v18;
        }
        if (__nwlog_path_log::onceToken[0] != -1) {
          dispatch_once(__nwlog_path_log::onceToken, &__block_literal_global_39_44346);
        }
        char v20 = (os_log_s *)(id)gpathLogObj;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v21 = *(void *)(a1 + 40) + 80LL;
          unsigned int v22 = v7[52];
          *(_DWORD *)uint64_t v24 = 136447746;
          *(void *)&v24[4] = "nw_path_evaluator_trigger_agents_block_invoke";
          __int16 v25 = 1042;
          int v26 = 16;
          __int16 v27 = 2098;
          uint64_t v28 = v21;
          __int16 v29 = 2082;
          int v30 = v19;
          __int16 v31 = 2082;
          os_log_type_t v32 = v7 + 4;
          __int16 v33 = 2082;
          os_log_type_t v34 = v7 + 12;
          __int16 v35 = 1024;
          unsigned int v36 = v22;
          _os_log_impl( &dword_181A5C000,  v20,  OS_LOG_TYPE_DEFAULT,  "%{public}s [%{public,uuid_t}.16P] agent %{public}s %{public}s:%{public}s flags: 0x%x",  v24,  0x40u);
        }

        os_log_type_t v23 = *(void **)(a1 + 48);
        if (v23 && object_getClass(v23) == (Class)MEMORY[0x1895F9220]) {
          xpc_array_set_uuid(*(xpc_object_t *)(a1 + 48), 0xFFFFFFFFFFFFFFFFLL, uu);
        }
      }

      BOOL v13 = *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) != 0;
    }
  }

void sub_182477048(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_trigger_agent(NWConcrete_nw_path *a1, const unsigned __int8 *a2)
{
  return nw_path_agent_action(a1, a2, 130);
}

BOOL nw_path_trigger_inactive_cellular_agent_if_necessary(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    nw_path_unsatisfied_reason_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_trigger_inactive_cellular_agent_if_necessary";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v6, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_trigger_inactive_cellular_agent_if_necessary";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
        }
      }

      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_trigger_inactive_cellular_agent_if_necessary";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&_BYTE buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }

        if (v11)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_trigger_inactive_cellular_agent_if_necessary";
          _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_trigger_inactive_cellular_agent_if_necessary";
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_1824773A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_path_trigger_inactive_cellular_agent_if_necessary_block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  nw_path_unsatisfied_reason_t v5 = v4;
  size_t length = 0LL;
  if (v4)
  {
    data = (const char *)xpc_dictionary_get_data(v4, "data", &length);
    if (data)
    {
      if (length >= 0xD8)
      {
        uint64_t v7 = data;
        if (length == *((unsigned int *)data + 53) + 216LL
          && (data[208] & 2) == 0
          && !strncmp(data + 16, "Cellular", 0x20uLL)
          && !strncmp(v7 + 48, "Internet", 0x20uLL))
        {
          nw_path_agent_action(*(NWConcrete_nw_path **)(a1 + 32), (const unsigned __int8 *)v7, 130);
          *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
        }
      }
    }
  }

  return 1LL;
}

void sub_1824774A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_path_evaluator *nw_path_flow_registration_copy_parent_evaluator( NWConcrete_nw_path_flow_registration *a1)
{
  id v1 = a1;
  id v2 = v1;
  parent_evaluator = v1->parent_evaluator;
  if (parent_evaluator)
  {
    id v4 = parent_evaluator;
  }

  else
  {
    subflow_registrations = (unsigned __int8 *)v1->subflow_registrations;
    if (subflow_registrations)
    {
      uint64_t v8 = 0LL;
      uint64_t v9 = &v8;
      uint64_t v10 = 0x3032000000LL;
      BOOL v11 = __Block_byref_object_copy__67543;
      os_log_type_t v12 = __Block_byref_object_dispose__67544;
      id v13 = 0LL;
      v7[0] = MEMORY[0x1895F87A8];
      v7[1] = 3221225472LL;
      v7[2] = ___ZL47nw_path_flow_registration_copy_parent_evaluatorP36NWConcrete_nw_path_flow_registration_block_invoke;
      v7[3] = &unk_189BC50D0;
      v7[4] = &v8;
      nw_array_apply(subflow_registrations, (uint64_t)v7);
      id v4 = (NWConcrete_nw_path_evaluator *)(id)v9[5];
      _Block_object_dispose(&v8, 8);
    }

    else
    {
      id v4 = 0LL;
    }
  }

  return v4;
}

BOOL ___ZL47nw_path_flow_registration_copy_parent_evaluatorP36NWConcrete_nw_path_flow_registration_block_invoke( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 8);
  if (v3) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), *(id *)(a3 + 8));
  }
  return v3 == 0;
}

void nw_path_flow_registration_set_tfo_cache(void *a1, void *a2, uint64_t a3)
{
  *(void *)&v43[13] = *MEMORY[0x1895F89C0];
  nw_path_unsatisfied_reason_t v5 = a1;
  id v6 = a2;
  uint64_t v7 = v6;
  if (!v5)
  {
    __nwlog_obj();
    char v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v41 = "nw_path_flow_registration_set_tfo_cache";
    id v13 = (char *)_os_log_send_and_compose_impl();

    v37[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (v37[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v22 = v37[0];
      if (os_log_type_enabled(v21, v37[0]))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v41 = "nw_path_flow_registration_set_tfo_cache";
        _os_log_impl(&dword_181A5C000, v21, v22, "%{public}s called with null path", buf, 0xCu);
      }

      goto LABEL_78;
    }

    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v33 = v37[0];
      if (os_log_type_enabled(v21, v37[0]))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v41 = "nw_path_flow_registration_set_tfo_cache";
        _os_log_impl( &dword_181A5C000,  v21,  v33,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_78;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v27 = v37[0];
    BOOL v28 = os_log_type_enabled(v21, v37[0]);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v41 = "nw_path_flow_registration_set_tfo_cache";
        _os_log_impl(&dword_181A5C000, v21, v27, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }

      goto LABEL_78;
    }

    if (v28)
    {
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v41 = "nw_path_flow_registration_set_tfo_cache";
      __int16 v42 = 2082;
      *(void *)int v43 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v21,  v27,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_60;
  }

  if (!v6)
  {
    __nwlog_obj();
    os_log_type_t v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v41 = "nw_path_flow_registration_set_tfo_cache";
    id v13 = (char *)_os_log_send_and_compose_impl();

    v37[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (v37[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v24 = v37[0];
      if (os_log_type_enabled(v21, v37[0]))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v41 = "nw_path_flow_registration_set_tfo_cache";
        _os_log_impl(&dword_181A5C000, v21, v24, "%{public}s called with null flow_registration", buf, 0xCu);
      }

      goto LABEL_78;
    }

    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v34 = v37[0];
      if (os_log_type_enabled(v21, v37[0]))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v41 = "nw_path_flow_registration_set_tfo_cache";
        _os_log_impl( &dword_181A5C000,  v21,  v34,  "%{public}s called with null flow_registration, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_78;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v29 = v37[0];
    BOOL v30 = os_log_type_enabled(v21, v37[0]);
    if (!backtrace_string)
    {
      if (v30)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v41 = "nw_path_flow_registration_set_tfo_cache";
        _os_log_impl( &dword_181A5C000,  v21,  v29,  "%{public}s called with null flow_registration, no backtrace",  buf,  0xCu);
      }

      goto LABEL_78;
    }

    if (v30)
    {
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v41 = "nw_path_flow_registration_set_tfo_cache";
      __int16 v42 = 2082;
      *(void *)int v43 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v21,  v29,  "%{public}s called with null flow_registration, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_60;
  }

  if (!a3)
  {
    __nwlog_obj();
    __int16 v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v41 = "nw_path_flow_registration_set_tfo_cache";
    id v13 = (char *)_os_log_send_and_compose_impl();

    v37[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (v37[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v26 = v37[0];
      if (os_log_type_enabled(v21, v37[0]))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v41 = "nw_path_flow_registration_set_tfo_cache";
        _os_log_impl(&dword_181A5C000, v21, v26, "%{public}s called with null tfo_cache_buffer", buf, 0xCu);
      }

void sub_182477FAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_path_flow_registration_set_specific_use_only(void *a1, char a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    *((_BYTE *)v3 + 149) = *((_BYTE *)v3 + 149) & 0xFE | a2;
    goto LABEL_3;
  }

  __nwlog_obj();
  nw_path_unsatisfied_reason_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  int v16 = "nw_path_flow_registration_set_specific_use_only";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v16 = "nw_path_flow_registration_set_specific_use_only";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null flow_registration", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          int v16 = "nw_path_flow_registration_set_specific_use_only";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null flow_registration, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        int v16 = "nw_path_flow_registration_set_specific_use_only";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null flow_registration, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v16 = "nw_path_flow_registration_set_specific_use_only";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null flow_registration, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t nw_path_get_sysctls_region()
{
  if (nw_path_get_sysctls_region::sSysctlsRegion != -1) {
    dispatch_once(&nw_path_get_sysctls_region::sSysctlsRegion, &__block_literal_global_284);
  }
  return nw_path_get_sysctls_region::sysctls_region;
}

void __nw_path_get_sysctls_region_block_invoke()
{
  uint64_t v114 = *MEMORY[0x1895F89C0];
  if (nw_context_copy_implicit_context::onceToken != -1) {
    dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
  }
  id v0 = (id)nw_context_copy_implicit_context::implicit_context;
  int v1 = nw_path_shared_necp_fd(v0);

  if (v1 < 0) {
    return;
  }
  uint64_t v107 = 0LL;
  if (!necp_client_action())
  {
    nw_path_get_sysctls_region::sysctls_region = v107;
    goto LABEL_17;
  }

  int v2 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v3 = (id)gLogObj;
  *(_DWORD *)int buf = 136446978;
  os_log_type_t v109 = "nw_path_get_sysctls_region_block_invoke";
  __int16 v110 = 1024;
  *(_DWORD *)__int128 v111 = v1;
  *(_WORD *)&v111[4] = 2048;
  *(void *)&v111[6] = 8LL;
  *(_WORD *)&v111[14] = 1024;
  *(_DWORD *)&v111[16] = v2;
  id v4 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  char v106 = 0;
  if (!__nwlog_fault(v4, type, &v106))
  {
LABEL_10:
    if (!v4) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }

  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    nw_path_unsatisfied_reason_t v5 = (os_log_s *)(id)gLogObj;
    os_log_type_t v6 = type[0];
    if (os_log_type_enabled(v5, type[0]))
    {
      *(_DWORD *)int buf = 136446978;
      os_log_type_t v109 = "nw_path_get_sysctls_region_block_invoke";
      __int16 v110 = 1024;
      *(_DWORD *)__int128 v111 = v1;
      *(_WORD *)&v111[4] = 2048;
      *(void *)&v111[6] = 8LL;
      *(_WORD *)&v111[14] = 1024;
      *(_DWORD *)&v111[16] = v2;
      _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s necp_client_action(%d, NECP_CLIENT_ACTION_MAP_SYSCTLS, NULL, 0, &address, %zu) %{darwin.errno}d",  buf,  0x22u);
    }

void sub_18247C440(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_request_nexus(void *a1)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  int v1 = a1;
  if (v1)
  {
    nw_allow_use_of_dispatch_internal();
    id v2 = nw_parameters_copy_context(v1[2]);
    if ((nw_path_shared_necp_fd(v2) & 0x80000000) != 0)
    {
      BOOL v4 = 0LL;
    }

    else
    {
      int v3 = necp_client_action();
      BOOL v4 = v3 == 0;
      if (v3)
      {
        int v5 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v6 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v22 = "nw_path_request_nexus";
          __int16 v23 = 1024;
          LODWORD(v24) = v5;
          _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_ERROR,  "%{public}s NECP_CLIENT_ACTION_REQUEST_NEXUS_INSTANCE %{darwin.errno}d",  buf,  0x12u);
        }
      }

      else
      {
        v16[0] = MEMORY[0x1895F87A8];
        v16[1] = 3221225472LL;
        v16[2] = __nw_path_request_nexus_block_invoke;
        v16[3] = &unk_189BC9238;
        id v17 = v2;
        BOOL v18 = v1;
        nw_queue_context_async_if_needed(v17, v16);

        os_log_type_t v6 = (os_log_s *)v17;
      }
    }

    goto LABEL_10;
  }

  __nwlog_obj();
  int v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v22 = "nw_path_request_nexus";
  int v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v20 = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v9, &v20, &v19))
  {
    if (v20 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = v20;
      if (os_log_type_enabled(v10, v20))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v22 = "nw_path_request_nexus";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = v20;
      BOOL v14 = os_log_type_enabled(v10, v20);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v22 = "nw_path_request_nexus";
          __int16 v23 = 2082;
          os_log_type_t v24 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_27;
      }

      if (v14)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v22 = "nw_path_request_nexus";
        _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = v20;
      if (os_log_type_enabled(v10, v20))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v22 = "nw_path_request_nexus";
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18247C810( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_path_request_nexus_block_invoke(uint64_t a1)
{
}

BOOL nw_path_evaluator_request_nexus(void *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (v1)
  {
    nw_allow_use_of_dispatch_internal();
    id v2 = nw_parameters_copy_context(*((void **)v1 + 1));
    if ((nw_path_shared_necp_fd(v2) & 0x80000000) != 0)
    {
      BOOL v4 = 0LL;
    }

    else
    {
      int v3 = necp_client_action();
      BOOL v4 = v3 == 0;
      if (v3)
      {
        int v5 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v6 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v24 = "nw_path_evaluator_request_nexus";
          __int16 v25 = 1024;
          LODWORD(v26) = v5;
          _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_ERROR,  "%{public}s NECP_CLIENT_ACTION_REQUEST_NEXUS_INSTANCE %{darwin.errno}d",  buf,  0x12u);
        }
      }

      else
      {
        os_unfair_lock_lock((os_unfair_lock_t)v1 + 24);
        int v7 = *((_DWORD *)v1 + 25);
        os_unfair_lock_unlock((os_unfair_lock_t)v1 + 24);
        v17[0] = MEMORY[0x1895F87A8];
        v17[1] = 3221225472LL;
        v17[2] = __nw_path_evaluator_request_nexus_block_invoke;
        v17[3] = &unk_189BC92F0;
        id v18 = v2;
        id v19 = v1;
        int v20 = v7;
        nw_queue_context_async_if_needed(v18, v17);

        os_log_type_t v6 = (os_log_s *)v18;
      }
    }

    goto LABEL_10;
  }

  __nwlog_obj();
  int v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v24 = "nw_path_evaluator_request_nexus";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v22 = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (__nwlog_fault(v10, &v22, &v21))
  {
    if (v22 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = v22;
      if (os_log_type_enabled(v11, v22))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v24 = "nw_path_evaluator_request_nexus";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null evaluator", buf, 0xCu);
      }
    }

    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = v22;
      BOOL v15 = os_log_type_enabled(v11, v22);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v24 = "nw_path_evaluator_request_nexus";
          __int16 v25 = 2082;
          os_log_type_t v26 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v14,  "%{public}s called with null evaluator, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_27;
      }

      if (v15)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v24 = "nw_path_evaluator_request_nexus";
        _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null evaluator, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = v22;
      if (os_log_type_enabled(v11, v22))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v24 = "nw_path_evaluator_request_nexus";
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null evaluator, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18247CC34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_path_evaluator_request_nexus_block_invoke(uint64_t a1)
{
}

NWConcrete_nw_path_flow_registration *nw_path_evaluator_create_flow( void *a1, int a2, int a3, int a4, int a5, _OWORD *a6, _DWORD *a7)
{
  return nw_path_evaluator_create_flow_inner(a1, a2, a3, a4, a5, a6, 0LL, 0, a7);
}

NWConcrete_nw_path_flow_registration *nw_path_evaluator_create_flow_inner( void *a1, int a2, int a3, int a4, int a5, _OWORD *a6, void *a7, int a8, _DWORD *a9)
{
  uint64_t v64 = *MEMORY[0x1895F89C0];
  os_log_type_t v16 = a1;
  id v17 = a7;
  if (!v16)
  {
    __nwlog_obj();
    __int16 v44 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)uuid_string_t out = 136446210;
    *(void *)&out[4] = "nw_path_evaluator_create_flow_inner";
    id v45 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    char v55 = 0;
    if (__nwlog_fault(v45, buf, &v55))
    {
      if (buf[0] == 17)
      {
        __nwlog_obj();
        os_log_type_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v47 = buf[0];
        if (os_log_type_enabled(v46, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)uuid_string_t out = 136446210;
          *(void *)&out[4] = "nw_path_evaluator_create_flow_inner";
          _os_log_impl(&dword_181A5C000, v46, v47, "%{public}s called with null evaluator", out, 0xCu);
        }
      }

      else if (v55)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v49 = buf[0];
        BOOL v50 = os_log_type_enabled(v46, (os_log_type_t)buf[0]);
        if (backtrace_string)
        {
          if (v50)
          {
            *(_DWORD *)uuid_string_t out = 136446466;
            *(void *)&out[4] = "nw_path_evaluator_create_flow_inner";
            *(_WORD *)&out[12] = 2082;
            *(void *)&out[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v46,  v49,  "%{public}s called with null evaluator, dumping backtrace:%{public}s",  out,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_78;
        }

        if (v50)
        {
          *(_DWORD *)uuid_string_t out = 136446210;
          *(void *)&out[4] = "nw_path_evaluator_create_flow_inner";
          _os_log_impl(&dword_181A5C000, v46, v49, "%{public}s called with null evaluator, no backtrace", out, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v52 = buf[0];
        if (os_log_type_enabled(v46, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)uuid_string_t out = 136446210;
          *(void *)&out[4] = "nw_path_evaluator_create_flow_inner";
          _os_log_impl( &dword_181A5C000,  v46,  v52,  "%{public}s called with null evaluator, backtrace limit exceeded",  out,  0xCu);
        }
      }
    }

void sub_18247D514(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_path_flow_registration *nw_path_flow_registration_create( NWConcrete_nw_path_evaluator *a1, unsigned __int8 *a2)
{
  *(void *)&v37[13] = *MEMORY[0x1895F89C0];
  BOOL v4 = a1;
  internal = nw_path_flow_registration_create_internal();
  os_log_type_t v6 = internal;
  if (!internal)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v14 = (id)gLogObj;
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v35 = "nw_path_flow_registration_create";
    BOOL v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (__nwlog_fault(v15, &type, &v32))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v16 = (os_log_s *)(id)gLogObj;
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v35 = "nw_path_flow_registration_create";
          _os_log_impl( &dword_181A5C000,  v16,  v17,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_flow_registration) alloc] init] failed",  buf,  0xCu);
        }
      }

      else if (v32)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v16 = (os_log_s *)(id)gLogObj;
        os_log_type_t v20 = type;
        BOOL v21 = os_log_type_enabled(v16, type);
        if (backtrace_string)
        {
          if (v21)
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v35 = "nw_path_flow_registration_create";
            __int16 v36 = 2082;
            *(void *)os_log_type_t v37 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v16,  v20,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_flow_registration) alloc] init] failed, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          if (!v15) {
            goto LABEL_52;
          }
          goto LABEL_36;
        }

        if (v21)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v35 = "nw_path_flow_registration_create";
          _os_log_impl( &dword_181A5C000,  v16,  v20,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_flow_registration) alloc] init] failed, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v16 = (os_log_s *)(id)gLogObj;
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v35 = "nw_path_flow_registration_create";
          _os_log_impl( &dword_181A5C000,  v16,  v26,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_flow_registration) alloc] init] failed, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

    if (!v15)
    {
LABEL_52:
      os_log_type_t v13 = 0LL;
      goto LABEL_53;
    }

void sub_18247DC50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_flow_registration_get_key(const void *a1, unsigned int *a2)
{
  *a2 = 16;
  return (uint64_t)a1 + 32;
}

uint64_t nw_flow_registration_key_hash(int32x4_t *a1)
{
  return vaddvq_s32(*a1);
}

BOOL nw_flow_registration_matches_key(void *a1, void *a2)
{
  return a1[4] == *a2 && a1[5] == a2[1];
}

NWConcrete_nw_path_flow_registration *nw_path_flow_registration_create_new_flow( void *a1, int a2, int a3, int a4, int a5, _OWORD *a6, void *a7, int a8)
{
  uint64_t v50 = *MEMORY[0x1895F89C0];
  BOOL v15 = a1;
  id v16 = a7;
  if (v15)
  {
    os_log_type_t v17 = nw_path_flow_registration_copy_parent_evaluator(v15);
    id v18 = v17;
    if (v17)
    {
      flow_inner = nw_path_evaluator_create_flow_inner(v17, a2, a3, a4, a5, a6, v16, a8, 0LL);
      uint64_t subflow_registrations = (uint64_t)v15->subflow_registrations;
      if (!subflow_registrations)
      {
        BOOL v21 = nw_array_create();
        id v22 = v15->subflow_registrations;
        v15->uint64_t subflow_registrations = (OS_nw_array *)v21;

        uint64_t subflow_registrations = (uint64_t)v15->subflow_registrations;
      }

      nw_array_append(subflow_registrations, flow_inner);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v23 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        int v24 = v15->subflow_registrations;
        *(_DWORD *)int buf = 136446722;
        id v45 = "nw_path_flow_registration_create_new_flow";
        __int16 v46 = 2112;
        os_log_type_t v47 = (char *)v24;
        __int16 v48 = 2112;
        os_log_type_t v49 = v15;
        _os_log_impl( &dword_181A5C000,  v23,  OS_LOG_TYPE_INFO,  "%{public}s Added subflow registration %@ to %@",  buf,  0x20u);
      }

LABEL_8:
      goto LABEL_9;
    }

    __nwlog_obj();
    os_log_type_t v30 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    id v45 = "nw_path_flow_registration_create_new_flow";
    os_log_type_t v31 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v42 = 0;
    if (__nwlog_fault(v31, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        char v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v32, type))
        {
          *(_DWORD *)int buf = 136446210;
          id v45 = "nw_path_flow_registration_create_new_flow";
          _os_log_impl(&dword_181A5C000, v32, v33, "%{public}s called with null evaluator", buf, 0xCu);
        }
      }

      else if (v42)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        char v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v38 = type;
        BOOL v39 = os_log_type_enabled(v32, type);
        if (backtrace_string)
        {
          if (v39)
          {
            *(_DWORD *)int buf = 136446466;
            id v45 = "nw_path_flow_registration_create_new_flow";
            __int16 v46 = 2082;
            os_log_type_t v47 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v32,  v38,  "%{public}s called with null evaluator, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_45;
        }

        if (v39)
        {
          *(_DWORD *)int buf = 136446210;
          id v45 = "nw_path_flow_registration_create_new_flow";
          _os_log_impl(&dword_181A5C000, v32, v38, "%{public}s called with null evaluator, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        char v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v41 = type;
        if (os_log_type_enabled(v32, type))
        {
          *(_DWORD *)int buf = 136446210;
          id v45 = "nw_path_flow_registration_create_new_flow";
          _os_log_impl( &dword_181A5C000,  v32,  v41,  "%{public}s called with null evaluator, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_18247E270(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_path_flow_registration *nw_path_flow_registration_create_new_flow_from_evaluator( void *a1, void *a2)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  int v3 = a1;
  BOOL v4 = a2;
  int v5 = v4;
  if (v4)
  {
    os_unfair_lock_lock(v4 + 24);
    id v6 = *(id *)&v5[12]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v5 + 24);
    if (v6)
    {
      __int128 type = 0uLL;
      nw_path_get_nexus_agent_uuid(v6, &type);
      unsigned int v7 = nw_path_evaluator_create_flow_inner(v5, 1, 1, 0, 0, &type, 0LL, 0, 0LL);
      if (v3)
      {
        uint64_t v8 = v3[2];
        if (!v8)
        {
          BOOL v9 = nw_array_create();
          os_log_type_t v10 = (void *)v3[2];
          v3[2] = v9;

          uint64_t v8 = v3[2];
        }

        nw_array_append(v8, v7);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v11 = (os_log_s *)(id)gLogObj;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          BOOL v12 = (char *)v3[2];
          *(_DWORD *)int buf = 136446722;
          char v32 = "nw_path_flow_registration_create_new_flow_from_evaluator";
          __int16 v33 = 2112;
          int v34 = v12;
          __int16 v35 = 2112;
          BOOL v36 = v3;
          _os_log_impl( &dword_181A5C000,  v11,  OS_LOG_TYPE_INFO,  "%{public}s Added subflow registration %@ to %@",  buf,  0x20u);
        }
      }

void sub_18247E858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_path_get_nexus_agent_uuid(void *a1, _OWORD *a2)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  int v3 = a1;
  BOOL v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    id v19 = "nw_path_get_nexus_agent_uuid";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v9, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)int buf = 136446210;
          id v19 = "nw_path_get_nexus_agent_uuid";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null path", buf, 0xCu);
        }
      }

      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        BOOL v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)int buf = 136446466;
            id v19 = "nw_path_get_nexus_agent_uuid";
            __int16 v20 = 2082;
            os_log_type_t v21 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }

        if (v14)
        {
          *(_DWORD *)int buf = 136446210;
          id v19 = "nw_path_get_nexus_agent_uuid";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)int buf = 136446210;
          id v19 = "nw_path_get_nexus_agent_uuid";
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_18247EB48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_flow_registration_force_update(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    int v3 = nw_path_flow_registration_copy_parent_evaluator(v1);
    nw_path_evaluator_force_update(v3, v2);
    BOOL v4 = nw_path_flow_registration_copy_path(v2);

    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v17 = "nw_path_flow_registration_force_update";
  unsigned int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v17 = "nw_path_flow_registration_force_update";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null flow_registration", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v17 = "nw_path_flow_registration_force_update";
          __int16 v18 = 2082;
          id v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null flow_registration, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v12)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v17 = "nw_path_flow_registration_force_update";
        _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null flow_registration, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v17 = "nw_path_flow_registration_force_update";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null flow_registration, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_18247EE10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_path_flow_registration_copy_endpoint(void *a1)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    int v3 = nw_path_flow_registration_copy_parent_evaluator(v1);
    BOOL v4 = v3;
    if (v3) {
      int v5 = (void *)*((void *)v3 + 2);
    }
    else {
      int v5 = 0LL;
    }
    id v6 = v5;

    goto LABEL_6;
  }

  __nwlog_obj();
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  id v19 = "nw_path_flow_registration_copy_endpoint";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        id v19 = "nw_path_flow_registration_copy_endpoint";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null flow_registration", buf, 0xCu);
      }
    }

    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)int buf = 136446466;
          id v19 = "nw_path_flow_registration_copy_endpoint";
          __int16 v20 = 2082;
          os_log_type_t v21 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null flow_registration, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v14)
      {
        *(_DWORD *)int buf = 136446210;
        id v19 = "nw_path_flow_registration_copy_endpoint";
        _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null flow_registration, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        id v19 = "nw_path_flow_registration_copy_endpoint";
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null flow_registration, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

id nw_path_flow_registration_copy_parameters(void *a1)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    int v3 = nw_path_flow_registration_copy_parent_evaluator(v1);
    BOOL v4 = v3;
    if (v3) {
      int v5 = (void *)*((void *)v3 + 1);
    }
    else {
      int v5 = 0LL;
    }
    id v6 = v5;

    goto LABEL_6;
  }

  __nwlog_obj();
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  id v19 = "nw_path_flow_registration_copy_parameters";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        id v19 = "nw_path_flow_registration_copy_parameters";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null flow_registration", buf, 0xCu);
      }
    }

    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)int buf = 136446466;
          id v19 = "nw_path_flow_registration_copy_parameters";
          __int16 v20 = 2082;
          os_log_type_t v21 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null flow_registration, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v14)
      {
        *(_DWORD *)int buf = 136446210;
        id v19 = "nw_path_flow_registration_copy_parameters";
        _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null flow_registration, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        id v19 = "nw_path_flow_registration_copy_parameters";
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null flow_registration, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL nw_path_unassert_agent(NWConcrete_nw_path *a1, const unsigned __int8 *a2)
{
  return nw_path_agent_action(a1, a2, 132);
}

BOOL nw_path_add_group_members(void *a1, const unsigned __int8 *a2, void *a3)
{
  return nw_path_group_member_action(a1, a2, 133, a3);
}

BOOL nw_path_group_member_action(void *a1, const unsigned __int8 *a2, int a3, void *a4)
{
  uint64_t v121 = *MEMORY[0x1895F89C0];
  unsigned int v7 = a1;
  id v8 = a4;
  os_log_type_t v9 = v8;
  if (!v7)
  {
    id v10 = v8;
    __nwlog_obj();
    os_log_type_t v60 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v113 = "nw_path_group_member_action";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v101[0]) = 0;
    if (__nwlog_fault(v12, type, v101))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v61 = type[0];
        if (os_log_type_enabled(v13, type[0]))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v113 = "nw_path_group_member_action";
          _os_log_impl(&dword_181A5C000, v13, v61, "%{public}s called with null path", buf, 0xCu);
        }

void sub_182480B84( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_remove_group_members(void *a1, const unsigned __int8 *a2, void *a3)
{
  return nw_path_group_member_action(a1, a2, 134, a3);
}

void nw_path_flow_registration_clear_stats_regions(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    *(_OWORD *)(v1 + 120) = 0u;
    *(_OWORD *)(v1 + 104) = 0u;
    *(_OWORD *)(v1 + 8_Block_object_dispose((const void *)(v2 - 64), 8) = 0u;
    goto LABEL_3;
  }

  __nwlog_obj();
  int v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v14 = "nw_path_flow_registration_clear_stats_regions";
  BOOL v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v14 = "nw_path_flow_registration_clear_stats_regions";
        _os_log_impl(&dword_181A5C000, v5, v6, "%{public}s called with null flow_registration", buf, 0xCu);
      }
    }

    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v14 = "nw_path_flow_registration_clear_stats_regions";
          __int16 v15 = 2082;
          int v16 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v5,  v8,  "%{public}s called with null flow_registration, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v9)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v14 = "nw_path_flow_registration_clear_stats_regions";
        _os_log_impl(&dword_181A5C000, v5, v8, "%{public}s called with null flow_registration, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v14 = "nw_path_flow_registration_clear_stats_regions";
        _os_log_impl( &dword_181A5C000,  v5,  v10,  "%{public}s called with null flow_registration, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_path_flow_registration_set_partial_checksum_offload(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  BOOL v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 2;
    }
    else {
      char v5 = 0;
    }
    *((_BYTE *)v3 + 14_Block_object_dispose((const void *)(v2 - 64), 8) = *((_BYTE *)v3 + 148) & 0xFD | v5;
    goto LABEL_6;
  }

  __nwlog_obj();
  os_log_type_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  uint64_t v17 = "nw_path_flow_registration_set_partial_checksum_offload";
  unsigned int v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v17 = "nw_path_flow_registration_set_partial_checksum_offload";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null flow_registration", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v17 = "nw_path_flow_registration_set_partial_checksum_offload";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null flow_registration, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v12)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v17 = "nw_path_flow_registration_set_partial_checksum_offload";
        _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null flow_registration, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v17 = "nw_path_flow_registration_set_partial_checksum_offload";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null flow_registration, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL nw_path_flow_registration_uses_nexus(void *a1, const unsigned __int8 *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  BOOL v4 = (unsigned __int8 *)v3;
  if (!v3)
  {
    __nwlog_obj();
    unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    __int16 v18 = "nw_path_flow_registration_uses_nexus";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v8, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)int buf = 136446210;
          __int16 v18 = "nw_path_flow_registration_uses_nexus";
          _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null flow_registration", buf, 0xCu);
        }
      }

      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)int buf = 136446466;
            __int16 v18 = "nw_path_flow_registration_uses_nexus";
            __int16 v19 = 2082;
            uint64_t v20 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null flow_registration, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }

        if (v13)
        {
          *(_DWORD *)int buf = 136446210;
          __int16 v18 = "nw_path_flow_registration_uses_nexus";
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null flow_registration, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)int buf = 136446210;
          __int16 v18 = "nw_path_flow_registration_uses_nexus";
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null flow_registration, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_1824813F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_path_increment_agent_use_count(void *a1, const unsigned __int8 *a2, void *a3)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  BOOL v5 = a1;
  __int128 v38 = 0uLL;
  uint64_t v39 = 0LL;
  *a3 = 0LL;
  if (!v5)
  {
    __nwlog_obj();
    id v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    __int16 v35 = "nw_path_increment_agent_use_count";
    unsigned int v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v32 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v35 = "nw_path_increment_agent_use_count";
        _os_log_impl(&dword_181A5C000, v8, v27, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v29 = type;
      BOOL v30 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v35 = "nw_path_increment_agent_use_count";
          __int16 v36 = 2082;
          v37[0] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v29,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_32;
      }

      if (v30)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v35 = "nw_path_increment_agent_use_count";
        _os_log_impl(&dword_181A5C000, v8, v29, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v31 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v35 = "nw_path_increment_agent_use_count";
        _os_log_impl(&dword_181A5C000, v8, v31, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

void sub_182481C4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_copy_token_from_agent(void *a1, const unsigned __int8 *a2, void *a3)
{
  uint64_t v48 = *MEMORY[0x1895F89C0];
  BOOL v5 = a1;
  if (!v5)
  {
    __nwlog_obj();
    os_log_type_t v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    id v45 = "nw_path_copy_token_from_agent";
    unsigned int v7 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v42 = OS_LOG_TYPE_DEFAULT;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v29 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        id v45 = "nw_path_copy_token_from_agent";
        _os_log_impl(&dword_181A5C000, v8, v29, "%{public}s called with null path", buf, 0xCu);
      }

      goto LABEL_31;
    }

    if (v42 == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v39 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        id v45 = "nw_path_copy_token_from_agent";
        _os_log_impl(&dword_181A5C000, v8, v39, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }

      goto LABEL_31;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v33 = type[0];
    BOOL v34 = os_log_type_enabled(v8, type[0]);
    if (!backtrace_string)
    {
      if (v34)
      {
        *(_DWORD *)int buf = 136446210;
        id v45 = "nw_path_copy_token_from_agent";
        _os_log_impl(&dword_181A5C000, v8, v33, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }

      goto LABEL_31;
    }

    if (v34)
    {
      *(_DWORD *)int buf = 136446466;
      id v45 = "nw_path_copy_token_from_agent";
      __int16 v46 = 2082;
      *(void *)os_log_type_t v47 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v8,  v33,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_71;
  }

  if (!a3)
  {
    __nwlog_obj();
    BOOL v30 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    id v45 = "nw_path_copy_token_from_agent";
    unsigned int v7 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v42 = OS_LOG_TYPE_DEFAULT;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v31 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        id v45 = "nw_path_copy_token_from_agent";
        _os_log_impl(&dword_181A5C000, v8, v31, "%{public}s called with null out_token_length", buf, 0xCu);
      }

void sub_182482780(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_report_error_to_agent(void *a1, const unsigned __int8 *a2, int a3)
{
  uint64_t v60 = *MEMORY[0x1895F89C0];
  BOOL v5 = a1;
  if (!v5)
  {
    __nwlog_obj();
    os_log_type_t v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v57 = "nw_path_report_error_to_agent";
    unsigned int v7 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v54 = OS_LOG_TYPE_DEFAULT;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v32 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v57 = "nw_path_report_error_to_agent";
        _os_log_impl(&dword_181A5C000, v8, v32, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v54)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v34 = type[0];
      BOOL v35 = os_log_type_enabled(v8, type[0]);
      if (backtrace_string)
      {
        if (v35)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v57 = "nw_path_report_error_to_agent";
          __int16 v58 = 2082;
          *(void *)os_log_type_t v59 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v34,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        goto LABEL_61;
      }

      if (v35)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v57 = "nw_path_report_error_to_agent";
        _os_log_impl(&dword_181A5C000, v8, v34, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v42 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v57 = "nw_path_report_error_to_agent";
        _os_log_impl(&dword_181A5C000, v8, v42, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

void sub_182483500(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_uses_nexus(NWConcrete_nw_path *a1)
{
  return nw_path_uses_nexus_internal(a1, 0);
}

BOOL nw_path_listener_uses_nexus_only(void *a1)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v27 = "nw_path_listener_uses_nexus_only";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v9, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v27 = "nw_path_listener_uses_nexus_only";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null path", buf, 0xCu);
        }
      }

      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        BOOL v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v27 = "nw_path_listener_uses_nexus_only";
            __int16 v28 = 2082;
            os_log_type_t v29 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_36;
        }

        if (v14)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v27 = "nw_path_listener_uses_nexus_only";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v27 = "nw_path_listener_uses_nexus_only";
          _os_log_impl( &dword_181A5C000,  v10,  v19,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_182483A28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_flow_registration_get_tfo_cookie(void *a1, void *a2, void *a3, _BYTE *a4)
{
  uint64_t v52 = *MEMORY[0x1895F89C0];
  unsigned int v7 = a1;
  os_log_type_t v8 = a2;
  if (!a3)
  {
    __nwlog_obj();
    __int16 v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    id v47 = "nw_path_flow_registration_get_tfo_cookie";
    os_log_type_t v29 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (__nwlog_fault(v29, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)int buf = 136446210;
          id v47 = "nw_path_flow_registration_get_tfo_cookie";
          _os_log_impl(&dword_181A5C000, v30, v31, "%{public}s called with null cookie", buf, 0xCu);
        }

        goto LABEL_65;
      }

      if (!v44)
      {
        __nwlog_obj();
        uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v42 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)int buf = 136446210;
          id v47 = "nw_path_flow_registration_get_tfo_cookie";
          _os_log_impl( &dword_181A5C000,  v30,  v42,  "%{public}s called with null cookie, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_65;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v35 = type;
      BOOL v36 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (v36)
        {
          *(_DWORD *)int buf = 136446210;
          id v47 = "nw_path_flow_registration_get_tfo_cookie";
          _os_log_impl(&dword_181A5C000, v30, v35, "%{public}s called with null cookie, no backtrace", buf, 0xCu);
        }

        goto LABEL_65;
      }

      if (v36)
      {
        *(_DWORD *)int buf = 136446466;
        id v47 = "nw_path_flow_registration_get_tfo_cookie";
        __int16 v48 = 2082;
        *(void *)os_log_type_t v49 = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v30,  v35,  "%{public}s called with null cookie, dumping backtrace:%{public}s",  buf,  0x16u);
      }

uint64_t nw_path_flow_registration_get_tfo_cookie_len( NWConcrete_nw_path *a1, NWConcrete_nw_path_flow_registration *a2)
{
  id v2 = (unsigned __int8 *)nw_path_copy_flow_for_registration(a1, a2);
  if (v2) {
    uint64_t v3 = v2[184];
  }
  else {
    uint64_t v3 = 0LL;
  }

  return v3;
}

uint64_t nw_path_get_recommended_mss(void *a1)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    int v3 = v1[472];
    if (v3 == 2) {
      int v4 = 512;
    }
    else {
      int v4 = v1[472];
    }
    if (v3 == 4) {
      unsigned int v5 = 1200;
    }
    else {
      unsigned int v5 = v4;
    }
    if (v3 == 1) {
      uint64_t v6 = 0LL;
    }
    else {
      uint64_t v6 = v5;
    }
    goto LABEL_11;
  }

  __nwlog_obj();
  os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v19 = "nw_path_get_recommended_mss";
  id v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v19 = "nw_path_get_recommended_mss";
        _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v19 = "nw_path_get_recommended_mss";
          __int16 v20 = 2082;
          BOOL v21 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_28;
      }

      if (v14)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v19 = "nw_path_get_recommended_mss";
        _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v19 = "nw_path_get_recommended_mss";
        _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

id nw_path_copy_netagent_dictionary(uint64_t a1)
{
  else {
    return 0LL;
  }
}

id nw_path_copy_inactive_agent_uuids(void *a1, char a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  int v4 = v3;
  if (v3)
  {
    *(void *)int buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    uint64_t v22 = __Block_byref_object_copy__67543;
    os_log_type_t v23 = __Block_byref_object_dispose__67544;
    id v24 = 0LL;
    unsigned int v5 = (void *)*((void *)v3 + 28);
    if (v5)
    {
      applier[0] = MEMORY[0x1895F87A8];
      applier[1] = 3221225472LL;
      applier[2] = __nw_path_copy_inactive_agent_uuids_block_invoke;
      applier[3] = &unk_189BC5170;
      char v18 = a2;
      void applier[4] = buf;
      xpc_dictionary_apply(v5, applier);
      uint64_t v6 = *(void **)(*(void *)&buf[8] + 40LL);
    }

    else
    {
      uint64_t v6 = 0LL;
    }

    id v7 = v6;
    _Block_object_dispose(buf, 8);

    goto LABEL_6;
  }

  __nwlog_obj();
  id v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_path_copy_inactive_agent_uuids";
  int v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (__nwlog_fault(v10, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_copy_inactive_agent_uuids";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_copy_inactive_agent_uuids";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&_BYTE buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v14,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v15)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_copy_inactive_agent_uuids";
        _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_copy_inactive_agent_uuids";
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1824848FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, id a24)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_path_copy_inactive_agent_uuids_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  unsigned int v5 = v4;
  size_t length = 0LL;
  if (v4)
  {
    data = (const unsigned __int8 *)xpc_dictionary_get_data(v4, "data", &length);
    if (data)
    {
      if (length >= 0xD8)
      {
        id v7 = data;
        if (length == *((unsigned int *)data + 53) + 216LL)
        {
          int v8 = *((_DWORD *)data + 52);
          if ((v8 & 2) == 0 && ((v8 & 0x10) != 0 || !*(_BYTE *)(a1 + 40)))
          {
            id v9 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
            if (!v9)
            {
              xpc_object_t v10 = xpc_array_create(0LL, 0LL);
              uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8LL);
              os_log_type_t v12 = *(void **)(v11 + 40);
              *(void *)(v11 + 40) = v10;

              id v9 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
            }

            xpc_array_set_uuid(v9, 0xFFFFFFFFFFFFFFFFLL, v7);
          }
        }
      }
    }
  }

  return 1LL;
}

void sub_1824849FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_get_vpn_config_uuid( NWConcrete_nw_path *a1, unsigned __int8 (*a2)[16], int *a3, char a4, char a5)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  id v9 = a1;
  xpc_object_t v10 = v9;
  if (!v9)
  {
    __nwlog_obj();
    os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_get_vpn_config_uuid";
    os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_get_vpn_config_uuid";
        _os_log_impl(&dword_181A5C000, v15, v16, "%{public}s called with null path", buf, 0xCu);
      }

      goto LABEL_36;
    }

    if (!v31)
    {
      __nwlog_obj();
      BOOL v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_get_vpn_config_uuid";
        _os_log_impl( &dword_181A5C000,  v15,  v24,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_36;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    BOOL v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v20 = type;
    BOOL v21 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_get_vpn_config_uuid";
        _os_log_impl(&dword_181A5C000, v15, v20, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }

      goto LABEL_36;
    }

    if (v21)
    {
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_path_get_vpn_config_uuid";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&_BYTE buf[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v15,  v20,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_24;
  }

  if (!a2)
  {
    __nwlog_obj();
    unsigned int v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_get_vpn_config_uuid";
    os_log_type_t v14 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_get_vpn_config_uuid";
        _os_log_impl(&dword_181A5C000, v15, v18, "%{public}s called with null out_uuid", buf, 0xCu);
      }

void sub_182484F38( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL27nw_path_get_vpn_config_uuidP18NWConcrete_nw_pathPA16_hPibbb_block_invoke( uint64_t a1, int a2, xpc_object_t xdict)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  length[0] = 0LL;
  if (xdict)
  {
    data = xpc_dictionary_get_data(xdict, "data", length);
    if (data)
    {
      if (length[0] >= 0xD8
        && length[0] == *((unsigned int *)data + 53) + 216LL
        && (!*(_BYTE *)(a1 + 56) || (data[208] & 2) == 0))
      {
        ne_session_get_config_id_from_network_agent();
      }
    }
  }

  return 1LL;
}

BOOL nw_path_get_private_dns_config_id(void *a1, uint64_t a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)uint64_t applier = 136446210;
    *(void *)&void applier[4] = "nw_path_get_private_dns_config_uuid";
    int v8 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type[0];
      if (os_log_type_enabled(v9, type[0]))
      {
        *(_DWORD *)uint64_t applier = 136446210;
        *(void *)&void applier[4] = "nw_path_get_private_dns_config_uuid";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null path", applier, 0xCu);
      }

      goto LABEL_36;
    }

    if (!v25)
    {
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type[0];
      if (os_log_type_enabled(v9, type[0]))
      {
        *(_DWORD *)uint64_t applier = 136446210;
        *(void *)&void applier[4] = "nw_path_get_private_dns_config_uuid";
        _os_log_impl( &dword_181A5C000,  v9,  v18,  "%{public}s called with null path, backtrace limit exceeded",  applier,  0xCu);
      }

      goto LABEL_36;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v14 = type[0];
    BOOL v15 = os_log_type_enabled(v9, type[0]);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)uint64_t applier = 136446210;
        *(void *)&void applier[4] = "nw_path_get_private_dns_config_uuid";
        _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null path, no backtrace", applier, 0xCu);
      }

      goto LABEL_36;
    }

    if (v15)
    {
      *(_DWORD *)uint64_t applier = 136446466;
      *(void *)&void applier[4] = "nw_path_get_private_dns_config_uuid";
      *(_WORD *)&applier[12] = 2082;
      *(void *)&applier[14] = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null path, dumping backtrace:%{public}s",  applier,  0x16u);
    }

    goto LABEL_24;
  }

  if (!a2)
  {
    __nwlog_obj();
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)uint64_t applier = 136446210;
    *(void *)&void applier[4] = "nw_path_get_private_dns_config_uuid";
    int v8 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type[0];
      if (os_log_type_enabled(v9, type[0]))
      {
        *(_DWORD *)uint64_t applier = 136446210;
        *(void *)&void applier[4] = "nw_path_get_private_dns_config_uuid";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null out_uuid", applier, 0xCu);
      }

void sub_182485584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL35nw_path_get_private_dns_config_uuidP18NWConcrete_nw_pathPA16_hPi_block_invoke( int a1, int a2, xpc_object_t xdict)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  length[0] = 0LL;
  if (xdict)
  {
    data = (unsigned int *)xpc_dictionary_get_data(xdict, "data", length);
    if (data)
    {
      if (length[0] >= 0xD8 && length[0] == data[53] + 216LL) {
        ne_session_get_config_id_from_network_agent();
      }
    }
  }

  return 1LL;
}

uint64_t nw_path_copy_flow_divert_token(void *a1)
{
  uint64_t v56 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    os_log_type_t v41 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    char v53 = "nw_path_copy_flow_divert_token";
    os_log_type_t v42 = (char *)_os_log_send_and_compose_impl();

    uu[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v42, uu, &type))
    {
      if (uu[0] == 17)
      {
        __nwlog_obj();
        os_log_type_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v44 = uu[0];
        if (os_log_type_enabled(v43, (os_log_type_t)uu[0]))
        {
          *(_DWORD *)int buf = 136446210;
          char v53 = "nw_path_copy_flow_divert_token";
          _os_log_impl(&dword_181A5C000, v43, v44, "%{public}s called with null path", buf, 0xCu);
        }
      }

      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v46 = uu[0];
        BOOL v47 = os_log_type_enabled(v43, (os_log_type_t)uu[0]);
        if (backtrace_string)
        {
          if (v47)
          {
            *(_DWORD *)int buf = 136446466;
            char v53 = "nw_path_copy_flow_divert_token";
            __int16 v54 = 2082;
            os_log_type_t v55 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v43,  v46,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_101;
        }

        if (v47)
        {
          *(_DWORD *)int buf = 136446210;
          char v53 = "nw_path_copy_flow_divert_token";
          _os_log_impl(&dword_181A5C000, v43, v46, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v48 = uu[0];
        if (os_log_type_enabled(v43, (os_log_type_t)uu[0]))
        {
          *(_DWORD *)int buf = 136446210;
          char v53 = "nw_path_copy_flow_divert_token";
          _os_log_impl( &dword_181A5C000,  v43,  v48,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_182486168(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_path_has_unsatisfied_fallback_agent(NWConcrete_nw_path *a1)
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  int v2 = 0;
  return nw_path_get_vpn_config_uuid(a1, (unsigned __int8 (*)[16])v3, &v2, 1, 1);
}

uint64_t nw_path_voluntary_agent_matches_address(void *a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_voluntary_agent_matches_address";
    int v8 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type[0];
      if (os_log_type_enabled(v9, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_voluntary_agent_matches_address";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type[0];
      BOOL v15 = os_log_type_enabled(v9, type[0]);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_voluntary_agent_matches_address";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&_BYTE buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v8) {
          goto LABEL_45;
        }
        goto LABEL_44;
      }

      if (v15)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_voluntary_agent_matches_address";
        _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type[0];
      if (os_log_type_enabled(v9, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_voluntary_agent_matches_address";
        _os_log_impl(&dword_181A5C000, v9, v19, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

    goto LABEL_42;
  }

  if (!a2)
  {
    __nwlog_obj();
    id v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_voluntary_agent_matches_address";
    int v8 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type[0];
      if (os_log_type_enabled(v9, type[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_voluntary_agent_matches_address";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null address", buf, 0xCu);
      }
    }

    else if (v23)
    {
      os_log_type_t v16 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type[0];
      BOOL v18 = os_log_type_enabled(v9, type[0]);
      if (v16)
      {
        if (v18)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_voluntary_agent_matches_address";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&_BYTE buf[14] = v16;
          _os_log_impl( &dword_181A5C000,  v9,  v17,  "%{public}s called with null address, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v16);
LABEL_43:
        if (!v8)
        {
LABEL_45:
          uint64_t v6 = 0LL;
          goto LABEL_46;
        }

void sub_182486740(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_path_update_parameters_for_fallback(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v27 = "nw_path_update_parameters_for_fallback";
    id v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v27 = "nw_path_update_parameters_for_fallback";
        _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null path", buf, 0xCu);
      }

      goto LABEL_40;
    }

    if (!v24)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v27 = "nw_path_update_parameters_for_fallback";
        _os_log_impl( &dword_181A5C000,  v12,  v21,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_40;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v17 = type;
    BOOL v18 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v27 = "nw_path_update_parameters_for_fallback";
        _os_log_impl(&dword_181A5C000, v12, v17, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }

      goto LABEL_40;
    }

    if (v18)
    {
      *(_DWORD *)int buf = 136446466;
      os_log_type_t v27 = "nw_path_update_parameters_for_fallback";
      __int16 v28 = 2082;
      os_log_type_t v29 = backtrace_string;
      _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    goto LABEL_28;
  }

  if (!v4)
  {
    __nwlog_obj();
    os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v27 = "nw_path_update_parameters_for_fallback";
    id v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v27 = "nw_path_update_parameters_for_fallback";
        _os_log_impl(&dword_181A5C000, v12, v15, "%{public}s called with null parameters_to_update", buf, 0xCu);
      }

void sub_182486C40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_path_get_fallback_interface_index(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    id v3 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v14 = "nw_path_get_fallback_interface_index";
    id v4 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (__nwlog_fault(v4, &type, &v11))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v6 = type;
        if (os_log_type_enabled(v5, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v14 = "nw_path_get_fallback_interface_index";
          _os_log_impl(&dword_181A5C000, v5, v6, "%{public}s called with null path", buf, 0xCu);
        }
      }

      else if (v11)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        BOOL v9 = os_log_type_enabled(v5, type);
        if (backtrace_string)
        {
          if (v9)
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v14 = "nw_path_get_fallback_interface_index";
            __int16 v15 = 2082;
            os_log_type_t v16 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v5,  v8,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }

        if (v9)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v14 = "nw_path_get_fallback_interface_index";
          _os_log_impl(&dword_181A5C000, v5, v8, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v5, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v14 = "nw_path_get_fallback_interface_index";
          _os_log_impl( &dword_181A5C000,  v5,  v10,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

uint64_t nw_path_get_fallback_agent(void *a1, _OWORD *a2)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v19 = "nw_path_get_fallback_agent";
    BOOL v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v9, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v19 = "nw_path_get_fallback_agent";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null path", buf, 0xCu);
        }
      }

      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        BOOL v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v19 = "nw_path_get_fallback_agent";
            __int16 v20 = 2082;
            os_log_type_t v21 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }

        if (v14)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v19 = "nw_path_get_fallback_agent";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v19 = "nw_path_get_fallback_agent";
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_18248718C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_path_get_fallback_generation(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[93];
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  char v16 = "nw_path_get_fallback_generation";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_get_fallback_generation";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          char v16 = "nw_path_get_fallback_generation";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_get_fallback_generation";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_get_fallback_generation";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

uint64_t nw_path_fallback_is_weak(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((_BYTE *)v1 + 473) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  char v16 = "nw_path_fallback_is_weak";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_fallback_is_weak";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          char v16 = "nw_path_fallback_is_weak";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_fallback_is_weak";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_fallback_is_weak";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

uint64_t nw_path_fallback_should_not_use_timer(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[473] >> 1) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  char v16 = "nw_path_fallback_should_not_use_timer";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_fallback_should_not_use_timer";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          char v16 = "nw_path_fallback_should_not_use_timer";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_fallback_should_not_use_timer";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_fallback_should_not_use_timer";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

uint64_t nw_path_fallback_is_forced(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[473] >> 2) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  char v16 = "nw_path_fallback_is_forced";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_fallback_is_forced";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          char v16 = "nw_path_fallback_is_forced";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_fallback_is_forced";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_fallback_is_forced";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

uint64_t nw_path_fallback_is_preferred(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[473] >> 3) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  char v16 = "nw_path_fallback_is_preferred";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_fallback_is_preferred";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          char v16 = "nw_path_fallback_is_preferred";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_fallback_is_preferred";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_fallback_is_preferred";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

id nw_path_copy_proxy_configs(void *a1)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    *(void *)int buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    __int16 v20 = __Block_byref_object_copy__67543;
    os_log_type_t v21 = __Block_byref_object_dispose__67544;
    id v22 = 0LL;
    v14[0] = MEMORY[0x1895F87A8];
    v14[1] = 3221225472LL;
    v14[2] = __nw_path_copy_proxy_configs_block_invoke;
    v14[3] = &unk_189BC9210;
    os_log_type_t v15 = (os_unfair_lock_s *)v1;
    char v16 = buf;
    uint64_t v3 = v15 + 2;
    os_unfair_lock_lock(v15 + 2);
    __nw_path_copy_proxy_configs_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v3);
    id v4 = *(id *)(*(void *)&buf[8] + 40LL);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }

  __nwlog_obj();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_path_copy_proxy_configs";
  uint64_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_copy_proxy_configs";
        _os_log_impl(&dword_181A5C000, v8, v9, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_copy_proxy_configs";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&_BYTE buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v12)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_copy_proxy_configs";
        _os_log_impl(&dword_181A5C000, v8, v11, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_copy_proxy_configs";
        _os_log_impl(&dword_181A5C000, v8, v13, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

void sub_1824881CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, id a26)
{
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void __nw_path_copy_proxy_configs_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 232);
  if (v3)
  {
    if ((*(_BYTE *)(v2 + 476) & 4) != 0 || (id v4 = *(void **)(v2 + 240)) == 0LL)
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
      id v7 = v3;
      os_log_type_t v8 = *(void **)(v6 + 40);
      *(void *)(v6 + 40) = v7;

      return;
    }

    id v5 = v4;
  }

  else
  {
    id v5 = *(id *)(v2 + 240);
    if (!v5) {
      return;
    }
  }

  xpc_object_t xarray = v5;
  applier[0] = MEMORY[0x1895F87A8];
  applier[1] = 3221225472LL;
  applier[2] = __nw_path_copy_proxy_configs_block_invoke_2;
  applier[3] = &unk_189BC8CB8;
  id v11 = *(id *)(a1 + 32);
  xpc_array_apply(xarray, applier);
  *(_BYTE *)(*(void *)(a1 + 32) + 476LL) |= 4u;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), *(id *)(*(void *)(a1 + 32) + 232LL));
}

void sub_1824882F4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

uint64_t __nw_path_copy_proxy_configs_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  config_agent_update_proxy_information();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v6 = v5;
  if (v5)
  {
    id v7 = v5;

    id v4 = v7;
  }

  if (object_getClass(v4) == (Class)MEMORY[0x1895F9220])
  {
    id v8 = nw_proxy_configs_create_with_schema_array(v4);
    combined_array = nw_array_create_combined_array(v8, *(void **)(*(void *)(a1 + 32) + 232LL));
    uint64_t v10 = *(void *)(a1 + 32);
    id v11 = *(void **)(v10 + 232);
    *(void *)(v10 + 232) = combined_array;
  }

  return 1LL;
}

void sub_1824883AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned __int8 *nw_path_has_proxy_config(void *a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    if (v4)
    {
      uint64_t v6 = (unsigned __int8 *)v3[29];
      if (v6)
      {
        *(void *)int buf = 0LL;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x2020000000LL;
        char v27 = 0;
        v21[0] = MEMORY[0x1895F87A8];
        v21[1] = 3221225472LL;
        void v21[2] = __nw_path_has_proxy_config_block_invoke;
        v21[3] = &unk_189BC7960;
        id v22 = v4;
        uint64_t v23 = buf;
        nw_array_apply(v6, (uint64_t)v21);
        uint64_t v6 = (unsigned __int8 *)(*(_BYTE *)(*(void *)&buf[8] + 24LL) != 0);

        _Block_object_dispose(buf, 8);
      }

      goto LABEL_5;
    }

    __nwlog_obj();
    BOOL v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_has_proxy_config";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v9, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_has_proxy_config";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null proxy_config", buf, 0xCu);
        }

uint64_t __nw_path_has_proxy_config_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  int is_equal = nw_proxy_config_is_equal(*(void **)(a1 + 32), a3);
  if (is_equal) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }
  return is_equal ^ 1u;
}

BOOL nw_path_has_proxy_settings(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if (*((void *)v1 + 30)) {
      BOOL v3 = 1LL;
    }
    else {
      BOOL v3 = *((void *)v1 + 29) != 0LL;
    }
    goto LABEL_5;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  BOOL v16 = "nw_path_has_proxy_settings";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_path_has_proxy_settings";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v16 = "nw_path_has_proxy_settings";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_path_has_proxy_settings";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_path_has_proxy_settings";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

id nw_path_copy_legacy_proxy_settings(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[30];
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  BOOL v16 = "nw_path_copy_legacy_proxy_settings";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_path_copy_legacy_proxy_settings";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v16 = "nw_path_copy_legacy_proxy_settings";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_path_copy_legacy_proxy_settings";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_path_copy_legacy_proxy_settings";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

void nw_path_set_proxy_settings(void *a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    id v5 = (void *)*((void *)v3 + 30);
    *((void *)v3 + 30) = 0LL;

    *((_BYTE *)v3 + 476) &= ~4u;
    if (v4 && object_getClass(v4) == (Class)MEMORY[0x1895F9220])
    {
      xpc_object_t v6 = xpc_copy(v4);
      id v7 = (void *)*((void *)v3 + 30);
      *((void *)v3 + 30) = v6;
    }

    v17[0] = MEMORY[0x1895F87A8];
    v17[1] = 3221225472LL;
    v17[2] = __nw_path_set_proxy_settings_block_invoke;
    v17[3] = &unk_189BC93A0;
    id v8 = v3;
    void v17[4] = v8;
    os_unfair_lock_lock((os_unfair_lock_t)v3 + 3);
    __nw_path_set_proxy_settings_block_invoke((uint64_t)v17);
    os_unfair_lock_unlock((os_unfair_lock_t)v3 + 3);

    goto LABEL_6;
  }

  __nwlog_obj();
  os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v21 = "nw_path_set_proxy_settings";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (__nwlog_fault(v10, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v21 = "nw_path_set_proxy_settings";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v21 = "nw_path_set_proxy_settings";
          __int16 v22 = 2082;
          uint64_t v23 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v14,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v15)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v21 = "nw_path_set_proxy_settings";
        _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v21 = "nw_path_set_proxy_settings";
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1824891B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_path_set_proxy_settings_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 256);
  *(void *)(v1 + 256) = 0LL;
}

id nw_path_copy_gateways(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[26];
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_path_copy_gateways";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_copy_gateways";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v16 = "nw_path_copy_gateways";
          __int16 v17 = 2082;
          char v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_copy_gateways";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_copy_gateways";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

BOOL nw_path_has_gateways(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    __int16 v17 = "nw_path_has_gateways";
    xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)int buf = 136446210;
          __int16 v17 = "nw_path_has_gateways";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
        }
      }

      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)int buf = 136446466;
            __int16 v17 = "nw_path_has_gateways";
            __int16 v18 = 2082;
            uint64_t v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }

        if (v11)
        {
          *(_DWORD *)int buf = 136446210;
          __int16 v17 = "nw_path_has_gateways";
          _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)int buf = 136446210;
          __int16 v17 = "nw_path_has_gateways";
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

id nw_path_copy_group_members(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[27];
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_path_copy_group_members";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_copy_group_members";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v16 = "nw_path_copy_group_members";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_copy_group_members";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_copy_group_members";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

id nw_path_copy_resolver_configs(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1;
    *(void *)int buf = MEMORY[0x1895F87A8];
    *(void *)&buf[8] = 3221225472LL;
    *(void *)&buf[16] = ___ZL18nw_path_update_dnsP18NWConcrete_nw_path_block_invoke;
    __int16 v18 = &unk_189BC93A0;
    id v4 = v3;
    id v19 = v4;
    os_unfair_lock_lock((os_unfair_lock_t)v4 + 2);
    ___ZL18nw_path_update_dnsP18NWConcrete_nw_path_block_invoke((uint64_t)buf);
    os_unfair_lock_unlock((os_unfair_lock_t)v4 + 2);

    id v5 = *((id *)v4 + 23);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_path_copy_resolver_configs";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_copy_resolver_configs";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_copy_resolver_configs";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&_BYTE buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v13)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_copy_resolver_configs";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_copy_resolver_configs";
        _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

void sub_182489CAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_path_copy_override_resolver_configs(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[24];
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_path_copy_override_resolver_configs";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_copy_override_resolver_configs";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v16 = "nw_path_copy_override_resolver_configs";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_copy_override_resolver_configs";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_copy_override_resolver_configs";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

NWConcrete_nw_resolver_config *nw_path_copy_resolver_config_for_identifier(uint64_t a1)
{
  *(void *)&v38[13] = *MEMORY[0x1895F89C0];
  if (nw_context_copy_implicit_context::onceToken != -1) {
    dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
  }
  id v2 = (id)nw_context_copy_implicit_context::implicit_context;
  int v3 = nw_path_shared_necp_fd(v2);

  if ((v3 & 0x80000000) == 0)
  {
    xpc_object_t v4 = nw_network_agent_copy_dictionary_from_necp();
    id v5 = v4;
    if (!v4)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v14 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)size_t length = 136446722;
        *(void *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
        __int16 v37 = 1042;
        *(_DWORD *)BOOL v38 = 16;
        v38[2] = 2098;
        *(void *)&v38[3] = a1;
        _os_log_impl( &dword_181A5C000,  v14,  OS_LOG_TYPE_ERROR,  "%{public}s Agent %{public,uuid_t}.16P is not present",  length,  0x1Cu);
      }

      goto LABEL_35;
    }

    *(void *)size_t length = 0LL;
    data = (unsigned int *)xpc_dictionary_get_data(v4, "data", (size_t *)length);
    if (!data || *(void *)length < 0xD8uLL || *(void *)length != data[53] + 216LL)
    {
      __nwlog_obj();
      os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)size_t length = 136446210;
      *(void *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
      BOOL v11 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v34 = 0;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)size_t length = 136446210;
          *(void *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
          _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null agent", length, 0xCu);
        }
      }

      else if (v34)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        BOOL v17 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)size_t length = 136446466;
            *(void *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
            __int16 v37 = 2082;
            *(void *)BOOL v38 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v12,  v16,  "%{public}s called with null agent, dumping backtrace:%{public}s",  length,  0x16u);
          }

          free(backtrace_string);
          if (!v11) {
            goto LABEL_35;
          }
          goto LABEL_34;
        }

        if (v17)
        {
          *(_DWORD *)size_t length = 136446210;
          *(void *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
          _os_log_impl(&dword_181A5C000, v12, v16, "%{public}s called with null agent, no backtrace", length, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)size_t length = 136446210;
          *(void *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
          _os_log_impl( &dword_181A5C000,  v12,  v18,  "%{public}s called with null agent, backtrace limit exceeded",  length,  0xCu);
        }
      }

      goto LABEL_32;
    }

    if (is_config_agent_type_dns())
    {
      config_agent_copy_dns_information();
      id v7 = (void *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = v7;
      if (v7)
      {
        os_log_type_t v9 = nw_resolver_config_create_with_dictionary(v7);
        config_agent_free_dns_information();
LABEL_11:

LABEL_36:
        return v9;
      }

      __nwlog_obj();
      __int16 v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)size_t length = 136446210;
      *(void *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
      uint64_t v23 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v34 = 0;
      if (__nwlog_fault(v23, &type, &v34))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v25 = type;
          if (os_log_type_enabled(v24, type))
          {
            *(_DWORD *)size_t length = 136446210;
            *(void *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
            _os_log_impl(&dword_181A5C000, v24, v25, "%{public}s called with null resolver_dictionary", length, 0xCu);
          }
        }

        else if (v34)
        {
          os_log_type_t v29 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v30 = type;
          BOOL v31 = os_log_type_enabled(v24, type);
          if (v29)
          {
            if (v31)
            {
              *(_DWORD *)size_t length = 136446466;
              *(void *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
              __int16 v37 = 2082;
              *(void *)BOOL v38 = v29;
              _os_log_impl( &dword_181A5C000,  v24,  v30,  "%{public}s called with null resolver_dictionary, dumping backtrace:%{public}s",  length,  0x16u);
            }

            free(v29);
            goto LABEL_70;
          }

          if (v31)
          {
            *(_DWORD *)size_t length = 136446210;
            *(void *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
            _os_log_impl( &dword_181A5C000,  v24,  v30,  "%{public}s called with null resolver_dictionary, no backtrace",  length,  0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v33 = type;
          if (os_log_type_enabled(v24, type))
          {
            *(_DWORD *)size_t length = 136446210;
            *(void *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
            _os_log_impl( &dword_181A5C000,  v24,  v33,  "%{public}s called with null resolver_dictionary, backtrace limit exceeded",  length,  0xCu);
          }
        }
      }

void sub_18248A75C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_path_copy_group_descriptor(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = v1[4];
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_path_copy_group_descriptor";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_copy_group_descriptor";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v16 = "nw_path_copy_group_descriptor";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_copy_group_descriptor";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_copy_group_descriptor";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

BOOL nw_path_has_browse_descriptor(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    BOOL v3 = *((void *)v1 + 5) != 0LL;
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_path_has_browse_descriptor";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_has_browse_descriptor";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v16 = "nw_path_has_browse_descriptor";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_has_browse_descriptor";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_has_browse_descriptor";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

id nw_path_copy_browse_descriptor(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = v1[5];
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_path_copy_browse_descriptor";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_copy_browse_descriptor";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v16 = "nw_path_copy_browse_descriptor";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_copy_browse_descriptor";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_copy_browse_descriptor";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

BOOL nw_path_has_advertise_descriptor(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    BOOL v3 = *((void *)v1 + 6) != 0LL;
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_path_has_advertise_descriptor";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_has_advertise_descriptor";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v16 = "nw_path_has_advertise_descriptor";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_has_advertise_descriptor";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_has_advertise_descriptor";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

id nw_path_copy_advertise_descriptor(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = v1[6];
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_path_copy_advertise_descriptor";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_copy_advertise_descriptor";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v16 = "nw_path_copy_advertise_descriptor";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_copy_advertise_descriptor";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_copy_advertise_descriptor";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

id nw_path_copy_discovered_endpoints(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = v1[7];
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_path_copy_discovered_endpoints";
  xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_copy_discovered_endpoints";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v16 = "nw_path_copy_discovered_endpoints";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_copy_discovered_endpoints";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_path_copy_discovered_endpoints";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

BOOL nw_path_supports_browse(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_path_supports_browse";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (__nwlog_fault(v9, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_supports_browse";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null path", buf, 0xCu);
        }
      }

      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        BOOL v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_supports_browse";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&_BYTE buf[14] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }

        if (v14)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_supports_browse";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_path_supports_browse";
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_18248BABC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_path_supports_browse_block_invoke(uint64_t a1, int a2, xpc_object_t xdict)
{
  size_t length = 0LL;
  if (!xdict) {
    return 1LL;
  }
  data = xpc_dictionary_get_data(xdict, "data", &length);
  int v5 = data[52];
  uint64_t result = 1LL;
  if ((v5 & 0x100) != 0 && (v5 & 0x13) != 1)
  {
    uint64_t result = 0LL;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
  }

  return result;
}

void nw_path_enumerate_browse_options(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  unint64_t v3 = a1;
  id v4 = a2;
  int v5 = (void (**)(void, void))v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    BOOL v28 = "nw_path_enumerate_browse_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v28 = "nw_path_enumerate_browse_options";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v28 = "nw_path_enumerate_browse_options";
          __int16 v29 = 2082;
          os_log_type_t v30 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_45:
        if (!v10) {
          goto LABEL_11;
        }
LABEL_46:
        free(v10);
        goto LABEL_11;
      }

      if (v17)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v28 = "nw_path_enumerate_browse_options";
        _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v28 = "nw_path_enumerate_browse_options";
        _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_18248C0C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_path_enumerate_browse_options_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  int v5 = v4;
  size_t length = 0LL;
  if (v4)
  {
    data = xpc_dictionary_get_data(v4, "data", &length);
    if (data)
    {
      if (length >= 0xD8
        && length == data[53] + 216LL
        && (data[52] & 0x100) != 0
        && (data[52] & 0x13) != 1)
      {
        (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
      }
    }
  }

  return 1LL;
}

void sub_18248C184(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_path_enumerate_group_options(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  unint64_t v3 = a1;
  id v4 = a2;
  int v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    BOOL v26 = "nw_path_enumerate_group_options";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v26 = "nw_path_enumerate_group_options";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v26 = "nw_path_enumerate_group_options";
          __int16 v27 = 2082;
          BOOL v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v8) {
          goto LABEL_5;
        }
LABEL_40:
        free(v8);
        goto LABEL_5;
      }

      if (v15)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v26 = "nw_path_enumerate_group_options";
        _os_log_impl(&dword_181A5C000, v9, v14, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v26 = "nw_path_enumerate_group_options";
        _os_log_impl(&dword_181A5C000, v9, v19, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

void sub_18248C690( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_path_enumerate_group_options_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  int v5 = v4;
  size_t length = 0LL;
  if (v4)
  {
    data = xpc_dictionary_get_data(v4, "data", &length);
    if (data)
    {
      if (length >= 0xD8
        && length == data[53] + 216LL
        && (data[52] & 0x20000) != 0
        && (data[52] & 0x13) != 1)
      {
        (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
      }
    }
  }

  return 1LL;
}

void sub_18248C748(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_path_enumerate_interfaces(nw_path_t path, nw_path_enumerate_interfaces_block_t enumerate_block)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  nw_path_t v3 = path;
  id v4 = enumerate_block;
  int v5 = (uint64_t (**)(void, void))v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v32 = "nw_path_enumerate_interfaces";
    os_log_type_t v13 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v30 = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if (v30 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v15 = v30;
      if (os_log_type_enabled(v14, v30))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v32 = "nw_path_enumerate_interfaces";
        _os_log_impl(&dword_181A5C000, v14, v15, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v29)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v19 = v30;
      BOOL v20 = os_log_type_enabled(v14, v30);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v32 = "nw_path_enumerate_interfaces";
          __int16 v33 = 2082;
          char v34 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v14,  v19,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_48:
        if (!v13) {
          goto LABEL_7;
        }
        goto LABEL_49;
      }

      if (v20)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v32 = "nw_path_enumerate_interfaces";
        _os_log_impl(&dword_181A5C000, v14, v19, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v24 = v30;
      if (os_log_type_enabled(v14, v30))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v32 = "nw_path_enumerate_interfaces";
        _os_log_impl( &dword_181A5C000,  v14,  v24,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_18248CCF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_path_enumerate_interfaces_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  if (!v3 || v3 == *(void *)(*(void *)(a1 + 32) + 96LL)) {
    return 1LL;
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

BOOL nw_path_has_flows(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    int v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v17 = "nw_path_has_flows";
    unint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v17 = "nw_path_has_flows";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
        }
      }

      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v17 = "nw_path_has_flows";
            __int16 v18 = 2082;
            os_log_type_t v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }

        if (v11)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v17 = "nw_path_has_flows";
          _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v17 = "nw_path_has_flows";
          _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

BOOL nw_path_has_flow_for_nexus_agent(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    *(void *)int buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v17 = 0;
    id v2 = *(unsigned __int8 **)(a1 + 72);
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    void v13[2] = __nw_path_has_flow_for_nexus_agent_block_invoke;
    v13[3] = &unk_189BC93C8;
    v13[4] = buf;
    void v13[5] = a2;
    nw_array_apply(v2, (uint64_t)v13);
    BOOL v3 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
    _Block_object_dispose(buf, 8);
    return v3;
  }

  __nwlog_obj();
  int v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_path_has_flow_for_nexus_agent";
  unint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v15 = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &v15, &v14))
  {
    if (v15 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = v15;
      if (os_log_type_enabled(v7, v15))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_has_flow_for_nexus_agent";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = v15;
      BOOL v11 = os_log_type_enabled(v7, v15);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_has_flow_for_nexus_agent";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&_BYTE buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_has_flow_for_nexus_agent";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = v15;
      if (os_log_type_enabled(v7, v15))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_has_flow_for_nexus_agent";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

BOOL __nw_path_has_flow_for_nexus_agent_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = uuid_compare((const unsigned __int8 *)(a3 + 84), *(const unsigned __int8 **)(a1 + 40));
  if (!v4) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
  }
  return v4 != 0;
}

uint64_t nw_path_interface_prohibited_by_parameters(void *a1, void *a2)
{
  uint64_t v85 = *MEMORY[0x1895F89C0];
  BOOL v3 = a1;
  id v4 = a2;
  int v5 = v4;
  if (v3)
  {
    if (v4)
    {
      id v6 = v3[2];
      uint64_t v7 = v6;
      if (v6)
      {
        os_log_type_t v8 = v6;
        __int16 v9 = *(_WORD *)(v8[13] + 100LL);

        if ((v9 & 1) != 0 && (v10 = v5, __int16 v11 = *(_WORD *)(v10 + 85), v10, (v11 & 1) != 0))
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v28 = (os_log_s *)(id)gLogObj;
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_path_interface_prohibited_by_parameters";
            *(_WORD *)&_BYTE buf[12] = 2112;
            *(void *)&_BYTE buf[14] = v10;
            _os_log_impl( &dword_181A5C000,  v28,  OS_LOG_TYPE_DEBUG,  "%{public}s Expensive prohibited, cannot use interface option %@",  buf,  0x16u);
          }
        }

        else
        {
          os_log_type_t v12 = v8;
          __int16 v13 = *(_WORD *)(v8[13] + 100LL);

          if ((v13 & 2) != 0 && (char v14 = v5, v15 = *(_WORD *)(v14 + 85), v14, (v15 & 2) != 0))
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            BOOL v28 = (os_log_s *)(id)gLogObj;
            if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_path_interface_prohibited_by_parameters";
              *(_WORD *)&_BYTE buf[12] = 2112;
              *(void *)&_BYTE buf[14] = v14;
              _os_log_impl( &dword_181A5C000,  v28,  OS_LOG_TYPE_DEBUG,  "%{public}s Constrained prohibited, cannot use interface option %@",  buf,  0x16u);
            }
          }

          else
          {
            os_log_type_t v16 = v12;
            __int16 v17 = *(_WORD *)(v8[13] + 100LL);

            if ((v17 & 4) != 0) {
              goto LABEL_13;
            }
            uint64_t v18 = v5;
            __int16 v19 = *(_WORD *)(v18 + 85);

            if ((v19 & 4) == 0) {
              goto LABEL_13;
            }
            if ((nw_path_is_ultra_constrained_allowed(void)::is_allowed & 1) != 0)
            {
LABEL_13:
              *(void *)int buf = 0LL;
              *(void *)&buf[8] = buf;
              *(void *)&buf[16] = 0x2020000000LL;
              char v84 = 0;
              uint64_t v20 = v16;
              os_log_type_t v21 = *(xpc_object_t **)(v8[13] + 176LL);
              id v22 = v20;
              if (!v21) {
                goto LABEL_30;
              }
              id v22 = v20;
              if (!*v21) {
                goto LABEL_30;
              }
              BOOL v23 = xpc_array_get_count(*v21) == 0;

              if (v23) {
                goto LABEL_31;
              }
              os_log_type_t v24 = v20;
              os_log_type_t v25 = *(id **)(v8[13] + 176LL);
              if (v25)
              {
                id v22 = *v25;

                if (!v22)
                {
LABEL_30:

LABEL_31:
                  if (*(_BYTE *)(*(void *)&buf[8] + 24LL)) {
                    goto LABEL_50;
                  }
                  if (!nw_parameters_has_prohibited_interface_subtypes(v20))
                  {
LABEL_39:
                    if (*(_BYTE *)(*(void *)&buf[8] + 24LL)) {
                      goto LABEL_50;
                    }
                    uint64_t v35 = v20;
                    uint64_t v36 = *(void *)(v8[13] + 176LL);
                    id v37 = v35;
                    if (!v36) {
                      goto LABEL_48;
                    }
                    BOOL v38 = *(void **)(v36 + 24);
                    id v37 = v35;
                    if (!v38) {
                      goto LABEL_48;
                    }
                    BOOL v39 = xpc_array_get_count(v38) == 0;

                    if (v39) {
                      goto LABEL_49;
                    }
                    int v40 = v35;
                    uint64_t v41 = *(void *)(v8[13] + 176LL);
                    if (v41)
                    {
                      id v37 = *(id *)(v41 + 24);

                      if (!v37)
                      {
LABEL_48:

LABEL_49:
                        if (!*(_BYTE *)(*(void *)&buf[8] + 24LL))
                        {
                          os_log_type_t v43 = v5;
                          int v44 = v43[25];

                          if (v44 == 1002 && (nw_parameters_get_use_awdl(v35) & 1) == 0)
                          {
                            __nwlog_obj();
                            BOOL v45 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                            if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
                            {
                              *(_DWORD *)os_log_type_t v79 = 136446466;
                              os_log_type_t v80 = "nw_path_interface_prohibited_by_parameters";
                              __int16 v81 = 2112;
                              os_log_type_t v82 = v43;
                              _os_log_impl( &dword_181A5C000,  v45,  OS_LOG_TYPE_DEBUG,  "%{public}s Interface %@ prohibited, cannot use interface option",  v79,  0x16u);
                            }
                          }

                          uint64_t v29 = 0LL;
                          goto LABEL_51;
                        }

void sub_18248DF24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Block_object_dispose((const void *)(v21 - 128), 8);
  _Unwind_Resume(a1);
}

BOOL __nw_path_interface_prohibited_by_parameters_block_invoke(uint64_t a1, int a2, xpc_object_t xuint)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  int value = xpc_uint64_get_value(xuint);
  int v5 = *(_DWORD *)(a1 + 48);
  if (v5 == value)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      int v7 = *(_DWORD *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 32);
      int v10 = 136446722;
      __int16 v11 = "nw_path_interface_prohibited_by_parameters_block_invoke";
      __int16 v12 = 1024;
      int v13 = v7;
      __int16 v14 = 2112;
      uint64_t v15 = v8;
      _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_DEBUG,  "%{public}s Interface type %u prohibited, cannot use interface option %@",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }

  return v5 != value;
}

BOOL __nw_path_interface_prohibited_by_parameters_block_invoke_376(uint64_t a1, int a2, xpc_object_t xuint)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  int value = xpc_uint64_get_value(xuint);
  int v5 = *(_DWORD *)(a1 + 48);
  if (v5 == value)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      int v7 = *(_DWORD *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 32);
      int v10 = 136446722;
      __int16 v11 = "nw_path_interface_prohibited_by_parameters_block_invoke";
      __int16 v12 = 1024;
      int v13 = v7;
      __int16 v14 = 2112;
      uint64_t v15 = v8;
      _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_DEBUG,  "%{public}s Interface subtype %u prohibited, cannot use interface option %@",  (uint8_t *)&v10,  0x1Cu);
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }

  return v5 != value;
}

uint64_t __nw_path_interface_prohibited_by_parameters_block_invoke_377(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  id v4 = nw_interface_create_from_dictionary(a3);
  int v5 = v4;
  if (v4 && nw_interface_shallow_compare(v4, *(void **)(a1 + 32)))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v6 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v10 = 136446466;
      __int16 v11 = "nw_path_interface_prohibited_by_parameters_block_invoke";
      __int16 v12 = 2112;
      uint64_t v13 = v7;
      _os_log_impl( &dword_181A5C000,  v6,  OS_LOG_TYPE_DEBUG,  "%{public}s Interface %@ prohibited, cannot use interface option",  (uint8_t *)&v10,  0x16u);
    }

    uint64_t v8 = 0LL;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v8 = 1LL;
  }

  return v8;
}

void nw_path_enumerate_interface_options_with_details(void *a1, void *a2)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  BOOL v3 = a1;
  id v4 = a2;
  int v5 = (void (**)(void, void))v4;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    id v32 = "nw_path_enumerate_interface_options_with_details";
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v39) = 16;
    char v30 = 0;
    if (v39 == 17)
    {
      __nwlog_obj();
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = v39;
      if (os_log_type_enabled(v16, (os_log_type_t)v39))
      {
        *(_DWORD *)int buf = 136446210;
        id v32 = "nw_path_enumerate_interface_options_with_details";
        _os_log_impl(&dword_181A5C000, v16, v17, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = v39;
      BOOL v22 = os_log_type_enabled(v16, (os_log_type_t)v39);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)int buf = 136446466;
          id v32 = "nw_path_enumerate_interface_options_with_details";
          __int16 v33 = 2082;
          int v34 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v16,  v21,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_53:
        if (!v15) {
          goto LABEL_19;
        }
LABEL_54:
        free(v15);
        goto LABEL_19;
      }

      if (v22)
      {
        *(_DWORD *)int buf = 136446210;
        id v32 = "nw_path_enumerate_interface_options_with_details";
        _os_log_impl(&dword_181A5C000, v16, v21, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v26 = v39;
      if (os_log_type_enabled(v16, (os_log_type_t)v39))
      {
        *(_DWORD *)int buf = 136446210;
        id v32 = "nw_path_enumerate_interface_options_with_details";
        _os_log_impl( &dword_181A5C000,  v16,  v26,  "%{public}s called with null path, backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_18248E980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_path_enumerate_interface_options_with_details_block_invoke(uint64_t a1)
{
  return 1LL;
}

void nw_path_enumerate_interface_options(void *a1, void *a2)
{
  id v3 = a2;
  v5[0] = MEMORY[0x1895F87A8];
  v5[1] = 3221225472LL;
  v5[2] = __nw_path_enumerate_interface_options_block_invoke;
  v5[3] = &unk_189BC52D0;
  id v6 = v3;
  id v4 = v3;
  nw_path_enumerate_interface_options_with_details(a1, v5);
}

void sub_18248EA5C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void __nw_path_enumerate_interface_options_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  __int128 v7 = 0uLL;
  nw_interface_option_details_get_nexus_agent(v3, &v7);
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = nw_interface_option_details_copy_interface(v3);
  id v6 = nw_interface_option_details_copy_remote_endpoint(v3);
  (*(void (**)(uint64_t, id, __int128 *, id))(v4 + 16))(v4, v5, &v7, v6);
}

void sub_18248EB20(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t nw_path_get_estimated_upload_throughput_internal(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    unsigned int v1 = *(unsigned __int8 *)(a1 + 387);
    uint64_t v2 = 0x8000LL << v1;
    if (v1 > 0x30) {
      uint64_t v2 = -1LL;
    }
    if (*(_BYTE *)(a1 + 387)) {
      return v2;
    }
    else {
      return 0LL;
    }
  }

  __nwlog_obj();
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  uint64_t v15 = "nw_path_get_estimated_upload_throughput_internal";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v15 = "nw_path_get_estimated_upload_throughput_internal";
        _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v15 = "nw_path_get_estimated_upload_throughput_internal";
          __int16 v16 = 2082;
          os_log_type_t v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v10)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v15 = "nw_path_get_estimated_upload_throughput_internal";
        _os_log_impl(&dword_181A5C000, v6, v9, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v15 = "nw_path_get_estimated_upload_throughput_internal";
        _os_log_impl(&dword_181A5C000, v6, v11, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

uint64_t nw_path_get_estimated_download_throughput_internal(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    unsigned int v1 = *(unsigned __int8 *)(a1 + 388);
    uint64_t v2 = 0x8000LL << v1;
    if (v1 > 0x30) {
      uint64_t v2 = -1LL;
    }
    if (*(_BYTE *)(a1 + 388)) {
      return v2;
    }
    else {
      return 0LL;
    }
  }

  __nwlog_obj();
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  uint64_t v15 = "nw_path_get_estimated_download_throughput_internal";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v15 = "nw_path_get_estimated_download_throughput_internal";
        _os_log_impl(&dword_181A5C000, v6, v7, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v15 = "nw_path_get_estimated_download_throughput_internal";
          __int16 v16 = 2082;
          os_log_type_t v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v10)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v15 = "nw_path_get_estimated_download_throughput_internal";
        _os_log_impl(&dword_181A5C000, v6, v9, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v15 = "nw_path_get_estimated_download_throughput_internal";
        _os_log_impl(&dword_181A5C000, v6, v11, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

uint64_t nw_path_get_estimated_upload_throughput(void *a1)
{
  uint64_t v54 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = (id *)v1;
    if (nw_path_report_estimated_throughput_usage(NWConcrete_nw_path *,BOOL)::usage_report_count > 0x3E7)
    {
      if (!gLogDatapath)
      {
LABEL_63:

        unsigned int v35 = *((unsigned __int8 *)v3 + 387);
        uint64_t v36 = 0x8000LL << v35;
        if (v35 > 0x30) {
          uint64_t v36 = -1LL;
        }
        if (*((_BYTE *)v3 + 387)) {
          uint64_t v37 = v36;
        }
        else {
          uint64_t v37 = 0LL;
        }
        goto LABEL_68;
      }

      __nwlog_obj();
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v51 = "nw_path_report_estimated_throughput_usage";
        _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_DEBUG,  "%{public}s Estimated throughput usage exceeded cap, ignoring",  buf,  0xCu);
      }

void sub_18248F8C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_path_get_estimated_download_throughput(void *a1)
{
  uint64_t v54 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = (id *)v1;
    if (nw_path_report_estimated_throughput_usage(NWConcrete_nw_path *,BOOL)::usage_report_count > 0x3E7)
    {
      if (!gLogDatapath)
      {
LABEL_63:

        unsigned int v35 = *((unsigned __int8 *)v3 + 388);
        uint64_t v36 = 0x8000LL << v35;
        if (v35 > 0x30) {
          uint64_t v36 = -1LL;
        }
        if (*((_BYTE *)v3 + 388)) {
          uint64_t v37 = v36;
        }
        else {
          uint64_t v37 = 0LL;
        }
        goto LABEL_68;
      }

      __nwlog_obj();
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v51 = "nw_path_report_estimated_throughput_usage";
        _os_log_impl( &dword_181A5C000,  v4,  OS_LOG_TYPE_DEBUG,  "%{public}s Estimated throughput usage exceeded cap, ignoring",  buf,  0xCu);
      }

void sub_182490164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_path_flow_copy_local_endpoint(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[4];
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  __int16 v16 = "nw_path_flow_copy_local_endpoint";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_path_flow_copy_local_endpoint";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null flow", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v16 = "nw_path_flow_copy_local_endpoint";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null flow, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_path_flow_copy_local_endpoint";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_path_flow_copy_local_endpoint";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

id nw_path_flow_copy_remote_endpoint(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[5];
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  __int16 v16 = "nw_path_flow_copy_remote_endpoint";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_path_flow_copy_remote_endpoint";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null flow", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v16 = "nw_path_flow_copy_remote_endpoint";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null flow, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_path_flow_copy_remote_endpoint";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_path_flow_copy_remote_endpoint";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

id nw_path_flow_copy_interface(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[2];
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  __int16 v16 = "nw_path_flow_copy_interface";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_path_flow_copy_interface";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null flow", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v16 = "nw_path_flow_copy_interface";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null flow, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_path_flow_copy_interface";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_path_flow_copy_interface";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

uint64_t nw_path_flow_get_id(void *a1, _OWORD *a2)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    uint64_t v19 = "nw_path_flow_get_id";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v9, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v19 = "nw_path_flow_get_id";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null flow", buf, 0xCu);
        }
      }

      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        BOOL v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)int buf = 136446466;
            uint64_t v19 = "nw_path_flow_get_id";
            __int16 v20 = 2082;
            os_log_type_t v21 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null flow, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }

        if (v14)
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v19 = "nw_path_flow_get_id";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null flow, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v19 = "nw_path_flow_get_id";
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null flow, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_182490C30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_path_flow_get_protocol_level(void *a1)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = (unsigned __int8 *)v1;
  if (!v1)
  {
    __nwlog_obj();
    os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)size_t length = 136446210;
    *(void *)&length[4] = "nw_path_flow_get_protocol_level";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v12, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)size_t length = 136446210;
          *(void *)&length[4] = "nw_path_flow_get_protocol_level";
          _os_log_impl(&dword_181A5C000, v13, v14, "%{public}s called with null flow", length, 0xCu);
        }
      }

      else if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v16 = type;
        BOOL v17 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)size_t length = 136446466;
            *(void *)&length[4] = "nw_path_flow_get_protocol_level";
            __int16 v22 = 2082;
            BOOL v23 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null flow, dumping backtrace:%{public}s",  length,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_35;
        }

        if (v17)
        {
          *(_DWORD *)size_t length = 136446210;
          *(void *)&length[4] = "nw_path_flow_get_protocol_level";
          _os_log_impl(&dword_181A5C000, v13, v16, "%{public}s called with null flow, no backtrace", length, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)size_t length = 136446210;
          *(void *)&length[4] = "nw_path_flow_get_protocol_level";
          _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null flow, backtrace limit exceeded",  length,  0xCu);
        }
      }
    }

void sub_182490F68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_path_flow_get_nexus_agent_uuid(void *a1, _OWORD *a2)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    char v19 = "nw_path_flow_get_nexus_agent_uuid";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v9, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        unsigned int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)int buf = 136446210;
          char v19 = "nw_path_flow_get_nexus_agent_uuid";
          _os_log_impl(&dword_181A5C000, v10, v11, "%{public}s called with null flow", buf, 0xCu);
        }
      }

      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        unsigned int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        BOOL v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)int buf = 136446466;
            char v19 = "nw_path_flow_get_nexus_agent_uuid";
            __int16 v20 = 2082;
            os_log_type_t v21 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v10,  v13,  "%{public}s called with null flow, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }

        if (v14)
        {
          *(_DWORD *)int buf = 136446210;
          char v19 = "nw_path_flow_get_nexus_agent_uuid";
          _os_log_impl(&dword_181A5C000, v10, v13, "%{public}s called with null flow, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        unsigned int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v15 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)int buf = 136446210;
          char v19 = "nw_path_flow_get_nexus_agent_uuid";
          _os_log_impl( &dword_181A5C000,  v10,  v15,  "%{public}s called with null flow, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_18249122C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_path_flow_is_viable(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *((_BYTE *)v1 + 185) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  char v16 = "nw_path_flow_is_viable";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_flow_is_viable";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null flow", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          char v16 = "nw_path_flow_is_viable";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null flow, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_flow_is_viable";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_flow_is_viable";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

uint64_t nw_path_flow_is_assigned(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[185] >> 1) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  char v16 = "nw_path_flow_is_assigned";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_flow_is_assigned";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null flow", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          char v16 = "nw_path_flow_is_assigned";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null flow, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_flow_is_assigned";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_flow_is_assigned";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

uint64_t nw_path_flow_ecn_enabled(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[185] >> 2) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  char v16 = "nw_path_flow_ecn_enabled";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_flow_ecn_enabled";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null flow", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          char v16 = "nw_path_flow_ecn_enabled";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null flow, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_flow_ecn_enabled";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_flow_ecn_enabled";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

uint64_t nw_path_flow_fast_open_blocked(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[185] >> 3) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  char v16 = "nw_path_flow_fast_open_blocked";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_flow_fast_open_blocked";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null flow", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          char v16 = "nw_path_flow_fast_open_blocked";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null flow, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_flow_fast_open_blocked";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_flow_fast_open_blocked";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

uint64_t nw_path_flow_is_local(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[185] >> 4) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  char v16 = "nw_path_flow_is_local";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_flow_is_local";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null flow", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          char v16 = "nw_path_flow_is_local";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null flow, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_flow_is_local";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_flow_is_local";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

uint64_t nw_path_flow_is_direct(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[185] >> 5) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  char v16 = "nw_path_flow_is_direct";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_flow_is_direct";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null flow", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          char v16 = "nw_path_flow_is_direct";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null flow, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_flow_is_direct";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_flow_is_direct";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

uint64_t nw_path_flow_is_defunct(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[186] >> 2) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  char v16 = "nw_path_flow_is_defunct";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_flow_is_defunct";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null flow", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          char v16 = "nw_path_flow_is_defunct";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null flow, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_flow_is_defunct";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_flow_is_defunct";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

uint64_t nw_path_flow_has_ipv4(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[185] >> 6) & 1;
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  char v16 = "nw_path_flow_has_ipv4";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_flow_has_ipv4";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null flow", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          char v16 = "nw_path_flow_has_ipv4";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null flow, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_flow_has_ipv4";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_flow_has_ipv4";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

BOOL nw_path_flow_has_ipv6(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    BOOL v3 = v1[185] < 0;
    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  char v16 = "nw_path_flow_has_ipv6";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_flow_has_ipv6";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null flow", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          char v16 = "nw_path_flow_has_ipv6";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null flow, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_flow_has_ipv6";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_flow_has_ipv6";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

BOOL nw_path_flow_ids_are_equal(void *a1, void *a2)
{
  BOOL v3 = a1;
  uint64_t v4 = a2;
  BOOL v5 = v3 == v4;
  if (v3 != v4 && v3 && v4) {
    BOOL v5 = v3[18] == v4[18] && v3[19] == v4[19];
  }

  return v5;
}

id nw_path_flow_copy_error(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[8];
    goto LABEL_3;
  }

  __nwlog_obj();
  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  char v16 = "nw_path_flow_copy_error";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_flow_copy_error";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null flow", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          char v16 = "nw_path_flow_copy_error";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null flow, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_flow_copy_error";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_flow_copy_error";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

void nw_path_flow_registration_set_advisory_region(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    *((void *)v3 + 10) = a2;
    goto LABEL_3;
  }

  __nwlog_obj();
  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  char v16 = "nw_path_flow_registration_set_advisory_region";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_flow_registration_set_advisory_region";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null flow_registration", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          char v16 = "nw_path_flow_registration_set_advisory_region";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null flow_registration, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_flow_registration_set_advisory_region";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null flow_registration, no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v16 = "nw_path_flow_registration_set_advisory_region";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null flow_registration, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

BOOL nw_path_is_per_app_vpn(void *a1)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    BOOL vpn_config_uuid = nw_path_get_vpn_config_uuid(v1, (unsigned __int8 (*)[16])buf, 0LL, 0, 0);
    goto LABEL_3;
  }

  __nwlog_obj();
  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_path_is_per_app_vpn";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_is_per_app_vpn";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_path_is_per_app_vpn";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&_BYTE buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null path, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_is_per_app_vpn";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_path_is_per_app_vpn";
        _os_log_impl(&dword_181A5C000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }

void sub_1824931E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_path_override_info *nw_path_override_info_create()
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v0 = objc_alloc_init(&OBJC_CLASS___NWConcrete_nw_path_override_info);
  id v1 = v0;
  if (v0)
  {
    uint64_t v2 = v0;
    goto LABEL_10;
  }

  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v3 = (id)gLogObj;
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v15 = "nw_path_override_info_create";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v5 = (os_log_s *)(id)gLogObj;
    os_log_type_t v6 = type;
    if (os_log_type_enabled(v5, type))
    {
      *(_DWORD *)int buf = 136446210;
      os_log_type_t v15 = "nw_path_override_info_create";
      _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_override_info) alloc] init] failed",  buf,  0xCu);
    }

void nw_path_override_info_set_uses_wifi(void *a1, int a2)
{
}

void nw_path_override_info_update_flag(void *a1, uint64_t a2, int a3)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  os_log_type_t v6 = v5;
  if (v5)
  {
    uint64_t v7 = *((void *)v5 + 1);
    if (a3) {
      uint64_t v8 = v7 | a2;
    }
    else {
      uint64_t v8 = v7 & ~a2;
    }
    *((void *)v5 + 1) = v8;
    goto LABEL_6;
  }

  __nwlog_obj();
  os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  __int16 v20 = "nw_path_override_info_update_flag";
  BOOL v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v20 = "nw_path_override_info_update_flag";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null override_info", buf, 0xCu);
      }
    }

    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v20 = "nw_path_override_info_update_flag";
          __int16 v21 = 2082;
          uint64_t v22 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v14,  "%{public}s called with null override_info, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }

      if (v15)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v20 = "nw_path_override_info_update_flag";
        _os_log_impl(&dword_181A5C000, v11, v14, "%{public}s called with null override_info, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v20 = "nw_path_override_info_update_flag";
        _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null override_info, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void nw_path_override_info_set_uses_cellular(void *a1, int a2)
{
}

void nw_path_override_info_set_expensive(void *a1, int a2)
{
}

void nw_path_override_info_set_constrained(void *a1, int a2)
{
}

void nw_path_override_info_set_roaming(void *a1, int a2)
{
}

void nw_path_override_info_add_resolver_config(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v26 = "nw_path_override_info_add_resolver_config";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v26 = "nw_path_override_info_add_resolver_config";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null override_info", buf, 0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v26 = "nw_path_override_info_add_resolver_config";
          __int16 v27 = 2082;
          uint64_t v28 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null override_info, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v10) {
          goto LABEL_6;
        }
LABEL_41:
        free(v10);
        goto LABEL_6;
      }

      if (v17)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v26 = "nw_path_override_info_add_resolver_config";
        _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null override_info, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v26 = "nw_path_override_info_add_resolver_config";
        _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s called with null override_info, backtrace limit exceeded",  buf,  0xCu);
      }
    }

BOOL nw_path_override_info_copy_data(void *a1)
{
  uint64_t v76 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    os_log_type_t v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v66 = "nw_path_override_info_copy_data";
    os_log_type_t v22 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v59) = 0;
    if (__nwlog_fault(v22, type, &v59))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        char v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v24 = type[0];
        if (os_log_type_enabled(v23, type[0]))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v66 = "nw_path_override_info_copy_data";
          _os_log_impl(&dword_181A5C000, v23, v24, "%{public}s called with null override_info", buf, 0xCu);
        }
      }

      else if ((_BYTE)v59)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        char v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v36 = type[0];
        BOOL v37 = os_log_type_enabled(v23, type[0]);
        if (backtrace_string)
        {
          if (v37)
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v66 = "nw_path_override_info_copy_data";
            __int16 v67 = 2082;
            size_t v68 = (size_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v23,  v36,  "%{public}s called with null override_info, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_79;
        }

        if (v37)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v66 = "nw_path_override_info_copy_data";
          _os_log_impl(&dword_181A5C000, v23, v36, "%{public}s called with null override_info, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        char v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v44 = type[0];
        if (os_log_type_enabled(v23, type[0]))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v66 = "nw_path_override_info_copy_data";
          _os_log_impl( &dword_181A5C000,  v23,  v44,  "%{public}s called with null override_info, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

uint64_t __nw_path_override_info_copy_data_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  dispatch_data_t v4 = nw_resolver_config_copy_plist_data(a3);
  if (v4)
  {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
    if (!v5)
    {
      BOOL v6 = nw_array_create();
      uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8LL);
      uint64_t v8 = *(void **)(v7 + 40);
      *(void *)(v7 + 40) = v6;

      uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
    }

    nw_array_append(v5, v4);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) += dispatch_data_get_size(v4) + 5;
  }

  return 1LL;
}

BOOL __nw_path_override_info_copy_data_block_invoke_2(void *a1, uint64_t a2, void *a3)
{
  uint64_t v66 = *MEMORY[0x1895F89C0];
  dispatch_data_t v4 = a3;
  size_t size = dispatch_data_get_size(v4);
  if (!size)
  {
    os_log_type_t v22 = a1;
    __nwlog_obj();
    char v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t applier = 136446210;
    *(void *)&void applier[4] = "strict_malloc";
    os_log_type_t v24 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v24);
    if (result) {
      goto LABEL_113;
    }
    free(v24);
    a1 = v22;
  }

  BOOL v6 = malloc(size);
  if (v6) {
    goto LABEL_3;
  }
  BOOL v25 = a1;
  __nwlog_obj();
  os_log_type_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v26, OS_LOG_TYPE_ERROR);
  *(_DWORD *)uint64_t applier = 136446466;
  *(void *)&void applier[4] = "strict_malloc";
  *(_WORD *)&applier[12] = 2048;
  *(void *)&applier[14] = size;
  __int16 v27 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v27);
  if (result)
  {
LABEL_113:
    __break(1u);
    return result;
  }

  free(v27);
  a1 = v25;
LABEL_3:
  *(void *)os_log_type_t type = 0LL;
  BOOL v60 = type;
  uint64_t v61 = 0x2000000000LL;
  uint64_t v62 = 0LL;
  v58[0] = 0LL;
  v58[1] = v58;
  v58[2] = 0x2000000000LL;
  v58[3] = v6;
  if (v4)
  {
    *(void *)uint64_t applier = MEMORY[0x1895F87A8];
    *(void *)&applier[8] = 0x40000000LL;
    *(void *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
    *(void *)os_log_type_t v64 = &unk_189BBF598;
    *(void *)&v64[16] = v58;
    *(void *)&v64[24] = size;
    *(void *)&v64[8] = type;
    dispatch_data_apply(v4, applier);
    uint64_t v7 = *((void *)v60 + 3);
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  _Block_object_dispose(v58, 8);
  _Block_object_dispose(type, 8);
  if (v7 != size) {
    goto LABEL_36;
  }
  unint64_t v8 = *(void *)(*(void *)(a1[4] + 8LL) + 24LL);
  if (!v8)
  {
    uint64_t v28 = a1;
    __nwlog_obj();
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)uint64_t applier = 136446210;
    *(void *)&void applier[4] = "nw_necp_append_tlv";
    unsigned int v30 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v58[0]) = 0;
    if (__nwlog_fault(v30, type, v58))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v32 = type[0];
        if (os_log_type_enabled(v31, type[0]))
        {
          *(_DWORD *)uint64_t applier = 136446210;
          *(void *)&void applier[4] = "nw_necp_append_tlv";
          _os_log_impl(&dword_181A5C000, v31, v32, "%{public}s called with null tlv_start", applier, 0xCu);
        }

        goto LABEL_97;
      }

      if (!LOBYTE(v58[0]))
      {
        __nwlog_obj();
        uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v50 = type[0];
        if (os_log_type_enabled(v31, type[0]))
        {
          *(_DWORD *)uint64_t applier = 136446210;
          *(void *)&void applier[4] = "nw_necp_append_tlv";
          _os_log_impl( &dword_181A5C000,  v31,  v50,  "%{public}s called with null tlv_start, backtrace limit exceeded",  applier,  0xCu);
        }

        goto LABEL_97;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v38 = type[0];
      BOOL v39 = os_log_type_enabled(v31, type[0]);
      if (!backtrace_string)
      {
        if (v39)
        {
          *(_DWORD *)uint64_t applier = 136446210;
          *(void *)&void applier[4] = "nw_necp_append_tlv";
          _os_log_impl(&dword_181A5C000, v31, v38, "%{public}s called with null tlv_start, no backtrace", applier, 0xCu);
        }

        goto LABEL_97;
      }

      if (v39)
      {
        *(_DWORD *)uint64_t applier = 136446466;
        *(void *)&void applier[4] = "nw_necp_append_tlv";
        *(_WORD *)&applier[12] = 2082;
        *(void *)&applier[14] = backtrace_string;
        _os_log_impl( &dword_181A5C000,  v31,  v38,  "%{public}s called with null tlv_start, dumping backtrace:%{public}s",  applier,  0x16u);
      }

uint64_t NWPBPathReadFrom(uint64_t a1, uint64_t a2)
{
  size_t v3 = (int *)MEMORY[0x189611CF0];
  uint64_t v4 = (int)*MEMORY[0x189611CF0];
  unint64_t v5 = *(void *)(a2 + v4);
  BOOL v6 = (int *)MEMORY[0x189611CE8];
  unint64_t v7 = *(void *)(a2 + (int)*MEMORY[0x189611CE8]);
  unint64_t v8 = (int *)MEMORY[0x189611CE0];
  if (v5 >= v7) {
    return *(_BYTE *)(a2 + *v8) == 0;
  }
  unint64_t v10 = (int *)MEMORY[0x189611CD8];
  while (2)
  {
    unint64_t v11 = (_BYTE *)(a2 + *v8);
    if (*v11) {
      return *(_BYTE *)(a2 + *v8) == 0;
    }
    if (v5 >= v7)
    {
      unint64_t v13 = 0LL;
LABEL_39:
      *unint64_t v11 = 1;
LABEL_40:
      int v50 = *(unsigned __int8 *)(a2 + *v8);
      if (*(_BYTE *)(a2 + *v8)) {
        unint64_t v13 = 0LL;
      }
      goto LABEL_42;
    }

    char v12 = *(_BYTE *)(*(void *)(a2 + *v10) + v5);
    *(void *)(a2 + (int)v4) = v5 + 1;
    unint64_t v13 = v12 & 0x7F;
    if ((v12 & 0x80) == 0) {
      goto LABEL_40;
    }
    uint64_t v14 = *v3;
    unint64_t v15 = *(void *)(a2 + v14);
    if (v15 == -1LL || v15 >= *(void *)(a2 + *v6)) {
      goto LABEL_38;
    }
    unint64_t v16 = v15 + 1;
    int v17 = *(char *)(*(void *)(a2 + *v10) + v15);
    *(void *)(a2 + v14) = v16;
    v13 |= (unint64_t)(v17 & 0x7F) << 7;
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_40;
    }
    uint64_t v18 = *v3;
    unint64_t v19 = *(void *)(a2 + v18);
    if (v19 == -1LL || v19 >= *(void *)(a2 + *v6)) {
      goto LABEL_38;
    }
    unint64_t v20 = v19 + 1;
    int v21 = *(char *)(*(void *)(a2 + *v10) + v19);
    *(void *)(a2 + v1_Block_object_dispose(va, 8) = v20;
    v13 |= (unint64_t)(v21 & 0x7F) << 14;
    if ((v21 & 0x80000000) == 0) {
      goto LABEL_40;
    }
    uint64_t v22 = *v3;
    unint64_t v23 = *(void *)(a2 + v22);
    if (v23 == -1LL || v23 >= *(void *)(a2 + *v6)) {
      goto LABEL_38;
    }
    unint64_t v24 = v23 + 1;
    int v25 = *(char *)(*(void *)(a2 + *v10) + v23);
    *(void *)(a2 + v22) = v24;
    v13 |= (unint64_t)(v25 & 0x7F) << 21;
    if ((v25 & 0x80000000) == 0) {
      goto LABEL_40;
    }
    uint64_t v26 = *v3;
    unint64_t v27 = *(void *)(a2 + v26);
    if (v27 == -1LL || v27 >= *(void *)(a2 + *v6)) {
      goto LABEL_38;
    }
    unint64_t v28 = v27 + 1;
    int v29 = *(char *)(*(void *)(a2 + *v10) + v27);
    *(void *)(a2 + v26) = v28;
    v13 |= (unint64_t)(v29 & 0x7F) << 28;
    if ((v29 & 0x80000000) == 0) {
      goto LABEL_40;
    }
    uint64_t v30 = *v3;
    unint64_t v31 = *(void *)(a2 + v30);
    if (v31 == -1LL || v31 >= *(void *)(a2 + *v6)) {
      goto LABEL_38;
    }
    unint64_t v32 = v31 + 1;
    int v33 = *(char *)(*(void *)(a2 + *v10) + v31);
    *(void *)(a2 + v30) = v32;
    if ((v33 & 0x80000000) == 0) {
      goto LABEL_40;
    }
    uint64_t v34 = *v3;
    unint64_t v35 = *(void *)(a2 + v34);
    if (v35 == -1LL || v35 >= *(void *)(a2 + *v6)) {
      goto LABEL_38;
    }
    unint64_t v36 = v35 + 1;
    int v37 = *(char *)(*(void *)(a2 + *v10) + v35);
    *(void *)(a2 + v34) = v36;
    if ((v37 & 0x80000000) == 0) {
      goto LABEL_40;
    }
    uint64_t v38 = *v3;
    unint64_t v39 = *(void *)(a2 + v38);
    if (v39 == -1LL || v39 >= *(void *)(a2 + *v6)) {
      goto LABEL_38;
    }
    unint64_t v40 = v39 + 1;
    int v41 = *(char *)(*(void *)(a2 + *v10) + v39);
    *(void *)(a2 + v3_Block_object_dispose(va, 8) = v40;
    if ((v41 & 0x80000000) == 0) {
      goto LABEL_40;
    }
    uint64_t v42 = *v3;
    unint64_t v43 = *(void *)(a2 + v42);
    if (v43 == -1LL || v43 >= *(void *)(a2 + *v6)) {
      goto LABEL_38;
    }
    unint64_t v44 = v43 + 1;
    int v45 = *(char *)(*(void *)(a2 + *v10) + v43);
    *(void *)(a2 + v42) = v44;
    if ((v45 & 0x80000000) == 0) {
      goto LABEL_40;
    }
    uint64_t v46 = *v3;
    unint64_t v47 = *(void *)(a2 + v46);
    if (v47 == -1LL || v47 >= *(void *)(a2 + *v6))
    {
LABEL_38:
      unint64_t v11 = (_BYTE *)(a2 + *v8);
      goto LABEL_39;
    }

    unint64_t v48 = v47 + 1;
    int v49 = *(char *)(*(void *)(a2 + *v10) + v47);
    *(void *)(a2 + v46) = v48;
    if ((v49 & 0x80000000) == 0) {
      goto LABEL_40;
    }
    unint64_t v13 = 0LL;
    int v50 = *(unsigned __int8 *)(a2 + *v8);
LABEL_42:
    if (v50) {
      BOOL v51 = 1;
    }
    else {
      BOOL v51 = (v13 & 7) == 4;
    }
    if (v51) {
      return *(_BYTE *)(a2 + *v8) == 0;
    }
    switch((v13 >> 3))
    {
      case 1u:
        os_log_type_t v52 = objc_alloc_init(&OBJC_CLASS___NWPBEndpoint);
        objc_storeStrong((id *)(a1 + 40), v52);
        goto LABEL_271;
      case 2u:
        os_log_type_t v52 = objc_alloc_init(&OBJC_CLASS___NWPBParameters);
        objc_storeStrong((id *)(a1 + 48), v52);
        goto LABEL_3;
      case 3u:
        uint64_t v75 = PBReaderReadString();
        uint64_t v76 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v75;

        goto LABEL_4;
      case 4u:
        *(_BYTE *)(a1 + 64) |= 1u;
        uint64_t v77 = *v3;
        unint64_t v78 = *(void *)(a2 + v77);
        if (v78 == -1LL || v78 >= *(void *)(a2 + *v6))
        {
          unsigned int v81 = 0;
LABEL_154:
          *(_BYTE *)(a2 + *v_Block_object_dispose(va, 8) = 1;
          goto LABEL_155;
        }

        unint64_t v79 = v78 + 1;
        char v80 = *(_BYTE *)(*(void *)(a2 + *v10) + v78);
        *(void *)(a2 + v77) = v79;
        unsigned int v81 = v80 & 0x7F;
        if ((v80 & 0x80) == 0) {
          goto LABEL_155;
        }
        uint64_t v82 = *v3;
        unint64_t v83 = *(void *)(a2 + v82);
        if (v83 == -1LL || v83 >= *(void *)(a2 + *v6)) {
          goto LABEL_154;
        }
        int v84 = *(char *)(*(void *)(a2 + *v10) + v83);
        *(void *)(a2 + v82) = v83 + 1;
        unsigned int v81 = v81 & 0xFFFFC07F | ((v84 & 0x7F) << 7);
        if ((v84 & 0x80000000) == 0) {
          goto LABEL_155;
        }
        uint64_t v85 = *v3;
        unint64_t v86 = *(void *)(a2 + v85);
        if (v86 == -1LL || v86 >= *(void *)(a2 + *v6)) {
          goto LABEL_154;
        }
        int v87 = *(char *)(*(void *)(a2 + *v10) + v86);
        *(void *)(a2 + v85) = v86 + 1;
        unsigned int v81 = v81 & 0xFFE03FFF | ((v87 & 0x7F) << 14);
        if ((v87 & 0x80000000) == 0) {
          goto LABEL_155;
        }
        uint64_t v88 = *v3;
        unint64_t v89 = *(void *)(a2 + v88);
        if (v89 == -1LL || v89 >= *(void *)(a2 + *v6)) {
          goto LABEL_154;
        }
        int v90 = *(char *)(*(void *)(a2 + *v10) + v89);
        *(void *)(a2 + v8_Block_object_dispose(va, 8) = v89 + 1;
        unsigned int v81 = v81 & 0xF01FFFFF | ((v90 & 0x7F) << 21);
        if ((v90 & 0x80000000) == 0) {
          goto LABEL_155;
        }
        uint64_t v91 = *v3;
        unint64_t v92 = *(void *)(a2 + v91);
        if (v92 == -1LL || v92 >= *(void *)(a2 + *v6)) {
          goto LABEL_154;
        }
        unint64_t v93 = v92 + 1;
        int v94 = *(char *)(*(void *)(a2 + *v10) + v92);
        *(void *)(a2 + v91) = v93;
        v81 |= v94 << 28;
        if ((v94 & 0x80000000) == 0) {
          goto LABEL_155;
        }
        uint64_t v166 = *v3;
        unint64_t v167 = *(void *)(a2 + v166);
        if (v167 == -1LL || v167 >= *(void *)(a2 + *v6)) {
          goto LABEL_154;
        }
        unint64_t v168 = v167 + 1;
        int v169 = *(char *)(*(void *)(a2 + *v10) + v167);
        *(void *)(a2 + v166) = v168;
        if (v169 < 0)
        {
          uint64_t v170 = *v3;
          unint64_t v171 = *(void *)(a2 + v170);
          if (v171 == -1LL || v171 >= *(void *)(a2 + *v6)) {
            goto LABEL_154;
          }
          unint64_t v172 = v171 + 1;
          int v173 = *(char *)(*(void *)(a2 + *v10) + v171);
          *(void *)(a2 + v170) = v172;
          if (v173 < 0)
          {
            uint64_t v174 = *v3;
            unint64_t v175 = *(void *)(a2 + v174);
            if (v175 == -1LL || v175 >= *(void *)(a2 + *v6)) {
              goto LABEL_154;
            }
            unint64_t v176 = v175 + 1;
            int v177 = *(char *)(*(void *)(a2 + *v10) + v175);
            *(void *)(a2 + v174) = v176;
            if (v177 < 0)
            {
              uint64_t v178 = *v3;
              unint64_t v179 = *(void *)(a2 + v178);
              if (v179 == -1LL || v179 >= *(void *)(a2 + *v6)) {
                goto LABEL_154;
              }
              unint64_t v180 = v179 + 1;
              int v181 = *(char *)(*(void *)(a2 + *v10) + v179);
              *(void *)(a2 + v17_Block_object_dispose(va, 8) = v180;
              if (v181 < 0)
              {
                uint64_t v182 = *v3;
                unint64_t v183 = *(void *)(a2 + v182);
                if (v183 == -1LL || v183 >= *(void *)(a2 + *v6)) {
                  goto LABEL_154;
                }
                unint64_t v184 = v183 + 1;
                int v185 = *(char *)(*(void *)(a2 + *v10) + v183);
                *(void *)(a2 + v182) = v184;
                if (v185 < 0)
                {
                  unsigned int v81 = 0;
                  goto LABEL_157;
                }
              }
            }
          }
        }

BOOL nw_protocol_http_alt_svc_create(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    unint64_t v24 = "nw_protocol_http_alt_svc_create";
    char v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v12, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        unint64_t v13 = (os_log_s *)__nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)int buf = 136446210;
          unint64_t v24 = "nw_protocol_http_alt_svc_create";
          unint64_t v15 = "%{public}s called with null parameters";
LABEL_30:
          _os_log_impl(&dword_181A5C000, v13, v14, v15, buf, 0xCu);
        }
      }

      else if (v21)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        unint64_t v13 = (os_log_s *)__nwlog_obj();
        os_log_type_t v14 = type;
        BOOL v20 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)int buf = 136446466;
            unint64_t v24 = "nw_protocol_http_alt_svc_create";
            __int16 v25 = 2082;
            uint64_t v26 = (uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s called with null parameters, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_31;
        }

        if (v20)
        {
          *(_DWORD *)int buf = 136446210;
          unint64_t v24 = "nw_protocol_http_alt_svc_create";
          unint64_t v15 = "%{public}s called with null parameters, no backtrace";
          goto LABEL_30;
        }
      }

      else
      {
        unint64_t v13 = (os_log_s *)__nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)int buf = 136446210;
          unint64_t v24 = "nw_protocol_http_alt_svc_create";
          unint64_t v15 = "%{public}s called with null parameters, backtrace limit exceeded";
          goto LABEL_30;
        }
      }
    }

uint64_t nw_protocol_http_alt_svc_create::$_0::__invoke( nw_protocol_http_alt_svc_create::$_0 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1LL;
}

void ___ZL38nw_protocol_http_alt_svc_get_callbacksv_block_invoke()
{
  qword_18C592B88 = (uint64_t)nw_protocol_common_get_parameters;
  unk_18C592B90 = nw_protocol_common_get_path;
  qword_18C592B38 = (uint64_t)nw_protocol_common_disconnect;
  unk_18C592B40 = nw_protocol_common_connected;
  qword_18C592B58 = (uint64_t)nw_protocol_common_input_available;
  unk_18C592B60 = nw_protocol_common_output_available;
  qword_18C592BD8 = (uint64_t)nw_protocol_common_output_finished;
  unk_18C592BE0 = nw_protocol_common_get_output_local_endpoint;
  qword_18C592C20 = (uint64_t)nw_protocol_common_input_flush;
  qword_18C592B48 = (uint64_t)nw_protocol_common_disconnected;
  unk_18C592B50 = nw_protocol_common_error;
  qword_18C592C10 = (uint64_t)nw_protocol_common_get_message_properties;
  unk_18C592C18 = nw_protocol_common_reset;
  qword_18C592BC8 = (uint64_t)nw_protocol_common_supports_external_data;
  unk_18C592BD0 = nw_protocol_common_input_finished;
  qword_18C592BE8 = (uint64_t)nw_protocol_common_get_output_interface;
  unk_18C592BF0 = nw_protocol_common_waiting_for_output;
  qword_18C592BA8 = (uint64_t)nw_protocol_common_register_notification;
  unk_18C592BB0 = nw_protocol_common_unregister_notification;
  qword_18C592BB8 = (uint64_t)nw_protocol_common_notify;
  unk_18C592BC0 = nw_protocol_common_updated_path;
  qword_18C592B78 = (uint64_t)nw_protocol_common_finalize_output_frames;
  unk_18C592B80 = nw_protocol_common_link_state;
  qword_18C592B28 = (uint64_t)nw_protocol_common_replace_input_handler;
  unk_18C592B30 = nw_protocol_http_alt_svc_connect;
  qword_18C592B98 = (uint64_t)nw_protocol_common_get_local_endpoint;
  unk_18C592BA0 = nw_protocol_http_alt_svc_get_remote_endpoint;
  nw_protocol_http_alt_svc_get_callbacks(void)::protocol_uint64_t callbacks = (uint64_t)nw_protocol_common_add_input_handler;
  unk_18C592B20 = nw_protocol_http_alt_svc_remove_input_handler;
  qword_18C592B68 = (uint64_t)nw_protocol_http_alt_svc_get_input_frames;
  unk_18C592B70 = nw_protocol_common_get_output_frames;
  qword_18C592BF8 = (uint64_t)nw_protocol_http_alt_svc_copy_info;
}

uint64_t nw_protocol_http_alt_svc_connect(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v117 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
    uint64_t v38 = (char *)_os_log_send_and_compose_impl();
    v114[0] = 16;
    LOBYTE(v101) = 0;
    if (v114[0] == 17)
    {
      unint64_t v39 = (os_log_s *)__nwlog_obj();
      os_log_type_t v40 = v114[0];
      if (!os_log_type_enabled(v39, (os_log_type_t)v114[0])) {
        goto LABEL_156;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
      int v41 = "%{public}s called with null protocol";
LABEL_155:
      _os_log_impl(&dword_181A5C000, v39, v40, v41, buf, 0xCu);
      goto LABEL_156;
    }

    if (!(_BYTE)v101)
    {
      unint64_t v39 = (os_log_s *)__nwlog_obj();
      os_log_type_t v40 = v114[0];
      if (os_log_type_enabled(v39, (os_log_type_t)v114[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
        int v41 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_155;
      }

      goto LABEL_156;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    unint64_t v39 = (os_log_s *)__nwlog_obj();
    os_log_type_t v40 = v114[0];
    BOOL v59 = os_log_type_enabled(v39, (os_log_type_t)v114[0]);
    if (!backtrace_string)
    {
      if (v59)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
        int v41 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_155;
      }

      goto LABEL_156;
    }

    if (!v59) {
      goto LABEL_104;
    }
    *(_DWORD *)int buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&_BYTE buf[14] = backtrace_string;
    unint64_t v60 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_103:
    _os_log_impl(&dword_181A5C000, v39, v40, v60, buf, 0x16u);
    goto LABEL_104;
  }

  char handle = (void **)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
    uint64_t v38 = (char *)_os_log_send_and_compose_impl();
    v114[0] = 16;
    LOBYTE(v101) = 0;
    if (v114[0] == 17)
    {
      unint64_t v39 = (os_log_s *)__nwlog_obj();
      os_log_type_t v40 = v114[0];
      if (!os_log_type_enabled(v39, (os_log_type_t)v114[0])) {
        goto LABEL_156;
      }
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
      int v41 = "%{public}s called with null http_alt_svc";
      goto LABEL_155;
    }

    if (!(_BYTE)v101)
    {
      unint64_t v39 = (os_log_s *)__nwlog_obj();
      os_log_type_t v40 = v114[0];
      if (os_log_type_enabled(v39, (os_log_type_t)v114[0]))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
        int v41 = "%{public}s called with null http_alt_svc, backtrace limit exceeded";
        goto LABEL_155;
      }

      goto LABEL_156;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    unint64_t v39 = (os_log_s *)__nwlog_obj();
    os_log_type_t v40 = v114[0];
    BOOL v61 = os_log_type_enabled(v39, (os_log_type_t)v114[0]);
    if (!backtrace_string)
    {
      if (v61)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
        int v41 = "%{public}s called with null http_alt_svc, no backtrace";
        goto LABEL_155;
      }

      goto LABEL_156;
    }

    if (!v61) {
      goto LABEL_104;
    }
    *(_DWORD *)int buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_http_alt_svc_connect";
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&_BYTE buf[14] = backtrace_string;
    unint64_t v60 = "%{public}s called with null http_alt_svc, dumping backtrace:%{public}s";
    goto LABEL_103;
  }

  if (a2)
  {
    uint64_t v101 = 0LL;
    unint64_t v102 = &v101;
    uint64_t v103 = 0x3802000000LL;
    uint64_t v104 = __Block_byref_object_copy__70711;
    unint64_t v105 = __Block_byref_object_dispose__70712;
    remote_endpoint = (void *)nw_protocol_get_remote_endpoint((uint64_t)a1->default_input_handler);
    unint64_t v106 = nw_endpoint_copy(remote_endpoint);
    v107 |= 1u;
    unint64_t v89 = a1;
    parameters = (void *)nw_protocol_get_parameters((uint64_t)a1->default_input_handler);
    if (nw_protocol_copy_http_alt_svc_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_alt_svc_definition_onceToken, &__block_literal_global_14_72923);
    }
    id v6 = (id)nw_protocol_copy_http_alt_svc_definition_http_alt_svc_definition;
    uint64_t v7 = nw_parameters_copy_protocol_options_for_definition(parameters, v6);
    if (v6) {
      os_release(v6);
    }
    if (v7)
    {
      object = v7;
      unint64_t v8 = nw_protocol_options_copy_definition(object);
      if (nw_protocol_copy_http_alt_svc_definition_onceToken != -1) {
        dispatch_once(&nw_protocol_copy_http_alt_svc_definition_onceToken, &__block_literal_global_14_72923);
      }
      BOOL is_equal = nw_protocol_definition_is_equal( v8,  (nw_protocol_definition_t)nw_protocol_copy_http_alt_svc_definition_http_alt_svc_definition);

      if (is_equal)
      {
        *(void *)int buf = 0LL;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x3032000000LL;
        int v111 = __Block_byref_object_copy__4;
        uint64_t v112 = (uint8_t *)__Block_byref_object_dispose__5;
        id v113 = 0LL;
        *(void *)unint64_t v114 = MEMORY[0x1895F87A8];
        *(void *)&v114[8] = 3221225472LL;
        *(void *)&v114[16] = __nw_http_alt_svc_options_copy_alt_svc_storage_block_invoke;
        *(void *)&v114[24] = &unk_189BC60A8;
        *(void *)&__int128 v115 = buf;
        nw_protocol_options_access_handle(object, v114);
        id v90 = *(id *)(*(void *)&buf[8] + 40LL);
        _Block_object_dispose(buf, 8);

        goto LABEL_13;
      }

      __nwlog_obj();
      uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_alt_svc_options_copy_alt_svc_storage";
      LODWORD(v87) = 12;
      unint64_t v86 = buf;
      unint64_t v47 = (char *)_os_log_send_and_compose_impl();

      v114[0] = 16;
      LOBYTE(v97) = 0;
      if (__nwlog_fault(v47, v114, &v97))
      {
        if (v114[0] == 17)
        {
          __nwlog_obj();
          unint64_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v49 = v114[0];
          if (os_log_type_enabled(v48, (os_log_type_t)v114[0]))
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_alt_svc_options_copy_alt_svc_storage";
            _os_log_impl(&dword_181A5C000, v48, v49, "%{public}s protocol options are not http_alt_svc", buf, 0xCu);
          }
        }

        else if ((_BYTE)v97)
        {
          unint64_t v65 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          unint64_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v66 = v114[0];
          BOOL v67 = os_log_type_enabled(v48, (os_log_type_t)v114[0]);
          if (v65)
          {
            if (v67)
            {
              *(_DWORD *)int buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_http_alt_svc_options_copy_alt_svc_storage";
              *(_WORD *)&_BYTE buf[12] = 2082;
              *(void *)&_BYTE buf[14] = v65;
              _os_log_impl( &dword_181A5C000,  v48,  v66,  "%{public}s protocol options are not http_alt_svc, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(v65);
            goto LABEL_168;
          }

          if (v67)
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_alt_svc_options_copy_alt_svc_storage";
            _os_log_impl( &dword_181A5C000,  v48,  v66,  "%{public}s protocol options are not http_alt_svc, no backtrace",  buf,  0xCu);
          }
        }

        else
        {
          __nwlog_obj();
          unint64_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          os_log_type_t v79 = v114[0];
          if (os_log_type_enabled(v48, (os_log_type_t)v114[0]))
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_http_alt_svc_options_copy_alt_svc_storage";
            _os_log_impl( &dword_181A5C000,  v48,  v79,  "%{public}s protocol options are not http_alt_svc, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

void sub_18249A9D8(_Unwind_Exception *a1)
{
}

uint64_t nw_protocol_http_alt_svc_get_remote_endpoint(nw_protocol *a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    unint64_t v15 = "nw_protocol_http_alt_svc_get_remote_endpoint";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      unint64_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)int buf = 136446210;
      unint64_t v15 = "nw_protocol_http_alt_svc_get_remote_endpoint";
      uint64_t v7 = "%{public}s called with null protocol";
    }

    else
    {
      if (!v12)
      {
        unint64_t v5 = (os_log_s *)__nwlog_obj();
        os_log_type_t v6 = type;
        if (!os_log_type_enabled(v5, type)) {
          goto LABEL_34;
        }
        *(_DWORD *)int buf = 136446210;
        unint64_t v15 = "nw_protocol_http_alt_svc_get_remote_endpoint";
        uint64_t v7 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_33;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      unint64_t v5 = (os_log_s *)__nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)int buf = 136446466;
          unint64_t v15 = "nw_protocol_http_alt_svc_get_remote_endpoint";
          __int16 v16 = 2082;
          uint64_t v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v5,  v6,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v4) {
          return 0LL;
        }
        goto LABEL_35;
      }

      if (!v9) {
        goto LABEL_34;
      }
      *(_DWORD *)int buf = 136446210;
      unint64_t v15 = "nw_protocol_http_alt_svc_get_remote_endpoint";
      uint64_t v7 = "%{public}s called with null protocol, no backtrace";
    }

uint64_t nw_protocol_http_alt_svc_remove_input_handler(nw_protocol *a1, nw_protocol *a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    unsigned __int16 v23 = "nw_protocol_http_alt_svc_remove_input_handler";
    unint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_49;
      }
      *(_DWORD *)int buf = 136446210;
      unsigned __int16 v23 = "nw_protocol_http_alt_svc_remove_input_handler";
      BOOL v11 = "%{public}s called with null protocol";
LABEL_48:
      _os_log_impl(&dword_181A5C000, v9, v10, v11, buf, 0xCu);
      goto LABEL_49;
    }

    if (!v20)
    {
      BOOL v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        unsigned __int16 v23 = "nw_protocol_http_alt_svc_remove_input_handler";
        BOOL v11 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v14 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)int buf = 136446210;
        unsigned __int16 v23 = "nw_protocol_http_alt_svc_remove_input_handler";
        BOOL v11 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    if (!v14) {
      goto LABEL_35;
    }
    *(_DWORD *)int buf = 136446466;
    unsigned __int16 v23 = "nw_protocol_http_alt_svc_remove_input_handler";
    __int16 v24 = 2082;
    __int16 v25 = backtrace_string;
    unint64_t v15 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_34:
    _os_log_impl(&dword_181A5C000, v9, v10, v15, buf, 0x16u);
    goto LABEL_35;
  }

  char handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    unsigned __int16 v23 = "nw_protocol_http_alt_svc_remove_input_handler";
    unint64_t v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_49;
      }
      *(_DWORD *)int buf = 136446210;
      unsigned __int16 v23 = "nw_protocol_http_alt_svc_remove_input_handler";
      BOOL v11 = "%{public}s called with null http_alt_svc";
      goto LABEL_48;
    }

    if (!v20)
    {
      BOOL v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        unsigned __int16 v23 = "nw_protocol_http_alt_svc_remove_input_handler";
        BOOL v11 = "%{public}s called with null http_alt_svc, backtrace limit exceeded";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v16 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)int buf = 136446210;
        unsigned __int16 v23 = "nw_protocol_http_alt_svc_remove_input_handler";
        BOOL v11 = "%{public}s called with null http_alt_svc, no backtrace";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    if (!v16) {
      goto LABEL_35;
    }
    *(_DWORD *)int buf = 136446466;
    unsigned __int16 v23 = "nw_protocol_http_alt_svc_remove_input_handler";
    __int16 v24 = 2082;
    __int16 v25 = backtrace_string;
    unint64_t v15 = "%{public}s called with null http_alt_svc, dumping backtrace:%{public}s";
    goto LABEL_34;
  }

  if (a2)
  {
    if ((handle[198] & 1) == 0 && gLogDatapath)
    {
      char v12 = (os_log_s *)__nwlog_obj();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136446722;
        unsigned __int16 v23 = "nw_protocol_http_alt_svc_remove_input_handler";
        __int16 v24 = 2082;
        __int16 v25 = handle + 114;
        __int16 v26 = 2080;
        BOOL v27 = " ";
        _os_log_impl(&dword_181A5C000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
      }
    }

    v18[0] = MEMORY[0x1895F87A8];
    v18[1] = 0x40000000LL;
    v18[2] = ___ZL45nw_protocol_http_alt_svc_remove_input_handlerP11nw_protocolS0_b_block_invoke_2;
    v18[3] = &__block_descriptor_tmp_18_70682;
    char v19 = a3;
    void v18[4] = a1;
    v18[5] = handle;
    return nw_protocol_common_remove_input_handler_with_cleanup_blocks( a1,  a2,  a3,  (uint64_t)&__block_literal_global_17_70683,  (uint64_t)v18);
  }

  __nwlog_obj();
  *(_DWORD *)int buf = 136446210;
  unsigned __int16 v23 = "nw_protocol_http_alt_svc_remove_input_handler";
  unint64_t v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v20)
    {
      BOOL v9 = (os_log_s *)__nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        unsigned __int16 v23 = "nw_protocol_http_alt_svc_remove_input_handler";
        BOOL v11 = "%{public}s called with null input_protocol, backtrace limit exceeded";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v9 = (os_log_s *)__nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v17 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)int buf = 136446210;
        unsigned __int16 v23 = "nw_protocol_http_alt_svc_remove_input_handler";
        BOOL v11 = "%{public}s called with null input_protocol, no backtrace";
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    if (v17)
    {
      *(_DWORD *)int buf = 136446466;
      unsigned __int16 v23 = "nw_protocol_http_alt_svc_remove_input_handler";
      __int16 v24 = 2082;
      __int16 v25 = backtrace_string;
      unint64_t v15 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
      goto LABEL_34;
    }

uint64_t nw_protocol_http_alt_svc_get_input_frames( nw_protocol *a1, nw_protocol *a2, uint64_t a3, uint64_t a4, uint64_t a5, nw_frame_array_s *a6)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v24 = "nw_protocol_http_alt_svc_get_input_frames";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_60;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v24 = "nw_protocol_http_alt_svc_get_input_frames";
      id v13 = "%{public}s called with null protocol";
    }

    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v24 = "nw_protocol_http_alt_svc_get_input_frames";
          __int16 v25 = 2082;
          __int16 v26 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_60:
        if (!v10) {
          return 0LL;
        }
LABEL_61:
        free(v10);
        return 0LL;
      }

      if (!v15) {
        goto LABEL_60;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v24 = "nw_protocol_http_alt_svc_get_input_frames";
      id v13 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      BOOL v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_60;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v24 = "nw_protocol_http_alt_svc_get_input_frames";
      id v13 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_59;
  }

  char handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v24 = "nw_protocol_http_alt_svc_get_input_frames";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v21)
      {
        BOOL v11 = (os_log_s *)__nwlog_obj();
        os_log_type_t v12 = type;
        if (!os_log_type_enabled(v11, type)) {
          goto LABEL_60;
        }
        *(_DWORD *)int buf = 136446210;
        __int16 v24 = "nw_protocol_http_alt_svc_get_input_frames";
        id v13 = "%{public}s called with null http_alt_svc, backtrace limit exceeded";
        goto LABEL_59;
      }

      BOOL v16 = (char *)__nw_create_backtrace_string();
      BOOL v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (!v16)
      {
        if (!v17) {
          goto LABEL_60;
        }
        *(_DWORD *)int buf = 136446210;
        __int16 v24 = "nw_protocol_http_alt_svc_get_input_frames";
        id v13 = "%{public}s called with null http_alt_svc, no backtrace";
        goto LABEL_59;
      }

      if (!v17) {
        goto LABEL_41;
      }
      *(_DWORD *)int buf = 136446466;
      __int16 v24 = "nw_protocol_http_alt_svc_get_input_frames";
      __int16 v25 = 2082;
      __int16 v26 = v16;
      uint64_t v18 = "%{public}s called with null http_alt_svc, dumping backtrace:%{public}s";
      goto LABEL_40;
    }

    BOOL v11 = (os_log_s *)__nwlog_obj();
    os_log_type_t v12 = type;
    if (!os_log_type_enabled(v11, type)) {
      goto LABEL_60;
    }
    *(_DWORD *)int buf = 136446210;
    __int16 v24 = "nw_protocol_http_alt_svc_get_input_frames";
    id v13 = "%{public}s called with null http_alt_svc";
LABEL_59:
    _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
    goto LABEL_60;
  }

  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v24 = "nw_protocol_http_alt_svc_get_input_frames";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_60;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v24 = "nw_protocol_http_alt_svc_get_input_frames";
      id v13 = "%{public}s called with null input_protocol";
      goto LABEL_59;
    }

    if (!v21)
    {
      BOOL v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_60;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v24 = "nw_protocol_http_alt_svc_get_input_frames";
      id v13 = "%{public}s called with null input_protocol, backtrace limit exceeded";
      goto LABEL_59;
    }

    BOOL v16 = (char *)__nw_create_backtrace_string();
    BOOL v11 = (os_log_s *)__nwlog_obj();
    os_log_type_t v12 = type;
    BOOL v19 = os_log_type_enabled(v11, type);
    if (!v16)
    {
      if (!v19) {
        goto LABEL_60;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v24 = "nw_protocol_http_alt_svc_get_input_frames";
      id v13 = "%{public}s called with null input_protocol, no backtrace";
      goto LABEL_59;
    }

    if (!v19) {
      goto LABEL_41;
    }
    *(_DWORD *)int buf = 136446466;
    __int16 v24 = "nw_protocol_http_alt_svc_get_input_frames";
    __int16 v25 = 2082;
    __int16 v26 = v16;
    uint64_t v18 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
LABEL_40:
    _os_log_impl(&dword_181A5C000, v11, v12, v18, buf, 0x16u);
    goto LABEL_41;
  }

  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    __int16 v24 = "nw_protocol_http_alt_svc_get_input_frames";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_60;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v24 = "nw_protocol_http_alt_svc_get_input_frames";
      id v13 = "%{public}s called with null return_array";
      goto LABEL_59;
    }

    if (!v21)
    {
      BOOL v11 = (os_log_s *)__nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_60;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v24 = "nw_protocol_http_alt_svc_get_input_frames";
      id v13 = "%{public}s called with null return_array, backtrace limit exceeded";
      goto LABEL_59;
    }

    BOOL v16 = (char *)__nw_create_backtrace_string();
    BOOL v11 = (os_log_s *)__nwlog_obj();
    os_log_type_t v12 = type;
    BOOL v20 = os_log_type_enabled(v11, type);
    if (!v16)
    {
      if (!v20) {
        goto LABEL_60;
      }
      *(_DWORD *)int buf = 136446210;
      __int16 v24 = "nw_protocol_http_alt_svc_get_input_frames";
      id v13 = "%{public}s called with null return_array, no backtrace";
      goto LABEL_59;
    }

    if (v20)
    {
      *(_DWORD *)int buf = 136446466;
      __int16 v24 = "nw_protocol_http_alt_svc_get_input_frames";
      __int16 v25 = 2082;
      __int16 v26 = v16;
      uint64_t v18 = "%{public}s called with null return_array, dumping backtrace:%{public}s";
      goto LABEL_40;
    }

uint64_t nw_protocol_http_alt_svc_copy_info(uint64_t a1, int a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v19 = "nw_protocol_http_alt_svc_copy_info";
    unint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v19 = "nw_protocol_http_alt_svc_copy_info";
      uint64_t v8 = "%{public}s called with null protocol";
    }

    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v19 = "nw_protocol_http_alt_svc_copy_info";
          __int16 v20 = 2082;
          char v21 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null protocol, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_52:
        if (!v5) {
          return 0LL;
        }
LABEL_53:
        free(v5);
        return 0LL;
      }

      if (!v10) {
        goto LABEL_52;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v19 = "nw_protocol_http_alt_svc_copy_info";
      uint64_t v8 = "%{public}s called with null protocol, no backtrace";
    }

    else
    {
      os_log_type_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_52;
      }
      *(_DWORD *)int buf = 136446210;
      BOOL v19 = "nw_protocol_http_alt_svc_copy_info";
      uint64_t v8 = "%{public}s called with null protocol, backtrace limit exceeded";
    }

    goto LABEL_51;
  }

  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)int buf = 136446210;
    BOOL v19 = "nw_protocol_http_alt_svc_copy_info";
    unint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v16)
      {
        os_log_type_t v6 = (os_log_s *)__nwlog_obj();
        os_log_type_t v7 = type;
        if (!os_log_type_enabled(v6, type)) {
          goto LABEL_52;
        }
        *(_DWORD *)int buf = 136446210;
        BOOL v19 = "nw_protocol_http_alt_svc_copy_info";
        uint64_t v8 = "%{public}s called with null http_alt_svc, backtrace limit exceeded";
        goto LABEL_51;
      }

      BOOL v11 = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = (os_log_s *)__nwlog_obj();
      os_log_type_t v7 = type;
      BOOL v12 = os_log_type_enabled(v6, type);
      if (!v11)
      {
        if (!v12) {
          goto LABEL_52;
        }
        *(_DWORD *)int buf = 136446210;
        BOOL v19 = "nw_protocol_http_alt_svc_copy_info";
        uint64_t v8 = "%{public}s called with null http_alt_svc, no backtrace";
        goto LABEL_51;
      }

      if (v12)
      {
        *(_DWORD *)int buf = 136446466;
        BOOL v19 = "nw_protocol_http_alt_svc_copy_info";
        __int16 v20 = 2082;
        char v21 = v11;
        id v13 = "%{public}s called with null http_alt_svc, dumping backtrace:%{public}s";
LABEL_34:
        _os_log_impl(&dword_181A5C000, v6, v7, v13, buf, 0x16u);
      }

void ___ZL45nw_protocol_http_alt_svc_remove_input_handlerP11nw_protocolS0_b_block_invoke_2(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 48))
  {
    *(void *)(*(void *)(a1 + 32) + 40LL) = 0LL;
    uint64_t v1 = *(void *)(a1 + 40);
    if ((*(_BYTE *)(v1 + 198) & 1) == 0)
    {
      if (gLogDatapath)
      {
        unint64_t v5 = (os_log_s *)__nwlog_obj();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
        {
          int v6 = 136446722;
          os_log_type_t v7 = "nw_http_alt_svc_destroy";
          __int16 v8 = 2082;
          uint64_t v9 = v1 + 114;
          __int16 v10 = 2080;
          BOOL v11 = " ";
          _os_log_impl(&dword_181A5C000, v5, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", (uint8_t *)&v6, 0x20u);
        }
      }
    }

    if ((*(_BYTE *)(v1 + 240) & 1) != 0)
    {
      uint64_t v2 = *(void **)(v1 + 232);
      if (v2) {
        os_release(v2);
      }
    }

    *(void *)(v1 + 232) = 0LL;
    if ((*(_BYTE *)(v1 + 224) & 1) != 0)
    {
      uint64_t v3 = *(void **)(v1 + 216);
      if (v3) {
        os_release(v3);
      }
    }

    *(void *)(v1 + 216) = 0LL;
    if ((*(_BYTE *)(v1 + 208) & 1) != 0)
    {
      uint64_t v4 = *(void **)(v1 + 200);
      if (v4) {
        os_release(v4);
      }
    }

    free((void *)v1);
  }

uint64_t __Block_byref_object_copy__70711(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(_BYTE *)(result + 4_Block_object_dispose((const void *)(v1 - 176), 8) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(void *)(a2 + 40) = 0LL;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__70712(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    uint64_t v2 = *(void **)(a1 + 40);
    if (v2) {
      os_release(v2);
    }
  }

  *(void *)(a1 + 40) = 0LL;
}

void ___ZL32nw_protocol_http_alt_svc_connectP11nw_protocolS0__block_invoke( uint64_t a1, const char *a2, unsigned int a3)
{
  BOOL host_with_numeric_port = nw_endpoint_create_host_with_numeric_port(a2, a3);
  unint64_t v5 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55294);
  }
  id v6 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;
  nw_endpoint_add_alternative(v5, (void *)host_with_numeric_port, v6);
  if (v6) {
    os_release(v6);
  }
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  if (host_with_numeric_port) {
    os_release((void *)host_with_numeric_port);
  }
}

double __nw_protocol_http_alt_svc_identifier_block_invoke()
{
  *(void *)&double result = 0x100000005LL;
  qword_18C592794 = 0x100000005LL;
  return result;
}

void sub_18249C4BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18249C534(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_endpoint_edge *nw_endpoint_edge_create(void *a1, __int128 *a2, char a3)
{
  uint64_t v49 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = objc_alloc(&OBJC_CLASS___NWConcrete_nw_endpoint_edge);
  id v7 = v5;
  __int16 v8 = v7;
  if (!v6) {
    goto LABEL_6;
  }
  if (!v7)
  {
    __nwlog_obj();
    id v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    os_log_type_t v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
    BOOL v14 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v41.receiver) = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v14, &v41, &type))
    {
      if (LOBYTE(v41.receiver) == 17)
      {
        __nwlog_obj();
        BOOL v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t receiver = (os_log_type_t)v41.receiver;
        if (os_log_type_enabled(v15, (os_log_type_t)v41.receiver))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
          _os_log_impl(&dword_181A5C000, v15, receiver, "%{public}s called with null _endpoint", buf, 0xCu);
        }
      }

      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v29 = (os_log_type_t)v41.receiver;
        BOOL v30 = os_log_type_enabled(v15, (os_log_type_t)v41.receiver);
        if (backtrace_string)
        {
          if (v30)
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
            __int16 v45 = 2082;
            uint64_t v46 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v15,  v29,  "%{public}s called with null _endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_54;
        }

        if (v30)
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
          _os_log_impl(&dword_181A5C000, v15, v29, "%{public}s called with null _endpoint, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        BOOL v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v37 = (os_log_type_t)v41.receiver;
        if (os_log_type_enabled(v15, (os_log_type_t)v41.receiver))
        {
          *(_DWORD *)int buf = 136446210;
          os_log_type_t v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
          _os_log_impl( &dword_181A5C000,  v15,  v37,  "%{public}s called with null _endpoint, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_18249CD20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_endpoint_edge_get_endpoint(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  uint64_t v1 = a1;
  uint64_t v2 = (char *)v1;
  if (!v1)
  {
    __nwlog_obj();
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    BOOL v17 = "nw_endpoint_edge_get_endpoint";
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v17 = "nw_endpoint_edge_get_endpoint";
          _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null edge", buf, 0xCu);
        }
      }

      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)int buf = 136446466;
            BOOL v17 = "nw_endpoint_edge_get_endpoint";
            __int16 v18 = 2082;
            BOOL v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null edge, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_25;
        }

        if (v11)
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v17 = "nw_endpoint_edge_get_endpoint";
          _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null edge, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v17 = "nw_endpoint_edge_get_endpoint";
          _os_log_impl( &dword_181A5C000,  v7,  v13,  "%{public}s called with null edge, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

nw_endpoint_t nw_endpoint_create_unix(const char *a1)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    memset(address, 0, sizeof(address));
    size_t v2 = strlen(a1);
    if (v2 + 1 < 0x7E)
    {
      address[0].size_t sa_len = v2 + 3;
      address[0].int sa_family = 1;
      memcpy(address[0].sa_data, a1, v2 + 1);
      return nw_endpoint_create_address(address);
    }

    __nwlog_obj();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)os_log_type_t type = 136446210;
    BOOL v19 = "nw_endpoint_create_unix";
    id v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v17 = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (__nwlog_fault(v5, &v17, &v16))
    {
      if (v17 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v7 = v17;
        if (os_log_type_enabled(v6, v17))
        {
          *(_DWORD *)os_log_type_t type = 136446210;
          BOOL v19 = "nw_endpoint_create_unix";
          os_log_type_t v8 = "%{public}s called with null (length < sizeof(storage) - __builtin_offsetof(struct sockaddr_un, sun_path))";
LABEL_32:
          BOOL v15 = (uint8_t *)type;
          goto LABEL_33;
        }

        goto LABEL_34;
      }

      if (!v16)
      {
        __nwlog_obj();
        id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v7 = v17;
        if (os_log_type_enabled(v6, v17))
        {
          *(_DWORD *)os_log_type_t type = 136446210;
          BOOL v19 = "nw_endpoint_create_unix";
          os_log_type_t v8 = "%{public}s called with null (length < sizeof(storage) - __builtin_offsetof(struct sockaddr_un, sun_path))"
               ", backtrace limit exceeded";
          goto LABEL_32;
        }

char *nw_endpoint_create_address_with_port(unsigned __int8 *a1, const char *a2)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if (a2)
    {
      size_t v2 = -[NWConcrete_nw_address_endpoint initWithAddress:overridePort:]( objc_alloc(&OBJC_CLASS___NWConcrete_nw_address_endpoint),  a1,  a2);
      uint64_t v3 = v2;
      if (v2)
      {
        uint64_t v4 = v2;
LABEL_24:

        return v3;
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v5 = (id)gLogObj;
      *(_DWORD *)int buf = 136446210;
      BOOL v30 = "nw_endpoint_create_address_with_port";
      id v6 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v27 = 0;
      if (__nwlog_fault(v6, &type, &v27))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v7 = (os_log_s *)(id)gLogObj;
          os_log_type_t v8 = type;
          if (os_log_type_enabled(v7, type))
          {
            *(_DWORD *)int buf = 136446210;
            BOOL v30 = "nw_endpoint_create_address_with_port";
            _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s NWOSAddressEndpoint alloc/init failed", buf, 0xCu);
          }
        }

        else if (v27)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v7 = (os_log_s *)(id)gLogObj;
          os_log_type_t v10 = type;
          BOOL v11 = os_log_type_enabled(v7, type);
          if (backtrace_string)
          {
            if (v11)
            {
              *(_DWORD *)int buf = 136446466;
              BOOL v30 = "nw_endpoint_create_address_with_port";
              __int16 v31 = 2082;
              os_log_type_t v32 = backtrace_string;
              _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s NWOSAddressEndpoint alloc/init failed, dumping backtrace:%{public}s",  buf,  0x16u);
            }

            free(backtrace_string);
            if (!v6) {
              goto LABEL_24;
            }
            goto LABEL_23;
          }

          if (v11)
          {
            *(_DWORD *)int buf = 136446210;
            BOOL v30 = "nw_endpoint_create_address_with_port";
            _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s NWOSAddressEndpoint alloc/init failed, no backtrace",  buf,  0xCu);
          }
        }

        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v7 = (os_log_s *)(id)gLogObj;
          os_log_type_t v12 = type;
          if (os_log_type_enabled(v7, type))
          {
            *(_DWORD *)int buf = 136446210;
            BOOL v30 = "nw_endpoint_create_address_with_port";
            _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s NWOSAddressEndpoint alloc/init failed, backtrace limit exceeded",  buf,  0xCu);
          }
        }
      }

      if (!v6) {
        goto LABEL_24;
      }
LABEL_23:
      free(v6);
      goto LABEL_24;
    }

    __nwlog_obj();
    __int16 v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    BOOL v30 = "nw_endpoint_create_address_with_port";
    BOOL v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (__nwlog_fault(v15, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        char v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v30 = "nw_endpoint_create_address_with_port";
          _os_log_impl(&dword_181A5C000, v16, v19, "%{public}s called with null port", buf, 0xCu);
        }

nw_endpoint_t nw_endpoint_create_with_peer_name(int a1)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  if (a1 < 0)
  {
    __nwlog_obj();
    os_log_type_t v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)&address[0].size_t sa_len = 136446210;
    *(void *)&address[0].sa_data[2] = "nw_endpoint_create_with_peer_name";
    id v6 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    LOBYTE(v31) = 0;
    if (__nwlog_fault(v6, buf, &v31))
    {
      if (buf[0] == 17)
      {
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v26 = buf[0];
        if (!os_log_type_enabled(v7, (os_log_type_t)buf[0])) {
          goto LABEL_41;
        }
        *(_DWORD *)&address[0].size_t sa_len = 136446210;
        *(void *)&address[0].sa_data[2] = "nw_endpoint_create_with_peer_name";
        uint64_t v9 = "%{public}s called with null (sockfd >= 0)";
      }

      else if ((_BYTE)v31)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v26 = buf[0];
        BOOL v28 = os_log_type_enabled(v7, (os_log_type_t)buf[0]);
        if (backtrace_string)
        {
          if (v28)
          {
            *(_DWORD *)&address[0].size_t sa_len = 136446466;
            *(void *)&address[0].sa_data[2] = "nw_endpoint_create_with_peer_name";
            *(_WORD *)&address[0].sa_data[10] = 2082;
            *(void *)&address[0].sa_data[12] = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v26,  "%{public}s called with null (sockfd >= 0), dumping backtrace:%{public}s",  &address[0].sa_len,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }

        if (!v28) {
          goto LABEL_41;
        }
        *(_DWORD *)&address[0].size_t sa_len = 136446210;
        *(void *)&address[0].sa_data[2] = "nw_endpoint_create_with_peer_name";
        uint64_t v9 = "%{public}s called with null (sockfd >= 0), no backtrace";
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v26 = buf[0];
        if (!os_log_type_enabled(v7, (os_log_type_t)buf[0])) {
          goto LABEL_41;
        }
        *(_DWORD *)&address[0].size_t sa_len = 136446210;
        *(void *)&address[0].sa_data[2] = "nw_endpoint_create_with_peer_name";
        uint64_t v9 = "%{public}s called with null (sockfd >= 0), backtrace limit exceeded";
      }

      os_log_type_t v21 = address;
      BOOL v22 = v7;
      os_log_type_t v23 = v26;
      uint32_t v24 = 12;
      goto LABEL_40;
    }

    goto LABEL_42;
  }

  memset(address, 0, sizeof(address));
  socklen_t v31 = 128;
  if (getpeername(a1, address, &v31))
  {
    socklen_t v2 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (v2 == 22 || v2 == 57 || v2 == 102)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v3 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v33 = "nw_endpoint_create_with_peer_name";
        __int16 v34 = 1024;
        socklen_t v35 = v2;
        _os_log_impl( &dword_181A5C000,  v3,  OS_LOG_TYPE_ERROR,  "%{public}s getpeername failed %{darwin.errno}d",  buf,  0x12u);
      }

      return 0LL;
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v10 = (id)gLogObj;
    *(_DWORD *)int buf = 136446466;
    uint64_t v33 = "nw_endpoint_create_with_peer_name";
    __int16 v34 = 1024;
    socklen_t v35 = v2;
    id v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v29 = 0;
    if ((__nwlog_fault(v6, &type, &v29) & 1) != 0)
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v7 = (os_log_s *)(id)gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v33 = "nw_endpoint_create_with_peer_name";
          __int16 v34 = 1024;
          socklen_t v35 = v2;
          uint64_t v9 = "%{public}s getpeername failed %{darwin.errno}d";
LABEL_38:
          os_log_type_t v21 = (sockaddr *)buf;
          BOOL v22 = v7;
          os_log_type_t v23 = v11;
LABEL_39:
          uint32_t v24 = 18;
          goto LABEL_40;
        }

        goto LABEL_41;
      }

      if (!v29)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v7 = (os_log_s *)(id)gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v33 = "nw_endpoint_create_with_peer_name";
          __int16 v34 = 1024;
          socklen_t v35 = v2;
          uint64_t v9 = "%{public}s getpeername failed %{darwin.errno}d, backtrace limit exceeded";
          goto LABEL_38;
        }

nw_endpoint_t nw_endpoint_create_with_sock_name(int a1)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  if (a1 < 0)
  {
    __nwlog_obj();
    uint32_t v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)&address[0].size_t sa_len = 136446210;
    *(void *)&address[0].sa_data[2] = "nw_endpoint_create_with_sock_name";
    id v5 = (void *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    LOBYTE(v30) = 0;
    if (!__nwlog_fault((const char *)v5, buf, &v30))
    {
LABEL_40:
      if (v5) {
        free(v5);
      }
      return 0LL;
    }

    if (buf[0] == 17)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = buf[0];
      if (!os_log_type_enabled(v6, (os_log_type_t)buf[0])) {
        goto LABEL_39;
      }
      *(_DWORD *)&address[0].size_t sa_len = 136446210;
      *(void *)&address[0].sa_data[2] = "nw_endpoint_create_with_sock_name";
      os_log_type_t v8 = "%{public}s called with null (sockfd >= 0)";
    }

    else if ((_BYTE)v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = buf[0];
      BOOL v27 = os_log_type_enabled(v6, (os_log_type_t)buf[0]);
      if (backtrace_string)
      {
        if (v27)
        {
          *(_DWORD *)&address[0].size_t sa_len = 136446466;
          *(void *)&address[0].sa_data[2] = "nw_endpoint_create_with_sock_name";
          *(_WORD *)&address[0].sa_data[10] = 2082;
          *(void *)&address[0].sa_data[12] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v25,  "%{public}s called with null (sockfd >= 0), dumping backtrace:%{public}s",  &address[0].sa_len,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_40;
      }

      if (!v27) {
        goto LABEL_39;
      }
      *(_DWORD *)&address[0].size_t sa_len = 136446210;
      *(void *)&address[0].sa_data[2] = "nw_endpoint_create_with_sock_name";
      os_log_type_t v8 = "%{public}s called with null (sockfd >= 0), no backtrace";
    }

    else
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v25 = buf[0];
      if (!os_log_type_enabled(v6, (os_log_type_t)buf[0])) {
        goto LABEL_39;
      }
      *(_DWORD *)&address[0].size_t sa_len = 136446210;
      *(void *)&address[0].sa_data[2] = "nw_endpoint_create_with_sock_name";
      os_log_type_t v8 = "%{public}s called with null (sockfd >= 0), backtrace limit exceeded";
    }

    BOOL v20 = address;
    os_log_type_t v21 = v6;
    os_log_type_t v22 = v25;
    uint32_t v23 = 12;
    goto LABEL_38;
  }

  memset(address, 0, sizeof(address));
  socklen_t v30 = 128;
  if (!getsockname(a1, address, &v30))
  {
    if (v30 && v30 >= address[0].sa_len) {
      return nw_endpoint_create_address(address);
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    *(_DWORD *)int buf = 136446722;
    os_log_type_t v32 = "nw_endpoint_create_with_sock_name";
    __int16 v33 = 1024;
    socklen_t v34 = v30;
    __int16 v35 = 1024;
    LODWORD(v36[0]) = address[0].sa_len;
    id v5 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v28 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v6 = (os_log_s *)(id)gLogObj;
      os_log_type_t v7 = type;
      if (!os_log_type_enabled(v6, type)) {
        goto LABEL_39;
      }
      *(_DWORD *)int buf = 136446722;
      os_log_type_t v32 = "nw_endpoint_create_with_sock_name";
      __int16 v33 = 1024;
      socklen_t v34 = v30;
      __int16 v35 = 1024;
      LODWORD(v36[0]) = address[0].sa_len;
      os_log_type_t v8 = "%{public}s getsockname provided invalid length: len: %u, ss.ss_len: %u";
    }

    else
    {
      if (v28)
      {
        os_log_type_t v11 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v6 = (os_log_s *)(id)gLogObj;
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v6, type);
        if (v11)
        {
          if (v13)
          {
            *(_DWORD *)int buf = 136446978;
            os_log_type_t v32 = "nw_endpoint_create_with_sock_name";
            __int16 v33 = 1024;
            socklen_t v34 = v30;
            __int16 v35 = 1024;
            LODWORD(v36[0]) = address[0].sa_len;
            WORD2(v36[0]) = 2082;
            *(void *)((char *)v36 + 6) = v11;
            BOOL v14 = "%{public}s getsockname provided invalid length: len: %u, ss.ss_len: %u, dumping backtrace:%{public}s";
            BOOL v15 = v6;
            os_log_type_t v16 = v12;
            uint32_t v17 = 34;
LABEL_28:
            _os_log_impl(&dword_181A5C000, v15, v16, v14, buf, v17);
          }

uint64_t nw_endpoint_is_broadcast(void *a1, void *a2)
{
  *(void *)&v55[13] = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    objc_super v41 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    uint64_t v53 = "nw_endpoint_is_broadcast";
    uint64_t v42 = (const char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v50 = 0;
    if (__nwlog_fault(v42, &type, &v50))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        unint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v44 = type;
        if (os_log_type_enabled(v43, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v53 = "nw_endpoint_is_broadcast";
          _os_log_impl(&dword_181A5C000, v43, v44, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }

      else if (v50)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        unint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v46 = type;
        BOOL v47 = os_log_type_enabled(v43, type);
        if (backtrace_string)
        {
          if (v47)
          {
            *(_DWORD *)int buf = 136446466;
            uint64_t v53 = "nw_endpoint_is_broadcast";
            __int16 v54 = 2082;
            *(void *)os_log_type_t v55 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v43,  v46,  "%{public}s called with null endpoint, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_64;
        }

        if (v47)
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v53 = "nw_endpoint_is_broadcast";
          _os_log_impl(&dword_181A5C000, v43, v46, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        unint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v48 = type;
        if (os_log_type_enabled(v43, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v53 = "nw_endpoint_is_broadcast";
          _os_log_impl( &dword_181A5C000,  v43,  v48,  "%{public}s called with null endpoint, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_1824A2B80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *nw_endpoint_create_address_from_string(const char *a1, const char *a2, char *a3)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    __nwlog_obj();
    os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(__dst[0]) = 136446210;
    *(void *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
    id v15 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v31) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type[0];
      if (!os_log_type_enabled(v16, type[0])) {
        goto LABEL_62;
      }
      LODWORD(__dst[0]) = 136446210;
      *(void *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
      os_log_type_t v18 = "%{public}s called with null address_string";
LABEL_61:
      _os_log_impl(&dword_181A5C000, v16, v17, v18, (uint8_t *)__dst, 0xCu);
      goto LABEL_62;
    }

    if (!(_BYTE)v31)
    {
      __nwlog_obj();
      int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type[0];
      if (os_log_type_enabled(v16, type[0]))
      {
        LODWORD(__dst[0]) = 136446210;
        *(void *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
        os_log_type_t v18 = "%{public}s called with null address_string, backtrace limit exceeded";
        goto LABEL_61;
      }

      goto LABEL_62;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v17 = type[0];
    BOOL v22 = os_log_type_enabled(v16, type[0]);
    if (!backtrace_string)
    {
      if (v22)
      {
        LODWORD(__dst[0]) = 136446210;
        *(void *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
        os_log_type_t v18 = "%{public}s called with null address_string, no backtrace";
        goto LABEL_61;
      }

      goto LABEL_62;
    }

    if (!v22) {
      goto LABEL_48;
    }
    LODWORD(__dst[0]) = 136446466;
    *(void *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
    WORD2(__dst[1]) = 2082;
    *(void *)((char *)&__dst[1] + 6) = backtrace_string;
    uint32_t v23 = "%{public}s called with null address_string, dumping backtrace:%{public}s";
LABEL_47:
    _os_log_impl(&dword_181A5C000, v16, v17, v23, (uint8_t *)__dst, 0x16u);
    goto LABEL_48;
  }

  if (!a2)
  {
    __nwlog_obj();
    BOOL v19 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(__dst[0]) = 136446210;
    *(void *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
    id v15 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v31) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type[0];
      if (!os_log_type_enabled(v16, type[0])) {
        goto LABEL_62;
      }
      LODWORD(__dst[0]) = 136446210;
      *(void *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
      os_log_type_t v18 = "%{public}s called with null port";
      goto LABEL_61;
    }

    if (!(_BYTE)v31)
    {
      __nwlog_obj();
      int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type[0];
      if (os_log_type_enabled(v16, type[0]))
      {
        LODWORD(__dst[0]) = 136446210;
        *(void *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
        os_log_type_t v18 = "%{public}s called with null port, backtrace limit exceeded";
        goto LABEL_61;
      }

      goto LABEL_62;
    }

    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v17 = type[0];
    BOOL v24 = os_log_type_enabled(v16, type[0]);
    if (!backtrace_string)
    {
      if (v24)
      {
        LODWORD(__dst[0]) = 136446210;
        *(void *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
        os_log_type_t v18 = "%{public}s called with null port, no backtrace";
        goto LABEL_61;
      }

      goto LABEL_62;
    }

    if (!v24) {
      goto LABEL_48;
    }
    LODWORD(__dst[0]) = 136446466;
    *(void *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
    WORD2(__dst[1]) = 2082;
    *(void *)((char *)&__dst[1] + 6) = backtrace_string;
    uint32_t v23 = "%{public}s called with null port, dumping backtrace:%{public}s";
    goto LABEL_47;
  }

  if (!a3)
  {
    __nwlog_obj();
    id v20 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(__dst[0]) = 136446210;
    *(void *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
    id v15 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v31) = 0;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v17 = type[0];
      if (os_log_type_enabled(v16, type[0]))
      {
        LODWORD(__dst[0]) = 136446210;
        *(void *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
        os_log_type_t v18 = "%{public}s called with null out_prefix";
        goto LABEL_61;
      }

void __HTTPNotificationCenter_block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x189607958]);
  socklen_t v1 = (void *)HTTPNotificationCenter_center;
  HTTPNotificationCenter_center = (uint64_t)v0;
}

void sub_1824AAA9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t __Block_byref_object_copy__72075(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__72076(uint64_t a1)
{
}

LABEL_379:
    goto LABEL_380;
  }

  if (!v426)
  {
    __nwlog_obj();
    unint64_t v150 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    unint64_t v232 = v427;
    if (os_log_type_enabled(v150, v427))
    {
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_cookie_options_set_site_for_cookies";
      _os_log_impl( &dword_181A5C000,  v150,  v232,  "%{public}s protocol options are not http_cookie, backtrace limit exceeded",  buf,  0xCu);
    }

    goto LABEL_379;
  }

  uint64_t v194 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  unint64_t v150 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  unint64_t v195 = v427;
  unint64_t v196 = os_log_type_enabled(v150, v427);
  if (!v194)
  {
    if (v196)
    {
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_cookie_options_set_site_for_cookies";
      _os_log_impl( &dword_181A5C000,  v150,  v195,  "%{public}s protocol options are not http_cookie, no backtrace",  buf,  0xCu);
    }

    goto LABEL_379;
  }

  if (v196)
  {
    *(_DWORD *)int buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_http_cookie_options_set_site_for_cookies";
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&_BYTE buf[14] = v194;
    _os_log_impl( &dword_181A5C000,  v150,  v195,  "%{public}s protocol options are not http_cookie, dumping backtrace:%{public}s",  buf,  0x16u);
  }

  free(v194);
  if (v149) {
LABEL_381:
  }
    free(v149);
LABEL_65:

  int v70 = *(void *)(a1 + 40);
  if (v70) {
    os_log_type_t v71 = [*(id *)(v70 + 24) _isTopLevelNavigation];
  }
  else {
    os_log_type_t v71 = 0;
  }
  unint64_t v72 = v66;
  unint64_t v73 = v72;
  if (!v66)
  {
    __nwlog_obj();
    int v152 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_cookie_options_set_is_top_level_navigation";
    LODWORD(v389) = 12;
    v388 = buf;
    uint64_t v153 = (char *)_os_log_send_and_compose_impl();

    v427 = OS_LOG_TYPE_ERROR;
    v426 = 0;
    if (v427 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unint64_t v154 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      unint64_t v155 = v427;
      if (os_log_type_enabled(v154, v427))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_cookie_options_set_is_top_level_navigation";
        _os_log_impl(&dword_181A5C000, v154, v155, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v426)
    {
      int v185 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      unint64_t v154 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v186 = v427;
      unint64_t v187 = os_log_type_enabled(v154, v427);
      if (v185)
      {
        if (v187)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http_cookie_options_set_is_top_level_navigation";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&_BYTE buf[14] = v185;
          _os_log_impl( &dword_181A5C000,  v154,  v186,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v185);
LABEL_385:
        if (!v153) {
          goto LABEL_72;
        }
LABEL_386:
        free(v153);
        goto LABEL_72;
      }

      if (v187)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_cookie_options_set_is_top_level_navigation";
        _os_log_impl(&dword_181A5C000, v154, v186, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      unint64_t v154 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v229 = v427;
      if (os_log_type_enabled(v154, v427))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_cookie_options_set_is_top_level_navigation";
        _os_log_impl( &dword_181A5C000,  v154,  v229,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }

              if (log) {
                free(log);
              }
              uint64_t v117 = 0;
              if ((v113 & 1) == 0)
              {
LABEL_147:
                if ((v354 & 1) != 0)
                {
                  nw::release_if_needed<nw_protocol *>(&v353);
                  if ((v356 & 1) == 0)
                  {
LABEL_150:
                    logging_disabled = nw_endpoint_handler_get_logging_disabled(v48);
                    if ((v117 & 1) != 0)
                    {
                      if ((logging_disabled & 1) == 0)
                      {
                        if (__nwlog_connection_log::onceToken != -1) {
                          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                        }
                        uint64_t v119 = (os_log_s *)(id)gconnectionLogObj;
                        if (os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG))
                        {
                          unint64_t v120 = nw_endpoint_handler_get_id_string(v48);
                          int v325 = nw_endpoint_handler_dry_run_string(v48);
                          loga = nw_endpoint_handler_copy_endpoint(v48);
                          unint64_t v121 = nw_endpoint_get_logging_description(loga);
                          char v122 = nw_endpoint_handler_state_string(v48);
                          uint64_t v123 = nw_endpoint_handler_mode_string(v48);
                          uint64_t v124 = nw_endpoint_handler_copy_current_path(v48);
                          *(_DWORD *)int buf = 136448002;
                          v358 = "nw_endpoint_handler_append_and_start_application_protocol";
                          os_log_type_t v359 = 2082;
                          v360 = (char *)v120;
                          v361 = 2082;
                          BOOL v362 = v325;
                          int v363 = 2082;
                          v364 = (void *)v121;
                          v365 = 2082;
                          v366 = v122;
                          int v367 = 2082;
                          v368 = v123;
                          v369 = 2114;
                          v370 = v124;
                          v371 = 2114;
                          os_log_type_t v372 = v347;
                          _os_log_impl( &dword_181A5C000,  v119,  OS_LOG_TYPE_DEBUG,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Attached pr otocol %{public}@ to connected flow",  buf,  0x52u);
                        }
                      }

                      unint64_t v125 = v48;
                      v42->state = 2;

                      v125->event = (nw_endpoint_handler_event_s)262147;
                      nw_endpoint_handler_report(v125, 0LL, &v125->event.domain, 0LL);
                      if ((*((_BYTE *)v345 + 33) & 4) != 0)
                      {
                        unint64_t v126 = nw_endpoint_handler_copy_association(v125, 0);
                        int v127 = v126;
                        if (v126) {
                          nw_association_mark_flow_disconnected(v126, v125);
                        }
                        *((_BYTE *)v345 + 33) &= ~4u;
                      }

                      started = nw_endpoint_flow_connect(v125);
                      goto LABEL_207;
                    }

                    if ((logging_disabled & 1) == 0)
                    {
                      if (__nwlog_connection_log::onceToken != -1) {
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44325);
                      }
                      uint64_t v128 = (os_log_s *)(id)gconnectionLogObj;
                      if (os_log_type_enabled(v128, OS_LOG_TYPE_ERROR))
                      {
                        unint64_t v129 = nw_endpoint_handler_get_id_string(v48);
                        int v324 = nw_endpoint_handler_dry_run_string(v48);
                        int v326 = v129;
                        logb = nw_endpoint_handler_copy_endpoint(v48);
                        v323 = nw_endpoint_get_logging_description(logb);
                        unint64_t v130 = nw_endpoint_handler_state_string(v48);
                        int v131 = nw_endpoint_handler_mode_string(v48);
                        uint64_t v132 = nw_endpoint_handler_copy_current_path(v48);
                        *(_DWORD *)int buf = 136448002;
                        v358 = "nw_endpoint_handler_append_and_start_application_protocol";
                        os_log_type_t v359 = 2082;
                        v360 = (char *)v326;
                        v361 = 2082;
                        BOOL v362 = v324;
                        int v363 = 2082;
                        v364 = (void *)v323;
                        v365 = 2082;
                        v366 = v130;
                        int v367 = 2082;
                        v368 = v131;
                        v369 = 2114;
                        v370 = v132;
                        v371 = 2114;
                        os_log_type_t v372 = v347;
                        _os_log_impl( &dword_181A5C000,  v128,  OS_LOG_TYPE_ERROR,  "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to rep lace flow protocol with protocol %{public}@",  buf,  0x52u);
                      }
                    }

                    if (*(_UNKNOWN **)(protocol_for_definition + 40) == &nw_protocol_ref_counted_handle)
                    {
                      uint64_t v157 = *(void *)(protocol_for_definition + 88);
                      if (v157) {
                        *(void *)(protocol_for_definition + 8_Block_object_dispose(va, 8) = v157 + 1;
                      }
                      *(void *)os_log_type_t type = protocol_for_definition;
                      unint64_t v133 = v356 | 1;
                    }

                    else
                    {
                      *(void *)os_log_type_t type = protocol_for_definition;
                      unint64_t v133 = v356 & 0xFE;
                    }

                    v356 = v133;
                    if (*(_UNKNOWN **)(v51 + 40) == &nw_protocol_ref_counted_handle)
                    {
                      unint64_t v159 = *(void *)(v51 + 88);
                      if (v159) {
                        *(void *)(v51 + 8_Block_object_dispose(va, 8) = v159 + 1;
                      }
                      v353 = v51;
                      unint64_t v158 = v354 | 1;
                    }

                    else
                    {
                      v353 = v51;
                      unint64_t v158 = v354 & 0xFE;
                    }

                    v354 = v158;
                    int v160 = *(void *)(protocol_for_definition + 24);
                    if (v160)
                    {
                      xpc_object_t v161 = *(uint64_t (**)(uint64_t, uint64_t, void))(v160 + 8);
                      if (v161)
                      {
                        uint64_t v162 = v161(protocol_for_definition, v51, 0LL);
                        if ((v354 & 1) == 0) {
                          goto LABEL_223;
                        }
                        goto LABEL_222;
                      }
                    }

                    __nwlog_obj();
                    unsigned int v293 = (void *)objc_claimAutoreleasedReturnValue();
                    msghdr v294 = *(const char **)(protocol_for_definition + 16);
                    *(_DWORD *)int buf = 136446722;
                    v358 = "__nw_protocol_remove_input_handler";
                    if (!v294) {
                      msghdr v294 = "invalid";
                    }
                    os_log_type_t v359 = 2082;
                    v360 = (char *)v294;
                    v361 = 2048;
                    BOOL v362 = (const char *)protocol_for_definition;
                    v295 = (char *)_os_log_send_and_compose_impl();

                    v350[0] = OS_LOG_TYPE_ERROR;
                    v352 = OS_LOG_TYPE_DEFAULT;
                    if (__nwlog_fault(v295, v350, &v352))
                    {
                      if (v350[0] == OS_LOG_TYPE_FAULT)
                      {
                        __nwlog_obj();
                        os_log_type_t v296 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                        uint32_t v297 = v350[0];
                        if (os_log_type_enabled(v296, v350[0]))
                        {
                          __int16 v298 = *(const char **)(protocol_for_definition + 16);
                          if (!v298) {
                            __int16 v298 = "invalid";
                          }
                          *(_DWORD *)int buf = 136446722;
                          v358 = "__nw_protocol_remove_input_handler";
                          os_log_type_t v359 = 2082;
                          v360 = (char *)v298;
                          v361 = 2048;
                          BOOL v362 = (const char *)protocol_for_definition;
                          _os_log_impl( &dword_181A5C000,  v296,  v297,  "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback",  buf,  0x20u);
                        }

LABEL_699:
      goto LABEL_700;
    }

    int v249 = v247;
    uint64_t v250 = v249[1];

    if (nw_protocol_copy_http_security_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_security_definition_onceToken, &__block_literal_global_33_73355);
    }
    unint64_t v251 = nw_protocol_definition_is_equal_unsafe( (uint64_t)v250,  nw_protocol_copy_http_security_definition_http_security_definition);

    if (v251)
    {
      *(void *)int buf = MEMORY[0x1895F87A8];
      *(void *)&buf[8] = v2;
      *(void *)&buf[16] = __nw_http_security_options_set_skip_hsts_lookup_block_invoke;
      *(void *)&v434 = &__block_descriptor_33_e9_B16__0_v8l;
      BYTE8(v434) = v246;
      nw_protocol_options_access_handle(v249, buf);
      goto LABEL_435;
    }

    __nwlog_obj();
    BOOL v318 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_security_options_set_skip_hsts_lookup";
    LODWORD(v389) = 12;
    v388 = buf;
    v301 = (char *)_os_log_send_and_compose_impl();

    v427 = OS_LOG_TYPE_ERROR;
    v426 = 0;
    if (v427 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      __int16 v302 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v319 = v427;
      if (os_log_type_enabled(v302, v427))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_security_options_set_skip_hsts_lookup";
        _os_log_impl(&dword_181A5C000, v302, v319, "%{public}s protocol options are not http security", buf, 0xCu);
      }

      goto LABEL_699;
    }

    if (!v426)
    {
      __nwlog_obj();
      __int16 v302 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v384 = v427;
      if (os_log_type_enabled(v302, v427))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_security_options_set_skip_hsts_lookup";
        _os_log_impl( &dword_181A5C000,  v302,  v384,  "%{public}s protocol options are not http security, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_699;
    }

    v339 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    __int16 v302 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    id v340 = v427;
    v341 = os_log_type_enabled(v302, v427);
    if (!v339)
    {
      if (v341)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_security_options_set_skip_hsts_lookup";
        _os_log_impl( &dword_181A5C000,  v302,  v340,  "%{public}s protocol options are not http security, no backtrace",  buf,  0xCu);
      }

      goto LABEL_699;
    }

    if (v341)
    {
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http_security_options_set_skip_hsts_lookup";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&_BYTE buf[14] = v339;
      _os_log_impl( &dword_181A5C000,  v302,  v340,  "%{public}s protocol options are not http security, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v339);
    if (v301) {
      goto LABEL_701;
    }
LABEL_435:

    unint64_t v252 = *(void *)(a1 + 40);
    if (v252) {
      int v253 = [*(id *)(v252 + 16) _allowsHSTSWithUntrustedRootCertificate];
    }
    else {
      int v253 = 0;
    }
    uint64_t v254 = v248;
    uint64_t v406 = v254;
    if (!v248)
    {
      __nwlog_obj();
      v304 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_security_options_set_save_hsts_with_untrusted_root_cert";
      LODWORD(v389) = 12;
      v388 = buf;
      v305 = (char *)_os_log_send_and_compose_impl();

      v427 = OS_LOG_TYPE_ERROR;
      v426 = 0;
      if (v427 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        char v306 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v307 = v427;
        if (os_log_type_enabled(v306, v427))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_security_options_set_save_hsts_with_untrusted_root_cert";
          _os_log_impl(&dword_181A5C000, v306, v307, "%{public}s called with null options", buf, 0xCu);
        }

        goto LABEL_704;
      }

      if (!v426)
      {
        __nwlog_obj();
        char v306 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v381 = v427;
        if (os_log_type_enabled(v306, v427))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_security_options_set_save_hsts_with_untrusted_root_cert";
          _os_log_impl( &dword_181A5C000,  v306,  v381,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_704;
      }

      v328 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v306 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v329 = v427;
      int v330 = os_log_type_enabled(v306, v427);
      if (!v328)
      {
        if (v330)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_security_options_set_save_hsts_with_untrusted_root_cert";
          _os_log_impl(&dword_181A5C000, v306, v329, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }

        goto LABEL_704;
      }

      if (v330)
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_security_options_set_save_hsts_with_untrusted_root_cert";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&_BYTE buf[14] = v328;
        _os_log_impl( &dword_181A5C000,  v306,  v329,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
      }

      goto LABEL_578;
    }

    unint64_t v255 = v254;
    unint64_t v256 = v255[1];

    if (nw_protocol_copy_http_security_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_security_definition_onceToken, &__block_literal_global_33_73355);
    }
    int v257 = nw_protocol_definition_is_equal_unsafe( (uint64_t)v256,  nw_protocol_copy_http_security_definition_http_security_definition);

    if (v257)
    {
      *(void *)int buf = MEMORY[0x1895F87A8];
      *(void *)&buf[8] = v2;
      *(void *)&buf[16] = __nw_http_security_options_set_save_hsts_with_untrusted_root_cert_block_invoke;
      *(void *)&v434 = &__block_descriptor_33_e9_B16__0_v8l;
      BYTE8(v434) = v253;
      nw_protocol_options_access_handle(v255, buf);
      uint64_t v258 = v406;
      goto LABEL_442;
    }

    __nwlog_obj();
    v320 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_security_options_set_save_hsts_with_untrusted_root_cert";
    LODWORD(v389) = 12;
    v388 = buf;
    v305 = (char *)_os_log_send_and_compose_impl();

    v427 = OS_LOG_TYPE_ERROR;
    v426 = 0;
    if (__nwlog_fault(v305, &v427, &v426))
    {
      if (v427 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        char v306 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v321 = v427;
        if (os_log_type_enabled(v306, v427))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_security_options_set_save_hsts_with_untrusted_root_cert";
          _os_log_impl(&dword_181A5C000, v306, v321, "%{public}s protocol options are not http security", buf, 0xCu);
        }

LABEL_704:
        goto LABEL_705;
      }

      if (!v426)
      {
        __nwlog_obj();
        char v306 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v385 = v427;
        if (os_log_type_enabled(v306, v427))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_security_options_set_save_hsts_with_untrusted_root_cert";
          _os_log_impl( &dword_181A5C000,  v306,  v385,  "%{public}s protocol options are not http security, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_704;
      }

      v328 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v306 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      v342 = v427;
      v343 = os_log_type_enabled(v306, v427);
      if (!v328)
      {
        if (v343)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_security_options_set_save_hsts_with_untrusted_root_cert";
          _os_log_impl( &dword_181A5C000,  v306,  v342,  "%{public}s protocol options are not http security, no backtrace",  buf,  0xCu);
        }

        goto LABEL_704;
      }

      if (v343)
      {
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_http_security_options_set_save_hsts_with_untrusted_root_cert";
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&_BYTE buf[14] = v328;
        _os_log_impl( &dword_181A5C000,  v306,  v342,  "%{public}s protocol options are not http security, dumping backtrace:%{public}s",  buf,  0x16u);
      }

LABEL_709:
      goto LABEL_710;
    }

    nw_protocol_definition_t v264 = v262;
    os_log_type_t v265 = v264[1];

    if (nw_protocol_copy_http_client_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52);
    }
    char v6 = nw_protocol_definition_is_equal_unsafe((uint64_t)v265, nw_protocol_copy_http_client_definition_definition);

    if ((v6 & 1) != 0)
    {
      *(void *)int buf = MEMORY[0x1895F87A8];
      *(void *)&buf[8] = v2;
      *(void *)&buf[16] = __nw_http_client_options_set_resend_handler_block_invoke;
      *(void *)&v434 = &unk_189BC6110;
      *((void *)&v434 + 1) = v263;
      nw_protocol_options_access_handle(v264, buf);

      goto LABEL_458;
    }

    __nwlog_obj();
    BOOL v322 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_client_options_set_resend_handler";
    LODWORD(v389) = 12;
    v388 = buf;
    char v6 = 16LL;
    __int16 v309 = (char *)_os_log_send_and_compose_impl();

    v427 = OS_LOG_TYPE_ERROR;
    v426 = 0;
    if (v427 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v310 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v6 = v427;
      if (os_log_type_enabled(v310, v427))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_client_options_set_resend_handler";
        _os_log_impl( &dword_181A5C000,  v310,  (os_log_type_t)v6,  "%{public}s protocol options are not http_client",  buf,  0xCu);
      }

      goto LABEL_709;
    }

    if (!v426)
    {
      __nwlog_obj();
      v310 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      char v6 = v427;
      if (os_log_type_enabled(v310, v427))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_client_options_set_resend_handler";
        _os_log_impl( &dword_181A5C000,  v310,  (os_log_type_t)v6,  "%{public}s protocol options are not http_client, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_709;
    }

    char v6 = (uint64_t)__nw_create_backtrace_string();
    __nwlog_obj();
    v310 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v344 = v427;
    v345 = os_log_type_enabled(v310, v427);
    if (!v6)
    {
      if (v345)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_client_options_set_resend_handler";
        _os_log_impl( &dword_181A5C000,  v310,  v344,  "%{public}s protocol options are not http_client, no backtrace",  buf,  0xCu);
      }

      goto LABEL_709;
    }

    if (v345)
    {
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http_client_options_set_resend_handler";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&_BYTE buf[14] = v6;
      _os_log_impl( &dword_181A5C000,  v310,  v344,  "%{public}s protocol options are not http_client, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free((void *)v6);
    if (v309) {
      goto LABEL_711;
    }
LABEL_458:
    os_log_type_t v266 = v262 == 0LL;

    v415[0] = MEMORY[0x1895F87A8];
    v415[1] = v2;
    v415[2] = __34__NWURLLoaderHTTP_continueLoading__block_invoke_36;
    v415[3] = &unk_189BC5DC0;
    v415[4] = a1;
    os_log_type_t v267 = v262;
    os_log_type_t v268 = v415;
    if (v266)
    {
      __nwlog_obj();
      uint64_t v311 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_http_client_options_set_retry_with_h1_handler";
      LODWORD(v389) = 12;
      v388 = buf;
      os_log_type_t v312 = (char *)_os_log_send_and_compose_impl();

      v427 = OS_LOG_TYPE_ERROR;
      v426 = 0;
      if (v427 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v313 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        v314 = v427;
        if (os_log_type_enabled(v313, v427))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_options_set_retry_with_h1_handler";
          _os_log_impl(&dword_181A5C000, v313, v314, "%{public}s called with null options", buf, 0xCu);
        }
      }

      else if (v426)
      {
        v333 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v313 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        char v6 = v427;
        id v334 = os_log_type_enabled(v313, v427);
        if (v333)
        {
          if (v334)
          {
            *(_DWORD *)int buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_http_client_options_set_retry_with_h1_handler";
            *(_WORD *)&_BYTE buf[12] = 2082;
            *(void *)&_BYTE buf[14] = v333;
            _os_log_impl( &dword_181A5C000,  v313,  (os_log_type_t)v6,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(v333);
LABEL_715:
          if (!v312) {
            goto LABEL_463;
          }
LABEL_716:
          free(v312);
          goto LABEL_463;
        }

        if (v334)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_options_set_retry_with_h1_handler";
          _os_log_impl( &dword_181A5C000,  v313,  (os_log_type_t)v6,  "%{public}s called with null options, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        v313 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        id v382 = v427;
        if (os_log_type_enabled(v313, v427))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_client_options_set_retry_with_h1_handler";
          _os_log_impl( &dword_181A5C000,  v313,  v382,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
        }
      }

LABEL_714:
      goto LABEL_715;
    }

    id v269 = v267;
    int v270 = v269[1];

    if (nw_protocol_copy_http_client_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52);
    }
    os_log_type_t v271 = nw_protocol_definition_is_equal_unsafe((uint64_t)v270, nw_protocol_copy_http_client_definition_definition);

    if (v271)
    {
      *(void *)int buf = MEMORY[0x1895F87A8];
      *(void *)&buf[8] = v2;
      *(void *)&buf[16] = __nw_http_client_options_set_retry_with_h1_handler_block_invoke;
      *(void *)&v434 = &unk_189BC6110;
      *((void *)&v434 + 1) = v268;
      nw_protocol_options_access_handle(v269, buf);

      goto LABEL_463;
    }

    __nwlog_obj();
    v323 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_client_options_set_retry_with_h1_handler";
    LODWORD(v389) = 12;
    v388 = buf;
    os_log_type_t v312 = (char *)_os_log_send_and_compose_impl();

    v427 = OS_LOG_TYPE_ERROR;
    v426 = 0;
    if (v427 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v313 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      int v324 = v427;
      if (os_log_type_enabled(v313, v427))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_client_options_set_retry_with_h1_handler";
        _os_log_impl(&dword_181A5C000, v313, v324, "%{public}s protocol options are not http_client", buf, 0xCu);
      }

      goto LABEL_714;
    }

    if (!v426)
    {
      __nwlog_obj();
      v313 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v386 = v427;
      if (os_log_type_enabled(v313, v427))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_client_options_set_retry_with_h1_handler";
        _os_log_impl( &dword_181A5C000,  v313,  v386,  "%{public}s protocol options are not http_client, backtrace limit exceeded",  buf,  0xCu);
      }

      goto LABEL_714;
    }

    v346 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v313 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    char v6 = v427;
    BOOL v347 = os_log_type_enabled(v313, v427);
    if (!v346)
    {
      if (v347)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http_client_options_set_retry_with_h1_handler";
        _os_log_impl( &dword_181A5C000,  v313,  (os_log_type_t)v6,  "%{public}s protocol options are not http_client, no backtrace",  buf,  0xCu);
      }

      goto LABEL_714;
    }

    if (v347)
    {
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http_client_options_set_retry_with_h1_handler";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&_BYTE buf[14] = v346;
      _os_log_impl( &dword_181A5C000,  v313,  (os_log_type_t)v6,  "%{public}s protocol options are not http_client, dumping backtrace:%{public}s",  buf,  0x16u);
    }

    free(v346);
    if (v312) {
      goto LABEL_716;
    }
LABEL_463:

    nw_protocol_stack_prepend_application_protocol(stack, (nw_protocol_options_t)v267);
    if (nw_proxy_copy_http_connect_definition::onceToken != -1) {
      dispatch_once(&nw_proxy_copy_http_connect_definition::onceToken, &__block_literal_global_92);
    }
    id v272 = (id)nw_proxy_copy_http_connect_definition::proxy_definition;
    v273 = nw_proxy_create_options(v272);

    v413[0] = MEMORY[0x1895F87A8];
    v413[1] = v2;
    v413[2] = __34__NWURLLoaderHTTP_continueLoading__block_invoke_2_38;
    v413[3] = &unk_189BC5CA8;
    v413[4] = a1;
    v396 = v108;
    v414 = v396;
    nw_proxy_options_set_authentication_challenge_handler(v273, v413);
    [*(id *)(a1 + 24) valueForHTTPHeaderField:@"Proxy-Authorization"];
    char v274 = (void *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v275 = v274;
    if (v274) {
      nw_proxy_options_set_http_proxy_authorization_header(v273, [v274 cStringUsingEncoding:5]);
    }
    nw_parameters_add_proxy_options(parameters, v273);
    -[NWURLSessionTaskConfiguration configureParameters:](*(id **)(a1 + 40), parameters);
    *(_BYTE *)(a1 + 1_Block_object_dispose(va, 8) = nw_parameters_has_custom_proxy_configs(parameters);
    int v276 = *(void *)(a1 + 40);
    if (v276
      && ([*(id *)(v276 + 24) _hostOverride], (int v277 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
    {
      nw_parameters_set_url_endpoint(parameters, endpoint);
      v399 = v277;

      char v278 = v399;
    }

    else
    {
      v399 = 0LL;
      char v278 = endpoint;
    }

    endpoint = v278;
    os_log_type_t v279 = nw_connection_create(v278, parameters);
    int v280 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = v279;

    uint64_t v281 = *(void *)(a1 + 72);
    if (__nwlog_url_log::onceToken != -1) {
      dispatch_once(&__nwlog_url_log::onceToken, &__block_literal_global_54_44366);
    }
    int v282 = (os_log_s *)(id)gurlLogObj;
    sockaddr v283 = v282;
    if (!v281) {
      break;
    }
    if (os_log_type_enabled(v282, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v284 = *(id *)(a1 + 48);
      int v285 = v284;
      if (v284)
      {
        [v284 logDescription];
      }

      else
      {
        v431[0] = 0LL;
        v431[1] = 0LL;
        BOOL v432 = 0;
      }

      __int16 v286 = *(id *)(a1 + 48);
      v287 = v286;
      if (v286)
      {
        [v286 logDescription];
        uint64_t v288 = v430;
      }

      else
      {
        uint64_t v288 = 0;
        os_log_type_t v428 = 0LL;
        v429 = 0LL;
        v430 = 0;
      }

      id = nw_connection_get_id(*(void **)(a1 + 72));
      *(_DWORD *)int buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 16;
      *(_WORD *)&buf[8] = 2098;
      *(void *)&buf[10] = v431;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v288;
      LOWORD(v434) = 2048;
      *(void *)((char *)&v434 + 2) = id;
      _os_log_impl( &dword_181A5C000,  v283,  OS_LOG_TYPE_DEFAULT,  "Task <%{public,uuid_t}.16P>.<%u> created [C%llu]",  buf,  0x22u);
    }

    int v290 = *(void *)(a1 + 40);
    if (v290 && ([*(id *)(v290 + 24) _preconnect] & 1) != 0) {
      goto LABEL_646;
    }
    id v394 = endpoint;
    if (!*(void *)(a1 + 32)) {
      goto LABEL_592;
    }
    unint64_t v93 = *(void **)(a1 + 24);
    if (!v93) {
      goto LABEL_592;
    }
    [*(id *)(a1 + 24) HTTPMethod];
    v291 = (void *)objc_claimAutoreleasedReturnValue();
    v292 = [v291 caseInsensitiveCompare:@"GET"] == 0;

    if (!v292)
    {
      [v93 HTTPMethod];
      unint64_t v93 = (void *)objc_claimAutoreleasedReturnValue();
      v348 = [v93 caseInsensitiveCompare:@"HEAD"] == 0;

      if (!v348)
      {
LABEL_592:
        context = nw_content_context_create("http request");
        BOOL v349 = (void *)nw_http_request_create_from_url_request(*(void **)(a1 + 24));
        v392 = nw_http_request_has_method(v349, (uint64_t)"GET") || nw_http_request_has_method(v349, (uint64_t)"HEAD");
        if (*(uint64_t *)(a1 + 32) >= 1
          && !nw_http_fields_have_field_with_name(v349, (unint64_t)"Content-Length"))
        {
          snprintf(buf, 0x15uLL, "%lld", *(void *)(a1 + 32));
          nw_http_fields_append(v349, (uint64_t)"Content-Length", (uint64_t)buf);
        }

        if (!nw_http_fields_have_field_with_name(v349, (unint64_t)"User-Agent"))
        {
          if (nw_utilities_get_user_agent::onceToken != -1) {
            dispatch_once(&nw_utilities_get_user_agent::onceToken, &__block_literal_global_9_44154);
          }
          nw_http_fields_append(v349, (uint64_t)"User-Agent", nw_utilities_get_user_agent::user_agent_string);
        }

        if (!nw_http_fields_have_field_with_name(v349, (unint64_t)"Accept-Language"))
        {
          v350 = (void *)_CFNetworkCopyPreferredLanguageCode();
          nw_http_fields_append(v349, (uint64_t)"Accept-Language", [v350 UTF8String]);
        }

        if (!nw_http_fields_have_field_with_name(v349, (unint64_t)"Priority"))
        {
          int v351 = *(void *)(a1 + 40);
          if (v351)
          {
            [*(id *)(v351 + 24) priority];
            if (v352 < 0.5) {
              goto LABEL_609;
            }
            v353 = 6.6667 - (float)(v352 * 6.6667);
          }

          else
          {
            v352 = 0.0;
LABEL_609:
            v353 = ceilf((float)(v352 * -10.0) + 7.0);
          }

          v354 = (int)v353;
          id v355 = *(void *)(a1 + 40);
          if (v355)
          {
            v356 = [*(id *)(v355 + 24) prefersIncrementalDelivery];
            *(_WORD *)int buf = 15733;
            buf[2] = v354 + 48;
            if (v356)
            {
              v357 = 0;
              *(_WORD *)&uint8_t buf[4] = 26912;
              LOBYTE(v355) = 44;
              v358 = 6LL;
              goto LABEL_614;
            }

            LOBYTE(v355) = 0;
          }

          else
          {
            *(_WORD *)int buf = 15733;
            v357 = v354 + 48;
            v358 = 2LL;
LABEL_614:
            buf[v358] = v357;
          }

          buf[3] = v355;
          nw_http_fields_append(v349, (uint64_t)"Priority", (uint64_t)buf);
        }

        if (*(_BYTE *)(a1 + 15))
        {
          v360 = *(void **)(a1 + 96);
          os_log_type_t v359 = *(void **)(a1 + 104);
          v361 = *(id *)(a1 + 24);
          BOOL v362 = v360;
          v393 = v349;
          int v363 = v361;
          int v390 = v362;
          if (v362)
          {
            v364 = v359;
            v365 = [v364 storagePolicy];
            [v364 response];
            v391 = (void *)objc_claimAutoreleasedReturnValue();

            [v363 valueForHTTPHeaderField:@"If-Modified-Since"];
            v366 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v366 && v365 != 2)
            {
              [v391 _lastModifiedDate];
              int v367 = (void *)objc_claimAutoreleasedReturnValue();
              if (v367)
              {
                v368 = objc_alloc_init(MEMORY[0x189607848]);
                objc_msgSend(v368, "setDateFormat:", @"EEE, dd MMM yyyy HH:mm:ss zzz");
                [MEMORY[0x189604020] timeZoneWithName:@"GMT"];
                v369 = (void *)objc_claimAutoreleasedReturnValue();
                [v368 setTimeZone:v369];

                [v368 stringFromDate:v367];
                v366 = (void *)objc_claimAutoreleasedReturnValue();
              }

              else
              {
                v366 = 0LL;
              }
            }

            if (v366) {
              nw_http_fields_append(v393, (uint64_t)"If-Modified-Since", [v366 UTF8String]);
            }
            v370 = v365 != 2;
            objc_msgSend(v363, "valueForHTTPHeaderField:", @"If-None-Match", v388, v389);
            v371 = (void *)objc_claimAutoreleasedReturnValue();
            if (v371) {
              os_log_type_t v372 = 0;
            }
            else {
              os_log_type_t v372 = v370;
            }
            if (v372)
            {
              [v391 valueForHTTPHeaderField:@"ETag"];
              v371 = (void *)objc_claimAutoreleasedReturnValue();
            }

            if (v371) {
              nw_http_fields_append(v393, (uint64_t)"If-None-Match", [v371 UTF8String]);
            }
          }
        }

        metadata_for_request = nw_http_create_metadata_for_request(v349);
        nw_content_context_set_metadata_for_protocol(context, (nw_protocol_metadata_t)metadata_for_request);
        v374 = *(void *)(a1 + 32);
        BOOL v375 = v392;
        if (v374) {
          BOOL v375 = 0;
        }
        v376 = *(nw_connection **)(a1 + 72);
        if (v375)
        {
          nw_connection_send(v376, 0LL, context, 1, &__block_literal_global_24170);
          *(_BYTE *)(a1 + 16) = 1;
          BOOL v377 = (void (**)(void))*(id *)(a1 + 136);
          objc_setProperty_nonatomic_copy((id)a1, v378, 0LL, 136LL);
          if (v377) {
            v377[2](v377);
          }
          if (*(_BYTE *)(a1 + 9)) {
            -[NWURLLoaderHTTP startResponseStallTimer](a1);
          }
        }

        else
        {
          *(void *)int buf = MEMORY[0x1895F87A8];
          *(void *)&buf[8] = v2;
          *(void *)&buf[16] = __32__NWURLLoaderHTTP_writeRequest___block_invoke;
          *(void *)&v434 = &unk_189BC5E68;
          *((void *)&v434 + 1) = a1;
          nw_connection_send(v376, 0LL, context, v374 == 0, buf);
        }

LABEL_645:
        v379 = *(void **)(a1 + 80);
        *(void *)(a1 + 80) = context;

LABEL_646:
        -[NWURLLoaderHTTP configureAndStartConnection:](a1, *(void **)(a1 + 72));
        goto LABEL_647;
      }
    }

    if (isWebKitNetworking_onceToken[0] != -1) {
      dispatch_once(isWebKitNetworking_onceToken, &__block_literal_global_180);
    }
    if (isWebKitNetworking_result == 1)
    {
      unsigned int v293 = objc_alloc(&OBJC_CLASS___NWURLError);
      [*(id *)(a1 + 48) loaderTask];
      msghdr v294 = (void *)objc_claimAutoreleasedReturnValue();
      v295 = (id)a1;
      os_log_type_t v296 = v294;
      if (v293)
      {
        uint32_t v297 = *MEMORY[0x189607740];
        *(void *)int buf = v293;
        *(void *)&buf[8] = &OBJC_CLASS___NWURLError;
        __int16 v298 = (NWURLError *)objc_msgSendSuper2( (objc_super *)buf,  sel_initWithDomain_code_userInfo_,  v297,  -1103,  0);
        unsigned int v293 = v298;
        if (v298) {
          -[NWURLError fillErrorForLoader:andTask:](v298, "fillErrorForLoader:andTask:", v295, v296);
        }
      }

      int v299 = (void *)*((void *)v295 + 11);
      *((void *)v295 + 11) = v293;

      context = 0LL;
      *((_BYTE *)v295 + 11) = 1;
      goto LABEL_645;
    }

    _os_crash();
    __break(1u);
LABEL_726:
    uint64_t v95 = 0LL;
    unint64_t v96 = 0LL;
LABEL_108:

    uint64_t v34 = v96;
    if (v96) {
      goto LABEL_27;
    }
LABEL_109:
    ;
  }

  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "-[NWURLLoaderHTTP continueLoading]";
  BOOL v315 = (char *)_os_log_send_and_compose_impl();

  v427 = OS_LOG_TYPE_ERROR;
  v426 = 0;
  if (__nwlog_fault(v315, &v427, &v426))
  {
    if (v427 == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_url_log::onceToken != -1) {
        dispatch_once(&__nwlog_url_log::onceToken, &__block_literal_global_54_44366);
      }
      v316 = (os_log_s *)(id)gurlLogObj;
      v317 = v427;
      if (os_log_type_enabled(v316, v427))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "-[NWURLLoaderHTTP continueLoading]";
        _os_log_impl(&dword_181A5C000, v316, v317, "%{public}s failed to create connection", buf, 0xCu);
      }

      goto LABEL_520;
    }

    if (v426)
    {
      v335 = (char *)__nw_create_backtrace_string();
      if (__nwlog_url_log::onceToken != -1) {
        dispatch_once(&__nwlog_url_log::onceToken, &__block_literal_global_54_44366);
      }
      v336 = (os_log_s *)(id)gurlLogObj;
      v337 = v427;
      os_log_type_t v338 = os_log_type_enabled(v336, v427);
      if (v335)
      {
        if (v338)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "-[NWURLLoaderHTTP continueLoading]";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&_BYTE buf[14] = v335;
          _os_log_impl( &dword_181A5C000,  v336,  v337,  "%{public}s failed to create connection, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v335);
      }

      else
      {
        if (v338)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "-[NWURLLoaderHTTP continueLoading]";
          _os_log_impl(&dword_181A5C000, v336, v337, "%{public}s failed to create connection, no backtrace", buf, 0xCu);
        }
      }
    }

    else
    {
      if (__nwlog_url_log::onceToken != -1) {
        dispatch_once(&__nwlog_url_log::onceToken, &__block_literal_global_54_44366);
      }
      v316 = (os_log_s *)(id)gurlLogObj;
      v383 = v427;
      if (os_log_type_enabled(v316, v427))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "-[NWURLLoaderHTTP continueLoading]";
        _os_log_impl( &dword_181A5C000,  v316,  v383,  "%{public}s failed to create connection, backtrace limit exceeded",  buf,  0xCu);
      }

void sub_1824AFDCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFURLRef fixInvalidHTTPURL(void *a1)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  [v1 absoluteURL];
  socklen_t v2 = (void *)objc_claimAutoreleasedReturnValue();

  CFRange v3 = CFURLGetByteRangeForComponent((CFURLRef)v2, kCFURLComponentScheme, &rangeIncludingSeparators);
  if (v3.location == -1 || v3.length + 3 == rangeIncludingSeparators.length)
  {
    CFURLRef v4 = v2;
LABEL_27:

    return v4;
  }

  if (__nwlog_url_log::onceToken != -1) {
    dispatch_once(&__nwlog_url_log::onceToken, &__block_literal_global_54_44366);
  }
  id v5 = (id)gurlLogObj;
  *(_DWORD *)int buf = 136446466;
  uint64_t v28 = "fixInvalidHTTPURL";
  __int16 v29 = 2112;
  id v30 = v1;
  char v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (type == OS_LOG_TYPE_FAULT)
  {
    if (__nwlog_url_log::onceToken != -1) {
      dispatch_once(&__nwlog_url_log::onceToken, &__block_literal_global_54_44366);
    }
    os_log_type_t v7 = (os_log_s *)(id)gurlLogObj;
    os_log_type_t v8 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)int buf = 136446466;
      uint64_t v28 = "fixInvalidHTTPURL";
      __int16 v29 = 2112;
      id v30 = v1;
      id v9 = "%{public}s Invalid URL (missing slash): %@";
LABEL_32:
      os_log_type_t v18 = v7;
      os_log_type_t v19 = v8;
LABEL_33:
      _os_log_impl(&dword_181A5C000, v18, v19, v9, buf, 0x16u);
      goto LABEL_34;
    }

    goto LABEL_34;
  }

  if (v24)
  {
    backtrace_string = (char *)__nw_create_backtrace_string();
    if (__nwlog_url_log::onceToken != -1) {
      dispatch_once(&__nwlog_url_log::onceToken, &__block_literal_global_54_44366);
    }
    os_log_type_t v7 = (os_log_s *)(id)gurlLogObj;
    os_log_type_t v11 = type;
    BOOL v12 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)int buf = 136446466;
        uint64_t v28 = "fixInvalidHTTPURL";
        __int16 v29 = 2112;
        id v30 = v1;
        id v9 = "%{public}s Invalid URL (missing slash): %@, no backtrace";
        os_log_type_t v18 = v7;
        os_log_type_t v19 = v11;
        goto LABEL_33;
      }

      goto LABEL_34;
    }

    if (v12)
    {
      *(_DWORD *)int buf = 136446722;
      uint64_t v28 = "fixInvalidHTTPURL";
      __int16 v29 = 2112;
      id v30 = v1;
      __int16 v31 = 2082;
      uint64_t v32 = (uint64_t)backtrace_string;
      _os_log_impl( &dword_181A5C000,  v7,  v11,  "%{public}s Invalid URL (missing slash): %@, dumping backtrace:%{public}s",  buf,  0x20u);
    }

    free(backtrace_string);
LABEL_19:
    if (!v6) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }

  if (__nwlog_url_log::onceToken != -1) {
    dispatch_once(&__nwlog_url_log::onceToken, &__block_literal_global_54_44366);
  }
  os_log_type_t v7 = (os_log_s *)(id)gurlLogObj;
  os_log_type_t v8 = type;
  if (os_log_type_enabled(v7, type))
  {
    *(_DWORD *)int buf = 136446466;
    uint64_t v28 = "fixInvalidHTTPURL";
    __int16 v29 = 2112;
    id v30 = v1;
    id v9 = "%{public}s Invalid URL (missing slash): %@, backtrace limit exceeded";
    goto LABEL_32;
  }

uint64_t __bumpProcessFDLimit_block_invoke()
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  v6.rlim_cur = 0LL;
  v6.rlim_t rlim_max = 0LL;
  int v0 = getrlimit(8, &v6);
  *(void *)os_log_type_t v7 = 0x1D00000001LL;
  size_t v4 = 8LL;
  rlim_t rlim_max = 0LL;
  uint64_t result = sysctl(v7, 2u, &rlim_max, &v4, 0LL, 0LL);
  if (result | v0)
  {
    if (v0) {
      return result;
    }
    rlim_t v2 = rlim_max;
  }

  else
  {
    rlim_t v2 = rlim_max;
    if (v6.rlim_max < rlim_max)
    {
      rlim_t rlim_max = v6.rlim_max;
      rlim_t v2 = v6.rlim_max;
    }
  }

  if (v6.rlim_cur < v2)
  {
    rlimit v3 = v6;
    if (v2 >= v6.rlim_cur + 2304) {
      rlim_t v2 = v6.rlim_cur + 2304;
    }
    v3.rlim_cur = v2;
    return setrlimit(8, &v3);
  }

  return result;
}

NWConcrete_nw_protocol_options *nw_swift_tls_create_options()
{
  return nw_protocol_create_options(0LL);
}

void sub_1824B4ED4(_Unwind_Exception *exception_object)
{
}

BOOL nw_protocol_options_is_tls(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (v1)
  {
    rlim_t v2 = (void *)nw_protocol_boringssl_copy_definition();
    BOOL v3 = nw_protocol_options_matches_definition(v1, v2);

    goto LABEL_3;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  size_t v16 = "nw_protocol_options_is_tls";
  rlimit v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        size_t v16 = "nw_protocol_options_is_tls";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          size_t v16 = "nw_protocol_options_is_tls";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        size_t v16 = "nw_protocol_options_is_tls";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        size_t v16 = "nw_protocol_options_is_tls";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1824B518C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_protocol_copy_serializable_tls_definition()
{
  if (nw_protocol_copy_serializable_tls_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_serializable_tls_definition::onceToken, &__block_literal_global_72237);
  }
  return (id)nw_protocol_copy_serializable_tls_definition::tls_definition;
}

BOOL __nw_protocol_copy_serializable_tls_definition_block_invoke()
{
  named = nw_protocol_definition_create_named(2, "tls-serializable");
  id v1 = (void *)nw_protocol_copy_serializable_tls_definition::tls_definition;
  nw_protocol_copy_serializable_tls_definition::tls_definition = (uint64_t)named;

  nw_protocol_definition_set_options_allocator( (void *)nw_protocol_copy_serializable_tls_definition::tls_definition,  (uint64_t)nw_serializable_tls_allocate_options,  (uint64_t)nw_serializable_tls_copy_options,  (uint64_t)nw_serializable_tls_deallocate_options);
  nw_protocol_definition_set_options_equality_check( (void *)nw_protocol_copy_serializable_tls_definition::tls_definition,  (uint64_t)nw_serializable_tls_option_is_equal);
  nw_protocol_definition_set_options_serializer( (void *)nw_protocol_copy_serializable_tls_definition::tls_definition,  0,  (uint64_t)nw_serializable_tls_serialize_options,  (uint64_t)nw_serializable_tls_deserialize_options);
  return nw_protocol_definition_register((void *)nw_protocol_copy_serializable_tls_definition::tls_definition);
}

BOOL nw_serializable_tls_allocate_options(void *a1)
{
  id v1 = a1;
  rlim_t v2 = calloc(1uLL, 0x20uLL);
  if (v2) {
    goto LABEL_2;
  }
  __nwlog_obj();
  size_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    _OWORD *v2 = 0u;
    v2[1] = 0u;

    return (BOOL)v2;
  }

  __break(1u);
  return result;
}

void sub_1824B53A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_serializable_tls_copy_options(void *a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    uint32_t v23 = "nw_serializable_tls_copy_options";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (__nwlog_fault(v11, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint32_t v23 = "nw_serializable_tls_copy_options";
          _os_log_impl(&dword_181A5C000, v12, v13, "%{public}s called with null existing_handle", buf, 0xCu);
        }
      }

      else if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v17 = type;
        BOOL v18 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v18)
          {
            *(_DWORD *)int buf = 136446466;
            uint32_t v23 = "nw_serializable_tls_copy_options";
            __int16 v24 = 2082;
            uint64_t v25 = (uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_29;
        }

        if (v18)
        {
          *(_DWORD *)int buf = 136446210;
          uint32_t v23 = "nw_serializable_tls_copy_options";
          _os_log_impl( &dword_181A5C000,  v12,  v17,  "%{public}s called with null existing_handle, no backtrace",  buf,  0xCu);
        }
      }

      else
      {
        __nwlog_obj();
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint32_t v23 = "nw_serializable_tls_copy_options";
          _os_log_impl( &dword_181A5C000,  v12,  v19,  "%{public}s called with null existing_handle, backtrace limit exceeded",  buf,  0xCu);
        }
      }
    }

void sub_1824B5780(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_serializable_tls_deallocate_options(void *a1, uint64_t a2)
{
  id v5 = a1;
  if (*(void *)a2)
  {
    CFRelease(*(CFTypeRef *)a2);
    *(void *)a2 = 0LL;
  }

  id v3 = *(const void **)(a2 + 8);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
  }

  size_t v4 = *(const void **)(a2 + 16);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a2 + 16) = 0LL;
  }

  free((void *)a2);
}

void sub_1824B5800( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

BOOL nw_serializable_tls_option_is_equal(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  if (((*(_BYTE *)(a3 + 24) ^ *(_BYTE *)(a2 + 24)) & 7) != 0) {
    goto LABEL_2;
  }
  unsigned int v8 = *(const void **)a2;
  id v9 = *(const void **)a3;
  if (*(void *)a2 != *(void *)a3)
  {
    BOOL v6 = 0LL;
    if (!v8 || !v9) {
      goto LABEL_3;
    }
    if (!CFEqual(v8, v9)) {
      goto LABEL_2;
    }
  }

  os_log_type_t v10 = *(const void **)(a2 + 8);
  BOOL v11 = *(const void **)(a3 + 8);
  if (v10 != v11)
  {
    BOOL v6 = 0LL;
    if (!v10 || !v11) {
      goto LABEL_3;
    }
    if (!CFEqual(v10, v11))
    {
LABEL_2:
      BOOL v6 = 0LL;
      goto LABEL_3;
    }
  }

  os_log_type_t v12 = *(const void **)(a2 + 16);
  os_log_type_t v13 = *(const void **)(a3 + 16);
  if (v12 == v13)
  {
    BOOL v6 = 1LL;
  }

  else
  {
    BOOL v6 = 0LL;
    if (v12 && v13) {
      BOOL v6 = CFEqual(v12, v13) != 0;
    }
  }

void sub_1824B58E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_serializable_tls_serialize_options(void *a1, uint64_t a2, size_t *a3)
{
  uint64_t v63 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  if (!a2)
  {
    __nwlog_obj();
    int v36 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    uint64_t v58 = "nw_serializable_tls_serialize_options";
    os_log_type_t v37 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v39 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v58 = "nw_serializable_tls_serialize_options";
        _os_log_impl(&dword_181A5C000, v38, v39, "%{public}s called with null existing_handle", buf, 0xCu);
      }
    }

    else if (v55)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v48 = type;
      BOOL v49 = os_log_type_enabled(v38, type);
      if (backtrace_string)
      {
        if (v49)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v58 = "nw_serializable_tls_serialize_options";
          __int16 v59 = 2082;
          uint64_t v60 = (uint64_t)backtrace_string;
          _os_log_impl( &dword_181A5C000,  v38,  v48,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        if (!v37) {
          goto LABEL_75;
        }
        goto LABEL_74;
      }

      if (v49)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v58 = "nw_serializable_tls_serialize_options";
        _os_log_impl(&dword_181A5C000, v38, v48, "%{public}s called with null existing_handle, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v53 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v58 = "nw_serializable_tls_serialize_options";
        _os_log_impl( &dword_181A5C000,  v38,  v53,  "%{public}s called with null existing_handle, backtrace limit exceeded",  buf,  0xCu);
      }
    }

    goto LABEL_72;
  }

  if (!a3)
  {
    __nwlog_obj();
    char v40 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    uint64_t v58 = "nw_serializable_tls_serialize_options";
    os_log_type_t v37 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v41 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v58 = "nw_serializable_tls_serialize_options";
        _os_log_impl(&dword_181A5C000, v38, v41, "%{public}s called with null out_length", buf, 0xCu);
      }
    }

    else if (v55)
    {
      char v50 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v51 = type;
      BOOL v52 = os_log_type_enabled(v38, type);
      if (v50)
      {
        if (v52)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v58 = "nw_serializable_tls_serialize_options";
          __int16 v59 = 2082;
          uint64_t v60 = (uint64_t)v50;
          _os_log_impl( &dword_181A5C000,  v38,  v51,  "%{public}s called with null out_length, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(v50);
LABEL_73:
        if (!v37)
        {
LABEL_75:
          os_log_type_t v17 = 0LL;
LABEL_76:

          return (BOOL)v17;
        }

void sub_1824B60E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL nw_serializable_tls_deserialize_options(void *a1, _BYTE *a2, unint64_t a3)
{
  uint64_t v52 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  if (!a2)
  {
    __nwlog_obj();
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    BOOL v47 = "nw_serializable_tls_deserialize_options";
    uint64_t v29 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (__nwlog_fault(v29, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        unsigned int v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v31 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v47 = "nw_serializable_tls_deserialize_options";
          _os_log_impl(&dword_181A5C000, v30, v31, "%{public}s called with null serialized_bytes", buf, 0xCu);
        }

        goto LABEL_68;
      }

      if (!v44)
      {
        __nwlog_obj();
        unsigned int v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v41 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v47 = "nw_serializable_tls_deserialize_options";
          _os_log_impl( &dword_181A5C000,  v30,  v41,  "%{public}s called with null serialized_bytes, backtrace limit exceeded",  buf,  0xCu);
        }

        goto LABEL_68;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      unsigned int v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v37 = type;
      BOOL v38 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (v38)
        {
          *(_DWORD *)int buf = 136446210;
          BOOL v47 = "nw_serializable_tls_deserialize_options";
          _os_log_impl( &dword_181A5C000,  v30,  v37,  "%{public}s called with null serialized_bytes, no backtrace",  buf,  0xCu);
        }

        goto LABEL_68;
      }

      if (v38)
      {
        *(_DWORD *)int buf = 136446466;
        BOOL v47 = "nw_serializable_tls_deserialize_options";
        __int16 v48 = 2082;
        uint64_t v49 = (uint64_t)backtrace_string;
        _os_log_impl( &dword_181A5C000,  v30,  v37,  "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s",  buf,  0x16u);
      }

void sub_1824B685C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
}

BOOL nw_protocol_options_is_serializable_tls(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  rlim_t v2 = v1;
  if (v1)
  {
    id v3 = (id *)v1;
    id v4 = v3[1];

    if (nw_protocol_copy_serializable_tls_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_serializable_tls_definition::onceToken, &__block_literal_global_72237);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v4,  nw_protocol_copy_serializable_tls_definition::tls_definition);

    goto LABEL_5;
  }

  __nwlog_obj();
  char v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  BOOL v18 = "nw_protocol_options_is_serializable_tls";
  char v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v18 = "nw_protocol_options_is_serializable_tls";
        _os_log_impl(&dword_181A5C000, v9, v10, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v18 = "nw_protocol_options_is_serializable_tls";
          __int16 v19 = 2082;
          CFIndex v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v9,  v12,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v13)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v18 = "nw_protocol_options_is_serializable_tls";
        _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v18 = "nw_protocol_options_is_serializable_tls";
        _os_log_impl( &dword_181A5C000,  v9,  v14,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1824B6B6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_protocol_options *nw_tls_create_serializable_options()
{
  if (nw_protocol_copy_serializable_tls_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_serializable_tls_definition::onceToken, &__block_literal_global_72237);
  }
  return nw_protocol_create_options((void *)nw_protocol_copy_serializable_tls_definition::tls_definition);
}

NWConcrete_nw_protocol_options *nw_tls_create_options_from_serializable(void *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  if (nw_protocol_options_is_serializable_tls(v5))
  {
    BOOL v6 = (void *)nw_protocol_boringssl_copy_definition();
    options = nw_protocol_create_options(v6);

    char v8 = options;
    *(void *)int buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v26 = 1;
    v19[0] = MEMORY[0x1895F87A8];
    v19[1] = 3221225472LL;
    void v19[2] = __nw_tls_create_options_from_serializable_block_invoke;
    v19[3] = &unk_189BC65E0;
    id v9 = v8;
    uint64_t v21 = buf;
    uint64_t v22 = a2;
    CFIndex v20 = v9;
    nw_protocol_options_access_handle(v5, v19);
    if (a3) {
      *a3 = *(_BYTE *)(*(void *)&buf[8] + 24LL);
    }

    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }

  __nwlog_obj();
  CFIndex v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_tls_create_options_from_serializable";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (__nwlog_fault(v12, &type, &v23))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tls_create_options_from_serializable";
        _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s called with null nw_protocol_options_is_serializable_tls(serializable_options)",  buf,  0xCu);
      }
    }

    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_tls_create_options_from_serializable";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&_BYTE buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null nw_protocol_options_is_serializable_tls(serializable_options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v17)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tls_create_options_from_serializable";
        _os_log_impl( &dword_181A5C000,  v13,  v16,  "%{public}s called with null nw_protocol_options_is_serializable_tls(serializable_options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_tls_create_options_from_serializable";
        _os_log_impl( &dword_181A5C000,  v13,  v18,  "%{public}s called with null nw_protocol_options_is_serializable_tls(serializable_options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1824B6F00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_tls_create_options_from_serializable_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  if ((*(_BYTE *)(a2 + 24) & 1) != 0 && os_variant_allows_internal_security_policies())
  {
    id v4 = *(sec_protocol_options **)(a1 + 32);
    if (nw_context_copy_implicit_context::onceToken != -1) {
      dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
    }
    id v5 = (id)nw_context_copy_implicit_context::implicit_context;
    BOOL v6 = nw_context_copy_workloop(v5);
    sec_protocol_options_set_verify_block(v4, &__block_literal_global_4_72284, (dispatch_queue_t)v6);
  }

  if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    sec_protocol_options_add_tls_application_protocol(*(sec_protocol_options_t *)(a1 + 32), "h2");
    if ((*(_BYTE *)(a2 + 24) & 4) == 0)
    {
LABEL_8:
      char v7 = *(const __CFArray **)a2;
      if (!*(void *)a2) {
        goto LABEL_14;
      }
      goto LABEL_12;
    }
  }

  else if ((*(_BYTE *)(a2 + 24) & 4) == 0)
  {
    goto LABEL_8;
  }

  sec_protocol_options_set_min_tls_protocol_version(*(sec_protocol_options_t *)(a1 + 32), tls_protocol_version_TLSv13);
  char v7 = *(const __CFArray **)a2;
  if (!*(void *)a2) {
    goto LABEL_14;
  }
LABEL_12:
  if (CFArrayGetCount(v7) >= 1) {
    sec_protocol_options_set_server_raw_public_key_certificates();
  }
LABEL_14:
  if (*(void *)(a2 + 8))
  {
    char v8 = *(const __CFArray **)(a2 + 16);
    if (v8 && (CFIndex Count = CFArrayGetCount(v8), Count >= 1))
    {
      CFIndex v10 = Count;
      Mutable = 0LL;
      CFIndex v12 = 0LL;
      BOOL v13 = (const __CFAllocator *)*MEMORY[0x189604DB0];
      while (1)
      {
        ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 16), v12);
        CFDataGetBytePtr(ValueAtIndex);
        CFDataGetLength(ValueAtIndex);
        char v15 = (void *)NEHelperCopyDataForCertificate();
        os_log_type_t v16 = v15;
        if (!v15) {
          break;
        }
        xpc_data_get_bytes_ptr(v15);
        xpc_data_get_length(v16);
        BOOL v17 = (__SecIdentity *)SecCertificateCreateWithBytes();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v18 = (os_log_s *)(id)gLogObj;
        __int16 v19 = v18;
        if (!v17)
        {
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136446210;
            os_log_type_t v33 = "nw_tls_create_options_from_serializable_block_invoke";
            _os_log_impl( &dword_181A5C000,  v19,  OS_LOG_TYPE_ERROR,  "%{public}s Failed to create certificate from data",  buf,  0xCu);
          }

          goto LABEL_32;
        }

        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v33 = "nw_tls_create_options_from_serializable_block_invoke";
          __int16 v34 = 2112;
          id v35 = v17;
          _os_log_impl( &dword_181A5C000,  v19,  OS_LOG_TYPE_DEBUG,  "%{public}s Fetched certificate %@ from NEHelper",  buf,  0x16u);
        }

        if (!Mutable) {
          Mutable = CFArrayCreateMutable(v13, 0LL, MEMORY[0x189605228]);
        }
        CFArrayAppendValue(Mutable, v17);
        CFRelease(v17);

        if (v10 == ++v12) {
          goto LABEL_33;
        }
      }

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      __int16 v19 = (os_log_s *)(id)gLogObj;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v33 = "nw_tls_create_options_from_serializable_block_invoke";
        _os_log_impl( &dword_181A5C000,  v19,  OS_LOG_TYPE_ERROR,  "%{public}s Failed to fetch certificate from NEHelper",  buf,  0xCu);
      }

      os_log_type_t v16 = 0LL;
LABEL_32:

      *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
    }

    else
    {
      Mutable = 0LL;
    }

void sub_1824B7538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_tls_create_options_from_serializable_block_invoke_2( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a4, 1LL);
}

void nw_serializable_tls_set_trust_certs(void *a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_serializable_tls(v1))
  {
    v10[0] = MEMORY[0x1895F87A8];
    v10[1] = 3221225472LL;
    void v10[2] = __nw_serializable_tls_set_trust_certs_block_invoke;
    v10[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v11 = 1;
    nw_protocol_options_access_handle(v1, v10);
    goto LABEL_3;
  }

  __nwlog_obj();
  rlim_t v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  char v15 = "nw_serializable_tls_set_trust_certs";
  id v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v3, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v15 = "nw_serializable_tls_set_trust_certs";
        _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null nw_protocol_options_is_serializable_tls(options)",  buf,  0xCu);
      }
    }

    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)int buf = 136446466;
          char v15 = "nw_serializable_tls_set_trust_certs";
          __int16 v16 = 2082;
          BOOL v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v4,  v7,  "%{public}s called with null nw_protocol_options_is_serializable_tls(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v8)
      {
        *(_DWORD *)int buf = 136446210;
        char v15 = "nw_serializable_tls_set_trust_certs";
        _os_log_impl( &dword_181A5C000,  v4,  v7,  "%{public}s called with null nw_protocol_options_is_serializable_tls(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v15 = "nw_serializable_tls_set_trust_certs";
        _os_log_impl( &dword_181A5C000,  v4,  v9,  "%{public}s called with null nw_protocol_options_is_serializable_tls(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1824B7884(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_serializable_tls_set_trust_certs_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

void nw_serializable_tls_set_add_h2_alpn(void *a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_serializable_tls(v1))
  {
    v10[0] = MEMORY[0x1895F87A8];
    v10[1] = 3221225472LL;
    void v10[2] = __nw_serializable_tls_set_add_h2_alpn_block_invoke;
    v10[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v11 = 1;
    nw_protocol_options_access_handle(v1, v10);
    goto LABEL_3;
  }

  __nwlog_obj();
  rlim_t v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  char v15 = "nw_serializable_tls_set_add_h2_alpn";
  id v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v3, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v15 = "nw_serializable_tls_set_add_h2_alpn";
        _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null nw_protocol_options_is_serializable_tls(options)",  buf,  0xCu);
      }
    }

    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)int buf = 136446466;
          char v15 = "nw_serializable_tls_set_add_h2_alpn";
          __int16 v16 = 2082;
          BOOL v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v4,  v7,  "%{public}s called with null nw_protocol_options_is_serializable_tls(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v8)
      {
        *(_DWORD *)int buf = 136446210;
        char v15 = "nw_serializable_tls_set_add_h2_alpn";
        _os_log_impl( &dword_181A5C000,  v4,  v7,  "%{public}s called with null nw_protocol_options_is_serializable_tls(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v15 = "nw_serializable_tls_set_add_h2_alpn";
        _os_log_impl( &dword_181A5C000,  v4,  v9,  "%{public}s called with null nw_protocol_options_is_serializable_tls(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1824B7BA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_serializable_tls_set_add_h2_alpn_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(a2 + 24) & 0xFD | (2 * *(_BYTE *)(a1 + 32));
  return 1LL;
}

void nw_serializable_tls_set_require_tls13(void *a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_serializable_tls(v1))
  {
    v10[0] = MEMORY[0x1895F87A8];
    v10[1] = 3221225472LL;
    void v10[2] = __nw_serializable_tls_set_require_tls13_block_invoke;
    v10[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v11 = 1;
    nw_protocol_options_access_handle(v1, v10);
    goto LABEL_3;
  }

  __nwlog_obj();
  rlim_t v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  char v15 = "nw_serializable_tls_set_require_tls13";
  id v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v3, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v15 = "nw_serializable_tls_set_require_tls13";
        _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null nw_protocol_options_is_serializable_tls(options)",  buf,  0xCu);
      }
    }

    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      BOOL v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)int buf = 136446466;
          char v15 = "nw_serializable_tls_set_require_tls13";
          __int16 v16 = 2082;
          BOOL v17 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v4,  v7,  "%{public}s called with null nw_protocol_options_is_serializable_tls(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v8)
      {
        *(_DWORD *)int buf = 136446210;
        char v15 = "nw_serializable_tls_set_require_tls13";
        _os_log_impl( &dword_181A5C000,  v4,  v7,  "%{public}s called with null nw_protocol_options_is_serializable_tls(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v15 = "nw_serializable_tls_set_require_tls13";
        _os_log_impl( &dword_181A5C000,  v4,  v9,  "%{public}s called with null nw_protocol_options_is_serializable_tls(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1824B7EA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_serializable_tls_set_require_tls13_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(a2 + 24) & 0xFB | (4 * *(_BYTE *)(a1 + 32));
  return 1LL;
}

void nw_serializable_tls_set_server_raw_public_keys(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_serializable_tls(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_serializable_tls_set_server_raw_public_keys_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  __int16 v16 = "nw_serializable_tls_set_server_raw_public_keys";
  os_log_type_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_serializable_tls_set_server_raw_public_keys";
        _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null nw_protocol_options_is_serializable_tls(options)",  buf,  0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)int buf = 136446466;
          __int16 v16 = "nw_serializable_tls_set_server_raw_public_keys";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_serializable_tls(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v10)
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_serializable_tls_set_server_raw_public_keys";
        _os_log_impl( &dword_181A5C000,  v6,  v9,  "%{public}s called with null nw_protocol_options_is_serializable_tls(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v16 = "nw_serializable_tls_set_server_raw_public_keys";
        _os_log_impl( &dword_181A5C000,  v6,  v11,  "%{public}s called with null nw_protocol_options_is_serializable_tls(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1824B8198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_serializable_tls_set_server_raw_public_keys_block_invoke(uint64_t a1, CFTypeRef *a2)
{
  if (*a2)
  {
    CFRelease(*a2);
    *a2 = 0LL;
  }

  id v4 = *(const __CFArray **)(a1 + 32);
  if (v4 && CFArrayGetCount(v4) >= 1)
  {
    CFTypeRef v5 = *(CFTypeRef *)(a1 + 32);
    if (v5) {
      CFTypeRef v5 = CFRetain(v5);
    }
    *a2 = v5;
  }

  return 1LL;
}

void nw_serializable_tls_set_client_identity_reference(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  if (nw_protocol_options_is_serializable_tls(v5))
  {
    v14[0] = MEMORY[0x1895F87A8];
    v14[1] = 3221225472LL;
    v14[2] = __nw_serializable_tls_set_client_identity_reference_block_invoke;
    v14[3] = &__block_descriptor_48_e9_B16__0_v8l;
    void v14[4] = a2;
    void v14[5] = a3;
    nw_protocol_options_access_handle(v5, v14);
    goto LABEL_3;
  }

  __nwlog_obj();
  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  uint64_t v18 = "nw_serializable_tls_set_client_identity_reference";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v16 = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v7, &v16, &v15))
  {
    if (v16 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = v16;
      if (os_log_type_enabled(v8, v16))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v18 = "nw_serializable_tls_set_client_identity_reference";
        _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null nw_protocol_options_is_serializable_tls(options)",  buf,  0xCu);
      }
    }

    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = v16;
      BOOL v12 = os_log_type_enabled(v8, v16);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v18 = "nw_serializable_tls_set_client_identity_reference";
          __int16 v19 = 2082;
          CFIndex v20 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null nw_protocol_options_is_serializable_tls(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }

      if (v12)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v18 = "nw_serializable_tls_set_client_identity_reference";
        _os_log_impl( &dword_181A5C000,  v8,  v11,  "%{public}s called with null nw_protocol_options_is_serializable_tls(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v13 = v16;
      if (os_log_type_enabled(v8, v16))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v18 = "nw_serializable_tls_set_client_identity_reference";
        _os_log_impl( &dword_181A5C000,  v8,  v13,  "%{public}s called with null nw_protocol_options_is_serializable_tls(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1824B84D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_serializable_tls_set_client_identity_reference_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = *(const void **)(a2 + 8);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
  }

  id v5 = *(const void **)(a2 + 16);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a2 + 16) = 0LL;
  }

  BOOL v6 = *(const void **)(a1 + 32);
  if (v6) {
    *(void *)(a2 + _Block_object_dispose(va, 8) = CFRetain(v6);
  }
  os_log_type_t v7 = *(const void **)(a1 + 40);
  if (v7) {
    *(void *)(a2 + 16) = CFRetain(v7);
  }
  return 1LL;
}

void nw_tls_options_add_transport_specific_application_protocol(void *a1, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (!nw_protocol_options_is_tls(v3))
  {
    __nwlog_obj();
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    unsigned int v30 = "nw_tls_options_add_transport_specific_application_protocol";
    BOOL v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        unsigned int v30 = "nw_tls_options_add_transport_specific_application_protocol";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_options_is_tls(options)",  buf,  0xCu);
      }
    }

    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)int buf = 136446466;
          unsigned int v30 = "nw_tls_options_add_transport_specific_application_protocol";
          __int16 v31 = 2082;
          uint64_t v32 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v16,  "%{public}s called with null nw_protocol_options_is_tls(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_53:
        if (!v6) {
          goto LABEL_6;
        }
LABEL_54:
        free(v6);
        goto LABEL_6;
      }

      if (v17)
      {
        *(_DWORD *)int buf = 136446210;
        unsigned int v30 = "nw_tls_options_add_transport_specific_application_protocol";
        _os_log_impl( &dword_181A5C000,  v7,  v16,  "%{public}s called with null nw_protocol_options_is_tls(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        unsigned int v30 = "nw_tls_options_add_transport_specific_application_protocol";
        _os_log_impl( &dword_181A5C000,  v7,  v24,  "%{public}s called with null nw_protocol_options_is_tls(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }

void sub_1824B8C00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t NWPBInterfaceReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x189611CF0];
  uint64_t v4 = (int)*MEMORY[0x189611CF0];
  unint64_t v5 = *(void *)(a2 + v4);
  BOOL v6 = (int *)MEMORY[0x189611CE8];
  unint64_t v7 = *(void *)(a2 + (int)*MEMORY[0x189611CE8]);
  os_log_type_t v8 = (int *)MEMORY[0x189611CE0];
  if (v5 < v7)
  {
    os_log_type_t v10 = (int *)MEMORY[0x189611CD8];
    while (2)
    {
      os_log_type_t v13 = (_BYTE *)(a2 + *v8);
      if (!*v13)
      {
        if (v5 >= v7)
        {
          unint64_t v15 = 0LL;
        }

        else
        {
          char v14 = *(_BYTE *)(*(void *)(a2 + *v10) + v5);
          *(void *)(a2 + (int)v4) = v5 + 1;
          unint64_t v15 = v14 & 0x7F;
          if ((v14 & 0x80) == 0) {
            goto LABEL_39;
          }
          uint64_t v16 = *v3;
          unint64_t v17 = *(void *)(a2 + v16);
          if (v17 != -1LL && v17 < *(void *)(a2 + *v6))
          {
            unint64_t v18 = v17 + 1;
            int v19 = *(char *)(*(void *)(a2 + *v10) + v17);
            *(void *)(a2 + v16) = v18;
            v15 |= (unint64_t)(v19 & 0x7F) << 7;
            if ((v19 & 0x80000000) == 0) {
              goto LABEL_39;
            }
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 != -1LL && v21 < *(void *)(a2 + *v6))
            {
              unint64_t v22 = v21 + 1;
              int v23 = *(char *)(*(void *)(a2 + *v10) + v21);
              *(void *)(a2 + v20) = v22;
              v15 |= (unint64_t)(v23 & 0x7F) << 14;
              if ((v23 & 0x80000000) == 0) {
                goto LABEL_39;
              }
              uint64_t v24 = *v3;
              unint64_t v25 = *(void *)(a2 + v24);
              if (v25 != -1LL && v25 < *(void *)(a2 + *v6))
              {
                unint64_t v26 = v25 + 1;
                int v27 = *(char *)(*(void *)(a2 + *v10) + v25);
                *(void *)(a2 + v24) = v26;
                v15 |= (unint64_t)(v27 & 0x7F) << 21;
                if ((v27 & 0x80000000) == 0) {
                  goto LABEL_39;
                }
                uint64_t v28 = *v3;
                unint64_t v29 = *(void *)(a2 + v28);
                if (v29 != -1LL && v29 < *(void *)(a2 + *v6))
                {
                  unint64_t v30 = v29 + 1;
                  int v31 = *(char *)(*(void *)(a2 + *v10) + v29);
                  *(void *)(a2 + v2_Block_object_dispose(va, 8) = v30;
                  v15 |= (unint64_t)(v31 & 0x7F) << 28;
                  if ((v31 & 0x80000000) == 0) {
                    goto LABEL_39;
                  }
                  uint64_t v32 = *v3;
                  unint64_t v33 = *(void *)(a2 + v32);
                  if (v33 != -1LL && v33 < *(void *)(a2 + *v6))
                  {
                    unint64_t v34 = v33 + 1;
                    int v35 = *(char *)(*(void *)(a2 + *v10) + v33);
                    *(void *)(a2 + v32) = v34;
                    if ((v35 & 0x80000000) == 0) {
                      goto LABEL_39;
                    }
                    uint64_t v36 = *v3;
                    unint64_t v37 = *(void *)(a2 + v36);
                    if (v37 != -1LL && v37 < *(void *)(a2 + *v6))
                    {
                      unint64_t v38 = v37 + 1;
                      int v39 = *(char *)(*(void *)(a2 + *v10) + v37);
                      *(void *)(a2 + v36) = v38;
                      if ((v39 & 0x80000000) == 0) {
                        goto LABEL_39;
                      }
                      uint64_t v40 = *v3;
                      unint64_t v41 = *(void *)(a2 + v40);
                      if (v41 != -1LL && v41 < *(void *)(a2 + *v6))
                      {
                        unint64_t v42 = v41 + 1;
                        int v43 = *(char *)(*(void *)(a2 + *v10) + v41);
                        *(void *)(a2 + v40) = v42;
                        if ((v43 & 0x80000000) == 0) {
                          goto LABEL_39;
                        }
                        uint64_t v44 = *v3;
                        unint64_t v45 = *(void *)(a2 + v44);
                        if (v45 != -1LL && v45 < *(void *)(a2 + *v6))
                        {
                          unint64_t v46 = v45 + 1;
                          int v47 = *(char *)(*(void *)(a2 + *v10) + v45);
                          *(void *)(a2 + v44) = v46;
                          if ((v47 & 0x80000000) == 0) {
                            goto LABEL_39;
                          }
                          uint64_t v48 = *v3;
                          unint64_t v49 = *(void *)(a2 + v48);
                          if (v49 != -1LL && v49 < *(void *)(a2 + *v6))
                          {
                            unint64_t v50 = v49 + 1;
                            int v51 = *(char *)(*(void *)(a2 + *v10) + v49);
                            *(void *)(a2 + v4_Block_object_dispose(va, 8) = v50;
                            if (v51 < 0)
                            {
                              unint64_t v15 = 0LL;
                              int v52 = *(unsigned __int8 *)(a2 + *v8);
                              goto LABEL_41;
                            }

LABEL_292:
                                if (*(_BYTE *)(a2 + *v8)) {
                                  unsigned int v251 = 0;
                                }
LABEL_294:
                                *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = v251;
                                goto LABEL_4;
                              case 7u:
                                *(_BYTE *)(a1 + 44) |= 8u;
                                uint64_t v285 = *v3;
                                unint64_t v286 = *(void *)(a2 + v285);
                                if (v286 == -1LL || v286 >= *(void *)(a2 + *v6))
                                {
                                  unsigned int v289 = 0;
LABEL_296:
                                  *(_BYTE *)(a2 + *v_Block_object_dispose(va, 8) = 1;
                                  goto LABEL_297;
                                }

                                unint64_t v287 = v286 + 1;
                                char v288 = *(_BYTE *)(*(void *)(a2 + *v10) + v286);
                                *(void *)(a2 + v285) = v287;
                                unsigned int v289 = v288 & 0x7F;
                                if ((v288 & 0x80) == 0) {
                                  goto LABEL_297;
                                }
                                uint64_t v290 = *v3;
                                unint64_t v291 = *(void *)(a2 + v290);
                                if (v291 == -1LL || v291 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_296;
                                }
                                int v292 = *(char *)(*(void *)(a2 + *v10) + v291);
                                *(void *)(a2 + v290) = v291 + 1;
                                unsigned int v289 = v289 & 0xFFFFC07F | ((v292 & 0x7F) << 7);
                                if ((v292 & 0x80000000) == 0) {
                                  goto LABEL_297;
                                }
                                uint64_t v293 = *v3;
                                unint64_t v294 = *(void *)(a2 + v293);
                                if (v294 == -1LL || v294 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_296;
                                }
                                int v295 = *(char *)(*(void *)(a2 + *v10) + v294);
                                *(void *)(a2 + v293) = v294 + 1;
                                unsigned int v289 = v289 & 0xFFE03FFF | ((v295 & 0x7F) << 14);
                                if ((v295 & 0x80000000) == 0) {
                                  goto LABEL_297;
                                }
                                uint64_t v296 = *v3;
                                unint64_t v297 = *(void *)(a2 + v296);
                                if (v297 == -1LL || v297 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_296;
                                }
                                int v298 = *(char *)(*(void *)(a2 + *v10) + v297);
                                *(void *)(a2 + v296) = v297 + 1;
                                unsigned int v289 = v289 & 0xF01FFFFF | ((v298 & 0x7F) << 21);
                                if ((v298 & 0x80000000) == 0) {
                                  goto LABEL_297;
                                }
                                uint64_t v299 = *v3;
                                unint64_t v300 = *(void *)(a2 + v299);
                                if (v300 == -1LL || v300 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_296;
                                }
                                unint64_t v301 = v300 + 1;
                                int v302 = *(char *)(*(void *)(a2 + *v10) + v300);
                                *(void *)(a2 + v299) = v301;
                                v289 |= v302 << 28;
                                if ((v302 & 0x80000000) == 0) {
                                  goto LABEL_297;
                                }
                                uint64_t v303 = *v3;
                                unint64_t v304 = *(void *)(a2 + v303);
                                if (v304 == -1LL || v304 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_296;
                                }
                                unint64_t v305 = v304 + 1;
                                int v306 = *(char *)(*(void *)(a2 + *v10) + v304);
                                *(void *)(a2 + v303) = v305;
                                if ((v306 & 0x80000000) == 0) {
                                  goto LABEL_297;
                                }
                                uint64_t v307 = *v3;
                                unint64_t v308 = *(void *)(a2 + v307);
                                if (v308 == -1LL || v308 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_296;
                                }
                                unint64_t v309 = v308 + 1;
                                int v310 = *(char *)(*(void *)(a2 + *v10) + v308);
                                *(void *)(a2 + v307) = v309;
                                if ((v310 & 0x80000000) == 0) {
                                  goto LABEL_297;
                                }
                                uint64_t v311 = *v3;
                                unint64_t v312 = *(void *)(a2 + v311);
                                if (v312 == -1LL || v312 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_296;
                                }
                                unint64_t v313 = v312 + 1;
                                int v314 = *(char *)(*(void *)(a2 + *v10) + v312);
                                *(void *)(a2 + v311) = v313;
                                if ((v314 & 0x80000000) == 0) {
                                  goto LABEL_297;
                                }
                                uint64_t v315 = *v3;
                                unint64_t v316 = *(void *)(a2 + v315);
                                if (v316 == -1LL || v316 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_296;
                                }
                                unint64_t v317 = v316 + 1;
                                int v318 = *(char *)(*(void *)(a2 + *v10) + v316);
                                *(void *)(a2 + v315) = v317;
                                if ((v318 & 0x80000000) == 0) {
                                  goto LABEL_297;
                                }
                                uint64_t v319 = *v3;
                                unint64_t v320 = *(void *)(a2 + v319);
                                if (v320 == -1LL || v320 >= *(void *)(a2 + *v6)) {
                                  goto LABEL_296;
                                }
                                unint64_t v321 = v320 + 1;
                                int v322 = *(char *)(*(void *)(a2 + *v10) + v320);
                                *(void *)(a2 + v319) = v321;
                                if (v322 < 0)
                                {
                                  unsigned int v289 = 0;
                                  goto LABEL_299;
                                }

NWConcrete_nw_protocol_options *nw_http1_create_options()
{
  if (nw_protocol_copy_http1_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http1_definition_onceToken, &__block_literal_global_72463);
  }
  return nw_protocol_create_options((void *)nw_protocol_copy_http1_definition_http1_definition);
}

BOOL __nw_protocol_copy_http1_definition_block_invoke()
{
  if (nw_protocol_http1_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http1_identifier::onceToken, &__block_literal_global_39881);
  }
  int v0 = nw_protocol_definition_create_with_identifier((__int128 *)&nw_protocol_http1_identifier::http1_protocol_identifier);
  id v1 = (void *)nw_protocol_copy_http1_definition_http1_definition;
  nw_protocol_copy_http1_definition_http1_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator( (void *)nw_protocol_copy_http1_definition_http1_definition,  (uint64_t)nw_http1_allocate_options,  (uint64_t)nw_http1_copy_options,  (uint64_t)nw_http1_deallocate_options);
  nw_protocol_definition_set_options_equality_check( (void *)nw_protocol_copy_http1_definition_http1_definition,  (uint64_t)nw_http1_options_are_equal);
  nw_protocol_definition_set_options_serializer( (void *)nw_protocol_copy_http1_definition_http1_definition,  0,  (uint64_t)nw_http1_serialize_options,  (uint64_t)nw_http1_deserialize_options);
  if (nw_protocol_http1_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http1_identifier::onceToken, &__block_literal_global_39881);
  }
  return nw_protocol_register_handle( (uint64_t)&nw_protocol_http1_identifier::http1_protocol_identifier,  (void *)nw_protocol_copy_http1_definition_http1_definition,  (uint64_t)nw_protocol_http1_create,  (uint64_t)nw_protocol_http1_accept);
}

BOOL nw_http1_allocate_options(void *a1)
{
  id v1 = a1;
  rlim_t v2 = calloc(1uLL, 8uLL);
  if (v2) {
    goto LABEL_2;
  }
  __nwlog_obj();
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  unint64_t v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    void *v2 = 0x60000001DLL;

    return (BOOL)v2;
  }

  __break(1u);
  return result;
}

BOOL nw_http1_copy_options(void *a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    BOOL v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    unint64_t v18 = "nw_http1_copy_options";
    unint64_t v7 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault((const char *)v7, &type, &v15))
    {
LABEL_22:
      if (v7) {
        free(v7);
      }
      uint64_t v4 = 0LL;
      goto LABEL_4;
    }

    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        unint64_t v18 = "nw_http1_copy_options";
        os_log_type_t v10 = "%{public}s called with null existing_handle";
LABEL_20:
        _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
      }
    }

    else
    {
      if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v9 = type;
        BOOL v14 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)int buf = 136446466;
            unint64_t v18 = "nw_http1_copy_options";
            __int16 v19 = 2082;
            uint64_t v20 = (uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }

        if (!v14) {
          goto LABEL_21;
        }
        *(_DWORD *)int buf = 136446210;
        unint64_t v18 = "nw_http1_copy_options";
        os_log_type_t v10 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_20;
      }

      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        unint64_t v18 = "nw_http1_copy_options";
        os_log_type_t v10 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }

void nw_http1_deallocate_options(int a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    free(a2);
    return;
  }

  __nwlog_obj();
  rlim_t v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  BOOL v12 = "nw_http1_deallocate_options";
  id v3 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v12 = "nw_http1_deallocate_options";
        BOOL v6 = "%{public}s called with null allocated_handle";
LABEL_16:
        _os_log_impl(&dword_181A5C000, v4, v5, v6, buf, 0xCu);
      }
    }

    else
    {
      if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v5 = type;
        BOOL v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)int buf = 136446466;
            BOOL v12 = "nw_http1_deallocate_options";
            __int16 v13 = 2082;
            BOOL v14 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v4,  v5,  "%{public}s called with null allocated_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }

        if (!v8) {
          goto LABEL_17;
        }
        *(_DWORD *)int buf = 136446210;
        BOOL v12 = "nw_http1_deallocate_options";
        BOOL v6 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_16;
      }

      __nwlog_obj();
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v12 = "nw_http1_deallocate_options";
        BOOL v6 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_16;
      }
    }

BOOL nw_http1_options_are_equal(uint64_t a1, void *a2, void *a3)
{
  BOOL result = a2 == a3;
  if (a2 != a3 && a2)
  {
    if (a3) {
      return *a2 == *a3;
    }
  }

  return result;
}

BOOL nw_http1_serialize_options(void *a1, void *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    BOOL result = nw_http1_copy_options(a1, a2);
    *a3 = 8LL;
    return result;
  }

  __nwlog_obj();
  os_log_type_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  uint64_t v15 = "nw_http1_serialize_options";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v15 = "nw_http1_serialize_options";
        char v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      }
    }

    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)int buf = 136446466;
            uint64_t v15 = "nw_http1_serialize_options";
            __int16 v16 = 2082;
            unint64_t v17 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }

        if (!v11) {
          goto LABEL_18;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v15 = "nw_http1_serialize_options";
        char v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }

      __nwlog_obj();
      unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v15 = "nw_http1_serialize_options";
        char v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }

BOOL nw_http1_deserialize_options(void *a1, void *a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  BOOL v6 = v5;
  if (a2)
  {
    if (a3 == 8)
    {
      BOOL v7 = nw_http1_copy_options(v5, a2);
      goto LABEL_4;
    }

    __nwlog_obj();
    BOOL v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    uint64_t v22 = "nw_http1_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v22 = "nw_http1_deserialize_options";
          __int16 v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http1_options))";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      if (!v19)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v22 = "nw_http1_deserialize_options";
          __int16 v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http1_options)), backtrace limit exceeded";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v22 = "nw_http1_deserialize_options";
          __int16 v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http1_options)), no backtrace";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      if (!v18) {
        goto LABEL_22;
      }
      *(_DWORD *)int buf = 136446466;
      uint64_t v22 = "nw_http1_deserialize_options";
      __int16 v23 = 2082;
      uint64_t v24 = backtrace_string;
      unint64_t v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http1_options)), dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }

  else
  {
    __nwlog_obj();
    char v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    uint64_t v22 = "nw_http1_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v22 = "nw_http1_deserialize_options";
          __int16 v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
        }

id nw_protocol_copy_http1_definition()
{
  if (nw_protocol_copy_http1_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http1_definition_onceToken, &__block_literal_global_72463);
  }
  return (id)nw_protocol_copy_http1_definition_http1_definition;
}

void nw_http1_set_idle_timeout(void *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    id v4 = nw_http_messaging_options_copy_http1_options(v3);
    nw_http1_set_idle_timeout(v4, a2);

    goto LABEL_5;
  }

  if (nw_protocol_options_is_http1(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_http1_set_idle_timeout_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    int v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  unint64_t v17 = "nw_http1_set_idle_timeout";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        unint64_t v17 = "nw_http1_set_idle_timeout";
        char v9 = "%{public}s called with null nw_protocol_options_is_http1(options)";
LABEL_19:
        _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      }
    }

    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)int buf = 136446466;
            unint64_t v17 = "nw_http1_set_idle_timeout";
            __int16 v18 = 2082;
            char v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_options_is_http1(options), dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }

        if (!v11) {
          goto LABEL_20;
        }
        *(_DWORD *)int buf = 136446210;
        unint64_t v17 = "nw_http1_set_idle_timeout";
        char v9 = "%{public}s called with null nw_protocol_options_is_http1(options), no backtrace";
        goto LABEL_19;
      }

      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        unint64_t v17 = "nw_http1_set_idle_timeout";
        char v9 = "%{public}s called with null nw_protocol_options_is_http1(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }

BOOL nw_protocol_options_is_http_messaging(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    id v1 = a1;
    id v2 = v1[1];

    if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72514);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v2,  nw_protocol_copy_http_messaging_definition_definition);

    return is_equal_unsafe;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  BOOL v16 = "nw_protocol_options_is_http_messaging";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_protocol_options_is_http_messaging";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v16 = "nw_protocol_options_is_http_messaging";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_protocol_options_is_http_messaging";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_protocol_options_is_http_messaging";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

id nw_http_messaging_options_copy_http1_options(void *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72514);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_messaging_definition_definition);

    if (is_equal)
    {
      *(void *)int buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      uint64_t v24 = __Block_byref_object_copy__4;
      uint64_t v25 = __Block_byref_object_dispose__5;
      id v26 = 0LL;
      v20[0] = MEMORY[0x1895F87A8];
      v20[1] = 3221225472LL;
      v20[2] = __nw_http_messaging_options_copy_http1_options_block_invoke;
      v20[3] = &unk_189BC60A8;
      os_log_type_t v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      id v5 = *(id *)(*(void *)&buf[8] + 40LL);
      _Block_object_dispose(buf, 8);

      goto LABEL_6;
    }

    __nwlog_obj();
    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_http1_options";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        char v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_http1_options";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s protocol options are not http_messaging", buf, 0xCu);
        }

void sub_1824BC494( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

BOOL nw_protocol_options_is_http1(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    id v1 = a1;
    id v2 = v1[1];

    if (nw_protocol_copy_http1_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http1_definition_onceToken, &__block_literal_global_72463);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v2,  nw_protocol_copy_http1_definition_http1_definition);

    return is_equal_unsafe;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_protocol_options_is_http1";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_protocol_options_is_http1";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v16 = "nw_protocol_options_is_http1";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_protocol_options_is_http1";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_protocol_options_is_http1";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t __nw_http1_set_idle_timeout_block_invoke(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 32);
  return 1LL;
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
}

uint64_t __nw_http_messaging_options_copy_http1_options_block_invoke(uint64_t a1, id *a2)
{
  return 1LL;
}

BOOL __nw_protocol_copy_http_messaging_definition_block_invoke()
{
  if (nw_protocol_http_messaging_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_messaging_identifier::onceToken, &__block_literal_global_76181);
  }
  int v0 = nw_protocol_definition_create_with_identifier((__int128 *)nw_protocol_http_messaging_identifier::protocol_identifier);
  id v1 = (void *)nw_protocol_copy_http_messaging_definition_definition;
  nw_protocol_copy_http_messaging_definition_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator( (void *)nw_protocol_copy_http_messaging_definition_definition,  (uint64_t)nw_http_messaging_allocate_options,  (uint64_t)nw_http_messaging_copy_options,  (uint64_t)nw_http_messaging_deallocate_options);
  nw_protocol_definition_set_options_comparator( (void *)nw_protocol_copy_http_messaging_definition_definition,  (uint64_t)nw_http_messaging_options_compare);
  nw_protocol_definition_set_options_serializer( (void *)nw_protocol_copy_http_messaging_definition_definition,  0,  (uint64_t)nw_http_messaging_serialize_options,  (uint64_t)nw_http_messaging_deserialize_options);
  if (nw_protocol_http_messaging_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_messaging_identifier::onceToken, &__block_literal_global_76181);
  }
  return nw_protocol_register_handle( (uint64_t)nw_protocol_http_messaging_identifier::protocol_identifier,  (void *)nw_protocol_copy_http_messaging_definition_definition,  (uint64_t)nw_protocol_http_messaging_create,  (uint64_t)nw_protocol_http_messaging_accept);
}

BOOL nw_http_messaging_allocate_options(void *a1)
{
  id v1 = a1;
  id v2 = (void **)calloc(1uLL, 0x30uLL);
  if (!v2)
  {
    __nwlog_obj();
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
    BOOL v11 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v11);
    if (result)
    {
      __break(1u);
      return result;
    }

    free(v11);
  }

  if (nw_protocol_copy_http1_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http1_definition_onceToken, &__block_literal_global_72463);
  }
  options = nw_protocol_create_options((void *)nw_protocol_copy_http1_definition_http1_definition);
  id v4 = *v2;
  nw_protocol_options *v2 = options;

  if (nw_protocol_copy_http2_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http2_definition_onceToken, &__block_literal_global_3_72546);
  }
  id v5 = nw_protocol_create_options((void *)nw_protocol_copy_http2_definition_http2_definition);
  BOOL v6 = v2[1];
  v2[1] = v5;

  if (nw_protocol_copy_http3_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http3_definition_onceToken, &__block_literal_global_10_72547);
  }
  BOOL v7 = nw_protocol_create_options((void *)nw_protocol_copy_http3_definition_http3_definition);
  os_log_type_t v8 = v2[2];
  v2[2] = v7;

  return (BOOL)v2;
}

BOOL nw_http_messaging_copy_options(void *a1, uint64_t a2)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    os_log_type_t v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    unint64_t v30 = "nw_http_messaging_copy_options";
    uint64_t v19 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v27 = 0;
    if (!__nwlog_fault((const char *)v19, &type, &v27))
    {
LABEL_31:
      if (v19) {
        free(v19);
      }
      id v4 = 0LL;
      goto LABEL_12;
    }

    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)int buf = 136446210;
        unint64_t v30 = "nw_http_messaging_copy_options";
        uint64_t v22 = "%{public}s called with null existing_handle";
LABEL_29:
        _os_log_impl(&dword_181A5C000, v20, v21, v22, buf, 0xCu);
      }
    }

    else
    {
      if (v27)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v21 = type;
        BOOL v26 = os_log_type_enabled(v20, type);
        if (backtrace_string)
        {
          if (v26)
          {
            *(_DWORD *)int buf = 136446466;
            unint64_t v30 = "nw_http_messaging_copy_options";
            __int16 v31 = 2082;
            uint64_t v32 = (uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v20,  v21,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_31;
        }

        if (!v26) {
          goto LABEL_30;
        }
        *(_DWORD *)int buf = 136446210;
        unint64_t v30 = "nw_http_messaging_copy_options";
        uint64_t v22 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_29;
      }

      __nwlog_obj();
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)int buf = 136446210;
        unint64_t v30 = "nw_http_messaging_copy_options";
        uint64_t v22 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_29;
      }
    }

void nw_http_messaging_deallocate_options(uint64_t a1, void **a2)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    id v3 = *a2;
    *a2 = 0LL;

    id v4 = a2[1];
    a2[1] = 0LL;

    id v5 = a2[2];
    a2[2] = 0LL;

    BOOL v6 = a2[3];
    a2[3] = 0LL;

    BOOL v7 = a2[4];
    a2[4] = 0LL;

    os_log_type_t v8 = a2[5];
    a2[5] = 0LL;

    free(a2);
    return;
  }

  __nwlog_obj();
  char v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  uint64_t v19 = "nw_http_messaging_deallocate_options";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v10, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v19 = "nw_http_messaging_deallocate_options";
        char v13 = "%{public}s called with null allocated_handle";
LABEL_16:
        _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
      }
    }

    else
    {
      if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        BOOL v15 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)int buf = 136446466;
            uint64_t v19 = "nw_http_messaging_deallocate_options";
            __int16 v20 = 2082;
            os_log_type_t v21 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s called with null allocated_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }

        if (!v15) {
          goto LABEL_17;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v19 = "nw_http_messaging_deallocate_options";
        char v13 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_16;
      }

      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v19 = "nw_http_messaging_deallocate_options";
        char v13 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_16;
      }
    }

uint64_t nw_http_messaging_options_compare(void *a1, void **a2, void **a3)
{
  id v5 = a1;
  uint64_t is_equal = a2 == a3;
  if (a2 != a3 && a2 && a3)
  {
    else {
      uint64_t is_equal = 0LL;
    }
  }

  return is_equal;
}

BOOL nw_http_messaging_serialize_options(void *a1, uint64_t a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    BOOL result = nw_http_messaging_copy_options(a1, a2);
    *a3 = 48LL;
    return result;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  BOOL v15 = "nw_http_messaging_serialize_options";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v15 = "nw_http_messaging_serialize_options";
        char v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      }
    }

    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)int buf = 136446466;
            BOOL v15 = "nw_http_messaging_serialize_options";
            __int16 v16 = 2082;
            __int16 v17 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }

        if (!v11) {
          goto LABEL_18;
        }
        *(_DWORD *)int buf = 136446210;
        BOOL v15 = "nw_http_messaging_serialize_options";
        char v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }

      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v15 = "nw_http_messaging_serialize_options";
        char v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }

BOOL nw_http_messaging_deserialize_options(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  BOOL v6 = v5;
  if (a2)
  {
    if (a3 == 48)
    {
      BOOL v7 = nw_http_messaging_copy_options(v5, a2);
      goto LABEL_4;
    }

    __nwlog_obj();
    os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    uint64_t v22 = "nw_http_messaging_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v22 = "nw_http_messaging_deserialize_options";
          char v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_messaging_options))";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      if (!v19)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v22 = "nw_http_messaging_deserialize_options";
          char v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_messaging_options)), ba"
                "cktrace limit exceeded";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v22 = "nw_http_messaging_deserialize_options";
          char v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_messaging_options)), no backtrace";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      if (!v18) {
        goto LABEL_22;
      }
      *(_DWORD *)int buf = 136446466;
      uint64_t v22 = "nw_http_messaging_deserialize_options";
      __int16 v23 = 2082;
      uint64_t v24 = backtrace_string;
      __int16 v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_messaging_options)), dumpin"
            "g backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }

  else
  {
    __nwlog_obj();
    char v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    uint64_t v22 = "nw_http_messaging_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v22 = "nw_http_messaging_deserialize_options";
          char v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
        }

BOOL __nw_protocol_copy_http3_definition_block_invoke()
{
  if (nw_protocol_http3_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http3_identifier::onceToken, &__block_literal_global_10);
  }
  int v0 = nw_protocol_definition_create_with_identifier((__int128 *)&nw_protocol_http3_identifier::http3_protocol_identifier);
  id v1 = (void *)nw_protocol_copy_http3_definition_http3_definition;
  nw_protocol_copy_http3_definition_http3_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator( (void *)nw_protocol_copy_http3_definition_http3_definition,  (uint64_t)nw_http3_allocate_options,  (uint64_t)nw_http3_copy_options,  (uint64_t)nw_http3_deallocate_options);
  nw_protocol_definition_set_options_equality_check( (void *)nw_protocol_copy_http3_definition_http3_definition,  (uint64_t)nw_http3_options_are_equal);
  nw_protocol_definition_set_options_serializer( (void *)nw_protocol_copy_http3_definition_http3_definition,  0,  (uint64_t)nw_http3_serialize_options,  (uint64_t)nw_http3_deserialize_options);
  if (nw_protocol_http3_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http3_identifier::onceToken, &__block_literal_global_10);
  }
  return nw_protocol_register_handle( (uint64_t)&nw_protocol_http3_identifier::http3_protocol_identifier,  (void *)nw_protocol_copy_http3_definition_http3_definition,  (uint64_t)nw_protocol_http3_create,  (uint64_t)nw_protocol_http3_accept);
}

BOOL nw_http3_allocate_options(void *a1)
{
  id v1 = a1;
  id v2 = calloc(1uLL, 0x50uLL);
  if (v2) {
    goto LABEL_2;
  }
  __nwlog_obj();
  BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  os_log_type_t v8 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v8);
  if (!result)
  {
    free(v8);
LABEL_2:
    v2[16] = 240;
    v2[18] = 2;
    *((_BYTE *)v2 + 77) &= ~1u;
    id v3 = (void *)*((void *)v2 + 6);
    *((void *)v2 + 6) = 0LL;

    id v4 = (void *)*((void *)v2 + 7);
    *((void *)v2 + 7) = 0LL;

    id v5 = (void *)*((void *)v2 + 5);
    *((void *)v2 + 5) = 0LL;

    v2[17] = 0;
    return (BOOL)v2;
  }

  __break(1u);
  return result;
}

BOOL nw_http3_copy_options(void *a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    __int16 v23 = "nw_http3_copy_options";
    os_log_type_t v12 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault((const char *)v12, &type, &v20))
    {
LABEL_22:
      if (v12) {
        free(v12);
      }
      id v4 = 0LL;
      goto LABEL_4;
    }

    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v23 = "nw_http3_copy_options";
        BOOL v15 = "%{public}s called with null existing_handle";
LABEL_20:
        _os_log_impl(&dword_181A5C000, v13, v14, v15, buf, 0xCu);
      }
    }

    else
    {
      if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        BOOL v19 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v19)
          {
            *(_DWORD *)int buf = 136446466;
            __int16 v23 = "nw_http3_copy_options";
            __int16 v24 = 2082;
            uint64_t v25 = (uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }

        if (!v19) {
          goto LABEL_21;
        }
        *(_DWORD *)int buf = 136446210;
        __int16 v23 = "nw_http3_copy_options";
        BOOL v15 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_20;
      }

      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v23 = "nw_http3_copy_options";
        BOOL v15 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }

void nw_http3_deallocate_options(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    id v3 = (void *)a2[6];
    a2[6] = 0LL;

    id v4 = (void *)a2[7];
    a2[7] = 0LL;

    char v5 = (void *)a2[5];
    a2[5] = 0LL;

    free(a2);
    return;
  }

  __nwlog_obj();
  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  BOOL v16 = "nw_http3_deallocate_options";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v7, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_http3_deallocate_options";
        os_log_type_t v10 = "%{public}s called with null allocated_handle";
LABEL_16:
        _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
      }
    }

    else
    {
      if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v9 = type;
        BOOL v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)int buf = 136446466;
            BOOL v16 = "nw_http3_deallocate_options";
            __int16 v17 = 2082;
            BOOL v18 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null allocated_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }

        if (!v12) {
          goto LABEL_17;
        }
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_http3_deallocate_options";
        os_log_type_t v10 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_16;
      }

      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_http3_deallocate_options";
        os_log_type_t v10 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_16;
      }
    }

BOOL nw_http3_options_are_equal(int a1, void *__s1, void *__s2)
{
  BOOL result = __s1 == __s2;
  if (__s1 != __s2 && __s1)
  {
    if (__s2) {
      return memcmp(__s1, __s2, 0x50uLL) == 0;
    }
  }

  return result;
}

uint64_t nw_http3_serialize_options(void *a1, uint64_t a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    uint64_t v4 = nw_http3_copy_options(a1, a2);
    char v5 = *(void **)(v4 + 48);
    *(void *)(v4 + 4_Block_object_dispose(va, 8) = 0LL;

    BOOL v6 = *(void **)(v4 + 56);
    *(void *)(v4 + 56) = 0LL;

    *a3 = 80LL;
    return v4;
  }

  __nwlog_obj();
  os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  BOOL v18 = "nw_http3_serialize_options";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v9, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v18 = "nw_http3_serialize_options";
        BOOL v12 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v10, v11, v12, buf, 0xCu);
      }
    }

    else
    {
      if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        BOOL v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)int buf = 136446466;
            BOOL v18 = "nw_http3_serialize_options";
            __int16 v19 = 2082;
            char v20 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }

        if (!v14) {
          goto LABEL_18;
        }
        *(_DWORD *)int buf = 136446210;
        BOOL v18 = "nw_http3_serialize_options";
        BOOL v12 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }

      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v18 = "nw_http3_serialize_options";
        BOOL v12 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }

BOOL nw_http3_deserialize_options(void *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  BOOL v6 = v5;
  if (a2)
  {
    if (a3 == 80)
    {
      __int128 v7 = a2[3];
      __int128 v24 = a2[2];
      __int128 v25 = v7;
      __int128 v26 = a2[4];
      __int128 v8 = a2[1];
      *(_OWORD *)int buf = *a2;
      *(_OWORD *)&buf[16] = v8;
      BOOL v9 = nw_http3_copy_options(v5, (uint64_t)buf);
      goto LABEL_4;
    }

    __nwlog_obj();
    BOOL v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http3_deserialize_options";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v12, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http3_deserialize_options";
          char v15 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http3_options))";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      if (!v21)
      {
        __nwlog_obj();
        char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http3_deserialize_options";
          char v15 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http3_options)), backtrace limit exceeded";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      BOOL v20 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http3_deserialize_options";
          char v15 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http3_options)), no backtrace";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      if (!v20) {
        goto LABEL_22;
      }
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_http3_deserialize_options";
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&_BYTE buf[14] = backtrace_string;
      __int16 v19 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http3_options)), dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v13, v14, v19, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http3_deserialize_options";
    BOOL v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v12, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http3_deserialize_options";
          char v15 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_181A5C000, v13, v14, v15, buf, 0xCu);
        }

BOOL __nw_protocol_copy_http2_definition_block_invoke()
{
  if (nw_protocol_http2_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http2_identifier::onceToken, &__block_literal_global_83570);
  }
  int v0 = nw_protocol_definition_create_with_identifier((__int128 *)&nw_protocol_http2_identifier::http2_protocol_identifier);
  id v1 = (void *)nw_protocol_copy_http2_definition_http2_definition;
  nw_protocol_copy_http2_definition_http2_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator( (void *)nw_protocol_copy_http2_definition_http2_definition,  (uint64_t)nw_http2_allocate_options,  (uint64_t)nw_http2_copy_options,  (uint64_t)nw_http2_deallocate_options);
  nw_protocol_definition_set_options_equality_check( (void *)nw_protocol_copy_http2_definition_http2_definition,  (uint64_t)nw_http2_options_are_equal);
  nw_protocol_definition_set_options_serializer( (void *)nw_protocol_copy_http2_definition_http2_definition,  0,  (uint64_t)nw_http2_serialize_options,  (uint64_t)nw_http2_deserialize_options);
  if (nw_protocol_http2_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http2_identifier::onceToken, &__block_literal_global_83570);
  }
  return nw_protocol_register_handle( (uint64_t)&nw_protocol_http2_identifier::http2_protocol_identifier,  (void *)nw_protocol_copy_http2_definition_http2_definition,  (uint64_t)nw_protocol_http2_create,  (uint64_t)nw_protocol_http2_accept);
}

BOOL nw_http2_allocate_options(void *a1)
{
  id v1 = a1;
  id v2 = calloc(1uLL, 0x20uLL);
  if (v2) {
    goto LABEL_2;
  }
  __nwlog_obj();
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    v2[2] = 240;

    return (BOOL)v2;
  }

  __break(1u);
  return result;
}

BOOL nw_http2_copy_options(void *a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    __int128 v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    BOOL v20 = "nw_http2_copy_options";
    BOOL v9 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault((const char *)v9, &type, &v17))
    {
LABEL_22:
      if (v9) {
        free(v9);
      }
      uint64_t v4 = 0LL;
      goto LABEL_4;
    }

    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v20 = "nw_http2_copy_options";
        BOOL v12 = "%{public}s called with null existing_handle";
LABEL_20:
        _os_log_impl(&dword_181A5C000, v10, v11, v12, buf, 0xCu);
      }
    }

    else
    {
      if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        BOOL v16 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)int buf = 136446466;
            BOOL v20 = "nw_http2_copy_options";
            __int16 v21 = 2082;
            uint64_t v22 = (uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }

        if (!v16) {
          goto LABEL_21;
        }
        *(_DWORD *)int buf = 136446210;
        BOOL v20 = "nw_http2_copy_options";
        BOOL v12 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_20;
      }

      __nwlog_obj();
      os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v20 = "nw_http2_copy_options";
        BOOL v12 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }

void nw_http2_deallocate_options(uint64_t a1, void **a2)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    id v3 = *a2;
    *a2 = 0LL;

    free(a2);
    return;
  }

  __nwlog_obj();
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v14 = "nw_http2_deallocate_options";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v14 = "nw_http2_deallocate_options";
        __int128 v8 = "%{public}s called with null allocated_handle";
LABEL_16:
        _os_log_impl(&dword_181A5C000, v6, v7, v8, buf, 0xCu);
      }
    }

    else
    {
      if (v11)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v7 = type;
        BOOL v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v14 = "nw_http2_deallocate_options";
            __int16 v15 = 2082;
            BOOL v16 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null allocated_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }

        if (!v10) {
          goto LABEL_17;
        }
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v14 = "nw_http2_deallocate_options";
        __int128 v8 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_16;
      }

      __nwlog_obj();
      BOOL v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v14 = "nw_http2_deallocate_options";
        __int128 v8 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_16;
      }
    }

BOOL nw_http2_options_are_equal(uint64_t a1, void *a2, void *a3)
{
  BOOL result = a2 == a3;
  if (a2 != a3 && a2 && a3) {
    return *a2 == *a3 && a2[1] == a3[1] && a2[2] == a3[2] && a2[3] == a3[3];
  }
  return result;
}

BOOL nw_http2_serialize_options(void *a1, uint64_t a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    BOOL result = nw_http2_copy_options(a1, a2);
    *a3 = 32LL;
    return result;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  __int16 v15 = "nw_http2_serialize_options";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v15 = "nw_http2_serialize_options";
        BOOL v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      }
    }

    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)int buf = 136446466;
            __int16 v15 = "nw_http2_serialize_options";
            __int16 v16 = 2082;
            uint64_t v17 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }

        if (!v11) {
          goto LABEL_18;
        }
        *(_DWORD *)int buf = 136446210;
        __int16 v15 = "nw_http2_serialize_options";
        BOOL v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }

      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v15 = "nw_http2_serialize_options";
        BOOL v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }

BOOL nw_http2_deserialize_options(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  BOOL v6 = v5;
  if (a2)
  {
    if (a3 == 32)
    {
      BOOL v7 = nw_http2_copy_options(v5, a2);
      goto LABEL_4;
    }

    __nwlog_obj();
    os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    uint64_t v22 = "nw_http2_deserialize_options";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v22 = "nw_http2_deserialize_options";
          char v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http2_options))";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      if (!v19)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v22 = "nw_http2_deserialize_options";
          char v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http2_options)), backtrace limit exceeded";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v22 = "nw_http2_deserialize_options";
          char v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http2_options)), no backtrace";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      if (!v18) {
        goto LABEL_22;
      }
      *(_DWORD *)int buf = 136446466;
      uint64_t v22 = "nw_http2_deserialize_options";
      __int16 v23 = 2082;
      uint64_t v24 = backtrace_string;
      uint64_t v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http2_options)), dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }

  else
  {
    __nwlog_obj();
    BOOL v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    uint64_t v22 = "nw_http2_deserialize_options";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v22 = "nw_http2_deserialize_options";
          char v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
        }

uint64_t nw_http1_get_idle_timeout(void *a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    id v2 = nw_http_messaging_options_copy_http1_options(v1);
    idle_timeuuid_string_t out = nw_http1_get_idle_timeout();

    goto LABEL_5;
  }

  if (nw_protocol_options_is_http1(v1))
  {
    *(void *)int buf = 0LL;
    *(void *)&buf[8] = buf;
    int v17 = 0;
    *(void *)&buf[16] = 0x2020000000LL;
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    void v13[2] = __nw_http1_get_idle_timeout_block_invoke;
    v13[3] = &unk_189BC60A8;
    v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    idle_timeuuid_string_t out = *(unsigned int *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http1_get_idle_timeout";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_idle_timeout";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_options_is_http1(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_get_idle_timeout";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&_BYTE buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_http1(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_idle_timeout";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_http1(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_idle_timeout";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_options_is_http1(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1824BF9AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __nw_http1_get_idle_timeout_block_invoke(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *a2;
  return 1LL;
}

void nw_http1_set_connection_pool_width(void *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    id v4 = nw_http_messaging_options_copy_http1_options(v3);
    nw_http1_set_connection_pool_width(v4, a2);

    goto LABEL_5;
  }

  if (nw_protocol_options_is_http1(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_http1_set_connection_pool_width_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    int v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  int v17 = "nw_http1_set_connection_pool_width";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v17 = "nw_http1_set_connection_pool_width";
        BOOL v9 = "%{public}s called with null nw_protocol_options_is_http1(options)";
LABEL_19:
        _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      }
    }

    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)int buf = 136446466;
            int v17 = "nw_http1_set_connection_pool_width";
            __int16 v18 = 2082;
            char v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_options_is_http1(options), dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }

        if (!v11) {
          goto LABEL_20;
        }
        *(_DWORD *)int buf = 136446210;
        int v17 = "nw_http1_set_connection_pool_width";
        BOOL v9 = "%{public}s called with null nw_protocol_options_is_http1(options), no backtrace";
        goto LABEL_19;
      }

      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v17 = "nw_http1_set_connection_pool_width";
        BOOL v9 = "%{public}s called with null nw_protocol_options_is_http1(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }

uint64_t __nw_http1_set_connection_pool_width_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 32);
  return 1LL;
}

uint64_t nw_http1_get_connection_pool_width(void *a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    id v2 = nw_http_messaging_options_copy_http1_options(v1);
    uint64_t connection_pool_width = nw_http1_get_connection_pool_width();

    goto LABEL_5;
  }

  if (nw_protocol_options_is_http1(v1))
  {
    *(void *)int buf = 0LL;
    *(void *)&buf[8] = buf;
    int v17 = 0;
    *(void *)&buf[16] = 0x2020000000LL;
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    void v13[2] = __nw_http1_get_connection_pool_width_block_invoke;
    v13[3] = &unk_189BC60A8;
    v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    uint64_t connection_pool_width = *(unsigned int *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http1_get_connection_pool_width";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_connection_pool_width";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_options_is_http1(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http1_get_connection_pool_width";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&_BYTE buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_http1(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_connection_pool_width";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_http1(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http1_get_connection_pool_width";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_options_is_http1(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1824BFFE0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __nw_http1_get_connection_pool_width_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_DWORD *)(a2 + 4);
  return 1LL;
}

NWConcrete_nw_protocol_options *nw_http2_create_options()
{
  if (nw_protocol_copy_http2_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http2_definition_onceToken, &__block_literal_global_3_72546);
  }
  return nw_protocol_create_options((void *)nw_protocol_copy_http2_definition_http2_definition);
}

id nw_protocol_copy_http2_definition()
{
  if (nw_protocol_copy_http2_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http2_definition_onceToken, &__block_literal_global_3_72546);
  }
  return (id)nw_protocol_copy_http2_definition_http2_definition;
}

void nw_http2_set_capsule_handling_disabled(void *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    id v4 = nw_http_messaging_options_copy_http2_options(v3);
    nw_http2_set_capsule_handling_disabled(v4, a2);

    goto LABEL_5;
  }

  if (nw_protocol_options_is_http2(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_http2_set_capsule_handling_disabled_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  int v17 = "nw_http2_set_capsule_handling_disabled";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v17 = "nw_http2_set_capsule_handling_disabled";
        BOOL v9 = "%{public}s called with null nw_protocol_options_is_http2(options)";
LABEL_19:
        _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      }
    }

    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)int buf = 136446466;
            int v17 = "nw_http2_set_capsule_handling_disabled";
            __int16 v18 = 2082;
            char v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_options_is_http2(options), dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }

        if (!v11) {
          goto LABEL_20;
        }
        *(_DWORD *)int buf = 136446210;
        int v17 = "nw_http2_set_capsule_handling_disabled";
        BOOL v9 = "%{public}s called with null nw_protocol_options_is_http2(options), no backtrace";
        goto LABEL_19;
      }

      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v17 = "nw_http2_set_capsule_handling_disabled";
        BOOL v9 = "%{public}s called with null nw_protocol_options_is_http2(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }

id nw_http_messaging_options_copy_http2_options(void *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72514);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_messaging_definition_definition);

    if (is_equal)
    {
      *(void *)int buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      uint64_t v24 = __Block_byref_object_copy__4;
      uint64_t v25 = __Block_byref_object_dispose__5;
      id v26 = 0LL;
      v20[0] = MEMORY[0x1895F87A8];
      v20[1] = 3221225472LL;
      v20[2] = __nw_http_messaging_options_copy_http2_options_block_invoke;
      v20[3] = &unk_189BC60A8;
      os_log_type_t v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      id v5 = *(id *)(*(void *)&buf[8] + 40LL);
      _Block_object_dispose(buf, 8);

      goto LABEL_6;
    }

    __nwlog_obj();
    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_http2_options";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_http2_options";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s protocol options are not http_messaging", buf, 0xCu);
        }

void sub_1824C08C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

BOOL nw_protocol_options_is_http2(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    id v1 = a1;
    id v2 = v1[1];

    if (nw_protocol_copy_http2_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http2_definition_onceToken, &__block_literal_global_3_72546);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v2,  nw_protocol_copy_http2_definition_http2_definition);

    return is_equal_unsafe;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_protocol_options_is_http2";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_protocol_options_is_http2";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v16 = "nw_protocol_options_is_http2";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_protocol_options_is_http2";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_protocol_options_is_http2";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t __nw_http2_set_capsule_handling_disabled_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(a2 + 24) & 0xFE | *(_BYTE *)(a1 + 32);
  return 1LL;
}

uint64_t __nw_http_messaging_options_copy_http2_options_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

uint64_t nw_http2_get_capsule_handling_disabled(void *a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    id v2 = nw_http_messaging_options_copy_http2_options(v1);
    uint64_t capsule_handling_disabled = nw_http2_get_capsule_handling_disabled();

    goto LABEL_5;
  }

  if (nw_protocol_options_is_http2(v1))
  {
    *(void *)int buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v17 = 0;
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    void v13[2] = __nw_http2_get_capsule_handling_disabled_block_invoke;
    v13[3] = &unk_189BC60A8;
    v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    uint64_t capsule_handling_disabled = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http2_get_capsule_handling_disabled";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_get_capsule_handling_disabled";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_options_is_http2(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http2_get_capsule_handling_disabled";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&_BYTE buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_http2(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_get_capsule_handling_disabled";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_http2(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_get_capsule_handling_disabled";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_options_is_http2(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1824C0F44( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __nw_http2_get_capsule_handling_disabled_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_BYTE *)(a2 + 24) & 1;
  return 1LL;
}

void nw_http2_set_idle_timeout(void *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    id v4 = nw_http_messaging_options_copy_http2_options(v3);
    nw_http2_set_idle_timeout(v4, a2);

    goto LABEL_5;
  }

  if (nw_protocol_options_is_http2(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_http2_set_idle_timeout_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    int v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  char v17 = "nw_http2_set_idle_timeout";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v17 = "nw_http2_set_idle_timeout";
        BOOL v9 = "%{public}s called with null nw_protocol_options_is_http2(options)";
LABEL_19:
        _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      }
    }

    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)int buf = 136446466;
            char v17 = "nw_http2_set_idle_timeout";
            __int16 v18 = 2082;
            uint64_t v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_options_is_http2(options), dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }

        if (!v11) {
          goto LABEL_20;
        }
        *(_DWORD *)int buf = 136446210;
        char v17 = "nw_http2_set_idle_timeout";
        BOOL v9 = "%{public}s called with null nw_protocol_options_is_http2(options), no backtrace";
        goto LABEL_19;
      }

      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v17 = "nw_http2_set_idle_timeout";
        BOOL v9 = "%{public}s called with null nw_protocol_options_is_http2(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }

uint64_t __nw_http2_set_idle_timeout_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + _Block_object_dispose(va, 8) = *(_DWORD *)(a1 + 32);
  return 1LL;
}

uint64_t nw_http2_get_idle_timeout(void *a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    id v2 = nw_http_messaging_options_copy_http2_options(v1);
    idle_timeuuid_string_t out = nw_http2_get_idle_timeout();

    goto LABEL_5;
  }

  if (nw_protocol_options_is_http2(v1))
  {
    *(void *)int buf = 0LL;
    *(void *)&buf[8] = buf;
    int v17 = 0;
    *(void *)&buf[16] = 0x2020000000LL;
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    void v13[2] = __nw_http2_get_idle_timeout_block_invoke;
    v13[3] = &unk_189BC60A8;
    v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    idle_timeuuid_string_t out = *(unsigned int *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http2_get_idle_timeout";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_get_idle_timeout";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_options_is_http2(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http2_get_idle_timeout";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&_BYTE buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_http2(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_get_idle_timeout";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_http2(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_get_idle_timeout";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_options_is_http2(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1824C157C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __nw_http2_get_idle_timeout_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_DWORD *)(a2 + 8);
  return 1LL;
}

void nw_http2_set_stream_receive_window_size(void *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    id v4 = nw_http_messaging_options_copy_http2_options(v3);
    nw_http2_set_stream_receive_window_size(v4, a2);

    goto LABEL_5;
  }

  if (nw_protocol_options_is_http2(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_http2_set_stream_receive_window_size_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    int v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  int v17 = "nw_http2_set_stream_receive_window_size";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v17 = "nw_http2_set_stream_receive_window_size";
        BOOL v9 = "%{public}s called with null nw_protocol_options_is_http2(options)";
LABEL_19:
        _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      }
    }

    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)int buf = 136446466;
            int v17 = "nw_http2_set_stream_receive_window_size";
            __int16 v18 = 2082;
            uint64_t v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_options_is_http2(options), dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }

        if (!v11) {
          goto LABEL_20;
        }
        *(_DWORD *)int buf = 136446210;
        int v17 = "nw_http2_set_stream_receive_window_size";
        BOOL v9 = "%{public}s called with null nw_protocol_options_is_http2(options), no backtrace";
        goto LABEL_19;
      }

      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v17 = "nw_http2_set_stream_receive_window_size";
        BOOL v9 = "%{public}s called with null nw_protocol_options_is_http2(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }

uint64_t __nw_http2_set_stream_receive_window_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 32);
  return 1LL;
}

uint64_t nw_http2_get_stream_receive_window_size(void *a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    id v2 = nw_http_messaging_options_copy_http2_options(v1);
    stream_receive_window_size_t size = nw_http2_get_stream_receive_window_size();

    goto LABEL_5;
  }

  if (nw_protocol_options_is_http2(v1))
  {
    *(void *)int buf = 0LL;
    *(void *)&buf[8] = buf;
    int v17 = 0;
    *(void *)&buf[16] = 0x2020000000LL;
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    void v13[2] = __nw_http2_get_stream_receive_window_size_block_invoke;
    v13[3] = &unk_189BC60A8;
    v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    stream_receive_window_size_t size = *(unsigned int *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http2_get_stream_receive_window_size";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_get_stream_receive_window_size";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_options_is_http2(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http2_get_stream_receive_window_size";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&_BYTE buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_http2(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_get_stream_receive_window_size";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_http2(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_get_stream_receive_window_size";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_options_is_http2(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1824C1BB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __nw_http2_get_stream_receive_window_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_DWORD *)(a2 + 12);
  return 1LL;
}

void nw_http2_set_connection_receive_window_size(void *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    id v4 = nw_http_messaging_options_copy_http2_options(v3);
    nw_http2_set_connection_receive_window_size(v4, a2);

    goto LABEL_5;
  }

  if (nw_protocol_options_is_http2(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_http2_set_connection_receive_window_size_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    int v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  int v17 = "nw_http2_set_connection_receive_window_size";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v17 = "nw_http2_set_connection_receive_window_size";
        BOOL v9 = "%{public}s called with null nw_protocol_options_is_http2(options)";
LABEL_19:
        _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      }
    }

    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)int buf = 136446466;
            int v17 = "nw_http2_set_connection_receive_window_size";
            __int16 v18 = 2082;
            uint64_t v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_options_is_http2(options), dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }

        if (!v11) {
          goto LABEL_20;
        }
        *(_DWORD *)int buf = 136446210;
        int v17 = "nw_http2_set_connection_receive_window_size";
        BOOL v9 = "%{public}s called with null nw_protocol_options_is_http2(options), no backtrace";
        goto LABEL_19;
      }

      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v17 = "nw_http2_set_connection_receive_window_size";
        BOOL v9 = "%{public}s called with null nw_protocol_options_is_http2(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }

uint64_t __nw_http2_set_connection_receive_window_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 32);
  return 1LL;
}

uint64_t nw_http2_get_connection_receive_window_size(void *a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    id v2 = nw_http_messaging_options_copy_http2_options(v1);
    connection_receive_window_size_t size = nw_http2_get_connection_receive_window_size();

    goto LABEL_5;
  }

  if (nw_protocol_options_is_http2(v1))
  {
    *(void *)int buf = 0LL;
    *(void *)&buf[8] = buf;
    int v17 = 0;
    *(void *)&buf[16] = 0x2020000000LL;
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    void v13[2] = __nw_http2_get_connection_receive_window_size_block_invoke;
    v13[3] = &unk_189BC60A8;
    v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    connection_receive_window_size_t size = *(unsigned int *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http2_get_connection_receive_window_size";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_get_connection_receive_window_size";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_options_is_http2(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http2_get_connection_receive_window_size";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&_BYTE buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_http2(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_get_connection_receive_window_size";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_http2(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_get_connection_receive_window_size";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_options_is_http2(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1824C21E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __nw_http2_get_connection_receive_window_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_DWORD *)(a2 + 16);
  return 1LL;
}

void *nw_http2_copy_reset_stream_error_callback(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    id v2 = nw_http_messaging_options_copy_http2_options(v1);
    id v3 = (void *)nw_http2_copy_reset_stream_error_callback();

    goto LABEL_5;
  }

  if (nw_protocol_options_is_http2(v1))
  {
    *(void *)int buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    int v17 = __Block_byref_object_copy__72694;
    uint64_t v18 = __Block_byref_object_dispose__72695;
    id v19 = 0LL;
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    void v13[2] = __nw_http2_copy_reset_stream_error_callback_block_invoke;
    v13[3] = &unk_189BC60A8;
    v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    id v3 = _Block_copy(*(const void **)(*(void *)&buf[8] + 40LL));
    _Block_object_dispose(buf, 8);

    goto LABEL_5;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http2_copy_reset_stream_error_callback";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_copy_reset_stream_error_callback";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_options_is_http2(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http2_copy_reset_stream_error_callback";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&_BYTE buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_http2(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_copy_reset_stream_error_callback";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_http2(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_copy_reset_stream_error_callback";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_options_is_http2(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1824C2564( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void *__Block_byref_object_copy__72694(uint64_t a1, uint64_t a2)
{
  BOOL result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__72695(uint64_t a1)
{
}

uint64_t __nw_http2_copy_reset_stream_error_callback_block_invoke(uint64_t a1, const void **a2)
{
  id v3 = _Block_copy(*a2);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return 1LL;
}

void nw_http2_set_reset_stream_error_callback(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    id v5 = nw_http_messaging_options_copy_http2_options(v3);
    nw_http2_set_reset_stream_error_callback(v5, v4);

    goto LABEL_5;
  }

  if (nw_protocol_options_is_http2(v3))
  {
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    void v13[2] = __nw_http2_set_reset_stream_error_callback_block_invoke;
    v13[3] = &unk_189BC6110;
    id v14 = v4;
    nw_protocol_options_access_handle(v3, v13);

    goto LABEL_5;
  }

  __nwlog_obj();
  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  uint64_t v18 = "nw_http2_set_reset_stream_error_callback";
  BOOL v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v7, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v18 = "nw_http2_set_reset_stream_error_callback";
        os_log_type_t v10 = "%{public}s called with null nw_protocol_options_is_http2(options)";
LABEL_19:
        _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
      }
    }

    else
    {
      if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v9 = type;
        BOOL v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)int buf = 136446466;
            uint64_t v18 = "nw_http2_set_reset_stream_error_callback";
            __int16 v19 = 2082;
            uint64_t v20 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null nw_protocol_options_is_http2(options), dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }

        if (!v12) {
          goto LABEL_20;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v18 = "nw_http2_set_reset_stream_error_callback";
        os_log_type_t v10 = "%{public}s called with null nw_protocol_options_is_http2(options), no backtrace";
        goto LABEL_19;
      }

      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v18 = "nw_http2_set_reset_stream_error_callback";
        os_log_type_t v10 = "%{public}s called with null nw_protocol_options_is_http2(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }

uint64_t __nw_http2_set_reset_stream_error_callback_block_invoke(uint64_t a1, void **a2)
{
  id v3 = _Block_copy(*(const void **)(a1 + 32));
  id v4 = *a2;
  *a2 = v3;

  return 1LL;
}

void nw_http2_set_local_max_webtransport_sessions(void *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    id v4 = nw_http_messaging_options_copy_http2_options(v3);
    nw_http2_set_local_max_webtransport_sessions(v4, a2);

    goto LABEL_5;
  }

  if (nw_protocol_options_is_http2(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_http2_set_local_max_webtransport_sessions_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    int v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  int v17 = "nw_http2_set_local_max_webtransport_sessions";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v17 = "nw_http2_set_local_max_webtransport_sessions";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http2(options)";
LABEL_19:
        _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      }
    }

    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)int buf = 136446466;
            int v17 = "nw_http2_set_local_max_webtransport_sessions";
            __int16 v18 = 2082;
            __int16 v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_options_is_http2(options), dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }

        if (!v11) {
          goto LABEL_20;
        }
        *(_DWORD *)int buf = 136446210;
        int v17 = "nw_http2_set_local_max_webtransport_sessions";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http2(options), no backtrace";
        goto LABEL_19;
      }

      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v17 = "nw_http2_set_local_max_webtransport_sessions";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http2(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }

uint64_t __nw_http2_set_local_max_webtransport_sessions_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 20) = *(_DWORD *)(a1 + 32);
  return 1LL;
}

uint64_t nw_http2_get_local_max_webtransport_sessions(void *a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    id v2 = nw_http_messaging_options_copy_http2_options(v1);
    uint64_t local_max_webtransport_sessions = nw_http2_get_local_max_webtransport_sessions();

    goto LABEL_5;
  }

  if (nw_protocol_options_is_http2(v1))
  {
    *(void *)int buf = 0LL;
    *(void *)&buf[8] = buf;
    int v17 = 0;
    *(void *)&buf[16] = 0x2020000000LL;
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    void v13[2] = __nw_http2_get_local_max_webtransport_sessions_block_invoke;
    v13[3] = &unk_189BC60A8;
    void v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    uint64_t local_max_webtransport_sessions = *(unsigned int *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http2_get_local_max_webtransport_sessions";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_get_local_max_webtransport_sessions";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_options_is_http2(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http2_get_local_max_webtransport_sessions";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&_BYTE buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_http2(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_get_local_max_webtransport_sessions";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_http2(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http2_get_local_max_webtransport_sessions";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_options_is_http2(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1824C2F04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __nw_http2_get_local_max_webtransport_sessions_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_DWORD *)(a2 + 20);
  return 1LL;
}

NWConcrete_nw_protocol_options *nw_http3_create_options()
{
  if (nw_protocol_copy_http3_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http3_definition_onceToken, &__block_literal_global_10_72547);
  }
  return nw_protocol_create_options((void *)nw_protocol_copy_http3_definition_http3_definition);
}

id nw_protocol_copy_http3_definition()
{
  if (nw_protocol_copy_http3_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http3_definition_onceToken, &__block_literal_global_10_72547);
  }
  return (id)nw_protocol_copy_http3_definition_http3_definition;
}

void nw_http3_set_idle_timeout(void *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    id v4 = nw_http_messaging_options_copy_http3_options(v3);
    nw_http3_set_idle_timeout(v4, a2);

    goto LABEL_5;
  }

  if (nw_protocol_options_is_http3(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_http3_set_idle_timeout_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    int v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  int v17 = "nw_http3_set_idle_timeout";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v17 = "nw_http3_set_idle_timeout";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http3(options)";
LABEL_19:
        _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      }
    }

    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)int buf = 136446466;
            int v17 = "nw_http3_set_idle_timeout";
            __int16 v18 = 2082;
            __int16 v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }

        if (!v11) {
          goto LABEL_20;
        }
        *(_DWORD *)int buf = 136446210;
        int v17 = "nw_http3_set_idle_timeout";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace";
        goto LABEL_19;
      }

      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v17 = "nw_http3_set_idle_timeout";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }

id nw_http_messaging_options_copy_http3_options(void *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_messaging_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72514);
    }
    BOOL is_equal = nw_protocol_definition_is_equal( v3,  (nw_protocol_definition_t)nw_protocol_copy_http_messaging_definition_definition);

    if (is_equal)
    {
      *(void *)int buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      uint64_t v24 = __Block_byref_object_copy__4;
      uint64_t v25 = __Block_byref_object_dispose__5;
      id v26 = 0LL;
      v20[0] = MEMORY[0x1895F87A8];
      v20[1] = 3221225472LL;
      v20[2] = __nw_http_messaging_options_copy_http3_options_block_invoke;
      v20[3] = &unk_189BC60A8;
      os_log_type_t v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      id v5 = *(id *)(*(void *)&buf[8] + 40LL);
      _Block_object_dispose(buf, 8);

      goto LABEL_6;
    }

    __nwlog_obj();
    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_http3_options";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_http_messaging_options_copy_http3_options";
          _os_log_impl(&dword_181A5C000, v9, v12, "%{public}s protocol options are not http_messaging", buf, 0xCu);
        }

void sub_1824C37EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

BOOL nw_protocol_options_is_http3(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    id v1 = a1;
    id v2 = v1[1];

    if (nw_protocol_copy_http3_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http3_definition_onceToken, &__block_literal_global_10_72547);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v2,  nw_protocol_copy_http3_definition_http3_definition);

    return is_equal_unsafe;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_protocol_options_is_http3";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_protocol_options_is_http3";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          os_log_type_t v16 = "nw_protocol_options_is_http3";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_protocol_options_is_http3";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_protocol_options_is_http3";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

uint64_t __nw_http3_set_idle_timeout_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 32);
  return 1LL;
}

uint64_t __nw_http_messaging_options_copy_http3_options_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

uint64_t nw_http3_get_idle_timeout(void *a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    id v2 = nw_http_messaging_options_copy_http3_options(v1);
    idle_timeuuid_string_t out = nw_http3_get_idle_timeout();

    goto LABEL_5;
  }

  if (nw_protocol_options_is_http3(v1))
  {
    *(void *)int buf = 0LL;
    *(void *)&buf[8] = buf;
    int v17 = 0;
    *(void *)&buf[16] = 0x2020000000LL;
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    void v13[2] = __nw_http3_get_idle_timeout_block_invoke;
    v13[3] = &unk_189BC60A8;
    void v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    idle_timeuuid_string_t out = *(unsigned int *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http3_get_idle_timeout";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_get_idle_timeout";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_options_is_http3(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http3_get_idle_timeout";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&_BYTE buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_get_idle_timeout";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_get_idle_timeout";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1824C3E54( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __nw_http3_get_idle_timeout_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_DWORD *)(a2 + 64);
  return 1LL;
}

void nw_http3_set_keepalive_mode(void *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    id v4 = nw_http_messaging_options_copy_http3_options(v3);
    nw_http3_set_keepalive_mode(v4, a2);

    goto LABEL_5;
  }

  if (nw_protocol_options_is_http3(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_http3_set_keepalive_mode_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    int v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  int v17 = "nw_http3_set_keepalive_mode";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v17 = "nw_http3_set_keepalive_mode";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http3(options)";
LABEL_19:
        _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      }
    }

    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)int buf = 136446466;
            int v17 = "nw_http3_set_keepalive_mode";
            __int16 v18 = 2082;
            uint64_t v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }

        if (!v11) {
          goto LABEL_20;
        }
        *(_DWORD *)int buf = 136446210;
        int v17 = "nw_http3_set_keepalive_mode";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace";
        goto LABEL_19;
      }

      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v17 = "nw_http3_set_keepalive_mode";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }

uint64_t __nw_http3_set_keepalive_mode_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 32);
  return 1LL;
}

uint64_t nw_http3_get_keepalive_mode(void *a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    id v2 = nw_http_messaging_options_copy_http3_options(v1);
    uint64_t keepalive_mode = nw_http3_get_keepalive_mode();

    goto LABEL_5;
  }

  if (nw_protocol_options_is_http3(v1))
  {
    *(void *)int buf = 0LL;
    *(void *)&buf[8] = buf;
    int v17 = 0;
    *(void *)&buf[16] = 0x2020000000LL;
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    void v13[2] = __nw_http3_get_keepalive_mode_block_invoke;
    v13[3] = &unk_189BC60A8;
    void v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    uint64_t keepalive_mode = *(unsigned int *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http3_get_keepalive_mode";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_get_keepalive_mode";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_options_is_http3(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http3_get_keepalive_mode";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&_BYTE buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_get_keepalive_mode";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_get_keepalive_mode";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1824C4488( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __nw_http3_get_keepalive_mode_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_DWORD *)(a2 + 72);
  return 1LL;
}

void nw_http3_set_0rtt_enabled(void *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    id v4 = nw_http_messaging_options_copy_http3_options(v3);
    nw_http3_set_0rtt_enabled(v4, a2);

    goto LABEL_5;
  }

  if (nw_protocol_options_is_http3(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_http3_set_0rtt_enabled_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    char v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  int v17 = "nw_http3_set_0rtt_enabled";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v17 = "nw_http3_set_0rtt_enabled";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http3(options)";
LABEL_19:
        _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      }
    }

    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)int buf = 136446466;
            int v17 = "nw_http3_set_0rtt_enabled";
            __int16 v18 = 2082;
            uint64_t v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }

        if (!v11) {
          goto LABEL_20;
        }
        *(_DWORD *)int buf = 136446210;
        int v17 = "nw_http3_set_0rtt_enabled";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace";
        goto LABEL_19;
      }

      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v17 = "nw_http3_set_0rtt_enabled";
        os_log_type_t v9 = "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }

uint64_t __nw_http3_set_0rtt_enabled_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 77) = *(_BYTE *)(a2 + 77) & 0xFE | *(_BYTE *)(a1 + 32);
  return 1LL;
}

uint64_t nw_http3_get_0rtt_enabled(void *a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    id v2 = nw_http_messaging_options_copy_http3_options(v1);
    uint64_t _0rtt_enabled = nw_http3_get_0rtt_enabled();

    goto LABEL_5;
  }

  if (nw_protocol_options_is_http3(v1))
  {
    *(void *)int buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v17 = 0;
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    void v13[2] = __nw_http3_get_0rtt_enabled_block_invoke;
    v13[3] = &unk_189BC60A8;
    void v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    uint64_t _0rtt_enabled = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http3_get_0rtt_enabled";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_get_0rtt_enabled";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_options_is_http3(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http3_get_0rtt_enabled";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&_BYTE buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_get_0rtt_enabled";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_get_0rtt_enabled";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1824C4AD0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __nw_http3_get_0rtt_enabled_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_BYTE *)(a2 + 77) & 1;
  return 1LL;
}

void nw_http3_set_resumable_session_handler(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  id v7 = a1;
  id v8 = a3;
  id v9 = a4;
  if (nw_protocol_options_is_http_messaging(v7))
  {
    id v10 = nw_http_messaging_options_copy_http3_options(v7);
    nw_http3_set_resumable_session_handler(v10, a2, v8, v9);

    goto LABEL_5;
  }

  if (nw_protocol_options_is_http3(v7))
  {
    v18[0] = MEMORY[0x1895F87A8];
    v18[1] = 3221225472LL;
    v18[2] = __nw_http3_set_resumable_session_handler_block_invoke;
    v18[3] = &unk_189BC6158;
    id v20 = v9;
    id v19 = v8;
    char v21 = a2;
    nw_protocol_options_access_handle(v7, v18);

    goto LABEL_5;
  }

  __nwlog_obj();
  BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  uint64_t v25 = "nw_http3_set_resumable_session_handler";
  os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (__nwlog_fault(v12, &type, &v22))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v25 = "nw_http3_set_resumable_session_handler";
        BOOL v15 = "%{public}s called with null nw_protocol_options_is_http3(options)";
LABEL_19:
        _os_log_impl(&dword_181A5C000, v13, v14, v15, buf, 0xCu);
      }
    }

    else
    {
      if (v22)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        BOOL v17 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)int buf = 136446466;
            uint64_t v25 = "nw_http3_set_resumable_session_handler";
            __int16 v26 = 2082;
            uint64_t v27 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }

        if (!v17) {
          goto LABEL_20;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v25 = "nw_http3_set_resumable_session_handler";
        BOOL v15 = "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace";
        goto LABEL_19;
      }

      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v25 = "nw_http3_set_resumable_session_handler";
        BOOL v15 = "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }

uint64_t __nw_http3_set_resumable_session_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = _Block_copy(*(const void **)(a1 + 40));
  id v5 = *(void **)(a2 + 48);
  *(void *)(a2 + 4_Block_object_dispose(va, 8) = v4;

  objc_storeStrong((id *)(a2 + 56), *(id *)(a1 + 32));
  *(_BYTE *)(a2 + 76) = *(_BYTE *)(a1 + 48);
  return 1LL;
}

void *nw_http3_copy_resumable_session_handler(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    id v2 = nw_http_messaging_options_copy_http3_options(v1);
    id v3 = (void *)nw_http3_copy_resumable_session_handler();

    goto LABEL_5;
  }

  if (nw_protocol_options_is_http3(v1))
  {
    *(void *)int buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    BOOL v17 = __Block_byref_object_copy__72694;
    uint64_t v18 = __Block_byref_object_dispose__72695;
    id v19 = 0LL;
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    void v13[2] = __nw_http3_copy_resumable_session_handler_block_invoke;
    v13[3] = &unk_189BC60A8;
    void v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    id v3 = _Block_copy(*(const void **)(*(void *)&buf[8] + 40LL));
    _Block_object_dispose(buf, 8);

    goto LABEL_5;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http3_copy_resumable_session_handler";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_copy_resumable_session_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_options_is_http3(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http3_copy_resumable_session_handler";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&_BYTE buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_copy_resumable_session_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_copy_resumable_session_handler";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1824C51BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __nw_http3_copy_resumable_session_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  id v3 = _Block_copy(*(const void **)(a2 + 48));
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return 1LL;
}

id nw_http3_copy_resumable_session_handler_queue(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    id v2 = nw_http_messaging_options_copy_http3_options(v1);
    id v3 = (id)nw_http3_copy_resumable_session_handler_queue();

    goto LABEL_5;
  }

  if (nw_protocol_options_is_http3(v1))
  {
    *(void *)int buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    BOOL v17 = __Block_byref_object_copy__4;
    uint64_t v18 = __Block_byref_object_dispose__5;
    id v19 = 0LL;
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    void v13[2] = __nw_http3_copy_resumable_session_handler_queue_block_invoke;
    v13[3] = &unk_189BC60A8;
    void v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    id v3 = *(id *)(*(void *)&buf[8] + 40LL);
    _Block_object_dispose(buf, 8);

    goto LABEL_5;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http3_copy_resumable_session_handler_queue";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_copy_resumable_session_handler_queue";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_options_is_http3(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http3_copy_resumable_session_handler_queue";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&_BYTE buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_copy_resumable_session_handler_queue";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_copy_resumable_session_handler_queue";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1824C5560( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __nw_http3_copy_resumable_session_handler_queue_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

uint64_t nw_http3_get_sessions_to_request(void *a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    id v2 = nw_http_messaging_options_copy_http3_options(v1);
    uint64_t sessions_to_request = nw_http3_get_sessions_to_request();

    goto LABEL_5;
  }

  if (nw_protocol_options_is_http3(v1))
  {
    *(void *)int buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    char v17 = 0;
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    void v13[2] = __nw_http3_get_sessions_to_request_block_invoke;
    v13[3] = &unk_189BC60A8;
    void v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    uint64_t sessions_to_request = *(unsigned __int8 *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http3_get_sessions_to_request";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_get_sessions_to_request";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_options_is_http3(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http3_get_sessions_to_request";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&_BYTE buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_get_sessions_to_request";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_get_sessions_to_request";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1824C58CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __nw_http3_get_sessions_to_request_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_BYTE *)(a2 + 76);
  return 1LL;
}

void nw_http3_set_resumable_session_agent(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    id v4 = nw_http_messaging_options_copy_http3_options(v3);
    nw_http3_set_resumable_session_agent(v4, a2);

    goto LABEL_5;
  }

  if (nw_protocol_options_is_http3(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_http3_set_resumable_session_agent_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_http3_set_resumable_session_agent";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_http3_set_resumable_session_agent";
        id v9 = "%{public}s called with null nw_protocol_options_is_http3(options)";
LABEL_19:
        _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      }
    }

    else
    {
      if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v16 = "nw_http3_set_resumable_session_agent";
            __int16 v17 = 2082;
            uint64_t v18 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }

        if (!v11) {
          goto LABEL_20;
        }
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_http3_set_resumable_session_agent";
        id v9 = "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace";
        goto LABEL_19;
      }

      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_http3_set_resumable_session_agent";
        id v9 = "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }

uint64_t __nw_http3_set_resumable_session_agent_block_invoke(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)*(void *)(a1 + 32);
  return 1LL;
}

void nw_http3_get_resumable_session_agent(void *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    id v4 = nw_http_messaging_options_copy_http3_options(v3);
    nw_http3_get_resumable_session_agent(v4, a2);

    goto LABEL_5;
  }

  if (nw_protocol_options_is_http3(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_http3_get_resumable_session_agent_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    void v12[4] = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  os_log_type_t v16 = "nw_http3_get_resumable_session_agent";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_http3_get_resumable_session_agent";
        id v9 = "%{public}s called with null nw_protocol_options_is_http3(options)";
LABEL_19:
        _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      }
    }

    else
    {
      if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)int buf = 136446466;
            os_log_type_t v16 = "nw_http3_get_resumable_session_agent";
            __int16 v17 = 2082;
            uint64_t v18 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }

        if (!v11) {
          goto LABEL_20;
        }
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_http3_get_resumable_session_agent";
        id v9 = "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace";
        goto LABEL_19;
      }

      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        os_log_type_t v16 = "nw_http3_get_resumable_session_agent";
        id v9 = "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }

uint64_t __nw_http3_get_resumable_session_agent_block_invoke(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)*(void *)(a1 + 32) = *a2;
  return 1LL;
}

void nw_http3_set_initial_remote_settings(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  id v7 = a1;
  if (nw_protocol_options_is_http_messaging(v7))
  {
    id v8 = nw_http_messaging_options_copy_http3_options(v7);
    nw_http3_set_initial_remote_settings(v8, a2, a3, a4);

    goto LABEL_5;
  }

  if (nw_protocol_options_is_http3(v7))
  {
    v16[0] = MEMORY[0x1895F87A8];
    v16[1] = 3221225472LL;
    v16[2] = __nw_http3_set_initial_remote_settings_block_invoke;
    v16[3] = &__block_descriptor_56_e9_B16__0_v8l;
    void v16[4] = a2;
    v16[5] = a3;
    v16[6] = a4;
    nw_protocol_options_access_handle(v7, v16);
    goto LABEL_5;
  }

  __nwlog_obj();
  id v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  uint64_t v20 = "nw_http3_set_initial_remote_settings";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v18 = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v10, &v18, &v17))
  {
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = v18;
      if (os_log_type_enabled(v11, v18))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v20 = "nw_http3_set_initial_remote_settings";
        char v13 = "%{public}s called with null nw_protocol_options_is_http3(options)";
LABEL_19:
        _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
      }
    }

    else
    {
      if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = v18;
        BOOL v15 = os_log_type_enabled(v11, v18);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)int buf = 136446466;
            uint64_t v20 = "nw_http3_set_initial_remote_settings";
            __int16 v21 = 2082;
            char v22 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }

        if (!v15) {
          goto LABEL_20;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v20 = "nw_http3_set_initial_remote_settings";
        char v13 = "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace";
        goto LABEL_19;
      }

      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = v18;
      if (os_log_type_enabled(v11, v18))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v20 = "nw_http3_set_initial_remote_settings";
        char v13 = "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }

uint64_t __nw_http3_set_initial_remote_settings_block_invoke(void *a1, uint64_t a2)
{
  *(void *)(a2 + 16) = a1[4];
  *(void *)(a2 + 24) = a1[5];
  *(void *)(a2 + 32) = a1[6];
  *(_BYTE *)(a2 + 77) |= 2u;
  return 1LL;
}

uint64_t nw_http3_get_initial_remote_settings(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  id v7 = a1;
  if (nw_protocol_options_is_http_messaging(v7))
  {
    id v8 = nw_http_messaging_options_copy_http3_options(v7);
    uint64_t initial_remote_settings = nw_http3_get_initial_remote_settings(v8, a2, a3, a4);

    goto LABEL_8;
  }

  if (!nw_protocol_options_is_http3(v7))
  {
    __nwlog_obj();
    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    unint64_t v29 = "nw_http3_get_initial_remote_settings";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v27 = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (v27 != OS_LOG_TYPE_FAULT)
    {
      if (!v26)
      {
        __nwlog_obj();
        char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = v27;
        if (os_log_type_enabled(v13, v27))
        {
          *(_DWORD *)int buf = 136446210;
          unint64_t v29 = "nw_http3_get_initial_remote_settings";
          BOOL v15 = "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded";
          goto LABEL_59;
        }

        goto LABEL_60;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = v27;
      BOOL v20 = os_log_type_enabled(v13, v27);
      if (!backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)int buf = 136446210;
          unint64_t v29 = "nw_http3_get_initial_remote_settings";
          BOOL v15 = "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace";
          goto LABEL_59;
        }

        goto LABEL_60;
      }

      if (!v20) {
        goto LABEL_42;
      }
      *(_DWORD *)int buf = 136446466;
      unint64_t v29 = "nw_http3_get_initial_remote_settings";
      __int16 v30 = 2082;
      __int16 v31 = backtrace_string;
      __int16 v21 = "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s";
      goto LABEL_41;
    }

    __nwlog_obj();
    char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v14 = v27;
    if (!os_log_type_enabled(v13, v27)) {
      goto LABEL_60;
    }
    *(_DWORD *)int buf = 136446210;
    unint64_t v29 = "nw_http3_get_initial_remote_settings";
    BOOL v15 = "%{public}s called with null nw_protocol_options_is_http3(options)";
LABEL_59:
    _os_log_impl(&dword_181A5C000, v13, v14, v15, buf, 0xCu);
    goto LABEL_60;
  }

  if (!a2)
  {
    __nwlog_obj();
    os_log_type_t v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    unint64_t v29 = "nw_http3_get_initial_remote_settings";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v27 = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (v27 != OS_LOG_TYPE_FAULT)
    {
      if (!v26)
      {
        __nwlog_obj();
        char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = v27;
        if (os_log_type_enabled(v13, v27))
        {
          *(_DWORD *)int buf = 136446210;
          unint64_t v29 = "nw_http3_get_initial_remote_settings";
          BOOL v15 = "%{public}s called with null max_field_section_size, backtrace limit exceeded";
          goto LABEL_59;
        }

        goto LABEL_60;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = v27;
      BOOL v22 = os_log_type_enabled(v13, v27);
      if (!backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)int buf = 136446210;
          unint64_t v29 = "nw_http3_get_initial_remote_settings";
          BOOL v15 = "%{public}s called with null max_field_section_size, no backtrace";
          goto LABEL_59;
        }

        goto LABEL_60;
      }

      if (!v22) {
        goto LABEL_42;
      }
      *(_DWORD *)int buf = 136446466;
      unint64_t v29 = "nw_http3_get_initial_remote_settings";
      __int16 v30 = 2082;
      __int16 v31 = backtrace_string;
      __int16 v21 = "%{public}s called with null max_field_section_size, dumping backtrace:%{public}s";
      goto LABEL_41;
    }

    __nwlog_obj();
    char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_t v14 = v27;
    if (!os_log_type_enabled(v13, v27)) {
      goto LABEL_60;
    }
    *(_DWORD *)int buf = 136446210;
    unint64_t v29 = "nw_http3_get_initial_remote_settings";
    BOOL v15 = "%{public}s called with null max_field_section_size";
    goto LABEL_59;
  }

  if (a3)
  {
    if (a4)
    {
      v25[0] = MEMORY[0x1895F87A8];
      v25[1] = 3221225472LL;
      v25[2] = __nw_http3_get_initial_remote_settings_block_invoke;
      v25[3] = &__block_descriptor_56_e9_B16__0_v8l;
      v25[4] = a2;
      v25[5] = a3;
      v25[6] = a4;
      uint64_t initial_remote_settings = nw_protocol_options_access_handle(v7, v25);
      goto LABEL_8;
    }

    __nwlog_obj();
    os_log_type_t v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    unint64_t v29 = "nw_http3_get_initial_remote_settings";
    os_log_type_t v12 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v27 = OS_LOG_TYPE_ERROR;
    char v26 = 0;
    if (v27 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = v27;
      if (os_log_type_enabled(v13, v27))
      {
        *(_DWORD *)int buf = 136446210;
        unint64_t v29 = "nw_http3_get_initial_remote_settings";
        BOOL v15 = "%{public}s called with null blocked_streams";
        goto LABEL_59;
      }

uint64_t __nw_http3_get_initial_remote_settings_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a2 + 77);
  if ((v2 & 2) != 0)
  {
    id v3 = *(void **)(a1 + 40);
    **(void **)(a1 + 32) = *(void *)(a2 + 16);
    *id v3 = *(void *)(a2 + 24);
    **(void **)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 32);
  }

  return (v2 >> 1) & 1;
}

void *nw_http3_copy_application_error_callback(void *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    id v2 = nw_http_messaging_options_copy_http3_options(v1);
    id v3 = (void *)nw_http3_copy_application_error_callback();

    goto LABEL_5;
  }

  if (nw_protocol_options_is_http3(v1))
  {
    *(void *)int buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    char v17 = __Block_byref_object_copy__72694;
    os_log_type_t v18 = __Block_byref_object_dispose__72695;
    id v19 = 0LL;
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    void v13[2] = __nw_http3_copy_application_error_callback_block_invoke;
    v13[3] = &unk_189BC60A8;
    void v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    id v3 = _Block_copy(*(const void **)(*(void *)&buf[8] + 40LL));
    _Block_object_dispose(buf, 8);

    goto LABEL_5;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http3_copy_application_error_callback";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_copy_application_error_callback";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_options_is_http3(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http3_copy_application_error_callback";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&_BYTE buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_copy_application_error_callback";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_copy_application_error_callback";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1824C6D38( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __nw_http3_copy_application_error_callback_block_invoke(uint64_t a1, uint64_t a2)
{
  id v3 = _Block_copy(*(const void **)(a2 + 40));
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return 1LL;
}

void __nw_get_http3_override_block_invoke()
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  int v0 = getenv("CFN_USE_HTTP3");
  if (v0)
  {
    nw_get_http3_override_int value = strtol(v0, 0LL, 10);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v1 = (os_log_s *)(id)gLogObj;
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      int v2 = 136446466;
      id v3 = "nw_get_http3_override_block_invoke";
      __int16 v4 = 1024;
      int v5 = nw_get_http3_override_value;
      _os_log_impl( &dword_181A5C000,  v1,  OS_LOG_TYPE_INFO,  "%{public}s HTTP/3 override %d via env",  (uint8_t *)&v2,  0x12u);
    }
  }

void nw_http3_set_application_error_callback(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    id v5 = nw_http_messaging_options_copy_http3_options(v3);
    nw_http3_set_application_error_callback(v5, v4);

    goto LABEL_9;
  }

  if (!v3)
  {
    __nwlog_obj();
    id v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    uint64_t v28 = "nw_http3_set_application_error_callback";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v25 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v28 = "nw_http3_set_application_error_callback";
        _os_log_impl(&dword_181A5C000, v11, v12, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)int buf = 136446466;
          uint64_t v28 = "nw_http3_set_application_error_callback";
          __int16 v29 = 2082;
          __int16 v30 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v11,  v16,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
LABEL_43:
        if (!v10) {
          goto LABEL_9;
        }
LABEL_44:
        free(v10);
        goto LABEL_9;
      }

      if (v17)
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v28 = "nw_http3_set_application_error_callback";
        _os_log_impl(&dword_181A5C000, v11, v16, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v28 = "nw_http3_set_application_error_callback";
        _os_log_impl( &dword_181A5C000,  v11,  v21,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }

uint64_t __nw_http3_set_application_error_callback_block_invoke(uint64_t a1, uint64_t a2)
{
  id v3 = _Block_copy(*(const void **)(a1 + 32));
  id v4 = *(void **)(a2 + 40);
  *(void *)(a2 + 40) = v3;

  return 1LL;
}

void nw_http3_set_stream_mode(void *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    id v4 = nw_http_messaging_options_copy_http3_options(v3);
    nw_http3_set_stream_mode(v4, a2);

    goto LABEL_5;
  }

  if (nw_protocol_options_is_http3(v3))
  {
    v12[0] = MEMORY[0x1895F87A8];
    v12[1] = 3221225472LL;
    v12[2] = __nw_http3_set_stream_mode_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    int v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  BOOL v17 = "nw_http3_set_stream_mode";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v17 = "nw_http3_set_stream_mode";
        id v9 = "%{public}s called with null nw_protocol_options_is_http3(options)";
LABEL_19:
        _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      }
    }

    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)int buf = 136446466;
            BOOL v17 = "nw_http3_set_stream_mode";
            __int16 v18 = 2082;
            os_log_type_t v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }

        if (!v11) {
          goto LABEL_20;
        }
        *(_DWORD *)int buf = 136446210;
        BOOL v17 = "nw_http3_set_stream_mode";
        id v9 = "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace";
        goto LABEL_19;
      }

      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v17 = "nw_http3_set_stream_mode";
        id v9 = "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }

uint64_t __nw_http3_set_stream_mode_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 6_Block_object_dispose(va, 8) = *(_DWORD *)(a1 + 32);
  return 1LL;
}

uint64_t nw_http3_get_stream_mode(void *a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    id v2 = nw_http_messaging_options_copy_http3_options(v1);
    uint64_t stream_mode = nw_http3_get_stream_mode();

    goto LABEL_5;
  }

  if (nw_protocol_options_is_http3(v1))
  {
    *(void *)int buf = 0LL;
    *(void *)&buf[8] = buf;
    int v17 = 0;
    *(void *)&buf[16] = 0x2020000000LL;
    v13[0] = MEMORY[0x1895F87A8];
    v13[1] = 3221225472LL;
    void v13[2] = __nw_http3_get_stream_mode_block_invoke;
    v13[3] = &unk_189BC60A8;
    void v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    uint64_t stream_mode = *(unsigned int *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_http3_get_stream_mode";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_get_stream_mode";
        _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null nw_protocol_options_is_http3(options)",  buf,  0xCu);
      }
    }

    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_http3_get_stream_mode";
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&_BYTE buf[14] = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_get_stream_mode";
        _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace",  buf,  0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_http3_get_stream_mode";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }

void sub_1824C7A48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t __nw_http3_get_stream_mode_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_DWORD *)(a2 + 68);
  return 1LL;
}

id nw_protocol_copy_http_definition()
{
  if (nw_protocol_copy_http_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72879);
  }
  return (id)nw_protocol_copy_http_definition_http_definition;
}

void __nw_protocol_copy_http_definition_block_invoke()
{
  named = nw_protocol_definition_create_named(1, "http");
  id v1 = (void *)nw_protocol_copy_http_definition_http_definition;
  nw_protocol_copy_http_definition_http_definition = (uint64_t)named;

  nw_protocol_definition_set_metadata_allocator( (void *)nw_protocol_copy_http_definition_http_definition,  (uint64_t)nw_http_allocate_metadata,  (uint64_t)nw_http_deallocate_metadata);
  nw_protocol_definition_set_metadata_comparator( (void *)nw_protocol_copy_http_definition_http_definition,  (uint64_t)nw_http_compare_metadata);
}

BOOL nw_http_allocate_metadata(void *a1)
{
  id v1 = a1;
  id v2 = calloc(1uLL, 0x38uLL);
  if (v2) {
    goto LABEL_2;
  }
  __nwlog_obj();
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:

    return (BOOL)v2;
  }

  __break(1u);
  return result;
}

void nw_http_deallocate_metadata(uint64_t a1, void *a2)
{
  id v3 = (void *)a2[2];
  a2[2] = 0LL;

  id v4 = (void *)a2[3];
  a2[3] = 0LL;

  id v5 = (void *)a2[4];
  a2[4] = 0LL;

  uint64_t v6 = (void *)a2[5];
  a2[5] = 0LL;

  free(a2);
}

uint64_t nw_http_compare_metadata(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  if (!a2)
  {
    __nwlog_obj();
    BOOL v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    uint64_t v36 = "nw_http_compare_metadata";
    id v24 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v33 = 0;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v36 = "nw_http_compare_metadata";
        os_log_type_t v27 = "%{public}s called with null handle1";
LABEL_48:
        _os_log_impl(&dword_181A5C000, v25, v26, v27, buf, 0xCu);
      }

id nw_protocol_copy_http_cookie_definition()
{
  if (nw_protocol_copy_http_cookie_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_cookie_definition_onceToken, &__block_literal_global_13_72893);
  }
  return (id)nw_protocol_copy_http_cookie_definition_http_cookie_definition;
}

BOOL __nw_protocol_copy_http_cookie_definition_block_invoke()
{
  if (nw_protocol_http_cookie_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_cookie_identifier::onceToken, &__block_literal_global_15656);
  }
  int v0 = nw_protocol_definition_create_with_identifier((__int128 *)&nw_protocol_http_cookie_identifier::http_cookie_protocol_identifier);
  id v1 = (void *)nw_protocol_copy_http_cookie_definition_http_cookie_definition;
  nw_protocol_copy_http_cookie_definition_http_cookie_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator( (void *)nw_protocol_copy_http_cookie_definition_http_cookie_definition,  (uint64_t)nw_http_cookie_allocate_options,  (uint64_t)nw_http_cookie_copy_options,  (uint64_t)nw_http_cookie_deallocate_options);
  nw_protocol_definition_set_options_comparator( (void *)nw_protocol_copy_http_cookie_definition_http_cookie_definition,  (uint64_t)nw_http_cookie_options_compare);
  nw_protocol_definition_set_metadata_allocator( (void *)nw_protocol_copy_http_cookie_definition_http_cookie_definition,  (uint64_t)nw_http_cookie_allocate_metadata,  (uint64_t)nw_http_cookie_deallocate_metadata);
  nw_protocol_definition_set_options_serializer( (void *)nw_protocol_copy_http_cookie_definition_http_cookie_definition,  0,  (uint64_t)nw_http_cookie_serialize_options,  (uint64_t)nw_http_cookie_deserialize_options);
  if (nw_protocol_http_cookie_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_cookie_identifier::onceToken, &__block_literal_global_15656);
  }
  return nw_protocol_register_handle( (uint64_t)&nw_protocol_http_cookie_identifier::http_cookie_protocol_identifier,  (void *)nw_protocol_copy_http_cookie_definition_http_cookie_definition,  (uint64_t)nw_protocol_http_cookie_create,  0LL);
}

BOOL nw_http_cookie_allocate_options(void *a1)
{
  id v1 = a1;
  id v2 = (id *)calloc(1uLL, 0x28uLL);
  if (!v2)
  {
    __nwlog_obj();
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    id v5 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v5);
    if (result)
    {
      __break(1u);
      return result;
    }

    free(v5);
  }

  if (nw_http_cookie_storage_copy_shared_token[0] != -1) {
    dispatch_once(nw_http_cookie_storage_copy_shared_token, &__block_literal_global_63157);
  }
  objc_storeStrong(v2, (id)nw_http_cookie_storage_copy_shared_storage);

  return (BOOL)v2;
}

BOOL nw_http_cookie_copy_options(void *a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    char v25 = "nw_http_cookie_copy_options";
    os_log_type_t v12 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault((const char *)v12, &type, &v22))
    {
LABEL_27:
      if (v12) {
        free(v12);
      }
      id v4 = 0LL;
      goto LABEL_7;
    }

    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v25 = "nw_http_cookie_copy_options";
        int v15 = "%{public}s called with null existing_handle";
LABEL_25:
        _os_log_impl(&dword_181A5C000, v13, v14, v15, buf, 0xCu);
      }
    }

    else
    {
      if (v22)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v14 = type;
        BOOL v21 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v21)
          {
            *(_DWORD *)int buf = 136446466;
            char v25 = "nw_http_cookie_copy_options";
            __int16 v26 = 2082;
            uint64_t v27 = (uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v13,  v14,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_27;
        }

        if (!v21) {
          goto LABEL_26;
        }
        *(_DWORD *)int buf = 136446210;
        char v25 = "nw_http_cookie_copy_options";
        int v15 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_25;
      }

      __nwlog_obj();
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v25 = "nw_http_cookie_copy_options";
        int v15 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_25;
      }
    }

void nw_http_cookie_deallocate_options(uint64_t a1, void **a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    id v3 = *a2;
    *a2 = 0LL;

    id v4 = a2[1];
    a2[1] = 0LL;

    id v5 = a2[2];
    if (v5)
    {
      free(v5);
      a2[2] = 0LL;
    }

    id v6 = a2[3];
    a2[3] = 0LL;

    free(a2);
    return;
  }

  __nwlog_obj();
  id v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  int v17 = "nw_http_cookie_deallocate_options";
  id v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v8, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      char v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v17 = "nw_http_cookie_deallocate_options";
        BOOL v11 = "%{public}s called with null allocated_handle";
LABEL_18:
        _os_log_impl(&dword_181A5C000, v9, v10, v11, buf, 0xCu);
      }
    }

    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        char v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v10 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)int buf = 136446466;
            int v17 = "nw_http_cookie_deallocate_options";
            __int16 v18 = 2082;
            id v19 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v9,  v10,  "%{public}s called with null allocated_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }

        if (!v13) {
          goto LABEL_19;
        }
        *(_DWORD *)int buf = 136446210;
        int v17 = "nw_http_cookie_deallocate_options";
        BOOL v11 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_18;
      }

      __nwlog_obj();
      char v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v17 = "nw_http_cookie_deallocate_options";
        BOOL v11 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_18;
      }
    }

BOOL nw_http_cookie_options_compare(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL result = a2 == a3;
  if (a2 != a3 && a2 && a3)
  {
    if (*(void *)a2 != *(void *)a3
      || *(void *)(a2 + 8) != *(void *)(a3 + 8)
      || *(void *)(a2 + 24) != *(void *)(a3 + 24))
    {
      return 0LL;
    }

    id v6 = *(const char **)(a2 + 16);
    id v7 = *(const char **)(a3 + 16);
    if (v6 != v7 && v6 && v7)
    {
      if (!strcmp(v6, v7)) {
        return ((*(_BYTE *)(a3 + 32) ^ *(_BYTE *)(a2 + 32)) & 7) == 0
      }
            && ((*(_BYTE *)(a3 + 32) ^ *(_BYTE *)(a2 + 32)) & 8) == 0;
    }

    else if (v6 == v7)
    {
      return ((*(_BYTE *)(a3 + 32) ^ *(_BYTE *)(a2 + 32)) & 7) == 0
          && ((*(_BYTE *)(a3 + 32) ^ *(_BYTE *)(a2 + 32)) & 8) == 0;
    }

    return 0LL;
  }

  return result;
}

BOOL nw_http_cookie_allocate_metadata(void *a1)
{
  id v1 = a1;
  id v2 = calloc(1uLL, 1uLL);
  if (v2) {
    goto LABEL_2;
  }
  __nwlog_obj();
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  id v5 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:

    return (BOOL)v2;
  }

  __break(1u);
  return result;
}

void nw_http_cookie_deallocate_metadata(int a1, void *a2)
{
  if (a2) {
    free(a2);
  }
}

BOOL nw_http_cookie_serialize_options(void *a1, uint64_t a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    BOOL result = nw_http_cookie_copy_options(a1, a2);
    *a3 = 40LL;
    return result;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  int v15 = "nw_http_cookie_serialize_options";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v15 = "nw_http_cookie_serialize_options";
        char v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      }
    }

    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)int buf = 136446466;
            int v15 = "nw_http_cookie_serialize_options";
            __int16 v16 = 2082;
            int v17 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }

        if (!v11) {
          goto LABEL_18;
        }
        *(_DWORD *)int buf = 136446210;
        int v15 = "nw_http_cookie_serialize_options";
        char v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }

      __nwlog_obj();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        int v15 = "nw_http_cookie_serialize_options";
        char v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }

BOOL nw_http_cookie_deserialize_options(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = v5;
  if (a2)
  {
    if (a3 == 40)
    {
      BOOL v7 = nw_http_cookie_copy_options(v5, a2);
      goto LABEL_4;
    }

    __nwlog_obj();
    char v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    char v22 = "nw_http_cookie_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)int buf = 136446210;
          char v22 = "nw_http_cookie_deserialize_options";
          BOOL v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_cookie_options))";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      if (!v19)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)int buf = 136446210;
          char v22 = "nw_http_cookie_deserialize_options";
          BOOL v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_cookie_options)), backt"
                "race limit exceeded";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)int buf = 136446210;
          char v22 = "nw_http_cookie_deserialize_options";
          BOOL v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_cookie_options)), no backtrace";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      if (!v18) {
        goto LABEL_22;
      }
      *(_DWORD *)int buf = 136446466;
      char v22 = "nw_http_cookie_deserialize_options";
      __int16 v23 = 2082;
      id v24 = backtrace_string;
      int v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_cookie_options)), dumping b"
            "acktrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }

  else
  {
    __nwlog_obj();
    char v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    char v22 = "nw_http_cookie_deserialize_options";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)int buf = 136446210;
          char v22 = "nw_http_cookie_deserialize_options";
          BOOL v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
        }

id nw_protocol_copy_http_alt_svc_definition()
{
  if (nw_protocol_copy_http_alt_svc_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_alt_svc_definition_onceToken, &__block_literal_global_14_72923);
  }
  return (id)nw_protocol_copy_http_alt_svc_definition_http_alt_svc_definition;
}

BOOL __nw_protocol_copy_http_alt_svc_definition_block_invoke()
{
  if (nw_protocol_http_alt_svc_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_alt_svc_identifier::onceToken, &__block_literal_global_70626);
  }
  int v0 = nw_protocol_definition_create_with_identifier((__int128 *)nw_protocol_http_alt_svc_identifier::protocol_identifier);
  id v1 = (void *)nw_protocol_copy_http_alt_svc_definition_http_alt_svc_definition;
  nw_protocol_copy_http_alt_svc_definition_http_alt_svc_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator( (void *)nw_protocol_copy_http_alt_svc_definition_http_alt_svc_definition,  (uint64_t)nw_http_alt_svc_allocate_options,  (uint64_t)nw_http_alt_svc_copy_options,  (uint64_t)nw_http_alt_svc_deallocate_options);
  nw_protocol_definition_set_options_comparator( (void *)nw_protocol_copy_http_alt_svc_definition_http_alt_svc_definition,  (uint64_t)nw_http_alt_svc_options_compare);
  nw_protocol_definition_set_options_serializer( (void *)nw_protocol_copy_http_alt_svc_definition_http_alt_svc_definition,  0,  (uint64_t)nw_http_alt_svc_serialize_options,  (uint64_t)nw_http_alt_svc_deserialize_options);
  if (nw_protocol_http_alt_svc_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_alt_svc_identifier::onceToken, &__block_literal_global_70626);
  }
  return nw_protocol_register_handle( (uint64_t)nw_protocol_http_alt_svc_identifier::protocol_identifier,  (void *)nw_protocol_copy_http_alt_svc_definition_http_alt_svc_definition,  (uint64_t)nw_protocol_http_alt_svc_create,  0LL);
}

BOOL nw_http_alt_svc_allocate_options(void *a1)
{
  id v1 = a1;
  id v2 = (id *)calloc(1uLL, 0x10uLL);
  if (!v2)
  {
    __nwlog_obj();
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    id v5 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v5);
    if (result)
    {
      __break(1u);
      return result;
    }

    free(v5);
  }

  if (nw_http_alt_svc_storage_copy_shared_token != -1) {
    dispatch_once(&nw_http_alt_svc_storage_copy_shared_token, &__block_literal_global_52133);
  }
  objc_storeStrong(v2, (id)nw_http_alt_svc_storage_copy_shared_storage);

  return (BOOL)v2;
}

BOOL nw_http_alt_svc_copy_options(void *a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    id v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    BOOL v18 = "nw_http_alt_svc_copy_options";
    BOOL v7 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault((const char *)v7, &type, &v15))
    {
LABEL_22:
      if (v7) {
        free(v7);
      }
      id v4 = 0LL;
      goto LABEL_4;
    }

    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v18 = "nw_http_alt_svc_copy_options";
        os_log_type_t v10 = "%{public}s called with null existing_handle";
LABEL_20:
        _os_log_impl(&dword_181A5C000, v8, v9, v10, buf, 0xCu);
      }
    }

    else
    {
      if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v9 = type;
        BOOL v14 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)int buf = 136446466;
            BOOL v18 = "nw_http_alt_svc_copy_options";
            __int16 v19 = 2082;
            uint64_t v20 = (uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v8,  v9,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }

        if (!v14) {
          goto LABEL_21;
        }
        *(_DWORD *)int buf = 136446210;
        BOOL v18 = "nw_http_alt_svc_copy_options";
        os_log_type_t v10 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_20;
      }

      __nwlog_obj();
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v18 = "nw_http_alt_svc_copy_options";
        os_log_type_t v10 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }

void nw_http_alt_svc_deallocate_options(uint64_t a1, void **a2)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    id v3 = *a2;
    *a2 = 0LL;

    free(a2);
    return;
  }

  __nwlog_obj();
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  BOOL v14 = "nw_http_alt_svc_deallocate_options";
  id v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v14 = "nw_http_alt_svc_deallocate_options";
        os_log_type_t v8 = "%{public}s called with null allocated_handle";
LABEL_16:
        _os_log_impl(&dword_181A5C000, v6, v7, v8, buf, 0xCu);
      }
    }

    else
    {
      if (v11)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v7 = type;
        BOOL v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)int buf = 136446466;
            BOOL v14 = "nw_http_alt_svc_deallocate_options";
            __int16 v15 = 2082;
            BOOL v16 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v6,  v7,  "%{public}s called with null allocated_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }

        if (!v10) {
          goto LABEL_17;
        }
        *(_DWORD *)int buf = 136446210;
        BOOL v14 = "nw_http_alt_svc_deallocate_options";
        os_log_type_t v8 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_16;
      }

      __nwlog_obj();
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v14 = "nw_http_alt_svc_deallocate_options";
        os_log_type_t v8 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_16;
      }
    }

BOOL nw_http_alt_svc_options_compare(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL result = a2 == a3;
  if (a2 != a3 && a2 && a3) {
    return *(void *)a2 == *(void *)a3 && ((*(unsigned __int8 *)(a3 + 8) ^ *(unsigned __int8 *)(a2 + 8)) & 1) == 0;
  }
  return result;
}

BOOL nw_http_alt_svc_serialize_options(void *a1, uint64_t a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    BOOL result = nw_http_alt_svc_copy_options(a1, a2);
    *a3 = 16LL;
    return result;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  __int16 v15 = "nw_http_alt_svc_serialize_options";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v15 = "nw_http_alt_svc_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      }
    }

    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)int buf = 136446466;
            __int16 v15 = "nw_http_alt_svc_serialize_options";
            __int16 v16 = 2082;
            uint64_t v17 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }

        if (!v11) {
          goto LABEL_18;
        }
        *(_DWORD *)int buf = 136446210;
        __int16 v15 = "nw_http_alt_svc_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }

      __nwlog_obj();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        __int16 v15 = "nw_http_alt_svc_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }

BOOL nw_http_alt_svc_deserialize_options(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = v5;
  if (a2)
  {
    if (a3 == 16)
    {
      BOOL v7 = nw_http_alt_svc_copy_options(v5, a2);
      goto LABEL_4;
    }

    __nwlog_obj();
    BOOL v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    uint64_t v22 = "nw_http_alt_svc_deserialize_options";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v22 = "nw_http_alt_svc_deserialize_options";
          BOOL v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_alt_svc_options))";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      if (!v19)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v22 = "nw_http_alt_svc_deserialize_options";
          BOOL v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_alt_svc_options)), back"
                "trace limit exceeded";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v22 = "nw_http_alt_svc_deserialize_options";
          BOOL v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_alt_svc_options)), no backtrace";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      if (!v18) {
        goto LABEL_22;
      }
      *(_DWORD *)int buf = 136446466;
      uint64_t v22 = "nw_http_alt_svc_deserialize_options";
      __int16 v23 = 2082;
      id v24 = backtrace_string;
      uint64_t v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_alt_svc_options)), dumping "
            "backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    uint64_t v22 = "nw_http_alt_svc_deserialize_options";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v22 = "nw_http_alt_svc_deserialize_options";
          BOOL v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
        }

NWConcrete_nw_protocol_options *nw_http_cookie_create_options()
{
  if (nw_protocol_copy_http_cookie_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_cookie_definition_onceToken, &__block_literal_global_13_72893);
  }
  return nw_protocol_create_options((void *)nw_protocol_copy_http_cookie_definition_http_cookie_definition);
}

NWConcrete_nw_protocol_options *nw_http_alt_svc_create_options()
{
  if (nw_protocol_copy_http_alt_svc_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_alt_svc_definition_onceToken, &__block_literal_global_14_72923);
  }
  return nw_protocol_create_options((void *)nw_protocol_copy_http_alt_svc_definition_http_alt_svc_definition);
}

const char *nw_http_version_to_string(unsigned int a1)
{
  if (a1 > 5) {
    return "<unknown>";
  }
  else {
    return off_189BC67C0[a1];
  }
}

char *nw_http_version_get_alpn(int a1)
{
  else {
    return off_189BC67F0[a1 - 3];
  }
}

NWConcrete_nw_protocol_options *nw_http_authentication_create_options()
{
  if (nw_protocol_copy_http_authentication_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_29_72963);
  }
  return nw_protocol_create_options((void *)nw_protocol_copy_http_authentication_definition_http_authentication_definition);
}

BOOL __nw_protocol_copy_http_authentication_definition_block_invoke()
{
  if (nw_protocol_http_authentication_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_authentication_identifier::onceToken, &__block_literal_global_13809);
  }
  int v0 = nw_protocol_definition_create_with_identifier(&nw_protocol_http_authentication_identifier::protocol_identifier);
  id v1 = (void *)nw_protocol_copy_http_authentication_definition_http_authentication_definition;
  nw_protocol_copy_http_authentication_definition_http_authentication_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator( (void *)nw_protocol_copy_http_authentication_definition_http_authentication_definition,  (uint64_t)nw_http_authentication_allocate_options,  (uint64_t)nw_http_authentication_copy_options,  (uint64_t)nw_http_authentication_deallocate_options);
  nw_protocol_definition_set_options_equality_check( (void *)nw_protocol_copy_http_authentication_definition_http_authentication_definition,  (uint64_t)nw_http_authentication_options_are_equal);
  nw_protocol_definition_set_options_serializer( (void *)nw_protocol_copy_http_authentication_definition_http_authentication_definition,  0,  (uint64_t)nw_http_authentication_serialize_options,  (uint64_t)nw_http_authentication_deserialize_options);
  if (nw_protocol_http_authentication_identifier::onceToken != -1) {
    dispatch_once(&nw_protocol_http_authentication_identifier::onceToken, &__block_literal_global_13809);
  }
  return nw_protocol_register_handle( (uint64_t)&nw_protocol_http_authentication_identifier::protocol_identifier,  (void *)nw_protocol_copy_http_authentication_definition_http_authentication_definition,  (uint64_t)nw_protocol_http_authentication_create,  0LL);
}

BOOL nw_http_authentication_allocate_options(void *a1)
{
  id v1 = a1;
  id v2 = (id *)calloc(1uLL, 0x30uLL);
  if (!v2)
  {
    __nwlog_obj();
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    id v5 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v5);
    if (result)
    {
      __break(1u);
      return result;
    }

    free(v5);
  }

  if (nw_authentication_credential_storage_copy_shared_token != -1) {
    dispatch_once(&nw_authentication_credential_storage_copy_shared_token, &__block_literal_global_26106);
  }
  objc_storeStrong(v2 + 1, (id)nw_authentication_credential_storage_copy_shared_storage);

  return (BOOL)v2;
}

BOOL nw_http_authentication_copy_options(void *a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    uint64_t v20 = "nw_http_authentication_copy_options";
    os_log_type_t v9 = (void *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault((const char *)v9, &type, &v17))
    {
LABEL_22:
      if (v9) {
        free(v9);
      }
      id v4 = 0LL;
      goto LABEL_4;
    }

    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v20 = "nw_http_authentication_copy_options";
        os_log_type_t v12 = "%{public}s called with null existing_handle";
LABEL_20:
        _os_log_impl(&dword_181A5C000, v10, v11, v12, buf, 0xCu);
      }
    }

    else
    {
      if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v11 = type;
        BOOL v16 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)int buf = 136446466;
            uint64_t v20 = "nw_http_authentication_copy_options";
            __int16 v21 = 2082;
            uint64_t v22 = (uint64_t)backtrace_string;
            _os_log_impl( &dword_181A5C000,  v10,  v11,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }

        if (!v16) {
          goto LABEL_21;
        }
        *(_DWORD *)int buf = 136446210;
        uint64_t v20 = "nw_http_authentication_copy_options";
        os_log_type_t v12 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_20;
      }

      __nwlog_obj();
      BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v20 = "nw_http_authentication_copy_options";
        os_log_type_t v12 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }

void nw_http_authentication_deallocate_options(uint64_t a1, void **a2)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    id v3 = *a2;
    *a2 = 0LL;

    id v4 = a2[5];
    a2[5] = 0LL;

    id v5 = a2[1];
    a2[1] = 0LL;

    id v6 = a2[2];
    a2[2] = 0LL;

    BOOL v7 = a2[3];
    a2[3] = 0LL;

    os_log_type_t v8 = a2[4];
    a2[4] = 0LL;

    free(a2);
    return;
  }

  __nwlog_obj();
  os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  char v19 = "nw_http_authentication_deallocate_options";
  BOOL v10 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v10, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v19 = "nw_http_authentication_deallocate_options";
        BOOL v13 = "%{public}s called with null allocated_handle";
LABEL_16:
        _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
      }
    }

    else
    {
      if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        BOOL v15 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)int buf = 136446466;
            char v19 = "nw_http_authentication_deallocate_options";
            __int16 v20 = 2082;
            __int16 v21 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v11,  v12,  "%{public}s called with null allocated_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }

        if (!v15) {
          goto LABEL_17;
        }
        *(_DWORD *)int buf = 136446210;
        char v19 = "nw_http_authentication_deallocate_options";
        BOOL v13 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_16;
      }

      __nwlog_obj();
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)int buf = 136446210;
        char v19 = "nw_http_authentication_deallocate_options";
        BOOL v13 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_16;
      }
    }

BOOL nw_http_authentication_options_are_equal(uint64_t a1, void *a2, void *a3)
{
  BOOL result = a2 == a3;
  if (a2 != a3 && a2 && a3) {
    return *a2 == *a3 && a2[1] == a3[1] && a2[2] == a3[2] && a2[3] == a3[3] && a2[4] == a3[4] && a2[5] == a3[5];
  }
  return result;
}

BOOL nw_http_authentication_serialize_options(void *a1, uint64_t a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    BOOL result = nw_http_authentication_copy_options(a1, a2);
    *a3 = 48LL;
    return result;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  BOOL v15 = "nw_http_authentication_serialize_options";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v15 = "nw_http_authentication_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_181A5C000, v7, v8, v9, buf, 0xCu);
      }
    }

    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v8 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)int buf = 136446466;
            BOOL v15 = "nw_http_authentication_serialize_options";
            __int16 v16 = 2082;
            char v17 = backtrace_string;
            _os_log_impl( &dword_181A5C000,  v7,  v8,  "%{public}s called with null existing_handle, dumping backtrace:%{public}s",  buf,  0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }

        if (!v11) {
          goto LABEL_18;
        }
        *(_DWORD *)int buf = 136446210;
        BOOL v15 = "nw_http_authentication_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }

      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v15 = "nw_http_authentication_serialize_options";
        os_log_type_t v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }

BOOL nw_http_authentication_deserialize_options(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = v5;
  if (a2)
  {
    if (a3 == 48)
    {
      BOOL v7 = nw_http_authentication_copy_options(v5, a2);
      goto LABEL_4;
    }

    __nwlog_obj();
    BOOL v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    uint64_t v22 = "nw_http_authentication_deserialize_options";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v22 = "nw_http_authentication_deserialize_options";
          BOOL v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_authentication_options))";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      if (!v19)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v22 = "nw_http_authentication_deserialize_options";
          BOOL v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_authentication_options)"
                "), backtrace limit exceeded";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      BOOL v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v22 = "nw_http_authentication_deserialize_options";
          BOOL v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_authentication_options)), no backtrace";
          goto LABEL_31;
        }

        goto LABEL_32;
      }

      if (!v18) {
        goto LABEL_22;
      }
      *(_DWORD *)int buf = 136446466;
      uint64_t v22 = "nw_http_authentication_deserialize_options";
      __int16 v23 = 2082;
      uint64_t v24 = backtrace_string;
      char v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_authentication_options)), d"
            "umping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_181A5C000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }

  else
  {
    __nwlog_obj();
    os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 136446210;
    uint64_t v22 = "nw_http_authentication_deserialize_options";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)int buf = 136446210;
          uint64_t v22 = "nw_http_authentication_deserialize_options";
          BOOL v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_181A5C000, v11, v12, v13, buf, 0xCu);
        }

id nw_protocol_copy_http_authentication_definition()
{
  if (nw_protocol_copy_http_authentication_definition_onceToken != -1) {
    dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_29_72963);
  }
  return (id)nw_protocol_copy_http_authentication_definition_http_authentication_definition;
}

BOOL nw_protocol_options_is_http_authentication(void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    id v1 = a1;
    id v2 = v1[1];

    if (nw_protocol_copy_http_authentication_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_29_72963);
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe( (uint64_t)v2,  nw_protocol_copy_http_authentication_definition_http_authentication_definition);

    return is_equal_unsafe;
  }

  __nwlog_obj();
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)int buf = 136446210;
  BOOL v16 = "nw_protocol_options_is_http_authentication";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_protocol_options_is_http_authentication";
        _os_log_impl(&dword_181A5C000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }

    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136446466;
          BOOL v16 = "nw_protocol_options_is_http_authentication";
          __int16 v17 = 2082;
          BOOL v18 = backtrace_string;
          _os_log_impl( &dword_181A5C000,  v7,  v10,  "%{public}s called with null options, dumping backtrace:%{public}s",  buf,  0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }

      if (v11)
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_protocol_options_is_http_authentication";
        _os_log_impl(&dword_181A5C000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }

    else
    {
      __nwlog_obj();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)int buf = 136446210;
        BOOL v16 = "nw_protocol_options_is_http_authentication";
        _os_log_impl( &dword_181A5C000,  v7,  v12,  "%{public}s called with null options, backtrace limit exceeded",  buf,  0xCu);
      }
    }
  }